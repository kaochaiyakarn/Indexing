functional array fusion draft manuel chakravarty university new south wales school computer science engineering sydney australia cse unsw edu au gabriele keller university technology sydney faculty information technology sydney australia keller uts edu au introduces new approach compiling array algorithms functional languages 
speci cally aiming ecient implementation irregular array algorithms hard implement conventional array languages fortran 
optimise storage layout arrays containing complex data structures reduce runtime functions operating arrays means equational program transformations 
particular discusses novel form combinator loop fusion removing intermediate structures optimises memory hierarchy 
identify combinator named loopp provides general scheme iterating array conjunction array constructor replicatep sucient express wide range array algorithms 
basis de ne equational transformation rules combine traversals loopp replicatep sequences applications loopp single loopp traversal 
approach naturally generalises parallel implementation includes facilities optimising load balancing communication 
prototype implementation rewrite rule pragma glasgow haskell compiler signi cantly faster standard haskell arrays approaches speed hand coded simple examples 

functional programming languages typically focus lists arrays due elegant algebraic properties 
notable exceptions special purpose languages sisal sac fish target applications computational science engineering conventionally implemented array centred languages fortran 
consequently languages tend syntax closely modelled imperative predecessors fact sac abbreviation single assignment fish heavy imperative features 
line approach sisal sac fish implementations focus highperformance computing community calls regular algorithms 
operate data structures conveniently stored rectangular arrays iterate regularly shaped index spaces 
applications suf cient 
irregular algorithms operate sparse data structures sparse matrices arrays trees adaptive hierarchical numeric algorithms require richer data structures index spaces 
sophisticated data structures certainly key feature modern functional languages stands reason want impact array programming functional languages try beat imperative languages applications irregular algorithms central 
having realised startling arrays functional languages focused regular code 
may traditional focus regular problems array languages 
reason probably irregular algorithms independent language harder implement eciently especially parallel architectures 
blelloch observed irregular algorithm transformed operates attened representation original nested structures uses explicit structural information represent irregularity original data 
previously shown technique known name attening transformation generalised apply typed general purpose functional languages haskell standard ml 
attening half story 
attened array algorithm combinator generates intermediate structures 
fact far away previous identi ed ecient formulations array algorithms general purpose functional languages unboxed updatable arrays 
unboxed array stores binary representation element integer number directly boxed array store pointer heap allocated cell containing integer value 
unboxed arrays save memory allow compiler better predict memory layout lead large performance improvements due better cache utilisation 
updatable single threaded arrays avoid super uous copying 
approaches aim similar eciency sistent arrays support unboxed values 
clearly demonstrates performance difference straight forward implementation array algorithm lazy arrays optimised version unboxed updatable arrays 
performs transformation straight forward optimised implementation manually 
surely want 
goal research simply stated purely functional combinator implementation array algorithm automatically produce ef cient implementation avoids intermediate structures uses unboxed arrays destructive updates 
achieve novel form loop fusion deforestation arrays combination standard optimisations inlining specialisation operating overloaded unboxed arrays 
speci cally interested array code generated attening transformation implementation approach haskell techniques restricted attening generated code haskell generally applicable 
precisely contributions identify array combinators array constructor loop abstraction sucient express wide range array computations section 
novel form loop fusion equational rewrite rules consecutive loops loops array construction section 
show fusion arguments array variant zip realised case deforestation techniques lists handle section 
demonstrate array fusion applied function boundaries recursive functions section 
outline implementation number advanced features glasgow haskell compiler unboxed types mutable arrays optimising rewrite rules section 
exclusively internals array library ordinary user provided clean purely functional interface 
runtime gures implementation section approaches speed hand coded simple examples loop fusion new technique 
extensively studied see varying stages sophistication probably high performance compilers 
increase locality including avoid communication increase granularity parallelism 
uncommon features approach explicit handling segmented loops crucial irregular codes equational rewrite rules express loop fusion 
simpli es implementation accessible formal analysis 
rst glance little relevance arrays standard ml haskell typecheck flattening core code generation code assembler simpli er syntactic support parallel arrays nested removes array comprehension additional rules fusion input simpli er outline ghc enriched array support mutable arrays explicitly manipulated programmer 
exploring array model similar discussing 
remainder organised follows section provides overview various transformations apply 
section outlines interface implementation array library 
section presents array combinators fusion rules de ned introduces rules needed fuse functions consuming single array 
section covers elaborate case functions consuming multiple arrays fusion function boundaries 
section presents benchmarks 
section discusses related concludes 

big picture start overview program transformations compile array programs highperformance code 
provide opportunity motivate choice arrays lists exactly isolate contribution 
outlines main phases glasgow haskell compiler ghc enriched support arrays extensions set bold italic 
compiler frontend reads source language haskell extended syntactic sugar arrays indicated gure array notation 
type checking converts input core ghc central intermediate representation 
extend attening transformation formalisation 
step maps array operations source language functions provided array library ghc simpli er optimises core language wide range source source transformations 
extend transformation equational loop fusion ghc mechanism rewrite rules speci ed pragmas source language 
code generation ected 
parallel arrays example consider function multiplies sparse matrix vector sparse matrix stored called compressed sparse row format 
format represents sparse row array column index value pairs pair represents non zero element sparse matrix 
array sparse rows implements sparse matrix 
improve readability take freedom special syntax 
array constructor haskell code 
please note haskell ideas applied typed functional languages standard ml 
type int float index value type consider multiplication sparse matrix dense vector resulting dense vector 
little special syntax array comprehensions implement sparse matrix vector multiplication function follows smvm float float smvm sm vec vec col col row products row row sm function adds elements array operator represents indexing 
small algorithm shows conventional lists appropriate algorithms scienti computing 
indexing inner array comprehension frequently executed index values dependent input data dicult statically optimise indexing 
processed data structure computational behaviour smvm highly irregular number non zero elements di erent rows may vary signi cantly 
consequently implementation smvm conventional array language fortran straight forward arrays languages required rectangular sub structures size 
nested arrays allow sub structures varying size appropriate data structure 
important algorithms example adaptive iterative algorithms similar properties 
blelloch demonstrated irregular nested array language suited expressing parallelism algorithms smvm 
fact implementation technique originally motivated desire improve performance node programs parallel implementations nested array languages 
consequently approach lead sequential performance array codes scales case parallel execution variety architectures 
changing data representation de nition smvm rst major program transformation converts data structures containing arrays non basic type structures containing arrays basic type rewrites nested array iterations conceptual reason special syntax 
just matter presentation 
single iteration 
transformation called attening rst formulation due blelloch 
bene transformation twofold traversals arrays basic types implemented ciently due cache ects case lazy languages opportunities unboxing increased improves load balancing data distribution parallel implementation 
transformation mainly studied second reason 
plenty literature discussing merits attening parallelism 
extended attening suitable typed functional languages haskell standard ml 
merely want summarise main properties code resulting attening input transformations discussed 
details attening transformation refer 
look implementation smvm attening 
denote type function names attened variants types functions underlining 
rst important point attening attened data structures contain arrays basic type int float type constructor parray arrays distinguish nested arrays source language 
flattening represents arrays arrays float arrays data vector containing elements segment descriptor storing structure lengths sub arrays 
example float parray float type parray int segment descriptor value represented data vector segment descriptor 
arrays pairs represented pair arrays 
considering rules type clear 
type parray int parray float type types look code transformation 
attened code smvm new functions operating arrays 
smvm parray float parray float smvm ind val vec vec ind val capital indicates segmented function function takes segmentation array account 
case data vector corresponding segment descriptor sums sub arrays determined segment descriptor individually resulting array sums 
operation known segmented sum known useful high performance implementation array algorithms 
permutation operation permutation vector gives source destination index value 
list array combinators appear attened array code 
common ones de ned appendix ecient implementation programs constructed combinators aim programs generated attening implemented manually secondary 
fusion array operations assume array programs operating structures containing arrays values type parray basic type computations expressed array combinators de ned appendix rst contribution array combinators matching set fusion rules sucient expressing equational array fusion 
combinators array constructor replicatep array consumer loopp constructor replicatep simply creates array length elements having value type loopp loopp 
mutator 
acc seg 
start 
acc bool seg 
initial 
parray haskell value just type expression form loopp pa traverses segmented input array pa left right 
function applied element array applied segment 
traversal accumulator initialised acc maintained 
mutated loop produces results array containing values produced rst component result array accumulator values sampled predicate yields true nal accumulator value 
structure come surprise loopp express various forms mapping reduction scan permutation functions combinations 
sparse matrix multiplication function smvm expressed follows zipp array version haskell list function zip smvm parray float parray float smvm ind val vec loopp combine const const true zipp ind val combine acc vec acc code essentially traverses segmented array index value pairs iteration extracts vector element vec corresponding column index matrix value product added running sum maintained accumulator 
running sum stored accumulator array const true speci es reset zero segment boundary const speci es 
haskell operator denotes function application lowest precedence 
implementation terms loopp fusion rules combine computations contained attened function smvm fully fused code discussed detail rest 
discussed section shows improved running time fused version smvm algorithm implemented standard haskell arrays 

basic arrays described section attening transformation transform arrays complex type functions operating code arrays basic type 
representation fusion performed 
brie sketch interface implementation array library 
implementation ghc explicit support unboxed values mutable arrays 
interface parray type arrays element type held unboxed 
manipulated overloaded functions introduced type class pae standing parallel array element class pae parray int instances pae basic haskell types int float 
overloading advantage store elements unboxed arrays turn improves performance signi cantly cf 
benchmark 
fact overloading approach unboxed arrays inspired haskell libraries coming ghc turn follow clean array library 
furthermore abbreviations segment descriptors segmented arrays type parray int type parray library provides array versions common list processing functions example mapp segmented versions sense 
de nition functions terms elementary functions provided appendix library implements strict arrays single element array demanded array evaluated 
exible lazy arrays necessary guarantee clear parallel interpretation arrays 
example simple combinator array program consider sumsq int int sumsq mapp square square rst generates array containing values upto scalar function square mapped 
result applying mapp summed 
note intermediate arrays code fusion eliminate 
function leaves reduction order unspeci ed requires associative reduction function useful parallel implementation 
implementation previous subsection list methods de ned class pae fact accessible library internally de ne exported array functions 
reason functions state monadic functions operate destructive variant particular functions allocating arrays reading writing arrays 
details destructive array functions haskell see 
destructive functions implement primitive array combinators replicatep array constructor loopp array destructor mutator zipp array tupling 
implement user level functions mapp 
primitive array combinators discussed detail section 

fusion simple case section discussed concepts equational fusion 
need small number combinators de ne fusion rules suf cient implement subcomputations want consider fusion 
unfortunately general trivial express possible forms traversing data structure combinators tend develop complex machinery 
complex mechanisms needed convert arbitrary recursive structure traversals combinator form required equational fusion 
successful approach terms actual usage equational fusion foldr build cuts compromises approach practical 
twofold expressiveness basic combinators restricted traversals expressed terms combinator library haskell prelude subjected fusion 
equational fusion particularly attractive arrays hardly traversed recursively 
transformed combinators array comprehensions compile combinator form 
compromises foldr build really issue array programs 
loopp constructor functions traverse arrays expressed loopp constructor 
described intuition constructor subsection de ne 
equations de ne semantics loopp terms nested applications note equations valid haskell program loopp pa loop pa pa loop pa fst pa just pa pa functions second accumulator value come play segmented arrays 
sake simplicity restrict examples rules remainder non segmented loops 
appendix lists rules general case compiler 
de ne non segmented loop constructor loops special case loopp loops mf pa loopp mf id const false pa loops construct express functions mapp functions implemented loops mapp ef just loops ef ef acc acc loops ef way express functions traverse arrays loops loopp sucient solve problem example traverse existing array generates new loopp accomplish 
mapp expect array input trivial 
generators fortunately turns single array constructor sucient combination loopp express array combinators 
consider example replicatep max loops acc just acc acc express replicatep replication unit type value succeeding mapp function replicatep mapp replicatep summarise generator expressed terms replicatep array traversals turn expressed loopp due transformation array structures mentioned subsection array elements unit type internally simply represented length integer value 
replicatep generate array 
application mapp changes 
mapp expressed loopp fused loop consumes structure completely avoid generating intermediate array 
example naive de nition terms loops replicatep follows loops loopp pa just map just add scan size max pa replicatep size de nition course optimal contains array traversals 
library de nition contains single loop loopp pa just essentially de nition obtained fusing loops marked grey box single loop 
fusion rules loops specify fusion rules consecutive loops 
rewrite rules form vn exp 
exp variables representing arbitrary expressions 
read replace occurrence exp exp mf sa sp start mf sa sp start pa loops mf st loops mf st pa 
mf acc acc case ef acc acc 
acc acc just acc case ef acc acc 
acc acc just acc 
just acc acc drop loops mf st st pa function drop extract components loop result loopp returns triple result array array segment accumulator extracts arrays 
fusing loops accumulator values loops necessary computations drop discards accumulator values rst loop result 
functions de ned drop pae pae parray 
parray drop pa accs pa accs acc loop fusion introduces drop eliminated case subsequent equality holds drop crucial fusing multiple successive loopp initial loop de nitions arrays functions rst component result ef case reduction operations just simpli er ghc able remove case statements fused function body 
ghc rewrite rules ghc supports speci cation equational rewrite rules simpli er see apply optimisations 
rules speci ed programmer included pragmas source les 
case part parray library implementation 
example elimination drop mentioned previous subsection may formulated rules drop forall drop rule optimiser spot occurrences pattern drop arbitrary expression replace right hand side rule 
rewrite mechanism ered ghc facilitates implementation array support considerably possible provide prototypical implementation time frame 
implementation rules practise challenging due interaction optimisations inlining 
currently formulation fusion formalism terms rewrite rules requires precise understanding fusion rules semantics ghc rules mechanism interaction optimisations 
works go back sumsq example see di erent techniques mechanisms interact ghc simpli cation strategies 
unfolding de nitions gave mapp sumsq de nition sumsq loops loops loops pa acc acc just square mapp just enum size max pa replicatep size pa size change omit steps transformation 
fusion rules applicable fuses enum mapp loops single loop 
rst component result pair just value independent actual values arguments 
case distinction introduced fusion rule eliminated compiler yielding de nition sumsq loops loops pa just square acc acc transformation step fuses remaining loops resulting de nition single loop create array sumsq loops square size max pa replicatep size 
advanced fusion presentation fusion far ignored additional complications 
firstly functions consume arrays lockstep 
want fuse functions producers arrays 
tricky important list fusion techniques able fuse consumers 
secondly fusion rule re fused combinators adjacent program code usually achieve combining inlining simpli cation 
situations function boundaries recursive functions inlining applicable 
remainder section shall illustrate solutions problems 
traversing arrays simultaneously attened version sparse matrix vector multiplication code smvm section contained equation implements multiplication multiplication lifted pointwise 
smvm applied result arguments smvm appendix de ned loopp obviously fuse furthermore applications smvm function inlined second argument may result application loopp replicatep case want fuse arguments 
arguments right form result replicatep loopp want fuse argument loop 
equational list fusion method foldr build implemented ghc able perform fusion cases fusion possible single argument determined implementing zip 
approaches claim fuse zip fully details entirely clear working system including techniques available 
approach problem consists components unboxed representation arrays pairs set specialised fusion rules 
arrays pairs pairs arrays consider functions consume arrays lockstep 
generators pin problem single function case zipp example implement zipp followed loop pae pae pae parray parray parray pa pa loops zipp pa pa acc just acc section mentioned attening represents array pairs pair arrays witnessed type means zipp traverse argument arrays produce new array just pair containing arrays 
having single function zipp handles lockstep traversal multiple arrays simpli es corresponding fusion rules signi cantly 
remaining question arrays pairs retain property arrays store unboxed data 
words implement instance pae pairs 
perform runtime dispatch element type arrays 
fact elements parray instances type class pae suces de ne instance pairs goes follows instance pae pae pae pa pa pa pa pair constructor represent arrays pairs 
harper morrisett shown intensional type analysis formalise transformation weirich observed type classes implement forms intensional type analysis 
essentially method dispatch dictionaries represent type classes runtime realise harper morrisett typecase 
fusion rules zipp consider cases fusion rules re argument array zipp result application replicatep loopp drag generation succeeding loop eliminating zipp altogether 
specify rules loops keep presentation clearer ef es loops ef zipp replicatep es 
loops ef es symmetric rule fusing second argument array omit 
handle fusion loopp occurs argument zipp propagating adjacent loopp zipp side condition element function loop drops elements implies loop preserves length array 
express constraint auxiliary function restricting loop function 


just fusion rule es es zipp loops es es 
loopp zipp es es omit corresponding rule second argument 
allows express side condition leaving framework applicative rewrite rules ghc supports 
having special functions may restrictive consider visible interface array library consists combinators mapp library internal implementations combinators 
fusion function boundaries equational fusion serious weakness order fusion rules re combinators appear program code 
specialised functions mapp de ned terms loopp virtually case source code 
technique relies optimisation techniques particular inlining convert code fusion rules re 
situations inlining going help 
consider slightly arti cial function de nition foo parray int int foo xs xs xs xs foo replicatep function reduces argument array scalar produces array passed recursion 
words array created subexpression replicatep immediately consumed discarded recursive step 
clearly waste time memory build rst place 
discussed earlier implemented terms loopp inlining array constructed application replicatep immediately consumed loopp recursion 
perfect opportunity fusion replicatep loop separated function boundary 
fusion rule re 
similar situation primitive value boxed recursive function call immediately unboxed callee 
recognising replicatep array constructor loopp destructor situation similar 
insight surprising principle constructor specialisation technique provides seed solution problem 
essential idea generate specialised version foo case called argument constructed replicatep case pull replicatep foo body obtain variant int int int xs xs xs foo replicatep xs replicatep immediately applied result replicatep inlining loop replicate rule re 
situation occurs frequently realistic functions 
fused fused lists fused fused boxing fused fused lists fused fused boxing fused fused lists fused fused boxing fused fused lists fused fused boxing performance sumsq left done replace occurrence foo argument applying replicatep appropriate call 
ghc rewrite rules come rescue 
specialised version function generate simple rule foo replicatep 
applied body recursive 
combination fusion nally get int int int loops comb replicatep comb acc acc 
successfully eliminated arrays 
mentioned earlier replicatep construct array loops compile simple loop adding 
performance gures quoted obtained rst experimental implementation equational loop fusion ghc rewrite rules 
current development version compiler version code executed unloaded mhz piii kb second level cache running linux 
basic loop kernels sum square function sumsq example earlier extreme example demonstrating possible impact loop fusion intermediate structures eliminated 
displays performance applying sumsq values 
versions fused fully fused optimised fused optimised lists fused haskell program sum map square ghc fuses foldr build fused boxing code density standard haskell arrays loop combinator runtime smvm non zero elements result result fully optimised fused array code slower version 
loop fusion improves runtime function factor factor high fusion remove arrays code 
interesting di erence fused fused boxing 
shows impact ghc able remove evaluation thunks possibly suspended expressions inner loop 
loop fusion rule section introduces pair accumulator 
currently ghc situations problems optimising accumulator fully unboxed arguments 
example fully unboxing accumulator slows program factor 
large factor intermediate structures removed sumsq result standard haskell arrays disastrous factor slower array implementation 
obviously deforestation intermediate structures occurred leads enormous memory consumption example 
code measured sum elems fmap square sieve eratosthenes nal version contain evaluation recursive array implementation sieve eratosthenes 
sparse matrix vector multiplication displays running times sparse matrix vector multiplication smvm applied set matrices non zero elements varying density dense non zero elements 
times implementation standard haskell arrays library 
haskell array version fused ghc foldr build haskell arrays constructed reduced lists 
code largely oblivious sparseness matrix eciency code standard haskell arrays degrades 
ect shows bene attening transformation optimising codes sparse irregular data structures 
version code displayed graph factor faster fused code 
discrepancy due lack inlining ghc pae instances type pair 
similar sumsq code marked fused boxing implies evaluation thunks inner loop serious performance implications 
conceptual problem con dent resolve bring running times closer 
barnes hut body code currently collecting runtime data body galaxy simulation code implemented languages 
nal version contain runtime data discussion results 
parallelism attened representation data structures allows fairly straight forward data parallel implementation arrays initial motivation 
hand fusion handled care parallel context 
simple array operations parallel implementation easily obtained true complex operations obtained fusion scans reductions permutations cause communication 
solution proposed re ne de nition array operations way clearly distinguishes operations depend processor local data induce communication 

flattening fusion efficient team main techniques implementation arrays attening fusion happen di erent stages compilation interact 
initial motivation fusion ease shortcomings attening transformation combing sequences array traversals complex operations 
surprisingly attening precisely attened representation data types simpli es fusion expressing array generators terms replicatep unit type avoid introducing extra combinator array generation 
similarly zip problem simpli ed fact zipp produce new array arrays pairs represented pair arrays 
related loop fusion imperative languages researched 
challenges techniques loop fusion imperative functional contexts differ signi cantly 
extensive index calculations update place imperative array algorithms requires sophisticated analysis techniques loops manipulated 
functional particular approaches data ow explicit provides scope transformations 
func tional context important remove intermediate structures super uous copying place 
transformation imperative languages sisal sac concentrate regular code 
anderson hudak argue monolithic lazy arrays de ned haskell array comprehensions adapt subscript analysis implement algorithms eciently 
focus regular code implementation 
lengauer related handle haskell array comprehensions adapt analysis originally introduced imperative programs functional case 
focus regular code 
chuang introduced combinator arrays ml 
stays quite close typical list combinators considers update place 
mentions loop fusion brie form typical list fusion rules fusion map map emphasis regular code 
neill burton introduce method fast persistent arrays 
related approaches essentially aim fast purely functional update operation single elements copying array 
provides eciency gains update place completely ignores issue unboxing 
currently major shortcomings implementation 
appeal intuition reason rewrite rules optimisations 
systematic treatment requires cost model takes account cost memory access ideally memory hierarchy guide transformations 
second currently investigating extending scope transformation handle tupling combine independent loops structures size 
transformation expressed simple rewrite rules applicable certain conditions 
moment information necessary lost attening transformation 
dependent types may provide solution 
greatly indebted simon peyton jones 
help understand subtleties ghc rewrite rules extended ghc number optimisations pointed constructor specialisation transformation come helpful section 
furthermore kai engelhardt gave valuable feedback early versions 

abu 
improving performance virtual memory computers 
phd thesis dept computer science university illinois 
anderson hudak 
compilation haskell array comprehensions scienti computing 
proceedings acm sigplan conference programming language design implementation pages 
blelloch burch crary harper miller 
persistent triangulations 
journal functional programming 
www cs cmu edu papers tcs pdf 
appear 
blelloch 
pre sums applications 
technical report cmu cs school computer science carnegie mellon university nov 
blelloch 
programming parallel algorithms 
communications acm 
blelloch zagha 
segmented operations sparse matrix computation vector multiprocessors 
technical report cmu cs school computer science carnegie mellon university aug 
blelloch 
compiling collection oriented languages massively parallel computers 
journal parallel distributed computing 

retire fortran 
debate 
communications acm aug 
chakravarty keller 
portable nested data parallelism 
proc 
th annual australasian conf 
parallel real time systems pages 
springer verlag 
chakravarty keller 
types nested data parallel programming 
wadler editor proceedings fifth acm sigplan international conference functional programming icfp pages 
acm press 
chatterjee prins simons 
expressing irregular computations modern fortran dialects 
fourth workshop languages compilers run time systems scalable computers lecture notes computer science 
springer verlag 
chuang 
functional perspective array primitives 
nd fuji int 
workshop functional logic programming pages 
du reid 
direct methods sparse matrices 
oxford science publications 
lengauer 
application polytope model functional programs 
ferrante editor proc 
th int 
workshop languages compilers parallel computing 
computer science engineering department uc san diego 
gill launchbury peyton jones 
short cut deforestation 
arvind editor functional programming computer architecture pages 
acm 
groningen 
implementation eciency arrays clean 
editor proceedings implementation functional languages th international workshop ifl selected papers number lncs pages 
springer verlag 
harper morrisett 
compiling polymorphism intensional type analysis 
proceedings nd annual symposium principles programming languages pages 
acm press 
hu iwasaki takeichi 
deriving structural hylomorphisms recursive de nitions 
acm sigplan international conference functional programming pages 
acm press 
jay 
partial evaluation shaped programs experience fish 
editor acm sigplan workshop partial evaluation semantics program manipulation pepm 
jones marlow 
secrets glasgow haskell compiler inliner 
international workshop implementation declarative languages 
research microsoft com users simonpj papers inline ps gz 
keller 
transformation implementation nested data parallelism distributed memory machines 
phd thesis technische universit berlin fachbereich informatik 
keller chakravarty 
flattening trees 
reeve editors euro par parallel processing number lecture notes computer science pages berlin 
springer verlag 
keller chakravarty 
distributed implementation aggregate data structures program transformation 
editors parallel distributed processing fourth international workshop high level parallel programming models supportive environments hips number lecture notes computer science pages berlin germany 
springer verlag 
kennedy mckinley 
maximizing loop parallelism improving data locality loop fusion distribution 
workshop languages compilers parallel computing number pages 
springer verlag 

combining loop fusion prefetching shared memory multiprocessors 
proceedings international conference parallel processing icpp 
ieee computer society press 
neill burton 
new method functional arrays 
journal functional programming 
hu iwasaki takeichi 
calculational fusion system hylo 
ifip tc working conference algorithmic languages calculi pages 
chapman hall 
peyton jones hoare tolmach 
playing rules rewriting practical optimisation technique 

microsoft research cambridge 
peyton jones launchbury 
state haskell 
lisp symbolic computation 
peyton jones 
compiling haskell program transformation report 
nielson editor proceedings european symposium programming volume lecture notes computer science pages berlin 
springer verlag 
peyton jones launchbury 
unboxed values rst class citizens non strict functional language 
hughes editor proceedings international conference functional programming computer architecture 
peyton jones partain santos 
oating moving bindings give faster programs 
proccedings international conference functional programming 
prins palmer 
transforming high level data parallel programs vector operations 
proceedings fourth acm sigplan symposium principles practice parallel programming pages san diego ca may 
acm press 
prins 
flattening improvement 
static analysis symposium lncs 
springer verlag 
roth kennedy 
loop fusion high performance fortran 
conference proceedings international conference supercomputing pages 
acm press 

scholz 
de ning application speci high level array operations means shape invariant programming facilities 
proceedings apl pages 
acm press 

implementing conjugate gradient algorithm functional language 
editor proceedings implementation functional languages th international workshop ifl selected papers number lncs pages 
takano meijer 
shortcut deforestation calculational form 
conf 
record th acm sigplan sigarch intl 
conf 
functional programming languages computer architecture pages 
acm press new york 
ghc team 
glasgow haskell compiler 
haskell org ghc 
ghc team 
haskell libraries language support 
haskell cs yale edu ghc docs latest set sec lang html 
wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 
weirich 
type safe cast functional pearl 
proceedings fifth acm sigplan international conference functional programming icfp 
acm press 
wolf lam 
algorithmic approach compound loop transformations 
nicolau gelernter padua editors advances languages compilers parallel computing pages 
mit press 
appendix array library rules figures outline interface array library provides de nitions combinators de ned terms replicatep loopp summarises central fusion rules omit symmetric rules 
rules optimise special cases space detail data parray type parray int type parray replicatep pae int replicatep loopp loopp pae pae 
acc acc pae acc acc pae acc bool false bool true pae pae 


just pae bool 

just pae pae 


pae pae acc 


just pae 
zipp pae pae parray parray parray zipp common array combinators mapp pae pae mapp loopp pae bool pa loopp ef zipp pa ef false ef true just int int int int loopp sts len max div sts replicatep len pae pae loopp common array combinators mf sa sp start loopp mf sa sp st replicatep 
loopp mf sa sp st mf sa sp st es loopp mf sa sp st zipp replicatep es 
loopp mf sa sp st es mf sa sp st mf sa sp st pa loopp mf sa sp st loopp mf sa sp st pa 
mf acc acc case mf acc acc 
acc acc just acc case mf acc acc 
acc acc just acc 
just acc acc sa acc acc sa acc sa acc sp acc acc sp acc drop loopp mf sa sp st st pa drop 
central fusion rules 
