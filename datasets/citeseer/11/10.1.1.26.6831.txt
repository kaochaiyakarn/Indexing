architectural re ection concepts design evaluation walter andrea andrea francesco department informatics systems communication university milano milano italy dsi unimi 
proposes novel re ective approach orthogonal classic computational approach system performs computation software architecture individual components 
approach supports system self management activities dynamic recon guration realized systematic conceptually clean way added existing systems modifying system 
parallelism architectural re ection classic re ection discussed transposition classic re ective concepts architectural domain 
keywords programming large re ection software architecture software engineering eld growing interest raised discipline software architecture 
discipline focuses gross organization software systems seeks ways gather formalize structural ideas underlying successful designs produced current software engineering practice 
objective providing clean conceptual framework formalization architectural knowledge architectural designs analyzed compared described unambiguous way taught practicing engineers 
aim software architecture gone long way prototype architecture description languages adls literature 
argue architectural level abstraction relevant design systems convenient point view describe implement part system functionality 
software system complexity part relevant part code self management activities activities domain system 
examples bootstrap shutdown line monitoring components activity especially distributed systems dynamic recon guration goals ranging support user tailoring fault tolerance 
cases functionality deals architecture system components considered isolation 
functionality regarded set activities system capable performing architecture 
implementing kind functionality usually overly complex systems provide limited capabilities kind usually realized ad hoc technical solutions 
believe major source complexity implicit architecture problem ecting current software engineering practice fact architectural choices dispersed components code implemented systems intermixed non architectural functional code 
proposed novel approach componentbased software development architectures explicit 
approach termed architectural programming large components architecture independent entities architectural choices expressed program large controls components instantiation behaviour speci ed architecture 
original motivation enhancing components architectures reusability clean separation concerns programming small issues issues related components inner semantics programming large issues related system architecture 
progressed observed approach supports addressing self management activities clean systematic way regarded extension concepts techniques re ection architectural realm programming large level 
coined name architectural re ection ar describe approach dynamic self management regarded activity system performing computations software architecture 
ar builds adding architectural re ective capabilities system feasible architectural plan dedicated higher level program 
ar described general lines 
deeper matter describe ar means thorough comparison classic computational re ection describe behaviour architectural meta entities introduce notion architectural causal connection basic concept ar 
aim complete example developed illustrating ar provides clean simple framework managing dynamic recon guration activities 
respect approaches system self management ar appears systematic easier preserve concept transparency classic re ection activities added system modifying components 
outline follows 
section introduces preliminary notions ar including brief summary concepts classic computational re ection description implicit architecture problem general lines architectural programming large 
section introduces concept ar general lines compares ar computational re ection 
section introduces concept architectural causal connection context set previous sections 
section provides example illustrating advantages brought ar particular dynamic recon guration 
sec tion compares approach research orts 
section draws describes 
preliminary concepts computational re ection computational re ection re ection de ned activity performed agent doing computations 
behavioural structural re ection re ection sub branches involve respectively agent computation structure 
behavioural re ection de ned ability language provide complete rei cation semantics complete rei cation data uses execute current program 
structural re ection de ned ability language provide complete rei cation program currently executed complete rei cation data types 
re ective system logically structured levels constituting re ective tower 
entities working base level called base entities re ective entities de ne basic system behaviour 
entities working levels meta levels called meta entities perform re ective actions de ne characteristics application dependent system behaviour 
level causally connected adjacent levels entities belonging level maintain data structures representing re ection parlance reifying states structures entities level 
change state structure entity re ected data structures reifying modi cation data structures ects entity state structure behaviour 
computational re ection allows properties functionality added application system manner transparent system separation concerns 
classi cation comparison classic approaches re ection see 
implicit architecture problem component software development cbsd aims supporting development complex software systems assembly large independently developed reusable components 
cbsd brings forth distinction programming small pis development individual components programming large pil construction systems components 
object oriented technology provides sound basis development ne coarse grained reusable components lack adequate notations tools programming large 
notations system designers specify plan components cooperate software architecture system 
architecture software system de ned stating functionality partitioned components components topologically arranged interacts protocols components communicate cooperate connectors exist global control structure system 
existing notations composing software modules usually limited expressing small subset issues topology 
implies architectural issues addressed components code 
example system architect designed protocol components cooperation protocol split speci cation individual components behaviour implemented components code 
code implementing architectural choice intermixed architecture independent functional code 
current practice architectural choices follow fate get dispersed components code pis level implemented systems 
termed implicit architecture problem previous 
building system implicit architectures drawbacks notably hinders components reuse due architectural assumptions components come embed infeasible reuse architectural organizations independent components overly complex modify software systems architecture cause empirically observed fact architectural choices produced skilled software architects distorted twisted implementers 
detailed discussion implicit architecture problem consequences 
architectural programming large proposed novel approach pil termed architectural programming large explicitly aimed solving implicit architecture problem 
approach system comprises set components components embedding architectural assumption program large prescribing components assembled interact architecture system 
program large executed run time dedicated virtual machine rule instantiation behaviour components 
precisely system organization results approach comprises layers 
rst layer reside components 
component interacts environment set ports distinct interaction points 
interaction modeled set events occurring ports events generated environment trigger reaction component 
behaviour component terms events react modeled state machine 
second layer reside connectors 
connectors entities ruling interaction components 
connects ports belonging components 
connector reacts set cooperation events generated environment reaction triggers events components ports 
behaviour connector terms cooperation events react events generates ports reaction cooperation events modeled state machine 
third layer resides program large virtual machine 
behaviour program large virtual machine consists description system architecture comprising aspects topology strategy 
topology describes structure system components connectors comprise system 
topology means instantiating components connectors accordingly 
strategy de nes behaviour system 
plan stating order cooperation events triggered connectors 
result stated plan indirectly rules components behaviour triggering cooperation event indirectly triggers events components ports 
approach architectures explicit sense large description software architecture implemented inside components rules components creation interactions de ning connectors components system ow control strategy 
architectural re ection architectural re ection computation performed system software architecture 
architectural re ective system structured potentially nite layers called architectural layers constituting architectural re ective tower 
layer architecturally causally connected layer architectural meta layer entities called architectural meta entities maintain data structures reifying software architecture underlying system change data structures re ects underlying system architecture vice versa 
concept domain maes application domain architectural meta entities software architecture computational system 
architectural layer necessary hidden hooks allow linked potential new meta layer layer created needed order avoid nite regression 
architectural meta layer operates architecture level adds new functionality original system 
property transparency holds classical re ection layer unaware presence behavior layers 
order avoid confusion classic architectural re ection terms level layer distinguish respectively levels classic re ective tower architectural 
de nition topology strategy orthogonal aspects software architecture re ne de nition architectural re ection de ning topological strategic re ection 
topological re ection computation performed system topology 
examples topologically re ective actions include adding removing components connectors 
strategic re ection computation performed system computation large observation state components connectors strategy 
example strategically re ective action changing priorities associated transitions priority strategy 
sections examine detail layer architectural re ective tower 
particular illustrate agents working generic architectural base meta layer duties layers interconnection architectural causal connection 
architectural base layer model described section devised notation describing components connectors system topology system strategy interpretation model dedicated system entities encapsulate architectural issues rule execution components 
notation interpretation model describes referred architectural base layer 
section details architectural base layer structured works introduces notation 
components locus computation 
component parts architecture independent core providing required functionality architectural issues architectural component wrapping core functionality accessible behaviour described notation 
component behaviour described syntax component fg port initial state transitions core core dependencies fg nonterminals written plain text terminals typewriter 
component behaviour speci cation segmented set ports points interaction environment described state machine 
transition labeled component event name termed trigger event meaning ring triggered occurrence event 
preconditions constraints port state transition re relevant event occur preconditions satis ed 
port said ready event state satis es preconditions transition trigger event 
postconditions describe state port ring transition 
action clause speci es actions taken component consequence ring transition 
context actions invocations commands internal component core 
core actions model activities performed small 
execution core action link pil pis level architectural component behaviour modeled component speci cation component core 
dependencies section describes interdependencies existing state di erent ports intent gluing port speci cations 
dependence states port state port forcibly moved state connectors locus cooperation components playing certain role cooperation 
connectors transitions de ne cooperation events may correspond sequence component events involving components playing role supported connector 
syntax describing connectors close components connector roles initial state fg transitions 
connector behaviour described state machine 
roles seen formal parameters connector manage cooperation set entities play listed roles 
actual systems roles played components ports 
transitions describe connector behaviour 
transition labeled cooperation event name termed trigger event 
port transitions connector transition res relevant cooperation event occurs preconditions satis ed pre postconditions model machine state transition 
ports connector ready cooperation event state satis es transition trigger event connector actions represent fact ring connector transition recursively res transitions entities playing roles triggering events 
action action clause implicit precondition added explicit preconditions entity playing role ready event topology 
program large proper comprises description system topology strategy 
system topology de nes components connectors comprise system attached component ports play connector roles 
components connectors speci cations regarded cations topology describing detail entities referred topology 
topology described straightforward way follows topology components fg connectors fg attachments plays interpretation model system topology actuated topology actuator ta 
aims approach keep architecture system explicit clearly impossible hard code links components connectors inside 
role ta twofold 
hand realizes topology instantiating appropriate components connectors 
hand keeps track interconnections ports roles dispatching events component connectors dispatches component events generated connectors appropriate component 
strategy 
system strategy described set rules governing occurrence cooperation events 
description actuated run time strategy actuator sa works inference engine interpreting rules triggering cooperation events 
rule approach chosen due exibility intent accommodating wide range global control policies event driven hard real time hard real time art time driven concurrent priority 
rest section devoted illustrating syntax semantics rules necessary de nitions 
rule expression form rule preconditions section boolean expression separate subsections refer state connectors state time respectively 
note due layered approach adopted sa knowledge whatsoever components see connectors states 
state connector formally de ned set cooperation events ready accept 
way state connector coincide internal state abstraction 
state connector simply list allowed events formally far time concerned state time serves express time related constraints time events 
set clauses time pm expressed fashion expressions time pm time regarded prede ned variable refers current date time 
way uniform notation express events constraints allows designer build extremely diverse systems 
formally time set usual relational operators expressed standard ways 
clearly constituents precondition section omitted way diverse systems designed ranging hard real time art systems state time section exists rule systems proper order rule activation dictated entirely built inference engine sa 
instance sa may need multi threaded order execute rules overlap time 
sa knows connectors possibly time entity perform action connector 
actions section rules list cooperation events triggered appropriate connectors 
formally note potential problem arises fact multiple actions coexist action section rule 
fact bring system state renders preconditions false 
order address problem essentially approaches followed sa executing turns back examining state system state connectors decides execute action sa simply ignores problem leaves issue strategist see section 
solution task sa ensure system consistency adopting approach inconsistencies dealt layer 
postconditions section boolean expression describes state system rule executed 
state includes preconditions state connectors de ned usual way state time way possible specify time constraints actions 
aim prede ned variable called provided conjunction usual relational operators allows designer easily specify time requirements form time elapsed moment action starts moment action ends 
symbols note organizing rules setting appropriate priorities order ensure time constraints respected entirely sa respect rules constitute high level speci cation system behaviour implemented number di erent ways sa 
constraint set rules respect rules contains non con icting apart decision sa 
de nition strategy follows strategy system de ned topology strategy system topology strategy virtual machine 
virtual machine large language structured framework providing set architectural primitives topology strategy instantiate components connectors trigger cooperation events actuators execute topology strategy description primitives 
structure purposes illustrated section 
general context relevance ar mainly intended support reuse architectural organizations programs large di erent platforms basic architectural primitives may completely di erent implementations corba java javabeans 
architectural meta layer architectural meta layer portion architectural re ective system devoted observe manipulate software architecture underlying layers 
consider meta layer see fig 
shell wraps legend reflective entities meta entities computational reflection architectural reflection architectural meta entities architectural base layer architectural meta meta layer architectural meta layer base level meta level fig 

base meta layers structure underlying system 
domain meta entities working de ned inductively follows base step domain architectural meta entities working rst meta layer software architecture base layer inductive step domain architectural meta entities working th meta layer software architecture base layer rst meta layer 
th meta layer software architecture system composed layers 
discussed far consider numerous aspects software architecture topology strategy 
order simplify architectural re ective model topological re ection charged distinct architectural meta entities termed respectively strategist topologist 
topologist strategist 
topologist rei es information topology components connectors attachments strategist relies topological information held topologist rei es current state components connectors speci strategy hand 
due structure considered systems order access manipulate architectural information architectural meta entities need interact actuators underlying layer 
topologist strategist implemented single entity sake eciency separated implementation enhances chances design reuse 
architectural causal connection connector ports actuator system state abstraction component architectural entity actuator action architectural meta layer architectural base layer fig 

architectural re ective system structure system bootstrap shutdown handled architectural re ection involve topological strategic actions creation destruction components activation initialization activities 
case topologist strategist exist creation destruction system 
represents architectural re ective system 
base layer components gray spheres connectors little black spheres connected arrows little spheres represent component ports actuators big black spheres shape activate system 
observe meta layer actuators ruling meta layer architecture 
architectural represented light gray spheres 
directly interact underlying actuators reify meta layer topology strategy system state 
architectural meta entities operate underlying system architecture directing underlying actuators 
meta layer architectural modeling consider rst meta layer described architectural level course considerations apply meta layer 
idea meta layer system interacting entities modeled syntax base layer 
comprises components topologist strategist respectively charge manipulating topology strategy base layer 
course just description base layer components omit details semantics operation domain likewise describing topologist strategist language detail actual operation base layer 
architectural causal connection meta base layer downwards architectural connection re ection hidden architectural level re ective actions performed base layer architecture modeled core actions 
core actions involve invoking architectural modi cation primitives discussed section 
component topologist strategist core action involves modi cation underlying layer architecture labeled keyword meta component component 
meta layer architectural model adopted strategist meta component accessing strategy actuator topologist meta component accessing topology actuator 
concerns upwards architectural connection rei cation making base layer architecture observable rst meta layer saying base layer architecture observable rst meta layer means state uence strategist topologist operation 
words transitions rules meta layer pre postconditions including predicates current state base layer architecture 
model fact language keyword reify topology strategy 
topology rei es system means predicates system state occur components connectors behaviour speci cation 
likewise strategy rei es system means predicates system state occur rules 
extension basic model required describe rst meta layer introduce constructs modeling fact state actuators base layer observable meta layer 
analogous reifying state virtual machine language classic re ection 
particular model information strategy actuator state introduce meta rules rst meta layer 
meta rules labeled keyword meta rule rule include predicates ring time related issues time ring duration base layer rules 
notice meta rules junction reify keyword subsystem observed order meta rules allowed subsystem rules 
expressions rules included meta rules forms rulename enabled boolean expression rule enabled rulename disabled boolean expression rule disabled rulename red boolean expression rule red past rulename boolean expression rule red rulename time time expression rule red time rulename duration time expression rule took time complete time red rulename failure boolean expression ring rule meet rule postconditions architectural computational re ection dualism respects architectural re ection transposition large computational re ection 
starting fact topology strategy represent respectively system structure behaviour large statements follow topological re ection compared structural re ection act structure entities manipulate operating large topology system small code single entity strategic re ection compared computational re ection act behaviour entities manipulate large observing modifying strategy system small observing altering computational ow single entity approaches re ective aspects re ection charged di erent entities topologist strategist architectural approach object class speci meta entities meta classes meta objects channels messages classic approach 
kinds re ection viewed compositional way 
classic re ection meta entities working generic meta level re ective tower observe manipulate meta entities underlying level turn observe manipulate entities base meta underlying level base level 
analogously stated previously architectural meta entities working certain layer architectural re ective tower observe manipulate software architecture underlying system 
course approaches orthogonal software architecture system includes components connectors related employed system 
shown fig 
re ective tower part domain rst meta layer architectural re ective tower 
architectural causal connection classic re ection re ective system keep th level appropriate representation nth level able reify changes level representation re ect change representation base level 
process called causal connection heart re ective system allows manipulate description system system 
architectural re ection exception topology strategy rei ed meta layer change re ected base layer entities charge maintaining description topology strategy topologist strategist respectively 
discussed previous section link base layer meta layer represented reify keyword re ection core actions topologist strategist rei cation features implemented set primitives set forth rest section 
topological primitives mentioned earlier tasks topologist keep representation system topology update representation order reify changes occur topology ensure changes representation re ected base layer topology 
domain topologist topology base layer entity cooperates topology actuator 
concerned topologist works inside programmed accomplish tasks interacts topology actuator order observe manipulate topology 
ta acts bridge topologist virtual machine exports topologist appropriate directives able accomplish topology tasks 
context topologist order reify current topology system relies ta knowing single components connectors directly 
change system topology known topologist ta representation 
far re ection concerned commands topologist issue ta broadly partitioned categories creation new types entities define primitive creation new entities existing type instantiate primitive destruction entities destroy primitive 
commands applies kinds entities limitations see 
directives exported ta topologist de nes new type entity connector creates new entity existing type connector destroys existing entity note attachments type directive 
primitives explained system evolution governed strategy actuator sa accomplishes task executing set rules words system behaviour governed rules 
context goal strategist observe system behaviour modify needed 
reifying system behaviour means essentially distinct things knowing rules observing state sa 
point clear strategist knows rules 
point simply means getstate primitive similar mechanism exported sa strategist 
example rule red postconditions respected sa enters error state state observed strategist take appropriate measures see section complete example 
system behaviour dictated rules modifying behaviour implies modifying rules 
sa exports set primitives allow strategist modify rule set follows adds speci ed set rules removes speci ed rules speci es set rules having preconditions satis ed red speci es set privileged rules set rules re 
obviously strongest requirement rule red preconditions met holds means directive ect preconditions satis ed 
note set primitives intended minimal set enriched particular requirements 
advantages important advantage introduced approach represented possibility dynamically recon gure running system 
running architectural re ective system architectural meta entities power modify current system programming 
running system hooks actuators entities needed required bind meta base layer extendible stopping properties transparency separation concerns architectural re ection 
example give example illustrating idea ar advantages brings 
interested architectural structure systems re ection architecture example get details components programs small actual computation 
scenario base layer 
consider non stopping distributed system periodically receiving large input set processing generating new output set 
system considered subsystem complex system inputs outputs come go external subsystems don detail 
system performs task data parallelism paradigm composed identical components component works equal slice original input set 
components described follows component unit initial state waiting input port input initial state ready input transitions real data ready input core evaluate real data idle port output initial state idle transitions real data ready output core retrieve real data idle dependencies input idle output ready output output idle input ready input units ports receiving inputs elaborate dispatching elaborated outputs 
input output entities modeled components component input component output port input port output initial state idle initial state idle transitions transitions real data real data idle core get real data idle idle core put real data idle system kind connectors handles receiving data handles dispatching produced data 
connector connector roles unit roles unit initial state empty initial state empty transitions transitions transfer real transfer real empty real empty unit real unit real empty real empty connect respectively generic component input output entities 
topology strategy system parametric value speci cation number components unit belonging system consequently number connectors connecting topology topology base layer components input output 
ng unit connectors 
ng 
attachments input plays 
ng output plays 

ng input plays 
ng unit 
ng output plays 
unit strategy simple consists rule advance system input ready elaborated strategy strategy base layer rule 
ng 
ng transfer 
transfer system represented composition topology strategy 
system base layer topology topology base layer strategy strategy base layer meta layer 
assume dynamic behaviour added system step takes long number units doubled speed computation 
order realize behaviour designer add meta layer hooking subsystem topologist strategist cooperate doubling number computational units base layer 
explained topologist strategist special components introduced keyword meta component case described follows meta component topologist port double initial state idle transitions idle core write component name port name plays connector ng rule name component ng port name plays connector ng rule name respectively mean ng component name port name plays connector name rule name ng component name port name plays connector name rule name components 
ng unit core connectors 
ng 
core attachments input plays 
ng output plays 

ng input plays 
ng unit 
ng output plays 
unit idle meta component strategist port double initial state idle transitions idle core rule 
ng 
ng transfer 
transfer idle strategist topologist recon gure system adding units connectors base layer attaching ports connectors properly adding necessary rules coordinate new elements 
explained section invoking architectural modi cation primitives actuators core actions 
connector roles initial state idle transitions idle idle topologist strategist course coordinated connector guarantees topology strategy modi ed accordingly 
topology topology meta layer reify base layer meta components topologist strategist connectors dc attachments double plays dc double plays dc strategy strategy meta layer reify base layer meta rule advance duration ms dc strategy layer simple consists triggering connector computation base layer takes long 
fact time elapsed expressed precondition meta rule 
related idea making architectures explicit exposed uenced contributions software engineering literature obviously include idea programming large introduced 
mary shaw robert allen david garlan colleagues cmu wrote papers collected book proposing notations models architectural designs 
primarily aimed specifying software architectures usually analytical purposes notion executable architectural description 
similar purpose helm formal contracts addresses general object oriented architectures 
david luckham stanford proposes executable architecture description language termed rapide 
main di erence approach execution rapide architectural description regarded simulation behaviour system implemented conventional means 
separating architectural information general application dependent information possible application object oriented frameworks 
object oriented frameworks address problem terms static separation achieved inheritance architectural design represented set classes concrete component classes derived ultimately embed inheritance architectural application functionality deals maintaining separation run time 
proposals software engineering literature aimed localizing information cooperation components dedicated runtime entities connector insulating components information 
intended locus cooperation patterns de nition model components aware interact designed explicitly connected speci protocol centered design 
similar consideration holds aksit composition lter approach 
sullivan mediator concept supports localization cooperation patterns cooperation transparent components 
major di erence connectors mediators control components enforce state interdependencies 
closest approach st ephane ducasse propose introducing connectors run time entities purpose considered making architectural designs explicit implemented systems context extended object model termed flo 
flo connector model rich interesting similarities connector 
flo simpler component model include notion port behavioural component speci cation 
mentioned orts close respects addresses dynamical modi cation architecture re ection problem dynamical modi cations best regarded destruction creation connectors mediators clean conceptual model provided ruling events 
includes idea maintaining run time logically centralized description system architecture program large 
respect levels system description outlined section orts reach level description cooperation patterns addresses level description system composition cooperation patterns 
reason ar models particularly flo convenient aim 
presents extension classic re ection software architecture level 
basic application extension allow systematic conceptually clean approach designing systems self management functionality dynamic recon guration supports functionality added existing system modifying system 
dynamic recon guration self management activities conceived operations performed system architecture approach strongly related idea localizing architectural designs implemented systems realized architectural programming large 
ideas formalize previous topic explain relationship ar ar classic re ection 
prototype environment development 
believe making ar feasible major advantages approach integrating architectural re ective capabilities environment prominent goal near 
conceptual level extended including aspects software architecture distribution performance hierarchical organization model extending ar include re ection new aspects 
mehmet aksit ken jan bosch bergmans akinori yonezawa 
abstracting object interactions composition filters 
proceedings object distributed programming ecoop workshop number lncs pages 
springer verlag july 
massimo ancona walter gabriella 
channel rei cation re ective model distributed computation 
proceedings ieee international performance computing communication conference ch pages phoenix arizona usa th th february 
ieee 
walter 
evaluation object oriented re ective models 
proceedings ecoop workshop re ective object oriented programming systems th european conference object oriented programming ecoop brussels belgium th th july 
available www disi unige person html 
walter andrea andrea francesco 
fresh look programming large 
proceedings nd annual international computer software application conference compsac pages wien austria th st august 
ieee 
walter andrea andrea francesco 
architectural re ection bridging gap running system architectural speci cation 
proceedings th reengineering forum ref pages firenze italia th th march 
ieee 
pierre cointe 
metaclasses rst class objects model 
proceedings oopsla volume sigplan notices orlando florida october 
acm 
fran cois nicola demers jacques malenfant 
re ection logic functional object oriented programming short comparative study 
proceedings workshop section ijcai international join conference ai montr eal canada august 
frank hans 
programming large versus programming small 
transactions software engineering se june 
st ephane ducasse 
executable connectors reusable design elements 
proceedings esec lncs pages 
springer verlag 
jacques ferber 
computational re ection class object oriented languages 
proceedings th conference object oriented programming systems languages applications oopsla volume sigplan notices pages 
acm october 
david garlan robert allen john 
architectural mismatch hard build systems existing parts 
proceedings xvii icse 
ieee april 
richard helm ian holland 
contracts specifying compositions object oriented systems 
proceedings oopsla ecoop pages 
acm 
gregor jim des rivi eres daniel bobrow 
art metaobject protocol 
mit press cambridge massachusetts 
david luckham larry augustin john james doug bryan walter mann 
speci cation analysis system architecture rapide 
transactions software engineering se april 
special issue software architecture 
pattie maes 
concepts experiments computational re ection 
proceedings oopsla volume sigplan notices pages 
acm october 
gail murphy 
architecture evolution 
proceedings nd international software architecture workshop 
acm 
xavier 
support software component cooperation 
proceedings lncs pages 
springer verlag 
wolfgang pree 
design patterns object oriented software development 
addison wesley 
mary shaw david garlan 
software perspectives emerging discipline 
prentice hall upper saddle river nj 
robert stroud 
transparency re ection distributed systems 
acm operating system review april 
kevin sullivan ira david notkin 
evaluating mediator method prism case study 
ieee transactor software engineering august 
