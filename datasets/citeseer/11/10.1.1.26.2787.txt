computational lambda calculus monads eugenio moggi lfcs dept comp 
sci 
university edinburgh eh jz edinburgh uk em lfcs ed ac uk october calculus considered useful mathematical tool study programming languages programs identified terms 
goes uses fij conversion prove equivalence programs gross simplification introduced may applicability theoretical results real situations 
introduce new calculus categorical semantics computations 
calculus provides correct basis proving equivalence programs independent specific computational model 
logics reasoning programs particular proving equivalence programs 
consolidated tradition theoretical computer science identify programs closed terms possibly containing extra constants corresponding features programming language consideration 
approaches proving equivalence programs ffl operational approach starts operational semantics partial function mapping program closed term resulting value induces congruence relation open terms called operational equivalence see plo 
problem prove terms operationally equivalent 
leave universit di pisa 
research partially supported joint collaboration contract st edb eec programs identified total functions values values ffl denotational approach gives interpretation programming language mathematical structure intended model 
problem prove terms denote object intended model 
ffl logical approach gives class possible models programming language 
problem prove terms denotes object possible models 
operational denotational approaches give theory operational equivalence set th formulas valid intended model respectively especially operational approach deal programming languages case case basis 
hand logical approach gives logical consequence relation ax iff formula true models set formulas ax deal different programming languages functional imperative nondeterministic uniform way simply changing set axioms ax possibly extending language new constants 
relation possible give sound complete formal system th oversimplified cases 
take starting point proving equivalence programs theory fij conversion identifies denotation program procedure type total function identification completely behaviours non termination non determinism side effects exhibited real programs 
proceed follows 
take category theory general theory functions develop top categorical semantics computations monads main contribution 

show may consider monads topos certain properties yoneda embedding higher order intuitionistic logic 

investigate datatypes particular products relates computations previous category theorists particularly useful 
get formal system computational lambda calculus calculus short similar pp see gmw proving equivalence existence programs sound complete categorical semantics computations 
methodology outlined inspired sco particular view category theory comes logically calculus led consider categorical semantics computations trying hack directly rules fij conversion get correct calculus 
am trying find calculus come fact notion cartesian closed category late developing eilenberg kelly relevant argument shall try explain words section look 
related operational approach find correct calculi operational equivalence considered plo call value call name operational equivalence 
approach extended similar methodology consider features computations nondeterminism see sha sideeffects see mt 
calculi operational considerations calculus sound complete operational semantics program value operational semantics iff provably equivalent value necessarily calculus weak proving equivalences programs 
denotational approach may suggest important principles fix point induction see sco gmw developing semantics mathematical structures term models give clear criteria single general principles properties satisfied model 
approach adopted generalises followed ros mog obtain calculus calculus reasoning partial computations equivalently partial functions 
fact calculus calculus amounts particular theory type theoretic approach partial functions computations attempted cs cs introducing new type constructor intuitive meaning set computations type constable smith adequately capture general axioms partial computations ros lack general notion model rely domain recursion theoretic intuition 
categorical semantics computations basic idea semantics programs described program denotes morphism object values type tb object computations type 
possible choices tb corresponding different notions computations instance category sets set partial computations type lifting set nondeterministic computations powerset 
focus specific notions computations try identify general properties object tb computations 
definition computational model monad category functor natural transformations id ta ta ta ta id ta psi gamma gamma gamma gamma gamma id ta ta ta ta satisfies extra equalizing requirement ta equalizer ta ta exists unique intuitively ta gives inclusion values computations ta flatten computation computation computation 
equalizing requirement ensures strong mono arbitrary morphism 
view programs functions values computations natural category interpreting programs kleisli category 
definition see mac monad kleisli category category ffl objects ffl set morphisms tb ffl identity ta ffl composition tb tg tc view programs corresponds call value parameter passing alternative view programs functions computations computations corresponding call name see plo section 
case fundamental issue subset computations values special properties forgotten 
call value stress better importance values 
call name easily represented call value way 
going details interpretation consider examples computational models category sets 
example non deterministic computations property equalizer ja ta ja follows naturality ffl covariant powerset functor image ffl singleton map 
fag ffl big union map 
easy check equalizing requirement fact ta 
fxg 
xg ta iff singleton 
example computations side effects ffl functor 
theta nonempty set stores 
intuitively computation takes store returns value modified store 
ffl map 
ha si ffl map 
eval fs computation store computes pair computation store hf fs returns pair value store ha verify notions computation partial probabilistic non deterministic side effects fit general definition 
simple language interpretation aim section focus crucial ideas interpretation language oversimplified instance terms exactly free variable order define interpretation computational model requiring additional structure 
richer languages product functional types considered section 
term language introduce parametric signature set base types unary function symbols interpretation computational model category parametric interpretation symbols signature 
ffl interpretation base type object kleisli category interpretation type object defined obvious way 
ffl interpretation unary function symbol arity morphism interpretation formed term morphism defined induction derivation see table 
ffl top term language consider atomic predicates equivalence existence see table 
rule syntax semantics var tg kleisli category table terms interpretation rule syntax semantics eq ex factors exists unique table atomic assertions interpretation constructor important semantically corresponds composition kleisli category substitution variable expression denoting value corresponds composition calculus usually treated syntactic sugar done calculus fi table 
think right way proceed amounts understanding constructor sense computational model terms constructors sense models 
hand reduced basic substitution collapsing existence simply means computation denoted terminates say logic partial terms stronger denotes value 
instance ffl non deterministic computation exists iff gives exactly result ffl computation side effects exists iff change store 
paradigm categorical logic formulas interpreted subobjects 
achieved interpreting binary predicate equality computations type diagonal delta unary predicate existence computations type mono equalizing requirement 
embedding computational model topos show computational model small category lifted computational model topos presheaves functor category set op lifting commutes yoneda embedding pointed sco embedding enable switch equational calculus arbitrary computational model intuitionistic higher order logic computational model topos 
monad defined yoneda embedding left adjoint mapping left kan extension see mac lan lan lan commutativity yoneda embedding stated fact induces full faithful embedding follow known properties summarised lemma lemma small category full faithful 
lan left adjoint lan exists set small cocomplete extending language section discuss interpret terms finite number variables exactly table datatypes relate computations 
consider product functional types sum types completely straightforward allow comparison cartesian closed categories ccc partial cartesian closed categories 
standard requirement category interpreting terms finite number variables finite products interpretation function symbol arity morphism theta theta theta similarly interpretation formed term morphism theta 
view programs functions values computations products taken value type theta pair values type type natural category interpreting programs products extend interpretation terms free variable able take pair value computation computation computation turn computation pair 
example theta interpretations 
problem terms having free variable solution apparent try interpret free id hid general case table says composition kleisli category hid hid tg hid tg type mismatch codomain hid theta domain tg theta 
get require tensorial strength theta tb theta see interpreted hid tg similarly interpreting need natural transformation ta theta tb theta see definition pair programs returns program computing pair 
precisely interpretation hg definition category finite products ff natural isomorphisms theta theta theta ff theta theta theta 
theta computational cartesian model computational model tensorial strength theta tb theta natural coproducts preserved inclusion kleisli category transformation theta ta theta ta ta theta theta tc thetab theta theta theta theta tc ff tc id theta theta theta thetac theta theta ff satisfying diagrams theta id thetab theta theta tb id theta theta thetab theta id theta tb theta tb theta thetab general tensorial strength extra parameter models 
uniquely determined may exists cartesian structure points 

diagrams new koc correspondence established functorial tensorial strengths ffl diagrams saying tensorial strength koc 
theorem koc induces functorial strength making enriched called strong functor 
ffl diagrams say natural transformations suitable enriched functors id see koc 
monoidal closed category functorial strength endofunctor natural transformation st tb ta making enriched functor 
intuitively st action morphisms 
definition tensorial strength induces monoidal structure natural transformation ta theta tb theta map ta tb tb tb thetab satisfying certain diagrams see ek 
morphism ta theta tb theta correct domain codomain interpret pairing computation type type obtained evaluating argument second morphism interprets computation hi empty tuple 
dual notion pairing amounts evaluating second argument see page koc 
categorical interpretation functional types computational model resembles partial function spaces see ros mog definition category finite products 
model computational cartesian model family universal arrows eval theta tb theta tb exists unique denoted making diagram commute theta eval tb gamma gamma gamma gamma gamma theta theta id suggestive way saying thing natural isomorphism theta vary op respectively 
simple language introduced section interpretation extended additional structure available cartesian computational model category finite products ffl new type interpreted terminal object new type constructor theta interpreted product ffl interpretation formed term gamma gamma sequence morphism gamma theta theta see table model interpretation extended functional types terms type interpreted abstraction application interpreted table 
consider functions explicitly language products treated unary functions product type 
rule syntax semantics var gamma gamma gamma hid gamma gamma tg gamma gamma morphism hi gamma gamma gamma theta hg gamma theta gamma table terms interpretation rule syntax semantics gamma gamma gamma app gamma gamma gamma hg app app theta ta tb eval table terms interpretation examples section show general ways constructing computational models simpler ones 
amounts adding new feature computations 
example cartesian computational model topos simplicity set cartesian computational models ffl inhabited delta model computations side effects theta thetas thetas thetas eval thetas eval thetas thetas thetas thetat ff ts id theta eval thetas thetas ff gamma ffl model computations exceptions te id id thetab coproduct diagram mediating morphism unique da natural isomorphism theta 
theta theta expressing commutativity coproducts products constructions provide basic building blocks combined instance ffl tes theta se theta combine side effects exceptions 
store lost exception raised retained 
ffl monad continuations monad theta thetas combines continuation side effects done giving denotational semantics imperative languages goto 
monad morphisms provide simple tool relating computational models definition cartesian computational models holds cartesian closed categories general clear properties order monad satisfy equalizing requirement 
intuitively expects category observations 
category monad morphism second model natural transformation oe ta theta tb theta id ta oe oe theta sb theta oe theta oe thetab oe horizontal composition oe oe oe sa oe ta oe 
example computational model constructions defined monad morphism ffl oe natural transformation oe thetas ffl oe te natural transformation oe monad morphisms adequate relating models natural transformation oe extended functional types 
notion logical relation models see mog various notions logical relation models 
calculus section formal system calculus sorted intuitionistic logic atomic predicates existence equivalence 
claim formal system sound complete models toposes 
soundness amounts showing inference rules admissible model completeness amounts showing theory initial model term model construction 
inference rules calculus deriving sequents gamma delta gamma sequence type assignments delta set formulas formula free variables fv delta delta included declared variables dv gamma gamma 
intuitive meaning gamma delta variables gamma formulas delta true true 
intentionally left set formulas unspecified depends class models interested 
minimal maximal choice set formulas ffl language interpreted model atomic formulas including allowed ffl language interpreted model topos higher order formulas allowed 
inference rules partitioned follows ffl general rules higher order intuitionistic logic variables range values terms denotes computations see table relevant rules ffl basic inference rules computational models see table ffl inference rules product types see table ffl inference rules functional types see table comparison calculus shows ffl calculus proves equivalences terms 
yz yz provable calculus ffl calculus proves equivalences terms 
yz yz yz provable calculus procedure modifies store increasing value contained local static variable time executed 
ffl term value calculus provably equivalent value variable abstraction iff value calculus calculus untyped models known categorical model untyped calculus reflexive object cartesian closed category see sco bar 
model analogs reflexive object tn see ong similar definitions context partial cartesian closed categories 
case model call value 
fact elements correspond functions values computations stands tv element applied computation evaluated second case model call name elements correspond functions computations computations 
call value call name interpretations defined induction derivation untyped term ffl isomorphism inverse call value interpretation morphism tv see table free variables range values 
general rules sequent calculus precisely substitution quantifiers modified slightly variables range values 
modifications similar introduced logic partial terms see section mog 
write substitution gamma delta subst gamma delta gamma delta gamma delta equivalence relation congr gamma delta gamma delta gamma delta table general rules write lenght sequence 
particular stands id gamma delta comp gamma delta fv 
gamma delta gamma delta gamma delta fi gamma delta gamma delta gamma delta gamma delta gamma delta 
gamma delta fi gamma delta gamma delta gamma delta gamma delta table rules computational types gamma delta gamma delta gamma delta hx theta gamma delta hx theta gamma delta 
gamma delta theta fi gamma delta hx theta gamma delta theta table rules unit product types gamma delta gamma delta fv delta gamma delta app gamma delta fi gamma delta gamma delta table rules functional types application call value app tv theta tv tv strict arguments app theta id eval ffl tn isomorphism inverse call name interpretation morphism tn tn see table free variables range computations 
application call name app tn theta tn tn strict argument lazy second app tn tn tn tn theta id tn eval tn call value equivalent callby name way expressing terms application abstraction evaluated binding value see ong analysis call name partial computations 
think desirable natural programming language forces evaluation expression 
conjecture fi calculus plotkin call name calculus proves exactly equivalences untyped terms true model call name tn reduction syntactic aspects calculus studied pattern calculus calculus see chapter bar plo 
simplicity consider untyped terms constructor 
order define notions reduction need distinguish kind terms values 
notion value introduced plo gives sufficient syntactic criteria term denote value 
definition basics ffl terms values sets defined terms values xj nv je ffl binary relation terms compatible iff terms obviously true allow tn delta rule syntax semantics var hid tg app hg app table call value interpretation rule syntax semantics var hid tn tn id tn theta tg tn tn tn app hg app table call name interpretation 


ffl notion reduction binary relation terms induces binary relations terms step reduction compatible closure reduction reflexive transitive closure convertibility symmetric transitive closure introduce notions reductions fi notion fi introduced plo call value analog fi new notion gives calculus extra power calculus 
definition notions reduction ffl fi notion reduction 
ffl notion reduction 
fv ffl notion reduction defined clauses id comp 
nv 
nv nv 
nv clauses fi provide mutually exclusive clauses reducing application ffl 
ffl 
ffl fi ffl try reduce subterm clause particularly important conjunction fi reduces fi redex nv fi redex fi redex body 
example show fi combined reduce yz yz fi ffl yz 
yz ffl yz 
yz fi ffl yz 
yz id easy give syntactic characterization normal forms proposition set nf normal forms nf provided xj set fi nf normal forms fi nf provided fi xj lemma basis characterizing equivalence existence calculus terms reduction 
lemma normalization commutativity ffl reduction normalizing term reduces normal form 
ffl fi reduction commute exists fi ffl reduction postponed fi reduction jv exists jv fi conversion decidable consider terms conversion define fi notions reduction nf set normal forms 
study equational presentation reduction calculus chapters mog far complicated proper analog reduction lacking analog conversion 
think complications due non equational axiomatization partial computations calculus particular axiom saying partial computations equivalent iff 

theorem syntactic characterization calculus ffl terms provably equivalent calculus iff reduce common term ffl term proved exist calculus iff reduces value 
research approach computations category theory achieves objectives ffl provides general framework reasoning programs collection similar clearly related calculi operational denotational semantic ffl improves calculi inspired operational semantics calculus deriving correct equivalences programs 
comparison categorical semantic computations linear logic monoidal closed categories see see shows lead orthogonal compatible modifications notion cartesian closed category 
fact monad id replaced monad cartesian product theta replaced tensor product omega opinion means proof program unrelated notions understood terms functions 
expect categorical datatypes suggested logic provide fine grained type system procedures linear functional type formal parameter exactly changing qualitative nature computations partial nondeterministic different view suggested gir paradigm proofs actions 
calculus open possibility study axiomatically specific notions computation nondeterminism parallelism relations 
instance investigation relation direct continuation semantics carried full generality commitment specific language 
calculus simple natural definition equality iff exist equivalent safely compile time check program units share common component required checking sharing constrain ml see hmt 
correctness type checking proved looking details operational semantics 
hyland kock participants category theory meeting sussex directing literature monads relevant subject 
discussions amadio harper honsell longo milner plotkin provided useful criticisms suggestions 
tofte taylor suggesting improvements early draft 
bar barendregt 
lambda calculus models 
lolli longo editors logic colloquium 
north holland 
bar barendregt 
lambda calculus syntax semantics 
north holland 
revised edition 
cs constable smith 
partial objects constructive type theory 
nd lics conf 
ieee 
cs constable smith 
computational foundations basic recursive function theory 
rd lics conf 
ieee 
ek eilenberg kelly 
closed categories 
eilenberg editors proc 
conf 
categorical algebra la jolla 
springer verlag 
felleisen friedman kohlbecker duba 
reasoning continuations 
st lics conf 
ieee 
gir girard 
geometry interaction 
gmw gordon milner wadsworth 
edinburgh lcf mechanized logic computation volume lncs 
springer verlag 
hmt harper milner tofte 
type discipline program modules 
proc 
tapsoft pisa volume lncs 
springer verlag 
kel kelly 
basic concepts enriched category theory 
cambridge university press 
koc kock 
monads symmetric monoidal closed categories 
archiv der mathematik 
koc kock 
strong functors monoidal monads 
various publications series aarhus august 
koc kock 
cartesian closed monads 
math 
scand 
mac maclane 
categories working mathematician 
springer verlag 
mas mason 
verification programs destructively manipulate data 
science computer programming 
mog moggi 
categories partial morphisms partial lambdacalculus 
proceedings workshop category theory computer programming guildford volume lncs 
springer verlag 
mog moggi 
partial lambda calculus 
phd thesis university edinburgh 
available cst 
mt mason talcott 
programming transforming proving function abstractions memories 
th colloquium automata languages programming 
eatcs 
ong ong 
lazy lambda calculus investigation foundations functional programming 
phd thesis university london october 
plo plotkin 
call name call value calculus 
theoretical computer science 
ros rosolini 
continuity effectiveness topoi 
phd thesis university oxford 
sco scott 
relating theories calculus 
hindley seldin editors curry essays logic lambda calculus formalisms 
academic press 
sco scott 
type theoretic alternative cuch iswim 
theoretical computer science 
see seely 
linear logic autonomous categories cofree coalgebras 
proc 
ams conf 
categories comp 
sci 
logic boulder 
sha sharma 
syntactic aspects non deterministic lambda calculus 
master thesis washington state university september 
available internal report cs comp 
sci 
dept szabo editor 
collected papers gerhard gentzen 
north holland 

