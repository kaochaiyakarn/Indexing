decentralized software evolution www ics uci edu papers back home page appeared proceedings international conference principles software evolution 
kyoto japan 
april 
decentralized software evolution www ics uci edu information computer science university california irvine irvine ca usa ics uci edu developers frequently confront dilemma may characterized functionality requested customer available existing shelf application missing vital customer 
unfortunately customize adapt existing application meet customer needs choice custom solution scratch result relatively small change functionality necessitates disproportionately large amount effort opportunity software reuse 
undesirable outcome may avoided shelf application supported decentralized software evolution define ability evolve software independent original software vendor 
decentralized software evolution abbreviated dse provides means third party software vendors customize existing applications particular domains customers 
capability benefits involved original application vendor sells product customization constitutes third party developer delivers product time lower cost reusing software starting scratch customer receives higher quality product time lower cost 
reliable rapid cost effective software evolution principal concern software research results date directly address dse 
principles techniques software evolution anticipation change separation concerns modularity information hiding object oriented design mediator design adaptive object oriented design design patterns aspect oriented design help design evolvable software systems 
unfortunately flexibility attained techniques lost application compiled 
compilation process plasticity design making exceedingly difficult accommodate change easy 
objective dse preserve design plasticity deployed system enabling third party evolution 
pm decentralized software evolution www ics uci edu papers rest organized follows 
section characterizes dse broader context software evolution 
section surveys existing techniques supporting dse 
section presents approach dse section summarizes experience applying approach example applications 
section discusses open issues 
software evolution table categorizes common software evolution technologies applied 
software evolved centralized authority software vendor top row decentralized group multiple independent software vendors bottom row 
software evolved design phase left column deployed customers right column 
centralized authority decentralized group design time evolution design notations methods tools process systems group communication collaboration tools configuration management tools emphasis distributed development post deployment evolution release management systems software patch files software plug ins scripting languages developer apis table matrix categorizes different techniques support software evolution evolve system evolution take place 
centralized design time evolution large majority available techniques tools support category software evolution 
example design notations methods booch rumbaugh object oriented methodologies provide guidelines system design diagrammatic notations design capture 
design tools rational rose automate diagramming process provide analysis support 
group communication collaboration tools mail revision control tools configuration management systems help teams members coordinate manage software changes 
decentralized design time evolution larger teams geographic distribution differentiate decentralized design time evolution centralized counterpart 
impact large teams software engineering environments pm decentralized software evolution www ics uci edu papers discussed perry kaiser 
argue project grows approximately people number complexity interactions increases 
consequence additional rules mechanisms enforce cooperation personnel needed 
understood impact geographic distribution software development 
fielding kaiser describe processes tools adopted particular globally distributed team develops apache web server 
identify importance mail communication archival mail communication means support group memory shared information space accessible project members coordination tools 
cutkosky report similar experiences internet manufacturing domain 
centralized post deployment evolution software vendors evolving upgrading deployed applications represented category 
evolution done single authority change conflicts arise 
result technologies concerned efficient distribution upgrades 
common technology today binary patch file encodes byte level changes necessary upgrade application subsequent release 
sophisticated tools tivoli tme software dependency information guide software upgrades 
decentralized post deployment evolution multiple software vendors independently evolving deployed application represented category 
popular techniques include software plug ins netscape communicator support new content types scripting languages 
host issues consequences inherent supporting type evolution 
example configuration management necessary conflicts independently developed software add ons occur 
applications evolved field anomalies may arise unforeseen interactions independently developed add ons 
application consistency verified application modified add ons installed removed 
software add vendors standard formats packaging distributing add ons 
furthermore decentralized control software evolution complicates product support documentation single authority represents application evolved multiple vendors 
user installation software add ons necessitates configuration management analysis robust accessible non technical users 
focus class evolution remainder 
existing techniques supporting decentralized software evolution degree flexibility afforded different approaches dse depicted 
pm decentralized software evolution www ics uci edu papers trade flexibility left application consistency right different decentralized software evolution mechanisms 
extreme left spectrum software vendor deploys application source code enabling sufficient expertise modify aspect application functionality 
rare commercial software market numerous free ware applications adopt approach including linux os apache web server gnu tools gcc emacs 
netscape communicator commercial products distribute source code independent extension 
types changes unrestricted extremely difficult combine independently developed add ons 
determining changes conflict requires careful analysis source code automated 
problem analogous merging branches software revision tree software configuration management system 
extreme right spectrum software vendor deploys application monolithic entity fixed set user selection options 
large majority commercial software applications adopt approach application consistency may assured single software vendor exclusive control evolution software vendor protect intellectual property rights making extraordinarily difficult reverse engineer application 
applications extremes support form software evolution trading assured consistency right flexibility left 
systems enable users third party software vendors customize extend application functionality independent original application vendor 
relatively small growing number software applications lay extremes 
examples include microsoft office suite adobe photoshop qualcomm 
common techniques supporting dse briefly described 
application programming interfaces apis api set functions application provides applications 
apis commonly tool integration mechanisms enable applications invoke services host application user involvement 
apis provide limited subset operations necessary support evolution 
example api software add ons replace remove existing functionality interpose new functionality existing parts 
consequence host application predetermined api class possible changes 
pm decentralized software evolution www ics uci edu papers software plug ins plug mechanism provides place holder third party components 
host application specifies requirements functional interface plug ins adhere provides mechanism new plug ins register host 
netscape communicator example registers plug ins placing special file system directory queried startup 
host application selects plug ins invokes necessary 
plug software add ons provide alternative implementations behaviors anticipated original developers 
interposition removal functionality supported dependency information plug ins determined 
scripting languages macros scripting language provides domain specific language specifying behavior language primitives library functions 
scripting language mechanisms provide essentially flexibility api mechanism scripting language provides domain specific language constructs facilitate implementation add ons built compiler interpreter lower entry barrier developing add ons 
dynamic link libraries dlls dynamic link libraries provide late binding mechanism application load link external software module runtime 
applications employ dlls reduce runtime memory share common functionality 
software add augment replace remove functionality masquerading application dll replacing file representing dll file system 
balzer instrumented connector technology technique alter netscape communicator browser support browsing virtual encrypted file systems 
dll software add ons unique evolve application manner unanticipated developers limitations 
dll add ons place existing dlls class changes 
unexpected side effects may result add dll violates unstated assumption application dll 
component applications component applications built component object model com corba applications composed separately compiled modules called components linked runtime 
application component exposes interface component applications expose richer structured api increasing potential supporting unanticipated changes 
existing technologies try separation application functionality component communication components tend hard coded components 
component replacement removal interposition behavior difficult 
techniques source code generally preserve small portion design flexibility deployed system 
restrict set potential changes precludes changes unanticipated original developers 
composition software add ons poorly supported existing techniques 
existing techniques circumvent composition problem preventing interaction add ons 
approach advocated szyperski 
approach approach decentralized post deployment software evolution overcomes limitations pm decentralized software evolution www ics uci edu papers exhibited previous approaches 
approach evolving applications software architectural level :10.1.1.135.5430
approach dse unique ways augment abstractions provided architectural level rules facilitate dse 
require components communicate connectors preserved explicit entities implementation act communication routers 
furthermore connectors encapsulate localize binding decisions components possible change binding decisions altering components 
include application architectural model mechanism maintain consistency model implementation deployed system 
deployed architectural model describes interconnections components connectors mappings implementation modules 
mapping enables changes specified terms architectural model effect corresponding changes implementation 
deploy architecture evolution manager aem application 
aem maintains correspondence architectural model implementation changes 
change violates application consistency aem reject change 
approach enables software add ons leverage architectural model rich semantics guide changes 
avoids accidental difficulties incurred existing approaches 
application entire architecture exposed remains malleable deployed system design plasticity preserved third party add vendors 
overcomes limited scope change exhibited existing approaches 
software add ons inspect modify system architectural model order achieve necessary semantics 
example greatly simplifies problem interposing new component existing components architectural model queried locate affected components connectors 
independently developed software add ons installed removed architectural model analyzed detect inconsistencies 
availability architectural model detect conflicts independently developed add ons 
results date implemented prototype tool suite called implements approach applications implemented architectural style 
conceptual architecture depicted briefly described 
pm decentralized software evolution www ics uci edu papers conceptual architecture tool suite 
software add ons evolve application inspecting changing architectural model 
changes may include addition removal replacement components connectors changes configuration components connectors 
architecture evolution manager notified changes opportunity revoke changes violate system integrity 
architecture evolution manager may utilize external analysis tools determine changes acceptable 
lower portion deployed application 
user downloads new software add web browser add installation script located executed 
implement applications add ons 
details regarding sample application implemented described 
implemented simple user tool installing removing software add ons called extension wizard deployed application 
users web browser display list downloadable software add ons provided software vendor web site 
user selects file representing add web browser downloads file invokes extension wizard 
software add file compressed archive containing new implementation modules installation script 
extension wizard file locates installation script contains executes 
software add installation script may query modify architectural model necessary 
installation script exception aem detects violation application invariants 
installation succeeds extension wizard notifies user provides option un install add 
pm decentralized software evolution www ics uci edu papers results date encouraging difficult issues remain 
general framework ensuring application consistency needed 
current architecture evolution manager enforces style rules guarantee changes leave application consistent state 
aspects style facilitate type field analysis 
currently investigating suitability graph grammars architectural constraints event resource models representing application invariants 
techniques hope address software compositionality new techniques needed address problems composing documentation product support decentralized environment 

balzer 
instrumenting monitoring debugging software architectures 
www isi edu software sciences papers instrumenting software architectures doc january 

booch 
object oriented analysis design 
second edition 
benjamin cummings publishing 


inside ole 
microsoft press 

cutkosky tenenbaum 
collaborative engineering internet 
communications acm vol 
september 

fielding kaiser 
apache server project 
ieee internet computing july august 

free software foundation 
categories free non free software 
www gnu org philosophy categories html january 

gamma helm johnson vlissides 
design patterns 
addison wesley 

hall heimbigner van der hoek wolf 
architecture post development configuration management wide area network 
th international conference distributed computing systems baltimore maryland may 

kiczales lamping mendhekar maeda lopes loingtier irwin 
aspect oriented programming 
parc technical report spl 
february 

lieberherr 
adaptive object oriented software demeter method 
pws publishing 


object management group 
common object request broker architecture specification revision july 
www omg org corba htm 
medvidovic taylor 
architecture runtime software evolution 
appear international conference software engineering kyoto japan 
april 

parnas 
criteria decomposing systems modules 
communications acm 
vol 
december 

perry kaiser 
models software development environments 
ieee transactions software engineering vol 
pp march 

perry wolf foundations study software architecture 
software engineering notes vol october 

shaw garlan 
software architecture perspectives emerging discipline prentice hall 

sullivan notkin 
reconciling environment integration software evolution 
acm transactions software engineering methodology 
vol july 
pm decentralized software evolution www ics uci edu papers 
szyperski 
independently extensible systems software engineering potential challenges 
proceedings th australasian computer science conference melbourne australia january february 

taylor medvidovic anderson whitehead robbins 
component message architectural style gui software 
ieee transactions software engineering june 

tivoli systems applications management specification 
www tivoli com 
wirth 
program development stepwise refinement 
communications acm 
vol 
april 
pm 
