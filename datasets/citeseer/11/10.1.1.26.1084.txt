dspin dynamic extension spin claudio radu iosif riccardo dipartimento di automatica informatica politecnico di torino corso degli torino italy iosif athena 
spin extension article meant way facilitate modeling verification object oriented programs 
provides means formal representation run time mechanisms intensively oo software dynamic object creation deletion virtual function calls article presents number language extensions implementation spin 
carried number experiments important expressibility gain achieved small loss performance 
nowadays common approach concurrent programming object oriented techniques order increase robustness re usability concurrent software 
number new problems software design verification arise due increase program complexity run time complexity 
obvious consequence formal verification kind software requires special features 
previous attempt elaborate formal models oo programs 
regards possibility automatically generating promela models programs written sc concurrent extension 
modeling approach important number limitations particular lack models object creation deletion pointer variables polymorphic function calls 
previous experience regarding translation java programs promela 
critical aspects model regards object creation 
discovered dynamic object creation represented promela ways exchange important increase memory requirements verification 
approach java multithreading applications regarded passive active objects thread objects predefined vectors maximal size order keep object data 
index vector pointer object 
addition fact number created objects strongly bound maximal vector size model cover type casting operations polymorphism lack underlying support representing kind information spin 
analysis java run time system led implementing features promela suffice order efficiently model kind java construct object 
dynamic object creation 
function definition call 
function code 
refer mechanisms dynamic features intended representations dynamic information regarding program 
distinguish static dynamic information referring program information known compile time static analysis techniques data flow analysis referring information occurs program running 
spin extension article called dspin stands dynamic spin 
intention provide spin number dynamic features allow object oriented programs modeled natural manner efficiently verified 
new features introduced dspin divided memory management features concerning dynamic memory allocation mechanisms 
functional management features concerning function declaration call local scoping 
mentioned mechanisms currently implemented spin simulator model checker attention focuses implementation model checker specifically changes representation program state transition system 
tried exploit standard philosophy possible order achieve high degree compatibility spin distribution 
new aspects introduced order ensure correctness dspin verifications compliance complexity reduction mechanisms spin 
organized follows sect 
presents language features sect 
concerned implementation dspin 
sect 
discusses backwards compatibility original software sect 
presents experimental results 
language features order self contained section discusses syntax semantics main extensions added promela dspin 
full description dspin language extension 
mentioned classify dynamic features memory management functional mentioned exception handling spin provides support means different interpretation construct 
management features 
memory management regards possibility referring memory objects statically declared dynamically allocated variables memory allocation release mechanisms 
functional management concerned function declaration call function code mechanism local scoping visibility issues 
covers main issues classes extensions 
memory management main extension concerning dynamic memory management memory mechanism called briefly pointer 
pointer may hold run time previously defined dynamically generated object 
object mean variable type including basic types array types user defined types 
order pointers able assign read values called left values respectively 
left values produced left value operator new object creation statement section 
pointer syntax semantics 
pointer variable declared prefixing name symbol declaration 
initialized declaration pointer variable contains null value null represents dspin literal programs order denote value undefined pointer 
pointers quite simple need dereferenced 
done automatically context 
consider case pointer variable occurs left hand side assignment statement 
case assignment changes pointer left value right hand side assignment pointer variable left value expression new object creation expression 
assignment pointer changes right value value object points 
attempt change right value undefined null pointer generates run time error 
second case considered pointer occurs right hand side assignment 
left hand side variable pointer pointer evaluate left value pointer evaluate right value value object points 
case pointer needs null run time error raised 
pointers comparison operators 
equality comparison pointers evaluates true left values equal point object null 
types expressions statements pointer evaluate right value 
left value operator 
left value operator unary operator takes argument kind variable basic array structured type 
applied pointer variable 
left value operator returns argument 
assigned pointer variable 
new delete statements 
new object creation statement called briefly new statement allocates amount memory order hold number objects basic structured type 
newly allocated area assigned pointer variable 
formal syntax new statement pointer new type bound pointer stands pointer variable type stands type name bound integer specifying size number objects allocated 
bound specifier optional default size object specified type 
object deletion statement briefly called delete statement performs reverse action deallocates memory space previously allocated new statement 
formal syntax delete statement delete pointer pointer stands pointer variable 
heap variables delete statements 
attempt delete static variable raises run time error 
point stressed concerns executability new delete statements 
executable 
order objects deleted depend order created process block attempting delete object 
functional management main concept regarding functional management features function defined dspin programming languages function parameterized sequence code execution may invoked certain point program termination control return immediately invocation point 
dspin functions executed synchronously caller process execution thread span continued function call 
statements contained function executed interleaving processes 
way functions defined dspin allows recursiveness natural manner 
functions represent objects supporting mechanism 
function referred special kind pointer provides mean model polymorphic function calls object oriented languages 
function definition call 
syntax function definition similar standard promela proctype definition 
formally looks function name list type declaration statement statement name stands function name list stands formal parameter list type type name including pointer types specifying function return type 
return type optional means function required return value procedure 
function definition specifies function body consists number declarations statements 
required function contain statement 
declaration name function occur function call statement 
dspin statements function executed interleaving reflecting behavior real concurrent programs 
types function invocation statement 
concerns non void functions functions return type specified definition 
formal syntax shown variable name list variable stands declared variable identifier name stands declared function name list function actual parameter list 
statement causes function name called return value assigned variable 
function may return value means dspin return statement formally specified return expression expression stands expression atomically evaluated 
return statement causes control leave function body return statement immediately invocation point 
return expression required return statement occurs non void function definition 
procedures functions return type specified return value interest invocation point simple type invocation name list name stands procedure name list actual parameter list 
statement causes function name called actual parameters list possible return value discarded 
third type function invocation statement introduced order facilitate writing tail recursive functions 
formal syntax return name list name stands non void function name list specifies actual parameter list function invocation 
statement causes function name called return value passed back return value caller function 
process attempting execute function call statement pass statement function blocking 
analogously return statement executable 
executability function call statement depends executability statements residing inside function body evaluated priori 
reason function call statements deterministic regions code step sequences 
function pointers 
previously mentioned functions represent objects referred special kind variables called function pointers 
pointer function holds function code 
function pointer declared variable predefined type named ftype 
initialized declaration function pointer undefined value null 
function pointer assigned declared function 
assignment function pointer form function invocation statement function name 
local scopes 
notion function introduces concept local scope variables 
variables declared inside function visible function scope 
local scope declared inside process function local scope enclosing program region curly braces 
local scopes nested variable name different scopes conflicts 
variables defined local scope automatically initialized control enters scope 
implementation issues section presents issues regarding implementation dynamic features discussed sect 
dspin 
note language extensions previously mentioned require dynamic memory space ability dynamically increase decrease amount memory current program state 
appears obvious case new delete statements function calls require caller process expand order hold function actual parameters local variables 
linear representation current state state vector representation convenient purposes dynamic increase decrease memory space require relocation components state processes queues variables affecting performance model checker 
solution adopt different representation current global variables global queues local variables local queues fig 

state structure heap area process process process state 
representation non linear composed number different vectors 
refer current state representation state structure 
fig 
depicts general organization state structure 
memory areas may shrink expand organized separate vectors variable sizes 
vector currently active process refer process vector global called heap area hold global data dynamically created objects 
global variables queues reside heap area local variables queues kept process vector 
static variables variables explicitly declared program assigned offset containing vector global variables represented heap offsets local variables defined offsets process vector contains 
representation variables contrasts standard spin representation spin directly converts promela variables variables corresponding type 
dspin type information compute storage size variable determine offset 
important point needs stressed regards way state structure representation affects state comparisons storage performed model checker verification runs 
standard version spin takes great advantage linear state representation order optimize run time performance model checker 
comparisons states implemented byte vector comparisons 
state space storing procedures hash indexing store minimized automaton store byte vector operations 
example computation hash index takes pass vector order accomplish task 
previously discussed state structure representation keeps state information organized vectors various sizes 
making state comparison store routines iterate vectors state structure greatly decreases run time performance model dspin considers storing techniques including spin version state structure transition system linearization state vector fig 

state structure linearization state comparison state compression state storage checker 
state compression difficult implement nonlinear structure 
implementation solution dspin interfaces state structure representation linear comparison compression storing techniques performing linearization state 
linear representation state subsequently referred state vector 
obtained state structure copying relevant state information heap area process vectors state vector 
state vector uniquely identifies state state change state structure reflected corresponding state vector 
state comparison storing routines original state structure representation 
fig 
shows state structure standard spin comparison compression storage routines 
implementation new delete operations mentioned dynamically allocated objects modeled heap area 
dynamic object represented integer index tables keep information needed order locate object 
table holds offset object heap area second holds object size 
refer table offset table second size table 
representation dynamic objects resembles representation message channels standard spin 
new operation takes parameters type specifier number elements specified type order compute storage size object 
heap area increased size increment order contain newly created object free slot offset size tables retrieval information written tables 
order avoid false partial matches state structure type newly created object encoded object area 
new operator returns table index object subsequently compute actual object data 
delete operation receives parameter object intended deleted 
specifies index number object index offset size tables 
heap area decreased decrement equal size object 
deleted object placed heap area compaction heap area needed order avoid memory losses caused fragmentation 
practice compaction simple operation involves relocation objects message channels situated deleted object heap area decreasing offset values size deleted object 
run time overhead heap compaction limited 
implementation object object mechanism called pointer sect 

recall pointer hold statically declared local global variable heap variable 
distinguish kinds object local variable global variable heap variable 
implementation object follows symbolic approach storing physical memory address pointer variable chosen encode information needed locate object pointer symbolic format 
approach allows easy run time check dangling 
model pointers unsigned bit integers bits integer encode type may mentioned 
local variable uses bits order encode declaring process identifier 
allows local variables processes referred 
bits hold local variable offset process vector allowing maximum different bit integer objects referred inside process vector 
global variable uses remaining bits representation variable offset heap area 
allows maximum different bit integer objects referred inside heap area 
heap variable uses remaining bits order keep object index number uniquely identifies heap object 
allows maximum different heap objects referred 
implementation functional management mechanisms mentioned presentation state structure active process system represented separate vector variable size 
implementation choice inspired real world run time systems separate stack process order hold actual values function parameters local variables function call 
fig 
shows detail organization process vector implemented dspin 
process vector composed static area situated refer prefix 
contains information regarding control implementation pointers different architectures requires minimal changes 
process prefix stack pointer base pointer fig 

process vector current stack frame flow process type current state number 
standard version spin information needed order identify current process transition transition table 
stack management performed means variables called stack pointer base pointer residing prefix area 
remainder process vector referred process stack 
top offset process stack pointed stack pointer 
area offset pointed base pointer top offset called current stack frame 
contains information regarding currently executing function local variables actual parameters function return information 
sect 
briefly mentioned couple aspects regarding semantics function calls 
recall states instructions contained function executed interleaving processes 
consequence function represented means separate finite state machine having entry global transition table 
process function call temporarily suspends execution finite state machine starts executing function fsm 
return function execution caller process fsm resumed 
second aspect regarding execution function calls caller process execution thread continued call 
order give detailed explanation consider linear sequence states explored depth search verification 
consider system state sa just performing function call 
firing function call transition new state sa generated 
state reflects changes committed caller process stack function call transition relevance verification point view carry information may useful order check system properties 
sense store state state space 
relevant state function call generated firing transition function body 
call state sb 
fig 
shows behavior model checker function call 
transitions depicted dotted lines represent function call return function transitions 
denote kind transition virtual transition 
create new state state space virtual transition recorded trail stack order allow model checker unwind performing backward move 
function call transition increases process stack size pushing return information stack current process type identifier caller callee sa call return sa sb fig 

function call state number 
left value return variable pushed stack 
object meant keep function return value 
current value base pointer saved stack base pointer set current value stack pointer process prefix order reflect control state change 
done storing function type identifier identifier function fsm initial state process prefix area 
point actual parameters evaluated values pushed stack 
mentioned process local variable uniquely identified offset relative stack frame 
base pointer set stack pointer value new stack frame created order hold function parameters local variables visible caller process scope return function transition performs reverse actions 
current stack frame popped stack simply setting stack pointer current value base pointer 
control flow information retrieved stack order resume caller process type identifier state number 
original stack frame restored assigning base pointer previously saved value 
function returns value assigned object referred left value saved stack 
subsequently model checker attempts fire transition immediately function call resuming way execution caller process fsm 
implementation local scopes process stack mechanism 
local scope seen parameterless function call return information needed transitions residing inside scope part finite state machine ones situated outside 
sect 
presents function mechanism called function pointer 
implementation function pointers uses bit integer value order represent information needed uniquely identify function object 
dspin language extension provide support dynamic binding variables 
bits encode function identifier entry global transition table 
allow maximum different functions referred 
bits encode state number function fsm initial state 
function pointer implementation uses symbolic approach allows run time consistency checks easily performed 
backwards compatibility previous section implementation dspin language features discussed issues related correctness formal verifications account new aspects 
discuss way implementation choices affect standard spin complexity reduction techniques considering state compressions partial order reductions 
explanations regarding run time overhead introduced dspin 
compliance state compressions sect 
state representation dspin standard spin state comparison compression storage techniques 
recall techniques linear representation states order optimize run time performance model checker 
dspin non linear state representation standard approach possible linearization state structure 
consider main state compression techniques spin compression recursive indexing compression collapse mode 
compression modes main ones sense compression routines minimized automaton take input state vector compressed byte masking recursive indexing routines 
important optimization dspin obtained combining linearization mentioned techniques 
way state vector obtained applying linearization state structure representation compressed form compressions comparisons hash storing 
time taken linearization case equal time needed standard spin byte mask recursive indexing yielding small overhead comparison original version 
noted linearization combined byte mask compression implemented block copy operations yielding speed increase 
exchange redundant information copied state vector case rendezvous queues original byte mask compression copied containing vectors 
compliance partial order reductions current version spin uses static partial order reduction interleavings processes known persistent set technique 
imple mentation partial order reduction spin static analysis processes order identify transitions safe 
case transition considered unconditionally safe regards access exclusively local variables discussed 
standard promela language quite straightforward find identifier represents local variable dspin 
access local variable referred global pointer variable considered unconditionally safe transition 
parameter passing function calls introduces similar problems 
previously mentioned static analysis source code determine exactly dynamic information conservative approximation obtained data flow analysis techniques 
solution implemented dspin uses iterative algorithm order solve known aliasing problem 
algorithm computes non pointer variable accessed certain point program alias list list pointers may refer 
alias relation symmetric pointer variable certain point program associated list objects may point 
safety condition restricted 
consider transition unconditionally safe accessed variables global global alias 
precisely access local variable aliased global pointer access pointer refers global object considered unsafe 
making assumption err conservative side choosing apply partial order reduction cases safely applied applying unsafe transitions 
concurrent program represented dspin consists set processes functions 
entity described reduced flow graph graph nodes represent sequences statements edges represent possible control flow paths 
node flow graph known basic block 
sequence consecutive statements flow control enters leaves possibility branching 
basic block associated equation relating alias relationships variables basic block alias relationship 
set equations known dataflow equation system 
solving data flow equation system means finding smallest conservative estimation basic block input output relations 
done iterative algorithm slightly modified version ones described 
iteration repeated process function flow graph time stable solution changes occur input output relation 
order estimate complexity algorithm consider process extended flow graph obtained adding original process flow graph flow graphs functions may called execution 
pointed number iterations depth ordered flow graph bounded depth flow graph logn represents number basic blocks extended flow graph 
consequence complexity entire data flow computation nlogn represents maximum number basic blocks process extended flow graphs 
experimental applied dspin perform verification number standard spin specifications order performance comparison tools 
experience analyzing standard examples reported part section 
remainder reports number tests carried dspin specification concurrent tree structure order give glimpse tool capability verifying programs dynamic information 
table shows comparison results obtained verifying number specifications dspin standard spin 
examples taken standard spin distribution denoted corresponding file name 
table 
standard examples file states transitions memory time mb sec dspin leader leader sort ii 
standard spin leader leader sort number states transitions exactly cases notice dspin tends slightly larger amount memory exchange small verification speedup 
cause overhead resides current implementation byte masking compression uses block copy operations order increase speed time copies state structure redundant information discussed sect 

memory overhead limited cases increase global number states 
analysis time reports obtained unix time command mb ram ultrasparc mhz workstation 
small times seconds tend inaccurate system overhead 
experiments regarding modeling dynamic aspects carried tree structure accessed concurrently updater processes insert values 
system model specified pointer variables dynamic object creation deletion operations 
mutual exclusion protocol follows approach described 
node associated lock channel ensure exclusive access data 
performing insertion node updater process holds locks ancestors considered unsafe safety property verified nodes split due insertion 
certain depth tree reached updater processes execution order avoid unbounded growth data structure 
tree example considered highly scalable scaling parameters tree order referred tree maximum depth referred number updater processes referred table shows results obtained performing analysis model different configurations scaling parameters 
column table specifies compression modes activated corresponding compilation options 
complexity increases exponentially maximum depth table 
tree example states transitions memory time options mb min sec collapse collapse collapse collapse bitstate collapse collapse bitstate bitstate bitstate tree number processes 
trivial cases verified recursive indexing collapse compression mode analyzed approximatively technique bitstate 
extension model checker spin providing support modeling verification programs dynamic mechanisms 
term dynamic roughly meaning context compiler development identifying information occurs exclusively run time 
order support representation dynamic information new concepts introduced front level pointer variables new object creation deletion statements function declarations calls function pointers local scopes 
implementation language extensions uses alternative representation states interfaced existing state compression storage techniques standard spin version 
new approaches representation variable function calls 
correctness verifications performed presence new language features discussed 
pointed systems dynamic extensions verified expense limited memory overhead advantage standard state compression techniques 
number cases partial order reductions applied smaller dspin spin due pointers function calls 
applicability partial order reductions driven conservative approximation variable alias relationship computed polynomial complexity data flow analysis algorithm 
experiments carried order comparison dspin standard version spin showed overhead memory space execution speed neglected 
experience non trivial dynamic data structure concurrent environment gives glimpse tool capability modeling verifying programs dynamic mechanisms 

alfred aho ravi sethi jeffrey ullman compilers principles techniques tools 
addison wesley 
bayer concurrency operations trees 
acta informatica vol 

springer verlag 
thierry modeling verification sc applications 
proceedings tools algorithms construction analysis systems lisbon portugal lncs 
springer verlag april 
iosif modeling validation java multithreading applications spin proceedings th workshop automata theoretic verification spin model checker paris france november 
iosif dspin user manual 
www dai arc dai arc auto tools tool shtml 
gerard holzmann state compression spin recursive indexing compression training runs 
proceedings rd workshop automata theoretic verification spin model checker twente holland april 
gerard holzmann improvement formal verification 
proceedings forte conference bern switzerland october 
knuth art computer programming 
vol 

sorting searching 
addison wesley 
bjarne stroustrup programming language 
addison wesley 
pierre wolper patrice godefroid partial order methods temporal verification 
concur proceedings lecture notes computer science vol 

springer verlag august 
