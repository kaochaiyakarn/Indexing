bulletin symbolic logic volume number june logic bunched implications peter hearn david pym 
introduce logic bi multiplicative linear additive intuitionistic implication live side side 
propositional version bi arises analysis proof theoretic relationship conjunction implication viewed merging intuitionistic logic multiplicative intuitionistic linear logic 
naturality bi seen categorically models propositional bi proofs bicartesian doubly closed categories categories freely combine semantics propositional intuitionistic logic propositional multiplicative intuitionistic linear logic 
predicate version bi includes addition standard additive quantifiers multiplicative intensional quantifiers new new arise observing restrictions structural rules level terms propositions 
discuss computational interpretations sharing propositional predicate levels 



restricting structural rules 
lasting impression linear logic formal system revealing computational significance structural rules weakening contraction 
logically absence leads decomposition conjunction additive multiplicative forms sequential natural deduction presentation follows rules weakening contraction rules define connective connectives distinct 
received august revised december 
association symbolic logic peter hearn david pym splitting connectives long history possibilities opened restricting structural rules new perspective vivid resource interpretations linear logic 
leading example number uses reading proof linear implication determines function uses argument exactly 
linear implication multiplicative say combines separate contexts elimination binary rule 
important message linear logic order obtain expressive system stay pretty weak system appears crucial allow access manner 
done linear logic specific way modality admits recovery conventional intuitionistic additive implication 
number uses reading implication extended modality reading required 
notice curious asymmetry 
removal structural rules enables conjunction split additive multiplicative parts treatment additive implication uses additional notion modality 
natural ask direct decomposition implication done conjunction 
answer 
particular access recovered di erent way involving modality 
technical cost conceptual symmetry richly structured notion sequent entailing delicate analysis relationship implication conjunction 
purpose explore alternative route combining multiplicative additive implication 
introduce logic bi logic bunched implications giving proof theory semantics proof theory semantics truth 
consider resource interpretations expose computational consequences choices 
presenting material proceed high level concentrate ideas formal results proofs 
reasons adopting approach 
firstly material covered broad reasonably full detail short article 
secondly hope style presentation help expose bi main features properties direct fashion features feel appreciated formal details proofs 
companion papers explore technical aspects bi semantics proof theory applications detail 
logic bunched implications 
proof theoretic 
recall implication inextricably bound conjunction antecedent forming operations formulate sequents 
connection goes far said rule regarded proof theoretically defining meaning 
far may wish take point clear character implication logic married sense determined comma conjunction 
case bi forms implication faced question rule rule multiplicative additive implication 
connection rules implications suggests way impasse antecedent forming operation determines behaviour implication implications antecedent forming operations 
postulate additional context forming operation stipulate contraction weakening possible 
rules scheme antecedents longer sequences trees propositions leaves internal nodes labelled short bunches 
aside chosen di erent symbol multiplicative implication order avoid confusion 
formal properties multiplicative connectives way mesh additive connectives gives rise di erent behaviour 
particular common readings number uses reading directly carry 
postulate proof rules way meaning significance resulting logic 
argue bi possesses natural semantics 
semantics proof theory arises doubly closed categories single category admits closed structures function spaces 
shows clearly di erence bi linear logic closed categories usually 
shall return point 
peter hearn david pym second semantics kripke style semantics formul combines kripke semantics intuitionistic logic urquhart semantics multiplicative intuitionistic linear logic 
second semantics gives bi genuine status logic 
gives way read formul propositions true false relative world 
resource interpretations bi stated terms notion sharing 
explain areas imperative programming resource portion computer store logic programming resource refers variables occurring answer substitutions locations paths followed proof search 
consider question multiplicative quantifiers 
bi quantifiers come varieties additive quantifiers multiplicative quantifiers new new additive ones exactly quantifiers classical intuitionistic linear logic 
multiplicative ones new intensional quantifiers kind long sought relevant logic 
course concentrate part propositional bi quantifiers considered briefly 
general point structural restrictions just sense level terms predicate logic level propositions 
quantifiers reflect giving rise form resource sensitivity individuals term denotations predicate logic 
fact predicate bi rich subtle claim elegant logic distinctions connectives propositional bi 
theory scope introductory article details predicate bi 

significance bi 
emphasize tools define analyze bi available time 
bunches sequent calculi relevant logics mere fact existence logic bi come surprise 
categorical fundamentals bi benefit hindsight laid earlier classic day 
main aims stress semantic link providing theoretical justification informal derivation bunched structure proof theoretic considerations sketched section 
logical significance bi seen reside clarity semantics 
directly combine cartesian closed categories symmetric monoidal closed categories models intuitionistic logic multiplicative intuitionistic linear logic structures exist independently logic mathematics 
arise naturally see 
similarly bi kripke semantics direct combination logic bunched implications kripke semantics intuitionistic logic urquhart semantics multiplicative intuitionistic linear logic 
semantics provides link bi computational significance 
elementary examination nature resources propositional predicate levels leads consider semantics type 
point view discussed 
say connection relevant logic give detailed comparison linear logic discuss bi place general context logics limit structural rules 

propositional bi 
section give presentation bi sequential natural deduction form sequent presentation elimination rules 
connectives 
additive connectives multiplicative connectives additive connectives correspond intuitionistic logic il multiplicative connectives correspond multiplicative intuitionistic linear logic mill refer background information systems 
bunches 
propositional assumption multiplicative unit multiplicative combination additive unit additive combination 
write indicate bunch appears subtree 
write similar tree replaces 
kind positional notation indicating incomplete tree completed placing various trees hole 
don compact representation bunches say nested multisets sequences binary operators real point bunches get implications right 
equivalence trees worrying representation 
coherent equivalence equivalence relation bunches satisfying 
commutative monoid equations 
commutative monoid equations 
congruence 
note distribute 
judgements 
logical consequences form peter hearn david pym bunch formula 
rules deriving judgements follow 
identity structure 
id multiplicatives 
ii additives 
include multiplicative disjunction fission par bi straightforward 
disjunction come naturally calculus bunched multiple 
notice elimination rules additive multiplicative implications conjunctions units identical form 
di erence antecedent combining operations 
admits weakening contraction rules additive maintenance explicit admissible question rules replace explicit ones delicate 
logic bunched implications lemma 
cut rule admissible cut notice formulation cut covers cases construction bunches 
presentation bi sequent calculus elimination rules replaced left rules detailed connection sequential natural deduction formulation including presentation calculus cut elimination normalization 
essential result su ces proposition 
bi natural deduction system respect evident reductions commuting conversions strongly normalizing 
subject reduction property 
bi contains mill il sublanguages precise connection stated follows proposition 
bi conservative il 

provable bi 
provable il formula built additive connectives 

bi conservative mill 

provable bi 
provable mill formula built multiplicative connectives replaces 
important point conservativity extend mill extended additive conjunction disjunction 
reason bi admits distribution additive conjunction disjunction mean converse 
prove distribution bi simply usual intuitionistic proof refers 
hand admit distribution 
return point 
conservativity properties proposition hold seen straightforwardly semantics bi proof theory 

doubly closed categories 
order explain structure proof theory usually useful give categorical description connectives enjoy universal properties satisfy naturality conditions 
bi note semantics proofs il cartesian closed categories mill symmetric monoidal closed categories 
case rule implication corresponds adjunction internal hom right adjoint cartesian product il tensor product mill 
model bi simply ask category structure necessary model mill il 
peter hearn david pym doubly closed category dcc short category equipped monoidal closed structures 
dcc called cartesian closed structures cartesian symmetric monoidal bicartesian addition finite coproducts 
brief models proofs bi bicartesian 
see dcc structure gives rise bunches consider adjunctions symmetric monoidal product cartesian categorical product 
mimic adjunctions proof theory context extension corresponding 
leads directly rules tree structure antecedents 
suppose dcc assignment object propositional letter 
call interpretation 
interpretation extends obvious way formula assign object bunch mapping dcc 
notation letters refer directly objects dcc indicating object determined formula 
form soundness completeness interpretations stated follows proposition 
provable bi dcc interpretation hom set non empty 
stronger notion soundness completeness possible 
interpretations propositional letters bi proof judgement determines morphism dcc 
stronger form connects equality induced dcc semantics equational theory proofs 
note assignment morphisms derivations evident interpretation elimination rule need distributivity 
get left adjoints preserve coproducts 
conservativity bi il seen immediately terms 
suppose categorical model il bicartesian closed category 
regard bicartesian dcc closed structures 
restrict additive fragment bi shows denotations bi proofs exactly model il 
logic bunched implications dcc semantics suggests sight unusual properties 
particular morphism variously viewed map adjunctions isomorphisms hom sets 
bi isomorphisms realized deductions observations may di erence appear thin implications interconvertible 
example model help confirm remarks 
example 
set set bicartesian closed coproducts cartesian closed structure defined pointwise corresponding versions set 
symmetric monoidal closed structure 
generally commutative monoid considered discrete monoidal category set bicartesian dcc example element commutative monoid addition modulo 
example appear convey particularly useful computational ideas remarks 

non degenerate model terminal object cartesian product 
definition induce collapse specified structure 

maps model 

combined fact maps direction implies maps back confirming linear version bunched language 

functor admitting isomorphism indicating dcc simply model linear peter hearn david pym logic disguise 
see consider sets cardinality 
try pick 

day construction 
generate rich class models bi general construction due brian day 
shows monoidal necessarily closed category induces monoidal closed structure functor category set op symmetric monoidal set op construction follows 
unit monoidal structure 
functors formula tensor product written ends ex fy 
formula uses set op ex set op 
formul contravariant giving morphism parts functors 
possible give explicit description tensor product ends 
fact set set example 
observations useful working tensor product 
form pairing operation ex form element 
see element defined consider described quotient ex fy 
pair equivalence class id 
second representation result characterizes maps tensor products natural transformations bijection families functions ex fy natural see true consider definition isomorphism multi map characterization essentially forced 
obtain models bi combine structure multiplicatives standard fact set op bicartesian 
finite products determined pointwise set additive exponent represented set op 
proposition 
symmetric monoidal category set op bicartesian dcc 
logic bunched implications worth remarking day describes results greater generality context enriched categories gives models mentioned proposition 
separate day shows yoneda embedding preserves closed structure analogue standard fact yoneda preserves ccc structure 
may conclude bi conservative mill level provability semantics proofs 

non interpretations 
seen expose workings bi proof theory equally indicate theory considering non examples models 
cpos pointed complete partial orders admit constructions reminiscent bi 
cpos strict function space continuous function space smash product cartesian product cpos 
give dcc cartesian closed structure category continuous functions gives monoidal closed structure category strict continuous functions 
dcc requires single category admit closed structures 
situation cpos closed categories involved typical linear logic 
example coherence space model monoidal exponent cartesian exponent closed category linear maps category stable maps 
example coherence space model bi may just technical curiosity reasons run deep relate resource interpretations connectives 
example judgement proof uses premiss twice 




calculus notation proof terms stands additive abstraction multiplicative 
key step admissible rule elimination equivalently followed contraction 
step way admits sharing argument appears 
peter hearn david pym point example occurrences body argument typed function 
serves illustrate idea multiplicative linear function uses argument exactly directly carry bi 
reason chosen adopt symbol associated readings tends carry bi multiplicative implication 
number uses reading considered characteristic logic linear logic restricts contraction carry meaning bi connectives 
justification judgement 
answer questions ways 
claim kripke resource semantics provides natural truth semantics bi 
appeal calculus sense certainly 
secondly bi understood terms truth semantics er resource interpretation proofs justify judgements 
call propositional sharing interpretation 

sharing interpretation set stage background idea functional programming data pairs functions additional intensional notion resource accessed computation 
resources distributed sense value may access 
concentrate implications 
functions may share resources arguments 
functions may share resources arguments 
illustrate informal reading connectives works recall unusual example proof term 
multiplicative assumption twice 
point view sharing interpretation subterm proof term allowed share argument additive function type 
reasonable requirement argument typed function just share variables proof term 
kind thing disallowed sharing interpretation application type 
reading extends connectives straightforward way 
example type non sharing pairs type pairs share 
sharing interpretation inspired john reynolds syntactic control interference idealized algol relevant 
programming languages ne intuitionistic logic bunched implications calculus respectively imperative features assignment statement calculi give functional data sharing interpretation computer store gives intensional component see 
concrete model corresponds informal reading obtained instance day construction 
category finite sets injective functions 
think object possible world identifies finite set cells computer memory 
worlds capture intensional part sharing interpretation part refers resource merely values 
object parts functors implication display basic character semantics set set set evident functor disjoint union set 
notice clauses correspond directly sharing interpretation 
absence indicates function lives world argument access disjoint resources 
presence indicates procedure may share store argument 
connectives defined day construction 
relate definitions informal reading defining functor cell plays role type storage cells inclusion functor set 
value cell cell world thought set cells associated world 
consider element cell cell definition says arbitrary cell element cell 
unpacking says arbitrary cell 
crucial point component component point view summed world di erent cells 
aside strictly speaking sharing interpretation section works ne variant bi admits weakening 
terms model set ne dcc unit terminal object 
linear variant model obtained replacing category finite sets bijections 
informal reading connectives adjusted saying additive function accesses resources argument 
intention section explain resource interpretation bi proofs consistent fact typed functions bi calculus proof terms arguments multiple times 
seen interpretation possible specific model corresponding 
hinted connection peter hearn david pym imperative programming full study connection take far afield refer companion information 

kripke resource semantics 
far considered bi proof type theoretic perspectives semantic focus interpretation proofs 
bi understood model theoretic point view consider notion truth formul seen denote propositions established sense 
looking algebraic semantics takes say heyting algebra structure model multiplicatives just collapsed version dcc semantics informative 
penetrating semantics mill urquhart 
semantics uses possible worlds arranged commutative monoid urquhart justifies terms philosophical analysis notion piece information 
recall kripke gave possible world semantics il understood functor categories set preorder 
obtain semantics bi combines semantics directly working categories set op symmetric monoidal category 
simplicity describe special case op partially ordered commutative monoid 
means multiplication monoid monotone note need meet join unit need greatest element 
monoid semantics bi defined forcing relation world formula 
propositions satisfy familiar monotonicity property intuitionistic logic kripke monotonicity implies 
detail interpretation specify forcing relation propositional variables way compatible kripke monotonicity 
clauses additive connectives implies 
multiplicatives follow urquhart semantics mill 
implies 
logic bunched implications order monoid discrete clauses reduce urquhart semantics mill 
clause precisely 
definition formulated category set proceed establish soundness completeness theorems result established term model constructed normal natural deductions 
read clauses informally terms resources 
example formula says roughly world forces multiplicative conjunction partition world components force constituents formula 
narrative partitioning suggests sense multiplicative intensional relevant terminology connectives depend internal structure worlds 
top understand formula follows cost function cost argument cost obtaining result applying function argument clauses additives understood terms conservation splitting information 
example establish additive conjunction information showing conjunct 
reader recognized similarity day construction treatment multiplicatives 
precise follows interpretation propositional letters define object set morphism part evident 
extends formul inductively dcc structure set connection semantics stated follows proposition 
formul worlds non empty 
important point element connected subobject 
urquhart form semantics exactly day closely related recovered 
regard dcc kripke resource semantics complementary 
provide proof theoretic view emphasizing adjoint relationships implications conjunctions 
kripke semantics exists independently emphasizes notion truth parameterized worlds 
world structure understood axiomatizing minimal assumptions resources way similar considerations urquhart key points divergence 
day construction provides link views 
peter hearn david pym comment 
urquhart aiming model relevant logics admit contraction included equation lead mismatch relevant logic holds urquhart semantics provable mismatch reasons 
accept equation bi admit contraction 
second add contraction bi insist equal greater equal 
respect semantics related ternary relation semantics meyer commutative monoid lines urquhart primitive natural choice light day construction 

quantifiers 
predicate version bi familiar intuitionistic quantifiers 
intensional quantifiers obtained observing structural restrictions level terms propositions 
formulated notion bunch variables separate bunches propositions 
describe single sorted version predicate bi 
bunches variables 
range variables bunches variables 
bunches variables subject linearity restriction variable appears bunch 
judgements 
consider terms propositions context syntax form term prop assert term proposition formed context 
constants predicate letters schematic judgements bunched logic contraction weakening allowed 
omit formal definition move consider quantifiers 
logical judgements form asserting consequence terms atomic predicates sequent formed logic bunched implications multiplicatives 
new new new term new term new new new new additives 
term term idea rule new wemay infer new usual way universal quantification variable sit multiplicative combination variables 
elimination rule careful substitute arbitrary term respective multiplicative relationship variables particular contain variables appearing requirement implemented linearity restriction 
universal rules usual restriction occur similarly existential elimination rules restriction occur 
consequence observations exactly reasonable read new literally 
take account new multiplicative relationship variables observed 
terms sharing interpretation read don share resources variables briefly new nomenclature new considered come relationship new storage variables idealized algol 
similar considerations apply new important avoid trap thinking new infinite multiplicative conjunction idea mentioned analogy view additive quantification infinite additive conjunction 
new closely allied multiplicative implication version allied peter hearn david pym multiplicative conjunction possible restricted circumstances 
interesting formulate dependent function type lines generalizes 
additive universal quantifier expected elimination rule formulated term rule admissible contraction level terms 
similar considerations apply additive existential quantifier 
extend kripke resource semantics quantifiers 
define notion environment specifies binding variables individuals 
suppose functor set functor domain individuals 
possible worlds semantics intuitionistic logic functor constant set allows di erent collections individuals exist di erent worlds 
example 
consider monoid natural numbers addition 
taken functor sending set 
morphism part inclusion 
may regard set specifying collection memory locations active world borrowing sharing interpretation terms imperative programming 
continuing definitions functor may define environment functor bunch variables follows 
right day tensor product cartesian product functors 
result functor obtain element forcing relation predicate bi form world formula possibly involving quantifiers predicate letters environment appropriate bunch variables world 
emphasise environment element set map set functorial action environments enables formulate extension kripke monotonicity implies 
logic bunched implications move give semantics quantifiers 
semantics additive quantifiers standard multiplicative quantifiers monoid structure follows dn 
dm 
new dn 
new dn 

multiplicative cases pairing operation day tensor product 
case takes environment element dn forms element 
notice definition environment functors functor fact equal definitions type correct 
di erence new considers elements dn accessible worlds look completely separate world monoid operation combine multiplicative existential di erent respect additive counterpart 
additive intuitionistic logic described local definition stays world travel accessible worlds find elements 
multiplicative new stay world looks element exists travel accessible lines hops arbitrary world accessible find element considers resulting formula environment formed multiplicative combination 
connection multiplicative quantifiers newness clear go back sharing interpretation 
hopping world multiplicatively apart current guarantees sharing model element obtained doesn interfere identifiers evaluated current world 
non interference property characteristic properties local state imperative languages 
conclude section point mentioned 
inclusion bunched structure level individuals raises question information incorporated rules propositional connectives 
connective choose follow multiplicative additive maintenance level individuals 
common cases multiplicative connectives fact cross cases multiplicative connective allows variable shared components approach taken example predicate versions linear logic 
bi radical possibility multiplicative maintenance 
full discussion predicate bi peter hearn david pym scope article details predicate bi including proof theory kripke categorical semantics presheaves fibred indexed categories 
illustrate main points section heading logic programming 

sharing interpretation ii 
background idea logic programming proof search primitive concept 
intensional notion resource 
resources variables occurring answer substitutions 
distributed sense access variables localized specific branches process proof search 
level formul gives rise new form modularity logic programs 
proof theoretic account logic programming simple elegant 
program expressed antecedent context sequent goal expressed succedent typically existentially quantified 
goal written prolog style described logical variable 
sequent interpreted request calculate pair answer substitution proof sequent 
operationally describe execute program supplied goal 
recall inference rules read reduction operators premisses 
kleene explains case classical predicate calculus 
operators basic units proof search backward chaining just inference rules basic units deduction forward chaining 
semantics goal directed proof search computationally appealing 
fix program proceed informally follows complex goal reduce applying reduction operator rule corresponds outermost connective reduction process repeated remaining goal formul atomic 
example goal construct tree 

note upper rightmost step adds program atomic goal invoke program resolution step 
suppose program includes proposition form atomic substitution logic bunched implications immediately proceed sub goal 
operational semantics desirable features 
importantly non deterministic reducing need backtracking acceptable level 
details model computation 
proofs constructed goal directed strategy called uniform proofs 
uniform proofs complete bi intuitionistic logic 
example consider trivially provable sequent see uniform proof sequent consider rule attempt reduce right hand side forces premature choice leading example clearly provable 
uniform proofs complete clausal hereditary harrop fragment bi 
basic idea restrict classes propositions permitted occur side sequent program clauses left goals right 
classes simplicity simplified form suppress operational issues defined mutual induction follows ranges atomic propositions program clauses new goals new sequent said hereditary harrop form bunch program clauses goal 
get version resolution step new fact cross cases new paired paired 
case taken linear logic lolli 
proof uniform proofs complete hereditary harrop sequents relies naturally presentation bi sequent calculus elimination rules replaced left rules introduce connective left hand side sequent 
provided restrict attention normal proofs presentation equivalent natural peter hearn david pym deduction 
details arguments scope purposes 
helpful consider resolution rule bit detail 
recall treatment quantifiers required collection variables sequents denoting set order variables occurring resolution explicit variables 
predicate bi elimination rule replaced left rule similarly new rule replaced left rule new new adding substitution resolution rule multiplicative clause new expressed derived rule id new resolution 
similar argument describes case additive clause 
whilst behaviour additive clauses familiar prolog languages multiplicative clauses provided bi di erent interpretation provides account local variables interference logic programming 
example illustrate ideas 
consider simple version famous blocks world robotic arm supposed manipulate blocks labelled suppose wish remove computation imagine construction process components may defective 
sketch possible program follows diagram robot logic bunched implications empty 
robot arm empty clear 
supports support 
supported ground 
top defect 
defective ready 
robot arm position conditions hold defect additive conjunction remove empty ready 
intend logical variable program clause remove quantified prolog language new suppose quantification clause defect usual prolog 
suppose block possibly defective reached sub goal defect 
invoking clause defect prolog style obtain sub goal remove 
ready invoke clause remove described resolution rule 
substitution fragment ultimate answer substitution computation replaces bound variable creating match sub goal remove 
variables required bunch empty 
get instance resolution remove remove id new remove remove resolution 
empty ready 
follows immediately possibly defective block take part computation proceeds left hand branch 
taken version remove prolog style persisted left hand branch requiring additional code enforce absence constructions 
setting local invocation clause remove shared remove clauses 
contrast situation arising additive resolutions peter hearn david pym variables fragments answer substitutions global shared 
generally clauses new new new interpreted enforcing non interference fragments answer substitution generated invocations disjoint 
behaviour arises partly form bunch variables distributed left right branches proof search 
semantically models set behaviour seen case forcing relation implication predicate bi uy mx uy implies mx require prop prop pairing operation day tensor product 
arbitrary nature environment clause reflects fact answer substitution branch computation remains calculated 
contribution quantifiers regulate scope variables 
reflected semantic clause quantifier new fn 
environment instantiated clause formed day product environment clause interpretation substitution determined resolution step 
topics developed 

bi context 
relation relevant logic 
bi considered relevant logic follow stephen read considering relevant logic broadly referring variety logics control structural rules necessarily ones possess contraction 
context problem originally gave rise bunches involved implication se distribution additive conjunction disjunction see converse 
di culty distribution fails standard sequent calculi logics omit structural rules main relevant logic bunches give delicate treatment structural rules crucial accounting distribution 
logic bunched implications distribution source debate relevant logic community see lively account 
purposes debate serious issue 
simply distribution valid kripke resource semantics regard natural semantics accept working situation justified semantics 
similarly distribution follows semantics proofs fact left adjoint 
suggest wants distribution circumstances linear typing provide type structure domain theory prime example 
historical perspective relationship propositional bi stated follows get bi dunn sequent calculus nr positive remove multiplicative contraction add unit multiplicative conjunction fusion intuitionistic falsity implication 
bi believe closely related belnap scheme display logic gives method mixing logics 
acknowledge historical debt relevant logic fact bi obtained way says significance 
consider modifying presentation way 
account bi somewhat bent 
sense aim show bi bunches come 
recap began noting curious asymmetry 
decomposition conjunction disjunction fission linear logic par multiplicative additive components decades old similarly direct decomposition implication emphasized 
natural ask decomposition implication lies heart logic 
argued question proof theoretic considerations implication leads forms context extension 
evidence original question worth asking provided semantics particularly semantics terms doubly closed categories display bi naturally occurring logic 
contrast fair say exceptions bunches appeared mainly technical device 
outside view charitable 
example history substructural logics sen mentions complications nonstandard gentzen systems technically properties comments bear directly bunched formalisms features distribution necessitate 
certain regret evident extra constants connectives entered gentzen formalism order account particular logic 
peter hearn david pym argue bunches conceptual status 
may arrive consideration proof theoretic relationship conjunction implication 
alternative route obtained doubly closed categories adjoint relationship conjunction implication leads bunched structure 
point view bunches purely technical particularly bunched structure certain situations semantically inevitable 
sketched bi admits resource interpretations sharing 
results tentative take time evaluate consequences 
believe possibilities applications described detail companion papers papers development 
apart specifics bi bunch approach controlling structural rules opens possibilities controlling scope dynamic extent information dependencies programs specifications 
conclude part general points relevant logics bunches 
suggest useful analyses existing relevant logics identification interesting variants obtained attention categorical proof theory particularly focusing structural relationships antecedents logical connectives 
second relevant logics benefit convincing resource interpretations proofs opposed just formul 
interpretations easy find reason believe di erent substructural logics bunches di erent semantic properties exemplified distribution 
relation linear logic 
acknowledged leading influence linear logic discuss detail di erences 
point aid comprehension comparison known system particularly go past surface similarity logics combine multiplicative additive implications 
comparison intuitionistic linear logic smaller fragments 
informal readings connectives di erent 
linear implication considered argument multiplicative implication readily admit reading 
sharing interpretation provides reading connectives consistent existence typed functions arguments multiple times 
second bunches similar contexts presentations linear logic 
particular nested bunch just internalized connective logic bunched implications logic zone marker internalize way 
uses bunches linear logic appear aimed providing analysis implication 
relationship uses prior relevant logic unclear 
third linear logic admits decomposition bi admits similar decomposition terms 
fourth common bi distributive logic additive conjunction distributes additive disjunction 
linear logic admit distribution 
fifth categorical models linear logic closed categories bi semantics proofs single category closed structures 
fact categorical point view bi appears natural progression isn say 
models linear logic described terms single closed category comonad 
intuitionistic linear structures equal status form separate closed categories symmetric monoidal cartesian functors 
bi accepts linear intuitionistic aspects equal footing takes step asking closed structures reside category 
sixth tarski style models bi explain formul terms notion truth obtained combining existing semantics intuitionistic relevant logics 
know comparable semantics linear logic combines standard semantics multiplicatives additives 
seventh linear logic number vivid computational readings including number uses reading original coherence space model eager lazy evaluation reading strict function model concurrency reading proofs logic programming interpretation 
early days bi just related computational readings imperative programming logic programming 
eighth bi multiplicative quantifiers new new alongside usual additive quantifiers 
despite topic years able locate worked predicate logic multiplicative quantifiers 
apart ambler system existential formulation somewhat complex 
relevant theory multiplicative dependent function types semantics incidentally regarded relying version bunches appropriate dependent type theory 
peter hearn david pym acknowledgments 
grateful pablo guy mccusker peter schroeder heister edmund robinson useful discussions 
partial support gratefully acknowledged 
abramsky computational interpretations linear logic theoretical computer science vol 
pp 

ambler order linear logic symmetric monoidal closed categories ph thesis university edinburgh 
anderson belnap entailment logic relevance necessity volume princeton university press 
anderson dunn belnap entailment logic relevance necessity vol 
ii princeton university press 
barber plotkin dual intuitionistic linear logic submitted october 
belnap display logic journal philosophical logic vol 
pp 

life middle substructural logics sen schroeder heister editors oxford university press pp 

benton mixed linear non linear logic proofs terms models proceedings computer science logic poland lecture notes computer science springer verlag berlin 
brookes main melton mislove editors mathematical foundations programming semantics eleventh annual conference electronic notes theoretical computer science vol 
elsevier science tulane university new orleans louisiana 
day closed categories functors reports midwest category seminar mac lane editor lecture notes mathematics vol 
springer verlag berlin new york pp 

embedding theorem closed categories category seminar sydney kelly editor lecture notes mathematics springer verlag berlin new york pp 

sen historical substructural logics substructural logics sen schroeder heister editors oxford university press pp 

dunn formulation positive 
relevant logic entailment handbook philosophical logic gabbay guenthner editors vol 
iii alternatives classical logic synthese library reidel dordrecht holland pp 


girard linear logic theoretical computer science vol 
pp 

unity logic annals pure applied logic vol 
pp 

harland pym programming overview proceedings amast berlin wirsing nivat editors lecture notes computer science springer verlag pp 

hodas miller logic programming fragment intuitionistic linear logic information computation vol 
pp 

pym kripke resource models dependently typed bunched calculus preparation available www dcs qmw ac uk pym 
relevant analysis natural deduction journal logic computation vol 
pp 

logic bunched implications kleene mathematical logic wiley sons 
kripke semantical analysis intuitionistic logic formal systems recursive functions crossley dummett editors north holland amsterdam pp 

lafont linear machine theoretical computer science vol 
pp 

lambek scott higher order categorical logic cambridge university press cambridge england 
martin meanings logical constants justifications logical laws technical report di logica matematica universit di siena 
miller logical analysis modules logic programming journal logic programming vol 
pp 

miller nadathur pfenning uniform proofs foundation logic programming annals pure applied logic vol 
pp 

hearn resource interpretations bunched implications calculus preparation preliminary version appear typed calculus applications lecture notes computer science 
hearn power tennent syntactic control interference revisited appear theoretical computer science preliminary version 
hearn tennent editors algol languages birkh auser boston volumes 
plotkin type theory recursion slides talk 
pym logic programming bunched implications electronic notes theoretical computer science vol 
extended pp 
semantics proof theory logic bunched implications ii predicate bi available web www dcs qmw ac uk pym 
semantics proof theory logic bunched implications propositional bi available web www dcs qmw ac uk pym 
pym harland uniform proof theoretic investigation linear logic programming journal logic computation vol 
pp 

read relevant logic philosophical examination inference basil blackwell 
reynolds syntactic control interference conference record fifth annual acm symposium principles programming languages new york acm january pp 

essence algol algorithmic languages proceedings international symposium algorithmic languages amsterdam de bakker van vliet editors north holland october pp 

fages concurrent constraint programming mixed non commutative linear logic proceedings csl berlin lecture notes computer science springer verlag 
sacerdoti structure plans behaviour elsevier north holland 
schroeder heister structural frameworks substructural logics role elimination inferences logical frameworks huet plotkin editors cambridge university press pp 

seely linear logic autonomous categories cofree coalgebras categories computer science logic providence rhode island gray scedrov editors contemporary mathematics american mathematical society peter hearn david pym pp 

troelstra tutorial linear logic substructural logics sen schroeder heister editors oxford university press pp 

urquhart semantics relevant logics journal vol 
pp 

department computer science queen mary westfield college university london london ns uk mail dcs qmw ac uk department computer science queen mary westfield college university london london ns uk mail pym dcs qmw ac uk 
