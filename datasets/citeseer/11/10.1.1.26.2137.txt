distributed systems comprehensive survey uwe kolb institut fur informatik technische universitat munchen postfach munchen west germany mail lan informatik tu muenchen dbp de gives survey common transparent distributed systems 
distinguish distributed file systems dfs distributed operating systems dos 
overview focussed systems providing access location transparency 
organized follows offers definitions features transparent distributed system services able provide 
propose catalog criteria enables compare different systems independently implementation done 
main entries heterogeneity system environment communication strategy naming security issues 
examine reliability availability separate systems way issues achieved 
section consists survey 
description system organized follows introduce main goal system developed classification system provided transparency levels 
second try give short view advantages disadvantages system 
allows reader compare systems respect trade issues performance versus availability 
third description system catalog criteria 
append information issues current status research contact long list 
section contains table comparison 
table gives lucid legible overview summarizing information provided allowing quick access 
section introduced sake completeness 
contains brief descriptions related systems 
copyright reprint permission originally published technical report tum november techn 
univ munchen munich germany 
copyright fl institut und institut fur informatik techn 
univ munchen munich germany 
abstracting non profit copying permitted credit source 
contents presentation catalog criteria organization survey survey accent alpine amoeba andrew argus athena birlix cambridge ds cedar charlotte chorus clouds cosmos cronus demos mp domain eden efs emerald grapevine guide gutenberg hcs helix ibis locus mach medusa mos nca ncs newcastle connection nexus nfs pulse quicksilver rfs unix smb sos sprite swallow vaxcluster xdfs table comparison related systems cics circus clearinghouse coda conic dash demos dfs dragon ere encompass felix firefly galaxy gfs ifs isis micros nest nonstop 
rig roscoe rss rt pc distributed services net linda kernel sesame staros stork topaz tilde upper wfs ring file server survey distributed systems 
believe approach novel 
thing tried best knowledge include distributed operating file systems presently existence 
approach encyclopedic 
system described independently 
description main goal pros cons dis advantages system enables reader decide system interest 
table comparing systems added long list 
needs read interested points 
presentation catalog criteria main goal distributed file systems dfs distributed operating systems dos provide level transparency users computer network 
tried develop scheme referred catalog criteria allows describe systems implementation independent way 
main questions answered kind transparency levels provided kind transparency achieved kind communication strategy proposed distributed character system allow increased availability reliability 
question leads analysis replication schemes evaluation proposed failure handling recovery strategies 
transparency levels distinguish levels transparency 
speak location transparency existing process requesting particular network resource necessarily know resource located 
access transparency gives user access local remote located resources way reasons availability resources replicated 
user know resource replicated replication transparency exists 
problem synchronization known 
distributed environment problem arises extended form 
encapsulating concurrency control inside proposed system meant concurrency transparency 
includes schemes provide system wide consistency weaker schemes user interaction necessary recreate consistency 
distinction transaction strategies pure semaphore techniques introduced special evaluation 
level transparency failure transparency 
network link failures node crashes network independent nodes 
systems provide stable storage failure recovery state information said failure transparent 
heterogeneity survey furthermore gives information heterogeneity systems assumptions hardware operating system modified look alike version describe underlying network 
lan kind lan gateways developed integrate systems wan world 
changes main forms implementing distribution 
new layer inserted top existing operating system handles requests provides remote access transparency levels 
second distributed system implemented new kernel runs node 
differentiation hint portable compatible system systems distribute kernel facilities nodes 
dedicated servers introduced strict client server model 
systems distribute small kernel nodes rest utilities special nodes non strict client server model 
group systems called integrated systems 
integrated system node client server 
survey tries describe differences 
communication protocols message passing main form communication excepting multiprocessor systems shared memory 
show kind protocols describe specialized protocols implemented 
connection rpc facility kind connection established peer communication partners important criteria 
distinguish point point connections virtual circuits datagram style connections connections pipes streams 
remote procedure call rpc facility provided add information 
semantics users distributed system interested way services provided semantics 
distinguish may means system guarantees semantics retrying fulfill service acknowledged done twice frequently semantics achieved duplicate detection exactly semantics 
kind achieved making service atomic issue called principle 
naming strategy describe naming philosophy distinguish object oriented traditional hierarchical naming conventions 
overview includes proposed name space mechanisms provide system spanning name space mounting facilities approaches 
security issue security plays important role distributed systems administration possibly decentralized participating hosts necessarily trusted 
intruders may find easy penetrate distributed environment 
sophisticated algorithms encryption authentication necessary 
add entries concerning issue 
encryption plain text exchanged communication media 
second systems special hardware components achieve security message transfer 
third capabilities provided enable particular users access resources secure predefined way 
introduce entry mutual authentication 
feature provided sort hand shake mechanism implemented allows bilateral recognition trustworthiness 
availability distributed systems highly available replicating resources services nodes network 
individual nodes masked 
nested transactions suited computer network 
overview covers feature 
look concurrency control scheme availability introduced mechanisms synchronization scheme nested transaction facility replication 
failure handling failure handling recovery critical issue 
systems designed perform academic environment systems highly reliable commercial trade decisions taken account 
add entries catalog criteria 
system provide recovery client server crash support orphan detection deletion non volatile memory called stable storage 
process migration final point interest process migration 
object oriented systems provide mobile objects traditional process systems support migration processes 
approaches come load balancing schemes increase system performance 
include issue survey 
organization survey section contains survey distributed systems alphabetical order 
system overview identically structured 
describe main goal system developed add brief description levels transparency provided 
doing give information character project academic commercial project 
try describe advantages pros cons system 
reading main goal advantages suffice deciding particular system interesting 
interest include description system question containing information needed understand entries catalog criteria achieved 
append miscellaneous information issues system including applications special software implemented support approach 
describe current status project contact get information complete list help reader investigation 
survey ends table comparison section 
everybody knows certain ways categorized comparison misleading 
recommend careful table 
summarizes main entries catalog criteria provides system degree fulfills 
section contains list related systems aren surveyed section provide necessary transparency level minor interest predecessor versions surveyed system 
mentioned sake completeness 
brief description main system 
disclaimer due nature know date status reached 
chance new publications surveyed systems new systems mentioned 
contact addresses may changed 
survey accent main goal accent successor rig system cf 
section message network access machine 
tries solve problems transparent access failure notification protection access large objects files low message overhead 
provides location failure transparency 
advantages accent achieves goals efficiently introducing capabilities message ports copy write virtual memory management network 
disadvantage system restriction type hardware unix software run 
description accent consists new operating system kernel operates workstations 
ipc facility supported modified version unix bsd 
inter process communication accent uses ports abstraction messages sent asynchronously 
process various ports kernel port 
rights possessing port sending receiving messages distinguished 
semantics application dependent achieved 
port full sending process suspended informed 
copying large messages handled copy network making virtual memory possible 
communication network done special network servers running host forward messages transparent senders 
network server maintains mapping network ports ports remotely accessible corresponding local ports 
servers advantage data type conversions implementation secure transmission outside kernel 
access port protected capabilities kernel trusted 
network servers map local remote capabilities 
processes allowed move machine transparent processes network servers get information 
ports differentiate owning receiving process possible give surviving process crash rights automatically assure computation 
additional reliability issues implemented top system 
miscellaneous status accent completed workstations carnegie mellon university 
leads evolution mach 
contact richard rashid computer science department carnegie mellon university pittsburgh pa usa alpine main goal primary purpose alpine known xerox research alpine store database files 
secondary goal provide transparent access ordinary files documents programs 
advantages database system xerox runs top alpine transaction file system 
clear disadvantage file level transactions low performance file system sets locks files pages 
contrast database system able perform concurrency control set locks logical units 
alpine gives client way find transaction aborted 
hand advantage philosophy file level transaction provides option running database system separate machine file system 
description alpine written cedar language cf 
section cedar programming environment 
alpine runs dorado workstations 
communication performed cedar general purpose remote procedure call facility 
compiler called takes cedar interface input produces server client stub modules output 
client stub module exports cedar interface access transparently translating local calls suitable sequence packets addressed server 
client call rpc system establish conversation authenticated calls 
conversation embodies authenticated identities client server security level encrypted communication 
file named file id unique called volume containing file 
volume abstraction physical disk volume 
volumes named globally unique ids 
alpine uses redo log technique implement atomic file update performs standard phase commit protocol 
locking hierarchy levels entire file page locks 
client chooses levels opening file 
log represented fixed length file underlying file system divided variable length log records allocated queue fashion 
implements simple access control scheme read modify access list file 
alpine file system supports atomic transactions 
alpine treats transaction id capability 
client transaction id name transaction coordinator may participate particular transaction 
clients participating transaction responsible synchronization locks synchronize concurrent procedure calls transaction 
lock manager detects deadlocks single file system timeouts aborts transactions break deadlocks 
replication files supported 
miscellaneous issues xerox conceived building alpine december 
external components built alpine usable cedar ifs hierarchical directory system implementation cedar open file user interface server administrative functions 
status early implementation coded started test 
xerox decided replace ifs cf 
section xdfs cf 
section alpine 
planned include distributed directory system location transparency form file replication 
contact brown digital equipment systems research center lytton ave palo alto ca taft 
adobe systems rd suite palo alto ca 
amoeba main goal main goal amoeba develop capability object oriented distributed operating system reliable performs 
provides access location concurrency failure transparency 
advantages main advantages fast inter process communication possibility implement security issues open systems 
disadvantage extra time special directory server needed convert ascii names capabilities 
description run amoeba special small kernel installed 
implementations family pdp vax ibm pc ns available 
compatibility unix amoeba interface installed unix machine 
unix file required amoeba site 
communication uses special layer protocol consisting physical layer port layer locates ports offers datagram service transaction layer transmits messages reliable final layer application dependent 
rpc provides semantics help timers alive messages 
call idempotent semantics achieved server crashes server 
available message transfer primitives send get request put reply implemented small library routines 
primitives blocking special exception messages may interrupt receiving process 
object global unique name expressed capability 
capability contains port number service manages object local number object field rights 
keep port number unique random integers bits 
capabilities stored directories managed directory service allowing hierarchical unix directory trees 
client table order associate physical addresses port numbers 
service new changed locality broadcast 
allow services wide area networks special server local net acts far distant server forwards requests 
partial authentication clients achieved capabilities described 
prevent intruder impersonating server called box inserted processor network 
disadvantage security isn guaranteed person omits box workstation 
amoeba includes measures improving availability reliability boot server tries restart crashed servers 
detect orphans alive messages server doesn get messages assumes client crashed kills associated processes 
amoeba file system fuss file block servers replicated stable storage server exists updates atomic 
preserve consistency optimistic concurrency control combined locking 
update new version created version committed concurrent updates checked 
serializable read write bits set block manual intervention necessary 
locks set updates groups files conflicts 
miscellaneous issues bank account server resources 
status amoeba developed improved vrije university cwi amsterdam 
sites european countries connected wide area network 
contact mullender cwi amsterdam netherlands andy tanenbaum dept mathematics computer science vrije universiteit mc amsterdam netherlands 
andrew main goal andrew distributed computing environment developed carnegie mellon university pittsburg workstation server principle 
goals andrew file system support growth workstations campus wide connected network providing students faculty members staff amenities shared file system 
set dedicated servers collectively called vice andrew virtual single file system presents homogeneous location transparent file name space client workstations 
advantages andrew shows connecting moderate amount heterogeneous workstations tractable 
disadvantages caching main form replication resulting low degree availability 
performance poor due bottleneck server cpus 
obviously criticism focused andrew 
performance multi workstation dfs providing replication compared small size dfs replication nfs cf 
section rfs cf 
section 
description clients servers run top modified unix bsd kernel 
supported machine types sun workstations dec ibm rt pcs 
typical andrew workstations applications virtues campus ibm token ring network communicate vice file system 
vice composed collection semi autonomous clusters connected backbone lan 
cluster consists collection virtues representative vice called cluster server operating system workstation intercepts file system calls forwards user level process called venus vice virtue client server model communicate rpc mechanism unreliable datagram protocol supported unix 
point view application programs name space file names partitioned subspaces local shared 
hierarchically structured 
local name space root file system workstation shared part mounted file system branch 
practice files accessible users shared space 
called accesses costly time consuming reduced possible 
demand entire files cached local disk 
important files replicated cluster servers 
block paging network 
diskless workstations supported 
called volume introduced 
volume subtree shared files 
user volume attached 
necessary file location information obtained volume location database 
database replicated servers 
security andrew vice boundary trustworthiness 
vice assumed secure 
virtue user control trusted vice 
mutual authentication vice virtue communicate encrypted messages key generated session 
features integrated remote procedure call package 
vice obtains access lists protect shared files 
lists associated directories 
files directory may individually protected selective access rights different users possible 
user rights shared file union rights specified groups user belongs 
vice provides multi readers single writer synchronization 
application programs explicit locking implicitly done caching software 
availability single point network machine failures accepted resulting temporary loss service small group users 
check open file exists reduce server state information 
means file close cache copy transmitted appropriate location 
changes immediately visible users timesharing file system 
miscellaneous issues remote program execution 
called butler system composed set programs running andrew workstations give users access idle workstations 
status andrew runs campus wide approximately virtues line registered users 
contact satyanarayanan information technology center carnegie mellon university park pittsburg pa argus main goal argus programming language writing distributed applications system developed support implementation execution distributed environments 
copes problems arise distributed programs network partitions crashes remote sites 
hand argus free programmer concerns concurrency deadlocks starvation detected avoided 
argus transparent sense access location failure 
advantages argus provides novel linguistic mechanisms guardians implemented number procedures run response remote requests 
guardian survives failures node running resilient 
guardian encapsulates resource accessed special procedures called handlers 
second atomic transactions actions short nested mask problems arising failures concurrency 
main disadvantage argus poor performance 
reasons argus treats call complete transaction 
second argus implementation resides top existing operating system 
description argus implementation runs microvax iis ultrix connected megabit second ethernet 
new layer top ultrix 
kernel modifications optimized udp called acp argus communication protocol 
argus uses message communication datagram service arguments passed value 
acp bit port numbers guardians system wide bit unique identifiers 
individual packets tagged message unique identifier sequence number 
final package indicates message 
argus provides built types atomic objects atomic arrays atomic records allows programmer define atomic data types 
semantics handler call subaction happens exactly 
naming argus send message called thread map destination guardian identifier network address 
security issues play role 
availability reliability strict phase commit protocol supports atomicity transactions 
serializability implemented atomic objects providing set operations access manipulate atomic objects 
recovery done versions written periodically stable storage 
hierarchical structure actions action tree allows orphan detection special state lists action participants orphan destruction algorithm 
miscellaneous argus programming language gives programmer possibility deal distributed applications extension clu language 
argus unique provides atomic actions programming language 
argus implement number distributed programs library information system distributed editor mail repository 
status argus research active 
contact barbara liskov massachusetts institute technology laboratory computer science cambridge ma athena main goal project athena educational experiment introduced may 
joint project mit dec ibm explore potential uses advanced computer technology university curriculum 
athena provides sort location access transparency dedicated service machines 
advantages athena novel approach attempt integrate computer power large campus wide network academic curriculum 
description mit installed network high performance graphic workstations 
network implemented multi vendor technologies redundant ring high speed backbone network 
existing campus facilities access lans connected backbone network special purpose gateways 
athena uses single operating system single communication protocol family implement computing environment 
operating system unix protocol family tcp ip 
transport protocol design virtual network machines project 
user id login names unique athena nodes 
name space files unix hierarchical 
computers connected network divided categories service computers workstations 
service computers provide generic services filing authentication client computers 
possible share information access data programs computer 
servers provide access system libraries class specific libraries user 
user contains user specific resources 
replication failure transparency network wide location transparency provided 
miscellaneous status athena student education 
network wide file system planned 
contact edward digital equipment forest street box ma steve lerman massachusetts institute technology mit cambridge ma 
birlix main goal birlix object oriented operating system supports distributed reliable secure parallel applications providing suitable services 
major point architecture failure detection recovery 
levels transparency achieved 
advantages system tries simplify resource access compared unix unified objects 
possible failures distributed systems handled 
due early state project difficult judge 
scale large amount data kept site 
description birlix emulates unix bsd interface providing percent object code level compatibility 
teams communication shared memory possible synchronized monitors 
teams communicate synchronously messages fixed small length arbitrary length 
messages passed network handled assisting processes sides kernel kept small 
error free message passing isn provided done efficiently inside teams 
supported timeouts sequence numbering detect duplicates existing client server relations searching previous relations start new 
fundamental abstractions objects teams implementing objects segments processes physical resources 
level naming scheme 
object searched network transparent hierarchical name context 
associated unique identifier searched data base replicated node 
corresponding team agent serving client unique id network searched object provided local replica data base contains entry 
possible data base inconsistent 
performance improvements location hints cached 
access objects checked object manager forms capability 
users authenticated passwords 
protect capabilities forgery reliable sender identification encryption algorithms 
name space divided main parts common files servers station specified workstation order protect private name spaces 
recover failures objects processes checkpointed state 
application programs form called recovery clusters created unit regard recovery 
case station failures teams non failed stations belonging cluster terminated 
teams recreated checkpoints segment memory mapped range addresses 
addition garbage collection executed 
central mechanism exists replicate objects 
checkpointing replicas synchronized 
miscellaneous issues objects migrate host deleting team creating site 
status prototype system running 
current concerned implementation new prototype includes proposed features improved performance simplified internal interfaces 
contact hermann gesellschaft fur mathematik und mbh schloss birlinghoven st augustin west germany cambridge ds main goal main intention cambridge cambridge digital communication ring coherent system 
cambridge distributed computing system primarily composed processor bank servers 
provides access location failure transparency 
advantages cambridge ds distributed systems 
despite fact provides performance reliable services 
disadvantage hardly portable tailored specific hardware cambridge ring 
description processor bank consists lsi motorola machines 
servers running computers pdp 
user associated tripos single user operating system 
nearly communication built sending packets kbytes consists byte transferred cambridge ring 
top simple remote procedure call protocol byte stream protocol 
rpc consists requests responses may semantics 
byte stream protocol full duplex connection oriented flow error control 
services located name server returns machine number port protocol expects 
location files filing machine lies file server accessing machine 
machine name lookup caching improve performance 
files user tripos file system mapped automatically stubs files file server 
protection system capabilities 
access capability sent active name server verified 
user authentication login name password 
byte streams authenticated 
file server distinguishes normal special files updated atomically 
garbage collector program checks file system inaccessible files deleted 
availability system improved processor bank 
main approach fault tolerance bring servers crash detecting crash downloading appropriate program 
miscellaneous status project completed computer laboratory cambridge 
contact roger needham computer laboratory university cambridge cambridge cb qg england cedar main goal cedar file system cfs developed part cedar experimental programming environment xerox palo alto research center 
cfs workstation file system provides access workstation local disk remote file servers single hierarchical name space 
sharing highly available consistent file versions main goal project 
advantages combination cedar file system semantics tool maintaining consistent versions shared files interesting approach highly available consistency guaranteeing distributed file system 
main disadvantage system implied concept immutability files 
version file complete copy resulting enormous amount disk space increased disk allocation activity 
attempt reduce storage space differentiating subsequent versions deleting unneeded versions 
description cfs implemented cedar workstations alto dorado workstations collection interim file system servers 
cfs accesses ifs servers inter network file transfer protocol 
cfs fully implemented inside workstations code 
cfs designed support sharing file server remote files workstations connected lan 
workstation equipped local disk 
diskless stations supported 
cfs provides workstation hierarchical name space includes files local disk file servers 
local files private remote files sharable clients 
local file available clients file transferred file server giving remote name 
workstation clients enabled access file remote name transfer local disk 
remote file creation atomic 
entire files transferable 
easy understand cfs provides access shared files immutable 
immutable file file modified created 
leads naming strategy cfs 
updating shared files accomplished creating new file versions 
reason complete file name consists server name root directory subdirectories necessarily simple name version 
server part identifies server file allocated 
variables provide access lowest low highest high versions file 
local files treated compilers editors immutable creating new file versions results written back disk 
security reasons cfs uses access control system provided ifs user identification 
access control lists contain user access rights 
information user user name password passed ifs part ftp 
availability plays important role cfs achieved replication 
important directories automatically periodically replicated multiple servers daemon process 
read requests open remote files satisfied local cache 
purpose workstation reserves portion local disk space cache 
cache managed approximate lru strategy 
consistency files achieved concept immutability files creating new file version time particular file modified consistency file server directories achieved performing transaction directory updates 
updates indivisible serialized 
transferring new file server assigning new version number entering name file server directory appear single act 
miscellaneous issues application cedar file system support called cedar software management tools known df system 
df provides environment handling maintaining large software packages 
programmer df files sure consistent view subsystem files 
cedar programming language 
alpine file system see section written cedar language 
status research cfs active continues enhanced 
cfs integral part cedar programming environment 
contact michael schroeder dec systems research center lytton ave palo alto ca charlotte main goal charlotte distributed operating system developed computer sciences department university wisconsin madison providing location access transparency 
part crystal project funded starting construct multicomputer large number substantial processing nodes 
advantages charlotte kernel provides multiprocessing mechanisms scheduling storage allocation process migration 
main design decision charlotte operating system keep kernel small efficient concise easily implemented 
services included kernel ipc process control essential entire system 
services implemented utility processes outside kernel 
main disadvantage charlotte file server design 
weak protection scheme unusual directory handling service difficult practice 
description charlotte implemented new kernel runs vax connected local area network bandwidth mbit second 
written local extension modula startup code written assembler interprocess communication code written software package called resides node 
enforces allocation network different applications virtualizing communications disks terminals 
charlotte provides unique form ipc 
link capability protected connection processes 
processes address presenting capabilities link ids 
information location process hidden inside kernel 
kernel maintains link table locate particular link 
process level communication non blocking asynchronous synchronous unbuffered 
unbuffered means message transmitted receiver provided space handle 
ipc scheme described implemented means finite state automaton link 
processes charlotte share memory 
client gain access subset files 
request outside jurisdiction forward appropriate remote file server initiated 
link client part forwarding message 
charlotte file unique full path name 
protection implemented file file basis evaluating rights directories particular path 
delete file removed server resides directory 
renaming directories supported 
failure handling charlotte optimistic approach 
machine fails assumed small amount time kernels discover send link destroyed message local clients 
replication resources supported 
mentioned process migration part design decisions 
miscellaneous status utilities charlotte designed implemented far include switchboard program starter manage memory file server 
contact raphael finkel marvin solomon computer sciences department university wisconsin madison wisconsin usa 
chorus main goal chorus project launched inria objective study basic concepts supporting distributed systems 
chorus intended provide basis various tools distributed computing installed efficiently little effort possible 
chorus provides access location transparency 
advantages chorus small kernel number different operating systems run simultaneous 
tries specify layered communication protocols unambiguously 
approach early line progress iso ccitt 
description chorus version runs different computer architectures mc intel ibm pc bull sm interconnected ethernet local area network 
provides extended unix system interface changes existing unix applications 
chorus new message passing kernel structures distributed processing actors 
actors local sequential processes 
actor located single site manipulate local objects 
actors communicate explicit exchange asynchronous messages 
set cooperating actors form activity distributed processing unit 
actors mobile 
operating systems unix implemented servers top kernel 
actors send receive messages ports 
local remote ports uniform view communication 
actors necessarily know correspondent ports located 
rpcs asynchronous message passing multicasting supported 
chorus applications described terms modules 
module group procedures kept single actor 
entity object actor port uniquely identified global name 
name designating entity 
protection chorus 
objects manipulated locally residing actors obtained called link 
linkage control procedure checks validity special request 
objects protected periodically changing passwords revealed authorized actors 
replication transaction failure handling mentioned 
miscellaneous issues light weighted processes distributed virtual memory real time facilities available 
addition processes executed remote 
status prototype implementation constructed tested inria support various distributed functions developed research projects sirius distributed data bases office automation research effort transfered commercial venture chorus syst eme chorus current version 
interfaces unix bsd os object oriented systems planned 
contact fr ed eric herrmann chorus syst emes av 
eiffel saint en cedex france inria domaine de voluceau bp le chesnay france chorus systems 
clouds main goal clouds distributed operating system developed provide integration reliability structure distributed system usable 
structure clouds promotes location access concurrency failure transparency support advanced programming paradigms integration resource management fair degree autonomy site 
advantages clouds provides system researchers adaptable high performance version fully implemented workbench experimentation distributed areas distributed databases distributed computing network application 
disadvantage clouds way subclass clouds objects 
inheritance supported 
description clouds version built vax hosts connected mbit sec ethernet 
current version implemented sun workstations 
cluster clouds machines runs ethernet users able gain access workstations running clouds unix workstation 
clouds implemented new kernel called ra native kernel running bare hardware 
clouds designed object thread model 
instances services devices programs data encapsulated entities called objects 
threads active entities system execute code object 
object invocation nested 
local remote invocations rpc differentiated clouds transparent application level 
distributed shared memory allows remote objects moved local node invocation may execute locally 
threads need communication messages 
ports need supported 
object typed named flat name space 
security issues implemented extending unix 
segment locking synchronisation mechanisms applications coordinate access shared segments 
clouds similar argus section provides nested transactions locking semantics 
stable objects implemented modified atomic operations 
permanent copy atomic object updated commit performed 
storage manager provides commitment strict phase commit protocol 
miscellaneous issues language designed integrate full set features clouds kernel supports 
status research going port clouds sun sun sequent multiprocessor architectures design implement system objects 
contact dasgupta school information computer science georgia institute technology atlanta ga cosmos main goal cosmos designed university lancaster cosmos gives integral support distribution programming environment functions 
location access transparency eventually replication synchronization transparency provided 
advantages cosmos implemented just simulated 
cosmos approach provides unifying framework handling distribution supporting sophisticated programming environment 
description cosmos implemented new kernel 
node cosmos run copy kernel 
currently simulation cosmos system runs unix 
prototype implementation planned run ethernet local area network 
cosmos projects build distributed system object model 
object encapsulates persistent data items manipulated specific operations 
accesses data objects defined operational interface similar eden section clouds section 
cosmos objects immutable see cedar section 
created object changed 
objects transformed atomically leading graph object versions 
increase availability system objects may replicated 
algorithm developed maintaining mutual consistency replicas gifford weighted voting scheme 
miscellaneous status simulation cosmos kernel running unix developed 
kernel facilities implemented 
full implementation planned network computers interconnected ethernet lan 
contact gordon blair john nicol department computing university lancaster lancaster la yr cronus main goal cronus distributed operating system developed establish distributed architecture interconnected heterogeneous computers promoting managing resource sharing inter network nodes 
cronus object model providing location access transparency 
advantages cronus approach shows designing distributed operating system operates integrates set heterogeneous architectures inter network environment tractable 
main disadvantage cronus hardly portable due host dependent kernel implementation 
description cronus new operating system kernel operates inter net environment including geographically distributed networks span thousands miles local area networks 
cronus currently runs single cluster defined lans 
principal elements cronus cluster include set hosts cronus operates 
second lans support communication hosts cluster internet gateway connects clusters large internet environment 
current cronus development uses ethernet ring lans 
local network capabilities indirectly accessed interface called virtual local network 
network independent ip datagram standard augmented broadcast multicast features 
lans connected arpa standard gateway tcp udp ip 
testbed configuration consists bbn unix dec vms unix bsd unix bsd gce systems 
cronus designed object model 
system activities operations objects organized classes called types 
cronus ipc cast form operation invocation replies synchronously asynchronously 
communication superset rpc scheme 
object direct control manager process host cronus cluster 
associated cronus objects unique identifier fixed length structured bit string guaranteed unique lifetime system 
user identity objects called principals capabilities support user authentication access control mechanisms 
principals managed authentication manager 
typical login sequence user supplies name principal password principal object 
objects migrate serve basis reconfiguring system 
objects replicated increase availability system 
miscellaneous issues diamond multi media message system application running cronus operating system 
status active 
additional cluster planned installation rome air development center 
contact schantz bbn laboratories incorporated moulton street cambridge ma 
main goal distributed academic computing networking operating system part hector joint project ibm germany university karlsruhe germany 
main design objectives preservation investment means appear compatible add existing systems node autonomy convenience user transparent access remote resources openness portability 
advantages attempts provide transparency top heterogeneous operating systems 
prototype operational short time said performance feasibility system academic environment 
description prototype implemented types operating systems pc dos ibm pc vm cms ibm vms dec vax 
global transport component gt interconnects multiple vendor network architectures sna provides reliable transport service conforms osi layer service interface 
gt transfers datagrams reliable establishing connection target transparent user 
remote service call rsc operations provide rpc mechanism 
operations available calls programming language 
addition necessary perform conversion data 
global unique names achieved concatenating hierarchical domain names local names domains 
distributed directory system names locates remote objects asking subset servers necessary subsequently forwards query 
remote file access rfa component defines unified homogeneous file system top heterogeneous local file systems 
global file names sequences identifiers separated periods 
files visible network publishing 
files file sets mounted attached virtual local file name guarantee transparent access 
user authenticated authentication server home domain 
server keeps access control lists objects 
user requests operation object server checks authorization help server user domain 
purpose authentication server exist domain installed fixed logical node name 
concurrent access files synchronized way writer gets new version replaces original file soon writer closes file 
multiple readers may read old version 
miscellaneous issues remote execution service selects execution sites running programs remote control running program provides access resources belong environment originating unit 
status project completed april prototype installed 
evaluation planned realistic environment 
contact ibm european networking center postfach heidelberg west germany university karlsruhe postfach karlsruhe west germany demos mp main goal main goal demos mp project provide basis various experiments distributed systems modified structured system 
access location transparency provided failures nodes network handled transparently 
advantages system simply organized structured 
common forms communication short messages bulk data transfer supported 
system tries improve reliability recovery mechanism mechanism global name service centralized 
workstations commonly nowadays sun vax supported 
description demos mp distributed version demos operating system operational various architectures including cray currently running processors connected local area network 
simulation running vax unix 
communication processes done messages sent way message channels called links 
types messages guaranteed 
guaranteed messages semantics achieved acknowledged window protocol 
transfer large amounts data facilitated special protocol uses called link data areas accessed directly 
links process maintained kernel 
link considered global address contains identifier creating machine local unique id known machine id processes migrate field localize current host process resulting worse performance 
links published name service called switchboard 
process register local switchboard requests forwarded necessary central global switchboard 
leads level naming hierarchy 
links protected objects provide function capabilities 
recovery facility called publishing installed able recover process completely transparent manner 
centralized recorder stores messages transmitted checkpoint recovery information 
detection failure recorder may restart affected processes checkpoint 
messages sent time checkpoint resent process ignoring duplicate messages 
miscellaneous issues demos mp provides virtual memory paging network 
way diskless workstations 
special links provide control processes machine boundaries 
status dormant development 
contact barton miller computer science department university wisconsin madison west dayton street madison wisconsin domain main goal domain system commercial product apollo computers connects personal workstations server computers 
processors transparently share common network wide virtual memory system allows groups users share programs files peripherals 
advantages domain provides efficient network wide single level store mechanism 
cases ipc mechanism preferable 
done system reliable 
description domain distributed operating system apollo computers 
network megabit second token ring 
connections networks integrated 
domain user environment offers aux unix system iii compatible software environment bsd enhancements 
domain aux programs mixed freely 
way communicate shared memory supported single level store mechanism 
objectbased virtual memory allows pages transferred network 
allow recovery link failures network installed star shaped configuration 
object unique bit identifier uid generated concatenating unique node id node generating object timestamp node timer 
objects located searching algorithm uses hints location 
permanent storage object entirely node original 
operations object performed node 
objects type uid identifies type manager handling object 
users provided hierarchical names translated local name servers object uid 
network wide root directory replicated node 
users authenticated replicated system wide user registry 
user identifier consists person project organization identifier login node 
file system object associated access control list object containing unix list rights 
system detects concurrency violations version numbers doesn provide transparent serialization 
distributed lock manager offers possibility readers single writer locks writers lock allows multiple writers located single network node 
addition manager responsible management caches 
miscellaneous issues generic service tool provides things calendar utility mail program document editor 
diskless nodes incorporated 
status apollo domain system full commercial production middle 
thousands networks workstations installed 
largest single network consists nodes 
contact paul levine apollo computer massachusetts main goal integrates computers connected local area network single unix machine providing access location transparency 
addition complexity kernel supposedly reduced 
advantages meets goal provide distributed unix acceptable performance increased availability nearly done improve reliability consistency 
description system implemented vax machines connected ethernet consists complete new kernel 
underlying hardware homogeneous 
bsd binaries run recompilation 
communication system uses protocols provides may semantics 
communication systems implements standard tcp ip protocols single global name space processes files unix 
additionally file system groups super root named group root directory providing usual naming mechanism system contain copies vital files bin 
necessarily correspondence physical computers sub trees 
dev directory names system devices 
symbolic name mapped universal file name fixed size bits contains host id index primary memory file table unique identifier 
protection scheme unix 
availability improved measures taken improve reliability 
miscellaneous issues disks switched manually crashed computer running files accessed way 
status installation running bell communications research ideas explored mos system 
contact ami litman bell communications research south street morristown 
eden main goal main goal eden project combine distribution integration collection nodes network object style programming 
important aspect develop special language eden programming language 
supports remote procedure calls objects weighted processes synchronous communication 
eden access location replication 
advantages system easy implemented portable resides top existing operating system 
hand results poor performance 
development distributed applications supported proofs correctness facilitated 
description final version operational collection sun vax machines top unix bsd 
possible eden unix services simultaneously 
get run unix kernel changed adding ipc package ethernet interface module compute timestamps 
objects eden communicate synchronously semantics guaranteed asynchronous communication possible 
accent ipc cf 
section 
eden objects active form unix process possibly passive form stored disk 
locate object change location access caching combined special search mechanism 
object protected capability contains unique identifier field specific rights 
improve reliability object checkpoint autonomously restarted crash 
done automatically object active form exists 
ways replicate objects objects replicated passive forms 
preserve consistency form gifford weighted voting scheme 
form replication copes network partitions 
additionally need special transaction manager 
miscellaneous issues garbage collection removes objects capabilities objects passive 
demonstrate properties behavior object concrete describes possible invocations 
status project completed applications 
contact lazowska department computer science fr university washington seattle wa efs main goal main motivation massachusetts computer efs approach desire bring full transparent access files remote computer users 
goal transparency achieved building concept existing unix file system architecture 
advantages efs system operates multiprocessor environment 
form provides transparent remote access disk files 
remote devices diskless nodes supported 
concept process pools available kernel processes play agent roles efs client request main advantage efs 
single client process able block efs server serving client processes 
description efs client server operates computers ethernet running enhanced version real time unix kernel variant unix time sharing system 
new reliable datagram protocol rdp designed implemented providing guaranteed message delivery ability dynamically create multiple low overhead connections single socket 
ipc uses bsd socket mechanism 
efs works unix environment inode contains information regard local file 
special variant inode 
contains machine id uniquely identifies single host network address usual core inode memory host 
remote file involved information 
mounting enables network wide access remote files 
protection efs built follows machines network converted password file nearly normal unix protection mechanisms exception selective mount points 
added certain files machines inaccessible non authorized users 
global protection domain simplify concept file ownership 
client server model efs stateful 
remote file operations transactions 
client process blocked server completes transaction 
miscellaneous status research going eventually support remote devices diskless nodes 
contact cole computer 
emerald main goal place emerald object oriented language 
approach simplify distributed programming build distributed operating system language support providing high performance flexibility locally distributed environment 
emerald provides access location transparency 
advantages advantage emerald objects capability create small integers large compiler objects way object definition mechanism 
single semantic model suffices define 
disadvantage performance reasons force weaker understanding transparency 
aspects distribution generally hidden programmer 
language support exists explicit notions location mobility 
description prototype implementation compiler emerald language small run time system constructed top dec ultrix operating system 
emerald runs mbit second ethernet local area network dec microvax ii workstations 
objects units programming distribution entities communication takes place 
object exports set operations manipulated operations 
information encapsulated specific objects 
objects communicate invocation 
parameters objects method parameter passing call object similar clu argus cf 
section 
emerald objects mobile process migration non object systems 
mobility enables emerald move parameters callee call move avoid remote argus needs parameter passing value 
emerald typed 
objects typed abstractly means interface set operations supported signature semantics 
signature includes information operation operation name number names types arguments results 
emerald supports inherent parallelism concurrency objects object 
processes exclusive access objects monitored variables may synchronize traditional condition variables 
availability emerald 
object moves leaves called forwarding address invocations sent old location forwarded correctly 
case machine crashes forwarding addresses lost 
emerald solves problem exhaustive search object implemented reliable broadcast protocol security issues replication failure handling mentioned due current status project 
miscellaneous issues reasons performance programmer enabled determine location objects 
application collocate objects communicate intensively reduce communication overhead 
alternatively concurrent subcomputations placed different nodes balance load 
status prototype implementation constructed 
research going implement features object mobility distributed garbage collection 
contact andrew black department computer science fr university washington seattle washington 
main goal global active flexible file environment study study globally distributed file system designed share information world wide network consisting workstations 
designed university california berkeley provide location access concurrency replication transparency huge user community 
advantages highly distributed order promote high capacity modular growth 
provides independent services naming replication caching security authentication 
serious approach build globally distributed file system huge world wide communication network 
incidentally experimental design 
built intended built 
description run networks varying speed architecture low speed telephone lines high speed optical fibers 
client workstations connected network quite heterogeneous ranging power pcs large mainframes running different operating systems 
heterogeneity extends administration 
network crosses national boundaries managed different organizations resulting difficult security privacy issues 
designed built base traditional file servers rpc communication 
rpc communication performed machines network 
files unique names independent user location file location number replicas 
clients may identify files descriptive names allowing file accesses contents 
name space hierarchical 
component file name qualifies object name space 
file system designed provide version history files 
kind manipulation supported version tree 
new versions created modification naming mechanism insures clients access latest version far unqualified requests 
unqualified requests contain version number particular file 
client server machine globally unique identifier 
contain hardware encryption devices security procedures 
demand public key private key pairs secure data transmission 
organization autonomous control security files 
rights user access freely granted revoked 
security system provides uniform mechanism authenticating users ensures privacy data 
creator file responsible degree replication 
determines availability new file 
client performing operation specifies caching degree consistency required cached copies 
client requests performed part transaction run set atomic serializable actions 
nested transactions supported traditional file server interface 
miscellaneous status just design implementation 
step design large scale globally distributed system 
contact douglas terry computer science division department electrical engineering computer science university california berkeley ca 

xerox parc 
grapevine main goal grapevine developed xerox palo alto research center distributed replicated system provides message delivery naming authentication resource location access control services internet computers 
access servers location replication entries transparent users 
advantages grapevine reliable highly available mailing system replication function servers 
leads cases unexpected delays errors 
details implementation changed order efficiently serve users 
description grapevine servers running alto computers ns processors pilot operating system 
client programs run various workstations operating systems 
communication built internet protocols 
individual packets sent unreliable byte streams may established pup protocol sent reliably acknowledged 
entry registration database level hierarchical name registry part corresponding locations organizations applications dividing administrative responsibility name registry second part 
choice servers done programs client side choosing nearest available server 
authentication associated file servers done grapevine 
manner protection scheme contains individuals groups 
improve performance file servers cache access control checks 
replicated submission paths available server deliver messages user user servers 
registries replicated various registration servers 
registry administered independently 
clients cope transient inconsistencies 
conflicting updates registration entries get solved 
miscellaneous issues grapevine control integrated circuit manufacturing facilities 
status grapevine xerox system consist servers users summer servers users 
registration service product clearinghouse service cf 
section 
contact michael schroeder dec systems research center lytton ave palo alto ca guide main goal guide grenoble universities integrated distributed environment object oriented distributed operating system local area networks 
embodies object oriented architecture defined esprit project construction management distributed office systems 
main design decisions comprise integration object model language includes notion type classification simple inheritance second dynamic migration multi threaded jobs network nodes 
guide provides location transparency network resources application layer 
advantages guide objects usually small files traditional systems may combined form larger units 
granularity allows locking smaller units higher concurrent throughput compared guardians argus eden objects eden usually larger units servers 
implementing guide eventually new kernel increase performance 
implementation system progress criticism valid 
description guide operating system set heterogeneous workstations bull sps sps sun connected high speed ethernet local area network 
guide implemented top system version unix 
guide uses persistent objects object lifetime related execution programs object existence long persistent object refers 
object named system wide unique identifier 
objects encapsulate set data set procedures 
type describes behavior shared objects type 
class defines specific implementation type 
classes generate instances 
define specialization type subtyping done 
hierarchy subtypes types paralleled classes 
subclass inherits operations superclass overload 
generic types classes provided 
objects accessible typed variables invoke operations objects 
similar concept mach task thread approach job activity concept 
job multiprocessor virtual machine provides arbitrary number sequential threads control called activities 
activities communicate shared objects 
nested transaction concept implemented provides exactly semantics atomic objects 
property object atomic fixed time object created 
transaction entirely contained single activity 
classical phase locking scheme applied atomic objects locking units 
security availability issues discussed due current status project 
miscellaneous issues guide language 
status guide joint project laboratoire de informatique bull research center grenoble 
organizations main design completed 
prototype single node implementation done top unix system contact laboratoire de informatique imag campus bp grenoble france 
gutenberg main goal gutenberg operating system kernel designed facilitate design structuring distributed systems provide forms transparency 
crux gutenberg approach port communication non uniform object orientation decentralized access authorization ports capability directory 
advantages problems performance systems support protection solved gutenberg structuring objects operating system level shared 
objects assumed large amortize cost communication 
experimentation kernel eventually determine feasibility approach 
description gutenberg kernel supposed built top unix published necessary changes unix kernel underlying hardware 
processes need ports communicate 
types ports send receive send receive 
messages sent synchronously asynchronously rpc 
creation ports controlled capabilities 
capabilities access potentially sharable objects listed capability directory organized groups called cd nodes 
cd nodes identified system wide unique names kernel user specified names 
cd nodes linked cd nodes capabilities 
capabilities cd nodes stable sharable 
process associated cd node set transient capabilities owned process destroyed process terminates 
creation access user defined objects involves checking kernel defined capabilities 
authorization guaranteed kernel trusted 
capabilities transferred permanently temporarily 
transfer monitored kernel 
capability directory partitioned replicated site 
cd nodes replicated locations 
site cd node created keeps track sites copies cd node 
synchronization access consistency replicas preserved phase locking scheme primary site distinction read write 
gutenberg provides means decompose execution processes units computations called recoverable actions execute atomically respect kernel objects stable storage 
communication leads dynamically developed dependencies actions 
stable storage phase commit protocol ensure atomicity 
miscellaneous status kernel currently implemented 
contact david stemple department computer information science university massachusetts amherst ma main goal main goal project provide network file system location transparent reliable different machines running different unix systems modification kernel 
advantages easily portable joining unix systems different bsd system global file system possible 
locking problems solved subsequently 
description installed existing unix system 
programs remote files relinked new library change sources 
compatibility bsd system family aix ultrix 
presently running various machines vax sun 
rpcs client server communication standard protocols 
tcp ip supported 
software layer placed user operating system interface forwards remote requests corresponding server processes 
created daemon called participating operating system separately 
addition server process data conversions required 
remote hosts need mounted 
path name contains mount point translation new path name starts remote root directory 
way remote mount point root 
purpose access control standard unix mechanism general access strategies employed 
rights hosts described authentication database included host 
client process maintains information concerning remote files information replicated server side 
case crash process host case network problems remote local resources released help data participating processes terminated 
miscellaneous status system tested vax sun systems 
includes extension accounting mechanisms network utilization transport protocols provision system administrator network tools 
contact baldi research development division systems management pisa italy 
hcs main goal heterogeneous computer systems project hcs designed integrate loosely connected collections hardware software systems 
costs adding new types systems decreased number common high level services users hope share increased 
include mail filing remote execution 
hcs provides access location transparency 
advantages main advantage capability incorporate new system low cost masking unique properties obtained 
prototypes proposed services exist criticized said applicability 
description prototypes hcs services tested various hardware software systems including sun vax ibm rt pcs xerox machines unix vms xerox operating systems bind clearinghouse name services 
unique communication mechanism heterogeneous remote procedure call emulates native rpcs underlying systems specifying interfaces principal components rpc stubs binding transport control protocol data representation 
components separated selected dynamically order achieve flexibility cost additional processing bind time 
performance essentially identical native rpcs tested sun courier rpc 
name service provides global name space uniform access local name services 
name contains context specifies name service individual name determines local name service 
name service specific code encapsulated set accessible routines added easily recompilation existing codes 
security issues measurements reliability performance improvements play role 
miscellaneous issues prototype filing service hfs built 
composed file server type server managing type information files mechanism generating routines access hfs 
mail service developed existing mail services global alias service contains entries user 
hcs environment remote execution facility constructing remote execution clients servers net 
client server service specific interpreters 
status prototypes services tested university washington 
research going 
contact david notkin department computer science fr university washington seattle wa helix main goal helix object oriented distributed file system system developed ottawa 
main objectives support diversity applications capability security provision access location failure transparency 
advantages helix useful features failure resistance protection files 
server cpu bottleneck server path name translation check access rights 
system configured solely software development hardly portable systems 
description system run motorola mc workstations 
helix compatible ucsd file system 
helix uses blocking communication primitive called rendezvous published underlying protocol semantics rendezvous 
communication multiple lans done special communication servers iso osi model 
helix extended multiple lans server called network helix implements standard interface passes requests far virtual circuits 
object unique capability containing server id field rights number object random bits 
capabilities stored directories user defined string 
directories linked freely necessarily hierarchical 
naming objects done directly capability path name 
requests remote files passed called client helix remote server path name translations capability checks 
files grouped logical volumes typical equivalent file servers 
links different volumes permitted 
caching improve performance 
capabilities created system automatically encrypted decrypted 
system allows transactions updates creation instances file 
transactions applied sets files nested 
measures taken improve reliability unreadable loops possible non hierarchical name space discovered linked special directory manual resolution 
case program failures files closed aborted 
clients periodically checked detect crashes 
miscellaneous status system lans close file servers supporting workstations 
contact marek bell northern research po box mountain view ca ibis main goal purpose ibis provide uniform unix compatible file system spans nodes network 
ibis built part tilde project transparent integrated local distributed environment cf 
section goal integrate cluster machines single large computing engine hiding network 
ibis successor stork provides levels transparency file access location replication concurrency 
advantages ibis exploits location transparency replicating files migration place needed 
replication migration files improve file system efficiency fault tolerance 
main disadvantage ibis quite anomaly 
ibis implemented separate layer unix kernel applications local file accesses overhead rises size file resulting poor performance 
placing ibis kernel speed 
description ibis runs vax hosts operating system unix bsd connected mbit sec 
ibis implements remote file operations ipc facility unix bsd standard tcp ip protocol restricted lans 
remote host running tcp connected gateways lossy subnets participate ibis 
access transparency layer unix kernel applications 
remote files layer uses rpc protocol interacting server 
unix system call semantics implemented ibis 
unix commands missing replaced look unix commands 
example rm remove file 
moves file special directory called eventually removed 
symbolic links crossing machines user construct directory tree spanning machines 
ibis provides unix file names path name strings hierarchical name space 
security issues ibis implemented authentication 
sites client server need way ascertaining authenticity 
ibis solves problem follows dedicated server established authentication scheme called way handshake secure channel client reserves port number executes called connection starter program 
starter opens secure channel called server creator remote host passes user id 
server creator process establishes server access rights indicated user id reserves port number 
exchanging port numbers secure channel allows establishment connection verifying 
secure channel implemented making connection starter server creator privileged processes communicate privileged port numbers 
availability ibis achieved replication 
main differences regard locus cf 
section 
ibis avoids bottleneck synchronization site locus css remote synchronization local replicates 
achieve ibis uses decentralized control scheme 
primary copy strategy update protocol 
primary copy updated update broadcasts signal invalidates cached copies 
strict state transition rules provides consistency 
information please confer 
miscellaneous issues migration relocate files speed write requests demand forced replication 
ibis provides explicit commands migration 
status research going develop automatic migration placement files 
contact comer department computer science purdue university west lafayette 
main goal experimental distributed operating system kernel provides message passing dynamic communication capabilities location transparency 
distributed processing research tool bell communication research 
advantages merely academic approach meant demonstrate evaluate interesting fields distributed environments 
criticism place 
description functions client server model 
consists new operating system kernel execution environment servers connection unix host computer 
kernel provides ipc tasking scheduling services provided server tasks separate kernel 
communication communication called tasks messages sent paths 
messages sent asynchronously 
sender block typical client server model 
kernel guarantees messages reliably delivered order sent 
security paths way communication links holder capability send messages similar links demos mp cf 
section roscoe cf 
section 
naming maintains tiered hierarchy name servers single global name server gns multiple local name servers lns 
path gns 
determine server local remote 
miscellaneous issues distributed database management system major application 
status research going build reliable disk servers top normal disk servers 
contact lee bell comm 
research morristown locus main goal locus developed provide distributed highly reliable version operating system huge unix community 
locus tools support automatic conversion stand unix nodes network wide connected locus nodes simultaneously offering high degree transparency location concurrency replication failure transparency 
advantages locus main advantage reliability availability feature supporting automatic replication stored data degree replication dynamically user control 
due majority consensus approach par subnets build temporary connected partition system remains operational high probability 
feature implies date data modified resulting inconsistent global state 
tradeoff performance remaining operational consistency leads locus disadvantage merge protocol frees user cases consistency checks network partitionings user interaction required order get back date global consistent state 
description locus step step modification extension unix operating system compatible bsd system branches 
load modules unix systems executable recompiling 
tools exist automatic conversion locus exchanging unix kernel called locus kernel reformatting existing unix file system loss information 
version locus supports dec vax dec pdp ibm pcs connected ethernet token ring lans 
communication different locus kernels uses point point connection vc virtual circuit 
single tree structure spanning nodes network includes virtually objects file system 
objects possess global unique name single uniform hierarchical name space identified path name character string 
logical root entire network 
path names include information location objects 
called file groups self contained subtrees naming hierarchy 
security terms intruder defense secure data transmission plays minor role mechanisms comparable ones implemented unix 
file replication possible locus multiple physical containers logical file group gaining access replica done certain protocol centralized synchronization site called css current synchronization site decides request site possible copy available determines actual ss storage site needed satisfy request 
atomic commit shadow copies updated pages provides consistency cases crashes network failures 
nested transactions 
token passing distributed operations file system permits serialization 
miscellaneous issues remote tasking supported new remote process system calls migrate run 
status originally research effort ucla late locus nowadays transferred commercial venture locus computing santa monica ca 
contact gerald popek department computer science ucla los angeles ca 
mach main goal mach designed intention integrating distributed multiprocessor functionality 
addition full binary compatibility unix bsd preserving simple extensible kernel runs services file service user state code 
extension accent system multiprocessors types hardware providing classes transparency adding features 
advantages mach environment distributed parallel applications variety inter process communication possibilities ranging shared memory efficient message passing uni multiprocessors 
provides chance huge unix community change real distributed system giving convenient services 
mach extensive performance line berkeley unix 
hand done built failure handling reliability improvements 
description current implementation runs vax uni multiprocessors sun ibm rt pcs encore multimax ns series processors sequent balance 
mentioned fully binary compatible unix bsd 
mach uses simplified version accent ipc facility weighted processes threads exist able handle forms asynchrony failures efficiently 
bsd interface port consistent resources 
see section information concerning communication naming protection 
addition matchmaker interface specification language enables interfaces clients servers specified generates remote procedure call stubs 
interfaces able perform run time type checking deliver information network servers data type conversions exchange different types hardware 
missing reliability issues included system called cf 
section relies mach development 
miscellaneous issues possible share memory multiple threads entities control tasks entities resource allocation highly machine independent manner providing performance copy write virtual memory 
adb kernel debugger available 
status mach running carnegie mellon university supporting andrew distributed file system 
free distribution export license available september 
development improvement proces new versions available users 
contact richard rashid computer science department carnegie mellon university pittsburgh pa 
medusa main goal medusa distributed operating system designed cm 
attempt produce system modular robust location transparent take advantage parallelism cm 
advantages cm contains lsi processor kb main memory 
hardware constraint leads design decision 
medusa discards assumption processor system able fulfill services operating system 
entire operating system divided disjoint utilities resulting unnecessary non local executions 
hand utilities example operating system distributed 
description medusa successor staros operating system cf 
section 
staros operating system developed carnegie mellon university cm computer 
medusa functionality divided disjoint utilities due small main memory cm internal lsi processor 
just small interrupt handling kernel distributed processors 
guarantee particular processor contains copy particular utility 
processor allowed execute local residing utility 
medusa messages provide pipe mechanism synchronous point point cross processor function invocations 
message pipes contain information location 
utility protects execution environment 
may migrate system format message exchange pipes selected 
medusa provides object oriented model 
object manipulated type specific operations 
access objects protected descriptor lists 
important object class semaphore class provides concurrency control shared objects 
deadlock detection supported 
concurrency support achieved called task force concept 
pertains collection concurrent activities entities get scheduled execution analogous processes traditional systems 
activities task force simultaneously run time 
failure handling replication availability issues addressed 
miscellaneous status design medusa begun late fall coding started summer 
current status research unknown 
contact john ousterhout dept computer science uc berkeley donald prime computer old connecticut path framingham ma 
main goal extends unix operating system simple powerful communication synchronization primitives needed real time environments 
location access transparent communication achieved channels 
advantages main advantage operating system real time environments 
major constraint user hardware described 
description operating system implemented new unix extending kernel 
consists processors computer systems 
processor connected mbit second net 
dec vax computer running unix serves host processor system 
satellite processors built pacific microsystems pm single board computer 
exact emulation unix environment allowing programs redirections pipes 
programs running controlled unix system provides access files 
specialized ipc designed support real time applications 
ipc mechanism communication paths called channels 
channel permits bilateral communication message exchange 
independent flow control provided channel meet real time constraints 
channels named provide location access transparent communication synchronization readers writers 
real time response priority preemptive scheduler efficient process switching implemented 
security issues failure handling availability system mentioned 
miscellaneous issues mimic robot teaching system implemented real time features 
includes symbolic debugger programs 
status prototypes systems built support multiprocessor robotics applications robotics research department 
contact robert laboratories holmdel nj 
mos main goal multicomputer operating system mos distributed unix system 
general purpose time sharing operating system cluster loosely connected independent homogeneous computers behave single machine unix system 
main goals mos include location access transparency decentralized control site autonomy dynamic process migration 
advantages mos systems attempts integrate load balancing philosophies distributed operating system 
process migration suboptimal load balancing algorithm implemented 
description mos developed hebrew university jerusalem consists pcs machines mc cpu interconnected mbit sec local area ring network 
machines homogeneous order allow process migration 
diskless nodes supported 
mos enhanced unix kernel supporting unix system calls 
mos binary compatible unix 
mos uses rpc mechanism unreliable datagram protocol communication 
file system mos forest 
tree complete unix file system 
single file system achieved placing trees forest 
standard path named hierarchical unix naming conventions provided 
security issues extending unix features implemented 
outside kernel software exists provides replication storage increase system availability 
provisions failure handling 
mos support atomic file transactions features supported unix 
miscellaneous issues mos multicomputer operating system distributed implementation unix providing suboptimal load balancing means process migration 
machine stores load information fraction machines including 
periodically half information transmitted machine chosen random 
transmitted information replaces stale half load statistics previously known receiving machine 
processes migrate underloaded nodes executed remotely 
addition light weighted processes exist executed different machines 
status pdp version mos operation current version operational spring 
research going performance modeling reliability parallel algorithms distributed applications 
contact amnon barak department computer science hebrew university jerusalem jerusalem israel 
nca ncs main goal network computing system ncs portable implementation network computing architecture nca framework developing distributed applications 
supports various machines running different operating systems 
designed represent step complete network computing environment providing aspects transparency 
advantages nca ncs eases integration heterogeneous machines operating systems computing environment expanding set network applications 
comparison similar systems hcs cf 
section difficult performance hasn measured 
description ncs currently runs apollo domain ix unix bsd sun version unix 
implementations progress ibm pc vax vms 
system supplies transport independent remote procedure call facility bsd sockets interface datagram facility udp 
provides semantics datagram layer optimizations operation declared idempotent 
interfaces remote procedures specified network interface definition language 
ncs includes portable compiler produces stub procedures handle data representation issues connect program calls ncs rpc runtime environment 
objects units distribution abstraction extension reconfiguration reliability 
replicated global location database helps locate object universal unique identifier type supported interfaces 
extension domain uid cf 
section 
distributed replication manager drm supports weakly consistent replicated database facility 
weak consistency means replicas may inconsistent absence updates converge consistent state finite amount time 
simple locking facility supports concurrent programming 
miscellaneous issues concurrent programming support cps provides weight tasking facilities 
data representation protocol defines set data types type constructors specify sets typed values ordered 
status apollo placed nca public domain 
implementations currently progress machine types 
version include general purpose name server able find object attributes text name 
transaction facility strongly consistent replication additionally planned 
contact nathaniel mishkin apollo computer ma 
newcastle connection main goal newcastle connection unix unite nc short developed university newcastle tyne england connect unix unix look alike systems way achieve location transparent access network resources 
advantages nc distributed file systems operational academic environment 
nc students early days distributed systems opportunity close look active system 
commands supported su pwd 
description nc ran set dec pdp computers unix system connected cambridge ring local area network 
nc implemented new layer top existing unix operating system 
modifications necessary existing source code unix system user program 
role filter system calls redirected unix system handle remote system calls directed unix system 
communication newcastle connection layers reliable remote procedure call protocol client server relationship 
major issue design 
file name consists trailing unix file system path name 
program involved executed site file store held 
data transferred sites response normal unix read write requests 
local system administrators responsible allocating ordinary user ids maintaining table recognized remote user ids 
unrecognized remote user ids mapped restricted guest ids 
access nc unix file system simple conventional login 
security issues implemented 
replication load balancing nodes fault tolerance issues implemented 
miscellaneous status research currently aiming connecting typical nc systems unix dissimilar systems 
purpose message guts operating system stripped modified version called nimrod 
nimrod experimental attempt building heterogeneous nc environment 
central mapping agent called nc process provides message exchange unix nimrod systems 
unix nimrod systems different hardware run 
plan connect systems running different hardware world unite philosophy 
contact snow computing laboratory university newcastle tyne road newcastle tyne ne ru england 
nexus main goal main purpose building nexus distributed operating system support experimental research object oriented distributed computing fault tolerance techniques 
provides access location failure transparency 
advantages criticism appropriate system fully implemented meant basis experimental research 
description system consists minimal distributed kernel provides inter object communication collection objects 
current design kernel object implemented unix processes network sun workstations running unix bsd 
unix functions completely visible application level 
nexus kernel provides synchronous asynchronous communication remote procedure call paradigm 
primitives datagram facility guarantee delivery 
exactly semantics desired transaction primitives 
requests sent asynchronously possible wait responses simultaneously 
object controlled object manager executes operations including concurrency control recovery object 
objects set operations set states grouped classes 
unix processes managing classes called class representatives 
representative manages subset class maintains registry probable representatives object 
object representative unique identifier uid 
object located uid contains name representative directly uid representative 
kernel maintains cache locate representatives broadcast cache contain entry 
context object provides hierarchical name space shell object translates symbolic object names uids 
security play role 
set library functions transaction management concurrency control provided creating phase locking commit protocols 
functions supported called virtual disk storage objects 
invocations transaction treated nested transactions 
nexus introduces concept weak atomicity meaning atomicity action object guaranteed changes object state 
miscellaneous status currently prototype implemented order evaluate system structure functionality 
contact anand tripathi dept computer science university minnesota minneapolis mn nfs main goal sun network filesystem nfs implemented solve problem communication sharing heterogeneous network machines operating systems providing shared file system location transparently network 
advantages nfs designed easily transferred operating systems machine architectures 
uses external data representation xdr specification 
describes protocols independently machines systems 
addition source code user level implementation rpc xdr libraries published 
main disadvantages nfs support unix file system semantics 
example due stateless protocol removing open files file locking supported 
description nfs runs various machine types operating systems unix bsd sun os dec ultrix system vms ms dos 
nfs implemented top remote procedure call package client server manner 
nfs adds new interface kernel 
client side implemented inside unix kernel 
mount service implemented daemon process started time mount request initialized 
possible machine client server 
file system interface consists parts virtual file system vfs interface defines operations entire file system second virtual node vnode interface defines operations single file file system 
communication synchronous uses stateless protocol 
server need keep track past events crash recovery easy implement 
nfs uses darpa user datagram protocol udp internet protocol ip transport level 
performance nfs nfs uses normal cache buffers read ahead write increase performance 
read requests performance neglect local remote access differences performance poor synchronous server site 
naming nfs done unix path names 
nfs servers export complete file systems 
clients mount file system branch exported remote file system top local directory 
hierarchical uniform name space users 
security nfs rpc package allows encrypted authentication method allowing access simpler authentication method pc users 
due distributed character network file system security features provided weaker standard unix 
nfs uses unix permission checks client server sites 
user id group id passed rpc server decide client request access satisfied 
server easily protect local file system export list exported file systems authorized clients import 
failures server crash recovery 
client crashes recovery necessary stateless protocol 
server crashes client resends requests response received 
nfs requests idempotent 
stateless server implementation implies unix incompatibilities 
example client opens file removes client reads fail file open 
useful extension nfs called yellow pages yp mechanism service provides distribution central administration read system databases 
exported file system information maintained machine highly available way 
miscellaneous status contact nfs established product support bsd available sun mt system associates ultrix dec version 
vms implementation server side 
ms dos part complicated need redirector layer redirects system calls appropriate ms dos services 
main goal main goal design provide nested transactions distributed object oriented environment 
guarantees location access concurrency transparency 
advantages object oriented approach resulting usually poor performance 
compensate inheritance defined language level integral feature design supported hardware 
description stands design implementation fault tolerant multicomputer system developed gesellschaft fur mathematik und mbh gmd west germany 
new layer top unix bsd 
architecture divided subsystems communicate messages stream sockets 
object model 
object consists distinct parts object header containing semantic information object order achieve defined interface capability part exclusively holding objects data part 
extended objects called invoke function defined executes type specific operation providing simple synchronous calls concurrent calls 
simple synchronous calls rpc unreliable datagram protocol 
parameter passing supplied parameter object allows call call value 
concurrent calls correspond traditional fork 
result calling process blocked results delivered indicating processes called terminated 
parallel path computation simple synchronous call 
transactions main form computation 
communication transactions performed shared data objects 
lock descriptor holds information necessary non strict phase locking protocol guarantees serializability operations performed shared object 
capabilities access control 
sophisticated security issues implemented 
mentioned concurrency control achieved locking transaction scheme 
transactions nested 
miscellaneous issues mapping unit access object represent efficient support meant tailor specific memory management unit 
provides efficient save restore facilities basic functions manage recovery points needed transaction scheme 
status research going look alternative synchronization policies increase system performance 
contact institut fur der gesellschaft fur mathematik und mbh schloss birlinghoven st augustin west germany 
pulse main goal pulse distributed operating system written partially ada 
main aspects project design distributed file system support standalone operation workstations evaluation ada suitability distributed applications 
advantages system provides environment distributed ada programs 
prototype circumstantial types machines required developing running applications 
description pulse run lsi connected cambridge ring 
development done vax cross compiled downloaded ada compiler exists lsi 
kernel written pulse ipc provides virtual circuit guarantees messages received condition sequence guarantee delivery 
messages sent synchronously asynchronously rpc 
unix hierarchical structure 
files kept volumes unique numbers 
location done associated global numbers 
file server maintains list locally line volumes 
file remote request broadcasted 
protection scheme unix 
files directories replicated updated primary copy mechanism 
duplicates updated time referenced 
purpose version numbers held 
user may control replication 
client file file server attempts find copy order local master local duplicate remote master remote duplicate 
miscellaneous issues software tools shell ed implemented ada 
status prototype implemented 
current status project unknown 
contact wellings department computer science university york york uk quicksilver main goal quicksilver developed ibm almaden research center client server structured distributed system uses atomic transactions paradigm recovery management 
way system access location failure transparent 
properly written programs resilient external process machine failures able recover resources associated failed entities 
advantages system provides highly reliable services little loss performance example recovery management overhead low 
hand nested transactions language directed facilities available defining recoverable objects 
description quicksilver consists new operating system kernel running ibm rt pcs inter connected ibm token ring 
inter process communication function synchronously asynchronously returned request id way messages 
commonly request response protocol requests lost duplicated data transferred reliably case server crash errors reported clients involved semantics 
service global unique address private public registering name service 
resolution file name quicksilver distributed file system performed context specific user file name space 
universe users partitioned domains having user location identification service 
user names unique domain domain user name pair leads global unique name space 
file server recoverable copy user indices quotas 
sake performance files transferred locally cached means callbacks assist validating caches 
authentication login 
kernel communication system trusted local system 
cope failures ipc behalf transaction tagged global unique transaction identifier 
transaction managers tm responsible commit coordination communicating servers node tms nodes 
commit coordinator migrate subordinate case subordinate replicated subordinates 
log manager serves common recovery log tm commit server recovery data 
servers declared stateless volatile recoverable 
serialization provided 
remains responsibility servers managing serializable resource 
miscellaneous issues status deadlock detector going developed detect global deadlocks resolve aborting offending transactions 
system running daily production ibm almaden 
experiments applications including messaging facility mail store forward system 
contact roger ibm almaden research center harry road san jose ca rfs main goal remote file sharing rfs networking features offered unix system providing location transparent access remote files devices 
advantages rfs supports unix file system semantics 
means contrast nfs cf 
section file locking append write possible 
existing user applications features rfs modification recompilation 
main disadvantages rfs unix versions supported second new special protocol non rpc hardly portable 
server crash recovery 
description rfs runs multi vendor hardware operating unix system connected ethernet lan 
rfs client server model 
machine client server 
rfs kernel extension deals file access requests follows mount service enables server machines remote files available client machines 
rfs interface decides request local satisfied local unix file system remote 
request remote communication established streams system developed unix time sharing system communication 
rfs implemented remote mount service allowing user add remote file system branches local file system tree 
subsequently remote requests files handled resided inside local machine 
notion domains administrative name space collection machines designed rfs 
domain name server exists 
name resolution done rfs name server modeled transaction handler receives requests performs operation desired generates sends back reply originator 
called advertise command gives user possibility subtrees local file system clients 
communication name servers different machines done standard transport layer interface 
tli iso transport layer designed support higher layer protocols protocol independent way 
vc datagram services provided enabling different standard transport protocols tcp ip iso sna 
concurrency control achieved file locking 
rfs uses stateful protocol 
server maintain information current state clients 
difficult costly client rebuild server state server crash server crash recovery done 
mapping remote user ids group ids local user identifications provided 
means example remote mapped local standard restricted user id miscellaneous status contact rfs integrated part commercial unix system developed rfs allows access remote special devices expensive peripheral devices shared economically 
main goal distributed operating system attempts strike balance hiding underlying hardware providing location transparency allowing users take advantage placing replicas files different disks 
advantages synthesis new mechanisms variations ones existing systems provides various ways users exploit multiple machines offered enhance performance availability 
remains shown concepts feasible perform 
description prototype implementation done network sun workstations 
portions file system implemented top unix kernel ibis system cf 
section 
processes communicate synchronous calls asynchronous send 
input output different commands connected channels functionality superset unix pipes 
channel write port read ports 
files organized single hierarchical logical file system lfs mapped physical file systems pfs 
file directory placed pfs explicitly adding pfs name default pfs parent directory 
files located scanning path name 
file path inaccessible broadcast manager pfs access logical files stored pfs virtual root 
way file accessible long pfs stored accessible 
security research topic 
files replicated special calls file names replicas parameters 
call allows direct access replica second provides transparent access 
system tries keep replicas consistent returning error messages possible 
miscellaneous issues data typed system performs type checking command invocation file access 
basis data description language uts 
servers created dynamically placed adequate host load manager 
physical resources controlled managers created system initialization 
status research going 
contact richard schlichting department computer science university arizona tucson az unix main goal main goal project university illinois early extend widely known unix time sharing operating system access transparent distributed operating system 
performance communication software major focus research keeping unix semantics 
advantages project shown communication virtual circuits achieve high transfer rates fast response low local overhead costs 
disadvantage unix restriction kb regard path names read written data 
terminal terminal communication interprocess pipes supported 
description unix client server system 
unix specialized operating subsystem runs user processes 
subsystem running file server called unix 
dec pdp line hosts communicate high bandwidth virtual circuit switch vc 
small front processors handle data control protocol error flow controlled virtual circuits 
conventional unix kernel modified 
nodes connected switch switch combines desirable properties packet virtual circuit switching providing high dynamically bandwidth uses packet switching demand multiplexing internal implementation 
called nk network kernel protocol implemented speed transmission 
file space extended mounting entire disk volume top existing directory 
unix allows user mount unix file server analogous way 
multiple mounts kinds active simultaneously 
file names hierarchical path name strings 
unix uses remote inodes time remote file accessed 
contains information needed unix subsystem handle specified file 
implies pointer identifying related unix machine holding file unique number assigned unix machine 
information file maintained remote site 
assuming operating system communication mechanisms trustworthy unix avoids having deal problems authentication current unix system 
miscellaneous issues special files devices treated special files unix 
handled dedicated unix subsystems 
status active 
contact bell labs murray hill new jersey 
smb main goal server message block smb protocol developed support programmers design write programs interact ibm pc network program ibm pc network 
netbios redirector software elements dos combined smb provide features distributed file systems 
smb provides access transparency 
advantages main advantage smb fact huge user community pc users dos enabled take part world distributed file systems 
final development features dfs progress disadvantage supporting crash recovery transactions security issues eventually eliminated due critical mass effect 
commercial character product number installed systems involved lead fast enhancement smb 
description smb visible methodology commercial networks microsoft ms net ibm pc lan program 
native operating system smb dos unix nfs cf 
section rfs cf 
section 
smb far implemented unix unix bsd vms 
applications running variety pcs standard system calls dos 
calls intercepted called redirector decides calls require remote access 
remote access necessary call transferred netbios software 
netbios establishes reliable vc connection remote server 
server runs special software includes share mechanism 
share main component dos 
share allows opening remote files various permissions 
dos semantics entire client file system maintained 
known mounting mechanism allows expansion local file system mounting remote file system branches different file volumes 
hierarchical name space result 
smb support authentication mechanisms due fact smb created dos environment security plays role 
authentication level file system possible means passwords access remote resources 
smb uses stateful protocol rfs 
detecting crashes problem recovery mechanisms defined 
file locking concurrency control provided 
miscellaneous status contact microsoft ms net ibm pc lan program marketed novel com 
sos main goal secure open multimedia integrated workstation operating system sos general purpose distributed object oriented operating system provides various degrees reliability 
application pays price mechanisms really needs uses 
subtask esprit project goal construct office workstation manipulating transporting multimedia documents 
access location failure transparency provided 
advantages due general approach sos useful different application remains proven demands met 
description system built new minimal kernel completed system services 
provides set replaceable protocol objects built top flexible transport protocol 
way reliable protocol chosen detects recovers lost messages crashes network failures suppresses orphans 
hand unreliable protocol chosen 
maximum size messages size network packet 
host protocol manager type protocol 
request allocates protocol object connects caller protocol object callees host 
virtual connection maintained indefinitely separately released protocol manager resource needed 
normally rpc client server communication message passing including multicasting possible 
interface resource proxy local representative object 
proxy imported name service context 
object global unique identifier 
additionally proxy capability access control application specific 
protocol managers recover crash sending multicast hosts retrieve lost state 
crashes hosts detected probe messages sent periodically 
miscellaneous status prototype currently distributed partners esprit project performance measured 
research include specification network interconnection exploration application facilities 
contact marc shapiro inria le chesnay france sprite main goal sprite operating system designed set possible diskless workstations connected local area network 
system extension unix modeled set services including shared hierarchical file system remote program execution paging network 
provides access location replication concurrency transparency 
advantages sprite file system better performance comparable file systems andrew cf 
section nfs cf 
section due efficient remote procedure call 
addition copes better concurrent writes 
hand error recovery poor server crashes clients need killed 
server utilization probably bottleneck system grows 
hardly portable communication protocol implemented type local area network 
description sprite new operating system kernel running sun workstations connected ethernet ported spur multiprocessor workstation developed berkeley 
interface user processes provided unix 
remote links files hosts running unix possible 
communication system mainly asymmetric kernel kernel remote procedure call turn currently special purpose protocol ethernet 
internet protocol supported 
order reduce state information allow implicit getting replies sending new requests set clients associated server process called client channels 
way semantics achieved saving copies reply message sequence numbers explicit retransmissions case timeouts 
large message sent rpc dividing fragments allow partial retransmissions lost fragments 
built delays prevent overflowing slow servers implemented 
channel idle server processes freed explicit channel transmissions 
server available transmission channel message discarded 
possible broadcast rpc receiving reply 
sprite provides hierarchical file system subtrees managed different servers 
name service client prefix table contains domain names directories address server manages domain short identifier directory 
table constructed broadcast updated automatically configuration servers files changes 
server replies open file requests server id identifier file alternatively name server managing file 
usage working directories crossings domains problems 
protection scheme comparable unix search permissions path granted users 
host specific private files available special table entries refusing answer lookup broadcasts usr tmp 
caching main memory needed performance improvements disabled case concurrent writes 
addition version numbers held change date cache blocks files sequentially write shared 
server crashes associated client processes killed loss state information 
server doesn reply open request entry prefix table invalidated new broadcast 
improves availability provided replicas exist different servers 
servers balance load offering different table entries different clients system binaries 
system provides atomic updates replicas 
updates transparent replicas different prefixes 
miscellaneous issues processes migrate nodes time 
system calls calls related file system forwarded back home node process 
process lot dirty pages costs migration high 
paging done network 
amount main memory virtual memory caching files varies dynamically depending demand 
status system development preliminary version running sun sun workstations 
contact fred douglis michael nelson computer science division university california berkeley evans hall berkeley ca 
principal investigation contact john ousterhout uc berkeley 
swallow main goal swallow distributed file system supporting highly reliable object oriented data storage 
provides kind transparency levels location access concurrency failure replication 
advantages swallow object oriented dfs 
update creates new version object 
updated page copied 
pages merely taken new version 
swallow manage objects arbitrary size provide synchronization recovery mechanisms part object model top 
main disadvantage handling mass storage 
update operation creates new version large amount data needs stored 
performance evaluated 
description swallow runs standard unix hardware client server behavior 
called broker software package provides access location transparency client machines 
client machine needs run broker copy 
swallow distributed file system object model 
data entities encapsulated objects 
swallow stores files remote highly autonomous servers called repositories 
core repository stable append storage called version storage vs 
vs contains version history data objects information needed crash recovery 
time object modified new version particular object appended vs updates embedded transactions 
case failures object histories provide backward recovery mechanism 
updates haven committed stored stable storage 
swallow uses asynchronous datagram communication 
responses requests collected asynchronous fashion broker 
special protocol swallow message protocol smp datagrams implemented data transfer 
capability protection scheme implemented 
concurrency control single writer multiple reader achieved timestamps 
object protected monitor providing mutual access control 
monitor state kept volatile memory crash objects automatically unlocked 
swallow data reliability provided simple replication scheme 
duplicate stored second storage device update applied immediately devices 
miscellaneous status swallow data storage system designed early laboratory computer science massachusetts institute technology 
main design components repositories brokers implemented tested artificial workload 
current status research unknown 
contact ibm zurich research lab 
switzerland 
main goal distributed system developed stanford university purpose connecting multiple workstations access location transparency provided 
small kernel supposed provide high performance communication servers offer operating system facilities 
advantages main advantage high speed inter process communication comparable local communication 
enables process groups called teams formed communicate efficiently multicasting 
unfortunately done reliability issues failure handling 
description run sun sun 
consists small kernel booted ethernet server machine running unix bsd 
way diskless workstations supported 
special server unix tools unix system modified order support multicasting ethernet filter packet 
configurations supported stanford distribution tape 
uses special communication protocol called versatile message transaction protocol vmtp supports rpcs client server interactions 
messages contain fixed length message bytes bit integer uniquely identifies destination process 
longer messages achieved sending pointer memory segment kbyte segment piggybacked message 
client looking access server blocked server sent back reply 
protocol provides semantics selective retransmissions duplicate suppression 
special feature implementation multicasting group communication 
process unique process id global unique names achieved adding object name name server managing object 
name isn known multicast message sent possible servers 
improve performance server name pid pairs cached 
special security issues protection scheme unix 
mentioned done far improve reliability availability system 
exception server gets message exception occurs invoke debugger 
miscellaneous issues process migration possible process groups dynamic loadbalancing mechanism 
improve performance migration mechanism address space process pages referenced time need copied period real migration 
input output operations uniform interface called uio block oriented 
status universities research laboratories companies 
research done porting multiprocessor machine connecting wide area networks implementing reliability issues atomic transactions replication 
contact david cheriton tony mason computer science department stanford university stanford ca 
vaxcluster main goal digital equipment developed vaxcluster product set closely coupled dec vax computers providing highly available extensible configuration operates access concurrency failure transparently 
key concern performance system 
advantages implementation high speed message oriented computer interconnect increased system performance 
contrast highly available systems vaxcluster built general purpose shelf processors general purpose operating system 
main disadvantage vaxcluster provide location transparency 
description vaxcluster host runs distributed version vax vms operating system connected ci computer interconnect ci port 
ci ports device specific implemented far vax vax hosts 
ci logically bus 
physically dual path serial connection path supporting mbit second transfer rate 
sca system communication architecture software layer provides datagram style vc communication 
ensure delivery messages duplication loss ci port maintains vc cluster port 
rpc communication supported 
hierarchical storage controller interprets called mass storage control protocol separates flow control status information flow information increase performance 
vaxcluster provides cluster wide shared file system users 
complete file name includes disk device name system wide unique name directory name user defined name 
disk device name gives information concerning node particular file located 
location transparency achieved 
password information resides single file shared vaxcluster nodes 
user obtains environment regardless node logged 
lock manager foundation resource sharing 
provides services naming locking cluster wide resources 
cluster connection manager responsible coordination cluster 
recognizes recoverable failures remote nodes provides data transfer handle failures transparently 
prevent partitioning vaxcluster uses quorum voting scheme 
initial vote quorum values set node system administrator 
miscellaneous status contact vaxcluster product supported engineering groups digital equipment 
xdfs main goal xdfs xerox distributed file system xerox parc research project design robust system 
intended provide basis data base research 
xdfs location access concurrency transparent 
advantages xdfs early approach designing distributed file system sophisticated features stable storage transaction handling concurrency control mechanisms 
main disadvantages system great overhead involved implementation stable storage limited amount page data transferred part single request 
description xdfs written mesa language runs alto communicates ethernet communication system 
client communication xdfs built pup parc universal packet level implements internetwork datagram 
xdfs uses tree map file id page number disk address 
access location transparency provided 
provides fine grained locking byte level file 
access control issues simply user id limits degree security provided 
concurrency control single writer multiple reader xdfs uses time limited breakable locks 
deadlocks detected timeouts 
operations repeatable 
phase commit protocol ensures correct updates 
failure handling recovery supported shadow pages plus intention logs redo log stored atomic stable storage 
xdfs client needs set transaction accessing creating file 
committed updates completed immediately crash 
new crash appears recovery procedure active process restarted 
replication supported 
miscellaneous issues xdfs supports database management system cedar cf 
section 
status version xdfs operational 
current status research unknown 
contact mitchell xerox palo alto research center coyote hill road palo alto ca dion cambridge university computer lab corn exchange street cambridge uk cb qg 
table comparison table comparison summarize compare systems discussed 
viewed carefully certain ways categorized comparison misleading 
way easily legible overview may obtained 
table provides quick access large amount highly condensed information 
entries organized criteria describe systems 
similar issue comparable feature entry implemented 
mark special symbol 
type system transparency loca repli dos dfs tion access cation currency failure accent alpine amoeba andrew argus athena birlix cambridge ds cedar charlotte chorus clouds cosmos cronus demos mp domain eden efs emerald grapevine guide gutenberg hcs helix ibis locus mach medusa mos nca ncs newcastle nexus nfs pulse quicksilver rfs unix smb sos sprite swallow vaxcluster xdfs table table comparison part heterogeneity name os cpus accent alpine cedar dorado amoeba unix bsd pdp ibm pc ns andrew unix bsd sun ibm rt pc argus ultrix athena unix multi vendor hw birlix unix bsd cambridge ds tripos lsi pdp cedar alto dorado ws charlotte unix vax chorus unix sm ibm pc clouds unix vax sun cosmos unix cronus unix bsd vms bbn vm cms pc dos vms ibm pc ibm demos mp domain unix iii bsd apollo unix bsd eden unix bsd sun efs rt unix mp emerald ultrix ii kind kind grapevine multiple os multi vendor hw guide unix bull sps sun gutenberg unix multiple unix systems multi vendor hw hcs multiple os multi vendor hw helix ibis unix bsd vax unix locus unix bsd dec vax pdp ibm pc mach unix bsd sun ibm pc ns medusa staros cm unix pm mos unix pdp pcs nca ncs domain ix unix bsd vax vms ibm pcs newcastle unix iii bsd guts pdp nexus unix bsd sun nfs unix bsd vms sun os ultrix ms dos multi vendor hw unix bsd dec pulse lsi quicksilver ibm rt pc rfs unix multi vendor hw running unix sun unix unix dec pdp smb unix unix bsd vms dos multi vendor pc sos sprite unix bsd sun swallow unix bsd sun vaxcluster vax vms vax xx vax xdfs alto table table comparison part changes communication connection name new new standard specialized shared rpc pipes kernel layer protocols protocols memory vc datagram streams accent alpine amoeba amoeba andrew udp ip argus acp ip athena tcp ip birlix cambridge ds cedar ftp charlotte chorus clouds cosmos cronus tcp udp osi demos mp domain tcp ip eden efs rdp emerald grapevine guide gutenberg hcs helix osi ibis tcp ip paths locus mach medusa mos udp ip nca ncs udp ip newcastle nexus nfs udp ip udp ip pulse quicksilver rfs osi tli unix kp smb smb sos sprite swallow smp vmtp vaxcluster xdfs pup table table comparison part semantics naming security name may exactly object hier en special capa mutual oriented hw bilities auth 
accent alpine amoeba andrew argus athena birlix cambridge ds cedar charlotte chorus clouds cosmos cronus demos mp domain eden efs emerald grapevine guide gutenberg hcs helix ibis locus mach medusa mos nca ncs newcastle nexus nfs pulse quicksilver rfs unix smb sos sprite swallow vaxcluster xdfs table table comparison part availability failures name synchro nested repli recovery recovery stable orphan process ta ta cation client crash server crash storage detection migration accent alpine amoeba andrew argus athena birlix cambridge ds cedar charlotte chorus clouds cosmos cronus demos mp domain eden efs emerald grapevine guide gutenberg hcs helix ibis locus mach medusa mos nca ncs newcastle nexus nfs pulse quicksilver rfs unix smb sos sprite swallow vaxcluster xdfs table table comparison part related systems section list related systems aren described survey 
list contains short description main system 
file server developed computers supports diskless workstations schools providing shared hierarchical file system 
file server ran floppy disks 
direct predecessor charlotte operating system crystal project cf 
section 
distributed operating system kernel designed computer sciences department university wisconsin madison 
centralized file system server developed department computing university lancaster lancaster la yr 
cambridge file server cf 
section cfs runs operating system kernel called tripos written monolithic program bare machine 
serves different lans ethernet type network called cambridge ring type network called 
vax pdp hosts attached networks 
access protocols single shot protocol rpc 
atomic update mechanism implemented 
ports represented bit integer known addresses requests replies sent 
planned integrate stable storage distribute file server machines 
large long term project carnegie mellon university performing research decentralized computers including design special purpose os support hardware 
system wide physically replicated operating system manages global resources teams negotiate compromise reach best effort consensus inaccurate incomplete information 
supported general transaction facility 
project distributed transaction facility combined high performance constructed 
executes variety uni multi processors top mach description survey cf 
section 
cics cics customer information control system commercial product ibm designed transaction processing system 
cics provides transaction services resource managers dl system system provides record interface terminals sessions virtual circuits 
cics access transparent classic rpc facility 
rpc works queues processes files dl databases system databases objects 
cics maintains system wide log transactions uses standard twophase commit protocol coordinate transaction commit deal node link failures 
replication transparency supported 
global deadlocks detected timeouts 
cics implements ibm sna system network architecture provides communication non cics non ibm systems defined interface 
circus circus replicated remote procedure call facility 
called paired message protocol circus connectionless darpa udp 
responsible segmentation messages longer single datagram 
multiple segments allowed sent acknowledged 
currently implemented user code unix bsd 
clearinghouse commercial product clearinghouse distributed replicated name server 
developed xerox successor grapevine cf 
section provides hierarchical name space levels uses different replication algorithms 
currently clearinghouse services operation world 
main problem resulting size long propagation updates days weeks heavy clearinghouse induced internetwork traffic 
carnegie mellon central file system designed early 
provides kinds update schemes 
immutable file approach new version created update second traditional update transactions 
part spice project 
local computer network unix operating system 
extends existing file system name space adding host name resource name vax usr bin 
additionally standard creation primitives execute remote programs 
coda coda resilient distributed file system currently developed carnegie mellon university 
provide failure transparency 
see conic conic environment designed support construction operation software distributed embedded systems 
employs host target approach providing comprehensive set tools program compilation building debugging execution host supports distributed operation targets 
developed department computing imperial college london 
dash dash distributed system wide area networks university berkeley 
heart dash authenticated database protocol adp public key encryption 
adp session oriented resource access structure akin unix streams 
filter processes stream provide reliable transmission 
data management storage utility developed share resources arpanet 
clients normal arpanet hosts 
implemented dec pdp offered services arpanet late 
demos demos operating system cray 
facilities distributed version demos mp described survey cf 
section 
dfs dfs distributed file system workstations 
dfs developed office systems lab 
ibm san jose research lab ca 
goal building integrated system providing location transparency atomic transactions 
replication files supported 
distributed operating system university kaiserslautern germany 
operating system functions decomposed multiple distribution units assigned computers attached high speed lan 
part project development language programming distributed applications 
message implementation unix system network workstations developed convergent technologies usa 
kernel collection server processes real time operating system called foundation system 
processes communicate synchronously asynchronously location transparent fashion 
dragon dragon distributed operating system developed computer science dept wayne state university detroit mi 
distributed resource scheduling algorithm implemented dragon special development providing services novel applications office information systems 
distributed operating system provides uniform services various network types 
services include remote file access process migration load balancing 
inter process communication extended rpc called service request permits device application specific optimizations 
developed bellcore morristown nj 
ere ere distributed electronic marketing system consisting loosely coupled workstations communicate messages 
reliability guaranteed means transactions supported new hardware software products 
stable memory boards developed guarantee reliability transactions 
orientation current research extend ere general purpose object oriented system 
encompass encompass distributed database management system tandem computers 
built top recovery mechanism replication hardware software 
felix felix file server distributed system helix cf 
section developed bell northern research 
supports virtual memory sharing data provides secure access capabilities 
firefly firefly shared memory multiprocessor workstation dec systems research center contains processors 
processors coherent caches sees consistent view main memory 
see topaz description software system 
galaxy galaxy distributed operating system designed university tokyo 
provides network wide shared memory access 
gfs generic file system unix created digital equipment support types hierarchical file systems local remote stateful stateless nfs cf 
section berkeley ffs ms dos file system 
gfs controls common file system resources sole interface file system operations 
intelligent distributed resource processing system software productivity consortium provide transparent access wide variety resources concern access techniques 
system utilize components existing systems possible 
nfs cf 
section chosen provide remote file access 
transparent remote process execution achieved adding layer software top ncs cf 
section 
features authentication load balancing added 
environment includes apollo vax gould ti explorers sun symbolic ai machines 
ifs ifs interim file system developed xerox parc distributed file system organized tree directories 
ifs operational connection alto microcomputers 
written bcpl language 
ifs provides repository shared files backup archiving private files 
isis isis system provides tools creating managing process groups group broadcast failure detection recovery distributed execution synchronization virtual synchrony achieved reliable broadcast mechanism 
initial version isis run unix sun dec gould hp systems 
project explores management issues environment local wide area networks 
provides transparent communication internetwork tools managing distributed system 
prototype amoeba cf 
section installed european countries 
micros micros distributed operating system network computer 
intended control network computers thousands nodes 
main design goal optimization network costs internode communication processing throughput 
network loosely coupled lsi microcomputer nodes connected packet switching interfaces pairs medium speed shared communication busses kb second 
node runs private copy micros kernel written concurrent pascal 
network processes communicate uniform message passing system 
large networks micros resources managed nested pools 
management node controls resources subtree network hierarchy 
addressable entities globally unique names consisting fields informing type creating node unique number node 
micros intended provide viable system computer science research possible commercial development 
nest nest project copes problems arising extended distributed unix environment 
kernel level implementation unix 
kernel code system calls changed preserving system call interface 
nest provides location independent remote execution process migration load balancing 
prototype implementation uses communication subsystem similar paths demos roscoe projects cf 
section 
called server pool scheme designed 
workstation maintains local database servers interested order get cpu power database clients offer cpu cycles 
nonstop tandem nonstop system distributed computer system designed expressly line transaction processing 
fault tolerance achieved pairs processes doing different processors 
processes communicate messages 

distributed database management system 
user transactions structured tree processes communicating virtual circuit communication links 
transaction management distributed deadlock detection protocols implemented 
running multiple processors 
rig rochester intelligent gateway provided access arpanet services resources remote file access network facilities available local ethernet demise hardware base 
rig predecessor accent cf 
section 
roscoe roscoe multi computer distributed operating system running network dec lsi machines 
roscoe developed computer sciences department wisconsin madison 
direct line research roscoe charlotte system cf 
section 
rss rss developed ibm san jose research lab 
part system project 
rss layer system responsible transaction management database recovery 
rt pc distributed services rt pc distributed services provides distributed operating system capabilities aix operating system 
include distributed file system distributed interprocess communication 
transparency achieved remote mounts files file systems 
application programs running modification 
net linda kernel linda parallel programming language supports shared memory distributed data structures 
net multicomputer fast word parallel bus interconnect 
special communication kernel implemented machine supports linda primitives cf 
section 
sesame sesame file system developed carnegie mellon university part spice project 
successor cf 
section 
main objectives naming authentication authorization data storage retrieval network personal computers 
staros staros operating system developed cm computer 
cm designed carnegie mellon university pittsburg pa successor staros medusa cf 
section 
stork stork experimental migrating file system computer networks developed department computer science purdue university west lafayette 
stork direct predecessor ibis file system cf 
section 
real time operating system designed portable large set machines 
written high level language 
provides efficient interprocess communication primitives influenced development cf 
section 
topaz topaz software system firefly multiprocessor cf 
section 
key facilities topaz execution existing ultrix binaries remote file system taos display manager debug server ttd 
topaz provides light weighted processes remote procedure calls inter address space inter machine communications 
performance rpc high relatively slow processors 
tilde tilde design project department computer science purdue university west lafayette build transparent integrated local distributed environment tilde 
part tilde project ibis file system cf 
section 
transparent remote file system provides transparent access distributed unix file system symbolic links path names remote machines libc libc mach libc libc programs don need recompiled relinked 
project integrated solutions inmos transputer hypercube operating system originally implemented fps series 
direct successor 
combines transputer unix bsd hosts unix machine large system 
include implicit support parallel processing provides explicit control facets machine operation including reconfiguration operating system 
uses simple client server model enable process multicomputer transparently access unix compatible filesystem 
location transparency provided filenames prefixed necessary node id osi network transport services provided 
developers ohio state university office research computing columbus ohio cornell theory center ithaca ny intend operate mode similar open software foundation 
upper upper universal poly processor enhanced reliability object oriented multicomputer system gmd germany 
operating system supported special hardware 
communication done asynchronous client server interactions 
server processes replicated achieve fault tolerance 
wfs wfs file server experimental file server xerox parc supporting office system 
wfs operational provides sharing information applications experimental telephone directory library information storage retrieval system 
distributed system designed implemented politecnico di milano cnet project 
runs olivetti connected ethernet provides location transparency private resources 
consists machine layer virtual nodes runtime support layer 
ring file server ring file server developed ibm zurich research lab 
build testbed experimental token ring network 
provides hierarchical file system 
ring file server implemented bcpl tripos operating system 
pleased acknowledge kathy ernst biersack helpful comments careful reading earlier versions 
ball feldman low rashid rig rochester intelligent gateway system overview ieee transactions software engineering se december 
fitzgerald rashid integration virtual memory management interprocess communication accent acm transactions computer systems may 
rashid inter process communication facility unix technical report cmu cs departement computer science carnegie mellon univ february 
rashid robertson accent communication oriented network operating system kernel proc 
th symp 
operating systems principles pages august 
rashid accent kernel interface manual technical report departement computer science carnegie mellon univ january 
rashid experiences accent network operating system proc 
int 
seminar networking open systems pages lncs springer verlag august 
attacking process migration bottleneck proc 
th symp 
operating systems principles pages 
brown taft alpine file system technical report csl xerox parc palo alto ca october acm transactions computer systems nov 
brown taft alpine file system acm transactions computer systems november 
parallel distributed compilations loosely coupled systems proc 
workshop large grain parallelism providence ri october 
bal tanenbaum van staveren hall distributed parallel fault tolerant computing system informatica report ir dept mathematics computer science vrije univ amsterdam october 
bal van renesse parallel alpha beta search proc 
sion symp 
informatica pages utrecht netherlands april 
mullender tanenbaum protection resource control distributed operating systems computer networks 
mullender distributed systems management wide area networks proc 
sion symp pages amsterdam april 
mullender tanenbaum immediate files software practice experience april 
mullender van renesse secure high speed transaction protocol proc 
cambridge conf september 
mullender vitanyi distributed match making processes computer networks proc 
th acm principles distributed computing canada aug 
mullender tanenbaum distributed file service optimistic concurrency control proc 
th symp 
operating systems principles pages orcas island washington december 
mullender van renesse secure high speed transaction protocol proc 
cambridge conf pages september 
mullender tanenbaum design capability distributed operating system computer journal march 
mullender making amoeba nd sigops workshop making distributed systems amsterdam netherlands september operating systems review january 
mullender interprocess communication arctic advanced course distributed systems chapter norway july 
mullender protection arctic advanced course distributed systems chapter norway july 
mullender van rossum tanenbaum van renesse van staveren amoeba distributed operating system ieee computer may 
van renesse tanenbaum mullender connecting unix systems token ring proc 
cambridge conf september 
van renesse unix usable distributed operating system proc 
autumn conf pages manchester uk september 
van renesse tanenbaum van staveren hall connecting rpc distributed systems wide area networks informatica report ir dept mathematics compute science vrije univ amsterdam december 
tanenbaum mullender van renesse capability protection distributed operating systems proc 
symp 
van software utrecht netherlands november 
tanenbaum van renesse distributed operating systems acm computing surveys december 
tanenbaum van renesse making distributed systems palatable nd sigops workshop making distributed systems amsterdam netherlands september operating systems review january 
tanenbaum mullender van renesse sparse capabilities distributed operating systems proc 
th int 
conf 
distributed computing systems pages may 
tanenbaum van renesse reliability issues distributed operating systems proc 
th symp 
reliability distributed software database systems pages williamsburg virginia march 
accetta robertson satyanarayanan thompson design network central file system technical report cmu cs dept computer science carnegie mellon univ august 
borenstein rosenberg multi media message system andrew proc 
usenix conf 
dannenberg resource sharing network personal computers phd thesis carnegie mellon univ december 
howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system proc 
th symp 
operating systems principles pages november 
howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system acm transactions computer systems february 
leong data communication cmu technical report cmu itc carnegie mellon univ july 
morris satyanarayanan conner howard rosenthal smith andrew distributed personal computing environment communications acm march 
morris take decisions andrew proc 
usenix conf 
nichols idle workstations shared computing environment proc 
th symp 
operating systems principles pages november 
hansen kazar sherman stern bader peters andrew toolkit overview proc 
usenix conf 
satyanarayanan supporting ibm pcs vice virtue environment technical report cmu itc information technology center carnegie mellon univ 
satyanarayanan howard nichols sidebotham spector west itc distributed file system principles design proc 
th symp 
operating systems principles pages acm sigops december 
satyanarayanan integrating security large distributed environment technical report cmu cs departement computer science carnegie mellon univ 
satyanarayanan distributed file systems arctic advanced course distributed systems chapter norway july 
satyanarayanan influence scale distributed system proc 
th int 
conf 
software engineering 
satyanarayanan scalable secure highly available distributed file access ieee computer may 
sidebotham volumes andrew file system data structure primitive proc 
autumn pages september 
comparative study unix distributed file systems proc 
autumn pages manchester september 
west nichols itc distributed file system prototype experience technical report cmu itc carnegie mellon univ march 
greif weihl case study ces distributed collaborative editing system implementation argus programming methodology group memo mit lab comp 
science cambridge ma april 
ladin liskov shrira technique constructing highly available services algorithmica 
liskov snyder atkinson schaffert abstraction mechanisms clu communications acm august 
liskov argus language system paul und editor distributed systems methods tools specification pages lncs springer verlag 
liskov scheifler guardians actions linguistic support robust distributed programs acm transactions programming languages systems july 
liskov overview argus language system programming methodology group memo ma february 
liskov ladin highly available distributed services fault tolerant distributed garbage collection proc 
th symp 
principles distributed computing pages august 
liskov curtis johnson scheifler implementation argus proc 
th symp 
operating systems principles november 
liskov scheifler walker weihl orphan detection programming methodology group memo mit lab computer science cambridge ma july 
liskov argus manual technical report mit lcs tr mit lab computer science cambridge ma 
liskov distributed programming argus communications acm march 
walker orphan detection argus system technical report mit lcs tr mit lab computer science cambridge ma june 
weihl liskov implementation resilient atomic data types acm transactions programming languages systems april 
lerman computing higher education athena experience ieee computer november 
lerman computing higher education athena experience communications acm november 
gettys project athena proc 
usenix summer conf pages salt lake city june 
miller unix remote procedure calls coexistence proc 
th int 
conf 
distributed computing systems pages cambridge ma may 
lux goos structure birlix operating system proc 
autumn pages manchester uk september 
lux distribution birlix operating system proc 
gi und von pages stuttgart west germany march 
lux goos distribution recovery birlix operating system editors kommunikation verteilten systemen pages springer verlag february 
lux birlix operating system internal report gesellschaft fur mathematik und mbh gmd st augustin west germany june 
kowalski protection birlix operating system proc 
th int 
conf 
distributed computing systems pages paris france may 
dion cambridge file server operating systems review october 
dion reliable storage local network technical report univ cambridge computer laboratory 
needham asynchronous garbage collector cambridge file server operating systems review october 
hac distributed file systems survey operating systems review january 
herbert needham user interface cambridge distributed system proc 
th symp 
operating systems principles december 
hopper cambridge ring local network hanna editor advanced techniques microprocessor systems 
mitchell dion comparison network file servers communications acm april 
needham herbert cambridge distributed system addison wesley 
file servers network distributed systems acm computing surveys december 
wilkes needham cambridge model distributed system operating systems review january 
donahue integration mechanisms cedar acm sigplan notices july 
gifford needham schroeder cedar file system communications acm march 
hagmann reimplementing cedar file system logging group commit proc 
th symp 
operating systems principles pages november 
schmidt controlling large software development distributed environment technical report cls xerox palo alto research center ca december 
schroeder gifford needham file system programmer workstation technical report cls xerox palo alto research center ca november 
swinehart zellweger hagmann structure cedar acm sigplan notices july 
swinehart structural view cedar programming environment acm transactions programming languages systems october 
alto personal computer technical report cls xerox palo alto research center ca august 
teitelman cedar programming environment midterm report examination technical report cls xerox palo alto research center ca july 
finkel solomon dewitt landweber charlotte distributed operating system technical report univ wisconsin madison computer sciences october 
armand leonard distributed unix system chorus approach proc 
autumn pages september 
zimmermann synchronization distributed systems single broadcast channel proc 
st int 
conf 
distributed computing systems 
zimmermann chorus architecture distributed systems technical report inria france november 
fabre distributed coupled actors chorus proposal reliability proc 
rd int 
conf 
distributed computing systems page ft lauderdale fl usa october 
fabre rozier fault tolerant aspects chorus distributed system proc 
th int 
conf 
distributed computing systems denver colorado may 
rozier controlling distributed processing chorus activity messages th hawaii int 
conf 
system science january 
parallelism fault tolerance chorus distributed system int 
workshop modelling performance evaluation parallel systems grenoble december 
chorus distributed computing system design implementation int 
symp 
local computer networks pages florence april 
herrmann armand chorus new technology building unix systems proc 
autumn pages portugal october 
rozier chorus distributed operating system design issues editor distributed operating systems theory practice volume nato asi series pages springer verlag august 
zimmermann basic concepts support distributed systems chorus approach proc 
nd int 
conf 
distributed computing systems pages 
zimmermann chorus communication processing architecture distributed systems technical report inria research september 
ahamad dasgupta parallel execution threads approach atomic actions technical report git ics school information computer science georgia institute technology 
ahamad ammar khalidi multicast scheme locating objects distributed operating system technical report git ics school information computer science georgia institute technology 
architecture reliable decentralized systems technical report git ics school information computer science georgia institute technology ph thesis 
khalidi architecture ra kernel technical report git ics school information computer science georgia institute technology 
khalidi ahamad dasgupta leblanc ramachandran clouds distributed object operating system architecture kernel implementation proc 
autumn pages portugal october 
chen dasgupta consistency preserving threads approach atomic programming technical report git ics school information computer science georgia institute technology 
dasgupta leblanc spafford clouds project design implementation faulttolerant distributed operating system technical report git ics school information computer science georgia institute technology 
dasgupta leblanc clouds distributed operating system proc 
th int 
conf 
distributed computing systems pages san jose ca june 
spafford kernel structures distributed operating system technical report git ics school information computer science georgia institute technology ph thesis 
pitts dasgupta object memory storage management clouds kernel proc 
th int 
conf 
distributed computing systems pages san jose ca june 
wilkes preliminary manual technical report git ics school information computer science georgia institute technology 
wilkes leblanc rationale design systems programming language action object system technical report git ics school information computer science georgia institute technology 
wilkes programming methodologies resilience availability technical report git ics school information computer science georgia institute technology ph thesis 
blair nicol yip functional model distributed computing technical report cs dc dept computing univ lancaster lancaster 
blair mariani nicol cosmos nucleus program support environment technical report cs se dept computing univ lancaster lancaster 
blair nicol walpole overview cosmos distributed programming environment project technical report cs dc dept computing univ lancaster lancaster 
nicol blair walpole operating system design holistic approach operating systems review january 
dean sands schantz canonical data representation cronus distributed operating system proc 
ieee infocom pages san francisco ca april 
dean schantz programming support cronus distributed operating system proc 
th int 
conf 
distributed computing systems pages cambridge ma may 
schantz thomas bono architecture cronus distributed operating system proc 
th int 
conf 
distributed computing systems pages cambridge ma may 
ein im gi und von pages stuttgart west germany march 
nos kernels heterogeneous environments proc 
int 
seminar networking open systems pages lncs springer verlag 
schoner generic support distributed processing heterogeneous networks kruger muller editors hector volume ii basic projects pages springer verlag 
forster task setup service distributed systems editors kommunikation verteilten systemen informatik pages springer verlag february 
forster controlling distributed user tasks heterogeneous networks kruger muller editors hector volume ii basic projects pages springer verlag 
seifert validation protocol application layer services kruger muller editors hector volume ii basic projects pages springer verlag 
seifert automated validation operation protocol distributed systems proc 
th int 
conf 
distributed computing systems pages cambridge ma may 
operating system support heterogeneous distributed systems editors kommunikation verteilten systemen informatik pages springer verlag february 
kramer transparent access remote files heterogeneous networks kruger muller editors hector volume ii basic projects pages springer verlag 
directories orientation heterogeneous networks kruger muller editors hector volume ii basic projects pages springer verlag 
authentication authorization resource sharing networks kruger muller editors hector volume ii basic projects pages springer verlag 
remote execution service heterogeneous network kruger muller editors hector volume ii basic projects pages springer verlag 
seifert remote service call network operating system kernel heterogeneous distributed systems gi und von pages stuttgart west germany march 
seifert remote service call nos kernel protocols proc 
th pages september 
stoll portability environment communication software kruger muller editors hector volume ii basic projects pages springer verlag 
cooperative processing heterogeneous computer networks kruger muller editors hector volume ii basic projects pages springer verlag 
miller presotto powell demos mp development distributed system software practice experience april 
powell demos file system proc 
th symp 
operating systems principles pages purdue univ november 
powell miller process migration demos mp proc 
th symp 
operating systems principles pages woods october 
powell presotto publishing reliable broadcast communication mechanism proc 
th symp 
operating systems principles pages woods october 
lazowska zahorjan cheriton file access performance diskless workstations technical report dept computer science univ washington june 
leach hamilton levine uid internal names distributed file system proc 
st symp 
principles distributed computing pages ottawa 
leach levine hamilton nelson architecture integrated local network ieee journal selected areas communications sac november 
leach levine hamilton file system integrated local network proc 
acm computer science conf pages new orleans march 
chase computer aided software engineering distributed workstation environment proc 
sigsoft sigplan software engineering symp 
practical software environments pages 
levine apollo domain distributed file system editor distributed operating systems theory practice volume nato asi series pages springer verlag august 
levine domain system nd acm sigops workshop making distributed systems amsterdam netherlands september operating systems review january 
nelson leach evolution apollo domain proc 
compcon spring pages san francisco ca february proc 
hicss pages 
nelson leach architecture applications apollo domain ieee computer graphics applications april 
rees levine leach extensible system proc 
usenix summer conf pages atlanta june 
rees olson dynamically extensible streams implementation proc 
usenix summer conf pages 
litman distributed unix system proc 
autumn pages manchester uk september operating systems review january 
black wiebe locally distributed mail system proc 
th int 
conf 
software engineering pages march 
black lazowska noe eden system technical review ieee transactions software engineering se january 
evaluation load sharing locally distributed systems technical report dept computer science fr univ washington seattle august 
black stream communication system proc 
th symp 
operating systems principles pages october 
black hutchinson mccord raj programmers guide version technical report eden project dept computer science univ washington june 
black supporting distributed applications operating systems review december 
jacobson noe 
baer pu eden transaction file system proc 
nd symp 
reliability distributed software database systems pages july 
lazowska levy fischer fowler architecture eden system proc 
th symp 
operating systems principles pages december 
noe pu replication distributed systems eden experience proc 
fall joint computer conf pages dallas texas november 
pu noe regeneration replicated objects technique eden implementation proc 
nd int 
conf 
data engineering pages february 
cole flinn atlas implementation extended file system unix proc 
usenix summer conf pages portland june 
black hutchinson jul levy object structure emerald system proc 
st acm conf 
object oriented programming systems languages applications sigplan notices volume pages november 
black hutchinson jul levy carter distribution types emerald ieee transactions software engineering se january 
gray keshav munson rosenblum sullivan terry design globally distributed file system technical report ucb csd computer science division eecs univ california berkeley june 
terry distributed name servers naming caching large distributed computing environments technical report ucb csd computer science division univ berkeley ca march 
birrell levin needham schroeder grapevine exercise distributed computing communications acm april 
schroeder birrell needham experience grapevine growth distributed system acm transactions computer systems february 
balter donnelly finn horn distributed systems local area networks technical report imag campus grenoble france august 
balter rousset de guide object oriented distributed operating system technical report imag campus grenoble france 
duda rousset de guide implementation object oriented distributed system architecture unix proc 
autumn pages portugal october 
guide nd acm sigops european workshop making distributed systems amsterdam netherlands september operating systems review january 
design implementation objectoriented strongly typed language distributed applications technical report imag campus grenoble france september 
chrysanthis ramamritham stemple gutenberg operating system kernel proc 
fall joint computer conf pages dallas texas november 
ramamritham stemple primitives accessing protected objects proc 
rd symp 
reliability distributed software database systems pages clearwater beach october 
ramamritham stemple decentralized access distributed system proc 
th int 
conf 
distributed computing systems pages denver colorado may 
ramamritham stemple briggs privilege transfer revocation port system ieee transactions software engineering se may 
stemple ramamritham sheard operating system support database types proc 
nd int 
conf 
databases pages september 
stemple ramamritham functional addressing gutenberg interprocess communication process identifiers ieee transactions software engineering se november 
ramamritham stemple protecting objects ports proc 
phoenix conf 
computers communication pages march 
protection oriented distributed kernel phd thesis dept computing information sciences univ massachusetts september 
ramamritham stemple recoverable actions gutenberg proc 
th int 
conf 
distributed computing systems pages cambridge ma may 
baldi stefanelli new network file system approach proc 
autumn pages manchester uk september 
bershad ching lazowska schwartz remote procedure call facility heterogenous computer systems ieee transactions software engineering se august 
bershad levy remote computation facility heterogeneous environment computer may 
black lazowska levy notkin zahorjan approach accommodating technical report dept computer science univ washington october 
notkin hutchinson schwartz heterogeneity operating systems review april 
notkin black lazowska levy zahorjan interconnecting heterogeneous computer systems communications acm 
pinkerton heterogeneous distributed file system proc 
th int 
conf 
distributed computing systems pages paris france may 
schwartz naming large heterogenous systems technical report univ washington august 
older felix file server proc 
th symp 
operating systems principles pages pacific grove ca december 
older helix distributed file system ieee software may 
casey rendezvous distributed system software architecture ieee software may 
comer transparent integrated local distributed environment tilde project overview technical report csd tr purdue univ dept computer science 

paris tichy stork experimental migrating file system computer networks proc 
ieee infocom ieee computer society press pages april 
tichy distributed file system proc 
usenix summer conf pages salt lake city june 
lai wilkinson overview database machine proc 
acm sigmod conf pages boston ma june 
lee architecture implementation distributed kernel technical report tm bell comm 
research morristown october 
wilkinson lee reliable servers distributed system proc 
th int 
conf 
distributed computing systems pages september 
popek walker chow edwards kline thiel locus network transparent high reliability distributed system proc 
th symp 
operating systems principles pages acm sigops december 
moore simple nested transactions locus master thesis computer science dept ucla los angeles 
goldberg popek measurement distributed operating system locus technical report univ california los angeles 
mueller moore popek nested transaction system locus proc 
th symp 
operating systems principles pages october 
parker popek stoughton walker walton chow edwards kline detection mutual inconsistency distributed systems ieee transactions software engineering se may 
walker popek english kline thiel locus distributed operating system proc 
th symp 
operating systems principles pages october 
walker issues network transparency file replication distributed filesystem component locus phd thesis computer science dept ucla los angeles 
walker popek english kline thiel locus distributed operating system operating system review 
popek walker locus distributed system architecture mit press cambridge massachusetts 
lindell popek name service locality cache design distributed operating system proc 
th int 
conf 
distributed computing systems pages cambridge massachusetts may ieee 
walker popek locus distributed system architecture mit press computer system series page 
verteilte unix systeme technik nr 
october 
baron bolosky golub rashid tevanian young mach new kernel foundation unix development proc 
usenix summer conf pages atlanta june 
baron rashid siegel tevanian young mach multiprocessor oriented operating system environment new computing environments parallel vector systolic pages siam 
baron black bolosky chew golub rashid tevanian young mach kernel interface manual technical report dep 
computer science carnegie mellon univ pittsburgh pa october 
black scheduling support concurrency parallelism mach operating system ieee computer may 
draves jones thompson mig mach interface generator technical report dept comp 
sc carnegie mellon univ pittsburgh pa february 
jones rashid thompson matchmaker interface specification language distributed processing proc 
th sigplan symp 
principles programming languages 
jones rashid mach matchmaker kernel language support object oriented distributed systems proc 
oopsla oriented programming systems pages portland oregon september 
rashid rig accent mach evolution network operating system proc 
fall joint computer conf pages dallas texas november 
rashid mach layered protocols vs distributed systems proc 
compcon spring pages san francisco ca february 
rashid tevanian young golub baron black bolosky chew machine independant virtual memory management paged uniprocessors multiprocessor architectures operating systems review october 
sansom rashid extending capability system network environment proc 
sigcomm symp pages stowe vermont 
tevanian rashid young golub thompson bolosky unix interface shared memory memory mapped files mach proc 
usenix summer conf pages phoenix arizona june 
tevanian rashid young golub black cooper mach threads unix kernel battle control proc 
usenix summer conf pages phoenix arizona june 
tevanian rashid mach basis unix development technical report dept computer science carnegie mellon univ pittsburgh pa june 
young tevanian rashid golub chew bolosky black baron duality memory communication implementation multiprocessor operating system proc 
th symp 
operating systems principles pages 
newell solid modelling parametric design medusa system computer graphics pages 
newell parametric design medusa system computer applications production engineering april 
ousterhout medusa experiment distributed operating system structure communications acm february 
ousterhout medusa distributed operating system computing reviews 
ahuja net high speed interconnect multiple computers ieee journal selected areas communications sac november 
carriero gelernter net linda kernel acm transactions computer systems may 
operating system multiprocessor environment proc 
th int 
conf 
distributed computing systems pages denver may 
user interface proc 
fall joint computer conf pages dallas texas november 
distributed computing environment robotics proc 
int 
conf 
robotics automation pages san francisco april 
barak distributed algorithms average load multicomputer technical report crl tr computing research laboratory univ michigan march 
barak distributed load balancing policy multicomputer software practice experience september 
barak multicomputer distributed operating system software practice experience august 
barak paradise mos load balancing unix proc 
autumn pages september 
barak malki distributed light weighted processes mos proc 
autumn pages portugal october 
barak probabilistic algorithm scattering information multicomputer system technical report crl tr computing research laboratory univ michigan march 
mos communication system master thesis dept computer science hebrew univ jerusalem february 
mos filing system master thesis dept computer science hebrew univ jerusalem august 
load sharing distributed operating system master thesis dept computer science hebrew univ jerusalem july 
leach mishkin network computing architecture system environment developing distributed applications proc 
usenix summer conf pages phoenix arizona june 
leach mishkin network computing architecture system environment developing distributed applications proc 
compcon spring pages san francisco ca march 
guts multi user operating system pdp technical report tw rijksuniversiteit te groningen mathematisch institut 
marshall randell newcastle connection world unite software practice experience 
linton communication system supporting large datagrams local area network technical report srm univ newcastle tyne may 
software hardware high integrity systems projects final report technical report erc univ newcastle tyne june 
randell interfacing unix data communications networks technical report univ newcastle tyne december 
rushby randell distributed secure system ieee computer pages july 
snow experiment newcastle connection protocol software practice experience november 
wilkes wheeler cambridge digital communication ring proc 
local area communications network symp national bureau standards special publication boston 
tripathi schmitz object management nexus distributed operating system proc 
ieee compcon pages february 
tripathi nexus distributed operating system tutorial distributed operating systems th int 
conf 
distributed computing systems pages berlin west germany september 
fraser campbell rosen implementation nfs system proc 
april 
hatch katz rees rfs sun nfs comparison heterogeneous distributed file systems unix world pages december 
lyon sun remote procedure call specification technical report sun microsystems 
lyon sun external data representation specification technical report sun microsystems 
lyon sager chang goldberg kleiman lyon sandberg walsh weiss overview sun network file system proc 
usenix conf pages dallas january 
sandberg sun network file system design implementation experience sun microsystems 
sandberg sun network filesystem protocol specification technical report sun microsystems 
comparing distributed file systems data communications pages december 
sun microsystems remote procedure call manual october 
sun microsystems external data representation manual october 
sun microsystems remote procedure call protocol specification october 
weiss yellow pages protocol specification technical report sun microsystems 
west sun network file system nfs business overview sun microsystems 
kaiser kroeger coprocessor supporting object oriented error recovery hicss january 
mock einem verteilten system gmd studien gesellschaft fur mathematik und mbh gmd st augustin west germany december 
kaiser kroeger lux design implementation fault tolerant distributed system architecture technical report gmd studien nr 
gesellschaft fur mathematik und mbh gmd st augustin west germany june 
kaiser kroeger lux design implementation fault tolerant distributed system architecture formal specification technical report gmd studien nr 
gesellschaft fur mathematik und mbh gmd st augustin west germany june 
kaiser kroeger providing recoverability transaction oriented distributed operating system proc th int 
conf 
distributed computing systems may 
schumann einem verteilten system gmd studien gesellschaft fur mathematik und mbh gmd st augustin west germany january 
keefe tomlinson wand wellings pulse ada distributed operating system academic press london 
wellings distributed operating systems ada programming language phd thesis dept computer science univ york april 
wellings communication ada programs ada applications environments pages st paul minnesota october 
wellings pulse project acm sigops workshop operating systems computer networks switzerland january operating systems review april 
cabrera wyllie quicksilver distributed file services architecture horizontal growth technical report rj ibm almaden research center san jose january 
chan recovery management quicksilver acm transactions computer systems february 
bach melamed remote file cache rfs proc 
usenix summer conf pages phoenix arizona june 
hamilton administrator view rfs information systems june 
kingston remote file systems unix proc 
copenhagen pages september 
rifkin forbes hamilton shah rfs architectural overview proc 

ritchie stream input output system bell labs technical journal october 
andrew distributed systems research arizona nd acm sigops european workshop making distributed systems amsterdam netherlands september operating systems review january 
andrew schlichting hayes design distributed operating system ieee transactions software engineering se january 
schlichting andrews mechanisms enhance file availability distributed systems proc 
th int 
symp 
fault tolerant computing pages vienna july 
software architecture proc 
icc pages boston ma june 
fraser modular network synchronous traffic proc icc pages boston ma june 
che marshall distributed unix system virtual circuit switch proc 
th symp 
operating systems principles pages december 
che marshall virtual circuit switch basis distributed system th data communications symp acm ieee computer society ieee communications society pages october 
hurwicz ms dos easy ibm pcs network data communications november 
ibm ibm personal computer seminar proceedings technical report may 
ibm provides industry versatile local network standard data communications june 
shapiro sos object oriented communication service proc 
int 
conf 
computers communications tel aviv israel october 
shapiro sos distributed object oriented operating system nd acm sigops european workshop making distributed systems amsterdam netherlands september operating systems review january 
shapiro structure encapsulation distribute systems proxy principle proc 
th int 
conf 
distributed computing systems pages cambridge mass may ieee 
shapiro un de sur le syst eme exploitation objets sos rapport technique institut national de la recherche en informatique automatique rocquencourt france may 
shapiro programmer manual sos prototype version appear 
douglis ousterhout process migration sprite operating system proc 
th int 
conf 
distributed computing systems pages berlin west germany september 
nelson virtual memory sprite operating system technical report ucb csd computer science division univ california berkeley berkeley california june 
nelson welch ousterhout caching sprite network file system acm transactions computer systems february 
ousterhout douglas nelson welch sprite network operating system technical report ucb csd computer science division univ california berkeley berkeley ca 
ousterhout position statement sprite file system center network operating system proc 
workshop workstation operating systems cambridge ma november ieee computer society technical operating systems 
welch sprite remote procedure call system technical report ucb csd computer science division univ california berkeley berkeley california june 
welch ousterhout prefix tables simple mechanism locating files distributed filesystem proc 
th int 
conf 
distributed computing systems pages new york may ieee computer society press 
arens recovery swallow repository technical report mit lcs tr lab 
computer science mit cambridge mass january 
reed swallow distributed data storage system local network west janson editors local networks computer communications pages north holland publishing 
management object histories swallow repository technical report mit lcs tr lab 
computer science mit cambridge mass july 
cheriton local networking internetworking system proc 
th data communications symp pages acm ieee october 
cheriton zwaenepoel distributed kernel performance diskless workstations proc 
th symp 
operating systems principles pages acm october 
cheriton experiment registers fast message interprocess communication operating systems review october 
cheriton kernel software base distributed systems ieee software april 
cheriton uniform access distributed name interpretation system proc 
th int 
conf 
distributed computing systems pages ieee may 
cheriton zwaenepoel interprocess communication system sigcomm symp 
communications architectures protocols acm june 
cheriton request response multicast interprocess communication kernel networking open systems pages lncs springer verlag 
cheriton problem oriented shared memory decentralized approach distributed systems design proc 
th int 
conf 
distributed computing systems pages ieee may 
cheriton vmtp transport protocol generation communication systems proc 
sigcomm stowe vt august acm 
cheriton uio uniform system interface distributed systems acm transactions computer systems february 
cheriton williamson network measurement vmtp request response protocol distributed system proc 
sigmetrics banff canada acm 
cheriton distributed system communications acm march 
cheriton unified management memory file caching virtual memory system technical report stan cs dept computer science stanford univ 
cheriton mann decentralizing global name service efficient fault tolerant access acm transactions computer systems appear 
nowicki structured graphics distributed systems acm transactions computer systems january 
nowicki virtual terminal services workstation distributed systems proc 
th hawaii int 
conf 
system sciences pages acm ieee january 
stumm verteilte systeme eine am beispiel informatik spektrum october 
theimer cheriton preemptable remote execution facility system proc 
th symp 
operating systems principles acm sigops 
zwaenepoel implementation performance pipes system ieee transactions computers december 
levy strecker closely coupled distributed system acm transactions computer systems may 
file server network low cost personal microcomputers software practice experience december 
finkel solomon kernel version technical report univ wisconsin madison computer sciences april 
finkel solomon distributed operating system technical report univ wisconsin madison computer sciences july 
muir hutchison shepherd local network file server computer journal march 
jensen acm sigops workshop operating systems computer networks switzerland january operating systems review april 
spector flexible distributed transaction processing system proc 
spring compcon rd ieee computer society int 
conf pages san fransisco ca march 
customer information control system evolving system facility ibm systems journal 
cooper replicated distributed programs technical report ucb csd computer science division univ berkeley ca may 
cooper replicated distributed programs operating systems review december 
oppen dalal clearinghouse decentralized agent locating named objects distributed environment acm transactions office information systems july 
ball barbacci fahlman harbison hibbard rashid robertson steele jr spice project computer science research review pages dept computer science carnegie mellon univ pittsburgh penn rowe birman local network unix operating system ieee transactions software engineering se march 
satyanarayanan kistler siegel coda resilient distributed file system proc 
workshop workstation operating systems cambridge ma november ieee 
magee kramer sloman conic support environment distributed systems editor distributed operating systems theory practice volume nato asi series pages springer verlag august 
anderson ferrari rangan 
dash project issues design large distributed system technical report ucb csd univ california berkeley 
anderson support continuous media dash system proc 
th int 
conf 
distributed computing systems pages paris france may 
marill stern network data utility proc 
afips ncc pages 
baskett howard montague task communications demos proc 
th symp 
operating systems principles pages purdue univ november 
arden dfs distributed file system workstation lan environment technical report ucb csd computer science division univ berkeley ca may 
acm sigops workshop operating systems computer networks switzerland january operating systems review april 
christie acm sigops workshop operating systems computer networks switzerland january operating systems review april 
daniels dragon blueprint design completely distributed operating system master thesis wayne state university detroit 
distributed operating system technical report tm technical memorandum bellcore december 

banatre banatre lapalme design building ere distributed electronic marketing system communications acm january 
transaction monitoring encompass reliable distributed transaction processing proc 
th int 
conf 
large data bases cannes france september tandem tr tandem computers cupertino ca june 
thacker stewart firefly multiprocessor workstation int 
conf 
architectural support programming languages operating systems pages palo alto ca february 
jia highly concurrent directory management galaxy distributed system proc 
th int 
conf 
distributed computing systems pages paris france may 
rodriguez koehler hyde generic file system proc 
autumn pages manchester uk september 
carson distributed operating system workstation environment proc 
phoenix conf 
computers communication pages march 
thacker mccreight lampson alto personal computer siewiorek bell newell editors computer structures principles examples mcgraw hill new york nd edition 
birman replication fault tolerance isis system operating systems review december 
experiment distributed processing editor research networks distributed applications pages north holland 
van micros distributed operating system reconfigurable network computer ieee transactions computers december 
agrawal location independent remote execution nest ieee transactions software engineering se august 
bartlett nonstop kernel proc 
th symp 
operating systems principles pages pacific grove ca december 
lindsay haas mohan yost computation communication distributed database manager acm transactions computer systems february 
finkel solomon roscoe kernel technical report computer sciences dept univ wisconsin madison october 
solomon finkel roscoe multi microcomputer operating system technical report computer sciences dept univ wisconsin madison april 
solomon finkel roscoe users guide technical report computer science dept univ wisconsin madison october 
finkel solomon roscoe utility processes technical report computer science dept univ wisconsin madison october 
gray mcjones lorie price traiger recovery manager system database manager acm computing surveys june 
sauer johnson gouda smith rt pc distributed services overview operating systems review july 
thompson sansom jones rashid sesame spice file system technical report cmu cs computer science dept carnegie mellon univ december 
levy staros system capability computer systems pages digital press 
cheriton malcolm sager portable real time operating system communications acm february 
mcjones hisgen topaz system distributed multiprocessor personal computing proc 
workshop workstation operating systems cambridge ma november 
hughes transparent remote file system proc 
usenix summer conf pages atlanta june 
burns early american transputer software ohio state university columbus ohio 
obtaining secure fault tolerant distributed system maximal performance proc 
ifip workshop hardware supported implementation concurrent languages distributed systems pages bristol 
swinehart mcdaniel boggs wfs simple shared file system distributed environment proc 
th symp 
operating system principles pages december 
zicari machine proc 
rd symp 
microcomputer microprocessors applications budapest hungary october acm newsletter 
janson mueller local area communication network reliable token ring system proc 
int 
symp 
local computer networks pages florence italy april 

