dependence analysis java craig chambers igor vivek sarkar mauricio serrano srinivasan ibm thomas watson research center box yorktown heights ny usa igor vivek watson ibm com 
describe novel approach performing data dependence analysis java presence java non traditional language features exceptions synchronization memory consistency 
introduce new classes edges dependence graph model code motion constraints arising language features 
linear time algorithm constructing augmented dependence graph extended basic block 
data dependence analysis fundamental program analysis technique optimizing parallelizing compilers identify constraints data flow code motion instruction reordering 
desirable dependence analysis precise possible minimize code motion constraints maximize opportunities program transformations optimizations instruction scheduling 
precise dependence analysis scalar variables understood effective solution ssa form 
addition previous studied dependence analysis memory accesses typically focusing array variables affine subscripts dereferences pointer variables 
address problem data dependence analysis java focusing java non traditional language features exceptions synchronization 
past represent result data dependence analysis data dependence graph 
unify dependences due scalars memory locations exceptions synchronization memory model dependences locations 
register scalar temporary location locations memory derived results earlier alias analysis type alias analysis 
handle java plethora instructions may potentially raise exceptions constructing dependence graph extended basic blocks unbroken potentially excepting instructions introducing new kind dependence sabbatical dept computer science engineering university washington box seattle wa usa chambers cs washington edu 
exception state location sequence treating pei reading scalar memory locations live exception handler pei 
instructions read write locations live exception handler pei unrelated pei dependence graph moved pei scheduling 
previous java implementations routinely considered barriers code motion instructions 
separate tests exception conditions array bounds checks instructions doing field array load store operations keeping special validated dependence edge test instruction instruction optimized independently scheduled flexibly 
ensure proper memory consistency synchronization points treat acquire lock java instruction write memory locations release lock java instruction read memory locations 
dependence constraints preserve correct semantics java programs allow significant scheduling code motion flexibility 
linear time algorithm constructing dependence graph single extended basic block 
algorithm implemented jalape optimizing compiler performing instruction selection instruction scheduling 
rest organized follows 
section provides overview design decisions modeling basic blocks control flow due java exceptions 
section describes main algorithm data dependence analysis 
section presents example illustrating approach dependence analysis 
section discusses related section contains 
modeling basic blocks control flow due java exceptions section provide overview design decisions modeling basic blocks control flow due java exceptions 
detailed description approach describes jalape optimizing compiler builds extended basic blocks performs global analysis presence exceptions 
focus program analysis address problem code motion dependence analysis presence exceptions 
exceptions java precise 
exception thrown program point effects statements expressions exception point appear taken place effects speculative execution statements expressions exception point user visible state program 
goal efficiently compute precise constrained set dependences obeying java exception semantics 
checked exceptions runtime exceptions java language specification identifies statements operations potentially throw exception 
remainder term pei potentially exception throwing instruction denote statements operations 
traditionally basic block consists set instructions sequentially executed instruction basic block executed subsequent instruction basic block executed turn 
standard model basic block single entry single exit region control flow graph pei signify basic block 
quite frequent java approach taken jalape optimizing compiler force basic block 
basic block single entry multiple exit sequence instructions similar extended basic block superblock significantly larger basic blocks terminated 
key decision design jalape optimizing compiler separate checking performed pei actual 
example getfield putfield instruction split explicit null check instruction followed load store instruction 
null check instructions guard accessing null arrays invoking virtual methods null objects 
explicit instructions generated array bounds checks similar manner 
ordering relationship test worker instructions captured having test instruction contain pseudo assignment scalar temporary having worker instruction contain pseudo read temporary 
strictly speaking temporary hold boolean condition validated signal 
value temporary immaterial worker instruction matters test successfully performed 
advantage creating explicit test instructions eligible redundancy elimination global analysis just instructions ir intermediate representation 
tests performed implicitly hardware implicit null pointer tests jalape jvm value modeling tests explicitly ir doing enable flexibility code motion instruction scheduling 
additionally virtual method invocations optimized static binding inlining worry required null check lost 
reclaim efficiency implicit checks include post pass merges remaining null check instruction load store instruction legal 
merging null check implicit load store instruction accomplished underlying hardware mechanism 
dependence analysis traditionally data dependence graphs represent dependences register reads writes memory reads writes 
data dependence classified true dependence write location followed read location anti dependence read location followed write location output dependence write location followed write location 
data dependences easily computed virtual physical registers registers explicitly named operands instructions 
computing data dependences memory locations object fields array elements harder problem exact solutions undecidable general 
difficulty arises aliasing problem syntactically different expressions may refer memory location 
addition pointer induced aliases certain reads writes locations ordered obey semantics exceptions synchronization memory model java 
exceptions properly ordered order ensure view program state needed corresponding exception handlers preserved 
approach integrates new kinds dependence constraints single framework true anti output dependences 
model registers memory locations exception synchronization states locations 
simple pass algorithm iterates instructions extended basic block construct dependence graph 
execution time space algorithm linear size basic block linear number defs uses locations instructions basic block 
rest section organized follows 
section summarizes locations approach 
section contains brief description dependence analysis algorithm 
sections outline scheduling constraints alu instructions memory instructions instructions call instructions synchronization instructions modeled locations 
section outlines impact java memory coherence assumption dependence analysis 
section discusses extensions basic algorithm 
locations illustrated type information partition concrete memory locations locations location types 
location represents may aliased equivalence class concrete locations location potentially interfere distinct locations interfere 
locations represent different cases global data fields field declaration corresponding location loads field location stores field define location 
distinct fields distinct locations 
array elements primitive array type bool short int long float double char unique location modeling concrete locations elements accessed aload astore instructions array corresponding type 
additional memory registers exception state synch 
state int fig 

examples locations location object represent locations elements arrays objects including arrays arrays 
refinement array element locations type elements arrays reflect simple kind type alias analysis 
results extensive alias analysis incorporated refinements locations long resulting locations partition underlying concrete locations 
statics static data element including static fields distinct location 
addition distinct location associated represent method local data symbolic register 
spill location constant offset stack frame 
location performing dependence analysis register allocation 
exception type model exception dependences 
pei contains pseudo assignment location assigning class raised exception 
operand ir instruction accesses underlying location described 
cases requires creating pseudo operands specify defs uses locations defs uses part concrete semantics instruction 
example load instruction explicit operand symbolic register contains load address pseudo operand represents location accessed global memory 
uses denote set locations read instruction defs denote set locations defined written important note execution time dependence analysis algorithm section linear sum sizes uses defs sets instructions basic block 
conservative intraprocedural analysis information determine sets size set bounded constant algorithm take time linearly proportional number instructions 
precise interprocedural information call instructions lead larger non constant sized defs uses sets 
linear time dependence analysis algorithm contains algorithm computing dependence graph extended basic block time space linear size block linear number operands pseudo operands instructions block 
pass algorithm traverses instructions block forward order 
key idea associate definition value def location block 
location loc loc def initialized null 
pass proceeds loc def set definition operand performs write location loc 
general encountered loc location loc def null flow dependence edge created loc def instruction instruction 
dependence edges created algorithm edge may represent register memory exception dependence depending underlying location 
similarly def encountered loc location loc def null output dependence edge created loc def instruction instruction 
addition loc def updated second pass algorithm traverses instructions reverse order 
def values reinitialized null 
pass proceeds loc def set definition operand backwards traversal performs write location loc 
encountered location def null anti dependence edge created instruction location def instruction 
single def value location guarantees linear sized time space complexity algorithm 
consider ir fragment example putfield putfield getfield instructions access location field 
algorithm insert output dependence edge flow dependence edge 
contrast traditional dependence analysis algorithms insert flow dependence edge assuming object potentially aliased 
general quadratic number bb foreach location loc bb locations loc null clear defs instruction bb instructions forward order pnode dependence graph node corresponding instruction location determines register memory exception dependence operand uses loc location loc null create true dependence edge loc instruction pnode endif def operand defs loc location loc null create output dependence edge loc instruction pnode endif loc record def foreach loc bb locations loc null clear defs instruction bb instructions backward order pnode dependence graph node corresponding instruction record def foreach def operand defs loc location loc create anti dependence edges foreach operand uses loc location loc null create anti dependence edge pnode loc instruction endif fig 

algorithm compute dependence graph extended basic block extra edges created traditional dependence analysis algorithms 
algorithm avoids creating transitively implied edges ensuring def target edge dependence graph 
alu instructions simple arithmetic instructions number register operands number typically register destinations 
register modeled system unique location distinct location representing fact register aliased register memory location 
definition locations algorithm construct data dependence edges registers 
memory instructions memory instructions locations represent global data accessed 
load instruction pseudo operand reads location representing area memory possibly read load store instruction def pseudo operand writes location representing area memory possibly written store 
appropriate locations memory pseudo operands determined alias analysis preceding dependence graph construction 
alias analysis rich research area fortunately separable dependence graph construction problem 
dependence graph construction algorithm assumes results alias analysis expressed partitioning concrete locations discussed section 
exception instructions conservative approach dependence analysis exception instructions simply prevent write operation including updates scalar local variables moving pei 
greatly limit opportunities scheduling largely defeat purpose scheduling 
pei approach include uses locations variables memory locations live entry exception handler exception routed 
write operations modify location uses free move pei live variable analysis compute set local variables live entry handler global heap allocated data normally considered live default 
addition include defs exception type location 
ensures executed order output dependences generated defs exception type 
call instructions explicit operands call instruction identify call arguments result 
addition pseudo operands introduced represent memory locations possibly read written callee 
absence interprocedural analysis information call instruction assumed define locations represent memory locations fields arrays static data 
precise sets locations result interprocedural side effect analysis 
addition calls raise exceptions rules described section followed 
synchronization instructions synchronization instructions define critical section 
java memory model defines effect instructions memory locations point view particular thread follows instruction thread updates local view memory true global view instruction thread flushes local view memory back global view 
construct safe dependence graph expand instruction lock operation update operation instruction publish operation unlock operation shown example 
single location representing global synchronization state serialize lock unlock thread treating def 
memory model semantics captured treating update operation write locations precisely locations written thread publish operation read locations precisely locations read thread 
location synchronized object lock ensure memory read write operations remain original critical section treating lock unlock defs lock memory operations critical section uses lock 
note instructions access scalars moved freely synchronization instructions see defs scalars 
memory read operation read moved desired presence lock location code motion reversed moving memory read back exhibiting anomaly described 
expansion instructions enables synchronization elimination performed removing lock unlock operations retaining requirements captured update publish operations 
fig 

example modeling dependences due memory coherence java memory model enforces strict memory coherence semantics accesses concrete location guarded synchronization instructions 
observed reordering potentially aliased load instructions illegal transformation multithreaded programs written memory model includes strict memory coherence assumption 
example consider code fragment getfield getfield suppose may aliased 
thread executes code fragment thread execute multiple putfield instructions 
java memory model requires point object memory thread see values written thread order 
compiler conservatively assume possible existence thread illegal compiler reorder getfield instructions 
strict memory coherence model dependence graph contain edge getfield instruction prevent reordering 
unfortunately adding read dependences possibly aliased loads significantly constrain opportunities instruction reordering 
alternative default strict memory coherence model jalape optimizing compiler allows users select weak consistency model require memory coherence location consistency lc 
memory model guarantees properly synchronized programs execution semantics default model imposing additional constraints dependence graph 
proposal new memory model java lc model 
extensions dependence analysis algorithm described section takes linear time single def value location 
algorithmic property relies fact locations overlap 
requiring locations disjoint limit precision expressiveness sophisticated alias analyses 
algorithm extended handle locations form lattice possibly overlapping regions worst case time complexity algorithm may degrade quadratic time factored representation resulting dependence graph require linear amount space 
calls synchronization instructions may considered read write global memory locations 
representing memory locations explicitly greatly increase size basic block resulting dependence graph 
reduce number memory locations memory locations referenced explicitly load store instruction extended basic block need included explicitly memory locations summarized single rest memory location extra location needed basic blocks contain explicit loads stores contain synchronization instructions calls 
resulting locations form partition set concrete locations accessed block 
currently considered write special exception type location ensuring serialized 
exception handler indistinguishable perspective exception handler raise kind exception null pointer tests array bounds checks handler handles exceptions raise handler ignores exception object passed report exception place program determined resolution java implementation debugging native method dependence constraints set locations live handler 
indistinguishable pei instructions freely reordered dependence constraints operands 
reordering ability implemented extending algorithm track value assigned special exception type location value reflects kind exception raised pei handler cares debugging location information pei 
pei assignment exception type location leads output dependence location def pei assign different values location 
new pei inserted dependence graph parallel previous pei forming kind equivalence class dependence graph indistinguishable 
straightforward implementation idea lead quadratic time space algorithm sophisticated algorithm exists maintaining factored representation dependence graph linear time space complexity 
example java source program public class int static void foo int int int fig 

example java program section simple example illustrate key aspects approach computing data dependences java program algorithm fits rest compiler framework 
consider method foo java program shown 
remainder section focus attention main basic block case method foo 
shows unoptimized hir high level ir basic block pei annotation identify exception generating instructions 
note exception tests explicit 
example load translated hir instructions null check bounds check int aload 
exception test fails control transferred exception test instruction runtime routine jvm runtime routine examines exception table shown ir figures determine exception handled transferring handler block exiting method 
exception test succeeds instruction dependent exception test enabled execution 
described hir generated bytecodes method foo java source code 
bytecode offset operator operands label pei pei pei putfield pei 
getfield 
pei 

pei 
pei 

fig 

hir generated bytecode basic block bytecodes method foo 
method arguments 
temporaries 
condition registers 
lines marked removed subsequent optimizations condition codes replaced ones arrows 
bytecode issue dependence offset operator operands time graph node label pei pei pei completion time cycles fig 

mir generated basic block method foo 
condition registers 
issue times assume order execution 
int int true anti output edge markings location type types locations scalars exceptions fields arrays int fig 

dependence graph basic block method foo explicit connection exception test instructions guards ir exception test assumed compute condition register temporary result 
instruction depends success exception test takes condition register extra input operand 
condition registers appear final machine code presence ir ensures ir optimizations cause guarded instruction executed prior exception test 
example condition register captures result null pointer check argument viz object 
input operand putfield instruction 
exploring possibility allowing guard instruction arithmetic exception zero check guard divide zero exception performed corresponding compute instruction 
possibilities processor specific expressed ir removing condition register ir instructions test instruction need precede compute instructions 
redundant check elimination performed global optimizations hir 
exception test instructions marked redundant removed 
instructions marked 
modified condition registers equivalent exception tests 
note number reduced optimization 
key benefits making exception tests explicit ir 
elimination redundant tests left null check bounds check note zero check instruction divide instruction eliminated test method foo 
optimization remaining tests possible knowledge interprocedural calling context information method foo 
described optimized hir converted lir lower level ir 
high level operations aload astore getfield putfield expanded multiple low level operations closer machine code 
lir optimizations performed lir translated mir machine level ir performing instruction selection resulting mir shown 
mir instructions belong target instruction set architecture case powerpc minor extensions 
null check instructions allowed mir presence gives greater flexibility instruction scheduling 
scheduling null check instructions merged load store instructions possible performed implicitly second condition register operands included mir instructions enable precise dependence analysis instruction scheduling 
condition registers discarded prior generation machine code 
dependence graph algorithm applied construct dependence graph mir instructions 
shows resulting data dependence graph extended basic block 
bytecode issue offset operator operands time label pei pei pei completion time cycles fig 

mir generated instruction scheduling basic block method foo 
schedule assumes order exception generating instructions preserved 
issue times assume order execution 
jalape uses layout object fields array length stored negative offsets object support hardware null checking powerpc architecture low memory including address high memory bytecode offset operator operands label pei pei pei fig 

final mir merging null check instructions 
instruction scheduling applied dependence graph mir instructions 
shows new sequence target instructions obtained applying simple list scheduling algorithm dependence graph 
explicit exception tests enables reordering performed possible 
example input time consuming divide operation beneficial move load field early possible 
shown divide instruction load stack offset moved prior load store 
reordering possible exception tests modeled explicitly ir 
appreciate impact instruction scheduling example note completion time basic block reduced cycles instruction ordering cycles new ordering 
completion times estimated assuming processor perform execution instructions 
contains mir obtained merging null check instruction load store instruction uses condition register result 
example null check instructions successfully merged load instructions 
note load instructions ppc marked 
update required exception handler tables merging performed handler blocks identical belong basic block 
related dependence analysis scalar variables understood long time example def chaining early technique identifying true dependences basic blocks 
principle compute anti output dependences scalar variables 
scalar renaming effective technique eliminating anti output dependences ssa form popular approach obtain canonical renaming scalars 
bulk past research dependence analysis memory accesses focused array variables affine subscripts pointer dereferences 
advent vectorizing parallelizing compilers led data dependence analysis techniques developed array accesses affine subscript expressions special case important optimization scientific programs written fortran lot attention paid points alias analysis pointer variables goal improving effectiveness compiler optimizations pointer intensive programs written 
points analysis general programs hard problem experience far algorithms points analysis consume excessive amounts time space algorithm notable exception 
observed type alias information obtain simple effective dependence analysis object statically typed oo languages modula java 
identified restrictions due java memory model imposed compiler optimizations multithreaded java programs 
addresses problem data dependence analysis java presence java non traditional language features exceptions synchronization memory consistency 
locations introduced section viewed generalization type alias analysis deal exceptions 
previous compilers object oriented languages modeled exceptions branch instructions terminate basic blocks deal dependence analysis exceptions 
contrast compiler builds extended basic blocks include multiple basic block 
addressed problem data dependence analysis java presence features exceptions synchronization memory consistency 
introduced dependences new classes locations model code motion constraints arising language features 
linear time algorithm constructing augmented dependence graph extended basic block type alias analysis java 
motivation dependence analysis discussed phases jalape dynamic optimizing compiler instruction selection instruction scheduling data dependence graph 
interesting direction dependence rules locations enable code motion regions larger single extended basic block 

bowen alpern anthony cocchi derek lieber mark mergen vivek sarkar 
jalape compiler supported java virtual machine servers 
acm sigplan workshop compiler support system software may 
available inria report march 

ken arnold james gosling 
java programming language 
addisonwesley 

michael burke jong deok choi stephen fink david grove michael hind vivek sarkar mauricio serrano sreedhar srinivasan john whaley 
jalape dynamic optimizing compiler java 
acm java grande conference june 

jong deok choi david grove michael hind vivek sarkar 
efficient precise modeling exceptions analysis java programs 
proc 
acm sigplan sigsoft workshop program analysis software tools engineering toulouse france september 

ron cytron jeanne ferrante 
name 
value renaming parallelism detection storage allocation 
proceedings international conference parallel processing pages august 

ron cytron jeanne ferrante barry rosen mark wegman kenneth zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems october 

jeffrey dean greg defouw dave grove litvinov craig chambers 
vortex optimizing compiler object oriented languages 
acm sigplan conference object oriented programming systems languages applications oopsla san jose ca october 

amer diwan kathryn mckinley eliot moss 
type alias analysis 
sigplan conference programming language design implementation pages may 

guang gao vivek sarkar 
location consistency stepping memory coherence barrier 
international conference parallel processing august 

guang gao vivek sarkar 
importance view memory consistency computer systems 
proceedings international symposium high performance computing fukuoka japan november 

steven muchnick 
advanced compiler design implementation 
morgan kaufmann publishers san francisco california 

william pugh 
new memory model java 
note sent mailing list www cs umd edu pugh java october 

william pugh 
fixing java memory model 
acm java grande conference june 

bjarne steensgaard 
points analysis linear time 
rd annual acm sigact sigplan symposium principles programming languages pages january 

michael wolfe 
optimizing supercompilers supercomputers 
pitman london mit press cambridge massachusetts 
series research monographs parallel distributed computing 
