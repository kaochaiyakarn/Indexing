acta informatica manuscript 
inserted editor top proof procedure generalized data dependencies st ephane lirmm cnrs universit montpellier ii rue ada montpellier cedex france mail lirmm fr date receipt acceptance inserted editor 
data dependencies known context relational database 
aim specify constraints data satisfy model correctly part world consideration 
implication problem dependencies decide dependency logically implied set dependencies 
proof procedure implication problem called chase studied generalized case tuple generating equality generating dependencies 
chase bottom procedure hypotheses goal directed 
requires dynamic creation new symbols turn costly operation 
introduces new proof procedure top hypothesis goaldirected 
originality procedure act classical theorem proving procedures require special form expressions clausal form obtained 
show procedure step useless notion piece allows directly dependencies saving cost inference performed dynamically creating new symbols 
top approaches known ecient time bottom ones notion piece cuts irrelevant goals usually generated leading usable top method 
constrained ordered dependencies interesting perspectives arise 
st ephane key words 
dependencies chase implication problem tgd egd top dependency theory allows expression modelling constraints data satisfy order re ect correctly world relational database intends describe 
functional dependencies codd cod kinds dependencies studied lot carried late early 
database dependencies theory active area research sf ll ll ll 
functional multivalued dependencies known classes data dependencies 
practice kinds sucient general express constraints ull 
general classes introduced purpose nding uniform way express constraints bv su 
deals class commonly known generalizing dependencies tuple generating equality generating dependencies tgds egds bv 
survey general class dependencies refer reader ll fv 
central problem implication problem decide dependency logically implied set dependencies 
process solve problem provide solution nd minimal cover set dependencies decide dependency redundant set useful constraint acquisition stage procedure designed bv purpose known chase 
unfortunately implication problem tgds egds semi decidable chase proof procedure process may run forever 
argue chase clearly bottom procedure hypotheses 
chase requires dynamic creation new symbols 
introduce new proof procedure top hypothesis goal directed 
originality procedure act classical theorem proving procedures requiring special form expressions clausal form obtained 
show procedure step useless notion piece allows directly dependencies 
top chase simply usual chase reversed new way solving implication problem 
fact top procedure data dependencies performed top rst contribution 
second contribution avoid dynamic creation symbols skolemization usually applied original formulae prior top proofs 
realized advantage form dependencies 
knowledge realized 
dynamic creation symbols costly operation proof procedures chase order take account ect existential quanti ers 
true top approaches take exponential time longer bottom approaches reasons allow think proof procedure ecient 
arguments detailed section 
eciency bottom chase currently assessed details 
constrained dependencies mah bcw mah ordered dependencies ng introduced :10.1.1.25.8886
originate constraint programming eld permit expression semantic relations variables giving interpretation 
chase procedure redesigned ms bottomup way order deal constrained tuple generating dependencies 
dependency theory gives new perspectives top chase procedure 
top chase originates conceptual graphs model knowledge representation model introduced sowa sow 
base model extended graph rules inference method called piece resolution sm 
logical roots process studied cs constitute basis top chase 
proofs lemmas theorems derived mentioned 
section describes framework implication problem data dependencies 
sketch existing bottom chase 
section top chase explained 
section closes concluding remarks 
framework de nitions part taken bv simpli ed purpose 
rst subsection states assumptions 
second subsection presents necessary de nitions 
third subsection description kind dependencies focus 
note known capture semantic dependency types studied 
fourth st ephane tion presents formally implication problem describes traditional chase procedure designed solve implication problem 
chase clearly bottom mechanism hypotheses 
preliminaries sake clarity assume restrictions model 
assume universal relation assumption holds database modelled relation usually permits simpler formal presentation approaches 
secondly dependencies typed sorted attribute domains disjoint 
thirdly address dependencies constants illustrated 
tgds egds expressed rst order logic 
informally speaking equality generating dependency egd says tuples exist database values tuples equal 
tuple generating dependency tgd says tuples exist database tuples values necessarily taken rst tuples exist database 
values may unknown 
example express classical functional dependency stating customers having name identi er egd functional dependency cust cust express invoice related existing order tgd amount invoice amount order introducing constants state specialized constraints 
example invoice related order taken customer amount invoice amount order framework tableaux suited universal relation assumption holds 
top procedure data dependencies hand assumption real world applications imply modelling database schema relation 
reason real world examples 
note restrictions appear clarity reasons results applicable unrestricted model 
attributes relations tableaux de nition attribute 
attributes symbols taken nite set fa called universe 
sets attributes subsets complement attribute denoted de nition relation 
attribute associated nite set domain denoted dom dom dom dom dom 
attribute set value mapping dom dom tuple value 
relation set necessarily nite tuples 
letters denote tuples denote relations 
tuple set denote restriction 
attribute distinguish value element dom 
relation 
set values fw jw ig 
set values 
de nition valuation 
valuation mapping dom dom dom implies dom dom 
valuation extended tuples relations follows 
tuple 
denotes functional composition 
relation 
fh jw ig 
usually interested small subset dom example 
unde ned values say valuation associate attribute nite set constants cons dom 
valuation constant dom require relation cons set constants appearing 
example 
relation tuple shown 
valuation 




st ephane de nition extension 
relation valuation extension relation valuation agrees 
identity relation say identity dependencies equality generating dependency egd says tuples exist database values tuples equal 
de nition egd 
equality generating dependency egd nite pair values attribute nite relation 
call egd egd 
relation satis es valuation 
note trivially satis ed relation egd trivial 
example 
consider relation example 
egd shown satis es note equivalent functional dependency ab 
tuple generating dependency tgd says tuples exist database tuples values necessarily taken rst tuples exist database 
values may unknown 
top procedure data dependencies de nition tgd 
tuple generating dependency tgd pair nite relations 
satis ed relation valuation extension example 
consider relation example 
relation shown 
tgd satis es implication problem bottom chase set dependencies dependency 
implication problem decide determine true database dependency true 
sat set relations composed constants satisfy dependencies implication problem equivalent decide sat sat 
chase procedure designed solve implication problem 
reader refer bv complete description 
intuitively speaking dependency proven tgd egd chase procedure takes relation treats formed set tuples 
applies repeatedly dependencies distinct rules tgds ect add tuples relation egds ect identify symbols 
dependency st ephane proven tgd procedure stops obtaining tuples egd procedure stops obtaining identi cation mechanism shown sound complete var 
note implication problem tgds egds semi decidable 
chase may 
chase procedure clearly bottom forward chaining 
rule applications generating new tuples identi cation symbols 
executed obtain desired 
goal proven guide process 
applying tgd rule ect add tuples relation existential quanti cation requires costly dynamic creation new symbols 
show apply top backward procedure process goal directed 
top chase depending type dependencies implication problem solvable recursively unsolvable bv var gl 
means rst case decision procedure algorithm halt second case proof procedure implication true process terminate 
case 
subset tgds known full tgds 
dependencies form datalog rules 
case notion piece stated applicable 
theorem proving procedures applied solve implication problem involving full tgds query subquery vie ts xsb ssw 
kind dependencies subsets functional multivalued dependencies interest top chase applicable 
particular cases speci proof procedures shall ecient 
top chase classical bottom clearly needed dependencies complex decidable subset provide general way solve implication problem 
lot carried active database area 
survey refer reader wc 
active databases generally support automatic triggering updates response internal external events 
updates expressed top procedure data dependencies mean rules slightly di erent tgds egds 
usually rules expressed datalog negation bdr ahv 
main di erence lies fact variables occuring universally quanti ed database dependencies existentially quanti ed occur hypothesis 
rst subsection presents proof procedure tgds 
second subsection shows procedure take egds account reduction theorems 
proof procedure tgds set tgds constants tgd constants 
intuitively speaking decide start tuples treat formed relation 
relation 
considered goal reach 
hand add replacing symbol new constant transforming tuple tgd constants 
try remove tuples applying successively rule giving time new goal 
rule applications may introduce new tuples 
achieve removing tuples obtaining empty goal explain process formal way 
need notion distinct substitution replaces symbol relation new constant 
de nition distinct substitution 
relation constants 
distinct substitution valuation new distinct constant add set tgds constants form corresponding distinct tuple 
add tgds 
theorem states checking reduced checking result adding new tgds goal 
note added tgds ones having constants 
mode formally theorem 
set tgds constants tgd constants 
distinct substitution extension identity 
denote ju denote tgd possibly constants 
called goal 
st ephane example 
tgd constants shown 
extension identity 
distinct substitution 






new constants belong 
denote ju ju denote tgd describe main step process 
tgd goal rule constructs new goal 
need introduce notion piece 
piece set tuples semantically linked 
applying rule see tuples treated time 
notion alternative classical process replaces unknown values constants prior classical rst order logic provers 
piece set tuples share unknown values treated 
originality top chase 
top procedure data dependencies de nition piece 
relation 
pieces relation de ned way tuples belong piece sequence tuples um um 
corollary tuple share unknown value forms piece 
construction set pieces unique relation set symbols example 
relation shown fa pieces relation containing tuples sharing symbols containing tuples sharing symbol containing tuple share symbols piece 
de ne core rule 
de nition core rule 
tgd goal 
valuation piece relation st ephane result application rule denoted np 
new goal 
obtained removing adding 
note may possible tgds obtained application rule depending valuation sense piece notion allows group tuples symbols unknown values share 
example 
consider tgd example tgd example called shown 


check 
valuation pieces relation fa rst tuples tuple 
rst piece 
construct 
np top procedure data dependencies lemma soundness rule 
goals tgd 
fq tg theorem states goal implied set tgds sequence rule applications sequence starts original goal gives empty goal result theorem soundness completeness 
sequence rule applications 
note tgd form 
dealing egds egds add diculties include equality predicate 
shown bv implication problem tgds egds constants reducible implication problem tgds constants 
core rule sucient 
egd 
tuple attributes 
tuple associate tgds 
fw fw 
set tgds egds result replacing egd associated tgds example 
consider egd example 
associate tgds shown 
st ephane fw fw theorems allow ignore presence egds reducing implication dependency set tgds egds implication tgd set tgds theorem 
bv set tgds egds constants tgd constants 
theorem 
bv set tgds egds constants 
non trivial egd constants associated tgds 
non trivial egd generalize theorem give nal theorem reduces implication problem tgds egds existence top chase rule theorem 
set tgds egds constants tgd constants 
distinct substitution denote ju denote tgd sequence rule applications 
non trivial egd constants associated tgds 
distinct substitution denote ju denote tgd 
non trivial egd sequence rule applications non trivial egd top procedure data dependencies remarks discuss points 
compare topdown chase backward formal system proof procedures 
discuss need implementation strategies contributions 
conclude lifting restrictions model pointing perspectives 
comparison formal systems formal systems studied data dependencies bfh sci bv su 
bv formal systems tgds egds studied 
systems backward formal system similarities top chase 
sketch main di erences 
refer reader details formal systems tgds egds 
system deals tgds unknown values symbols way process starts goal tuple applies tgd making coincide 
typically achieved especially collapsing augmentation projection rules 
coincide uses transitivity rule derive new goal 
derivation tree linear case sld resolution 
top chase leads linear inference sense uses directly tgds base rst applying rules 
rule 
obviously complex step 
implementation strategies implement top chase need add search strategy breadth rst depth rst example obviously execution may terminate 
rst order logic point view principle seen intuitively kind dealing groups atoms time 
far studied optimization top chase gain lot traditional top optimization techniques 
top performs dynamic optimizations 
st ephane related knowledge rst time top proof procedure solve implication problem dependencies 
rst shown performed top 
top chase avoids process necessary order classical top theorem proving procedures 
step lead exponential increase size formula 
providing way infer directly original form dependencies way notion piece top chase conceptually speaking simpler approach second contribution 
compared classical chase require dynamic creation new symbols 
preliminary transformation tgd proven requires creating new symbols universally quanti ed variables appearing 
step cant 
third contribution 
note top chase usual chase simply reversed 
core rule totally di erent bottomup approach bv 
currently investigating details eciency topdown chase 
trivial assess various parameters come play 
agree fact unreasonable expect proofs optimality superiority algorithm cases 
shall detail arguments 
need skolemization dynamic symbol creation 
increase eciency 
hand top approaches take exponential time longer bottom approaches 
notion piece performs dynamic optimizations dealing groups atoms time failures detected earlier classical top procedures irrelevant goals cut earlier 
feature dramatically reduces number backtracks 
illustration compared method prolog proofs generated random varying time size content dependencies set size dependencies 
top chase implemented top platform gs set tools conceptual graphs management 
tests showed top chase provides logarithmic average improvement number backtracks proof duration process stops spite non optimized implementation 
reduces drastically drawback top approach gives top chase top procedure data dependencies fair practical level eciency 
fact search right symbol mappings exponential complexity practically act brake 
sld resolution irrelevant goals may lead exploring branch resolution tree top chase detects failures earlier allows saving average time 
approach run faster practice data 
think presenting example superiority bottom chase signi cant provide worthwhile addition discussion 
reasons plan implement chase bv order practically compare eciency random dataset 
think dependencies divided classes approach better identifying open problem 
mention optimisations bottom approach magic sets ms 
principle magic sets perform compile time optimizations usually performed run time rewriting set dependencies inference 
leads avoiding generation irrelevant facts process essence topdown approach 
shall take optimizations account implementation 
extension model stated assumed restrictions model easily lifted 
reduction egds tgds works unrestricted model stated bv 
results extended cs piece resolution 
renewed interest data dependency theory constrained dependencies ordered dependencies 
type dependency express wide variety constraints data bcw generalizing temporal dependencies taxonomy js 
chase procedure redesigned bottom way order deal constrained tuple generating dependencies ms constrained functional dependencies 
procedure serve basis design top chase constrained tuple generating dependencies 
st ephane ahv abiteboul hull vianu 
foundations databases 
addison wesley reading mass 
bcw marianne jan chomicki pierre wolper 
dependencies 
georg gottlob moshe vardi editors database theory icdt th international conference volume lecture notes computer science pages prague czech republic january 
springer 
bdr bailey dong ramamohanarao 
decidability undecidability results termination problem active database rules 
pods 
proceedings acm sigact sigmod sigart symposium principles database systems june seattle washington pages 
bfh beeri ronald fagin john 
complete axiomatization functional multivalued dependencies database relations 
diane smith editor proceedings acm sigmod international conference management data pages toronto canada august 
acm new york 
fran cois bancilhon david maier yehoshua sagiv je rey ullman 
magic sets strange ways implement logic programs 
proceedings fifth acm sigact sigmod symposium principles database systems pages cambridge massachusetts march 
bv beeri moshe vardi 
implication problem data dependencies 
shimon oded editors automata languages programming th colloquium volume lecture notes computer science pages acre israel july 
springer verlag 
bv beeri vardi 
formal systems tuple equality generating dependencies 
siam journal computing 
bv beeri moshe vardi 
proof procedure data dependencies 
journal acm october 
cod codd 
normalization database relational model 
ed 
prentice hall englewood cli nj 
cs st ephane eric 
piece resolution larger perspectives 
proceedings sixth international conference conceptual structures iccs montpellier france 
fv fagin vardi 
theory data dependencies survey 
mathematics information processing proceedings symposia applied mathematics volume pages 
american mathematical society 
gl yuri gurevich harry lewis 
inference problem template dependencies 
information control october november december 
gs david genest eric 
platform allowing typed nested graphs 
proceedings sixth international conference conceptual structures iccs lnai berlin 
springer verlag 
top procedure data dependencies christian herrmann 
undecidability implications embedded multivalued database dependencies 
information computation november 
js jensen snodgrass 
temporal specialization 
editor proceedings international conference data engineering pages tempe az february 
ieee 
ll mark levene george 
additivity problem functional dependencies incomplete relations 
acta informatica 
ll mark levene george 
null inclusion dependencies relational databases 
information computation august 
ll levene 
additivity problem data dependencies incomplete relational databases 
lecture notes computer science 
ll mark levene george 
guided tour relational databases 
springer london 
mah michael maher :10.1.1.25.8886
constrained dependencies 
proceedings ilps workshop constraints databases ithaca november 
mah maher 
constrained dependencies 
theoretical computer science february 
ms maher srivastava 
chasing constrained tuple generating dependencies 
pods 
proceedings fifteenth acm sigact sigmod sigart symposium principles database systems pods montr eal canada june volume pages new york ny usa 
acm press 
ng ng 
ordered functional dependencies relational databases 
information systems 
sci edward 
complete axiomatization full join dependencies 
journal acm april 
sf peter flach 
discovery multivalued dependencies relations 
technical report report albert freiburg institut fuer informatik march 
sm eric marie mugnier 
sound complete forward backward graph rules 
proceedings fourth international conference conceptual structures iccs volume lnai pages berlin august 
springer 
sow sowa 
conceptual structures information processing mind machine 
addison wesley reading mass 
ssw sagonas swift warren 
xsb deductive database 
sigmod record acm special interest group management data june 
su sadri je rey ullman 
template dependencies large class dependencies relational databases complete axiomatization 
journal acm april 
ts hisao tamaki sato 
old resolution tabulation 
ehud shapiro editor proceedings third international conference logic programming lecture notes computer science pages london 
springer verlag 
st ephane ull je rey ullman 
principles database knowledge base systems 
volume classical database systems 
computer science press 
var moshe vardi 
implication nite implication problems typed template dependencies 
journal computer system sciences february 
vie 
recursive axioms deductive databases approach 
st conference expert database systems kerschberg ed april 
wc widom ceri 
active systems 
morgan kaufmann san mateo calif 
top procedure data dependencies appendix theorem proof 

sat relation 
valuation construction sat ju 
follows sat 
contain constants di erence lies constants respectively introduced valuation 
construct relation sat obtained renaming constants order match 
extension identity 
construction valuation 
valuation identical sat 

sat relation 
valuation contains constants 
ii sat 
sat 
cf 
sat extension sat lemma proof 
sat fq tg sat sat 
construction valuation np valuation np np sat np 
ii trivially sat sat np 
sat sat sat sat 
sat np 
iii suppose sat 
valuation valuation np exists sat np cf 

valuation np cf 
sat np leads contradiction cf 
ii 
sat fq tg theorem proof 

induction number rule applications 
trivially assume induction true st ephane prove lemma fq fq follows 
homogeneity formalism proof tableaux 
easier proof fol formalism rewriting dependencies clausal form showing empty clause obtained refutation negation tgd 
rst prove tgd valuation piece relation 
apply rule construct 
relation sat 
form valuation form sat valuation follows structure tgd valuation piece relation 
construction sequence valuations kg de ned identical 
de ned identity de ned 
nh tgd 
identity symbol renaming conserves mapping 
construction de ned identity valuation 
de ned 
conclude completeness method prove 
construction number valuations piece relation necessary nite sequence valuations 

theorem top procedure data dependencies proof 
theorem set tgds 
theorem follows theorem prove existence sequence rules 
theorem nontrivial egd set tgds 
theorem follows non trivial egd theorem prove existence sequence rules 
