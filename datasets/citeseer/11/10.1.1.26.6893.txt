formulae types notion control timothy griffin department computer science rice university houston tx programming language scheme contains control construct call cc allows access current continuation current control context 
effect provides scheme class labels jumps 
show known formulae correspondence relates constructive proof formula ff program type ff extended typed idealized scheme 
surprising correspondence relates classical proofs typed programs 
existence computationally interesting classical programs programs type ff ff holds classically constructively illustrated definition conjunctive disjunctive existential types standard classical definitions 
prove evaluations typed terms idealized scheme finite 
formulae types correspondence referred propositions types correspondence curry howard isomorphism relates constructive proof formula ff program type ff 
correspondence restricted constructive logic widely believed supported part darpa ccr 
author current address departamento de ciencia da ao unicamp postal campinas sp brazil 
email griffin br general classical proofs lack computational content 
shows types correspondence extended classical logic computationally interesting way 
shown classical proofs posses computational content notion computation extended include explicit access current control context 
notion computation programming language scheme contains control construct call cc provides access current continuation current control context effect provides scheme firstclass labels jumps allows programs efficient purely functional programs 
formulae types correspondence typed version idealized scheme typed iswim containing operator similar call cc developed felleisen reasoning scheme programs 
section reviews iswim extension idealized scheme control operator felleisen roughly speaking evaluation abandons current control context applies procedural abstraction context 
typed version idealized scheme section formulae types correspondence typed terms natural deduction proofs classical implicational logic 
types include type corresponds proposition false 
type ff 
abbreviated ff ff 
application typed follows 
type ff type ff 
rule corresponds classical rule elimination double negation 
section demonstrates computationally interesting typed programs type ff ff holds classically constructively 
shown conjunctive disjunctive existential types defined standard classical definitions call cc abbreviates call current continuation 
page operations pairing projection injection analysis cases defined equivalent ways defining classical logic 
example place double negation elimination classical logic defined adding law excluded middle ff ff constructive logic 
section shows law excluded middle operational interpretation computationally equivalent section shown known cps continuation passing style transform corresponds embedding classical constructive logic 
section uses modified cps transform prove evaluations typed programs finite 
iswim idealized scheme section reviews definition landin iswim extension idealised scheme 
versions iswim call value version denoted iswim call name version denoted give rise call byvalue call name versions idealized scheme denoted respectively 
call value landin iswim call value language core syntax expressions calculus nn ranges infinite set variables 
operational semantics iswim defined landin terms secd machine 
plotkin showed definition equivalent partial function eval 
eval 
eval mn eval eval eval represents value values defined variables abstractions 
metavariables range values 
notation denotes usual capture avoiding substitution free occurrences notation iswim call value iswim distinguish call name version defined 
ignores constants evaluation 
expression form called fi redex 
function eval produces result equivalent repeatedly reducing fi redex inside scope abstraction 
felleisen formalized evaluation order terms evaluation contexts 
iswim evaluation contexts defined inductively en represents hole 
evaluation context denotes term results placing hole difficult show closed term value written unique way fi redex 
leftmost outermost fi redex inside abstraction 
notation means unique representation example unique representation non value terms evaluation context fi redex gives rise context rewrite rule 
fi 
fi expresses plotkin left reduction terms evaluation contexts 
reflexive transitive closure 
fi taken operational semantics iswim equivalent eval theorem theorem plotkin 
eval iff 
fi iswim term evaluates 
fi notation evaluation contexts gives clear picture manner subterms evaluated evaluation term 
notation 
fi denotes fold application 
fi rule 
lemma 

fi 
fi 

fi value 

fi point evaluation sequence 
fi 
fi delta delta delta 
fi 
fi delta delta delta non value wait evaluate value evaluation sequence continue computations involving subterms represents rest page computation remains done evaluated 
context called continuation control context point evaluation sequence 
notation evaluation contexts allows shall see concise specification operational semantics operators manipulate continuations intended 
programming language scheme contains call cc control construct provides programs direct access procedural abstraction representing current continuation current control context 
felleisen extension iswim called idealized scheme incorporates constructs manipulate control contexts 
expressions defined extending grammar iswim follows delta delta delta operators called respectively abort control 
closed term value written unique way fi redex 
informally evaluation throws away current control context continues evaluation expressed context rewrite rule definition evaluation contexts extended expressions obvious way 
operational semantics described informally follows 
control context term applied procedural abstraction abandoned control context 
procedure invoked value context abandoned evaluation resumes 
expressed rule 
mz 
operator defined terms def dummy variable free 

fi treats assignment free sublanguage idealized scheme 
treated defined construct rules 
fi 
treated defining operational semantics notation 
denotes union evaluation rules 
operational semantics differs call cc need return location 
version call cc added say evaluation rule mz 
addition necessary operator computationally equivalent defined def mk catch throw mechanism similar common lisp 
think evaluation catch labels current context name invoked thrown evaluation expression returns normally 
hand application jv encountered evaluation value thrown back location labeled context abandoned evaluation resumes 
illustrates accomplished evaluation rules idealized scheme 


fi 
fi 
fi evaluation returns normally 
fi qv 
fi delta delta delta delta delta delta hand value eventually thrown 
fi qv 
fi delta delta delta delta delta delta showing context abandoned evaluation continues restored context page noted operational semantics iswim unaltered cbv evaluation contexts redefined ne ev argument application evaluated function part 
addition longer case 
evaluation jumps context evaluation jumps result mn depend term evaluated 
call name definition call name iswim differs call value definition evaluation contexts fi rule 
call name cbn evaluation contexts defined en call name fi rule define 
fi 
fi call name evaluation context 
plotkin defined operational semantics function eval 
eval 
eval mn eval eval call name case agreement operational semantics context rewrite rule 
lemma eval iff 
fi call name idealized scheme obtained extending control operator evaluation rule 
mz 
call name evaluation context 
formulae types section develops typed version idealized scheme formulae types correspondence expressions system natural deduction classical implicational logic 
evaluation typed terms requires minor modification operational semantics define type expressions ff ff ff ff member set atomic types 
type expressions read propositions formulae ff fi representing ff implies fi 
syntax iswim modified variables tagged type expression ff ff typed iswim written iswim defined way simply typed calculus 
variable ff type ff type ff fi type ff mn type fi type fi ff type ff fi 
notation ff means type ff 
curry howard isomorphism iswim terms natural deduction proofs minimal logic 
reader referred prawitz girard complete treatment 
second correspondence extended logically consistent typing natural deduction derivations proofs sigma treestructured objects leaves contain formulae representing assumptions nodes represent application inference rules 
derivation sigma ff written sigma ff system deduction derivations generated assumptions ff inference rule elimination 
modus ponens sigma sigma ff fi ff fi inference rule 
ff sigma fi ff fi notation ff sigma fi means zero undischarged occurrences assumption ff derivation sigma notation ff sigma fi page means assumptions discharged unavailable 
derivation sigma iswim term type ff defined induction structure sigma 
assume assumptions sigma divided disjoint collection sets associated unique variable 
assumption ff corresponds variable ff variable associated set ff 
sigma ff fi corresponds term ff fi sigma ff corresponds term ff sigma sigma ff fi ff fi corresponds mn fi ff sigma fi corresponds fi ff sigma fi ff fi corresponds ff ff fi provided set discharged assumptions set associated variable extend correspondence typed terms proofs finding logically consistent typing start looking 
rule 
mz 
ff fi arbitrary types 
suppose type fi hole expecting term type ff 
reasonable give term type ff fi value type ff 
type fi 
sides 
rule type fi type ff fi fi 
arrive typing rule type ff fi fi type ff 
follows derivation closed term type fi type ff 
want type system logically consistent types read propositions fi proposition proof proposition provable 
assume set atomic types contains type represents empty type proposition false 
define ff read ff ff def ff ff arrive logically consistent typing type ff type ff 
typing typed idealized scheme written instance written ff order explicit type term 
logical perspective ff classical proof rule double negation elimination 
sigma ff ff ff corresponds derivation sigma 
system defined extended rule 
note corresponds constructive rule elimination 
sigma ff derived notation ff indicates term type ff 
constructive system defined extended rule 
problem typing 
rule applies entire expression type closed terms type rule useless 
rectify problem minor modification operational semantics basic idea follows 
evaluating expression ff 
rules expression ff km evaluated rules applied inside expression delta delta delta 
rules type sense body expression type 
formally define operational semantics 
page union rules 

tfi 
tc mz kv 
ce rule subject proviso free rule merely allows removal outermost computations 
expression 
normal form rules apply 
definition evaluation typed terms closed expression ff evaluates ff ff km 

normal form 

minor modification 
semantics stated lemma 
lemma km 
km 
ck kv ck 
words type violation system replacement top level continuation 
types classical programs operational interpretation types constructive programs 
program corresponding constructive proof ff fi takes inputs type ff outputs type fi 
longer case classical programs evaluation expression need return point evaluation may jump evaluation context 
type system distinction returning expression jumping expression inspecting expression type 
classical program type ff fi classical program type ff know application returns current control context return classical value type fi 
note evaluation application result jump 
conjunctive disjunctive existential types section demonstrates computationally interesting terms type ff ff holds classical constructive logic 
shown conjunctive disjunctive types defined standard classical definitions operations pairing projection injection analysis cases defined section concludes pointing types extended universal types ff existential types ff defined definitions call name connectives conjunction disjunction defined constructive implicational logic related curry howard fact pairing projection injection analysis cases definable simply typed calculus 
known connectives conjunction disjunction defined classically terms negation implication ff fi def ff fi ff fi def ff fi remainder section proceeds follows 
elimination rules derived classical system computational properties terms corresponding derived rules investigated 
shown terms pairing projection injection analysis cases 
rule sigma sigma ff fi ff fi derived sigma ff fi ff fi sigma fi ff fi ff fi terms corresponding derivations sigma sigma term hm def ff fi type ff fi corresponds derived rule 
rules sigma ff ff ff proof see prawitz 
page 
page derived ff ff sigma ff ff ff ff ff ff ff term type fffi corresponds derivation sigma term def ff mx ff ff jx type ff corresponds derived rule elimination 
derivations computational properties terms carried 
rules understanding typed terms evaluated 
rules 
done avoid notational clutter wrapping term expression delta delta delta 
computationally terms hm represent operations pairing projection 
derive reduction rule hm 

follows 
hm 
hm qx 
fi qx 
fi qm 
fi projection computed top level result thrown back original context 
turning disjunction rule sigma ff ff ff derived way ff corresponds derivation sigma inj def ff ff km term type ff ff corresponding derived rule rule sigma ff ff ff derived way term type ff corresponds derivation sigma inj def ff type ff ff corresponding derived rule 
elimination rule sigma ff ff ff sigma ffi ff sigma ffi ffi derived way term case def ffi ma type ffi corresponds derived rule ff correspond derivations ff sigma ffi ff ffi 
computationally terms inj case represent operations injection case analysis easy derive rules case inj 
case 
case definition terms injection case analysis obtained redefinition disjunction ff fi def ff fi injections defined inj ff def ff ff type ff ff case analysis abe defined case def ffi mg 
definitions call value call name evaluation projection computes hm 
qx evaluate values respectively fi redices page contracted 
occurs reduction continued 
qx 
fi qx 
qx 
fi qv 
fi 
evaluation hm forces evaluated values top level thrown back context note general terms need return 
special case evaluation starts pair values hv 
adding operators pairing projection iswim evaluation rule hm 

hm 
evaluate value evaluation continue subterms extension lemma section appropriate definition evaluation contexts 
classical definition requires evaluated values 
computational behavior improved modified conjunction 
suppose define conjunction ff fi def ff fi type exists value type define pairing projection hm def def mx jx possible derive reduction hm 

call value rules 
similar way definitions disjunction call value setting evaluation case forces evaluated top level value value thrown back context computational behavior modified starting redefinition conjunction version ff fi def ff fi inj ff def ff ff case def ffi mg xt 
case inj 
case inj 
easy derive 
rules 
suppose evaluates evaluate value cases evaluation continued 
qv 
fi 
existential types suppose types extended universal types ff ranges integer terms 
logical terms corresponds extending propositional calculus order predicate calculus 
assumed types propositions extended include predicates equality 
type ff integer expression mn type ff 
free type free variable ff type ff 
existential types defined standard classical definition ff def ff define terms def ff ff type ff ff def ff ff fi fi type ff 
ff fi fi 
terms represent operators computing weak page existential types see example 
integer value type ff type ff fi evaluation nv 
nv derived 
nv evaluates value value thrown back context excluded middle equivalent ways defining classical logic 
example place double negation elimination classical logic defined adding law excluded middle ff ff constructive logic 
section shows law excluded middle operational interpretation computationally equivalent ff law excluded middle derived ff ff ff ff ff ff ff ff ff ff ff ff ff ff derivation corresponds term ff def fffi inj ff inj type ff ff 
easy derive rules evaluation rule 
inj inj 
previous section notational clutter avoided 
evaluation rules 
alternatively suppose typed constants ff added extended iswim contains injections analysis cases 
note corresponds alternative formalization classical logic double negation elimination rule derived ff ff ff sigma ff ff ff ff derivation corresponds derived version ff def case ff ff ff ff mk corresponds sigma 
suppose 
taken primitive evaluation rule evaluation contexts include contexts form case 
evaluation rule derived 
mz inj 
case mk 
note 
computationally equivalent 
rule context inj 
similar results obtained formalizations classical logic 
example suppose classical logic defined extended peirce law sigma ff fi ff ff rule put correspondence typed version see section definition follows 
term type ff fi ff ff fi type ff 
defined ff def ff 
ff ff mj corresponds derivation double negation elimination peirce law 

rule derived rules 
fi cps transform logical embedding common approach providing semantics language contains labels jumps translation language explicitly represents continuations functions 
translation called continuation passing style transformation simply cps transformation 
call value cps cps transform untyped expressions introduced fischer extended expressions containing felleisen 
slightly modified page cps transform defined kx mn mnk kz definition differs clause cps transform defined untyped expressions defines transformation typed expressions 
assume distinguished type define transformation ff types ff fi ff 
fi theorem cps typed transform expression type ff type ff fact simply extends result meyer wand simply typed terms typed terms containing embedding classical implicational logic constructive implicational logic defined translation formulae ff classical proof ff constructive proof ff ff classically equivalent ff interesting note take basic construct cps transform corresponds embedding 
gamma ff represent assertion exists derivation ff undischarged assumptions set formulae gamma 
gamma fff ff gammag 
theorem restated terms proofs 
theorem cps proof transform sigma proof gamma ff corresponding exists proof sigma gamma ff corresponds easy check ff ff ff translation corresponds embedding author able find embedding mentioned literature proof theory 
call name cps call name version cps defined plotkin 
extended idealized scheme 
mn mnk fk translation corresponds translation typed terms equivalently embedding classical logic minimal logic 
define translation ff types formulae follows 
ff fi ff fi theorems corresponding theorem 
stated call name cps transform 
theorem cbn cps typed transform expression type ff type ff theorem cbn cps proof transform sigma proof gamma ff corresponding exists proof sigma gamma ff corresponds evaluations finite section shown computations typed terms finite 
theorem finite evaluation evaluation typed term ff finite 
method proof involves translation terms simply typed terms infinite evaluation sequence starting induces infinite fi reduction sequence starting infinite fi reductions simply typed calculus see example infinite evaluations terms 
obvious candidate translation cps transform previous section 
mentioned plotkin cps transform introduces bookkeeping redexes 
bookkeeping redexes prevent direct cps transform desired translation 
overcome problem modified cps transform defined contracts page bookkeeping redexes fi modified cps transform serve translation described 
purposes proof operator taken primitive evaluation rules include rule 
ta 
ta clearly loss generality assumption 
abbreviations section 
def def free ffi def define psi ff ff psi ff ff define def free term type ff value type ff define term type induction assumed types chosen appropriately new variables chosen avoid capture 
psi 
psi psi 
psi nv 
mv psi 
mn 

mj 

special symbol mark toplevel term 
definition plotkin definition 
defined reduces redexes extended language relation fi denotes usual notion fi reduction fi fi denote transitive transitive reflexive closures respectively fi lemma fi type ff type ff lemma states 
evaluation step term induces zero fi steps term lemma 

tfi fi 

tc fi 

ta proof lemma require lemmas 
lemma values psi psi proof 
induction corollary values psi proof 
psi psi psi lemma 
lemma evaluation contexts values defined induction 


psi 
psi nv proof 
induction term inserted hole context context switch may occur 

note 
ways happen 
downward context switch occurs value 
case cases arise value 
page upward context switch 
called rightward context switch 
case upward rightward context shift reduces lemma non empty context value psi proof induction case 
trivial 
case requires subcases 
case 
requires subcases 
case value 
case induction psi psi psi case value 
case induction psi psi psi psi psi case 
requires subcases 
case value 
case induction lemma psi psi psi psi nv psi nv case value 
case psi psi psi psi psi psi case requires subcases 
case 
case psi psi psi nv psi psi psi case 
case induction psi psi psi nv psi psi nv corollary fi psi proof 
suppose 
fi hand psi proof lemma 
part lemma suppose page cases consider 
case value value 
looking left hand side ffi ffi psi ffi fi psi ffi ffi ffi fi ffi turning right hand side ffi ffi equal left hand side 
case value 
suppose 
fi ffi psi ffi fi ffi second part lemma suppose nz looking left hand side ffi ffi mj ffi fi psi ffi turning right hand side cases consider 
suppose value nz ffi psi ffi left right hand sides equal 
suppose hand value 
looking left hand side fi psi psi ffi right nz ffi psi psi ffi equal left hand side 
third part lemma suppose left ffi ffi ffi equal lemma sequences 
steps finite 
proof 
sequence 
steps form 

delta delta delta delta delta delta delta delta delta delta delta delta gamma 
delta delta delta delta delta delta delta delta delta delta delta delta 
sequence finite proper subterm terms finite depth 
essentially argument prove lemma 
lemma evaluation sequences composed applications 
tc 
ta rules finite 
prove main result section 
proof theorem 
typed term type ff 
suppose infinite evaluation sequence ck ff 
ck ff 
delta delta delta km ck lemma fi fi delta delta delta delta delta delta possible evaluation subsequence composed 
tc 
ta steps 
subsequence finite lemma possible find infinite subsequence fi fi fi delta delta delta typed type ff contradicts known fact simply typed terms strongly normalizing 
exist infinite evaluation sequence starting page shown formulae typed correspondence defined classical propositional logic typed idealized scheme containing control operator similar scheme call cc 
noted merely presents formal correspondence classical logic idealized scheme 
point remains question correspondence 
deeper reason underlying correspondence unclear time 
note shortly publication deadline conference andrzej filinski brought attention 
may provide deeper reason correspondence described 
due lack time unable investigate thoroughly 
defines symmetric lambda calculus slc gives symmetric treatment values continuations 
develops categorical model language values continuations dual notions 
classical types control operators arise naturally setting 
acknowledgments indebted matthias felleisen introducing call cc spending hours patiently explaining area comments drafts 
bob harper comments drafts bringing andrzej filinski attention 
felleisen 
calculi cs conversion syntactic theory control state imperative higher order programming languages 
phd thesis indiana university 
technical report 
felleisen friedman 
control operators secd machine calculus 
formal description programming concepts iii pages 
north holland 
felleisen friedman kohlbecker duba 
reasoning continuations 
proceedings symposium logic computer science pages 
ieee 
felleisen friedman kohlbecker duba 
syntactic theory sequential control 
theoretical computer science 
filinski 
declarative continuations investigation duality programming language semantics 
summer conference category theory computer science manchester uk 
springer verlag 
appear lncs series 
filinski 
declarative continuations categorical duality 
master thesis university copenhagen copenhagen denmark august 
diku report computer science department 
fischer 
lambda calculus schemata 
proc 
acm conference proving assertions programs pages 
sigplan notices 

girard taylor lafont 
proofs types volume cambridge tracts computer science 
cambridge university press 
hindley seldin 
combinators calculus 
london mathematical society student texts 
cambridge university press 
howard 
formulae types notion construction 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages 
academic press ny 
landin 
mechanical evaluation expressions 
computer journal 
landin 
programming languages 
commun 
acm 
meyer wand 
continuation semantics typed lambda calculi summary 
parikh editor logics programs pages 
springer verlag 
lecture notes computer science volume 
plotkin 
call name call value calculus 
theoretical computer science 
prawitz 
natural deduction 
almquist wiksell 
page rees clinger 
revised report algorithmic language scheme 
sigplan notices 
steele 
common lisp language 
digital press bedford ma 

combinators lambda terms proof theory 
reidel dordrecht holland 
page 
