microarchitecture driven dynamic voltage scaling proposes microarchitecture driven dynamic voltage scaling viable solution power efficient architectures little performance penalty 
run time behavior exhibited common applications active periods alternated stall periods due cache misses exploited reduce dynamic component power consumption selective voltage scaling 
shown experimental results reduction total energy consumption average power peak power achieved penalty performance 
study shows microarchitecture driven dynamic voltage scaling effective tool energy reduction high performance processors 
driven increased levels complexity emergence mobile applications power dissipation critical design concern years 
addition power consumption especially important designers high performance microprocessors multimedia digital signal processors high speed networking battery powered wireless electronics 
generally agreed tools power estimation optimization exist hardware specifications different levels abstraction circuit gate register transfer behavioral needed area power analysis optimization microarchitecture architecture system level 
having tools able quantify effect different performance power optimization schemes piece code running processor extreme importance computer architects compiler engineers characterize different architecture styles terms performance terms corresponding energy efficiency 
enable fine tuning existing energy performance trade offs 
relevant previous comes different areas software power modeling general purpose embedded digital signal processing dsp applications compilation techniques power optimized software pipeline scheduling low power energy efficient memory systems 
specifically proposes instruction base power model easily find aggregate power estimate sequence instructions 
inter instruction overhead due changes circuit state taken account effect negligible 
approach targets instruction scheduling reduce circuit state overhead 
proposed cold scheduling technique reduces switching activity control path reordering instructions energy overhead 
special case real diana marculescu dept electrical computer engineering carnegie mellon university pittsburgh pa time systems approach reducing energy scheduling meeting deadlines 
case dsp applications addressed 
type models developed inter instruction effects turn prevalent making possible develop instruction scheduling techniques target power minimization 
efficient model space complexity linear instruction set size 
advanced microarchitectural power simulators 
accurate parameterized power simulator compared different high microprocessors interesting trade offs energy performance varying microarchitecture settings 
case datapath dominated architectures considered analysis impact compiler optimizations memory design power consumption values 
area energy optimization authors architectural enhancement reduce extra energy pipeline superscalar processor due mispredicted branches significant loss performance 
technique reducing average power consumption pipeline structure 
approaches target techniques energy efficient memory systems selective cache ways filter caches code compression 
address problem energy optimization superscalar processors dynamic voltage scaling 
dynamic component energy consumption quadratically dependent supply voltage cv dd moderate reductions supply voltage produce great savings power consumption 
price needs paid higher delay dd dd threshold voltage strongly dependent mobility degradation electrons transistors typical value 
idea voltage scaling selectively reduce voltage supply total energy consumption active periods processor 
performance penalty due decreasing supply voltage masked idle periods inherent running common applications 
best results optimal level voltage supply fully utilize processor execution task 
technique studied energy optimization high level descriptions task scheduling low power best knowledge microarchitectural power optimization explored :10.1.1.53.7554
belief dynamic voltage scaling finer grain system level specifically microarchitectural level 
rationale supported key issues execution application programs stall periods processor experiences exploited run instructions left pipeline lower voltage lower energy consumption 
product duty cycle processor increases energy average peak power values may decrease significantly 
ii system knowledge control stall periods processor 
exploit slack introduced stall cycles microarchitectural support needed enable fine grain usage dynamic voltage scaling 
iii extended non blocking caches permit servicing multiple misses time amount useful energy consumption reduced voltage scaling increases making dynamic voltage scaling viable approach reducing power consumption minimal performance penalty 
validate results power simulator developed industry 
underlying tool simplescalar widely detailed performance simulator augmented information dynamic static power consumption 
experimental results show significant savings obtained energy power consumption little decrease performance 
techniques described means prolonging battery life decreasing energy consumption thermal management achieving significant average power reductions chip 
approach context power management schemes advanced configuration power interface acpi 
organized follows section rationale dynamic voltage scaling microarchitectural level 
section assumptions basic approach dynamic voltage scaling 
section shows experimental results proposed technique applied subset specint benchmarks 
conclude section final remarks 
microarchitecture level dynamic voltage scaling consider examples showing dynamic voltage scaling system microarchitecture level decrease power consumption sacrificing performance 
example 
fig possible scenario tasks run processor interleaved idle periods processor perform 
dynamic voltage scaling tasks run lower voltage 
approach takes advantage idle periods processor provides significant savings energy consumption cost performance 
example fig considers case continuous voltage voltage value available chosen performance penalty fits exactly processor idle period 
continuous voltage scaling expensive 
reasonable scenario consider availability discrete finite set voltage values chosen corresponding clock frequencies 
power mhz vdd mhz vdd mhz vdd idle idle dynamic voltage scaling power mhz vdd mhz vdd mhz vdd dynamic voltage scaling fig dynamic voltage scaling system level time time decision scale voltage task basis taken system level done finer scale exploit stall periods experienced processor due memory bottlenecks 
information available microarchitecture level exploited selectively reduce supply voltage reduce energy consumption 
example 
fig example trace extracted typical simplescalar run 
example shows case consecutive cache misses way superscalar order processor 
see moment cache detected resolved processor continues executing instructions pipeline 
instructions produce cache misses detected cycle resolved cycles 
point new instructions fetched cache resolved instructions move pipeline due data dependencies 
cycle icache resolved new instructions fetched executed new cache detected 
example see processor useful cycles 
rest cycles processor checks ready instruction queues waits dependencies resolved 
servicing cache misses useful checking queues performed lower voltage memory access completed 
general case non blocking caches moment cache detected resolved processor continues fetch new instructions execute instructions pipeline resources pipeline 
cases cache misses processor lower supply voltage resolved 
better understand voltage scaling cache detected consider example 
ml mm mn eq da ex wb ct ml mm mn cache detected mo internal ld st mp internal ld st da ex wb ct ml mm mn mo mp da ex wb ct mn ml mo mm mp cache misses detected da ex wb ct mn mo ml mp mm 
da ex wb ct mn mo ml mp mm cache resolved mq bc eq ms bc mt mov da ex wb ct mq mn mo ml mp mm ms mt cache detected da ex wb ct mn mo ml mq mp mm ms mt da ex wb ct mn mo ml mq mp mm ms mt cache misses resolved da ex wb ct mq mn ml ms mm mt mo mp 
cache address calculation useful dependency check normal operation useful branch misprediction fig example real instruction trace example 
fig possible scenario cache detected cycle resolved cycle 
dark region fig represents dynamic power component light region static power due leakage currents 
region dynamic component represents useful done processor second region corresponds busy waiting period processor dependencies checked 
voltage scaling dynamic component scaled correspondingly lower clock frequency processor 
cache detected cache resolved dynamic power static power clk scaled clk useful dependency check busy wait voltage scaling dd useful dependency check busy wait voltage scaling dd dd fig microarchitecture driven voltage scaling suppose dd initially subsequently scaled reduction energy 
processor operated roughly half available frequency seen fig cache resolved 
assumes useful period needs initial unscaled case half latency introduced cache second region dynamic power component scaled performance penalty introduced non critical performed time 
seen voltage values normal operation cache misses serviced power consumption significantly reduced performance penalties 
see true case overlapping misses appear due non blocking caches penalty small considered cases 
study dynamic voltage scaling ideal environment follows consider basic assumptions processor vary supply voltage dynamically voltage values available normal operation lower cache servicing processor equipped adaptive clocking scheme closely tracks supply voltage supply voltage varied clock cycle overhead switch high voltage high frequency mode low voltage low frequency mode negligible power consumption dc dc converter needed vary voltage negligible processor supports non blocking caches isn stalled case cache continues execute instructions pipeline case cache processor accommodate finite number outstanding cache misses applications running processor communicating processes applications need response real time 
table processor configuration parameter value ruu size instructions lsq size instructions fetch queue size instructions fetch width instructions cycle decode width instructions cycle issue width instructions cycle commit width instructions cycle functional units div div branch prediction bimodal table btb sets way return address stack entry mispredict penalty cycles cache sets blocks way lru cycle latency cache sets blocks lru cycle latency sets blocks way lru cycles latency memory cycles latency dtlb sets blocks way lru cycles latency itlb sets blocks way lru cycles latency purpose study consider configuration specified table typical superscalar microprocessor 
microarchitecture settings default values simplescalar simulation environment table 
seen example cache detected lower voltage purpose reducing power consumption 
non blocking caches enables possibility having cache servicing 
case penalties performance possible 
example 
consider scenario depicted fig 
suppose cache detected processor switched low power low frequency mode 
cache misses detected period resolved initially 
seen fig overhead unscaled clock cycles introduced 
cache cycles cache cache misses voltage scaling cache misses penalty scaled cycles voltage scaling fig performance penalty back back cache misses similar way additional penalty introduced case branch misprediction 
difference penalty may manifest resolved faster cache misses usually bottleneck 
note penalty described example worst case penalty sense manifest exists instruction waiting result load immediately resolved 
see experimental part worst case penalty vary application sufficiently small cases 
experimental results report experimental results simplescalar microarchitecture simulator augmented information power consumption 
simplescalar performs fast flexible accurate simulation modern processors implement derivative mips iv architecture 
purpose reporting results simulator run high performance mode uses fairly accurate branch prediction mechanism 
power model activity characterizes module core architecture terms dynamic static power consumption 
power contribution module cycle expressed ac summation done logic circuit types design static dynamic memory pla clock 
area pda active power density pdi inactive power density considered logic style 
cycle module useful 
assumes clock gating available reduce dynamic power consumption hardware unit 
pointed charging discharging load capacitances important component dynamic power consumption cv dd 
component scalable part quadratically dependent supply voltage 
component dynamic power consumption short circuit power 
consider effect short circuit power roughly proportional rise fall time dd sufficiently large load capacitances small rise fall times short circuit component negligible 
purpose experimental study twofold identify amount energy spent core processor cache misses 
ii quantify maximum energy savings worst case performance penalty achieved dual supply voltage scheme described previous section 
energy breakdown results specint benchmark suite 
fig breakdown energy consumption cache misses cache misses 
energy values extracted chip including accessing caches cache processor memory bus 
seen significant variation energy spent cache misses resolved 
factors responsible effect including cache ratio overlapping multiple misses due non blocking caches 
compress go ksim gcc li ijpeg perl fig energy breakdown chip energy cache servicing cache servicing cache servicing case cache energy consumption servicing misses varies ijpeg go 
average specint benchmarks processor spends total energy consumption servicing cache misses 
case cache power contribution considered fig 
smaller variation case ijpeg go 
average total energy consumption spent cache servicing 
show contribution cache misses total energy consumption 
seen power breakdowns cache additive cache misses detected cache servicing vice versa 
energy consumption spent servicing cache misses ranges ijpeg go 
pointed subject reduction voltage scaling 
dynamic component due charging discharging load capacitances scalable subject reduction dynamic voltage scaling 
energy reduction dynamic voltage scaling consider effect voltage scaling assuming supply voltages corresponding clock frequencies available 
values specified example dd dd provides reduction dynamic power expense increase latency voltage scaling 
fig results savings obtained total energy consumption dynamic voltage scaling possible cache servicing 
assumed soon cache detected voltage scaled simultaneously clock frequency 
chip energy dvs cache dvs cache dvs cache misses compress go ksim gcc li ijpeg perl fig total energy dynamic voltage scaling dvs case cache servicing savings average chip energy consumption achieved 
case cache misses savings average obtained considering caches reduction energy reach average 
show fig effect dynamic voltage scaling total energy consumption average power peak power performance dcache misses 
seen average power decreased average peak power reduced average 
results far show microarchitecture driven dynamic voltage scaling viable solution increasing battery lifetime reducing peak power total energy consumption thermal management decreasing average power values 
fig energy savings performance penalty show fig penalty performance introduced back back misses explained section 
seen penalty cases average specint benchmarks 
discussion study dynamic voltage scaling microarchitecture driven environment 
experimental results show lot promise approach savings total energy average power peak power achieved penalty performance 
advanced techniques exploit better available slack cache servicing reducing voltage cache detected 
plan employ cache prediction techniques purpose consider cases microarchitecture driven dynamic voltage scaling effective 
acknowledgments author prof john shen cmu dr george cai intel stimulating interesting discussions 
total energy savings average power savings peak power savings performance penalty compress go ksim gcc li ijpeg perl nebel low power design deep electronics kluwer academic norwell ma 
tiwari singh mehta patel baez reducing power high performance microprocessors proc 
acm ieee design automation conference pp june 
tiwari malik wolfe power analysis embedded software step software power minimization ieee trans 
vlsi systems vol pp april 
su 
tsui despain saving power control path embedded processors ieee design test computers vol dec 
cheng chen huang low power design real time systems real time systems vol pp sept 

lee tiwari malik fujita power analysis minimization techniques embedded dsp software ieee trans 
vlsi systems vol pp jan 
thomas schmit nagle modeling inter instruction energy effects digital signal processor power driven microarchitecture workshop conjunction intl 
symposium computer architecture barcelona spain june 
brooks tiwari martonosi wattch framework architectural level power analysis optimizations appear proc 
intl 
symposium computer architecture vancouver bc canada june 
vijaykrishnan kandemir irwin kim ye energy driven integrated hardware software optimizations simplepower appear proc 
intl 
symposium computer architecture vancouver bc canada june 
manne grunwald pipeline gating speculation control energy reduction proc 
intl 
symposium computer architecture barcelona spain june 
conte menezes system level power consumption modeling trade analysis techniques superscalar processor design appear ieee transactions vlsi systems 
selective cache ways demand cache resource allocation proc 
intl 
symposium microarchitecture micro haifa israel pp nov 
kin gupta mangione smith filter cache energy efficient memory structure ieee micro dec 
henkel wolf code compression low power embedded system design appear proc 
acm ieee design automation conference los angeles ca june 
voltage scheduling problem dynamically variable voltage processors proc 
acm intl 
symposium low power electronics design pp monterey ca aug 

chang pedram energy minimization multiple supply voltages ieee trans 
vlsi systems vol pp dec 
variable voltage scheduling proc 
acm intl 
symposium low power design pp dana point ca april 
pering brodersen dynamic voltage scaling design low power microprocessor system power driven microarchitecture workshop conjunction intl 
symposium computer architecture barcelona spain june 
cai lim architectural level power performance optimization dynamic power estimation proc 
intl 
symposium microarchitecture micro cool chips tutorial haifa israel nov 
burger austin simplescalar tool set version csd technical report university wisconsin madison june 
advanced configuration power interface specification intel microsoft toshiba revision feb www teleport com acpi downloads pdf 
price mips iv instruction set revision mips technologies mountain view ca jan 
gary low power microprocessor design low power design methodologies eds 
rabaey pedram pp kluwer academic norwell ma 
liu low power circuit techniques low power design methodologies eds 
rabaey pedram pp kluwer academic norwell ma 
