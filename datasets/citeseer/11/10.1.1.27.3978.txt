keith decker computer information sciences university delaware decker cis udel edu middle men physical commerce support flow information electronic commerce assisting locating connecting ultimate information provider ultimate information requester 
different types useful realistic large distributed open multi agent problem solving systems 
include yellow page agents process advertisements blackboard agents collect requests brokers process 
behaviors type middle agent certain performance characteristics privacy robustness adaptiveness qualities related characteristics external environment agents 
example brokered systems vulnerable certain failures able cope quickly rapidly fluctuating agent workforce meet certain privacy considerations 
identifies spectrum middle agents characterizes behavior different types reports initial experiments focus evaluating performance tradeoffs matchmaking brokering middle agents criteria load balancing robustness dynamic preferences capabilities privacy 
basic problems facing designers open multi agent systems internet connection problem davis smith finding agents information capabilities need 
special types information process preferences capabilities 
multi agent information systems preference meta knowledge types information utility requester form john follows price characteristics john wants free information john wants stock quotes minutes 
supported onr 
middle agents internet katia sycara mike williamson robotics institute carnegie mellon university sycara cs cmu edu capability meta knowledge types requests serviced provider mary provide current price nasdaq stock minute delayed free rate quotes minute 
focus information providing agents providers accomplish types tasks 
privacy standpoint preference information flow requester provider capability information flow way 
agents deal preference capability information requesters providers standpoint transaction consideration call middle agents 
different organizational solutions connection problem flow information different points 
discuss full scope design possibilities model full experimental implementation possible designs 
known variously matchmaker yellow pages agent systems genesereth ketchpel finin kuokka harada capabilities come known including requesters preferences kept initially private 
call general brokered systems broker comes know preferences capabilities class requesters providers 
market programming systems wellman popular subclass brokered system 
privacy concern choosing solution connection problem 
designer needs consider characteristics efficiency requests handled resources vulnerability system failure component ability quickly adapt open system changing preferences capabilities 
ongoing research aims develop models relationships various performance characteristics system parameters 
privacy model connection problem briefly lay space organizational solutions characteristics 
briefly describe matchmaking brokering behaviors defined terms understood communicative acts 
defining behaviors interact able better understand space solutions connection preferences initially known capabilities initially known provider provider middle agent provider middle requester requester broadcaster front agent matchmaker yellow pages requester middle agent anonymizer broker recommender requester middle provider blackboard arbitrator table middle agent roles solution space connection problem categorized explicit initial privacy concerns 
problem constrain agent architecture behavior design 
examine empirical results comparative performance brokered systems 
questions examining include quantitative response time advantages disadvantages matchmaking brokering behavior 
second examine characteristics behaviors respect robust adaptive open systems agents enter exit system time 
experimental results achieved implementation warren multi agent financial portfolio management system sycara decker 
definitions model examine connection problem standpoint privacy considerations 
particular examine knowledge requester agent preferences provider agent capabilities 
specific request instance agent preferences specific reply action service request instance agent capabilities 
furthermore agent mental state respect particular specification preference capability 
advertisement capability specification agent creating advertisement committed servicing request satisfies advertisement constraints 
symmetrically want ad preference specification requester committed accepting reply meets constraints preference spec 
preference information initially kept private requester revealed middle agent requester ultimate provider known provider 
possibilities exist capability info see table 
leads general middle agent roles information gathering organizations room examine 
blackboard middle agent keeps track requests 
requesters post problems providers query blackboard agent events capable handling 
class includes newsgroups bulletin boards 
broker middle agent protects privacy requester provider 
broker understands preferences capabilities routes requests replies appropriately 
requester provider knows directly transaction 
matchmaker yellow pages middle agent stores capability advertisements queried requesters 
requesters choose contact provider wish directly 
clearly requester provider come direct contact multiple times possible learn preferences capabilities 
example describe agents attempt learn preferences people maes kozierok 
reports agents learn capabilities kautz 
hybrid organizations protect requesters providers learning agents requesters anonymizer middle agent nominal organization 
middle agent knows preferences requester posting requester behalf systems really internet 
hybrids add communication costs potential failures 
discuss hybrid combination brokered organizations avoids problems brings robustness efficiency characteristics 
focus attention diagonal boxes representing minimal information travel blackboard organization preference commitments individual requests posted see true capabilities remain hidden matchmaker organization providers freely advertise capabilities requesters remain private brokered organizations preferences requests joined capabilities market allocation mechanisms os load balancing algorithms managerial task assignment schemes 
interest open systems agents may come go preferences capabilities may change dynamically limiting discussion middle agent systems capabilities agents known hard coded compile time 
organizational role behaviors organizational model relies basic roles requester middle agent provider 
agent domain system take multiple roles example agent requests basic info providers complex integration serves integrated info requesters 
model communicative acts limited requests replies commitments 
benefits semantics requests commitments understood finin cohen levesque second model allows build simpler agents open environment hybrid behaviors matchmaking brokering 
organization providers advertise capabilities matchmaker capabilities change agent exits open system provider 
matchmaker stores advertisements local database 
requester wishing ask query formulates meta query asking advertisements agents respond query 
meta query asked matchmaker responds set matching advertisements 
requester full preferences choose provider request directly 
furthermore type query asked requester subscribe updated advertisements matchmaker keep local cache current advertisements see section 
blackboard organizations extremely similar requester provider behavior reversed requesters send want ads blackboard 
brokered organizations requester behaviors remain 
pure brokered organization brokers generally known agents just matchmaker practicality open system hybrid brokered organizations matchmaker providers requesters find appropriate broker see section 
providers query matchmaker find appropriate broker advertise broker 
brokers advertise summary capabilities built providers advertised capabilities advertised turn matchmaker 
request comes broker matches provider sends reply sent back original requester 
methods broker assigns requests providers drawn areas research including os load balancing managerial task assignment market economics 
methods choose depend environmental factors providers self interested cooperative agents subject 
efficiency main performance attribute measured section total elapsed time taken requester satisfy service objective 
includes time spent planning scheduling requester middle agent provider time spent communicating agents middle agent compiling fixed agent name feature agents denoted includes communication actions time spent provider providing service time spent waiting provider busy fulfilling prior requests denoted generation period number providers 
system roughly described queuing network model lazowska 
queuing network theory total elapsed time fulfill request total computational demand request communications done appropriate kqml performatives finin 
fixed location handled internet dns 
case 
note function request generation period number providers 
requests generated rate greater maximum system throughput system saturated grow bound 
fundamental result queuing theory expected elapsed time request pn result depends service request load equally distributed providers elapsed time request greater 
brokered system precisely balance load providers matchmaker blackboard organizations stochastically expect broker provide better elapsed times 
course decentralized load balancing done organization expense extra communication 
robustness decentralized organizations blackboard orgs caching significantly robust centralized organizations brokered orgs 
malone malone examines basic vulnerability decentralized centralized markets defined sum expected costs possible failure times probability failure 
pr pm pp probability failure requester middle agent provider respectively cp cost reassigning task provider failure cr cost losing requests single requester function cm cost losing access single class capabilities 
assuming providers requesters brokers brokering single class capabilities vulnerability brokered organization interestingly system requester check matchmaker yellow pages time better 
easy requester cache matchmaker results matchmaker fails cached information temporarily 
behavior changes vulnerability system agrees malone predictions decentralized markets 
blackboard systems similar systems cached requests useful opposed cached capabilities 
adaptivity final characteristic discuss effect dynamically changing preferences capabilities 
example preference change warren domain need track new stock old stock new frequency 
example capability change entry exit new provider 
ability organization quickly adapt new preferences capabilities function distance information travel costs keeping information date 
example organization capability information available locally requesters change preferences acted instantaneously 
reverse holds blackboard organizations changing capabilities 
case primary costs keeping local cache public information capability info case 
brokered organizations represent useful design alternative requiring broker notified changes requiring messages capability preference changes 
interested open system look happens maximum service time providers come go 
obviously change number providers changes eqn holds system saturated 
system saturated queues remaining agents grow providers restored 
define excess capacity system time ex maximal queue length mql time mql max mql ex predict maximal response time max steady state response time response time implied maximal fifo queue length 
usual holds brokered system load perfectly balanced providers come back line 
system agents attempt load balancing mql may continue grow providers come back line falls slowly brokered system section 
hybrid organizations real solutions real world problems require hybrid approaches 
capabilities matching preferences clearly partitioned creating different connection problem classes class different organization simultaneously 
example agents find appropriate broker 
ignore precompiled solutions way matchmaker 
providers advertise capabilities privately broker broker turn advertises usually capability ies matchmaker 
way hybrid mm broker organizations take advantage best characteristics organization cost reduced privacy emergency situations 
brokered organizations higher efficiency centralized load balancing critically non robust broker failure 
switching automatically organization losing provider privacy system robust broker failure 
due careful definitions roles earlier hybrid system requires small change behavior provider broker agents brokers advertise brokering capability matchmaker providers initialization register matchmaker broker capability updates 
broker available provider uses provider advertises matchmaker available 
broker failure detected kqml sorry timeout transform organization 
performance tradeoffs decision matchmaking brokering solve connection problem offers performance tradeoffs 
remaining space short representative experiments 
system performance dependent large number parameters including rate service requests generated number providers system time needed provider fulfill request agent failure rates 
consider alternative systems 
consists number homogeneous providers requesters 
agents run serial processors basic service action non interruptible 
system provider advertises matchmaker agent 
requesters query matchmaker obtain current list providers choose randomly send service request 
brokered system providers advertise distinguished broker agent 
requesters send service requests directly broker farms providers seeking equalize load 
implementation systems consists real implemented agents experience real communication processor latencies agents part warren multiagent financial portfolio management system 
sycara decker broker matchmaker agents actual portfolio management system 
providers requesters instances warren providers requesters standardized single service provided modeled stock ticker services 
actual service time request period requests generated randomly service time distributed normally mean request generation period distributed exponentially mean real simulated agents parameters control inter agent communication latency computational needs broker matchmaker amount time spent providers requesters planning scheduling internal operations 
assumptions ranges values system parameters take 
assume service time relatively long compared computational overhead matchmaker broker providers 
consistent actual warren agents typically require seconds access internet elapsed time sec system brokered system theoretical request generation period sec mean time service requests function request generation period resources 
second assume number providers relatively small experimented systems providers consistent operational war ren system 
experiment response time experiment validate theoretical model eq 
empirically compare brokered systems 
fixed service time number providers vary request generation period period generate requests measure mean standard deviation elapsed times 
shows results request generation period varies seconds systems providers service time seconds 
note despite eq 
gives indication expected response time especially larger request generation periods clear load balancing brokered system confers response time advantage system 
experiment provider failure recovery second experiment investigate effect provider failure recovery systems 
providers fix service time request generation period seconds respectively 
minutes kill providers minutes kill second 
minutes bring servers back line minutes third returns 
provider dies sends sorry message outstanding request 
requests reallocated broker original requester provider 
shorter periods system highly loaded saturated measured values fall predictions performing queries 
earlier requests experience queuing time skew results downwards 
shows results experiment 
point represents completion service request 
superiority brokered system stems difference behavior systems failed providers come back online 
provider left operating system saturated provider begins build large backlog requests 
second third providers available requesters system continue allocate half third requests overloaded provider backlog persists long time 
brokered system hand new requests allocated new provider allowing backlog congested provider quickly dissipate 
elapsed time sec elapsed time sec request fulfillment number servers predicted time sec system time sec brokered system request fulfillment number servers predicted predicted actual effect provider failure recovery shows predicted response time maximally loaded provider brokered organization derived eqs 
section 
regression analysis shows predicted response matches actual response maximally loaded provider variance explained 
course prediction hold effect reduced requesters effort active load balancing 
number servers number servers system 
rewriting eq 
organizations recurrence equation adding new agents saturated case maximal queue length reduced amount proportional optimum experienced brokered system 
excess capacity equation results regression value respect measured experimental data 
examined solutions agent connection problem third party middle agents privacy organizing paradigm outlined alternative types result corresponding organizational classes 
examined analytically efficiency robustness adaptiveness characteristics common alternatives 
validated models experimental implementations brokered organizations real multiagent system concentrating speed alternatives adapt provider failures 
space discuss alternatives hope stimulate discussion alternate approaches applicable different situations 
concepts matchmaking recommending brokering described general kuokka provided detailed experiences matchmaking 
outlines larger playing field middle agents includes implementation experiences brokered systems 
analyze detailed characteristics organizations drawing queuing theory malone modeling human organizations 
matchmaker organizations elegant decentralized markets proper caching mechanisms 
offer preference privacy requesters requester keeps total control control decisions adapting changing preferences immediate 
agent needs smart construct meta query evaluate resulting alternative provider choices 
local caching organizations highly resistant total failure degrade gracefully 
simple optimal load balancing possible described analytical model predicts system response times load balancing 
matchmaker slightly higher overhead due extra queries 
brokered organizations include centralized economic markets traditional bureaucratic managerial units 
handle dynamic entry exit agents provide easy way load balancing 
protect privacy requester preferences provider capabilities 
suffer need agents static knowledge brokers pure non hybrid system 
addition broker communication bottleneck requests replies need go brokers 
worst form single point failure mitigated local caching 
solution currently working hybrid system brokers 
design specified agent behaviors interchangeably organizational roles 
hybrid system allows capitalize lower overhead efficient load balancing brokered system retaining dynamic naming capabilities greater robustness matchmaker system 
trading privacy emergency hybrid system continue function face broker failure 
cohen levesque cohen levesque 
communicative actions artificial agents 
proc 
icmas pages 
aaai press june 
davis smith davis smith 
negotiation metaphor distributed problem solving 
artificial intelligence january 
decker decker sycara williamson 
designing behaviors information agents 
proc 
autonomous agents pages 
acm press february 
finin finin fritzson mckay 
kqml agent communication language 
proc 
cikm 
acm press november 
genesereth ketchpel genesereth ketchpel 
software agents 
cacm 
kautz henry kautz bart selman 
agent amplified communication 
proc 
aaai pages august 
kuokka harada kuokka harada 
kqml matchmaking 
proc 
icmas pages 
aaai press june 
lazowska lazowska zahorjan graham sevcik 
quantitative system performance 
prentice hall 
maes kozierok maes kozierok 
learning interface agents 
proc 
aaai pages july 
malone thomas malone 
modeling coordination organizations markets 
management science 
sycara sycara decker williamson zeng 
distributed intelligent agents 
ieee expert december 
wellman michael wellman 
market oriented programming environment application distributed multicommodity flow problems 
jair 
