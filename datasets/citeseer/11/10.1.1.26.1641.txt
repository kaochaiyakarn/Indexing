foundations multi agent systems techniques tools theory luck inverno fisher contributors contributors castelfranchi parsons sierra jennings ndumu nwana lee binmore van eijk de boer van der hoek ch 
meyer bradford preist pearson 
department computer science university warwick uk 
school computer science university uk 
department computing manchester metropolitan university uk interest agent oriented technology continues grow theoretical level practical level uk maintaining strong representation area academic institutions commercial organisations 
december second uk workshop foundations multi agent systems held university warwick built success year earlier luck doran inverno fisher seeking provide forum academics uk discuss current directions research applications development 
supported epsrc hp labs expanded days invited presentations professor ken binmore ucl professor cristiano castelfranchi italian national research council institute psychology addition presentations panel discussions 
aim provide opportunity promoting supporting activity research development multi agent systems 
panels concerned agent systems applications agent rationality comprising leading academics generated stimulating heated debates 
reports panel discussions follow separately 
report summarise contributions workshop presentations invited talks cover wide range relevant topics 
structure report reflects organisation workshop 
workshop began invited talk castelfranchi focussed foundations multi agent systems social psychological perspective 
starting point new ai important stream artificial social intelligence 
main claims talk summarised follows 
real foundation sociality cooperation competition groups organisation individual social action mind 
reduce connect action collective level action individual level passes social character individual action 
second important levels coordination cooperation necessarily require minds cognitive agents beliefs desires intentions 
cognition communication agreement modelling implementing cooperation emergent pre cognitive structures constraints formalised emergent forms cooperation needed planning deliberative agents 
final claim going synthetic paradigm ai cognitive science reconciling situatedness plans reactivity mental representations cognition emergence self organisation 
report summarises presentations second uk workshop foundations multi agent systems 
contributions presenters edited workshop session chairs 
relation dialectic view relation micro macro levels conte castelfranchi synthetic paradigm importance ai multi agent systems social simulation social theory illustrated devoting attention challenging theoretical problem social sciences problem unplanned non contractual social organisation cooperation von hayek problem spontaneous order adam smith problem invisible hand 
claimed theory social functions anthropology sociology functions install maintain agents mental representations mental representations known intended 
possible cognitive intentional agents 
intentions social functions superfluous explaining behaviour 
need fact strange kind behavior intentional agents behavior goal oriented goal directed non intentional 
possible solution problem theory cognitive reinforcement functions just effects behavior agents go intended effects succeed reproducing reinforce beliefs goals agents caused behavior 
follows behavior goal directed reason intentional action 
agent bases goal adoption preferences decisions actions beliefs cognitive agent effect unknown unintended agent 
circular causality feedback loop unintended effects reinforces beliefs goals generated actions 
reinforcement increases probability similar circumstances activating beliefs goals agent produce behavior reproducing effects 
point effects longer accidental unimportant remaining unintended produced behavior exists unintended effects selected effects functional 
effects negative goals interests involved agents behavior goal oriented effects 
cognitive reinforcement principles belief reinforcement goal reinforcement 
reinforced ways respect accessibility activation reliability confirmation 
reinforcement belief goal plan determine reinforcement behavior agent 
summary relationship emergence intentionality claimed challenging issue cognitive agent architectures theory social agents social behaviour 
presentation session parsons described carried collaboration sierra jennings queen mary westfield college london 
ways designing building agent systems 
common means probably agent architecture 
role architectures define separation concerns identify main functions ultimately give rise agent behaviour define interdependencies 
approach system design affords traditional advantages modularisation software engineering sommerville enables complex artifacts designed simpler components 
problem agent architectures somewhat ad hoc nature 
little connection specification architecture implementation 
aims rectify undesirable situation 
crux see giunchiglia multi context systems giunchiglia serafini means linking architecture directly implementation 
advocated multi context systems considered elements 
element set contexts corresponds architectural unit example separate contexts agent beliefs desires intentions fourth context handle communication 
second element set logics employed contexts typically different contexts different logics 
third element set sets sentences written relevant logics placed contexts knowledge base agent 
final element set bridge rules state information may transfered context context broadly speaking rules inference antecedents consequents different contexts state may inferred context provable 
big advantage specifying agents way possible write theorem provers multi context systems systems exist agent specification may directly executed bridging gap architecture implementation 
ndumu described bt laboratories collaboration nwana lee zeus toolkit developed provide rapid engineering environment developers distributed collaborative agent systems 
toolkit comprises suite java classes help users develop agent applications integrating extending predefined classes 
design philosophy toolkit delineate domain level problem solving abilities agent level functionality 
toolkit provides classes implement generic agent functionality communication coordination planning scheduling task execution monitoring exception handling ontology management 
developers expected provide code implements agents domain level problem solving abilities 
main components toolkit include agent component library set visualisation tools agent building software 
toolkit provides utility agents nameservers 
agent building software implements suite editors enables users interactively create agents specifying required attributes visual programming 
main editors include ontology editor defining ontology domain task editor describing planning operators reaction scripts agents definition editor defining attributes agent tasks perform set initial resources organisation editor specifying known relationships agents coordination editor selecting required coordination strategies agents defining custom negotiation protocols 
code generation editor inherits code agent component library integrates data various editors output java code implementing specified agents 
visualisation tools facilities dedicated agent enables users observe control debug agents behaviour 
current set tools includes society tool shows message interchange agents society report tool graphs society wide decomposition tasks execution states various subtasks micro tool monitoring internal states agents control tool remotely modifying internal states individual agents statistics tool collating individual agent society wide statistics 
nwana 
provide elaborate descriptions zeus collaborative agent building toolkit 
second day began invited talk binmore described game theoretic analyses multi agent systems undertaken collaboration centre economic learning social evolution ucl 
interacting agents try satisfy users goals longer notion global utility 
agents find situations incentive lie act tough exploit strategic avenues usually associated machines 
issues described relatively new ai community closely resemble models studied economists game theorists 
sub field microeconomics known game theory widely acknowledged provide best available set tools design multi agent architectures rosenschein zlotkin 
existing theory misunderstood needs development computer applications researchers reluctant game theory tend advances prove useful settings listed 
economic theory distinction models analyse optimal behaviour individuals firms underlying mechanism rules game models study optimal mechanism design agents behave optimally 
current early stages multi agent design approaches developed simultaneously 
compare different protocols mechanisms specifying behaviour interacting agents 
similarly design optimising agents information protocols governing interaction 
second revelation principle mechanism design applies agent design designer properly engineered agent tell client programming takes care strategic problems involved bargaining optimally 
third agent necessary data client need principle simulation bargaining process 
game theory provide prediction outcome follow optimal strategies employed immediately 
prediction game theorists constitute equilibrium chosen protocol new exploitative agents able invade disrupt system 
fourthly provides classification interacting situations extensive forms 
enables say seemingly different situations strategically equivalent translated game form 
economic agents criticised past computer programs real human beings interesting see just useful models design agents protocols 
initial experience shows existing models need considerably modified useful new settings 
presentations van eijk described collaboration de boer van der hoek meyer utrecht university new multi agent system programming language address concern existing languages expressiveness concurrency issues clear modular structure 
reason lack modularity cases complications caused interactions various agent features covered 
claim supported fact existing multi agent languages fully underpinned clear semantic description 
order develop multi agent programming language structured wellunderstood semantical point view authors advocate incremental approach designing language start programming paradigms communicating sequential processes csp hoare concurrent constraint programming ccp saraswat rinard 
view distributed system set synchronous value passing processing set asynchronous processes access global store information 
generalising concept value passing general mechanism information passing possible obtain programming paradigm multi agent systems agents interact passing information network communication channels 
secondly interact global source information models agents environment agents observe manipulate common environment 
language agents defined programmed behaviour consisting primitive communication actions expertise denoting section environment inspected manipulated informational attitude consisting information expertise 
operational semantics language defined terms transition system constitutes appreciated mechanism formal derivation computations 
possible option research transformation operational characterisation compositional description language trying incorporate temporal semantic descriptions necessary describe going nature multi agent systems 
csp ccp pi calculus developed understood language specifying verifying behaviour distributed systems 
talk basis new agent language author bradford university bath formalism define spanish fish market example electronic market system investigate suitability defining similar systems general 
complements earlier development prototypes fish market rodriguez 
players auctioneer buyers buyers manager sellers sellers manager scenes admission auction settlement comprising fish market modelled specification 
fish loads belt auctioneer calls details lots decreasing sequence displayed large electronic scoreboard overhead 
buyers issued electronic control boxes bearing button pressed stops descending count identifies box responsible 
control box inspired remote control process bringing numerous benefits 
particular auctioneer need accessible electronic buyers subject interference 
importantly remote control serves mechanism capable preventing manipulation auction premature bidding foot dragging spoofing 
lessons learned building specification market place 
example important start simply refine incrementally pi calculus offers modularisation mechanisms 
suggested descriptions asynchronous style channels unidirectional purpose channel naming done carefully systematically 
experience pi calculus suggests probably best applied level defining interaction architecture scenario 
leads skeletal structure higher functions negotiation argumentation introduced concern low level aspects communication offering opportunity verification foundations system 
specifying agent interactions protocols described necessary consider effective efficient protocol communication strategy selected set alternatives 
final presentation session preist pearson hp laboratories concerned performance different messaging protocols multi agent systems 
service provision considered agent task carry matched agent service provider able carry task possibly receiving payment 
simple example considered isolate form problem 
providers service giving quality service receiving payment 
provider may unavailable probability unavailable time unavailable number seconds average 
group clients average certain number requests second providers 
clients receive contact information facilitator agent acting recommend mode 
protocols examined naive broadcast client receives list providers facilitator broadcasts request 
providers currently available reply client chooses 
addition naive informed considered shown naive protocol efficient naive broadcast high values vice versa low values 
parameters may vary time possible say advance protocols efficient problem 
authors propose decision dynamically agent community 
demonstrated mathematically subsequently checked experimentally agent chooses protocol minimise total number messages sends receives community choose protocol efficient 
works suggests protocol choices effectively dynamically response changing environment built design time 
addition presentations participants took opportunity ongoing short talks contributing general atmosphere 
provided occasion constructive engaging presentations discussions focussed informal forum 
continuing success workshop bringing academics fruitful way led anticipate series annual workshops support activity field encourage closer links 
third workshop series held manchester december chaired michael fisher manchester metropolitan university new name uk special interest group multi agent systems broadening scope 
details www dcs warwick ac uk conte castelfranchi 
cognitive social action 
ucl press 
inverno fisher luck de rijke ryan wooldridge 
formalisms multi agent systems knowledge engineering review 
doran franklin jennings norman 
cooperation multi agent systems knowledge engineering review 
fisher ller schroeder staniford wagner 
methodological foundations agent systems knowledge engineering review 
giunchiglia serafini 
multilanguage hierarchical logics modal logics 
artificial intelligence 
hoare 
communicating sequential processes communications acm 
luck 
foundations multi agent systems issues directions knowledge engineering review 
nwana ndumu lee 
zeus advanced tool kit engineering distributed multi agent systems 
proc 
rd int 
conf 
practical appl 
intelligent agents multi agent technology 
nwana ndumu lee 
zeus tool kit engineering distributed agent systems 
appear international journal applied artificial intelligence 
rodr guez noriega sierra 
fm java electronic auction house 
proceedings second international conference practical application intelligent agents multi agent technology paam 
rosenschein zlotkin 
rules encounter designing conventions automated negotiation computers 
mit press 
saraswat rinard 
concurrent constraint programming 
proceedings seventeenth acm symposium principles programming languages 
sommerville 
software engineering 
addison wesley 

