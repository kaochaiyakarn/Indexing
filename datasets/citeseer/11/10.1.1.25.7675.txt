debugging process models changes impressions software modules iida ken ichi matsumoto inoue kudo nara institute science technology osaka university nara japan osaka japan nara national college technology nara japan iida inoue aist nara ac jp info nara ac jp proposes analysis models representing processes debugging unfamiliar programs focusing engineers comprehend software module locate bug 
actual debugging strategies relate engineers impressions software module module faulty faulty uncertain proposed models consider mental external activities engineers 
applied periodic interviewing method quantitatively capturing engineers mental activities 
characterizing target programs multiple viewpoints module dependences program slicing engineers debugging activities analyzed details models 
keywords program comprehension software maintenance program slicing bug localization getting important software engineers able quickly find remove bugs unfamiliar programs 
software maintenance groups need debug programs originally developed engineers move rapidly companies job assignments today 
reuse activities modern software development force engineers read find bugs reused code unfamiliar 
correctness reused code important factors reuse activities 
comparing debugging familiar program debugging unfamiliar program requires special expertise program comprehension area selection 
order start finding bugs unfamiliar program engineer read comprehend program 
order quickly detect bug scheduled time engineers usually time comprehend entire program 
engineers decide area lead bug detection 
goal research clarify strategies bad strategies debugging unfamiliar programs 
previous researches observed strategies select module area comprehended strongly relate engineers impressions module module faulty faulty uncertain 
order clarify debugging strategies need follow engineer cognitive image program represents faulty area faulty area uncertain area 
consider debugging process composed parts program reading bug localization 
bug correction scope 
propose new modeling schema module oriented debugging process model 
model represents aspects debugging process sub models product model target program module structure properties 
decision model human cognitive image possibility bug location 
behavior model externally observed human action 
models analyze debugging processes multiple viewpoints 
examining interactions relationships aspects tried find nature debugging process 
carried experiment observe debugging process video recordings periodical interviews analyzed collected data models 
module oriented debugging process model overview model shown fig 
proposed model target program considered set multiple modules 
consider modules mn target program mn discussion simple assume bug program 
assumption natural situation failure observed engineer find bug fault concerning failure 
assume location bug module 
product model expresses structure module dependence target program 
cognitive process model consists decision model behavior model 
express internal external action debugger person program respectively 
product model product model expresses characteristics target program 
hierarchical structure program employed 
structure defined set calling relationships module set module relationships forms basis product model directed graph program call fig 

product model cognitive process model module dependence program module set decision model behavior model fig 
module oriented debugging process model program call graph execution trace static slice fig 
product model introduce execution trace program slice additional features product model 
execution trace simply defined set executed modules defect detected program produced wrong output value 
execution trace naturally includes faulty module bug exists fig 

program slice set program statements possibly influencing value particular variable particular statement slicing point 
report static slicing useful software maintenance 
approach don slice actual debugging 
static slice just process analysis 
decision model decision model represents internal action debugger 
debugging process essentially expressed sequence kinds action expanding certified region narrowing suspicious region 
actions essentially influenced debugger subjective suspicion bug location 
decision model classifies modules tree regions 
region suspicious region set modules contain bug shown 
second region certified region set modules bug shown 
third region neutral region set modules uncertain containing bug shown fig 
movement modules regions express change human internal decisions 
debugging debugger understand modules initial state region follows mn bug localization process performed modules move 
final stage debugging process bug localized contents set follows mn transition process initial state final state may greatly differ debugger capability strategy 
decision model transition human decision quantitatively expressed individual differences decisional transitions observed graph 
actions performed debugger mind inside actual process behavior observed externally 
periodical simple interviews developer get information 
behavior model behavior model express external action debugger 
proposed model kind action read code module program 
human behavior expressed sequence pairs suspicious region certified region fig decision model fig behavior model neutral region module names times reading activity debugging process fig 
information captured ways video monitoring command execution history eye gaze tracking 
order frequency module readings clarify debugger read program 
behavior model see debugger way limiting referenced module set 
people usually don read modules debugging implicit explicit strategy module choice 
skilled programmer patterns movement modules significantly different novice programmer patterns 
model capable investigating skills differences 
advantage proposed model advantage modeling scheme various analyses possible combining models constitute just transparent model 
placing decision model product model analyze debugger bug localization process 
example evaluate debugger strategy better knowing characteristic module belonging region 
placing behavior model product model analyze debugger program reading process better 
example know debugger reading strategy top bottom examining order module reading program structure 
features model quite capable quantitatively evaluate human debugging process experiments 
experiment performed experiment observing bug localization process analyzed collected data model defined section 
outline experiment follows environment experiment conducted environment 
environment record debugger various activities eye gaze point computer display voice key typing screen program module set module slice se image 
manually conducted periodical interviews order trace debugger cognitive movement possible location bug 
subjects subjects participated experiment assigned debug program independently 
subjects graduate school students subject college student 
subjects programming language 
years experience programming years experience programming 
target program computer program written language prepared experiment consisting lines modules 
program designed coded take input date show calendar date 
bug contained certain module program 
modules target program classified sets static slicing shown fig 
modules contained slice indicated area 
modules contained execution trace area 
modules belong slice trace 
modules don belong area 
bug located modules slice execution area se procedure subjects documentation program 
shown program execution error symptom fully understood 
started debug program directions debugging method 
experiment performed bug located corrected 
experiment subjects answer periodical interviews answering questionnaire minutes experiment 
interview probability bug existence module scored 
subject thought bug exists module execution trace fig module classification table result experiment subject debugging time minutes interviews interviews belonged nb max 
modules belonging max avg 
modules belonging avg modules times interviews min 
modules belonging min avg 
modules belonging avg marks minus questionnaire 
subject thought bug may included module marks plus 
subject confidence bug existence marks zero 
result data collected experiment summarized table 
subjects successfully specified position bug correction completed 
comparing debugging hours table subject shortest debugging time minutes 
nb 
difference debugging time mainly difference time required localize bug existence module judging suspicious module 
see detail subject process section 
analysis bug localization process analyzed subject bug localization process proposed model 
shown analysis methods section method placing decision model product model discussed due space limitation 
analysis graph shows change module count region 
modules certified region detailed counts categorized static slice execution trace show graph 
subject value nb time count get suspicious time count bug get located equal subject means bug localized corrected immediately got suspicious 
graph see modules belong slice set trace set hardly examined intervals 
contrast min avg significantly higher subjects value 
means subject examined minimum required set modules modules interviews interviews interviews interviews interviews subject subject subject subject subject modules understanding modules program 
may able say subject efficient debugging high debugging capability 
subject lack just encounter faulty module early stage 
subject modules judged suspicious time interview subject couldn decrease number modules half debugging process 
subject significant characteristic subject values max 
larger 
number modules belonging suspicious region th interview 
means subject localized bug th interview 
wrong module indicated time 
modules exploratory examined exchanged 
subject rd interview number module belonging certified region increasing sharply 
th interview decreased greatly 
especially number module decreasing greatly 
means subject withdrawn judgments certified modules 
th interview number slice fig changes region interviews interviews interviews interviews interviews subject subject subject subject subject fig 
classified certified region execute se module favorably increased 
number suspicious region modules retained small number 
summarizing observations subject failed fix certified region half debugging 
main reason longer debugging time 
subject number modules belonging suspicious region small debugging time long 
modules number increasing gradually slice execute se module number value th interview 
subject difficulty find faulty module suspicious region changed strategy increases number certified modules 
number modules belonging certified region increasing favorably debugging process advances 
capability subject find non faulty module may high capability find faulty module may efficient 
individual analysis shown modules belonging slice execution modules 
modules belong 
common characteristic subjects 
proposed model analyzing debugging process 
proposed model consists models product model representing target program module structure decision model representing human cognitive image possibility bug location behavior model representing externally observed human action 
combination models quantitatively represent internal action debugging person 
proposed modeling scheme applied data collected experiment order analyze bug localization process 
result analysis observe important aspects debugging process 
common feature subjects modules belonging slice execution se modules 
modules belong 
hand observed significant different patterns individual subject 
final goal study clarify key factors influencing efficiency debugging 
goal sufficiently achieved important nature mentioned experiment 
believe experiments data analyses modeling scheme factors 
study financially supported proposal new industry creative type technology promotion program new energy industrial technology development organization japan 

araki furukawa cheng general framework debugging 
ieee software may 

basili identifying qualifying reusable software components 
computer feb 

eisenstadt bug war stories 
communications acm april 

fix wiedenbeck scholtz mental representations programs novices experts 
conference proceedings interchi 

gallagher lyle program slicing software maintenance 
ieee transaction software engineering aug 

arai cognitive process analysis tendency module programmers view 
technical report sig kbs sep 

koenemann robertson expert problem solving strategies program comprehension human factors computing systems mar 

von mayrhauser vans program comprehension software maintenance evolution 
ieee computer aug 

myers art software testing 
john wiley sons new york 

inoue experimental evaluation program slicing fault localization process 
ieice trans 

anderson debugging practices complex legacy software systems 
proc 
int conference software maintenance 

matsumoto environment computer aided empirical software engineering 
ieee trans 
soft 
eng july august 

kudo experiment analysis debugging process periodic interviews 
proc 
software symposium 

kudo analysis debugging process changes impressions functions 
technical report ieice 

vessey expertise debugging computer programmers process analysis 
international man machine studies 

program slicing 
proc 
th int conference software engineering 

programmers slices debugging 
communications acm 

yoon garcia cognitive activities support debugging 
proc th annual symp 
human interaction complex systems 
