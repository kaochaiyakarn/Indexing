evaluating usability aspects pjama source code measurements stein dag department informatics university oslo po box blindern oslo norway ifi uio malcolm atkinson ray computing science department university glasgow glasgow qq scotland mpa ray dcs gla ac uk pjama system provides orthogonal persistence defined reachability changes java language 
persistence java language expected give software productivity gains reduce maintenance costs 
set hypotheses investigate expectations defined tested 
contribution fold 
describes tool automatically measures persistence java source code specific technology 
second tested set hypotheses applying measurement technology 
results indicate possible persistence minimal changes source code pjama 
results indicate number lines explicitly persistence grow size application 
developing code create update read persistent data major task application building 
frequently mentioned persistent programming literature typically code conventional languages concerned transferring data secondary storage 
persistent programming languages aim simplify task 
pjama experimental persistent programming system java programming language 
common oo databases systems java 
pjama developed collaborative project glasgow university sun microsystems 
purpose project pjama cient orthogonally persistent system 
addressed evaluates usability aspects pjama 
context define usability mean easy programmers maintain understand reuse software 
indications usability pjama design goals stated pjama achieved 
syntactic changes semantic changes minimal requirements additional core classes java language include persistence simple subliminal persistence programmers satisfied default transaction model 
order evaluate usability identified relationships respective usability attributes maintainability understandability reusability directly measurable attributes regarding length clustering code 
defined set hypotheses measurable attributes 
hypotheses tested collection pjama applications 
results indicate possible introduce persistence changes source code 
results indicate number lines explicitly deal persistence grow size application 
consequence claim extra burden maintenance insignificant source code harder understand di cult reuse 
motivations 
hopefully results useful development pjama 
goal provide means compare pjama competing persistent technologies java 
viewpoints usability evaluation persistent systems performance tool support price system scope 
reminder organized follows 
section describes hypotheses 
section introduces source code measurement tool 
section presents applications investigated study 
section discusses results study 
section evaluates 
section suggests 
hypotheses people choose software technology basis subjective opinions quantifiable evidence technology better 
aim software engineering provide set measurable criteria evaluate di erent technologies 
focuses usability aspect pjama extent easy develop software higher quality lower costs pjama development environment 
divide concept usability maintainability understandability reusability software maintenance process changing system delivered 
maintenance includes fixing errors accommodation changes environment adding new functionality 
maintainability indicates ort changes require 
maintainability reusability lines code persistent explicit lines code understandability number persistence affected classes relationship external internal attributes understandability indicates easy understand source code 
understandability di cult concept subject investigation research community 
demands lower software development maintenance costs higher quality met widespread software reuse 
reusability aspects persistent technology important 
reuse limited code applies specification design documents 
course concepts interrelated 
example expect improved understandability reduce maintenance costs aid reusability 
major problem maintainability understandability reusability external attributes 
discovered software put 
subjective nature external attributes directly measurable di cult compare 
best thing assume relationship external internal attributes 
internal attributes attributes software products dependent product 
values internal attributes directly measurable 
little research actual experiments carried indications exist relationships external internal attributes shown 
assumed fewer lines code internal attribute improves external attributes application maintainability 
reports studies show faults line code increasing function lines code application 
providing functionality fewer lines code implies improvement software quality 
albrecht ort increases size application great variations di erent languages 
number lines explicitly involve persistent code relates understandability aspects technology 
reasonable assume fewer lines persistent code easier comprehend persistent aspects code 
high degree cohesion low degree coupling known design principle improve understandability reusability maintainability 
basili oo metrics described chidamber kemerer highly coupled classes fault prone weakly coupled classes 
assumptions lower values internal attributes described leads better values external attributes defined hypotheses 
pjama programmers provide persistence application overhead exceed lines code compared transient version application 

pjama programmers lines code directly pjama statements provide persistence application 

pjama programmers collect persistent code classes 
di erence hypotheses requires version persistence addition persistent version actual overhead persistent version compared transient version program measured 
hypothesis applies cases persistent version program measured available 
consequence hypotheses load persistence increase size application 
overhead small cases insignificant 
extra burden maintenance insignificant source code harder understand di cult reuse 
formulating hypotheses assumptions regarding pjama code pieces code length complexity 
default transaction model pjama 
complex transaction models imply ort management data bias measurements 
applications large number classes libraries particularly core classes 
generally require modification context pjama exceptions 
threads awt classes persistent 
experience far classes rarely persistent programmers 
assume necessary transformations rare cases ignored measurements 
actual figures hypotheses chosen basis pilot study pjama programs 
loc lines code persistence ected lines code persistence impact ratio lines code loc noc number classes number persistence ected classes persistence impact ratio classes noc average distance persistence ected lines code length interval keyword table metrics measurement technology manual data collection expensive unreliable tedious 
built measurement tool persistent code measurement tool 
metrics produced shown table 
measures proportion lines classes explicitly include persistent code java programs 
persistent keywords loaded keyword file 
easily adapted new tools versions providing persistence program characteristics generating new keyword files 
parses java source code tracks identifiers package investigation identifiers refering instances classes packages 
total size application measured lines code loc 
lines defined productions line shifts avoid impact caused personal programming styles 
comments ignored 
persistent ected lines code counted 
line counted persistent ected class interface keyword file 
example word listed keyword file line counted persistent line code ps lines variable introduced declaration ps counted persistent line code ps variable type case persistent keyword 
reports persistent impact ratio lines code calculated dividing metrics corresponding loc metrics 
statistics class level collected 
number classes noc counted 
internal classes considered belong outer class counted classes 
class considered persistence ected includes persistent affected code 
number persistence ected classes number classes noc code 
application name parsed jan author persistent technology sql class name loc woman man person total number classes number persistence affected classes persistence impact ratio classes example output persistent impact ratio classes resembles metric 
calculated dividing noc metrics metrics 
measurements distribution class collected 
captures average distance persistent ected lines code ad interval persistent ected line 
metric reported proportion total number lines 
default investigate transitive closure classes source files reachable persistent root 
example output shown 
implementation built javacc uses java grammar unchanged 
production added import statements capture legal statements 
original parser reported error empty statement imports construct accepted java compilers 
altering grammar order collect statistics added actions di erent productions 
actions include methods investigate identifier persistent identifier methods keep track scope variables methods 
strategy line counting line defined compiler directive declaration executable 
class method headers counted lines 
nested classes loc counted loc outer class individual classes 
options bt bw bf enable statements try blocks counted persistent lines lines includes persistent keyword 
help capture cases code changed due lack orthogonality 
options care guarantee block include functionality persistence transformation 
problem captures explicitly persistent code 
ideally include cases class changed due lack orthogonality 
example suppose analyse programs pse objectstore object database architecture 
vectors pse java persistent means alternative storage structure 
re writing decreases quality source code application lines code require structural changes cases new classes added 
investigated applications section describes applications tested hypotheses 
applications developed universities glasgow oslo st andrews described 
application written presentations 
information technical reports specified text file certain tags presentation built 
di erent styles fonts backgrounds chosen presentation 
application designed pjama mind 
system modeling automatically generating code distributed systems 
consists di erent components parser data model editor validator code generator gap acronym geographic application persistence 
object class browser written entirely java 
program available 
hyper program system consists object browser editor 
implemented pjama 
example code testing 
detailed presentation code 
application registering people mountains climbed 
keeps track people family trees 
register people relatives get information family relationships 
beta version application distributed project management client server architecture 
server keeps track di erent tasks associated documents 
clients request tasks documents server 
persistence applied server side program 
persistent rmi demo step implementing support distribution pjama porting rmi persistent context 
implementation persistent rmi produced 
persistent rmi demo program exploits technology 
support persistence added server client 
persistent rmi demo consists programs run independently persistent client shut persistent client persistent server shut persistent server 
applications divided groups 
java pjama experience programmers described experienced java pjama part daily working environment half year 
moderately experienced prior experience java pjama part daily working environment 
inexperienced developed application application java pjama 
gap hyper program system large applications written experienced programmers 
collection programs written experienced programmers 
assume code demonstrates smart pjama technology 
experiment teams students implemented application specification 
team consisted fourth year students 
programmers inexperienced 
implemented versions di erent persistent technologies inexperienced programmer wrote implementations 
name technology loc noc pjama transient java pjama transient java gap pjama pjama hyper program system browser pjama hyper program system editor pjama reflective pjama generic pjama non generic pjama mountains group pjama mountains group pjama mountains group pjama mountains group pjama mountains group pjama mountains group pjama java io pjama jdbc java io pjama persistent rmi demo pjama table measurements applications persistent rmi demo di er programs measured real world applications demonstration programs test distributed technology 
example user interfaces properly implemented programs 
project workflow developed moderately experienced programmer persistent rmi demo developed experienced programmer 
results section describes testing hypotheses section measurements resulting applying applications described previous section table 
hypothesis extra overhead lines code pjama programmers provide persistence application overhead exceed lines code compared transient version application 
metric relevant hypothesis loc 
hypothesis applies applications transient persistent implementation 
applications meet requirement 
transient version application file management part system requirements 
consequence persistence gained pjama jdbc added top java io version code java io version removed 
java io version viewed transient version context 
overhead loc loc loc 
results support hypothesis overhead loc needed providing persistence pjama 
results indicate absolute number overhead loc independent total application size 
hypothesis persistent explicit lines code pjama programmers lines code directly pjama statements provide persistence application 
metric test hypothesis 
hyper program system browser hyper program system editor programs 
applications expected close 
remaining significantly 
di ers greatly hypothesis 
exceed limit specified hypothesis 
code creation store included part application 
demo persistent rmi demo results expected respectively 
gap large application expected 
received gap results just deadline explanation numbers higher expected 
investigated anomalous version manually analyzing code 
persistence included places transitive closure persistent root su cient 
may result inadequate understanding technology 
totally unexpected 
similar results study applications written napier 
significant di erences novices experienced programmers way designed applications languages constructs 
common factor may explain applications conflict hypothesis quite bit test code included dumping classes reachable root screen code creation store included part application 
applications developed experienced moderately experienced programmers support hypothesis exception gap applications inexperienced programmers conflict hypothesis 
results suggest number bit higher creation persistent store included part application 
hypothesis classes including persistent code pjama programmers collect persistent code classes 
hypothesis tested metric 
class containing persistent code hyper program system object browser 
support hypothesis 
new functionality added persistent version save option 
new functionality added class needed provide persistence 
hyper program system editor classes containing persistent code gap 
programs conflict slightly hypothesis 
applications conflict hypothesis 
di erent degrees conflicts 
just exceed hypothesis remaining persistent ected code classes 
discussed hypothesis probable reason lack understanding design properly 

include code create persistent store 
demo persistent rmi demo 
discussed description applications persistent rmi demo consists programs run independently 
connect store conflict hypothesis 
hypothesis observe investigated applications support hypothesis exception applications developed inexperienced programmers gap application 
evaluation study encountered problems common aspects software engineering research 
aspects biased measurements 
individual programmer influence 
di erent programming styles ineffective technology probably ect results 

reuse code 
local libraries result code measured times 

application domain 
suitability various persistence technologies may depend application domain 

services supported application restore functions versioning advanced transaction models 
study assumed programmers default transaction model 
aware internal attributes related size clustering ect external attributes investigate 
example methods class directly influence maintainability 
size key factor models evaluating cost productivity ort 
discussed section reasonable assume clustering persistent code improve external attributes investigate 
measures attributes ended final set hypotheses 
unable find attributes concerning internal distribution persistent code class level 
classes persistence code scattered class 
measured small set applications uncertainties regarding relationship internal external attributes 
confirmed hypotheses confirm reject means usability aspects pjama 
say technology gives high scores investigated internal attributes high scores related external attributes 
provide reliable results measure application written di erent technologies people experience technologies application domain experience generally programming skills 
experiment realistic limitations regarding money time available people attempt collect measurements attributes evaluate usability aspects pjama 
order evaluate usability identified relationships respective usability attributes maintainability understandability reusability directly measurable attributes regarding length clustering code 
research showed little extra ort required programmer provide persistence applications 
total overhead lines code application introducing persistence pjama small typically loc 
typically lines explicitly persistent technology 
numbers relatively constant proportions comparably smaller larger applications 
indicates persistence pjama adversely ect usability aspects application code 
pjama code providing persistence cases kept classes typically 
lines code figures number increase size applications 
result maintainability understandability reusability aspects application deteriorate persistence introduced pjama 
provide data collection automatically developed general purpose measurement tool exploit programming constructs distribution user interfaces help identify critical issues software development 
optimizing area lead worse results areas possibly results 
investigated number di erent applications written people di erent backgrounds tried extract trends results collected 
inexperienced programmers inexperienced programmers results suggest need better introductory tutorial material extensive documentation pjama technology 
results applications implementations persistent technologies pjama suggest pjama overhead changes structure advantages comparison 
considerably measurements needed able collect su cient reliable results strong claims 
step investigate proposed oo metrics depth inheritance trees weighted methods class ected di erent persistent technologies 
metrics shown useful detecting error prone classes 
cost hardware resources fall cost software sta rises naturally prudent invest computing resources making software development maintenance labour intensive error prone 
provision orthogonal persistence long justified grounds 
valid engineering approach requires means measuring intended goal costly development maintenance met 
particularly important java mechanisms persistence developed 
valid way choose direct development relevant comparative measurements 
particularly satisfied preliminary measurement technology report 
primary merit exists cheap 
hope lead better metrics comparisons alternative technologies relevant testable basis 
consider large investments companies develop persistence technologies java larger costs projects technologies believe developed strategy comparing programming costs 
whilst performance remains important enthusiasm benchmarks dearth programmability measurements may inappropriate 
people group senior honour database students glasgow university lise john graham kirby providing measurements source code 
particularly susan spence tony cathy waite bill gates identified unification plethora stores file systems registries databases computers improved relationships databases programming languages urgent research priority 
helpful support proceeded 
supported working group ep funded european community 
sommerville software engineering 
fifth edition addison wesley 
atkinson jordan spence design issues persistent java type safe object oriented orthogonally persistent system 
seventh international workshop persistent object systems pos cape may new jersey may 
fenton software metrics 
edition chapman hall 
sun microsystems java compiler compiler 
hamilton 
jdbc java 
splash javasoft com jdbc 
albrecht aj je 
software function source lines code development ort prediction software science validation 
ieee trans software engineering se pp 

number faults line code 
ieee trans software engineering se pp 

king ibm report contents sample programs surveyed 
ibm research centre san jose california 
chidamber kemerer metric suite object oriented design 
ieee trans software engineering pp 

basili vr briand lc melo wl 
validation object oriented design metrics quality indicators 
ieee trans software engineering se pp 

dik cutts atkinson analysing persistent language applications 
sixth international workshop persistent object systems pp 
workshops computing springer verlag british computer society 
swanson eb 
dimension maintainance 
proceedings second international conference software engineering pp 

gosling joy steel java language specification addisonwesley 
von mayrhauser vans am 
comprehension processes large scale maintenance 
th international conference software engineering pp 

constantine ll yourdon structured design 
englewood cli prentice hall 
waite atkinson supporting software evolution 
technical report tr department computing science university glasgow december 
banker rd datar sm cf zweig software complexity maintenance costs 
communications acm pp 

spence persistent rmi 
information www com research forest opj tutorial html morrison brown connor dearle napier manual 
technical report universities glasgow st andrews 
atkinson mp bailey pj chisholm kj cockshott wp morrison approach persistent programming 
computer journal pp 

kirby morrison genericity reflection performance 
appear pos 
object class browser 
available download 
dcs st ac uk java pse java odi 
available download www odi com gates sigmod opening keynote 
acm sigmod pods seattle june 

