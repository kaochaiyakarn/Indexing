proceedings rd international conference software engineering may 
incorporating varying test costs fault severities test case prioritization sebastian department computer science engineering university nebraska lincoln lincoln nebraska cse unl edu computer science department oregon state university corvallis cs orst edu gregg rothermel computer science department oregon state university corvallis cs orst edu test case prioritization techniques schedule test cases regression testing order increases ability meet performance goal 
performance goal rate fault detection measures quickly faults detected testing process 
previous provided metric apfd measuring rate fault detection techniques prioritizing test cases improve apfd reported results experiments techniques 
metric techniques applied cases test costs fault severity uniform 
new metric assessing rate fault detection prioritized test cases incorporates varying test case fault costs 
results case study illustrating application metric 
study raises practical questions arise applying test case prioritization discuss practitioners go answering questions 
keywords test case prioritization regression testing test cost fault severity rate fault detection software engineers save test suites develop reuse test suites regression testing 
reusing test cases test suite expensive example industrial collaborators reports products lines code entire test suite requires weeks run 
cases testers may want order test cases highest priority criterion run earlier lower priority 
test case prioritization techniques schedule test cases order increases effectiveness meeting performance goal 
example test cases scheduled order achieves code coverage quickly possible exercises features order frequency reflects historically observed abilities detect faults 
potential goal test case prioritization increase test suite rate fault detection quickly test suite detects faults testing process 
increased rate fault detection testing provides earlier feedback system test allowing debugging earlier supporting faster strategic decisions release schedules 
improved rate fault detection increase likelihood testing period cut short test cases offer greatest fault detection ability available testing time executed 
previous provided metric apfd measures average cumulative percentage faults detected course executing test cases test suite order 
showed apfd metric quantify compare rates fault detection test suites 
techniques prioritizing test cases improve apfd regression testing empirically evaluated effectiveness 
results indicated techniques improve apfd improvement occur sophisticated expensive techniques 
successful application class problems designed apfd metric techniques relied assumption test costs fault severities uniform 
practice test costs fault severities vary widely 
occurs apfd metric assign inappropriate values test case orders techniques designed improve test case orders metric produce unsatisfactory orders 
new general metric measuring rate fault detection accounts varying test case fault costs 
investigate metric application prioritization techniques account varying costs results case study apply techniques different test case fault severity cost distributions 
study raises practical questions arise applying test case prioritization discuss practitioners go answering 
test case prioritization problem described test case prioritization problem briefly review 
test case prioritization problem test suite pt set permutations function pt real numbers 
problem find pt pt 
definition pt set possible orders objective function applied order yields award value order 
possible goals prioritization 
example testers may wish increase coverage code system test faster rate increase confidence reliability system faster rate increase rate test suites detect faults system regression testing 
definition test case prioritization problem represents quantification goal 
prioritization goal various test case prioritization techniques may meet goal 
example increase rate fault detection test suites prioritize test cases terms extent execute modules tended fail past 
alternatively prioritize test cases terms greatest coverage cost code components terms greatest coverage cost features listed requirements specification 
case intent choice prioritization technique increase likelihood prioritized test suite better meet goal ad hoc random order test cases 
measuring effectiveness measure rapidly prioritized test suite detects faults rate fault detection test suite require appropriate objective function purpose defined metric apfd represents weighted average percentage faults detected execution test suite 
apfd values range higher values imply faster better fault detection rates 
consider example program faults test suite test cases fault detecting abilities shown suppose place test cases order form prioritized test suite 
shows percentage detected faults versus fraction 
running test case faults detected faults detected 
running test case faults detected faults detected 
area curve represents weighted average percentage faults detected life test suite 
area prioritized test suite average percentage faults detected metric apfd apfd example 
reflects happens order test cases changed yielding faster detecting suite apfd 
shows effects prioritized test suite test case order 
inspection clear order results earliest detection faults illustrates optimal order apfd 
limitations apfd metric apfd metric just relies assumptions faults equal severity test cases equal costs 
assumptions manifested fact metric simply plots percentage faults detected fraction test suite run 
previous empirical results suggest assumptions hold metric operates 
practice cases assumptions hold cases faults vary severity test cases vary cost 
cases apfd metric provide unsatisfactory results simple examples illustrate 
example 
consider testing scenario illustrated 
apfd metric faults equally severe test cases equally costly orders equivalent terms rate fault detection swapping alters rate particular faults detected rates fault detection 
equivalence reflected equivalent 
suppose twice costly requiring hours execute requires 
terms faults detected hour test case order preferable order resulting faster detection faults 
apfd metric distinguish orders 
example 
working scenario suppose test cases equivalent costs suppose faults severity fault severity 
case test case detects severe fault severe fault test case detects severe faults 
terms fault test case order preferable order 
apfd metric distinguish orders 
example 
examples provide cases apfd metric orders equivalent intuitions say 
possible test costs fault severities differ apfd metric assign higher value test case order consider valuable 
working suppose faults equally severe test cases require hour execute test case requires hours 
consider test case order 
apfd metric order assigned apfd value see 
consider alternative test case order 
order illustrated respect apfd apfd prioritized suite apfd prioritized suite apfd prioritized suite test suite faults exposed test suite fraction test case order test case order test suite fraction apfd apfd test fault test suite fraction test case order apfd examples illustrating apfd metric 
metric metric differentiate test cases terms relative costs vertical bars graph representing individual test cases width 
apfd order lower score test case order 
terms faults detected hour second order preferable detects faults hour remains better terms faults detected hour order execution second test case 
test suite fraction test case order apfd apfd example 
analogous example created varying fault severities holding test case costs uniform 
example 
consider example fault severities test case costs vary 
suppose test case twice costly test case requiring hours execute requires 
case example assuming faults equally severe test case order preferable 
faults detected costly faults detected order may preferable 
example suppose test case cost test case cost 
faults faults detected assigned severity faults faults detected assigned severities greater order achieves greater units fault severity detected cost order 
apfd metric distinction 
new cost model foregoing examples suggest considering relative merits test cases measure rate assumes test case costs fault severities uniform produce unsatisfactory results 
notion tradeoff exists costs testing costs leaving undetected faults software fundamental practice testers face decisions tradeoff frequently 
appropriate tradeoff considered prioritizing test cases 
metric evaluating test case orders accommodate factors underlying tradeoff 
thesis metric reward test case orders proportionally rate units fault severity detected unit test cost 
created metric adapting apfd metric call new cost cognizant metric apfdc terms graphs figures creation new metric entails modifications 
letting horizontal axis graph denote test suite fraction denote percentage total test case cost incurred 
test case test suite represented interval horizontal axis length proportional percentage total test suite cost accounted test case 
second letting vertical axis graph denote percent detected faults denote percentage total fault severity detected 
fault detected test suite represented interval vertical axis height proportional percentage total fault severity fault accounts 
context cost test case severity fault measured various ways 
time test example assumed simplicity unit fault severity equivalent unit test case cost 
clearly practice relationship fault severity test case cost vary applications quantifying relationship may non trivial 
discuss sections 
example example example example area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected area test case order percentage total test case cost incurred percentage total fault severity detected examples illustrating apfdc metric 
execution setup validation primary component test case cost execution adequately tracks cost 
practitioners assign test case costs factors hardware costs engineers salaries 
similarly fault severity measured terms time required locate correct fault practitioners factor costs lost business damage persons property forth 
case apfdc metric supports interpretations 
context apfdc concerned predicting costs may difficult measuring costs occurred evaluate various test case orders 
new interpretation graphs just discussed test case contribution weighted horizontal dimension terms test case cost vertical dimension terms cumulative severity faults reveals 
graphs curve delimits greater area test case order exhibits greater units detected unit test cost area delimited constitute new apfdc metric 
illustrate apfdc metric graphical point view presents graphs examples preceding subsection 
leftmost pair graphs correspond example upper pair represents apfdc test case order lower represents apfdc order 
note original apfd metric distinguish orders apfdc metric gives preference faster detecting order 
pairs graphs illustrate application apfdc metric examples pair graphs corresponding example show new metric gives higher award test case order reveals severe fault earlier assumption severity value assigned faults severity value assigned fault 
pair graphs corresponding example show new metric distinguishes test case orders involving high cost test case order metric assigns greater value order 
pair graphs corresponding example show new metric distinguishes test case orders test case costs fault severities non uniform assumptions test case cost test cases cost faults severity faults severity 
case new metric assigns greater value order order 
apfdc metric quantitatively described follows 
test suite containing test cases costs set faults revealed fm severities faults 
tf test case ordering reveals fault cost cognizant weighted average percentage faults detected execution equation apfdc theta tf gamma tf theta note equation remains applicable test case costs fault severities identical 
test case costs fault severities identical formula reduces formula apfd 
estimating test case fault severity costs mentioned earlier apfdc metric concerned predicting test case costs fault severities assessing prioritization orders fact values known 
metric serves evaluate results prioritization compare evaluate prioritization techniques 
creating prioritization techniques wish techniques account varying test case fault severity costs need able predict costs 
test case costs concerned prioritizing regression testing prioritization techniques take advantage data gathered previous executions test suite timestamps test script outputs 
course data may reflect precisely test case costs occur program test modified satisfied estimates 
reasonable expect historical test case cost data predict test case costs sufficient accuracy 
practice estimates available 
predicting fault severity practice difficult 
techniques proposed doing 
example musa introduces guidelines definition failure severity classes system operation associated class failures usually experience historical data 
similar procedure estimate module criticality 
consistent classifications arise software high safety requirements failure event probability risk level catastrophic critical negligible 
criticality component derived association set failure events 
fine grained estimates fault severities matter test case costs obtained may useful identify coarse grained ranking schemes assigning numeric cost values categories severities test costs 
section describe test case cost ranking schemes fault severity ranking scheme industry data case study prioritization 
test case prioritization techniques previous considered various prioritization techniques primary focus metrics measuring rate fault detection restrict attention 
technique experimental control practical heuristics 
heuristics previously investigated forms account test case costs fault severity versions adapted account effects 
briefly describe technique necessary adaptations additional details 
random ordering random 
experimental control prioritization technique consider randomly order test cases test suite 
ordering attempt account varying test case costs fault severities 
additional statement coverage prioritization st addtl 
additional statement coverage prioritization greedily selects test case yields greatest statement coverage adjusts coverage data remaining test cases indicate coverage statements covered repeats process statements covered test case covered 
test cases remain process repeated 
adapt technique case test case costs fault severities vary summing number statements covered additionally test case calculate worth sum values criticality cost statement covered additionally criticality estimate severity fault occurring statement cost cost test case notion ratio criticality cost reward test cases greater ratios fault severity detected unit test cost 
additional function coverage prioritization fn addtl 
analogous additional statement coverage prioritization operating level functions technique prioritizes test cases total number additional functions cover 
adapt technique case test case costs fault severities vary additional statement coverage summing criticality cost values case criticality estimate severity fault occurring function sum functions covered test case additional fault index prioritization fn fi addtl 
certain functions contain faults fault proneness associated measurable software attributes 
additional fault index prioritization takes advantage association prioritizing test cases history executing fault prone functions 
represent fault proneness fault indexes principal component analysis 
fault indexes additional fault index prioritization similar additional function coverage prioritization 
set functions covered previously executed test cases maintained 
find best test case compute test case sum fault indexes additional function test case executes 
test case sum greatest wins 
process repeated test cases prioritized 
adapt technique handle varying test case costs fault severities summing fault index values function covered sum values cost function covered additionally fault index criticality estimate severity fault function cost cost test case case study illustrate practical application metric ramifications results case study 
goal case study show different test case cost fault severity distributions affect rate fault detection measured apfdc target case study program called space 
space interpreter array definition language adl developed european space agency consisting lines executable code 
enumerated variables needed considered 
independent variables faulty version test suite test cost distribution prioritization technique 
dependent variable apfdc value 
focus study impact test case cost fault severity distributions prioritization attempted control effects test suite composition type changes represented version 
test suites branch coverage adequate test suites generated previous studies suites ranged size test cases 
control type changes versions space contained faults different types fault discovered program development 
multi fault versions contained faults apiece averaging 
different test case cost fault severity distributions 
distribution evaluated combination test suite version discriminating prioritization technique 
describe distributions 
test case cost fault severity distributions test case cost distributions follows ffl unit test case costs ones 
corresponds case test case costs considered 
ffl random test case costs uniformly distributed range 
ffl normal test costs normally distributed range mean standard deviation 
ffl mozilla test costs distributed mozilla application see table levels 
mozilla original name netscape communicator open source web browser involving hundreds developers thousands testers 
information mozilla see www mozilla org 
information mozilla testing fault recording see bugzilla mozilla org 
ffl test costs distributed application see table 
real time embedded software system kloc developed industrial partners see details 
name level description percentage html expensive printing expensive smoke tests expensive expensive table mozilla test case cost distribution 
level description percentage expensive expensive table test case cost distribution 
apply test case cost distribution unit application trivial generated set cost numbers having required distribution randomly mapped numbers test cases 
fault severity distributions follows ffl unit fault severities ones 
corresponds case fault severities considered 
ffl mozilla linear fault severities distributed mozilla application see table levels costs assigned linear scale 
ffl mozilla exponential similar mozilla linear fault severity values assigned exponential scale linear level exponential level severity percentage trivial minor normal major critical blocking table mozilla fault severity distributions 
applying unit fault severity distribution trivial 
applying mozilla fault severity distributions difficult 
difficulty prioritization techniques information module criticality attempt prioritize manner accounts severity historical data support estimation module criticality 
required generation module criticality fault severity assignments 
creating assignments independently reflect correlation module fault sever distribution obtained querying bugzilla database resolved bugs netscape browser pc windows 
ities existence correlation prerequisite prioritization techniques module criticality predict fault severity 
approach assume correlation module fault severities exists rely assumption generating module criticality fault severity assignments 
apply fault severity distribution unit generated set severity numbers required distribution randomly mapped numbers modules 
considered fault assigned severity number equal criticality number module containing approach allow investigate compare prioritization techniques fairly investigations restricted conditional hypotheses clause suppose assumption close correlation module criticality fault severity exists valid 
focus study performance prioritization techniques effects fault distributions choices severity values apfdc presenting data take care condition reflect methodology 
test case cost distributions fault severity distributions fifteen combinations test case cost fault distributions consider 
restricted attention shown table 
unit random normal mozilla unit mozilla lin 
mozilla exp table fault severity distributions left versus test case cost distributions 
entries marked indicate combinations utilized study 
results discussion results study steps 
analyze impact varying test case cost distributions different prioritization techniques maintaining unit fault severity distribution 
second describe effects varying fault severity distributions different prioritization techniques maintaining unit test case cost distribution 
third combine analyze effects non unitary distributions test case cost fault severity 
interleaved presentation cite practical questions arise applying test case prioritization discuss answers questions 
varying test case cost distributions provides initial view apfdc values measured different test case cost distributions study 
displays sets bars set presenting apfdc values averaged runs techniques left set technique presenting apfdc values averaged runs technique 
set bars contains individual bars test cost mean apfdc distribution technique 
bution studied 
height bar denotes average apfdc measured test suites prioritized technique distribution associated bar 
shows study test case cost distribution impact average rate fault detection prioritized test suites measured apfdc runs techniques shown leftmost set bars 
differences statistically significant large expected average apfdc values different distributions differing percentage point 
discriminating technique rightmost sets bars discovered extent impact varied technique 
example st addtl variance average apfdc different distributions statistically significant fn fi addtl 
preceding analysis performed average apfdc values investigation individual differences apfdc paints different picture 
graphs illustrate absolute differences apfdc values prioritized test suites unit test case cost distribution compared distributions respectively 
graph horizontal axis plots apfdc observations prioritized suites versions prioritization techniques 
observations sorted technique order fn addtl st addtl fn fi addtl random technique test suite version 
solid vertical lines figures delimit boundaries data points techniques 
due space limitations include complete statistical analysis data 
complete analysis includes results applying anova analysis tukey tests combinations techniques cost distributions 
omit graph comparing unit distribution mozilla distribution space considerations similar graph comparing unit distribution distribution viewed 
absolute differences unit vs normal absolute differences unit vs absolute differences unit vs random absolute differences apfdc values observations non unit distributions vs unit distribution 
illustrates extent individual prioritized suites apfdc values distribution differ apfdc values obtained unit test case costs 
cases differences apfdc exceed cases exceed 
constitutes evidence need include test case cost distribution integral part apfdc failing may provide poor prioritization 
unit test case cost distribution produces apfdc values equivalent produced original apfd metric differences show extent apfd apfdc metrics differ 
shows fn addtl st addtl test cost distributions exhibited higher variability apfdc techniques st addtl exhibiting greatest variability 
suggests certain techniques behavior distributions predictable 
looking back previous page prioritization techniques provided significant improvements apfdc random technique average test case cost distributions 
technique best independently test case cost distribution prioritization improved rate fault detection 
practical question 
am develop new test suite products 
test suite suitable prioritization 
conjecture smaller test cases fewer larger ones provides opportunities test case scheduling increasing potential prioritization gains 
unit distribution small test case costs mozilla distributions lesser extent average apfdc higher distributions provides initial evidence support conjecture 
partitioning larger test cases scope average test case decreases allowing prioritization techniques precisely discriminate test cases 
expensive test cases small numbers limit opportunities prioritization expensive test cases cover sections program contain faults 
varying fault severity distributions analysis fault severity distributions show fault severity distribution significant effect apfdc values prioritization technique 
illustrated displays sets box plots set technique set box plots contains box plot fault severity distributions showing distribution apfdc values test suites prioritized associated technique fault severity distribution 
apfdc values distribution technique 
shows fn fi addtl exhibited consistent behavior distributions exhibited better performance techniques 
random contrast susceptible variation distributions exhibited poorest performance techniques 
practical question 
access fault severity distributions corresponding previous releases product 
performed small study distributions distribution provided higher apfdc distribution previous release difference apfdc large 
difference costs different distributions 
determine distribution 
small difference apfdc indicate particular distribution find faults may cause damage earlier testing cycle 
difference amount practical difference depends factors 
example test suite executes quickly may sense prioritization place 
answer question illustration practical impact differences apfdc values needed 
approach construct graphs representing apfdc scores distributions previous release 
alter horizontal axis label reflect actual test execution costs substituting time 
graph clear orders compare 
illustrate performed analysis version space fn fi addtl technique 
case apfdc unit test case cost unit fault severity apfdc unit test case cost mozilla linear fault severity apfd unit test case cost mozilla exponential fault severity 
graph depicts tops apfdc curves distributions axis representing percentage total test case costs incurred axis representing percentage total fault severity detected 
having incurred test case costs differences distributions evident 
mozilla exponential fault severity distribution captured accumulated fault severity mozilla linear fault severity distribution captured approximately unit fault severity distribution captured 
disparity distributions grows smaller additional test cost incurred time test cost accounted fault severity captured distributions 
practical impact differences 
suppose scale axis represents time days required test suite executed 
case mozilla exponential distribution total fault severity accounted days mozilla linear distribution severity accounted approximately days 
savings may significant product shipped testing process completed severe faults detected 
suppose execution test suite accomplished weekend cost measured hours days 
case differences distributions may practically significant 
testing costs diminish impact choosing particular distribution lessened 
varying test cost fault severity distributions having analyzed effects varying test case cost fault severity distributions individually consider percentage total test case cost incurred unit unit unit mozilla linear unit mozilla exponential days hours apfdc curves practical question 
results obtained varying distributions concurrently 
simplify presentation focus behavior apfdc just randomly sampled cases st addtl 
presents scatter plot represent combined distributions unit test case cost unit fault severity mozilla test case cost linear mozilla fault severity mozilla test case cost exponential mozilla fault severity 
axis represents apfdc value unit unit distribution point plotted represents value apfdc distributions 
plot shows apfdc values unit unit distribution significantly different apfdc values distributions evident large variance plots mozilla distributions 
choice different combinations test case cost fault severity distributions impact apfdc illustrate differences distributions fitted individual cases linear equations regression analysis drew confidences intervals regression lines 
central line distribution regression line distribution lines bands distribution represent probability true fitted line population points considered falls bands 
lines suggest mozilla mozilla exponential distribution combination provides highest apfdc values apfdc closer distribution combinations involving mozilla converge 
practical question 
considerations attend specifying test cost fault severity distributions 
applying linear transformations scale test costs fault severities affect apfdc values 
example level fault severity ranking scheme choosing severity values equivalent choosing apfdc values combined distributions 
evaluation test case orders concerned affect units fault severity unit test cost values test cases relative 
contrast applying non linear transformations scale test case costs fault severities affect apfdc values alter relative worth test case orders shown mozilla exp distribution 
new metric apfdc assessing rate fault detection prioritized test cases incorporates varying test case fault costs 
techniques prioritizing test cases attempt account effects varying test case cost fault severity 
case study applying techniques illustrates application metric effects arise different test cost fault severity distributions 
results study highlight differences previous new metrics 
focus apfdc metric 
prioritization techniques intended improve prioritization metric may techniques better suited maximizing objective function represented apfdc furthermore practitioners currently prioritize test cases mechanisms investigated 
experiments approaches enlightening 
currently constructing infrastructure experiment metrics techniques infrastructure support rigorous experiments factors test cost fault severity controlled varied case studies real systems test cost fault severity data drawn directly systems 
addition providing opportunities evaluate metric techniques experiments provide data create rigorous guidelines assessment tools evaluating techniques distributions 
guidelines tools hope help practitioners answer practical questions face deploying test case prioritization 
supported part nsf information technology research program awards ccr ccr university nebraska lincoln oregon state university supported part nsf awards ccr ccr oregon state university nasa space award university nebraska lincoln 
alberto frankl filip shared space program test cases 
roland mary jean harrold chu contributed earlier stages 
briand 
investigating quality factors object oriented designs industrial case study 
proc 
int 
conf 
softw 
eng pages may 
rothermel 
prioritizing test cases regression testing 
proc 
int 
symp 
softw 
testing analysis pages aug 
munson 
code churn measure estimating impact code change 
proc 
int 
conf 
softw 
maint pages nov 
munson 
software evolution code fault process 
emp 
softw 
eng 
sept 

comparing models identifying fault prone software components 
proc 
th int 
conf 
softw 
engr 
knowledge engr pages june 
rothermel 
incorporating varying test costs fault severities test case prioritization 
technical report oregon state university aug 
munson 
software measurement problems practice 
annals softw 
eng 
musa 
software reliability engineering 
mcgraw hill new york ny 
munson 
software evolution fault process 
proc 
third annual softw 
eng 
workshop nasa goddard space flight center 

tsai 
regression testing industrial environment 
comm 
acm may 
rothermel chu harrold 
test case prioritization empirical study 
proc 
int 
conf 
softw 
maint pages aug 

handbook software quality assurance 
prentice hall new york ny rd edition 
wong horgan london agrawal 
study effective regression testing practice 
proc 
eighth intl 
symp 
softw 
rel 
engr pages nov 

