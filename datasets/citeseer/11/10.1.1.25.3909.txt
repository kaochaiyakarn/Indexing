ieee published proceedings ase specialization patterns ulrik schultz julia lawall charles consel compose group irisa inria university rennes campus universitaire de beaulieu rennes cedex france mail ups consel irisa fr design patterns offer advantages software development introduce inefficiency final program 
program specialization eliminate overheads effective targeted user specific bottlenecks 
consequently propose concepts complementary 
program specialization optimize programs written design patterns design patterns provide information program structure guide specialization 
concretely propose specialization patterns describe apply program specialization optimize uses design patterns 
analyze specialization opportunities provided specific uses design patterns 
analysis design pattern define associated specialization pattern 
specialization opportunities declared specialization classes framework developed previously 
experiments specialization significantly improves performance 

design patterns gamma describe tested program structures enhance modularity code reuse 
program written design patterns structured independent units interact generic interfaces evolve time 
design patterns documented simplifies understanding programs constructed independent units 
generic interfaces intrinsically blocks optimization objects carry significant performance penalty 
issue remains largely unaddressed design pattern community 
author current address diku university copenhagen dk copenhagen denmark 
author current address labri cours de la liberation cedex france 
applications fully exploit flexibility offered design patterns 
consider typical iterator design pattern separates traversal data structure representation 
iterator pattern implementation set data structure define member method follows public class set coll underlying collection public boolean member object iterator coll iterator obtain iterator hasnext iterator elements object obtain element equals return true return false 
definition member method underlying implementation letting programmer freely choose appropriate concrete representation 
experiments show iterator pattern blocks compiler optimization element retrieval operations 
member method repeatedly search objects representation flexibility provided accessing data interface needed 
replacing generic uses iterator pattern underlined method definition direct accesses underlying data structure gives speedup ranging 
measurements suggest optimizations performed state theart compilers completely compensate genericity introduced design patterns 
data representation invariant specializing program representation execution improves efficiency 
manual specialization errorprone introduces excessive program maintenance overhead 
automatic program specialization experiments done jdk jit hotspot compilers sparc architecture array linked list representations underlying data structure 
shown effective context java :10.1.1.23.4982
automatic program specialization systematically eliminates algorithmic structural overheads consequently significantly improve performance 
example program specialization shown eliminate overheads introduced software architectures 
specialization beneficial example specializing respect different representations cause code explosion 
user explicitly target specializer particular invariants regions code 
profiling help may reveal systematic structural overheads block optimization program 
systematic approach account program design needed 
observe design patterns program gives rise patterns structural properties turn give rise patterns overheads form patterns opportunities specialization 
propose specialization patterns complement design patterns describe program structured design patterns benefit specialization 
approach retains program structuring advantages design patterns relying automated transformation map generic code efficient implementation 
contributions follows analyze overheads systematically introduced design patterns 
describe systematically apply program specialization eliminate overheads automatically mapping modular generic implementation monolithic efficient 
define specialization patterns known design patterns builder pattern strategy pattern 
provide examples specialization optimize uses design patterns show effect specialization realistic versions examples 
earlier addressed declaration specialize form specialization classes specialize form prototype java specializer 
address key issue selecting specialize 
rest organized follows 
section describes perspective design patterns 
section explains program specialization 
section describes specialization design patterns means specialization patterns 
section assesses application program specialization uses design patterns 
section presents related section discusses section concludes 

design patterns inheritance delegation fundamental structure adaptable object oriented systems 
inheritance allows new class extend override behavior existing class 
delegation defines new class terms interfaces existing objects 
section describe general purpose design patterns style gamma organize basic adaptation mechanisms identify overheads design patterns introduce 

role design patterns inheritance delegation obscures relationship program components 
design patterns address issue 
adaptable programs described terms design patterns implement provides guide functionality program distributed class definitions 
furthermore simplify program development facilitate communication programs may explicitly organized known design patterns full flexibility provided chosen design patterns needed 
particularly case effective optimization techniques kinds programs result design patterns critically needed 

overheads introduced design patterns objects interact method invocations implemented direct calls virtual calls 
virtual calls defeat branch prediction instruction pipelining inhibit inlining blocking subsequent traditional intra procedural compiler optimizations 
compilers go great lengths replace virtual calls direct calls constrained specialization techniques customization 
virtual calls completely eliminated static analysis safely determine class receiver object changes 
design patterns distribute functionality objects cooperate interfaces simplifying software adaptation reorganization objects constitute program 
software structure potential reorganize program objects moment implies objects generally interact virtual calls 
design patterns may provide adaptability needed specific phase run program 
propagating extra information identity objects program may allow replacement virtual calls direct calls expected optimizing compiler 
observations illustrated benchmarks reported section 
state art java compiler technology programs written design patterns operate interfaces run half speed programs explicitly direct calls 

program specialization program specialization optimizes program fragment information context generating dedicated implementation 
approach automatic program specialization partial evaluation performs aggressive inter procedural constant propagation data types performs constant folding control flow simplifications information 
partial evaluation adapts program known static information execution context leaving program parts controlled unknown dynamic data 
partial evaluation extensively investigated functional logic imperative languages extended java schultz intermediate language 
extended approach automatically produce specialized java source programs implementing complete java java specializer context design patterns primarily interested specialization eliminate virtual calls 
concretely specialize program written design patterns types objects manipulates values objects contain 
specializing program respect fixed object structure safely bypass interfaces isolate program components possibly triggering optimizations specialization compile time produce monolithic block optimized code 
partial evaluation relies human programmer detect specialization invariants direct specialization critical parts program 
program part invariants specialized concisely described specialization classes 
specialization classes insert guards specialized program ensure specialized code invariants satisfied 
context design patterns specialization classes allow programmer specialize local invariants hold objects play role design pattern 
see homepage www irisa fr compose details implementation availability 
need react run time specialization invariants invalidated specialization classes add inefficiency applying specialization class wrong place eliminate benefits due partial evaluation 
specialization classes useful fixed implementation selected outside critical regions program 
specialization example example revisit example iterator described section 
specialize iterator pattern member method specific type iterator object reducing number virtual calls 
suppose object referenced coll field known object specific implementation class named array appendix 
array object uses iterator appendix advantageous specialize member method coll field array type 
specialization invariant declared specialization class follows member array specializes set array coll field type array boolean member object specialize member specializing member array unfolds methods iterator yielding method public boolean member array object new array coll current object array elements current equals return true return false specialized code explicitly allocates new local method 
explicit array elements accessed sequentially loop 
features exploited compiler performing intra procedural optimizations 
automatically specialized definition faster original definition depending choice java compiler see section details 
specialization respect invariant trigger specialization opportunities 
example length array object known specializer unroll loop code needed compare unspecified data contained array remains 
specialization invariants beneficial 
example unrolling loop lead code explosion 
specializing respect type elements array object cause generation specialized name name associated design pattern 
description short description design pattern 
extent minimal program slice relevant optimizing design pattern 
overhead possible overheads associated design pattern 
compiler analysis overheads eliminated standard compilers 
approach specialization strategies eliminate identified overheads 
condition conditions specialization strategies effectively exploited 
specialization class guidelines write needed specialization classes effectively apply 
applicability rating applicability specialization design pattern information categories criteria 
example example specialization eliminate identified overhead example may include specialization classes textual descriptions 

specialization pattern template variants member operation applied sets having different kinds object values 
issues suggest specialization controlled requires insight program structure 
insight derived knowledge program design patterns 

specialization patterns design patterns facilitate communication design ideas encapsulating characterization common problem solution 
specialization patterns complement complement design patterns documenting specialization process results efficient implementation 

specialization patterns definition specialization pattern describes overheads intrinsic particular design pattern documents specialization eliminate overheads 
addition specialization pattern refer specialization patterns describe multiple design patterns specialized 
specialization patterns guide specialization program written help programmer structure program specialization beneficial 
specialization patterns template 
template includes sections relate specialization pattern design pattern criteria judging worthwhile specialize design pattern detailed instructions performing specialization specialization example 
illustrate problems addressed specialization patterns identify specialization opportunities provided creational structural behavioral design patterns examples specialization patterns 

creational patterns creational design pattern abstracts construction objects known products delegating parts instantiation process auxiliary classes 
creational pattern separates operations object underlying representation allowing representation changed transparently 
abstraction barrier implies products accessed virtual calls blocks optimization 
memory allocation object initialization dominate cost object creation specializing eliminate virtual calls associated creation process significantly optimize program 
parts program products specialized respect concrete type product 
specialization permits direct access products enabling ordinary intra procedural optimizations 
specialization effective specializer determine products manipulated created 
outside part program covered creational pattern specialization pattern give limited information worthwhile specialize 
example builder pattern shows interface creating lists builder pattern 
implementation provide methods start initializes list add extends list returns list 
defined class main method uses interface construct list accesses th element list just produced 
shows concrete builder implementation produces linked lists type llist 
definitions llist 
defines specialization pattern builder pattern 
specialization pattern suggests specialize program fragment regards concrete builder implementation 
accordingly specialization class specifies method class main specialized respect implementation addition specific list index 
specialized program virtual calls interface void start void add object class main void int start add add new vector lookup class implements llist head tail void start add empty head head new llist null tail head void add object tail new llist tail tail return head discard head builder interface concrete builder linked lists main ll specializes main void int void head new llist null tail head tail new llist tail tail tail new llist new vector tail tail head llist elm declaration specialization builder result specialization 
specializing builder pattern 
interface object lookup int index methods defining class llist implements object elm llist llist object elm object lookup int return elm lookup methods implementing 

list data structure 
replaced direct data structure manipulations 
specialization replaces virtual calls interface direct calls inlined post processing 
specialization single concrete implementation permits products accessed directly long manipulated dynamic way 
example product fixed way virtual call lookup replaced specialized version concrete definition llist class 
desired method specialized adapting concrete value stored second element llist object 
product manipulated control dynamic data benefits specialization negligible 
examples shown specialized program produced automatically readability 
creational patterns addition builder pattern factory prototype patterns hide types objects produce uses patterns targets specialization 
creational patterns program benefit specialization depends products manipulated 
factory singleton patterns simpler types objects produce usually evident 
uses patterns easily handled optimizing compiler course specialized 

structural patterns structural design patterns organize relations objects allowing programmer combine individual objects respect common interface compound object behaves new way 
separating objects interfaces structural patterns allow object structure transparently extended new classes implementing interface added 
flexibility implies components interact virtual calls 
program builds traverses object structure specialized specific layout structure 
specialization permits objects interact directly combines basic operations structure single method facilitating optimization 
structure modified creation methods traverse directly specialized layout 
structure modifiable specialization classes describe layouts interest 
specialization classes introduce overheads approach name builder pattern description builder pattern allows complex structure created invoking sequence methods defined generic builder interface separating construction process underlying representation 
extent specialization applied collection classes implementing concrete representation structure class implementing builder interface client builds structure generic operations provided builder interface 
specialization applied subsequent product structure 
overhead separation type product client means product accessed virtual calls 
compiler just single kind builder single kind product compiler usually generate direct calls accessing methods product 
compiler typically initialization information 
approach specializing client respect particular implementation builder objects comprising structure directly accessible client 
accesses components structure implemented direct calls methods objects 
information current state objects optimizations 
condition type builder known specializer possibly specialization class invariant 
guarantee specialization builder sequence building actions fixed program 
furthermore guarantee direct products information state exploited specializer fixed way 
specialization class specialization class fix type builder specify specialization method uses builder resulting product 
applicability high specialization class placed properly products 
low 
example see explanation text 

builder specialization pattern beneficial structure changes 
specialization structural pattern generate code having size proportional size object structure specialization applied caution avoid code explosion 
patterns bridge adapter composite decorator facade proxy build structures objects hidden generic interfaces uses patterns targets specialization 
specialization guaranteed simplify program structure change encapsulated specialization classes 
pattern optimizes memory usage sharing objects specialized obvious way 
lack space include specialization pattern example structural patterns 
refer interested reader technical report details 

behavioral patterns behavioral patterns control flow providing generic ways parameterizing behavior 
separate different aspects behavior making possible construct new behaviors composing individual objects classes 
time collaborating objects specific function interact virtual calls 
program behavioral pattern specialized specific behavior specifying values objects control behavioral pattern 
specialization transforms complete description behavior single unit 
behavioral design patterns diverse guarantee benefits specialization specific patterns 
depending specific pattern question specialization done specializing pattern object structure processes possibly values control processes object structure 
case objects pattern determined specializer behavioral pattern general specialized 
example strategy pattern shows strategy pattern 
image class represents image pixels defined rgb class 
process method image object applies pixelwise processing strategy stored field op pixel image 
defines single pixel operations scale scales pixel changing brightness discards red component 
defines specialization pattern strategy pattern 
specialization pattern suggests specialize specific algorithm 
specialization class declares operation scale operation scaling value 
specialize image class strategy specified terms type terms internal state 
specialization merges effect strategy object original process method eliminating virtual call strategy method inlining call propagating known scal interface void handle rgb pixel class rgb double class image rgb img int op void process int int op handle img class scale implements double void handle rgb class implements keep red component 
rgb image uses operator rgb pixel operations specializes image op void process specializes scale void process int int rgb img declaration specialization scale operation result specialization 
specializing strategy pattern 
name strategy pattern description strategy pattern allows clients transparently replace algorithm 
design pattern allows clients choose families algorithms just single algorithm 
extent specialization applied family algorithms implementing interface client uses algorithms interface 
overhead operations provided algorithm accessed interface 
computation done algorithm overhead noticeable 
compiler strategy chosen explicitly compiler bypass interface 
approach specializing client concrete algorithm interface bypassed algorithm inlined client 
opens opportunities specialization optimization algorithm context 
condition coupling client concrete strategy changes client specialized strategy 
coupling change invocation method client specialization classes introduce local invariant example allowing method specialized strategy 
specialization class specialization class fix type strategy specify specialization method applies strategy 
applicability high strategy repeatedly medium times low 
example see explanation text 

strategy specialization pattern ing value 
behavioral patterns case strategy pattern precise specialization patterns chain responsibility interpreter mediator observer state visitor patterns 
interpreter visitor patterns specialization beneficial pattern specialized respect structure processed pattern case pattern completely eliminated 
command iterator design patterns represent opportunities specialization difficult precisely specify case basic case behavior completely fixed 
template method pattern obtains genericity inheritance easily handled optimizing compiler 
memento pattern state object specialized general way 

assessment illustrate performance benefits eliminating uses design patterns specialization consider benchmarks examples previous section 
practice improvement due specialization vary widely depending number specialization opportunities introduced eliminating jdk jit hotspot benchmark loc normal spec 
speedup normal spec 
speedup builder matrix bridge mandelbrot strategy image iterator member table 
benchmark results time seconds abstraction barriers created design patterns 
benchmarks builder pattern build matrices sparse dense underlying representations bridge pattern compute mandelbrot set complex arithmetic strategy pattern perform number different image processing tasks 
addition iterator example sections implement various set operations 
benchmarks done sun jdk jit hotspot compilers mhz ultrasparc ignoring iteration benchmark minimize cache effects ensure dynamic optimization complete 
results shown table including number lines code loc benchmark 
speedup due specialization varies complexity adaptation place benchmark 
bridge benchmark simple points adaptation dominated numerical computation benefit due simply specializing away bridge 
iterator builder benchmarks points adaptation benefit specialization 
strategy benchmark single critical point adaptation completely eliminated specialization greatly simplifies program control flow 

related de program rewriting techniques develop program transformation engine prolog performs architectural transformations compilation 
optimization technique different partial evaluation approach unified specialization patterns design pattern specialization pattern describe rewriting rules give best optimizations 
templates allow programmer express static information types simple values providing information compiler 
example implementing strategy pattern virtual call choice strategy statically fixed templates 
templates specialize class basis specialize way objects composed object composition fixed program 
addition explicit program syntax needed express specialization templates source code manually duplicated retain generic behavior 
compilers implement generally applicable optimizations similar performed program specialization requiring user guidance 
reduce complexity performing analysis simplified type inference algorithms class hierarchy analysis combined profile information guides speculative optimizations receiver prediction 
techniques inlining specialization types customization method argument specialization cause code explosion profiling information focus optimizations critical parts program 
optimizations offered systems depend accuracy analyses profiling system 
result level optimization difficult predict structural overheads easily detected 
contrast specialization parameterized information provided programmer produce source code manually inspected remaining inefficiencies 
design pattern said describe microarchitecture implemented specifically program developed software architecture defines program wide recurring code organization 
marlet shown program specialization automatically eliminate flexibility overhead software architectures generate efficient implementation 
specialization collection programs written software architecture simpler specializing collection programs written design patterns programs software architecture implementation specialized specialization strategy 

shown design pattern provides structure program systematically enable optimization program specialization 
intertwining design patterns may affect specialization opportunities 
address issue studying composition design patterns impacts specialization opportunities characterizing specialization patterns resulting design pattern compositions 
java beans component architecture defined standard java constructs certain constraints 
just framework systematically introduce specific overheads java beans component architecture introduces overheads programs 
specialization automatically applied optimize away overheads 
concretely aim completely automate specialization process specific case java beans automatically generating specialization classes 
formal definition design patterns possible user guidance specialization process greatly simplified 
example source language support design patterns program developed case tool supports design patterns specialization classes automatically generated design pattern 
specialization classes precisely define specialization capabilities resulting program 

design patterns focus programs structured offer features modularity extensibility 
structuring directly mapped implementation features directly implemented terms mechanisms cause overheads run time 
overheads predictable inherent design pattern 
introduces specialization patterns approach aimed optimizing patterns overheads identified design patterns 
optimization process program specialization removes abstraction layers exploiting information object delegation 
demonstrated applicability approach kinds design patterns creational structural behavioral 
kind design pattern characterized specialization opportunities 
examples concretely show effectiveness program specialization removing overheads inherent design patterns 
effect shown program specialization systematically map programs developed design patterns efficient implementations 
mapping guided information provided design patterns 
result extended scope design patterns guide program development enable systematic optimization resulting programs 
class array implements object elements int size array int size size size elements new object size public object get int return elements public int return size iterator iterator return new methods class implements iterator array array int current max array array current max boolean hasnext return current object return array get current 
array 
philippe renaud marlet gilles muller helpful comments 
miguel de miguel peter chang help timely completion complete java specializer 
example implementation details shows parts array classes relevant iterator example shown 
aigner holzle 
eliminating virtual function calls programs 
proceedings european conference object oriented programming ecoop volume lecture notes computer science pages lisbon portugal june 
springer 
andersen 
program analysis specialization programming language 
phd thesis computer science department university copenhagen may 
diku technical report 
baier gluck 
partial evaluation numerical programs fortran 
acm sigplan workshop partial evaluation semantics program manipulation pages orlando fl usa june 
technical report university melbourne australia 
bondorf 
self applicable partial evaluation 
phd thesis diku university copenhagen denmark 
revised version diku report 
bosch 
design patterns language constructs 
journal object oriented programming nov 
calder grunwald 
reducing indirect function call overhead programs 
conference record twentieth annual acm sigplan sigact symposium principles programming languages pages 
acm press 
chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
knobe editor proceedings sigplan conference programming language design implementation sigplan pages portland usa june 
acm press 
consel 
tour partial evaluation system higher order applicative languages 
partial evaluation semantics program manipulation pages copenhagen denmark june 
acm press 
consel hornof noel volanschi 
uniform approach compile time run time specialization 
danvy gluck thiemann editors partial evaluation international seminar dagstuhl castle number lecture notes computer science pages feb 

statically checked documentation design patterns 
mitchell bosch meyer wills editors proceedings tools europe pages mt st michel france june 
ieee computer society press 
dean chambers grove 
selective specialization object oriented languages 
acm sigplan notices june 
dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
oopsla conference pages san jose ca oct 
dean grove chambers 
optimization object oriented programs static class hierarchy analysis 
proceedings ecoop aarhus denmark aug 
springer verlag 
detlefs agesen 
inlining virtual methods 
ecoop pages 
holzle 
direct cost virtual function calls 
oopsla conference proceedings volume acm sigplan notices pages new york ny usa oct 
acm press 
proceedings european conference objectoriented programming ecoop volume lecture notes computer science lisbon portugal june 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
grove dean garrett chambers 
receiver class prediction 
proceedings oopsla pages austin tx oct 

language support design patterns attribute extension 
bosch mitchell editors ecoop workshop reader volume lecture notes computer science pages 
springerverlag june 
holzle ungar 
optimizing calls run time type feedback 
proceedings conference programming language design implementation pages new york ny usa june 
acm press 
krishnamurthi felleisen 
expressing structural properties language constructs 
swierstra editor programming languages systems th european symposium programming esop volume lecture notes computer science pages 
springer verlag 
lawall muller 
efficient incremental checkpointing java programs 
proceedings international conference dependable systems networks new york ny usa june 
ieee 
appear 
lloyd shepherdson 
partial evaluation logic programming 
journal logic programming 
marlet thibault consel 
mapping software architectures efficient implementations partial evaluation 
conference automated software engineering pages lake tahoe nv usa nov 
ieee computer society 
demeyer engel 
making design patterns explicit face framework adaptive composition environment 
jazayeri editors proceedings esec fse volume lecture notes computer science pages 
springer verlag sept 
plevyak chien 
precise concrete type inference object oriented languages 
oopsla conference proceedings volume sigplan notices pages 
acm oct 
schultz lawall consel 
specialization patterns 
research report inria rennes france jan 
extended version 
schultz lawall consel muller 
automatic specialization java programs 
ecoop pages 
shaw garlan 
software architecture 
prentice hall 
de 
optimizing objectoriented languages architectural transformations 
editor compiler construction th international conference cc volume lecture notes computer science pages amsterdam netherlands mar 
springer verlag 
volanschi consel muller cowan 
declarative specialization object oriented programs 
oopsla conference proceedings pages atlanta ga usa oct 
acm press 

