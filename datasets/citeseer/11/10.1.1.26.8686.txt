overview solving job shop scheduling problem local search techniques chiu wo choi comp nus edu sg july scheduling problems combinatorial optimization problems 
job shop scheduling problem best known scheduling problems hard solve 
local search techniques useful tools solving problems 
nd near optimal solution acceptable time 
survey di erent local search techniques solving job shop scheduling problem 
include threshold algorithms tabu search algorithms genetic algorithms 
discuss idea hybrid tree search local search solving scheduling problems 
bak baker de ned scheduling problem allocating scarce resources activities time 
scheduling problems combinatorial optimization problems 
classes scheduling problems proved np hard gj 
application areas include production planning personnel planning product con guration transportation 
years scheduling theory application active area research 
job shop scheduling problem jssp best known scheduling problem 
jssp set jobs set machines resources 
job consists set operations processed order 
furthermore operation needs processed uninterrupted time period length machine 
machine handle operation time 
purpose nd schedule minimizes makespan maximum completion time operations 
jssp disregards real life aspects constitute useful abstraction practical problems 
local search techniques useful tools solving combinatorial optimization problems scheduling problems 
local search generic approximation algorithm nding near optimal solution acceptable time 
past decade di erent types local search algorithms jssp developed proved ective 
include threshold algorithms simulated annealing lal tabu search dt ns genetic algorithm ny frc 
survey di erent local search techniques solving jssp 
adapt notations de ning di erent concepts val :10.1.1.36.7506
discuss idea hybrid tree search local search solving scheduling problems 
structured follows 
section presents jssp 
section presents local search 
section describe di erent local search techniques solving jssp 
threshold algorithms tabu search algorithms genetic algorithms respectively 
section shows results observations 
section gives directions perspectives 
job shop scheduling problems jssp de ned follows 
set operations set machines set jobs 
operation denotes job belongs machine processed processing time binary relation de ned represents precedences operations performed induces total ordering operations belonging job precedences exist operations di erent jobs 
schedule function operation de nes start time 
schedule feasible makespan schedule max earliest time operations completed 
problem nd optimal schedule feasible schedule minimum makespan 
disjunctive graph represents instance problem 
vertices represent operations arcs represent precedences operations edges ffv represent machine capacity constraints 
vertex weight equal processing time 
gives example job machine instance 
orientation function fv wg fv wg write je partial orientation orientation complete orientation orientation feasible digraph acyclic 
represents machine machine ordering 
feasible schedule uniquely determines feasible complete orientation denoted feasible complete orientation unique feasible schedule denoted gives feasible schedule instance 
equals length longest path excluding length refers sum weights fo vertices path 
length equals length longest path digraph 
finding optimal schedule equivalent nding feasible complete orientation minimizes longest path length corresponding digraph 
example job machine instance 
node ij corresponds operation job processed machine feasible schedule instance local search local search iterative procedure 
idea making small changes may improve solution 
achieve better solutions changing solutions 
need concepts 
set feasible solutions 
functions de ned cost function mapping cases closely related function optimized 
neighborhood function mapping de nes solution neighborhood solution called neighbor execution local search algorithm de nes walk solution visited neighbor previously visited 
solution called local minimum respect neighborhood function 
iterative improvement simple algorithm nd local minimum 
starting initial solution neighborhood searched solution lower cost 
solution algorithm continues local minimum returned 
local optima obtained may poor quality 
variants iterative improvement proposed 
variants threshold algorithms tabu search algorithms genetic algorithms 
apply local search algorithm need de ne solution representation cost function neighborhood function 
jssp solution representation speci es start times operations equivalently corresponding machine orderings operations 
cost function makespan feasible schedule 
initial solution usually randomly generated 
de ne neighborhood functions need additional notations 
instance operation jp js denote immediate predecessor successor precedence relation exist 
feasible schedule operation mps mss denote immediate predecessor successor orientation exist 
schedule clear context remove subscript block maximal sequence size consisting adjacent operations processed machine belong longest path 
operation block internal rst operation block 
properties val useful obtaining reasonable neighborhood functions :10.1.1.36.7506

feasible orientation reversing oriented edge longest path corresponding digraph results feasible orientation 

reversing oriented edge feasible orientation longest path results feasible orientation long 
feasible orientation reversing oriented edge internal operations block results feasible schedule long 
feasible orientation rst operations rst block longest path internal operation 
reversing results feasible schedule long true case operations block longest path internal 
threshold algorithm 

choose initial solution 
best cost 
best soln repeat 
generate randomly solution 


best soln best cost 

criterion discuss sections di erent local search algorithms neighborhood functions solving jssp 
threshold algorithms threshold algorithms accept neighbor solution new current solution cost di erence current solution neighbor certain threshold threshold updated iteration function necessary 
shows threshold algorithm 
basic threshold algorithms iterative improvement threshold accepting simulated annealing 
iterative improvement simplest threshold algorithm 
thresholds set true improvements accepted 
obtain fair results aarts employs multi start strategy 
algorithm runs randomly generated initial solutions certain run time limit reached best solution returned 
iterative improvement tested neighborhood function obtains neighbor interchanging adjacent operations block 
tested neighborhood function edges simultaneously 
neighbor obtained interchanging adjacent operations ms block internal 
addition interchanging jp mp jp interchanging js ms js edges exist 
threshold acceptance sets thresholds large nonnegative number execution gradually decrease 
general rules determine appropriate thresholds lacking 
threshold acceptance tested neighborhood function described previously 
threshold values determined empirically 
simulated annealing uses positive stochastic thresholds 
thresholds value equal ln control parameter called temperature tabu search algorithm 
choose initial solution 
best cost 
best soln 
tabu list repeat 
candidate fx move tabu satis es aspiration criterion 
generate solution candidate 
update tabu list 


best soln 
best cost criterion value gradually decreases cooling schedule drawn uniform distribution iteration 
simulated annealing guaranteed nd optimal solution asymptotically certain conditions 
lal simulated annealing tested neighborhood function cooling schedule parameter schedule 
parameters determine initial nal values control parameter respectively decremental rule depends parameter way 
ln value control parameter kth iteration standard deviation cost values neighbors obtained kth iteration 
tabu search algorithms tabu search selects solution minimum cost subset neighbors tabu list satis es certain aspiration criterion 
tabu list implicitly de ned terms forbidden moves current solution neighbor 
recomputed iteration 
aspiration criterion allows overrule tabu status neighbor 
shows tabu search algorithm 
dell trubian dt tested tabu search neighborhood function may reverse edge 
adjacent operations ms block internal neighboring orientation obtained permuting mp permuting ms interchanged feasible orientation results 
addition blocks size neighbor obtained positioning operation immediately front operations block provided resulting orientation feasible 
moved left right long orientation remains feasible 
tabu list contains items forbidden arcs 
neighbor items tabu list depending type 
length tabu list varying current schedule makespan shorter previous best 
furthermore minimal maximal allowable lengths list changed number iterations 
aspiration criterion de ned neighbor leads makespan shorter value current best solution 
neighbors tabu satisfy aspiration criterion random neighbor selected schedule 
proposed procedure called nding initial solution applies list scheduling simultaneously schedule 
nowicki smutnicki ns algorithm combines tabu search backtracking scheme 
neighborhood function interchanges involving internal operations 
excludes interchange rst operations rst block second internal interchange operations block rst internal 
schedule block blocks size neighbor 
allows arcs single longest path 
tabu list contains forbidden arcs 
length tabu list xed 
aspiration criterion de ned neighbor leads makespan best know makespan 
permissible neighbor exists done 
neighbor taboo new schedule 
oldest items tabu list removed non tabu neighbor chosen 
initial solution obtained generating schedule shortest processing time rule insertion algorithm 
backtracking scheme resumes tabu search unvisited neighbors solutions previously generated 
certain point suppose new best schedule 
set feasible arc orientations tabu list orientation iteration 
jr triple frg stored list 
length maximum length full oldest triple deleted new stored 
time tabu search algorithms stops backtracking scheme starts round tabu search starting schedule set arc orientations tabu list stored triple 
set arc orientations left element triple deleted list 
replaced triple orientation iteration excluded 
note new round triples added list 
genetic algorithms genetic algorithms ideas population genetics 
extended notion neighborhood function called function 
function mapping genetic algorithm 
initialize construct initial population size repeat 
construct parents xs 
parents generate spring recombination mutation form offsprings 
combined offsprings form 
reduce size forms new population criterion de nes tuple xs set neighboring solutions 
solution called iteration set solutions called population 
population subsets size consisting parents selected 
subset called spring computed operations called recombination mutation 
set current population combined reduced new population selecting subset solution 
drafts genetic algorithm 
proposed function schedules determines neighbor repeating step times choose random arc change reversing arc provided belongs longest path proposed genetic algorithm incorporates iterative improvement 
initial population solutions generated randomly 
iteration population solutions locally optimized iterative improvement population doubled size applying randomly selected pairs schedules population 
subjected iterative improvement extended population local optima reduced original size choosing best schedules 
iteration started 
nakano yamada ny conventional genetic algorithms encode schedule string nite binary alphabet 
representations facilitate application functions involving operations crossover mutation 
consider problem instances exactly operation job machine pair 
machine pair jobs represent order machine executes jobs bit 
schedule represented string mn bits 
string may represent feasible schedule propose method nding feasible string close infeasible 
obtained cutting strings point exchanging left parts 
results observation results report val :10.1.1.36.7506
tested local search algorithms solving standard benchmark problems jssp 
threshold algorithms simulated annealing performs better iterative improvements threshold acceptance 
simulated nd better approximate solutions amount processing time 
running times concern simulated annealing nd solutions 
simulated annealing algorithm shown previously guaranteed nd optimal solution asymptotically proved lal 
tabu search produce better solutions reasonable time 
tabu search nd high quality solution relative small running time speci information problem structure 
nowicki smutnicki ns tabu search algorithm backtracking scheme champions solving jssp 
genetic algorithms aarts performs relative equally simulated annealing 
performance conventional genetic nakano yamada ny satisfactory 
due drawback conventional genetic algorithm schedule may representatives 
directions perspectives local search algorithms advantage nding near optimal solution acceptable time 
tree search algorithms branch bound search advantage able nd optimal solution proving optimality 
combination tree search local search studied cl np computational results show potential solving scheduling problem ectively 
cl loose combination 
upper bound schedules computed rst local search algorithm 
obtained upper bound passed branch bound algorithm nding optimal solution proving optimality 
np proposed approximation algorithm combining tree search local search 
direction look combination tree search local search uni ed software framework solving scheduling problems 
proposed approximation algorithms tight combination local search tree search 
proposed approach local search global perspective tree search obtaining neighborhood 
lead investigation dimension ordering decision undo size neighborhood exploration algorithms tree search 
decision undo means machine ordering orientation undo obtaining neighborhood 
ordering decision undo size neighborhood dependent 
exploration algorithms lds branch bound depends size neighborhood 
investigate heuristic rule notion look ahead distribution 
furthermore direction investigate heuristic rules combined search framework 
aarts van laarhoven lenstra 
computational study local search algorithms job shop scheduling 
orsa journal computing 
bak baker 
sequencing scheduling 
john wiley sons new york 
cl caseau laburthe 
disjunctive scheduling task intervals 
technical report liens technical report ecole normale sup erieure paris france july 
dt dell trubian 
applying tabu search job shop scheduling problem 
annals operations research 
frc fang ross corne 
promising genetic algorithm approach job shop scheduling rescheduling open shop scheduling programs 
proc 
fifth international conference genetic algorithms pages urbana champaign il 
gj michael garey david johnson 
computers intractability guide theory np completeness 
freeman new york 
lal van laarhoven aarts lenstra 
job shop scheduling simulated annealing 
operations research 
np wim nuijten claude le pape 
constraint job shop scheduling ilog scheduler 
journal heuristics 
ns nowicki smutnicki 
fast taboo search algorithm job shop problem 
management science 
ny nakano yamada 
conventional genetic algorithm job shop problems 
proc 
fourth international conference genetic algorithms pages san diego ca 
val vaessens aarts lenstra :10.1.1.36.7506
job shop scheduling local search 
informs journal computing 

