functional programming logic decrease important part system thomas arts ericsson computer science laboratory box sweden thomas cslab ericsson se www ericsson se cslab thomas 
years experience functional language erlang learned ericsson highly bene cial language programming control software large systems 
systems built constructed time fewer lines code need conventional languages 
success ericsson business area telephone switches partly solid fault tolerant architecture hardware software 
lot time money invested development fault tolerant architecture catch errors overlooked numerous tests 
erlang extensive libraries number uncaught errors decreases fault recovery mechanism system 
saves maintenance costs performance system increases 
additional formal veri cation aims reducing number uncaught errors 
theorem proving model checking erlang code explored 
consider supplementary techniques area best 
aiming fault tolerant part software 
development software telecommunication system bit tricky development arbitrary oce application high demand availability system software executes 
fault tolerant system telecommunication systems equipped robust redundant hardware 
hardware failure performance ect system 
hardware controlled control system typically complicated piece software 
control software monitors hardware con gures system certain task 
con guration changes frequent setting connection tearing 
clearly task control software act case failing hardware 
redundant hardware may take role failing part automatically con guration data updated system start acting di erent mode giving priority certain maintenance tasks reducing number accepted calls 
need surprising control software split parts dealing fault tolerance actual functionality 
knowledge write fault tolerant robust part ericsson assets building switch thing building switch goes software update 
development functional language erlang knowledge extensively 
chosen set design principles erlang suitable writing fault tolerant control software 
software errors code 
fact philosophy fault tolerant software assume piece hardware software may fail 
software divided pieces called components blocks interact 
software component fails rest software tries recover 
compared conventional languages writing control software number errors comparably large projects fewer erlang 
rest described erlang reduces number errors experimented theorem proving model checking erlang software order decrease number errors 
fewer errors code software fault tolerant part system useless 
errors may occur architecture trapping remains necessary 
gain increase performance recovering errors computational expensive decrease maintenance costs 
fewer errors erlang programs experience functional language erlang control software learns declarative languages potential suitable task 
data real comparison product development erlang competitive language rare 
parallel developments large system expensive experiment draw results programming teams equally experienced 
design suit implementation languages better 
top problems evaluating results faced requirements evolve time secondary requirements library support available components platform compatibility debug possibilities ternary requirements available skilled programmers career possibilities designers project managers try new technology times small part system designed di erent languages comparison reasons cf 

base judgment opinion experienced designers programmers project leaders seen di erent projects techniques languages implement control software 
programming declarative principal idea declarative languages separate logic control programmer free concentrate logic problem distracted control considerations 
erlang declarative language support uncoupling logic control respect computations 
fault tolerant issues utmost important keep control process runs machine critical data stored 
communication part allows control programmer 
processes unique identity creation processes done explicitly 
messages sent explicitly speci ed process programmer determine moment process ready read message mailbox 
declarative setting programmers need concern memory process message uses automatically assigned garbage collected 
declarative programming reduces number errors system particular serious errors originate programmers doing memory management memory leaks pointer errors declarative program contains fewer lines code similar imperative program 
erlang experience factor reduction number lines code large system 
time experience errors lines code ratio roughly strange classical memory related errors removed 
seen development process starts counting errors system shipped testing reasonably stable system 
reasonably stable system obtained earlier erlang 
get roughly times fewer errors system developed erlang 
furthermore error corrections usually give rise series side ects introducing visualizing errors 
line expects declarative language 
implicit model programming language supports implementation approach intuitively re ects real problem strong advantage language lacks direct mapping problem implementation 
erlang model concurrency possibility having thousands light weight concurrent processes time resembles closely description connections controlled 
connection speci ed independent entity programmed erlang 
support having light weight processes possible gather bunch concurrent activities thread comes risk introducing extra errors complicated debugging dicult system fault tolerant 
event communication assumed hardware speci cations implement synchronous communication system get unnecessary complicated 
erlang asynchronous communication ts setting 
erlang concurrency model ts kind problems modeling control software highly concurrent systems 
helps simplifying programs reduces number errors expects nd 
component development libraries ready components design principles play key factor ecient software development 
erlang realized lot ort put production large set libraries referred open telecom platform otp short 
libraries include functions data structures complicated components servers supervisors nite state machines 
design principles describe libraries components best 
typical control software consists larger part processes implement server nite state machine 
components occur frequent software system better isolated implemented 
clearly provide kind generic implementation needs instantiated speci functionality exactly done 
example concept generic server provides synchronous asynchronous communication debugging support error timeout handling administrative tasks 
order obtain required server functionality programmer provides instantiation generic server 
code instantiation provided generic part code tested components reduces number errors drastically 
error generic part appears example nite state machines system relatively easy nd particular easy state machines time 
supervisors generic components fault tolerance 
processes system occur node supervision tree monitored supervisor process 
supervisor nodes implemented simple straight forward way unnecessary errors introduced 
software components large software project declarative language small program 
programmer concentrate functionality bothered details 
unfortunately literature components functional languages poor 
small scale components map foldl farm parallel commonly accepted 
reason specifying communication components depends underlying framework guarantee referential transparency 
short design cycles notwithstanding academia popular rules design system starting model re ning speci cations implemented programming language systems built di erently practice 
implementation system generally started early design 
main reasons models lack lot information performance memory usages realizability design 
important probably fact running system buggy better understood customers decide drastic change requirements 
erlang combination otp bridges gap re nement implementation say 
high level abstraction components language easily implements design 
typical erlang projects designers move working di erent parts software integration parts takes place daily basis 
way working great similarity called extreme programming 
advantage way working design errors eliminated early stage project 
short cycles design test secure systems design errors time lot small errors code removed tests performed development 
error free erlang programs advantages language erlang combination design principles components shown projects cf 

produced software error free lot time money spent testing software xing errors 
order reduce particular maintenance costs strive develop tools assist nding errors early possible 
tools may interfere rapid development software 
choice early market lower maintenance costs nowadays favor rst alternative late market implies cancellation project maintenance 
context focus particular errors hard nd testing synchronization errors 
expensive repair nd certain error interesting develop technique nd 
legitimate wonder erlang dynamically typed functional languages advanced static type systems help detecting errors early stage 
de nitely attempts add type system language 
adding suitable type system language developed dynamic typing mind challenge 
see amount papers appear new type systems minor changes existing type systems poor academic interest developing type system industrial functional language 
discuss attempts ericsson develop suitable type system focus veri cation techniques 
purpose nding tricky errors implementation model checking theorem proving explored 
rst technique able sar ald development package develop kind push button veri cation tool second technique ericsson developed cooperation swedish institute computer science sics special theorem prover aware operational semantics erlang 
aim existing tools techniques possible tools available normally lot left tool incorporated existing development environment 
modeling language example question disadvantages outweigh bene ts 
feedback tools way erlang programmers relate immediately programs 
errors need real errors false positives 
time spent tool marginal time take nd error way example manual code inspection 
model checking erlang programs model checking formal veri cation software known eld research 
basically branches uses speci cation language combination model checker obtain correct speci cation write implementation programming language takes program code starting point abstracts model checked model checker 
case implementation proved correct approaches error encountered may indicate error implementation 
model checking seen accurate debugging method 
rst approach successful examples combination speci cation language promela model checker spin 
attractive merit promela language close implementation language easy derive implementation speci cation direct fault free way 
popular approach tendency approach translating promela 
second approach translating source code modeling language examples pathfinder bandera starting java code 
approach added list probably di erence knowledge occurring design patterns erlang code obtain smaller state spaces cf 

follow similar approach translation java promela checked spin translate erlang crl process algebra data model check properties alternation free calculus sar ald 
approach perform model checking erlang code huch 
major di erences huch approach abstraction 
semantics design patterns huch take design patterns account 
huch approach interpretations abstracting data control 
abstraction sound result properties hold abstraction hold erlang program 
approach restricted erlang programs tail recursive extended 
case study inspired access manager algorithm large switches programmed erlang started develop parallel veri ed version algorithm tool automatically translate kind code crl 
generic server design principle higher order functions supervision trees features typical kind code nd products 
tools developed research institute mathematics computer science cwi generating labeled transition system hiding abstraction internal actions interest property hand 
wrote small program translate labels transition system back erlang terms appears state space erlang program 
sar ald toolset contains easily accessible features state space visualization minimization respect kinds bisimulation simulator course model checker 
model checker check erlang program guaranteed mutual exclusion resources requested exclusively validity kind assertions code possibility sharing resource requested shared access priority exclusive access shared access results development translator erlang crl nished part erlang examples model checking push button technology 
technique limited nite transition systems luckily dealing case study 
program contains unbounded data structures lists number clients xed lists natural upperbound 
clearly verify properties xed number clients supervision tree generate right con guration automatically 
checking properties way con gurations clients turned relatively easy 
main problems open deal formulation properties code veri ed program available extended version 
general hard ensure speci es requirement right way properties starvation satisfactory speci ed logic con guration slightly di erent property needs speci ed properties far re usable 
problems technical matter dealing transition systems gigabyte speeding generation transition system model checking example parallel model checker 
able verify combination erlang modules containing lines advanced code containing pattern matching library functions higher order functions data structures lists records 
crl speci cations obtained code lines long 
inconvenient expansion mainly caused fact untyped erlang terms translated crl sort supplied large de nition equality 
datatype primitives responsible large size crl speci cation 
obtaining transition system crl takes minutes half day 
model checking general faster creating transition system take hours transition system megabytes 
proving correctness critical code reasons satis ed model checker tool erlang programs 
wants reason unbounded number processes dynamically generated processes data structures natural maximum size 
second logic model checking normally restricted properties express powerful logic logic supported model checker 
third model checking technique nding errors proving correctness 
real safety critical parts software want demanding prove code correct certain property 
fourth real systems expects able model checking state space grows simply large 
theorem prover supports compositional reasoning powerful tool split problem sub problems turn checked theorem prover model checker 
mentioned reasons theorem prover erlang developed classical proof assistant requiring users intervene proof processes critical steps stating program invariants 
tool ers considerable support automatic proof discovery higher level tactics tailored particular task veri cation erlang programs 
addition graphical interface permits easy navigation proof tableaux proof reuse meaningful feedback 
working model erlang system veri cation approach directly code show concrete erlang program satis es set properties formalized calculus 
full calculus semantically subsumes alternation free calculus ctl ctl ltl 
theorem prover supports reasoning parametric components supports inductive inductive reasoning recursively de ned components properties 
case studies theorem prover erlang developed years worked small larger case studies including mobile billing agent safety critical database lookup manager sorting algorithms persistent sets concurrent server creates new processes handle incoming tasks currently ongoing access manager program described previous section 
properties veri ed needed power full calculus able express alternation free calculus powerful logic 
results safety critical parts software reasonably stable longer subject change bene cial theorem prover approach 
tasks proving property advanced code labour intensive takes months 
constructed proofs easily contain thousands intermediate goals large part solved automatically 
level automation insucient leaving experts tool 
expertise theorem prover approach advanced debugging erlang code 
try prove property basically requires symbolic evaluation erlang program 
working proof gives insight execution behavior program limited xed initial parameters 
learn errors program able proof property deriving un nished proof tree re ecting symbolic trace 
possibility decompose proofs smaller tasks fully explored believe get better results 
hope combine model checking theorem proving having user roughly sketching proof model checker sub goals deal nite state spaces 
indirect way decomposing proofs just assuming properties certain components implemented generic servers 
results smaller proofs automation technique needed practically applicable 
way erlang programs developed moment successful 
support nding errors code frequently demanded issue 
method tool developed help interfere established way working 
software development aim extending test server presently product development formal veri cation features 
designers test server run overnight tests code 
addition compiling testing code properties automatically veri ed server 
properties planned manually constructed requirement speci cations needs done project cf 

code constantly changing properties checked 
encountered errors programmers means erlang trace leading error state 
model checking combination translation tool support 
critical parts software example library functions added erlang distribution plan theorem prover sure certain properties hold parts 
properties serve precise documentation behavior parts 
code optimizations translation erlang crl generation labeled transition systems apart debugging useful checking equivalence implementations 
quite program optimized rst working version produced 
possible bisimulation techniques labeled transition systems check implementations behave certain environment 
de ning equivalence trying prove technique show correctness optimization 

armstrong virding williams om 
concurrent programming erlang 
prentice hall international nd edition 

om comparison erlang implementation telecom applications master thesis university link oping ida sweden 

arts development veri ed erlang program resource locking proc 
formal methods industrial critical systems paris france july 

arts dam verifying distributed database lookup manager written erlang proc 
world congress formal methods fm lncs springer verlag berlin 
arts dam system description veri cation distributed erlang programs 
proc 
th int 
conf 
automated deduction lnai springer verlag berlin 

arts van correct performance transaction capabilities proc 
nd int 
conf 
application concurrency system design newcastle tyne uk june 

arts noll verifying generic erlang client server implementations 
proc 
th int 
workshop implementation functional languages ifl lncs springer verlag berlin 

beck extreme programming explained addison wesley pub 

symbolic program execution erlang veri cation tool proc 
th int 
workshop functional logic programming spain september 

blau rooth axd new generation atm switching system 
ericsson review 

blom fokkink groote van van de pol crl toolset analyse algebraic speci cations proc 
th int 
conf 
computer aided veri cation lncs springer verlag berlin 

weber local parallel model checking alternation free calculus 
tech 
rep aib rwth aachen march 

corbett dwyer bandera source level interface model checking java programs 
teaching research demos icse limerick ireland june 

dam parametric veri cation open distributed systems compositionality signi cant di erence lncs springer verlag berlin 
acker concurrent functional programming telecommunications case study technology thesis department teleinformatics royal institute technology stockholm sweden november 

open source erlang www erlang org 


fernandez 
cadp sar ald development package protocol validation veri cation toolbox 
proc 
th int 
conf 
computer aided veri cation lncs springer verlag berlin 

framework formal reasoning open distributed systems proc 
asian lncs springer verlag berlin 

noll dam arts veri cation tool erlang accepted publication international journal software tools technology transfer 

fokkink process algebra texts theoretical computer science springer verlag heidelberg 

groote syntax semantics timed crl 
tech 
rep sen cwi june 
available www cwi nl 

veri cation erlang programs factoring side ect free fragment proc 
formal methods industrial critical systems gmd report 

havelund model checking java programs java pathfinder 
int 
software tools technology transfer vol nr march 

holzmann design validation computer protocols 
cli ma hall 

holzmann code models proc 
nd int 
conf 
application concurrency system design newcastle tyne uk june 

huch veri cation erlang programs interpretation model checking 
proc 
international conference functional programming sept 

huch model checking erlang programs abstracting context free 
proc 
th int 
workshop functional logic programming kiel germany september 

marlow ph 
wadler practical subtyping system erlang proc 
int 
conf 
functional programming amsterdam netherlands 

noll erlang veri cation tool proc 
tacas lncs springer verlag berlin 
open telecom platform www erlang org 

fold increase productivity quality industrial strength functional programming telecom class products proc 
workshop formal design safety critical embedded systems munich germany march 
