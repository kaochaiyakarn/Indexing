comprehension syntax peter buneman leonid libkin dan suciu val tannen limsoon wong university pennsylvania department computer information science south rd street philadelphia pa email libkin suciu val saul cis upenn edu 
syntax comprehensions close syntax number practical database query languages believe better starting point order logic development database languages 
give informal account language comprehension syntax deals uniformly variety collection types includes pattern matching variant types function definition 
show informally comprehension syntax natural fragment structural recursion powerful programming paradigm collection types 
show small syntax language serve basis implementation optimization comprehension syntax 
relational databases conceived order logic relational calculus algebra taken starting point design relational query languages 
invaluable tool formulating semantics syntax providing deep insights expressive power database languages 
desire increase expressive power query languages need communicate non relational data structures especially provided object oriented databases ask appropriate continue stretch elegant paradigm order logic programming language cope richer domains 
want propose alternative strategy look operations naturally associated data structures involved guiding principle database language design 
example database relation set records 
case approach achieve generality flexibility looking independently canonical operations record types set types 
immediate consequence approach ability combine set record construction arbitrary fashion build languages non flat relations nested relations generally complex objects 
languages important reasons ability objectoriented databases support objects contain sets objects 
important reason principles apply collection types lists bags multisets arrays indexed structures certain kinds trees 
purpose give full account languages developed approach describe simple language comprehensions bears close affinities number practical database languages show informally language just restriction general language structural recursion language arises considering canonical operations collection types authors currently engaged writing book theory practice programming languages collection types material introductory chapter book :10.1.1.33.5381:10.1.1.50.9046
important topics shall cover type checking inference expressive power optimization implementation 
shall simply short primer comprehension syntax informal rationale development 
particular shall ffl show language comprehensions naturally uniformly express operations various collection types including sets bags lists ffl show variant types function declarations pattern matching uniformly supported language ffl provide informal structural recursion relationship comprehension syntax 
start looking familiar query sql extracts pairs employee names manager names relations emp employees dept departments select name mgr emp dept emp dept verbose version query written sql select name name mgr mgr emp dept put different interpretation syntax query 
sql symbols simply aliases relation names emp dept respectively 
take tuple variables bound successive tuples respective relations 
pair tuples satisfies condition contributes output 
idea having explicit tuple variables new tuple relational calculus importantly certain query languages object oriented databases 
fact query language interesting connections shall develop 
syntax query written name name mgr mgr np gamma emp nd gamma dept syntactic form fe ng comprehension 
expression denotes collection case set 
read set 
term comprehension comes set theory certain programming languages 
syntax closely resembles second sql query record construction explicit name name mgr mgr denotes record name mgr fields 
close resemblance comprehension syntax relational calculus important difference explicitly introduce bind variables marking backslash 
np gamma emp thought binding successive records emp relation 
variable bindings nd simple examples patterns serve bind variables match structures 
example fn name nn gamma extracts names employees department 
names returned 
pattern name nn matches tuples emp equal 
variable bound name field 
ellipsis matches remaining fields records emp 
query equivalent fe name ne gamma emp 
original sql query expressed pattern matching name mgr name nn nd gamma emp mgr nm gamma variable introduced pattern second 
variable introduced way scope extends comprehension 
head comprehension 
complicated programs essential distinguish binding variable accounts need bindings explicit 
scoping rules meaning comprehensions understood nested loops 
comprehension previous example understood resulting set obtained follows foreach name nn nd emp foreach mgr nm dept name mgr stress analogy clarify scoping rules way implement comprehensions efficiently 
examples show easily deal non flat relations fe name lastname ne gamma project nd projects ns gamma emp np gamma sg name field assumed record 
second assumed emp tuples projects field set 
query returns flat relation connects department project department employee working project 
queries common objectoriented databases 
second example example un nesting nested relational algebra 
may conversely nest relation attributes fb nb gamma rg na gamma rg collections tacitly assumed collections dealing sets get far assumption 
consider simple query involving aggregate functions salary nx gamma expression fx salary nx gamma denotes set query may give expected result employees salary value occur set 
assume expression denotes multiset bag multiple occurrences salary allowed query give desired result 
syntax denote set values denotes set 
bags multisets allow multiple occurrences element syntax fj jg represents bag occurrences different fj jg 
notation fjj jjg sequences values lists 
example fjj jjg fjj jjg represent different lists 
principles comprehension syntax sense collection types shall different kinds brackets analogous brackets 
possible brackets types puts additional burden type inference scope 
correct computation average salary salary nx gamma creates bag set giving element multiplicity 
function needed 
form gamma inside comprehension called generator 
inside bag comprehension bag 
similarly generators set comprehension sets likewise lists 
important observation order generators appear comprehension dictates way elements resulting collection generated 
pointed earlier analogy think generators nested loops outermost corresponds leftmost 
evident list comprehensions fjj nx gamma fjj jjg ny gamma fjj produces list fjj jjg interchanging nx gamma fjj jjg ny gamma fjj jjg produces fjj jjg 
particular comprehension bag comprehension set comprehension interchanging generators changed resulting collection commutativity laws hold bags sets 
lists bags sets usually available distinguished types object oriented database systems 
addition semantics sql involves sets bags cleanly separated language 
fact kinds collections indexed structures arrays sets certain kinds trees syntax comprehensions meaningful scope 
types proceeding worth reviewing syntax types 
implicit queries data queries types important language describe types 
bnf data types bool int string fg fj jg fjj jjg 
bool int string built base types 
types constructors build new types existing types 
constructs record types types constructs variant types types moment 
fg fj jg fjj jjg respectively construct set bag list types type example type emp relation certainly normal form relation name firstname string lastname string int status regular salary int extension string consultant day rate int phone string projects variant tagged union type regular consultant expresses disjoint possibilities status field type 
example regular salary extension 
denotes status regular employee consultant day rate phone 
denotes consultant 
variants known programming languages overlooked data models absence creates needless fragmentation database confusion null values 
variants conveniently pattern matching name phone name nn status consultant phone nt gamma name count name nn status regular nr projects np gamma query finds names telephone numbers consultants pattern comprehension matches consultants 
second query returns regular employee name number projects employee assigned 
declarations composing large query useful give names intermediate results auxiliary functions 
language allows declarations define variables functions 
suppose want find project regular employees working project 
adds clarity define function emps takes project returns set names salaries regular employees working project define emps np name salary name nn status regular salary ns projects nps gamma emp gamma psg parameters functions patterns 
example variable bound simple pattern np parameter function emps constant pattern occurs gamma psg 
answer original query define assignments project emps projects nps gamma emp np gamma psg emps function input assignments variable 
delta function extensive pattern matching 
rule pattern matches input value corresponding expression returned pattern matched 
delta function returns input input define delta delta nx arbitrary patterns including records variants function declarations 
function patterns useful dealing variants 
suppose want compute project total weekly pay employees working project 
start defining function wage computes weekly income employee determined status define wage regular salary ns 
wage consultant day rate nd 
define function computes total weekly pay employees attached project define np sum status ns projects nps gamma emp gamma simple comprehension allows find wage expenses project 
comprehensions relational algebra seen general form comprehension fe ng generator condition boolean valued expression 
generator form gamma pattern expression denotes collection 
condition simple condition expressions holds iff conjunction disjunction negation quantifier forall gamma exists gamma pattern expression denoting collection condition 
note quantifier exists gamma just shorthand condition gamma cg 
constant place empty record 
forall gamma shorthand exists gamma 
example compute set emps employees working projects john smith working emps set employees having project common john smith define firstname john lastname smith define fp name projects nps gamma emp np gamma psg define emps fe ne gamma emp forall np gamma define emps fe ne gamma emp exists np gamma operations relational algebra expressed comprehensions define union nx ny fv nz gamma fx yg nv gamma zg define difference nx ny fv nv gamma define product nx ny nu nu gamma nv nv gamma yg define select nx fu nu gamma cg define project nx nu nv gamma xg definitions nx ny shorthand record pattern nx ny 
functions union strictly speaking functions field record pattern 
possible express group construct sql nested collections doing grouping explicitly 
consider relation attributes integer consider sql query select sum group assume satisfies functional dependence sql program correct 
query expressed comprehensions define group nc fjr nr gamma define response fj sb sum group nr gamma straightforward add generic group operator shorthand program 
comprehension language cl section put pieces define functional programming language collection types call comprehension language cl 
program sequence declarations variables functions define id define id 
id id variable function identifiers 
variable declaration form define expression function declaration form define 
patterns expressions 
recursively defined functions allowed cl syntax expressions depends type 
consider built operations associated base types allow numeric expressions boolean expressions conditional boolean expression type 
set aggregate functions conversion functions different collection types assumed 
expression type fj jg provided expression type fg sum expression type int expression type 
interesting syntactic constructs expressions associated collection types record variant types 
construct record en en expressions extract record construct collection set fe eng inspect collection comprehension syntax 
construct variants expressions 
take apart pattern matching 
patterns kinds variable binding nx constant pattern may arbitrary expression recall expressions contain variable bindings record pattern possibly trailing ellipsis meaning additional fields pn trailing part syntax pn pattern variant pattern pattern 
examples evidence comprehension language express sql provided built functions available 
legitimate question ask additional features nested collections variants functions powerful 
possible compile execute decent performance 
answer surprisingly 
language cl conservativity properties 
suppose consider cl aggregate functions conversion functions consider functions flat normal form relations input output 
queries precisely queries expressible standard relational algebra 
suppose add aggregate functions restrict input output flat relational types 
queries expressible language exactly expressible relational algebra group operator aggregate functions essentially sql 
implications relational algebra sql occur natural fragments cl second queries flat relational type exploit optimization techniques sql relational algebra 
cl deals richer variety data structures non flat input output types optimization interesting issue know cl queries evaluated ptime 
evidence potential clean efficient implementation give section syntax language comprehension language translated 
structural recursion shown queries transitive closure expressible cl reason considering extension comprehension language new construct called structural recursion 
hand forms recursions ad hoc programming constructs natural iterators associated collection types part definitions mathematical objects 
see basic restriction iterators exactly expressive power comprehensions 
introduce notation denotes union sets bag sum adds multiplicity elements result appending lists 
related group operators inserts elements collections ins def fxg sets add def bags cons def lists structural recursion comes different flavors corresponding different ways viewing sets bags lists 
view collection say bag obtained empty bag repeatedly adding elements 
bag fjx jg viewed add add add fj jg 
suggests form iteration compute sum elements bag numbers define sum fj jg sum add nx ns sum uses syntax general recursive definitions patterns collection type mean syntactic sugar instance specific template define fj jg add nx ns case say function defined bags structural recursion insert presentation sri parameters order definition sense bags commutative satisfy condition decomposition nonempty bag add nx ns unique 
similarly define sri sets lists replacing add fj jg counterparts lists sets 
case sets addition idempotent satisfy lists conditions imposed fact structural recursion lists known name fold reduce textbooks functional programming 
sri specific program template 
stress languages considered allows general recursion allow general pattern matching collection types 
contrast general recursion structural recursion terminates 
example function sum constant function commutative idempotent sum correctly defined bags defined lists way sets 
trick necessary compute sum elements set structural recursion compute successive pairs sum structural recursion 
leave details exercise 
elaborate example consider components relation type components part string subpart string components gives direct subparts part 
find indirect subparts apply function computing transitive reflexive closure trc define names union fp part np gamma fp subpart np gamma define compose part subpart part np subpart nq gamma part subpart nr gamma define trc part subpart np gamma trc ins nx ns trc compose trc compose fxg trc second form structural recursion view collection say bag sum smaller bags sums smaller bags singleton bags empty bag reached 
suggests different kind recursion adding elements bag numbers define sum fj jg sum sum ns sum sum similar fashion define function reverse lists define reverse fjj jjg fjj jjg reverse reverse ns ns reverse reverse general form structural recursion union presentation allows define function template define fj jg ns conditions imposed functions lists impose identity associativity 
bags impose addition commutativity sets impose idempotence sri naturally associated sequential processing collections elements collection processed 
contrast naturally associated parallel processing collections divide conquer manner compute divides components phis computes parallel independently compose results 
structural recursion insert presentation sri expressive 
consider definition function 
define function sri define fj jg add nx ns side conditions imposed functions sri annoying 
functions complicated impossible compiler check fact checking undecidable 
important special cases equations automatically satisfied 
fj jg phi sets fjj jjg lists 
restrictive form structural recursion template define fj jg fj jg ns phi ns phi restricted form structural recursion defined 
definition function able chose abbreviate function ext 
meaning ext fjx xn jg phi similarly sets lists 
syntax language going define language stands relation comprehension syntax relational calculus practical relation query languages 
salient point language built restricted form structural recursion ext defined section show ext equivalent comprehensions connection observed wadler 
direction ext nx gamma nv gamma jg conversely ext compile away comprehension syntax simple rules 
fe nx gamma gg def ext function defined nx fe gg 
fe gg def fe gg condition 
stands remaining components generators conditions comprehension 
repeated application rules remove successive components comprehension left simple comprehension fe trivially equivalent feg 
syntax language built ext simplifications ignore variant types collection types sets 
important data structures easily added presentation addition fundamentally affect language 
follows object types types structures built base types record set construction fg stands built types 
language defines different syntactic categories terms having type defined functions having type oe oe types defined 
constrains functions order take functions inputs return functions results 
language 
assume variables tagged type variable type typing rules express syntax properly typed expressions language 
example read rule rec expressions language respective types form expression type 
var const rec rec set fe fg set ext fg fun fun equal comments language 
lambda terms anonymous function definition read function value 
general expression involving 
explicitly typed language 
polymorphic type inference possible justifies presentation practical language type annotations :10.1.1.26.1626

boolean values true false represented fg respectively empty record 
values type simplifies translation comprehensions condition comprehension replaced nx gamma new variable 
conditions generators 
claim cl effectively translated syntax 
full justification fact scope 
seen comprehensions translated expressions involving ext remaining translations removal patterns hard 
example union type function omitting type annotations ext fx union operation works tuple record fields labelled placing fields set applying ext identity function set 
syntax language subject studies see discussion section understood 
extremely useful understanding expressive power optimization strategies comprehension syntax 
ask variable free presentation comprehension syntax just relational algebra serves variable free presentation relational calculus 
fact algebra functions complex objects objects algebra known mathematicians categorical monad products sums :10.1.1.33.5381
construct suggested syntax language authors 
category theory useful tool generalizing mathematical structures unsurprising useful generalizing database structures 
try summarize results reversing development 
structural recursion sets bags lists canonical operations records variants provide powerful programming paradigm database structures 
natural restricted form structural recursion obtain language equivalent comprehension syntax fact language readily compile comprehension syntax 
language associated functional algebra 
comprehension syntax restricted constraining input output types flat relational types sets records 
language expresses precisely queries definable relational algebra 
adding fixed set aggregate operations sum count max comprehension syntax restricting queries input output flat relations obtain rational reconstruction sql 
surprising observation known database languages natural fragments simple powerful functional language connections known database languages scope 
reading subject idea structural recursion database languages suggested properties defined programs structural recursion examined 
comprehension syntax associated algebra studied connection structural recursion algebras studied 
comprehension syntax relational types gives language equivalent relational algebra shown nesting intermediate results 
result kind shows adding bounded fixed point construct comprehension syntax gives relational types inflationary datalog shown nesting intermediate types add expressiveness presence aggregate functions certain generic queries 
results expressive power 
approach different collections languages sets studied bag languages 
shows transitive closure efficiently expressible structural recursion necessarily exponential implementation complex object algebra 
show encode related database languages simply typed lambdacalculus 
possibility comprehension syntax arrays examined 
connections parallel complexity classes studied 
abelson sussman 
structure interpretation computer programs 
mit press 
abiteboul kanellakis 
database theory column query languages complex object databases 
sigact news 
abiteboul beeri 
power languages manipulation complex objects 
proceedings international workshop theory applications nested relations complex objects darmstadt 
bancilhon briggs khoshafian valduriez 
powerful simple database language 
proceedings international conference large data bases pages 
bancilhon cluet delobel 
query language object oriented database system 
proceedings nd international workshop database programming languages pages 
morgan kaufmann 
jos 
oql extending object query capability 
database challenges won kim ed acm press addisonwesley appear 
breazu tannen buneman naqvi 
structural recursion query language 
proceedings rd international workshop database programming languages greece pages 
morgan kaufmann august 
breazu tannen subrahmanyam 
logical computational aspects programming sets bags lists 
lncs proceedings th international colloquium automata languages programming madrid spain july pages 
springer verlag 
breazu tannen buneman wong 
naturally embedded query languages 
lncs proceedings th international conference database theory berlin germany october pages 
springer verlag october 
buneman ohori 
polymorphism type inference database programming acm transactions database systems appear 
buneman 
fast fourier transform database query 
technical report ms cis department computer information science university pennsylvania philadelphia pa march 
codd 
relational model large shared 
communications acm june 
gunter libkin functional database programming language support disjunctive information technical memo bl 
hillebrand kanellakis mairson 
database query languages embedded typed lambda calculus 
proceedings th ieee symposium logic computer science pages montreal canada june 
iso 
standard 
information processing systems 
database language sql 
jensen wirth 
pascal user manual report 
springer verlag berlin nd edition 
libkin wong 
semantic representations query languages 
proceedings th acm symposium principles database systems pages washington may 
libkin wong 
properties query languages bags 
proceedings th international workshop database programming languages manhattan new york springer verlag 
libkin wong 
aggregate functions conservative extension linear orders 
proceedings th international workshop database programming languages manhattan new york springer verlag 
libkin wong 
bounded degree property finite graph queries 
technical report ms cis university pennsylvania december 
libkin wong 
conservativity nested relational calculi internal generic functions 
information processing letters appear 
milner tofte harper 
definition standard ml 
mit press 
object design burlington ma 
object store manual 
ohori buneman breazu tannen 
database programming machiavelli polymorphic language static type inference 
proceedings acm sigmod international conference management data pages portland oregon june 
paredaens van gucht 
converting nested relational algebra expressions flat algebra expressions 
acm transaction database systems march 
remy 
typechecking records variants natural extension ml 
proceedings th symposium principles programming languages pages 
suciu 
fixpoints bounded fixpoints complex objects 
proceedings th international workshop database programming languages manhattan new york 
suciu breazu tannen 
query language class nc august 
manuscript available suciu saul cis upenn edu 
suciu paredaens 
algorithm complex object algebra needs exponential space compute transitive closure december 
manuscript available suciu saul cis upenn edu 
turner 
miranda non strict functional language polymorphic types 
jouannaud editor lncs proceedings conference functional programming languages computer architecture nancy pages 
springerverlag 
ullman 
principle database systems 
pitman nd edition 
wadler 
comprehending monads 
mathematical structures computer science 
watt trinder 
theory bulk types 
fide technical report glasgow university glasgow qq scotland july 
wijngaarden 
revised report algorithmic language algol 
acta informatica 
wong 
normal forms conservative properties query languages collection types 
proceedings th acm symposium principles database systems pages washington may 
