technical report recursion computational effect daniel friedman amr sabry december computer science department indiana university bloomington indiana recursion computational effect daniel friedman amr sabry december launchbury lewis cook observe haskell applications benefit combinator mfix expressing recursion monadic types 
investigate possible definitions mfix implement haskell 
traditional fixpoint operators approaches definition mfix unfolding mathematical semantics updating operational semantics 
definitions equivalent pure calculi different behaviors monads 
unfolding version easily defined haskell restricts fixpoints function types 
updating version challenging define haskell despite fact definition straightforward scheme 
studying scheme definition detail mirror haskell primitive unsafeperformio 
resulting definition mfix appears proves unsafe sense breaks essential properties purely functional subset haskell 
conclude updating version mfix treated monadic effect 
observation leads safe definition monad transformers pinpoints exposes subtleties combining recursion effects puts programmer control resolve needed 
haskell applications need functionality mfix written safely haskell dialect supports multiparameter classes necessary defining monad transformers 
extensions standard haskell needed syntactic abstractions libraries task writing recursive monadic bindings convenient 
supported national science foundation number ccr 
started university oregon 
haskell computational effects isolated monadic sublanguage 
isolation useful preserve properties purely functional sublanguage example call name denotational semantics haskell coincides callby need implementation despite presence effects 
isolation implies constructs functional sublanguage available monadic sublanguage 
notably monadic sublanguage lacks recursion results monadic actions 
launchbury argue lack recursion somewhat limits language 
applications naturally written systems mutually recursive stream computations monadic infrastructure 
suggest inclusion new monadic combinator mfix express recursion results monadic actions delegate topic research 
investigate definitions mfix show implement haskell 
recursion unfolding updating literature explains recursion ways 
mathematical view maintains recursive definition fix equivalent infinite unfolding 
operational view dates back landin secd machine currently implemented scheme explains recursive definition fix sequence steps 
take fresh cell address 
spurious argument evaluate application produce result 
update contents address return result 
functional performs computational effects views recursion equivalent 
formally investigated ariola empirically validated compiler rewrite form definition generic analyses optimizations 
informally notes application known perform computational effects may confuse value perform update evaluating 
simplification operational definition fix reduces evaluating graph fix gamma oe just efficient representation unfolding definition 
equivalences hold pure calculi equivalence views recursion hold language computational effects scheme monadic sublanguage haskell 
investigate approaches 
fact define implement fixpoint constructs define recursive monadic bindings ffl combinator unfolds recursive definitions restricted function types 
behavior different combinators updating view recursion 
ffl construct uses unsafe primitives realize updating view recursion 
show violate purity haskell 
ffl combinator monadic version 
correct updating combinator define recursive monadic bindings haskell 
embedding haskell combinator straightforward define haskell willing restrict fixpoint operator function types 
diverges applied interesting situation 
attempting define updating versions mfix haskell study idea context scheme 
scheme long provided updating version recursion presence effects scheme community aware subtleties combining recursion computational effects 
particular folklore scheme community update definition recursion exploited define full fledged cells presence call cc 
idea computational effects duplicate update defining recursion provides insight needed show break fundamental properties purely functional subset haskell 
intuitively updating step definition recursion may duplicated operations list monad performed times unspecified order 
problems suggest recursion effect confined monadic sublanguage 
define combinator exposes recursion explicit monadic effect 
intuition state monad manipulate location needed implement recursion 
fixpoint functional performs computational effects monad monads take care 
fortunately possible combine monads monad transformers :10.1.1.17.268
situations combination monad state monad recursion straightforward 
general combination may require nonstandard operation lift computations monad combined monad 
continuation monad possible lift call cc way updates happen continuation captured visible continuation invoked 
list monad models non deterministic computations possible updates happen branch non deterministic computation visible branches 
monad transformers subtleties combining recursion computational effects better understood explicit programmer control 
particular longer possible recursion effects happen unspecified orders confined monadic sublanguage 
programmers customize recursion interacts monadic actions 
recursion effects implementation recursion presence arbitrary computational effects long known semantics combination long poorly understood 
languages impose restrictions combination recursion computational effects 
sml right hand side recursive declaration syntactically restricted function guarantees evaluation cause computational effects 
objective caml guarantee achieved slightly weaker restriction language allows recursive declarations constructor applications 
haskell recursion generally available monadic types behaved monads state monad 
contrast languages scheme allows arbitrary expressions recursive declarations 
attempt know mathematically study semantics letrec scheme unpublished note duba felleisen study restricted pure fragment scheme 
recasting recursion effects world monads reduces problem understanding combination recursion computational effects problem combining monads 
problem understood mathematically studied extensively 
outline section reviews monads haskell motivates need mfix 
section investigates unfolding definition provides example 
section updating definition recursion scheme analyzed 
section mirrors scheme definition haskell unsafe primitives 
section gives monad transformer definition 
section provides complete examples 
section discusses related section concludes 
monadic effects haskell reviewing existing support monads haskell motivate need mfix 
definition monads characterized equivalent ways 
haskell defined type constructor functions return 
functions mediate worlds values effects computations may computational effects return coerces value trivial computation computations sequentially 
haskell syntax type constructor associated operations collected type class follows class monad return 



individual monads input output state continuation instances monad type class 
discuss definitions monads 
continuation monad continuation monad defined follows data cont ans cps 
ans 
ans cps instance monad cont ans return cps 
cps cps 

type monadic computations parameterized type ans answers 
continuation monad interesting ways define functions manipulate continuation non standard ways abort ans 
cont ans abort cps 
callcc 
cont ans 
cont ans 
cont ans callcc cps 

cps 
prompt cont ans ans 
ans prompt cps id simple example expression evaluates prompt return 
abort 
return notation gets quickly cumbersome haskell provides form syntactic sugar 
notation write prompt return abort return list monad list monad supplied haskell standard library defined follows instance monad return concat map monad models non deterministic computations may return zero results 
possible answers computation propagated list data structure serves type monadic computations 
list monad interesting perspective relies pun lists data structures lists monadic computations 
pun prove problematical presence updates due recursion 
state monad implement state monad haskell definition data st st 
st instance monad st return st 
st st 
type monadic computations function mapping input store output store value 
monad arranges store passed inefficient 
inefficient implementation haskell systems provide built state monad 
built state monad hides type store uses global store implements associated operations destructive updates 
hugs state monad operations creating reading updating cells called 
built state monad hugs provides additional constructs runst 
construct fixpoint operator specializes mfix state monad 
explain semantics add functional implementation state monad 
st 
st st 
combinator propagates store usual function takes incoming store resulting store returned 
recursion performed value part result passed back second construct provided hugs runst encapsulates computation 
explain semantics add functional implementation state monad 
assume defined appropriately semantics runst runst st 
runst st intuitively runst takes computation runs initial empty store ignores resulting store returns value type close examination runst reveals introduce dangling pointers 
example function body mentions created computation returning value ignoring store dangling 
address problem type system augmented track lifetimes reject encapsulation terms may import export 
detailed analysis encapsulation justification necessary purposes aware augmented type system 
augmented type system computations built state monad type st rho rho type variable enforcing encapsulation 
type store associated operations implemented destructive updates 
change previous description rho infects operations 
cell holding values type type rho 
recursion monads strengths haskell naturally supports modeling deterministic networks processes 
networks usually specified systems recursive equations streams task haskell ideal 
generally want specify networks systems recursive equations monadic type 
example specifying hardware circuits systems recursive equations monad circuits possible different implementations monad generate net lists low level tools manipulate generate logical formulae input theorem prover simply execute code simulation testing 
unfortunately haskell constructs defining recursive equations monadic type 
remedy situation launchbury propose haskell extended special fixpoint operator monadic types mfix monad 


mentioned section state monad specialized version mfix called 
monads hard define specialized versions mfix 
challenge find generic definition mfix works monads 
unfolding recursion explore definition mfix unfolding 
definition called 
types usual equation defining fixpoints call name need language haskell fix fix adapting equation directly sense typing perspective 
recall type monad 


obvious way proceed rewrite fixpoint equation monadic combinators function application notation sense far types concerned completely useless diverges interesting situation 
follows combinator usually strict left argument 
delaying evaluation lost 
problem equation reminiscent problem defining combinator call value language 
remedy explicitly delay argument expansion 
employ approach 
computing fixpoints arbitrary types compute fixpoints types 
expansion sense type fun 
monad 
fun 
fun 
fun return 
unfolding recursion delayed function avoid non termination problem expense restricting fixpoints function types 
definition identical labeled 
example illustrate define recursive functions presence effects 
example variant familiar factorial function keeps track number recursive calls performed type rho int 
st rho int int rho 
st rho rho fact return 
nc return nc pr nc fact nc return pr nc st rho rho type factorial function rho function takes integer returns computation uses store evaluates pair integers result mathematical factorial number calls 
factorial function defined fixpoint functional 
functional performs computational effect allocating cell call factorial updates cell 
variant factorial performs effects called monadic expression 
example write runst fact fact fact fact return calls factorial times collects results tuple 
expression evaluates clearly shows unfolding nature calls fact allocates new cell 
example reasonable behavior desirable situations allocate cell computed 
behavior achievable scheme updating version recursion 
example expression letrec fact box lambda nc unbox values nc call values lambda fact lambda pr nc set box 
nc values pr nc lambda call values lambda fact lambda vr vc cons vr vc list evaluates interestingly replacing haskell code produces answer shows behavior consistent updating version recursion 
scheme investigate updating versions mfix 
embarking definition haskell concrete starting point look implementation recursion scheme 
analysis explains subtleties informal definition landin 
definition scheme report allows recursive definitions form letrec 
xn en syntactic restrictions expressions en 
words evaluation right hand sides may perform computational effects 
simplicity focus attention case righthand side body just semantics letrec precise expansion letrec void set 
definition accurate specification updating definition recursion informal specification landin 
assignment conversion denotational semantics scheme shows language uses implicit locations variable binding implicitly allocates location variable implicitly dereferences associated location 
locations explicit translation called assignment conversion standard part scheme compilers 
typically explained follows lambda 
set 

lambda box 
unbox 
set box 
translation introduces cells hold values assigned variables 
important occurrence gets replaced expression unbox evaluating expression unbox sharing value incorrect 
translation simplifies phases compiler values may freely substituted variables checking variables assigned 
applying transformation definition letrec get letrec box void set box 
direct way expressing translation access parse tree 
notation stands result substituting free occurrence unbox occurrence expression form set 
set box 

attempts express part substitution lambda unbox incorrect call value parameter passing mechanism value needed soon 
assumed call need parameter passing mechanism eventual target language haskell function application wrong time value encountered expression unbox evaluated subsequent uses share value 
course presence substitution problem transformation done compiler access parse tree transformation just expressed source source translation 
special form combinator letrec special form tempting combinator correspondence mfix direct 
attempt natural definition letrec incorrect assignment conversion produces box void unbox set box 
clear location dereferenced prematurely 
possibility combinator version proposed honsell described essentially equivalent suggested landin exception undefined fun val ref fn 
raise undefined val fn 
definition written ml 
type 




shows definition restricts fixpoints function types 
importantly expansion application functional computational effects duplicated recursive call 
rewriting factorial example section ml produces shows implements unfolding semantics 
avoid problems combinator versions focus special form letrec haskell counterpart 
recursion continuations continuations powerful computational effect represent computational effects equation invalidated computational effect invalidated continuation monad 
insight interaction recursion computational effects gained studying letrec interacts call cc 
examining situation abstractly 
consider expression letrec call cc lambda expression equivalent void call cc lambda set 
turn equivalent void call cc lambda lambda lambda set 
set 
equivalence follows definition letrec 
second equivalence justified axiom describing behavior call cc call cc call cc axiom evaluation context empty intuitively represents part continuation 
call cc left hand side equation captures part continuation call cc capture rest continuation bind continuation bound procedure invoked aborts calling context re installs part continuation represented rest continuation represented close examination scheme code fragment reveals important point assignment tie recursive knot exported user code part continuation 
suggests judicious manipulation continuation may cause update tie recursive knot happen 
part folklore scheme community exploited simulate cells 
code illustrates idea define lambda letrec call cc lambda dk list lambda letrec ms lambda msg case msg read write lambda nv call cc lambda rk dk list rk nv ms ms car define lambda cadr caddr read define lambda nv caddr write nv void code cell represented list elements element procedure forwards clients second element contains current value third provides methods read contents update new value 
uses call cc captures update definition letrec order implement updates 
second call cc arranges new updated cell returned caller 
see code action consider test expression define test lambda lambda lambda add evaluation test produces expected result correct implementation 
important purposes continuation effects interfered definition recursion caused update define recursion happen 
idea exploited move haskell 
haskell implementation study recursion scheme resulted facts ffl locations explicit assume right hand side include assignments variable defined definition letrec letrec box void unbox set box 
expression unbox denotes substitution free unbox 
ffl computational effects may interfere definition recursion unexpected ways 
particular possible assignment define recursion happen certain conditions 
fact guide implementation construct haskell 
second fact show breaks purity haskell 
types goal define construct types components expected 
assuming type expression type 
expression type unsafe primitives intent extend haskell construct definition mirrors definition letrec scheme 
definition uses freely defined haskell source language definition relegated compiler runtime system unsafe primitives 
hugs runtime system define unsafe primitives manipulating follows ref 
ioref ref unsafeperformio deref ioref 
deref unsafeperformio setref ioref 

setref unsafeperformio combinator unsafeperformio enables computational effects outside monadic sublanguage inherently dangerous define function casts types 
time worry intend primitives define primitive construct 
simplicity focus simple case righthand side body just variable 
rewriting scheme definition monadic combinators function composition get return ref error undefined deref return seq setref function seq addition haskell sequencing operator strict argument 
naturally assume unsafe primitives directly appear sufficient part substitution 
breaking purity section showed possibility computational effects may duplicate update define recursion 
continuation monad simulate cells scheme 
see section variant code haskell 
disturbing fact cells constrained continuation monad 
doing trick list monad exploiting pun lists data structures lists monadic computations possible happen unpredictably 
consider expression xs xs xs return xs rewriting steps call need calculus symbolically follow evaluation follows definition ref error undefined deref deref return seq setref expanding list monad ref error undefined concat map 
seq setref deref deref definitions map concat ref error undefined deref seq setref deref seq setref symbolic evaluation shows result list expressions evaluate list integers 
update implement recursion mapped outermost list 
show judicious lazy evaluation cause updates happen unpredictably 
example consider sequence demands ffl demand element list numbers assigns returns 
ffl demand elements second list numbers assigns returns 
ffl go back demand second element list numbers 
forces evaluation deref 
just overwritten returns list element 
switched steps keeping demands list numbers contiguous evaluation deref returned list element 
idea possible construct haskell context breaks commutativity addition context add xs xs xs return xs bl take take take bl add evaluating context gives answer evaluating context gives answer 
unacceptable 
recursion effect obvious common implementation recursion updates recursion computational effect 
freely effect interacts unpredictable ways effects 
haskell language solution standard confine recursion effect monad 
motivates definition 
correct safe definition basic idea define state monad perform update needed implement recursion 
defines monad transformer takes monad combines state monad yield new monad perform effects define updating version recursion 
turn details 
monad transformers presentation monad transformers closely follows liang :10.1.1.17.268
monad transformer takes monad produces new monad 
example state monad transformer take continuation monad produce state continuation monad may assignments jumps 
challenge defining monad transformers non trivial computations underlying monad applying state monad transformer continuation monad functions abort callcc prompt need lifted operate combined state continuation monad 
postpone definition function lift just state required signature monad transformers class monad monad 
monadt lift 
definition states known monads monad transformer 
additionally monad transformer function lift appropriate type map computations computations 
definition type class parameters non standard haskell 
combining monads having definition monad transformers place define specific monad transformer takes arbitrary monad combines state monad implementing recursion 
computations monad combining state described datatype data stm stm 
stm computations state transformers usual take input store return output store value 
different output store value returned directly 
returned computation monad result output store value 
keep things modular introduce class describes type stores acceptable arguments stm type loc int class store 
alloc 

loc look 
loc 
upd 
loc 

type store describes stores represented type list locations values contents type operations require stores standard obvious meaning 
convenience class definition uses functional dependency functional dependencies added hugs way resolve ambiguity problems multi parameter classes 
putting things build new monad monad store store follows instance monad store 
monad stm return stm 
return stm stm 
new monad computations type stm 
definitions return subtle appear overloading 
example definition return appears refer careful examination types reveals fact different occurrences overloaded name 
return defined monad stm return right monad stm monad monad follows stm monad transformer instance monad monad stm 
monadt stm lift ma stm 
ma return complete definition monad transformer provide default definition lift 
definition shows lift takes computation ma underlying monad initial store executes computation underlying monad returns old store unchanged irrespective happened execution ma 
soon see may appropriate operations 
adding recursion monad surprisingly monadic effects implement update needed recursion affects types 
consider definition return ref error undefined deref return seq setref assume variable type variable type ioref 
unsafe version deref expression deref type substitution sense 
state monad implement deref type deref st 
substitution ill typed 
regain typing change type match type deref 
changes type fixpoint construct 
intuitively monads forces effects infect types clients recursion combinator aware effects 
consequence monadic style unsafe side effecting expression deref replaced state transformer function takes store looks value store 
means safely express substitution function application duplicating sharing value equivalent call need calculus 
place define 
monad stm monad transformer add state implement resulting monad 
class describes resulting monad 
class monad 


type reflects fact effects implement recursion explicit 
detail functional fixed point type 
combination original monad state monad 
domain functional type involves computation reads location holding initially undefined result recursion 
range functional type functional performs computational effects original monad operations lifted combined monad body functional may access location holding result recursion 
entire application functional type application functional performs effects performs assignment location holding result recursion 
putting ideas instance monad store 
stm stm 
alloc error undefined stm 
return look return upd definition uses operations alloc look upd come store type 
closely follows operational definition recursion uses proper monadic style unsafe primitives 
correctness prove formal results 
informally argue correctness follows 
updating definition recursion due landin implemented scheme taken granted 
starting scheme definition derived steps 
assignment conversion locations explicit 

translation expressions including assignments state monad 

combining state monad monad 
steps understood argue definition correctly implements updating definition recursion 
section shows behaves expected complex examples 
examples examples 
different type possible directly reuse old examples 
certain amount needed 
detail previous examples assumed recursion effect implicit effect 
recursion explicit monadic effect code uses recursion converted monadic style 
functional store examples refer type instance class store implements stores 
completeness include code type loc instance store alloc length look case lookup just 

error look upd case 
error upd 

upd factorial revisit factorial function uses cell count number times called 
rewrite code monadic style 
relevant type definitions type rho rho type rho stm rho st rho data rho int 
rho int int define store recursion 
store hold value describing modified factorial function 
value type rho takes integer returns computation may perform side effects return pair integers 
element pair result factorial second number calls 
computation occurs monad described augments built st monad recursion 
need decide operations built state monad interact recursion store 
default behavior lift provides interaction appropriate 
rho rho lift rho 
rho lift rho 

rho lift 
case runst slightly complicated encapsulation provided runst forall rho 
rho 
sf stm sf runst returnst run computation combined monad pass empty recursion store get computation underlying state monad 
unfortunately computation directly passed runst result computation contains recursion store mentions universally quantified type variable rho 
get explicitly run state computation throw away recursion store 
preliminary steps done actual factorial function straightforward write 
syntactically identical version section course minor syntactic differences major semantic consequences 
point important suggests overhead burden 
return 
nc return nc fact pr nc fact nc return pr nc test fact fact fact fact return expected test expression evaluates continuations example simulates cells continuations exploit update defining recursion 
proceed steps previous section 
relevant types type box type stm cont int data msg read write int type sender box 
box type contents int type methods msg 
box data box box sender contents methods types express fact fixpoint interested computing type box combining recursion continuation monad 
decide operations continuation monad interact recursion store 
prompt situation runst supply initial empty recursion store run computation continuation monad throw away recursion store return resulting value 
call cc choices continuation captured recursion store updated continuation invoked invocation original store updated store 
standard semantics call cc continuation invocation takes updated store choice clearly programmable needed 
case default lift operation appropriate 
int 
int stm prompt return 


stm 
callcc 

stm 
preliminary decisions scheme code section easily adapted haskell contents 
box 
box dk 
return box 
return ms read ms write nv rk 
dk box rk nv ms ms contents 
box box box 
int box ms box ms read return box 
int 
box ms nv ms write nv return test expected expression test evaluates 
lists goal understand subtleties combining non determinism recursion mentioned section 
rewrite example section properly monadic style study evaluation 
original example xs xs xs return xs usual giving types fixpoint combined monad type type stm data base cons int declarations state new monad combines recursion list monad type fixpoint 
type essentially list integers may contain location holding result recursion 
examine lift operations list monad 
operation example takes collection elements returns nondeterministic computation result elements 
confusing collection elements non deterministic computation represented list data structures 
lifted version arrange non deterministic computation take recursion store distribute possible values 
default lift operation achieves llist 
llist lift original example rewritten non deterministic recursive computation xs 
llist cons base xs cons base xs far surprises 
explained section start demanding elements list produce different answers 
moving monadic style sequence demands explicitly encoded happen implicitly versions addition evaluate arguments different orders 
explicit ways extract lists integers monadic computation 
int stm rs fp return rs fp 
int stm svs map fp 
fp svs 

int rs cons fp rs fp rs base stm rlf rs fp rlf rs rs fp function provides initial empty store nondeterministic computation uses monadic combinators distribute store possible answers 
causes possible branch non deterministic computation get copy store 
interactions happen various branches non deterministic computation 
map take evaluates distributed fixpoint computation list 
contrast provides empty store non deterministic computation exploits pun lists monadic computations data structures 
uses regular list operations access leftmost store distributes store branch non deterministic computation 
result get behavior 
expression map take evaluates apparent second non deterministic branch store supplied branch 
exhibits behavior interference branches non deterministic computation broke purity haskell section 
different results occur explicitly different contexts problem 
related closely related concurrent investigation mfix launchbury 
pursuing operational understanding recursion updates pursue axiomatic approach 
postulate axioms characterize behavior mfix take starting point 
show axioms satisfied individual monads called recursive monads invariant monad embeddings 
successfully provide definitions mfix individual monads question axioms really describe behavior mfix 
particular second axiom postulate odds continuation effects 
axiom mfix 


mfix 
free intuitively axiom states computation involve recursion variable lifted recursive definition 
long time ago bawden wondered message scheme mailing list 
real compilers mistaken optimization 
familiar continuations note mention perform arbitrary computational effects particular possible capture continuation 
situation sides axiom equal 
left hand side continuation captured recursive definition re bind new value right hand side continuation captured outside recursive definition interfere 
launchbury show continuation monad recursive 
treatment recursion list monad deserves discussion 
approach shows recursion list monad may produce different results depending amount interference different branches nondeterministic computation 
postulated axioms just strong eliminate interference 
example definition mfix list monad produce result example section 
definitions mfix individual monads consider appear agree generic 
formal proofs correspondence immediately possible final different type 
course specializing mfix individual monads provides elegant definitions 
motivated problem posed launchbury explained haskell combine recursion monadic programming extensions language multi parameter classes 
solution simply adapt operational definition recursion haskell allocate cell hold result recursive declaration evaluate declaration update cell result 
adaptation relies monad transformer combines monad facilities handling effects recursion 
approach requires changes language convenient efficient extensions 
particular programming recursive definitions explicitly mfix variants intuitive notation proposed launchbury 
code needed implement monad transformers encapsulated library 
extending range haskell applications suggests mathematical approach studying poorly understood combination recursion computational effects 
studying recursion combination mild effect sharing challenging combinations appear studied 
explaining recursion monadic effect may open door manageable approach combining monads 
example may possible formally characterize computational effects interfere recursion ones lifted naturally 
study recursion computational effects applications compiling 
particular simplifies derivation call need continuation passing style transformation brings closer worlds compiling call value callby need languages 
acknowledgments benefited discussions john launchbury 
abelson dybvig haynes iv friedman kohlbecker steele jr halstead sussman brooks hanson pitman wand revised report algorithmic language scheme 
higher order symbolic computation aug 
ariola relating graph term rewriting bohm models 
applicable algebra engineering communication computing 
ariola arvind 
properties order functional language sharing 
theoret 
comput 
sci 

ariola blom cyclic lambda calculi 
international symposium theoretical aspects computer software tacs 
ariola felleisen odersky wadler call need lambda calculus 
acm sigplan sigact symposium principles programming languages acm press new york pp 

ariola klop cyclic lambda graph rewriting 
proc 
eighth ieee symposium logic computer science paris 
barendregt lambda calculus syntax semantics revised ed vol 
studies logic foundations mathematics 
elsevier science publishers amsterdam 
bawden letrec callcc implement 
appeared comp lang scheme 
erk ok launchbury recursive monadic bindings 
acm sigplan notices sept 
espinosa semantic lego 
phd thesis columbia university 
filinski representing monads 
acm sigplan sigact symposium principles programming languages pp 

hasegawa models sharing graphs categorical semantics letrec 
phd thesis university edinburgh 
honsell mason smith talcott variable typed logic effects 
information computation may 
jones duponcheel composing monads 
tech 
rep yaleu dcs rr department computer science yale university dec 
kahn semantics simple language parallel programming 
proceedings ifip congress rosenfeld ed north holland pp 

kranz kelsey rees hudak philbin adams orbit optimizing compiler scheme 
acm sigplan symposium compiler construction sigplan notices pp 

landin mechanical evaluation expressions 
comput 

landin calculus approach 
advances programming computation fox ed pergamon press pp 

launchbury lewis cook embedding microarchitectural design language haskell 
acm sigplan international conference functional programming acm press new york pp 

launchbury peyton jones state haskell 
lisp symbol 
comput 

launchbury sabry monadic state axiomatization type safety 
acm sigplan international conference functional programming acm press new york pp 

liang hudak jones monad transformers modular interpreters :10.1.1.17.268
acm sigplan sigact symposium principles programming languages pp 

moggi view programming languages 
tech 
rep laboratory foundations computer science department computer science university edinburgh edinburgh eh jz 
moggi monadic encapsulation effects revised approach 
third international workshop higher order operational techniques semantics oct 
reynolds simple typeless language principle completeness concept 
communications acm 
taming operator 
acm conference lisp functional programming acm press new york pp 

sabry purely functional language 
functional programming jan 
sabry felleisen reasoning programs continuationpassing style 
lisp symbol 
comput 

acm conference lisp functional programming tech 
rep rice university 
sabry monadic encapsulation ml 
acm sigplan international conference functional programming acm press new york pp 

steele jr building interpreters composing monads 
conference record popl st acm sigplan sigact symposium principles programming languages portland oregon jan acm pp 

turner new implementation technique applicative languages 
software practice experience 
wadler comprehending monads 
acm conference lisp functional programming pp 


