framework evaluating specification methods reactive systems experience report appeared proceedings international conference software engineering april mark john jategaonkar jagadeesan peter carlos mark james von bell laboratories il usa numerous formal specification methods reactive systems proposed literature 
significant differences methods hard determine choosing best method particular application difficult 
applied different methods including esterel basic lotos sdl application problem encountered design software ess telephone switching system 
developed set criteria evaluating comparing different specification methods 
argue evaluation method take account academic concerns maturity method compatibility existing software development process system execution environment suitability chosen application domain 
reactive system continually respond stimuli environment 
enormous number possible sequences stimuli handle design reactive system notoriously difficult testing exercise small fraction possible execution scenarios system subtle errors escape detection cause havoc implemented system 
formal methods represent promising approach obtaining confidence correctness reactive system 
formal methodology reactive system design include requirements language specifying properties met system modeling language building high level prototype algorithm reactive system user interactively simulate refine implementation verification method allows user formally prove algorithm written modeling language satisfies properties specified requirements language 
author currently supported fulbright fellowship uni versity texas austin 
described performed author visiting bell laboratories 
reactive systems ubiquitous software ess telephone switching system ms example software establishing tearing telephone calls correctly handle possible sequences events entered caller callee telephone call 
investigating various specification methods reactive systems useful ess software development environment 
order better understand relative strengths weaknesses methods applied design simple protocol drawn actual ess application 
protocol maintains redundant communication channel consisting lines selected communication time 
problem statement consists set requirements stated english define operator commands line state changes affect line selection 
specification methods studied attempted specify protocol requirements construct algorithm method modeling language verify algorithm satisfies requirements 
selected evaluation specification methods jm wag esterel bg basic lotos iso spi sdl programming language chosen point contrast primary language ess software implemented :10.1.1.17.5606
chose particular methods represent cross section extant reactive system specification techniques authors proficient method seen significant usage industry possesses level maturity warrants consideration large scale software development 
developed set criteria help evaluate specification methods assess important similarities differences 
course discovered compatibility method ess software development environment important technical characteristics method 
list criteria includes normally considered specification researchers presence defined semantics included deem essential successful integration method actual software development process 
example legacy software systems ess switch current software projects involve design re engineering modules interface existing code base crucial new methodology ultimately result code executes modification existing operating system environment 
related gerhart gcr put forth set criteria evaluating formal methods general lewerentz lindner ll collected case studies application formal methods reactive systems specification common design problem 
differs choice application problem evaluation criteria specific particular system software development environment ess switch software representative large class legacy software systems results methodology study wide applicability 
hope interest software developers language designers interested application formal methods large scale software development 
remainder organized follows 
section state problem applied specification methods 
section contains overview method brief description solve problem 
section define criteria base evaluation methods section 
conclude section summary learned study 
aps problem collaboration software development project discovered simple problem called automatic protection switching aps bel described terms finite state machines 
idea provide line communication channel 
line degrades fails backup line called protection line 
project chose unidirectional non aps 
strategy protection line allotted working line decision switch lines receiving side unidirectional switch protection line remains effect working line clears equivalent condition non 
standard redundancy method check accuracy transmission messages 
assume number erroneous bits received working line continuously recorded correction messages issue 
protocol take care repair retransmission faulty messages 
line signal considered degraded bit error rate dangerous range typically line signal considered failed bit error rate exceeds degraded range hard failures occurred complete loss signal 
degraded failed line may clear spontaneously 
expected response degraded failed signal working line automatically switch protection line line better condition 
technicians provided set commands change configuration channel remove line line taken service 
restore line line placed service 
forced switch specified line selected communication long service 
conditional switch specified line selected communication long available quality selected line 
protocol needed maintain highest quality communication available responding operator requests signal degradation failure 
way protocol list possible states transitions system table 
produced table prototype specification trying understand requirements 
small problem suffice doubt scale 
method describe general properties aps provable specification protocol satisfies standards 

quality line may expressed exactly values normal degraded failed service 

lines selected 

remove line event occurs working line service goes service 
working line remains service 
behavior remove line event analogous 

restore line event occurs working line service normal 
quality working line change 
behavior restore line event analogous 

forced switch line event occurs working line service selected line 
selection lines remains unchanged 
behavior forced switch line event analogous 

conditional switch line event occurs working line service poorer quality protection line working line selected line 
selection lines remains unchanged 
behavior conditional switch line event analogous 

line degraded event occurs working line normal deteriorates degraded quality 
quality working line remains unchanged 
behavior line degraded event analogous 

line failed event occurs working line degraded deteriorates failed quality 
quality working line remains unchanged 
behavior line failed event analogous 

cleared event occurs working line degraded failed clears normal quality 
quality working line remains unchanged 
behavior line cleared event analogous 

remove line restore line line degraded line failed line cleared event occurs currently unselected line higher quality selected line selection switched 

removing restoring deterioration clearing line affect quality line 

switching selected line affect quality line 

forbidden switch line service lines service 

selected line change result selection changed switch command 
currently selected line deteriorates quality worse line currently selected line goes service 
currently unselected line clears restored quality better selected line 
solutions authors prepared specification satisfied requirements aps problem different language 
reviewed solutions prepared project team aid understanding requirements 
similarities solutions differences 
specification language language specifically designed specification real time systems 
borrows statecharts har hierarchical graphical formalisms extend conventional state transition diagrams :10.1.1.20.461
adds absolute relative timing semantics statecharts transitions 
semantics defined terms rtl real time logic jm logic especially amenable reasoning absolute timing events 
set tools developed specification analysis real time systems framework 
specifications modes transitions 
modes thought hierarchical partitions state space combined parallel serial composition 
basic modes called atomic modes 
serial relationship modes indicates system operates modes time 
serial modes may designate mode initial mode marked thicker initial mode instantaneously entered serial mode entered 
modes parallel case system operates modes simultaneously 
transitions allow system switch mode possibly different levels hierarchy 
transitions modes parallel allowed 
entry parallel mode forces system enter children 
transition mode requires exit modes parallel 
transitions associated expression disjunction triggering expressions timing expressions 
triggering expressions conjunctions external internal events system triggered iff expression true timing expressions form lower bound upper bound time transition takes triggered 
sketches specification aps problem 
specification composed modes automatic protection switching parallel working line serial normal switch serial working serial protection serial initial final degraded failed final initial external environment serial line commands infinity idle infinity switch commands infinity spontaneous line state changes safety serial protection line serial protection line similar working line 
infinity safe unsafe specification aps serial modes lines representing state description problem 
mode modeling environment 
mode switch major states plus auxiliary ones rule possibility instantaneous switching loops auxiliary mode safety express prove system properties simpler way 
conditions transitions switch mode derived state table 
conditions transitions external environment mode model environment specified description problem 
conditions determine system unsafe state obtained properties section 
complete specification formally proved automated toolset conform properties stated section 
properties proved showing system state point computation graph amount time properties formally proved verifier predicates mode exclusion 
virtual finite state machine notation wag allows control behavior software design specified terms states virtual inputs virtual outputs 
term virtual refers fact inputs outputs names local physical messages implementation 
implementation paradigm defines names bound concrete entities implementation 
cmd csw working line better state protection line working line currently selected line ia norm prot prot fail fail prot fail select ns main example state solution receives virtual input stored set known virtual input register vir remains explicitly removed 
state transitions production outputs conditioned presence absence particular inputs vir 
developing specification aps problem represented states lines currently selected line virtual inputs example virtual input possible states working line exactly vir time 
associated states fourteen operator commands line state changes 
shows state handles command conditionally switch working line 
input action ia section virtual output selects working line produced worse state protection line condition expressed terms virtual inputs 
state ns section specifies return main state await command line state change 
toolset includes simulator translator generates code directly specification validator exhaustively checks concurrency deadlock livelock 
validator soon enhanced enable checking user specified properties application similar aps problem listed section 
esterel esterel bg language designed programming reactive systems :10.1.1.17.5606:10.1.1.17.5606:10.1.1.17.5606
synchrony hypothesis states reaction reactive system set inputs theoretically instantaneous 
practice amounts requiring environment reactive system invariant reaction assumption easily satisfied ess environment non normal normal line status process input oos oos normal prev clp normal normal normal prev oos prev oos oos prev line status previous line status previous line selection line status oos design esterel implementation aps preemptive operating systems 
esterel provides facilities specifying parallel components communicate broadcast signals 
strong pre emption operators allow modeling interrupts watchdogs 
due synchrony hypothesis communication pre emption preserve determinism 
furthermore communication compiled away preserving run time efficiency single state machine written generated compiler 
programmers need concerned individual components complex underlying state machine abstraction structure strongly supported esterel 
design esterel implementation aps 
line selection module continually emits signals outside world indicating current line selection line status modules continually emit signals outside world indicating current state lines previous line status modules continually emit internal signals indicating previous state lines 
synchrony hypothesis renders necessary emit signals corresponding previous state 
process input module receives inputs outside world corresponding changes quality lines commands technicians 
signals previous line status modules process input module determines status selection lines change emits corresponding internal signals line status modules line selection module 
furthermore emits signals outside world indicating actions taken lines removal 
development environment age esterel provides editor compiler simulator debugger verifier environment quite useful writing debugging implementation 
furthermore technique developed automatically formally verified properties section verification process state state pon 
rmp state 
fcp state 
csp state 
state pdn 
dgp state wnd 
endproc fragment lotos solution performed entirely esterel 
lotos lotos iso designed protocol specification especially telecommunication domain bl basic lotos part language describes interaction processes terms shared events 
process algebra paradigm process described terms legal sequences events experienced process 
aps requirements table transcribed special finite state machine dialect called primitive lotos ard compiler translated form executable subset basic lotos 
shows process description elided form arguments processes omitted 
describes transitions possible state lines normal working line selected 
line shows possible transition result single event 
example remove working line event occurs system takes transition protection line selected working line service protection line normal 
alternation operator join possible transitions state 
properties easy check informally 
attempt represent properties explicitly described separate lotos processes 
conjoining separate processes running simulator detected potential deadlocks demonstrated inconsistency descriptions 
simulation useful debugging lotos specification 
part simulation generated traces individual scenarios message sequence chart form 
useful discussions domain experts reviewed original project requirements 
fact properties originally expressed scenarios reviewers 
notation spi combines data modeling mathematical toolkit set theory order predicate logic 
conjunction modest structuring specification spontaneous switch response degrade event specified line 
conventions may specify system state valid state changes instantaneously responding reactive system 
construct description aps problem adopted certain structuring naming conventions addition meager conventional semantics loosely objectoriented style specification due hall hal necessary macro generated followed 
addition event semantics suggested zave jackson zj assumed 
built simpler pieces see event described separate schema preconditions guarding illegal operations postconditions specifying outcomes 
structure provided conventions adopted allows natural specification behavior 
cases behavior specification precisely required property 
properties derived specification case straightforward 
technology available reasoning verification routinely automatable process 
principal disadvantage lack simulation 
possible animate specifications written restricted form limited technology available 
development reactive systems simulation appears essential suggests certain styles specification useful 
similar observations apply refinement specification efficient implementation 
sdl sdl mature formal methods telecommunications domain 
evolved include concepts object oriented languages provide state sel working input clear line decision cond line oos cond oos true task nextstate task cond line normal decision line prot cond cond prot true nextstate sel protection nextstate sel working fragment sdl model modularity 
commercial toolsets available sdl facilitate design debugging maintenance 
descriptions actions written language specification may compiled internal sdl tool set supports formal sdl dialect see support object oriented extensions 
style sdl specification divided system states line may selected 
information quality line kept global variables 
incoming events parameter line id event targeted 
sdl model states inputs state 
state event activities performed sequentially check illegal request determine set changed line quality determine set new selected line 
sdl model compiled code validated 
required model properties written sdl temporal logic 
validator hol performs effective state space search possible memory time constraints 
total state space specification quite small exhaustive search possible prove conformance properties section 
different solutions problem written programs useful demonstrating properties evaluated industrial project 
programs fell major classes 
program class simple finite state machine encoded state transition diagram requirements document dimensional array current state event control code merely loop waited new event table look determine new state 
easy code simple check produced prototype table specification requirements 
solution easy maintain long legal state transitions represented table 
course state transition table sparse matrix wasted data space 
large industrial problems typically difficult describe table format second class programs prototype table specification 
observations industrial code natural implement switch structure current state 
state case statement additional switch structure event 
code accomplished functions class implementations larger difficult maintain problem 
state case statement custom logic deal events 
basic concepts repeated split functions 
concepts facility better switch better facility occur 
class solution easy map behavior back individual requirement avoid wasted data space problem 
criteria criteria consider important specification language proposed reactive systems 
grouped criteria categories order criteria appear group arbitrary 
fundamental selection criteria believe important language successful especially ess software development 
important selection criteria believe generally important evidence setting 
aim criteria help assess suitability languages industrial software development reflect concerns arise various phases traditional waterfall model software development 
nature criteria necessarily subjective believe accurately reflect important considerations setting 
fundamental selection criteria applicability technology describe real world problems solutions natural straightforward manner 
technology assumptions environment reasonable benign 
technology compatible physical reality intended system 
particular usability embedded systems specification added component existing specification system 
hardware software compatibility assumptions language supported existing hardware software system 
example specification assumes existence threads certain type communication mechanism message passing shared memory semaphores facilities provided operating system 
implementability reasonable path code specification easily refined translated implementation compatible rest system 
example code generated automatically language dialect rest system 
difficult translation 
automated 
generated code efficient 
furthermore clean defined interface machine generated code manually generated portions implementation 
testability simulation specification test implementation 
statement specification testable implementation 
possible execute specification typically interactively providing input stimuli observing behavior output produced response expected 
domain expert check specification accuracy 
readable specifications domain experts opposed experts technology 
maintainability specification starting point maintenance activities 
easy modifications specification 
modularity method possess simple composition operators allow large specification easily written understood decomposing smaller parts 
possible conceptually small additions changes generalizations specification major rewriting 
level abstraction expressibility closely expressively objects specification describe user point view objects equipment environment domain 
large ratio amount interesting properties system described versus amount extra information detail included doing 
soundness language tools provide support detecting inconsistencies ambiguities specifications 
language precisely defined semantics 
verifiability possible demonstrate formally specification program satisfies properties stated higher level abstraction 
process automated automated 
easy 
run time safety language supports automated code generation resulting implementation degrade gracefully unexpected run time conditions 
tools maturity development tools undergone terms available facilities quality amount quality training available amount support available development time test time run time user base size industrial momentum impetus gained industrial settings 
important selection criteria looseness language permit incompleteness nondeterminism specifications 
learning curve completely new user quickly learn concepts techniques heuristics useful application language 
language maturity development language undergone terms certification amount quality training available user base size industrial momentum impetus gained industrial settings 
data modeling language provide facilities describe data representation relationships abstractions 
provide natural integrated way 
discipline language force users write reasonably behaved programs 
evaluation languages evaluated esterel lotos sdl criteria previous section 
part assessment specification aps problem written languages available toolsets 
toolsets specifications evaluated see fit criteria 
earlier re written larger portions ess software languages 
particular design ess software modules including applications call processing signaling written esterel version alarms software ess switch feature written 
lotos specify various parts telecommunications switching systems including call processing maintenance facilities ard real time switching protocols ess signaling call processing applications written sdl cha written specification set ess subscriber telephone features mz written features ess switch 
emphasize evaluation languages tools reflects aps specifications previous experiences 
findings appear 
symbol indicate particular strength language indicate clear weakness language indicate language meets criterion way adequate ideal 
na indicates criterion applicable language example languages currently support code generation evaluated run time safety 
note ratings highly dependent focus reactive systems may differ types applications 
evaluation indicates trends 
applicability issue implementability testability simulation large problem languages evaluated exception note applicable systems reactive nature 
verifiability proving correctness specification respect requirements strength languages considered obvious exception approaches requirements typically may specified temporal logic may include properties continual progress absence deadlock 
contrary traditional criticism popular perception learning curve problem group researchers developers 
similarly maturity languages tools increased formal methods scoring better critics claim 
surprisingly evaluation suggests maintainability strength languages 
maintainability serious concerns embedded legacy systems ess switch believe issue addressed order formal methods adopted large scale industrial 
criteria related maintainability large scale industrial software modularity discipline large fare partly contribute lack maintainability 
run time safety related criterion score scores category hurt ability languages interface essential applicability ess switch 
regard data modeling languages considered aimed abstractly representing behavior reactive systems accomplished sophisticated data modeling fact data modeling arise application automatic protection switching 
believe plays important role larger problems 
described specifications different formal methodologies simple reactive system part software ess switching system 
proposed set criteria evaluating methodologies takes esterel lotos sdl fundamental criteria applicability implementability testability simulation maintainability modularity level abstraction expressibility soundness verifiability run time safety na na tools maturity important criteria looseness learning curve language maturity data modeling discipline account specific characteristics large scale software development projects criteria evaluate methodologies 
clear winner sense methodology dominates criteria 
evaluation reveals insights selected methods 
suited chosen specification task ratings reflect 
primarily requirements language data types offer modeling language scores poorly criteria implementability testability simulation 
contrast certainly provides modeling language great expressive power facility specifying high level requirements low marks level abstraction expressibility 
remaining methods offer modeling languages support specifying verifying high level requirements 
methods compared amount expressive power provide 
tradeoff expressive power ease understanding 
dialect lotos simplest expressive methods essentially equivalent finite state automaton 
easily comprehended non experts specification quite monolithic unstructured simple extensions problem adding communication line greatly increase size specification 
sdl finite state automata adds modest extension top ba strength adequate weakness na applicable evaluation languages criteria sic fsm model adds serial parallel modes sdl adds simple data structures adds virtual input register 
increases expressive power result better structured solutions aps problem methods able represent states communication lines currently selected line independent parts solution combining single state variable 
increases expressive power extend size problem methods comfortably applied sufficient allow modular structuring large reactive systems 
esterel clearly expressive provides powerful set communication abstraction mechanisms structuring reactive program collection interacting components scales best large application problems 
features constructs esterel suggest relative methods larger amount expertise required able understand construct esterel specifications 
aps case study sufficient evaluations technologies fully exercise criteria interest 
example maintainability best judged making modifications problem observing different solutions adapted accommodate changes 
pursuing second phase case study elaborate findings investigate criteria interest 
pleasure acknowledge help colleagues bill peter dave introduced aps 
mary zajac david weiss jan support conducting study 
david weiss anonymous referees help improving presentation 
age workshop manual version 
produced ilog 
ard 
lessons basic lotos 
th international conference software engineering pages 
bel bellcore 
synchronous optical network transport systems common generic criteria 
technical report tr issue bellcore 
bg berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 
bl logrippo 
specifying telephone systems lotos 
ieee communications pages august 
cha john 
formal methods industrial usage report 
parker rose editors formal description techniques iv pages 
north holland amsterdam 
clements heitmeyer rose 
mt toolset specifying analyzing realtime systems 
ieee real time systems symposium december 
flora holmquist grady 
telecommunications software design virtual finite state machines 
proc 
intl 
switching symposium iss berlin germany april 
appear 
gcr gerhart craigen ralston 
experience formal methods critical systems 
ieee software january 
hal hall 
specification calculus objectoriented systems 
bj rner hoare langmaack editors vdm formal methods software development pages 
springer verlag 
har harel :10.1.1.20.461
statecharts visual formalism complex systems 
technical report weizmann institute science july 
hol holzmann 
practical methods formal validation sdl specifications 
computer communications pages march 
iso iso 
lotos formal description technique temporal ordering observational behavior 
iso 
international standard iso 
itu 
message sequence chart 
recommendation 
itu 
specification description language sdl 
recommendation 
jahanian lee mok 
semantics real time logic 
proc 
st hawaii international conference systems science 
jm jahanian mok 
safety analysis timing properties real time systems 
ieee transactions software engineering 
jagadeesan von 
formal approach reactive systems software telecommunications application esterel april 
appear proceedings workshop industrial strength formal specification techniques 
jagadeesan von 
safety property verification esterel programs applications telecommunications software 
preparation 
ll lewerentz lindner 
case study production cell comparative study formal specification verification 
technical report forschungszentrum informatik 
ms spencer 
ess tm switching system 
technical journal part july august 
mz zave 
formal specification telephone features 
bowen hall editors user workshop cambridge pages 
springer verlag 
spi spivey 
notation manual 
prentice hall international nd edition 
wag wagner 
executable specification 

zj zave jackson 
operations come 
multiparadigm specification technique 
draft available authors 
