advanced computing systems association originally published th usenix conference object oriented technologies systems coots san diego california usa may comprehensive profiling support java virtual machine sheng liang viswanathan sun microsystems usenix association rights reserved rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
information usenix association phone fax email office usenix org www www usenix org comprehensive profiling support java tm virtual machine sheng liang viswanathan sun microsystems san antonio road cup palo alto ca liang eng sun com existing profilers java applications typically rely custom instrumentation java virtual machine measure limited types resource consumption 
garbage collection multi threading pose additional challenges profiler design implementation 
discuss general purpose portable extensible approach obtaining comprehensive profiling information java virtual machine 
profilers framework uncover cpu usage hot spots heavy memory allocation sites unnecessary object retention contended monitors thread deadlocks 
addition discuss novel algorithm thread aware statistical cpu time profiling heap profiling technique independent garbage collection implementation support interactive profiling minimum overhead 
profiling important step software development 
term profiling mean broad sense ability monitor trace events occur run time ability track cost events ability attribute cost events specific parts program 
example profiler may provide information portion program consumes amount cpu time portion program allocates amount memory 
mainly concerned profilers provide information programmers opposed profilers feedback compiler run time system 
fundamental principles profiling different requirements designing kinds profilers 
example profiler sends feedback run time system incur head possible slow program execution 
profiler constructs complete call graph hand may permitted slow program execution significantly 
discusses techniques profiling support java virtual machine 
java applications written java programming language compiled machine independent binary class files executed compatible implementation java virtual machine 
java virtual machine multi threaded garbage collected execution environment generates various events interest profiler 
example profiler may measure amount cpu time consumed method class 
order pinpoint exact cause inefficiency profiler may need isolate total cpu time called ignore calls toa similarly profiler may want measure cost executing method particular thread 
profiler may inform programmer excessive creation object instances belong class 
programmer may want know example instances class allocated specifically useful know majority allocations occur profiler may show certain object garbage collected 
programmer may want know example instance class garbage collected referred instance class referred local variable active stack frame profiler may identify monitors con tended multiple threads 
useful know example threads repeatedly contend enter monitor associated instance 
profiler may inform programmer causes class loaded 
class loading takes time consumes memory resources java virtual machine 
knowing exact reason class loaded programmer optimize code reduce memory usage 
contribution general purpose extensible portable java virtual machine profiling architecture 
existing profilers typically rely custom instrumentation java virtual machine measure limited types resource consumption 
contrast framework relies interface provides comprehensive support profilers built independent java virtual machine 
profiler obtain information cpu usage hot spots heavy memory allocation sites unnecessary object retention monitor contention thread deadlocks 
code instrumentation statistical sampling supported 
adding new features typically requires introducing new event types require changes profiling interface 
profiling interface portable 
dependent internal implementation java virtual machine 
example heap profiling support independent garbage collection implementation useful information wide range garbage collection algorithms 
benefit approach obvious 
tools vendors ship profilers virtual machine implements interface 
equivalently users java virtual machine easily take advantage profilers available different tools vendors 
second contribution introduce algorithm obtains accurate cpu time profiles multi threaded execution environment minimum overhead 
standard technique perform statistical cpu time profiling periodically sampling running program 
known obtain accurate thread cpu time usage majority operating systems provide access thread scheduler high resolution thread cpu timer clock 
cases difficult attribute elapsed time threads running opposed threads blocked example operation 
solution determine thread run sampling interval comparing check sum register sets 
knowledge portable technique obtaining thread aware cpu time profiles modern operating systems 
third contribution demonstrate approach supports interactive profiling minimum overhead 
users selectively enable disable different types profiling application running 
achieved low space time overhead 
virtual machine profiler need accumulate large amounts trace data 
java virtual machine incurs test branch overhead disabled profiling event 
events occur code paths tolerate overhead added check 
result java virtual machine deployed profiling support place 
implemented techniques discussed java development kit jdk 
numerous tool vendors built profiling front ends rely comprehensive profiling support built jdk virtual machine 
introducing general purpose profiling architecture discuss underlying techniques detail 
assume reader familiar basic concepts java programming language java virtual machine 
profiling architecture key component profiling architecture general purpose profiling interface java virtual machine front responsible presenting profiling information 
profiling interface opposed direct profiling support virtual machine implementation offers main advantages profilers profiling information different forms 
example profiler may simply record events occur virtual machine trace file 
alternatively profiler may receive input user display requested information interactively 
second profiler different virtual machine implementations long support profiling interface 
allows tool vendors virtual machine vendors leverage products effectively 
profiling interface providing flexibility potential shortcomings 
hand profiler front ends may interested diverse set events occur virtual machine 
hand virtual machine implementations different vendors may different impossible expose interesting events general purpose interface 
contribution reconcile differences 
designed general purpose java virtual machine profiler interface jvmpi efficient powerful suit needs wide variety virtual machine implementations profiler front ends 
illustrates architecture 
jvmpi binary function call interface java virtual machine profiler agent runs process 
profiler agent responsible communication java virtual machine profiler front 
note profiler agent runs process virtual machine profiler front typically resides different process different machine 
reason separation profiler front prevent profiler front interfering application 
separation ensures resources consumed profiler front get attributed profiled application 
experience shows possible write profiler agents delegate resource intensive tasks profiler front running profiler agent process virtual machine overly distort profiling information 
introduce features java virtual machine profiling interface remainder section discuss features supported java virtual machine sections 
java virtual machine profiler interface illustrates role jvmpi profiler architecture 
jvmpi way function call interface java virtual machine profiler agent 
profiler agent typically implemented dynamically loaded library 
virtual machine function calls inform profiler agent various events occur execution java application 
agent turn receives profiling events calls back java virtual machine accomplish tasks agent may disable enable certain type events sent jvmpi needs profiler front 
agent may request information response particular events 
example agent receives jvmpi event jvmpi function call find stack trace current thread profiler front inform user program execution context 
function calls approach efficient binary interface profiler agent different virtual machine implementations 
sending profiling events function calls somewhat slower directly instrumenting virtual machine gather specific profiling information 
see majority profiling events sent situations tolerate additional cost function call 
jvmpi events data structures consisting integer indicating type event identifier thread event occurred followed information specific event 
illustrate list definition event structure info 
info variant records information invocation garbage collector 
event specific information indicates number live objects total space live objects total heap size 
typedef struct event type jnienv thread id union struct objects object space total object space gc info 
jvmpi event additional details jvmpi documentation shipped jdk release 
agent illustrate power jvmpi show may utilized describe features agent simple profiler agent shipped jdk 
agent dynamically linked library java virtual machine jvmpi events control java virtual machine process shipped jdk 
interacts jvmpi presents profiling information user directly profiler front ends 
invoke agent passing special option java virtual machine java name java application 
note pass option java optimized version java virtual machine 
need rely specially instrumented version virtual machine support profiling 
depending type profiling requested instructs virtual machine send relevant profiling events 
gathers event data profiling information outputs result default file 
example command obtains heap allocation profile running program java heap sites contains heap allocation profile generated running java compiler javac set input files 
show parts profiler output due lack space 
crucial piece information heap profile amount allocation occurs various parts program 
record tells live objects character arrays 
note amount live data fraction total allocation occurred site rest garbage collected 
way relate allocation sites source code record dynamic stack traces led heap profiler agent profiler architecture wire protocol profiler front profiler process allocation 
shows part profiler output illustrates stack traces referred allocation sites 
frame stack trace contains class name method name source file name line number 
user set maximum number frames collected agent 
default limit 
stack traces reveal methods performed heap allocation methods ultimately responsible making calls resulted memory allocation 
example heap profile instances java util hashtable entry class allocated traces originated different methods 
agent built support profiling cpu usage 
example part generated output agent performs sampling cpu time profiling compiler 
agent periodically samples stack running threads record frequently active stack traces 
field indicates times particular stack trace active 
stack traces correspond cpu usage hot spots application 
agent report complete heap dumps monitor contention information 
due lack space list examples agent presents information obtained profiling interface 
ready explain details various profiling interface features supported virtual machine 
sites ordered live bytes wed oct percent live alloc ed stack class rank self accum bytes objs bytes objs trace name char sun tools java identifier java util hashtable entry 
java util hashtable entry 
sites heap allocation profile thread start obj id name main group main 
trace thread java lang string init string java sun tools java scanner scanner java sun tools java scanner scanner java sun tools java scanner scanner java trace thread sun tools java identifier lookup identifier java sun tools java scanner scanner java sun tools java scanner scanner java sun tools java scanner scan scanner java trace thread java util hashtable put hashtable java sun tools java identifier lookup identifier java sun tools java scanner scanner java sun tools java scanner scanner java trace thread java util hashtable put hashtable java sun tools java type init type java sun tools java init java sun tools java type type java stack traces cpu samples total wed oct rank self accum count trace method sun io convert java lang string sun tools java init sun io sun io sun tools java read sun io convert java lang string length java lang integer tostring java lang system 
cpu samples profile cpu usage hot spots cpu time profiling cpu time profiler collects data cpu time spent different parts program 
equipped information programmers find ways reduce total execution time 
design choices considered design choices building support cpu time profilers granularity profiling information statistical sampling code instrumentation 
granularity shall information method call level finer granularity basic blocks different execution paths inside method 
experience tuning java applications believe little reason attribute cost finer granularity methods 
programmers typically understanding cost distribution inside method methods java applications tend smaller example functions 
report flat profile consisting portion time individual methods 
example profiler reports program spends significant portion time method know part program indirectly contributed invoking method program call method directly 
way attribute profiling information java applications report dynamic stack traces lead resource consumption 
dynamic stack traces informative languages hard associate stack frames source language constructs anonymous functions involved 
fortunately anonymous inner classes java programming language represented classes informative names run time 
statistical sampling vs code instrumentation ways obtain profiling information statistical sampling code instrumentation 
statistical sampling disruptive program execution provide completely accurate information 
code instrumentation hand may disruptive allows profiler record events interested 
specifically cpu time profiling statistical sampling may reveal example relative percentage time spent frequently called methods code instrumentation report exact number time method invoked 
framework supports statistical sampling code instrumentation 
jvmpi profiler agent periodically sample stack running threads discovering frequently active stack traces 
alternatively profiler agent may ask virtual machine send events entering exiting methods 
naturally approach introduces additional function call overhead profiled method 
disruptive way implement code instrumentation inject profiling code directly profiled program 
type code instrumentation easier java platform traditional cpus standard class file format 
jvmpi allows profiler agent instrument class file loaded virtual machine 
profiler agent may example insert custom byte code sequence records method invocations control flow basic blocks operations object creation monitor operations performed inside method body 
profiler agent changes content class file ensure resulting class file valid java virtual machine specification 
thread aware cpu time sampling java virtual machine multi threaded execution environment 
difficulty building cpu time profilers systems properly attribute cpu time thread time spent method accounted method runs cpu unscheduled waiting run 
basic cpu time sampling algorithm follows true sleep short interval suspend threads record stack traces threads run interval attribute cost unit stack traces resume threads profiler needs suspend thread collecting stack trace running thread may change stack frames stack trace collected 
main difficulty scheme determine thread run sampling interval 
attribute cost units threads waiting operation waiting scheduled sampling interval 
ideally problem solved scheduler inform profiler exact time interval thread running profiler find amount cpu time thread consumed sampling point 
unfortunately modern operating systems windows nt solaris expose kernel scheduler provide ways obtain accurate thread cpu time 
example call windows nt returns thread cpu time millisecond increments inaccurate profiling needs 
solution determine thread run sampling interval checking register set changed 
thread run sampling interval certain contents register set changed 
information gathered purpose profiling need reliable 
extremely running thread maintains unchanged register set includes registers stack pointer program counter general purpose registers 
pathological example running program constant register set code segment program enters infinite loop consists instruction loop goto loop practice find suffices compute record checksum subset registers reducing overhead profiler 
cost suspending threads collecting stack traces roughly proportional number threads running virtual machine 
minor enhancement sampling algorithm discussed earlier need suspend collect stack traces threads blocked monitors managed virtual machine 
significantly reduces profiling overhead multi threaded programs threads blocked time 
experience shows typical programs total overhead sampling cpu time profiler sampling interval millisecond 
heap profiling heap profiling serves number purposes pinpointing part program performs excessive heap allocation revealing performance characteristics underlying garbage collection algorithm detecting causes unnecessary object retention 
excessive heap allocation excessive heap allocation leads performance degradation reasons cost allocation operations heap filled quickly cost frequent garbage collections 
jvmpi profiler follows steps pinpoint part program performs excessive heap allocation enable event notification object allocation virtual machine issues function call profiler agent current thread performs heap allocation 
obtain current stack trace virtual machine object allocation event arrives 
stack trace serves identification heap allocation site 
programmer concentrate optimizing busy heap allocation sites 
enable event notification object reclamation profiler keep track objects allocated site kept live 
algorithm independent allocation garbage collection events memory allocation garbage collection algorithms suitable different java virtual machine implementations 
mark sweep copying generational counting examples 
presents challenge designing comprehensive profiling interface set events uniformly handle wide variety garbage collection algorithms 
designed set profiling events covers garbage collection algorithms currently concerned 
introduce notion arena objects allocated 
virtual machine issues set events new arena arena id delete arena arena id new object arena id object id class id delete object object id move object old arena id old object id new arena id new object id notation encodes event specific information pair parentheses immediately event type 
go examples see events may different garbage collection algorithms mark sweep collector issues new object events allocating objects issues delete object events adding objects free list 
arena id needed 
mark sweep compact collector additionally issues move object events 
arena needed old new arena ids move object events 
standard space copying collector creates arenas 
issues move object events garbage collection delete arena event followed new arena event arena id free remaining objects semi space 
generational collector issues new arena event generation 
object scavenged generation move object event issued 
objects arena implicitly freed delete arena event arrives 
counting collector issues new object events new objects created object events count object reaches zero 
summary simple set heap allocation events support wide variety garbage collection algorithms 
unnecessary object retention unnecessary object retention occurs object longer useful kept alive object 
example programmer may insert objects global hash table 
objects garbage collected long entry hash table useful hash table kept alive 
effective way find causes unnecessary object retention analyze heap dump 
heap dump contains information garbage collection roots live objects objects refer 
profiling interface allows profiler agent request entire heap dump turn sent profiler front processing analysis 
alternative way track unnecessary object retention provide direct support profiling interface finding objects refer object 
advantage incremental approach requires temporary storage complete heap dumps 
disadvantage heap dumps incremental approach consistent view heap objects constantly modified program execution 
practice find size heap dumps problem 
typically majority heap space occupied primitive arrays 
internal pointers primitive arrays elements primitive arrays need part heap dump 
monitor profiling monitors fundamental synchronization mechanism java programming language 
programmers generally concerned issues related monitors performance impact monitor contention cause deadlocks 
advances monitor implementation non contended monitor operations longer performance issue 
monitor enter operation example takes machine instructions cpus 
properly tuned programs vast majority monitor operations non contended 
example table shows ratio contended monitor operations number programs 
applications specjvm benchmark 
applications gui rich programs 
monitor contention rate extremely low programs 
fact program mtrt specjvm benchmark suite singlethreaded 
monitor contention program non contended contended percent contended compress jess raytrace db javac mpeg mtrt jack hotjava monitor contention primary cause lack scalability multi processor systems 
monitor contention typically caused multiple threads holding global locks frequently long 
detect scenarios profiler may enable types event notifications table monitor contention rate benchmark programs thread waiting enter monitor owned thread issues monitor contended enter event 
event indicates possible performance bottlenecks caused frequently contended monitors 
thread finishes waiting enter monitor acquires monitor issues monitor contended entered event 
event indicates amount elapsed time current thread blocked enters monitor 
thread exits monitor discovers thread waiting enter monitor current thread issues monitor contended exit event 
event indicates possible performance problems caused current thread holding monitor long 
cases overhead issuing event negligible compared performance impact blocked monitor operation 
profiler agent obtain stack trace current thread attribute monitor contention events parts program responsible issuing monitor operations 
deadlocks thread waiting enter monitors owned thread system runs deadlock situation 
thread monitor dump programmers need find cause kind deadlocks 
thread monitor dump includes information stack trace threads 
owner monitor list threads waiting enter monitor 
obtain consistent view threads monitors suspend threads collecting thread monitor dumps 
jdk historically provided support thread monitor dumps triggered special key sequences ctrl break win 
jvmpi allows profiler agent obtain information programmatically 
support interactive low overhead profiling profiling support built java virtual machine achieves desirable goals able support interactive profiler front ends 
approach supports collecting profiling events trace files meet needs programmers tools vendors 
deadlocks may caused implicit locking ordering libraries system calls operations 
user enable disable profiling events program execution order pinpoint performance problems different stages running application 
profiling support incur low overhead programmers run application full speed profiling events disabled pay overhead generating type events specifically requested profiler frontend 
approach requires optimized virtual machine implementation profiling leads additional discrepancies profiled environment real world scenarios 
low overhead approach able provide full profiling support standard deployed version java virtual machine implementation 
possible start application normally enable necessary profiling events restarting application 
overhead disabled profiling events need dynamically enabling disabling profiling events requires added checks code paths lead generation events 
majority profiling events issued relatively infrequently 
examples types events class loading unloading thread start garbage collection jni global creation deletion 
easily support interactive low overhead profiling placing checks corresponding code paths having performance impact normal program execution 
heap profiling events particular new object delete object object introduced section quite frequent 
added check object allocation may noticeable performance impact program execution especially check inserted allocation fast path typically inlined code generated just time jit compilers 
fortunately garbage collected memory systems definition need check possible heap exhaustion conditions object allocation fast path 
enable heap allocation events forcing object allocation slow path false heap exhaustion condition check heap profiling events enabled heap really exhausted slow path 
change allocation fast path needed object allocation runs full speed heap profiling disabled 
method enter exit events kind events may generated frequently 
easily supported jit compilers dynamically patch generated code virtual method dispatch tables 
partial profiling problem problem arises profiler events enabled disabled profiler agent receives incomplete partial profiling information 
characterized partial profiling problem 
example profiler agent enables thread start events thread started receive unknown thread id defined thread start event 
similarly profiler agent enables class load event number classes loaded number instances classes created agent may encounter new object events contain unknown class id straightforward solution require virtual machine record profiling events trace file events enabled profiler agent 
virtual machine able send appropriate information entities unknown profiler agent 
approach undesirable potentially unlimited size trace file overhead profiling events disabled 
solve partial profiling problem observation java virtual machine keeps track information internally valid entities class ids sent profiling events 
virtual machine need keep track outdated entities class loaded unloaded appear profiling events 
profiler agent receives unknown entity unknown class id entity valid agent immediately obtain relevant information virtual machine 
introduce jvmpi function allows profiling agent request information unknown entities received part profiling event 
example profiler agent encounters unknown class id may request virtual machine send information contained class load event class 
certain entities need treated specially pro filing agent order deal partial profiling information 
example profiling agent disables move object event immediately invalidate object ids knows may changed garbage collections 
object event disabled agent request virtual machine send class information unknown object ids 
requests garbage collection disabled example calling jvmpi functions 
garbage collection may generate move object event asynchronously invalidate object id virtual machine obtains class information object id related extensive done cpu time profiling 
gprof tool example sample profiler records call graphs flat profiles 
research improved performance accuracy time profilers code instrumentation 
analysis techniques developed instrumentation code may inserted little run time overhead possible 
sampling cpu time profiling uses stack traces report cpu usage hot spots similar technique call graph profiling 
sansom investigated properly attribute costs profiling higher order lazy functional programs 
appel studied efficiently instrument code presence code inlining garbage collection 
addresses issues profiling multithreaded programs 
issues similar profiling multi threaded programs arise parallel programs profiler typically executes concurrently program selectively profile parts program 
heap profiling similar reported developed lisp modula 
knowledge constructs heap profiling interface independent underlying garbage collection algorithm 
general purpose profiling architecture useful build custom profilers target specific compiler optimizations 
numerous earlier experiments example building interactive profiling tools java applications 
approaches typically placing custom instrumentation java virtual machine implementation 
profiling architecture provides comprehensive profiling support java virtual machine 
scope profiling information includes multi threaded cpu usage hot spots heap allocation garbage collection monitor contention 
framework supports interactive profiling carries extremely low run time overhead 
believe lays foundation building advanced profiling tools 
wish number colleagues ibm particular robert berry members team numerous comments proposals discussions led improvements jvmpi 
appreciate comments anonymous reviewers coots conference 
glenn ammons thomas ball james larus 
exploiting hardware performance counters flow context sensitive profiling 
acm sig plan conference programming language design implementation june 
andrew appel bruce duba david mac queen andrew tolmach 
presence optimization garbage collection 
technical report cs tr princeton university 
ilya 
non intrusive interactive profiling 
proceedings acm sigplan parallel programming experience applications languages systems pages july 
david bacon ravi chet murthy mauricio serrano 
thin locks featherweight synchronization java 
proceedings sig plan conference programming language design implementation pages june 
thomas ball james larus 
optimally profiling tracing programs 
acm transactions programming languages systems july 
john barton john whaley 
real time performance visualizer java 
dr dobb journal pages march 
matt bishop 
profiling unix patching 
software practice experience october 
michal cierniak suresh srinivas 
java scientific programming portable browsers performance programming 
java computational science engineering simulation modeling ii june 
david detlefs bill kalsow 
debugging storage management problems garbage collected environments 
usenix conference object oriented technologies coots pages june 
james gosling bill joy guy steele 
java language specification 
addison wesley reading massachusetts 
susan graham peter kessler marshall mckusick 
gprof call graph execution profiler proceedings sigplan symposium compiler construction pages june 
robert hall aaron goldberg 
call path profiling monotonic program resources unix 
proceedings summer usenix technical conference pages june 
jonathan hill stephen jarvis 
portable architecture independent parallel performance tuning call graph profiling tool case study optimizing sql 
proceedings sixth euromicro workshop parallel distributed processing pdp pages january 
dan ingalls 
execution profile programming tool 
editor design optimization compilers 
prentice hall 
java software sun microsystems java development kit jdk 
available java sun com products jdk 
team ibm 
private communication july 
tim lindholm frank yellin 
java virtual machine specification 
addison wesley reading massachusetts 
carl ponder richard fateman 
inaccuracies program profilers 
software practice experience may 
john reiser joseph 
program profiling problems solution machine language rewriting 
acm sigplan notices january 
patrick sansom simon peyton jones 
time space profiling non strict higherorder functional languages 
proceedings twentieth acm symposium principles programming languages san francisco california pages new york january 
acm press 
hong zhang sheng liang 
fast monitor implementation java virtual machine 
submitted publication 
benjamin zorn paul hilfinger 
memory allocation profiler lisp programs 
proceedings summer usenix conference proceedings pages june 
