monadic robotics john peterson yale university peterson john cs yale edu www cs yale edu homes peterson john html greg hager johns hopkins university hager cs jhu edu www cs jhu edu dom hager developed domain specific language construction robot controllers frob functional robotics 
semantic basis frob functional reactive programming simply frp purely functional model continuous time interactive systems 
frp built basic abstractions behaviors values defined continuously time events discrete occurances time 
foundation constructed abstractions specific domain robotics 
frob adds abstraction task basic unit defined continuous behavior terminating event 
examines interrelated aspects frob 
study design systems frp abstractions defined frp capture essential domain specific concepts systems involving interaction time 
second demonstrate application monads implement frob tasks 
placing task abstraction monadic framework able organize task semantics modular way allowing new capabilities added pervasive changes system 
robot control algorithms specified frob 
programs clear succinct modular demonstrating power approach 
successful dsl combines vocabulary values primitive operations underlying domain abstractions capture useful patterns vocabulary 
ideally abstractions organize vocabulary structures support clarity modularity domain interest 
robotic control basic vocabulary quite simple consists feedback systems connecting robot sensors effectors 
difficult task build complex behaviors sequencing various control disciplines guided plans objectives 
controllers robust effective capable complex interactions uncertain environment 
basic feedback systems understood constructing controllers remains serious software engineering challenge 
different high level architectures proposed methodology addresses problems making ideal area application dsl technology 
frob embedded dsl robotic control systems 
frob built top functional reactive programming frp turn built top haskell lazy purely functional programming language 
frob hides details low level robot operations promotes style programming largely independent underlying hardware 
promotes declarative style specification cluttered low level implementation details 
advantage frob dsls architecture neutral 
defining specific system architecture organization basic design pattern enables arbitrary architectures defined high level reusable manner 
embedded dsl frob includes capabilities fully featured functional programming language haskell 
addresses frob language capabilities usage effectiveness implementation frob 
particular examine monad implement essential semantic components frob 
demonstrate shelf monadic constructs may incorporated domain specific language express semantic foundation clearly importantly modular manner 
address monads practical vantage theoretical emphasizing usage benefits domain 
contains examples written haskell 
readers passing familiarity syntax primitives types haskell 
unfamiliar haskell find www haskell org helpful information 
extended functional reactive programming attempt explain frp constructs 
prior understanding monads required 
remainder organized follows 
section discusses domain robot control essentials frp monads 
section demonstrates construction task monad incremental manner adding features examining impact system definition task changes 
section number non trivial examples frob programming 
section concludes 
background problem domain programming robots operating real world provides unique example programming system operating conjunction physical world 
system coordinate multiple ongoing control processes detect special events governing task execution supply data structures language primitives appropriate domain 
unsurprisingly development robot programming systems area active research robotics see collection articles area 
languages realized defining data structures certain specialized library routines existing languages notably lisp pascal basic 
particular languages include special functions commands operate time domain 
example val includes command move robot spatial location 
command operates asynchronously side effect stitching multiple motions supplied rapid order 
likewise embedded languages behavior language brooks reactive control framework khosla provide rich programming environments coordination time domain processes 
aml exceptional case language designed scratch 
supplies similar capabilities val addition enhanced error handling capabilities robot program execution 
despite proliferation robot programming systems relatively little done deriving principled basis 
example languages cited formal cases informal 
semantics 
counter trend lyons provides compositional paradigm expressing robot plans collections atomic actions sequenced coordinated rich set primitives 
notion continuous behavior discrete event transitions introduced 
transparent implementation language realistic examples 
contrast frob transparent extensible semantically clear basis practical useful tool implementing robot programming systems 
frob library embedded existing language abstractions defining frob higher level embed controllers languages controller embedded theory handle sort abstractions frob implementation difficult reliability system suffer absence polymorphic type system 
haskell frob inherits syntax type system libraries haskell users frob necessity learn haskell 
section contains brief overview haskell features frob familiar haskell may wish skip section 
basic haskell features include ffl variables start lower case letters 
variables may include characters variable name 
operators composed punctuation 

ffl function application haskell style notation function calling 
parenthesis commas omitted parentheses may grouping written languages 
ffl infix operators examples include 
infix operation converted ordinary variable parentheses 

ordinary functions infix style surrounded application takes precedence infix operators parses 
ffl layout indentation separates definitions definition list start column list terminated preceeding 
example indentation exactly match ffl definitions haskell creates definition 
define constant function function application parenthesis needed function parameters 
ffl lambda abstractions functions need named 
expression 
anonymous function 
example pass function parameter 

difference 
ffl type signatures polymorphic types haskell quite descriptive 
types inferred allowing type signatures omitted clarity include signatures examples 
type signatures supply valuable documentation type errors easier diagnose 
syntax signature declaration int defines type int 
type signatures generally placed immediately preceding associated definition 
ffl function types type function type type written 

function argument arrow type 
watch parenthesis type int 
int 
int defines function argument function int int int arguments int 
int 
int 
ffl currying don need pass arguments function 
call int 
int 
int second argument results function takes remaining argument 
ffl polymorphic types lower case identifiers type expressions type variables 
scope single type signature denote type equality 
types parameterized parameters passed syntax expressions 
example signature 
event 


event defines operator takes event parameterized type function type type yielding event parameterized type polymorphic types essential part frob built frob operators may completely described type signature 
ffl contexts haskell overloading manifested type signatures contain context set constraints type variables prefixing ordinary signature 
example type 
ord 


bool indicates arguments type type class ord 
haskell type class similar java interface 
ffl tuples lists tuple simple way grouping values 
tuples parentheses commas expression combines single tuple 
elements tuple may different types 
lists written square brackets list integers :10.1.1.17.7696
operator adds new element front list :10.1.1.17.7696
list functions pre defined haskell 
ffl type type denotes value type just 
programmers pointer may void 
ffl void type type pronounced void situations value needed 
value type 
functional reactive programming developing frob relied experience working fran dsl embedded haskell functional reactive animation 
functional reactive programming thought fran animation basic events behaviors reactivity operations specific graphics 
core frp notion dynamically evolving values 
variable frp may denote ongoing process time static value 
sorts evolving values continuous behaviors discrete events 
behavior defined time values events value discrete set times 
type type behavior evolving quantity type behaviors model continuous values value type behavior represents values taken sonars behavior point represents position robot 
expressions behavioral domain significantly different static expressions 
overloading static operators operate dynamic world users see little difference programming static values behaviors 
example declaration typical frob robot 
behavior float limit velocity sin setpoint limit max min example shows function mapping robot sensors selected velocity functions time varying float part larger control system 
details example unimportant point writing functions behaviors little different writing functions static value 
behaviors hide underlying details clocking sampling presenting illusion continuous time 
behaviors support operators static world integral derivative example exploit time flow 
example expressive power behaviors consider ord 
behavior 
behavior 
behavior returns value second behavior time behavior minimum 
essential abstraction supplied frp event 
type event denotes process generates discreet values messages type specific instances 
components system best represented events behaviors 
example bumpers type event occurances happen robot bumper switches activated 
console keyboard type event char generates event 
events may synthesized boolean behaviors predicate function predicate behavior bool 
event thought monitoring boolean behavior sending message true 
definition uses predicate generate event underlying condition holds robot 
event predicate time event occurs current time passes maximum value object appears cm away front sonar robot 
frp robot controller simply function robot sensors represented behaviors events bundled robot type effectors behaviors events drive wheels systems controlled robot 
flow time hidden frp abstractions user sees purely functional mapping inputs outputs 
need 
complex robot controllers constructed basic frp primitives 
controllers number problems ffl frp suited low level control systems domain lacks higher level constructs needed plainly express robot behaviors high level 
ffl controllers may complicated plumbing code needed propagate values functional manner 
ffl hard understand frp constructs required 
users easily comprehend basic event behavioral operators frp arcane essential operators snapshot switcher unfamiliar users natural part underlying domain 
goal create better abstractions ones embody patterns familiar domain engineers defined semantic properties 
monads modular abstraction tool monads surrounded great deal hype functional programming community 
led outside community ask questions monads anyway monads useful don java understand category theory write haskell programs 
section attempt monads somewhat 
don programmers java programmers monads 
answer really quite simple monads don new 
monads state exceptions backtracking things programmers long done monads 
monad allow understood constructs explained conveniently purely functional terms 
outside purely functional language usually easier better want directly involving monads 
pure language monads ideal way capture essential semantics domain compromising purity modularity 
monads hide gears wheels domain user presenting simple intuitive interface user 
user opposed dsl designer sees sequencing return operator magic functions reach inside gears wheels way 
monadic programming readable haskell notation 
users dsl don really know monads simply wire program rest monadic internals unseen 
important feature monadic approach modularity new features may added breaking existing code 
hood interactions different features monad open 
advantage purely functional style interplay various features explicit 
advantage monads shelf monadic constructions available 
need re invent basic semantic building block exception handling understood 
dsl designer may combine building blocks domainspecific monad 
number algebraic properties monadic programs easier understand reason 
going back concrete level monad haskell defined instance declaration associates type monadic operations class monad 
class monad 


return 
operators simple bind sequential composition return defines empty computation 
special syntax notation calls readable 
addition instance declaration functions may reach inside monad hooking internals 
example consider state monad 
bind return define propagation state computation computation 
reach inside state additional functions written get internal state 
example shows declarations needed define monad container type internally maintains state type data 
computation returns type function takes state returns updated state data 
instance monad state 
state state state return state 
state getstate getstate state 
state state setstate 
setstate state 
state runt 

runt state state monad instance explicates passing state computation second 
getstate setstate reach inside particular monad access normally hidden state 
runt function runs computation monad passing initial state producing final state returned value 
may add new capabilities state monad exception handling example changing user level code uses monad 
may enrich monad vocabulary altering sentences expressed old vocabulary 
best practical monads wadler essence functional programming 
implementing frob basic implementation frob discussed 
examine tasks monads 
basic task monad full definition frob tasks front develop task abstraction incrementally adding features showing incremental extension expressiveness tasks affects programs task implementation 
purpose twofold show ability functional reactive programming define abstractions needed domain importantly show monad organize task structure promotes modularity 
essential idea task quite simple type task defines behavior reactive value duration exits value type terms frp task represented behavior untilb event 
untilb switches behavior terminating event 

operator passes value generated event task 
tasks natural abstraction domain couple continuous control system behavior event moves system new mode operation 
tasks restricted top level system reactive value event behavior may defined task tasks may active time 
initially task monad requires instrument monadic toolbox continuation carry computation task 
implemented type task instance declaration standard haskell monad class data task task 

task standard continuation monad instance monad task task task 

return task 
defines structure combining computations glue need define computations 
simple task creation function behavior event 
task task 
untilb 
create tasks sequence tasks get task world 
robot controller defined terms behaviors tasks 
need convert task behavior 
brings small problem task completes 
initial value continuation argument 
way dilemma pass additional behavior take control task exits task 

task const needed write simple robot controller 
simple tasks robot 
task predicate predicate loop forever main 
undefined wheel controls defined pair numbers constructed forward velocity second turn rate 
function executes controller function sensors robot effectors 
terminating task reason pass final behavior 
starting foundation monad continuations build atomic tasks pull behavior task monad add new features 
previous example robot description passed explicitly part controller 
pass description implicitly explicitly building task monad directly 
want pass robot description appear needed adding extra parameters 
particular place really need appear behavior event generally functions current robot 
define new type encapsulate task state data robot state element current robot 
type defined haskell record syntax defines selector function extract robot task state 
components added task state definition change code referring state values remain unaltered 
add state definition task 
task initial state parameter passes potentially updated state continuation carrying task data task task 



instance monad task task task ts 
ts ts 
ts return task ts 
ts instance definition shelf standard combination continuations state 
function needs initial state pass task 
definition 
task 

ts task ts 
general call need fill initial values components task state 
put monad get back 
tasks access information inside 
monadic operators directly manipulate current task task ts 
ts ts 
task ts task 
ts state available tasks defined 
argument function current task state behavior event defining task 
behavior event 
task task ts 
ts untilb 
definitions previous example simplified robot propagated tasks implicitly explicitly task ts 
ts predicate ts 
ts predicate loop forever main 
undefined note composite task aware propagation task state 
retained old argument compatibility chosen 
change invalidating user code 
far exploited known monadic structures continuations state 
basic monadic construction exceptions 
exceptions tasks type task may succeed returning value type fail raising exception type 
reflected new definition task type task may return terminating event value error value type 
data task task 



primitives raise catch exceptions task 

task 
task raise error 
task omit definitions primitives modified monad instance standard constructions lines 
examine changes needed 
monad instance essentially independent underlying domain defined terms standard monad constructions unspecific robotics task creator domain specific modified account presence exceptions 
new version adds error event basic definition task 
slightly different name old interface remains valid 
new definitions 
behavior event 
task ts 
ts robot 
behavior event event 
task task ts 
err ts untilb 
right 
err 
left 
change terminating event normal exit event right constructor added error event tagged left 

operator frp construct merges events occur 

operator modifies value event err type event err 
right type event 
constructors left right define type 
consider task turn degrees right 
encode easily frob task 

problem task don know orientation robot start task 
build control system turn specified heading know goal 
answer lies task state 
task transitions untilb take note robot way pointing useful information 
simplified example capture current robot location moving task task 
monad remains unchanged new field structure task builder modified follows type point event 
robot 
event radians snapshot task ts 
err ts untilb 
right 
err 
left ts 
res 
ts res terminating event behavior augmented state robot time event snapshot function primitive defined frp capture value behavior time event 
tasks find initial orientation part task state 
turn right task follows ts 
goal ts 
empty tasks defined return pass state task unchanged 
task transformations having described elementary task operations detail examine briefly task operations 
existing task useful task transformations implemented 
examples include event 
task 
task timelimit time 
task 
task 
behavior 
task 
task event 
task 
task 
task 
task 

task 
task behavior picture 
task 
task operation functions obvious type signature illustration value polymorphic type signatures documentation 
full implementations functions scope provide basic outline functions supported task monad 
interesting semantic extensions system involve basic definition atomic task 
bringing values task state definition parameterize sequences tasks atomic ones 
example consider function adds new error event existing task 
note error event specified applies atomic task 
task passed may consist sequenced subtasks 
definition looks err previous global error event err 
place task state execute restore prior global error event course changed 
event err err 
ts error event task state included error condition untilb 
sort scoped reactivity easily expressed basic frp task monad easier implement feature 
timelimit function aborts task complete specified time 
implemented attach event associated task occurs specified time 
requires exception state capabilities underlying monad 
function defines behavior run parallel task 
task exits value behavior added task result value 
implemented building task attaches function incoming continuation 
function aborts task event 
task completes aborting event error occurs 
implemented directly frp untilb simplified definition task task ts 
ts err untilb 
err error premature task exit function implemented directly continuation level 
function allows task observe result needed differential equations define controller 
task ts 
ts place atomic definition task may parameterized resulting behavior 
untilb 
modify resulting behavior filter task state ts untilb 
implemented manner similar 

task 
task discuss global change task structure 
debugging controllers difficult hard visualize operation control system printing numbers screen controller executes 
better debugging technique display diagnostic information graphically robot simulator painting various cues simulated world graphically convey information 
augment behavior defined task include animation 
task monad provide implicit channel convey diagnostic information behavior 
modification requires changes definition task replaced behavior picture type produced 
change affect user level code extra picture implicit task 
program running real robot animation coming ignored 
definition behavior picture 
task 
task function introduces additional picture augmented behavior 
example function easier understand simulation goal goal goal red circle parallel tasks far modified tasks combined sequentially 
wish combine tasks merging results multiple tasks running parallel 
function basic primitive combining tasks parallel 
task 

event 
task 
task bt initiates tasks observing behavior defined 
termination task exception normal termination may observed task event 
code associated follows task ts 
ts sendto ts note somewhat imperative treatment terminating event 
sendto functions exploit frp internals expedient unusual way dealing events 
sendto function undefined behavior sending termination message value event result runtime error 
importantly notice treatment task state 
task needs receive fresh copy task state 
local error handlers filters removed state inherits 
examples assessing dsl difficult different dsl designed different goals 
goal build language declarative descriptive choose assess examples code performance figures 
examples chosen demonstrate expressiveness computational speed 
bug algorithm demonstrate tasks implement known control strategy 
bug algorithm navigate obstacles specified goal 
obstacle encountered robot circles obstacle looking point closest goal returns point resume travel 
code skeleton implements bug terms primitive behaviors driving straight goal wall 
task returns boolean true goal reached false robot blocked 
runs indefinitely traveling circles obstacle 
reason wall disappears sonars task raises exception 
basic tasks events shown task point 
task bool robot 
point 
event bug point 
task bug bug restart error finished finished return task circle back bug restart point 
task point return ts ts distance place place ts ts ts get away initial place timelimit definition quite close informal definition bug 
necessary details filled wall disappears sensors caught top level restarts system circle travel seconds get away start point continue start point re attained 
process architecture example consider lyons approach capturing robotic action plans networks concurrent processes 
frob tasks easily mimic lyons processes 
conditional composition operation identical task monad exceptions 
interest parallel composition executes processes parallel ports connecting directly implemented 
disabling composition contained needed correctly disable resulting task task aborts 
lazy evaluation semantics frob permits operations synchronous concurrent composition asynchronous concurrent composition implemented directly 

demonstrated successful dsl robotic control shown set tools developed functional programming community enable construction complex dsls relatively little effort 
assessing dsl programming language difficult best 
feel success frob demonstrated number ways ffl users outside fp community find frob easy suited task robot control 
abstractions supplied frob may understood intuitive level 
definite learning curve especially respect haskell type system users soon accustomed polymorphic typing find haskell types descriptive object oriented systems 
ffl encoded number known algorithms architectural styles frob results elegant concise modular 
ffl embedded dsl frob inter operates easily dsls 
preliminary combining frob fvision different dsl vision processing suggests dsls may combined great advantage 
ffl monads support relatively painless evolution dsl semantics 
dsls naturally somewhat moving target domain engineers dsl implementors improvements semantic expressiveness continually developed 
monadic framework allowed semantic evolution proceed requiring constant rewriting existing code 
issues unresolved unaddressed ported system new types robots implemented systems system performance critical 
experiment multi robot systems 
frob way system performance data rates sensors low controller relatively little 
particularly large part domain addresses real time 
example express priorities various activities allowing frob direct resources critical systems needed 
guarantees respect responsiveness throughput 
expect frob capable addressing issues complex analysis code generation may required 
high level system control exemplified bug algorithm issues importance 
frob teach undergraduate robotics course 
frob quite successful allowing assignments traditionally required pages code programmed page 
admittedly steep learning curve students eventually quite productive 
addition graphic feedback simulator especially useful 
turning issue dsl construction research shows monads important tool attaining program modularity 
definition task monad evolved significantly term interfaces remained allowing student code run unchanged frob evolved 
monads effectively hide potentially complex machinery provide framework new functionality added system minimal impact existing code 
frob software papers manuals available haskell org frob 
agreed license simulator frob users cost allowing software real robots control 
research supported nsf experimental software systems ccr 
rodney brooks 
robust layered control system mobile robot 
ieee trans 
robotics automation march 
coste mani ere editors 
international journal robotic research special issue integrated architectures robot control programming volume 
conal elliott 
composing reactive animations 
dr dobb journal july 
extended version animations research microsoft com conal fran htm 
conal elliott paul hudak 
functional reactive animation 
international conference functional programming pages june 
hayward lloyd 
user guide 
mcgill university qu ebec canada 
konolige 
language reactive control 
brewka habel nebel editors advances artificial intelligence volume lecture notes computer science 
springer 
stepanov 
dynamic path planning mobile automaton limited information environment 
ieee trans 
automatic control 
lyons arbib 
formal model computation sensor robotics 
ieee trans 
robotics automation 
damian lyons 
representing analyzing action plans networks concurrent processes 
ieee transactions robotics automation june 
mundy 
image understanding environment program 
ieee expert december 
karel robot 
john wiley sons 
peterson hager hudak 
language declarative robotic programming 
proceedings ieee conf 
robotics automation may 
peterson hudak elliott 
lambda motion controlling robots haskell 
proceedings padl practical aspects declarative languages pages jan 
john peterson kevin hammond 
haskell non strict purely functional language 
technical report yaleu dcs rr department computer science yale university may 

val versatile robot programming control language 
ieee press 
stewart khosla 
chimera methodology designing dynamically reconfigurable reusable real time software port objects 
international journal software engineering knowledge engineering 
taylor summers meyer 
aml manufacturing language 
int 
robot res 
wadler 
essence functional programming 
proceedings acm symposium principles programming languages 
acm sigplan january 
