dynamically discovering program invariants involving collections michael ernst william griswold david notkin dept computer science engineering university washington box seattle wa usa notkin cs washington edu dept computer science engineering university california san diego la jolla ca usa cs ucsd edu explicitly stated program invariants help programmers characterizing aspects program execution identifying program properties preserved modifying code invariants assistance automated tools 
unfortunately invariants usually absent code 
previous showed dynamically detect invariants looking patterns relationships variable values captured program traces 
prototype implementation daikon recovered invariants programs invariants detected assisted programmers software evolution task 
limited finding invariants scalars arrays 
presents techniques enable discovery invariants richer data structures particular collections data represented recursive data structures indirect links tables technique traverse collections record arrays program traces basic daikon invariant detector infer invariants new trace elements 
second technique enables discovery conditional invariants necessary reporting invariants recursive data structures useful right 
techniques permit detection invariants value limit left techniques validated successful application sets programs simple textbook data structures student solutions weighted digraph problem 
previous research demonstrated feasibility dynamically detecting program invariants analyzing traces variable values ecgn showed improve speed invariant detection usefulness output ecgn 
prototype implementation daikon accurate reported explicitly stated invariants formally specified textbook programs useful discovered undocumented program invariants programmers helpful modifying program 
daikon discovered invariants scalars arrays infer invariants involving richer collections data 
extends previous techniques discover invariants 
example daikon discover properties collections represented linked lists 
approach discovers invariants program executions instrumenting source program trace variables interest running instrumented program test suite checking properties instrumented variables derived variables manifest program 
describes specific extensions allow inference invariants collections instrumenter explicitly records trace file collections implicit pointer 
traversing collection writing visited objects array 
call process linearization 
representing fields collections arrays permits inference collection wide properties membership tests summing field data structure modifying daikon 
daikon computes conditional invariants invariants universally true splitting data traces parts predicates chooses detecting invariants part 
conditional invariants essential recursive data structures behave differently base recursive cases 
conditional invariants useful recursive data structures 
discuss policies splitting data traces experimentally evaluate simple extracts boolean conditions program source practice works 
implemented techniques applied sets programs taken data structures textbook second student solutions weighted digraph problem 
daikon finds relevant invariants misses relevant invariants 
addition invariants helped identify design implementation data abstractions 
see section details 
motivating example consider part daikon output program uses linked list priority queue invariants instrumented program original program test suite run instrument data trace database detect invariants overview dynamic invariant inference implemented daikon tool 
class prio closure rank sorted void insert exit size prio closure size orig prio closure object remove exit return orig prio element prio orig prio output states elements reachable pointers root prio sorted rank fields insertions increase size priority queue removals occur queue 
section provides background dynamic invariant detection 
section discusses linearization manipulating pointer accessed collections 
section describes create test conditional invariants evaluates strategy 
section experimentally assesses effectiveness techniques 
section presents ongoing performing inference online conjunction instrumented program 
section discusses related section concludes 
background dynamic invariant detection ecgn discovers invariants program executions instrumenting target program trace variables interest running instrumented program test suite inferring invariants instrumented values 
inference step tests set possible invariants values captured instrumented variables invariants tested sufficient degree falsification reported programmer 
dynamic approaches profiling accuracy inferred invariants depends part quality completeness test cases 
daikon inference engine language independent currently supporting java lisp 
daikon detects invariants specific program points loop heads procedure entries exits program point treated independently 
invariant detector provided variable trace contains execution program point values variables scope point 
set possible invariants tested various combinations traced variables 
lists classes invariants daikon computes variables computed constants invariants variable constant values small set invariants single numeric variable range non zero modulus mod invariants numeric variables linear relationship ax ordering relationship functions fn built unary functions combinations invariants single numeric variable mod invariants numeric variables linear relationship ax functions invariants single sequence variable minimum maximum sequence values lexicographical ordering element ordering invariants holding elements sequence invariants sequence variables elementwise linear relationship lexicographic comparison subsequence relationship invariants sequence numeric variable particular membership 
variable tuple variables potential invariant tested 
potential unary invariant checked variables potential binary invariant checked pairs variables forth 
potential invariant checked examining sample tuple values variables tested turn 
soon sample satisfying invariant encountered invariant known hold checked subsequent samples 
false invariants tend falsified quickly cost computing invariants tends proportional number invariants discovered 
invariants inexpensive test require full fledged 
enable reporting invariants regarding components properties aggregates daikon represents entities additional derived variables available inference 
instance array integer scope properties may interest variable may appear program text 
derived variables treated just variables invariant detector permitting engine infer invariants hardcoded list 
instance size derived sequence system report invariant size comparison check case scalar length sequence 
performance reasons derived variables introduced known sensible 
instance sequence derived variable size introduced invariants computed introduced ensure range invariant reported adequate evidence plausibility 
particular inadequate number samples particular variable patterns observed may mere coincidence 
consequently detected invariant daikon computes probability property appear chance random input 
property reported probability smaller user defined confidence parameter 
invariants collections daikon invariant detector computes invariants scalars arrays 
programs richer data structures reporting invariants useful limiting 
section extends previous techniques allow daikon discover invariants collections data represented structures arrays 
approach extend instrumenter find collections implicit program linearize record explicitly trace file arrays 
approach requires change daikon inference engine 
design decision stabilized complex aspect daikon invariant detector turn increased robustness confidence daikon implementation 
furthermore show section approach works quite programs tried date 
linearizing collections adds variables data trace section discusses strategies reduce cost 
linearize arbitrary sized collection array requires selecting root determining method traversing collection selecting field fields collection objects written trace file 
roots selected variables explicit program 
linearization process driven objects root explored 
field leads object object type element instrumenter outputs objects successive elements array 
multiple fields property prev field addition field linearization done field multiple arrays written trace file 
element written data trace file fields non recursive types written 
process continues user specified depth 
resulting new variables named expressions produce runtime person birthdate 
linearized arrays written trace file new names 
header contains recursive field header closure names collection elements reachable fields linked list rooted header 
traversal object collection handled similarly representations 
example program may create pool objects array indices array links pool frequently done fortran 
indices array identifies elements written trace file 
similar structures defined hash tables 
linearizing collections instrumenter writes trace file additional information structures cyclic dag tree computed data structure traversal evident linearized form 
information written scalars handled directly daikon invariant detection engine 
invariants collections classified local invariants global invariants 
local invariants relate small number objects emp dept emp manager dept contrast global invariants involve arbitrary size part collection 
examples global invariants include num size sorted 
local invariants imply global ones instance knowing rank rank unconstrained implies array sorted knowing left rank rank right rank specified elements exist imply tree containing sorted 
global invariants checked explicitly 
simple explicit linearized collections trace file 
previously described techniques detect local invariants 
conditional invariants important program properties universally true 
instance local invariant sorted binary tree left value right value true left right non null 
examples include deletion routine postcondition orig list size list size orig list orig list value list entry routine absolute value routine postcondition arg result arg result arg 
conditional invariants particularly important programs manipulate recursive data structures different properties typically hold base case recursive case 
mechanism detecting conditional invariants split data traces parts predicate perform invariant inference part report contingent splitting predicate 
example null value minval 
splitting policy determines predicate splitting data traces parts 
infeasible try possible splitting predicates automatically predict splits best user 
considered splitting policies singly combination static analysis policy selects splitting conditions analysis program source code 
special values policy compares variable preselected values chosen statically null zero literals source code dynamically commonly occurring values minima maxima 
policy exceptions detected invariants tracks variable values violate potential invariants immediately discarding falsified invariant 
number falsifying samples moderate samples separately processed resulting nearly true invariant invariant exceptions 
random policy perform exhaustive stochastic splitting sample data re useful splits data 
programmer driven policy allows user select splitting conditions priori 
implemented static analysis policy boolean expressions method side effect free boolean member functions splitting conditions automatically generated applied 
results section demonstrate policy easy implement works programs considered 
reason success static splitting may methods programs tested see section relatively simple 
example linkedlist program single conditional body splitting condition led discovery useful conditional predicates 
find practical limitations static splitting policy pursue complicated ones 
assessment assess techniques inferring invariants programs pointer collections analyzed quality daikon output sets programs 
set consists programs data structures textbook wei 
programs small described textbook implement understood data structures able determine gold standard invariants reported ideal invariant detector 
second set programs written single specification students software engineering course mit 
programs larger lines realistic students wrote representation invariants frequently specifications incomplete satisfied code 
measure quality invariant relevance ecgn 
invariant relevant assists programmer programming activity 
relevance inherently contingent particular task programmer capabilities working style knowledge code base 
automatic system know context daikon necessarily reports invariants user find helpful omits invariants user find helpful 
manually classified reported invariants potentially relevant relevant judgment informed careful examination program test cases 
judged invariant potentially relevant expressed property necessarily true program expressed salient property input believed knowledge property help programmer understand code perform task 
effort fair consistent objective assessments 
section reports percentage reported invariants relevant precision information retrieval percentage desired invariants reported recall information retrieval 
report measurement student programs quantity quality formal specifications class relevant implied irrelevant relevant linkedlist stackar listnode invariants computed data structures wei 
listnode internally data structures 
relevant column lists number reported invariants relevant 
implied column counts number invariants implied invariants simple test eliminate ecgn 
irrelevant column counts number reported invariants irrelevant 
relevant column ratio relevant invariants total number reported invariants 
numbers include class invariants repeated method entries exits tautological invariants necessarily true subparts variables compared removed automated postprocessing step 
cause compelling report detecting precisely invariants come 
section illustrates facts discovered daikon space permits 
textbook data structures ran daikon data structures data structures textbook wei linked lists ordered lists stacks represented lists stacks represented arrays queues represented arrays 
examining reported invariants determined desired output reading book programs 
textbook implementation comprises classes ranging size dozen lines non blank non comment code 
comparison sun jdk java util linkedlist class implemented lines non comment non blank 
interface richer functionality essentially textbook linkedlist class 
provided test suites minimal augmented additional test cases 
previous describes detect take advantage polymorphic variables specific runtime types ecgn simplicity assume polymorphic data structures rewritten contain integer objects 
indicates effectiveness daikon applied textbook data structures 
classes programs selected test suite daikon reported relevant invariants 
example linkedlist reported irrelevant invariant invariants implied reported invariants meaning reported invariants relevant 
daikon reported fewer expected invariants 
linkedlist manually identified relevant invariants missed reported meaning manually identified invariants daikon 
shows data process 
small class relevant missing reported linkedlist stackar listnode missing invariants data structures wei 
relevant column repeated 
missing column counts desired invariants daikon failed report 
reported column ratio relevant sum relevant missing 
numbers relevant missing column relatively larger numbers relevant reported column indicate daikon reports relevant invariants omits relevant invariants 
qualitative analysis provide additional examples details 
qualitative analysis subsections qualitatively assess invariants detected data structures providing examples output system various test cases 
brevity discuss invariant detected multiple program points 
classify relevant detected invariant functional invariant usage property 
functional invariants depend structure code universally true data structure test 
examples traditional object class invariants function preconditions postconditions loop invariants 
usage properties result program specific data structure 
invariants provide information class se ease understanding complex abstractions simpler ways demonstrate adequacy inadequacy test suites seen concrete examples helped programmers just reasons ecgn 
linked lists 
illustrates invariants detected linked lists 
linked lists implemented header node part list proper class invariants indicate listnode reachable header way asserting header null 
additionally header element set 
reason different linked lists created tests different values header samples justify inequality 
reran experiment larger test suite invariant reported 
entry invariants usage properties dependent particular program test suite elements random integers maximum list size 
equality indicates program inserts list 
routine exit invariants indicate change header objects accessible header fields 
linkedlist class header null size header closure header element linkedlist object enter current header size header closure linkedlist object exit orig header orig header header closure orig header closure header closure element orig header closure element return null return current null return current element return current closure subsequence header closure missing return current element void linkedlist insert object exit header element null current null size orig header closure size header closure header closure orig header closure boolean linkedlist isempty exit header null return true return false void linkedlist remove object exit size header closure size orig header closure missing null size header closure size orig header closure size header closure size orig header closure linked list invariants 
invariants annotated class valid entry exit public method roughly correspond class invariants object invariants class 
notation closure fieldname stands collection objects reachable fieldname pointers orig val stands value val entry procedure size val stands size array collection val 
words routine side effect free 
additionally routine succeeds test suite return value null 
exit invariant indicates argument return value different values 
penultimate indicates return value points original list final missing invariant basic contract procedure 
daikon find invariant see discussion ordered lists details 
insert invariant indicates program insertion occurs list 
second shows conditions insertion successful 
size invariant reported case unsuccessful insertion equality collections implies size redundant invariant automatically suppressed 
remove invariant inequality sizes class header closure element sorted missing header closure element sorted void insert integer exit size header closure size orig header closure ordered list invariants 
void push object exit topofstack element topofstack orig topofstack topofstack closure orig topofstack closure size topofstack closure size orig topofstack closure object exit return orig topofstack element topofstack orig topofstack topofstack closure orig topofstack closure size topofstack closure size orig topofstack closure stack invariants list representation 
deletion successful additionally occur list case insertion 
detect exact predicate determining deletion successful 
reason currently split conditions program current prototype examine local variables appear conditionals boolean member functions 
unary boolean member functions get desired condition 
perspicuous ismember function class lacks 
splitting local variable solve problem 
ordered lists 
invariants ordered lists identical arbitrary linked lists differences appear 
additional class invariant expected indicating linked list pointed header sorted terms element values 
relationship results header element value element may 
strict ordering relation list proper missed default depth outputting data structures derive needed variable 
increased depth command line argument instrumenter desired invariant produced likewise linkedlist 
insertion occur permits duplicate values insertion occur list head eliminates invariants appeared linkedlist 
fail find condition predicate size insert result reasons missed similar predicate linkedlist remove 
stacks list representation 
invariants stack push completely capture operation semantics see pop invariants symmetric 
fourth invariant push indicating stack grows stackar exit topofstack boolean stackar isempty exit topofstack return false void stackar push object exit topofstack topofstack orig topofstack topofstack stack invariants array representation 
insertion explicitly appear output 
output includes invariants size topofstack closure size topofstack closure topofstack closure orig topofstack closure trivially imply fourth invariant 
artifact choose canonical variable equal variables symmetric invariant reported push explicitly 
may hard find desired invariant current prototype output developed simple tool lists invariants involving specified set variables 
invariant exit method captures return top stack element 
second third capture notion popping stack 
final invariant indicates method decreases size linked list 
stacks array representation 
shows invariants stack implemented array 
invariants exit point constructor stackar show initialization stack elements zeroed top index takes initial value 
isempty invariants reflect shortcoming test suite tests done stack empty 
similarly stack filled result disjunctive invariants 
data structure stack captured invariants push pop similar element inserted top stack top index incremented stack non empty push 
queues 
invariants inferred queues implemented array representation appear 
constructor postconditions capture initializations internal representation queue 
invariant front accurate coincidental principle initial length zero index represent front queue 
collectively invariants exit say proper element returned back index changes front index remains unchanged 
invariant back index accurate weak prefer find missing modulus invariant 
adding differences sums variables derived variables cause invariant detected slightly different form 
original prototype time experiments exit front back object dequeue exit return front orig front front orig front back orig back void enqueue object exit back back orig back front orig front orig missing back orig back mod default capacity queue invariants 
added current version unsure general applicability 
city map student programs verify techniques implementation ran daikon programs written students software engineering course mit 
students assigned write code formal specifications test cases city map implemented terms weighted digraph 
weighted digraph inherently recursive student implemented recursive data structure 
implementations tended tables indexed graph nodes nested indexed data varied 
general approach representing collections surprising availability library efficiently implemented abstractions 
explicit representations collections instance arrays lessen pressure daikon handle recursively defined collections properties connectedness resulting graph may difficult infer 
students directed achieve branch coverage test suites stopped immediately achieving goal methods executed just times tests 
program points invariants statistically justified 
report results consistent programs report object invariants classes table appear student programs 
object invariant holds entry exit class public methods 
assessing daikon output programs far difficult data structures considered 
primary reason extremely timeconsuming enumerate true set relevant invariants program 
reason high cost programs range lines code reason program require custom analysis determine true set invariants 
case analyses examined daikon output having done analysis student relevant implied irrelevant missing added object invariants detected key classes student programs 
relevant column number relevant invariants reported appear students formal specifications 
implied column number redundantly reported invariants implied relevant ones 
irrelevant column number reported invariants relevant 
missing column invariants students formal specifications appear daikon output 
added column relevant invariants detected daikon students erroneously omitted formal specifications 
hand 
students provided formal specifications inadequate failing note important properties code 
estimates related qualitative analysis valuable part assessment 
reason provide added insight 
additionally finding properties program may important finding especially reported properties overlooked programmer 
early simple daikon showed value providing programmers unexpected albeit incomplete information ecgn 
quantifies daikon output student programs assessed detail 
absence true set invariants compare daikon output data report differs somewhat figures 
example missing numbers compare student formal specifications underestimates number true invariants missed cases students formal specifications incomplete omitting important properties maintained code 
case comment indicated representation invariant held point constructor established 
discuss columns table turn explicitly address apparently large number irrelevant invariants especially compared data structure programs analyzed 
invariants listed relevant stated students daikon 
include uniqueness non collection elements constraints data structure sizes 
added invariants missing student formal specifications discovered daikon 
example implementations table abstraction parallel keys values arrays daikon reported size keys size values formally specified representation invariants omitted property 
similarly students explicitly noted certain values non null property picked daikon 
daikon discovered invariants test suites size nodes size edges keys indicates edges nodes size edges keys indicates function called called cities added highways 
implied invariants redundant reported invariants necessarily true 
implied invariants suppressed output remain easily corrected weakness special purpose logical implication checker 
irrelevant invariants nearly comparisons incompatible runtime types instance city discovered equal highway 
daikon performs comparisons respects statically declared program types object 
techniques eliminate irrelevant invariants static analysis determine values flow variable oj performing stages invariant detection determines actual runtime types ecgn 
applying known technologies allow eliminate implied irrelevant invariants daikon output far cleaner 
missing invariants fall categories 
invariants stating graph bidirectional contains self edges require existential quantifiers mechanisms currently supported daikon 
invariants easy state informally programs self checks properties dozen lines long 
second invariants mutability example keys immutable require analysis immutability run time types 
third invariants runtime types objects detected due inadequate test suites polymorphism 
invariant collection contains duplicates detected daikon practice runtime specified collections small instance maximum outdegree observed times daikon statistical tests permit invariant reported 
cases daikon report collections global collection nodes contained duplicates null entries 
detecting invariants programs inexpensive daikon 
trace files ranged size kb mb depending test suite program 
programs daikon consumed approximately minutes processing time 
daikon reported invariants program number instrumented program points ranged 
incremental processing approaches outlined perform adequately modest programs expect scale change large programs 
briefly discussing performance issues outline approach online incremental invariant inference permit scaling daikon larger realistic programs 
instrumentation approximately fast compilation 
daikon java instrumenter modified version jikes compiler 
instrumentation slowdowns tend orders magnitude smaller data structures traversed smaller instrumentation operation time size visible data 
daikon current version written java processing samples program point variables scope takes minute mhz sun ultra model running sunos jit compiler debugging assertions enabled 
numbers typical larger cases 
carefully measured time space performance system development seriously attempted optimize performance 
despite relevant invariants pointer programs demonstrating proof concept 
major hurdle making invariant detection scale large number possibly sizable variables front back 
invariant detection se modest cost time grows number invariants reported number invariants checked ecgn 
number tends relatively small cubic number variables scope program point 
reason performance overwhelming majority invariants false false invariants tend falsified quickly ecgn 
true invariants need checked sample variable values 
large data structures costly front traverse output costly back input examine invariants 
additionally wide data structures result large number fields output data trace 
straightforward approach scaling give programmers control instrumentation 
daikon permits instrumentation suppressed classes functions specified command line argument likewise users specify detection class invariants procedure preconditions postconditions 
remaining tracing inference go faster eliminate costs running invariant detector online cooperation program test directly examining data structures 
testing invariants online need store data values indefinitely 
values need accumulated initially permit instantiating viable invariants staged fashion discarded 
staging permits simpler invariants tested redundant invariants suppressed instantiated 
particular variable test order variable constant missing trace variable equal variable unary invariants binary invariants variable ternary invariants pair variables 
step invariants discovered earlier suppress ones 
instance variables equal marked non canonical considered see section artifact decision 
invariant inference complete set variables derived variables introduced suppressed presence invariants illustrate equal variable non sensical 
inference performed derived variables 
staging derivation inference sub staging inference mere performance enhancement 
system simply run omitted swamped large numbers derived variables vast numbers invariants check memory runtime 
approach requires invariant falsified invariants variable derivations suppressed presence reinstated 
eliminating bottleneck reducing memory costs incremental processing reduce amount performed instrumentation 
variable determined longer interest instrumentation informed recording value reducing overhead 
invariants quickly falsified speculate provide largest speedup 
implementation design underway 
daikon supports incremental inference reinstate suppressed derived variables invariants invariant falsified integrated instrumented code 
related dynamic inference 
dynamic analysis bal useful variety tasks 
value profiling cfe ss cfe addresses subset problem detection constant near constant variables instruction operands 
information support runtime specialization program branches specialized version variable value expected 
runtime disambiguation nic hss particular focus pointer aliasing support optimization pairs pointers profiling shows rarely aliased runtime reductions realized nic 
static inference 
pointer analysis research addresses determining alias points relations 
information compute may definitions assignment static program slicing verify independence pointer enable optimization 
precise pointer analysis computationally difficult lh lr 
high cost flow sensitive approaches wei jm jm cwz hn lr led development flow insensitive techniques ste sh nearly precise fraction cost hp 
shape analysis static analysis infers properties pointer structures programmers invariants 
particular shape analysis produces graph structure structure pointer summarizes memory locations reach jm lh cwz hhn srw 
adds example uses traditional gen kill analysis propagate descriptions pointer dimensionality reachability program gh permitting determination tree dag cyclic properties 
necessity summarize actual properties static approaches akin choice limit depth derive variables 
depth limiting similar simple static approach limiting 
checking formal specifications 
considerable research addressed statically checking formal specifications pfe dc ln 
idea pursuing daikon hypothesis generator provide specifications kinds systems check ideal synergy static dynamic analysis 
realistic static specification checkers implemented 
lclint eva verifies programs respect annotations larch interface language tan addition modularity properties lclint checks pointer properties definedness allocation state 
esc det ln extended static checker permits programmers write type annotations including arithmetic relationships declarations mutability catches array bound errors nil dereferences synchronization errors programming mistakes 
lclint esc completely sound provide programmers substantial confidence annotations check 
extended invariant detection techniques daikon prototype enable discovery invariants involving collections data 
key technique linearization process traverses implicitly represented collection recording collection elements array program trace 
daikon invariant detector handle scalars arrays infer properties linearized versions collections 
furthermore developed technique inferring conditional invariants splitting trace data predicates extracted source text 
applies conditional invariants recursive data structures invariants broadly applicable 
initial experience demonstrates feasibility potential dynamic inference invariants collections conditionals implementation approach 
daikon invariant detector available download www cs washington edu homes daikon 
acknowledgments jake cockrell adam contributions project 
daniel jackson nick mathewson shared students programs mit course 
research supported part nsf ccr ibm graduate fellowship gifts edison design group microsoft toshiba 
griswold currently leave ucsd xerox parc 
currently visiting uw system engineering laboratory research development center toshiba 
lars ole andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen may 
diku report 
bal thomas ball 
concept dynamic analysis 
esec fse pages september 
cfe brad calder peter feller alan eustace 
value profiling optimization 
journal instruction level parallelism 
appear 
cfe brad calder peter feller alan eustace 
value profiling 
micro pages december 
cwz david chase mark wegman kenneth zadeck 
analysis pointers structures 
pldi pages white plains ny june 
dc matthew dwyer lori clarke 
data flow analysis verifying properties concurrent programs 
fse pages december 
det david detlefs 
overview extended static checking system 
proceedings workshop formal methods software practice pages january 
david detlefs rustan leino greg nelson james saxe 
extended static checking 
src research report compaq systems research center december 
ecgn michael ernst jake cockrell william griswold david notkin 
dynamically discovering program invariants support program evolution 
ieee transactions software engineering 
appear 
previous version appeared icse pages may 
ecgn michael ernst adam william griswold david notkin 
quickly detecting relevant program invariants 
icse limerick ireland june 
david evans john guttag james horning yang meng tan 
lclint tool specifications check code 
fse pages december 
eva david evans 
static detection dynamic memory errors 
pldi pages may 
gh rakesh ghiya laurie hendren 
tree dag cyclic graph 
shape analysis heap directed pointers popl pages january 
laurie hendren emami rakesh ghiya clark 
practical context sensitive interprocedural alias analysis framework compilers 
acaps technical memo mcgill university school computer science advanced compilers architectures parallel systems group montreal quebec july 
hhn laurie hendren joseph hummel alexandru nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
pldi pages june 
hn laurie hendren alexandru nicolau 
parallelizing programs recursive data structures 
ieee transactions parallel distributed systems january 
hp hind 
assessing effects flow sensitivity pointer alias analyses 
th international symposium program analysis sas pages september 
hss andrew huang gert john paul shen 
speculative disambiguation compilation technique dynamic memory disambiguation 
isca pages chicago illinois april 
jm neil jones steven muchnick 
flow analysis optimization lisp structures 
steven muchnick neil jones editors program flow analysis chapter 
prentice hall 
jm neil jones steve muchnick 
flexible approach interprocedural data flow analysis programs recursive data structures 
popl pages january 
bart jacobs joachim van den berg marieke huisman martijn van ulrich hendrik 
reasoning java classes 
oopsla pages vancouver bc canada october 
lh james larus paul hilfinger 
detecting conflicts structure accesses 
pldi pages atlanta georgia june 
ln rustan leino greg nelson 
extended static checker modula 
compiler construction pages lisbon april 
lr william landi barbara ryder 
safe approximate algorithm interprocedural pointer aliasing 
pldi pages 
lori clarke leon osterweil matthew dwyer 
verification concurrent software 
icse pages may 
nic alexandru nicolau 
run time disambiguation coping statically unpredictable dependencies 
ieee transactions computers may 
oj robert callahan daniel jackson 
program understanding tool type inference 
icse pages may 
pfe frank pfenning 
dependent types logic programming 
frank pfenning editor types logic programming chapter pages 
mit press cambridge ma 
sh marc shapiro susan horwitz 
effects precision pointer analysis 
fourth international symposium program analysis september 
su stanley wei zhao jian wang wu 
study pointer aliasing software pipelining run time disambiguation 
micro pages november december 
srw mooly sagiv thomas reps reinhard wilhelm 
parametric shape analysis valued logic 
popl pages january 
ss sohi 
empirical analysis instruction repetition 
acm sigplan notices november 
ste bjarne steensgaard 
points analysis linear time 
popl pages january 
tan yang meng tan 
formal specification techniques promoting software modularity enhancing documentation testing specifications 
technical report mit lcs mit lcs tr massachusetts institute technology laboratory computer science june 
wei william weihl 
interprocedural data flow analysis presence pointers procedure variables label variables 
popl pages january 
wei mark allen weiss 
data structures algorithm analysis java 
addison wesley longman 

