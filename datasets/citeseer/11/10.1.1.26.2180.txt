kleisli approach data transformation integration susan davidson university pennsylvania susan central cis upenn edu limsoon wong kent ridge digital labs limsoon org sg february kleisli data transformation integration system application data typed proven especially useful bioinformatics applications 
extends conventional flat relational data model supported query language sql complex object data model supported collection programming language cpl opens closed nature commercial relational data management systems easily extensible system performs complex transformations autonomous data sources heterogeneous geographically dispersed 
describes implementation details example applications kleisli 
kleisli system advanced broad scale integration technology proven useful bioinformatics arena 
bioinformatics problems require access data sources large highly heterogeneous complex constantly evolving geographically dispersed 
solutions problems usually involve steps require information passed smoothly usually transformed steps 
kleisli designed handle requirements directly providing high level query language cpl express complicated transformations multiple data sources clear simple way 
key ideas kleisli system influenced functional programming research database query language research 
high level query language cpl functional programming language built notion bulk data types suitable database programming built operations required modern bioinformatics 
kleisli implemented top functional programming language standard ml new jersey sml 
data format kleisli uses exchange information external world derived ideas type inference 
provides overview kleisli system summary impact query language theory description sml implementation description handling relational databases sample applications biomedical arena 
organization follows 
section offers overview architecture data model query language cpl kleisli 
section discussion kleisli type system self describing data exchange format impact data integration dynamic heterogeneous environment 
section describes monads give rise kleisli internal representation queries simple optimization rules 
section explains higher order functions give rise simple implementation kleisli powerful optimizer 
section gives details kleisli optimization respect important class external data sources viz 
relational databases 
section discusses impact kleisli bioinformatics data integration 
particular kleisli query written purpose reproduced illustrate smoothness kleisli interface relational non relational bioinformatics sources show optimizations 
section shows kleisli turn flat relational database system complex object store warehouse complex biological data 
section demonstrates kleisli access multiple external data sources external data analysis functions querying protein patents 
section uses clinical database demonstrate kleisli ability perform window queries 
queries clumsy write sql data segmented segment analyzed separately 
quick tour kleisli provide complex object data model kleisli high level query language supported kleisli called cpl collection programming language 
architecture system depicted 
cpl kleisli pipe memory shared net servers remote genbank gdb ncbi blast sybase asn drivers blast cpl type nrc optimizer driver object complex manager opm manager library primitive module acedb kleisli extensible ways support high level query languages replacing cpl module 
kleisli support different types external data sources adding new drivers forward kleisli requests sources translate replies kleisli exchange format 
version kleisli forms backbone tm 
www com contains drivers popular bioinformatics systems including sybase oracle entrez wu blast gapped blast acedb optimizer kleisli customized different rules strategies 
query submitted kleisli processed cpl module translates equivalent expression calculus nrc 
nrc described chosen internal query representation easy manipulate amenable machine analysis 
nrc expression analyzed type module infer general valid type expression passed optimizer module 
optimized nrc expression compiled nrc module calls complex object library 
resulting compiled code executed accessing drivers external primitives needed pipes shared memory 
driver primitive managers keep information external sources primitives wrapper interface routines 
complex object library contains routines manipulating complex objects code set intersection code set iteration 
data model underlying kleisli complex object type system goes sets records flat relations type system relational databases 
allows arbitrarily nested records sets lists bags variants 
variant called tagged union type represents type 
collection bulk types sets bags lists homogeneous 
order mix objects different types set bag list necessary inject objects variant type 
simultaneous availability sets bags lists kleisli deserves comments 
relational database sole bulk data type set 
having bulk data type presents problems real life applications 
firstly particular bulk data type may natural model real data 
secondly particular bulk data type may efficient model real data 
example restricted flat relational data model genpept report example necessarily split separate tables order stored relational database 
resulting multi table representation genpept report conceptually unnatural operationally inefficient 
person querying resulting data pay mental overhead understanding original genpept report badly fragmented multi table representation 
may pay performance overhead having re assemble original genpept report fragmented multi table representation answer queries 
example genpept report format chosen national center biotechnology information amino acid sequence information 
amino acid sequence string letters certain regions positions string special biological interest binding sites domains 
feature table genpept report part genpept report documents positions regions special biological interest annotations comments regions 
type represents feature table genpept report entrez 
uid num title string accession string feature name string start num num anno string descr string interesting type fields feature set records fields anno turn list records 
precisely record fields uid title accession feature 
store values types num string string respectively 
uid field uniquely identifies genpept report 
feature field set records form feature table corresponding genpept report 
records fields name start anno 
types string num num respectively 
represent name start position position particular feature feature table 
anno field list records 
records fields descr type string 
records represent annotations corresponding feature 
general types freely formed syntax num string bool num string bool base types 
types constructors build new types existing types 
types respectively construct set bag list types type type constructs record types types type constructs variant types types flat relations relational databases basically sets records field records base type words relational databases bags lists variants nested sets nested records 
values types explicitly constructed cpl follows assuming values appropriate types records 
variants sets bags lists 
example feature table genpept report tyrosine sequence shown 
uid accession title 
ptp feature name source start anno organism descr mus descr taxon 
particular feature displayed goes amino acid amino acid entire sequence annotations annotation indicates amino acid sequence derived mouse dna sequence 
second cross national center biotechnology information taxonomy database 
schemas structures popular bioinformatics databases flat files softwares easily mapped data model 
high data structure complexity entrez acedb contain deeply nested mixtures sets bags lists records variants 
low data structure complexity relational database systems sybase oracle contain flat sets records 
currently kleisli gives access bioinformatics sources 
reason ease mapping bioinformatics sources kleisli data model inherently composed combinations sets bags lists records variants 
directly naturally map sets sets bags bags lists lists records records variants variants kleisli data model having type declaration hand 
come cpl primary query language kleisli 
interesting feature syntax cpl comprehension syntax 
example typical comprehension cpl syntax odd returns set consisting squares odd numbers set similar notation functional languages main difference binding occurrence indicated preceding backslash expression returns set list 
functional languages called generator odd called filter 
giving complete syntax illustrate cpl examples set feature tables db 
example query extracts titles features elements db titles contain tyrosine substring 
title title feature feature db title string tyrosine query simple project select query 
project select query query operates flat relation set 
transformation query perform limited selecting elements relation extracting projecting fields elements 
fact source data result may normal form queries expressed relational query language 
cpl perform complex nesting unnesting common relational database languages sql shown examples 
example query flattens db completely 
anno similar meaning db works lists sets 
binds item list anno 
title title feature name start start anno name anno descr descr db feature anno example query demonstrates nesting cpl subquery db restructuring db pairing entry source organism 
subquery org extracts organism names 
main query groups entries db organism names 
sorts output list alphabetical order organism names org converts set org duplicate free sorted list 
db entry organism descr db feature anno organism org organism db organism entries entry db organism org inspiration cpl came structural recursion query language 
structural recursion difficulties 
syntactically correct structural recursion program logically defined 
second structural recursion expressive power express queries require exponential time space 
context databases typically large programs queries usually restricted practical sense low complexity class logspace ptime tc fact may want prevent query worse delta log complexity confident query optimizer high probability optimizing query delta log complexity 
database query languages sql designed way joins easily recognized joins operations typical database query language require complexity evaluated naively 
tannen buneman suggested natural restriction structural recursion reduce expressive power guarantee definedness 
restriction cuts structural recursion homomorphisms commutative idempotent monoid sets revealing telling correspondence monads :10.1.1.33.5381
nested relational calculus denoted nrc designed restriction 
nrc essentially simply typed lambda calculus extended construct building records construct decomposing records field selection construct building sets construct decomposing sets means restriction structural recursion 
specifically construct decomposing sets fe forms set big union set nrc suitably extended implemented nrc module kleisli counterpart cpl la wadler equations relating monads comprehensions :10.1.1.33.5381
expressive power nrc extensions studied 
impact theoretical results design cpl kleisli cpl adopts nrc delta gamma xi core allowing full fledged recursion operators imported easily needed system 
nrc delta gamma xi captures standard nested relational queries high level manner easy automated optimizer analysis 
easy translate user friendly surface syntax comprehension syntax sql select syntax nrc delta gamma xi 
suitable core 
type inference self describing exchange format dynamic heterogeneous environment bioinformatics different database software systems 
thought explicit database schema 
compounding problem research biologists demand flexible access queries ad hoc combinations 
query system aims general integration mechanism environment satisfy conditions 
count availability schemas 
able compile query submitted solely structure query 
second data model external database software systems easily translate doing lot type declarations 
third shield existing queries evolution external sources possible 
example extra field appearing external database table necessitate recompilation rewriting existing queries data source 
fourth data exchange format straightforward demand programming effort capture variety structures output external databases softwares 
requirements addressed features cpl type system 
cpl polymorphic record types allow example 
name salary defines function returns names people earning dollars 
function applicable name salary fields allowing input source freedom evolve 
cpl variant types allow example value name john zip code 
set contains objects different structures string carrying name tag number carrying zip code tag 
feature particularly useful handling asn formatted data entrez important complex sources dna sequences contains profusion variant types 
addition cpl require type declared 
type meaning cpl program completely inferred structure schema type declaration 
possible logically plug data source doing form schema declaration small acceptable risk run time errors inferred type actual structure compatible 
important feature data sources explicit schemas extremely large schemas take pages write example asn schema entrez making impractical form declaration 
come fourth requirement 
data exchange format agreement lay data data stream message data exchanged systems 
case format exchanging data kleisli bioinformatics sources 
data exchange format kleisli corresponds toone kleisli data model 
provides records variants sets bags lists allows data types freely composed 
fact data exchange format completely adopts syntax value construction cpl described previous section 
recall cpl programs contain type declaration 
cpl compiler cpl program principle typing scheme 
kind type inference possible construct cpl unambiguous general type 
particular value construction syntax possible inspect symbols local type constraints corresponding value value constructor unambiguous 
example bracket seen immediately clear bag bracket seen immediately clear record 
adopting value construction syntax cpl data exchange format self describing 
self describing exchange format need define advance structure objects exchanged 
fixed schema type declaration 
sense object exchanged carries description 
self describing format important property matter complex object exchanged easily parsed reconstructed schema information 
understand advantage look iso asn standard open systems interconnection 
easy exchange asn objects parse asn object need parse schema describes structure making necessary write complicated parsers simple parser 
kleisli triples syntax consider restricted form structural recursion corresponds presentation monads kleisli 
combinator ext delta delta obeying equations ext fg fg ext fog ext ext ext ext equivalent ff rg construct nrc 
direct correspondence cpl ext interpreted ext combinator key operator complex object library kleisli heart nrc representation queries implementation cpl earns central position kleisli system offers tremendous practical theoretical convenience 
practical convenience best seen issue syntax implementation database query language 
syntax internal representation query usually manipulated code generators better easier analyse 
confused surface syntax usual database programmer programs better surface syntax easier read 
worth contrasting ext construct comprehension 
regard surface syntax cpl adopts comprehension syntax easier read ext construct 
example cartesian product sets expressed comprehension syntax contrast expressed ext construct ext ext convoluted 
advantage comprehension syntax ends 
regard syntax situation exactly opposite 
comprehensions easy human programmer read understand 
fact extremely inconvenient automatic analysis poor candidate representation queries 
difference illustrated pair contrasting examples implementing optimization rules 
known optimization rule vertical loop fusion corresponds physical notion getting rid intermediate data logical notion quantifier elimination 
optimization queries comprehension syntax expressed informally fe gn nx fe hm fe gn hm rule comprehension form simple grasp 
basically intermediate set built comprehension fe hm eliminated favour generating fly 
practice quite messy implement rule 
writing rule informal denotes number generator filters comprehension 
comes implementing nasty traversal routine written skip non applicable order locate applicable nx fe hm consider ext construct 
pointed wadler comprehension translated :10.1.1.33.5381
effect optimization rule vertical loop fusion dramatic 
optimization expressed nx ny gg nx ny informal troublesome longer appears 
rule coded straightforwardly implementation language 
similar observed proofs structural induction 
comprehension syntax comes case comprehension introduce secondary induction proof number generators filters comprehension ext construct give rise complication 
related saving pointed wadler comprehensions require kinds terms expressions qualifiers ext formulation requires kind term expressions 
order illustrate point concretely necessary introduce detail implementation kleisli system 
recall introductory section kleisli implemented top standard ml new jersey sml 
type syn sml objects represent queries kleisli declared nrc module mentioned section 
data constructors relevant discussion type var int variables represented int type svr int server connections represented int type 
representation complex objects datatype syn 
emptyset syn syn syn extset syn var syn ext ifthenelse syn syn syn read svr real syn process real request priority assigned optimizer variable var binary 
syn syn construct caching static objects 
allows optimizer insert codes doing dynamic optimization sml objects represent optimization rules kleisli functions type rule type rule syn 
syn option optimization rule successfully applied rewrite expression expression 
successfully applied 
return rule vertical loop fusion 
promised earlier simple implementation example vertical loop fusion 
fun extset extset extset extset higher order functions optimization idea exploited implementing kleisli higher order functions 
advantages conveniences higher order functions allowing expression better algorithms discussed 
implementation kleisli query optimizer module illustration 
optimizer consists extensible number phases 
phase associated rule base rule application strategy 
large number rule application strategies supported 
familiar ones include applies rules rewrite expression tree leaves root single pass applies rules rewrite expression tree root leaves single pass applies rules largest redices single pass multi pass versions 
exploiting higher order functions rule application strategies decomposed traversal component common strategies simple control component special strategy 
short higher order functions generate strategies extremely simply resulting small optimizer core 
give ideas done sml code fragments optimizer module mentioned section 
traversal component higher order function shared strategies val decompose syn 
syn 
syn 
syn recall syn type sml object represents query expressions 
decompose function accepts rewrite rule query expression applies immediate subtrees rewrite immediate subtrees 
note touch root traverse just rewrites immediate subtrees straightforward looks fun decompose decompose decompose extset extset 
rule application strategy function having type val 
syn 
syn precise definition type important discussion point deferred 
function takes rule base query expression optimizes new query expression applying rules strategy assume pick 
rule sml function takes rule base query expression returns rule applicable rule applied rewrite control components strategies mentioned earlier generated simple way 
example strategy applies rules maximal subtrees 
starts trying rules root query expression 
rule applied moves level paths tries 
soon rule applied path stops level path 
words applies rule path root leaves 
control component fun rdb qry case pick rdb qry 

decompose rdb qry example strategy applies rules leaves root pass 
tries rewrite node moves root query expression 
control component fun rdb qry fun pass val decompose pass case pick rdb 

pass qry interesting class rules requires multiple rule application strategies 
scope rules vertical loop fusion previous section entire query 
contrast class rules parts 
inner part context sensitive scope limited certain components query 
outer part scopes entire query identify contexts inner part applied 
parts rule applied completely different strategies 
rule base rdb represented system sml record type type bool ref trace rulename 
syn 
syn 
unit ref rules rulename rule list ref rules field rdb stores list rules rdb names 
trace field rdb stores function tracing usage rules rdb 
field rdb stores flag indicate tracing done 
tracing indicated rule name rdb applied successfully transform query trace function invoked record trace 
normally simply means message rewritten rule printed 
trace function allowed carry considerably complicated activities 
possible exploit trace functions achieve sophisticated transformations simple way 
example rule rewrites true inner part rule rewrites true 
outer part rule identifies context scope inner part rule limited branch 
example intuitive human 
branch conditional subexpressions identical test predicate conditional eventually evaluate true 
rule straightforward express machine 
informal way 
fortunately rules kind straightforward implement system 
example absorption rule expressed rule 
rule clauses 
clause says rule applied ifthenelse test predicate boolean constant lead non termination 
second clause says rule applied forms ifthenelse 
third clause says rule applicable situation 
fun ifthenelse bool ifthenelse fun equiv bool true case contextsensitive 
ifthenelse 
second clause meat implementation 
inner part rewrite true captured function rewrites identical true 
function supplied rule applied strategy scope branch contextsensitive rule generator 
fun contextsensitive rule strategy qry val changed ref false flag set rule applied val rdb set context sensitive rule base ref true trace ref fn 
fn 
fn 
changed true changed true rule rules ref rule val strategy rdb qry apply rule strategy 
changed contextsensitive rule generator reused context sensitive optimization rules rule migrating projections external relational database systems 
optimization queries relational databases relational database systems powerful data sources kleisli interfaces 
database systems equipped ability perform sophisticated transformations expressed sql 
optimizer aim migrate operations kleisli systems possible 
main optimizations useful context migration projections selections joins single database migration joins databases 
kleisli optimizer different rules exploit opportunities 
show 
rule migrating projections 
special case rule rewrite name process select name process select name name assuming connects sql database 
original query entire table retrieved 
rewritten query column table retrieved 
generally relational database system context field projection projections pushed relational database unused fields retrieved transferred 
example rule migrating projections relational database implemented 
rule requires function traverses expression determine context field projection determine fields projected returns context returns list contains fields projected 
function implemented simple way contextsensitive rule generator example 
fun val count ref ref fun variable count proj variable contextsensitive length count recall section process represented nrc module syn object read priority assigned kleisli 
rule defined 
function sql support routines available current release kleisli handle manipulation sql queries syn syntax objects 
fun extset read string annotations test connects sql server case test projection 
extset read string sql 
second rule migrating selections 
special case rule rewrite process select emp name peter process select emp name peter original query entire table emp retrieved relational database kleisli filter peter record 
rewritten query record peter retrieved directly retrieving records 
generally relational database equality tests push tests database possible 
example rule migrating selections relational database implemented 
rule requires function ok traverses tower extract equality tests satisfying check ok migration returns triple pve list tests list tests negated remaining transformed part tower satisfies pve fg function implemented simple way follows 
fun ok ifthenelse emptyset val pve ok ok pve pve ifthenelse emptyset ok ifthenelse emptyset val pve ok ok pve pve ifthenelse emptyset ok extset val pve ok pve extset ok rule defined 
function sql support routines available current release kleisli handle manipulation sql queries syn syntax objects 
function call uses catalog relational database determine fields output sql query blob blob field usually large string equality test supported underlying database function uses output produce function test expression equality test migrated 
fun extset read string annotations test relational db val forbidden sql mk migrate tests blob fields val hash error oops val insert hash forbidden val pve hash val pve pve convert list tower val convert list tower null pve andalso null extset read string sql pve third rule migrating joins 
special case rule rewrite mgr process select emp process select dept name peter name dept mgr process select dept dept emp dept name peter name dept original query entire table emp retrieved entire table dept retrieved times cardinality emp 
words requests relational database rewritten query request relational database retrieve record join emp dept matching peter 
generally relational database context field projection equality tests join push database 
advantages request matching records joins retrieved entire tables underlying relational database system context information perform better optimization 
example rule migrating joins relational database implemented 
function sql support routines available current release kleisli handle manipulation sql queries syn syntax objects 
fun extset read string annotations test sql server case test projection 
projections outer relation val forbidden sql mk migrate tests blob fields val hash error oops val insert hash forbidden val po hash po tests outer relation migrated 
left migration case hash pi ni extset read string 
inner relation join 
pi ni tests migrated 
projections left migration extset rename read string sql po pi ni 

done function hash traverses look subexpression uses database inner relation join 
relation exists returns pi ni extset read string set inner relation join join condition pi ni stores projections inner join variable occurs expression corresponding remaining operations migrated 
fourth migration selections relational databases 
example rewrite mgr process select emp process select dept name peter name dept mgr process select dept dept emp name peter process select mgr mgr dept name dept different relational databases push test dept name reason database different access value instance dept enable migration value instance dept passed dynamically shown rewritten query dept dynamically concatenated sql query select mgr mgr dept name passed note general need come relational database simply need look equality tests involving variable inner relation migrate 
example rule migrating selections dynamically relational databases implemented 
function sql support routines available current release kleisli handle manipulation sql queries syn syntax objects 
fun extset read string annotations test relational database val vars fv vars free variables val forbidden sql mk migrate blob fields val hash error oops val insert hash forbidden fun ins insert hash fn 
false val intset app fn 
ins vars val vars intset difference vars intset singleton vars free variables entire expression 
vars inside may migrate 
val pve fn 
hash andalso intset member fv pve tests migrated dynamically 
left 
null pve andalso null extset read binary fn 
mk sql pve vars km string record record map variable intset vars binary construct notable 
kleisli engine encounters construct effectively executes values point 
example happens original sql query happens store values equality tests performed dynamically pushes 
rules rule reordering joins relational databases 
provide implementation reordering rule kleisli example explain optimization 
consider join mgr process select emp process select dept name dept optimize mgr process select dept dept emp process select mgr mgr dept name dept optimize mgr process select mgr mgr name name dept process select emp dept name assume index name field dept optimization dept cost looking corresponding manager dept log cardinality dept index exist cost log case index happens exist dept field emp second optimization better 
generally nested loop order swapped outer relation larger inner relation index selected field outer relation selectivity 
doe impossible query having seen optimizations queries involve relational database sources show sample bioinformatics query benefits significantly optimizations 
fact bioinformatics query implemented kleisli called impossible queries department energy bioinformatics summit report www gdb org dan doe whitepaper contents html 
query find gene located particular band particular human chromosome non human homologs possible 
basically query means gene particular position human genome find dna sequences non human organisms similar 
main database containing band information gdb sybase relational database 
order find homologs actual dna sequences needed ability compare needed 
unfortunately database keep actual dna sequences 
actual dna sequences kept database called genbank 
time access genbank provided asn version entrez extremely complicated retrieval system 
entrez kept precomputed homologs genbank sequences 
query needed integration gdb relational database located baltimore entrez database located bethesda 
query extracted names genes desired band gdb accessed entrez homologs genes 
homologs filtered retain non human ones 
query considered impossible time system bioinformatics sources involved due heterogeneity complexity geographical locations 
complexity query cpl query remarkably short 
kleisli power bioinformatics applications example query mentioned shown 
sybase add name gdb readfile locus gdb read readfile gdb read nonhuman homologs locus objectid na get homolog summary title string human title string lines connect gdb map tables gdb kleisli 
tables referenced kleisli locally defined sets locus 
lines extract tables accession numbers genes chromosome entrez function na get homolog summary obtain homologs filter homologs non human ones 
obvious smoothness integration data sources query remarkably efficient 
surface fetch locus table entirety table entirety times gdb naive evaluation comprehension nested loops iterating tables 
fortunately reality kleisli optimizer able migrate join selection projections tables single efficient access gdb optimizing rules section 
furthermore accesses entrez automatically concurrent 
query kleisli components number bioinformatics projects gaia university pennsylvania www cis upenn edu gaia tambis university manchester kent ridge digital labs 
constructing databases pharmaceutical biotechnology companies genomics collaborative signature biosciences kleisli backbone 
www com 
warehousing genpept reports ability query assemble transform data remote heterogeneous sources important able conveniently warehouse data locally 
reasons create local warehouses increases efficiency increases reduces risk unintended denial service attacks original sources allows careful data cleansing done fly 
warehouse efficient query easy update 
equally important biology arena warehouse model data conceptually natural form 
relational database system read notice sql flavor original implementation completely vanished 
current version kleisli significant advancements interfacing relational databases 
efficient querying easy update native data model flat tables forces unnecessarily fragment data order fit data third normal form 
kleisli native database management system 
kleisli ability turn kinds database systems updatable store conforming complex object data model 
particular kleisli flat relational database management systems sybase oracle mysql updatable complex object store 
systems simultaneously 
illustrate power kleisli example genpept reports 
kleisli provides functions access genpept reports remotely entrez aa get uid general retrieves unique identifiers genpept reports matching search string aa get general retrieves genpept reports matching search string aa get uid retrieves genpept report corresponding unique identifier 
national center biotechnology information imposes quota times foreign user access entrez day 
prudent desirable incrementally warehouse genpept reports local database 
example create warehouse genpept reports 
initialize reports protein tyrosine 
connect oracle database system oracle add name db create table store genpept reports db table genpept schema uid number detail long initialize ptp data uid uid detail aa get general ptp genpept db write index uid field fast access db table genpept index schema uid see title report readfile genpept genpept db read detail title genpept uid example table genpept created oracle database system 
table columns uid recording unique identifier detail recording genpept report 
long data type detail column table 
recall example genpept report highly nested complex objects 
mismatch long essentially big uninterpreted string complex structure genpept report 
mismatch resolved kleisli automatically performs appropriate encoding decoding 
far kleisli user concerned detail type genpept report example 
ask title report straightforwardly detail title 
normally daily quota accessing entrez exhausted aa get uid returns empty set 
possible configure kleisli testable null value returned 
useful regularly examine local warehouse update null values proper genpept records 
example query check null values local warehouse replace proper genpept reports 
query run regularly new entrez quota available 
oracle add name db readfile genpept genpept db read db update table genpept selector uid uid replacement detail genpept detail null aa get uid uid oracle add readfile genpept part needed local warehouse currently connected 
convenient provide function aa get uid looks local warehouse genpept reports going straight entrez 
useful automatically updates warehouse needs fetch new reports entrez 
example implement memoized version aa get uid 
uses function kleisli sure expression evaluated value evaluates returns 
implement memoized version aa get general 
oracle add name db readfile genpept genpept db read primitive aa get uid 
detail genpept uid 
desired genpept report fetched aa get uid db insert table genpept replacement uid uid detail null quota ran time tried fetch aa get uid db update table genpept selector uid uid replacement detail primitive aa get general 
aa get uid general aa get uid protein patent query section demonstrate kleisli context querying protein patents 
kleisli tie sources answer queries protein patents considerably demanding simple free text search protein section entrez system national center biotechnology information blast sequence homology service national center biotechnology information wu blast sequence homology software washington university system patent trademark office patents uspto gov structural classification protein database scop cambridge mrc laboratory molecular biology 
consider pharmaceutical large choice protein sequences determine functions 
criterion selection patent potential 
process involving data sources steps required depicted 
seq representative seq representative seq find similar seqs check patented seqs find abstracts claims find superfamily user query seq superfamily seq seq patent detail entrez scop uspto nr patented seq scop domains patent texts superfamily user patented user initial stage know amino acid sequence sequences little 
question point sequences patented 
existing patent search systems ir systems rely english words 
systems suffer dichotomy recall vs precision return highly relevant information expense missing large portion return highly relevant information expense returning lot information 
standard interface patent search systems laborious fruitful 
furthermore early search english word searching actual amino acid sequences 
need reliable technology comparing protein sequences sequences patented 
things favour 
protein patents generally protein function primary sequence structure linear string letters amino sequence 
second tools reliably identify homology primary sequence structure level available 
patented protein sequences extracted database prepared form suitable tools operate means reliably identify sequences patented 
obtain patented sequences protein section entrez 
locally greater efficiency 
wu blast comparing sequences warehouse primary sequence structure homology 
protein sequences identified second question point ones potential wider patent claims 
understand question necessary recognize protein patents generally granted sequence function 
know functions proteins done know proteins evolutionary origin tend similar functions differ significantly primary structure 
terminology scop proteins superfamily 
way identify protein sequences potential wider patent claims find having large number sequences families 
homology searching algorithms primary structure generally sufficiently sensitive detect majority sequences typical superfamily primary structure distance members family mutated significantly 
need tools homology tertiary structure level 
reliable automatic tools purpose exist moment structural similarity tertiary level necessarily imply similarity function 
reliable manually constructed databases superfamilies exist 
nice scop database 
screen sequences scop pull representative sequences superfamilies check ones patented identifying superfamilies potential 
wu blast screening 
representatives superfamilies necessary fish rest members superfamilies 
step accomplished blast remotely compare representatives huge nonredundant protein database nr curated national center biotechnology information 
having potentially protein sequences ready hopefully patent results 
need ask third question relevant prior arts 
retrieving texts patented sequences superfamilies proteins helpful 
step complementary previous step carried exactly technology 
example describe query find sequences superfamily user supplied protein sequence complicated questions mentioned 
program shown 
name nr blast db nr level line name patent blast db patent aa blast fasta name scop blast db scop aa blast fasta name scop index index scop aa level scop add scop readfile scop summary scop aa data summary stdin line primitive scop uid set index accession scop summary eq materialize scop uid title title accession accession uid uid class desc cl fold desc cf superfamily desc sf family desc fa protein desc dm species desc sp line scop pscore pscore nr pscore process seq scop blast pscore pscore scop process accession 
scop sf process type sf 
scop scop uid sf line process get uid 
scop index process seq patent blast pscore pscore patent process seq nr blast pscore nr data sources connect 
establish connection nr blast blast national center biotechnology information searching nr database line 
concurrency level connection set efficient parallel access 
establish connection patent blast wu blast searching local warehouse patented proteins line 
establish connection scop blast wu blast searching local warehouse scop representative sequences line 
establish connection scop index index scop representative sequences line 
warehouses index constructed previously kleisli 
establish connection scop scop classification database line 
different connections scop needed scop database line contains names classification actual representative sequences 
keep sequences proprietary sequence indexing technology 
index line allows quickly retrieve sequence identifier pattern 
unfortunately wu blast requires sequences stored different format 
need third connection scop line 
deal problem identifiers scop lines different identifiers line 
need map identifiers captured relation scop summary line 
quick access create memory resident index scop uid map scop identifiers identifiers lines 
setting connections various data sources described ready issue query retrieve information sequences superfamily protein sequence seq 
information returned include title accession unique classification sequences lines 
returned protein sequence pscore respect scop nr line 
pscore reliable estimate corresponding sequence false positive blast wu blast 
blast returns hit pscore sequence chance hit fluke 
step body program 
user sequence seq compare representative sequences scop keep hits pscore error threshold pscore scop line 
hit superfamily taken superfamily input sequence seq 
find superfamily simply asking scop return scop classification line 
name identifier superfamily stored desc sf type sf fields respectively 
need fish representatives family scop 
scop gives scop identifiers sf line 
convert identifiers unique identifiers sequences kept line 
accessed give actual representative sequences line 
representative sequence compared patented sequences 
retain hits error threshold pscore patent line 
representatives superfamily dissimilar patented sequence 
compare nr database fish sequences similar error threshold pscore nr line 
desired sequences superfamily 
details process may confusing requires knowledge biomedical data resources available clear high level technology kleisli greatly simplifies process developing interesting integrated systems 
furthermore kleisli cpl programs access multiple distributed databases softwares clear concise easily written modifiable 
ability return information protein patents shown goes reach existing patent information servers standard ir systems 
clinical data query discuss example application kleisli time context querying clinical data 
clinical data usually involve historical records patient visits 
queries data involves concept window difficult express sql 
illustrate point clinical database hepatitis patients 
database table img type patient string date num alt num 
time patient alt level measured new record added table 
typical query data find patients tracked days alt level units 
query easily expressed sql group having constructs aggregate functions min max 
typical query find patients alt levels stayed units period days 
query sql 
challenges posed second query followings 
records grouped patients 
second records group sorted chronological order 
third sorted records group segmented subgroups subgroup alt levels units alt levels outside range date span subgroup overlap subgroup 
fourth return records patient subgroup spans days alt levels subgroup units 
second fourth steps straightforward sql 
unfortunately third step able sql 
query expressible kleisli system just core calculus nrc delta gamma xi 
combinator structural recursion imported kleisli query expressible 
combinator list sri corresponds fold operation functional programming languages 
want complicate discussion arithmetics dates treat value date attribute patient database integer corresponding number days passed particular fixed time point 
example define function split terms list sri split returns list yn yn sorted chronologically xn alternate true false implementation converts set list list sorts list ordering 
primitive split date check 
list sri 
check list head check list head list head list tail check list 
date date query find patients alt levels stayed units period days defined follows 
access hepatitis database oracle oracle add name readfile read define window alt level primitive window split date 
alt andalso alt compute answer set unique patient patient window list rev list head date list head date incidentally implementation demonstrates seamless integration operation kleisli window relational database 
kleisli system high level query language cpl embody advances database query languages functional programming 
represents substantial deployment functional programming industrial strength prototype significant impact data integration bioinformatics 
early kleisli prototype applied bioinformatics efficiently solve data integration problems bioinformatics 
date cpl know system express general bioinformatics queries succinctly kleisli 
key ideas success system 
complex object data model sets bags lists records variants flexibly combined 
second high level query language cpl allows objects easily manipulated 
third self describing data exchange format serves simple conduit external data sources 
fourth query optimizer capable powerful optimizations 
reason success system choice sml implementation platform enables remarkably compact implementation consisting codes sml 
doubt robust platform functional programming demanded effort implement kleisli 
acknowledging contributions kleisli colleagues 
prototype kleisli cpl designed implemented wong university pennsylvania 
peter buneman val tannen leonid libkin dan suciu contributed query language theory foundational issues cpl chris overton introduced problems bioinformatics 
kyle hart helped applying kleisli address integration problem solved kleisli 
wong re designed re implemented entire system returned institute systems science renamed kent ridge digital labs 
new system production pharmaceutical industry new implementation ideas higher performance robust better support bioinformatics 
desai narasimhalu supported development singapore 
oliver wu jing chen wang added bioinformatics support funding singapore economic development board 
responsible kleisli market kleisli available commercially www com 
altschul gish 
local alignment statistics 
methods 
altschul basic local alignment search tool 
journal molecular biology 
altschul gapped blast psi blast new generation protein database search programs 
nucleic acids research 
baker tambis transparent access multiple bioinformatics information sources 
intelligent systems molecular biology 
barton sternberg 
evaluation improvements automatic alignment protein sequences 
protein engineering 
tannen structural recursion query language 
proc 
rd international workshop database programming languages pages 
tannen subrahmanyam 
logical computational aspects programming sets bags lists 
lncs proc 
th international colloquium automata languages programming pages 
buneman comprehension syntax 
sigmod record 
buneman principles programming complex objects collection types 
theoretical computer science 
burks genbank 
nucleic acids research supplement 
chen kleisli bring features results 
genome informatics 
chen protein patent query system powered kleisli 
proc 
acm sigmod international conference management data pages june 
codd 
relational model large shared data bank 
communications acm 
davidson digital library biomedical researchers 
international journal digital libraries 
dong local properties query languages 
proc 
th international conference database theory pages 
frakes baeza yates 
information retrieval data structures algorithms 
prentice hall 
goldberg paige 
stream processing 
proc 
acm symposium lisp functional programming pages 
iso 
standard 
information processing systems 
open systems interconnection 
specification abstraction syntax notation asn 
libkin wong 
query languages bags aggregate functions 
journal computer system sciences 
molecular cell biology 
freeman new york 
scop structural classification protein database investigation sequences structures 
journal molecular biology 
national center biotechnology information national library medicine bethesda md ncbi asn specification 
revision 

pang hash indexing scheme approximate subsequence matching large sequence databases 
technical report institute systems science heng mui keng terrace singapore 
pearson gdb human genome data base anno 
nucleic acids research 
pearson 
comparison methods searching protein sequence databases 
protein science 
database functional molecular immunology 
nucleic acids research 
schuler entrez molecular biology database retrieval system 
methods 
suciu 
bounded fixpoints complex objects 
theoretical computer science 
suciu wong 
forms structural recursion 
lncs proc 
th international conference database theory pages 
wadler :10.1.1.33.5381
comprehending monads 
mathematical structures computer science 
walsh acedb database genome information 
methods biochem anal 
wong 
functional guts kleisli query system 
proc 
th acm sigplan international conference functional programming pages 
wong 
kleisli functional query system 
funct 
prog 

