series controlled experiments design patterns methodology results lutz prechelt barbara unger prechelt unger ira uka de fakultat fur informatik universitat karlsruhe karlsruhe germany fax software design patterns idea intuitively appealing advocates 
scientists concerned gathering hard evidence claims beneficial consequences design patterns 
article describes major claims derives corresponding research questions 
discusses methodology research programme investigating questions sketches practical constraints research difficult 
shortly summarizes controlled experiments successfully carried constraints lists main results consequences document design patterns apply design patterns judgement alternatives 
design considerations fourth experiment discussed 
contribution description important methodological aspects practical experimental relate results obtained 
understanding relations important empirical software engineering research 
design pattern phenomenon software design patterns basically methodological engineering idea describe proven solution recurring design problem standard form chosen clarify solution context properties facilitate reuse practical situations 
idea software design patterns intuitively appealing quickly caught attention practitioners researchers 
pattern literature burgeoning 
systematic collection design patterns published gamma helms johnson vlissides gang book huge success 
books followed annual workshops held promote pattern mining consistent style reporting patterns 
pattern practitioners published anecdotal reports successful design patterns real projects claim various advantages compared practice 
object orientation effect 
enthusiasm design patterns currently adopted reminds days object orientation popular huge successes reported believed silver bullet 
slowly clear problems properly applying new capabilities 
long time projects doing worse projects doing better slowly dos don ts widely understood process complete 
computer science quickly adopted basis languages methods tools hardly scientist actively investigated questions oo better ordinary structured design programming 
circumstances 
presumably heavy empirical research effects provided faster path understanding applying properly hardly done 
similar mistake 
consequences see software engineering research actively validate design patterns empirically 
quantify advantages better understand applicability conditions improve practical pattern application 
eventually better understand mechanisms design patterns improve software practice lead improvements generalizations design pattern idea 
section discuss research programme design pattern validation describing claims corresponding research question discussing applicable research methodology 
section describe ongoing series controlled experiments conduct realm results far 
deriving research programme sketch research programme investigating properties design pattern method idea 
list claims possible advantages design patterns 
claim directly leads research questions number true 
investigating question induce hypotheses tested order answer number circumstances hold 
second discuss methods questions answered discuss constraints investigation difficult 
discussion apply empirical investigation software engineering topics design patterns 
claims design patterns main advantages claimed design patterns pattern literature follows claim ld developers learn better design skills fast studying design patterns 
claim patterns improves designer programmer productivity 
claim qn novices greatly improve designs applying design patterns 
claim qe experienced developers patterns encourage best practices ensure high design quality 
claim cd design patterns improve commun developers designers programmers claim cm design patterns improve commun developers maintainers 
certainly disputed claims rarely explicitly 
believe list justified distilling pattern literature mentioned 
methodological considerations practical constraints discuss scientific practical aspects key ingredients empirical studies design patterns principal research approach controlled experiment versus field study kinds participants students versus professionals type software investigated development maintenance team technical conduct study 
discussion leads certain design decisions research approach assessing design patterns 
laboratory versus field research fundamental distinction empirical software engineering studies clean controlled laboratory setting controlled experiments versus studies vivo real software engineering environments field studies 
come form live observation data analysis software 
note laboratory versus field distinction fuzzy field studies may exhibit semi controlled environment case studies 
principal advantage field research realism construction results obtained applicable real software engineering situation 
note advantage misleading lack control impossibility precisely characterizing field environment may difficult judge generalizability study 
principal advantage laboratory research reproducibility environmental conditions neatly controlled documented 
particular extremely influential variable individual programmer performance controlled sufficient internal replication statistically comparing random samples programmers individual ones 
reproducible results scientifically hard controlled experiments principle preferable field research 
problem laboratory experiments ensuring results useful lack models judging laboratory results generalize professional settings 
fruitful research approach usually laboratory field research results controlled experiments produce new approaches hypotheses tried investigated field 
conversely observations field produce new hypotheses tested controlled experiments exactly currently happening design patterns developed practitioners imply set hypotheses tested experiment 
results laboratory field needed build validate quantitative models consequences design pattern 
final note rarely possible conduct controlled experiments live software note problem applies field studies 
results valid realistic context performed lack models transfering contexts 
fact models field study generalization difficult laboratory studies field environment harder characterize due higher complexity 
engineering environment get best worlds 
see example 
subjects center empirical laboratory study designers programmers 
subjects may junior senior software professionals students 
maximum generalizability subjects broad cross section professional software engineers representing types processes software domains experience levels obviously impossible 
alternatives disadvantages students possibly inexperienced limits external validity generalizability experiment 
contrast senior software professionals highly adapted specialized usual working environment software domain software process 
limit external validity entirely unclear transfer results homogeneous group professionals 
junior professionals mixing advantages disadvantages groups degree different students close graduation 
practical point view professionals rarely available controlled experiment usually involves significant amounts due required replication 
experiments conducted student subjects 
sufficiently experienced necessarily disadvantage depending tasks may easier extrapolate student results higher experience levels transfer results coming specific professional background 
independent kind subjects number plays crucial role experimentation subjects available easier discriminate individual inter personal variations performance variations stem variable study 
subjects available results statistically significant 
problem smaller individual performance homogeneous way known predict individual performance personal data 
furthermore experiments require subjects specific knowledge 
example subjects need design pattern knowledge types design pattern experiment 
experiment concerns stateof art technique design patterns subjects taught course topic experiment 
task type dimensions task performed experimental subjects may differ may design implementation task scratch maintenance may done team may target programs different size different domains may employ different types design patterns 
purely pattern research point view large team tasks usually preferable 
practically unrealistic obtain sufficient replication tasks amount involved large 
increasing replication useful amount may smaller tasks individuals 
small tasks danger total design pattern content task may low 
preferring maintenance program extension construction scratch leads way dilemma allows larger programs increasing task size 
environment realistic working environment established experimental subjects normal workplace office desk computer hardware software configuration normal environment noises bookshelf contents colleagues ask 
depending concrete experimental question may counter productive impossible control colleagues asked certain computer help external interruptions telephone colleagues disrupt influence results uncontrollable manner usually want clean quiet laboratory workplace mimics essential features original environment lacks disadvantages 
difficult hard technical challenge supply dozens different subjects preferred computer setup 
volume hardware space required problem diversity complexity software configurations 
practical constraints force experimenter standardized computer setup conduct experiment computer infrastructure handwriting 
harmful restrictions depends lot actual task solved imposing constraints selection tasks 
instance design task solved implementation task usually requires familiar computing environment 
rule thumb larger size solution text important computer environment getting results generalize professional working environments 
fortunately tasks result short solution texts 
summary see discussion controlled experiments method choice initial scientific investigation design patterns 
experiments suggest specific questions subsequent field research 
initial experiments student professional subjects acceptable 
practical considerations suggest maintenance tasks investigated possible program task size larger compared designing writing program scratch 
tasks selected minimize influence technical constraints particular available computing infrastructure 
actual experiments performed experiments considerations constraints mentioned currently planning 
described order 
experiments pattern documentation maintenance experiment variation compared speed correctness maintenance pairs programs pair design patterns documenting identical code documentation pattern uses removed 
programs thoroughly documented quantitatively removal design pattern documentation difference specific quality design pattern documentation important 
full documentation experiment :10.1.1.15.3439
question claim cm true 
experiment avoids severe problem testing claim compared programs patterns different programs unclear results originate communication improvements structural program differences 
contrast experiment uses program groups documentation respect patterns different 
subjects taught optional week intensive graduate lab course java best initially participants qualified experimental subjects 
course assignments taught small number design patterns illustration java design style 
repeated experiment similar programs participants undergraduate course design patterns washington university st louis 
procedure experiment carried subjects experiment directly implemented workstation 
participant worked different programs wrote solutions certain maintenance tasks 
groups arranged form group counter balanced design 
programs tasks program phonebook implemented simple address book 
observer pattern observer classes different functionality implemented 
main task adding third observer understand specific observer pattern instance implement new observer class 
functionality differences observer classes nontrivial 
program tree implemented trees string nodes leafs string concatenation nodes string alternation nodes 
composite plus visitor pattern realized program arbitrary tree traversal routines single visitor class existed computing tree depth 
task adding second visitor class computing total number alternations cross product nodes tree 
task solved single new visitor class adding method node type class 
results programs involving observer pattern group pattern documentation faster see table 
refer discussion complex results 
program involving composite visitor pattern group pattern documentation far fewer errors required time 
differences statistically significant 
find claim cm supported conclude communication improvement may visible productivity quality improvement depending situation program maintainers schedule pressure 
see discussion results 
experiment patterns versus alternative designs maintenance experiment investigated patterns beneficial aside documenting difference depends level pattern knowledge 
detailed description experiment 
question patterns beneficial maintenance compared simpler solutions problem 
question includes aspects claims qe cm leads methodological problem fair alternative pattern comparison 
separately assess question subjects pattern course investigate aspects claim ld 
subjects taught pattern course half days professional software engineers sd munich 
experiment conducted parts course 
subjects pro mean means difference signifi pd pd 
cance variable pd pd gamma total points gamma relevant points gamma number correct solutions time minutes gamma table results observer task experiment 
columns left right name variable arithmetic average pd sample subjects provided design pattern information pd ditto confidence interval difference pd gammap gamma measured percent pd gamma significance difference sided 
describes probability observed differences occurred merely chance 
points judge correctness solution 
relevant points points pattern relevant subtasks 
distributions distinctly non normal computed percentile method trials bootstrap resampling 
pretest posttest alt pat pretest alt pretest pat posttest alt posttest pat time minutes required program stock ticker task experiment separately design pattern pat version simpler alternative alt version 
dot marks subject square arithmetic mean non dotted line square indicates plus minus standard error mean 
lines overlap difference respective means statistically significant 
top area lines shows individual groups 
mid area lines shows pretest posttest groups pat combined pretest posttest groups alt combined 
likewise bottom area lines shows pat alt groups combined 
average years professional experience 
little previous experience patterns half 
procedure different program pairs pair maintenance tasks solved 
subject worked programs pattern course pretest course posttest 
program pair consisted versions half subjects version design patterns 
different alternative solution 
alternative reasonable design part functionality flexibility design pattern solution required program hand 
answers written 
programs program stock ticker contained observer pattern 
purpose multiple alternative dynamic views stream stock trade events 
alternative version similar registration mechanism notification hardcoded 
program communication channels contained decorator pattern 
purpose transparent addition encryption compression alternative version functionality realized single class selected switches 
program graphics library contained composite factory pattern 
purpose transparent grouping graphical objects transparent handling multiple device types 
alternative solution modest structural differences 
program boolean contained composite visitor pattern 
purpose representing boolean formulas consisting xor terms variables 
alternative ver pretest posttest alt pat pretest alt pretest pat posttest alt posttest pat time required program communication channels task experiment 
sion replaced visitor methods distributed term classes 
multiple maintenance tasks program described detail 
results specific setting experiment possible outcomes occurred program stock ticker involving observer pattern program version took longer maintain particular subjects low levels pattern knowledge pretest see 
programs graphics library involving composite factory boolean formulas involving composite visitor pattern version alternative solution just 
program communication channels involving decorator pattern solution clearly superior pretest see 
differences mentioned statistically significant 
may unsatisfying result 
interesting feature fact results correctly predicted analyzing locality interactions program locality anticipated changes 
visitor expected negative effect occur explain fact 
means generally software engineering common sense carefully applied suitable predictor relative usefulness design patterns versus alternative solutions design patterns useful cure cases current understanding designs comprehension expecting difficulties wrong places 
point flexibility gang design patterns suggests design patterns specific reasons identified particular alternative solution better 
currently working statistical model results quantifies relative contributions various variables personal experience results 
experiment communication developers maintainers design phase currently planning third experiment investigate usefulness patterns improve communication design phase claim cd 
anecdotal evidence suggests patterns particularly beneficial situation 
consider design program extension team member knows previous design involving additional aspect claim cm 
team develop suitable design 
experimental setup team consists subjects 
person team hand design including description design rationale familiarize design approximate knowledge original developer 
meeting team scheduled extension task solved 
step developer explains design team members 
team discusses decides alternative design solutions task 
explanation developer discussion videotaped transcribed analyzed typical communication events communication breakdowns expect contributions claims cd cm distinguished observations making experiment useful 
independent variables experiment ffl patterns persons members team may general design pattern knowledge true false alternatively group step second step third step false true group solve package take pattern course solve package group solve package take pattern course solve package table suggested experiment design experiment communication designers different levels pattern knowledge team 
ffl patterns program original design may involve design patterns 
ffl patterns task contains patterns extension task may directly involve patterns 
may interested various combinations variables 
choose vary variable pretest posttest design teaching course design patterns 
vary second third variable different combinations program task package program extension task involve patterns package involve patterns 
results experiment design shown table 
new teams composed task reduce team members experiment 
dependent variables instance ffl frequency cause communication breakdowns misunderstandings ffl means recovering ffl frequency context different communication styles media technical terms target program concepts ffl local purpose uses establishing communication episode continuing previous 
contrast experiments dependent variables qualitative nature require context consisting qualitative variables 
issues resolved 
learning effects may arise getting familiar discussions 
learning effects may dominate intended experiment effect 
avoid 

objectively compare design results 
find suitable package pair 
similar respect design communication occurrence design patterns 
relate aspects communication behavior qualitatively different 
order avoid mistake software engineering research community thoroughly test claims software design patterns 
practically speaking difficult 
art empirical software engineering produce useful scientific insight despite tight practical constraints 
particular controlled experiments qualitative properties task characteristics software engineering situation preserved quantitative aspects task size scaled extremely far 
article describes reproducible scientific results properties software design pattern usage obtained 
research price performance ratio useful practical advice derived results experiments showed carefully documenting pattern usage highly recommendable pays maintenance 
experiment proved design patterns beneficial alternative solution appears simpler second unsuitable application harmful situations 
resulting practical advice calls apply common sense design patterns cookbook fashion doubt prefer high flexibility 
experiments studies types necessary completing understanding design pattern idea 
information detailed information experiments available ira uka de exp site particular contains experimental materials raw result data source form 
michael philippsen walter tichy worked experiments respectively 
ernst initiated peter organized experiment sd experimental subjects 
beck coplien crocker vlissides 
industrial experience design patterns 
th intl 
conf 
software engineering pages berlin march 
ieee cs press 
frank buschmann meunier hans rohnert peter michael stal 
software architecture system patterns 
john wiley sons chichester uk 
larry christensen 
experimental methodology 
allyn bacon needham heights ma th edition 
bradley efron robert tibshirani 
bootstrap 
monographs statistics applied probability 
chapman hall new york london 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addisonwesley reading ma 
adam porter harvey carol toman lawrence votta 
experiment assess cost benefits code inspections large scale software development 
proc 
third acm sigsoft symposium foundations software engineering 
lutz prechelt 
experiment usefulness design patterns detailed description evaluation 
technical report fakultat fur informatik universitat karlsruhe germany june 
ftp ira uka de 
lutz prechelt barbara unger michael philippsen walter tichy 
controlled experiments assessing usefulness design pattern information program maintenance 
empirical software engineering 
submitted 
ira uka 
de prechelt biblio 
lutz prechelt barbara unger douglas schmidt 
replication controlled experiment usefulness design patterns detailed description evaluation 
technical report wucs washington university dept cs st louis december 
lutz prechelt barbara unger walter tichy peter lawrence votta 
controlled experiment maintenance comparing design patterns simpler solutions 
ieee trans 
software engineering 
submitted 
ira uka de prechelt biblio 
douglas schmidt 
collected papers plop europlop conferences 
technical report wucs washington university dept cs st louis february 
conference pattern languages programs 
mary shaw david garlan 
software architecture perspectives emerging discipline 
prentice hall 
