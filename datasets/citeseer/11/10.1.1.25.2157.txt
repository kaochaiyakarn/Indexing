programming grid distributed software components grid web services scientific applications dennis gannon randall geoffrey fox rossi felipe bertrand ken chiu matt madhu govindaraju sriram krishnan ramakrishnan alek yu ma caroline nicolas rey department computer science indiana university computational grids grid grid important asset large scale scientific engineering research 
providing set services allow widely distributed collection resources tied relatively seamless computing framework teams researchers collaborate solve problems attempted 
unfortunately task building grid applications remains extremely difficult tools available support developers 
build reliable re usable grid applications programmers equipped programming framework hides details grid services allows developer consistent non complex model applications composed tested reliable sub units 
describes experiences software component framework building grid applications 
framework doe common component architecture cca cca cca cca allows individual components export function service interfaces remotely invoked components 
framework provides simple messaging event system asynchronous notification application components 
describes emerging web services wsdl model fits component oriented application design philosophy 
illustrate connection web services grid application programming describe simple design pattern application factory services simplify task building reliable grid programs 
address issues grid programming better understood perspective peer peer systems 
particular describe models collaboration resource sharing fit grid application scenarios 

computational grids computational grid consists set resources computers networks line instruments data servers sensors tied set common services allow users resources view collection seamless computing information environment 
standard grid services include security services support user authentication authorization privacy information services allow users see resources machines software services available job submission services allow user submit job compute resource user authorized scheduling services allow multiple resources scheduled concurrently user support services provide users access trouble ticket systems span resources entire grid 
grid services described ipg 
grid middleware systems legion support global namespaces files objects 
globus provide access metadata catalogs storage resource brokers srb 
large grid efforts griphyn griphyn european data grid particle physics data grid edg ppdg seek build wide area data management systems allow file caching network provide higher throughput access users 
unfortunately building applications run reliably efficiently grid platforms difficult task 
reasons numerous 
applications consist heterogeneous collection sub applications stitched form large distributed application 
difficulty lies making pieces consistent predictable manner 
cases reliability source problem 
example sub computations parallel program running parallel computing platform scheduled conventional batch system synchronize communicate parts application 
problems encountered involve complex interactions various grid services schedulers security systems network requirements 
cases source difficulty lies application designs overly complex supported grid programming tools 
experience building complex grid applications led 
important distinguish grid developers users provide appropriate tools group 
second case grid developers software component model incorporates wide area publish subscribe messaging system provide powerful mechanism building grid applications 
tools complex distributed applications workflow scripted legacy application component wrapped controlled 
third experiences revealed weaknesses current grid programming methodology believe addressed adapting web services concepts grid 
science grid portals argue types grid application developers users 
numerous group users program pre packaged grid applications simple graphical web interface supply application specific parameters simple execution configuration data 
ideal world group people need know little actual grid protocols services 
second group grid programmers know build grid application composing existing application components grid services 
third group consists researchers build individual components distributed application simulation programs data analysis modules basic sub computations wide area grid application 
group little experience building distributed applications 
users skills span categories grid application development systems allow programmers expert 
experience group users best served grid portals web servers allow user configure run class applications 
server task authenticating user grid invoking needed grid services required launch user application 
grid portals current include xcat science portal xcat gateway gateway mississippi computational web portal discover rutgers npaci grid port nimrod nimrod nasa ipg cactus cactus 
basic architecture grid application portal illustrated 
portal designs share characteristics model 

grid portal architecture 

user secure connection web browser portal server 

portal server obtains certificate proxy certificate server uses authenticate user grid 

user completes defining parameters computation portal web server launches application manager process controls monitors actual execution grid computation 
web server delegates users proxy credential application manager application manger may act users behalf 

systems application manager publishes event message stream persistent event channel archive 
event stream describes state grid application execution monitored user browser 
cases application manager just remote grid application 
cases wrapper legacy application 
case applications involve concurrent computations multiple resources application manager agent responsible launching coordinating remote computations 
application manager simply script drives workflow complex set tasks grid application accomplish 
design application manager script workflow particular grid application web interface task second level grid programmers 
level grid programming primarily addresses 
paragraphs follow shall describe software component architecture task building distributed grid applications 
argue just special case general web services framework grid systems 
section discuss ways peer peer concepts provide additional important support building grid applications groups collaborating users 

software component models software component technology new 
standard part software design practices 
microsoft com net net component concepts 
enterprise java beans ejb important technology building business largescale commerce applications 
basic concepts software component architecture difficult understand 
software component model system assembling applications smaller units called components 
system defines set rules specify precise execution environment provided component rules behavior special design features components order considered true components 
component object collection objects obey rules component architecture 
component framework software environment provides mechanisms instantiate components compose build applications 
execution environment component architecture provides component instance called component container 
cca concepts doe common component architecture cca cca cca cca component architecture designed large scale scientific engineering applications 
universities indiana utah national laboratories sandia livermore argonne oak ridge los alamos 
basic ideas drawn early versions omg common component model ccm ccm 
cca components characterized external interfaces called ports take different forms 
provides ports component access points provide interface functions component evaluate behalf client 
provides port thought service provided component 
component may zero provides ports 
uses ports component features represent external object component 
thought call site component may service provided component 
component may zero uses ports 
key architectural idea cca component uses port interface type means may require service type provided component specifically point execution component invoke method interface supplied provider 
cca provides mechanism connect uses ports component provides ports shown 

connecting uses port named type component provides port named type component means uses port object identified name remote invoking methods interface connection components runtime components need reside host 
ports dynamic entities component create new provides uses port time remove existing port 
xcat implementation xcat cca components described xml document contains information component installed instance created port names links xml file defines type 
xcat components instantiated ports connected java python java python program 
example xml document describing component name host deployed instantiated follows cca xml description component cca modi ncsa uiuc edu cca gram cca example assumed xml description file provides instructions instance component created host modi globus gram protocol 
method completes object proxy remotely executing instance component 
remote instances components connect uses port identically typed provides port call cca xcat communication protocol implement remote procedure call uses port method invocation connected provides port remote objects currently java implementation simple xml protocol soap soap 
illustrate xcat grid applications describe application manager am component launches manages single application code scripts workflow set applications 
am just version script interpreter running inside simple cca component 
way component simple 
script written manage workflow grid application 
portal web server launches authenticates running instance am downloads application script 
application manager script needs connected component appropriate port class loaded am 
done am started stopped invoking methods control port 
loaded script capable staging files running applications communicating components needed 
am allow legacy non source code applications distributed cca framework separating necessary grid communications framework specified behavior application xcat 
application manager 
control port shown 
component provides ports 
type methods void object void int string script void int id void string name string string classname void string name string port load script component dynamically add uses provide ports run script 
type methods int start int kill start interpreter 
kill causes component process terminate 
application manager effect remote python shell encapsulated cca component 
shown executing python script capable instantiating components cca creation connection api connecting new instances 
ability dynamically add provides ports allows am component expose arbitrary interface user 
example grid application real time application steering interface may exposed provides port invoked desktop component connected remote am 
events messaging case component port connections convenient robust model communicating information parts grid application 
cases grid applications require asynchronous messaging system reporting application events message say file written error condition noted subtask large application completed 
cca ports synchronous designed direct transmission data control signals components 
solve problem need form messaging event system choose 
purposes built simple xml event system 
event xml object required fields namespace type name timestamp source name 
additional fields may added extensions base type 
example event additional field string contains message 
event xsi type ns common test xmlns ns www extreme indiana edu soap events xsi type xsd string www extreme indiana edu soap events xsi type xsd string common test source xsi type xsd string test event source source timestamp xsi type xsd timestamp message xsi type xsd string application buffer overflow message event event namespace plus event type uniquely identifies class event 
class names follow hierarchical scheme event namespace giving base domain defining dot naming convention event type represent subclasses 
may base event sub classes machine machine utilization 
enables effective querying filtering event type 
filtering returns sub class events filtering machine utilization returns machine utilization events 
timestamp time event created publisher event represented iso standard 
event system follows simple publish subscribe model similar corba events notification systems java message service 
simple apis 
event subscriber push pull subscriber 
push subscriber implement interface single method void event ev invoked publishers wish deliver message 
message xml string automatically convert java class object 
pull subscriber invokes pull method pull publishers 
method takes form event filter method return buffered previously undelivered events calling subscriber 
event publisher push publisher means delivers methods subscribers invoking method pull publisher means keep archive events deliver pull subscribers 
generic event channel simple implementation simple listener listening particular publisher 
effective need mechanism store events published allow filtering query events 
done event channel 
simply put acts listener accepting events publishers publisher providing interfaces pull events filter query events past 
realtime events filtered forwarded listeners querying past events requires persistent store 
components events communicate need know location just need location event channel 
allows components lose contact migrated long running application continue function reconnect 
additional robustness crucial grid distributed applications resources components potentially unreliable 
concept generic channel channel need aware specific subtype event receives 
just extracts common information events uses filtering indexing storing event persistent store 
original event raw xml form sent request received listener 
event channel implemented top relational database stores event streams pull subscribers 
particular event identified event namespace type timestamp event received event channel 
storing timestamp event received event helps avoid problems due clock skew listeners publishers 
depending event type may machine name application name string provides information source 

application examples examples illustrate ideas practice 
common case small number stand applications run remote sites need linked form larger multi disciplinary application 
second case illustrates class applications single problem divided large number smaller pieces solution sub computations selected best solution 
similar parameter space studies 
third example complex user dynamically creates large network different components analyze solve problem different ways 
wrapping coupling applications chemical engineering done chemical engineering team ncsa example kind science problems portal intended solve 
simulation models copper sized forms interconnection microprocessor chips 
simulation consists linked codes 
consists continuum model processes deposition bath adjacent 
second consists monte carlo model events occur near surface region solution additives influence evolution deposit shape roughness filling 
codes communicate sharing data files common boundary conditions 
shows coupled codes associated application managers 

coupled chemical engineering simulation programs 
application manger signals application manger monte carlo simulation completes time step associated output state files migrated 
receipt message application manager runs continuum simulation 
terminates control returned am 
codes run separately grid 
transfer files done grid transfer utilities 
interface grid provided application managers 
wrappers provide access grid services gsi grid events codes making grid aware 
execution set controlled controlling script runs inside portal 
primary mechanism getting feedback event system 
grid file management tools transfer output files generated 
events applications handed event handlers registered logged 
special events trigger event handlers change control course execution 
application illustrates interesting scenarios collaboration 
experiment set chemical engineers tools provided portal 
simple web forms created parameter input control experiment 
subsequent users need know parameters mechanics grid computation 
interact portal web interface event notification mechanisms embarrassingly parallel search computing orbit intersections application uses grid technology build distributed parallel solution problem deciding proposed artificial satellite orbit collides space debris known operational satellites 
observable orbiting objects larger cm size catalogued 
operational spacecraft 
rest include satellites spent upper stages mission related objects 
typical earth orbits include debris orbit explosions generated objects larger cm 
debris located low km earth orbits sharing space large number operational spacecraft 
difference speed orbiting objects immense small debris object totally destroy target 
collisions may produce small fragments increase population debris 
shuttle missions perform collision avoidance maneuvers 
uses uss data base line elements space debris gives orbital parameters objects 
uses parameters model forces acting object find state time 
doing debris satellites allows prediction objects pass close warrant collision avoidance maneuver 
decides objects collide applied simple filters propagates operational satellite debris orbits period time weeks predictions poor 
collision detection easily divided smaller independent problems dividing debris objects groups assigning different computers 
operational satellites replicated nodes propagation orbits performed nodes 
overhead produced replication small number operational satellites small compared number debris objects 
note additional overhead involving communication nodes collisions want detect operational satellites debris objects 
design implements client server architecture involving single master component numerous distributed worker components see 

types components master worker partition problem distribute computation started master component sends relevant tle entries workers issues separate requests asking check collisions small simulation time period 
master component issues new requests succeeding time periods soon previous request completed 
loop repeats period time consideration covered 
size time period configurable parameter small master component frequent updates state workers 
master component displays collisions soon reported visualize orbits animated model earth 
additionally master component allows user cancel pause restart current computation 
responsible management worker components remotely shutting remote components special procedure call user exits application 
user responsible setting parameters computation location tle database period simulation time visualization options configuration options related computation 
shows portal interface 
science portal interface implementation terms cca components straightforward 
worker component written cca provides port port method std string std string targets tle std string debris tle double distance double double double step method finds close encounters targets debris tle entered strings 
method takes arguments distance report close encounters time bounds step size 
returns information close encounters strings 
master component worker cca uses port type 
master workers launched scripts 
number workers specified parameter script uniformly distributes workers set target machines 
script connects uses port master provides port single remote worker follows range cca master tostring workers computation started master component sends relevant tle entries workers rmi call uses port simulation time period operate 
master component issues new requests succeeding time periods soon previous request completed 
doesn need send tle entries workers local copy need saving bandwidth 
continues period time consideration covered 
machines workers scheduled may powerful workers running machines may finish faster ones 
limited support heterogeneous workload distribution provided 
computation worker nodes asked complete short performance test calling method int performance provides port 
results calibration divide unequally set debris objects larger set assigned powerful nodes 
method provides port exposes void kill responsible cleanup exit worker done 
invoked master component workers shuts 
uses publish subscribe event model notify interface possible collision events allowing visual tracking 
allows user access effectively grid resources providing necessary grid interactions script underlying portal 
complex interactions linear system solvers complex example show multiple components linked build distributed algorithm test environment linear system analyzer lsa 
lsa rapid prototyping tool analyzing sparse linear system equations testing various solution strategies 
designed large unstructured sparse linear systems equations occur computational science engineering 
lsa components operate sls sparse linear system objects categories ones extract sls running application url filters modify sls scaling reordering solvers solve sls generate solution vector informational modules provide analysis sls spectral information structure storage information visualization 
choosing solution strategy large sparse linear systems realistic applications relies heavily experimentation exploration time effort spent recompiling code trying understand adjustable parameters solvers trying form coherent picture results variety output lsa lets user dynamically create tree components designed provide information solution process effect step sparse linear system 
cca components allows done recompiling code launching components grid resources needed illustrates simple test configuration components created lsa 

small lsa session arrows show flow sparse linear system input various solvers 
user typically care resource component runs natural script interface application lsa portal simple layer invokes underlying notebook script 
script fragment builds executes graph def graph lib graph create add component create add component create add component reorder create add component scale create add component create add component create add component add edge add edge add edge add edge add edge add edge return def root edge arcs root node data root node data tail edge tail edge create add component method calls hides xcat invocations shown section 
method similarly creates cca port connections 
output resulting component accessible web page remote machine url published added user browser page publish subscribe event system described earlier 
example utility different communications mechanisms different needs sls sent lsa components delivered synchronously computation fail 
getting url result file back lsa portal asynchronous message fails arrive timely fashion cause application fail 
numerical linear results craft solution strategy sparse linear systems 
example difference left right second linear system scaled fed scale component 
comparing web page results instances shows took iterations versus time versus seconds solve scaled system telling user scaling ineffective problem equally important user add components tree disconnect terminate branches tree notebook interface 
time tree changed simple image new tree created script added lsa portal web page giving visual representation current state configuration record user sequence steps 

web services grids large software companies began consider done concept business business distributed applications 
early attempts initiatives linking html web sites provide services businesses 
approach failed html descriptions web sites carry semantic information site invoke services 
developing precise xml description services provided site specification protocols needed invoke service standard framework operations 
framework allow businesses provide services client businesses invoke remotely reliably directly software 
furthermore possible build automated service brokers give users choice implementations similar services solve particular problem 
consortium companies working released set standards defined web services 
standards include web services description language wsdl wsdl defines xml schema describe web service 
web service entity defined ports service endpoints capable receiving replying set messages defined port type 
port fact binding port type access protocol tells messages encoded sent port 
service may different access points protocols port type 
universal description discovery integration uddi uddi web services inspection language provide mechanism needed discover wsdl documents 
uddi specification registry service provider place publish wsdl documents 
clients search registry looking services fetching wsdl documents needed access 
services listed uddi registries 
provides simple way find wsdl documents web site 
discovery mechanisms correspond grid information service globus terms 
addition standards proposed provide additional features 
example ibm proposed wsfl wsfl mechanism scripting workflow integrating multiple services accomplish complex task 
workflow engine acts agent follows wsfl specification document contacts services required specification order directed graph specified 
workflow engine wsfl document plays role web services script engine script connect manage xcat components 
ways web services framework emerging powerful distributed object system 
example corba omg features ws support 
web services interesting 
answer ws standards simple standard web technologies focused making interoperability possible easy 
wsdl documents allow multiple protocols associated service wsfl provides high level mechanism describing way services combined accomplish task 
obvious ways web services model grid systems 
redefine standard grid services web services 
example interesting useful grid web services grid authorization service service provide place policy questions john authorized access resource evaluated 
grid application resource broker 
service select best compute resource available grid particular application run 
grid scheduling service 
resource schedulers incorporating advance reservation features 
grid applications resource required service negotiate time available notify client 
grid file object metadata directory 
able fetch metadata associated grid file object handle important applications 
example file object meta data direct special file reader may need access object 
searching grid metadata files specified metadata attributes important 
standard grid services ws interfaces 
greatly simplify task making grid services available applications need portal tools users access 
seen definition web service substantially different xcat grid component 
fact standard default access protocol web services soap default xcat communication protocol 
furthermore port interface types supported xcat easily described subset xml schemas wsdl 
xcat component instance web service 
aspect xcat components described current web services standards 
example cca components uses ports represent call points component external provided port component 
connecting uses ports provides ports give cca programming composition nature 
feeling useful addition web services standard 
grid application factory service common difficulties current grid programming model involves deployment applications shared group users 
dismissed simple management problem great source frustration groups grid users attempt collaborate 
grid frameworks globus provide uniform mechanism submitting jobs batch queues remote systems globus currently provide mechanism deploy application resource 
deployment task tracking needed libraries installing testing application environment available left user probably application author system administrator probably unfamiliar application 
unfortunately user installed application frequently difficult invoke user 
environment variable settings user environments differ greatly user 
user applications tend read write local files application designer taken account errors caused user invokes application attempts write temporary file user directory 
furthermore multiple users concurrently want invoke application provided user user better managed name space temporary files correctly collisions different instances application attempt write temporary files 
illustrate web services cca model define grid factory service gfs grid service exists solely instantiate instances specific application authorized set users 
gfs provides interface allows client specify application parameters resource requirements application run gfs creates running instance application returns handle client 
example client may submit request form take input parameters file identified urn put output file system identified urn run gigabytes memory processors 
responsibility gfs negotiate resource brokers lower level services globus gram happen 

grid factory service contacted client supplied application specific parameters special resource requirements 
factory service contacts authorization service verify user authorized execute application 
contacts resource broker service find suitable execution host 
launches application manager instance returns handle instance 
handle may name instance client discover starts running 
client run may publish event stream wsdl service advertisement client contact 
gfs provides level abstraction client higher grid services gram takes low level job submission details environment variable temporary file management hands client 
providing grid security grid web services example grid application factory service described previous section distinct requirements security 
requirements classified follows 
lowest level need transport layer security included client server authentication 
need authorization issues resolved specific connection consider delegation authority 
transport layer security tls ssl takes care basic authentication server client 
essential client know talking right server 
similar identification process may needed server trust client 
ssl tls pervasive underlying protocol 
grid security infrastructure gsi gsi provide public key infrastructure 
java cog kit cog uses ssl underlying protocol provides authentication 
underlying implementation easily replaced similar system sun java security infrastructure 
java uses java cog kit process globus user proxy certificates manage secure connections server 
default mode globus grid proxies personal web service web service started cog java provider accepts connections uses user proxy client authentication 
working providing multi user authentication 
mode server trust number clients stored public key information 
higher level security authorization client 
authorization means certain types clients may different rights services 
determined policy information server side grid authorization service credentials client presents connection 
policy information need flexibility store information individuals groups people type accesses allowed 
certificates passed credentials authentication process distinguished names certificates identify client 
need service access service satisfy user requests 
user may decide delegate credentials server turn service access services behalf user 
provide functionality gsi delegation capability 
current xcat provides port provides security features component 
underlying framework xcat authentication authorization capabilities component writers ability add security features components 
step grid personal application event service accept events user started service 
current implementation different security features easily pluggable scalable inevitable changes provide flexibility xcat component framework 

peer peer grid concepts peer peer systems divided categories file sharing utilities napster gnutella freenet characterized providing global namespace file caching directory service sharing files wide area distributed environment 
interesting cases resources services completely distributed 
user client program access local files data server files local host 
cpu cycle sharing unused user resources usually managed central system distributes small pieces contributing clients 
examples include seti entropia entropia 
cases interesting distributed system architectures 
perspective grid computing compelling features systems 
deployment model systems purely user space 
require system administrator 
security exists systems users deciding resource wish public collective central resource manager 
systems designed dynamic peers coming going collective constantly users machines go network 
systems job bypassing firewalls 
stands contrast large scale scientific grid systems manage large expensive resources constantly maintained managed system administration staff 
sun microsystems released package jxta jxta public domain provides simple toolkit building systems 
important contributions jxta 
important concept 
jxta systems distributed collection people want collaborate way 
consequently service allows groups individuals define entity represents group 
jxta includes series protocols including discovery membership sharing provide ability members identify agree membership exchange information 
example simple way discovery membership resolution simple directory associates group names lists users public keys 
presenting signed certificate group name service validate user authentic member group 
membership peer group established secure way individual members deploy services shared 
example user special application wishes share group deploy grid application factory service authorizes users members group 

addressed problem grid programming perspective building distributed applications composing application components services 
look approaches problem designing distributed applications software component systems web services peer peer frameworks 
argue software component systems web services share important characteristics foundation building grid applications 
peer peer systems show important concepts collaboration light weight easily deployed services grid computing 
component model discuss doe cca 
model application component types interfaces 
type called provides port interface functions invoked remote clients 
second type called uses port call site component uses services providing component 
components matching interface types uses provides port pair may connected 
grid implementation cca called xcat communication uses port provides port remote procedure call 
protocol rpc soap default communication layer 
point point style port communication works applications grid applications need asynchronous messaging system 
xcat uses simple soap event messaging system 
events small xml documents sent publishers persistent event channels broadcast subscribers 
unfortunately distributed grid computations composed components legacy codes designed run mode stand 
address problem designed special application manager am component proxy legacy application 
am stage files launch legacy application signal events port connections managed application changes state 
application managers programmed simple python java scripts encapsulated standard cca xcat components 
web service model component framework 
individual components services provides style port protocol binding described wsdl 
standards uddi provide discovery mechanism services similar grid information system model applied level application services grid hardware resources 
workflow ws applications defined wsfl executed flow engine manner similar way cca scripts evaluated application manager component 
note service model advantage building application factory services launch instances applications behalf distributed grid applications remote users 
shown ws applications enhanced adding grid security protocols layering soap top ssl standard globus certificates 
concluded brief discussion role peer peer systems play defining grid collaboration tools 
experience grid users able set small private temporary distributed collaborations 
technology concepts extend reach conventional grid systems allow happen 

cca allan armstrong wolfe ray kohl cca core specification distributed memory spmd framework submitted concurrency practice experience 
cca armstrong gannon geist keahey kohn parker common component architecture high performance scientific computing high performance distributed computing conference 
see ca sandia gov cca forum 
chiu diwan gannon govindaraju component services architecture building distributed applications proceedings hpdc 
lsa gannon stuckey balasubramanian akman diwan govindaraju component architectures distributed scientific problem solving ieee computational science engineering pp 
lsa gannon whitaker grid support software component systems siam conference parallel processing 
cactus cactus code 
see www org cog commodity grid kits 
see www globus org cog cca common component architecture technical specification version 
see www cca forum org 
computation biology workbench 
see workbench sdsc edu current version 
biology workbench resides sdsc 
omg common object request broker architecture specification object management group february 
see www omg org corba 
ccm corba components object management group omg tc document orbos march 
see www omg org 
mds czajkowski fitzgerald foster kesselman grid information services distributed resource sharing proc 
th ieee hpdc aug 
rutgers discovery interactive computation collaboratory grid applications 
see www org discover pdf colab doe collaboratory project documented web site 
see www unix mcs anl gov doe html doe electronic notebook project resources location www csm ornl gov entropia entropia distributed computing see www entropia com edg european data grid www eu datagrid org grid fox gannon computational grids ieee comput sci eng 
vol pp 
fox portals frameworks web education computational science nd int 
conf 
practical applications java practical application www uk proceedings index html 
fox high performance commodity computing chapter grid blueprint new computing infrastructure ian foster carl kesselman eds 
morgan kaufmann grid gannon grimshaw object approaches grid blueprint new computing infrastructure ian foster carl kesselman eds pp 
morgan kaufman 
gateway gateway computational portal 
see www org gateway cp doc globus globus argonne national lab math computer science division www mcs anl gov globus grads grads testbed grid application development software project 
cs rice edu 
gce grid computing environment working group www org survey existing grid portal projects 
www org cbp html 
grid grid blueprint new computing infrastructure ian foster carl kesselman eds morgan kaufman 
griphyn grid physics network www griphyn org gsi grid security infrastructure see www globus org security 
legion andrew grimshaw 
legion worldwide virtual computer 
see www cs virginia edu legion 
globus wrap jackson 
globus wrap 
www itg lbl gov ipg johnston gannon nitzberg woo tanner computing data grids science engineering proceedings sc 
kg keahey gannon parallel approach corba proceedings th ieee international symposium high performance distributed computation august 
kg keahey gannon developing evaluating abstractions distributed supercomputing journal cluster computing special issue high performance distributed computing vol 
may 
net microsoft 
net see www microsoft com mississippi computing web portal 
see www org doc 
jms chappell java message service reilly nasa ipg launch pad portal 
see www org doc nimrod nimrod tool distributed parametric modeling see www monash edu au nimrod oram peer peer harnessing power distributed technologies reilly 
computation see www com grid event service ph thesis syracuse university jxta project jxta www jxta org ppdg particle physics data grid see www ppdg net 
python python programming language 
see www python org complete details 
soap simple object access protocol 
see www org tr soap govindaraju gannon design xml interoperable rmi system pdpta june 
see www extreme indiana edu soap 
srb storage resource broker san diego supercomputer center www npaci edu dice srb 
ejb thomas enterprise javabeans technology server component model java platform java sun com products ejb white html 
mary thomas 
hot page 
user portal www org doc 
uddi uddi universal description discover integration business web 
see www uddi org 
cat govindaraju stern whitaker gannon cat high performance distributed component architecture toolkit grid proceedings high performance distributed computing conference 
wsdl web services description language wsdl www org tr wsdl wsfl web services flow language wsfl see www ibm com software solutions webservices pdf wsfl pdf 
web services inspection language see xml org ibm ws inspection overview pdf nws rich wolski 
network weather service 
see www npaci edu nws 
xcat xcat science portal krishnan gannon govindaraju proceedings sc denver nov project www cs indiana edu 
