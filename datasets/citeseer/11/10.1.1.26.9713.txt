appear int conference computer hardware description language better verification symmetry norris ip david dill department computer science stanford university stanford ca email fip cs stanford edu 
address state explosion problem automatic verification finite state systems exploiting symmetries system description 
symmetries easy detect introducing new data type scalarset finite unordered set description language 
set operations restricted states guaranteed behavior permutation elements 
extended mur verifier generate reduced state space fly 
verifier applied cache coherence protocols reducing states space searched verification 
cases method collapse infinite state spaces finite spaces 
call property data saturation 
data saturation exploit data independence protocols automatically hand modification protocol descriptions 
keyword codes keywords program verification specifying verifying reasoning programs studies program constructs 
protocols increasingly important hardware designs 
example network communications protocols implemented directly hardware 
example internal protocols large multiprocessors quite complex 
debugging protocols major problem hardware design 
automatic methods verifying finite state concurrent systems surprisingly effective catching design errors 
general methods enumerating research supported multi module systems thrust stanford center integrated systems 
sun microsystems provided computers 
reachable states system hol 
course major problem methods size state space may grow rapidly description size 
phenomenon known state explosion problem 
explore method reducing state explosion exploiting symmetries structure system verified 
structural symmetries induce equivalence relation states verification sufficient explore state equivalence class 
simple example consider mutual exclusion algorithm processes state critical section waiting practical purposes equivalent state critical section waiting 
basic idea exploiting symmetries reduce state space automatic verification new 
described huber high level petri nets 
idea developed sta deadlock liveness checking nets 
unpublished clarke mcmillan jha carnegie mellon independently emerson kaufman university texas applied idea ctl model checking 
goal trivial detect exploit symmetries inspecting system description 
achieved adding description language new data type call scalarset 
scalarset accessed restricted operations guarantee certain symmetries hold state graph 
scalarset type added mur protocol description language verification system developed stanford university 
extended mur system obtained reduction size state spaces verifying examples directory cache coherence protocols 
times required verify protocols reduced 
extended system enables generate reduced state space fly generating original state space 
memory required verification 
verified cache coherence systems different sizes 
size state space grows exponentially increasing numbers processing nodes symmetries reduces degree blow significantly 
furthermore discovered new data type easy exploit generalized idea data independence protocols wol allowing automatic verification systems infinite state spaces 
symmetry mur verification system structural symmetry illustrate concept symmetries look example multiprocessor caches 
shown multiprocessor system number processing nodes memory nodes communicating interconnection network 
system depicted shared memory multiprocessor directory associated memory location 
directory keeps track processor memory location cached 
processor distinct name usually small integer called processor id properties integers irrelevant high level system cache status shared cache status invalid data data mem mem status shared dir memory shared invalid shared memory invalid shared shared memory state state system system mem mem status shared memory dir system data data cache status invalid cache status shared state state unnecessary ordering processor identities description protocol matters processor ids 
matter numerically consecutive 
verifiers way detect fact may inspect basically state times 
addition processor ids symmetries hold cache coherence protocol example addresses data values memory module ids message ids 
numerical properties addresses data values important level abstraction irrelevant reasoning correctness protocol 
verifier knows symmetries system may difficulty detecting states equivalent 
states shown illustrate state variables laid memory verifier 
note obtain state state processor status entries swapped processor ids stored memory directory changed accordingly 
problem difficult consider multiple symmetries time 
address problems example 
detection structural symmetries system 

fly detection symmetrically equivalent states verification full state space need constructed 
type user defined type pid processor ids mid memory modules ids address address space single module value possible values memory word var state variables array pid array record storing status record processor 
state enum shared value value array mid matrix records storing array address status address 
record state enum shared remote dirty dir array pid list processors data mem value net 
matrices records storing messages network details shown 
state variable declarations cache coherence protocol mur mur verification system extended mur verification system achieve goal detecting symmetry 
basic mur verification system consists mur compiler mur description language 
mur description language high level programming language description finite state asynchronous concurrent systems 
language inspired chandy misra unity language cm 
mur compiler generates program particular mur description 
program checks safety properties system explicitly enumerating reachable states 
mur description consists parts ffl constant type variable declarations 
ffl procedure declarations transition rule definitions 
ffl start state descriptions 
ffl invariant descriptions 
time system state specified values global variables 
rules guarded commands 
system executes rule chosen nondeterministically executed yield new system state assigning new values variables 
rule may consist arbitrarily complex operations executed atomically interference rules description 
mur leads ruleset value set rules value ruleset mid set rules memory module ruleset pid set rules processor ruleset address set rules address memory module rule modifying value cache cache state locally exclusive copy cache value processor modify value transition rule cache coherence protocol mur invariant single master copy exists forall pid pair processors forall pid forall mid memory module forall address address 
distinct real pair processors cache state locally exclusive copy cache state locally invariant cache coherence protocol mur asynchronous interleaving model concurrency processes interact shared variables 
examples mur description shown 
types variables arrays records integer subranges booleans enumerations 
conventional method coding system state fails capture symmetries 
example examine fragment cache coherence protocol description shown 
states represented processor status variable memory status variable interconnection network variable net 
integer subranges pid mid address value ids imposed unnecessary ordering ids 
definition scalarset introduced new data type scalarset facilitate detection symmetries testing equivalent states 
scalarset supports assignment testing equality inequality type user defined type pid scalarset processor ids mid scalarset memory modules ids address scalarset address space single module value scalarset possible values memory word var state variables array pid array record storing status record processor 
state enum shared value value array mid matrix records storing array address status address 
record state enum shared remote dirty dir array pid list processors data mem value net 
matrices records storing messages network details shown 
documenting symmetry extended mur array indexing 
arithmetic operators comparison operators equality inequality testing literal constants 
general numerical values subrange important convert subrange scalarset enforcing documenting symmetries result permuting members scalarset 
words structural symmetry exists subrange scalarset operations 
value binding operations scalarset variables preserve symmetries ruleset id ruleset construct gives set rules identical value bound variable id equivalently ruleset nondeterministically chooses value scalarset binds variable name 
clearly operation imply asymmetry elements scalarset 
id endfor loop iteration scalarset values 
order preserve symmetry body loop restricted order execution loop body affect final result 
variable modified iteration read modified iteration 
forall id operation conventional operators boolean expression 
expression mur side effects properties specified constructs symmetrical 
scalar element dir variable scalarset type array indexed scalarset scalar element permutation state variable exists id operation conventional operator boolean expression 
construction equivalent states scalarset values represented integers states obtain equivalent states permuting scalarset entries state 
example shown permute scalarset size apply permutation individual elements array rearrange positions elements 
variable dir changed accordingly 
array dir gives corresponding permuted element 
permutation process summarized follows ffl permutation applied scalarset variable value modified corresponding permuted value 
ffl array indexed scalarset permuted contents array elements permuted elements rearranged permutation 
note refer applying permutation state referring mapping elements scalarset necessarily permutation state variables 
better verification properties induced scalarset declarations mur program section 
properties enable reduce number states inspected verification 
essentially application mur previous symmetries discussed 
graph automorphism result shows set graph automorphisms closed functional composition combine abstractly equivalent states state space 
formal definitions state graphs automorphisms definition state graph triple delta set states 
set start states ae delta set transition rules 
definition graph automorphism state graph delta mapping properties 
tuple hq delta hq delta bijections hq delta delta delta 
mapping closed components hq hq delta delta delta hq error error 
transition relation preserved delta hq delta set graph automorphisms closed functional composition induces equivalence relation states definition set graph automorphisms closed functional composition states defined equivalent exists automorphism 

rn 
rn equivalence class equivalent states bisimulation property equivalence class equivalence relation bisimulation theorem automorphism equivalence induced set automorphisms bisimulation state graph delta delta delta defined systems labelled transitions 
definition obvious analog states labelled transitions 
particular set permutations scalarset applied state described form closed set graph automorphisms 
theorem set permutations scalarset entries states forms set graph automorphisms state graph 
set closed functional composition corresponding equivalence relation bisimulation 
reduced state space generation properties automorphism bisimulation discussed section equivalence class obtained structural symmetry properties reached unexpanded unexpanded oe remove state unexpanded enabled rule rule set get state firing reached put reached put unexpanded endif fly algorithm construct reduced state graph theorem verification state graph delta corresponding equivalence class state ffl members invariant checking results delta error delta error ffl sets states members equivalent 
delta fr jr deltag theta jq thetag theta set states 
delta delta mur allows user provide set invariants boolean expressions description 
error reported invariant violated 
treating invariants rules lead error state invariants assumed symmetric 
theorem implies state equivalence class violates invariant 
similarly state deadlock successors state equivalence class 
currently mur checks deadlocks violations invariants 
result extends easily checking sophisticated specifications 
theorem need search smaller quotient graph equivalence relation original graph 
modified search algorithm basic mur verification system generate quotient state graph shown 
change algorithm function maps state unique state representing equivalence class 
new search algorithm enables check equivalent states fly 
state checked generated error reported soon generating state space 
extended algorithm able obtain reduced state graph generating original state graph 
maximum reduction determined average size equivalence classes 
theorem shows possible check deadlocks violations invariants reduced graph theorem ffl set unreduced reachable states set reduced reachable states obtained algorithm 
ffl error state exists original state graph corresponding error state exists reduced state graph 
ffl deadlock state exists original state graph corresponding deadlock state exists reduced state states state canonicalization 
representative symmetry equivalence class described section change verifier canonicalization function function determines unique state represent corresponding equivalence class 
clarke mcmillan cm observed finding canonical state hard testing graph isomorphism polynomial time algorithm known 
problem inherently exponential large reduction size state spaces compensates computation load canonicalization 
practical systems time reduction verification process obtained 
case systems complicated state structure computation load canonicalization may high 
fortunately observation allows reduce computation load 
observation subset states equivalence class represent class give sound verification algorithm safety properties 
normalization algorithms find subset states represent equivalence class 
section examples show small subset achieves reduction full canonicalization function quickly 
implemented algorithms canonicalization algorithm permutations generated lexicographically smallest state canonical state 
normalization algorithm separate state parts 
part significant bits canonicalized 
lexicographical value may obtained different permutations may permutations part state 
second part normalized permutations part 
result normalized state small lexicographically value 
practical results new symmetry search algorithm implemented mur verifier system 
wide range examples modeled new system id 
section results directory cache coherence protocol designed stanford 
cache coherence protocol shared memory abstraction implemented top message passing network 
typical configuration consists processing nodes communicating interconnection network 
processing node processors caches 
maintaining cache coherence complicated task 
example processing nodes shared copies data processing node may want update data 
shared copies invalidated data updated stale values read 
problem complicated transactions initiated time messages delayed reordered network 
protocol verifier methodically explores possibilities 
dash multiprocessor built stanford university uses protocol keep caches consistent 
protocol includes normal cache data access dma access special lock operations operations 
result obtained description basic protocol basic cache data operations cache read cache write write back 
processor ids memory module ids addresses data values modeled 
examples single memory module bit data address 
tried examples processing nodes 
shown table number states increases quickly number processing nodes increases 
symmetries reduces size significantly 
nodes algorithm size time reduction max possible reduction unreduced canonicalized gamma theta 
normalized unreduced min canonicalized hr gamma theta 
normalized min unreduced exceeded mbytes canonicalized exceeded hr gamma theta 
normalized hr 

entries data state entries data state example data saturation data saturation cases symmetry reduce infinite state space finite 
example cache coherence protocol data values modeled scalarset obtain finite reduced state space infinite data domain 
obtain finite reduced state space theorem theorem finite system array indexes exist finite integers nm reduced state graph size obtained system sizes nm sizes approach infinity 
theorem immediate corollary lemma lemma finite system array indexes finitely distinct equivalence classes induced symmetry represented regardless sizes 
furthermore exist integers nm number distinct equivalence classes fixed size nm 
main idea lemma follows number distinct values scalarset type appear state map maps values gamma independent size scalarset 
number distinct equivalence class scalarset size greater number corresponding scalarset size intuitively scalarset index array regarded data data independence protocol smallest upper bound corresponds maximum number distinct values state 
example cache coherence protocol example address states date value 
may old value date value 
rarely old values date value 
upper bound number values cache coherent protocol number processors theta number address data saturation properties verify systems infinite data size analogous approach suggested wolper data independence wol infinite temporal statement replaced finite statement containing finite set data 
wolper requires user recognize protocol data independent transform description order exploit data independence 
method requires hand transformation thought appropriate 
clear sufficient effort correct design verified 
time address explicitly economics verification particularly labor requirements 
primary contribution exploitation structural symmetries easy simple changes description language 
interesting possibilities exploration 
approach extended include type symmetries rotational symmetry reductions state space dramatic 
ideas applied easily high level description languages 
note additional analysis check automatically particular subrange ways valid scalarset 
allow benefits reduction symmetry adding scalarset type verification system 
symmetry technique description languages vhdl 
prefer explicit scalarset type mur compiler report user symmetry breaking operation unintentionally applied 
description allowed may advantages example scalarset refined different implementations 
idea symmetry verification easily generalized specifications models 
algorithm shown verification concurrent system concept symmetry equally applied process algebra synchronous models believe cases verification concerns especially state explosion problem addressed part description language design 
new purpose description languages implications languages begun explore implications automatic verification methods 
ed clarke allen emerson sharing published results cited 
billing wilbur ham 
automated protocol verification 
diaz editor protocol specification testing verification pp 

cm mani chandy misra 
parallel program design foundation addison wesley 
cm clarke mcmillan 
personal communication 
david dill andreas drexler alan hu han yang 
protocol verification hardware design aid 
ieee international conference computer design vlsi computers processors pages 
ieee computer society 
hol gerard holzmann 
automated protocol validation argos assertion proving scatter searching 
computer science press pp 

peter huber ame jensen kurt jensen 
reachability trees high level petri nets 
rozenberg editor advances petri nets springer verlag pp 

id norris ip david dill 
efficient verification symmetric concurrent systems 
appear ieee international conference computer design vlsi computers processors cambridge ma october 
daniel lenoski james laudon kourosh gharachorloo anoop gupta john hennessy 
directory cache coherence protocol dash multiprocessor 
proceedings th international symposium computer architecture may 
sta 
reachability analysis petri nets symmetries 
systems analysis modelling vol pp 

wol wolper 
expressing interesting properties programs 
th annual acm symposium principles programming languages pp 

colin west harry rudin cowan daniel brand 
analyzing synthesizing protocols 
ieee transactions communications com april 
