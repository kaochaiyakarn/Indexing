vcode retargetable extensible fast dynamic code generation system dawson engler engler lcs mit edu laboratory computer science massachusetts institute technology cambridge ma dynamic code generation creation executable code runtime 
fly code generation powerful technique enabling applications runtime information improve performance order magnitude :10.1.1.38.5072:10.1.1.100.6047:10.1.1.13.6511
unfortunately previous general purpose dynamic code generation systems inefficient non portable 
vcode retargetable extensible fast dynamic code generation system 
important feature vcode generates machine code place intermediate data structures 
eliminating need construct consume intermediate representation runtime vcode efficient extensible 
vcode dynamically generates code approximate cost instructions generated instruction making order magnitude faster efficient general purpose code generation system literature 
dynamic code generation relatively known compiler community 
due large part lack publicly available dynamic code generation system remained curiosity widely technique 
practical contribution free unrestricted distribution vcode system currently runs mips sparc alpha architectures 
dynamic code generation generation machine code runtime 
typically strip layer interpretation allowing compilation occur runtime 
supported part advanced research projects agency contract 
views contained document authors interpreted representing official policies expressed implied government 
appear proceedings rd annual acm conference programming language design implementation may philadelphia pa copyright fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage new copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
known applications dynamic code generation interpreters compile frequently code machine code execute directly :10.1.1.100.6047
hardware simulators binary emulators techniques dynamically translate simulated instructions instructions underlying machine :10.1.1.13.6511
runtime partial evaluation uses dynamic code generation order propagate runtime constants feed optimizations strength reduction dead code elimination constant folding :10.1.1.18.5716:10.1.1.38.5072
unfortunately portability functionality barriers limit dynamic code generation 
binary instructions generated programs dynamic code generation retargeted machine 
generating binary instructions non portable tedious error prone frequently source latent bugs due boundary conditions constants don fit immediate fields 
amenities symbolic assemblers detection scheduling hazards linking jumps target addresses 
dynamic code generation requires working knowledge chip specific operations performed common programmer maintenance cache coherence instruction data caches 
goals portability usability satisfied main focus dynamic code generation system speed terms generating code code generation occurs runtime terms generated code 
describes vcode dynamic code generation system 
goal vcode provide portable widely available fast dynamic code generation system 
goal forces implementation decisions 
ensure wide availability different languages dialects modest effort vcode require modifications existing compilers require sophisticated compiler 
second order generate code efficiently vcode generate code place 
vcode dynamically generate code luxury expense representing code data structures built consumed runtime 
main contribution vcode methodology portably generating machine code speeds required sophisticated compiler support hand crafted non portable code generators 
vcode machine independent interface idealized load store risc architecture 
low level interface allows vcode generate machine code client specifications approximate cost instructions generated instruction 
overhead roughly equivalent highly tuned non portable dynamic code generator faster compare 
furthermore low level instruc tion set clients write portable vcode translates high quality code 
vcode extensible allowing clients dynamically modify calling conventions register classifications generated function basis provides simple modular mechanism clients augment vcode instruction set 
vcode system simple retarget typically requiring days port risc architecture 
vcode currently runs mips sparc alpha processors 
discussed vcode generates code place 
eliminating need build consume intermediate representation runtime powerful effects 
code generation efficient intermediate data structures constructed consumed 
elimination intermediate structures removes need vcode understand instruction semantics 
result extending vcode instruction set simple usually requiring addition single line vcode machine specification 
vcode general purpose dynamic code generation system allows clients portably directly construct arbitrary code runtime 
fastest system literature order magnitude 
general purpose system generate code intermediate representation support extensibility publicly available 
structured follows discuss related section 
provide overview system retargeting details client vcode interface section 
measure performance experimental clients section 
section presents key implementation details section reports experiences vcode 
conclude section 
related dynamic code generation long history 
increase performance operating systems windowing operations dynamically typed languages simulators matrix manipulations 
keppel eggers henry survey advantageous uses dynamic code generation 
parcplace sells implementation smalltalk uses dynamic code generator sparc motorola powerpc intel architectures 
vcode system designed specifically compilation smalltalk stand system dynamic code generation 
engler proebsting describe dcg general purpose dynamic code generation system 
vcode grew experiences building dcg subsequent dcg building compiler language 
compared dcg vcode substantially simpler approximately times faster 
benefits come intermediate representation code generation contrast dcg builds consumes ir trees runtime 
vcode provides extensible framework generates efficient code dcg 
engler hsieh kaashoek describe language tick superset ansi designed highlevel efficient machine independent specification dynamically generated code 
implementation uses dcg dynamic code generation system described substantially efficient complex vcode 
poletto engler kaashoek describe reimplementation uses vcode target machine 
result automatically generate code architecture vcode ported gains advantages vcode fast code generation efficient generated code 
vcode complementary 
primary advantage vcode vcode principle language independent contrast language requires relatively sophisticated modifications existing compilers 
vcode low level nature allows greater control low level details calling conventions register names 
vcode manual code generation system 
alternative approach dynamically generate code automatically 
automatic system easier require complex compiler support applicable manual system 
reason reduced applicability automatic systems primarily users dynamic code generation providers 
contrast vcode clients control code generation create arbitrary code runtime 
instance clients vcode dynamically generate functions function calls take arbitrary number type arguments allowing construct efficient argument marshaling unmarshaling code 
possible efficiently perform operations current automatic systems 
leone lee describe interesting automatic dynamic code generation system performs compile time specialization primitive functional language 
extended compiler fabius accept functional subset ml 
fabius generates code quickly techniques developed programmers dynamically generate code hand dynamic code emitted inline expanded macros create instructions operand register names determined static compile time 
contrast vcode provides new technique portably generating code equivalent speeds support sophisticated compiler 
result vcode practically speaking arenas fabius context pointer sideeffect rich language 
interesting automatic code generation system tempo general purpose dynamic specializer tempo easier vcode automatic systems requires complex compiler support applicable 
example scope tempo optimizations limited usual challenges presents optimizing compilers unrestricted aliasing 
ramsey fernandez developed tool kit concise specification functions emit disassemble machine code 
vcode system dynamically generate code quickly extensible freely distributed 
vcode system client interface portable requires clients rewritten new architecture 
system overview vcode system set macros support functions allow programmers portably efficiently generate code runtime 
vcode interface idealized load store risc architecture 
vcode instructions simple primitives add sub load map readily modern architectures 
mapping direct vcode instructions translated machine code equivalents place client code 
important benefit vcode place code generation consumes little space 
memory needed store emitted instructions vcode need store pointers labels unresolved jumps 
cost words label relatively insignificant amount memory 
contrast system uses intermediate data structures requires space proportional number instructions 
vcode designed main aim reconciling conflicting goals fast code generation efficient generated code 
vcode achieves goals low level interface assembly language idealized risc architecture interface main benefits 
allows clients perform expensive code generation operations notably virtual register allocation static compile time leaving vcode concentrate simple job translating instruction set machine code process difficult expensive 
second benefit allows code generated quickly need compiler support 
characteristic desirable features 
vcode system simple implement obvious pragmatic results 
second subtly close match vcode instructions modern architectures allows vcode generate code zero passes vcode instructions translated directly machine instructions correspond 
sense code generation replaced transliteration 
vcode need compiler support principle language independent 
final benefit vcode low level interface allows code written possible higher level language example vcode clients portably generate function calls fly access instructions natural higher level idioms prefetching branch prediction byte swapping 
instruction set architecture vcode instruction set designed choosing deriving instructions closely match existing risc architectures 
process influenced number compiler intermediate representations strongest influence intermediate representation language lcc compiler 
instruction set built set base operations sub mul composed set types integer unsigned 
instruction takes register immediate operands usually performs simple operation 
vcode supports full range types signed unsigned bytes words long words single double precision floating point 
base vcode types named mappings ansi types listed table 
types may distinct equivalent bit machines 
vcode instruction operates number typed operands 
reduce instruction set architectures provide word long word operations registers non memory vcode operations take smaller data types uc operands 
vcode instruction set consists single core layer retargeted new machine multiple extension layers built top core 
core layer consists instructions readily synthesized instructions add 
table lists vcode core 
extension layers provide additional functionality general core conditional move floating point square root 
porting convenience extensions expressed terms core 
core retargeted extensions new machine 
efficiency default definitions overridden implemented terms resources provided actual hardware 
duality implementation allows site specific extensions common idioms implemented portable manner affecting ease retargeting 
client vcode interface client programs specify code vcode machineindependent instruction set 
instruction set simple regular 
properties important instructions easily generated client programs 
essence client program small compiler front 
vcode instructions selected clients machine code immediately code generation passes typical code generators 
vcode omits significant global optimizations pipeline scheduling require single pass intermediate representation slowing vcode order magnitude 
clients desire optimizations layer top generic vcode system 
global optimizations responsibility client access low level vcode instruction set 
vcode responsible emitting efficient code locally 
vcode includes mechanism allow clients perform register allocation machine independent way 
client declares allocation priority ordering register candidates class classes temporary persistent procedure calls 
vcode allocates registers ordering 
machine registers exhausted register allocator returns error code 
clients responsible keeping variables stack 
practice modern risc architectures provide registers arrangement satisfactory 
scheme works cisc machines typically allow operations registers memory locations 
vcode register allocator limited scope job unused argument registers available allocation intelligent leaf procedures generates code allow caller saved registers stand callee saved registers vice versa 
complete code generation includes instruction selection binary code emission jump resolution 
instructions second steps occur specification site vcode instruction 
complications jump instructions branches vcode marks instructions occur instruction stream client indicates code generation finished unresolved jumps 
currently vcode creates code function time 
sample vcode specification dynamically create function takes single integer argument returns argument plus 
example illustrates number boilerplate issues vcode macro names formed prepending prefix base instruction appending type letter 
instruction takes immediate operand letter appended result 
example vcode instruction specifying add integer immediate named add integer immediate 
actions occur dynamic code generation interface extended clients create functions simultaneously 
type equivalent void signed char uc unsigned char signed short unsigned short int unsigned void long ul unsigned long float double table vcode types standard binary operations rd rs rs add ul addition sub ul subtraction mul ul multiplication div ul division mod ul modulus ul logical ul logical xor ul logical xor lsh ul left shift rsh ul right shift sign bit propagated signed types standard unary operations rd rs com ul bit complement ul logical mov ul copy rs rd neg ul negation set ul load constant rd rs immediate ul convert integer type cvu ul convert unsigned type ul convert long type convert unsigned long type cvp ul convert pointer type convert float type convert double type memory operations rd rs ld uc ul load st uc ul store return caller rs ret ul return value jumps addr jump immediate register label jal jump link immediate register label branch instructions rs rs label blt ul branch ble ul branch equal bgt ul branch greater ul branch greater equal beq ul branch equal bne ul branch equal nullary operation nop operation operand may immediate provided type table core vcode instructions 
typedef int iptr int called runtime create function returns argument 
iptr struct code ip reg arg code generation 
type string indicates routine takes single integer argument register hold argument returned arg 
leaf indicates function leaf procedure 
ip pointer storage hold generated code 
lambda arg leaf ip add argument register 
arg arg add integer immediate return result 
arg return integer code generation 
links generated code performs cleanup 
returns pointer final code 
return iptr vcode specification function corresponding int plus int return 
clients dynamic code generation new function call lambda takes type string listing function incoming parameter types vector registers put parameters boolean flag indicating function leaf procedure pointer memory code stored 
number type parameters dynamically generated function takes fixed static compile time determined runtime 

lambda vcode uses parameter type string machine calling conventions compute function incoming parameters arguments stack vcode default copy register 
point vcode reserves space prologue code 
control returned client code generation 

client uses vcode macros dynamically generate code 
code generation client allocate number vcode objects registers local variables local labels 
code generated client calls return control back vcode 

vcode prologue epilogue code links client code necessary ensures instruction data cache coherency 
vcode returns pointer generated code application 
pointer cast appropriate function pointer type 

client run dynamically generated code 
backend performs rudimentary delay slot scheduling strives keep parameters incoming registers 
result reasonably efficient code seen mips code generated vcode plus add argument passed jump return address ra delay slot move result return register move improved efficiency vcode provides mechanisms clients target specific registers register return results 
simplicity 
retargeting vcode retargeting vcode involves constructing macros generate executable code machine instruction mapping core vcode instruction set macros implementing machine default calling conventions activation record management 
generating code emit binary instructions done vcode preprocessor programs new jersey toolkit 
vcode core small simple mapping instructions corresponding binary emitters straightforward 
aid process developed concise preprocessor specification language spirit fraser handles details mapping 
complete mapping specifications mips sparc alpha architectures take approximately lines 
construction calling conventions activation record management typically existing code 
instance alpha port vcode largely mips port 
aid retargeting process vcode includes script automatically generate regression tests errors instruction mappings calling conventions 
result vcode simplicity porting assistance risc retarget typically takes days 
vcode instruction set heavily risc 
model conflict underlying hardware architecture different 
surprisingly real conflict vcode interface widely cisc market 
main conflict arise mapping vcode instructions integer instruction set lack registers 
memory operands instructions registers little loss performance 
ability effect support unlimited virtual register set 
serious conflict vcode architecture arises stack architectures 
generating code stack architecture vcode require post construction pass generated code couch vcode register names terms stack positions 
fortunately stack architectures relatively rare 
experimental clients discuss experimental clients 
client compiler language demonstrates vcode viability code generation substrate 
network subsystems aegis exokernel operating system 
demonstrate vcode suitability operating system context general effectiveness real world code generation tool 
note operating system runs mips machines experiments done mips platform 
tcc compiler vcode low level interface compiler target language compilers rely emit code efficiently retaining sufficient control perform optimizations 
furthermore vcode portable compiler compiles benefit generated code working machines vcode supports 
implemented compiler tcc uses vcode machine generate code dynamically 
discussed section superset provides language constructs programmers generate code runtime 
example programmers specify expressions statements generated runtime code fragments dynamically composed compiled runtime 
tcc lcc ansi compiler 
modified lcc code generation backends 
backend emit assembly traditional statically generated code 
second backend compile constructs vcode 
emitted vcode executed runtime generate code specified application programmer 
vcode target machine allowed build compiler runs variety machines modest effort 
experience vcode target machine positive 
compiling vcode easier compiling traditional risc architectures 
ease due regularity vcode instruction set fact vcode handles calling conventions 
vcode allowed isolate machine dependencies tcc compiler 
instance tcc uses vcode generation backend architectures supports mips sparc 
dpf interpreters dynamically compile frequently code runtime 
similar vein vcode dynamic compiler packet filter message demultiplexer 
message demultiplexing process determining application incoming message delivered 
packet filters known technique implement extensible kernel demultiplexing 
packet filter piece user level code downloaded kernel filter classification time pathfinder dpf table average time dec classify tcp ip headers destined tcp ip filters times microseconds 
dpf uses vcode dynamically compile pathfinder 
claim packets belonging application 
packet filters predicates written small safe language 
approach allows new protocols implemented outside kernel downloaded packet filter driver greatly increasing flexibility 
traditionally packet filters interpreted entails high computational cost 
result high performance networking systems despite flexibility extensibility provide 
remedy situation implemented dynamic packet filters dpf new packet filter system order magnitude efficient previous systems 
key approach dynamic code generation 
dpf exploits dynamic code generation ways eliminate interpretation overhead compiling packet filters executable code installed kernel filter constants aggressively optimize executable code 
result dpf equivalent performance hand crafted message classifying routines exploit runtime information faster retaining flexibility packet filter model 
example dpf exploits runtime information optimizes common situation concurrently active filters examine part message compare different values 
instance tcp ip packet filters look messages identical fixed offsets port numbers 
static systems values known compile time general purpose possibly expensive hash function checks collisions dpf knows number actual values compared optimize comparison manner similar optimizing compilers treat switch statements small range values searched directly sparse values matched binary search dense ranges matched indirect jump 
additionally number value keys known runtime dpf select hash functions obtain best distribution encode chosen function directly instruction stream 
furthermore dpf knows code generation time keys collided eliminate collision checks collisions occurred 
measure dpf time classify packets destined tcp ip filters compare time measurements pathfinder fastest packet filter engine literature widely packet filter engine 
ensure comparison meaningful perform experiment described average trials taken base cost message classification 
table presents time perform message classification 
experiment fully described 
experiment dpf times faster times faster pathfinder 
bulk performance improvement due dynamic code generation user message handlers safely downloaded operating system kernel order direct message processing 
vcode part ash system provide support dynamic efficient modular composition network protocols 
modular composition different network protocols long goal networking community 
unfortunately modular composition expensive 
problem presents protocol layer frequently data touching operations associated perform checksumming byte swapping 
operation typically touches bytes message 
separating operations modular pieces meant data manipulated multiple times 
result modularity high performance penalty excess scalar operations performed looping overhead touching memory multiple times stresses weak link modern workstations memory subsystem 
solve problem constructed network subsystem uses vcode integrate protocol data operations single optimized pass memory integrating checksumming byte swapping memory copy operation gain efficiency vcode ways 
allows access machine instructions natural high level idiom 
writing data processing step terms vcode possible clients write code efficient written high level language 
second compose multiple data processing steps dynamically single specialized data copying loop generated runtime 
system described measured 
table shows performance benefit integrating checksumming byte swapping routines copying loop network buffer application memory 
measurements taken data cache flushed 
intervening cache flush integration provides performance benefit clearly worthwhile 
case flush integration provides factor performance improvement 
table shows relative efficiency emitted copying routines labeled ash comparing hand integrated non modular loops written main reason ash better performance relative routines ash system dynamically generates memory copying loop specialized operations performed layer 
vcode allows flexibility previously possible dynamic composition data manipulation routines simultaneously making efficient previous systems provided modular dynamic composition systems data manipulation steps merged hand 
due dynamic code generation ash system rare case flexibility provided free 
vcode generator design vcode code generator emits machine code place 
section provides details approach discusses consequences 
life instruction vcode generate machine code place clients associate vcode instruction virtual registers static compilation time vcode instructions closely match modern architectures 
concrete explain happens single vcode instruction addu 
macro definition expansion machine code required dynamically generate 
case total cost mips instructions 
contiguous run vcode instructions operations generate code reused compiler compiling vcode macros bringing total cost lower 
challenges place code generation generating code place challenging requires vcode emit code global knowledge function creating 
instance vcode know function generating leaf procedure number local variables allocates amount memory number instructions 
needs save floating point temporary registers traditionally knowledge derived making pass intermediate data structures 
unfortunately similar methods added unacceptable overhead vcode 
briefly look main challenges place code generation 
instructions access procedure stack typically require information size activation record 
instance machines instructions save restore registers know activation record size order compute offsets register save area 
similarly accesses local variables know size order compute local stack offset 
activation record size instructions emitted 
unfortunately size known code constructed 
order generate code place vcode finesse need accurately know activation record size 
awkward solution problem force clients allocate locals registers code generation occurs 
practice restriction limit client flexibility 
furthermore cases restriction hurt performance require clients generate vcode passes pass compute number local variables registers need second pass dynamically generate code vcode 
vcode solution inelegant workable simply allocates space needed save machine registers locates space locals fixed sized area depending stack grows 
solution register offsets known code emission time offsets local variables computed variables allocated 
vcode marks generated instruction stream activation record allocated instruction final activation record size known locals allocated 
vcode solution tradeoff space time 
modern risc machines wastes worst case stack space required save integer floating point registers words 
clients find tradeoff unacceptable hard turn function basis 
need 
second challenge deals handling saving restoring callee saved registers function prologue 
problem vcode solve client begins generating code function vcode know number machine method copy checksum copy checksum byte swap dec separate uncached separate integrated ash dec separate uncached separate integrated ash table cost integrated non integrated memory operations 
times microseconds 
vcode instruction add unsigned integer registers mips architecture 
define addu rd rs rs addu rd rs rs macro generate mips addu instruction opcode 
define addu dst src src ip src src dst mips assembly code generated gcc implement addu macro 
lw gp allocate instruction sll shift register values sll sll bump instruction pointer sw gp store new instruction pointer ori opcode sw store instruction memory top expansion vcode addu instruction 
callee registers client generate function prologue code 
activation record size vcode knows callee saved registers client client code generation function complete 
vcode solves problem reserving space instruction stream save maximum number registers architecture supports 
reservation done code generation function initiated call lambda 
register saves inserted prologue area client finished generating code 
practice amount space wasted small words memory generated function 
dual problem code generation epilogue code vcode needs generate known 
vcode uses traditional compiler method jumping piece epilogue code client indicates control return function 
back patching jumps vcode simple optimizations eliminate jump procedure callee saved registers 
architectures leaf procedures profitably optimized 
instance activation record allocation elided caller saved registers hold persistent variables 
unfortunately vcode determine procedure leaf procedure code generated 
importantly general easy way assume procedure leaf optimization purposes rollback code transformations effects leaf optimizations pervasive result code backpatching expensive difficult implement 
address problem vcode allows programmers indicate function leaf procedure 
client attempts call procedure function vcode signals error 
complete solution vcode instructions may cause function calls 
instance machines provide division hardware vcode integer division instructions require subroutine calls 
preserve portability calls cause user program get runtime error vcode 
worst case vcode ignores client hints running machines 
fortunately routines emulate common machine instructions frequently obey different calling conventions normal subroutines save caller saved registers 
case vcode able call emulated routine saving registers pass arguments 
final problem necessarily unique place code generation handling floating point immediates 
integer immediates architectures provide support encoding floating point immediates arithmetic instructions 
result dynamic code generation system allocate space load space 
garbage collection floating point constants easy vcode places function instruction stream 
way space immediates easily reclaimed function deallocated 
violating vcode abstractions ignored aspect fast systems question allow high level interfaces gracefully violated improved performance control 
vcode situations cycle precious environment peculiar constraints operating system interrupt handlers designed mechanisms vcode allow clients violate vcode abstractions order achieve efficient code generation efficient generated code 
briefly outline mechanisms 
clients dynamically control register class vcode assigns physical register callee saved caller saved unavailable 
allows clients vcode generated code situations normal register conventions hold 
instance interrupt handler registers live 
correctness vcode treat registers callee saved 
clients wish trade register allocation flexibility obtain faster code generation speeds hard coded register names 
reduces cost code generation approximately factor 
support optimization vcode provides architecture independent names temporary callee saved registers 
clients case typically compilers names vcode instructions 
names constants compiler perform constant folding reduce overhead dynamic code generation loading bit immediate register storing register memory approximately instructions 
note mechanism originally intended code generation faster supports form register assertion clients get compilation errors machine compiled support number temporary variable registers require 
errors select different code compile code uses virtual registers fewer physical registers 
clients willing deal lower level dangerous interface able perform instruction scheduling loads branch delay slots impacting code generation speed 
basic problem portably exposing delay slots vcode instruction set reconciling underlying machine expensive 
general requires form instruction check 
instance vcode jump delay slots instruction underlying machine delay slots instruction check logical delay slot swap places generated jump instruction 
performing switch trivial jump instruction expanded instructions 
fortunately solution simple 
vcode includes macros schedule delay raw load clients schedule instructions branches loads respectively 
macro takes vcode branch instruction definition rs label instruction put delay slot 
machine delay slots instruction fits delay slot vcode inserts instruction delay slot 
instruction simply placed branch instruction stream 
raw load macro simpler takes memory instruction operand count number vcode instructions emitted result 
number number cycles required safely result load available vcode insert required number nops 
macros clients able portably efficiently schedule load branch delay slots affecting code generation speed 
extensibility vcode system simple modular 
characteristics easy dynamically reconfigure extend 
instance built sophisticated strength reducer multiplication division integer constants top vcode support unlimited virtual registers added similar manner 
clients dynamically substitute calling conventions generated function basis 
example vcode extensibility ease instruction set extended 
discussed section elimination intermediate structures contributes feature removes need vcode understand instruction semantics 
intermediate data structures extension complex extension couched context formed data structure 
vcode provides preprocessor consumes concise instruction specification automatically generates specified set vcode instruction definitions 
simplified form specification base insn name param list type list mach insn mach imm insn base insn name composed type list mapped associated register machine instruction mach insn associated immediate instruction mach imm insn 
machine instructions usually provided vcode 
machines large instruction sets vcode may neglect specify instructions client provide missing instructions needs 
instance client specification adds squareroot instruction mips sqrt rd rs specification composes base instruction type sqrt types float double associates target mips instructions respectively 
generates vcode instruction definitions define rd rs rd rs define rd rs rd rs simplify instruction extension specification language includes facilities constructing complicated sequences instructions acquiring access scratch registers new instructions terms existing vcode instructions 
single line preprocessing specification add new family instructions 
additionally extension terms vcode core extensions client ensure extensions machines 
discussion reasonable question ask fast dynamic code generation system fast 
main determinant question actions client take code generation dynamically generated code generally created ex client data structures 
traversing data structures determine code emit consume tens thousands instructions case compilation high level source 
result vcode performance sufficient applications 
furthermore show section clients hard coded register names reduce overhead factor 
section reports experience vcode limitations current system 
experience vcode daily real systems year 
proved useful tool performed demanding situations 
instance dpf system described earlier packet filter system aegis exokernel operating system 
nice practical feature vcode complexity horizontal vertical additional piece vcode system usually depend 
result extension increases number system states roughly additively multiplicatively 
feature testing simple dcg system vcode descends 
common error mis mapping vcode instructions machine instructions 
compared complexities finding code generation bugs full fledged compilers fairly benign error easily caught automatically generated regression tests 
disappointment implementation vcode inadequacies exposed current compiler linker implementations 
main problems vcode implementation continually ran linkers brought routines file needed compilation inlined routines referenced inefficient handling word sized structures 
vcode machine specification generates procedures vcode instruction 
procedures application 
unfortunately procedures stored single file unix linkers linked entire file simply pulling vcode procedures needed 
space overhead unacceptable especially solution difficult implement 
second problem easy solve just detrimental 
high performance appropriate inline vcode instruction invocations 
unfortunately compilers provide inline directive parse inline functions static referenced procedure scope 
vcode creates procedure vcode instruction problem leads long compilation times 
vcode solution problem previous macros implement vcode instructions macros take space referenced fast parse 
unfortunately far perfect solution cause space explosion vcode instructions 
final problem badly compilers handled word sized structures allocating structure register operating directly compilers load store structure memory operation 
true structure contained single unsigned integer 
vcode registers represented structures allow stronger type checking possible unwrapped integer overhead add noticeable cost vcode instruction 
solved problem allowing vcode optionally compiled represent registers integers 
vcode limitations vcode useful practice main drawbacks lack symbolic debugger limited registers peephole optimizer instruction scheduler 
critical debugging dynamically generated code currently requires stepping level host specific machine code 
working knowledge instruction set making sense debugging output challenging 
fortunately fixing problem difficult 
modifications preprocessor automatically generate debugger machine specification files 
instruction interpreted generating vcode recording effects 
nice consequence arrangement client added instructions incorporated debugger automatically 
currently adding support unlimited virtual registers vcode extension layer 
preliminary results indicate addition optional support increase code generation cost roughly factor 
note systems built far current vcode arrangement client managed registers problems 
machines vcode instructions map directly native instructions mips architecture lack peephole optimizer noticeably hurt quality vcode generated code 
machines single vcode instruction map multiple machine instructions peephole optimizer useful 
instance current generation alpha chips lack byte short word operations 
result vcode synthesize load store byte instructions multiple alpha instructions 
emulation require large number instructions worst case unsigned store byte instruction requires eleven alpha instructions temporary registers 
emulated instructions typically compute useful intermediate results peephole optimizer reuse 
unfortunately current implementation vcode similarly exploit regularities extremely local view code generation single vcode instruction 
include implementing vcode level peephole optimizer clients wish trade runtime compilation overhead better generated code 
drawbacks lack instruction scheduler critical 
instruction scheduling handled vcode separating register uses definitions 
clients wish micro schedule delay slots vcode portable instruction scheduling interface 
furthermore current architectural trends deep instruction reorder buffers entries deep 
level static instruction scheduling particularly important 
vcode fast retargetable extensible dynamic code generation system 
generates machine code approximate cost instructions generated instruction roughly times faster fastest equivalent system literature 
retargeted risc machines approximately days 
allows levels system parameterized runtime 
vcode provides portable idealized risc instruction set clients 
clients interface specify dynamically insight due todd proebsting 
generated code applications 
vcode generates machine code place intermediate passes typical code generation systems 
result vcode substantially faster previous systems consumes little memory code generation 
important side effect eliminating intermediate data structures vcode instruction set readily extended clients vcode enforce particular semantics instructions 
vcode toy system 
extensively networking subsystem experimental exokernel operating system compiler backend extension ansi supports dynamic code generation 
vcode generates code efficiently generates efficient code 
interface abilities useful broad class clients 
vcode general purpose dynamic code generation system generate code intermediate representation support extensibility system publicly available source obtained author 
hope availability vcode help raise dynamic code generation curiosity rightful position common optimization tool 
acknowledgments massimiliano poletto patience porting vcode marcus daniels role beta tester 
eddie kohler extensive editing typesetting assistance greg ganger deborah wallach thorough readings 
especially professor frans kaashoek support research todd proebsting insightful discussions dynamic code generation 
bailey gopal peterson sarkar 
pathfinder pattern packet classifier 
proceedings symposium operating systems design implementation pages november 
chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
proceedings pldi pages portland june 
clark tennenhouse 
architectural considerations new generation protocols 
acm communication architectures protocols applications sigcomm september 
cmelik keppel 
shade fast instruction set simulator execution profiling 
proceedings acm sigmetrics conference measurement modeling computer systems pages may 
consel noel 
general approach run time specialization application proceedings th annual symposium principles programming languages st petersburg fl january 
deutsch schiffman 
efficient implementation smalltalk system 
proceedings th popl pages salt lake city ut january 
engler hsieh kaashoek 
language high level efficient machine independent dynamic code generation 
proceedings th annual symposium principles programming languages 
engler kaashoek toole jr exokernel operating system architecture application specific resource management 
proceedings fifteenth acm symposium operating systems principles december 
engler wallach kaashoek 
efficient safe application specific message processing 
technical memorandum mit lcs tm mit march 
engler proebsting 
dcg efficient retargetable dynamic code generation system 
proceedings asplos vi pages october 
fraser 
language writing code generators 
proceedings sigplan conference programming language design implementation pages 
fraser hanson 
retargetable compiler ansi sigplan notices october 
ungar 
optimizing dynamically dispatched calls run time type feedback 
proceedings pldi pages orlando florida june 
keppel eggers henry 
case runtime code generation 
tr univ washington 
leone lee 
lightweight run time code generation 
proceedings workshop partial evaluation semantics program manipulation pages copenhagen denmark june 
leone lee 
optimizing ml run time code generation 
proceedings sigplan conference programming language design implementation may 
mogul rashid accetta 
packet filter efficient mechanism user level network code 
proceedings eleventh acm symposium operating systems principles pages november 
pike reiser 
hardware software tradeoffs bitmap graphics 
software practice experience february 
poletto engler kaashoek 
tcc compiler workshop compiler support systems software tucson az february 
pu massalin ioannidis 
synthesis kernel 
computing systems 
ramsey fernandez 
new jersey machine code toolkit 
technical report purdue university dept computer sciences december 
submitted acm transactions programming languages systems rosenblum herrod witchel gupta 
complete computer simulation simos approach 
ieee parallel distributed technology fall 
veenstra fowler 
mint front efficient simulation shared memory multiprocessors 
modeling simulation computers telecommunications systems 
bershad maeda moss 
efficient packet demultiplexing multiple endpoints large messages 
proceedings winter usenix conference 
