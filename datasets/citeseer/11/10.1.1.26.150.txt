reformulating planning dynamic constraint satisfaction extended jeremy frank ari jonsson 
paul morris 
nasa ames research center mail mo ett field ca jonsson ptolemy arc nasa gov 
years researchers reformulated strips planning problems sat problems csps 
discuss constraint interval planning paradigm represent planning problems incorporating interval time resources 
describe reformulate mutual exclusion constraints system extendible uniform remote operations planner architecture europa 
show reformulations involving dynamic variable domains restrict algorithms solve resulting dcsp 
alternative formulation doesnot employ dynamic domains describe relative merits di erent reformulations 
researchers reformulation planning problems constraint satisfaction problems csps attempt powerful algorithms constraint satisfaction nd plans ciently 
typically csp represents problem nding plan xed number steps 
solution csp mapped back plan solution exists number steps permitted plan increased new csp generated 
satplan sk mapped planning problems strips formalism boolean satis ability sat problems 
early versions required hand crafted translation planning domain order achieve solving performance automated translation arbitrary strips domains sat problems achieved performance 
graphplan bf works strips domains creating plan graph represents set propositions number steps mutual exclusion relationships propositions actions 
structure searched plan achieves goals initial condition 
original algorithm performed backward search plan graph transformed csp solved csp algorithm dk 
qss group 
research institute advanced computer science second growing trend planning extension planning systems reason time resources 
strips simply expressive represent realistic planning problems 
demand increased sophistication led need powerful techniques reason time resources planning 
scheduling community constraint satisfaction techniques perform sort reasoning 
coupled successes achieved reformulating strips problems provides incentives consider reformulating complex planning domains csps 
orts create planners reason time resources planners employ underlying constraint reasoning system manage complex constraints planning 
planners interval representations time constraint systems manage temporal resource constraints refers systems interval planners 
zeno pen descartes jos examples planners unfortunately space limitations prohibit doing mentioning orts 
hsts mus employs interval representation time permits arbitrary constraints parameters actions 
temporal constraints parameter constraints reformulated dcsp stage planning dcsp arc consistent inconsistencies result pruning 
hsts adds notions attributes timelines 
attribute subsystem component planning domain timelines represent sequences actions states attributes 
attributes permit intuitive modeling planning domains enable enforcement exclusion 
hsts employs unique uniform representation states actions 
remote agent planner rap employs mechanisms part control system deep space spacecraft may 
extendible uniform remote operations planner architecture europa successor rap 
important goal europa isto support wide variety search algorithms 
europa planning problem dcsp providing explicit variables subgoal decisions conditional subgoaling 
addition due size complexity non binary constraints space applications europa constraints jon jf represent underlying dcsp 
reformulation planning problem dcsp straightforward 
temporal components plan represented simple temporal network dmp complex constraints resource constraints implemented procedural constraints jon 
disjunctions modeled directly variables domains represent possible choices done europa 
addition mutual exclusion complicates task reformulating domains 
obvious way enforcing mutual exclusion constraints leads dcsp representation dynamic variable domains 
representation reasoning goods quite di cult important enhancements search algorithms depend reasoning serious drawback 
rst describe paradigm europa describe introducing mutual ex leads complications 
show represent mutual exclusion constraints dcsp dynamic domains 
discuss impact representation algorithms solve resulting dcsp 
constraint interval planning constraint interval planning framework interval representation time 
predicate uniform representation actions states interval period predicate holds 
token represent holds interval 
token de ned start duration interval occurs parameters elaborate predicate 
instance thrust predicate may parameter describing thrust level low medium high 
planning domain described planning schemata specify token tokens exist pre post conditions tokens related 
shows example planning schema 
schemata specify conditional ects disjunctions required tokens 
instance thrust interval met short warmup period engine warm longer 
variables representing disjunctions parameters tokens dcsp variables 
shown value temp variable indicates duration warmup token precedes thrust token 
planning schemata include constraints parameters token 
shown thrust interval constraint relating thrust level available fuel duration 
thrust level fuel temp parameter constraints interval constraints disjunctive constraints fuel level fuel duration level meets idle eq temp warm met warmup eq temp cold met warmup fig 

planning schema thrust interval 
schema consists components master token schema constraints parameters schema description tokens exist master token plan disjunction tokens may exist master token plan 
europa planning paradigm continuously reformulates planning problem dcsp problem 
done mapping partial plan csp 
temporal constraints form simple temporal network ciently solved dmp rest constraints form general non binary csp represented procedural constraints jf 
shows small partial plan induced csp 
assignments variables csp correspond adding new plan steps assignment parameters plan steps 
steps added removed plan csp updated re ect current partial plan 
example adding thrust step plan requires adding new variables constraints csp 
time csp inconsistent partial plan represents invalid solution csp solution mapped back solves problem 
advantage representation algorithm solves solve planning problem 
warmup rate meets thrust rate init fuel fuel start eq start dur rate eq init fuel dur rate fuel fig 

partial plan dcsp representation 
partial plan consists tokens shown top gure 
dcsp variables rounded boxes 
edges dcsp variables labeled constraints variables 
timelines europa square tokens round slots europa represents attributes planning domains timelines 
timelines ordered sequences token equivalence classes represent attribute changes course plan 
adds powerful constraints planning problem possible eliminate large number candidate solutions 
speci cation planning domains natural languages strips 
planning domain specify tokens appear timeline requires sophisticated domain model 
planner framework contain mechanism enforcing mutual exclusions 
adding action plan requires inserting token timeline 
slot legal place timeline token inserted 
tokens inserted single slots span multiple slots 
token equivalence class de nes full slot empty slot pair sequential token equivalence classes 
token inserted empty slot new empty slots created token 
inserted full slot new slots created 
start timepoint equated timepoints tokens de ning slot parameters equated parameters tokens slot 
timelines enforce mutual exclusion tokens di erent predicates 
models notion attribute maintaining state time unit resource single task scheduling problem 
timelines enforce partial order tokens token strictly strictly token occupies exactly interval slot token way saying tokens specify action state 
ensures incompatible actions permitted overlap timeline 
representing mutual exclusion europa description timelines leads natural representation mutual exclusion constraints europa 
token insertion decision represented variable 
domain variable set slots timeline 
notice domain dynamic set available slots changes new tokens inserted timelines 
search guaranteed proceed chronologically search algorithm simply store previous domains slots 
europa designed support search algorithms including non chronological algorithms 
means timelines change arbitrarily complex ways search plan proceeds 
identifying arbitrary slot occurred previous plan state require saving intermediate plan states performing expensive matching operations 
means new labels slots generated timelines evolve 
tokens nominally inserted slot timeline practice usually options immediately lead constraint violation 
instance slots may occupied tokens incompatible predicates slots may simply small slots zero duration adjacent tokens timeline 
lookahead mechanisms rapidly reduce set candidate slots 
number possible ways implement lookahead checking predicates inexpensive checking temporal constraints parameter constraints expensive 
shows example done 
example thrust token duration 
simply predicate names lookahead mechanism eliminate slots 
mechanism checks legal start times token slot eliminated token slot begins 
mechanism checks duration slot nd short having maximum duration 
leaves slots candidate 
thrust warmup cold thrust low thrust low turn earth ast fig 

checking suitable slots 
free thrust token left gure duration start times 
simple lookahead eliminate candidate slots slot 
note slots zero duration adjacent tokens represented gure 
representation subtle important rami cations sophisticated csp algorithms 
consider example powerful learning techniques employed algorithms dynamic backtracking gin relsat bm tabu search glo 
simply combination variable assignments part solution 
goods containing values dynamic domains unfortunately value changes search 
see consider containing token insertion empty slot 
value representing empty slot eliminated domain token insertion variable replaced new values representing new slots 
token removed domain variable updated new values expense inferring labels identical 
domain change times succession di erent tokens inserted empty slot goods empty may usable match current context value replaced 
ordering decision representation section propose mutual exclusion representation uses boolean variables represent decisions order tokens timeline 
recall timelines ordered list token equivalence classes de ne slots 
ect slots consequence committing possible orderings tokens 
saw slots mutable representations depend explicitly identity slots su er problems dynamic domains 
representation ordering decisions tokens timeline problem 
new tokens added new variables added domains dynamic 
describe new representation detail 
new token introduced create boolean variables describing relationship token token bef af eq 
create number conditional constraints relate boolean ordering variable timepoint variables constraints permit information boolean ordering variables ect possible values timepoints vice versa 
instance bef conditional constraint enforce ea sb 
similarly ea sb conditional constraint enforce bef 
see representation conditional constraints works sa sb start timepoints tokens respectively eb timepoints tokens respectively total ordering conditional constraints bef ea sb af eb sa case eq bit complex 
recall tokens parameter variables temporal variables ai th parameter bi th parameter respectively 
constraints eq sa sb eq ea eb eq ai bi recall pose constraints pair tokens timeline 
exploit fact bef aft true post additional xor constraint variables 
recall tokens incompatible predicates 
tokens totally ordered timeline pairs post unary constraint eq shows new representation 
cond xor cond aft eq bef fig 

order variables constraints tokens 
variables represented ovals constraints represented labeled hyper arcs 
recall lookahead mechanism described previous section lookahead operations subsumed arc consistency 
example incompatible predicates handled unary constraints posted eq variables 
slot early late conditional constraints propagate information boolean variables 
conditional constraints eq variable result propagation eliminate full slot insertions cause constraint violations 
cond cond cond cond lookahead check whichis immediately handled propagation check duration empty slots 
reason constraints new formulation mimic duration constraints slots 
constraints posted require inferring location empty slots current order tokens costly 
ways variables constraints exclusion relationship instance fewer variables 
representations lead intuitive higher arity constraints 
representation chosen discuss advantages relatively simple explain conditional constraints general procedural constraints procedural constraint framework europa 
timelines tokens pairs tokens pair ordered di erent ways 
induced search space possibilities invalid eliminated little search 
instance token occurs occurs attempting order quickly result temporal constraint violation 
add optional constraints logical variables representing ordering decisions enable propagation search unnecessary 
consider logical variables tokens possible arrangements tokens totally ordered possibilities equal comes possibilities equated 
post constraints af af af enforce conditions total ordering tokens eq af af enforce conditions partial ordering tokens eq eq eq enforce conditions equal 
total constraints token created timeline add logical constraints new logical variables 
comparing representation original representation requires single variable represent insertion decision 
domain variable dynamic seen special lookahead mechanism necessary reduce domain 
label maintenance mechanism needed update names elements domain timelines evolve 
representation reasoning di cult goods discovered search may values eliminated domain search 
goods may best ect search ort collect goods match current state wasted overhead 
assess ordering representation consider timeline tokens inserted 
ordering variable representation requires logical variables xor constraints conditional constraints timepoints logical variables 
addition pair tokens identical predicates parameters conditional constraints parameter variables boolean variables representing decision tokens equated 
optional logical constraints added contribution logical constraints 
main advan tage ordering variable representation mutual exclusion represented dynamic domains problems algorithms dynamic backtracking tabu search 
increased search space set observation constraint propagation limits options ordering variables expect roughly amount search new representation 
disadvantage new representation heuristic enforcement complicated 
natural heuristics token insertion decisions properties slots relative order timeline slot full empty 
slots longer values token insertion variables approach 
enforcing heuristics requires dynamically ordering boolean variables 
instance enforce heuristic insert token full slots rst mean specifying assigning eq variables higher priority assigning boolean variables 
enforcing heuristic insert tokens earliest slots rst require determining boolean variables correspond decisions tokens appearing earlier timeline giving 
discussion representing mutual exclusion constraints important component europa reformulation planning constraint satisfaction 
mutual exclusion reasoning complicates automatic reformulation planning domains 
discussed representations manage mutual exclusion reasoning discussed tradeo representations 
explicitly results dcsp representation dynamic domains leads problems powerful csp techniques reasoning 
leveraging power existing csp algorithms promising approach solving planning algorithms 
aimed providing representation powerful reasoning approaches feasible 
alternative representation avoids pitfalls dynamic slot domains complex terms constraint network enforcement heuristics 
premature conclude approach strictly superior 
slot representation instances employing dynamic domains literature 
discusses adding removing constraints set variables 
observations concerning pitfalls reasoning dynamic domain representation may manifestation deeper problem dynamic domains especially values domains change time 
phenomenon investigated closely prove pervasive prob lem important consider ways representing problems employing dynamic domains 
anonymous reviewers comments 
bf blum furst 
fast planning planning graph analysis 
arti cial intelligence 
bm bayardo miranker 
complexity analysis space bounded learning algorithms constraint satisfaction problem 
proceedings th national conference arti cial intelligence pages 
dk 
solving planning graph compiling csp 
proceedings fifth international conference onarti cial intelligence planning scheduling 
dmp dechter meiri pearl 
temporal constraint networks 
arti cial intelligence 
gin ginsberg 
dynamic backtracking 
journal arti cial intelligence research 
glo glover 
tabu search part orsa journal computing 
jf jonsson frank 
framework dynamic constraint reasoning procedural constraints 
conference onarti cial intelligence appear 
ari jonsson paul morris nicola muscettola rajan ben smith 
planning interplanetary space theory practice 
proceedings fifth international conference onarti cial intelligence planning scheduling 
jon jonsson 
procedural reasoning constraint satisfaction 
phd thesis stanford university computer science department 
jos joslin 
passive active decision postponement plan generation 
phd thesis carnegie mellon university computer science department 
weld ernst millstein 

proceedings fifteenth international joint conference onarti cial intelligence 
mus muscettola 
hsts integrated planning scheduling 
zweben fox editors intelligent scheduling pages 
morgan kaufman 
pen penberthy 
planning continuous change 
phd thesis university washington department computer science engineering 
smith frank jonsson 
bridging gap planning scheduling 
knowledge engineering review 
sk selman kautz 
pushing envelope planning propositional logic stochastic search 
proceedings fourteenth national conference onarti cial intelligence pages 
article processed atex macro package llncs style 
