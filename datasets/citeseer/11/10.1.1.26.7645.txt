concepts configuration management systems susan dart software engineering institute carnegie mellon university pittsburgh pa usa dart sei cmu edu sponsored department defense considerable progress con definition configuration management support software configuration management software cm discipline controlling evolution cm environments tools 
intent software systems 
classic discussions cm highlight user concepts provided existing cm sys texts 
standard definition tems 
shown spectrum 
spectrum taken ieee standard highlights seen extensions generalizations lowing operational aspects cm concepts 
difficulty associated extract identification identification scheme ing concepts cm systems structure product identifies ality terminology concerning cm functionality type making software engineering community cm unique accessible form 
systems implement variations concepts 
result control controlling release product concept described exists particular changes lifecycle cm system 
part highlighting concepts involves having controls place ensure consistent software creation baseline product 
discussing scope issues important users cm systems 
single cm system provides function status accounting recording reporting status components change requests ality required different kinds users cm gathering vital statistics components tems 
cm system addresses part product 
spectrum concepts 
complete report cm ca audit review validating systems examples briefly product maintaining consistency scribed 
components ensuring product defined collection components 
evident surveying existing configura definition includes terminology configuration management cm systems tion item baseline release version 
cm systems progress concerning support software cm environ incorporate functionality varying degrees support ments tools 
evident spectrum con aspects 
cm systems provide functionality cepts provided cm systems 
intention goes definition 
due highlight spectrum 
broadened defini reasons recognition different user roles tion cm cm system typical discussed sections disparate scenario 
ing environments heterogeneous platforms programming large support enabling teams software engineers large projects harmonious manner 
capture extra functionality worthwhile broaden definition cm include charge software group configuration manager charge cm procedures policies manufacture managing construction software engineers responsible developing building product optimal manner 
maintaining software product tester process management ensuring carrying validates correctness product quality organization procedures policies qa manager ensures high quality lifecycle model 
product customer uses product 
team controlling interactions multiple users product 
role comes goals tasks 
project manager goal ensure product sum cm capabilities provided existing systems developed certain time frame 
manager encompass identification control status accounting audit monitors progress development recognizes review manufacture process management team reacts problems 
done generating 
ing reports status software system performing reviews system 
definition cm system goals configuration manager ensure constitutes cm system policies creating changing testing sally accepted definition 
unified notion code followed information cm system 
instance system version project accessible 
implement techniques main control cm system 
ideally speaking cm system taining control code changes manager introduces provides functionality definition mechanisms making official requests changes 
practically speaking system changes change control board ccb vides form version control configuration responsible approving changes software cation system structuring system modelling system authorizing changes 
manager creates intent providing cm degree considered disseminates task lists engineers basically software engineering sales community cm creates project context 
manager collects sta system 
noted existing cm systems components software system vide combination functionality information determining components system standard set 
report mentions cm systems problematic 
cm systems acquired today 
software engineers goal effectively creating product 
means engineers worthwhile clarifying minor notion unnecessarily interfere creation notion cm system cm tool 
cm testing code production supporting docu system considered part environment ments 
time communicate coor cm support integral part environment efficiently 
tools help build consis cm system sold manner part package 
tent software product communicate coordinate instance rational environment cm notifying tasks required tasks ality integral part 
cm tool 
changes propagated ered stand tool 
instance revision control merging resolving conflicts 
system rcs cm tool intended tory kept evolution components prod installed existing environment 
uct log reasons changes record distinction important term cm changed 
engineers system represent notions 
area creating changing testing integrating code 
certain point code baseline typical cm user scenario development continues discussing cm systems simple typical cm parallel development variants target machines user scenario organization described order emerges 
frame 
scenario involves various people different responsibilities project manager tester goal sure product tested user roles different kinds users cm systems consequently different satisfactory 
involves testing particular functionality requirements cm systems 
version product keeping record tests integration various kinds integration apply version product results affect usability power cm tests 
errors reported back appropriate tem 
people fixes put regression testing 
start cm point project group may start cm system de qa manager goal ensure high quality capabilities cm system 
product 
means certain procedures control level cm system impose dif policies fulfilled appropriate approval 
ferent levels control product bugs fixed fixes propagated appropriate management 
variants product correct amount testing process product ideal cm system applied variant 
customer complaints provides cm process product followed 
product artifacts 
automation level fulfilling cm functions customers product different generally combination manual customers different versions variants 
automated procedures 
follow certain procedures requesting changes functionality cm systems features indicating bugs improvements product 
implement spectrum cm functionality 
ideally cm system suited scenario discussed detail 
port goals roles tasks 
implies roles tasks goals determine functionality required cm system 
presents concepts user roles attempt address 
indicated scenario section different kinds users cm systems 
users specific role different view organization cm different requirements cm system 
definition cm cm requirements distinct generally example typical cm scenario 
highlights set functionality project hinting requirements cm systems 
section configuration managers software engineers scope cm issues important users cm testers qa managers customers expect cm 
issues affect users expectations cm tem 
box represents major functionality system 
section illustrates spectrum cm concepts 
area 
topology intended indicate section observations cm outside boxes auditing accounting controlling section gives 
appendix ponents structure construction functionality areas presents overview cm systems referenced exist cm system 
combined team process functionality holistic comprehensive cm system results 
issues users cm systems issues related cm affect user cm system 
existing cm systems address issues variety ways 
intent discuss features existing cm systems worthwhile presenting issues affect user expectations cm system 
issues kinds roles pertinent cm systems environment tool builder environment tool integrator 
roles strictly user roles sense presents 
really related developing cm system kinds users 
team process structure construction auditing components controlling accounting system model interfaces relationships selection consistency workspaces conflict resolution families building snapshots optimization change impact analysis regeneration history traceability logging statistics status reports lifecycle support task management communication documentation versions configurations versions configurations baselines project contexts repository kinds components access control change requests bug tracking change propagation partitioning cm functionality requirements functionality areas components requirements users need record versions components differences reasons components identifies classifies stores differences identify group components accesses components configuration versions denote product 
baselines product extensions identify structure represents architecture project contexts represent collection components product 
artifacts related particular project 
furthermore construction supports construction users need repositories libraries store capture product artifacts 
components cm information different auditing keeps audit trail product kinds components source object code process 
diagrams documentation baselines 
accounting gathers statistics product process 
structure requirements users need model structure product system model represents controlling controls changes 
inventory components product specify interfaces components versions configurations process supports management product evolves 
making reusable identify maintain relationships components select compatible team enables project team develop components valid consistent version maintain family products 
product 
requirements areas discussed construction requirements users need means eas detail 
ily construct build product ability take snap integration cm system shot freeze status product time cm system notion integration level mechanisms optimizing efforts constructing systems environment 
cm system exist reducing need recompile components saving tools fully integrated 
integration pertains various space facilities doing change impact analysis aspects environment process toolset database 
predict ramifications making change easy process integration means incorporating usage pattern regeneration phase part product cm system cm process point time 
usage pattern environment pertains software lifecycle process 
toolset integration means infor auditing requirements users require history stalling cm system environment changes traceability related components exist tools environment 
product evolution log details instance user invoke cm functions done 
create new version time save command issued editor 
database integration concerns accounting requirements users need mechanism logical positioning cm database record statistics examine status product combined way extant environment easily generate reports aspects product database database separate entity process 
information databases 
kinds integration general tool integration controlling requirements users need cautious transition issues 
cm intended cess components system avoid unwarranted affect objects environment changes change conflicts line support change lifecycle object integration cm quest forms problem reports means tracking bugs system bound significant impacts dealt environment 
cm systems exist tion changes controlled manner different tools environments cm related versions product way part 
ing product limiting effects changes 
process requirements users need support start cm system lifecycle model organization policies ability varies project teams start cm identify tasks done tem products developing maintaining 
completed ability communicate information teams choose product people relevant events facilities development lifecycle ready shipment documenting knowledge product 
customer site 
hand choose put cm initiation project 
team requirements users need individual group choices overheads 
instance workspaces resolution conflicts merging team may choice overheads facilities supporting creation ated asking change 
family products 
ber manual procedures filing change request form seeking ccb approval getting acknowledgment note process box team box team opts placing software cm control significant areas functionality 
major part development complete 
affect affected areas 
change request procedure done line little user ideal cm system support areas time effort expended team cm functionality team process support fully earlier part lifecycle 
theory cm applicable 
single existing system provides product lifetime creation develop tionality areas 
ment product release customer delivery customer maintenance 
ideally cm systems support minimum overhead possible allowing cm applied early possible project 
existing cm systems tend focus particular organization software development lifecycle model 
phase lifecycle users limited function cm product result process 
neering task 
cm system needs provide functionality aspects 
existing systems provide product process support generally comprehensive sup levels cm control port cm system 
number procedures policies tools combine assist carrying cm 
provide varying degrees control users evolution product 
amount cm automation instance may require engineer submit cm generally combination manual formal written change request 
followed ccb automated procedures 
possible perform cm authorization change 
kind line assistance 
recognized ration manager sets workplace software inefficient 
goal automate 
particular files extracted configuration sible non creative parts cm 
instance written manager guarded repository placed change request forms protocol responding workspace solely engineer 
hand generally documented organization policy different procedures policies tools may allow folder captured enforced line 
engineers electronically mail request systems provide completely automated changes configuration manager members change requests 
cm system automates ccb 
members mail responses tion cm different degree 
users need 
approval change request assigned ment automated procedures manual ones extracts pertinent files directly supported line 
repository changes 
done manual intervention 
cm system cm system functionality automatically log accesses official record existing cm systems provide required process created 
tionality cm single system provides functionality required kinds users 
scenario considered tight active improve time needs users control action scenario loose capabilities environment architectures better passive control actions 
frequent changes 
section highlights spectrum scenario manual concepts existing cm systems 
overhead scenario frequent change encouraged easy 
different levels control may appropriate certain phases spectrum concepts cm systems product lifecycle example suitable previous section explained breadth issues second development 
requirements cm systems 
section gives cm system certain level control details specific functionality cm systems 
user timeliness product evolution 
ticular examines concepts support drive user process enforce bit tionality areas identified previous section 

existing cm systems provide level concepts organized spectrum represent evolution trol loose tight flexible cm support 
concept described exists allow user pick kind control 
particular cm system 
functionality areas interest cm system concepts discussed component process combination structure construction distinguishing process product features team concepts 
shows entire cm involves process product 
cm process spectrum concepts representative cm represents sequence tasks needed carry cm 
systems 
gives simplified description essentially process plan defines needs concept highlights advantages concept 
done carried 
section ends summary analysis ing process management function 
process strengths limitations spectrum con model takes account policies procedures cepts 
concept example system direction context management lifecycle model change request lifespan repository rcs contract adc change set system modelling dms ccc distributed component transaction nse transparent view sms workspace shape object pool dsee attribution adele consistency maintenance cma subsystem rational legend system exemplifies concept shown node lifespan rcs lifecycle model change request context management repository contract adc spectrum configuration management concepts caveats component concepts noted concepts systems dis component concepts deal identifying accessing cussed meant representative exists components software product 
repository complete summary evaluation exists 
distributed component described 
concept cm system discuss concept 
noted cm sys repository tems provide concepts shown notion repository fundamental cm 
concepts taken directly specific cm tem 
revision control system rcs provides systems common terminology deal notion repository ascii files 
effect automated cm functionality cm system centralized library files provides version concepts semantics 
description con control files repository 
file cepts simplified order focus certain aspect 
repository considered form cm 
result realized may highlight full files repository immutable capabilities concepts systems 
changed 
making change means creating new version sake presenting spectrum order hone file 
cm information files content basic set cm concepts simplification required 
brief files kept repository 
cm controls overviews cm system referenced pertain files repository 
file users appendix 
overviews give com check particular version working listing full cm capabilities sys perform discretion tem 
check back repository 
creates new version process concepts file 
users simultaneously check concepts deal process related functionality file change file checked automat context management contract change request lifecycle ically locked repository perspective model described 
checked back 
version number automatically associated new version consequently users check context management file particular version number time system designed default version 
changes aided engineering design field essentially shields version result new sequential version users low level details file system changes older versions result variant ver ration management 
users see domain specific sion 
version numbering scheme usage world circuit design manages pattern result version history tree file indicating context user 
project data represented graphically predecessor successor versions 
repository stores file hidden directories 
history information includes different versions provides workflow management guide team members files reason change replaced version processes 
example tool run may file 
note complete code involve creation circuit validating simulating different versions stored 
actual determining performance characteristics 
difference version stored known actions automatically derives delta 
assists space savings access time rent context related tool run data sets version file 
files tagged command files options invoking tools 
state checked state value 
time user needs select circuit design checked revision number date tool function return 
user sees author 
repository generally associated di appropriate tools particular task certain forms files exist 
sum repository cap data presentation logic schema layout design tures cm information stores versions files im data pertinent particular task forms mutable objects 
commands pertinent domain 
user perform actions different granularities single distributed component data item configuration context data 
user design management system dms pro worry tasks version control vides repository files distributed different hardware relationships files system knowing platforms 
repository logically centralized derived data various versions circuits data repository physically distributed 
handles tasks scenes 
effect cm dms aware distribution carries system captures domain specific way working cm account example providing context user eliminating need users fault tolerance facilities necessary remember got particular working status translations file formats 
users distri data items relationships bution transparent users carry context 
repository files located workstations 
team users geographically dispersed contract working configuration files 
multiple environment provides modelling copies files exist different workstations 
parts software development process terms dms aware location version formal agreement contract perform tasks file 
changes files repository result specified input deliverables 
artifacts contract local copy distributed workstations recorded configuration items 
contract dated system knows local copies 
models information flow start completion tasks updates occur interactively done batch mode 
passing results tasks components effect distributed users access centralized re product exchanged 
contract fulfilled cm facilities span passing deliverables subject specified heterogeneous workstations 
tance criteria 
deliverables passed certain elements process model different phase lifecycle person 
movement artifacts phases developing testing approving subsequently tracked 
progress contract releasing product 
separation allows different monitored various artifacts kinds users software engineers testers communications recorded 
effect contract independently perform code formal plan record unit 
separation transition configuration item 
phases independent achieved passing code separate configurations represent phase 
product developed sequence change request baselines 
baseline exists configurations de lifespan change request represents test approved production 
configura mented request change associated process tion hierarchy components 
baseline evolves model change 
lifespan models change request particular way 
code development occurs devel series forms process change opment configuration passes test configuration series states tasks roles 
customer may submit review approved configuration pro line software performance report spr configuration customer 
order fies fault request enhancement versions passed phase protocol interactions components 
allows report investigated required various users project manager circulating original designers implementors test manager authorize transition 
time diagnose problem 
response spr level approval component seen change impact analysis line design change dc configuration belongs 
effect lifecycle proposed 
details exactly components model achieved different states configuration 
changed 
lifespan analyses affected change 
people automatically chosen change control board 
notified structure construction concepts electronic mail dc vote concepts deal selecting components time frame approve change 
ture capturing changes component structure dc agreed new development version code describing structure product accessing parts changed dc state active structure constructing product characterizing code changed locked 
completion keeping components structure consistent changes new version frozen submitted check change set system modelling subsystem object pool ing approval person qa privilege 
ap attribution consistency maintenance 
code changes acquire approved status scribed 
status dc approved affected users notified electronic mail new version available 
change set users notified software status report ssr aide de camp adc abstracts fundamental closes original spr 
spr dc tion captured repository differences provide means users maintainers sions components difference relationship communicate represent history changes accessible user 
difference relationship related particular change request status reports files apply details changes progress audit trails changes completed changes change set 
adc captures supporting mechanism change impact analysis configuration change set change appropriate people carry tasks set construct customized version right time 
effect change requests assist driving figuration 
change set name means process change 
operations 
user specifies formula create particular instance configuration 
formula lifecycle model designates baseline selected change sets configuration control ccc provides plied 
change set treated dependent meaning notions supporting particular lifecycle model version history followed independently meaning sense supporting transition phases selective parts history applied previous change people lifecycle tasks data management sets 
user works performed phases 
separating sion works customized version configuration 
product sources binary modules agree change set captures changes files con meaning binary modules compiled figuration reason changes details source modules 
selecting version component changes 
user determines selection expression families evaluated scope change adc automatically records context represents search path modules 
details changes 
instance user wants resultant modules selected bound template major changes configuration bug 
data object known image 
tools browsers user designates change set changes files 
module debuggers inter module analyzers change set captured reason bug manipulate system models 
effect making changes files configuration system modelling abstraction product actual code changes different file instance fully describing product assists configuration related file changes details tools maintaining integrity product 
changes 
information seen user browses file change set 
subsystem sum change set represents logical change product rational environment provides partitioning means creating version configuration large ada product parts allowing confining necessarily dependent latest version scope effects changes 
parts called configuration 
subsystems 
subsystems interface specifications implementation bodies represent configuration system modelling items treated wholes accessed system modelling describes software product names 
components subsystem structure components build 
visible components subsystems system model textual description user designated interface specification exported 
alter tools access carry tasks 
jas rational environment checks runtime system modelling described sets functions mentation bodies exactly match interface specification 
represent kinds information relations result progress implementation tween product components version binding informa bodies independent interface specification tion construction rules verification rules 
changed user desires 
recompilations relations describe modular decomposition product happen components subsystem hierarchy subcomponents dependency interface changed time parts product components build order modules interface need recompiled 
changes grouping components related properties interface specification possibly require grouping source object modules 
descrip product recompiled 
subsystems version control tion product relations called template components subsystems captures structure 
functional operators particular version 
users mix match versions relations user define complex relations subsystems particular version product 
simpler ones 
enables tools answer summary subsystems represent way users limit user defined queries components af effect changes recompilation changing particular component 
system modell environment check validity combining parts ing includes notion family capture history product 
product 
family describes succession versions components 
various user specified versions object pool product family 
associated version notions system modelling domain attributes creation date author 
queries ware engineering environment dsee selection rules attributes 
essary information recognize required generate construction rules record existing components particular version derived object 
derived objects generated components con placed object pool shared users 
dsee structed recording compiler version enables sharing user indicated desired compiling options needed 
verification rules specify derivation properties objects 
derived object record structural organizational constraints pool contains collection binaries objects pro duced translation tools 
derived object associ relationships 
user define structure ated information pertaining system modell just hierarchical structure product ing including versions sources translator tools terms desired characteristics 
user translator options user comments scribe product higher level abstraction date time person involved location terms composition lengthy derivation 
information known bound file lists 
ration thread 
dsee performs system build computes desired component consistency maintenance system model 
dsee looks pool see derived configuration management assistant cma object matching desired exists 
provides configuration construction validation built 
user needs particular description product derived object compatible dsee reuse information successful unsuccessful usage pool obviating need generating components forming configuration 
data 
user need know derived object ing facilities include predefined attributes relationships exists dsee checking 
objects user describes configurations 
pool period non dsee semantics attributes relationships cma delete freeing space 
saves determine configuration set inthe amount compilation time space required stances components usable 
usable done 
dsee provides different ration complete unambiguous consistent lack kinds object pools objects derived version skews 
means configuration consist source files checked repository instances components required contain particular user 
effect cm system optimizes multiple instances component 
classes regenerating components maximizes represent user defined characteristics sharing derived objects 
straints types versions 
classes relationships represent kinds dependencies logical compatible attribution component instance inheritable dependencies 
adele system generalizes repository time new configuration constructed cma utilizes system modelling entity relationship data information accumulated database data modelling capabilities 
product de ous components forming configuration 
scribed terms data model adele performs way cma predicts configuration model 
components product able 
new configuration added database represented database objects attributes analyses usability 
user rely relationships 
attributes associated object system identify inconsistencies preserve object 
attribute name creating re configurations 
value 
example attribute name delta represents object exists ascii form team concepts compressed value true false 
concepts deal isolation ordination kinds attributes distinguished predefined synchronization software engineering teams working user defined 
managed adele product workspace transparent view transaction declared managed user 
described 
predefined special kind attribute type 
type attribute mandatory immutable object 
workspace represents main cm entities adele notion workspace shape designed posed object document revision element 
prevent users interfering 
relationships define dependencies objects notion proceed mutable object derived object user jects cm 
workspace achieved describe configuration terms characteristics status model 
means attribute state jects terms list specific versions associated version component 
depending objects 
adele instantiates builds configuration state state busy frozen component selection rules constraints centered attri considered private workspace rations 
user update repository new public repository 
busy component mutable version configuration 
nse assists merging usable frozen immutable changes repository 
checks exists available public 
components promoted currently repository placed public repository making available public user conflict new approved appropriate people 
effect changes coming 
conflict nse notifies workspace provides isolation suggests dis user merging problems provides assistance global long term repository im eliminating conflicts 
users request mutable objects private shorter term repository changes repository incorporated mutable objects 
workspaces 
sum transaction synchronizes ordinates teams changing different parts product 
transparent view software management system sms enhances notion workspace making explicit object summary analysis spectrum providing transparent view repository represents spectrum cm concepts provided workspace 
means versions files various cm systems 
concepts purposes user interested seen workspace repository capturing history immutable versions hidden view files distributed component distribution data exist 
example changes der cm contract represents plan unit latest public version need seen workspace 
change set captures changes configuration user isolated public changes workspace allows selection configurations independent gives appearance specialized repository latest version lifecycle model enforces user 
version control workspace relative version process software evolution system provided workspace 
new versions modelling fully describing recording structure private publicly visible released building product object pool enabling workspace 
configuration checked public re derived objects optimizing product workspace users assigned access ing attribution allows selection configuration workspace 
components workspace characteristics long list files belong workspace user 
maintenance automated checking user registered workspace change inconsistencies components components workspace ration workspace isolating private changes accessed 
sum transparent view provides viewing mutable configurations transparent view viewing mechanism protection unauthorized access configurations protecting un authorized access configuration 
mutable configurations transaction coordinating changes configurations team 
con transaction cepts represent advances cm system functionality 
transaction notion network software environment nse represents ordinated unit 
topology spectrum intended show reflects structure product supports isolation evolution concepts 
instance left right interactions users merging generally speaking advances changes 
transaction involves environment set modelling various processes capturing components commands 
environment provides notions similar components product optimizing product cona workspace transparent view 
shows directory struction 
characterizing component dependencies store source derived objects 
team 
arms spectrum indicate mands acquire reconcile related progress 
example change request resolve provide interactions environments 
lifecycle model described related represent protocol coordinate model subsumes certain change request model actions users represent change request operates repository 
cation actual changes 
users independently environments changing different concepts spectrum show 
point developing extracting cm model shown concepts evolution set fundamental cm services existing cm granularity components version systems 
needed determine configuration identification versions ness spectrum concepts configurations progress system modelling define name concepts alternate evolution command files files semantics combine concepts useful cm system models objects recognition system 
roles different kinds changes bugs versus enhancements versus emergency patches current re cm systems search 
spectrum concepts represents typical concepts commercially cm systems 
envi regarding extraction concepts cm systems research continues experience descriptions simplified combining concepts gained arms pared implemented order find spectrum join 
means probably mon concepts 
really common vocabulary set fundamental cm services cm system talking concepts 
distinction attain better suit user requirements 
cepts implementation clear 
cm system designer trying stance implementations workspaces vary cm implement features political tech systems provide different functionality nical issues affect cm systems 
political user 
concept workspace issues relate marketing standardization technical lowest common denominator implementations concern feasibility implementing certain opposite 
workspace transparent view transaction mechanisms 
really notion transaction subsumes notions workspace transparent view 
really major political issue concerns evolution shown spectrum 
puter aided software engineering case tools 
instance case tool vendors bypass implementing difficulty extracting concepts cm cm tools assume environment vendors systems overload concepts 
provide cm support frameworks 
poses concept purposes generally case tools builders provide cm support uniform cm systems 
instance rational tools 
case vendors incorporate cm support subsystem concept shown spectrum providing users solve problem integrating different support limiting scope changes subsystems cm systems install different case tools 
provide functionality 
provide vendors viewpoint essentially name scope boundary support partitioning system duplicating represent baseline workspaces represent means tempted environment frameworks 
working variant configurations configuration team provide granularity interface hand case vendors incorporate ing represent immutable executable component cm tools rely environment architects load view rational terminology 
order provide suitable framework integrate case tools discuss subsystems necessary hone certain simultaneously provide sort global cm 
overloading difficult extract bility 
answers questions known 
basic concept 
similarly combining parts concepts case implication kind side effects particular implementation probably needed cm systems cept concept extraction tricky 
instance relation environments vice versa 
considering change request roles configuration manager test manager phases technical research issues affect capabilities lifecycle development testing crucial cm systems 
questions arise 
concept independent 
appropriate technology base cm system object oriented database persistency rate spectrum concepts provides starting tions objects suitable 
layer environment architecture cm fit 
acknowledgments base level database making integral part reviewers particular environment framework 
matter specifying peter feiler grace downey kurt ed morris bob cm process higher level architecture 
ellison chuck weinstock mario barbacci rick green mechanisms cm separated cm technical writer marie elm scm tionality standard cm primitives reviewers 
environment support cm functionality 
unified cm model 
possible provide distributed cm support 
geographically dispersed software teams cm system local cm system integration 
major problem 
software maintenance development systems aide de camp software management system product industry particularly department defense overview 
ma 
tors 
possible support cross development soft 
estublier configuration manager adele data ware 
engineers developing product host programs 
proceedings workshop easily move target machine engineering environments programming cm control product 
scale limiting large june pp 

factor cm systems 
cm support 

software configuration management 
line product line product 
addison wesley 
possible model aspects cm process 
henderson siegel 
cluding people intensive parts implement software configuration management 
prentice hall 
cm system 


ccc change configuration control environment 
functional overview 

answers questions obvious 
progress come various sources 
configuration management assistant 
proceedings second internation cm system vendors environment architects workshop software version configuration tool integrators software process modelling trol acm usa october pp 

forum computer aided design engineering 

pulling data 
mechanical computer integrated manufacturing worlds 
engineering february 

mclean configuration manage ment large scale software development efforts 
gte workshop software engineering environments pro cm management evolution software large june pp 

uct 
operational level cm systems cm identi 
graham miller evaluation 
tech 
fication control status accounting audit review 
cmu sei tr software engineering institute ture process management team 
area carnegie mellon university july 
software engineering environments progress 
marzullo wiebe software sys 
evident spectrum concepts tem modelling facility 
proceedings acm number existing cm systems sigsoft sigplan software engineering symposium capabilities 
spectrum practical software development environments december represents snapshot concepts implemented pp 

various cm systems 
system addresses differently 

software configuration management user issues roles integration control automation level methods tools 
john wiley sons england process versus product support best time published june 
start cm functionality provided 
feiler downey transaction oriented 
hoped presenting spectrum may aid figuration management 
tech 
rept 
cmu sei tr software engineering institute carnegie mellon understanding capabilities cm systems november 
common framework discussing cm tool support 

johnson bringing design management open environment 
high performance systems june pp 


feiler dart downey evaluation aide de camp adc rational environment 
tech 
rept 
cmu sei tr adc software maintenance development software engineering institute carnegie mellon consists basic adc system ty july 
system 
basic adc provides database 
tichy design implementation evaluation capturing cm information 
user defines attributes revision control system 
th international conference relationships files 
database store source software engineering tokyo september pp 

binary code stores mutable plastic immutable 
ieee guide software configuration management 
installed information 
adc list processing language 
ieee ansi standard 
effectively allows user file group 
mahler shape software 
adc performs conflict resolution moment figuration management tool 
proceedings flags conflicts 
change sets captures tional workshop software version configuration changes configurations allow users designate control siemens germany january pp 

version configuration list change sets 
cohen creating version tree 
reports generated wagner version management database contents 
program builds supported 
proceedings acm sigsoft sigplan symposium practical software development environ structural relationships automatically derived 
ments november pp 

non adc cm information imported adc database 
system supports configurations directly integrates problem reports change requests appendix overview cm systems recognition user roles assigning appendix gives snapshot capabilities orders setting local workspace cleanroom 
various cm systems mentioned earlier sections means change request sent cm 
evaluation complete description manager approved manager assigns item systems 
intent give software engineer 
engineer activates reader information scope cm capabilities item workspace local copy directories systems representative files created 
soon engineer finished various kinds cm systems existing today 
item workspace automatically deleted adele adc ccc cma dms dsee changes added back database 
lifespan nse rational rcs shape sms 
systems described 
change configuration control ccc ccc sold system called adele ccc development maintenance native configuration management system uct 
ccc provides change control methodology grenoble 
basic features data modell ration identification status accounting building ing interface checking representing families products derived items 
provided assuming configuration building workspace control 
adele waterfall lifecycle model 
components ccc pass intended kernel software engineering environ various phases lifecycle appropriate ment 
adele database entity relationship 
ccc supports documentation standards 
provides defining objects interfaces classes users form hierarchy access rights realizations instances bodies configurations information database 
database families 
objects attributes describe cm manager project manager dep relation describes de oper test manager 
levels access adele uses assist composing con exist access passwords user classes figuration 
user designate configuration specific data item change request assignments 
desirable attributes 
attributes user defined ccc database hierarchy represents product system defined 
user designate selection rules structure comprises multiple levels data structures attribute values constraints preferences 
cluding database system configuration module adele detect incomplete inconsistent configuration text 
parallel versions code 
neous development virtual copies 
merged selected changes applied con checks required sign promotion 

conflicts detected merge 
dms access control class user requests ccc known projects deal tion level file file names encrypted 
virtual small change component deal teams defined users required release product 
elec cally dispersed share common database 
automatic mail notification events relating change re update synchronization batch updates requested 
quests provided 
emergency changes bypass changes communicated team members 
change controls allowed 
latest version file located regardless resides network 
dms uses structure carrying checks 
report generation audit trails pro configuration management assistant vided 
change requests associated documentation cma automated approval 
cma laboratories provides mechanisms policies creating cm systems 
mechanisms entity relationship attribute database 
domain software engineering classes attributes relationships define character environment dsee components decomposition product apollo dsee provides version control system components 
classes ing releases configurations distributed system building tributes partition rendition version classes object pools task lists tracking tasks done relationships logical dependency consistency completed alerts notifying users certain bility component instance inheritable dependency 
events 
version control source file repository 
cma provides recording retrieving descriptions dsee system model represents description product configurations set components comprise part thereof 
declarative description defining record retrieve information known static structural properties includes description consistencies dependencies components source file derived object tool dependencies configuration 
predicts completeness ambiguity components build rules shell scripts consistency newly formed configurations 
change build order identification library paths options database occurs commitment simple translator tools conditional processing rules 
transaction 
configuration access configuration thread represents language version control mechanisms 
name clashes configurations selection components building avoided name spaces 
product 
versions selected certain characteristics equivalences compatibilities 
bound configuration thread represents instances components design management system dms build product unique geared fication 
derived object bound configuration computer aided design engineering market part thread associated 
distributed build shares hardware design engineering environment 
dms provides compile time load machines 
logically centralized repository transparent distributed data handling files 
files contain kind information ascii graphics design data 
ver sions files maintained resident operating system imperial software technology versioning mechanism 
information product structure environment designed especially support project procedures alerts events user defined attributes agement 
relationships individuals software relationships centralized kernel database project modeled contracts 
contract theoretically ity 
notion release achieved promotion description expected products implemented levels promotion levels represent stages database 
configuration item unit transfer passes 
represent policy re tween contracts considered frozen approval sign files 
user specify 
transferring contracts indicates certain tasks access kind data grouping data phases complete 
cm exists items contract notified status changes ap databases deliverables contracts 
successor variant control provided components changes agreed management decision databases 
user define relationships cm authorize changes assign resources 
items components assign components problem re taken store modified re submitted port 
support system building 
development status level quality cycle repeats 
network software environment nse programming large system developed nse sun microsystems environment xerox information systems division house cm 
database manages operating system directory system modelling key part 
describes structure derived files addition source code 
software system simple algebra sets nse provides team support developing code functions 
user define complex queries easy environment represents workspace 
workspaces version selection algebra 
software structure support nested recursive transactions protocol defined template 
version binding supported merging updating files child parent image successive versions component workspace 
files workspaces represent family 
families represent parallel devel ration represent multiple versions 
specific versions component grouped ration 
configuration immutable 
particular history project specific ple users workspace check check history 
version selection provided contexts files working workspace 
merging families 
construction consistency rules de workspaces requires conflict resolution fined 
tools system modelling nse provides interactive support 
workspace copying archiving files compiling tively captures directory structure store sources generating releases browsing 
source derived objects product build structure logical structure product 
structure product visible browser 
lifespan lifespan comes yard software systems rigorously supports change control 
geared project manager monitoring changes 
authorized eda systems provides access repository 
lifespan uses rela ration management computer aided design 
tional database query language 
stores text binary shields user operating system file systems code diagrams provides version control uniform graphical interface 

collections objects belong packages ally users pull appropriate tool menu change control centers 
package automatically finds relevant data runs assigned manager responsible approving tool saves changes user finished 
changes package 
lifespan uses drawing incorporates ways organizing data office model hardware design methodology 
product order allow user focus states transitions transition triggers prompts user data required particular task project vista view roles recognized 
electronic mail provides automatic 
project collection data notification 
reports items repository subject cooperating team changes generated 
security passwords product includes versions files supplied configuration items encrypted phase circuit design 
vista working set file filenames 
problem reporting tracking formal change versions particular engineer time 
control accordance various national standards view allows users concentrate attention particular supported 
testing information may held aspect design information relevant item relationships dependencies items 
schematic view layout view displayed 
lifespan monitors agreement process changes 
logical unit arithmetic logic unit determines systems modules review abstraction component designed allows flags developers need included detailed data produced various tools review issues necessary control documentation 
hidden accessed needed effect groups related information regard shape ing abstraction 
objects version control shape system university berlin 
versioned checkpointing 
shape provides repository attributed file system version control workspaces version states configuration identification 
integrates system modelling facilities rational derived binary pools 
configurations described rational environment rational provides selected attribute pattern attributes port teams programmers working large ada defined system defined 
linear parallel 
rational cm facilities subsystem versions variants configurations support team 
ada program libraries integrated opment 
workspaces emulated states version cm 
subsystem represents portion ada product 
determine mutability file 
files subsystems developed independently parts workspace transition states busy saved product single software engineer team proposed official public database states coordinated manner 
subsystem version identifier published accessed frozen 
subsystem released 
different versions worked simultaneously changes merged subsystems combined subsystems 
software management system sms activity table specifies versions subsystems sms provides version control workspace combined 
rational provides mechanisms management system modelling derived object need recompilation ada units 
ment change detection repository tool interface subsystem ada units placed version con specification attribute version selection 
trol user turn version control desired 
workspace protected environment working versions supports authorization logging task basis 
changes objects monitored revision control system rcs actions triggered particular event occurs 
derived rcs developed tichy provides version control object consistency state valid source files repository 
repository version obsolete invalid represent relationship tree file 
branch tree represents variant system building quality state ok warning file 
rcs uses numbering scheme number error fatal error indicate version consistency 
versions branches 
differences versions files reverse deltas stored repository save space allow latest version tree accessed quickly 
normal usage pattern accessing repository files involves user checking particular version file repository lock making changes files eventually checking back user completed changes 
time rcs logs details change author date time reason change 
rcs automatically incorporate unique stamp actual file needed 
rcs compare different versions files freeze configuration assist merging branches recognition differences source lines 
tags configuration state tags files repository indicating relationships files 
table contents definition configuration management definition cm system typical cm user scenario organization issues users cm systems user roles integration cm system start cm system levels cm control distinguishing process product amount cm automation cm system functionality spectrum concepts cm systems caveats component concepts repository distributed component process concepts context management contract change request lifecycle model structure construction concepts change set system modelling subsystem object pool attribution consistency maintenance team concepts workspace transparent view transaction summary analysis spectrum cm systems appendix overview cm systems adele aide de camp adc change configuration control ccc configuration management assistant cma design management system dms domain software engineering environment dsee lifespan network software environment nse rational revision control system rcs shape software management system sms list figures cm functionality requirements spectrum configuration management concepts 
