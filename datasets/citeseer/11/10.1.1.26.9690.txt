appear proceedings interchi amsterdam april 
management interface design humanoid ping luo pedro szekely robert neches usc information sciences institute department computer science admiralty way marina del rey ca mail ping szekely neches isi edu today interface design tools force designers handle tremendous number design details limit control design decisions 
approaches taps true strengths human designers computers design process 
presents human computer collaborative system uses modelbased approach interface design help designers search design space effectively construct executable specifications application user interfaces 
human inthe loop environment focuses human designers decision making utilizes bookkeeping capabilities computers regular tedious tasks 
describe underlying modeling technique execution environment allows incompletely specified designs executed evaluation testing purposes tool decomposes high level design goals necessary implementation steps helps designers manage myriad details arise design 
keywords interface building tools techniques design processes development tools methods rapid prototyping interface design representation 
today interface design tools strike adequate balance giving designers control interface design providing high level design automation 
tools give designers extensive control details design interface builders typically force designers control details design 
tools automate significant portions interface design mike typically designers control details 
describes efforts combine benefits classes tools provide extensive human control designers details 
thesis model driven programming plus decomposition design goals lets provide environment allows humans computers strengths design process 
system described humans focus setting high level policies computer focuses bookkeeping details humans want address 
approach motivated view interface design search space design alternatives 
search space contains unmanageable number design alternatives 
defined design decisions determination operations supported parameters require presentation operations parameters presentation application objects interest choice input gestures control sequencing gestures operations 
choices considerations design space explodes combinatorially 
key problem help designers search design space quickly effectively 
interesting consider interface builders automated generation systems main current approaches fare judged terms support exploration design alternatives 
interface builders allow designers draw screens application 
effective concrete tasks constructing static portion interfaces editing screen layouts 
working level force designers handle far detail 
tools designers forced design commitments level individual widgets 
design decision making conceptual level committing support selected objects interface committing 
furthermore number steps entailed change high level commitment discourages exploring alternatives 
missing interface builders support design abstraction ability defer design commitments 
automatic interface generation systems generate user interfaces description application functionality 
main purpose systems hide interface design complexity automating design decisions human designers 
provide human designers little control decisions 
unfortunately generating interface designs intrinsically difficult 
resulting automatically generated interfaces real limited styles 
best menu driven style limited generating dialogue portions display application display area hard generate automatically 
technical barriers effective automation hard overcome 
design space large contains bad designs 
principles userinterface design specified automatically prune search space 
hard tell automated interface design system applicationspecific considerations affect weighting alternatives 
approach strives retain best aspects approaches 
allow designers control design decisions interface builders additional ability control decisions respect broader set concerns presentation sequencing just layout 
preserve ability automation tools designers insulate design details provide hooks control details desired 
facilitate design exploration supporting different levels abstraction maximize modularity design space control search 
provide aids managing details implementing conceptual designs 
environment human designers focus design decision making evaluation hard automate performed quite effectively humans 
system helps designers reduce memory burden mental load managing regular tedious tasks decomposing designs easily achievable sub designs 
approach consists parts model design execution environment human computer collaborative design exploration environment 
modelbased environment provides modeling language aspects interface design ranging considerations arise early design concrete ones define details interface 
modelbased environment provides run time system execute modeled interfaces fully 
collaborative design environment helps designers effectively search design space helping construct models helping keep track alternative design alternatives decisions consequences decisions require handling 
rest organized follows 
briefly describe enabling technology model system provides capabilities modeling design model execution 
collaborative design environment action design example show decompose design goals divide labor designer computer human designer interacts computer 
close current status plans 
model design execution environment humanoid base layer environment model system 
interfaces specified constructing declarative model interface look behave 
humanoid model provides enabling technology supporting different levels abstraction maximize modularity design 
interface model humanoid design model captures information application functionality objects operations information features interface 
humanoid factors model application interface semi independent dimensions application semantics design represents operations objects application program provides presentation defines visual appearance interface manipulation defines gestures applied objects equivalently set manipulations enabled moment sequencing defines order manipulations enabled action side effects declare actions interface performs automatically side effects action manipulation 
see details 
run time system humanoid provides run time support module included application 
module executes design model constructs application displays interprets input specifications model 
produce update display application data structure run time system searches presentation model hierarchy presentation component capable displaying data structure 
model returns specific presentation component suitable displaying data context account data type congruence spacing restrictions run time system uses produce update display 
note presentation component obtained model default inherited humanoid generic knowledge base specific presentation component specified interface designer 
defaults enable designers execute incompletely specified designs testing evaluation purposes 
provides humanoid capability support delay design commitments allows designers specify aspects want address 
runtime system developers need write code update display 
specify declaratively dependencies presentation methods application data structures 
humanoid uses information dynamically reconstruct displays application data structures change 
humanoid interactive modeling tools model approach humanoid leads interface design environment number benefits current interface building tools supports design reuse 
system provides easy way access design models presenting components models graphical objects selected dragged dropped position reuse 
helps understand design models 
environment presents designer model sample displays interface specified model 
explicit models humanoid reduce designers mental effort understand specification ways 
helps showing designers connections components model components display 
second helps designers understand impact potential design change identifying altered portion model applied 
example designers point interface display object interest humanoid identify fetch part model defines object designers ask humanoid highlight interface objects display controlled particular part model see details 
reduces cost modeling 
model approach provides benefits price additional specification effort 
design environment reduces cost obtaining benefits assisting burdens building model 
humanoid model context sensitive graphical working environment allows designers build modify models interactively 
modification model force recomputation interface defined model provides immediate feedback 
eases design dynamic aspects interface including conditional display interactive behavior sequencing control retains descriptive power language systems 
collaborative design environment section uses example illustrate environment divides labor human computer utilize best design 
argue design complex nature hide complexity designers losing designers control design decisions 
introduce agenda system bookkeeping needed manage design tasks 
illustrate decompose design goals designer interacts system implement design policy decision 
nature design support needed design tool provides extensive control design designers know break high level design goals activities supported tool resolve interactions activities 
humanoid interactive design environment combines strength interface builders model driven programming immune problem 
decomposing interface design difficult task doable non programmers 
interface design rich domain high level goals break multiple lower level goals 
ways achieve lower level goals giving rise complexity designers current design issues requiring effort keep track design steps update agendas activities 
artifact model approach intrinsic characteristic design 
face decisions exactly implement design policy decisions regardless uses model approach interface builders hand programming 
differs paradigms explicitly decisions expressed help system provide effecting 
example illustrates complexities appears simple interface design decision 
consider interface object browser shown 
main body object browser window shows list slot value pairs 
designer values selectable commands applied 
shows object browser having selection capability 
general implement capability perform tasks 
task label possible methods task 
determine single multiple objects selected 
task 
specify create variable record current selected object called application input humanoid jargon 
object selected stored variable referenced commands selection 
task 
define manipulation selects object 
entails sub tasks task 
choose mouse button key invokes selection behavior 
task 
determine area presentation mouse clicked select object 
complete presentation object hotspot presentation area larger presentation presentation small 
task 
specify mapping presentation area selection triggered application object implied selection 
general presentation display multiple components application data structure necessary specify selected 
task 
design feedback show selected object 
feedback represented icon associated selected object check mark 
object browser example 
browser notion current selection browser support selection highlighting display selected object different shapes colors filling styles 
potential interactions tasks just listed decisions may design 
examples behavior objects mouse button selection type variable selection stored consistent type value stored highlighting feedback confused possible purposes presentation 
notice complexities involve fundamental design decisions 
matter tools hide complexity reducing design space unduly limit designers control design decisions recall argument automatic interface generation systems 
complexity inevitable question best cope 
approach ameliorate problems introducing new division labor human designers computers 
decompose design goals system supported collaborative tasks 
take advantage humanoid explicit models add layer modeling describe interface design activities 
main idea model goals interface design satisfy model methods achieving goals 
goals posted automatically system application commands executable endusers posted designer objects displayed selectable 
complex design goals example decomposed simpler goals bottom goals achieved simple editing operations interface design adding menu item display 
modeling interface design goal oriented way possible goal management system help designers keep track goals need achieved offer designers different methods achieving goals keep track methods tried warn designers previously achieved goals violated solutions goals 
similar collaborative environment seeks avoid problems automating human design responsibilities overcome weaknesses human cognitive limitations short term memory 
system supports system designer initiated design goals 
system initiated goals implementation oriented generated critics 
designer initiated goals oriented design intentions designers choice post implementation oriented goals 
environment goes additional respects active collaborator 
system react promptly deriving necessary tasks current design updating task agenda automatically response interface model changes 
side effect frees designers potential limitations imposed designers modeling tools 
designer modeling means get valid agenda system 
helps evaluating designs providing prompt results 
humanoid changes model immediately reflected sample display generated current design 
provides quick design evaluation redesign iteration relationship models interfaces generated models understandable 
supports interleaving design tasks 
making current tasks available designers designers choose concentrate issue want allow carry design tasks parallel 
designers shift focus design tasks freely losing track design tasks losing feedback provided derived interface 
rest section organized follows 
describe goal management mechanism called scenarios agendas 
briefly describe goal decompositions relevant object browser design example 
example system assists designer managing details arise implementing design decisions example 
summarize benefits approach 
scenarios agendas goal management system performs design task bookkeeping decomposes high level design goals maintains presents valid task agenda 
scenarios agendas tool building applications users need manage set activities extended period time 
scenarios agendas provides constructs modeling activities goals methods 
goal represents desired state design interface provides way user invoke application commands 
goals methods achieving commands invocable user method menu bar commands 
scenarios agendas supports kinds methods 
system methods automatically run procedure achieves goal 
provides way encode default behavior require user involvement 
interactive methods prompt user information invoke procedure 
decomposition methods replace goal set simpler goals user system pursue individually 
scenarios agendas provides default interface managing large collection activities 
interface presents agenda set goals met allows user choose applicable methods accomplishing goal 
addition scenarios agendas provides ways filtering agenda focus different types goals object goals goals refer particular types objects goals refer particular command goals created particular person particular dates 
scenarios agendas monitors relevant data objects domain 
data structures change satisfying conditions affected goals re evaluated status updated appropriately agenda 
collaborative environment facility monitor interface design model keep goal agenda date design evolves 
decomposing interface design design goals decompositions model interface design process goal management system derive design task agenda 
identified set design goals methods decompose design process constructing wide variety graphical interfaces 
appendix contains catalogue top level interface design goals identified 
scheme knowledge goals decomposition built system concern individual designers 
goals defined terms sub goals primitive steps 
goals define queries design model test appropriate condition 
non primitive goals decomposable goals easier achieve 
show decomposition object selectable goal discussed previously 
goal object selectable subgoals selection manipulation elaborated task subgoals single multiple selection specified task application variable specified task start specified task event specified task value set specified task selection feedback specified task design environment action section show system leads designers map conceptual designs executable interface specifications system reduces burdens designers bear system lets designers take control forcing handle details care 
example show system helping designers add selection capabilities object browser shown 
previous section showed subgoals entailed goal 
shows enhancements design model required specify new interface feature 
elements need added shown thick border consist new presentation model components labeled selection area selection feedback select value 
show details parameters newly added design objects 
rest section describes steps designer follows modeling desired new feature 
collaborative environment designers express intentions selecting goals system design goal library posting instances goals agenda 
system posts goals detects new design tasks 
example adding select object feature object browser designer selects objects selectable goal goal library prompted system specifies display object selectable 
done object display sample implementation goal posted agenda 
collaboration lets designers keep control post goals level appropriate simultaneously lets system help responsibility determining consequences goals 
goal objects selectable instantiated agenda system computes goal decomposition necessary tasks design model context presents agenda shown 
goals shown bold face parameters square brackets 
associated goal known methods achieving goal 
methods displayed agenda designers click icon left goal 
designers select method goal order edit design directly humanoid direct manipulation interface editing model 
approach lets designers choose design alternatives full burden generating options 

presentation behavior model object browser application 
browser shows object slots values 
display defined object browser window presentation method 
body application area parts 
menu bar input panel command panel horizontal bar generic wide class application windows inherited humanoid generic presentation model 
part selection area object contents specific application displaying slot value information user specified object presenting feedback selected object 
case shown system provides methods achieving selection feedback specified goal 
create reverse video feedback modifies design highlight selected object reverse video 
create associated icon feedback modifies design indicate selected object icon check mark displayed selected object 
suppose designer chooses create reverse video feedback method 
method posts new goals agenda selection area specified feedback presentation elaborated 
subgoals default system methods system executes 
accordingly icons posted subgoals changed show satisfied 
notice environment utilizes means inform designers effects default methods model changed default methods added selection area design sample interface generated model updated reflect presentations behaviors new model agenda new status goals methods different icons 
point designer choose methods change way goal satisfied system 
mechanism providing defaults allows designers load system portions design want concerned retaining control desire 
designer chosen create associated icon feedback method system post corresponding goals methods lead designer realize implementation selection feedback specified goal differently 
knowledge design inconsistencies defined goal decomposition 
example multi valued input needs list values single value 
designer chosen single selection realize single multiple selection specified subgoal multi valued input satisfy application variable specified subgoal 
agenda object selectable posted object selectable selection feedback specified expanded designers 
goals shown bold face parameters squared brackets 
methods italic 
indentation presents decomposition relation 
goal satisfied goal method method progress system handle bookkeeping tasks posting corresponding goals methods resolve conflict 
shows subgoals selection manipulator elaborated designers need fill applicationspecific information 
satisfying selection manipulator elaborated goal adds remaining elements design 
benefits collaborative environment collaborative environment activity management handled system 
design options design step designers consideration need designers worry keeping track steps needed implement top level goal 
equally important system impose design commitments design process designers full control design decisions 
tasks decomposed lowest level designer activities supported humanoid modeling environment 
agenda create reverse video feedback method selected 

agenda selection feedback specified closed selection manipulator elaborated expanded 
effective system detailed modeling 
collaborative environment utilizes strength human designers design decision making strength computer bookkeeping automating regular tedious tasks 
specifically benefits novel features designers express design intentions explicitly 
designers express high level design goals making object selectable 
collaborative environment maps refinements design model shown overcoming cognitive difficulties directly expressing desired design features modeling language 
designers extensive control design decisions freed cumbersome design details 
collaborative system designers freedom pursue design issues direction choose 
keep control aspects care loading system things want concerned accepting default methods achieving selection feedback specified subgoal design example 
system manages multitude details arise interface design task specifying selection feedback design example providing agendas management filtering mechanisms built capabilities keep agendas date 
designers outside collaborative environment 
designers directly edit designs humanoid interactive tools editing textual representation text editor 
goals affected changes automatically checked 
modifications change state design goals satisfied marked 
modifications introduce inconsistencies appropriate inconsistency resolution goals posted 
system plan recognition try infer new goals capture high level intentions editing operations performed outside environment 
environment provide assistance requested hinder designers require assistance 
system smooths transition conceptual design implementation 
design activities conceptual design implementation led disjointed interface design tools addressing different aspects design problem 
imposed gap conceptual design implementation tool middle ground supports mapping conceptual design functioning interfaces 
system described bridges gap mapping designers intentions executable interface specification 
supports intertwined design implementation working environment previously neglected need 
current status humanoid model design execution environment implemented garnet 
group implement interfaces large applications logistics analysis system drama knowledge base development environment shelter 
addition humanoid interactive design environment implemented humanoid 
done theoretical study identifying classifying design goals built initial system described adapting current scenarios agenda mechanism support interface design environment full scale 
plan perform usability tests see goals understood wider range designers lead designers execute interface design functioning interfaces 
plan provide design critics integrating kinds design critics uide system 
critics detect design inconsistencies provide design evaluation automation 
environment design critic post goal remove inconsistency 
inconsistencies system methods fix problem automatically sub guide designer solution 
want peter david benjamin brian harp helpful comments preparation 
research reported supported darpa contract numbers ncc 
contents represent opinions authors reflect official positions darpa government agency 
appendix summary top level interface design goals subgoals identified 
goals identified analyzing interfaces group built analyzing interfaces commercial products framemaker understand modelled humanoid 
command executable command invocable command invocable menu command invocable button command invocable popup menu 
command invocable dragging dropping 
command invocable keyboard accelerator set method inputs set default value set dragging dropping 
set selection 
set type 
set chosen case alternative values set dialogue box set factoring sequencing control elaborated executed read run reset inputs execution confirmed execution shown dialogue box show dialogue box needed execute command current selected command default command set method application inputs set default value set dragging dropping 
set selection 
set typing set chosen case alternative values notified wrong value specified input beep incorrect revert incorrect message incorrect reset incorrect incorrect error recover incorrect object dragging interactor behavior elaborated start specified event specified value set specified command invoke specified command input set specified feedback template elaborated neches 
clarification dialogs just appearances user interfaces 
isi working 
bennett gould greene wiecha 
transformations dialog tree rule mapping content style 
proceedings acm siggraph symposium user interface software technology pp 
november 
conklin 
hypertext tool exploratory policy 
proceedings cscw 
september pp 

draper norman 
software engineering user interfaces 
ieee transactions software engineering 
pages 
march 
foley kim kovacevic murray 
uide intelligent user interface design environment 
sullivan tyler editors intelligent user interfaces 
pp 

acm press 
harp benjamin neches szekely 
drama application logistic shell 
isi rr 
march hayes szekely lerner 
design alternatives user interface management systems experience cousin 
proceedings sigchi 
april pp 

lemke fischer 
cooperative problem solving system user interface design 
proceedings aaai pp 
myers garnet comprehensive support graphical highly interactive user interfaces 
ieee computer pp 
november 
myers 
state art user interface software tools 
rex hartson deborah hix 
ed advances human computer interaction volume ablex publishing 
neches benjamin harp szekely 
scenarios agendas reusable customizable approach user system collaboration complex activities 
isi working 
neches foley szekely sukaviriya luo kovacevic hudson 
knowledgeable development environments shared design models 
international workshop intelligent user interfaces 
january 
neuron data 
open interface toolkit 
university ave palo alto ca 

interface builder palo alto ca 
olsen 
mike menu interaction environment 
acm transactions graphics vol pp 

singh green 
high level user interface management system 
proceedings sigchi 
april pp 

swartout balzer 
inevitable intertwining specification implementation 
cacm july pp 

szekely 
template mapping application data interactive displays 
proceedings uist 
october pp 

szekely luo neches 
facilitating exploration interface design alternatives humanoid model interface design 
proceedings sigchi 
may pp 
szekely luo neches 
interface builders model interface tools 
proceedings interchi 
april 
wong 
rough ready prototypes lessons graphic design 
poster short talks chi 
may pp 
yen neches szekely 
implementation specification reformulation 
sullivan tyler editors intelligent user interfaces 
pp 

acm press 
