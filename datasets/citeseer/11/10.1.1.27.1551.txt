centrum voor wiskunde en informatica semantics programming languages tool oriented approach heering klint software engineering sen sen november report sen issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax semantics programming languages tool oriented approach jan heering paul klint cwi box gb amsterdam netherlands jan heering paul klint cwi nl university amsterdam kruislaan sj amsterdam netherlands paying attention semantics tool generation programming language semantics significantly increase impact 
ultimately may lead language design assistants incorporating substantial amounts semantic knowledge 
acm computing classification system keywords phrases semantics programming languages tool generation language development system language design assistant domain specific language compiler toolkit software renovation tool note submitted acm sigplan notices 
research supported part domain specific languages project 
role programming language semantics programming language semantics lost touch large groups potential users 
reasons unfortunate state airs stands 
semantic results rarely incorporated practical systems help language designers implement test language development assist programmers answering questions meaning language feature properly documented language manual 
systems potentially ective bringing semantics formalisms techniques places needed dissemination publications courses exemplary little programming languages 
current situation semantics languages tools drifting steadily apart shown 
tool oriented approach semantics languages tools semantics languages tools drifting steadily apart 
semantics languages tools tg ldas tool oriented approach semantics languages tools kept tool generation tg ultimately language design assistants ldas 
semantics definition terms axiomatic pre postconditions attribute grammars attribute propagation rules denotational lambda expressions algebraic equations rewrite rules structural operational natural inference rules action action expressions state machines transition rules coalgebraic behavioral specification rules program algebra equations table current approaches programming language semantics 
semantics aims making semantics definitions useful productive generating language tools possible 
expect reverse current trend shown 
goal produce semantically founded languages tools 
ultimately envision emergence language design assistants incorporating substantial amounts semantic knowledge 
table lists semantics definition methods aware 
examples 
petri nets process algebras methods specifically address semantics programming languages included 
dating back sixties attribute grammars denotational semantics oldest methods state machines called evolving algebras coalgebra semantics program algebra latest additions field 
ironically attribute grammars popular tool builders consider particularly interesting definition method 
discuss various methods general terms going technical details reader need familiar 
case di erences hard decipher field highly fragmented appropriate dictionaries lacking ect main argument 
table lists representative language development system semantics definition methods table 
entry software refinery origins knowledge software environments research kestrel institute fit current semantics paradigms 
pioneering system best knowledge longer included 
systems listed widely di erent capabilities widely di erent stages development 
discussing characteristics applications section explain general ideas underlying tool oriented approach programming language semantics 
shaped experiences asf sdf meta environment table past years 
discuss language design assistants section 
semantics system developed attribute grammars synthesizer generator cornell university denotational psg technical university darmstadt algebraic asf sdf meta environment cwi university amsterdam structural operational natural centaur inria sophia antipolis action asd cwi university aarhus state machines gem mex university aquila operational software refinery reasoning systems palo alto table representative language development systems 
tool oriented approach semantics tool oriented approach semantics aims making semantics definitions useful productive generating language tools possible 
ects aspects way programming language semantics practiced 
table lists tools generated 
principle language definition augmented suitable tool specific information tool generated may require tool specific language extensions core semantics definition formalism 
practice necessary semantics definitions tend contain deal implicit information may extracted tool generation 
entry table scanner parser generation standard technology 
lex yacc known examples stand generators purpose 
input formalisms close regular expressions bnf de facto standard formalisms regular context free grammars respectively 
unfortunately tools table standard formalisms 
key features tool oriented approach language definitions primarily tool generator input 
provide kind theoretical explanation constructs language question part language manual 
interpreter act things oracle programmers needing help tools generated 
scanner parser syntax directed editor typechecker interpreter dataflow analyzer call graph extractor partial evaluator optimizer program slicer origin tracker debugger code generator compiler profiler test case generator test coverage analyzer regression test tool complexity analyzer metrics documentation generator cluster analysis tool systematic program modification tool table tools derived language definition 
writing large language definitions loses esoteric character similar kind programming 
semantics formalisms tend best small examples lose power language definitions written grow 
tool oriented approach semantics formalisms modular separate generation analogue separate compilation supported 
libraries language constructs important 
tool oriented approach may require addition tool specific features core formalism 
leads open ended pure style semantics description 
scope tool oriented approach includes instance domain specific little languages 
tools table useful dsls programming languages 
software maintenance renovation tools 
included table 
compiler toolkits cosy cocktail ocs suif pim 
system generated tools semantic engine synthesizer generator scanner parser lalr syntax directed editor incremental typechecker incremental translator 
incremental attribute evaluator psg scanner parser syntax directed editor incremental typechecker incomplete program fragments interpreter functional language interpreter asf sdf scanner parser generalized lr syntax directed editor typechecker interpreter origin tracker translator renovation tools 
conditional rewrite rule engine centaur scanner parser lalr syntax directed editor typechecker interpreter origin tracker translator 
inference rule engine asd scanner parser syntax directed editor checker interpreter conditional rewrite rule engine gem mex scanner parser typechecker interpreter debugger transition rule engine software refinery scanner parser lalr syntax directed editor object oriented parse tree repository including dataflow relations euro tools program slicer 
tree manipulation engine table tool generation capabilities representative language development systems 
existing language development systems table summarizes tool generation capabilities representative language development systems listed table 
generate lexical scanners parsers produce syntax directed editors interpreters produce various kinds software renovation tools 
support specification formalisms di er generality application domain 
instance synthesizer generator supports attribute grammars incremental attribute evaluation particularly suitable typecheck ing static analysis translation suitable dynamic semantics 
asf sdf meta environment supports conditional rewrite rules attribute grammars defining dynamic semantics 
software refinery comes full blown functional language wide range computations programs expressed 
systems provide specialized specification formalisms 
psg instance uses context relations describe incremental typechecking incomplete program fragments denotational definitions dynamic semantics 
gem mex supports semi visual formalism optimized definition programming language semantics tool generation 
generate typechecker interpreter debugger 
table far complete 
language development systems sis psp gag sps mess actress ldl eli 
tools listed table generated current system 
ample opportunities tool generation exist areas optimization dynamic program analysis testing maintenance 
language design assistants logical step semantics tool generation lead situation similar computer algebra 
large parts mathematics incorporated computer algebra systems 
conversely computer algebra fruitful mathematical activity yielding new results general mathematical interest 
case semantics see opportunities language design assistants incorporating substantial amount formal informal semantic knowledge 
instance language design rationales discussion documents produced standardization bodies 
development assistants push semantics practical application give rise new theoretical questions 
language design assistants mind support human language designer providing design choices performing consistency checks design process 
operational knowledge typical issues typing rules scope rules execution models incorporated 
major research questions arise regarding acquisition representation organization abstraction level required knowledge 
instance organized currently known paradigms object oriented functional logic programming 
higher level abstraction new paradigms derived constraints composition certain features expressed checked 
key question construct collection language feature components su ciently general reusable wide range languages 
similar considerations apply tool development 
incorporating knowledge tool generation language design assistant envision tool generation assistant helps constructing tools advanced type expression controlling selection branches 
controlling expression evaluated short circuit vs full evaluation 
controlling expression evaluated concurrently program parts speculative execution conditional special case 
controlling expression side ects 
controlling expression cause exceptions 
jumps outside branches allowed 
selected branch evaluated concurrently program parts 
evaluation selected branch cause side ects 
evaluation selected branch cause exceptions 
evaluation conditional construct yield value 
table possible parameters generic conditional construct 
way tool generation mind previous sections 
perspective somewhat tangible consider relatively simple case conditional construct modelled language feature component 
table gives impression wide range issues addressed generic conditional construct specialized concrete statement conditional expression specific language 
research question design framework similar questions expressed answered 
major question organize specialization process language feature component concrete language construct 
main alternatives parameterization transformation 
parameterization specialization component question amounts instantiating parameters 
parameters identified instantiation usually simple mechanism adaptability reusability parameterized component limited 
transformations hand language feature component designed explicit parameters 
specialization achieved applying appropriate transformation rules obtain desired specific case 
clearly approach flexible part language feature component modified transformation rules ectively act parameter 
relation approach meta level transformation parameterized modules largely unexplored 
aware research language design assistants broad perspective sketched pointing general direction language designer workbench sketched goals 
action semantics emphasizes libraries reusable language constructs 
plans longer pursued language development laboratory included library reusable language constructs knowledge base containing knowledge languages compilers interpreters tool language design 
design implementation selection languages described case study high level interactive composition predefined language constructs 
jan bergstra mark van den brand arie van deursen ralf jan rutten useful comments earlier versions 
ace bv 
cosy compilation system 
www ace nl products cosy htm 
anderson belz blum 
metalanguage programming semantics programming languages 
acta informatica 
kutter 
formal aspects development environments montages 
sellink editor nd international workshop theory practice algebraic specifications asf sdf electronic workshops computing 
springer british computer society 
apt 
olderog 
verification sequential concurrent programs 
springer nd edition 
snelting 
psg system formal language definitions interactive programming environments 
acm transactions programming languages systems 
bergstra dinesh field heering 
complete transformational toolkit compilers 
acm transactions programming languages systems 
bergstra heering klint editors 
algebraic specification 
acm press addison wesley 
bergstra 
program algebra component code 
technical report programming research group university amsterdam 
appear formal aspects computing 
clement th 
despeyroux kahn lang 
centaur system 
acm sigplan notices 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments 
van den brand 
generator incremental programming environments 
phd thesis katholieke universiteit nijmegen 
brown moura watt 
actress action semantics directed compiler generator 
kastens editors compiler construction cc volume lecture notes computer science pages 
springer verlag 
jourdan 
attribute grammars definitions systems bibliography volume lecture notes computer science 
springer verlag 
van deursen 
executable language definitions case studies origin tracking techniques 
phd thesis university amsterdam 
www cwi nl arie papers ps gz 
van deursen heering klint editors 
language prototyping algebraic specification approach volume amast series computing 
world scientific 
van deursen klint 
little languages little maintenance 
journal software maintenance 
van deursen klint verhoef 
research issues software renovation 

finance editor fundamental approaches software engineering fase volume lecture notes computer science pages 
springer verlag 
field heering dinesh 
equations uniform framework partial evaluation interpretation 
acm computing surveys es 
electronic supplement symposium partial evaluation 

tool box compiler construction 
hammer editor compiler compilers cc volume lecture notes computer science 
springer verlag 
gurevich 
evolving algebras guide 
borger editor specification validation methods pages 
oxford university press 
harm 
language development laboratory 
haveraaen owe editors selected papers th nordic workshop programming theory research report pages 
university oslo department informatics 
www cwi nl ralf 
jacobs rutten 
tutorial algebras induction 
bulletin eatcs 
www cwi nl 
justice budd 
ocs object oriented compiler construction toolkit 
technical report oregon state university department computer science 
kahn 
natural semantics 
brandenburg vidal wirsing editors fourth symposium theoretical aspects computer science stacs volume lecture notes computer science pages 
springer verlag 
kastens 
gag system tool compiler construction 
editor methods tools compiler construction pages 
cambridge university press 
kastens 
compositional design implementation domain specific languages 
horspool editor ifip tc wg working conference system implementation languages methods tools pages 
chapman hall 
kastens jung 
eli system 
koskimies editor compiler construction cc volume lecture notes computer science pages 
springer verlag 

declarative aspect oriented programming 
danvy editor proceedings acm sigplan workshop partial evaluation semantics program manipulation pepm brics notes series ns pages 
lee 
realistic compiler generation 
mit press 
markosian newcomb brand 
enabling technology reengineer legacy systems 
communications acm may 
mosses 
sis semantics implementation system manual user guide 
technical report daimi md computer science department aarhus university 
mosses 
action semantics 
cambridge university press 
paulson 
semantics directed compiler generator 
principles programming languages popl pages 
acm 
kastens 
language design implementation selection 
proceedings acm sigplan workshop domain specific languages dsl technical report pages 
university illinois urbana champaign 

formal semantics compiler generation 
editors und compiler pages 
teubner verlag 
plotkin 
structural approach operational semantics 
technical report daimi fn aarhus university 
reps teitelbaum 
synthesizer generator system constructing language editors 
springer verlag third edition 
editor 
handbook programming languages vol 
iii little languages tools 
macmillan technical publishing 
schmidt 
denotational semantics methodology language development 
allyn bacon 
schmidt 
need popular formal semantics 
acm computing surveys es 
electronic supplement strategic directions computing research 
kurtz 
formal syntax semantics programming languages laboratory approach 
addison wesley 
wand 
semantic prototyping system 
sigplan notices 
proceedings acm sigplan symposium compiler construction 
wilson french wilson amarasinghe anderson tjiang 
liao 
tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
acm sigplan notices 

