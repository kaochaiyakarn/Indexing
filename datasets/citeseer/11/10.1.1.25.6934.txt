general framework time granularity application temporal reasoning technical report tr claudio bettini sean wang sushil jajodia presents general framework define time granularity systems 
identify main dimensions different systems characterized investigate formal relationships granularities systems 
introduces notion network temporal constraints multiple granularities emphasizing semantic computational differences constraint networks single granularity 
consistency networks multiple granularities shown np hard general approximate solutions problem minimal network problem proposed 
human activities heavily relate calendar units clock units weeks months hours seconds 
system support reasoning involving units called granularities recognized important issue cr tsql 
different definitions granularities exist literature definitions quite restrictive 
preliminary version appeared proceedings rd international workshop temporal representation reasoning key west fl 
bettini partially carried visiting george mason university 
wang partially supported national science foundation iri 
jajodia partially supported national science foundation iri int 
dipartimento di scienze dell informazione universit degli studi di milano milano italy 
bettini dsi unimi department information software systems engineering george mason university fairfax va usa 
gmu edu purpose introduce study general unifying model time granularities propose investigate temporal constraints granularities 
approach define time granularities called temporal types general way 
top general definition identify dimensions choices 
set particular choices dimensions defines temporal type system 
time granularity definitions aware literature particular type systems framework 
define study relationships temporal types 
investigation relationships important part definition type systems literature 
data conversions different granularities considered 
second contribution extension known problem temporal constraint satisfaction case constraints specified terms multiple granularities temporal type system 
introduce constraint networks granularities specified set variables representing instants conditions form associated pairs variables integers temporal type 
meaning associated time instants assigned temporally apart ticks ticks terms example day means time instants lie day days apart 
assume number distinct temporal types appear network 
consider main questions usually asked constraint networks network solution 
ii network tightest constraints networks solutions 
problems known consistency problem minimal network problem 
interesting note research literature mainly studied constraint networks single granularity underlying assumption constraints multiple granularities equivalently translated set constraints single granularity see related section 
argue constraint network allow multiple granularities constraint granularity may equivalent granularity 
example consider constraint says event happen day certain event happens 
constraint translated terms hours 
incorrect say second event happen hours event happens 
glance solution provided considering just single constraints constraint network 
specifically consider adding new nodes network facilitate translation constraint network multiple granularities equivalent constraints expressed single basic granularity 
example add nodes representing events days boundaries granularity add constraints specifying distance hours nodes representing original events boundaries new nodes 
general solution problems clear type constraint identify granularity boundaries deal new constraints reasoning process ii granularities time ticks different length months gaps ticks business days considered approach give translation equivalent network 
view considerations directly study constraint networks multiple granularities 
show consistency checking networks np hard allow explicit disjunctive conditions 
sound complete propagation algorithm efficient 
propose approximate algorithm constraint propagation 
basic idea algorithm repeat steps apply path consistency algorithm dmp subnetwork having constraints terms granularity translate derived constraints granularities appearing network 
give methods perform step 
method assumes system information relationships pairs temporal types second assumes system knows relationship temporal type basic 
show case propagation algorithm correct method generally yields better solutions 
various parts briefly mention applications temporal type systems constraint networks 
applications essentially previous papers 
rest organized follows 
section definitions temporal types temporal type systems properties types type systems discussed 
section constraint networks multiple granularities introduced problem consistency shown np hard 
section approximate constraint propagation algorithms networks studied 
section discusses related section concludes 
appendix contains proofs theorems 
granularity model start concept temporal type formalize notion time granularities 
definition index discrete linear order isomorphic subset integers usual order relation absolute time linear order 
temporal type mapping ffl imply element respect elements ffl implies 
property states mapping monotonic 
property disallows empty set value mapping certain index value lower index higher index mapped non empty sets 
set said th tick tick simply tick intuitive temporal types day month week year satisfy definition 
example take set positive integers index set define special temporal type year starting year follows year set absolute time corresponding year year set absolute time corresponding year 
note sets type year consecutive intervals case types 
leap years consecutive intervals constitute temporal type 
take leap year leap year corresponds leap year corresponds leap year corresponds 
represent finite collection ticks temporal type 
example specify year temporal type set absolute time corresponding year 
note definition allows temporal types ticks mapped interval 
example possible temporal type month business months business month union business days day month excluding general holidays 
illustrates aforementioned temporal types considering span time february th till april nd 
month day day week temporal types day absolute time 
note leap year 
possible temporal types different different mappings include sets absolute time 
example index set integers types denoting years 
suppose denotes years calendar starting mapped year mapped year index mapped empty set 
consider gamma mapped year calendar year mapped year index mapped empty set 
types cover period absolute time dividing ticks different indexes refer certain tick 
useful distinguish types easy see considered equivalent shifting indices 
proposed definition generalization previous definitions time granularities 
considering particular application formal context specialize general model dimensions ffl choice index set ffl choice absolute time set ffl restrictions structure ticks explained ffl restrictions temporal types relationships call resulting formalization temporal type system 
consider possibilities dimensions 
convenient choices index set natural numbers integers finite subset 
choice absolute time typically dense discrete 
general application imposes fixed basic granularity second discrete absolute time terms basic granularity probably appropriate choice 
interested able represent arbitrary finer temporal types dense absolute time required 
cases specific applications impose left right boundedness absolute time set 
structure ticks restricted ways disallow types gaps tick month example tick gaps corresponding weekends disallow types non contiguous ticks day example tick corresponding friday contiguous respect tick representing monday disallow types ticks cover absolute time absolute time year disallow example type covering years disallow types non uniform ticks types ticks having size allowed 
example second day week allowed month 
temporal types restricted relationships 
formally define relationships subsection intuitive examples disallow multiple types equivalent respect shifting indices enforce pair types comparable example week month incomparable certain week find month fully including vice versa 
restricting temporal type system tradeoff expressiveness simplicity efficiency algorithms needed manage temporal types 
give definition expressive temporal type system particularly useful 
definition temporal type mapping set positive integers subsets reals positive integers conditions satisfied ffl imply real number real numbers ffl implies 
system defined choices aforementioned dimensions positive integers index set real numbers absolute time set 
structural restriction ticks types system equivalent respect shifting indices 
restriction enforced condition non empty tick start index second condition definition 
example restrictive granularity system discrete absolute time index sets positive integers restrictions apply 
refer temporal type system easily seen type corresponds partition positive integers subset partition finite infinite interval 
index viewed label intervals assigned interval 
relationships formal properties define number interesting relationships temporal types 
definition temporal types 
ffl finer said finer denoted exists 
ffl groups temporal types said group denoted theta non empty tick exists possibly infinite subset 
ffl subtype said subtype denoted exists 
ffl shifting said shifting equivalent denoted temporal type finer temporal type say coarser consider intuitive meaning properties relationships 
finer relationship formalizes notion finer partitions absolute time 
example hour finer day turn finer month 
definition relation reflexive temporal type furthermore finer relation obviously transitive 
restrictions antisymmetric partial order 
imply considering groups relation theta ensures tick exists set ticks covering exactly span time 
example hour groups day 
relation useful example applications attribute values associated time ticks possible obtain value associated tick granularity values associated ticks union covers time 
note imply theta converse hold 
groups relation properties finer relation 
subtype relation intuitively identifies type corresponding subsets ticks type 
example day subtype day 
note implies similar previous relations subtype reflexive transitive 
shifting clearly equivalence relation 
prove interesting formal properties large class temporal type systems imposing restriction pair different types shifting equivalent 
class systems relationships theta antisymmetric relationship partial order 
may total orders example week month incomparable respect theta week finer group subtype month vice versa 
particularly interested finer relationship 
systems enforcing restriction exists unique upper bound set temporal types denoted unique greatest lower bound denoted 
top bottom elements defined follows 


pair temporal types exist unique upper bound lub unique greatest lower bound glb types respect formalize result referring specific temporal type systems obtained choices restrictions illustrated earlier section page 
theorem temporal type system having infinite index restriction lattice respect finer relationship 
proof theorem shows unique glb lub types constructed pair types system 
show granularity systems obtained applying additional restrictions considered closed respect glb lub pair types glb lub general lattice theorem system 
closed granularity system obviously form lattice respect finer relationship 
note system restriction lattice presence shifting equivalent types leads non uniqueness glb lub 
requirement index simply ensures sufficient number values available index ticks glb lub 
theorem granularity system satisfying conditions theorem additional combination restrictions closed ffl combination ffl combination 
easily seen temporal types satisfy restriction true lub glb general lattice theorem satisfy restriction 
system restriction closed 
follows theorem granularity systems definable choices non closed systems enforcing restriction restriction enforcing restriction restriction 
shows systems obtained choices restrictions closed systems lattices 
note additional restrictions ones considered enforced system closed satisfying conditions theorem 
furthermore non closed granularity system form lattice particular construction glbs lubs provided 
examples closed granularity systems 
usefulness lattice structure shown example logical design temporal databases multiple granularities shown section temporal constraint satisfaction 
data conversion dealing temporal types need determine tick temporal type covers tick temporal type example may wish find month interval absolute time includes week interval absolute time 
formally index value temporal types undefined unique index value 
uniqueness guaranteed monotonicity temporal types 
example month second gives month includes second note month second defined month week undefined week falls months 
similarly day day undefined day business day 
note function defined index value example day week week day defined day find week contains 
notation source type left implicit dealing fixed set granularities having distinguished basic type 
direction transformation follows temporal types integer 
define resulting pair identifies consecutive ticks union yields delta delta delta gamma 
function useful finding days month 
theta defined 
worth mentioning tsql assumed calendar subsystem provides similar function gives conversion factor certain target type tick source type 
example function returns days month february 
transformation concerns temporal types 
second kind data conversion involves information attached time ticks 
example register database rainfall amounts day record income year 
desirable obtain rainfall amount month 
information rainfall viewed converted terms month conversion function summation 
proposed framework specifying information conversion studied related query evaluation problems 
temporal constraints granularities temporal reasoning area lot done formalisms express networks constraints algorithms solve related problems consistency minimal network 
section propose extension quantitative temporal constraints incorporate temporal types 
start definition temporal constraint granularity 
simplicity assume second implicit primitive type de functions means second temporal types second theta definition integers temporal type 
called temporal constraint granularity tcg binary relation positive integers defined follows positive integers true satisfies iff dt dt defined dt gamma dt tcg refer integer set fx ng range tcg 
intuitively instants terms seconds satisfies difference integers inclusive ticks exist cover th th seconds respectively 
instants translated terms difference taken 
difference pair instants said satisfy constraint 
example pair satisfies tcg day day 
similarly satisfies tcg gamma hour hour apart order immaterial 
satisfies month month respect important note possible convert tcg second tcg seconds second 
consider day 
instants satisfy constraint fall day 
terms second differ seconds gamma seconds 
second reflect original constraint 
example instant corresponds pm day instant am day satisfy day satisfy second 
networks constraints granularities defined follows definition constraint network granularities directed graph gamma finite set variables theta gamma mapping finite sets tcgs 
intuitively constraint network specifies complex temporal relationship variable represents specific instant example occurrence time event 
set tcgs assigned edge taken conjunction 
tcg set assigned edge instants assigned satisfy tcg 
example shows example constraint network granularities 
week day day hours constraint network granularities 
network involves different granularities business days day business weeks week hours hour 
network example specify pattern events occurrence times assigned variables respectively occur successive business days order occurrences irrelevant ii occurs business days occurrence iii occurs hours second business week constraint network cn practical interest check network consistent 
definition constraint network cn gamma consistent exists assignment set positive integers variables arc pair values assigned respectively satisfies tcg gamma 
determining consistency constraint networks granularities turns difficult problem theorem np hard decide arbitrary constraint network granularities consistent 
proof consists reduction subset sum problem gj 
result holds general definition temporal type basic difficulty consistency checking due fact presence different granularities constraints allows express form disjunction 
consider graph 
month month year month year constraint network implied disjunctive constraint 
relationship dictates event assigned happen month year year months 
likewise event assigned happen month year different year event assigned 
original relationship distance months follows distance months 
approximate solutions consistency minimal network problems consider approximate algorithm consistency checking 
approach consists constraint propagation techniques coupled conversion constraints different granularities 
constraints granularity incrementally refined information original network 
refinement constraint leads empty set admissible values network inconsistent 
algorithm gives approximation usually called minimal network 
intuitively minimal network network having solutions original constraint refined 
require constraints minimal network terms granularities appearing original network 
minimal networks useful tasks deriving solution network comparing networks 
start illustrating methods convert constraints terms different granularities 
conversion constraints essential step approximate algorithm 
conversion constraints different granularities consider problem converting tcg terms logically implied tcg terms 
tcg logically implies tcg pair time instants satisfying tcg satisfy tcg total order granularities uniform ticks minute hour day conversion method trivial fixed conversion factors 
incomparable types week month types gaps day considered conversion complex 
arbitrary tcg granularity possible find logically implied tcg terms example day logically imply day matter 
reason day satisfied events happen day day business day weekend day 
framework allow conversion tcg constraint network cn tcg resulting constraint implied set tcgs cn specifically tcg arc network cn allowed converted long implied cn pair values assigned respectively satisfies belong solution cn satisfies example consider network variables shown 
day day day network illustrate conversion conditions 
clear may convert day day events assigned respectively belong solution structure events occur business day 
guarantee allowed conversions performed constraint network assign variable temporal type obtained greatest lower bound respect finer relation temporal types appearing tcgs involving tcg variables converted terms target temporal type covers span time equal larger span time covered 
span time covered temporal type defined set 
clear conversion performed condition allowed conversion 
example consider constraint network 
day 
constraint day converted terms day temporal type day covers span time includes day 
similarly consider network 
tcg terms hour converted terms day week considering constraints network 
evaluate temporal type obtained hour dropping ticks included business day 
day week cover span time type constraint hour converted terms day week obtaining day week respectively 
practical point view specific representation types chosen glbs effectively computed covered spans time effectively compared 
propose conversion method sufficiently general apply temporal types provided aforementioned condition satisfied 
method functions mindist maxdist 
intuitively mindist denotes minimal distance terms number ticks pairs instants tick mth tick respectively 
example mindist week day minimum distance terms days events occur different business weeks instant friday monday 
definition restricts considered pairs instants instant included second pairs candidate solutions constraint arc restriction improves precision conversion detects inconsistencies 
simplicity examples assume cover span time restriction influence result 
value maxdist corresponding maximum distance 
example maxdist week day maxdist day day 
values functions automatically obtained general infinite temporal types proved tts forms lattice respect finer relation 
note types tts second theta second theta second theta glb second theta lub 
follows second groups glb finite set considered temporal types 
input network cn tcg associated arc target type 
output logically implied tcg undefined 
method step jmj mindist step maxdist step undefined return undefined return mindist min undefined fdt gamma dt dt dt defined dt gamma dt mg maxdist max undefined fdt gamma dt dt dt defined dt gamma dt ng glb types tcgs cn involving node general method conversion constraints computed efficiently involved temporal types periodic practical cases 
computation mindist maxdist involved want check condition appearing specification dt dt defined 
note omitting check leads sound precise conversion 
condition involving appears input description 
ignored guarantees allowed conversion 
observed earlier condition automatically checked certain type specifications example periodic descriptions 
example exploiting periodicity day compute mindist day day maxdist day day assuming cover span time day follows mindist day day div maxdist day day gamma div method imposes input constraint 
limitation constraint gamman gammam expressed 
lower bound negative sufficient consider absolute value treat exactly upper bound reversing sign result 
example gamma week derive upper bound day method 
absolute value gamma derive gamma day implied constraint 
theorem general conversion method correct constraint obtained output implied original network 
application contexts temporal types information relationship pairs types unavailable impractical obtain propose alternative conversion method 
method involves loss precision compared 
cases know relationship temporal type primitive type groups types network second 
give alternative conversion method exploits information 
conversion method uses new functions minsize maxsize mindist prim 
intuitively minsize maxsize denote respectively minimum maximum length consequent ticks expressed ticks primitive type 
example minsize month maxsize month day primitive type 
mindist prim denotes minimal input network cn tcg associated arc primitive type target type 
output logically implied tcg undefined 
method step fr minsize maxsize jmj min gamma fr maxsize mindist prim step min fs minsize maxsize step return return undefined minsize min maxsize max fk minfk delta delta delta gamma delta delta delta gamma gg mindist prim minfd conversion constraints primitive type distance terms ticks primitive type pairs instants tick mth tick respectively 
conversion method returns undefined possible evaluate distance pair instants candidate solution respectively variables steps compute respectively new minimum maximum terms target type 
non negative maximum minimum distances identified constraint terms primitive type maxsize mindist prim respectively 
find distances terms target type 
maximum minimal length minsize group ticks target type want maximize number ticks needed cover distance 
analogously maximal length maxsize computation minimum value 
similar general method lower bound negative consider absolute value treat exactly upper bound reversing sign result 
theorem conversion method correct constraint obtained output implied original network 
assume procedure implementing method access table containing values minsize maxsize mindist prim considered type positive integer limited constant 
general values available granularities automatically derived 
values available certain approximated linear combination known values shown 
implementation condition main statement turns difficult particular type specification condition ignored resulting sound precise conversion 
intermediate granularity primitive type conversion introduces approximation information structure source granularity lost spans time corresponding upper bounds original constraint computed terms primitive type 
example consider conversion tcg month tcg terms hour second primitive type 
minimum span time cover instants month apart seconds second month second 
mindist prim month seconds contiguous 
obtained value lose structure month fact seconds overlapping months 
conversion method looks minimum number ticks target type hour covering seconds answer obviously corresponding distance ticks 
method returns tcg gamma hour implied original tcg indicated theorem 
tightest constraint conversion give 
direct conversion method suffer problem intermediate temporal type return gamma hour 
constraint propagation algorithm provide constraint propagation algorithm obtain approximate solutions consistency minimal network problems 
input network cn gamma set temporal types appearing gamma 
output inconsistent network cn solutions cn tcg cn tighter tcg cn arc method initialization gamma gamma contains tcg terms gamma gamma 
step apply path consistency discarding resulting tcg gamma range 
step tcg perform conversion terms allowed applying conversion methods illustrated discarding resulting tcg gamma range 
allowed conversion returns undefined gamma 
insert resulting tcg gamma intersection range values tcg gamma 
intersection empty gamma 
step false appears gamma return inconsistent 
new tcgs derived goto step return cn gamma gamma gamma constraint propagation algorithm algorithm consists initialization followed step main loop 
step establishes termination condition 
initialization partitions tcgs cn groups group having tcgs terms temporal type 
propagation constraints problem known simple temporal problem dmp 
step main loop application path consistency algorithm path consistency simple technique eliminates inconsistency subnetwork involving variables 
intuitively variables constraint network constraints arcs composed result intersected constraint direct arc 
empty intersections denote inconsistency 
algorithm applies appropriate strategy consider subnetworks size 
path consistency general networks detects local inconsistencies proved complete consistency simple temporal problem 
networks inconsistent path consistency step detect 
constraints expressed granularity imply constraints granularities step tries convert tcgs add derived constraints corresponding groups 
pair temporal types conversion allowed tcg converted terms added tcg arc single tcg having range values intersection ranges allowed tcgs kept steps path consistency conversion repeated new tcgs appear group 
inconsistency detected ways allowed conversion returns undefined means tcg input satisfied network inconsistent 
second intersection derived tcg original previously derived tcg variables empty assignment satisfy constraints corresponding arc network inconsistent 
example consider application algorithm constraint network 
iteration step derives constraint gamma gamma terms day 
constraints day converted terms week hour generating new constraints 
remaining original constraints gamma hour gamma week converted terms granularities 
result step second iteration shown omit constraints terms hour 
note point constraints converted terms granularities constraint propagation applied single granularity network refinement possible 
considering global set constraints refinement obtained 
conversion gamma gamma gamma week gamma gamma gamma day performed algorithm step second iteration allows refine constraint third week week week week week week day day day day day day intermediate step propagation algorithm 
iteration modify constraint algorithm terminates 
shows final result terms constraints day 
constraints week omit constraints hour 
day day day day day day constraints day returned algorithm 
say algorithm sound assignment satisfying constraint network cn gamma satisfies cn gamma returned algorithm 
algorithm returns inconsistent assignment satisfying cn theorem approximate propagation algorithm sound terminates 
time taken convert constraint number variables network jm number temporal types appearing explicit constraints maximum cardinality ranges tcgs original derived conversion 
algorithm requires worst case time jm 
important interpret upper bound complexity algorithm isolating components due different steps algorithm 
step path consistency takes time jm step conversion takes time jm 
note practice time considered constant factor 
complexity expressed cn jm number iterations 
jm constraints expressed granularity problem stp single iteration sufficient algorithm takes time 
jm give upper bound number iterations jmj maximum cardinality ranges tcgs original derived conversion 
bound assumes worst case iteration constraint tightened unit 
bound consider original constraints new constraints derived conversion participate successive iterations 
example number restrictions month granularity day appears network constraint day generated number potential restrictions 
believe bound substantially improved 
aforementioned algorithm approximate propagation main reasons 
types converted types day week general conversions involve loss precision 
second set temporal types appear constraint network 
algorithm may derive tighter constraints sense logical implication additional temporal types 
note np hardness consistency checking implies complete sound algorithm constraint propagation constraint networks polynomial 
complete algorithm derives minimal network 
polynomial algorithm existed consistency checking polynomial tightest constraint pair variables inconsistent constraint network satisfiable 
related formalization time granularity system probably cr 
system proposed cr time granularity systems proposed literature dea quite restrictive 
example systems impose total order granularities 
restrictions usually motivated useful formal computational properties achieved 
dea time granularity system introduced author shows exploited expedite operations large temporal databases 
particular emphasis temporal reasoning tasks large repositories event descriptions temporally related 
granularity system called hierarchical partitioning scheme quite restrictive easily characterized terms general model absolute time index set respectively reals integers restrictions structure ticks apply system addition restrictions relationships types see page 
result set temporal types totally ordered finer relation covering time line 
specification timestamps distances events allows different granularities applying temporal reasoning algorithms value translated terms basic granularity 
propose consider natural semantics constraints granularities supported different algorithms 
proposal temporal extension sql tsql includes substantial part dealing time granularity tsql 
formal description intended granularity system clear general system allowing example non contiguous ticks incomparable types 
terms formal model characterized finite subset integers absolute time index set restriction structure ticks 
relevant time granularities done areas logic programming real time system specification 
papers emphasis embedding notions logical formalism 
granularity system proposed described framework exactly discussed dea extra restriction equal size granules granularity 
slightly generalized version system eliminating restriction ticks restriction type relationships additional restrictions type relationships specified logic axioms 
respect constraint propagation related 
address problem reasoning quantitative temporal constraints multiple granularities considers temporal spatial aspects granularity limited qualitative constraints 
papers address problem representation implementation calendars granularities ns tsql css 
set granularities expressible proposals characterized representation language 
see complementary 
real system treat subset temporal types defined finite representations 
languages application domain specify temporal types implement operations 
illustrated general framework defining time granularities extends proposed granularity systems 
furthermore introduced notion constraint network time granularities showed constraint network semantical computational differences respect similar constraint networks time granularities single granularity 
discuss type constraints related granularities temporal functional dependencies granularities 
intuitively temporal functional dependency specifies certain attributes change values tick certain temporal type 
example teaching assistant course change semester 
concentrated elimination redundancies introduced constraints temporal relational model 
applied proposed framework time granularities areas federated temporal databases logical design temporal databases multiple granularities querying temporal databases semantic assumptions mining large event sequences complex temporal relationships 
particular constraint propagation network multiple granularities significantly prune search space data mining process 
working prototypes developed applications just mentioned 
refer interested reader cited papers 
regarding temporal constraints granularities constraint propagation algorithm applied artificial intelligence application areas temporal constraint satisfaction algorithms employed example scheduling planning 
proposals enhancing deductive power temporal databases exploiting known constraint propagation techniques 
investigate research direction believe methods proposed intuitive extension support multiple granularities 
respect temporal logics interesting topic study metric temporal logics mon extending formalisms deal general models granularity 
bettini wang bertino jajodia semantic assumptions query evaluation temporal databases proc 
acm sigmod san jose ca pp 

bettini wang jajodia testing complex temporal relationships involving multiple granularities application data mining proc 
acm pods montreal canada pp 

console pernici extending temporal relational databases deal imprecise qualitative temporal information proc 
int 
workshop temporal databases zurich switzerland springer verlag pp 

montanari san pietro embedding time granularity logical specification language synchronous real time systems science computer programming pp 

cr clifford rao simple general structure temporal domains proc 
conference temporal aspects information systems france pp 

css chandra segev stonebraker implementing calendars temporal rules generation databases proc 
icde pp 

dea dean artificial intelligence temporal hierarchies efficiently maintain large temporal databases jacm pp 

dmp dechter meiri pearl temporal constraint networks artificial intelligence pp 

tsql tsql temporal query language snodgrass ed kluwer academic pub 
euzenat algebraic approach granularity qualitative space time representation proc 
ijcai san mateo ca pp 

gj garey johnson computers intractability guide theory np completeness freeman 
hobbs granularity proc 
ijcai los angeles ca pp 

mcdonald foster representation collections temporal intervals proc 
aaai pp 

montanari dealing time granularity event calculus proc 
int 
conf 
fifth generation computer systems tokyo japan pp 

mon montanari 
metric layered temporal logic time granularity illc dissertation series university amsterdam 
ns efficient symbolic representation periodic time proc 
cikm baltimore pp 

wang bettini brodsky jajodia logical design temporal databases multiple granularities acm tods 
wang jajodia subrahmanian temporal modules approach federated temporal databases information sciences pp 

proofs proof theorem prove pair temporal types exist unique upper bound lub unique greatest lower bound glb 
doing introduce notation non empty sets elements holds number strictly number 
formally 
say set non empty sets elements monotonic pair sets easily seen temporal type viewed monotonic set non empty sets elements hand monotonic set non empty sets elements element indexed different preserving order imposed monotonicity call property viewed temporal type set indexed indexing 
temporal types sets corresponding respectively discussed 
glb fs monotonic indexable glb monotonic indexable easily seen type corresponding glb unique glb 
consider lub 
fs jg ub fs sg 
intuitively consists sets contain tick ub consists sets tick entirely entirely lub fs ub ub ae sg clearly lub ub steps suffice show unique upper bound prove set lub monotonic indexable exists corresponds lub establish prove sets lub disjoint 
sets lub prove implies fact lub implies 
know 
follows condition defining ub analogously consider particular relation non empty set elements true iff 
denote set obtained recursively applying step gamma union ticks gamma 
show proving ub ii ii imply ii contradict fact lub consider 

arbitrary tick subset true 
follows 
ub consider ii 
know consider 
assume exists 
follows 
addition means ub contradicts fact lub continuing induction reasoning symmetry conclude step assume lub monotonic 
lub exists fxg fxg exists fxg fxg 
case shown exist definition ub 
disjoint 
contradicts fact fxg fxg 
case leads contradiction symmetry 
concludes proof lub trivial 
construction tick ub contains set equal including tick 
minimization lub takes smallest sets 
type corresponding lub coarser suppose type coarser show consider 
lub follows contains tick 
lub proof 
exists 
show 
suppose 
definition exists integer gamma 
exists gamma gamma 
definition gamma gamma gamma 
gamma 
exists 
derive contradiction temporal type monotonic 
proof theorem note temporal type system restriction closed 
types restricted comparable glb lub types 
glb lub restrictions independently show temporal types satisfy restriction glb lub constructed proof theorem satisfy restriction 
consider restriction says ticks allowed gaps 
construction glb tick glb obtained intersection tick tick ticks gaps consists sequence consecutive instants intersection sequence consecutive instants 
glb satisfies restriction 
consider lub 
construction lub easy see tick lub union sets infinite corresponding ticks tick gap contains consecutive instants holds union sets 
consider restriction states ticks cover absolute time 
set ticks cover absolute time set ticks glb obtained intersection corresponding sets obviously covers absolute time 
definition lub tick contained tick lub covers absolute time lub 
conclude system having restrictions closed additional restrictions applied 
consider system restrictions 
note restriction superseded type covers absolute time contiguous ticks system closed 
note shown earlier system restriction closed system restrictions closed 
proof theorem set constraints assignment variables satisfies constraints 
show answering question hard solving subset sum problem knapsack variant 
consider set positive integers subset sum problem consists finding subset sum numbers instance problem construct instance problem follows consider granularities month defined grouping consecutive ticks month single tick 
create constraints month 
month 
add set constraints purpose rule values gamma constraints 
add month gamma gamma month month 
gamma gamma month 
set constraints implies disjunctions month month 
similar 
assignment satisfy set constraints specified distance value set indices value different determines subset fn solution subset sum problem 
easy show assignment subset exist 
subset sum problem np hard transformation consistency problem done polynomial time determining consistency np hard 
proof theorem assume conversion method gives output tcg input tcg associated arc network cn target type satisfying conditions specified method 
suppose proof contradiction implied network cn follows exist values assigned respectively belong solution network satisfying constraint satisfying constraint variables 
definition constraint satisfied hold dxe dye defined dye gamma dxe dye gamma dxe suppose holds particular dxe defined 
definition de means exist 
part solution network positive integer condition imposed method input guarantees leading contradiction 
arguments apply dye suppose holds 
dye computation method max fr dt dt defined dt gamma dt minfr dt gamma dt gg 
clearly dxe dye defined part solution 
dye gamma dxe satisfies tcg minfr dye gamma dxe max 
contradiction assumed suppose holds 
dye gamma dxe consider case 
computation method min fs dt dt defined dt gamma dt dt gamma dt gg 
clearly dxe dye defined part solution 
dye gamma dxe satisfies tcg dye gamma dxe min 
contradiction assumed fact interpreted distance terms ticks greater absolute value bound method 
violation bound corresponding proof case equivalent point values exchanged reversing sign bounds 
conversion method treats negative lower bound positive upper bound reversing sign result 
proof theorem assume conversion method gives output tcg input tcg associated arc network cn target type satisfying conditions specified method 
suppose proof contradiction implied network cn follows exist values assigned respectively belong solution network satisfying constraint satisfying constraint definition constraint satisfied facts hold dxe dye defined dye gamma dxe dye gamma dxe suppose holds particular dxe defined 
definition de means exist 
part solution network positive integer condition imposed conversion method input guarantees leading contradiction 
arguments apply dye suppose holds 
dye gamma dxe computation conversion method minsize maxsize 
definition minsize maxsize means ticks sufficient cover maximal span time covered ticks constraint satisfied dye gamma dxe contained ticks maximal distance 
minsize maxsize conclude covered ticks distance ticks containing greater contradicts dye gamma dxe suppose holds 
dye gamma dxe consider case 
computation method min gamma fr maxsize mindist min 
follows maxsize mindist constraint satisfied dye gamma dxe mindist mindist dye gamma dxe maxsize dye gamma dxe mindist dye gamma dxe 
definition maxsize mindist easy show mindist dt gamma dt gamma maxsize dt gamma dt values temporal types provided necessary de functions defined values 
applying inequalities data easily derive gamma maxsize dye gamma dxe gamma mindist dye gamma dxe 
results gamma gamma contradiction 
fact interpreted distance terms ticks greater absolute value bound conversion method 
violation bound corresponding proof case equivalent point values exchanged reversing sign bounds 
conversion method treats negative lower bound positive upper bound reversing sign result 
proof theorem soundness 
algorithm sound assignment satisfying input network cn gamma satisfies cn gamma returned algorithm 
algorithm returns inconsistent assignment satisfying cn consider case algorithm returns network cn soundness case trivial path consistency known sound proved output conversion methods implied cn intersecting tcg obtained conversion original previously derived tcg granularity arc sound step 
consider case algorithm returns inconsistent 
implies gamma arc due intersection ranges tcgs granularity arc empty undefined returned allowed conversion 
case trivially implies input network inconsistent implies assignment variables satisfying tcgs originally logically implied cn case need consider specific conversion method 
consider general method illustrated 
undefined returned method functions mindist maxdist undefined 
mindist undefined fdt gamma dt dt dt defined dt gamma dt mg 
note conversion allowed condition target type guarantees dt dt defined dt dt defined 
pair instants dt dt defined dt gamma dt means pair satisfying input tcg arc dt dt defined 
glbs temporal types tcgs involving respectively cn solution cn assign instants covered respectively input tcg original constraint logically implied conclude cn inconsistent 
similar argument applies maxdist 
consider alternative conversion method 
method undefined returned positive integers 
pair satisfying input tcg arc exists dt dt condition holds 
glbs temporal types tcgs involving respectively cn solution cn assign instants covered respectively conclude input tcg original constraint logically implied method returns undefined condition holds cn inconsistent 
termination 
step path consistency stp known terminate 
step trivially terminates 
step critical part show infinitely iterate steps 
allow gamma explicit tcgs discard derived tcg containing gamma explicit implicit constraint variables integer values 
consider gamma number tcgs iteration respectively values range tcg easily seen monotonically decreasing iteration negative means algorithm terminates finite number iterations 
complexity 
step worst case takes time delta jm number variables nodes graph jm number temporal types appearing explicit constraints 
step worst case takes time delta delta jm constant time required translate constraint granularity 
combination takes time delta jm 
easily seen steps reduce range values constraints 
worst case iteration steps constraint range reduced 
constraint reduced unit terms granularity upper bound number restrictions maximum cardinality ranges tcgs original derived conversion 
upper bound number iterations delta jmj delta upper bound number restrictions constraint 
conclude worst case complexity delta jm delta 

