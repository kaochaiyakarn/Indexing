globus metacomputing infrastructure toolkit ian foster carl kesselman www globus org emerging high performance applications require ability exploit diverse geographically distributed resources 
applications high speed networks integrate supercomputers large databases archival storage devices advanced visualization devices scientific instruments form networked virtual supercomputers 
physical infrastructure build systems widespread heterogeneous dynamic nature metacomputing environment poses new challenges developers system software parallel tools applications 
article introduce globus system developing address challenges 
globus system intended achieve vertically integrated treatment application middleware network 
low level toolkit provides basic mechanisms communication authentication network information data access 
mechanisms construct various higher level metacomputing services parallel programming tools schedulers 
long term goal build adaptive wide area resource environment aware integrated set higher level services enable applications adapt heterogeneous dynamically changing metacomputing environments 
preliminary versions globus components deployed successfully part way networking experiment 
new classes high performance applications developed require unique capabilities available single computer 
applications enabled construction networked virtual supercomputers execution environments high speed networks connect supercomputers databases scientific instruments advanced display devices located geographically distributed sites 
principle networked virtual supercomputers increase accessibility supercomputing capabilities enable assembly unique capabilities created cost ective manner 
experience high speed networking testbeds demonstrated convincingly applications considerable scientific economic importance benefit metacomputing capabilities 
example way networking experiment connected supercomputers resources di erent sites north america saw groups develop applications areas diverse large scale scientific simulation collaborative engineering supercomputer enhanced scientific instruments 
mathematics computer science division argonne national laboratory foster mcs anl gov information sciences institute university southern california carl isi edu common distributed parallel systems di er architectures important ways 
distributed system networked supercomputer integrate resources widely varying capabilities connected potentially unreliable networks located di erent administrative domains 
need high performance require programming models interfaces radically di erent distributed systems 
parallel computing metacomputing applications need schedule communications carefully meet performance requirements 
heterogeneous dynamic nature metacomputing systems limits applicability current parallel computing tools techniques 
considerations suggest metacomputing build distributed parallel software technologies requires significant advances mechanisms techniques tools 
globus project intended accelerate advances 
phase developing deploying metacomputing infrastructure toolkit providing basic capabilities interfaces areas communication information resource location resource scheduling authentication data access 
toolkit components define metacomputing machine constructed range alternative infrastructures services applications 
building parallel programming tools resource discovery scheduling services groups working areas 
long term goal globus project address problems configuration performance optimization metacomputing environments 
challenging issues inherent complexity metacomputing systems fact resources identified runtime dynamic nature resource characteristics 
believe successful applications able configure fit execution environment delivered metacomputing system adapt behavior subsequent changes resource characteristics 
investigating design higherlevel services layered globus toolkit enable construction adaptive applications 
refer collectively services forming adaptive wide area resource environment aware 
rest article follows 
section introduce general characteristics metacomputing systems requirements metacomputing infrastructure 
section describe globus architecture techniques support resource aware applications 
section describe major toolkit components 
sections describe higher level services constructed toolkit testbeds deployed toolkit components 
conclude section discussion current system status plans 
metacomputing term denote networked virtual supercomputer constructed dynamically geographically distributed resources linked high speed networks 
illustrates example system somewhat simplified version architecture way real time image processing data stream meteorological satellite 
application data passed satellite downlink cloud detection program running remote supercomputer graphics computer rendering 
metacomputing mainstream applications distributed computing moti resource location 
data access rio globus toolkit modules globus metacomputing machine authentication 
meta computing testbeds heterogeneous geographically distributed devices networks higher level services nexus globus services aware information service soft scheduler mpi cc 
services actual planned apples corba hpc legion 
fig 

globus toolkit need access resources located single computer system 
frequently driving force economic resources question example supercomputers expensive replicated 
alternatively application may require resources normally located particular configuration required rarely example collaborative engineering environment connects virtual reality systems design databases supercomputers required particular engineering problem 
certain unique resources specialized databases people replicated 
case ability construct networked virtual supercomputers provide qualitatively new capabilities enable new approaches problem solving 
metacomputing applications scientists engineers just explore new applications enabled networked supercomputing 
way experiment identified significant application classes 

desktop supercomputing 
applications couple high graphics capabilities remote supercomputers databases 
coupling connects users tightly computing capabilities time achieving distance independence resources developers users 

smart instruments 
applications connect users instruments telescopes satellite coupled remote supercomputers 
computational enhancement enable processing instrument output interactive steering 
fig 

shows networked supercomputing system way experiment real time analysis data meteorological satellite 
satellite downlink located el segundo california supercomputer argonne illinois visualization engine graphics device los angeles 

collaborative environments 
third set applications couple multiple virtual environments users di erent locations interact supercomputer simulations 

distributed supercomputing 
applications couple multiple computers tackle problems large single computer benefit executing di erent problem components di erent computer architectures 
distinguish scheduled unscheduled modes operation 
scheduled mode resources acquired dedicated application 
unscheduled mode applications idle resources may reclaimed needed condor system supports mode operation 
general scheduled mode required tightly coupled simulations particularly time constraints unscheduled mode appropriate loosely coupled applications adapt time varying resources 
characteristics way networking testbeds provided intriguing hints metacomputing systems may look may definition application systems remain research problems 
general observations characteristics see 
scale need selection 
date metacomputing experiments performed relatively small testbeds site way largest 
expect deal larger collections resources selected particular applications criteria connectivity cost security reliability 
heterogeneity multiple levels 
computing resources construct virtual supercomputers networks connect resources highly heterogeneous 
heterogeneity arise multiple levels ranging physical devices system software scheduling usage policies 
unpredictable structure 
traditionally high performance applications developed single class system known characteristics particular computer 
contrast metacomputing applications required execute wide range environments constructed dynamically available resources 
geographical distribution complexity factors di cult determine system characteristics network bandwidth latency priori 
dynamic unpredictable behavior 
traditional high performance systems scheduling disciplines space sharing gang scheduling provide exclusive predictable access processors networks 
metacomputing environments resources especially networks shared 
consequence sharing behavior performance vary time 
example wide area networks built internet protocol suite network characteristics latency bandwidth jitter may vary tra rerouted 
large scale may su er network resource failures 
general possible guarantee minimum quality service requirements 
multiple administrative domains 
resources metacomputing applications owned administered single entity 
need deal multiple administrative entities complicates challenging network security problem di erent entities may di erent authentication mechanisms authorization schemes access policies 
need execute user supplied code di erent sites introduces additional concerns 
fundamental issues need mechanisms allow applications obtain real time information system structure state information configuration decisions notified information changes 
required information include network activity available network interfaces processor characteristics authentication mechanisms 
decision processes require complex combinations data order achieve cient configuration complex networked systems 
globus metacomputing infrastructure toolkit number pioneering orts produced useful services metacomputing application developer 
example parallel virtual machine pvm message passing interface mpi provide machine independent communication layer condor provides uniform view processor resources legion builds system components distributed object oriented model andrew file system afs provides uniform view file resources 
systems proven ective large scale application experiments 
goal globus project compete related orts provide basic infrastructure construct portable highperformance implementations range services 
focus development low level mechanisms implement higher level services techniques allow services observe guide operation mechanisms 
successful approach reduce complexity improve quality metacomputing software allowing single low level infrastructure purposes providing solutions configuration problem metacomputing systems 
demonstrate globus approach workable show possible single set low level mechanisms construct cient implementations diverse services multiple platforms 
report initial successes communication area nexus communication library construct highperformance implementations diverse parallel programming interfaces 
certainly conclusive demonstration final verdict globus approach await results research 
introduce globus toolkit describe mechanisms allow higher level services observe guide operation toolkit components 
globus toolkit globus toolkit comprises set modules 
module defines interface higher level services invoke module mechanisms provides implementation uses appropriate low level operations implement mechanisms different environments 
currently identified toolkit modules follows 
descriptions focus requirements sections address implementation status 
resource location allocation 
component provides mechanisms expressing application resource requirements identifying resources meet requirements scheduling resources located 
resource location mechanisms required applications general expected know exact location required resources particularly load resource availability vary 
resource allocation involves scheduling resource performing initialization required subsequent process creation data access situations example supercomputers location allocation performed single step 
communications 
component provides basic communication mechanisms 
mechanisms permit cient implementation wide range communication methods including message passing remote procedure call distributed shared memory stream multicast 
mechanisms cognizant network quality service parameters jitter reliability latency bandwidth 
unified resource information service 
component provides uniform mechanism obtaining real time information structure status 
mechanism allow components post receive information 
support scoping access control required 
authentication interface 
component provides basic authentication mechanisms validate identity users resources 
mechanisms provide building blocks security services authorization data security need know identity parties engaged operation 
process creation 
component initiate computation resource located allocated 
task includes setting executables creating execution environment starting executable passing arguments integrating new process rest computation managing termination process shutdown 
data access 
component responsible providing high speed remote access persistent storage files 
data resources databases may accessed distributed database technology common object request broker architecture corba 
globus data access module addresses problem achieving high performance accessing parallel file systems network enabled devices high performance storage system hpss 
various globus toolkit modules thought defining metacomputing virtual machine 
definition virtual machine simplifies application development enhances portability allowing programmers think geographically distributed heterogeneous collections resources unified entities 
support resource aware services applications metacomputing applications need operate networking computing resources close maximum performance 
metacomputing environments allow programmers observe di erences system resource characteristics guide resources implement higher level services 
achieving goals compromising portability significant challenge designer metacomputing software 
globus communication module illustrate issues 
module select call communication functions low level mechanisms 
local area network communication performed tcp ip parallel computer specialized high performance protocols typically er higher bandwidth lower latencies 
wide area environment specialized atm protocols cient 
ability manage protocol parameters tcp packet size network quality service complicates picture 
choice low level mechanism particular communication nontrivial problem significant implications application performance 
globus toolkit modules address problem providing interfaces allow selection process exposed guided higher level tools applications 
interfaces provide rule selection resource property inquiry notification mechanisms 
rule selection 
globus modules identify selection points choices alternatives resources parameter values 
associated selection point default selection rule provided module developer tcp packet size tcp atm 
rule replacement mechanism allows higher level services specify alternative strategies tcp packet size specialized atm protocols 
resource property inquiry 
information provided unified information service section guide selection processes globus modules applications modules 
example user provide rule states atm interface load low internet information network load guide resource selection 
sp sp sp ep ep fig 

nexus communication mechanisms 
shows contexts address spaces communication links 
context endpoints contexts 
notification 
notification mechanism allows higher level service application specify constraints quality service delivered globus service name call back function invoked constraints violated 
mechanism example switch networks loaded 
higher level services applications globus selection inquiry notification mechanisms configure computations ciently available resources adapt behavior quantity quality available resources changes dynamically execution 
example consider application performs computation computer transfers data wide area network visualization remote sites 
startup time application determine available computational power network capacity configure computational communication structures appropriately decide compression data 
execution notification mechanisms allow adapt changes network quality service 
term adaptive wide area resource environment aware denote set application interfaces higher level services adaptation policies enable specific classes applications exploit metacomputing environment ciently 
investigating aware components applications anticipate developing aware toolkits di erent classes metacomputing application 
globus toolkit components describe detail globus communications information service authentication data access services 
case outline component maps di erent implementations implement di erent higher level services supports development aware services applications 
communications globus communications module nexus communication library 
nexus defines basic abstractions nodes contexts threads communication links remote service requests 
nexus functions manipulate abstractions constitute globus communication interface 
interface extensively globus modules construct various higher level services including parallel programming tools section 
active messages fast messages systems similarities goals approach significant di erences 
nexus programs bind communication endpoints form communication links 
multiple bound endpoint incoming communications interleaved manner messages sent node message passing system 
bound multiple endpoints communication results multicast operation 
copied processors causing new communication links created mirror links associated original 
support copying means global names objects 
names communicated distributed system 
communication link supports single communication operation asynchronous remote service request rsr 
rsr applied providing procedure name data bu er 
endpoint linked rsr transfers data bu er address space endpoint located remotely invokes specified procedure passing endpoint data bu er arguments 
local address associated endpoint case associated endpoint thought global pointers address 
nexus interface implementation support rule selection section methods protocol compression method quality service perform communication 
di erent communication methods associated di erent communication links selection rules determining method new link established 
mechanisms support multiple communication protocols selective secure communication heterogeneous environments 
metacomputing directory service noted metacomputing environments depend critically access information underlying networked supercomputing system 
required information include 
configuration details resources amount memory cpu speed number nodes parallel computer number type network interfaces available 
instantaneous performance information point point network latency available network bandwidth cpu load 
application specific information memory requirements program structures ective previous runs 
di erent data items di erent scopes interest security requirements information may potentially required globally system component 
information may obtained multiple sources example standard information services network information service nis simple network management protocol snmp specialized services network weather service external sources system manager application 
globus defines single unified access mechanism wide range information called metacomputing directory service mds 
building data representation application programming interface defined lightweight directory access protocol ldap mds defines framework represented information interest distributed computing applications 
information structured set entries entry comprises zero attribute value pairs 
type entry called object class specifies mandatory optional attributes see 
object class object class subclass subclass top contain contain hostname cis administrator dn type cis vendor cis may contain model cis manager dn cis provider dn cis technician dn description cis may contain documentation cis dn cis cis cis cis fig 

simplified versions mds object classes mds information maintained conventional ldap servers 
performance functionality requirements metacomputing applications motivate number extensions 
proxy mechanism supports integration data services snmp nis allows remote access 
currently investigating approaches caching replication definition notification interface allow higher level services applications request notifications specified conditions true 
authentication methods initial version globus authentication module supported password unix rsh secure socket layer authentication 
increase degree abstraction toolkit interface moving generic security system gss 
gss defines standard procedure api obtaining credentials passwords certificates mutual authentication client server message oriented encryption decryption 
gss independent particular security mechanism layered top di erent security methods kerberos ssl 
gss altered extended meet requirements metacomputing environments 
metacomputing system may di erent authentication mechanisms di erent situations di erent purposes require gss implementation supports concurrent di erent security mechanisms 
addition inquiry selection functions needed higher level services implementing specific security policies select available low level security mechanisms 
local file systems mpi io application programs rio server local file systems fig 

rio mechanisms high performance access remote file systems data access services services provide metacomputing applications access persistent data face stringent performance requirements support access data located multiple administrative domains 
distributed file systems network file system distributed file system address remote access extent designed high performance applications 
parallel file systems libraries designed performance distributed execution 
address problems globus data access module defines primitives provide remote access parallel file systems 
remote rio interface device interface 
defines interface opening closing reading writing parallel files 
define semantics caching file replication parallel file descriptor semantics 
popular systems implemented ciently 
rio extends adding transparent remote access global naming url naming scheme 
rio remote access features nexus mechanisms 
higher level services preceding section described core interfaces services provided globus toolkit 
interfaces intended application 
intended construct higher level policy components 
policy components serve function middleware higher level components constructed create application level interfaces 
describe middleware components 
parallel programming interfaces numerous parallel programming interfaces adapted globus authentication process creation communication services allowing programmers develop metacomputing applications familiar tools 
interfaces include complete implementation mpi tools layered top mpi high performance fortran systems compositional parallel extension fortran task parallel fortran version perl scripting language extended remote remote procedure call mechanisms java class library supports remote procedure calls 
say words globus implementation mpi 
nexus device supports device interface mpich implementation mpi 
device uses nexus implement basic data transfer operations required mpi higher level mpi functionality transfers unchanged mpich 
initial mpi nexus implementation overhead zero length message sec noted ibm sp power processors raw mpich zero length message cost sec raw nexus rsr cost sec overhead larger messages insignificant 
redesign nexus mpich device interface succeeded eliminating overhead 
addition nexus globus implementation mpi uses globus mechanisms authentication process startup 
components su ciently integrated way user allocate heterogeneous collection resources start program simply typing 
covers course globus mechanisms select appropriate authentication process creation communication mechanisms 
unified certificate authentication globus authentication interface implement range di erent security policies 
currently investigating policy defines global public key authentication space users resources 
provide centralized authority defines system wide names accounts users resources 
names allow application single user id password resources 
permit application verify identity requested resources 
note policy address authorization resources usual mechanisms determine users access 
practical large scale open environments centralized authority identify users resources appropriate limited scale testbed environments way gusto see 
approach significant advantage implemented easily current certificate authentication protocols provided secure socket library ssl 
note names certificates issued centralized certificate authority authentication users services involves agents authenticated require interaction issuing authority 
longer term authentication authorization schemes address requirements larger dynamic heterogeneous communities trust relationships span multiple administrative domains irregular selective 
member organizations trusting specific members may competitors 
members may feel need control trust relationships explicitly means fewer community assets available may stimulate evolution sub communities set trust authorization relationships 
community members willing delegate members ability extend relationships behalf may fully enjoy benefits membership greater community 
certificate policy extended support limited forms trust delegation 
globus resource certificates sites multiple resources users 
sites turn set local certificate authority signs certificates issues certificate issued globus authority 
situation acceptable user resource trusts administration site issuing globus signed certificate 
globus testbeds experiences referred way experiment number globus components deployed part soft software environment 
components included nexus communication library kerberos authentication process creation mechanism centralized scheduler compute resources 
inadequate number respects scheduling network resources experiment demonstrate advantages globus approach providing basic mechanisms 
applications developed variety parallel tools mpi cc ported way environment adapting tools globus mechanisms authentication process creation communication 
globus enforced particular parallel programming interface considerable ort required adapt existing applications interface 
currently working high performance computing community define additional testbeds 
describe just globus ubiquitous supercomputing testbed gusto 
gusto intended initially computer science application testbed meaning initial development focus deploying evaluating basic mechanisms authentication scheduling communication information infrastructure 
respect complements orts way focus applications 
gusto intended span approximately fifteen sites encompassing number supercomputers ibm sp silicon graphics power challenge workstations 
basic connectivity internet machines connected oc mb sec atm networks 
eventually expect gusto sites accessible national science foundation oc vbns network 
authentication uniform certificate mechanism described 
initial information service provided information server maintains information resource configuration current network characteristics 
information updated dynamically providing accurate view system configuration available soft 
globus project attacking metacomputing software problem bottom developing basic mechanisms implement variety higher level services 
communication resource location resource allocation information authentication data access services identified considerable progress constructing quality implementations 
definition development application evaluation refinement components ongoing processes expect proceed years 
hope involve metacomputing community process adapting relevant higher level services application level scheduling performance steering object libraries globus mecha nisms participating construction additional testbeds gusto 
globus project addressing configuration problem metacomputing systems goal producing adaptive wide area resource environment supports construction adaptive services applications 
introduced selection information notification mechanisms defined globus component interfaces mechanisms guide configuration process 
preliminary experiments dynamic communication selection suggest configuration mechanisms considerable value 
summary list areas believe globus project contributions hope see considerable progress definition core metacomputing system architecture range alternative metacomputing environments built 
development framework allows applications respond dynamic behaviors underlying metacomputing environment definition evaluation various adaptation policies 
demonstration testbeds way gusto useful higherlevel services layered ectively top interfaces defined globus toolkit automatic configuration mechanisms enhance portability performance 
acknowledgments gratefully acknowledge contributions steve tuecke jonathan geisler craig lee steve schwab warren smith john design implementation globus components 
pleasure acknowledge contributions tom defanti rick stevens participants way project 
supported national science foundation center research parallel computation contract ccr defense advanced research projects agency contract mathematical information computational sciences division subprogram ce computational technology research department energy contract eng 
berman wolski schopf shao application level scheduling distributed heterogeneous networks proceedings supercomputing acm press 
catlett metacomputing communications acm pp 

chandy kesselman cc declarative concurrent object oriented programming notation research directions object oriented programming mit press pp 

defanti foster papka stevens overview way wide area visual supercomputing international journal supercomputer applications pp 

freitag heath herzog remote engineering tools design pollution control systems commercial international journal supercomputer applications pp 

papka stevens sharing visualization experiences remote virtual environments international workshop high performance computing computer graphics visualization springer verlag pp 

fitzgerald foster kesselman von laszewski smith tuecke directory service configuring high performance distributed computations preprint mathematics computer science division argonne national laboratory argonne ill 
foster geisler kesselman tuecke managing multiple communication methods high performance networked computing systems journal parallel distributed computing 
appear 
foster geisler smith tuecke software infrastructure way high performance distributed computing experiment proc 
th ieee symp 
high performance distributed computing ieee computer society press pp 

foster geisler tuecke mpi way wide area multimethod implementation message passing interface proceedings mpi developers conference ieee computer society press pp 

foster karonis kesselman koenig tuecke secure communications infrastructure high performance distributed computing preprint anl mcs mathematics computer science division argonne national laboratory argonne ill 
foster kesselman tuecke nexus approach integrating multithreading communication journal parallel distributed computing pp 

geist beguelin dongarra jiang manchek sunderam pvm parallel virtual machine user guide tutorial network parallel computing mit press 
grimshaw wolf legion view feet proc 
th ieee symp 
high performance distributed computing ieee computer society press pp 

grimshaw wulf french weaver reynolds jr legion logical step nationwide virtual computer tech 
rep cs department computer science university virginia 
gropp lusk skjellum high performance portable implementation mpi message passing interface standard technical report anl mcs tm mathematics computer science division argonne national laboratory argonne ill 
gropp lusk skjellum mpi portable parallel programming message passing interface mit press 
lee kesselman schwab near realtime satellite image processing metacomputing cc computer graphics applications pp 

generic security service application program interface internet rfc 
litzkow mutka condor hunter idle workstations proc 
th intl conf 
distributed computing systems pp 

mainwaring active message applications programming interface communication subsystem organization tech 
rep dept computer science uc berkeley berkeley ca 
distribution coupled ocean general circulation model highspeed networks proceedings th international symposium computational fluid dynamics 
morris andrew distributed personal computing environment communications acm 
harrison shared memory numa programming way proc 
th ieee symp 
high performance distributed computing ieee computer society press pp 

norman galaxies collide way example heterogeneous wide area collaborative supercomputing international journal supercomputer applications pp 

chien high performance messaging workstations illinois fast messages fm myrinet proceedings supercomputing ieee computer society press 
reed smirni frontier interactive closed loop performance steering proceedings icpp workshop challenges parallel processing aug pp 

thakur gropp lusk device interface implementing portable parallel interfaces proceedings th symposium frontiers massively parallel computation october 
wolski dynamically forecasting network performance network weather service tech 
rep tr cs san diego october 
