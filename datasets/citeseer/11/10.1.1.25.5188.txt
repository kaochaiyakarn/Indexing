appears agha wegner yonezawa eds research directions concurrent object oriented programming mit press pp interaction machines jean marc andreoli paolo ciancarini pareschi european computer industry research centre introduce metaphor interaction machines vein metaphors chemical machine 
main point allowing interactions independent locally defined subsystems crucial requirement capturing global behavior open systems 
dual concepts distributed problem solving blackboards broadcast communication exploited account respectively tight integration loose integration system components 
formal counterpart iam metaphor computational model linear objects lo aim modeling concurrent agent oriented computations operational semantics terms proof theory linear logic framework introduced provide theoretical account notion inter action 
purpose characterizing computations open systems systems obtained interaction autonomous heterogeneous components terms interaction machines vein metaphors chemical machines chams 
main point allowing interactions independent locally defined subsystems crucial requirement capturing global behavior open systems 
step forward respect chams move pure chemistry elementary form socio biology concerning interactions certain simple organisms agents structure multisets active atomic components 
may seen necessary intermediate step going comprehensive sociology psychology open systems capable capturing higher level aspects behavior software agents 
rest structured follows 
section introduces metaphor naive view wave mechanics societies simple behavior captured totally mechanistic fashion 
section introduces direct formal counterpart computational model linear objects lo provides terms lo programs programming examples 
section compares approach related 
section concludes discussing directions research 
interaction machines behavior iam results concurrent activities system communicating autonomous agents 
show case single agent corresponding systems behaving totally manner global behavior system kind strictly coincides local characterizing single agent lives 
consider general case multiagent systems corresponding characterized genuine social interaction 
single agent tight integration single agent iam state agent represented multiset resources 
may evolve laws form called methods delta delta delta ffi gamma delta delta delta bm ffi gamma ffi gamma single agent interaction machine bm non empty multisets resources respectively called head left hand side body right hand side method 
symbols read par ffi gamma read primitive operators model 
method triggered agent state contains resources head method 
case agent may perform transition new state obtained replacing old state resources head body method 
remaining part state left unchanged transition 
different internal activities agent may performed parallel 
fact state agent contains disjoint resources match heads methods methods triggered simultaneously 
hand methods non disjoint heads applicable state agent applied time way model control effectively applied method selection assumed totally fair 
fact single agent iam seen elementary blackboard system 
state agent captures content blackboard time methods represent different knowledge sources interact blackboard head method specifies resources taken blackboard conversely body specifies resources output blackboard 
communication blackboard totally asynchronous fact requirement method outputs resource blackboard method necessarily 
iam metaphor single agent case iam metaphor state single agent represented set particles evolving determined computational space 
particle represents resource assume particles perpetual brownian motion may randomly collide 
methods metaphor represented laws physics governing particle interaction collisions collision particles corresponding resources head method disappear new particles resources body method released 
fact single agent case considered iam metaphor completely analogous cham evolution laws interpreted terms chemical reactions particle interactions 
graphically space particles evolve represented rectangular box particle represented circle inside space labeled name associated resource 
random motion particles represented trail dashed lines particle collision points marked small black disk 
sample evolution single agent iam consists sequence collision replacements particles illustrated sequence diagrams fig 

diagram resources form ffi gamma ffi gamma competition resource inside agent head method collide diagram replaced resources body method 
diagram resource just released collides resource 
time second method applies diagram resources replaced single resource evolution may proceed forever way 
competitive behavior fig 
illustrates case competition resources typical internal behavior agents 
methods applied state corresponding diagram application method consumes resource needed application method 
depending method prevails collision occurs diagram diagram agent evolves shown diagram diagram 
illustrates non deterministic behavior collisions occur random way control method prevail 
single agent viewed bundle different computational threads corresponding different functionalities agent 
functionalities tightly integrated need interact terms explicit communication just terms consumer producer interdependencies furthermore may overlap determinate tasks creating competing alternatives just way human agents consider different options meet everyday life tasks requirements fighting running away 
scaling real albeit elementary societies requires expressive capabilities illustrate sections 
multi agent loose integration build multi agent systems add new primitives creation termination agents obtained extension syntax methods body method right hand side may formed multisets resources just unique multiset 
symbol 
read top denote empty body symbol read connect multisets resources body 
agent trigger method state contains resources head method 
case body method empty multiset agent terminates ii body method corresponds single multiset body replaces head new state agent just illustrated previous section ffi gamma ffi gamma multiagent interaction machine iii body contains multisets resources gamma exact copies agent state generated clones obtained head method replaced corresponding multiset body 
main point third case generated agents completely independent start evolving autonomously 
notice analogy mechanisms creation cloning termination processes unix operating system primitives fork exit 
iam metaphor introduced previous section single agent case easily extended account new operators 
universe computation consists concurrent spaces kind introduced previously agent iam perform local transitions affecting 
system completely dynamic open new agents may appear time may disappear 
sample evolution multi agent iam illustrated diagrams fig 

diagram resources collide method applies agent duplicated diagrams clone replaced replaced diagram resource just produced collides resource second method empty body applies clone disappears diagram 
clone unaffected evolution 
just internal parallel activities inside agent different agents evolve parallel triggering methods agent interfere happens agent 
multi agent characterized multiple levels concurrency 
opposed case concurrent internal activities agent concurrent agents capture situation independent loosely integrated subsystems matter fact interaction emerge explicit exchange information described section 
conceptually different notion multiple independent subsystems achieved cham metaphor concept membranes enclosing sub solutions cham 
main difference iam completely flat structure agents level cham solutions enclosed solutions arbitrary depth 
feature crucial consequence terms inter agent communication 
interagent communication pointed section consider happens inside agent form interaction involving different computational threads methods achieved form explicit linguistic communication kind interdependence induced production consumption resources consumers depend producers satisfying needs competition arises consequence resource usable consumers 
agents encapsulated entities separated interaction agents come explicit willingness agent communicate fellow creatures 
order program effectively interactive devices endow agents elementary capabilities performing speech acts 
property driven communication way communication agents characterized 
traditional message sending scheme relying system addresses identify specific recipient message apply notion agent address missing 
new agent created get name sort identity simply comes life aggregation computational properties directly inherited agent cloned 
communication property driven opposed address name driven agents listening communication channels receive information broadcast channels agents broadcast messages match properties receiving agents react consequently simply ignore message 
property driven communication appears highly attractive feature providing linguistic support open systems dynamic reconfigurability systems implies agents may change roles respect supplying services desirability making agents communicate directly basis properties name 
instance suppose agent name acts printer manager charge assigning printing requests available printers printing requests explicitly addressed name agent currently acting printer manager event replacing agent agent role printer manager communicated agents allow properly reroute requests 
complication arises case agents permitted send requests away specifying address simply requiring charge process 
broadcasting property driven communication realized iam model broadcasting 
functionality obtained extension syntax methods head method left hand side resources may prefixed special symbol called broadcast marker 
operational semantics method triggering gets modified follows non marked resources head method agent state marked ones assumed added state immediately deleted application method 
resource added agent state way copy resource added state agents system living time method triggered 
main characteristic communication mechanism message broadcast need freeze system add broadcast message agents states unlock system course unrealistic truly open system 
fact shown broadcast operation performed totally asynchronous localized fashion 
property broadcasting captured iam metaphor introducing waves spreading system agents 
wave potential form particle actual agent space wave hits space 
furthermore assumed waves propagate regularly network agents means wave hits twice agent ii ultimately reaches agents system ffi gamma broadcasting resources emitted descendent spawn 
transmission times agents assumed randomly uniformly distributed consider basic model form topology agent network communication failures delays agents evolve purely isotropic ether 
graphically wave represented growing closed curve wave front labeled resource name particle holds 
arrows show direction growth wave front 
mechanism illustrated fig 

diagram resources head method collide 
resource head method prefixed broadcast marker immediately added agent state 
method triggered usual way head replaced body time wave front labeled broadcast resource starts growing agent diagram 
wave hits agent diagram copy appears agent diagram 
agents system receive broadcast resource 
non competition cooperation notice respect competitive interaction computational threads agent mechanism interaction agents induced broadcast communication essentially non competitive sense separate copies resource distributed different agents left completely free different copy 
specifically compare fig 
fig 
case fig 
methods applied transform internal state agent case fig 
methods applied agents represented diagrams 
receives separate copy resource broadcast diagrams processes independently diagrams 
broadcast communication induces different responses shared stimuli 
non competition cooperation quite easy step broadcast communication exploited model ffi gamma ffi gamma cooperation agents resource situation complex problems need viewed different cooperating experts providing specific response addressing particular aspect common problem 
forums way look approach interagent communication viewing different agents system sharing common part gets incrementally specified evolve called common interface forum plays role allowing global interactions agents 
agent communicate agents making assumptions content forum assumptions transmitted agents may 
going details worth pointing general broadcasting easily restricted multicasting exploiting fact agent triggering method generate unique constants may may shared descendents agent depending independent evolutions 
agents share constant form having sender pass constant argument messages recipient match argument constant way messages seen agents forum acquainted constant able 
case agents obtain point point bidirectional communication channel 
details mechanism generating unique identifiers embedded primitive operation pattern matching mechanism methods see 
examples concrete instances quite different nature interaction machines 
example corresponds distributed solution classical problem operations research determination shortest path graph 
case problem distributed se solution propose multiple communicating agents 
second example hand simulation intrinsically distributed system airline reservation system multiple agents airline companies travel agencies communicate network interaction obtained elementary incarnation contract net protocol assumes broadcast communication 
metaphor computational model metaphor computational model linear objects lo operational semantics terms proof theory linear logic main motivations linear logic providing background study concurrent systems theoretical account notions inter action resource computation 
lo model resources represented tagged tuples form vn tag ranges finite set predicates arguments vn tuple various types numbers strings identifiers lists 
methods arguments may contain variables names scope method occur 
method applied variables instantiated replaced actual values 
achieved pattern matching elements state agent method triggered 
variables instantiated pattern matching occur broadcast resources resources head instantiated new unique identifiers mail addresses broadcast communication 
mechanism second example connect requests corresponding answers circulate forum 
section keyboard typable symbols lo implementations respectively ffi gamma 
furthermore follow usual convention starting variable names uppercase letter 
raw computations arithmetics string manipulation generally procedure irrelevant interaction machinery accounted model 
various ways integrate lo deeply affecting basic model 
server approach server agent capable interpreting answering requests agent behavior described terms lo methods 
think arithmetic server receiving messages form sum unique identifier request answering back messages form 
approach involves communication overhead operation precisely handled communication 
approach consists considering agent contains implicitly state resources form say sum resources needed computation 
example method defines simple counter capable receiving messages form incrementing current value hold resource val value val sum val 
curly brackets resource sum mean resource searched implicit part agent state containing arithmetic information execution implemented machine invocation addition 
fact case usual arithmetic operations shorthand val val 
easily mapped previous form 
operations research example heavily shorthand notation arithmetics operations 
example operations manipulating symbolic data explicitly program procedures languages lo appropriate task time procedure occurs method role explained 
lo implemented coordination language extends preexisting programming environment agent oriented capabilities 
date exist implementations lo extension modula extension prolog 
operations research algorithm consider directed acyclic graph example edge labeled cost positive integer 
path graph sequence contiguous edges cost path cumulated sum costs edges 
nodes graph distinguished source target 
assume connected path problem find lowest cost paths simplicity algorithm proposed computes lowest cost source target slight modification produce actual path corresponding lowest cost 
graph represented system communicating agents corresponds node graph 
diagram fig 
shows initial state agent corresponding node contains exactly resources node holds name node resource form edge outgoing edge cost node resource count holds number outgoing edges 
assume similar agents created nodes graph 
run time system computes node minimal cost path target node 
information encoded resource broadcast available agents 
computation minimal cost node target done locally agent corresponding node way ffl agent receives information node outgoing edge cost creates resource encoding cost path target cost 
candidate value lowest cost target stored resource simply produced agent space method 
edge 
edge 
count min count 
node count node edge count node count node edge edge edge count node edge edge edge count node count program possible scenario execution node ffl candidate values minimal cost produced previous method compared lowest kept discarded 
need keep track number comparison eliminations counter count decreased time 
achieved method count min count 
ffl candidate values minimal cost eliminated counter reaches know reached actual minimal cost target agent broadcasts information terminates method 
count node possible scenario execution methods shown fig 
agent corresponding node diagrams agent receives broadcast resources resp 
exactly resources needed agent perform local computation 
resources kind may received stage execution diagram interfere computation 
diagram received resources processed produce candidate values lowest cost appear diagram 
values compared highest discarded shown diagram 
time counter decreased 
resource received produced diagram 
point discarded counter decreased diagram resource remains counter reached 
agent terminates broadcasts result diagram 
course scenario possible agent received resources needs adjacent nodes perform computation case long graph acyclic 
behavior interaction machine consists phases 
phase described graph activated agent created initialized node graph 
typically involves primitive allows creation new agents cloning 
second phase actual computation started broadcasting resource simply informs empty path target node null cost obviously lowest cost 
enables nodes react 
turn compute broadcast lowest cost triggering reactions nodes results propagated way layers agent spawn computation collect result broadcast solution problem display terminal computation 
shows propagation results abbreviation stands 
agent node graph outgoing arrow resource broadcasts minimal cost target incoming arrows broadcast resources uses 
resource may agents problem due cooperative behavior agents broadcast resources compete shared resources get individual copies 
simulation distributed system consider classical example physical distribution resources airline reservation system 
kinds agents involved travel agencies airline companies 
lo simulate activity agents interactions 
want simulate scenario ffl agency submits requests companies searching flights satisfying constraints defined client typically origin destination flight specified maximal budget client afford 
ffl companies receive requests may may send back flight offers matching specifications 
ffl agency collects offers corresponding request emitted sorts criterion provided client 
ffl certain time agency stops collecting offers starts sending reservation requests companies 
offer tried order determined previous step 
ffl receives reservation requests checks satisfied 
case selected flight fully booked 
case answer accept reject returned agency 
ffl reservation request accepted agency stops reservation process terminates treatment current client request 
happens reservations rejected client invited submit constrained request 
simulation program initiated simul agency 


agents created expanded initiating different agencies companies 
describe methods simulating agencies activity 
assume state agency contains resources form specs criterion seat represent client requests requests may occur asynchronously interested generated 
argument request specs encodes client description flight requests including origin destination desired dates maximal budget client afford 
second argument specifies criterion sort companies offers sort price travel time third argument number seats required 
assume agency state contains initially resource agency meaning ready process clients requests 
agency spawns specialized agent process client request client requests processed simultaneously agency specs specs criterion agency 
processing request starts getting information companies requested journey specs info specs count sorted 
invitation tender info specs containing specifications requested journey broadcast companies 
runtime variable instantiated fresh unique identifier identify unique way broadcast message info specs answers corresponding message collected agency collect 
resource start timer starts countdown flight offers companies considered 
resource count holds number offers received far 
resource sorted holds number offers sorted far 
flight offers received sorted specific treatment variable determined fact variable occurs broadcast resource info specs resources head method 
offer count sort count 
sort sorted best worse sorted 
sort sorted criterion sorted criterion 
sorting process generates resources form meaning offer considered immediately offer fail booking 
resource represents call raw computation local agency involving discussion client determines offer ranks offers criterion dummy offers best worse introduced enclose ordered list offers assumed offer best worse 
countdown initiated start timer finished deadline offers reached agency stops collecting offers enters reservation process count 
flight offers scanned order defined sorting process reservation tried accepted 
sorted best 
worse book 
rejected 
accepted worse notice method enforces offers sorted starting reservations method apply count received offers held resource agency reserve equal number sorted offers held resource sorted 
second method broadcasts booking request corresponding best flight offer rejected dummy offer worse 
notice variable uniquely identify broadcast message answers message considered methods 
answer negative third method offer considered 
fourth method current agent processing initial client request terminated 
terminated offers rejected dummy offer worse reached fifth method 
describe methods simulating companies activity 
assume initial state contains resource meaning ready process requests agencies 
info spec satisfy spec offer 
resource spec represents call raw computation local determines specification spec matched flight offers booking process assume contains initially database resources form number holding flight offers number available seats offer 
booking order agencies may modify number book number accepted number 
book number rejected number 
fig 
illustrates interaction machine processing client request 
dashed lines labeled resources show messages broadcast link sender message potential receivers message sent agents 
plain lines show agent transitions 
clarity purpose content agent state drawn completely relevant resources displayed 
furthermore state agency abbreviate sorted list offers aa ba twa stands set resources best aa aa ba ba twa twa worse built program 
actual transitions corresponding computation sorted list omitted broken line involve inter agent communication 
randomly named constants created runtime allow unique identification messages appear 
comparison models various programming languages computational models supported implicit explicit metaphor proposed past concurrent distributed computing 
specifically focus paradigms blackboards constraints actors 
blackboards seen internal computations inside single agent iam seen transformations blackboard resources agent computational space correspond messages blackboard methods retract assert resources correspond different knowledge sources blackboard model 
number parallel languages similar concept gamma linda shared prolog swarm 
gamma computing models full fledged programming languages multiset rewriting operators 
linda coordination language set primitives parallelism communication easily added sequential imperative language 
shared prolog logic programming counterpart linda 
swarm logic parallel programming style unity 
conditional rewriting logic development direction extends notion concurrent computation transformation shared data space general domain term rewriting systems 
chemical machine metaphor applies quite naturally blackboard concurrent computations shown metaphor overlaps interaction machines single agent case 
fact notions chemical solution sense chams computation space tuple space linda shared prolog blackboard support idea shared open unordered data structure multiset appropriate medium communication concurrent distributed data driven system 
constraints offspring family tree concurrent logic programming languages concurrent constraint programming linguistic framework concurrent agents communicate global store seen set constraints 
competition processes constraints store store common interface agents communicate bears close relationship forum iam see section blackboard 
crucial differences concurrent constraint programming languages constraints removed store gets incrementally refined monotonic accumulation new elements contrast pieces information exchanged forum ephemeral effectively removed locally scope consuming agent interference agents 
flight twa flight twa flight aa flight aa flight ba flight ba flight ba flight ba agency try aa agency try ba info spec offer twa offer aa offer ba book aa book ba accepted rejected agency wait ba agency wait aa aa ba twa aa ba twa ba twa ba twa agency travel agencies airline companies agency collect criterion time agency process spec client req spec time agency criterion time simulation airline reservation system notion consistency failure iam concurrent constraint framework preclude priori syntactic restrictions may ensure store constraints remain consistent 
traditional logic programming notion global inconsistency inconsistency branch computation responsible inconsistency computation tree appears undesirable unrealistic point view distributed open systems failure node partially degrade performance system 
furthermore fact information units constraints accumulate store removed decreases large extent encapsulation locality agents actions concerning manipulation constraints performed agent directly reflected store visible agents 
fact concurrent constraint programming computation simulated terms single agent iam head method consist unique active atom predicate concurrent constraints terminology set passive atoms corresponding asked constraints occur body method consumed 
restriction unique active head typical traditional logic programming languages incompatible model ontology multiple activities occur global level stemming existence multiple agents locally agent 
hand concurrent constraint framework especially notion entailment constraints offers flexible elegant tool declaratively expressing algorithmic computations real concern coordinating distributed agents algorithm execution 
actors actors model provides defined framework specifying reasoning systems concurrent communicating processes 
actors encapsulated entities interacting asynchronous message passing 
actor unique system address messages aimed actor sent receiving actor reacts sent message applying method script set associated methods 
actor model influential lo starting motivations logically reconstructing main features actor computations time improving specifically withdrawing notion agents identity address communication property driven viewing agents blackboards added built form dynamic inheritance behavior agent compositionally obtained summing behaviors computational threads participate missing original actor model see illustration capabilities inheritance mechanism 
evolutions original actor model pointing different means similar directions 
specifically distributed actor language abcl comes reflective flavor abcl object meta object direct read write access state called denotation 
communication meta object denotation achieved message passing direct competitive access shared resources state denotation 
terminology meta object denotation seen different computational threads running blackboard effectively compete resources blackboard 
simulate iam agent meta ancestry abcl object set objects consisting object meta object meta meta object general iam agents restricted behavior respect abcl objects fact relation object meta object abcl symmetric meta object controls denotation way round iam agent component se priority role agents methods unordered 
sent message reaches iam agent consumed agent components abcl messages sent specifying level meta ancestry object recipient message 
levels concurrency inside agents implicit model characterize abcl computations probably closer abcl model machines relationship different subsystems hierarchically organized instance charm model proposed extension chemical machine 
introduced metaphor interaction machine conceptually characterize concurrent multiagent worlds computational agent viewed structured entities behavior results concurrent activity different components 
levels concurrency correspond basic mechanisms communication competitive blackboard style cooperative forum style 
model computational model lo 
course simplifying assumption agents speaking language problem converting heterogeneous data representations interagent communication agent 
evolution agents iam determined set methods assumed written homogeneous language occurrence constant say distinct methods meaning constant appear different forms different methods 
real life clearly realistic assumption see discussion subject essential part research devoted tackle problem 
gerard alexander encouragement support 
indebted mike reeve discussions importance property driven communication open information systems 
agha hewitt 
actors conceptual foundation concurrent object oriented programming 
shriver wegner editors research directions object oriented programming 
mit press cambridge ma 

andreoli pareschi 
lo 
concurrent structured processes 
proc 
oopsla ecoop ottawa canada 

andreoli pareschi 
communication fair distribution knowledge 
proc 
oopsla phoenix az 

andreoli pareschi 
linear objects logical processes built inheritance 
new generation computing 

andreoli pareschi 
dynamic programming multi agent programming 
proc 
oopsla ecoop workshop object concurrent computing lecture notes computer science springer verlag gen eve switzerland 

banatre coutant le metayer 
parallel machine multiset transformation programming style 
generation computer systems 
berry boudol 
chemical machine 
proc 
th acm symposium principles programming languages san francisco ca 
brogi ciancarini 
concurrent language shared prolog 
acm transactions programming languages systems 
chandy misra 
parallel programming design foundation 
addison wesley reading ma 
corradini montanari rossi 
concurrency hiding rewrite machine 
proc 
international conference th generation computer systems tokyo japan 
cunningham 
roman 
shared dataspace model concurrency 
proc 
th international conference distributed computing systems 
gasser 
social conceptions knowledge action dai foundations open systems semantics 
artificial intelligence 
gelernter 
generative communication linda 
acm transactions programming languages systems 

girard 
linear logic 
theoretical computer science 
hewitt 
open information systems semantics distributed artificial intelligence 
artificial intelligence 
kahn levy saraswat 
janus step distributed constraint programming 
proc 
austin tx 
meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science 
penny nii 
blackboard systems 
barr cohen feigenbaum editors handbook artificial intelligence vol 
pages 
addison wesley reading ma 
rem 
program notation tuples variables 
acm transactions programming languages systems 
saraswat 
concurrent constraint programming languages 
phd thesis carnegie mellon university pittsburg pa 

agent oriented programming 
technical report standford university robotics laboratory stanford ca 
appear journal artificial intelligence 
smith 
contract net protocol high level communication control distributed problem solver 
ieee transactions computing 
watanabe yonezawa 
reflection object oriented concurrent language 
yonezawa editor abcl object oriented concurrent system 
mit press cambridge ma 
wiederhold wegner ceri 
mega programming 
technical report university stanford dept computing standford ca 
yonezawa honda 
briot 
object oriented concurrent computation model description language abcl 
yonezawa editor abcl object oriented concurrent system pages 
mit press cambridge ma 

