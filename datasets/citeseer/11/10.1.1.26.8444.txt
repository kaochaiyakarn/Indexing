feature interaction detection synchronous approach testing du bousquet 
lsr imag bp saint martin eres cedex france synchronous framework modeling specifying telephone systems detecting interactions services 
detection process automated testing techniques provided tool developed 
allows user drive test operational profiles behavioral patterns 
interaction detection contest led results interactions foreseen contest committee detected 
concerned formal description techniques detection telephone feature interactions specification stage 
focuses proposal detecting interactions feature interaction detection contest held fifth feature interaction workshop 
feature interaction occurs activation features activations feature produces unexpected behavior 
effort devoted problem debate deal interactions interaction defined 
contribution debate propose solution consists validating models features testing prototypes derived executable specifications features synchronous context 
executable specification telephony system including features description environment set properties satisfy validating partially supported contract cnet france telecom university joseph fourier 
mail addresses imag fr preprint submitted elsevier preprint january requires comparing behaviors produced respect expressed lustre executable specification language linear past temporal logic 
described extended form lustre 
testing techniques method lies characterized automated test data generation automated verdict production 
identifying interactions performed manually 
decided favor testing approach reasons 
testing feature interaction detection viewed finding errors program 
testing evaluates suitability software product operational role 
testing feasible size system tested 
true similar approaches model checking 
testing tool provides environment appropriate evaluate adequacy property 
particularly useful searching interaction inconclusive relevance property questioned 
section details synchronous approach 
section defines notions feature interaction 
section describes testing tool 
section explains detection phase conducted interactions 
section mentions related works 
section discusses results section provides 
background synchronous approach reactive programs applications continuously interact environment input provided environment application reacts emitting output 
synchronous programs sub class reactive programs satisfy synchrony hypothesis reaction synchronous program instantaneous 
synchronous programs cyclic behaviors tick global clock called instant time inputs read processed simultaneously outputs emitted 
synchronous approach helps avoid combinatorial explosion problem approaches parallel communicating processes intractable 
parallel components synchronous system react simultaneously executions intertwined 
additional consequence characteristic state transitions take place reaction visible environment 
lustre synchronous declarative data flow language 
lustre offers usual arithmetic boolean conditional operators specific operators pre previous operator gamma 
followed operator 
expressions type denoting sequences pre denotes sequence nil gamma nil undefined value 
gamma denotes sequence 
lustre executable specification language corresponds linear past temporal logic 
temporal logic formulae easily evaluated execution lustre program 
lustre allows specifier define logical temporal operators express invariants properties 
example user defined temporal operator specify hold instants respectively occur 
feature interaction definitions contest detection interactions concerns pairs features 
composition operation notion interaction defined 
feature complement basic party service known plain old telephone service pots stand 
consider feature characterized couple feature behavior set requirements imposed properties feature expected satisfy 
behavior stated executable specification requirements expressed temporal logic 
methods applied obtain contest data specification properties compose features detect interactions section 
interaction detection performed specifications properties 
architecture telephony system approach construction synchronous model contest telephony system called network 
requires system reactive consequently clearly identify environment 
opted reactive system including switch service control point scp fig 
environment composed set telephone devices operations system os 
messages exchanged switch os os scp lt scp lt scp lt scp system specification 
switch system specification 
fig 

network model reactive system environment events defined contest instructions user switch switch user switch os 
inputs issued executable specification associated reactive system user switch events outputs switch events events produced billing system 
pair features user associated logical telephone lt 
lt behavioral specification pots pair features 
scp represented unique function included lt fig 
lts necessary reason chisel diagrams represent generic behaviors instantiated identity various users involved execution feature 
order avoid enumerating possible combinations useful explicit behavior feature user regardless users involved feature 
lt includes information state user phone current state chisel diagram optionally user party 
includes data features subscribed user parameters associated feature 
simplifying assumptions stated contest instructions allowed construct easily model network 
assumptions classical telecommunication system operations 
instance assumptions stated user switch messages get instantaneous response switch communication means switch entities left unspecified 
naturally led centralized model description synchronous approach adapted 
assumptions concern provisioning features subscriptions features statically set congestion system message delayed lost timing constraints disconnect delay user hangs 
assumptions help produce simpler specification 
disconnect input events output events hook dial idle dial busy hook hook dialing hook fb caller hook hook hook dial idle time time time disconnect hook hook hook fb callee subscriber fig 

automata building executable model feature feature chisel diagram executable specification lustre systematically derived 
chisel diagram expressed form possibly automata translated lustre 
intermediary step helps identify reactive aspects system 
translating chisel diagram automata done steps 
diagram analyzed identify different users involved feature execution 
user role communication 
instance pots involves roles caller callee 
call forwarding incf feature involves roles caller callee user incf provided forwarded user user call redirected result forwarding 
step consists projecting chisel diagram role 
role diagram duplicated simplified inputs outputs affect user role hidden 
example analyzing billing feature leads automata informally represented 
state numbering refers chisel diagram 
state state feature idle 
automata straightforwardly translated single lustre strictly speaking pots feature construction lustre model similar respects features 
sake simplicity abstracts intelligent part involving scp feature 
module 
execution feature distributed various lts involved 
lts composed synchronous manner evolve simultaneously 
consequence input lts react emitting output user 
expressing requirements feature requirements feature reflect expectations user regarding behavior 
expressed temporal logic lustre set global variables inputs outputs 
requirements inferred mainly informal description feature 
analysis chisel diagram helps precise 
requirements obtained manual analysis 
discussions validity analysis concluding section 
example consider calling number delivery cnd feature 
informal requirements cnd cnd enables subscriber telephone receive display number originating party incoming call 
cnd purpose contest assume capability delivering number calling party idle called party receives event 
description deduced properties written lustre pre idle display display true subscriber cnd feature true call attempted 
terms events variables defined contest description 
pots considered feature reasons 
basic essential component required building global service provided user 
second requirements expressed altered feature 
instance requirement pots ensure caller charged call 
feature modifies billing call violate requirement 
consider requirements features 
requirements specific single feature deal global service 
part requirements deal consistency 
instance message initiating tone billing corresponds terminating message 
maintain kind uniformity definitions consider requirements part requirements feature 
definition behavior feature set variables vx denotes set values variables vx assignment values variables formally speaking behavior pots feature described set reactions lt set partial function function defined pots feature reacts lt profile pots behavior function defined pots sg theta input sp theta output ffl input set incoming events originated environment 
ffl output set events issued environment 
ffl sp set variables characterizing internal state user telephone 
state handled corresponding lt ffl sg set global variables sg sp theta theta spm number lts sp set variables sp lt global state internal switch 
pots behavior users 
note lt sp common pots features 
lt read global variables lts sg 
modeling point view avoids network specific channel exchange data lts 
switch instantaneous reaction 
generic manner lt profile behavior function feature defined sg theta sf theta input sp theta sf theta output sf set local state variables input output sg defined 
sp extended parameters specific parameters indicate user subscribed feature optionally data associated subscription 
call feature instance particular assignment values parameters 
feature stand component relies pots order form complete service deliverable user 
behavior results integration feature pots denoted pots consists building behavioral specification top pots 
behavior characterized follows ffl pots fed input time 
ffl pots executed parallel results instantaneously available 
ffl reacts current input defined input pots reaction ignored sp sf updated respect answer output proposed ffl pots reaction considered update sp determine value output 
sf change 
note behavior description generic depend parameter values 
composing features features suppose priority order 
lt composite feature constructed generic behavior denoted phi phi requirements expressed formula profile behavior function composite feature identical single feature 
defined follows ffl features react current input say sf updated reaction corresponding fm feature highest priority sp modified respect fm result output proposed fm 
ffl feature reacts evolves manner ffl composite feature reaction 
behavior results integration composite feature phi phi pots denoted phi pots definition feature interaction considering system including features features requirements interaction defined system inability satisfy requirements composite feature 
method detecting interaction known satisfaction model approach symbolized satisfaction relation 
point view classical framework say interaction pots phi pots intuitively purpose validate feature isolation 
aims evaluating composition features respect conjunction requirements 
usual approach satisfaction relation evaluated concrete model features instances properties evaluated specific chosen implementations 
definition complemented particular case self interacting feature 
satisfied may wrongly specified consistent case reasonable argue interaction instances purpose contest features combined pairs 
phi non commutative operator search interactions requires analyzing pots pots tool description operation testing tool developed validate reactive synchronous software 
requires elements environment description written lustre delta system test sigma oracle omega gamma describing system requirements fig 

environment description composed set properties stated invariants environment system assumed satisfy 
invariants constrain possible behaviors environment 
builds random generator environment description automatically constructs test harness links generator system test oracle 
coordinates executions records sequences input output relations associated oracle trace collector 
components just connected linked single executable code 
system test oracle synchronous executable pro test verdict oracle dynamically produced input data program output system description environment input data generator communication link object provided user collector trace test harness fig 

grams inputs outputs boolean vectors 
usually supplied lustre programs 
test operated single action reaction cycle driven generator 
generator randomly selects sends input vector system test reacts output vector feeds back generator 
generator proceeds producing new input vector cycle repeated 
oracle observes program inputs outputs determines software specification violated 
testing process stopped user defined length test sequence reached 
includes trace collector provides functions data recorder data translator data analyzer 
recorder saves sequence input output oracle data boolean values produced test run 
translator displays boolean values textual mode defined user 
manual trace analysis easier analysis sequences boolean vectors 
analyzer allows user replay test sequence different oracles 
generator selection algorithm chooses valid input vector vector compliance environment description 
selection done environment state valid input vector probability selected 
method comes test systems facing complex environment realistic behaviors small part possible behaviors 
instance noticed method resulted user dialing number number 
reality behavior quite rare possible 
overcome drawback offers user various facilities guide generation test data 
purpose contest extensively kinds guides 
ffl behavioral pattern means guide test data selection order generate frequently interesting behaviors 
behavioral pattern alternating ordered instant conditions interval conditions 
instant conditions satisfied 
interval condition continuously satisfied successive instant conditions border 
behavioral pattern characterizes class input output sequences match sequence conditions 
selection algorithm favour sequences inputs match 
environment constraints additional guides strictly enforced 
result valid behaviors possible reasonable ones frequent 
ffl operational profile way define input statistical distribution 
order take account provides way assign multiple probability distribution terms conditional probabilities associated system test input variables 
variables associated conditional probabilities assumed uniformly distributed 
conditions lustre expressions 
selection algorithm chooses inputs distribution 
testing analysis processes purpose contest arbitrarily chose build environment composed users 
proved detect interactions 
testing process shown operates elements system test environment description oracle program 
elements constitute test configuration 
paragraph detail elements built 
system test model telephony system combination different lustre modules 
built different models pair features 
environment description concerns physical limitations environment simulator respect order remain realistic constraints guides 
instance user go hook twice row going hook vice versa 
alternation expressed follows user hook hook hook hook hook hook environment constraints test configurations 
constraints added take account new events dial return call rc feature 
environment constraints define parameters associated subscriptions features 
parameters set initial instant remain unchanged 
addition constraints provided guides test configuration 
guides dedicated favor invocation features 
simple features randomly invoked require guide terminating call screening tcs cnd 
complex features conditional probabilities necessary 
instance simple way increasing number invocations rc feature favor event dial 
done conditional probability pre behavioral patterns complex features way calling 
way invoking feature successively lift receiver call party wait respond flash dial number 
represented pattern hook hook dial hook hook hook flash hook dial testing pair features guides features 
situation features associated behavioral pattern features hard invoked guide composite feature automatically built concatenation order patterns 
quantitatively pairs features require guides led conclusive results operational profiles pairs features required combined operational profiles behavioral patterns 
list features subscribed provided inputs environment 
single feature requirement expressed lustre oracle program automatically derived 
pair features global oracle built conjunction oracles associated features 
composite feature step detection process consisted test configuration tcs cnd subscriber 
screening list 
step input output 
state id id id di dt id id di di dial ann scr id id ex di fig 

relevant trace excerpt scenario test tcs cnd testing model global oracle recording corresponding traces sequences inputs outputs 
false showed traces interaction 
input output sequences interest reevaluated respect oracle feature order find requirement violated determine interaction occurred 
operation carried data analyzer 
interpreting traces interaction detection observation oracle violations 
interaction spotted human tester examine trace order extract sub sequence events led oracle violation 
scenario describes interaction 
relevant trace excerpt configuration feature subscriptions input output verdict subsequences 
gives scenario interaction tcs cnd 
example tcs cnd subscriber 
screening list 
calls tcs proposes screening announce cnd displays number calling party property cnd violated 
related core approach consists reducing feature interaction detection evaluating temporal property model 
classical logical approach literature usually model checking techniques 
method differs slightly classical approaches sense consider synchronous model apply automated testing techniques 
previous works shown synchronous approach applied telecommunication system 
systems characteristics reactive systems 
satisfy strong time dependencies external events role bring maintain desired relationships environment 
addition components modeled instantaneously reacting programs example switching systems 
emphasis testing detect interactions advocated interaction detection considered particular case conformance testing 
testing idea statistical approach feature interaction analysis put forward 
terms interaction detection exhaustive simulation executable model observers shares analogies testing 
note way modeled pots features similar approaches communicating processes 
exploited synchrony hypothesis build simplified telephony system model significant state evolution steps fewer visible understandable user level 
results discussions test effort case study required staff days effort ffl staff days model system design modeling rules features ffl staff days produce executable model feature ffl staff day extract properties feature build corresponding oracle ffl staff day test pair features 
modeling system features led produce lines lustre code 
validation phase runs pair features tested times test sequences length steps 
description environment involved constraints temporal logic invariant 
properties describe features requirements 
regarding execution time step test run took minutes 
results contest committee listed valid interactions 
led find interactions valid 
adopt interaction description format defined contest committee 
tables specify participant subscribed features role initial status scenario describes traces results interaction 
interactions listed committee ffl valid omitted committee 
regard pair features cellular cell appear billing conflicts features invoked call 
cell caller idle callee idle scenario hook dial announce dial announce dial jjj hook conflict proposes jjj jjj time cell proposes jjj jjj time jjj time 
ffl committee considered interactions essential requirements feature appeared case violated 
instance call forwarding busy line call waiting cw committee noticed forwarded call activate cw forwarded user 
committee doesn consider inhibition interaction contest model chisel diagrams 
ffl due requirements 
define requirement strongly 
applies mainly tl feature 
stated tl guarantee call charged subscriber explicit authorization dialling correct pin 
reasonable implicit consequence requirements admit may considered strong 
major point part results supplementary interactions said invalid 
come diverging expectations requirements 
regarding missing interactions revealed ffl thorough testing 
misses mainly due lack time interaction features test effort regarding pair 
ffl eleven symptom interaction 
unnecessary list symptoms single interaction 
instance committee listed interactions cw way calling occurring similar conditions 
difference case interaction appears user goes hook second user flashes 
problems revealed single conflict 
due observation interactions may symptoms single problem 
problem spotted features re engineered 
side effect interactions revealing problem disappear 
point view necessary report single problem twice 
reported problems symptoms 
ffl required requirement set 
happened cw 
cw properties involve flash event 
interactions occurred flash performed missed 
easy find straightforward property stating incoming call busy cw subscriber put hold 
ffl exist contest description 
interaction described involving subscriber invokes call user committee considers react 
attentive reading specification allow agree point 
caller idle callee idle scenario hook dial conflict gives announce 
invoked point feature requires user talking flash 
test automation tester perspective tool allows significant relief automating test 
human effort shifted useful tasks analyzing results 
specifier point view proved helpful debugging specifications 
validate oracles oracle specifications put place system test human observation substituted oracle 
second prior search interactions service specifications tested validated oracle properties 
instance specifications possible transitions missing diagram expected output event sent situation 
problems automatically exhibited oracle violations 
synchronous framework adequacy experience synchronous approach adapted model telecommunication features 
notions introduced contest successfully described approach 
simplifying assumptions allowed easily model system synchronous style described 
synchrony led concise modeling 
composition events described contest instruction simplified having take account possible sequences events allowed composition simply consider composed events simultaneous 
executable model highly beneficial faithfully describe complex features involving loops 
test validation test approach appears suitable verification methods 
detecting interaction equivalent looking errors exactly goal testing 
contrary verification techniques aim proving correctness piece software 
testing provides confidence definitive results adapted kind problem 
approach weak points 
testing major problems experiment decide test stopped 
testing provide definitive verdict absence interaction 
fact stopping test run early major reason prevented detection interactions 
evaluate significant various test sequences increase confidence testing worked directions ffl interactions occur just feature invocation designed specific oracles count feature invoked 
ffl model checker compare abilities various validation methods detect feature interactions 
experimentation showed modelchecking applicable due lack time memory 
expressing properties detection process properties describing requirements may ask extent results dependent 
experience interaction shows various signs 
ways reveal specific problem stated properties just need uncover signs 
building property requirements critical part properties different symptoms problem 
essential define properly requirements feature 
requirement chances interactions 
argue defining requirements done quite intuitively demand expert 
impact feature composition operation way compose features explicitly stated contest instructions define composition method see 
examined way compose features features propose incompatible answers result inconsistent event violates integrity constraints properties specific feature see paragraph 
feature inhibition feature inhibited reaction taken account lower priority possible necessary check feature properties validity 
methods appear power uncovering interactions 
chose avoid inconsistent situations 
situation occurs second method usually useless continue test run data meaningless 
contrary method permits continued testing finding interactions symptoms interaction single test run 
leads quicker results 
important test harness construction expensive data generation true contest 
hand method relies features specific properties carefully define order detect interactions 
general globally fact approach evaluating model highlevel requirements proved highly profitable 
detection process carried abstracting details model particularly adapted contest problem aspects left instructions 
consequently success detection process depends strongly stated properties analyze specification carefully order extract appropriate properties express correctly 
emy cave undergraduate students assisted participation contest 
combes 
observers sce see detect resolve services interactions 
feature interactions telecommunications systems iv 
ios press 
au 
evaluation state model feature interactions 
feature interactions telecommunications systems iv 
ios press 
benveniste berry 
synchronous approach reactive realtime systems 
proceedings ieee 
blom bol kempe 
automatic detection feature interactions temporal logic 
cheng ohta editors feature interactions telecommunications systems iii pages 
ios press 
caspi halbwachs pilaud plaice 
lustre declarative language programming synchronous systems 
th symposium principles programming languages popl munich pages 
acm press 
combes 
formalization user view network services feature interaction detection 
feature interactions telecommunications systems pages 
ios press 
du bousquet 
feature interaction detection testing model checking experience report 
world congress formal methods toulouse france september 
du bousquet 

expressing implementing operational profiles reactive software validation 
th international symposium software reliability engineering paderborn germany 
du bousquet 

specification driven testing environment synchronous software 
st international conference software engineering pages 
acm press may 
logrippo 
structural models specifying telephone systems 
computer networks isdn systems 


formal framework feature interaction emphasis testing 
cheng ohta editors feature interactions telecommunications systems iii pages 
ios press 
blumenthal 
ohta 
feature interaction detection contest 
feature interactions telecommunications systems pages 
ios press 
issue 
jagadeesan porter votta 
specification testing reactive software tools experiments 
th international conference software engineering 

efficient feature interaction analysis statistical approach 
cheng ohta editors feature interactions telecommunications systems iii pages 
ios press 
lin 
lin 
building block approach detecting resolving feature interactions 
feature interactions telecommunications systems pages 
ios press 
murakami sethi 
terminal call processing esterel 
proc 
ifip world computer congress madrid spain 
musa 
operational profiles software reliability engineering 
ieee software pages march 

testing synchronous critical software 
th international symposium software reliability engineering monterey usa 
pilaud halbwachs 
synchronous declarative language temporal logic dealing time 
symposium formal techniques real time fault tolerant systems warwick 
springer verlag 
whittaker 
markov chain techniques software testing reliability analysis 
phd thesis university 

