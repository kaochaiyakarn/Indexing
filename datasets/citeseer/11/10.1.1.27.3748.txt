composable models simulation design paredis antonio diaz sinha pradeep khosla carnegie mellon university institute complex engineered systems department electrical computer engineering pittsburgh pa cs cmu edu article introduces concept combining form cad models behavior simulation models system components component objects 
connecting component objects ports designers create system level design description virtual prototype system 
virtual prototype turn provide immediate feedback design decisions evaluating functional requirements met simulation 
achieve composition behavioral models introduce port modeling paradigm 
port models reconfigurable physical component simulated multiple levels detail having modify system level model description 
allows virtual prototype evolve design process achieve accuracy required simulation experiments design stage 
maintain consistency form behavior component objects introduce parametric relations descriptions 
addition develop algorithms determine type parameter values lower pair interaction models models depend form components interacting 
article presents initial results approach 
discussion limited highlevel system models consisting components lumped component interactions described differential algebraic equations 
expanding concepts finite element models distributed interactions left research 
composable simulation design environment implemented distributed system java enabling multiple users collaborate design single system 
current implementation applied variety systems ranging consumer electronics electrical train systems 
illustrate functionality design scenario 
motivation intense competition current global economy successful companies react quickly changing trends market place 
example need new product triggered new technologies changes customer demands fluctuations cost basic materials commodities 
capitalize imbalances market conceive design manufacture new products quickly inexpensively 
design process consumes significant portion total development time shorter design cycle provides distinct competitive advantage 
design cycle shortened virtual prototyping haas 
virtual prototype enables designers test initially design specifications met performing simulations physical experiments 
virtual prototyping design verification faster expensive provides designer immediate feedback design decisions 
turn promises comprehensive exploration design alternatives better performing final design 
fully exploit advantages virtual prototyping simulation models accurate easy create 
virtual prototypes need model behavior equivalent physical prototype adequately accurately predicted behavior match actual behavior resulting poor design decisions 
creating accurate models hard problem 
computing performance reached level high fidelity simulation models economically viable 
instance feasible evaluate dynamic simulations finite element models crack propagation brien hodgins 
detailed accurate simulation models appropriate important evaluate different alternatives quickly coarse high level models 
instance early stages design process detailed models unnecessary design details decided accurate parameter values unknown 
stage accuracy simulation result depends accuracy parameter values model equations simple equations describe high level behavior system appropriate 
equally important accuracy requirement simulation models easy create 
creating high fidelity simulation models complex activity quite time consuming 
take full advantage virtual prototyping necessary develop modeling paradigm supports model reuse integrated design environment provides simple intuitive interface requires minimum analysis expertise 
article introduces paradigm composable simulation design model composition system components 
composable simulation design provide better support simulation design systems developed simulation design paradigm composition 
wide variety products ranging consumer electronics cars contain components components reused previous design generations 
products modular product architecture allowing customized particular application mass produced low cost baldwin clark 
design categories products consists primarily configuration assembly existing components modules 
building blocks composable simulation design environment component objects illustrated 
objects consist configuration interface list ports cad model behavioral model relationships 
configuration interface component object consists ports 
port defines intended interaction component environment 
instance configuration interface ac motor ports fastener holes stator shaft rotor electrical connector 
ports component connected interacts components 
behavioral models component objects defined port interfaces 
ports model exchange energy mass signals component environment 
mapping ports configuration interface ports behavioral interface 
instance shaft ac motor corresponds mechanical energy port ac plug modeled electrical ports pin 
describe port behavioral modeling detail section 
specification models ac motor component configuration interface behavioral models model cad models component objects serve dual role 
hand cad model specification form component provides nominal dimensions tolerances material specifications information third party manufacturer manufacture object 
hand cad model mathematical representation geometry object 
role visualization purposes part behavioral models 
depending required accuracy analysis cad models may describe component different levels detail 
component object includes relationships ports parameters configuration interface certain form features characteristics cad model 
explained section 
multiple component objects configured larger systems connecting ports 
shown design prototype consisting pulley mounted motor shaft represented connecting shaft port pulley rotor port motor 
configuration specifies prototype completely specifies components configure components 
cad specification cad cad models models component objects consist port interface system configuration combined cad behavioral models 
specification models ac port wire wire component configuration stator port ac motor bolt bolt bolt bolt ac motor shaft pulley interaction pulley rotor port framework system design reusability 
provide interface hierarchically specify modular systems port composition 
approach goes specification design prototype includes analysis capabilities including cad behavioral models 
modeling systems described component configurations viewed composition obtain system level simulation model combining behavioral models individual components 
important difference configuration component objects configuration behavioral models inclusion models capture dynamics interactions ports friction electro magnetic interference contact resistance 
role interaction models investigated section 
advantage parallelism composition configuration design composition simulation modeling framework allows designer simultaneously design model new artifacts 
common practice electrical cad software mentor graphics creating chip layout instantiation transistor logic gate creates geometry silicon layers corresponding simulation model 
mechanical cad integration design simulation common 
purely mechanical shaft port pulley belt port component objects hierarchically configured complex systems 
time behavioral cad models configured 
systems commercial cad packages provide optional module multi body simulation modules support port configuration lack sufficient support multi disciplinary systems 
main goal simulation design environment extend ideas simulation design multidisciplinary systems integrated software environment 
believe concept component objects general composition objects applied different application areas energy domains levels model accuracy 
current research applied framework system level modeling systems diaz sinha modeling computer controlled electro mechanical systems differential algebraic equations discrete event systems specifications devs zeigler 
furthermore port modeling paradigm article limited systems lumped interactions 
interaction distributed nature boat water floats approximated large number lumped interactions 
internal model component may distributed 
consider example flexible beam attached structure ends 
finite element model may describe internal behavior beam defining mapping lumped port variables distributed boundary conditions finite element model interaction rest structure captured ports 
systems primary interactions components tend lumped port modeling paradigm applicable 
detailed models required may consider phenomena thermal interactions distributed nature 
plan expand modeling paradigm different energy domains distributed interactions 
framework simulation design characteristics address detail subsequent sections port modeling paradigm take advantage compositional nature design modeling systems port modeling paradigm user compose system level simulations component models 
connecting ports subcomponents user defines interactions 
port modeling paradigm builds object oriented modeling languages vhdl ams ieee modelica explained detail section 
reconfigurable models stage design process designer performs different simulation experiments verify design prototype meets functional requirements 
early conceptual stage experiments may include quick trade analyses require limited accuracy detailed design stage designer may decide perform comprehensive detailed simulation 
accommodate simulations different levels detail need complete system develop concept reconfigurable models section 
models evolve design prototype design process 
simulation integrated cad building blocks simulation design environment component objects describe form behavior system components 
section describe cad description form may extract lumped parameters behavioral models 
addition developed algorithms instantiate models mechanical interactions form interacting components 
component library component objects organized hierarchical component library 
library designer selects components achieve desired functionality system 
provide detailed description component library implementation section 
related modeling simulation exist modeling paradigms commercial simulation packages 
characterized criteria graph versus language multi domain versus single domain declarative versus procedural modeling 
best known graph modeling paradigms bond graph modeling paynter van rosenberg 
energy conserving junctions connect energy storing transforming elements bonds bonds represent energy flow modeling elements 
bond graph modeling advantage domain independent energy flow convenient modeling mechanics continuous discrete hybrid systems 
furthermore users find counterintuitive topology bond graph different topology corresponding physical system 
linear graph models reflect system topology directly trent 
domain independent easily extended model mechanics andrews richard mcphee hybrid systems roe 
vhdl ams language modeling builds concepts linear graph modeling require explicit graph representation ieee 
majority modeling paradigms graph language 
large number modeling languages derived continuous system simulation language standard developed technical committee society computer simulation strauss 
languages common procedural 
model defined procedure computes derivatives state state time 
second group modeling languages equation declarative modelica elmqvist easy boeing dymola ab anderson vhdl ams ieee 
model defined set equations establishes relations states derivatives time 
model compiler responsible converting equations software expression evaluated computer 
advantage declarative languages user define mathematical causality equations model causality imposed system components 
declarative languages objectoriented support multiple energy domains 
case vhdl ams modelica additional advantage support continuous time discrete time systems simulation 
modeling paradigm article builds current state art modeling languages modelica vhdl ams 
reconfigurable port models introduced section compiled modelica vhdl ams models parameter values extracted cad data user specified implementation bindings 
simulation design companies resorting simulation tools improve design process 
example virtual prototyping design boeing airplane 
boeing switched design process digital cad representation allowing perform performance analysis cfd software analysis need building physical prototypes 
resulted shorter design testing period 
similar digital approach adopted car manufacturers 
success simulation design demonstrated commercially unresolved research issues remain addressed 
ongoing research includes model validation automatic meshing model creation integration simulation engines different domains architectures collaboration visualization virtual reality technology 
article focus simplifying process model creation integrating form behavior component objects 
approach characterization design prototype form function behavior shooter 
form description physical embodiment artifact function purpose artifact behavior designer intended achieve 
illustrated actual behavior depend function form 
design synthesis instantiate form satisfy function design verification derive behavior form synthesis function form evaluation modeling analysis behavior relation form function behavior context virtual prototyping 
verify behavior matches function 
context virtual prototyping behavior described mathematical models design verification achieved performing simulation experiments models 
design process iterative hierarchical nature 
solve complex design problems design team typically considers problem different levels abstraction ranging high level system decompositions low level detailed specification components de vries shooter 
process design team adds information transforms design representations 
instance needs assessment transformed design specifications engineering requirements engineering requirements turn converted family solutions evaluated compared possibly simulation iterate description artifact terms form function behavior 
result representations evolve simultaneously initial high level decompositions increasingly detailed descriptions design artifact 
early stages design process physical details defined simulation models capture high level intended behavior sub systems allowing simulation important conceptual trade offs 
details actual embodiment form included design artifacts high level models replaced gradually detailed behavioral models physical components 
modularity encapsulation port modeling paradigm facilitates model substitutions 
port modeling paradigm achieve composability behavioral models developed port modeling paradigm 
paradigm concepts ports connections diaz diaz 
ports correspond points component exchanges energy signals environment 
energy exchanged ports 
port separate interaction point type port matches type energy exchange 
example dc motor ports electrical mechanical 
electrical ports correspond electrical connectors motor mechanical ports stator rotor port rigid body 
energy flowing port characterized variable called effort flow variables bond graph modeling paynter rosenberg 
examples variables voltage electrical domain velocity mechanical domain 
measured port relative global 
corresponding variables electrical current mechanical force measured port 
interactions component models represented connections ports 
connection imposes algebraic constraints port variables 
constraints equivalents kirchhoff voltage current laws electrical circuits 
type constraint requires variables equal sum variables zero 
single energy connection framework equivalent connections block diagram modeling languages simulink mathworks 
block diagrams interactions occur signals 
user responsible determining signals dependent independent mathematical causality model 
combining variables single connection allows model components ports declarative equations procedural assignments 
simulation languages declarative including modelica elmqvist vhdl ams ieee dymola ab simulink mathworks hand procedural 
solving set declarative differential equations solver determine mathematical causality equations 
reflection underlying physics declarative representations energy connections energy ports undirected 
electrical resistor modeled ri input output predetermined mathematical causality energy ports flow direction sign restrictions flow variable 
model declarative solver may instantiate single equation ri depending resistor circuit 
considering heat dissipated resistor ri user worry direction heat transfer causality defined second law thermodynamics 
solver recognize positive valid mathematical causality assignment compute dissipated heat voltage current opposite causality impose simultaneous constraints voltage current resistor resulting overconstrained equations electrical system 
ports combined form interface model 
interface defines component interact components system contain information internal behavior component 
interface encapsulates implementation model defines internal behavior component illustrated port model hierarchically defined consists composition sub models resulting compound component 
sub models compound multiple levels hierarchy occur 
bottom hierarchy consists primitive models defined constitutive equations relate variables component model 
example constitutive equation resistor relates voltage difference ports current ports ohm law ri general model equations may include combination algebraic ordinary differential equations 
addition ports connections model energy flow consider signal ports signal connections 
energy flows signal ports connections directed 
reflects physics low impedance electrical output driving high impedance input signal flow output input operation requires power smith 
examples systems signals computer networks data buses embedded controllers modeled block diagrams similar simulink models mathworks 
signal components defined procedures constitutive equations 
procedures differ constitutive equations mathematical causality fixed inputs independent outputs dependent variables 
systems contain energy signal components hybrid systems shetty 
reconfigurable models object oriented modeling languages concept similar ports called terminals connectors anderson elmqvist ieee possible languages describe composable hierarchical port models introduced previous section 
languages guarantee clear separation ports system system complex system primitive system system system interface model implementation behavior merging concepts single modeling object 
create models evolve design need capability bind different implementations interface allowing designer select detailed behavior component having interactions rest system 
constitutive equations system system system interface non causal connection causal connection port simulation models may hierarchically defined 
traditional object oriented modeling languages behavior model modified changing values parameters 
approach structure model modified resulting reconfigurable models 
reconfigurable model interface model implementation behavior defined separately 
illustrated implementation corresponding interface single interface may multiple implementations associated 
definition reconfigurable models consider principles composition instantiation 
principle composition model implementation defined set subcomponent interfaces interactions implementation 
point sub components behavior represented interface 
allows define interactions sub components independently internal behavior 
think interface equivalent class object oriented programming defines methods interact object provide implementation 
model concrete instantiating implementation 
system constitutive equations implementation implementation implementation reconfigurable model consisting interface implementations 
implementations match interface instantiated 
semantics implementation match semantics interface 
example interface electrical resistor ports interface capacitor 
semantics components different resistor implementations instantiated resistor interface 
general port models reconfigurable models hierarchical 
compound implementations composition interfaces 
instantiation compound model requires recursive instantiation interfaces subcomponents 
number possible configurations compound model grow large considering possible combinations implementation bindings 
call set model space component 
advantage reconfigurable models elements model space instantiated having redefine interactions system components interface remains 
instantiation principle allows definition families components 
case implementations interface represent different behavioral models single component represent models family components share interface 
example family dc motors may share interface consisting mechanical electrical ports 
designing system designer include interface system model having select particular dc motor 
may possible select appropriate dc motor performing series simulation experiments different motor family new experiment requires new implementation bound dc motor interface 
illustrated set implementations interface represented tree diaz 
structure tree principles composition instantiation closely related 
arcs point implementation interfaces composed 
similarly arcs point interface implementations instantiated 
example tree depicts dc motor model 
top level interface different implementations associated represented arcs 
electro mechanical model implementation arcs meaning compound model consisting interfaces electrical conversion mechanical 
instantiating particular model resistance loss free power conversion electrical dc motor electro mech 
implementation conversion model space bind implementations interfaces 
working way top bottom tree assign implementation top level interface recursively interfaces constitute selected implementations 
general component object contain multiple behavioral models describing component different levels detail 
possible capture set behavioral models single reconfigurable model described 
requires behavioral models interface condition may satisfied 
instance decided model thermal losses dc motor interface expanded include thermal port 
current research addressing issues arise including behavioral models different interfaces 
relation behavior form composable simulation design concept component objects combine form behavior 
composing component objects systems designer simultaneously designs models new artifacts 
previous sections introduced implementation nn mechanical ideal model losses inductance electro mechanical conversion ri ri ri ldi dt ldi dt ldi dt ri ldi dt ri ldi dt ri ldi dt friction friction interface implementation example tree representation reconfigurable model 
modular modeling paradigm supports composition 
section focus maintaining consistency behavioral models corresponding form descriptions represented cad specification model 
model compositions distinguish different types behavioral models models representing physical components models representing interactions components 
examples physical components motors screws shafts controllers 
component objects contain description form behavior 
interaction models hand occur component objects connected 
associated form model parameters extracted form interacting components 
examples interaction models lower pairs result mechanical contact contact resistance electrical switch magnetic forces magnets 
form behavior component families component object contains specification form component cad models reconfigurable models describing behavior 
reconfigurable models may describe component different levels abstraction respect different energy domains provides way different views component 
similarly multiple cad models may provide different views multiple levels detail geometry component 
component object defined composition sub components form specification models derived automatically applying compositional concepts described previous sections 
component compound primitive fair amount required define cad specification form additional cad models visualization behavioral models relationships 
facilitate specification primitive component objects group families 
family component objects parameterized instantiation parameters assigned particular values completely specify form component 
parameters describing geometry behavior component derived instantiation parameters 
instance illustrated value single instantiation parameter model type dc motor lookup table provides parameters specifying form configuration ports parameters behavioral cad models 
cad geometry may simply high level abstraction capturing external geometry motor interact components 
second example automatically generate behavioral models component families specified parametric cad models 
parametric cad model designer establishes relationships certain geometric dimensions parameters 
result form completely defined limited set characteristic parameters features instantiation parameters 
parameters behavioral models turn derived cad parameters 
illustrated flow resistance hydraulic pipe depends length diameter bending radii 
dimensions may defined explicitly cad model extracted parametric relations captured procedures shah 
general case behavioral models automatically derived xyz pipe diameter pipe shape mass center gravity inertia tensor component model dc motor parameters lookup xyz pipe model flow resistance relation form behavior parameters 
components specified generic cad models 
requires combining information geometry materials knowledge physical phenomena occurring component 
creating models automatically difficult general case achieved certain classes behavioral models 
example shown rigid body model component homogeneous material properties completely defined mass inertial parameters component 
cad software packages provide procedures compute inertial parameters density geometry part defined general cad model 
result behavior models homogeneous rigid bodies derived automatically material arbitrary geometry 
form behavior component interactions addition behavioral models component objects system models include models describing interactions component objects 
pair interacting component objects interaction model relates port variables objects 
interaction requires interaction model 
electrical domain interaction model usually simple 
electrical connection components modeled sufficiently accurately constraining voltage connecting ports equal current add zero kirchhoff voltage current laws 
interaction model common allow omitted shorthand modeling paradigm shown 
mechanical domain equivalent default model rigid connection components positions frames equal forces torques add zero 
rigid connections common mechanical interaction models lower pair kinematic constraints 
developed algorithms extract type parameters lower pair geometry interacting components sinha sinha 
previously kinematic analysis limited geometry planar faces 
approximating curved faces common engineering devices polygonal facets analyses may fail recognize certain degrees freedom 
sinha sinha extended results curved contacts shown 
rigid parts share surface surface contact physical object electrical electrical domain domain default default default interaction interaction interaction component interaction interaction model model node component component contact point subject non penetration condition 
condition requires instantaneous velocity bodies component direction opposite surface normal contact point 
write condition linear inequality form relative translational angular velocities bodies position point normal contact surface 
imposing equation point contact surface equivalent imposing constraint vertices convex hull sinha 
instance non penetration conditions bodies result equations corners contact surfaces 
general analysis results linear relationship form assembly row represents non penetration constraint equation 
properties matrix determine kinematic constraints interacting component objects 
example basis vectors nullspace define contact preserving degrees freedom illustrated 
physical object mechanical mechanical domain domain complex complex complex interaction interaction interaction interaction component component joint model gear model friction 
modeling system components 
zr ri method infer behavior devices curved geometry time resolving global multi part interactions 
developed procedures derive matrix directly cad models determine type parameters interaction models sinha sinha 
component libraries ned previous sections described properties characteristics individual component objects section focuses organization multiple component objects libraries 
searching components libraries designer locate appropriate component system components particular desired function 
current research developing methodologies assisting designer search process 
intelligent synthesis assistant may search component library queries regarding component behavior form 
extending idea component object contain design rules expert knowledge allow adapt form meet design specifications 
intelligent components introduced 








extracting type parameters lower pair interaction models 
illustrated organized component objects hierarchical taxonomy flat organization 
moving top bottom hierarchy component objects concrete 
top objects represent families components family electrical ports mechanical rigid bodies bottom leaf nodes hierarchy represent completely specified physical components 
component completely specified instance identifying manufacturer part number allows manufacturer implement design ambiguity 
corresponding behavioral model remain approximations actual physical behavior 
component library browser visualization corresponding reconfigurable models 
call component implementation completely defined may include implementation implementation may contain unspecified parameter values 
single component may appear multiple locations taxonomy depending viewpoint classification 
example dc motor energy conversion component considered structural element implements rotary joint 
conversely object library includes multiple behavioral views form reconfigurable model 
shows browser allows designer navigate model space component defined tree model implementations 
including component larger system designer complete steps component selection model selection 
step designer decides component implementation particular function device 
initially may object represents family components replaced specific instance 
example initially designer decides dc motor component represents family dc motors replaces specific component object motor xyz abc second step designer selects component implementation best suited particular simulation experiment 
example high level loss free power conversion model early stages design detailed model including losses friction 
hierarchy library individual entries defined xml format extensible markup language 
xml neutral extensible format easily parsed searched shared web 
xml representation component objects includes pointers geometric models acis pro interface definition behavioral model pointers corresponding implementations 
definition implementation stored xml format 
equations tags primitive implementations vhdl ams standard ieee 
component descriptions may contain meta knowledge capturing semantics model assumptions 
model valid 
meaning model 
anticipate meta knowledge extensively searching components function 
examples detailed description xml model definition format provided diaz 
software architecture implementation implementation architecture simulation design environment similar open assembly design environment developed nist 
shown core system central design database representations current design stored function behavior product structure cad data 
furthermore database contains relationships representations instance system component implements particular function database contain function relation pointing object functional model implemented relation model object 
design process information central database continually transformed autonomous software agents designer graphical user interfaces shown 
param 
param 
extraction extraction simulation simulation engine engine data data translator translator design design database database functional functional model model behavioral behavioral model model product product structure structure cad cad data data main interaction designer database occurs cad gui behavior model gui 
cad gui implemented java toolkit 
allows user view manipulate geometry associated system components define mechanical interactions components 
allow geometry individual components modified plan provide functionality integrating framework pro engineer 
current java gui remain useful system level interactions require design new components 
behavioral modeler provides view system 
system components appears view port model 
addition user interfaces software agents interact design repository 
agents act design assistants working background 
tasks performed agents include translation cad data vrml format rendering extraction verification mechanical component interactions cad cad gui gui behavior behavior gui gui function function gui gui structure structure gui gui java gui components services interact shared design database 
compilation behavioral models xml format vhdl ams simulation models 
component library cad modeling framework implemented distributed fashion java 
coordination distributed software components event spell 
user software agent modifies portion design representation design database broadcasts event subscribing agents guis 
necessary components update local cache reflect changes design database 
allows maintain consistency internal design data presentation user 
distributed implementation framework serve tool collaboration 
multiple users interact design simultaneously design modifications introduced user propagated immediately users 
component editor behavior modeling cad gui behavioral model gui example scenario illustrate composable simulation framework examine design missile seeker cutkosky 
goal detailed design case study focus modeling simulation design process 
seeker device rotational degrees freedom allow scan dimensional area camera 
articulated mechanism realizes desired degrees freedom seeker consists actuators sensors embedded controllers accurate positioning 
kinematic design mentioned section think design process decomposing function artifact transforming form form behavior matches function 
performing functional decomposition missile seeker designer decided achieve desired degrees freedom serial chain rotational joints 
specifies kinematic function ball stick model corresponding simulation model shown 
model reflects intended behavior function specific physical components assigned implement intended behavior 
designer simulator verify intended kinematics satisfy design requirements 
instantiation geometry designer instantiates physical components realize kinematic structure 
revolute joints ball stick model replaced dc motors selected component library 
designer needs determine dimensions motors instantiates default parameter set 
corresponding behavioral model represents complete family dc motors select particular instance 
dof dof revolute revolute frame joint joint revolute revolute joint joint kinematic model dof seeker 
revolute revolute joint joint connect motors physically designer creates geometry gimbal ring cad package linked design environment 
causes corresponding rigid body model instantiated system level behavioral model 
cad model geometric compiler automatically extracts mass inertial parameters applies rigid body model 
designer defines configuration ports gimbal correspond mounting locations motors 
resulting design configuration simulation model shown 
motor selection phase design mechanical engineer generated kinematic structure seeker collaborates control engineer 
component library control engineer instantiates simple pd controllers control position degrees freedom 
mechanical engineer iterates selection appropriate dc motor 
simulation framework provides tools verify performance multidisciplinary system 
geometrical changes introduced mechanical engineer reflected immediately corresponding behavioral models control engineer housing housing rigid rigid joint joint stator cad model rigid rigid joint joint pitch pitch motor motor motor revolute revolute revolute joint joint joint pitch pitch potentiometer potentiometer rotor pitch motor yaw motor rigid rigid joint joint rigid rigid joint joint gimbal gimbal rigid rigid joint joint rigid rigid joint joint behavioral model design configuration housing gimbal optical housing yaw yaw potentiometer potentiometer yaw yaw motor motor pitch potentiometer yaw potentiometer rigid rigid joint joint rigid rigid joint joint form behavior incomplete design prototype 
optical optical housing housing test choice controller date dynamics models 
behavioral models different energy domains combined system level vhdl ams model evaluated commercial solver shown 
final design verification final design verification designers decide increase level detail model 
mechanical designer reconfigures motor models include nonlinear friction control engineer replaces analog implementation motor controller digital version includes pwm amplifier 
resulting system model requires significantly vhdl ams simulation environment mentor graphics 
intermediate analysis shows increasing position error control yaw motor hz sinusoidal input signal 
environment lists content directory structure vhdl ams models provides access variables defined models 
time evaluate increases design team confidence final design perform desired 
summary discussion support simulation design developed simulation design environment design modeling tightly integrated 
integration component objects combine descriptions form behavior system components 
composing component objects systems design team simultaneously designs models new artifacts 
enable composition developed modular port modeling paradigm facilitates reconfiguration models 
integration form behavior enhanced defining relationships cad behavioral parameters component families 
extract parameters interaction models form interacting components developed procedures automatically determine type parameters lower pair mechanical interactions 
research article initial step integrated framework simulation design 
current implementation limited component models lumped interactions fixed interfaces 
successfully applied applications mechatronics area developed system level simulation modular train systems collaboration daimlerchrysler rail systems 
carefully evaluate expected benefits terms component reuse faster expensive design cycle require significant research 
additional research needed expand functionality framework 
respect systems modeling aspect automatically instantiating interaction models component configuration requires investigation 
currently developing taxonomies ports interaction models address need 
selection adequate level detail simulation models requires expansion capabilities framework 
currently provide capability include models different levels detail reconfigurable models addressed issue aiding user selecting appropriate model particular simulation experiment model adequate accuracy requires minimum computational resources 
allow detailed analyses finite element models need included framework 
research focus interfacing finite element models lumped models includes models distributed physical phenomena mechanical complex electromagnetic thermal behavior system level models 
acknowledgments li han werner liang simon ram sriram eswaran subrahmanian art insightful discussions andersen alex cunha help implementation 
reviewers constructive comments greatly improved accuracy clarity ideas article 
research funded part darpa contract onr national institute standards technology nsf cise iis pennsylvania infrastructure technology alliance 
additional support provided daimlerchrysler rail systems institute complex engineered systems carnegie mellon university 
anderson 

object oriented modeling simulation hybrid systems 
ph 
thesis 
lund institute technology department automatic control 
lund sweden 
andrews richard anderson 

general vector network formulation dynamic systems kinematic constraints mechanisms machine theory 



computer methods ordinary differential equations differential algebraic equations 
philadelphia pennsylvania siam 
baldwin clark 

design rules power modularity mit press 
summers shah 

geometric bridge cad ai 
fourth ifip working group workshop knowledge intensive cad 
parma italy 



algebraic topological basis network analogies vector calculus 
symposium generalized networks 
brooklyn new york 

bauer 

virtual prototyping state art product design 
th international conference computers industrial engineering 
melbourne australia 

dewey moser 

analog mixed signal modeling vhdl ams language 
th acm ieee design automation conference 
new orleans 
ieee 
cutkosky tenenbaum 

collaborative engineering internet communications acm 

de vries 

structuring product models facilitate design manipulations 
international conference engineering design 
prague czech republic 

diaz paredis khosla 

composable simulation environment systems 
scs european simulation symposium 
erlangen germany 
society computer simulation 
diaz paredis khosla 

automatic generation system level dynamic equations systems journal computer aided design 

diaz paredis khosla 

organization selection reconfigurable models 
winter simulation conference 
orlando florida 
ieee 
diaz paredis khosla 

reconfigurable models modeling paradigm support simulation design 
summer computer simulation conference 
vancouver canada 
society computer simulation 
ab 
dymola 
lund sweden 
www se 
elmqvist 

physical modeling language modelica 
european simulation symposium 
passau germany 
society computer simulation 
elmqvist otter 

modelica new object oriented modeling language 
th european simulation multiconference 
manchester uk 
heinrich meyer 

system design reusability artificial intelligence engineering design analysis manufacturing 

haas 

cooperative working virtual prototypes 
ifip workshop virtual prototyping 
providence ri 
ifip 
ieee 
working group analog mixed signal extensions vhdl ieee 
rosenberg 

system dynamics unified approach 
new york john wiley sons shooter 

model flow design information 
gaithersburg md national institute standards technology 
khosla 

finding stable orientations assemblies 
ieee international conference robotics automation 
san diego ca 

elmqvist otter 

physical system modeling modelica control engineering practice 

mcphee 

linear graph theory multibody system dynamics nonlinear dynamics 

mentor graphics 
ic design suite 

www mentor com ic design 


graph theoretic modeling simulation planar systems 
masc 
thesis 
university waterloo systems design engineering 
waterloo 
brien hodgins 

graphical modeling animation brittle fracture 
siggraph 
los angeles ca usa 
acm press ny 


engineering design systematic approach 
london springer verlag 
paynter 

analysis design engineering systems 
cambridge ma mit press 
richard 

topological approach dynamic simulation articulated machinery journal mechanical design 

roe 

networks systems 
reading massachusetts addison wesley 
rosenberg 

physical system dynamics 
new york mcgraw hill 


nmf handbook 
stockholm department building sciences division building services royal institute technology 
smith 

circuits oxford univ press 
shah 

parametric feature cad cam concepts techniques applications 
new york ny john wiley sons 
shetty 

mechatronics system design brooks cole pub shooter 

model flow design information 
asme detc th international conference design theory methodology 
baltimore md detc dtm 
sinha paredis gupta khosla 

capturing articulation assemblies component geometry 
asme design engineering technical conference 
atlanta ga asme 
sinha paredis khosla 

kinematics support design simulation systems 
fourth ifip working group workshop knowledge intensive cad 
parma italy 

spell 

professional java programming class design threads event handling layout managers swing components jdbc xml security jni performance distributed objects mass market paperback 
strauss augustin johnson 

sci continuous system simulation language simulation 

rizzi 

represent intelligent components product model practical example 
fourth ifip working group workshop knowledge intensive cad 
parma italy 



modelling mixed mode dynamic crack propagation finite elements theory applications computational mechanics 

boeing 
easy engineering analysis system 
www boeing com easy 
mathworks 

matlab simulink 
www mathworks com 
trent 

isomorphisms oriented linear graphs lumped physical systems journal acoustical society america 

ed 

boeing 
series specialty press 
van 

bond graphs challenge unified modeling theory physical systems 
progress modeling simulation 
ed cellier 
london academic press 


extensible markup language xml world wide web consortium 
www org xml 
zeigler praehofer kim 

theory modeling simulation integrating discrete event continuous complex dynamic systems academic press 

