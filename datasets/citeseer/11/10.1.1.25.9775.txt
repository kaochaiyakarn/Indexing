type david turner philip wadler university glasgow wadler dcs glasgow ac uk christian mossin university copenhagen mossin diku dk 
number useful optimisations enabled determine value accessed 
extend hindley milner type system uses yielding program analysis determines values accessed 
analysis handle higher order functions data structures admits principal types terms 
previous analyses prove analysis sound respect call need reduction 
call name reduction provide accurate model value lazy evaluation duplicates shared real implementation 
type system easily modified analyse usage call value language 
describes method determining value 
method simple modification hindley milner type system 
type labelled indicate corresponding value may possibly times 
type system number applications program transformation determined variable accessed may safely inline expression bound variable reducing efficiency 
particular determine safe inline expression body function 
avoiding closure update implementations lazy languages updates share evaluation closures 
determined closure accessed submitted th international conference functional programming computer architecture san diego california june 
supported epsrc gr save space linear types esprit esprit danish technical research council 
computing science department university glasgow glasgow qq scotland 
diku university copenhagen copenhagen denmark 
performed mossin visiting university glasgow 
need overwrite closure result evaluation 
enabling data structure update determined structure cons cell array accessed structure may safely updated place 
application areas received considerable attention second attention 
quite surprising expression inlining central wide range program transformations 
particular method provides sound basis number transformations previously dealt ad hoc manner glasgow haskell compiler solution problem attempting extend deforestation higher order 
previous analyses determine value call name wright baker finch wb clack cc call need launchbury lau marlow mar 
call name analyses proved sound suited optimisation lazy languages 
analysis call need analysis proved sound provides accurate information call need analyses 
proof soundness operational semantics launchbury lau call need calculus ariola :10.1.1.23.4385
type system ideas taken linear logic girard gir successor logic unity gir 
turns convenient linear logic 
connections traced companion relates linear logic call calculus ariola modify hindley milner type system hin dm attaching uses types :10.1.1.29.6130:10.1.1.29.6130
type judgements include constraint set relating uses similar constraint sets relating subtypes mitchell mit mit 
hindley milner system algorithm determines principal type expression 
representing usage information type annotations provides convenient mechanism communicating usage information module boundaries typed languages haskell import type information modules 
small modification analysis enables determine variables exactly opposed making suitable call value opposed call need evaluation 
problem examples may help illustrate nature problem solved 
wish attach uses values 
indicates value indicates value may number times 
consider 
example 
safe replace body outer 
safe replace body inner resulting program compute twice 
type system attaches argument depends crucially call 
call name computed twice regardless 
call name analysis attach equivalent showing analyses suited purpose 
glance may child play determine value call need 
surely variable appears program value bound 
fact case 
consider 
example 
appears body outer replacing unsafe resulting program compute twice 
type system attaches consider 
example 
safely replace occurrence may require moment thought convince oneself case 
example sufficiently difficult analyses proposed launchbury lau marlow mar overly conservative effect attach type system attaches call need operational semantics call proposed launchbury lau call lambda calculus ariola :10.1.1.23.4385
correspondence approaches shown 
launchbury rules include explicit treatment closure update 
modifying rules allow closures non updating verify type system avoid unnecessary closure updates 
soundness type system established showing satisfies subject reduction property applying call need reduction term leaves type unchanged including type information regarding usage 
launchbury restricts functions applied variables ariola allow functions applied arbitrary expressions 
explain section difference approaches significant chosen implementation glasgow haskell compiler closely stg machine peyton jones pey 
adopt launchbury syntax influenced haskell compiler stg machine adapt results ariola 
program transformation want program transformation basis efficient compilation functional language important transformation preserves meaning transformed program executes fast original 
consider church beta rule rule eliminates application step bad may duplicate computation 
particular computation may duplicated call need calculus ariola addresses problem modifying rule rule number rules manipulating allow safely transform programs risk duplicating 
number transformation useful safe part call need calculus 
important beta rule safe 
rule safe function 
transformations extensively glasgow haskell compiler 
safety ensured ad hoc techniques 
ad hoc techniques adequate unsafe version second rule allowed result compiler bootstrapped slowed third sp 
example program transformation deforestation algorithm wad 
order ensure safety algorithm requires variables 
definition easy deforestation applies order language 
attempts apply deforestation higher order mw hindered lack suitable definition higher order 
provides definition 
outline organised follows 
section introduces language semantics 
section describes fundamentals type system 
section discusses principal types polymorphism 
section summarises call need reduction rules 
section discusses adapt analysis appropriate call byvalue language 
section describes related 
section concludes 
var jxj hh hh hh ix hh var jxj hh hh hh ix hh var rec hh letrec hh letrec abs hhi hhi app hh hh hh hh hh hh int plus hh hh hh hh hh hh nil hhi nil hhi nil cons hhi cons hhi cons case nil hh hh nil hh hh hh case fnil cons hh case cons hh hh cons hh hh hh case fnil cons hh fresh hh hh hh hh letrec fresh hh letrec vi hh hh letrec hh natural semantics language syntax operational semantics call need lambda calculus extended integers lists recursion 
sake brevity constructs omitted difficulty including 
terms syntax language 
syntax launchbury lau arguments applications cons restricted variables 
variables values nil cons terms case fnil cons letrec trivial translate terms standard syntax application cons restricted syntax example translate 
syntax closely resembles stg language pey 
syntax differs launchbury respects 
distinguish non recursive recursive letrec bindings second allow single binding letrec mutually recursive bindings third restrict definiens letrec value 
third restriction required permit second reducing single recursive binding letrec may introduce mutually recursive binding letrec restricted letrec powerful define recursive functions cyclic lists 
changes typing reduction rules need complex instance see ariola reduction rules required mutual recursion :10.1.1.23.4385
feel slight loss expressiveness language justified considerably simpler presentation possible 
annotations operational semantics section reduction rules section require bound variables annotated uses type rules sections allow infer annotations 
bound variable annotated jxj 
jxj evaluation jxj may number times 
annotation required variables 
heaps heap abstracts state store point computation 
consists sequence bindings associating variables terms 
heaps bn bindings letrec distinguish non recursive bindings written recursive bindings written letrec 
configuration pairs heap term written hhi expression heap refer variables bound similarly value heap letrec refer variable variables bound evaluation rules presents natural semantics lazy evaluation closely resembles launchbury 
key difference evaluation bound variable depends annotation 
evaluation rules form hh hh meaning evaluating expression initial heap returns value final heap rule var evaluates variable 
look expression bound variable heap evaluates variable longer removed heap 
rule var evaluates variables may times 
look expression bound variable heap evaluates update heap bind resulting value 
note expression heap refer variables 
practice update required var may significant cost var avoids cost 
rule var rec evaluates recursively bound variables look value bound variable heap 
simpler binds term letrec bind value 
rule abs evaluates abstractions trivial lambda expression value 
rule app evaluates applications evaluate function yield lambda abstraction evaluate body abstraction argument substituted bound variable abstraction 
rules int plus easy 
rules nil cons trivial nil cons values 
case rules straightforward 
rules letrec similar creating new binding heap 
rules fresh name appearing expression heap 
observe bindings added heap fresh variables trivially follows bindings heap unique 
property quite trivial launchbury formulation renaming occurs variable access evaluation binding construct 
type system type system indicates values accessed 
simplicity type system monomorphic extensions allow polymorphism discussed section 
uses types annotated uses 
type annotated value type annotated 
stand upper bounds number times value 
enable type inference allow variables ranged 
range uses 
uses constraints theta record constraints generated typing rules 
define theta set constraints form fk 
rules define ordering uses parameterised constraint set theta omega theta theta refl theta taut fk theta theta types types include type variables range function types integers list types 
types int type indicates type variable ranges types type denotes functions type type times int denotes integer values times denotes lists elements type list accessed times 
write attached type defined ja impose formedness condition list types type formed theta words list accessed times elements accessed times list 
similar restriction appears type systems guzm hudak gh wadler wad wad 
contexts context associates type variable may appear term represented list entries form contexts gamma delta xn variable context distinct 
gamma say gamma delta contexts containing variables common write gamma delta denote concatenation contexts 
extend ordering uses applies complete contexts written theta gammaj defined theta jx xn iff theta consider constraint gammaj 
constraint placed gamma 
entry gamma definition implies 
var theta exch gamma delta theta gamma delta theta cont gamma theta gamma theta weak gamma theta gamma theta abs gamma theta theta gammaj gamma theta app gamma theta delta theta gamma delta theta int theta int plus gamma theta int delta theta int gamma delta theta int nil theta nil cons gamma theta delta theta gamma delta theta cons case gamma theta delta theta delta theta gamma delta theta case fnil cons gamma theta delta theta gamma delta theta letrec gamma theta delta theta gamma delta theta letrec type rules typing judgements typing judgements take form gamma theta indicating context gamma constraints theta term type type rules shown 
usual consist zero hypotheses line 
type rules quite similar usual rules lambda calculus concentrate explaining unusual features structural rules constraints uses 
structural rules manipulation contexts carefully designed variable indicated presence structural rule contraction cont introduces 
terms may evaluated typed different contexts combined seen rules app plus cons case 
variables context distinct way variable cont rule 
rule substitution replaces occurrences placeholder variables term variable type placeholders annotated usage 
instance type tree term var int theta int var int theta int plus int int theta int cont int theta int expect variable 
variable result type may instantiated depending result addition 
variable indicated presence structural rule weakening weak 
rule places constraints 
number times compatible 
weakening rule may helpful devising type system strictness analysis certainly important usage analysis call value languages see section 
structural rule exchange exch simply indicates order bindings context irrelevant 
contraction weakening exchange rules syntax directed pose impediment existence principal types easy devise algorithm determines contraction weakening variable placing rules close root type tree possible 
subtlety manipulation contexts revealed case rule 
case rule term evaluated evaluated 
sense type different context type context 
instance valid typing 
xs int int theta case xs fnil cons xs yg int appears twice term labelled correct branch case term evaluated 
term rules rule abs constraint gammaj reflects fact function abstraction may accessed free variable abstraction may accessed 
consider example 
appears twice 
free variable lambda abstraction turn forced 
despite appearing term labelled accessed twice course evaluation 
note nil cons implicitly include condition theta global formedness condition list types see section 
term cons xy create closures 
refer variables thought pointers closures 
consider example term cons twice 
cons case delta delta delta case delta delta delta typing rules give cons type turn forces type type expected may accessed twice 
plus rule deserves explanation 
addition operator strict result evaluating simply integer constant refer part results evaluating usage assigned expression need depend usages similar argument applies app rule application strict argument 
recursion recursive definition single access variable may allow additional accesses recursion letrec bound variable body letrec bound expression requires implicit contraction rule letrec type recursively bound variable 
note mean recursion involved uses degenerate 
function defined recursively argument result function may 
function append lists 
letrec append xs zs case xs nil zs cons ys append ys zs cons asg delta delta delta principal type set constraints fjg fjg fkg constraints fjg fjg generated global formedness condition list types indicates argument result list accessed elements lists may accessed 
constraint fkg generated abs rule indicates append partially applied argument list may accessed 
instance type int int int indicating append take lists may multiple pointers return list may multiple pointers 
instance int int int indicating append may applied multiple times lists pointer returning list pointer 
attaching second arrow guarantees create extra pointers argument list creating duplicating partial application 
version append possible generate code reuses cons cells argument producing result 
ordinary rules simply typed lambda calculus derived simply omitting annotations constraints rules 
follows term typeable system typeable simply typed lambda calculus 
conversely term typeable simply typed lambda calculus typeable system just take uses 
principal types polymorphism discussing means type principal term need define type instance type 
definition instantiation closely related mitchell definition instantiation type system simple subtypes mit mit 
instantiation substitution pair finite maps 
component maps type variables types maps variables uses 
type substitutions ts fa 

ng substitutions fk 
kn 
ng substitutions ts type variable replaced type new type usage 
derive instance typing derivation gamma theta applying substitution gamma replacing theta stronger constraint set theta behaviour types contexts defined usual way 
define conditions theta stronger theta substitution theta theta iff fk theta theta straightforward induction structure typing derivations proves substitution lemma 
lemma type substitution gamma theta theta theta gamma theta unification easy modify robinson unification algorithm unifies types containing usage information 
unify usage variable usage need update current constraint set 
suppose theta constraint set flg fmg fmg fg unify types int get substitution fa 
int fj 
kg unified modify constraint set theta merges constraints fl mg fmg fg similarly unify types int get substitution fa 
int fj 
instantiated turn forces instantiate 
constraint fmg simplifies eliminated maximal usage 
unify usage variables usage variables derive new constraint set explained 
fail produce new constraint set unify variables instance unify generating unsatisfiable constraint 
fortunately easy show type inference need constraints 
principal types term principal type judgement gamma theta type judgements instances 
proposition principal types gamma theta exist gamma theta gamma theta gamma theta gamma theta exists substitution gamma gamma theta theta result proved usual exhibiting algorithm computes principal types 
annotations operational semantics section reduction rules section require bound variable annotated jxj 
annotations may inferred follows 
determine principal typing term corresponding principal type derivation 
typing include constraint set theta may choose substitution variables fg theta 
naturally choose substitution maps variable yields best usage information 
variables set wonder bother constraint sets 
moment thought show need constraint information order infer principal typing term principal typing subterms 
general usage subterm depends context appears constraints variables allow propagate information 
polymorphism step terms introduce polymorphism usual way 
possibilities 
allow polymorphism type variables 
instance polymorphic type append constraints 
allows append lists different types occurrence append program usage labelling 
instance labelling indicated list passed append code append optimised reuse cons cells list 
crude analysis sort may suitable purposes removing unnecessary closures 
existing analyser purpose interpretation similar limitation proved reasonably effective mar 
second possibility allow polymorphism type variables 
instance polymorphic type append fjg fjg fkg order maximise potential optimisation compiler needs generate different versions append different instantiations variables 
similar technique haskell compilers specialise code involving overloaded functions experience date suggests feasible necessarily lead explosion code size aug jon 
situations specialising append different uses consider having just version append interpret variables additional arguments append function enabling run time selection behaviour append 
trade possibilities similar trade monovariant polyvariant binding time analysis partial evaluation 
experimentation necessary better understand strengths weaknesses approach 
reduction subject reduction previously described semantics language launchbury operational semantics call need 
give alternative characterisation semantics modification call need calculus ariola working framework calculus reduction rules simplifies proof subject reduction importantly gives set rules compiler optimise programs danger duplicating returning wrong result 
show usage information enables additional safe reduction rules formulated allowing optimisation values known 
reduction rules call need calculus ariola closure created argument function application operational semantics launchbury lau closure created appearance contexts letrec letrec case fnil cons case fnil cons case fnil cons cg contexts case fnil cons call need contexts case nil fnil cons case cons fnil cons jvj fe jxj letrec letrec letrec letrec fv letrec fv call need reductions :10.1.1.23.4385
difference significant means model ariola may create closures model launchbury 
example consider 
letrec xs case xs fnil cons xs xs yg xs xs model launchbury creates closures original call element list contrast model ariola creates extra closures recursive call fortunately straightforward adapt calculus ariola correspond model launchbury 
required contextual forms reduction rules 
context term hole 
note hole appear argument application cons restricted variables replaced arbitrary terms 
context hole strict position function application selector case argument plus definiens 
rules compatible closure rules shown 
context capture free variables disallowed context bind rules containing context free variable rules containing rules containing correspond floating rules ariola necessary guarantee closed term reduced weak head normal form 
key change ariola involves rule allows substitution value jxj rule safe value substitution duplicate computation 
order guarantee reductions preserve types restrict rule case free variables may duplicate variable resulting ill typed term 
adequate restriction require implies free variables reader may easily check important cases function abstraction cons 
case allow substitution just value expression fe jxj substitute expression variable appears argument application cons modified form substitution written fe 
definition fe standard clauses fe xg fe xg cons cons note substitution rules floating rules introduce possible loops reduction sequences 
example cons cons cons note compilers glasgow haskell compiler sets reductions containing loops 
preferable reduction system loops note interesting topic 
confluence soundness completeness results straightforward adaptations results ariola system confluent sound complete respect launchbury operational semantics 
proposition confluence exists term heap operational semantics term configuration corresponds term hhi defined follows 
hi hhi hi letrec hhi proposition soundness hhi hh hhi hh proposition completeness hhi hh exist hhi hh hh hh soundness completeness results take simpler form terms type integer 
corollary soundness completeness exists heap hhi hh hhi nb checked detail proof soundness straightforward adaptation proof ariola believe proofs confluence completeness straightforward adaptations proofs checked detail 
subject reduction types preserved reduction 
proposition subject reduction gamma theta gamma theta proof straightforward verifying rule separately structural induction terms compatible closure 
combining propositions yields soundness result type system respect operational semantics 
corollary operational subject reduction theta hhi hhi hh theta hh additional transformations useful reduction rules add appearing 
instance helpful reduction fv avoids creation closure say evaluated run time 
way note rule instance fv helpful say simplification reduces value 
glasgow haskell compiler extensive reductions san 
explains bothered existence loops reduction rules noted previously 
useful additional transformations depend usage information 
prime example reduction jy ej requires adding annotation terms assume abstraction jx ej annotated write jx ej 
information crucial safety reduction duplicate computation jy ej 
reduction extensively glasgow haskell compiler 
turns particularly important form deforestation glp 
analysis call value calculi analysis easily adapted call value calculi 
calculi interested variables exactly 
example exactly body safely transform hopefully reducing maximum amount storage program 
transformation clearly unsafe expression non terminating 
transformed non terminating program terminating program 
changing type system determine value exactly easy 
simply change weakening rule weak gamma gamma interpret meaning value exactly 
transforms type system closer linear type system 
companion elaborate connections linear logic call value reduction affine logic call need reduction :10.1.1.29.6130:10.1.1.29.6130
conjecture usage program transformation presence side effects handled combining usage analysis effect system luc lg jg 
effect systems distinguish side effecting computation purely functional computation 
related linear logic type system ideas taken linear logic girard gir successor logic unity gir 
companion describes embedding call need calculus linear logic underlies type system :10.1.1.29.6130
interested readers referred survey related linear logic 
call need analyses aware analyses attempt determine value call need evaluation 
type system due launchbury lau interpretation due marlow mar 
note points comparison 
analyses possess proof soundness 
second system derives precise information see example section 
third analyses type system detect case closures omitted zero usage analysis simplify usage constraints 
step implement analysis glasgow haskell compiler allowing compare directly marlow 
observing analysis performs real programs test omitting zero usages significantly impact 
call name analyses aware analyses determine usage information values call name due wright baker finch wb due clack cc 
type systems argued sound 
note points comparison 
choosing call name evaluation callby need prevents fairly simple optimisations discovered 
instance example section variable call need system discovers twice call name 
experience suggests difference significant situation encountered example fairly common 
second satisfied limit attention call name system provides especially useful analysis 
wright baker finch system discovers information function types annotated natural numbers indicate number times function uses argument level accuracy renders type system undecidable 
clack system discovers little information determine argument zero times exactly determine argument helpful problems interested 
third system systems provide information value useful strictness analysis 
question distinction call need call name irrelevant may explain authors systems willing settle call name analysis 
data structure update number analyses place update data structures proposed including schmidt sch hudak hud baker bak hudak guzm gh wadler wad wad 
systems especially suited enabling program transformations eliding closure update call need languages 
conversely system best possible place update determine pointer structure 
purposes better weaker criterion allows multiple pointers reading structure ensures pointer structure updated place 
simple type system determine value presence higher order functions data structures 
analysis tailored precise reduction strategy glasgow haskell compiler yields accurate results analyses assume call name reduction 
proved type system sound respect launchbury natural semantics lazy evaluation provided safe reduction rules compiler transform programs risking duplicating 
prototype type inference algorithm implemented 
step incorporate type system glasgow haskell compiler 
enable measure effect optimisations large haskell programs 
glasgow haskell compiler uses explicitly typed core language express program transformations 
adding usage information core language type system conveniently provide information optimiser enabling additional program transformations allowing code generator omit unnecessary closure updates 
annotated types provide convenient way communicating usage information module boundaries simply add usage information user level type information exported module 
intend explore type system enables place update data structures 
interesting question done automatically compiler control user extent type system acts effective mechanism user understand control optimisations 
ideas described grew collaboration glasgow functional programming group especially simon peyton jones john launchbury andy gill simon marlow partain patrick sansom andre santos 
ii working group provided helpful feedback especially patrick cousot sebastian hunt torben mogensen dave sands yan mei tang 
ariola felleisen odersky wadler :10.1.1.23.4385
call need lambda calculus 
symposium principles programming languages acm press san francisco california january 
aug augustsson implementing haskell overloading 
functional programming languages computer architecture copenhagen denmark june 
acm press 
bak baker unify conquer garbage updating aliasing functional languages 
conference lisp functional programming acm press nice june 
cc clack analysing resource calculus type inference acm sigplan workshop partial evaluation program manipulation 
dm damas milner principal type schemes functional programs 
proceedings th acm symposium principles programming languages albuquerque january 
gir 
girard linear logic 
theoretical computer science 
gir 
girard unity logic 
annals pure applied logic 
gh guzm hudak single threaded polymorphic lambda calculus 
proceedings th ieee symposium logic computer science philadelphia pa june 
glp gill launchbury peyton jones short cut deforestation 
functional programming languages computer architecture copenhagen denmark june 
acm press 
hin hindley principal type scheme object combinatory logic 
trans 
am 
math 
soc december 
hud hudak semantic model counting abstraction 
proceedings acm conference lisp functional programming cambridge mass august 
jon jones partial evaluation dictionary free overloading 
technical report tr computer science department yale university april 
jg pierre jouvelot gifford algebraic reconstruction types effects 
acm symposium principles programming languages 
lau launchbury gill hughes marlow peyton jones wadler 
avoiding unnecessary updates 
glasgow workshop functional programming ayr july 
springer verlag workshops computing series 
lau launchbury natural semantics lazy evaluation 
proceedings th acm symposium principles programming languages charleston january 
luc lucassen types effects integration functional imperative programming 
phd thesis mit laboratory computer science 
lg lucassen gifford polymorphic effect systems 
acm symposium principles programming languages 
mar marlow update avoidance analysis interpretation 
glasgow workshop functional programming ayr july 
springer verlag workshops computing series 
mit mitchell coercion type inference summary proceedings th acm symposium principles programming languages january 
mit mitchell type inference simple subtypes 
journal functional programming july 
odersky turner wadler :10.1.1.29.6130
call name call value call need linear lambda calculus 
submitted th international conference mathematical foundations programming semantics new orleans louisiana april 
available ftp ftp dcs glasgow ac uk directory pub glasgow fp authors philip wadler files dvi ps 
mw marlow wadler deforestation higher order functions 
glasgow workshop functional programming ayr july 
springer verlag workshops computing series 
pey peyton jones spineless tagless machine fourth international conference functional programming languages computer architecture 
imperial college london pp 

acm addison wesley september 
pey peyton jones implementing lazy functional languages stock hardware spineless tagless journal functional programming april 
peyton jones hall hammond partain wadler glasgow haskell compiler technical overview 
joint framework information technology technical conference digest march 
sch schmidt detecting global variables denotational specifications 
acm trans 
programming languages systems 
san santos peyton jones glasgow workshop functional programming ayr july 
springer verlag workshops computing series 
sp sansom peyton jones time space profiling non strict higher order functional languages 
nd acm symposium principles programming languages san francisco january 
wad wadler deforestation transforming programs eliminate trees theoretical computer science 
wad wadler linear types change world 
broy jones editors programming concepts methods sea israel april 
north holland 
wad wadler linear logic 
conference partial evaluation semantics program manipulation pepm acm press new haven connecticut june 
wb wright baker finch usage analysis natural reduction types 
workshop semantic analysis 

