symbolic model checking states burch clarke mcmillan school computer science carnegie mellon university dill hwang stanford university different methods devised automatically verifying finite state systems examining state graph models system behavior 
methods depend decision procedures explicitly represent state space list table grows proportion number states 
describe general method represents state space symbolically explicitly 
generality method comes dialect mu calculus primary specification language 
describe model checking algorithm mu calculus formulas uses bryant binary decision diagrams represent relations formulas 
show new mu calculus model checking algorithm derive efficient decision procedures ctl model checking satisfiability linear time temporal logic formulas strong weak observational equivalence finite transition systems language containment finite automata 
fixed point computations decision procedure complex concisely expressed mu calculus 
illustrate practicality approach symbolic model checking discussing verify simple synchronous pipeline circuit 
research sponsored part defense advanced research projects agency dod arpa order 
national science foundation sponsored research effort contract numbers ccr mip 
third author supported bell laboratories ph scholarship 
fourth fifth authors supported cis seed research 
decade apparent finite state systems verified automatically examining state graph models system behavior 
number different methods proposed temporal logic model checking language containment algorithms automata conformation checking trace theory testing various equivalences preorders finite ccs models 
methods uses different computational model different notion verification rely algorithms explicitly represent state space list table grows proportion number states 
number states model may grow exponentially number concurrently executing components size state table usually limiting factor applying algorithms realistic systems 
technique combating state explosion problem represent state space symbolically explicitly 
cases intuitive complexity state space number states indicate 
systems large number components regular structure suggest corresponding regularity state graph 
consequently may possible find sophisticated representations state space exploit regularity way simple table states 
candidate symbolic representation binary decision diagram bdd bryant widely various tools design analysis digital circuits 
bdds prevent state explosion cases allow practical systems extremely large state spaces verified systems impossible handle explicit state enumeration methods 
empirical results show method applied practice verify models excess states 
explicit state enumeration methods described literature limited systems reachable states 
groups applied idea different verification methods 
coudert madre describe bdd system showing equivalence deterministic moore machines 
system performs symbolic breadth execution state space determined product machines 
model generalized models deterministic moore machines notions verification strict equivalence 
bose fisher described algorithm ctl model checking applicable synchronous circuits 
method unable handle asynchronous concurrency properties infinite computations liveness fairness 
methods iterative computation fixed points 
clear numerous additional papers generated applying technique different verification methodologies 
goal provide unified framework results showing seen special cases symbolic evaluation mu calculus formulas 
technique reducing state explosion problem exploit concurrency 
actions program statements said concurrent executing xy equivalent executing yx 
considering order concurrent actions considering actions unordered state explosion reduced 
examples techniques stubborn sets method valmari trace automaton method godefroid wolper godefroid godefroid wolper behavior machines method probst li time petri nets method yoneda 

methods limited address source state explosion problem interleaving concurrent actions 
effective example synchronous finite state machines involve interleaving actions 
symbolic model checking technique hand effective dealing state explosion synchronous case demonstrated section 
symbolic methods shown effective asynchronous finite state machines burch burch 
practice state explosion results interleaving handled efficiently symbolic methods 
describe syntax semantics dialect mu calculus model checking algorithm mu calculus formulas uses bdds represent relations formulas 
show new model checking algorithm derive efficient decision procedures ctl model checking satisfiability linear time temporal logic formulas strong weak observational equivalence finite transition systems language containment finite automata 
case mu calculus formula directly derived instance problem 
formula evaluated automatically eliminating need describe complicated fixed point computations decision procedure 
illustrate practicality approach symbolic model checking discussing verify simple synchronous pipeline circuit 
binary decision diagram binary decision diagrams binary decision diagrams bdds canonical form representation boolean formulas bryant 
substantially compact traditional representations conjunctive normal form disjunctive normal form 
bdds application computer aided design tasks including symbolic verification combinational logic 
bdd similar binary decision tree structure directed acyclic graph tree total order placed occurrence variables traverses graph root leaf 
consider example bdd 
represents formula variable ordering assignment boolean values variables decide assignment satisfies formula traversing graph root branching node assigned value variable labels node 
example assignment ha leads leaf node labeled assignment satisfies formula 
bryant showed unique bdd boolean function variable ordering 
size bdd representing function depends critically variable ordering 
bryant described efficient algorithms basic operations bdds computing bdd representations bdds formulas operations required algorithms follow quantification boolean variables substitution variable names 
bryant gives algorithm computing bdd restricted formula form restriction algorithm allows compute bdd formula boolean variable formula substitution variable variable formula denoted fhv wi accomplished quantification fhv wi 
efficient algorithms possible case quantification multiple variables multiple renamings 
case efficiency depends ordering variables bdds sides substitution 
bdds viewed form deterministic finite automata kimura clarke 
argument boolean function identified set strings represent valuations function true 
finite language finite languages regular minimal finite automaton accepts set 
automaton provides canonical representation original boolean function 
logical operations boolean functions implemented set operations languages accepted finite automata 
example conjunction corresponds language intersection 
standard constructions elementary automata theory compute operations languages 
mu calculus number different versions mu calculus proposed 
notation park 
shown version mu calculus express property expressible versions mu calculus cleaveland emerson lei kozen stirling walker 
mu calculus similar standard order logic changes 
simplifying assumption include function symbols constant symbols 
relational symbols replaced relational variables 
formulas form 
relational variable analogous relational symbol order logic relational term forms 
forms 
formula individual variables 
free need case 
free variables need contained set form relational term relational term arity relational variable arity term represents fixed point insure fixed point exists require formally monotone respect means free occurrences fall number negations 
example directed graph subsets mu calculus formula true vertex reachable step vertex mu calculus relational term represents smallest set set vertices reachable description syntax mu calculus formalized follows 
assume finite signature symbol individual variable relational variable positive arity 
recursively define syntactic categories formulas relational terms 
formulas form 

ary relational term 
individual variables free 
formulas individual variable relational terms arity form 
ary relational variable 

formula 
distinct individual variables 
ary relational variable ary relational term formally monotone respect formal definition individual variable relational variable bound free formula relational term standard 
note individual variables bound existential quantifier abstraction operator relational variables bound fixed point operator assume treated abbreviations usual manner 
ary relational terms write abbreviation 

write abbreviation 


relational term introduced abbreviation denotes greatest fixed point ary relational term denotes relational term formed substituting free instances truth falsity formula determined respect model non empty set called domain model relational variable interpretation individual variable interpretation 
specifically individual variable value ary relational variable ary relation set domain model finite 
domain id ir set possible individual variable interpretations set possible relational variable interpretations respectively 
semantic function maps formulas elements 
ftrue falseg ary relational terms elements 
denotes set ary relations semantic function defined inductively structure formulas relational terms 
define formulas 
ary relational term 
true hi 
ir formulas ir hz ei 
define relational terms 
cases 
fhe 
hz 
subset fixed point inclusion ordering equation ir hp zi clear elementary fixed point theory fixed point exists formally monotone respect model formula write indicate true semantics 
model checking algorithm model checking process determining formula true model section model checking algorithm mu calculus uses bdds internal representation 
describe algorithm boolean domain 
show model finite domain encoded model boolean domain model checking algorithm fully general 
algorithm divided functions bdd recurse structure formulas relational terms respectively 
assume syntactic correctness formula checked including formal monotonicity requirement 
value relational variable relational interpretation represented bdd set place holder dummy variables signature refer variables stand ith argument relation 
ary relation represented bdd said hold arguments 
interpretation hd 
satisfies bdd 
practical instances representation relation compact enumeration elements 
function bdd takes arguments formula relational variable interpretation assigns values free relational variables returns bdd property bdd satisfied interpretation individual variables satisfied model 
case definition treats individual variables formulas possible domain boolean 
function returns bdd true 
cases definition derive directly respective semantic definitions bdds mu calculus formulas require explanation 
algorithms described bryant 
implementation terms disjunction restriction discussed section 
case application relational term uses function find representation relational term interpretation substitutes argument variables 
place holder variables 
function takes arguments relational term relational interpretation returns bdd represents relational term manner described 
relational term may free individual variables bdd may contain place holder variables individual variables logic 
interpretation individual variables interpretation place holder variables satisfied relation ir function bdd formula rel interp bdd case individual variable return form return bdd bdd form return bdd form return bdd form 
return hd 
case function rel term rel interp bdd case relational variable return form 
return bdd hx 
form return fixedpoint case function fixedpoint rel var rel term rel interp bdd bdd hp zi return return fixedpoint mu calculus model checking algorithm 
contains tuple hi 
arity case definition relational variable simply returns bdd representation variable interpretation second case lambda abstraction produces bdd place holder variables 
substituted variables 
interesting case involves fixed point operator find fixed point relational term respect relational variable standard technique finding fixed point monotonic function finite domain 
computes fixed point series approximations empty relation represented bdd constant 
compute interpretation evaluating relational term domain finite formally monotone respect series converge fixed point 
convergence detected note testing convergence easy testing bdds equivalence constant time operation 
performance improvement realized fixed point algorithm observing subterms subformulas free variable change evaluation iteration 
evaluations terms need recomputed 
reason useful possible rewrite formulas fixed point subterms contain fewer free relational variables 
order model checking non boolean finite domain encoding function oe maps boolean vector length element function surjective need injective 
minimum possible value dlog encodings larger number bits possible 
encoding construct corresponding model boolean domain 
ary relation symbol model relation arity mn constructed rule 
oe 
oe shorthand boolean variables encoding order check truth formula replace individual variable formula vector boolean valued variables check resulting formula model homomorphism guarantees choice encoding function oe ordering bdd variables substantial impact efficiency model checking algorithm 
digital circuits choice encoding generally trivial components state boolean valued 
iterative squaring possible rewrite mu calculus formula relational term analyzed efficiently model checking algorithm 
section describe systematic method rewriting relational terms called iterative squaring transformation result exponential reduction number iterations necessary compute fixed points 
showing iterative squaring transformation applied particular relational term 
describe general conditions transformation applied 
transitive closure relational term describes set vertices reachable directed graph set vertices see section 
model checking algorithm applied requires iterations compute set vertices reachable path length shorter 
number iterations linear diameter subgraph set edges connecting vertices standard technique rewrite model checking algorithm converges faster 
step compute transitive closure binary relation computed model checker iterations computation theorem proved induction theorem vertices non negative integers number iterations necessary compute logarithmic diameter 
diameters roughly usual case practice leads significant reduction number iterations needed compute iterative squaring impractical bdds needed represent intermediate computations large 
general transformation consider ary relational terms form ary relational term 
restrict form shorthand 
relational terms free variable 
may overly restrictive require terms form 
nearly mu calculus terms specifications practice written form 
relational term analogous relational term described 
recall represented set set vertices reachable graph 
analogy clear set tuples domain analogy represents set vertices reachable re express terms transitive closure allows iterative squaring compute fixed point 
define relational term transitive closure set vertices reachable expressed observation provides intuition proof theorem 
theorem 
straightforward relationship greatest fixed points 
claim reached cycle graph formula true cycle 
assuming domain finite theorem theorem proof 
straightforward tedious show fixed point omit argument 
remains show greatest fixed point suppose element follows element holds 
predecessor condition follows immediately second condition exists hold 
continue process generating sequence 
holds sequence terminates infinite 
terminating case holds path witness infinite case exist xm assumed domain finite 
case holds common value xm holds implying shown cases greatest fixed point 
iterative squaring theorems applied terms fixed point operators 
example consider directed graph described earlier 
relational term ii represents set vertices path starting passes vertex infinitely 
theorems twice show equal noted mu calculus relational terms remainder computed iterative squaring technique 
result number fixed point iterations logarithmic cardinality domain 
computation tree logic computation tree logic ctl propositional branching time temporal logic clarke 
usual forward time operators linear temporal logic globally invariantly nexttime directly preceded path quantifier 
path quantifier computation paths computation path 
typical ctl operators holds state provided holds points possible computation paths starting state eff holds state provided computation path holds point path 
description syntax semantics ctl specify existential path quantifiers directly treat universal path quantifiers syntactic abbreviations 
set atomic propositions 
atomic proposition formula ctl 

ctl formulas fug egf semantics ctl formula defined respect labeled state transition graph kripke structure set atomic propositions finite set states function labeling state set atomic propositions theta total transition relation set initial states 
path infinite sequence states 
true propositional connectives usual meanings negation conjunction 
propositional operators defined terms 
nexttime operator 
true state successor true operator 
fug true state exists path starting initial prefix path holds state prefix holds states prefix 
operator express invariance property time 
egf true state path starting holds state path 
syntactic abbreviations ctl formulas ffl ex means holds successor states current state hold state 
ffl eff means path exists state path holds possible 
ffl aff means path exists state path holds inevitable 
ffl ef means path node path holds holds invariantly paths 
ffl fug gu means path exists initial prefix path holds state prefix holds states prefix holds holds paths 
ctl model checking checking ctl formula true kripke structure reduced checking mu calculus formula true structure 
reduction provides obvious interpretations interprets atomic proposition unary relation true 
individual variable interpretation relevant defined free individual variables 
reduction ctl formula mu calculus formula best understood viewing ctl formulas abbreviations mu calculus relational terms 
view ctl formula abbreviation mu calculus relational term true state true 
temporal operators represents relational term exactly syntax remains consider ctl formulas form egf fug 
remainder identify ctl formula mu calculus relational term represents 
ctl formula true state exists state true true 
define syntactic abbreviation mu calculus relational term 
mu calculus expansions eu characterization ctl operators fixed points predicate transformers 
fixed points computed direct iteration iterative squaring 
fixed point characterization derived identity egf straightforward show egf satisfy equation greatest fixed point equation 
egf operator eu fixed point characterization similar 
time characterization fixed point corresponding predicate transformer greatest fug exe fug ctl formula transformed mu calculus relational term necessary construct mu calculus formula true true states described section mu calculus model checking algorithm requires encoding domain terms boolean domain 
mu calculus formulas derived ctl formulas convenient encode state domain set atomic propositions true state 
requires distinct states labeling atomic propositions 
fairness constraints consider issue fairness 
cases interested correctness fair computation paths 
example may wish consider computations resource continuously requested process eventually granted process 
type property expressed directly ctl 
order handle properties modify semantics logic slightly 
fairness constraint arbitrary ctl formula 
path said fair respect set fairness constraints constraint holds infinitely path 
path quantifiers ctl formulas restricted fair paths 
remainder section describe translate ctl formulas mu calculus relational terms reflect modified semantics 
assume fairness constraints set ctl formulas 
write ec fug example denote temporal operators fairness constraints consider formula true state exists path holds globally invariantly formula holds infinitely 
set states largest set satisfying conditions 
states satisfy 
path length greater state satisfying states path satisfy easy show conditions hold state set infinite path true formula holds infinitely 
gives characterization exe fu unfair ctl operators right side equations translated mu calculus relational terms described 
note case nested fixed point eu abbreviation fixed point 
cases ec fug bit simpler 
define set states fair computation ecg true ecx ex ec fug fu propositional linear temporal logic tableau method testing satisfiability propositional linear temporal logic ptl formulas manna wolper implemented translating ptl formula mu calculus formula true ptl formula satisfiable 
gives symbolic procedure advantage cases large tableau represented relatively small bdd 
fujita fujisawa describe verification procedure linear temporal logic uses binary decision diagrams represent transition conditions automata derived temporal logic formulas 
represent states automaton explicitly technique suffers state explosion problem 
dialects ptl depending modal connectives defined 
choose small standard dialect 
atomic propositions written 
xf fug ptl formulas 
technique extended easily additional alternative modal connectives 
ctl xf means holds state fug means true state holds 
formalize oe sequence truth assignments atomic propositions oe ith suffix oe oe oe 
semantics ptl formulas defined follows oe iff oe oe iff oe oe iff oe oe oe xf iff oe oe fug iff oe oe tableau associated ptl formula kripke structure atomic propositions represent truth values particular formulas constructed representing tableau symbolically symbolic ctl model checking procedure determine formula satisfiable 
state tableau boolean vector formula associate component state vector 
function ff associates relational term mu calculus ptl formula term represents set states tableau labeled formula function ff defined recursively structure ptl formulas follows ff ff ff ff ff ff ff xf xf ff fug ff ff fug notice formula components state vector ff atomic propositions formulas xg xg subformula subformula call subformulas elementary subformulas el 
elementary formulas tableau reduces number boolean state variables 
elementary subformulas defined recursively follows ptl formulas el fpg el el el el el el xf el el fug fx fug el el transition relation tableau defined elementary formula xf true current state true state 
xg el ff xg ff set initial states tableau set satisfying ff 
formula satisfiable infinite path tableau ffl true initial state ffl subformulas true state eventually true state 
equivalent ctl formula set fairness constraints ff ff occurs fg infinite path satisfying formulas infinitely subformulas case holds forever point remains false 
path satisfying test satisfiability formula proceeds steps 
set elementary formulas computed recursive definition 
symbolic bdd representations computed recursive definition ff 
set fairness constraint formulas constructed 
ctl formula translated mu calculus procedure section 
formula evaluated symbolic mu calculus model checking procedure section determine formula satisfiable 
observational equivalence section describe mu calculus expressing strong equivalence weak equivalence finite transition systems 
possible bdd mu calculus model checking algorithm described earlier deciding equivalences 
finite transition system tuple sigma delta finite set states initial state sigma finite set actions delta theta sigma theta transition relation milner milner 
strong equivalence finite transition systems set actions sigma 
sigma delta sigma delta 
strong equivalence relation written subset theta finite transitions systems said strongly equivalent strong equivalence relation greatest fixed point function thetat thetat set pairs ffl oe delta oe delta oe ffl oe delta oe delta oe 
order compute equivalence bdd mu calculus checking algorithm remains assemble appropriate domain interpretations express condition mu calculus 
domain union sigma assumed disjoint 
relational interpretation consists relations delta delta individual interpretation consists mu calculus relational term oe delta oe delta oe oe delta oe delta oe true element 
strongly equivalent holds 
evaluated bdd model checking algorithm iterative squaring transformation 
weak equivalence distinguished action set sigma relation reflexive transitive closure delta 
true path labeled sequence zero actions 
delta delta oe delta oe weak observational equivalence relation greatest fixed point function thetat thetat set pairs ffl oe delta oe delta oe ffl oe delta oe delta oe 
point translation weak equivalence mu calculus completely analogous translation strong equivalence 
automata discuss symbolic mu calculus algorithms deciding language containment finite automata 
consider buchi automata detail discuss general method applicable large class automata 
finite buchi automaton ordered tuple sigma delta finite set states initial state sigma finite alphabet delta theta sigma theta transition relation acceptance set 
automaton deterministic oe sigma exists exactly delta oe holds 
infinite sequence states 
path buchi automaton exists infinite sequence oe oe oe 
sigma ht oe delta 
sequence oe oe oe 
accepted buchi automaton corresponding path 
goes elements infinitely 
set sequences accepted automaton called language denoted 
determine language buchi automaton contained language buchi automaton alphabet define kripke structure representing product write formula ctl true sequence accepted accepted formula translated mu calculus evaluated symbolic model checking algorithm 
kripke structure theta ffl fp set atomic propositions ffl fhs ig ffl hs iff ffl hs iff ffl hs iff oe sigma hs oe ti delta hs oe delta recall section showed encode kripke structures symbolically 
transition relation kripke structure oe delta oe delta oe atomic proposition identified mu calculus relational term represents set states satisfy similarly identified relational term 
set initial states clarke shown deterministic gfp gfp note formula ctl formula path operators immediately preceded path quantifiers 
equivalent fairness constraint infinitely 
holds formula holds fpg 
results section definitions formula translated mu calculus formula evaluated mu calculus model checking algorithm section 
possible approach language containment problem iterative squaring technique computing transitive closures 
set pairs states kripke structure second state reached passing transitive closure iterative squaring language contained language iff path state hs hs cycle passing ef 
operator ef evaluated iterative squaring 
technique reduces number iterations log diameter transition relation technique ctl model checking fairness constraints number iterations may high square diameter nested fixed point operators 
cases bdds needed construct transitive closure impractically large 
result diameter state space small nested fixed point method may preferable 
deterministic buchi automata express complete class regular languages algorithms language containment expressive types deterministic automata muller automata derived similar fashion results clarke 
algorithms require expressive class fairness constraints considered 
mu calculus algorithms class fairness constraints exist derived ptl satisfiability algorithm results emerson lei 
empirical results bdds testing boolean satisfiability efficient heuristic sense 
satisfiability problem course np complete claim bdds perform certain useful classes boolean functions 
likewise bdds representing relations model checking heuristic value improve asymptotic complexity model checking 
order evaluate method need empirical results showing performance method problems practical interest 
briefly performance results ctl model checking class simple synchronous pipelines include data path control circuitry 
number states systems far large apply traditional model checking techniques obtained encouraging results bdd method 
circuits examples pipeline circuit perform address logical arithmetic operations register file 
complete state register file pipe registers modeled 
pipelines stages operands read register file alu arithmetic logic unit operation performed result written oe oe 


phi phi phi reg 
register bypass path inst 
control register pipe register pipe alu data data addr addr data addr write port read port read port register file block diagram simple pipeline design back register file 
alu register bypass path allows result alu operation immediately operand clock cycle typical risc instruction pipelines 
inputs circuits instruction code containing register addresses source destination operands stall signal indicates instruction available 
occurs operation propagated pipe 
functional block diagram typical pipeline 
vectors boolean values represent binary numbers designs useful introduce notation vectors propositions logical formulas 
extend standard logical modal operators vectors propositions component wise manner 
example 



fp fp 
fp latency example pipelines clock cycles 
reason specification pipeline straightforward manner simply pre conditions post conditions operations 
temporal operators notation specify behavior pipeline account pipe latency 
specify register transfer level operation pipeline understood results operation affect register file clocks cycles inputs operation correspond state register file clock cycles 
state register file clock cycles expressed register transfer specification phi means register receives exclusive registers account pipe latency register transfer level specification expressed temporal formula way phi bit fields operation code 
similar formulas derived register transfer level expressions write register transfer expressions specifications understanding interpreted abbreviations temporal logic formulas way 
path formula state formula evaluated directly ctl model checker evaluate state formulas 
show state register file clock cycles uniquely determined current state system 
show automatically checking ctl formulas ag ex ax ag ex ax substitute state formula ex path formula equivalent 
likewise substitute ex temporal interpretation register transfer level specifications write specification simplest pipeline exclusive instruction follows ag stall phi ag stall recall register assignments abbreviations ctl formulas 
formula specifies non destination registers change stall occurs registers change 
graphs performance obtained checking formula variety pipelines type 
graphs show total execution time size bdd needed represent transition relation 
cases register file registers 
number bits register varied 
considered alu operations exclusive addition 
cases alu performed just operations 
third case alu performed operations 
verifier operated directly ctl formulas reduces overhead result translating ctl formulas mu calculus formulas 
pipeline bits approximately theta reachable states puts far outside range model checkers reported browne 

bit exclusive pipeline required bdd nodes represent transition relation approximately minutes verify sun 
execution times graph single processor encore multimax approximately half fast sun 
interesting result number nodes transition relation bdd asymptotically linear number bits register 
result verification time polynomial number bits 
bdd variables ordered variables bit position grouped 
fixed number signals consisting control bits alu carry bit pass group 
property system results linear growth transition relation represented bdd 
interesting note adding exclusive operation addition pipeline roughly doubles number nodes transition relation 
general transition relation increases size linearly number instructions burch 
addition alu able perform multiply operation barrel shift complex data path width bits plus xor plus xor data path width bits performance bdd model checking algorithm simple pipelines operation constant amount information passing bit position size bdd representation quickly unmanageable 
shown choosing suitable encoding model domain compact representation relations complexity various graph verification algorithms greatly reduced practice worst case 
way shown algorithms concisely expressed form mu calculus expressions derive efficient bdd verification algorithms 
circuit examples studied regular structure data path logic captured bdd representation resulting space complexity linear number circuit components exponential 
current state research leaves open important interesting questions 
needed order characterize models bdd mu calculus checker efficient 
known example combinational multiplier circuits efficient bdd representations bryant 
hand model checking algorithm easily adapted representations compact useful class relations 
problem finding efficient structures representing boolean formulas attracted attention late results obtained area immediately applicable mu calculus model checking various verification methodologies treated 
second open question techniques described profitably extended common graph algorithms results expressed relations minimum spanning trees graph isomorphism example edge relation directed graph equivalence relation true vertices strongly connected component relational term representing reflexive transitive closure practical algorithms handle large graphs compared current computer storage limitations certainly interest 
bose fisher 

automatic verification synchronous circuits symbolic logic simulation temporal logic 
editor proceedings ifip international workshop applied formal methods correct vlsi design pages 
browne clarke dill mishra 

automatic verification sequential circuits temporal logic 
ieee transactions computers 
bryant 

graph algorithms boolean function manipulation 
ieee transactions computers 
bryant 

complexity vlsi implementations graph representations boolean functions application integer multiplication 
ieee transactions computers 
burch clarke long 

representing circuits efficiently symbolic model checking 
th acm ieee design automation conference 
burch clarke long 

symbolic model checking partitioned transition relations 
proceedings international conference large scale integration edinburgh scotland 
burch clarke mcmillan dill 

sequential circuit verification symbolic model checking 
th acm ieee design automation conference 
clarke kurshan 

unified approach showing language containment equivalence various types automata 
arnold jones editors th colloquium trees algebra programming volume lecture notes computer science copenhagen denmark 
springerverlag 
clarke emerson sistla 

automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
cleaveland 

tableau model checking propositional mu calculus 
technical report university sussex 
coudert madre 

verification synchronous sequential machines symbolic execution 
sifakis editor automatic verification methods finite state systems international workshop grenoble france volume lecture notes computer science 
springer verlag 
emerson lei 

efficient model checking fragments propositional mu calculus 
proceedings annual symposium logic computer science boston mass fujita fujisawa 

specification verification synthesis control circuits propositional temporal logic 
editors proceedings ninth international symposium computer hardware description languages applications washington north holland 
godefroid 

partial orders improve automatic verification methods 
kurshan clarke 
springer verlag lncs 
godefroid wolper 

partial approach model checking 
proceedings sixth annual ieee symposium logic computer science 
kimura clarke 

parallel algorithm constructing binary decision diagrams 
proceedings ieee international conference computer design 
kozen 

results propositional calculus 
theoretical computer science 
kurshan clarke editors 
computer aided verification proceedings workshop volume dimacs series discrete mathematics theoretical computer science 
american mathematical society 
springer verlag lncs 
manna wolper 

synthesis communicating processes temporal logic specifications 
kozen editor logic programs workshop volume lecture notes computer science yorktown heights new york 
springer verlag 
milner 

calculus communicating systems volume lecture notes computer science 
springer verlag 
milner 

calculi synchrony asynchrony 
theoretical computer science 
park 

finiteness mu 
theory computation report university warwick 
probst li 

partial order semantics avoid state explosion problem asynchronous systems 
kurshan clarke 
springer verlag lncs 
stirling walker 

local model checking modal mu calculus 
diaz orejas editors proceedings international joint conference theory practice software development volume lecture notes computer science 
springerverlag 
valmari 

stubborn sets reduced state space generation 
tenth international conference application theory petri nets 
valmari 

stubborn attack state explosion problem 
kurshan clarke 
springer verlag lncs 
yoneda 

fast timing verification method independence units 
proceedings nineteenth international symposium fault tolerant computing 

