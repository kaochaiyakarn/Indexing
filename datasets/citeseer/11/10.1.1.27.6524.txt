communication eoecient deterministic parallel algorithms planar point location voronoi diagram ferreira andrew rau chaplin campus des bp re cedex france 
mail fr 
cnrs inria projet bp sophia antipolis france 
mail ferreira sophia inria fr 
faculty computer science university box halifax nova canada 
mail arc ca 
partially supported nserc 

describe deterministic parallel algorithms planar point location building voronoi diagram planar points 
algorithms designed bsp models computation processors ae local memory communicate arbitrary interconnection network 
communication eoecient require respectively log communication steps log local computation step 
algorithms require omega local memory 
high performance computing systems nowadays multicomputers networks workstations consist set state art processors considerable local memory connected interconnection network 
systems usually coarse grained size local memory 
growing interest coarse grained computational models design coarse grained algorithms 
computational models tended motivated observation ne grained models rarely translate fast code running coarse grained machines 
bsp model proposed order slackness number processors memory mapping hash functions hide communication latency provide eoecient execution ne grained pram algorithms coarse grained hardware 
coarse grained models focus utilizing existing sequential code minimizing global communication operations 
include coarse grained multicomputer cgm described 
part done second author lip ens lyon authors visited lyon halifax 
support respective institutions acknowledged 
mixed sequential parallel setting important measures coarse grained algorithm amount local computation number type global communication phases required scalability algorithm range values ratio algorithm eoecient applicable 
describes eoecient scalable parallel algorithms planar point location voronoi diagram problems coarse grained multicomputer context 
planar point location algorithm requires local storage omega optimal respect local computation log communication phases 
algorithm procedure voronoi diagram algorithm requires local storage omega uses dlog pe communication phases log local computation phase 
model coarse grained multicomputer model cgm short seen weak crew bsp machine 
cgm problem size solved processors local memory size 
processors communicate arbitrary interconnection network shared memory 
term refers fact practice number words local memory dened 
clearly true currently available coarse grained parallel machines 
determining time complexities local computation time inter processor communication time considered standard way 
note assume clarity explanation xed integer model global communications performed small set standard communications operations segmented broadcast segmented gather broadcast personalized broadcast partial sum sort typically eoeciently realized hardware system level code 
parallel machine provide operations worst case implemented terms constant number sorting operations 
furthermore shown gamma sorting elements distributed evenly processors cgm bsp logp models achieved log log communication rounds log local computation time theta optimal local computation relations omega 
sort communication operations cgm realized bsp logp models constant number relations theta 
nding optimal algorithm cgm model equivalent minimizing number global communication rounds local computation time 
shown minimizing number rounds results improved portability dioeerent parallel architectures 
previous algorithms sequential parallel proposed solving multi planar point location problem query points located planar convex subdivision vertices 
sequential complexity problem theta log time space 
ne grained parallel setting algorithms described architectures including crew pram hypercube mesh 
pram algorithms optimal time log mesh hypercube respectively 
voronoi diagram see sequential complexity theta log time optimal parallel algorithm optimal runs time processors proposed mesh 
technique explored text design log time algorithm hypercube 
best existing pram algorithm requires log log log time 
respect cgm eoecient deterministic algorithm exist 
randomized algorithm builds voronoi diagram time log high probability requires omega 
fig 

voronoi diagram set points 
results rst describe scalable coarse grained deterministic algorithm convex planar multi point location problem 
algorithm requires time log worst case 
furthermore requires constant number global communication rounds local memory space omega locate query points planar convex subdivision vertices 
algorithm subprocedure propose algorithm solving voronoi diagram problem points model space complexity dlog pe communication rounds log local computation round 
algorithm deterministic scalable algorithm eoecient applicable larger range values ratio approach dioeerent presents particular strengths 
inter processor communications restricted usages small set simple communication operations 
eoeect making algorithms easy implement communications performed calls standard highly optimized communication library fast practice 
second local computation done known algorithms designed problems 
costs associated software development largely reduced 
planar point location problem planar multi point location convex subdivision stated follows locate points planar convex subdivision dened edges 
edge labeled regions left right regions dened coordinates interior point called center region 
locate point planar subdivision design coarse grained algorithm chain method originally described sequential setting utilized ne grained parallel setting mcc hypercubes 
idea perform planar point location binary search balanced binary tree nodes represent chain edges planar subdivision 
tree built follows 
regions sorted coordinate centers 
chain edges share half regions left half right left right regions correspond centers lying left right chain 
applied left right half regions recursively monotone complete set chains obtained set chains chains vertices side 
chains nodes balanced binary tree mentioned 
level level level level fig 

construction chains 
leaves tree correspond regions subdivision see 
chains may share common edges 
edge belongs chain belongs members set consecutive chains 
unique member set binary search tree common members set highest chain hierarchy belongs 
order avoid duplication edges assign member log discriminations deciding side chain query point lies query point located 
chain level index 
level chain height chain located tree root highest level 
index rank chain chains level ranked left right 
described edge assigned exactly chain 
level index edge chain belongs 
levels indices edges determined constant time rules described edge nd exclusive say binary indices centers level say blog index complement gamma index center coarse grained planar multi point location describe subsection planar multi point location algorithm requires constant number communication rounds 
entire data problem assumed initially distributed local memories remains problem solved 
set query points planar convex subdivision plane regions voronoi diagram processor coarse grained multicomputer show locate query points subdivision 
basic approach follows 
divide plane regions vertical slabs 
dened gamma highest level chains 

point determine vs fv vertical slab located 
done forming horizontal slabs 
chains computed step performing point location horizontal slabs rst having load balanced points slabs 

load balance vertical slabs points processor stores vertical slabs total size points located 
locally execute planar multi point location processors 
main challenge lies computing point vertical slab step constant number communication phases constraint memory size 
idea partition vertical slabs horizontal slabs bounded lines polygonal chains 
planar multi point location algorithm described detail 
cgm planar multi point location input set query points planar subdivision dened edges 
output query points labeled center region belong 

edge determine chain belongs method jeong 
method involves sorting regions centers coordinate 
recall method edge belongs chain 
note interested gamma higher level chains chains partition plane slabs vp 

denotes set edges dene gamma chains 

sort edges largest coordinates 
processor receives edges denoted determine horizontal line upper boundary looking largest received coordinate 

perform broadcast horizontal lines processor stores copy set horizontal lines 

processor determines edge stores elements intersects denoted range 
note chains monotonic range contiguous interval computed binary search edge intersected horizontal lines element intersects elements perform personalized broadcast edge range empty broadcast processors 
point determine hs fh hpg horizontal slab located horizontal slab compute hs gj create copies distribute processor stores horizontal slabs 
redistribute point stored processor stores copy hs 

processor locally executes kirkpatrick planar multi point location algorithm 
point located right left edge vertical slab belongs vs obtained consulting rank center region associated edge sorted list 

vertical slab compute vs gj create copies distribute processor stores vertical slabs 
redistribute point stored processor stores copy vs 
processors locally execute kirkpatrick planar multi point location 
location done vertical slab points located point precisely located 
theorem 
algorithm cgm planar multi point location locates query points planar convex subdivision dened edges log time 
requires omega local memory space constant number communication rounds 
proof 
correctness follows correctness chain method described correctness kirkpatrick sequential planar multi point edges edges edges edges horizontal cutting vertical cutting fig 

horizontal vertical cuttings 
location method pages observations 
vertical horizontal slabs size 
total number slabs created steps 
total number queries moved steps 
space requirement processor 
step local computation time log 
global communication step reduces constant number global sorts communications operations 
building voronoi diagram cgm section rst algorithm merging voronoi diagrams cgm requires communication phases show algorithm help build voronoi diagram set points divide conquer approach 
merge algorithm turn uses planar multi point location algorithm described previous section basic subprocedure 
vor dividing chain vor fig 

dividing chain 
set points center region plane disjoint subsets size points located left points suppose voronoi diagrams known denoted vor vor respectively 
suppose vor vor represented set edges distributed evenly processors 
merging algorithm follows scheme described dividing chain voronoi diagrams computed see 
problem analogous respect describe details merging point view main steps algorithm 
way merging vor vor input distributed representation vor vor processors 
output distributed representation vor processors 

partition edges vor sets pp endpoints closer pq endpoints closer closer 
qq endpoints closer 
sets decide edges intersected dividing chain problem just qq 

compute new endpoints edges intersected dividing chain intersection point dividing chain discard portion edge laying wrong side 

globally sort newly generated endpoints edges vor vor order obtain edges dividing chain innite rays look points closer nite endpoint nd slope 

perform steps analogously respect vor 
current edges form vor distribute processors 
theorem 
sets points plane points left points distributed representation voronoi diagrams vor vor distributed processors algorithm way merging merges vor vor form vor log time 
requires omega local memory space constant number communication rounds 
proof 
consider correctness complexity step algorithm way merging vor vor 
ffl step partitioning edges sets pp pq qq computed nite edges performing planar point location endpoints edges 
semi innite edges established semi innite edges vor sorted slope ffi innite endpoint semi innite edges vor consecutive semi innite edges vor laying unbounded region bordered ffi ffi ffi result nd center region vor containing endpoint see set closer just computing bisector closest point closest see semi innite edge crosses bisector 
time complexity step dominated calls planar point location algorithm log 
ffl step shown edges pp cross dividing chain edges pq cross edges qq cases cross dividing chain cross twice cross see 
simple technique distinguish cases involves planar point location 
point location concerns edge qq unique precise point concerned edge 
edge determined intersected twice split edges type pq point edge qq intersection point horizontal line passing centers regions associated chosen center greatest coordinate 
time complexity step dominated calls planar point location algorithm log 
ffl step compute intersection point edge edges intersected twice split edges type pq 
computation intersection point done constant time computing bisector point greatest coordinate closest rst endpoint point closest second endpoint compute intersection edge bisector 
ffl step global sort 
new endpoints sorted principal key dividing chain built 
recall chain monotonic crossed horizontal lines 
time complexity step 
ffl step communication phase newly built dividing chain distributed appropriate processors 
note steps consist log local computation constant number calls planar point location algorithm time complexity follows 
correctness follows 
way merging easily describe cgm algorithm building voronoi diagram 
recall integer edge qq intersected edge qq intersected twice vor vor dc fig 

example edge intersected twice 
voronoi diagram input processor stores set points drawn arbitrarily output distributed representation voronoi diagram 
globally sort points coordinate 
denote set sorted points stored processor 
independently parallel processor computes voronoi diagram set vor denote result processor 
log parallel vor way merging vor vor gamma 
proved second main result theorem 
algorithm voronoi diagram computes voronoi diagram set points plane vor cgm 
requires omega local memory space dlog pe communication rounds log local computation time round 

akl lyons 
parallel computational geometry 
prentice hall 

atallah 
parallel decomposability geometric problems 
proceedings th annual acm symposium computational geometry pages 

cole goodrich 
merging free trees parallel eoecient diagram construction 
th icalp england july 

culler karp patterson schauser santos von eicken 
logp realistic model parallel computation 
fifth acm sigplan symposium principles practice parallel programming 

dehne deng fabri 
randomized parallel convex hull algorithm coarse grained multicomputers 
proc 
th acm symp 
parallel algorithms architectures pages 

dehne fabri 
scalable independent parallel geometric algorithms high probability optimal time 
proceedings th ieee spdp pages 
ieee press 

dehne fabri rau chaplin 
scalable parallel geometric algorithms coarse grained multicomputers 
acm th symposium computational geometry pages 

deng gu 
algorithm design style multiprocessors 
proc 
th ieee symposium parallel distributed processing dallas usa pages october 

ferreira rau chaplin ub da 
scalable convex hull triangulation coarse grained multicomputers 
proc 
th ieee symposium parallel distributed processing san antonio usa pages 
ieee press october 

goodrich 
communication eoecient parallel sorting 
proc 
th annual acm symposium theory computing philadephia usa may 

goodrich vitter 
external memory computational geometry 
proceedings symposium foundations computer science 

jeong 
improved parallel algorithm constructing diagram mesh connected computer 
parallel computing 

lee preparata 
location point planar subdivision applications 
siam journal computing 

preparata shamos 
computational geometry 
springer verlag 

stojmenovic 
computational geometry hypercube 
technical report computer science dpt washington state university washington 

valiant 
bridging model parallel computation 
communication acm 
article processed macro package llncs style 
