practical fine grained static slicing optimized code michael ernst research microsoft com july technical report msr tr microsoft research advanced technology division microsoft microsoft way redmond wa practical fine grained static slicing optimized code michael ernst research microsoft com july program slicing technique visualizing dependences restricting attention just components program relevant evaluation certain expressions 
backward slicing reveals parts program expressions meaning depends forward slicing determines parts program depend meaning 
slicing helps programmers understand program structure aids program understanding maintenance testing debugging slicing assist parallelization integration comparison program versions tasks 
improves previous techniques static slicing 
algorithm expression oriented statements variables resulting smaller slices 
user slice value computed program including ones assigned variables 
slicer accounts function calls pointers aggregate structures 
takes advantage compiler analyses transformations resulting precise slices bypasses syntactic constraints directly constructing executable slices 
techniques implemented slicer programming language accepts input mouse clicks operates value dependence graph program representation especially suited slicing displays closure slices highlighting portions program programmer editor 
program slice wei captures subset program behavior 
slice represents parts program affect slicing criterion expression interest user parts program run time values may depend slicing criterion value 
slices usually represented user subset original program 
programming environments slices demonstrate relationships different parts program program manipulation slices limit program manipulated 
slicer improves aspects previous size slices produced programmer control slicing criterion support full practical language 
slicer produces precise slices restricting attention smaller subset program 
slicer decreases slice size exploiting compiler analyses transformations removing false dependences eliminating dead code improving resulting slices 
representing program terms original source requires maintaining correspondence optimized unoptimized versions program 
slicer decreases slice size constructing slices expressions full statements 
language permits expressions side effects relevant portion statement included 
executable slicing generate code directly slices regard syntactic constraints slice conflated representation terms original program 
second slicer enhances programmer control slicing restricting slicing criteria variable slicing criterion may specify value computed program including intermediate results structure components non class values streams stack 
richer precise specification slicing criteria results finer intelligible slices 
discuss techniques depth limiting narrowing slices making intelligible 
third slice real programming language 
enhance slicing presence pointers function calls 
introduce techniques handling arrays structures unions expressions side effects 
slicer supports entire programming language longjmp 
implementation written scheme han integrated gnu emacs sta input output uses value dependence graph intermediate representation 
types slices venkatesh ven categorizes slices types distinctions backward vs forward executable vs closure static vs dynamic 
classification help situate research respect previous 
backward slice represents program components affecting values produced execution set expressions slicing criterion 
forward slice specifies components program may affected slicing criterion values 
concreteness backward slicing techniques equally applicable forward slicing 
execution code generated executable slice produces values slicing criterion execution original program inputs 
traditional approach executable slicing produce compilable slice syntactically correct program subset compile 
syntactic constraints complicate construction compilable slices force inclusion extraneous program components 
closure slice named graph reachability algorithm computes contains components related slicing criterion useful programmers understanding code behavior 
single slice types slicing generating code directly direct highlighting program 
static slice includes program components may effect may affected slicing criterion values 
dynamic slice gives definite information particular execution maintaining execution trace running program 
discusses static slicing uses analysis discover dependences 
slicing value dependence graph slicing algorithm operates value dependence graph vdg sparse parallel functional dataflow program representation 
vdg composed nodes represent computation arcs carry values computations 
shows program vdg representation 
basic slicing algorithm oo vdg extremely simple slice consists computations encountered graph traversal starting slicing criterion 
backward slice traversal follows consumer producer arcs call results proceeds corresponding call returns formal parameters proceeds corresponding actual parameters 
vdg node visited algorithm runs time linear size slice larger vdg 
shows slice procedure 
vdg attractive representation slicing advantages slicing approach accrue vdg features exploitation algorithms 
vdg unit granularity computation statement slicing criteria results finer 
graph directly links value producers consumers dependences explicit single graph 
values computations including global store streams explicitly represented algorithm need account hidden constraints effects 
void int int sum int product int sum sum product product printf sum product sum product call call sum sum product product call sum printf procedure vdg representation 
arrows point consumers producers values 
fl node selector output left right input depending boolean argument attached side fl node true false 
looping control flow represented function calls heavy boxes represent function bodies arguments top edge return values bottom edge 
basic slicing algorithm simple fast easy understand imprecise slices produces larger necessary 
improve algorithm extending address pointers aggregate values section procedure calling context section 
sections discuss techniques expression oriented slicing section executable slicing section slicing optimized code section 
expression oriented slicing slicing algorithm works expression level input computation output 
slicing criteria represent value computed program including named variables 
slices defined terms vdg textual representation include partial statements 
closure slices accurately convey information user executable slices discussed section include extraneous computations 
slicing criteria traditional slicing criterion statement set variables 
extend slicing criteria include expression program including computing values programming language variable appear explicitly expression statement 
slicing criterion represents single value computation may compute multiple values 
allowing intermediate results subexpressions slicing criteria permits users slice components computation assigned separate variables 
feature enables programmers restrict attention parts statements expressions 
values assigned variables appear code complicated coding constructs slicing especially needed computation 
examples real programs include components aggregate values values call call sum sum product product call sum 
printf slicing vdg slicing criterion sum call printf 
slice indicates computations affect slicing criterion run time value 
vdg edges nodes slice shown thicker shaded respectively slicing criterion node indicated edge value 
vdg slice communicating user user interface issue 
screen dump right shows system highlights programmer editor computations contained slice see section discussion 
addressed indirectly pointers expressions values computed earlier expression evaluation large expressions expressions set overwrite variable 
rewriting code accommodate variable slicing criteria inconvenient impossible error prone alternative slicing arbitrary expressions 
values assigned variables inexpressible terms variable 
determining computations affect output produced program particular point slicing criterion output stream programming languages 
similarly slicing state heap stack reveals allocations occur 
slicer supports queries computations explicitly represented vdg 
slicing expression produces multiple values produces menu expression results selected slicing criterion 
mechanism permits slicing variables referenced program point supported wei 
global store represented explicitly graph live component sliced 
complications slicing arbitrary variable 
optimization see section reorder eliminate duplicate coalesce computations 
serialized code zero locations intermediate representation may correspond source location frequently point computations preceding program point computations performed 
second vdg routes values demanded stream passed loop global store eliminated entirely 
result program values particular expression serialized vdg threaded values computation 
expression appearing program slicing criterion value computed expression 
comparison statement oriented expression oriented slices slicing criterion 
call baz assumed set comparison statement oriented expression oriented display slices 
program fragment taken bar modifies foo 
slicing criterion slice includes call bar call foo 
portions body bar shown highlighted 
computing slices constructing slice slicer includes individual computations statements 
expressions side effects statements multiple effects finer grained approach uses computation true granularity programming language improves slice precision 
compares statement oriented expression oriented slices slicing criterion 
statement oriented slice includes modifies statement included computations depends included computations irrelevant final value expression oriented slice effectively indicates final value greater value call bar 
define slice terms intermediate representation slicing algorithm operates 
historical definitions require slice set statements syntactically correct program definition conflate slice screen representation 
try single textual representation serve different purposes closure slicing provide programmer information dependences value flow executable slicing generate executable behavior subsets original program 
displaying closure slices slice vdg subset display user interface issue 
expression oriented slices displayed traditional statement oriented fashion doing advantage slicing finer granularity 
default highlight expressions corresponding computations slice shown 
abbreviated output expression slicing boon directs attention precisely relevant computation flow values program making user reconstruct information 
goal aid programmer little motivation include full statements slice representation syntactic long slice represented context full program 
static slices frequently criticized large difficult understand 
interesting results tend depend directly indirectly previous computation full static slice includes program 
determining relationships included components slice requires programmer manually repeat slicer job 
implementation uses depth limited slices show immediate dependences programmer methods making dependences explicit large slices 
left arrows link consumers producers right colors show relationships 
different technique depth limited slicing provide information programmer demand 
request 
unlimited slice includes computations slicing criterion depends program 
depth limit graph traversal algorithm pass computations selectors ifs weak updates treated specially 
depth slice value definition points including computation operator 
depth slice includes operator operators operands 
slices depth 
demonstrates alternate techniques explicitly showing dependences slice drawing arrows colors 
techniques distracting usually provide information desired 
slicing pointers aggregate values order effectively slice code containing pointer operations slicing algorithm uses points analysis egh indicates possible values location valued construct program 
variable pointer dereferences represented vdg lookup nodes take arguments location store return contents location store 
update nodes take arguments location store value return modified store location set value 
ordinary variable assignments location constant absence arbitrary pointer manipulation vdg construction optimization cancel update lookup pairs improving graph sparseness 
slicing traversal encounters lookup node location argument sliced usual way 
slice include lookup node entire store argument operations contribute store relevant lookup node value 
store treated aggregate value component individually included excluded slice 
slice traversal proceeds store locations may looked locations specified points analysis lookup node location argument 
think slicing store value occurring individually location store 
update node encountered falls categories strong update update node location argument returns slice traversal proceeds update node value location inputs store input 
weak update update node location argument may return slice traversal proceeds update node value location inputs proceeds store input respect update node location argument returns slice traversal proceeds update node store input 
actual algorithm considers locations simultaneously takes advantage pointer equality unknown pointers possible 
shows result slicing program containing pointer manipulations 
slicing algorithm treats aggregate values just store see example 
ignoring moment vdg nodes multiple corresponding source texts scalar value edge slicing presence pointer manipulation 
pointer points points final value pointed xy depending values calls rand pseudorandom number generator 
highlighting int indicates addresses variables manipulated 
traversed inclusion slice implies inclusion producer producer input values 
aggregate value edge traversed demanded components noted traversal proceeds corresponding inputs aggregate producing node 
edge may traversed number times equal number components value edge 
algorithm runs time linear number values computed program number nodes vdg 
worst case raise cost slicing algorithm linear quadratic size program practice adds small constant factor 
size representation increased storage requirements points analysis 
slot foo return value depends directly second slot formal second slot result value depends indirectly slot formal formal slices slot slot shown constant folding turned 
traditional method includes parts foo slice slot omit dependence body 
interprocedural slicer account calling context produce precise slices 
slicing call abs left naive interprocedural slicer enter procedure body discover formal parameter demanded add slice actuals calls abs 
accurate slice includes actual parameter call sliced 
hand slice starts inside function body right includes calls function actual parameters affect run time value expression function body 
accurate slice able include different actual parameters different call sites 
interprocedural slicing basic slicing algorithm section handles interprocedural slicing graph traversal dependence links formal parameters actual parameters call results formal return values 
algorithm constructs unnecessarily large slices account calling context 
formal actual links followed illustrated 
obvious technique process procedure body anew call propagating results just call site hdc 
method run time proportional size program recursion complicates guaranteeing termination correctness 
solution problem patterned horwitz hrb produce finer slices including entire calls actuals demanded including relevant parts aggregate values omitting entire procedure bodies appropriate 
algorithm permits different call sites include different actual parameters shown 
slicing summary dependences procedure return formal parameter computed 
slicing proceeds stages procedures may appear call chain slicing criterion value computed procedures 
summary dependence information slice traversal encounters procedure call slice include appropriate parts procedure body proceed demanded actual parameters call 
goal require entering procedure body summary dependences procedure return values formal parameters call results actual parameters computed ahead time 
summary indicates formal parameters return value depends 
additionally dependence marked direct indirect 
direct dependence indicates formal returned definitions summary ret formals return node ret procedure ret depends formals formals value enclosing procedure depends inputs node outputs node dataflow equations node return node summary formals formal node formals fng call node called procedure res ret formal return corresponding res map formals actuals formals res summary ret formals formals formals dataflow equations computing summary dependences returns formal parameters giving summary ret return node ret equations algorithm address aggregate values multiple callees call site free values procedures nontrivial correspondences source program due optimization 
unchanged indirect dependence indicates formal may participate computation determine return value 
return value depends directly formal slice includes corresponding call result need include procedure body dependence body 
gives example dependences formals figures show exclusion procedure bodies slice due direct dependences 
compute formal dependence summary finding fixed point solution set forward flow equations shown solved iterative worklist algorithm 
arbitrary call graphs information computed single pass 
slicing algorithm formal dependences computed interprocedural slicing algorithm proceeds stages 
stage addresses procedures may current call chain slicing criterion value computed run time 
formals encountered graph traversal corresponding actuals call sites 
calls encountered slice continues formals indicated formal dependence analysis 
procedure bodies entered demanded results noted worklist 
second stage processes worklist slicing bodies functions return values affect slicing criterion 
slice proceeded appropriate actual arguments needed formals encountered 
procedure calls skipped demanded return values added worklist 
stage proceeds worklist empty procedure backward slice slicing criterion ascending worklist slicing criterion worklist fg slice fg node ascending worklist node slice done add node slice node formal add corresponding actuals ascending worklist node call add associated returns worklist add call actuals ascending worklist summary dependence add dependent nodes ascending worklist node worklist node slice done add node slice node formal done node call add associated returns worklist add call actuals worklist summary dependence add dependent nodes worklist return slice pseudocode interprocedural backward slicing algorithm 
clarity ignores subtleties depth limiting direct summary dependences source correspondences aggregate values forth 
procedure return value processed stage 
gives pseudocode interprocedural slicing algorithm 
complexity algorithm linear number values computed unoptimized program naive slicing algorithm account calling context complexity 
executable slicing executable slicing transforms programs object code eliminating parts program combining multiple programs 
testing lw pc parallelization wei bw program decomposition ry bin goal smaller faster program computes slicing criterion values original program computing irrelevant results 
integration compatible versions program ry hpr hr hrb bin bal executable slice combines features various versions 
closure slice hand helps programmer visualize dependences regard syntactic constraints 
single type slice consisting vdg nodes sources serve closure executable slicing produce smaller faster object code compilable slices traditional executable slices 
closure slicing slice directs highlighting program executable slicing code interprocedural slicing pointers 
jiang implementation horwitz algorithm hrb includes entire program slicing sum slices shown 
generated directly slice 
compiler uses vdg intermediate representation easily generates code slice real difference slice subset vdg full vdg 
integrating slicer compiler obviates need write separate front 
slicer take advantage compiler analyses transformations leading significantly better dependence information available raw program text see section 
existing back mechanisms deal dead code arity raising lowering procedure specialization forth slice provides back precise liveness information 
executable slices preserve program behavior related slicing criterion 
computations original program loop forever raise exception included slice contribute computation slicing criterion values 
executable slice may terminate produce answer original program 
hand executable slice fails terminate terminates exceptionally original program done 
conditions apply optimized programs general 
compilable slicing traditional approach executable slicing produce compilable slice syntactically correct program subset compile 
syntactic constraints complicate construction compilable slices force inclusion extraneous program components bin 
instance compilable slice unnecessarily includes entire program figures left side 
compilable slicing spends effort determining extra portions program truly demanded computations include order resulting text syntactically semantically correct 
slice contains particular parameter call function call slice include parameter 
expression side effects force inclusion slice containing expressions statements appear slice 
value named particular variable statement slice statement assigning value variable included slice 
including proper control flow statements goto requires special care bh bal cf agr 
limited class optimizations handled tip optimized programs inexpressible original programming language 
optimizing compiler remove extra constructs added compilable slicing knowledge constructs essential part slice incidental added sake extra analyses may complicated slicing 
slices unoptimized code include text code fragments 
left slice optimized code shows subtraction value right analysis determine call true returns false slice show actual arguments multiplication 
right hand screen dump generated constant folding disabled constant folding enabled user informed value 
history mechanism indicate fact determined 
slicing optimized code quality slice depends directly accuracy dependences discovered program 
original program poor guide dependences inherent computation source code may contain false dependences dead code nonoptimal computations 
slicing optimized analyzed transformed code eliminates problems results communicated user terms original program text 
compiler analyses discover information program resolving possibly aliased pointers determining run time values 
compiler transformations constant folding dead code elimination elimination partial redundancies update program structure reflect knowledge gleaned analyses 
analysis transformation remove simplify dependence relations making better approximation true dependences underlying computations slicing optimization produces precise informative slices 
demonstrates advantages slicing optimized code 
optimization improves liveness information 
slicing criterion includes dead code implementation indicates showing slice code respect unoptimized program 
slicing optimized code especially powerful presence abstractions high level constructs object oriented features 
abstractions insulate programmer low level details manually tracing verifying value flow multiple layers abstraction tedious errorprone 
hardware usually runs optimized code programmer understand behavior 
optimized code behavior consistent unoptimized version optimized code better models program underlying computation 
correspondences source optimized program effective medium specifying slicing criteria displaying slices original program specify slicing criterion user may familiar contains comments formatting context 
program text correspond directly optimized vdg 
maintain optimization process correspondence vdg source code graph 
graphs initially isomorphic transformations modify correspondence nodes relation 
separate describe engineering challenges maintaining correspondence manipulating resulting graphs 
maintaining correspondence enables history mechanism explain transformations occurred slice may different precise user expected 
permits slices displayed transformations occurred vdg optimized naive view desired 
inclusion vdg node slice imply inclusion corresponding sources 
vdg slice contains constant zero represented single vdg node slice displayed third tokens highlighted 
modify slicing algorithm visit node associated source text visiting node 
slicing algorithm traverses vdg source graph concert starting vdg source nodes corresponding slicing criterion expression 
modification increases algorithm complexity linear size vdg linear size source code graph approximately size original program 
related weiser introduced concept slicing wei wei showed application debugging wei lw lw parallelization wei bw 
slicing criteria consist statement set variables necessarily referenced statement slices syntactically correct subsets original program termination behavior 
weiser treats slicing dataflow problem provides ne log algorithm includes call site function call included 
ottenstein ottenstein linear time slicing algorithm graph reachability oo demonstrates appropriateness program dependence graph pdg fow hpr slicing 
slicing criteria slightly restricted variables appear specified statement 
subsequent research builds 
horwitz hrb hrb bin bin extend pdg algorithm account calling context 
interprocedural pdg called system dependence graph summarizing transitive dependences due calls constructed attribute grammar models procedure call structure subordinate characteristic graphs grammar nonterminals 
graph constructed slicing takes linear time aliasing degrades performance binkley analysis bin assumes program contains constant number global variables 
constructing compilable slice requires specialization procedure subset parameters demanded call site result subset original program 
lc build system dependence graph incrementally processing procedure encountered traversal 
function call encountered processing current procedure suspended partial solution preserved refinements solution require reprocessing callers 
algorithm processes contents looping statements twice 
interprocedural algorithm similar constructs summary solving set dataflow equations uses direct dependences skip procedure bodies contribute dependences 
hwang hdc slice interprocedurally presence self recursion computing series slices recursion depth limited initially recursive calls followed level forth 
fixed point solution achieved increasing level results larger slice 
recursive base cases recursive procedures assumed identifiable 
slices accurate system dependence graph computed efficiently hrb 
jiang handle pointers arrays means alias analysis wei 
introduce dummy variable level dereference pointer variable dummy literal variable address taken 
modifications pointer count modifications dummy variables pointer uses count dummy uses 
authors address general pointer manipulation horwitz hrb give techniques dealing aliasing introduced call function parameters 
technique lc solve problem converts program alias free duplicating procedure possible alias pattern parameters modifying formal parameters call sites accordingly 
transformation increases size program exponentially maximum number parameters passed procedure global variable parameter procedure modify blowup exponential size original program 
second technique horwitz gives precise slice lower cost variables aliased definition reach dependence added 
contrast techniques points analysis egh add support aggregates struct union types 
ottenstein ottenstein oo oo tip tip note compiler transformations slicer give details 
schemes optimizations unconstrained syntax original program 
lc independently suggest slicing parse tree improve statement 
implementation algorithm includes irrelevant operations assignment sum communicate slice user terms statements 
jackson rollins jr note drawbacks entire pdg node slicing criterion slicing criteria stand particular values computations demand part computation imply demand inputs 
chopping technique similar intersection forward backward slices technique permit non variables output stream slicing criteria permit arbitrary expressions arbitrary variable weiser wei 
extensive slicing literature see tip survey tip 
daniel weise ellen spertus bjarne steensgaard todd knoblock roger crew erik ruf provided stimulating discussions helpful comments earlier drafts 
assisted creation programming environment includes slicer described 
agr agrawal 
slicing programs jump statements 
proceedings sigplan conference programming language design implementation pages orlando fl june 
bal thomas ball 
control flow control dependence software tools 
technical report university wisconsin madison august 
phd thesis 
bh thomas ball susan horwitz 
slicing programs arbitrary control flow 
technical report university wisconsin madison december 
bin david binkley 
multi procedure program integration 
technical report university wisconsin madison august 
bin david binkley 
precise executable interprocedural slices 
acm letters programming languages systems march december 
bw lee badger mark weiser 
minimizing communication synchronizing parallel dataflow programs 
proceedings international conference parallel processing volume ii software pages penn state august 
cf jong deok choi jeanne ferrante 
static slicing presence goto statements 
submitted publication previously titled slice october 
egh emami rakesh ghiya laurie hendren 
context sensitive interprocedural points analysis presence function pointers 
acaps technical memo mcgill school computer science november 
fow jeanne ferrante karl ottenstein joe warren 
program dependence graph optimization 
acm transactions programming languages systems july 
peter fritzson kamkar 
generalized algorithmic debugging testing 
acm letters programming languages systems december 
han chris hanson 
mit scheme manual 
mit scheme team cambridge ma beta scheme release edition december 
hdc hwang du chou 
finding program slices recursive procedures 
proceedings compsac twelfth international computer software applications conference chicago october 
ieee computer society 
laurie hendren emami rakesh ghiya clark 
practical context sensitive interprocedural alias analysis framework compilers 
acaps technical memo mcgill university school computer science advanced compilers architectures parallel systems group montreal quebec july 
hpr susan horwitz jan prins thomas reps adequacy program dependence graphs representing programs 
proceedings fifteenth annual acm symposium principles programming languages pages san diego ca january 
hpr susan horwitz jan prins thomas reps integrating non interfering versions programs 
acm transactions programming languages systems july 
hr susan horwitz thomas reps efficient comparison program slices 
technical report university wisconsin madison december 
hrb susan horwitz thomas reps david binkley 
interprocedural slicing dependence graphs 
technical report university wisconsin madison march 
hrb susan horwitz thomas reps david binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
jr daniel jackson eugene rollins 
program dependences reverse engineering 
submitted second acm sigsoft symposium foundations software engineering june 
jiang zhou david robson 
program slicing problems implementation 
proceedings conference software maintenance pages sorrento italy october 
ieee computer society press 
kamkar peter fritzson 
bug localization algorithmic debugging program slicing 
ma nski editors proceedings programming language implementation logic programming international workshop plilp pages linkoping sweden august 
springer verlag 
lncs 
lc panos stephen 
program slicing 
technical report serc tr computer information sciences department university florida gainesville fl october 
lw jim lyle mark weiser 
experiments slicing debugging aids 
elliot soloway iyengar editors proceedings workshop empirical studies programmers pages washington dc june 
lw james lyle mark weiser 
automatic program bug location program slicing 
proceedings second international conference computers applications beijing china june 
mnb lawrence markosian philip newcomb russell brand scott ted 
enabling technology reengineer legacy systems 
communications acm may 
jim ning andre 

automated support legacy code understanding 
communications acm may 
oo karl ottenstein linda ottenstein 
high level debugging assistance optimizing compiler technology extended 
acm sigsoft sigplan software engineering symposium high level debugging pages pacific grove ca march 
oo ottenstein ottenstein 
program dependence graph software development environment 
proc 
acm sigsoft sigplan software engineering symp 
practical software development environments pages pittsburgh pennsylvania april 
pc andy podgurski lori clarke 
formal model program dependences implications software testing debugging maintenance 
ieee transactions software engineering september 
ry thomas reps wuu yang 
semantics program slicing 
technical report university wisconsin madison june 
ry thomas reps wuu yang 
semantics program slicing program integration 
orejas editors tapsoft proceedings international joint conference theory practice software development 
vol advanced seminar foundations innovative software ii colloquium current issues programming languages number lecture notes computer science pages barcelona spain march 
springer verlag 
sta richard stallman 
gnu emacs manual 
free software foundation cambridge ma tenth edition july 
isbn 
tip tip 
survey program slicing techniques 
report cs centrum voor wiskunde en informatica cwi amsterdam 
ven venkatesh 
semantic approach program slicing 
proceedings sigplan conference programming language design implementation pages toronto ontario canada june 
daniel weise roger crew michael ernst bjarne steensgaard 
value dependence graphs representation taxation 
technical report msr tr microsoft research redmond wa april 
wei mark weiser 
program slices formal psychological practical investigations automatic program abstraction method 
phd thesis university michigan ann arbor 
wei william weihl 
interprocedural data flow analysis presence pointers procedure variables label variables 
proceedings seventh annual acm symposium principles programming languages pages january 
wei mark weiser 
programmers slices debugging 
communications acm july 
wei mark weiser 
reconstructing sequential behavior parallel behavior projections 
information processing letters october 
wei mark weiser 
program slicing 
ieee transactions software engineering se july 

