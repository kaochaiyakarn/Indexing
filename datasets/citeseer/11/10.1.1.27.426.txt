lightweight extensible records haskell mark jones oregon graduate institute mpj cse ogi edu early versions haskell positional notation build take apart user de ned datatypes 
positional notation awkward error prone dealing datatypes couple components versions haskell introduced mechanism labeled elds allows components set extracted name 
useful practice signi cant problems example eld name datatype 
concrete proposal replacing labeled eld mechanisms haskell exible system records avoids problems mentioned 
theoretical foundation earlier jones system ers lightweight extensible records complement polymorphic operations manipulating 
concrete level proposal direct descendent trex implementation typed records extensibility hugs freed constraints setting compatibility haskell major concern 
records basic building blocks data structures 
simple tuple product record gathers xed number components potentially di erent type single unit data 
tuple individual components accessed name position 
particularly important languages support pattern matching cases number di erent components pattern matching unwieldy error prone 
haskell allows programmers de ne wide range algebraic datatypes early versions language including haskell provide support records 
haskell increasingly attractive platform general purpose program development need form records pressing quite common nd data structures components real world applications awkward deal datatypes language supports traditional constructor pattern matching syntax algebraic datatypes 
motivated practical concerns september simon peyton jones microsoft research cambridge simonpj microsoft com mechanisms de ning algebraic datatypes extended haskell carried haskell haskell support labeled elds allows components datatype accessed name 
essence syntax haskell extended de nition particular algebraic datatype include just names constructors earlier versions language names selectors 
review haskell record system section 
haskell system merit translation simpler positional notation impact type system 
simplicity comes price expressiveness discuss section 
presents concrete proposal alternative record system designed replace current section 
proposal closely extensible records jones 
implementation system available couple years form trex extension hugs quite bit experience accumulated advantages shortcomings system 
trex designed compatible haskell turn leads notational 
proposal takes fresh look language 
resulting design incompatible haskell minor pervasive ways haskell programs require modi cation 
regard price worth paying exchange coherent design 
review di erences proposal trex design system section 
contains essentially new technical material design issues mainly notational 
written 
firstly consensus kind full blown record system desirable debate hampered lack concrete proposal serve asa basis discussion 
hope may serve role 
second easy see disadvantages new feature concrete design 
system disadvantages discuss section 
hope articulating problems may spark new ideas 
haskell records datatypes labeled elds haskell record system simply provides syntactic sugar written ordinary positional algebraic data types declarations 
example rst approximation de nition data list nil cons head tail list thought abbreviation separate datatype selector de nitions data list nil datatype cons list head cons xs selectors tail cons xs xs fact haskell takes things step introducing special syntax construction update operations 
allow programmers build modify data structures names components having worry order stored 
example build list just element constructions cons head value tail nil cons tail nil head value truncate non empty list xs obtain list just element update expression xs tail nil 
de nition illustrates convenient feature haskell record notation data filesystem file name string size int bytes byte folder name string contents filesystem values datatype represent standard hierarchical le system les contained potentially nested folders 
notice name eld name branches result selector function name generated de nition applied file folder objects requiring programmer treat alternatives di erently time name filesystem value required 
result extensions record facility layered top haskell existing mechanisms de ning algebraic datatypes 
theoretical perspective course features just form syntactic sugar language expressive 
practice signi cant advantages greatly simplifying task programming data structures components 
resulting programs robust code selectors update construction generated directly compiler automatically account datatype elds constructors added deleted reordered 
shortcomings haskell records unfortunately problems haskell approach record types lightweight record values suitable algebraic data type de ned 
contrast standard haskell environment automatically provides lightweight tuple types records labels sizes 
field names top level scope datatype 
serious problem prevents direct datatype labeled elds context eld names scope possibly eld names di erent datatype 
ways con icts rely tedious error prone renaming eld names module quali ed names 
single datatype de nition eld name multiple constructors types appear case 
de nition filesystem datatype example necessary di erent names distinguish contents bytes contents folder 
way add remove elds data structure constructed records extensible 
record type stands unrelated record type functions records polymorphic extensions record 
remaining sections concrete proposal replacing labeled eld mechanisms haskell exible system records avoids problems described 
little point retaining current labeled eld mechanisms haskell presence proposed extensions unnecessarily complicate language duplicate functionality 
firm theoretical foundations system provided earlier jones type system theory quali ed types :10.1.1.21.6627
integrates smoothly rest haskell type system supports lightweight extensible records complement polymorphic operations manipulating 
concrete level proposal inspired practical experience trex implementation typed records extensibility current versions hugs interpreter freed constraints setting compatibility haskell major concern 
proposed design section provides informal overview proposal adding exible system extensible records haskell 
covers key features sketches proposed syntax 
aspects proposal illustrated extracts session interpreter haskell dialect supports extensions 
interpreter prompts input expression single character displays result evaluating expression line 
time writing built 
experience implementing trex system hugs con dent proposals feasible practical useful 
describing basic syntax constructing selecting record values section representing record types section 
minor di erences syntax aspects proposal indistinguishable lightweight records standard ml sml 
turning issues speci haskell show record types included instances standard classes equality eq display show section 
key feature proposal clearly distinguishes existing mechanisms languages sml haskell support extensibility section 
allowing record extension pattern matching provide simple way select remove speci record components 
combination extension removal update rename individual eld record 
practice believe operations useful warrant special syntax section 
second key feature underlying type system row polymorphism section leads introduce general syntax rows section 
turn collection additional features essential look attractive section 
construction selection essence records just collections values associated particular label 
example true hello int record components eld containing boolean value eld containing string eld containing number 
order elds listed signi cant record value written int true hello examples show simple ways construct record values 
inspect values held record traditional dot notation expression form simply returns value component record example true hello int true true hello hello previous versions haskell character represent function composition 
versions haskell syntax quali ed names 
rst clearly incompatible proposal allow second reading composition avoid con ict propose adopting di erent symbol function composition believe choice debate scope 
dot notation entirely compatible syntax quali ed names proposals structured module namespace style java packages 
appealing consequence design gives single consistent reading character selection record module 
practical level shows minor pleasing ways 
example remove ad hoc restriction haskell syntax quali ed name currently prohibits spaces quali ed name prelude map confused compositions just repeated selections extract values record valued components records 
usual associates left equivalent true hello int hello pattern matching record values inspected pattern matching syntax mirrors notation constructing record 
true hello int true order elds record pattern record expression signi cant determines order left right matched 
consider examples true undefined true true undefined true error program uses undefined value rst example attempt match pattern true record undefined fails eld matched rst match empty list matching pattern true succeeds binding 
swapping order elds pattern true forces matching start component 
rst element list records undefined component evaluation produces run time error message 
record types values haskell records written form represents row associates labels types 
example record int true hello type bool char int tells unsurprisingly record components eld containing bool eld containing string eld type int 
record val ues order components row signi cant previous type written string int bool special case row empty obtain empty record type value empty record written 
course type record accurate re ection elds appear corresponding value 
example produces error speci ed type list elds record value true hello string int error type error type signature expression term true hello type bool char match string int field mismatch notice system allow kind subtyping record values permit record true hello treated implicitly having type string int simply forgetting eld 
finding elegant tractable way support kind implicit coercion way integrates properly aspects haskell type system remains interesting problem research 
shall see section row polymorphism ers bene ts subtyping 
overloaded operations records record types automatically included standard eq show classes haskell provided types eld records concerned instances appropriate class 
interpreter uses functions allow comparison display record values examples true hello hello true true true hello int true hello int true hello true hello note operations process record elds dictionary ordering labels 
fact elds appear speci arbitrary order important results operator show function uniquely determined input way input written 
records lines example exactly value expect exactly output 
di erence behavior examples consequence hello undefined false hello undefined error program uses undefined value rst case equality test returns false values di er rst component labeled second case labels switched equality test begins attempt compare string hello unde ned value resulting error 
arguably records automatically instances classes ord ix bounded read grounds classes eq show tuples automatically instances 
di culty order elds matters 
di culty principle elds lexically ordered arbitrary nature ordering apparent just strictness class methods 
extension important property system label name appear di erent record types potentially di erent type case 
examples seen far deal records xed shape set labels type values associated xed apparent relationship records di erent type 
fact record values record types system built incrementally starting empty record extending additional elds time 
means records extensible 
simplest case record extended new eld labeled provided include eld 
example construct record true hello extending true eld hello true hello true hello note write record value extended rst followed character list elds added 
way construct exactly result extending hello eld true hello true true hello convenient add eld time shown example world true hello int true hello world hand record extended eld name di erent type 
example illustrates int true error int includes field syntax patterns decompose record values 
true hello hello true notice match just individual components record value portion record left explicitly named elds removed 
previous examples record extended new elds 
example shows pattern matching reverse operation removing elds record 
update useful update record changing values associated elds 
update operations coded hand pattern matching remove appropriate elds extending resulting record new values 
attractive provide special syntax operations distinguish update extension 
slightly formally record expression treated abbreviation update case providing special syntax updates easier programmers code easier compiler recognize permit cient implementation avoids building intermediate record convenience allow updates freely mixed record extension expressions true extension syntax sensible allow update syntax record pattern 
row polymorphism pattern matching understand selector functions handled 
example evaluating expression form passing argument function value value function polymorphic sense record containing eld regardless type associated particular component elds record contain 
value value true hello true 
value value name record age see works need look type function inferred automatically important pieces notation deserve explanation type record component type row variable represents rest row represents elds record apart syntax record type extension mirrors syntax seen examples record value extension 
discuss rows section 
constraint tells type right symbol valid lacks row contain eld 
familiar haskell type classes may think kind class constraint written post syntax instances precisely rows eld 
example apply selector function record true hello type string bool instantiate variables type bool string respectively 
row constraints see occur type function operates record values types records fully determined compiletime 
example de nition average interpreter infer principal type form average fractional speci types speci ed type declaration average function average fractional average double double double average double double double average double double bool double instance principal type 
examples show important di erence system records described record facilities provided sml 
particular sml prohibits de nitions involve records complete set elds determined compile time 
sml equivalent average function described rejected way determine record elds sml programmers usually avoid problems giving type annotation completely speci es structure record 
course de nition limited way useful 
expected implementation type system described section advantage knowing full type record compile time allow compiler generate cient code 
un sml type system ers exibility polymorphism extensibility records needed 
rows deal formally record types extend kind system haskell new kind row record type form expr expression expr kind row 
types kind row written essentially notation records enclosed parentheses braces 
example empty row written empty record type really just convenient abbreviation 
note change haskell symbol denote unit type proper non bottom value 
proposal empty record type place special unit value 
non empty rows formed extension 
example int row obtained row extending eld type int 
multiple elds speci ed comma separated lists 
example int bool shorthand int int 
shorthand allows write extensions empty row comma separated list elds 
example int bool abbreviation int bool turn just abbreviation int bool 
cases allow outermost pair parentheses omitted row expression appears inside pair braces 
example int abbreviated int 
row variables type variables kind row represent unknown rows 
haskell kinds type variables inferred automatically compiler simpli ed form type inference 
row expressions type constructor kind row required including right hand side type de nition parameters programmer de ned class datatype constructor 
example de nitions introduce type synonym point kind row extend de ne second type synonym adds extra color eld point row type point int int row type point color comments indicate point kind row 
haskell type declarations introduce type constructors kinds style de nition allows build row types record types style akin single inheritance 
support multiple inheritance 
example de nition ill formed proposal requires eld list right ofa permit arbitrary row expressions 
type point int int type coloring color type point coloring model single inheritance style possible de ne polymorphic functions 
illustrate point consider example move int int point point move function move works ne values type point type incorrect apply value type 
easy obtain move applicable points varieties de ning types little di erently point row row type point int int colored row row type colored color row row type point colored notice entirely legitimate type synonym point point kind row row 
course original de nitions rows just extensions empty row 
example de nitions write type record red 
de ne move move int int point point move type neatly expresses move works subclass substitution instance point example 
expresses move returns point variety argument awell known problem object systems cardelli mitchell section discuss update problem length 
observation row polymorphism deals problem new 
constructed sequential way row composition commutative 
example de nition entirely equivalent see just expand synonyms row row type colored point variables kind row parameters user de ned datatypes data mkt bool normal rules kind inference treated type constructor kind row clear kind inaccurate sensible allow applied row argument anx eld 
kind system expressive capture restriction directly re ected including constraint type practical perspective minor issue restrictions type system allow types int errors allow construct values type apart 
real di erence consistent aspects haskell require de nition datatypes re ect constraints needed ensure component types wellformed 
example correct previous de nition inserting constraint follows data mkt bool haskell old timers remember eval class may recall similar constraints required datatypes strictness annotations 
implementation major merit jones record system smoothly builds haskell type class mechanism 
analogy applies implementation 
details covered basic idea simple :10.1.1.21.6627:10.1.1.21.6627
lacks constraint function type gives rise extra argument passed function constitutes evidence constraint satis ed 
particular evidence lacks eld passing set stored record extended size entire record required performing record operations 
obtained record augmenting evidence pair set record size 
usual overloading cient code obtained specialisation 
case records specialisation code size record sets elds 
additional features section collect small potentially useful ideas extensions core proposal 
presentation inferred types comment experienced users trex system user written type signatures unreasonably large 
example consider type signature move section move int int point point move point synonym allowed enumerate twice details point context enumerate elds lack type ill formed 
annoying expand type synonym absolutely manifest lack elds move int int int int int int annoying non modular adding eld point force change type signature move move code change 
practice cause programmers omit type signatures altogether functions complex types arguably just functions type signature informative 
motivated obvious suggestion permit constraints type signature omitted inferred directly rest signature 
akin omission explicit universal quanti cation 
haskell lets write really mean forall forall inferred 
similar way propose similar inference process adds lacks constraints type signature solely rest type signature expanding type synonyms 
note matter presentation actual types inside system change 
constraints form omitted user type signature illustrated pathological example bool true slightly realistic example constraints omitted consider datatype trees allows node annotated additional information info data tree info leaf info value fork info left tree info value right tree info application height tree choose add height information node avoid repeated unnecessary repeated computation leaf leaf height fork fork left right height max height height left right height leaf height height fork height careful examination code shows type info height info left info right tree info tree info height int note rst constraints info height inferred body type remaining constraints omitted 
experience examples quite uncommon believe top level type signatures omit lacks constraints facility attractive practice 
tuples values standard ml records underlying representation tuples need pick canonical names position tuple 
example write field label rst eld tuple field second tuple value true just convenient shorthand field true field type bool int just shorthand field bool field int 
advantages merging currently separate mechanisms records tuples clear remove redundancy language implementations 
addition ers expressive treatment tuples allows de ne functions fst field field fst field extract rst component tuple value current versions haskell fst function restricted pairs di erent versions de ned different size tuple 
exact choice names elds tuple matter debate 
example possible necessarily desirable integers true 
constructors eld names programmers algebraic data types de ne sums example data just data left right cases common de ne projection functions just just just left left left right right right obvious notational convenience re dot notation allow constructor dot indicate projection 
just equivalent left equivalent 
avoid need de ne projection functions explicitly 
notation particularly convenient haskell newtype declarations allow declare new data type isomorphic old 
example newtype age age int age isomorphic int 
constructor age usual type age int age allows convert int age 
put constructor quotes implemented identity function run time cost 
reverse coercion convenient constructor projection function write age coerce value age int 
proposal entirely syntactic dot notation sum projections record eld selection 
syntactically distinguishable constructors upper case letter elds 
convenient store value associated particular record eld variable name 
motivated practical experience records standard ml community useful allow form syntax record expressions patterns 
allows eld speci cation form var treated abbreviation eld binding form var var referred pun way uses single name di 
example function de nition uses sum components record 
permits de nitions int int int int expressions variables bound elds name argument 
supported versions haskell prior haskell removed concerns behaved renaming bound variables 
example de nition int int rename occurrences 
de nition int int perform renaming serving record label 
fact perfectly behaved circumstances provided remembers simply abbreviation may need expanded completing task renaming int int rename follows int int anecdotal experience standard ml community suggests merits greatly exceed disadvantages 
renaming easy extend set supported operations records include renaming facility allows change name associated particular eld record 
notation de ned formally terms simple translation case case update section notation easier programmers renaming easier compiler implement 
kind signatures type constructors earlier comments indicate kinds type constructors examples point row row type point int int clear implication haskell provide way give kind signatures type constructors simply permitting commented kind signature 
kind signatures syntactically distinguishable value type signatures type constructors upper case letter 
alternative allow kind annotations form type point row row int int annotations useful data class declarations 
need explicit kind information restricted extensible records 
workshop proceedings hughes writes data set cxt set unused cxt reason unused constructor name implies force cxt kind 
far better say set data set cxt set topics proposal support operations records discussed literature 
examples include record concatenation 
allows elds distinct records merged form single record 
researchers studied operator closely related variants 
example wand way describe multiple inheritance object oriented languages remy described technique typing form record concatenation free language supporting record extension 
unchecked operations 
variations operations records seen place slightly fewer restrictions types input parameters 
example unchecked extension operator guarantees speci ed eld appear result corresponding value regardless eld name input record 
checked operators programmer distinguish possible cases extension update appropriate 
unchecked operations supported example remy type system records natural extension ml 
class labels 
allows labels manipulated program values number potentially useful applications 
prototype implementation developed details worked 
clear proposal extended accommodate operations believe interesting topics 
comparison systems section provide brief comparisons proposal facilities de ning records systems 
focus practical implementations refer interested readers jones comparisons underlying theory theoretical proposals :10.1.1.21.6627
comparison standard ml system records standard ml original inspirations proposal course system supports extensibility update polymorphic operations records 
point shows standard ml try record situation corresponding set eld labels determined compile time resulting compile time error 
comparison sml earlier type systems records atsushi ohori built version standard ml interpreter known sml extends sml record system support update polymorphic operations records ohori system provide separation rows records proposal offers section clear records interact type classes wrong criticize sml basis omissions relevant context haskell advanced kind class system sml :10.1.1.26.4611
apart di erences syntax main advantage system ohori support provides extensibility 
information sml available world wide web www kyoto ac jp ohori html 
comparison trex proposal closely related trex implementation current releases hugs 
real di erences choice notation record types trex uses rec proposal uses 
choice trex con ict syntax labeled elds haskell 
record values trex uses 
proposal uses 
trex con icts update syntax datatypes labeled elds haskell 
example haskell expression form treated update value eld 
current proposal expect treat expression application function record just eld 
trex uses proposal uses 
deviate trex easy trailing lost follows large block eld de nitions 
similar way haskell puts guards equation de ning function languages 
choice ultimately matter taste compelling technical reason justify 
sml trex uses name selector eld proposal uses dot notation eld selection function written 
dot notation trex con icts function composition haskell 
trex support update notation update features appeared original trex implemented hugs prototype 
trex uses proposal uses trex con icts notation unit type haskell 
trex section con ict syntax tuples expression read di erent ways tuple abbreviation record 
short current proposal di ers small ways trex changes possible need retain compatibility syntax haskell 
comparison proposal proposal quite similar 
notably adopt idea record selection 
gone abandoning haskell current record system altogether empty row unit tuple providing syntax record updates section constructors selectors section 
elaborated little implications row polymorphism 
proposals clearly share common foundation 
shortcomings proposal main reasons turn general idea concrete design highlight di culties deserve attention 
haskell better began describing weaknesses labeled eld mechanism haskell motivate key features proposal 
section focus areas haskell approach ers advantages proposal 
double lifting problem 
part price pay having lightweight records expensive record datatype 
example proposal de nition datatype introduces levels lifting data mkp double double semantic terms means datatype contains mkp distinct elements 
implementation terms means attempt access coordinates require double indirection 
comparison de nition haskell introduces level lifting 
behavior recovered proposal adding strictness annotation record component datatype 
data mkp double double unpacking problem 
second definition datatype help avoid levels indirection construct value type need stage process extract value datatype 
example extract rst remove outer mkp constructor expose record required eld obtained 
provides additional incentive adopt constructors eld selectors section 
allow selection component value type written succinctly mkp approach help deal examples filesystem datatype section eld name appears multiple branches algebraic datatype 
haskell compiler takes care generating appropriate de nition selector function 
proposal coded hand name filesystem string name file name name folder name strictness annotations 
haskell allows individual components datatype marked strictness annotations example data mkp double double proposal described allow record types lightweight declared 
advantage labels di erent types 
disadvantage way special meaning case strictness annotation particular label 
way overcome restriction lexically distinct sets eld labels distinguish strict non strict components 
alternatively introduce strict versions extension update operators 
problem approach strict evaluation programmer remembers insert required annotations 
impact problems depend large extent way records algebraic datatypes 
polymorphism part haskell standard hugs ghc allow components algebraic datatype assigned polymorphic types 
standard example de ne concrete representation monads values type data mon unit forall bind forall support datatype constructor lesser degree unit bind selectors special status type checker propagate explicit typing information places values datatype 
type inference possible information 
proposal special status lost records constructed way elds selected way 
example function extend record unit eld just unit unit unit type variables range monotypes kind row respectively hint polymorphic value unit expected 
intuitively clear able propagate programmer supplied type information places needed mechanisms need support di erent mechanisms support current hugs ghc extensions illustrated 
promising approach previously parameterized signatures called predicates records lacks predicates 
predicates provide looser coupling records component types delays need resolve point explicit typing information available 
immediately obvious integrate approach main proposals rely lacks predicates 
possibility special typing rule syntactic composition constructor application record construction ectively recovering rule constructors ghc hugs 
ghc hugs rule restricted case constructor applied arguments saturate universally quanti ed arguments map xs rejected requiring record construction syntactically visible arguably worse 
instances section propose records automatically instances certain built classes eq show 
user de ned type programmers may want record type instance classes provide instance built classes 
possible de ne instances records shape set eld names xed 
example dene tuples instances standard haskell classes manner instance ord ord ord field field 
care required deal instances record types involving extension 
illustrate point consider collection instance declarations instance int 
ok instance bool instance 
instances instance 
overlap 
rst pair instances class acceptable second pair rejected overlap 
example declarations provide distinct potentially ambiguous ways demonstrate type int bool instance problem sure options gave nal result obvious way guarantee 
trouble declarations class necessary modular user de ned instances record types 
example imagine trying declare eq instances record 
led say instance eq eq eq need instance declaration distinct eld label leads declarations just 
ambiguity inthis case boils de ning order elds compared 
away impasse obvious piece 
acknowledge debt john hughes david espinosa haskell workshop referees constructive feedback 
cardelli 
extensible records pure calculus sub typing 
gunter mitchell pages 
cardelli mitchell 
operations records 
gunter mitchell pages 

polymorphic extensible records haskell 
launchbury editor haskell workshop amsterdam 

records variants quali ed types 
phd thesis department computer science university nottingham 
jones :10.1.1.21.6627
polymorphic type system extensible records variants 
technical report tr department computer science university nottingham nov 
gunter mitchell editors 
theoretical aspects object oriented programming 
mit press 
hughes 
restricted data types haskell 
meijer editor haskell workshop paris sept 
jones 
theory quali ed types 
european symposium programming esop number lecture notes computer science rennes france feb 
springer verlag 
jones 
parameterized signatures express modular structure 
rd acm symposium principles programming languages popl pages 
acm st petersburg beach florida jan 
jones peterson 
hugs user manual 
technical report oregon graduate institute may 
ohori :10.1.1.26.4611
polymorphic record calculus compilation 
acm transactions programming languages systems nov 
remy 
type inference records natural extension ml 
gunter mitchell 
remy 
typing record concatenation free 
gunter mitchell 
wand 
type inference record concatenation multiple inheritance 
proc 
th ieee symposium logic computer science pages 

