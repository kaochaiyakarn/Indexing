breaking fixing needham schroeder public key protocol fdr gavin lowe analyse known needham schroeder public key protocol fdr refinement checker csp 
fdr discover attack protocol allows intruder impersonate agent 
adapt protocol fdr show new protocol secure small system 
prove result tells small system secure system arbitrary size 
distributed computer system necessary mechanism pair agents assured identity sure really talking intruder impersonating agent 
role authentication protocol 
failures divergences refinement checker fdr model checker csp analyse needham schroeder publickey authentication protocol 
fdr takes input csp processes specification implementation tests implementation refines specification 
analyse sorts systems including communications protocols distributed databases puzzles show may analyse security protocols 
model agents part protocol csp processes 
model general intruder interact protocol intruder observe intercept messages learn information values nonces information introduce fake messages system 
fdr test protocol correctly achieves authentication discover attack protocol oxford university computing laboratory wolfson building parks road oxford ox qd united kingdom 
mail gavin lowe comlab ox ac uk 
gavin lowe allows intruder imitate agent run protocol agent attack previously reported 
adapt protocol fdr show new protocol secure small system single initiator single responder 
prove implies system arbitrary size secure prove attack system running protocol matter large attack small system 
proof hand fully automatic believe proof considerably simpler direct proof security arbitrarily sized system 
believe security protocols provide excellent subject analysis process algebra tools 
obviously important get protocols right particularly increasing commercial financial internet 
protocols appeared literature broken 
attacks somewhat subtle hard spot protocol discussed appeared years eventually broken 
existing formalisms analysing protocols proved effective incorrect proof protocol appeared 
main contributions fold study errors may security protocols tool fdr study protocol running system arbitrary size may verified considering just single small system 
needham schroeder public key protocol needham schroeder public key protocol aims establish mutual authentication initiator responder protocol uses public key cryptography 
agent possesses public key denoted agent obtain key server 
possesses secret key gamma inverse write fmg message encrypted key agent encrypt message public key produce decrypt message ensures secrecy 
protocol uses nonces random numbers generated purpose single run protocol 
denote nonces subscripts intended denote nonces generated respectively 
complete needham schroeder public key protocol involves steps 
consider reduced version steps 
steps omit agents request receive public keys key server omitting steps equivalent assuming agent initially public key 
known breaking fixing needham schroeder public key protocol attack full protocol allows intruder replay old compromised public keys key delivery messages contain proof freshness attack easily prevented 
attack consider newer subtle 
reduced protocol described message fn ag pk message fn pk message fn pk initiator seeks establish session responder selects nonce sends identity message encrypted public key 
receives message decrypts message obtain nonce returns nonce new nonce encrypted key message 
receives message assured talking able decrypt message obtain returns nonce encrypted key 
assured talking able decrypt message obtain fdr find attack needham schroeder public key protocol section model protocol csp 
assume reader familiar csp described 
model protocol defining csp processes corresponding agents 
give csp description general intruder interact protocol 
fdr refinement checker test intruder successfully attack protocol 
assume existence sets initiator initiators responder responders key public keys nonce nonces 
represent protocol message form message fn csp event comm msg encrypt modelling protocol message encrypted component form fmg csp event containing fields form encrypt define sets communications events corresponding steps protocol msg encrypt initiator initiator responder key gavin lowe msg encrypt initiator responder key nonce msg encrypt initiator responder key msg msg msg msg standard communications system modelled channel comm 
want model fact intruder fake intercept messages introduce extra channels fake intercept 
declare channels channel comm fake intercept msg ensure receiver faked message aware fake sender intercepted message aware intercepted 
introduce extra channels defining external interface protocol 
represent request user initiator connect responder event user represent resulting session event session add channels represent state agents useful subsequent analysis system 
represent initiator thinking part run protocol event running represent responder thinking part run protocol event running represent initiator committing session event commit represent responder committing session commit declare channels channel user session running running commit commit initiator responder represent responder identity single nonce csp process init 
want consider responder nonce compose processes sequentially interleaved 
ignoring moment possibility intruder action process defined init user running comm msg encrypt key comm msg encrypt key comm msg encrypt key commit session skip breaking fixing needham schroeder public key protocol initiator receives request user connect responder starts believes run protocol sends message containing nonce encrypted public key 
receives message back checks value nonce 
sends back corresponding message commits session carries session 
introduce possibility enemy action applying renaming process 
renaming ensure message message sent initiator intercepted message faked 
define initiator identity nonce init init comm msg comm msg comm msg intercept msg comm msg comm msg comm msg fake msg comm msg comm msg comm msg intercept msg define csp process representing responder similarly 
intruder want model intruder process perform attack expect real world intruder able perform 
intruder able ffl overhear intercept messages passed system ffl decrypt messages encrypted public key learn new nonces ffl introduce new messages system nonces knows ffl replay message seen possibly changing plain text parts understand contents encrypted part 
assume intruder user computer network take part normal runs protocol agents may initiate runs protocol 
define general nondeterministic intruder act 
consider intruder identity public key initially knows nonce refinement tests traces model reasons efficiency define intruder external choices nondeterministic choices natural 
process perform comm msg intercept msg event init na perform corresponding comm msg gavin lowe instant state intruder parameterized knowledge acquired 
precisely model intruder parameterized sets message message message unable decrypt set ns nonces knows 
intruder observe messages passed system possibly intercepting 
messages encrypted key learn new nonces remembers encrypted component 
introduce fake messages system nonces knows replaying encrypted components unable decrypt 
captured long reasonably uniform csp definition ns comm msg encrypt ns fng ns intercept msg encrypt ns fng ns comm msg encrypt ns fn ns intercept msg encrypt ns fn ns comm msg encrypt ns fng ng ns intercept msg encrypt ns fng ng ns fake msg ns fake msg ns fake msg ns fake msg encrypt ns ns fake msg encrypt ns ns ns fake msg encrypt ns ns consider intruder initially knows nonce intruder fg fg fg fn practice efficient define intruder slightly differently interleaving components 
breaking fixing needham schroeder public key protocol analyzing system may define system intruder agents init session responder sy stem agents comm intruder fdr test protocol correctly authenticates agents 
fdr takes inputs specification implementation test implementation refines specification 
working traces model csp checking refinement amounts testing trace implementation trace specification 
test protocol correctly authenticates responder need find specification allows traces initiator commits session taken part protocol run 
initiator committing session represented commit event responder part run protocol represented running authenticity responder tested specification ar ar running commit ar fjr running commit ar ar jjj run sigma ar expresses commit event occur running event interleaving specification run sigma na sigma set events allows events occur arbitrary order 
fdr verify sy stem refines ar protocol correctly authenticate responder consider authentication initiator 
protocol ensure responder commits session initiator took part protocol run 
formally commit event occur corresponding running event 
requirement captured specification ai ai running commit ai fji running commit ai ai jjj run sigma notation differs little write parallel composition synchronizing set events write cn jg set communications channels cn fdr input files case study obtained url www comlab ox ac uk users gavin lowe security index html 
gavin lowe fdr discover sy stem refine ai finds trace running intercept msg encrypt fake msg encrypt intercept msg encrypt fake msg encrypt intercept msg encrypt fake msg encrypt system perform commit responder commits session trying establish session corresponding running event 
rewrite attack follows 
attack consists interleaving runs write ff fi 
term run particular instance protocol term attack sequence events leading breach security 
run ff tries establish session run fi intruder establish false session write example fi represent message run fi write represent intruder imitating message ff fn ag pk message fi fn ag pk message fi fn pk message ff fn pk message ff fn pk message fi fn pk message ff tries establish session sending encrypted key 
message fi intruder imitates start run protocol sending nonce responds choosing new nonce returning message fi 
intruder decrypt message obtain uses oracle replaying message message ff note message form expected run ff 
decrypts message obtain returns message ff 
decrypt message obtain returns message fi completing run fi protocol 
believes correctly carried run protocol corrected protocol easy adapt protocol prevent attack simply include identity responder encrypted part breaking fixing needham schroeder public key protocol message message fn ag pk message fn bg pk message fn pk prevents attack message fi message fi fn bg pk intruder successfully replay message ff expecting message containing identity 
may adapt csp representation protocol intruder 
fdr fails find attacks protocol case initiator responder single nonce take part single run protocol 
conclude protocol safe small system 
question remains general system safe attack 
agents nonces intruder obtain knowledge runs able attack protocol 
just honest agents involved 
agent act initiator responder 
kind questions arise model checking problems unique area security protocols 
may typically tool verify small system fixed size necessarily tell larger systems correct 
solution prove method system arbitrary size incorrect imply small system incorrect 
idea section prove attack general system running needham schroeder protocol attack small system considered 
define notation prove useful result concerning way intruder responds nonce challenge 
adopt general setting results may applicable wide class protocols 
logic analyzing protocols messages defining data type messages 
message may atom concatenation simpler messages message encrypted key 
may define set msg messages bnf expression atom msg fmg gavin lowe ranges set agent agent names set key keys set nonce nonces 
take concatenation operator associative 
key assume existence inverse gamma message encrypted decrypted gamma symmetric crypto systems key inverse public key systems public secret keys inverses 
may define means message contain contains contains contains contains fm contains fm contains may define particular message sub msgs fm msg contains want able discuss messages intruder produce messages seen far 
write represent intruder may derive message finite set messages definition adapted 
fmg fmg gamma intruder seen message produce message rule 
produce halves concatenated message produce message rule vice versa rule 
produce message key encrypt rule 
produce encrypted message corresponding decrypting key decrypt message rule 
write 
state lemmas relation prove useful 
may proved rule induction 
lemma may derived set information may derived larger set information lemma derived messages may subsequent derivations fm breaking fixing needham schroeder public key protocol lemma may derived sub message may contains encrypted sub message contains may derived contained element decrypted sub msgs contains contains msg key fzg gamma lemma suppose contains atom 
element contains key sub message containing may derived contained element key contains sub msgs contains contains traces space run identifiers ranged ff fi define message number run identifier natural number pair 
theta write ff message run ff 
write represent intruder imitating agent define set agent contain agent identifiers agent agent fi agent define set agent identifiers representing intruder fig fi agent define communication quadruple fields message number sender communication represents intruder imitating receiver represents intruder intercepting message meant actual message sent communication theta agent theta agent theta msg convenient represent communication ff conventional visually pleasing message ff gavin lowe define run sequence communications communications run identifier ff fi fi ff honest agents follow protocol 
define trace sequence communications formed interleaving runs distinct run identifiers 
tr tr range traces 
may data included communications particular run data tr fm ff ff trg assumption honest agent introduces new nonce run protocol nonce really freshly chosen means agent introduce different nonces different runs honest agent introduce nonce intruder initially know value nonce 
term assumption nonce assumption 
intruders assume intruder initial knowledge may represented set atoms ik normally include identities agents system public keys secret key 
may define intruder knowledge particular trace knowledge tr fm ik data tr mg intruder knows message trace tr may derived data tr initial knowledge 
define trace valid intruder produces messages derivable knowledge acquired valid tr tr race ff msg msg agent tr ff tr knowledge tr intruder sends message observing tr intruder knowledge point 
write learns ff intruder learns piece information message number ff learns ff tr msg agent tr race tr ff tr knowledge tr knowledge tr ff breaking fixing needham schroeder public key protocol drop argument tr obvious context 
write says ff intruder sends communication ff contains sub message says ff tr msg agent ff tr contains nonce challenges prove result concerning way intruder meets nonce challenge 
additional assumptions protocol question ffl encrypted parts differently numbered messages protocol textually distinct valid message valid message contains fmg contains fmg possible tell message encrypted part comes means example intruder replay encrypted text taken message interpreted message 
ffl runs protocol essentially form 
ffl intruder learn additional keys trace knowledge tr ik note needham schroeder public key protocol satisfies assumptions intruder learn additional keys trace follows fact secret keys passed protocol proved formally lemma 
theorem consider valid trace tr includes nonce challenge met intruder message ff message ff contain nonce contains contains nonce introduced message ff returned ff suppose sub msgs contains ik fzg ik fzg holds gavin lowe 
intruder produce immediately message ff learns ff learns ff 
intruder replays encrypted sub message ff message run fi contains contains says fi msg key fzg gamma ik learns message fi learns fi learns fi proof assume conditions theorem 
nonce assumption intruder know value message ff clearly intruder point learn order produce message ff suppose intruder learns message fi contents message fi formally tr fi tr knowledge tr knowledge tr fi knowledge tr fi ff fi case 
fi occurs ff ff show contains intruder learns message fi ik data tr fm result follows lemma assumption intruder key knowledge constant 
intruder learns message fi ik data tr fm lemma sub msgs contains ik data tr contains disjunct equation imply ik data tr ik data tr contradicting 
contains assumption ff message ff contains ff fi 
nonce assumption nonce breaking fixing needham schroeder public key protocol introduced run fi intruder say message fi trace tr agent tr fi tr contains message fi assumption trace valid ik data tr 
lemma fact intruder know tr contains encrypted sub message previous message fl contents contains contains knowledge tr agent fl tr contains msg key fzg gamma knowledge tr message fl assumption encrypted components differently numbered messages textually distinct message number fi fl 
ff fl ff fl show case leads contradiction 
suppose ff fl 
nonce assumption introduced run fl intruder say message fl 
assumption runs take form message fi contain contradicts assumption introduced fi message fi ff fl 
message ff precedes ff contains ff collecting information gives case 
verifying systems arbitrary size section show attack system arbitrary size running corrected protocol section attack small system described single initiator single responder single nonce carry single run protocol 
proofs proceed considering run leading failure authentication considering extra runs needed intruder learn additional information uses 
gavin lowe attacks initiator section show intruder may imitate responder attack initiator system arbitrary size similar attack small system described 
consider run ff intruder imitates responder attack initiator message ff fn ag pk message ff fn bg pk message ff fn pk note intruder needs send message run additional runs necessary needed order produce fn bg pk intruder decrypt message ff know secret key 
learns fn bg pk ff learns ff learns fn bg pk ff theorem intruder replay encrypted part message ff message run fi say learn fn bg pk message fi says fn ag pk fi learns fi learns fn bg pk fi note responder run fi message fi encrypted public key 
intruder need additional information order carry second run runs needed 
intruder imitate responder attack attack considering small system 
attacks responder consider attack intruder succeeds imitating initiator run ff say protocol responder message ff fn ag pk message ff fn bg pk message ff fn pk note intruder needs produce messages run additional runs necessary needed order intruder learn sends messages 
breaking fixing needham schroeder public key protocol firstly consider nonce handshake intruder decrypt message ff learns fn pk ff learns ff learns fn pk ff theorem intruder replay encrypted part message ff message run fi say learn fn pk message fi says fn bg pk fi learns fi learns fn pk fi note initiator run fi message fi encrypted public key 
form message fi see believe communicating run fi form message fi fn ag pk message fi fn bg pk message fi fn pk see intruder learns component fn ag pk message fi replays ff runs necessary intruder learn knowledge uses attack 
intruder imitate initiator attack responder attack considering small system 
fact case shown attack form lead error authentication may deduce attack system aid fdr 
summary showed order discover attack protocol consider system single initiator responder single nonce 
prove similar result concerning intruder consider intruder single identity say single public key say 
intruders working powerful single intruder 
consider intruder initially knows single nonce say 
assumption honest agents act way regardless actual values nonces introduced agents term data independence 
suppose successful attack intruder uses identity public key gavin lowe nonce 
consider attack intruder identity renamed intruder key renamed intruder nonce renamed data independence assumption run proceeds 
stage new attack intruder knowledge related knowledge corresponding stage original attack obvious way renaming proved formally definition relation 
intruder able produce messages new attack 
new attack successful attacker single identity single public key single nonce 
putting results deduce attack system running protocol applying fdr small system section 
protocol secure 
failures divergences refinement checker csp analyse needham schroeder public key protocol 
encoded protocol intruder csp fdr discover security flaw 
adapted protocol remove flaw fdr verify attacks small system running protocol 
proved prove attacks general system 
clear precisely proved 
proved protocol section secure subject assumptions method encryption encapsulated definition relation 
assumed encryption reasonable intruder unable guess values keys know 
assume secret keys kept secret 
assumed intruder may alter encrypted message replaying message encrypted intruder key 
cipher block chaining see subject certain assumptions possible split encrypted message encrypted sub messages notation fm fm fm proof valid case 
see examples attacks protocols cbc 
believe method analyzing security protocols practical 
encoding protocol intruder csp normally straightforward 
tests fdr fast typically minutes 
proof security small system implies security arbitrarily sized system hand fully automatic 
breaking fixing needham schroeder public key protocol believe proof considerably simpler direct proof security arbitrarily sized system effectively prove general form attack take fdr tedious checking details 
intend analyse protocols approach 
particular produce lemmas theorems useful proving results concerning size system necessary consider order sure attacks protocol eventually hope identify properties protocols concerning example number nonce challenges give results directly 
colin boyd 
hidden assumptions cryptographic protocols 
proceedings iee part november 
michael burrows mart abadi roger needham 
logic authentication 
proceedings royal society london 
preliminary version appeared digital equipment systems research center report 
dorothy denning giovanni maria sacco 
timestamps key distribution protocols 
communications acm 
diffie hellman 
new directions cryptography 
ieee transactions information theory 
formal systems europe failures divergence refinement user manual tutorial 
version 
hoare 
communicating sequential processes 
prentice hall 
gavin lowe 
attack needham schroeder public key authentication protocol 
information processing letters 
roger needham michael schroeder 
encryption authentication large networks computers 
communications acm 
rivest shamir adleman 
method obtaining digital signatures public key cryptosystems 
communications acm february 
roscoe 
developing verifying protocols csp 
proceedings workshop protocols 
tu eindhoven 
gavin lowe roscoe 
model checking csp 
classical mind essays honour hoare 
prentice hall 
roscoe helen 
verifying replicated database case study model checking csp 
submitted publication 
steve schneider 
security properties csp 
preparation 
bruce schneier 
applied cryptography 
wiley 
