automatic generation simulation web courses model documentation manuel alfonseca juan de lara dept inform tica universidad aut noma de madrid 
de km 
madrid spain mail manuel alfonseca juan lara ii uam es presents procedures tools generate fully automatic multimedia web courses simulations 
courses composed html pages interactive simulations help students understand subject course 
accomplished means object oriented simulation language allows include information appearance html page simulation model going included 
language incorporates constructions synchronize multimedia elements simulation execution produce distributed simulations 
compiler language ool generates java applets simulation problem generate automatically documentation models form html pages information symbol table special comments included model 
example construction multimedia simulation page simulation ecosystem extension distributed simulation environment explained 
keywords continuous simulation course generation web simulation distributed simulation multimedia enriched simulation automatic documentation education html java ool 
currently successful hypermedia system world wide web www advantages traditional hypertext applications 
brought current proliferation educational courses www run simple transposition lecture notes pages including sophisticated elements animated graphics simulations forth 
students familiar browsing web playing computer games 
web users order simulation desire tools allow quick easy experimentation 
clear interest field created need adequate tools help elaboration courses possible express possibilities offered www teaching 
words directorate general xiii stress helping develop authoring tools easy teachers wish include teaching methods multimedia elements local web integration simulation web services done ways thick server approach 
case simulation programs execute server programmed language accessible common gateway interface cgi 
approach execution models increases received month year revised month year accepted july transactions society computer simulation international issn copyright society computer simulation international volume number pp 
transactions volume traffic data web may generate performance problems 
thick client approach 
simulation tools interpreters plug ins preloaded downloaded client execute 
approach decreases data traffic cost stringent client requirements 
executable programs downloaded danger client incompatibility virus transmission 
pure navigator approach 
models integrated html pages making educational courses executed java applets java interesting properties write run provide client independence 
approach means initial loading pages slower applets downloaded model execution may fast 
distributed execution 
models execute simultaneously machines cooperate 
java programming language programs may communicate means remote method invocation rmi java analogue traditional known remote procedure call rpc distributed computing 
java distributed object model remote object methods invoked java virtual machine potentially host 
sponsored spanish commission science technology cicyt project number tel 
distributed modeling 
models distributed web 
reside best cataloged indexed maintained model designer browse different components combine build complex model 
approach simplifies collaborative model definition model reuse 
main ways reducing effort needed build models providing library contains pre defined classes may user build model 
case model builder usually programs general purpose language java 
special purpose simulation language compiler translates models languages java 
approach 
parallel distributed simulation pads having included high level architecture hla air traffic transportation systems 
transparency machine assignment heterogeneous environments essential properties distributed simulation applications 
proper synchronization components important 
java language especially applicable solving problem 
working time development advanced simulation tools simplify generation educational courses www 
courses contain interactive simulation programs allow users explore proposed problem changes promoting active role student learning process learning discovery follows tendency higher education move teacher centered paradigm student centered paradigm 
motivated lack tools directed integrating simulation models courses web 
languages tools procedures step authoring tool construction simulation web courses 
language extension old continuous system modelling program language sponsored ibm 
call new language main difference addition object oriented constructs easier simulation complex systems mutual interaction similar agents modeled collections objects 
language solve systems pdes finite difference finite element methods constructions produce distributed simulations 
language build course newton gravitation solar system course ecosystems course partial differential equations 
capabilities handle multimedia elements discrete events added language 
explain methodology developed generate courses design simulation model publishing web 
alfonseca de lara integrate multimedia elements simulation 
automatically generate model documentation form html pages 
produce distributed simulations 
third fourth point instructions describe appearance html pages new contributions described 
organized follows section presents procedure follow generate courses simulation web 
example page course ecology shown 
section compiler generates courses 
section discusses extensions added language produce distributed simulations describes ecosystem model executed parallel manner 
section 

automatic generation courses developed procedure generate generic web courses simulation 
procedure applied course dealing scientific technical subject 
course consist html pages simulation applets 
procedures tools allow program high level language obtain html pages applets 
previous publication procedure described partially automatic 
improved achieve full automation permit including multimedia elements simulations 
procedure shown 

procedure generate web courses volume transactions steps procedure explained sections 
time design course ecology construction course page shown detail 
step designing course step design course 
depending course single model may pages 
steps procedure applied course contains simulations 
case want design course ecology application models different steps followed remain 
models volterra equations generalized applicable multi level multi species ecosystems 
approaches ecological simulations multi agent simulations formal transactions volume september transactions listing 
species class file species csm grammars cellular automata course consist pages introductory page species ecosystem primary producer prey predator appropriate parameters bring ecosystem equilibrium 
page demonstrate periodicity kind system 
species system total equilibrium 
species system originally total equilibrium invaded time new predator 
invasion takes system total equilibrium soon reaches oscillatory stability 
system time invaded new prey 
periodical stability attained time different preceding case 
include macros csm title class species background ck bg gif file contains italic species class encapsulate behaviour italic species ecosystem 
author juan de lara link www ii uam es www ii uam es email juan lara ii uam es date bar class species name name species 
name name icon graphical representations 
icon initial population 
parameters volterra equations 
start start time species enters ecosystem 
max max maximum population species 
proportionality constant 
data start max ill ill int int variables cause epidemics 
data ill int dynamic main simulation loop step start limit max xt limit population reasonable size xt xp calculate actual population xp int ill produce epidemic appropriate action species percent interaction species trophic chain percent percent percent percent percent percent xp percent species system equilibrium 
species system user interface lets student modify different parameters perform experiments 
experiments suggested text page student may perform 
simulation ecosystem different species interact build complicated trophic chains ecological niches 
ecosystem simplification ecosystem 
page provide explanations appropriate moment simulation 
done including multimedia elements synchronized simulation execution 
step building necessary models second step build models continuous simulation language 
case models single class called species encapsulate behavior species ecosystem 
declare object species ecosystem 
code species class shown listing 
listing added special comments lines asterisk help compiler generate model documentation 
achieve task compiler takes advantage information held symbol table classes declared methods parameters types objects types procedures declared 
documentation consists html file main model plus extra page class model 
parameter object classes linked corresponding class documentation page 
added new entries compiler symbol table hold name html file location inside file class documentation located 
new special comments included provide compiler extra information model construction 
indicate model author mail address mailto html tag created model behavior date model programmed title comments included main model inside definition class 
additional comments control visual aspect documentation bars links tables images associated explanations html native code included inside model means html instruction 
tell compiler translate sentences html tagged language tex means macros 
example macro defines change background appearance translate background body background file macros csm includes macros sections associated targets include text possible format text means special tags 
tags possible things alfonseca de lara change text style size font insert list items targets links give access name author mail address date specified means author email date 
access initial values simulation variables listing done variables start max ill int 
variable vector matrix html table created show values 
compute simple expressions involving blocks just monadic operators 
done inserting expression symbols 
compiler counts number tables images items list counters accessed means tags icount take part expression useful ordered lists images tables automatically 
access variables current date current time name file compound formats created means style instruction 
instance style item link creates compound style called create list links 
styles compound style compound 
step adapting model page stage design simulation runs page course 
example class species ecosystem contain different number species different coefficients simulate equilibrium oscillating equilibrium situations 
page simulation simplified ecosystem realistic data coefficients trophic chains 
example stage construction page invasion predator shown 
page initially ecosystem species equilibrium lion gnu second predator cheetah invade ecosystem time 
create species objects values coefficients tailored system initially total equilibrium derivatives populations equal zero 
cheetah object default value variable start overridden value 
resulting model shown listing 
step validating model point test models 
compiler provides fast easy standalone environment simplifies testing allows course writer experiment different situations 
depending compiler options choose generating java code problem 
testing volume transactions purposes usually choose simple print dimensional plot interesting model variables 
suitable calculation cost simulation great 
hand java model simple requires complicated output visualization provide output forms generating java code 
java code generated different details java code multithreaded simulate pointers code take advantage default parameters constructors functions optimizations related memory management expressions involving vectors matrices done compiler 
example generated java code shown listing 
step deciding type position graphical outputs output forms included single simulation problem 
choose generate java applets main panel simulation embedded inside html page course 
assign graphical outputs panel grid outputs added separate windows 
graphical outputs chosen course designer animated dimensional plots dimensional plots iconic plots graphics show equations graphically maps isosurfaces graphics show nodes grid solve partial differential equation example selected graphical outputs animated dimensional plot show populations species ecosystem 
iconic plot shows number icons representing species proportion population 
complete stage add listing instructions shown listing see page 
parameter instruction defines position output going placed center transactions volume september transactions listing 
model predator invasion page file africa csm title species invasion predator include species csm actual species species cheetah icons gif species lion lion icons lion gif species gnu gnu icons gif species icons leafs gif dynamic main simulation loop species step invoke main section species cheetah action gnu interactions 
lion action gnu species gnu action lion methods invoked 
gnu action cheetah trophic chain 
gnu action action gnu timer delta declare control variables method adams select integration method south main panel 
second parameter species means attribute object belonging class species 
case equivalent specifying lion cheetah gnu obviously general 
step including multimedia elements decide include multimedia elements simulation step synchronize simulation execution 
general procedure designed include multimedia elements simulation shown 
conditions change multimedia element element logic expressions 
conditions true corresponding element launched 
way easy understand happening simulation 
explain step procedure shown example 
step identify appropriate multimedia elements case text panel explaining happens model explanations invasion predator breaks equilibrium oscillatory equilibrium reached image showing trophic chain moment different trophic chains predator invasion 
second step identify conditions change texts images 
different intervals needed simulation till invasion predator 
condition expressed start time time invasion predator setting stability 
set start time lion xp cheetah xp gnu xp continued page alfonseca de lara listing 
scheme java generated code package name import java awt 
import objects java library import plot public class frm name extends frame applet implements runnable 
interfaces depending graphical outputs selected 
declare arrays simulated pointers variables integrated plot printed 
declare model data 
declare graphical objects public void run thread calculus done 
public void stops thread done 
void name calculus done simulation loop 
void 
initializes arrays simulated pointers necessary public void frm name constructor adds graphical objects initializes data necessary 
public void name sim 
simulation loop initialize selected graphical representations name print selected variables 
plot variables varies depending chosen graphical output 
perform integration depending selected integration method 
public boolean event handles user actions 
private void updates array pointers variables integrated 
private void updates array variables plotted 
private void updates array variables printed 
functions depending graphical outputs selected listing 
adding graphical outputs file africa csm 
plot species time species volume transactions 
procedure integrate multimedia elements simulation xp derivative population corresponding species 
interval change text image 
state oscillatory equilibrium reached 
expressed means default clause transactions volume september transactions listing 
adding multimedia elements file africa csm launches corresponding multimedia elements expression true 
interval change text explanation 
multimedia elements located main panel right previous graphics se 
listing shows instructions added listing include multimedia elements 
step adding instructions html generation earlier versions system links images manually added generated html pages 
process avoided due fact simulation language extended instructions control appearance html page applet placed 
described automatic generation documentation step 
kinds html appearance instructions documentation asterisk course page 
addition instructions add descriptive text include previously compiled models useful simulations placed page 
instructions compiler translates appropriately special symbols accented vowels 
advantage taken include instruction provides reusing html sections common pages indexes course pages footnotes headings listing shows code necessary obtain start time time gif default inv gif se start time time txt start time lion xp cheetah xp gnu xp inv txt default txt listing 
instructions generate html page third page course ecology author juan de lara email juan lara ii uam es date title predator breaks equilibrium description see new predator time description affects system equilibrium 
image images africa jpg example trophic chain description see new predator causes description decrease population 
description decrease increase population description plants takes place model africa csm thesis courses include csm include footnote csm third page course 
page shown 
file csm contains index common pages ecology course 
footnote csm file contains footnote common courses generated 
course generated language internet www ii uam es 
compiler compiler generate courses called ool compiler language working scheme shown 
compiler generate code different object languages java applets programs plain uses amulet library 
case possible generate documentation models form html pages 
systems ame generate code simulation models general lack systems integrate executable models educational courses web 
alfonseca de lara 
generated course page mesh generator graphical tool programmed java generate code domains meshes conditions solve system partial differential equations 
user standard components library includes electronic components mechanical components components solve typical partial differential equations 
user interface generated automatically configured means compiler options 
useful want restrict possibilities interaction user simulation 
interface allows student experiment problem answer questions visual interactive simulation paradigm 
interface complete programmer output forms available generating java code 

standalone applications distributed applications traditionally term parallel simulation applied discrete event simulation pdes 
applied volume transactions continuous simulation parallelization efforts centered algorithms solution systems equations matrix operations 
environment web approach useful usually implies fine grain parallelism example resolution elliptic problems iterative methods processor associated matrix elements 
web environment high latency increase granularity minimize communications maximize computation 
hand internet offers advantages existing infrastructure 
common established communication protocols mechanisms 
highly scalable 
advantages converting internet interesting framework solve interesting complex problems 
distribution incorporated rmi java packages object level 
possible specify machine object created object replicated computer 
machine part simulation label specify independently actual address 
way easy change distribution scheme changing machines assigned label 
simple model compiled machine part simulation appropriate compiler options 
different output visualization forms machine possible visualize change local remote objects 
distribution scheme allows different integration methods machine 
synchronization points semaphores added automatically compiler assuring serialization distributed code 
synchronization point added simulation step 
guarantees simulation time machines 
possibility generating semaphores 
transactions volume september transactions 
ool compiler 
scheme distribution appropriate identify clusters objects interact 
ecological example distribution solution objects interact 
suppose want simulate separate ecosystems time 
species ecosystems interact migration possible 
proper solution problem distribution assign ecosystem different machine 
types migration implemented seasonal due 
migration target selected ecosystems simulation target ecosystem machine migrating species choose ecosystem fewer individuals species minimize competition 
information associated generic species food preference coefficients type migration performs encapsulated class called 
developed class population represent behavior particular species particular ecosystem containing initial actual number individuals generic species belongs 
ecosystem modeled collection species 
migration population interacts species ecosystem 
classes simulated set ecosystems 
equilibrium species lions grass 
equilibrium species lions zebras grass 
observe invasion zebras ecosystem breaking equilibrium 
species ecosystem created machine classes information generic species replicated machines 
distributed model faster single processor model due fact network time dominates computation time particular example increase number species ecosystem number ecosystems performance parallel version increases 
listing shows code simulation 
file machines csm contains ip address machines labels 
testing purposes different labels point equal addresses 
species ecosystem invoke method migrate selects appropriate migration scheme current include machines csm type migration constants data excess season alfonseca de lara listing 
code distributed ecosystems simulation species 
migration condition holds migration takes place 
taken discrete event handled instructions integrators reset initial condition abrupt modification variable xp takes place variable integrated 
class keeps generic information species name name name species icon icon associated output form data type indicate migration type data percent vectors indicate preferences trophic chains data coefficients volterra equations class population simulates behaviour population species name name population data orden initial population order trophic chain sp pointer class belongs dynamic main simulation loop class xt xp calculate actual population xp sp calculate population increment coefficient 
xt xt prevent population negative 
initializes variables 
action method implements species 
interaction 
num method called migrations num reduce population num xp num sp calculate new increment apply 
continued page migrate population migration due sp calculate excess individuals flag indicate migration posmin position min position ecosystem individuals type 
reduce population xp sp reduce population increment posmin increment population 
migrate population seasonal migration pmin position min position ecosystem individuals type time calculate migration time sp pmin discrete 
event species migrate listing continued page volume transactions transactions volume september transactions listing 
code distributed ecosystems simulation continued previous page increase target population 
sp reduce population zero 
xp xp sp update increment migrate population population places migration sp type migrate migrate places invoke appropriate method depending migration type 
action population interaction species sp percent orden see details 
sp percent orden sp percent orden sp percent orden sp percent orden sp percent orden xp sp percent orden sp orden sp sp orden sp implement preferences species trophic chain data lions eat zebras data flags vector position data eaten lions eat grass data flags vector position data zebras eaten lions eat grass data flags vector position data grass eaten zebras data flags vector position declare species ecosystems lion lion lion gif excess gnu gnu gif season zebra zebra zebra gif excess leafs gif excess declare population ecosystem 
ecosystem placed machine population zebras individuals initially population li lion lion machine population gn gnu gnu machine population zb zebra zebra machine population lg machine second ecosystem placed machine 
population li lion lion machine population gn gnu gnu machine population zb zebra zebra machine population lg machine listing continued page alfonseca de lara listing 
continued previous page second ecosystem placed machine 
population li lion lion machine population gn gnu gnu machine population zb zebra zebra machine population lg machine population ecosystem li gn zb lg declare collection objects population ecosystem li gn zb lg ecosystem 
population ecosystem li gn zb lg population lions li li li collections population gn gn gn species type 
population zebras zb zb zb dynamic main simulation loop don allow compiler reorder equations lions migrate lions lions perform migration lions 
migrate perform migration 
zebras migrate zebras zebras perform migration zebras ecosystem step main section ecosystem populations ecosystem action ecosystem interaction ecosystem populations ecosystem step main section ecosystem populations ecosystem action ecosystem interaction ecosystem populations ecosystem step main section ecosystem populations ecosystem action ecosystem main section ecosystem populations choose output forms population species plotted machine objects placed 
plot machine ecosystem time ecosystem plotted plot machine ecosystem time ecosystem plotted plot machine ecosystem time ecosystem plotted choose control variables integration method timer delta method adams volume transactions mathematical blocks returning value event handlers appear instruction similar constructions traditional programming languages 
abrupt changes variables integrated treated way variables appear discontinuous blocks step pulse basically methods migration due seasonal migration test migration condition take place 
discrete event population actual species decreased case excess individuals second case individuals migrate number individuals species target ecosystem increased 
methods step action similar previous species class described 
objects class replicated compiler replicates objects machines don specify machine label 
population objects belonging ecosystem assigned collection objects machine 
dimensional plot local objects show graphical output 
execute model compiled times machine 
java classes population generated compiler remain machine main file changes 

procedures tools simplify generation web courses simulation 
tools automatically document simulation models 
instructions design html pages course simplify task constructing course 
portions page reused different pages different courses 
synchronization simulation execution presentation multimedia elements accomplished 
multimedia elements give student better understanding happening moment 
information precise instant rich way static html explanations 
detailed techniques generate distributed simulations 
simulation scheme advantage permitting passing models single machine models distributed models natural way minimum changes model 
simulation designer worry low level implementation distribution system synchronization points happens programming libraries general purpose languages 
distribution scheme single model needed 
distribution scheme easily changed 
machine different integration method 
manipulation change remote objects achieved 
working lines respect language possible improvement instructions generate html code possibility defining frames 
transactions volume september transactions frames useful course indexes headings footnotes 
multimedia elements added language animations virtual reality discrete event handling language improved creating event queue event types event handlers extensions directed enable agent oriented simulation 
respect distribution scheme pretend migrate rmi corba supporting package distribution 
way able mix java objects generated ool problem 
respect compiler considering possibility generating modelica code 
respect environment thinking building graphical environment construct courses 
tool cover stages procedures turn ool authoring tool simulation courses 
ideally tool provide facilities collaborative programming internet covering way aspect term web simulation 

thomson publishing 
internet distance education visual 
www thomson com microsoft visual teacher 
network academy 
org 
page buss fishwick healy nance paul web simulation revolution evolution appear acm transactions modeling computer simulation 
aviation industry cbt committee computer managed instruction 
computer managed instruction guidelines recommendations agr version 
www org agr htm 
schutte 
virtual teaching higher education new intellectual just traffic jam www edu sociology htm 
directorate general xiii 
educational multimedia elements reflection 
task force multimedia educational software 
fishwick web simulation personal observations proceedings winter simulation conference ca pp 
schmid remote laboratory virtual reality web special issue simulation web simulation vol 
july pp 
berg advanced techniques java developers wiley computer publishing 
fishwick object oriented simulation application framework simu lation vol 
pp june 
healy silk java process simulation language proceedings winter simulation conference atlanta pp 
page moose jr griffin web simulation remote method invocation pro ceedings winter simulation conference atlanta pp 
howell mcnab discrete event simulation library java proceedings international conference web modeling simulation fishwick hill smith eds scs san diego 
page griffin transparent distributed web simulation proceedings international conference web modeling simulation fishwick hill smith eds scs san diego 
fujimoto interactive parallel simulations jane framework appear special issue generation computer systems elsevier science 
fujimoto parallel distributed simulation systems wiley interscience 
page nicol fujimoto fishwick smith panel strategic directions simulation research proceedings winter simulation conference 
defense modeling simulation office hla home page hla mil 
gonz lez srinivas web technology interactive remote instruction proceedings web conference 
internet www edu au programme posters com htm 
ibm 
dr alfonseca please provide citation 
alfonseca de lara object oriented simulation language ess passau pp 
alfonseca de lara semiautomatic generation educational courses internet means object oriented continous simulation language proceedings esm scs pp 
alfonseca de lara educational simulation complex ecosystems world wide web proceedings ess scs pp 

de lara alfonseca simulating partial differential equations world wide web proceedings pp munich 
alfonseca de lara semiautomatic generation web courses means object oriented simulation language special issue simulation web simulation vol pp 
july 
volterra le ons sur la th orie math de la pour la vie 
gauthier paris 
campos hill agent framework visual interactive ecosystem simulations transactions scs vol 
pp 
fishwick basis trophic level ecosystem modeling florida example transactions scs vol 

pp 
kelemen eco grammars systems grammatical framework lifelike interactions artificial life vol 
pp 
alfonseca ortega representation cellular automata means equivalent systems submitted complexity international 
alfonseca de lara rodr guez de la de la fauna 
myers amulet manual 
carnegie mellon university school computer science technical report 
cmu cs human computer interaction institute technical report cmu 
ame home page bto ed ac uk ame index html 
zeigler mapping hierarchical discrete event models multiprocessor systems concepts algorithm simulation journal parallel distributed computing vol 
pp 
vector processing cyber state art report supercomputers international pp 

interim java grande forum report 
java grande forum technical report tr www org report htm 
web supercomputing environment proceedings www www edu au programme posters com htm 
wooldridge ller tambe intelligent agents ii 
agent theories architectures languages springer 
jennings sycara wooldridge roadmap agent research development autonomous agents multi agent systems vol 
pp kluwer academic publishers 
swarm development group home page www swarm org 
elmqvist mattson physical modeling language modelica proceedings th european simulation symposium ess scs pp 
see modelica home page www modelica org 
manuel alfonseca doctor electronics engineering computer science degrees universidad madrid 
teaches research department computer science universidad madrid research 
previously worked ibm madrid scientific center reached level senior technical staff member 
member scs new york academy sciences ieee acm british apl association spanish association scientific journalism 
published technical papers books computer language translation simulation complex systems graphics databases artificial intelligence object oriented technology theoretical computer science 
writes science layman books papers major spanish daily journal children literature published books received award sponsored ministry culture spanish branch 
juan de lara lecturer universidad madrid 
obtained phd june doctoral thesis web simulation 
higher engineer computer science 
technical engineer computer science graduating top class award 
worked cap gemini spain 
volume transactions 
