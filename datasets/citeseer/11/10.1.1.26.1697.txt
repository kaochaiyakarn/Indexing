pizza java translating theory practice martin odersky university karlsruhe philip wadler university glasgow pizza strict superset java incorporates ideas academic community parametric polymorphism higher order functions algebraic data types 
pizza attempts ideas accessible translating java 
mean literally pizza defined translation java 
turns features integrate pizza fits smoothly java rough edges 
new beneath sun 

java embodies great ideas including ffl strong static typing ffl heap allocation garbage collection ffl safe execution corrupts store 
eliminate sources programming errors enhance portability software network 
great ideas new designers java tell 
algol strong typing lisp heap allocation garbage collection safe execution simula combined object oriented programming quarter century ago 
java represents widespread industrial adoption notions 
earlier attempts exist modula reached widespread acceptance 
clearly academic innovations programming languages face barriers hinder penetration industrial practice 
short innovations need ways translate innovations practice 
pizza strict superset java incorporates ideas academic community ffl parametric polymorphism extended submitted popl 
ffl higher order functions ffl algebraic data types 
pizza attempts ideas accessible translating java 
mean literally pizza defined translation java 
turns features integrate pizza fits smoothly java rough edges 
promoting innovation extending popular existing language defining new language features translation old new ideas 
proved spectacularly successful case 
strengths approach 
making pizza superset java ease learning facilitate integration pizza java applications 
translating pizza java ensure inter operability pizza java programs give pizza programmers access extensive java libraries exist graphics networking 
translation java advantages including compilation java virtual machine executed web browsers java security model 
heterogenous homogenous translations 
translations heterogenous translation produces specialised copy code type homogenous translation uses single copy code universal representation 
typically heterogenous translation yields code runs faster homogenous translation yields code compact 
translations correspond common idioms writing programs generic range types 
translations give surprisingly natural close programs write hand idioms 
translations natural help programmer develop intuitions operational behaviour pizza programs 
mixtures heterogenous homogenous translation possible programmers trade size speed adjusting compilers rewriting programs 
expect best balance performance code size typically achieved heterogenous translation base types homogenous translation types 
related 
pizza type system mixture hindley milner type inference dm bounded polymorphism cch closely related type classes wb jon 
existential types cw mp 
superficially pizza types appear similar template mechanism str 
allow parameterized types polymorphic functions implicit instantiation similar syntax 
similarity run deep 
templates implemented macro expansion type checking performed function instances template 
presence separate compilation type checking delayed link time instance types known 
contrast pizza types allow full type checking compile time 
bank liskov myers blm describe polymorphic type system java broadly similar 
differs fit bounded polymorphism java existing class interface hierarchies introduce mechanism clauses identical clu theta 
believe choice superior fits better java keen hear defense approach 
translate language java exists extend java virtual machine new instructions support polymorphism 
believe approaches complementary advantages worthy pursuit 
ideas translating higher order functions classes belong folklore object oriented community 
codification similar described laufer lau 
observations visibility problems appear new 
status 
complete design pizza including type rules sketched 
consider design preliminary subject change gain experience 
implemented compiler java written java op 
interestingly commercial client approached add higherorder functions 
added feature client satisfaction adding features pizza 
structure report 
read need passing acquaintance parametric polymorphism higher order functions algebraic types see bw pau cw passing acquaintance java see ag gjs 
organised follows 
section introduces parametric polymorphism section introduces higher order functions section introduces algebraic data types 
pizza feature accompanied description translation java 
section explores issues connected type system 
section describes rough edges encountered fitting pizza java 
section concludes 
appendix summarises pizza syntax 
appendix discusses formal type rules 
example polymorphism pizza class pair elem 
elem elem pair elem elem void swap pair string 
new pair world hello swap system println pair int 
new pair swap system println example heterogenous translation polymorphism java class pair string string string pair string string string void swap class pair int int int pair int int int void swap fint pair string new pair string world hello swap system println pair int new pair int swap system println parametric polymorphism set integers set characters sorting strings sorting floats 
polymorphism provides general approach describing data algorithms structure independent type element manipulated 
trivial example consider algorithm swap pair elements type 
pizza code task appears example 
class pair takes type parameter elem 
pair fields type elem 
constructor pair takes elements initialises fields 
method swap interchanges field contents local variable type elem 
consider ways java may simulate polymorphism 
method macro expand new version pair class type instantiated 
call heterogenous translation shown example 
appearance parameterised classes pair string 
pair int 
causes creation expanded classes example homogenous translation polymorphism java class pair object object pair object object void swap class integer int integer int int intvalue return pair new pair object world object hello swap system println string string pair new pair object new integer object new integer swap system println integer intvalue integer intvalue pair string pair int occurrence type variable elem replaced types string int respectively 
second method replace type variable elem class object top class hierarchy 
call homogenous translation shown example 
key translation value type may converted type object recovered 
type java type base types int 
base type corresponding type integer relevant fragment appears example 
variable type say string converted object widening object converted back narrowing string value base type say int converted object object new integer converted back integer intvalue 
java widening may implicit write cast object explicitly clarity 
java programmers program idioms heterogenous homogenous translations 
code duplication lengthy conversions second advantages direct support polymorphism clear 
bounded parametric polymorphism simple polymorphism type variable may take type 
greater expressiveness provided bounded polymorphism type variable may take type subtype type 
subtyping plays central role object oriented languages form inheritance 
java single example bounded polymorphism pizza interface ord elem 
boolean elem class pair elem implements ord elem 
elem elem pair elem elem elem min fif return return class ordint implements ord ordint 
int ordint int int intvalue return boolean ordint return intvalue pair ordint 
new pair new ordint new ordint system println min intvalue indicated subclassing multiple inheritance interfaces 
pizza provides bounded polymorphism type variable may take class subclass class class implements interface 
pizza allows interfaces parameterised just classes 
parameterised interfaces allow express precisely type operations arguments type notoriously hard problem object oriented language design bcc 
demonstrate modify previous example find minimum pair elements shown example 
interface ord parameterised type elem ranges types specifies method argument type elem 
class pair parameterised type elem elem constrained type implements interface ord elem 
note elem appears bounded variable bound form recursive bound known theorists object oriented type systems goes name bounded polymorphism cch 
method min defined method invoked object type elem argument type elem 
class ordint similar class integer implements interface ord ordint 
class ordint suitable parameter class pair 
test code creates pair ordered integers prints minimum standard output 
exercise defining ordint unavoidable java provides way base type implement interface 
number points java designers promote simplicity convenience pizza follows lead 
consider ways java may simulate bounded polymorphism 
heterogenous translation macro expansion shown example heterogenous translation bounded polymorphism java interface ord ordint boolean ordint class pair ordint ordint ordint pair ordint ordint ordint min fif return return class ordint implements ord ordint int ordint int int intvalue return boolean ordint return intvalue pair ordint new pair ordint new ordint new ordint system println min intvalue example 
appearance parameterised class pair ordint 
interface ord ordint 
causes creation expanded class pair ordint interface ord ordint occurrence type variable elem replaced type ordint 
code expanded interface ord ordint plays useful role may deleted 
homogenous translation replacing elem fixed type shown example 
unbounded type variable elem interface ord replaced class object top class hierarchy 
bounded type variable elem class pair replaced interface ord homogenous version bound 
homogenous version mismatch type interface ord expects argument type object class ordint expects argument type ordint 
patched interface ord renaming ord class ordint adding bridge definition ord terms 
bridge adds suitable casts connect types 
suitable casts added test code 
java programmer idioms 
idiomatic java programs slightly simpler useless interface ord ordint dropped heterogenous translation ord merged homogenous translation 
original pizza simpler expressive making advantages direct support bounded polymorphism clear 
example homogenous translation bounded polymorphism java interface ord boolean ord object class pair ord ord pair ord ord ord min fif return return class ordint implements ord int ordint int int intvalue return boolean ordint return intvalue boolean ord object return object ordint pair new pair object new ordint object new ordint system println ordint min intvalue example higher order functions pizza 
class radix int char boolean radix int return fun boolean char return string test char boolean radix return arrays full includes discussion arrays interact polymorphism 
heterogenous translation straightforward homogenous translation tricky new class defined contains subclasses corresponding arrays object arrays base types java 
higher order functions convenient treat functions data pass arguments return results store variables data structures 
feature goes name higher order functions class functions 
object oriented style partly supports higher order functions functions implemented methods methods parts objects objects may passed returned stored 
implement higher order functions objects 
translation lengthy making clear higher order functions convenient objects way structuring programs 
body function abstraction may refer sorts variables ffl formal parameters declared abstraction header ffl free variables declared enclosing scope ffl instance variables declared enclosing class 
sorts variable appear example 
body abstraction formal parameter free variable instance variable 
body returns true character represents digit radix increments time called 
calling new radix test returns true false 
java variable denotes receiver method called self object oriented languages 
receiver abstraction receiver method appears instance variables follow static scope discipline regard abstractions 
general function type denotes function result type argument types 
may void 
function abstraction fun xn denotes function type variables xn formals statement body 
java syntactic tradition expect notation tn function types 
alternate notation rejected reasons 
functions return functions unnecessarily confusing 
consider function call int char 
type 
notation simply int char boolean 
alternate notation boolean char int reader decode reversal order 
second omitted semicolon lead confused parse error message 
compare method call assignment type newly declared variable 
formal parameters passed value updates seen outside function body instance variables accessed updates seen outside function body 
just java methods 
free variables 
java provides parameters convenient treat passed value just formal parameters 
passing free variables possible requires variables implemented single element arrays 
example heterogenous translation 
class closure cb boolean apply cb char class closure extends closure cb radix receiver int closure radix receiver int receiver receiver boolean apply cb char return receiver apply class radix int boolean apply int char return closure cb radix int return new closure string test closure cb radix return apply cb apply cb current implementation closures conceptually passes variables contains conservative analysis determines variables possibly assigned captured closure 
free variable known immutable duration closure efficient value passing scheme 
choice finely balanced reasons pass free variables value 
heterogenous translation java programmers difficulty understanding notion higher order functions find easier follow translation scheme explained 
explain heterogenous translation scheme example clear works general case 
heterogenous translation introduces class function type program new class function abstraction program 
class captures type higher order function new class implements closure 
heterogenous translation example shown example 
function type original introduces class translation specifying apply method type 
function type char boolean original introduces example algebraic types pizza class list case nil case cons char head list tail list append list ys switch case nil return ys case cons char list xs return cons xs append ys list zs cons cons nil append cons nil class closure cb translation 
specifies method apply cb expects argument type char returns result type boolean 
second function abstraction original introduces class translation subclass class corresponding function type 
function abstraction radix introduces class closure translation subclass closure cb 
apply method type apply cb calls apply method abstraction apply 
necessary separate apply methods function type apply cb abstraction apply 
function type defines apply method closure accessible function type accessible abstraction defines apply method original class may access private instance variables 
homogenous translation heterogenous translation introduces class closure homogenous translation represents closures instances single class 
heterogenous translation represents free variable argument result correct type homogenous translation treats free variables arguments arrays type object results type object 
homogenous translation compact exploits static type information run time 
full includes details homogenous translation 
algebraic types final addition pizza algebraic types pattern matching 
see object types inheritance complementary algebraic types matching 
object types inheritance easy extend set constructors type long set operations relatively fixed 
conversely algebraic types matching easy add new operations type long set constructors relatively fixed 
example translation algebraic types java class list final int nil tag final int cons tag int tag list append list ys switch tag case nil tag return ys case cons tag char cons head list xs cons tail return new cons xs append ys class nil extends list nil tag nil tag class cons extends list char head list tail cons char head list tail tag cons tag head head tail tail list zs new cons new cons new nil append new cons new nil useful building prototype interpreter new programming language wants add new language constructs set operations small fixed evaluate print 
useful building optimising compiler mature language wants add new passes set language constructs fixed 
algebraic type lists characters shown example 
case declarations introduce constructors algebraic type nil represent empty list cons represent list cell fields character head list tail 
method append shows switch statement may pattern match list 
cases nil cons second case binds freshly declared variables xs head tail list cell 
test code binds zs list cons cons cons nil 
translation pizza java shown example 
translated class includes tag indicating algebraic constructor represented 
case declaration introduces subclass constructor initialises tag fields 
switch construct trans example polymorphism higher order functions algebraic types class pair case pair class list case nil case cons head list tail list map switch case nil return nil case cons list xs return cons xs map list pair 
zip list ys switch pair ys case pair nil nil return nil case pair cons list xs cons list ys return cons pair xs zip ys lated switch tag case initialises bound variables corresponding fields 
xs list notations xs instanceof nil xs instanceof cons xs head xs tail valid pizza require translation equally valid java 
final demonstration power techniques example demonstrates polymorphic algebraic type higher order functions 
note nested pattern matching zip phrase introduce type variable map 
invite readers utility pizza attempt program functionality directly java 
typing considerations main difficulties design pizza type system integrate subtyping parametric polymorphism integrate static dynamic typing 
integrating subtyping parametric polymorphism entirely straightforward combine subtyping implicit polymorphism sort pizza 
subtyping extend constructors 
see consider example 
string subtype object natural consider cell string 
subclass cell object 
example subtyping parameterised types class cell elem 
elem cell elem void set elem elem get return cell string 
sc new cell hello cell object 
oc sc illegal oc set new integer string sc get example examples related subsumption class subsume elem 
static elem choose boolean elem elem return return static object choose boolean object object return return extends object extends object 
static object choose boolean return return unsound demonstrated test code tries assign integer string 
pizza avoids problem making marked line illegal cell string 
considered subtype cell object assignment allowed 
common approach subtyping principle subsumption expression type subtype expression type subsumption implicit polymorphism mix shown considering expression new cell hello clearly type cell string 
string subtype object presence subsumption expression hello type object call type cell object 
type ambiguity introduced subsumption fine cell string 
subtype cell object seen case 
eschew subsumption require type variables match types exactly 
understand consequences design consider class example ill typed expression subsume choose true hello new integer assume string integer subtypes object expression typed elem type object 
pizza uses exact type matching expression fact 
typed introducing explicit widening casts 
subsume choose true object hello object new integer interestingly java subsumption 
simple demonstration consider conditional expression 
hello new integer subsumption expression type object integer string subtypes object 
java expression ill typed branch conditional subtype branch 
java allow limited form subsumption method calls type actual argument may subtype type formal 
pizza allows limited form subsumption furthermore explained terms bounded polymorphism 
consider expression subsume choose true hello new integer typed java pizza actual argument types string integer implicitly widened formal argument type object 
note behaviour choose mimicked precisely choose allows actual arguments types subtypes object returns object 
methods choose choose equivalent call valid exactly call equivalent choose 
equivalence important shows bounded polymorphism implement form subsumption pizza 
necessary complete function type replacing formal argument type type variable new quantified type variable bound similar technique model subtyping matching advocated bruce bru 
details completion described appendix 
classic type reconstruction algorithm implicit polymorphism due hindley milner dm languages standard ml haskell 
various extensions algorithm bounded polymorphism exist wb jon type class mechanism haskell 
type inference required pizza implemented known techniques 
integrating dynamic typing java provides expression forms explicitly mention types creation new objects casting testing object instance class 
mentions class name parameters class omitted 
example polymorphic lists example silly code fragment legal 
list string 
xs cons cons cons nil object obj object xs int list obj length say list list string 
useful expensive implement homogenous translation entire list needs traversed checking element string 
type assigned term cast 
example list obj existential type list 
existential types originally introduced model types cw mp precedence modeling dynamic types lm 
existential types written source representation pizza device type pizza expressions 
details existential types described appendix 
rough edges surprisingly places achieve fit pizza java 
list casting visibility dynamic loading interfaces built classes tail calls arrays 
casting 
java ensures safe execution inserting run time test narrowing superclass subclass 
pizza sophisticated type system renders tests redundant 
translating pizza java java virtual machine necessarily incurs modest extra cost 
java promotes safety limiting casting operations base types 
large desirable hindrance implementing parametric polymorphism 
instance instantiations polymorphic class types int float separate implementations heterogenous translation word level operations identical 
modest costs avoided altering java virtual machine instance suggested blm compiling pizza directly portable low level code microsoft lucent dis 
visibility 
java provides visibility levels private visible class default visible package containing class protected visible package containing class subclasses class public visible 
classes default public visibility fields methods class may levels 
function abstraction pizza defines new class java represent closure new method original class represent abstraction body 
constructor closure class invoked original class body method invoked closure class 
java provides way enforce style visibility 
closure class body method visible entire package containing original class 
way private closure 
similar reasons fields algebraic type default public visibility private protected visibility may desirable 
dynamic loading 
java provides facilities dynamic code loading 
native environment user may specify class loader locate code corresponding class name 
heterogenous translation benefit class loader generate fly code instance parameterised class 
unfortunately fixed class loader java code executed web client 
little possible allow user defined class loaders compromising security 
interfaces built classes 
section needed declare new class ordint implements interface ord 
simply extend integer class efficiency reasons final subclasses 
similar problem arises string 
problem java proper may aggravated pizza enhances significance interfaces bounded polymorphism 
tail calls 
pizza support tail calls ss difficult support java java virtual machine 
fortunately expect support versions java 
arrays 
arrays omitted due reasons space fit java type system 
full contains details 
pizza extends java parametric polymorphism higher order functions algebraic data types defined translation java 
proved possible achieve smooth fit concepts java rough edges 
adding pizza features compiler java look forward feedback experience design 
syntax extensions sketches syntax extensions pizza respect java ebnf format wir 
pizza type system full pizza extension java java complex complete manageable formal definition concentrate subset pizza reflects essential aspects extensions 
syntax mini pizza programs 
preliminaries vector notation indicate sequence bn phi binary operator phi stands phi phi bn different lengths phi defined 
predicates vectors propagated predicates vector elements interpreted 
express class extension extends keyword java pizza source programs 
expression fun type params throws types block type types throws types 
type 
types ident ident implements type ident extends type class ident extends type implements types interface ident extends types modifiers ident params throws types block modifiers case ident params case case pattern statements default statements pattern expression type ident pattern pizza syntax extensions 
overview mini pizza program consists sequence class declarations consider packages 
class definition contains name defined class class parameters ff bounds type extends sequence member declarations 
require class extends class class object extends 
space reason omit interfaces summary adding straightforward 
definitions class body define variables functions 
variables object fields functions object methods 
consider static variables functions deal access specifiers declarations 
keep presentation manageable consider overloading assume identifier class definition 
pizza statements expression statements function returns return statement composition conditionals pizza expressions identifiers selection higherorder function application en assignment object creation new type casts types type variables ff parameterized classes function types simplicity leave java primitive types int float 
variables ff fi program class ff 
extends fmg ff 
fsg statement return expression new type ff ff var ff constraint sigma ff gamma delta class ff gamma syntax mini pizza 
functions may bounded polymorphic type ff type mutable variable form var forms proper types belong syntactic category statement expression contexts admit existential types ff type schemes written representation pizza programs internally assigning types intermediate expressions 
quantifiers bind lists ff type variables mutual recursion type variable bounds possible example ff fi fi ff quantified type variables appear body universal existential type dropped ff ff tv ff ff tv type judgements contain subtype constraint sigma gamma 
environments denote environment extension new variables infix dot sigma ff gamma subtyping java pizza declaration subtyping rules depend class environment delta generated program class declarations 
formedness programs type checking pizza program proceeds phases 

generate class environment delta 
check delta formed 
check class formed delta 
top object refl sigma trans sigma sigma sigma ff ff sigma sigma ff class ff gamma delta sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff subtype relation sigma phase generating delta straightforward 
class definition class ff 
extends 
fdg binding associates class name entry class ff gamma 
entry consists class parameters bounds local environment gamma records declared types class members supertype class 
class environment generates subtype logic sigma types defined 
java take function types non variant argument result types 
want restrict attention formed types satisfy conditions ffl free type variable bound sigma ffl class name bound delta 
ffl class parameters actual parameters subtypes formal parameters 
straightforward formalize requirements wf predicate types type schemes 
space reasons formalization omitted 
phase class environment delta formed satisfies conditions 
partial order ground types top element object 

ground types formed formed 
taut gamma sigma gamma cpl var elim sigma gamma var sigma gamma cpl elim sigma gamma ff sigma gamma ff sigma gamma ff elim sigma gamma ff sigma ff gamma sigma gamma ff cpl ff ff cpl cpl ff fi cpl ff fi fi fresh cpl ff sigma ff sigma cpl cpl sigma sigma cpl second order rules 

methods overridden overriding change types class gamma class gamma delta gamma gamma ff class environment formed subtype relation complete upper semilattice proposition sigma subtype environment set 
tx sigma tx proof idea finitely supertypes set supertypes take tx ff ff 
type checking problem pizza expressions reduced problem finding general substitution solves set subtype constraints 
substitutions set type variables say general substitution ff ff ff proposition sigma subtype environment system subtype constraints set type variables 
ffl substitution dom sigma ffl general substitution dom sigma 
select sigma gamma sigma class sigma gamma delta sigma gamma sigma gamma ff apply sigma gamma sigma gamma sigma gamma new sigma gamma new 
assign sigma gamma var sigma gamma sigma sigma gamma widen sigma gamma sigma sigma gamma 
narrow sigma gamma sigma gamma sigma sigma typing rules expressions 
phase assume formed class environment delta 
start rule typing variables followed rules eliminating type schemes type sums typing judgements 
give typing rules rules remaining mini pizza constructs expressions statements member class declarations 
presents typing rules variables elimination rules quantified types 
type variable completion declared type recorded 
completion extends range argument type subtypes rule var elim implements java implicit dereferencing mutable variables 
rule elim standard elimination rule bounded polymorphism 
rule elim eliminates existential quantifiers 
presents typing rules expressions 
rules straightforward note particular function application rule apply standard hindley milner rule widening argument types 
rules subtle 
expression static type cast class situations apply 
name superclass case widened class possibly completed parameters resulting type supertype name subclass case narrow largest wrt generated class contain existential quantifiers 
presents typing rules statements 
type statement upper bound types expressions returned statement 
expr sigma gamma sigma gamma seq sigma gamma sigma gamma sigma gamma return sigma gamma sigma gamma return cond sigma gamma boolean sigma gamma sigma gamma sigma gamma typing rules statements 
sigma wf sigma gamma sigma sigma gamma wf sigma wf sigma wf sigma sigma sigma gamma sigma gamma sigma fsg wf class ff gamma delta ff gamma ff super wf class ff 
extends fmg wf typing rules declarations 
proposition upper bound exists 
expression returned type statement arbitrary assume checking non void procedure return statement done 
presents rules determine class member declaration formed 
obviously types written declaration formed 
variable declarations require initializing expression subtype variable declared type 
analogously function declarations require return type function body subtype function declared return type 
class declaration formed member declarations formed context consisting formal type parameters class plus appropriate bindings standard identifiers super 
ag ken arnold james gosling 
java programming language 
java series sun microsystems 
isbn 
bcc kim bruce luca cardelli castagna hopkins objects group gary leavens benjamin pierce 
binary methods 
theory practice object systems 
blm bank liskov myers 
parameterised types java 
technical report mit lcs tm laboratory computer science massachusetts institute technology may 
bru kim bruce 
typing object oriented languages achieving expressibility safety 
computing surveys 
appear 
bw richard bird philip wadler 
functional programming 
prentice hall 
cch peter canning william cook walter hill walter john mitchell 
bounded polymorphism object oriented programming 
proc 
functional programming languages computer architecture pages september 
cw luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 
dm luis damas robin milner 
principal type schemes functional programs 
proc 
th acm symposium principles programming languages january 
gjs james gosling bill joy guy steele 
java language specification 
java series sun microsystems 
isbn 
jon jones 
system constructor classes overloading implicit higher order polymorphism 
proc 
functional programming languages computer architecture pages 
acm june 
lau laufer 
framework higher order functions 
proc 
conf 
object oriented technologies coots monterey ca june 
usenix 
lm xavier leroy michel mauny 
dynamics ml 
proc 
functional programming languages computer architecture pages 
springer verlag august 
lecture notes computer science 
mp mitchell plotkin 
types existential types 
acm trans 
programming languages systems 
atsushi ohori 
compilation method ml style polymorphic record calculi 
proc 
th acm symposium principles programming languages pages january 
op martin odersky michael philippsen 
distribution 
available url ira uka de espresso december 
pau paulson 
ml working programmer 
cambridge university press 
isbn 
ss guy steele gerald jay sussman 
lambda ultimate imperative 
ai memo mit ai lab march 
str bjarne stroustrup 
programming language second edition 
addison wesley 
wb philip wadler stephen blott 
ad hoc ad hoc 
proc 
th acm symposium principles programming languages pages january 
wir niklaus wirth 
diversity notation syntactic definitions 
comm 
acm pages november 

