group communication implement fault tolerant directory service frans kaashoek andrew tanenbaum kees dept mathematics computer science vrije universiteit amsterdam netherlands email kaashoek lcs mit edu ast cs vu nl cs vu nl 
group communication important paradigm building distributed applications 
discusses fault tolerant distributed directory service group communication compares previous design implementation remote procedure call 
group directory service uses active replication scheme triplicated handle lookup operations second update operations second nonvolatile ram 
performance better performance rpc implementation better performance directory operations sunos provide fault tolerance 
concludes implementation group communication simpler better performance remote procedure call supporting claim distributed operating system provide remote procedure call group communication 
keywords distributed operating systems group communication multicast distributed applications faulttolerance directory service amoeba 

distributed operating systems support point point communication 
amoeba hand distributed operating system provides point point communication communication group communication 
discusses design implementation fault tolerant distributed directory service reliable totally ordered group communication compares previous implementation remote procedure call rpc 
group directory service better tolerates network partitions conclude design implementation simpler better performance 
directory service example application tolerates faults active replication 
results extend principle services active replication 
experience directory service run time systems distributed parallel programming claim distributed operating system provide support current affiliation lab computer science mit cambridge ma 
remote procedure call totally ordered group communication 
amoeba directory service long history 
version years rpc 
consists servers running separate machine 
directory operations modify directory executed servers communication server 
directory operations modify directory result communication servers 
update request comes server performs rpc server informing intended update 
server busy performing conflicting operation stores intentions disk sends ok message back 
receiving reply original server performs update sends reply back client 
avoid costs immediately creating copies separate disks directory updated directory service uses lazy replication 
server processes client request creates copy local disk second copy server created background 
directory service duplicated guarantee consistency presence network partitions 
discusses alternative design implementation directory service amoeba primitives group communication see fig 

primitives guarantee processes constituting group see event total order 
random mixtures members see message message members see reverse order guaranteed happen 
programmer request specifying resilience degree face processor failures surviving member see messages order 
example programmer specifies group members system guarantee face processor failures remaining members receive message total order 
setting programmer trade performance fault tolerance 
protocols amoeba uses implement group communication primitives described earlier publication 
design directory service depends total ordering events restrict amoeba 
systems isis extensions system delta provide primitives similar semantics 
primitive description create new group process member group leave group send message members group receive message sequence rebuild group failure get group information kernel fig 
amoeba system calls group communication 
outline rest follows 
section describe functionality required directory service role amoeba system 
section discuss detail design implementation group communication 
section compare directory service group communication directory service rpc give performance measurements 
section compare performance directory operations amoeba similar operations sunos compare performance group directory service service nonvolatile ram nvram 
section discuss results comparisons describe related 
section draw 

fault tolerant directory service directory service vital service amoeba distributed operating system 
provides things mapping ascii names capabilities 
capability amoeba identifies protects object file 
capability bit string consisting parts port identifies service object number identifies object service specified port rights field specifies operations holder capability may perform check field determines capability valid 
set capabilities user possesses determines objects access 
directory service allows users store capabilities ascii names life easier 
directory amoeba table columns protection domain 
example column store capabilities owner rights bits second store capabilities members owner group rights bits turned third store capabilities read bit turned 
owner directory gives away capability capability really capability single column directory 
giving directory capability unrelated person owner give capability third column 
recipient capability access powerful capabilities columns 
directory service supports operations shown 
operations manipulate directories manipulate single row tuple consisting string capability directory manipulate set rows 
important things know directory service frequency read operations list directory write operations delete directory numbers influence design 
measurements weeks showed directory operations reads 
rpc directory service group directory service optimize read operations 
operation description create dir create new directory delete dir delete directory list dir list directory append row add new row directory chmod row change protection delete row delete row directory lookup set lookup capabilities set rows replace set replace capabilities set rows fig 
operations supported directory service 
focus design implementation directory service reasons interface chosen 
discussed van renesse 
papers discussing design naming service refer reader 
directory service highly reliable highly available 
users rely directory service store capabilities losing users able access capabilities 
fulfill demands directory service replicates name capability pairs multiple machines disk 
machines unavailable machines able reply user request 
disks unreadable disks reply user request 
key problem keep replicas name capability pair consistent efficient way 
update directory performed quickly applications run efficiently 
require directory service maintains serializability 
execution operations directory service equivalent serial execution operations directory service 
achieve goal operation directory service executed 
directory service support indivisible execution set operations requires atomic transactions 
support failure free operations clients requires updating log file operation 
feel semantics expensive support seldom necessary 
implementations directory service assume clean failures 
processor works fail failures send malicious contradictory messages exhibit byzantine failures 
rpc implementation assumes network partitions happen group implementation guarantees consistency case clean network partitions processors partition communicate processors different partitions communicate 
stronger failure semantics implemented techniques described 
feel stronger semantics expensive support overkill application directory service 
rest assume basic requirements fault tolerant directory service met 
directory server located separate electrical group fuse directory servers connected multiple redundant networks 
amoeba communication primitives implemented top network protocol flip requirement fulfilled 
run multiple networks single software modification current implementation runs single network 

group communication rpc directory service group implementation triplicated replicas possible changing protocol uses active replication 
allows network partitions 
keep copies consistent uses modified version read write policy called accessible copies 
recovery protocol described skeen 
section describe detail algorithms implementation group directory service 
organization group directory service depicted 
directory service currently built directory servers bullet file servers disk servers 
directory server uses bullet server disk server share disk 
directory server stores copy directory separate bullet file 
directory servers initially form group resilience degree 
means returns successfully guaranteed received message processors fail message processed third 
furthermore guaranteed presence communication processor failures server receive messages order 
strong semantics implementation group directory service simple 
disk bullet dir disk bullet dir disk bullet dir directory service group fig 
organization directory service group communication 
administrative data directories files 
administrative data stored raw disk partition fixed length blocks 
block contains global information directory service blocks contain capabilities bullet files storing contents directory including sequence number change 
block commit block group directory service shown 
configuration vector bit vector indexed server number 
server example bit vector set 
describes configuration majority server member 



sequence number recovering 
configuration vector fig 
layout commit block 
time update operation performed sequence number stored directory increased 
recovery sequence number computed maximum sequence numbers stored directory files sequence number stored commit block 
sight may strange sequence number stored commit block needed case 
directory deleted bullet file containing directory sequence number deleted server record performed update 
sequence number commit block case 
updated directory deleted 
recovering field needed keep track server crashed recovery 
field set server knows happened 
case sets sequence number zero state may inconsistent 
may versions directories old versions directories 
sequence number set zero ensure servers try update directories server state inconsistent 

default operation protocol keep directories consistent perform concurrency control 
server group directory service consists threads server threads group thread 
server threads waiting request client 
group thread waiting internal message sent group 
server multiple server threads group thread 
server thread receives request initiates directory operation called initiator 
initiator checks current group majority servers 
request refused request processed 
reason read request requires majority network partitioned 
consider situation 
servers client side network partition client deletes directory foo 
update performed servers majority 
assume servers crash network partition repaired 
client asks remaining server list directory foo get contents directory successfully deleted earlier 
read requests refused group servers majority 
escape system administrators case servers lose data forever due example head crash 
rpc implementation read operations handled server need communication servers 
read request received initiator checks kernel messages buffered 
blocks give group thread chance process buffered messages performing read operation initiator sure performed preceding write operations 
client example deletes directory tries read back receive error client requests processed different directory servers 
messages sent resilience degree sufficient check messages buffered arrival read request 
buffered messages processed initiator perform read request percent sure seen preceeding update operations 
write operations require communication servers 
initiator generates new check field servers check field creating new directory 
initiator broadcasts request group primitive blocks group thread received executed request 
unblocked sends result request back client 
initiator majority return failure majority required read operation request read request 
group state buffered messages 
buffered seqno buffered group state wait seqno buffered seqno write request generate check field new directory request check field wait group thread received executed request send reply client group thread group failure server fail 
rebuild majority group call group rebuild failed enter recovery group state get status rebuilt write commit block update config vector try start receiving create directory bullet file supplied update cache update object table write changed object table disk commit increase wakeup seqno sender wakeup initiator remove old bullet files fig 
protocol ensure consistency copies directory 
group thread continuously waiting message sent group blocked returns group thread checks call returned successfully 
servers crashed 
case rebuilds group calling 
succeed building group majority members original group remaining directory servers run recovery protocol described section 
returns successfully server updates cache creates new directories bullet server updates object table writes changed entry object table disk 
soon server written new entry disk operation committed 
server fails server receive requests service requests order copies directories stay consistent 
small delay eventually server receive messages 
client rpc returns successfully user knows new copy directory stored disk servers received request stored new directory disk shortly 
server fails client access directories 
analyze cost directory operation terms communication cost disk operations 
rpc implementation read operations involve communication disk operations requested directory cache 
write operations require group message sent bullet operation store new directory disk operation store changed entry object table 
compared rpc implementation number disk operations smaller 
rpc implementation requires additional disk operation store intentions list updates 
number messages group service higher 
requires messages rpc amoeba requires messages 
cost sending message order magnitude cost performing disk operation 
roughly performance group implementation better performance rpc implementation providing fault tolerance higher availability 
analysis completely fair 
rpc implementation group implementation stored sequence number directory files avoided disk write commit block performance rpc implementation better send fewer messages 
hand rpc service triplicated slower group service sent messages rpcs 

recovery protocol server starts executing recovery protocol member group forms minority comes having 
protocol recovery group service complicated protocol rpc service servers involved 
consider sequence events group servers running 
server crashes 
servers rebuild group configuration vectors value 
crash 
server comes vector reads form group 
execute client update request majority servers form group copies directory inconsistent example case network partition 
server comes vector reads 
sight may appear form group form majority 
sufficient 
server may performed latest update 
see consider sequence events just crashed 
client update request received successfully sends server 
message buffered 
happen crashes processing message crashes processing message 
case server latest version directories form new group start accepting requests 
assume server comes server 
configuration vector servers read 
information conclude crashed 
furthermore update performed crashed majority 
servers sure latest version directories 
recover server sequence number determine latest version 
general conditions met recover 
new group majority avoid inconsistencies network partitions 

new group contain set servers possibly performed latest update 
requirement recovery group service complicated 
recovery servers need algorithm determine servers failed 
algorithm exists due skeen works follows 
server keeps set servers crashed 
server starts recovering sets new group 
exchanges alive servers set 
time receives new set adds servers received set set 
furthermore puts server exchanged set new group 
algorithm terminates servers minus set subset new group 
gives complete recovery protocol 
server enters recovery mode tries join group 
fails assumes group created creates group 
certain waiting period insufficient number members joined group server leaves group starts 
may happened servers created group server side network partition acquire majority members 
server created joined group contains majority directory servers executes skeen algorithm determine set servers crashed set 
set subset new group server starts waiting servers set join group 
set subset new group new group version directories 
server determines group gets 
upto date writes new configuration disk enters normal operation 
recovery protocol improved 
skeen algorithm assumes network partitions occur 
algorithm assumption network partitions happen forced servers form group minority number servers fail 
recovery protocol fail certain cases possible recover 
consider recovery re join server group create minority timeout wait time group state minority try leave group retry newgroup initialize new group vector initialize seqno vector initialize vector configuration vector members group exchange info server set seqno success rpc succeeded 
newgroup add server new group set received set take union servers set performed update 
subset new group try highest seqno get copies latest version directories success try succeeded getting copies 
write commit block store configuration vector enter normal operation fig 
recovery protocol group directory service 
sequence events 
server server crashes server form new group server crashes 
want tolerate network partitions correctly forced server fail 
strict 
server stays alive server restarted server form new group server available updates server performed 
rule general servers recover server fail higher sequence number case certain new member formed group unavailable member 

comparison rpc group service operational 
rpc service daily years 
group directory service experimental environment months shortly replace rpc version 
directory services run hardware machines comparable sun connected mbit ethernet 
message sent amoeba kernel uses ethernet multicast capability send message packet members specified group 
bullet servers run sun equipped wren iv scsi disks 

performance experiments single client measured failure free performance kinds operations quiet network 
results shown 
experiment measures time append new name capability pair directory delete subsequently appending deleting name temporary file 
second experiment measures time create byte file register capability directory service look name read file back file service delete name directory service 
corresponds temporary file output phase compiler input file second phase 
experiment measures directory service second experiment measures directory file service 
third experiment measures performance directory server lookup operations 
sun group operation group rpc nfs nvram copies append delete tmp file directory lookup fig 
performance kinds directory operations different amoeba implementations unix implementation 
times msec 
append delete test tmp file test implementation group communication slightly efficient rpc 
group directory service triplicated rpc implementation duplicated group directory service efficient 
reason rpc implementation uses additional disk operation store intentions new sequence number 
read operations performance implementations 
read operations involve disk operations implementations cache directories ram involve server 
comparison reasons ran experiments sun nfs results listed third column 
measurements run sunos file located usr tmp 
nfs provide fault tolerance consistency client cached directory copy updated consistently original changed 
compared nfs providing high reliability availability costs factor performance append delete test performance tmp file test 
dominant cost providing fault tolerant directory service cost doing disk operations 
implemented third version directory service perform disk operations critical path 
directly storing modified directories disk implementation stores modifications directory kbyte nonvolatile ram nvram 
server idle nvram full applies modifications logged nvram directories stored disk 
nvram reliable medium implementation provides degree fault tolerance implementations performance better 
similar optimization :10.1.1.124.4563
nvram sequences directory operations require disk operations 
consider tmp 
file written tmp deleted shortly 
append operation logged nvram delete performed append delete modifications tmp removed nvram executing disk operations 
implemented measured version directory service uses nvram 
group communication nvram performance improvements experiments enormous see fourth column fig 

implementation times efficient pure group implementation 
implementation nvram faster sun nfs provides fault tolerance lower availability 
rpc service implemented nvram expect similar performance improvements 

experiments multiple clients determine performance directory services multiple clients ran additional experiments 
experiment measures throughput lookup operations results depicted 
graph shows total number directory lookup operations processed directory service varying number clients 
rough estimate maximum number lookup operations principle processed second easily computed 
time needed server process read operation roughly equal msec time lookup operation minus time perform rpc server 
maximum number read operations server second 
upper bound read operations group service servers second duplicated rpc implementation second 
service achieves upper bounds client requests evenly distributed servers 
time client performs rpc service kernel locates service sending broadcast message containing port requested service 
server listens port answers rpc message 
client kernel stores network address server answers port cache sends request server replied 
point servers busy listening request comes kernel sends back client kernel 
client kernel removes server network address port cache selects server port cache locates service port cache contain alternative 
heuristic choosing server optimal 
clients may pick server server idle 
graph see happen 
possibility reflected measurements 
numbers depicted averages large number runs standard deviation high 
runs throughput lookups sec number clients group service group service nvram rpc service fig 
throughput total number lookups second increasing numbers clients 
standard deviation operations second 
heuristic higher load clients requests evenly distributed servers 
conclude graph rpc directory service support fewer clients group service 
rpc directory service gets overloaded requests second group service gets overloaded requests second 
shows throughput append delete test 
experiment measures maximum number pairs append delete operations service support second 
upper bound easily estimated service 
processing pair operations takes roughly msec group nvram service msec group service rpc service 
write operations performed parallel upper bounds service 
implementations reach upper bound 

discussion comparison making fair comparison group directory service rpc directory service hardly possible services assume different failure modes 
rpc service duplicated provide consistency face network partitions group service triplicated provide consistency face network partitions 
furthermore rpc implementation employs lazy replication group implementation employs active replication resulting higher degree reliability availability throughput append deletes sec number clients group service group service nvram rpc service fig 
throughput total number append delete operations second increasing numbers clients 
append delete operations write operations actual write throughput twice high 
group directory service 
rpc directory service performed update directory new directory directly stored bullet file 
bullet server storing file crashes second replica generated directory unavailable 
group directory service happen service creates replicas time client told update succeeded 
group service provides higher reliability availability protocols normal operation failures simple rpc protocols 
group recovery protocols complex due fact group service built servers 
server implementation rpc service require similar protocol recovery group service 
performance group directory service better rpc directory service 
mainly due fact group implementation avoids disk write 
rpc directory service implemented way avoids additional disk write 
implementation performance group implementation 
hand rpc directory service triplicated implement phase locking resulting higher communication overhead compared group implementation 
summarizing group directory service hard compare rpc directory service due differences failure semantics differences implementations related group communication rpc 
believe comparison gives insight design choices implementation issues rpc directory service specification group directory service complicated worse performance group implementation 
extensive literature designing building fault tolerant systems covering practical theoretical research 
outside scope review 
focus number actual implementations fault tolerant file directory services systems similar amoeba 
marzullo schmuck describe fault tolerant implementation sun network file system nfs isis toolkit 
authors want change client side server side nfs introduced extra level indirection 
client processes talk directly file service go intermediate process called agent 
agents hide clients file service replicated internally isis broadcast primitives keep state consistent 
agents update replicas file regular sun rpc employ broadcast meant changing file servers isis 
harp approach increase fault tolerance nfs 
marzullo schmuck authors harp decided change file server avoid extra level indirection 
harp primary copy protocol 
clients communicate designated server called primary perform operations 
servers termed secondaries 
write operation primary sends results secondaries sending reply client 
servers store result nvram copy result lazily disk improve performance 
primary crashes secondaries elect new primary 
fault tolerant file system coda 
coda replicates files server side caches files client side 
clients cache files servers fail clients able continue working cached files 
client servers connected callbacks keep caches clients servers consistent 
servers active replication optimistic variant read write policy keep replicas consistent 
implementation parallel rpc mechanism exploits multicast capability network 
approach fault tolerant distributed file system echo 
harp echo uses primary copy scheme 
harp perform replication file level level array disk blocks 
reasons doing echo uses disks accessed multiple servers 
disks replication level disk blocks allow primary continue working secondaries failed 
primary directly write disks having go secondaries 
fault tolerant directory service described mishra peterson schlichting 
directory service uses active replication assumption operations idempotent 
uses protocols enforce ordering messages sent servers 
enhance concurrency directory service operations directory service uses partial ordering property operations commutative list directory lookup entry 
able recover servers checkpoint state nonvolatile storage 
checkpoint partial order messages service reconstruct state failure 
daniels spector describe algorithm designed replicated directories 
algorithm gifford weighted voting 
algorithm exploits observation operations single directory entry performed parallel operations access different entries 
simulations done authors show additional cost algorithm low provides better performance 
baker simulated analysed performance impact nvram configurations file caches client workstations write buffers file servers 
approach comparable nvram directory service 
measurements indicate addition half megabyte nvram decrease number disk extreme cases 
results suggest today prices nvram times expensive dram nvram file servers cost effective 
reimplementation amoeba bullet file service group communication nvram certainly feasibly 

tried support claim distributed system support rpc group communication 
group communication allows simpler efficient implementations large class distributed applications 
example demonstrate claim looked detail design implementation fault tolerant directory service 
completely fair comparison possible due differences failure semantics differences implementations unrelated group communication rpc claim directory service group communication easier implement efficient 
important study disk operations major performance bottleneck providing fault tolerance 
relatively new wide spread technology nvram performance directory service update operations improves order magnitude 
group directory service allows lookup operations second update operations second 
henri bal van doorn nabil elnozahy robbert van renesse mark wood willy zwaenepoel provided comments drafts 

rashid threads new system unix review august 

ousterhout douglis nelson welch sprite network operating system ieee computer pp 
feb 

pike presto thompson trickey plan bell labs summer london pp 
july 

mullender van rossum tanenbaum van renesse van staveren amoeba distributed operating system ieee computer pp 
may 

tanenbaum van renesse van staveren sharp mullender jansen van rossum experiences amoeba distributed operating system commun 
acm pp 
dec 

birrell nelson implementing remote procedure calls acm trans 
comp 
syst 
pp 
feb 

tanenbaum kaashoek bal parallel programming shared objects broadcasting ieee computer pp 
aug 

van renesse functional processing model ph thesis vrije universiteit amsterdam 

kaashoek tanenbaum group communication amoeba distributed operating system th int conf 
distributed computing systems arlington texas pp 
may 

birman joseph exploiting virtual synchrony distributed systems proc 
eleventh symposium operating systems principles austin tx pp 
nov 

peterson schlichting preserving context information ipc acm trans 
comp 
syst 
pp 
aug 

cheriton zwaenepoel distributed process groups kernel acm trans 
comp 
syst 
pp 
may 

neufeld reliable group communication distributed systems proc 
eighth international conference distributed computing systems san jose ca pp 
june 

barrett rodrigues bond delta extra performance architecture proc 
th international symposium fault tolerant computing newcastle uk pp 
june 

curtis global naming distributed systems ieee software pp 
july 

schroeder birrell needham experience grapevine growth distributed system acm trans 
comp 
syst 
pp 
feb 

lampson designing global name service proc 
fifth annual symposium principles distributed computing calgary canada pp 
aug 

cheriton mann decentralizing global naming service improved performance fault tolerance acm trans 
comp 
syst 
pp 
may 

bernstein hadzilacos goodman concurrency control recovery database systems addison wesley reading ma 

gray notes database operating systems pp 
operating systems advanced course lecture notes computer science springer verlag new york 

lampson atomic transactions pp 
distributed systems architecture implementation lecture notes computer science springer verlag berlin 

davidson garcia molina skeen consistency partitioned networks acm computing surveys pp 
sept 

cristian understanding fault tolerant distributed systems commun 
acm pp 
feb 

choudhary architectural support designing fault tolerant open distributed systems ieee computer pp 
june 

shrivastava tao principal features family reliable node architectures distributed systems ieee trans 
computers pp 
may 

kaashoek van renesse van staveren tanenbaum flip internetwork protocol supporting distributed systems acm trans 
comp 
syst 
feb 

el abbadi skeen cristian efficient fault tolerant algorithm replicated data management proc 
fifth symposium principles database systems portland pp 
march 

skeen determining process fail acm trans 
comp 
syst 
pp 
feb 

van renesse tanenbaum wilschut design high performance file server proc 
ninth international conference distributed computing systems newport beach ca pp 
june 

daniels spector thompson distributed logging transaction processing proc 
acm sigmod annual conference san francisco ca pp 
may 

liskov ghemawat gruber johnson shrira williams replication harp file system proc 
thirteenth symposium operating system principles pacific grove ca pp 
oct 

baker ousterhout seltzer non volatile memory fast reliable file systems proc 
fifth int 
conf 
architectural support programming language operating systems boston ma pp 
oct 

eswaran gray lorie traiger notion consistency predicate locks database system commun 
acm pp 
nov 

marzullo schmuck supplying high availability standard network file system proc 
eighth international conference distributed computing systems san jose ca pp 
june 

day principle resilient sharing distributed resources proc 
second international conference software engineering pp 
oct 

satyanarayanan scalable secure highly available distributed file access ieee computer pp 
may 

satyanarayanan siegel parallel communication large distributed environment ieee trans 
computers pp 
march 

hisgen birrell mann schroeder swart granularity semantic level replication echo distributed file system ieee newsletter pp 


mishra peterson schlichting implementing fault tolerant replicated objects proc 
eighth symposium reliable distributed systems seattle wa pp 
oct 

bloch daniels spector weighted voting algorithm replicated directories journal acm pp 
oct 

gifford weighted voting replicated data proc 
seventh symposium operating system principles pacific grove ca pp 
dec 
