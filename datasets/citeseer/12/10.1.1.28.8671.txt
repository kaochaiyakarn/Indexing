monadic combinator compiler compiler carlos ao luc figueiredo february article describes novel approach compiler generation monadic combinators 
prototype compiler generator called described handles infinite look ahead left recursive context free grammars dyadic infix operator precedence associativity 
novel ideas general principle limitations comparison related 
article describes prototype monadic combinator compiler compiler called 
left recursive context free grammars allows easy specification precedence associativity dyadic infix operators 
familiarity functional programming language haskell bir hud assumed monadic programming wad wad hut hm 
section describes input output behaviour structure general principle means simple examples 
subsequent sections discuss treatment left recursion operator precedence associativity respectively 
section synthesizes limitations compiler generation monadic combinators general 
section provides comparison related 
section concludes 
overview haskell program prototype comprised modules module parser combinator library parsec lei 
ffl grammar contains type functions treating context free grammars follow related functions 
ffl prod responsible reading input file generating context free grammar description associated semantic rules defined module grammar ffl info checks input validity collects information needed compiler generation 
ffl contains main routines compiler generation result grammar description annotated data generated module info 
module parser defines usual parsing combinators choice parsers lexical analysis character parsers letter digit lower upper space spaces char string functions support better error message reporting mainly see lei 
primary reason parsec combinator library support error handling see lei 
programs generated set combinators taken bir parsec parser type provide support nondeterministic parsing see 
known wad hut wad hm monadic parser viewed function takes string input yields list pairs component represents result parsing consumed part input string second component represents part input parsing 
taken account definition approach compiler generation basic informal rule alternatives nonterminal parsed textual order input file meaning occur higher levels generated parse tree written lower levels 
refer rule alternatives higher parse tree simply alts higher 
consider example simple input grammar require user explicitly distinguish terminals nonterminals specify initial nonterminal symbol 
nonterminals symbols appear left hand sides lhs input grammar initial nonterminal nonterminal lhs production 
productions finish layout rule production indentation previous 
occurs non terminal symbol indicates start alternative occur column 
simple grammar input intent generating program outputs input sequence fails issuing error message 
program generated grammar successfully parse input input consists unique symbol input grammar written follows parser alternative tries parse fails second alternative tried 
input generates import parser compile apply symb return 
symb return monadic parser generation involves simple general idea syntax directed recursive descent parsing parser written production combination parsers constituent symbols 
monadic compiler formed simply corresponding monadic parser monadic return action 
return parameter haskell code constitutes semantic rule possibly adaptations see sequel 
example compilers correspond alternative production lhs nonterminal names compiler generated name nonterminal lhs followed alternative number 
example nonterminal starts upper case letter tests exists nonterminal name letter changed lower case function names may start upper case letter haskell new name name nonterminal chosen compiler name character introduced name nonterminal form compiler name 
parser terminal symbol usual lexical analysers string symb depends 
call lexeme grammar symbol may followed white spaces blanks newlines tabs conventions ffl name nonterminal symbol starts lowercase letter lexeme 
example right hand side rhs nonterminal symbol lexeme rhs nonterminal symbol 
ffl terminal symbol followed terminal nonterminal lexeme lexeme 
example rhs terminal symbol lexeme rhs terminal symbol 
combinator 
implements nondeterministic choice 
applies appends results 
lazy evaluation clearly important sake efficiency 
nondeterministic parsing needed cases allows non predictive ll grammars example section 
apply simple monadic run function result apply parser component resulting list semantic rules specified rhs alternative course interesting purposes merely specifying kind language recognizer 
example count number input sequence import parser compile apply string return 
string return variable receives result compilation compiler names corresponding nonterminal respectively 
adopts simple conventions specification interpretation semantic rules ffl absence semantic rule interpreted way textually identical rhs 
briefly semantic rule means semantic rule rhs 
ffl nonterminal occurs rhs occurrence distinguished semantic rule specifying subscripts subscripts numbers refer order occurrence rhs 
example production specifies result compilation occurrence nonterminal rhs result compilation second occurrence ffl nonterminal occurs rhs subscript semantic rule distinguish distinct occurrences nonterminal explained occurrences semantic rule interpreted numbered upwards textual order occurrence semantic rule 
example equivalent production incorrect error detected production included input grammar 
production equivalent 
final introductory example illustrates need nondeterministic parsing allows infinite look ahead non predictive grammars input 
example simple grammar recognizing palindromes char char char char char true epsilon true char epsilon reserved nonterminals representing symbol empty rhs respectively 
program generated shown 
nondeterministic choice operator 
allows input strings aa parsed successfully 
parsing input involves backtrack recursive call 
call consumes input symbol calling 
recursive call returning list parses 
originate successful parse call second backtrack input consumed recursive call originate successful parse input 
sections describe ideas enabled develop handling left recursion section operator precedence associativity section 
import parser compile apply char sat const true char sat const true return char char 
char sat const true return true 
return true nondeterministic parsing handling infinite look ahead input grammar left recursion monadic parsing recursive descent technique expect left recursive productions allowed input cause monadic parsers go infinite loop 
furthermore think natural take account usual argument left recursive grammars rewritten equivalent non left recursive grammar 
strong argument case compiler generator non left recursive grammar may simple specify left recursive counterpart specially respect semantic rule may turn specify efficient algorithm see 
consider example left recursive grammar describing language fab semantic rules specify output number input 
input grammar generates program shown 
example left eliminated essentially standard elimination algorithm context free grammars 
ll see section import parser compile apply return foldl string return undef undef return undef orelse return undef string return undefined example program generated left recursive grammar left recursion handled approach aim simplifying specification input grammar operator associativity particular 
semantic rules left recursive productions simpler form sr sr fsr abbreviation alternatives fsr fsr analogously fsr sequence symbols containing symbol nonterminal symbol sequence symbols formally sigma sigma sigma set terminal symbols set nonterminal symbols 
semantic rules trivial transform context free grammar form restriction relevant respect requirement semantic rule sr written respect 
left recursive form converted abbreviations similarly code sr epsilon fresh nonterminal symbols code sr denotes string obtained sr foldl sr note fb consists single nonterminal production needed single nonterminal production furthermore exists nonterminal left recursive nonterminal set undefined 
translation foldl seen formal specification semantics semantic rules left recursive grammars 
informally input parsed results compilations collected list say basic point note semantic rule th alternative original left recursive grammar considers list results results compilations left recursive nonterminal folding list obtain desired compilation result foldl defined 
list formed non left recursive grammar successively applying right recursive productions base case base case corresponds applying productions mg 
example illustrates left recursion may simplify specification semantic rules 
grammar transforms binary decimal notation import parser compile apply return foldl return 
return string return 
string return program generated converting binary decimal notation note semantic rule needed second alternative nonterminal semantic rule means semantic rule rhs 
generates program shown grammar 
left recursion simplifies semantic rule case leads generation efficient code 
compare right recursive alternative snd fst snd precedence associativity consider archetypical left recursive grammar arithmetic expressions symbols brevity reserved meta variable denoting integer numeral lexeme 
note absence semantic rules semantic rule means semantic rule rhs 
concise input generates expression evaluator shown program header removed brevity 
look program moment doing examine simpler expression evaluator program generated similar input 


dots inserted grammar indicate right associativity dyadic operators 
grammar specifies alts higher rule lowest precedence 
program generated shown 
little compilers correspond alternative input grammar 
compilers parameterised control operator precedence 
parameter indicates list terminals parsed successfully parsed parser lower precedence level 
right associativity follows directly scheme 
left associativity default parametrization scheme uses left factoring see 
possible override alts higher rule specify infix operators precedence left right associativity 
example import parser import char import list compile apply token union elem zerop symb token return 
token union elem zerop symb token return 
token elem zerop string token return 
token sat return read 
string token string return alts higher right associativity token union op elem zerop symb return rest op 
rest op token union op elem zerop symb return opnd op rest opnd op 
token return op token union op elem zerop symb return rest op 
rest op token union op elem zerop symb return opnd op rest opnd op 
token return op token elem zerop string token return 
token sat return read 
string token string return left factoring left associativity symbols mean left right associativity respectively respect operator previous alternative 
programs generated cases differ slightly corresponding ones left right associativity respectively shown 
compilers alternatives precedence coalesced single arguments passed compilers alternative union current list list terminals precedence cf 

similar programs generated nonterminal place infix operators grammar op op op limitations prototype 
needed better error handling reporting 
current implementation input syntactically wrong program simply halts issuing simple error message 
mechanism enables user specify specific error messages certain kinds input 
aspect related providing possibility user override alts higher rule example allowing ambiguous nested dangling associated outermost conditional expression command 
includes analysis runtime efficiency programs generated comparison compiler generators yacc happy gm 
related lot done compiler generators lee mm gm 
done performance comparisons known generators yacc happy gm infancy 
main motivation show possible worthwhile generate simple import parser import char import list compile apply token union op elem elem zerop symb return 
symb return rest op 
rest op token return op token elem zerop string token return 
token sat return read 
string token string return precedence right associativity readable monadic compilers automatically input grammar written clear way need separately specifying lexical analysers 
expect generated compilers reasonably efficient comparison say happy 
surprising monadic parsing lexers known fast runtime efficiency comparable parsers generated happy parsers generated yacc lalr parsing technique 
particular point encouraged enthusiasm 
input grammars output programs remarkably simple readable comparison produced yacc happy examples small 
confident emphasize aspect see getting older smarter 
point worthwhile pointing fact allows input grammars non predictive ll 
example simple grammar palindromes accepted yacc happy 
simple interesting question know answer condition input grammars satisfy parsing general parsing scheme generation particular requires nondeterministic parser combinator 
note deterministic parser combinators parse non predictive grammars example fa fa described novel approach compiler generation monadic combinators described prototype implementation called 
far know compiler compiler monadic parsing 
general principle alts higher rule ideas scheme supporting left recursive input grammars parametrization compilers way handling operator precedence associativity nondeterministic parsing allow non predictive grammars input 
noticeable contributions comparing related clarity readability input grammars output programs fact accepts input generates programs able parse non predictive grammars 
ravi sethi alfred aho jeffrey ullman 
compilers principles techniques tools 
addison wesley 
bir richard bird 
functional programming haskell 
prentice hall 
nd ed 
gm andy gill simon marlow 
happy parser generator haskell 
haskell org happy 
hm graham hutton erik meijer 
monadic parser combinators 
tech 
rep tr 
hud paul hudak 
haskell school expression learning functional programming multimedia 
cambridge university press 
hut graham hutton 
higher order functions parsing 
journal functional programming 
www cs nott ac uk department staff parsing ps 
lee lee 
realistic compiler generation 
mit press 
lei 
parsec fast combinator library 
www cs ruu nl parsec html 
john levine tony mason doug brown 
lex yacc 
reilly associates 
mm alexandre macedo moura 
investigating compiler generation systems 
proc 
iv brazilian symposium programming languages pages 
wad philip wadler 
comprehending monads 
mathematical structures computer science 
wad philip wadler 
monads functional programming 
computer systems sciences 
www cs 
com wadler topics monads html 
wad philip wadler 
essence functional programming 
conference record th acm symposium principles programming languages pages 

