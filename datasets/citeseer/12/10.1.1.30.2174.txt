fast algorithm incremental distance calculation ming lin john canny university california berkeley berkeley ca simple efficient algorithm finding closest points convex polyhedra described 
data numerous experiments tested broad set convex polyhedra show running time roughly constant finding closest points nearest points approximately known linear total number vertices special initialization done 
algorithm collision detection computation distance polyhedra dimensional space robotics problems 
forms heart motion planning algorithm 
simple method finding tracking closest points pair convex polyhedra 
method generally applicable especially suited repetitive distance calculation objects move sequence small discrete steps 
method works finding maintaining pair closest features vertex edge face polyhedra 
take advantage fact closest features change infrequently objects move finely discretized paths 
preprocessing polyhedra verify closest features changed constant time 
experiments show initialized expected running time algorithm constant independent complexity polyhedra 
method straightforward conception 
start candidate pair features polyhedron check closest points lie features 
objects convex local test involving boundary candidate features 
features fail test step neighboring feature candidates try 
simple preprocessing guarantee feature boundary constant size 
verify closest feature pair constant time 
pair features fail test new pair choose guaranteed closer old 
objects move closest features changes usually find single iteration 
closest features changing rapidly say step path algorithm take slightly longer 
clear algorithm terminate number steps equal number feature pairs 
algorithm key part general planning algorithm described 
algorithm creates dimensional roadmap free space robot tracing curves maximal clearance obstacles 
algorithm compute distances closest points 
easily compute gradients distance function configuration space find direction maximal clearance curves 
related collision detection long history 
considered static dynamic moving objects versions 
shares calculation maintenance closest points incremental motion 
require linear time verify closest points properties convex sets reduce check constant time 
aspect recalls local applicability constraints check features come contact 
fact overlooked collision detection convex polyhedra done linear time worst case 
proof reduction linear programming 
point sets disjoint convex hulls plane separates sets 
letting variables define plane variables add linear inequality vertex polyhedron specifies point side plane inequality vertex polyhedron specifies side 
megiddo showed linear programming solvable linear time fixed number variables 
shown linear time linear programming algorithms quite practical small number variables 
algorithm implemented fast practice 
object representations basic definitions object represented convex polyhedron union convex polyhedra 
real world objects curved surfaces represented polyhedral approximations 
accuracy approximations improved increasing resolution number vertices 
method little degradation performance resolution increased 
nonconvex objects rely subdivision convex pieces unfortunately may take quadratic time 
polyhedron field faces edges vertices position orientation 
face parameterized outward normal distance origin 
data structure includes list vertices lie boundaries list edges bound face polyhedron 
edge described head tail right face left face 
vertex characterized coordinates set edges intersecting vertex 
closest pair features general convex polyhedra defined pair features contain closest points 
denotes sets points defining objects distance objects shortest euclidean distance dab dab min gamma pa sa pb sb dab pa gamma pb pa pb pair closest points objects preliminaries pair features altogether possible cases need consider pair vertices vertex edge vertex face pair edges edge face faces 
general case faces rarely happens 
particular application path planning may moving maximum clearance paths keep faces parallel edge parallel face 
important able detect degenerate case 
pair features objects need find pair closest points features 
need verify point truly closest point point truly closest point check fails new closer feature substituted new pair checked 
eventually terminate closest pair moving closer closest pair features iteration 
section intuitive geometric applicability tests essential components algorithm described 
descriptions approach algorithm detail sections 
applicability criteria basic applicability criteria feature pair satisfy closest features 
point vertex ii point edge iii point face applicability conditions 
implementation details briefly described 
point vertex applicability criterion truly closest point lie region bounded planes perpendicular edges touching easily seen geometry vertices shown 
lies outside plane boundary implies edge closer procedure walk edge fails applicability test iteratively call feature test verify new edge closest features objects 
voronoi region point vertex applicability criterion point edge applicability criterion point vertex case really closest point lie region bounded planes superposed shown 
planes perpendicular passing head tail respectively 
planes perpendicular right left faces satisfies applicability conditions procedure return pair closest features 
fails applicability test te procedure walk appropriate edge recursively call general algorithm verify new vertex closest features objects respectively 
fails applicability test right left face procedure walk corresponding face call general algorithm recursively verify new feature right left face pair closest features 
te right face left face voronoi region point edge applicability criterion point face applicability criterion similarly closest point lie region bounded planes perpendicular containing edges boundary shown 
fails applicability test edges procedure walk corresponding edge call general algorithm check new feature case boundary ef pair closest features 
addition need check lies guarantee inside second polyhedron 
lies beneath implies feature object closer collision possible 
procedure return closest feature object proceed usual checking procedures 
voronoi region vertex face applicability criterion preprocessing procedure vertices typical convex polyhedra usually edges 
faces polyhedra edges typically 
frequently applicability criteria require quick tests round 
face edges boundary vertex edges polyhedron preprocessed subdividing volume smaller cells 
divide original polyhedron inserting virtual planes edges 
preprocessing vertex new cell edges face boundaries edges 
fig shows done cone boundaries edges bottom face edges apex cylinder edges top bottom faces 
preprocessing procedure simple calculation guarantees algorithm starts feature constant size boundary 
consequently applicability tests described run constant time 
section show applicability conditions update pair closest features convex polyhedra approximately constant time 
preprocessing cone general description approach pair features polyhedra apply appropriate applicability check section 
case pair vertices case edge face case faces need compute nearest points features apply applicability tests described previous section 
details computing nearest points trivial omitted 
please refer necessary 
features pair vertices satisfy applicability conditions imposed order closest features 
vertices fails applicability test imposed algorithm return new pair features vertices edge test failed continue checking new features finds closest pair 
vertex edge algorithm check vertex satisfies applicability conditions imposed edge nearest point edge vertex satisfies applicability conditions imposed vertex 
verifications return value true closest features 
corresponding new pair features depending test failed returned algorithm proceed finds pair closest features 
case vertex face applicability tests imposed face vertex vertex nearest point face satisfied pair qualify pair 
new pair features returned algorithm called closest feature pair 
similarly pair edges inputs nearest points satisfy applicability conditions imposed closest features polyhedra 
edges changed neighboring vertex face check done new pair features 
pair features edge face need decide edge parallel face 
actual closest features vertices edge face edge edge bounding face 
case occurs vertex satisfies vertex face applicability condition edge pointing face direction vertex 
case applies 
edge bounding face chosen edge closest original edge 
edge face parallel closest features provided conditions met 
edge cut applicability prism 
face ii face normal lie face normals faces bounding edge 
rare occasion faces inputs algorithm decide parallel 
evoke overlap checking subroutine runs roughly linear time total number edges faces 
parallel overlapping fact closest features 
parallel parallel overlapping face nearest edge second face face returned pair new features algorithm process case edge face 
careful study checks shows take time proportion size boundary feature 
preprocessing checks run constant time 
exception face lies plane case cant local feature change may lead procedure getting stuck loop 
distance closest pair points corresponds distance closest point origin minkowski sum origin 
geometrically moving far side minkowski sum polyhedra distance function local minimum may trapped 
situation occurs search features object find closest feature constant time step note impossible algorithm move opposing face initialized 
situation occur algorithm called arbitrary pair features 
algorithm take random pair features polyhedra find true pair closest features iteratively checking changing features 
case running time proportional number feature pairs traversed process 
product numbers features polyhedra distance feature pairs decrease switch cycling impossible 
empirically worse linear started arbitrary pair features 
finds closest pair features pair vicinity takes constant time keep track closest pair objects translate rotate space 
computational time shorter comparison algorithms available time 
objects just touching intersecting gives error message indicate collision terminates procedure contacting feature pair returned values 
proof algorithm completeness 
polytopes example computations numerical experiments algorithm described implemented lucid common lisp 
input data random pair features objects dimensional space 
subroutine outputs pair closest features polyhedra pair nearest points euclidean distance 
numerous examples dimensional space applied test subroutine 
examples include wide variety polytopes cubes rectangular boxes cylinders cones puma link different sizes shown fig 
particular number facets number vertices resolution cylinders cones varied order generate richer set polytopes testing purpose 
pair polytopes placed randomly translations rotations pairs features selected test subroutine 
examples run sun sparc station objects init init table average cpu time milliseconds mips mega flops machine 
experiment results briefly summarized table 
detailed table running time comparison algorithm available 
initialization previous closest feature subroutine keep track closest features polytopes constant time msec 
initialization algorithm runs average time worse linear total number vertices 
expect algorithm need visit feature 
practice believe algorithm compares favorably algorithms designed distance computations collision detection 
please see 
new algorithm computing euclidean distance polyhedra 
utilizes geometry polyhedra establish important applicability criteria detecting collisions 
preprocessing reduce size appropriate runs constant time previous closest features provided average linear total number vertices special initialization done 
efficiency simplicity complete guaranteed find closest feature point pair objects separated gives error message indicate collision returns contacting pair just touching intersecting 
methodology described distance calculations collision detection motion planning robotics problem 
application plan obstacle avoidance paths 
tracking closest feature pair convex polyhedra incre mentally algorithm traces skeleton curves loci maxima distance function 
slight modification algorithm easily extended nonconvex objects 
runs constant time initialized algorithm extremely useful reducing error increasing resolution polytope approximation objects smooth curved surfaces 
refining approximation reduce error longer detrimental side effect running time 
supported david packard foundation nsf presidential young investigator number iri darpa contract task 
canny lin 
opportunistic global path planner 
proc 
ieee icra pages pp 


interference detection solids surfaces 
comm acm 

computation distance polyhedra space 
siam conf 
geometric modeling robotics 
albany ny 
cameron 
determining minimum translational distance convex polyhedra 
proc 
ieee icra pages pp 

canny 
collision detection moving polyhedra 
ieee trans 
pami pp 

gilbert johnson 
distance functions application robot path planning presence obstacles 
ieee robotics automat ra pp 

gilbert hong 
new algorithm detecting collision moving objects 
proc 
ieee icra pages pp 

gilbert johnson keerthi 
fast procedure computing distance objects dimensional space 
ieee robotics automation vol ra pp 

lozano erez wesley 
algorithm planning collision free paths polyhedral obstacles 
comm 
acm pp 

donald 
motion planning degrees freedom 
phd thesis mit artificial intelligence lab 
megiddo 
linear time algorithms linear programming related problems 
siam computing pp 

megiddo 
linear programming linear time dimension fixed 
jour 
acm pp 

dyer 
linear algorithms linear programs 
siam computing pp 

seidel 
linear programming convex hulls easy 
proc 
th ann 
acm conf 
computational geometry pages berkeley california 
canny lin 
local methods fast computation distance functions 
preparation 
berkeley 
gilbert foo 
computing distance general convex objects dimensional space 
ieee trans 
robotics automat 

dobkin kirkpatrick 
linear algorithm determining separation convex polyhedra 
algorithms pp 

red 
minimum distances robot task simulation 
robotics pp 

wolfe 
finding nearest points polytope 
math 
programming pp 

