library high level control operators christian queinnec ecole polytechnique inria rocquencourt numerous high level control operators various properties exist literature 
understand compare difficult definitions quite different theoretical frameworks knowledge implementation offers 
tries explain control operators simple stack manipulation perform 
think operators executable framework derived continuations 
library published hope useful warranty implied warranty fitness particular purpose 
instance claim implementation faithful attempt formally derive implementations original definitions 
goal give flavor control operators implementation point view 
worth say errors mine 
existing control operators consider call cc prompt control shift reset sequential spawn splitter abort call pc 
add dynamic wind belong family control operators 
lingua franca scheme extended simple class definition facility 
scheme avoid greek letters ii provide implementations people play plain scheme system 
defining process fold program transformation making continuations apparent continuation passing style acps 
acps somewhat similar continuation passing style cps confers richer structure continuations 
acps represents continuations lists continuation slices 
implementors recognize slices functional abstraction stack frames 
second step rewritten equivalent program evaluated regular scheme evaluator 
key point acps allows control operators written regular reflective scheme functions acting representation continuations 
presentation definite advantage executable offer control operators altogether 
structure acps exercise known call cc operator 
followed brief description partial continuations 
expose various sets control operators continuation passing style cps program transformation continuations apparent 
cps corresponds programming style functions take additional argument continuation unary function applied value returned normal style 
continuations come strachey wadsworth sw rey denote control features goto unconditional jump 
cps sophisticated control handling sources inspiration see dl sf mor sit developments 
denotational techniques drift program transformations cps exploited rabbit scheme compiler ste kind intermediate language 
cps provides simple unique id bk queinnec exp submitted lisp pointers 
laboratoire informatique de ecole polytechnique ura palaiseau cedex france email queinnec polytechnique fr partially funded gdr prc de programmation du cnrs 
definition actual code appears tar automatically extracted lisp see scheme repository ftp inria fr inria projects programs get 
mean compile programs call cc cps turns programs new equivalent programs continuations represented regular closures require normal compiling technology terms cps turns call cc regular function user directly written define cps call cc lambda value value definition continuations appear variable easier dotted variables name conventionally prefixed functional applications take current continuation argument 
function reified continuation obeys cps protocol takes continuation argument forgets applies value 
cps style continuations closures opaque objects applied 
elaborate control operators need information continuation 
continuations introduced describe meaning prompt control operators 
syntactic counterpart encode continuations lists frames 
implementation bias frame represented object slot contains behavior binary function expects stack composed frames frame value 
frame activated computes new value sent back rest frames 
frames represented objects directly behaviors recognized specialized hold extra slots behaviors needed control operators 
continuation longer represented function ought provide necessary procedures encapsulate representation value sent continuation resume 
frame added pushed continuation extend 
define class frame object behavior define resume frame behavior car cdr define extend frame cons frame define class form defines new class known frame subclass root class named object 
frame single slot contains behavior 
behavior extracted frame frame behavior selector frame builds new frame behavior frame recognized frame 
predicate 
objects records inheritance resume function frame behavior selector direct indirect instances frame shown definition resume behavior binary function continuation value 
continuation represented list frames 
send value continuation corresponds application behavior frame rest frames received value 
tightly mimics behavior frame receives value access frames 
acps program transformation appears table see que variant 
computations split small atomic computation steps 
computation step fed value continuation may extend continuation new computations done just gives value back continuation 
making frames apparent allows compile time analyzes compact continuation remove kinds associatively wrapped recursions que 
acps transformed programs contain lot administrative redexes elaborate algorithms df sf devised avoid generation 
observe cps may recovered acps special encoding resume extend define resume define extend frame lambda frame behavior frame project acps transformed program cps transformed program transform inspectable lists frames opaque closures restrict possibility introspection basis reflective programming drs fw wan dr wf dm 
compile closures requires higher compiling technology app 
true user submit definition prevent evaluator cps convert 
home object system called consult scheme repository get 
acps resume non global variable acps resume acps global variable acps quote resume quote acps acps extend frame acps acps acps set 
acps extend frame resume set 
acps resume acps acps acps extend frame acps extend qn gamma frame qn vn qn vn table acps rules section give usual factorial function transformed acps little avoid administrative redexes 
define fact lambda fact 
define acps fact lambda resume acps fact extend frame lambda resume interesting point form related errors trying multiply non number 
error handling system allows correct fly obviously multiplication mean reify infra continuations appear program 
continuation internal recursive call acps fact explicitly shows pending multiplication frame que takes benefit static observation combine frames opening new opportunities optimizations 
acps expressive describe implementations dynamic variables error handling multitasking que que qd 
tout tout call cc call cc operator basic control operator scheme 
reifies current continuation function applies sole argument value application value original call cc form 
call cc program sequential control operator multitasking wan engines hf escapes partial continuations 
implementational point view usages recognized ffl escape operator continuation invoked dynamic extent call cc form created 
usage provides setjmp longjmp facility la catch throw variants la common lisp call ep la im ffl coroutine operator computation reified continuation invoked 
example coroutine scheduler appear wan mat ffl case continuation multiply invoked multiple values returned continuation 
generators la icon mh appears presence concurrency qd 
definition call cc defined cr acps simple cps 
observe duplication current continuation call part reified continuation 
apparent simplicity hide fact continuations difficult compile implement efficiently seen cho hd jg mat 
define acps call cc lambda value resume value call cc partial continuations consider function uses call cc perform premature exit 
receives list numbers multiply define multiply list list numbers call cc lambda exit define mult null 
car exit car mult cdr mult list numbers zero immediate escape performed directly return zero performing multiplications 
suppose invoke multiply list escape means zero encountered prefix continuation prefix waiting value multiply suddenly disappear 
just erasing prefix stack imagine turn interesting programmatic object essence partial continuations 
previous example partial continuation represents pending multiplications equivalent 
reified partial continuation regular function 
continuations partial continuations return value composed 
partial continuation continuation slice may viewed difference regular continuations mq 
partial continuation identified points stack partial continuation control operators offer functionalities 
identify partial continuation starts 
identify partial continuation finishes 
reify partial continuation points 
actions separated performed go 
partial continuations appeared ff joh jd 
papers follow scheme realm fel df hd qs mq 
detailed example partial continuation appears dan 
useful functions introduce functions ease forthcoming definitions 
extend takes list frames extend takes frame 
split operator takes continuation predicate success function failure thunk 
looks tail satisfies predicate 
tail success function called tail list frames precede tail failure thunk invoked 
define extend frames pair 
frames extend extend cdr frames car frames define split predicate success failure define scan frames pair 
predicate success reverse frames scan cdr cons car frames failure scan control operators generally programmed follow partial continuation identified special frame pushed stack 
partial continuation needs reified split function current continuation find frames special frame 
frames properly wrapped functional interface represent partial continuation 
definitions take efficiency account try suggest exist common patterns 
prompt control control operators prompt control discussed fel sf sf 
prompt operator identifies contexts control 
control function reifies context nearest dynamically enclosing prompt partial continuation time removes current continuation 
prompt syntax expands call prompt evaluate remember prompt evaluate acps transformed acps prompt evaluate 
define control operators subclass frame prompt frame mark presence prompt behavior similar identity represented resume just passes value receives back stack 
prompt evaluate pushes prompt frame stack invokes argument thunk 
invoked control unwinds frames current continuation finding prompt frame wraps unwound frames regular function applies argument 
define class prompt frame frame define syntax prompt syntax rules expression prompt evaluate lambda expression define acps prompt evaluate thunk thunk extend prompt frame resume define acps control split lambda prompt frame 
car lambda frames lambda resume extend frames lambda error enclosing prompt prompt control examples simple examples prompt control illustrate various points 
comprehensive examples 
prompt control lambda prompt control lambda prompt control lambda prompt control lambda examples partial continuation control reifies partial continuation removes associated frames stack shown example 
abort imperative effect 
partial continuation regular function yields value shown partial continuations composable see example 
reified restriction partial continuations extent control form creates illustrated example 
examples simple show interest partial continuations 
unfortunately complex usages control operators called reified continuation 
difficult natural cases see divergence point various sets control operators 
prompt prompt control lambda control lambda prompt prompt control lambda lambda control lambda prompt lambda oe abstraction control lambda control lambda oe example exhibits effect control inside control control forms reify partial continuation prompt 
contrary example shows embedded control forms different prompt forms 
final example shows control called inside application reified partial continuation 
examples complex require care checked 
call cc prompt control control operator somewhat dynamic looks nearest enclosing prompt frame continuation 
dynamic behavior control poses problems capture similar posed dynamic variables traditional lisp interpreters 
arbitrarily wrap expression prompt form replace prompt may non local effect 
multiple embedded control forms difficult done protocol added prompt form studied sf 
call cc operator defined operators 
program prompt provide call cc facility rewriting define call cc control lambda pc pc lambda control lambda ignore pc pc prompt reciprocally prompt control simulated call cc assignment explained sf 
shift reset danvy filinski introduced df df new couple control operators reset shift reset identifies contexts shift reifies partial continuations 
shift form reifies context dynamically nearest reset form removes current continuation 
reset shift syntaxes expand functions thunks argument reset evaluate shift evaluate 
interesting difference prompt control lies definition reified partial continuation contains finishes nearest reset frame 
partial continuations invocation point enclosing context 
define class reset frame frame define syntax reset syntax rules expression reset evaluate lambda expression define syntax shift syntax rules variable expression shift evaluate lambda variable expression define acps reset evaluate thunk thunk extend reset frame resume define acps shift evaluate split lambda reset frame 
car lambda frames frames append frames list car lambda resume extend frames lambda error enclosing reset reset shift examples previous examples rewritten new control operators 
examples similarly named ease comparison 
divergence examples 
reset shift reset shift reset shift reset shift reset reset shift reset shift reset reset reset shift reset lambda shift reset reset lambda oe abstraction shift reset shift reset oe difference observed seventh example 
reason partial continuation invoked shift form reifies nearest reset frame capture pending multiplication call reset frame 
call cc shift reset control operators possible program call cc shift reset 
program required reset avoid interference coding call cc 
program wrapped define call cc shift pc pc lambda shift ignore pc pc reset spawn hieb dybvig hd new control operator called spawn 
specified presence concurrency spawn useful absence multiple processes 
sequential version 
goals authors replace dynamic behavior previous proposals control point partial continuation reified 
consequence spawn reifies process controller dynamic extent spawn form created 
reason want reify spawn point point exist dynamic extent spawn form 
problem exist control shift target specific point just nearest authors devised functional protocol single special function spawn offer identification context reification needed identification reification point 
spawn takes single argument unary function invoked spawn synthesized object named process controller say process controller applied dynamic extent original spawn form 
applied takes single argument unary function applies reified partial continuation extends associated spawn time process controller removes partial continuation current continuation 
similarly shift reified partial continuation retains spawn frame reified 
spawn viewed generalized prompt creating new control function invocation 
examples give flavor spawn rewrite examples 
respect previous section roughly said reset changed spawn lambda shift replaced lambda 
works single reset form choose reification wanted see instance examples 
spawn lambda lambda define class spawn frame frame define acps spawn frame spawn frame resume extend frame lambda split lambda eq 
car frame lambda frames frames append frames list car lambda resume extend frames lambda error extent spawn spawn lambda lambda spawn lambda lambda spawn lambda lambda spawn lambda spawn lambda lambda lambda spawn lambda spawn lambda lambda lambda lambda spawn lambda spawn lambda lambda lambda lambda extent error correct dynamic extent spawn lambda lambda lambda lambda spawn lambda spawn lambda lambda oe lambda oe value term 
bound 
lambda lambda lambda example yields value spawn frames associated stack spawn chooses reify partial continuation closest 
capture pending multiplication 
final example mind shows fine example concept dynamic extent appears intuitive 
example partial continuation process controller far birth site 
spawn frame associated captured created 
consequently call correct dynamic extent 
return concept dynamic extent section 
call cc spawn similarly previous operators possible write call cc spawn 
easier restriction programs spawn interference 
reason call cc captures correct process controller spawn lambda lower define call cc lower lambda pc pc lambda lower lambda ignore pc splitter abort call pc set control operators proposed queinnec qs effect close spawn goal separate different effects involved spawn different operators 
splitter marks context partial continuations reified 
context reified object called mark serve argument abort call pc extent 
functions 
abort allows replace current computation mark new computation expressed thunk 
call pc reifies partial continuation mark applies second argument 
contrast previous control shift process controller call pc reifies partial continuation remove job abort imperative control operator 
similarly spawn marks dynamic extent splitter form created tested extent 
predicate adding reflective capability language 
similarly control reified continuation capture splitter frame reified 
examples splitter provides basic operators preferred examples verbose 
compared previous section roughly stated spawn lambda rewritten splitter lambda lambda replaced call pc lambda abort lambda combine reification imperative abortion effect process controller 
splitter lambda call pc lambda abort lambda splitter lambda call pc lambda splitter lambda call pc lambda abort lambda splitter lambda splitter lambda call pc lambda presentation qs slightly different adopt described variants 
define class splitter frame frame define class mark object define acps splitter frame splitter frame resume extend frame mark define acps extent 
mark resume split lambda eq 
mark mark lambda frames lambda define acps abort mark thunk split lambda eq 
mark mark lambda frames thunk lambda error extent define acps call pc qq mark split qq lambda eq 
mark mark lambda frames qq lambda resume extend frames lambda error extent splitter call pc lambda splitter lambda lambda call pc lambda abort lambda call pc lambda abort lambda splitter lambda splitter lambda call pc lambda oe abort lambda lambda oe value term 
bound 
lambda lambda call pc lambda error extent wrt major differences spawn splitter refers lowest associated splitter frame spawn prefers nearest see example 
partial continuations effect duplicate frames appear splitter refer lowest associated mark created 
ii applied extent corresponding splitter form partial continuation call call pc abort shown example 
dynamic extent revisited dynamic extent associated lifetime computation dynamic extent ends computation returns value 
presence high level control operators call cc mainly third effect mentioned section determining computation ends difficult gc help 
views dynamic extent suggest 
ffl dynamic extent wrt continuation computation dynamic extent continuation current continuation tail checks de 
eq 
ffl dynamic extent wrt frame computation dynamic extent frame frame belongs current continuation 
method spawn uses 
definition dynamic extent property exited entered 
second allows dynamic extent contain holes portions time dynamic extent left 
example exhibits difference 
spawn dynamic extent wrt captured called reify 
splitter dynamic extent finished soon abort performed trying reify longer possible 
interestingly dynamic extent requires implementation spawn splitter eq 
frames continuations needs store 
call cc splitter call pc abort tradition writing call cc splitter possible 
implementation explicitly shows copy interesting stack slice pc inside reified continuation 
observe call pc remove reified partial continuation necessary call immediately reestablish correct current continuation 
interestingly imperative effect performed invoking continuations explicit due presence abort reified continuation 
definition splitter terms call cc appears qs 
splitter lambda lower define call cc call pc lower lambda pc lambda abort lower lambda pc dynamic wind call cc scheme community sort equivalent common lisp unwind protect named dynamic wind 
form takes thunks prelude real postlude 
idea execute postlude control escapes real execute prelude control enters real 
operational description hf acps allows give functional side effect compact implementation choices exist definition substitute instance resume value resume value wants implementations efficient real sensitive side effects control performed pre post 
instance write resume value implies continuation original caller dynamic wind form resume value implies continuation postlude frames beneath 
general original caller dynamic wind form frame copied partial continuation reification 
dynamic wind operator pushes wind frame new call cc take frames account 
new call cc creates continuations invoked unwind current continuation execute finding point target continuation executing necessary 
define class wind frame frame prelude postlude define acps dynamic wind prelude postlude extend wind frame lambda value postlude extend frame lambda ignore postlude value resume value prelude postlude prelude extend frame lambda ignore prelude value dynamic wind define acps new call cc qq function define rewind value define deepest wind qq find deepest wind frame qq till eq 
qq deepest wind cdr qq wind frame 
car qq qq wq deepest wind qq evaluate qq wq wind frame prelude car wq extend cdr wq frame lambda ignore ignore prelude value rewind wq value resume caller new call cc resume qq value define unwind value define tail 
tail 
eq 
pair 
tail 
cdr tail 
qq ancestor qq rewind value wind frame 
car evaluate wind frame postlude car extend cdr frame lambda ignore ignore postlude value unwind cdr value unwind cdr value function qq unwind new call cc problems raised dynamic wind 
mention relationship carries partial continuations various possible implementations scheme purely sequential language possible control point negates parallel extensions proposed scheme 
second involves change definition call cc preclude program old call cc new 
third formal semantics scheme bigger complex hardly fitting single page semantics call cc grows liner half page 
leaving dynamic wind apart sets control operators classified follows 
dynamic behavior negated allow specify point reification wanted spawn splitter easy appropriately pair control reset operators 
reset spawn incorporate reified partial continuation frame frame reified 
easy create new partial continuation partial continuation invocation 
spawn splitter differ amount reified context concept dynamic extent 
unclear natural point targeted call pc operator operator called applied partial continuation dynamic extent original spawn form 
defend implementation choices classes acps 
continuations completely opaque values scheme applying possible inspect know contain frame continuation tail 
information explicit call cc implementation 
acps highly theoretically grounded wonderful tool goal additional benefit close implementation suggest continuations frames 
reflection drs fw wan dr wf dm appreciate acps allows represent continuations list frames opening new opportunities dissect 
classes useful factorize behavior frames resume function allow various control operators cohabit interference confusing reset frame wind frame instance 
choosing set control operators may better experiment simultaneously 
particular meaning dynamic wind respect control operators obscure probably deserve studies 
case dynamic extent concept 
hope implementations allow readers understand control operators better try program appreciate subtleties 
readers drafts especially matthias felleisen luc moreau amr sabry 
bibliography app andrew appel 
compiling continuations 
cambridge press 
cho william clinger anne eric ost 
implementation strategies continuations 
conference record acm conference lisp functional programming page august 
cr william clinger jonathan rees 
revised report algorithmic language scheme 
lisp pointer 
dan olivier danvy 
listing list prefixes 
lisp pointers january 
df olivier danvy andrzej filinski 
functional abstraction typed contexts 
diku report diku diku university copenhagen denmark august 
df olivier danvy andrzej filinski 
abstracting control 
lfp acm symposium lisp functional programming pages nice france june 
df olivier danvy andrzej filinski 
representing control study cps transformation 
pages december 
dl olivier danvy julia lawall 
back direct style ii class continuations 
lfp acm symposium lisp functional programming pages san francisco california usa june 
acm press 
lisp pointers 
dm olivier danvy 
intensions extensions reflective tower 
lfp acm symposium lisp functional programming pages snowbird utah july 
dr jim des rivi eres 
control related meta level facilities lisp 
maes nardi editors workshop meta level architecture reflection sardinia italy october 
north holland 
drs jim des rivi eres brian smith 
implementation procedurally reflective languages 
acm conference lisp functional programming pages 
fel matthias felleisen 
theory practice class prompts 
popl fifteenth annual acm symposium principles programming languages pages san diego california usa january 
ff matthias felleisen daniel friedman 
reduction semantics imperative higher order languages 
parallel architectures languages europe 
matthias felleisen daniel friedman bruce duba john merrill 
continuations 
computer science dept technical report indiana university bloomington indiana february 
cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
pldi pld pages 
sigplan notices june 
fw daniel friedman mitchell wand 
reification reflection metaphysics 
conference record acm symposium lisp functional programming pages austin tx august 
matthias felleisen mitchell wand daniel friedman bruce duba 
continuations mathematical semantics handling functional jumps 
proceedings acm symposium lisp functional programming salt lake city utah july 
daniel friedman mitchell wand christopher haynes 
essentials programming languages 
mit press cambridge ma mcgraw hill 
hd robert hieb kent dybvig 
continuations concurrency 
ppopp acm sigplan symposium principles practices parallel programming pages seattle washington march 
hf christopher haynes daniel friedman 
engines build process abstractions 
conference record acm symposium lisp functional programming pages austin tx 
hf christopher haynes daniel friedman 
embedding continuations procedural objects 
acm transactions programming languages systems october 
christopher haynes daniel friedman mitchell wand 
continuations coroutines 
conference record acm symposium lisp functional programming pages austin tx 
im ito matsui 
parallel lisp language kernel specification 
ito robert halstead jr editors proceedings japan workshop parallel lisp volume lecture notes computer science pages sendai japan june 
springerverlag 
jd johnson duggan 
stores partial continuations class objects language environment 
popl fifteenth annual acm symposium principles programming languages pages san diego california usa january 
jg pierre jouvelot david gifford 
reasoning continuations control effects 
acm sigplan programming languages design implementation volume sigplan notices pages portland june 
sigplan acm press 
joh gregory johnson 
gl denotational testbed continuations partial continuations 
proceedings sigplan symposium interpreters interpretive techniques pages saint paul usa june 
mat luis 
efficient implementation coroutines 
yves jacques cohen editors international workshop memory management number lecture notes computer science pages saint malo france september 
springer verlag 
mh malcolm harrison 
generators replicator control structure parallel environment alloy 
pldi acm sigplan programming languages design implementation pages white plains new york usa 
mor luc moreau 
operational semantics parallel functional language continuations 

editors parle parallel architectures languages europe pages paris france june 
lecture notes computer science springer verlag 
mq luc moreau christian queinnec 
partial continuations difference continuations control operators 
research report lix rr laboratoire informatique de ecole polytechnique palaiseau cedex france november 
pld proceedings acm sigplan conference programming language design implementation albuquerque new mexico usa june 
acm press 
sigplan notices june 
qd christian queinnec david de roure 
design concurrent distributed language 
robert halstead jr ito editors parallel symbolic computing languages systems applications japan workshop proceedings volume lecture notes computer science pages boston massachussetts usa october 
qs christian queinnec bernard 
dynamic extent control operator partial continuations 
popl eighteenth annual acm symposium principles programming languages pages orlando florida usa january 
que christian queinnec 
concurrent distributed extension scheme 

editors parle parallel architectures languages europe pages paris france june 
lecture notes computer science springer verlag 
que christian queinnec 
value transforming style 
research report lix rr laboratoire informatique de ecole polytechnique palaiseau cedex france may 
que christian queinnec 
continuation conscious compilation 
lisp pointers january 
rey reynolds 
discoveries continuations 
international journal lisp symbolic computation 
sf dorai sitaram matthias felleisen 
control delimiters hierarchies 
lisp symbolic computation international journal january 
sf dorai sitaram matthias felleisen 
reasoning continuations ii full abstraction models control 
proceedings acm conference lisp functional pages nice france june 
acm press 
sf amr sabry matthias felleisen 
reasoning continuation passing style programs 
lfp acm symposium lisp functional programming pages san francisco california usa june 
acm press 
lisp pointers 
sit dorai sitaram 
handling control 
pldi pld pages 
sigplan notices june 
ste guy lewis steele jr rabbit compiler scheme 
mit ai memo massachusetts institute technology cambridge mass may 
sw strachey wadsworth 
continuations mathematical semantics handling full jumps 
technical prg oxford university computing laboratory oxford university england 
wan mitchell wand 
continuation multiprocessing 
conference record lisp conference pages 
lisp conference 
wan mitchell wand 
mystery tower revealed non reflective description reflective tower 
proceedings acm symposium lisp functional programming pages august 
wf mitchell wand daniel friedman 
mystery tower revealed non reflective description reflective tower 
maes nardi editors meta level architectures reflection pages 
elsevier sci 
publishers 
north holland 

