analyzing regression test selection techniques gregg rothermel mary jean harrold department computer information science ohio state university lab neil avenue columbus oh cis ohio state edu april regression testing necessary expensive maintenance activity aimed showing code adversely affected changes 
regression test selection techniques reuse tests existing test suite test modified program 
regression test selection techniques proposed difficult compare evaluate techniques different goals 
outlines issues relevant regression test selection techniques uses issues basis framework evaluate techniques 
illustrate application framework evaluate existing regression test selection techniques 
evaluation reveals strengths weaknesses existing techniques highlights problems area address 
keywords software maintenance regression testing selective retest regression test selection 
estimates indicate software maintenance activities account thirds cost software production 
necessary expensive maintenance task regression testing performed modified program confidence changes correct adversely affected unchanged portions program 
important difference regression testing development testing regression testing established suite tests may available reuse 
regression testing strategy retest approach tests strategy may consume excessive time resources 
regression test selection techniques contrast attempt reduce time required retest modified program selecting subset existing test suite 
regression test selection techniques select tests information collected program specifications techniques select tests information code program modified version :10.1.1.25.6155:10.1.1.53.353
code techniques pursue distinct goals 
coverage techniques locate program components modified affected modifications select tests exercise components 
minimization techniques coverage techniques select minimal sets tests partially supported microsoft incorporated data general nsf ccr ccr clemson university 
second important task regression testing find ways existing test suite adequate testing modified program indicate new tests needed 
concerned process reusing existing tests 
discuss section 
modified affected program components 
safe techniques select test expose faults abundance regression test selection techniques wish choose technique practical application need way compare evaluate techniques 
differences underlying goals lead regression test selection techniques distinctly different results test selection 
despite philosophical differences identified categories regression test selection techniques compared evaluated 
categories inclusiveness precision efficiency generality 
inclusiveness measures extent technique chooses tests cause modified program produce different output original program expose faults caused modifications 
precision measures ability technique avoid choosing tests cause modified program produce different output original program 
efficiency measures computational cost practicality technique 
generality measures ability technique handle realistic diverse language constructs arbitrarily complex code modifications realistic testing applications 
categories form framework evaluation comparison regression test selection techniques 
framework demonstrate usefulness applying code regression test selection techniques cited 
main benefit framework provides way evaluate compare existing regression test selection techniques 
evaluation comparison existing techniques helps choose appropriate techniques particular applications 
example require reliable code may insist safe selective retest technique regardless cost 
hand reduce testing time may choose minimization technique doing may fail select tests expose faults modified program 
evaluation comparison existing techniques provides insights strengths weaknesses current techniques guidance choosing areas regression test selection address 
section provide background material regression testing general regression test selection problem particular 
section discuss theoretical issues provide motivation framework 
section framework comparing evaluating regression test selection techniques 
section framework review compare existing techniques 
section conclude discuss 
background program modified version specifications respectively 
refers output input refers output input refers specified output input refers specified output input set tests test suite created test test tuple identifier input output identifier identifies test input input execution program output specified output input input 
simplicity sequel refer test ht identifier refer outputs test input respectively 
research regression testing spans wide variety topics 
hoffman hoffman brown hoffman ziegler grasso focus test environments automation regression testing process 
lewis beck hartmann investigate automated capture playback mechanisms test suite management 
hartmann robson taha liu harrold gupta soffa wong address test suite management 
binkley presents algorithm constructs reduced size version modified program regression testing 
leung white discuss regression testability metrics 
research regression testing concerns selective retest techniques 
selective retest techniques reduce cost testing modified program reusing existing tests identifying portions modified program specification tested 
selective retest techniques differ retest technique tests existing test suite 
leung white show selective retest technique economical retest technique cost selecting reduced subset tests run cost running tests selective retest technique lets omit 
typical selective retest technique proceeds follows 
select set tests execute 
test establishing correctness respect 
necessary create set new functional structural tests 
test establishing correctness respect 
create new test suite test history performing steps selective retest technique addresses problems 
step addresses regression test selection problem problem selecting subset test step addresses coverage identification problem problem identifying portions require additional testing 
steps address test suite execution problem problem efficiently executing tests checking results correctness 
step addresses test suite maintenance problem problem updating storing test information 
problems significant restrict attention regression test selection problem 
restrict attention code regression test selection techniques rely analysis select tests 
regression test selection fault detection code regression test selection techniques attempt select subset helpful establishing confidence modified correctly functionality preserved required 
sense code test selection techniques concerned things locating tests expose faults appropriate evaluate relative abilities techniques choose tests detect faults 
test detects fault causes fail case say fault revealing program fails tested produces output incorrect effective procedure find tests fault revealing 
certain conditions regression test selection technique select superset set tests fault revealing conditions technique omits tests reveal faults consider second subset tests modification revealing tests 
test causes outputs differ 
assumptions find tests fault revealing finding tests modification revealing assumptions follows correct assumption 
test tested halted produced correct output 
obsolete test identification assumption 
effective procedure determining test obsolete test obsolete program specifies input invalid specifies invalid input output relation find tests fault revealing run procedure identifying obsolete tests remove know test remaining terminated produced correct output supposed produce output tests left fault revealing modification revealing find fault revealing tests simply finding modification revealing tests 
tests identified obsolete may involve legal inputs test reveal faults may find tests simply running inputs setting time bound test exceeds bound assume fault revealing unfortunately correct assumption obsolete test identification assumption hold effective procedure precisely identifying tests modification revealing 
consider third subset modification traversing tests 
test modification traversing executes new modified code executed code deleted modification traversing tests useful consider additional assumption test modification revealing modification traversing additional assumption follows proper regression testing assumption 
tested hold factors influence output code constant respect states tested effectively determine test effectively judge test correctness 
assumption necessary intend employ test reuse selective 
procedure course precisely identify fault revealing tests obsolete tests may select test increased terminate fault revealing 
procedure conservatively approximate set fault revealing tests obsolete tests omitting fault revealing tests 
notice apply similar procedure tests running time bound discover conservatively tests fault revealing running tests doing thing selective retest aims avoid 
capture formally notion executing new modified deleted code define concept execution trace consist sequence statements executed tested say execution traces representing sequences statements executed respectively tested equivalent different lengths compare elements find pair elements lexically 
say modification traversing 
modification revealing fault revealing obsolete modification traversing test suite fault revealing relationship classes tests 
proper regression testing assumption holds assumptions identify tests fault revealing identifying tests modification traversing procedure described previous page determine obsolete tests tests fault revealing assumptions hold process locates tests fault revealing illustrates relationship holds sets obsolete fault revealing modification revealing modification traversing tests assumptions hold 
gives algorithm precisely identifies tests modification traversing unfortunately algorithm exponential worst case running time 
show np expect find efficient algorithm precisely identify tests modification traversing problem precisely identifying tests pspace hard 
problem precisely identifying tests modification traversing intractable general show algorithms conservatively identify tests 
doing cases assumptions hold algorithms select tests fault revealing brevity henceforth refer tests fault revealing modification revealing modification traversing simply fault revealing modification revealing modification traversing respectively 
proper regression testing assumption practical 
example port system creating properly regression test new system proper regression testing demands hold factors code constant including system 
employ proper regression testing selection modification traversing tests may omit modification revealing tests 
instance porting example may fail tests modification traversing new system memory available dynamic allocation old system 
factors affect viability assumption practice nondeterminism programs interactions external environment difficult necessarily impossible incorporate testing process way allows employ proper regression testing 
employ proper regression testing modification traversing tests may constitute useful test suite 
conjecture testing budget limited subset chosen tests execute changed code better candidates re execution tests modification traversing 
classes tests describe section contribute specification framework evaluating comparing regression test selection techniques reasons 
testing professionals reluctant discard tests may expose faults 
shown certain assumptions relationships classes provide way analytically evaluate test selection techniques terms abilities select avoid discarding fault revealing tests 
despite fact regression test selection techniques aim select tests satisfy test adequacy measure reasonable important evaluate methods terms abilities detect faults 
second cases proper regression testing assumption satisfied classes serve distinguish existing regression test selection techniques 
code regression test selection techniques attempt identify tests execute changed components techniques attempt precise eliminating tests execute changed components tests clearly cause produce different output 
useful compare test selection techniques terms abilities identify classes tests 
third practice large software systems test suites functional goal testing coverage code components testing functional behavior 
test suites built primarily provide code coverage may little sense select tests pass component test provide coverage 
test suites functional particularly important omit tests may reveal faults may exercise code components exercised tests 
framework analyzing regression test selection techniques section framework analyzing regression test selection techniques 
framework consists categories inclusiveness precision efficiency generality 
worth worrying ramifications software quality deterministically test particular timing effect environmental interaction dependency 
case particular testing session important program behavior may go untested due simply vagaries environment order operations occur 
test behavior deterministically clear ensure test 
concluding proper regression testing assumption useful practice focus finding ways proper regression testing possible cases 
inclusiveness regression test selection technique 
inclusiveness measures extent chooses modification revealing tests inclusion define inclusiveness relative particular program modified program test suite follows definition suppose contains tests modification revealing suppose selects tests 
inclusiveness relative percentage expression 
example contains tests modification revealing selects tests inclusive relative contains modification revealing tests test selection technique inclusive relative selects modification revealing tests say safe follows definition inclusive relative safe 
arbitrary choice algorithm determine inclusiveness relative draw useful inclusiveness 
prove safe showing selects known superset modification revealing tests 
example selects modification traversing tests proper regression testing safe 
second prove safe finding case omits modification revealing test 
third compare test selection techniques terms inclusiveness showing techniques select subsets modification revealing tests showing subset superset experiment approximate inclusiveness relative particular choice experimentation involves running generate set run test determine tests modification revealing 
compare tests modification revealing tests inclusiveness safety significant measures 
safe selects test fault revealing safe may omit tests expose faults 
furthermore hypothesize regression test selection techniques inclusive greater ability expose faults 
code regression test selection techniques consider effects modified code evaluate technique inclusiveness consider effects new deleted code 
created adding new code may contain tests modification revealing code 
example consider code fragments shown 
absence modifications test executes statement fragment necessarily executes statement fragment may modification revealing depending statements subsequently encounters 
similarly created deleting code may contain tests modification revealing deleted code 
example consider code fragments shown 
example left statement fragment deleted yielding fragment absence modifications test possible determine halts run test experimentation approximate inclusiveness fragment 

fragment 




code fragments illustrate addition code 
fragment fragment 
call 
call point point 
call point point fragment fragment 

endif 







print endif endif endif code fragments illustrate deletion code 
executes may produce different output example right statements deleted fragment yielding fragment absence modifications test true may produce different output account effects new deleted code find examples code additions deletions prove safe 
precision regression test selection technique 
precision measures extent omits tests non modification revealing 
define precision relative particular program modified program test suite follows definition suppose contains tests non modification revealing suppose omits tests 
precision relative percentage expression 
example contains tests non modification revealing omits tests precise relative contains non modification revealing 
read 

exit 
print 
print 
exit 
read 


print 
exit 
print 
exit 
print 
exit 
procedures tests test selection technique precise relative inclusiveness algorithm determine arbitrary choice precision relative draw useful precision 
compare test selection techniques terms precision showing techniques select subsets non modification revealing tests showing subset superset second prove precise finding case selects test non modification revealing 
third experimentation compare relative precisions 
prove precise show omits superset non modification revealing tests 
precision useful measures extent avoids selecting tests produce different program output 
general compare test selection techniques terms precision identify techniques promote unnecessary testing 
particular compare safe test selection techniques terms precision identify techniques come closest goal selecting exactly modification revealing tests 
evaluate test selection technique precision useful consider procedure modified version shown 
changes create syntactically different semantically equivalent modified version changes affect output program inputs 
selects tests pair procedures imprecise 
example suggested wu private communication 


printf pathological 





printf pathological 
procedures pathological pathological shows procedure pathological modified version pathological useful evaluate test selection technique precision 
construct versions increments value tests incremented value determine enter exit loop 
notice test input value versions output value test input value gamma pathological outputs pathological outputs 
selects test input value imprecise 
efficiency measure efficiency regression test selection techniques terms space time requirements 
time concerned test selection technique economical retest technique cost selecting cost running tests 
space efficiency primarily depends test history program analysis information technique store 
space time efficiency depend size test suite technique selects computational cost technique 
rely standard algorithm analysis techniques obtain theoretical measurements efficiency 
empirical evidence technique efficiency available rely 
rest section discuss factors considered performing evaluations 
factor consider evaluate test selection technique efficiency phase lifecycle technique performs activities 
distinguish phases typical regression testing life cycle preliminary phase critical phase 
preliminary phase regression testing begins release version software 
preliminary phase programmers enhance correct software 
corrections complete critical phase regression testing life cycle begins 
critical phase regression testing dominating activity time limited times severely deadline product release 
critical phase cost minimization important regression testing 
regression test selection techniques exploit phases regression testing life cycle 
example technique requires test history program analysis information critical phase achieve lower critical phase cost gathering information preliminary phase 
evaluate test selection techniques efficiency differentiate costs incurred preliminary phase regression testing costs incurred critical phase 
second factor consider evaluate test selection technique efficiency 
human effort expensive techniques require excessive human interaction impractical 
relative costs human effort versus machine time may create cases test selection requires time retest method test selection preferable 
example suppose require hours analysis determine save hour testing 
analysis fully automated testing requires intensive human interaction afford analysis time test selection preferable 
test selection method efficient critical phase may impractical requires excessive human interaction preliminary phase 
third factor impacts test selection technique efficiency extent technique calculate information program modifications 
technique determine program component modified deleted added calculate correspondence may expensive technique calculates modification information needed 
technique calculates information needed may find partial correspondence need calculated saving comparison technique calculates complete correspondence 
regression test selection techniques require modification information obtain approaches 
approach incremental editor tracks modifications maintenance programmers perform 
case cost obtaining information incurred preliminary phase regression testing critical phase 
second approach obtaining modification information differencing algorithm computes correspondence shows components new components deleted components correspond components corresponding components modified 
differencing algorithm proposed yang algorithm requires time jp jp compute correspondence max jp jp algorithm proposed laski 
efficient comparison methods unix diff utility may precise computing correspondences intraprocedural level 
coarser grained various ways phase process may fit software maintenance process 
big bang process performs modifications complete turns regression testing 
incremental process performs regression testing intervals maintenance life cycle testing session aimed product current state evolution 
preliminary phases typically shorter incremental model big bang model models phases exist exploited 
unix registered trademark licensed exclusively novell 
interprocedural test selection algorithms need know example procedures modified methods diff 
case correspondence procedure level calculated time max jp jp log max jp jp second represents cost performing table lookups directory configuration management database locate corresponding procedures 
final factor affecting efficiency test selection techniques concerns techniques ability handle cases created multiple modifications technique depends analyses programs processes modification time may forced incrementally update analysis test history information considering modification 
reanalysis expensive significantly impact technique cost 
approach sort may suffice context incremental regression testing process big bang process expense may prohibitive 
generality generality test selection technique ability function wide practical range situations 
describe factors considered evaluating technique generality 
practical test selection technique function identifiable practical class programs 
example technique defined procedures constructed assignment statement constructs practical defined 
second test selection technique handle realistic program modifications 
example technique handle modifications alter flow control programs general practical 
third technique depends success assumptions testing maintenance environments general technique requires assumptions 
example technique requires initial testing performed dataflow testing criteria general technique places requirements initial testing 
similarly technique requires incremental editor track code modifications general technique requirement 
fourth technique depends availability particular program analysis tools general technique depend tools 
example technique requires collection test trace information general technique require information instrumentation required collect traces may excessively intrusive certain testing applications 
similar reasons method requires traces function basis general technique requires traces statement basis 
technique may support intraprocedural interprocedural test selection 
practice regression testing performed interprocedural level subsystems programs 
furthermore empirical evidence suggests test selection intraprocedural level may offer savings sufficient justify cost 
intraprocedural test selection techniques may interprocedurally naive fashion applying pairs procedures program modified version 
simplistic approach interprocedural test selection unnecessarily costly 
judge method interprocedural addresses interprocedural test selection method goes naive approach 
define generality quantitatively defined inclusiveness precision 
experimentation measure generality respect classes programs modifications 
research qualitative comparisons sufficiently informative 
tradeoffs test selection techniques face tradeoffs foregoing criteria concerned 
safe techniques increases precision typically obtained increases analysis 
increasing precision decrease efficiency 
techniques safe increasing precision inclusiveness decrease efficiency 
decreased efficiency drives cost analysis certain level may render cost selective regression testing greater cost retest technique 
second factors identified affecting generality implications inclusiveness efficiency precision 
example dataflow techniques calculate alias information conservative assumptions handle programs contain aliases 
attempting increase generality methods extending handle aliasing decreases efficiency 
similarly techniques handle multiple modifications time incur penalties efficiency programs considering modification techniques perform reanalysis incur penalties precision 
definitions inclusiveness precision define inclusiveness precision terms modification revealing tests definitions may useful 
example may define inclusiveness precision terms modification traversing tests 
case inclusiveness measures technique ability select modification traversing tests precision measures technique ability omit tests modification traversing 
distinguish definitions definitions modification revealing tests terms inclusiveness precision safety mt inclusiveness mt precision mt safety 
define inclusiveness precision terms test selection criteria dataflow test selection techniques 
dataflow techniques attempt identify tests exercise new affected definition associations evaluate compare dataflow techniques relative abilities select tests exercise affected definition pairs du pairs omit tests du pair inclusiveness du pair precision du pair safety 
definitions inclusiveness precision definitions efficiency generality section continue apply 
despite existence alternative definitions inclusiveness precision believe particularly important evaluate test selection techniques terms inclusiveness precision discussion preceding section shows categories support analytical comparisons methods terms abilities reveal faults modified programs 
analysis regression test selection techniques section discuss existing regression test selection techniques framework analyze 
illustrate findings respect inclusiveness precision diagrams shown 
diagrams outer box delimits set tests circles labeled represent sets tests execute modified code new code code deleted respectively 
circles intersect tests execute classes code changes 
tests sets represented circles modification traversing sets non modification traversing 
dash filled area represents set modification revealing tests 
category modification traversing tests contains tests modification revealing dashed area contains omits portions area formed intersections circles 
depict inclusiveness precision particular selective retest technique shade portions diagrams 
shaded area shows sets modification traversing modification revealing tests technique admits omits 
example depicts inclusiveness precision retest technique optimum technique 
retest technique selects tests shade entire diagram left 
optimum technique hand selects exactly modification revealing tests diagram right shade area delimiting tests 
cases larger shaded areas indicate particular techniques inclusive techniques particular categories tests 
cases point relationship text describe diagram 
exception cases relative sizes shaded areas matter importance attached sizes regions shaded areas graphs 
diagrams similar venn diagrams venn diagrams 
evaluate time efficiency available worst case timing analyses authors papers techniques 
cases analyses available performed cases algorithms sufficient detail analyses considered estimates 
standardize set symbols timing analyses jp jp jt refer sizes respectively size program mean number statements program 
augment timing analyses cases empirical results cost techniques available discussed results 
evaluate space efficiency topic seldom discussed papers test selection techniques confined mentioning cases techniques may require space exponential size input 
linear equation techniques fischer presents selective retest technique uses systems linear equations select test suites yield segment coverage modified code 
lee propose similar technique 
fischer extend fischer earlier incorporate information variable definitions uses 
obsolete tests execute modified code tests execute new code tests execute deleted code modification revealing tests base diagram depiction inclusiveness precision 
obsolete retest method optimum method obsolete inclusiveness precision retest optimum techniques 
hartmann robson extend implement fischer technique 
linear equation techniques systems linear equations express relationships tests program segments 
techniques obtain systems equations matrices track program segments reached test cases segments reachable segments optionally definition information segments 
intraprocedural techniques integer programming algorithm identify subset contains modifications affect control flow ensures segment statically reachable optionally segment statically reach modified segment exercised test exercises modified segment 
interprocedural variant techniques treats subroutines segments approach monitors subroutine coverage statement coverage supports test selection programs modifications affected control flow 
intraprocedural interprocedural techniques variable definition information conjunction control flow information 
just cited linear equation techniques discussed minimization techniques 
techniques need necessarily perform minimization select maximum number tests traversing respective coverage entity 
inclusiveness 
minimization techniques omit modification revealing tests 
tests execute particular modified segment tests reach particular affected code segment minimization techniques select test select coverage 
consider example code fragments test cases shown fragment represents modified version fragment statement erroneously modified 
tests execute statements test causes divide zero exception test 
minimization techniques select tests omit select lose opportunity expose fault exposes 
minimization techniques omit modification revealing test safe 
noted linear equation techniques need strive minimization 
case prove believe techniques select safe test suites 
intraprocedural variant techniques handle situations code modifications alter control flow minimization techniques revert selecting tests procedures modifications occured 
interprocedural variants techniques problem alterations control flow just identify modified procedures functions irrespective type modification 
precision 
applied modified procedures control flow affected intraprocedural linear equation techniques omit non modification traversing tests ignoring tests execute changed segments 
control flow affected linear equation techniques defined program segments defined variously literature linear equation techniques 
fischer defines segment single entry single exit block code statements executed sequentially definition segments equivalent basic blocks 
fischer applies term procedures functions statements executed sequentially 
hartmann robson define segments procedures programs particular groups statements procedures entire functions respectively 
cases segments portions code test execution tracked serve test requirements entities tested 
discussion single term segment refer types segments necessary distinguish 
modifications affect control flow include changes predicate statements example changes assignment statements alter variables subsequently predicate statements 
fragment 


return error 

return fragment 


return error test cases 
return test input execution history code fragments illustrate lack safety minimization 
level 
interpret requiring user revert retest control flow affected 
dataflow information increase precision techniques 
interprocedural level linear equation techniques select tests traverse modified procedures traverse modified code procedures 
tests modification traversing selecting leads loss precision 
depicts inclusiveness precision linear equation techniques represented diagram minimization techniques diagram interprocedural techniques 
diagram illustrates minimization lack safety leaving areas unshaded test categories 
outside circles shaded area depicts non modification traversing tests selected techniques assuming procedures contain modified control flow select tests procedures 
diagram shows inclusiveness precision linear equation techniques attempt minimize set tests selected 
case shaded circular areas signify techniques selection modification traversing tests shaded areas outside circles signifies techniques selection tests modification traversing 
efficiency 
linear equation techniques automatable 
techniques operate minimization techniques return small test suites reduce time required run selected tests 
fischer states due calculations required solve systems linear equations techniques may data computation intensive large programs 
fact underlying problem np hard known integer programming algorithms may take exponential time 
despite possible worstcase behavior integer programming algorithms exist obtain solutions practice times may acceptable 
example crowder johnson padberg report experimental results large scale problems solved hour 
hartmann robson report interprocedural technique treating functions smaller code segments basic entities coverage achieves performance gains intraprocedural techniques 
linear equation test selection techniques provide empirical data sufficient evaluate cost techniques practice 
intraprocedural interprocedural techniques require computation correspondence segments segments segments modified testing entered non minimization versions minimization versions obsolete obsolete inclusiveness precision linear equation techniques 
critical phase 
linear equation methods specify method correspondence change information computed 
assume discussed section required information computed intraprocedural techniques time jp jp 
interprocedural technique information computed time max jp jp log max jp jp 
techniques handle multiple modifications single application algorithm 
linear equation techniques require transitive closure operations relations size jp determine static reachability segments operations require worst case time jp 
operations completed preliminary phase regression testing 
generality 
fortran linear equation techniques implemented procedural language 
intraprocedural interprocedural versions technique defined 
intraprocedural technique defined modifications affect flow control 
interprocedural technique handles types program modifications 
techniques independent underlying coverage criteria aimed general control flow dataflow testing criteria 
techniques require tools solving integer programming problems collecting test trace information function level intraprocedural segment level 
symbolic execution technique yau selective retest technique uses input partitions data driven symbolic execution select execute regression tests 
initially technique analyzes code specifications derive input partition modified program 
technique eliminates obsolete tests gen new tests ensure input partition class exercised test 
information code modified technique determines edges control flow graph new program modified code reachable 
technique performs data driven symbolic execution symbolic execution tree symbolically execute tests 
tests discovered reach edges modifications reachable need executed 
tests reach modifications symbolically executed termination 
technique selects tests reach new modified code 
technique symbolically executes selected tests obviating need execution 
inclusiveness 
symbolic execution technique selects tests execute new modified code modified program 
technique selects tests reach blocks original program statements deleted 
entire blocks code deleted removing control statements symbolic execution technique detect tests affected deletions selects tests reach modified new code modified program 
tests may modification revealing symbolic execution technique safe 
precision 
symbolic execution technique selects tests reach new changed blocks code 
cases approach omits non modification traversing tests presence new block code necessarily render tests block modification traversing 
example programs shown tests take false branch enter new block code take branch tests execute identical sequences statements program versions non modification traversing 
depicts inclusiveness precision symbolic execution technique 
shaded area indicates technique selection tests execute modified new code 
area corresponding tests execute deleted statements partially unshaded indicating technique omission tests 
technique admits non modification traversing tests areas outside circles shaded 
efficiency 
yau state symbolic execution technique computationally expensive may produce large amounts data 
symbolic expressions built execution complex program derived 
fact symbolic execution tree built technique size require time build exponential size modified program may result symbolic expressions exponential size modified program 
possible certain modifications algorithm terminate 
occur example loop predicate modified modification causes program loop forever test inputs 
symbolic execution technique requires prior calculation location new modified code modified program discussed section require time jp jp 
technique handles multiple modifications single application algorithm 
generality 
symbolic execution technique handles modifications affect control flow handle code deletions 
technique applies modified procedures programs 
obsolete inclusiveness precision symbolic execution technique 
technique part testing approach input partition testing test selection algorithm depend specific testing criteria 
technique limited generality cost authors conclude due computational expense symbolic execution technique feasible numerical programs inordinately complex 
technique require test traces 
path analysis technique cimitile de selective retest technique path analysis 
technique takes input set program paths expressed algebraic expression manipulates expression obtain set cycle free exemplar paths acyclic paths program entry program exit 
technique compares exemplar paths exemplar paths classifies paths new modified canceled unmodified 
technique analyzes tests see exemplar paths traverse technique selects tests traverse modified exemplar paths 
inclusiveness 
path analysis technique omits tests traverse canceled paths omits tests traverse new paths paths contain new blocks code 
case omitted tests may modification revealing 
example technique omits test pathological uses input gamma 
test modification revealing pathological pathological path analysis technique safe 
precision 
path analysis technique selects tests execute modified exemplar paths tests necessarily modification traversing 
technique omits non modification traversing tests 
technique omit non modification revealing tests execute modified exemplar obsolete inclusiveness precision path analysis technique 
paths 
depicts inclusiveness precision path analysis technique 
shaded area indicates technique selection tests traverse paths contain modifications 
areas corresponding tests unshaded indicating technique omission tests 
efficiency 
path analysis technique need compute correspondence program modified version sense techniques compute correspondence 
technique compares exemplar paths locate modifications 
technique handles multiple modifications single application algorithm 
path analysis technique computationally expensive 
technique calculates stores exemplar paths test number exemplar paths computation data usage depends may exponential jp jp generality 
path analysis technique assumes programming environment lowlevel program designs depicted language independent algebraic representations 
environment facilitates construction algebraic expressions may manipulated yield set exemplar paths 
technique handle test selection additions deletions code 
technique support interprocedural regression testing approach analyzing procedures program 
technique require particular coverage criteria test generation technique require tool collecting traces statement level 
computation comparison exemplar paths thought computation correspondence 
dataflow techniques selective retest techniques dataflow analysis testing techniques 
dataflow test selection techniques identify definition pairs new modified select tests exercise pairs 
techniques identify select tests definition pairs deleted approaches suggested 
incremental techniques process single change select tests change incrementally update dataflow information test trace information repeat process change 
nonincremental techniques process multiply changed program considering modifications simultaneously 
dataflow regression testing techniques described gupta harrold soffa harrold soffa taha liu ostrand weyuker sufficiently alike justify treating 
inclusiveness 
dataflow techniques consider tests association definition pairs 
result omit modification revealing tests ways 
example code deletions depicted left dataflow techniques select tests 
similarly test executes new modified output statement contains variable uses dataflow techniques select test statement may modification revealing old new versions program 
incremental nonincremental techniques omit tests ways 
dataflow techniques safe 
precision 
selecting tests execute new modified deleted definition pairs dataflow techniques typically omit non modification traversing tests 
presence definition new block code render tests block modification traversing 
example program definition pair new tests exercise pair non modification traversing 
dataflow techniques attempt identify tests pairs imprecise cases 
hand requiring selected tests exercise new modified definition pairs dataflow techniques omit tests tests reach modified definition reach defined variable modification traversing non modification revealing 
illustrates inclusiveness precision dataflow techniques 
techniques achieve increase precision selecting tests exercise definition pairs part area diagram corresponds modification traversing tests non modification revealing unshaded 
techniques modification revealing tests areas modification revealing test area unshaded techniques select non modification traversing tests area outside circles shaded 
efficiency 
dataflow techniques require initial calculation storage dataflow information 
incremental dataflow test selection techniques perform incremental dataflow analysis update dataflow information 
worst case cost test selection techniques modification jt jp 
worst case cost nonincremental techniques slightly larger 
nonincremental techniques reanalysis requires jp time computation correspondence versions computed time jp jp 
comparison definition associations require max jp jp log max jp jp time number definition associa obsolete inclusiveness precision dataflow techniques 
tions program may quadratic jp worst case cost nonincremental techniques max jp jp log max jp jp 
generality 
dataflow techniques require control flow graphs test execution histories applied procedural programs generally 
techniques function varieties program changes alter definition associations 
taha liu technique ostrand weyuker technique apply intraprocedural regression test selection harrold soffa technique applies interprocedural test selection 
techniques assume initial dataflow test selection criteria require tools static dataflow analysis collecting test traces basic block level 
incremental approach requires incremental dataflow analysis tools 
program dependence graph techniques bates horwitz test selection techniques program dependence graph pdg criteria pdg nodes pdg flow edges 
pdg techniques slicing group pdg components nodes flow edges execution classes test executes component execution class executes components class 
techniques identify components may exhibit different behavior affected components comparing slices corresponding components techniques select tests exercise components execution class affected component 
inclusiveness 
prove believe pdg techniques identify tests execute new modified code 
presence multiple changes techniques may fail recognize test reach particular component due presence changed test cases test input execution history 
fragment fragment 






code fragments distinguish modified affected statements 
statement slice case select necessary respect component 
pdg techniques omit tests exercised statements deleted example cases techniques select tests 
pdg techniques safe 
precision 
technique selecting tests affected nodes causes pdg nodes technique select non modification traversing tests 
example applied code fragments nodes technique correctly selects test selects non modification traversing test executes statement affected change 
problem occur pdg flow edges criteria 
technique precise respect modifications sort depicted techniques select tests reach new pdg components tests reach edge due equivalence slices back edge 
depicts inclusiveness precision pdg techniques 
techniques admit non modification traversing tests areas outside circles shaded 
techniques tests deleted statements areas modification revealing tests remain unshaded 
efficiency 
pdg techniques compute control slices node flow edge pdg node flow edge pdg compute backward slices node flow edge corresponding node flow edge node flow edge corresponding node flow edge pdg nodes techniques compute jp jp slices edges techniques compute jp jp slices 
slice require time quadratic procedure size 
adding cost performing set operations test suites size pdg nodes techniques worstcase time jt max jp jp pdg flow edges worst case time jt max jp jp 
furthermore slice computation slice comparisons performed critical phase regression testing modifications complete 
pdg techniques handle multiple modifications single application algorithm 
pdg techniques require computation complete correspondence statements modified versions provided mapping algorithm incremental editor 
generality 
pdg techniques restricted set language constructs obsolete inclusiveness precision pdg techniques 
apply procedural languages generally 
techniques address types code modifications code deletion 
techniques support interprocedural regression testing approach analyzing procedures program 
techniques assume pdg test adequacy criteria require tools constructing pdgs turn require tools performing control dependence dataflow analysis tools performing program slicing tools collecting test traces statement level 
system dependence graph techniques binkley presents technique interprocedural regression test selection operates system dependence graph sdg 
program modified version sdg techniques calling context slicing slicing technique calculating precise interprocedural slices sdgs identify components vertices flow edges common execution patterns 
techniques identify new preserved deleted affected components affected components components differ corresponding components calling context slice contains components techniques select tests exercise components common execution patterns respect new affected components inclusiveness 
prove believe sdg techniques pdg techniques identify tests execute new modified code 
pdg techniques sdg techniques omit tests exercised components deleted cases techniques select tests 
sdg techniques safe 
obsolete inclusiveness precision sdg techniques 
precision 
sdg vertices technique precise pdg vertices technique avoids selecting tests execute affected components tests non modification traversing 
example applied code fragments sdg nodes technique selects test omits test execute modified statements 
pdg techniques sdg techniques admit non modification traversing tests cases 
depicts inclusiveness precision sdg techniques 
techniques may admit non modification traversing tests areas outside circles shaded 
pdg techniques techniques modification revealing tests deleted statements area corresponding tests unshaded 
efficiency 
sdg techniques require jp jp jp jp slices pdg nodes pdg flow edges versions respectively 
slice require time linear size sdg 
sdg size polynomial number factors relating program size including number parameters procedure size number call sites polynomial degree 
adding cost performing set operations test suites size jt sdg techniques worst case time jt max jp jp jt max jp jp depending criteria 
sdg slice computation slice comparisons performed respect statements costs operations incurred modifications complete testing entered critical phase 
sdg techniques handle multiple modifications single application algorithm 
techniques require provision complete correspondence statements modified versions provided mapping algorithm incremental editor 
correspondence computed testing entered critical phase 
generality 
sdg techniques apply procedural languages generally 
techniques address types program modifications code deletions 
techniques specifically address problem interprocedural test selection function intraprocedural test selection 
techniques require tools constructing sdgs turn require tools performing control dependence dataflow analysis collecting test traces statement level 
techniques assume pdg test adequacy criteria 
modification technique korel selective retest technique uses static dependence analysis determine program components data control dependent modified code may affected modification 
types program modifications technique specifies set program components influenced modification 
technique instruments modified program requires tester run tests instrumented source 
test executed technique performs dynamic dependence analysis test execution trace determine test executed modified code influenced components reached 
testing complete modification influenced component reached test exercised modification 
authors extend handle logical modifications consist groups logically related modifications 
modification technique differs techniques analyze automate process selecting technique identifies coverage requirements process selecting helps satisfy coverage requirements left tester 
authors indicate address problem guiding tester selection 
despite difference modification technique techniques automate selection useful evaluate technique alongside regression test selection techniques 
technique automatically select goal technique tester cease testing having run subset tests inclusiveness 
modification technique minimization technique 
technique omits modification revealing tests attempts select modified code component test reaches component affected modification 
technique may omit tests execute pair modified affected code components omit tests expose faults 
example code fragments test cases shown technique allow tester cease testing selecting tests 
tester selects loses opportunity expose fault exposes 
modification technique defined types modifications affects inclusiveness technique 
example clear technique handles deletions procedure calls calls influence variables depicted left side 
korel propose non minimization version technique 
chose require selection multiple tests just test reach affected component obsolete inclusiveness precision modification technique 
modified component technique omit modification revealing tests 
example restriction selected tests reach code dependent modified code technique omit tests reach code fragments left 
non minimization technique technique safe 
precision 
modification technique require testers select non modification traversing tests techniques count tests execute modified code coverage 
dependence analysis technique avoids requiring tests non modification revealing 
technique depends person locate tests cover testing requirements practice set tests person selects try meet criteria include non modification traversing tests 
depicts inclusiveness precision modification technique 
technique may leave tests categories areas categories remain unshaded 
technique non modification traversing tests may inadvertently run areas outside circles shaded 
efficiency 
minimization technique modification technique satisfied selection small test sets reduce testing time 
technique automate test selection process person select execute tests testing requirements modification met 
quantify time process may require 
technique assumes code modifications 
technique analyzes particular modification logical modification tests cover modification technique redo incrementally update static analysis consider modification 
required static analysis includes static data control dependence analysis requires jp time 
running test technique requires dynamic analysis trace test require time jp 
logical modification technique requires jt jp time 
generality 
modification technique applies procedural languages generally 
technique defined types program modifications 
technique apply interprocedurally 
technique depend particular testing criteria requires tool collecting test traces statement level tools performing static dynamic control data dependence analysis 
firewall technique leung white selective retest technique directed specifically interprocedural regression testing handles code specification changes 
technique determines place firewall modified code modules 
test selection concerned technique selects unit tests modified modules lie firewall integration tests groups interacting modules lie firewall 
leung white extend technique handle interactions involving global variables 
white discuss experiences implementing firewall technique 
inclusiveness 
unit integration tests initially test system components reliable correctness modules exercised tests tested inputs implies correctness modules inputs firewall technique selects modification revealing tests safe 
leung white note practice test suites typically reliable 
test suites reliable firewall technique may omit modification revealing tests 
see may happen suppose modified procedure program set tests tp set unit integration tests apply modules firewall drawn tp reliable may exist input test tp exercises input input exposes fault system test exists tp causes invoked input fault revealing firewall technique select follows practice firewall technique safe 
authors state despite fact technique provides sensible utilization testing resources 
precision 
firewall technique selects unit integration tests modules lie firewall 
tests necessarily execute modified code firewall technique selects traversing tests 
programs modified versions figures example technique selects tests non modification traversing 
depicts inclusiveness precision firewall technique 
technique omits modification revealing tests categories diagram contains unshaded areas categories 
technique admits non modification traversing tests areas outside circles shaded 
efficiency 
firewall technique described sufficient formal detail support precise analysis worst case running time 
believe firewall constructed time proportional size program call graph tests selected firewall time proportional product size test suite size call graph 
worst case call graph size obsolete inclusiveness precision firewall technique 
proportional program size firewall technique requires time max jp jp jt perform test selection 
technique handles multiple modifications single application algorithm 
technique requires computation set modified procedures critical phase testing discussed section computation performed time max jp jp log max jp jp 
firewall technique implemented initial measurements expense reported 
implementation requires database may expensive set setup performed initial phase regression testing 
preliminary empirical results suggest setup complete analysis test selection phases technique efficient large amounts data 
generality 
firewall technique applicable programs procedural languages generally 
technique handles types code modifications 
technique specifically handles interprocedural test selection handle intraprocedural test selection 
technique require underlying testing technique particular coverage criteria 
technique require tools collecting test traces function level 
focus code testing needs worth noting firewall technique addresses testing needs respect specification changes 
cluster identification technique laski technique identifying single entry single exit subgraphs control flow graph cfg called clusters modified version program 
cluster identification technique computes control dependence information procedure changed version computes control scope decision statement procedure procedure avg 
count 

eof 
fread 
return error 
count 
count endif 
fread endwhile 
avg count return avg test input empty file procedure illustrating imprecision cluster identification 
transitive closure control dependence relation 
technique uses information identify clusters establish correspondence cfgs establishing correspondence technique selects tests execute new deleted modified clusters 
inclusiveness 
cluster identification algorithm sufficient formal detail support proof safe believe technique safe proper regression testing 
technique handles structural changes new deleted code identifying clusters structures code added modified deleted selecting tests exercise corresponding clusters believe procedure identifies superset modification traversing tests 
example programs code fragments previous sections technique identifies selects superset 
precision 
cluster identification technique identify clusters manner allows selection non modification traversing tests 
example procedure avg test suite avg shown cluster identification technique identifies cluster consisting statements identify smaller clusters cluster 
add statement print improper input avg just prior statement cluster identification technique selects tests tests exercise modified cluster encloses new line 
test executes new statement tests non modification traversing 
second example procedures cluster identification technique selects non modification traversing tests enter cluster contains statements note technique selects exactly modification traversing tests procedures pathological pathological 
cluster identification technique looks inside modified procedures may omit non modification obsolete inclusiveness precision cluster identification technique 
traversing tests go procedures recognizing tests execute modified clusters 
precise interprocedural linear equation techniques select tests modified procedures 
depicts inclusiveness precision cluster identification technique assertion technique selects modification traversing tests 
technique safe circles diagram fully shaded 
technique admit non modification traversing tests areas outside circles shaded 
technique precise interprocedural linear equation techniques shaded area smaller diagram diagram 
efficiency 
running time cluster identification technique bounded time required compute control scope decision statements procedures statements 
algorithm establishing correspondence clusters quadratic size larger dealing test suites jt tests technique requires jt max jp jp time select tests 
technique handles multiple modifications single application algorithm 
technique computes correspondence entire procedure modified version performs computation modifications complete testing critical phase 
generality 
cluster identification technique works cfgs applies procedural programs generally 
technique handles forms program modifications 
technique support interprocedural regression testing approach analyzing procedures program 
technique assumptions development environments initial design test suites 
technique requires tools calculating control dependence collecting test trace information statement level 
slicing techniques agrawal define family selective retest techniques slicing 
test technique constructs slice 
authors discuss different slice types execution slice dynamic slice relevant slice approximate relevant slice 
execution slice contains exactly statements executed dynamic slice contains statements execution slice influence output statement execution slice 
relevant slice dynamic slice contains predicate statements changed may cause produce different output statements predicates data dependent 
approximate relevant slice dynamic slice contains predicate statements execution slice slice sl test constructed slicing techniques sl contains modified statement techniques select inclusiveness 
agrawal show dynamic slice technique omit modification revealing tests contains modified predicate statements technique safe 
code modifications alter control flow graph edges definition sets slicing techniques safe 
additions predicate assignment statements adversely impact inclusiveness slicing techniques 
example suppose new assignment statement added slices constructed slicing techniques contain statements appeared prior modification slice contains test executes block code inserted may modification revealing 
slicing techniques select tests safe 
agrawal extend techniques address loss safety relevant potential relevant slice techniques 
assignment statement added extended techniques include sl statements executed value computed predicate statement added extended techniques include sl statements control dependent extensions relevant potential relevant slice techniques select tests execute new assignment predicate statements omit may omit tests 
example statement print code execute added test executes modification revealing 
define variables statements variables defined select tests 
inclusiveness slicing techniques adversely affected programs contain multiple modifications 
programs contain multiple modifications slicing techniques incrementally considering changes 
suppose compound predicate statement 

added statement 
print added location reachable 
modification inserts statements suppose slicing technique test selection considers insertions order 
considering new predicate statement statements control dependent tests selected 
considering statement tests known execute uses tests selected 
considering statement tests known execute selected 
compound change tests reach may modification revealing 
slicing techniques select tests safe 
precision 
cases modifications involve addition new code slicing techniques select modification traversing tests 
restricting selected tests influence output potentially relevant relevant dynamic slices exclude different degrees tests modification traversing modification revealing 
programs contain structural changes extensions increase inclusiveness techniques cause selection non tests 
example consider procedures depicted 
suppose statements procedures replaced pair statements goto 
suppose statement new statement print inserted immediately extended slicing techniques select tests reach new print statement statement label statement contains variable computed new statement tests modification traversing 
depicts inclusiveness precision slicing techniques 
diagrams illustrate lack safety techniques leaving portions areas corresponding modification revealing tests unshaded 
techniques diagrams shade areas corresponding modification traversing tests non modification revealing signifying inclusion tests 
efficiency 
program modifications add assignment statements affect flow control slicing techniques perform preliminary phase regression testing 
case execution slice requires jt time modification select tests 
presence arbitrary modifications slicing techniques efficient 
handle additions assignment statements predicates techniques compute dynamic data control dependence information relevant test computations require jp time performed modifications complete arbitrary modifications techniques require jt jp time modification 
furthermore multiple modifications avoid loss precision safety code analyses may need repeated incrementally updated test traces collected modification considered 
recalculation techniques account cumulative effects modifications test paths slices 
worst recalculation traces may require running tests defeating purpose selective retest 
generality 
slicing techniques procedural language programs depend ability trace program execution calculate dependence information 
techniques effectiveness efficiency decrease cases programs contain multiple modifications modifications control structure 
techniques support interprocedural regression testing approach analyzing procedures program 
techniques require particular test suite design coverage requirements 
techniques require collection test trace information statement procedure level techniques require tools static dynamic dependence analysis 
dynamic slice method execution slice method approximate relevant slice method relevant slice method obsolete obsolete obsolete obsolete inclusiveness precision slicing techniques 
graph walk techniques rothermel harrold intraprocedural regression test selection technique builds control flow graphs cfgs collects traces tests associate tests cfg edges performs synchronous depth traversals graphs comparing nodes program statements associated nodes reached prefixes execution traces 
pair earlier versions technique control program system dependence graphs 
version technique control flow graphs 
versions achieve results terms inclusiveness precision nodes graphs respectively discovered statements associated lexically identical technique selects tests reached approach identifies tests reach code new modified tests reached code deleted technique selects tests modification traversing 
authors offer interprocedural version technique cfgs applied entire programs subsystems 
rothermel harrold versions techniques add data dependence information cfgs facilitate precise test selection 
inclusiveness 
graph walk techniques select modification traversing tests 
proper regression testing safe 
precision 
graph walk techniques precise arbitrary programs 
rothermel defines property cfgs called multiply visited node property 
rothermel proves exhibit multiply visited node property graph walk techniques select exactly tests modification traversing exhibit multiply visited node property graph walk techniques may select tests modification traversing procedures shown exemplify case multiply visited node property holds 
pair procedures graph walk techniques select non modification traversing tests 
empirical studies conducted graph walk techniques nontrivial programs cases multiply visited node property holds known programs property holds contrived purpose demonstrating property 
empirical results suggest practice graph walk techniques select non modification traversing tests 
graph walk techniques data dependence information increase precision test selection omitting modification traversing tests non modification revealing 
cluster identification basic improved graph walk techniques select tests modified procedures finer grain linear equation techniques precise techniques 
depicts inclusiveness precision graph walk techniques 
diagrams show safety precision graph walk techniques cases multiply visited node property holds hold respectively 
diagram shows safety precision improved versions graph walk techniques data dependence information 
safety techniques depicted presence shading areas corresponding modification revealing tests 
imprecision techniques illustrated shading areas corresponding modification revealing tests 
fact techniques select non modification traversing tests multiply visited node property holds illustrated shading outside circles diagrams shading omitted diagram depicts conjectured precision techniques practice 
shaded area non modification traversing tests area smaller corresponding area diagram reflecting greater precision graph walk techniques 
diagram right illustrates cfg version efficient earlier versions 
discussion evaluate cfg version technique 
control flow graphs respectively 
multiply visited node property predicate true graph walk technique walking visits node 
worst case practice obsolete obsolete obsolete inclusiveness precision graph walk techniques 
precision gains obtained improved versions techniques techniques omit tests modification traversing modification revealing 
efficiency 
graph walk techniques run time jt max jp jp 
node property hold basic graph walk techniques require data dependence information run time jt min jp jp 
techniques construct graphs collect test history information preliminary phase regression testing construct graphs traverse graphs critical phase 
techniques require prior computation correspondence locate changed modifications proceed presence significant changes avoid unnecessary processing 
generality 
graph walk techniques apply procedural languages generally control flow graphs dataflow information computed languages 
techniques handle types program modifications support intraprocedural interprocedural test selection 
techniques assumptions initial test suite design coverage criteria 
techniques require test trace information basic block level tools constructing control flow graphs advanced versions techniques require tools dataflow analysis 
modified entity technique chen rosenblum vo modified entity technique regression test selection technique detects modified code entities 
code entities defined executable portions code functions components storage locations 
technique selects tests associated changed entities 
authors implemented technique software tool called testtube performs obsolete inclusiveness precision modified entity technique 
regression test selection programs 
program entities kept database things facilitates comparison entities determine modifications occurred 
authors discuss applications technique selective retest nondeterministic systems test coverage measures may vary different test executions instrumentation may interfere test behavior 
inclusiveness 
prove believe identifying tests changed code entities modified entity technique identifies modification traversing tests 
modified entity technique safe proper regression testing 
precision 
modified function program modified entity technique selects tests execute tests may execute executing modified code modified entity technique selects non modification traversing tests 
example functions modified versions depicted figures functions called program technique selects tests execute functions tests non modification traversing 
modified entity technique may select tests execute modified clusters modified execution traces technique precise cluster identification cfg walk techniques 
believe set non modification traversing tests selected method equivalent set non modification traversing tests selected interprocedural linear equation technique 
depicts inclusiveness precision modified entity technique 
technique safe circles completely shaded 
technique selects non modification traversing tests areas outside circles shaded 
shaded area comparable size shaded area employed interprocedural linear equation techniques diagram 
efficiency 
modified entity technique efficient safe test selection technique available 
technique fully automatable runs worst case time proportional size test suite times number changed entities worst equivalent size practice expected 
technique runs time jt jp 
technique require max jp jp log max jp jp lexical comparison operation performed code entities database critical period establish entities modified 
experimental performance evaluations show practice comparison operation costly operations performed technique 
technique handles multiple modifications single application algorithms 
generality 
implemented modified entity technique applicable procedural languages generally 
technique handles forms code modifications 
technique specifically designed handle interprocedural intraprocedural testing 
technique requires database containing information code databases serve useful purposes 
technique assumption initial test suite design coverage criteria 
technique shows promise application nondeterministic programs 
summary table summarizes results evaluations regression test selection techniques 
techniques listed leftmost column columns summarize findings respect inclusiveness precision efficiency generality respectively techniques 
include separate rows linear equation technique summarize intraprocedural minimization form interprocedural form 
summarize incremental version dataflow techniques 
single rows summarize pdg techniques sdg techniques slicing techniques graph walk techniques 
columns summarize information technique applicable inclusiveness 
state technique safe 
technique safe list category categories modifications technique may omit modification revealing tests 
precision 
techniques precise 
find useful state techniques select non modification traversing tests select tests modified procedures selecting tests finer granularity 
know technique precise include information 
efficiency 
list worst case critical period running time technique 
information technique critical period running time practice available include 
list cost correspondence technique compute correspondence required 
techniques rely incremental editor provide information case generality reduced 
generality 
technique state intraprocedural interprocedural level class modifications handles mods criteria criteria requirements terms tool support requires 
appropriate list column class languages programs techniques apply techniques fully automatable find techniques fully automatable david rosenblum personal communication 
modification technique test selection process may automated 
find techniques apply procedural programs generally 
save space omit fields table 
save space abbreviations table inter interprocedural intra intraprocedural mods modifications mt modification traversing non mt non modification traversing framework evaluating regression test selection techniques classifies techniques terms inclusiveness precision efficiency generality 
illustrated application framework evaluate existing regression test selection techniques 
important contribution insight provides state current research regression test selection 
current research concerned evaluations indicate despite differences goals various techniques techniques may clearly compared understood framework employed 
framework researchers compare new techniques existing techniques help demonstrate significance contributions existing techniques 
framework identify strengths weaknesses various techniques help guide choice test selection techniques practical purposes 
example testing professional seeking safe test selection technique identify evaluations possible techniques serve purpose linear equation cluster identification modified entity graph walk techniques 
alternatively testing professional primarily concerned existing tests achieve coverage measure may seek technique measure safe technique 
equal importance suggests directions research regression test selection 
important direction experimental study 
techniques evaluated implemented fewer subject empirical studies 
framework able analytically evaluate fault detecting abilities efficiency existing techniques important pursue empirical evidence 
discuss important areas empirical study precision efficiency tradeoff 
graph walk techniques precise modified entity technique 
graph walk techniques gain precision increasing costs analysis 
similarly graph walk techniques data dependence information precise graph walk techniques information precision gain achieved increase analysis cost 
empirical studies help determine increased analysis costs outweigh gains increased precision 
technique inclusiveness precision efficiency generality linear unsafe selects non mt tests worst case exponential jp level intra equation categories practice unknown mods control flow minimization correspondence max jp jp criteria control dataflow intra requires segment traces linear equation solver linear safe proper selects non mt tests worst case exponential jp level inter equation regression selects tests practice unknown mods handles non testing modified correspondence max jp jp criteria control dataflow minimization procedures log max jp jp requires function traces inter linear equation solver symbolic safe selects non mt tests worst case exponential jp level intra inter execution deletions may terminate mods deletions practice unknown criteria partition correspondence max jp jp requires symbolic execution log max jp jp path safe selects non mt tests worst case exponential jp level intra analysis deletions practice unknown mods deletions additions additions correspondence required criteria path requires statement traces algebraic design dataflow safe selects non mt tests worst case jt jp level intra inter incremental categories modification mods dataflow affecting practice unknown criteria dataflow correspondence required requires basic block traces static incremental dataflow analysis tools program safe selects non mt tests worst case jt max jp jp level intra dependence deletions precise sdg jt max jp jp mods deletions graph technique practice unknown criteria pdg correspondence max jp jp requires statement traces control dependence slicing dataflow analysis tools system safe selects non mt tests worst case jt max jp jp level intra inter dependence deletions precise pdg jt max jp jp mods deletions graph technique practice unknown criteria pdg correspondence max jp jp requires statement traces control dependence slicing dataflow analysis tools safe unknown worst case jt jp level intra inter tion categories logical modification mods doesn handle minimization analysis test selection criteria automated 
requires statement traces practice unknown static dynamic control correspondence max jp jp data dependence analysis firewall safe proper selects non mt tests worst case jt max jp jp level inter regression selects tests practice efficient mods handles testing modified correspondence max jp jp criteria reliable procedures log max jp jp requires function traces cluster safe selects non mt tests worst case jt max jp jp level intra precise graph practice unknown mods handles cation walk technique correspondence required criteria requires statement traces cfgs control dependence slicing safe selects non mt tests worst case jt jp level intra modification mods doesn handle categories practice unknown criteria correspondence required requires statement traces static dynamic control data dependence analysis graph safe proper selects non mt tests worst case jt max jp jp level intra inter walk regression practice practice jt min jp jp mods handles testing precise safe dataflow information criteria technique correspondence required requires statement traces dataflow analysis optional modified safe proper selects non mt tests worst case jt jp level inter entity regression selects tests practice efficient mods handles testing modified correspondence max jp jp criteria procedures log max jp jp requires function traces precise graph code database walk cluster ident 
table summary framework evaluations regression test selection techniques 
fault detection abilities 
framework analytically evaluate test selection techniques terms fault detecting abilities 
shown safe techniques detect faults detectable techniques safe shown certain techniques safe proper regression testing 
determined impact practice safety fault detection 
empirical studies help determine safe interprocedural test selection technique graph walk technique offers sufficient improvements fault detection comparison efficient interprocedural test selection technique firewall technique 
interprocedural versus intraprocedural test selection 
test selection techniques intraprocedural 
preliminary experimental results suggest techniques may offer savings justify costs 
extensive empirical studies help determine level test selection performed 
minimization techniques 
minimization techniques take coverage extreme requiring selection single test modified affected component techniques significantly reduce number tests executed 
preliminary experimental results suggest minimization test suites may significant adverse impact ability detect regression errors 
additional empirical studies area useful 
important direction investigation selective retest tasks 
focused regression test selection problem problem selecting tests existing test suite 
selective retest techniques may concerned tasks 
simply reusing tests may provide adequate testing modified programs 
selective retest techniques address coverage identification problem problem locating components modified program retested judging additional tests required 
framework comparing test selection techniques extended facilitate comparisons techniques coverage identification 
second assumed availability technique identifying obsolete tests tests include tests obsolete due changes specifications 
framework extended facilitate comparisons specification selective retest techniques 
agrawal horgan london 
incremental regression testing 
proceedings conference software maintenance pages september 
bates horwitz 
incremental program testing program dependence graphs 
proceedings th acm symposium principles programming languages january 
cimitile de 
post maintenance testing path change analysis 
proceedings conference software maintenance pages october 
binkley 
semantic differencing reduce cost regression testing 
proceedings conference software maintenance pages november 
binkley 
reducing cost regression testing semantics guided test case selection 
proceedings conference software maintenance october 
brown hoffman 
application module regression testing 
nuclear instruments methods physics research section august 
chen rosenblum vo 
testtube system selective regression testing 
proceedings th international conference software engineering pages may 
crowder johnson padberg 
solving large scale zero linear programming problems 
operations research september 

computer aided module testing design environment 
proceedings conference software maintenance pages october 
fischer 
test case selection method validation software maintenance modifications 
proceedings compsac pages november 
fischer 
methodology retesting modified software 
proceedings national telecommunications conference pages november 
garey johnson 
computers intractability 
freeman new york 
gupta harrold soffa 
approach regression testing slicing 
proceedings conference software maintenance pages november 
harrold gupta soffa 
methodology controlling size test suite 
acm transactions software engineering methodology july 
harrold soffa 
incremental approach unit testing maintenance 
proceedings conference software maintenance pages october 
harrold soffa 
incremental data flow testing tool 
proceedings sixth international conference testing computer software may 
harrold soffa 
interprocedural data flow testing 
proceedings third testing analysis verification symposium pages december 
hartmann robson 
revalidation software maintenance phase 
proceedings conference software maintenance pages october 
hartmann robson 
retest development selective revalidation prototype environment software maintenance 
proceedings third hawaii international conference system sciences pages january 
hartmann robson 
techniques selective revalidation 
ieee software january 
hoffman 
case study module testing 
proceedings conference software maintenance pages october 
hoffman 
module test case generation 
proceedings third workshop software testing analysis verification pages december 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
laski 
identification program modifications applications software 
proceedings conference software maintenance pages november 
lee 
methodology test selection 
journal systems software september 
leung white 
insights regression testing 
proceedings conference software maintenance pages october 
leung white 
insights testing regression testing global variables 
journal software maintenance december 
leung white 
study integration testing software regression integration level 
proceedings conference software maintenance pages november 
leung white 
cost model compare regression test strategies 
proceedings conference software maintenance pages october 
lewis beck hartmann 
assay tool support regression testing 
esec 
nd european software engineering conference proceedings pages september 
ostrand weyuker 
dataflow analysis regression testing 
sixth annual pacific northwest software quality conference pages september 
rothermel 
efficient effective regression testing safe test selection techniques 
ph dissertation clemson university department computer science usually omitted may 
rothermel harrold 
safe efficient algorithm regression test selection 
proceedings conference software maintenance pages september 
rothermel harrold 
selecting regression tests object oriented software 
proceedings conference software maintenance pages september 
rothermel harrold 
selecting tests identifying test coverage requirements modified software 
proceedings international symposium software testing analysis issta august 
schach 
software engineering 
associates boston ma 
korel 
modification oriented software testing 
conference proceedings quality week pages 
korel 
logical modification oriented software testing 
proceedings twelfth international conference testing computer software june 
taha liu 
approach software fault localization revalidation incremental data flow analysis 
proceedings th annual international computer software applications conference pages september 
von mayrhauser walls 
domain regression testing 
proceedings conference software maintenance pages september 
white leung 
firewall concept control flow data flow regression integration testing 
proceedings conference software maintenance pages november 
white friedman 
test manager regression testing tool 
proceedings conference software maintenance pages september 
wong horgan london mathur 
effect test set minimization fault detection effectiveness 
th international conference software engineering pages april 
yang 
identifying syntactic differences programs 
software practice experience july 
yau 
method modified programs maintenance phase 
compsac eleventh annual international computer software applications conference pages october 
ziegler grasso 
ada real time closed loop integration regression test tool 
proceedings conference software maintenance pages october 

