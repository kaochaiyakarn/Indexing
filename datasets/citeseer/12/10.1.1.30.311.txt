encode encryption exploit nonces redundancy plaintexts ecient cryptography mihir bellare phillip rogaway dept computer science engineering university california san diego gilman drive la jolla ca usa mail mihir cs ucsd edu url www cse ucsd edu users mihir dept computer science engineering ii building shields avenue university california davis davis ca usa dept computer science faculty science chiang mai university thailand mail rogaway cs ucdavis edu url www cs ucdavis edu rogaway :10.1.1.30.311
investigate approach symmetric encryption rst encode message transform encoded message meaning apply permutation fk shared key provide conditions encoding functions cipher ensure resulting encryption scheme meets strong privacy 
semantic security authenticity goals 
encoding implemented simple way 
prepend counter append checksum viewed modeling existing redundancy entropy messages encode encryption provides way exploit structured message spaces achieve compact ciphertexts 
enciphering vs encrypting 
popular books cryptography describe encryption applying key indexed permutation fk plaintext obtaining ciphertext fk 
goal encryption privacy usually assumed community long recognized deterministic realization encryption possibly achieve strong security guarantees hope semantic security chosen plaintext attack 
example message encrypted twice adversary able detect 
point forward family permutations ffk called cipher 
applying functions fk enciphering encrypting 
applying deciphering decrypting 
enciphering method means approximating usual ways family random permutations 
hand encryption scheme means achieving privacy properties strong semantic security 
indicated enciphering encryption 
despite statement widespread belief enciphering message encrypting 
messages structured message space entropy enciphering job 
scienti basis belief 
investigate circumstances enciphering really encryption 
leads introduce encoding schemes way conceptualize happening structured messages 
describe encoding schemes relate enciphering 
encode encryption 
start cipher operates messages length 
words fk random looks random length preserving permutation 
encrypt rst encode string encoding extremely simple prepending counter appending bits doing 
encoding identity function 
demanded encoding method lose information decode recover recognize string encoding message 
encrypt message key encoded message fk yielding ciphertext fk 
decrypt ciphertext decipher nd decode get message indication encoding message 
call style encryption encode encryption 
popular way encrypt certainly natural paradigm 
results 
investigate properties encoding scheme enciphering scheme give rise security properties resulting encryption scheme 
suppose rst encoding scheme adds nonce usually counter random value 
nonce added message way 
needs collision probability chance encoded messages come small 
prove theorem enciphering encodings provides semantic security 
look encoding schemes result encoded messages redundancy 
means strings considered bad 
prove theorem resulting encryption scheme achieve message authenticity 
sender sent mac transmission 
interestingly theorem requires cipher strong pseudorandom permutation 
show theorem ordinary pseudorandom permutation won 
actual results quantitative 
show privacy authenticity guaranteed function easily calculated numbers associated encoding scheme function quanti ed security underlying cipher 
justifying old intuition 
level folklore enciphering strings employ nonces redundancy encryption 
security literature sees statements ect assume messages encrypted employ adequate redundancy avoid replay attacks including nonce messages encrypt 
results help formalize authors may mind statements meaningful true encryption means enciphering roles nonces redundancy formally de ned 
encoding step real 
applications encode encryption imagine encoding step part encrypting piece software encrypts encode rst encoded message 
example encryption engine take message prepend counter append checksum resulting string 
encode encryption interesting encoding decoding operations occur customary boundary encryption engine 
example encryption software may formatted ip packet payload message get decoding encryption software knows payload extract 
encoding decoding processes really occur albeit di erent piece code 
encoding step may exist purely conceptualization 
example messages supposed english language sentences encoding step regarded identity function space proper english language sentences decoding function takes string returns english indication english sentence 
probably decoding operation performed human 
case language encodings sense 
general encoding messages seen model messages enciphering arise 
model useful general approach trying equip unknown message space distribution 
example distribution messages handle ideas inserting counter message quite arti cial try equip utterances distribution 
encoding decoding model lets discuss natural simple way relevant properties messages look 
encode 
encode encryption provide short ciphertexts high degree independence conventions 
provide convenient migration path legacy protocols 
explain 
various application particularly networking packet format de ned packet format includes redundancy nonces elds cryptographic purposes elds iv mac 
suppose need arises add privacy authenticity features 
time real world constraint grow re de ne packet format 
encode probably 
packets known repeat rarely packets contain sequence number semantic security automatically guaranteed just applying cipher 
packet formats include redundancy typically reason simplify parsing may need add separate mac enciphering time strong pseudorandom permutation 
irrelevant nonce redundancy appeared packet privacy authenticity retained protocols changes packet formats subsequently change details 
result encode encryption leave packet sizes ciphers understood length preserving leave packets looking identical deciphering way looked 
allows modular software changes minimal code disruption 
code way encrypt doesn know care sequence number say elds values elds take 
indi erence robust simple software easier migration path adding security features 
constructing variable input length ciphers 
encrypt messages encode approach need strings may long short lengths may vary enciphering 
cipher look random length preserving permutation may sound just block cipher quite di erent domain includes strings di erent lengths 
construction possible building 
notion authenticity encryption schemes 
note nal contribution notion authenticity de ned section 
usual way message authenticity de ned assumes message accompanied tag message authentication code adversary wants produce hitherto unseen message valid tag 
setting apply messages authenticated visible 
new setting adversary goal get receiver accept authentic string possibly unknown meaning adversary witnessed necessitates new notion measure security symmetric encryption scheme 
de nitions privacy symmetric encryption schemes suggesting notion authenticity encryption scheme 
consider symmetric encryption scheme decryption algorithm allowed reject ciphertexts indicate 
take setting adversary gets see oracle ciphertexts messages choice encrypted key say adversary wins produce valid ciphertext meaning decryption function reject output encryption oracle 
early submitted versions date december 
de nitions authenticity symmetric encryption schemes appeared 
refer reader comprehensive treatment di erent notions authenticity symmetric encryption schemes relations notions privacy 
de nitions provide de nitions prfs arbitrary message spaces de nitions privacy authenticity symmetric encryption schemes 
history comparisons 
basic de nition prf pseudorandom function sets domain range keyspace strings xed length de nes security asymptotically 
adopt concrete versions de nitions order model block cipher construction allow domain call message space containing strings di erent lengths 
notion prp pseudorandom permutation follows di ers measure distinguishability versus random permutation random function important concrete security considered 
notion strong pseudorandom permutation style extended regard domains 
de nition privacy symmetric encryption schemes 
notation conventions 
message space subset implies length exists ecient say linear time algorithm decide membership 
ciphertext space subset key space set probability measure set 
writing means choose random probability measure 
notation jx denotes length string number elements set 
ciphers 
key space message space ciphertext space 
family functions map fk 
fk 
call instance denote operation picking function random 
shorthand fk assume jf jm depends jm call length function family 
cipher family functions fk 
case denotes inverse fk 
cipher length preserving fk jm simplicity ciphers assumed length preserving 
block cipher cipher domain range number called block length 
rand denote family functions 
satisfy jf jm random function rand determined follows random string length jm 
perm denote cipher consisting length preserving functions random function perm determined follows number contains strings length random permutation de ne jm prfs 
distinguisher possibly probabilistic algorithm access oracle 
function family length function adv prf pr fk 
pr rand 
denote advantage distinguishing random function 
adv prp pr fk 
pr perm denote advantage distinguishing random permutation 
de ne adv prf max prf adv prp max prp maximum taken adversaries having time complexity asking oracle queries queries totaling bits 
time complexity refers execution time experiment underlying de nition advantage plus size description adversary 
de ne give distinguisher oracle function inverse 
prp length function 
adv pr fk 
pr perm denote advantage distinguishing random permutation 
de ne adv max maximum taken adversaries having time complexity asking oracle queries queries totaling bits 
distinguisher value oracle point oracle responds distinguished point :10.1.1.30.311
assume simple algorithm decide membership fact point adversary inquiries 
encapsulation schemes 
fix key space message space ciphertext space encapsulation scheme se triple algorithms 
probabilistic key generation algorithm produces key write encryption algorithm probabilistic stateful 
takes key message returns ciphertext ek probabilistic coins tosses taken anew invocation 
stateful internal state encryption algorithm updates invocation securely maintained invocations 
state typically counter incremented message dependent amount 
value returned stateful encryption scheme state indicates message sent example messages sent :10.1.1.30.311
algorithm takes computes dk string distinguished symbol 
return value indicate regarded 
call valid dk call invalid dk 
permit applying ek results return value 
likewise applying dk permitted gives return value 
require ek dk think goal se privacy combination privacy message authenticity typically call encryption scheme :10.1.1.30.311
think goal se authenticating messages call authentication scheme 
emphasize syntactic distinction encryption scheme authentication scheme formalization encapsulation schemes 
privacy 
formulations privacy symmetric encryption scheme chosen plaintext attack provided compared terms concrete security 
notions real random security 
idea adversary distinguish encryption text encryption equal length string garbage 
formalization se encryption scheme adversary encryption oracle 
encryption scheme probabilistic fresh random choices query 
encryption scheme stateful state properly initialized adjusted query 
de ne adv priv se pr ek 
pr ek 
rst game oracle message returns encryption key second game oracle message ignores record length returns encryption random message length advantage measure adversary ability tell worlds apart 
adv priv se max priv maximum adversaries time complexity ask oracle queries queries total bits 
authenticity 
consider parties sharing key sending messages encapsulation scheme se 
interested authenticity receiver wants con dent received ciphertext underlying message really originate sender 
formalize adversary way generate authenticated messages choice 


win computes new string fc deemed authentic receiver :10.1.1.30.311
authenticity context encapsulation scheme general concept message authentication code mac 
mac explicit particular mechanism attachment tag transmission 
tag computed key created sender checked receiver 
encapsulation scheme may mac may consideration authenticity scheme assumptions presence type mechanism 
deeper di erence mac general authentication scheme 
formalizing security mac adversary number queries mac generation oracle query mapping message tag adversary come new message tag receiver deem authentic 
particular adversary know message forged insofar adversary outputs contrast adversary attacking authentication scheme general sense de ning wins know message forged 
required message underlying receiver recover message space indication bogus 
formally se authentication scheme adversary oracle access interacting oracle adversary outputs string say new response earlier oracle query asked adversary said successful new valid measure probability adv auth se pr ek 
new dk quality se authenticating messages measured function adv auth se max auth maximum adversaries time complexity oracle calls totaling jcj bits length output :10.1.1.30.311
simplicity assume adversary attacking authenticity se output string new 
notion called integrity ciphertexts provide comprehensive picture relates notions privacy authenticity encapsulation schemes 
particular show integrity ciphertexts plus privacy chosen plaintext attack imply privacy chosen ciphertext attack 
encoding schemes syntax 
fix message spaces encoding scheme pair algorithms encode encode decode describe 
algorithm encode probabilistic stateful decode 
assume encode probabilistic stateful 
time encode called input algorithm ips coins returns string encode assume string coins jm function length function encoding scheme 
algorithm decode takes input returns binary string distinguished symbol 
decode binary string say valid say invalid decode 
demand decode encode allow encode decode string ones outside try encode string result distinguished value :10.1.1.30.311
try decode string result distinguished value :10.1.1.30.311
establish convention encode decode returns 
simplicity theorem statements assume encode decode eciently computable say linear time 
rare collision encodings 
encode encode decode encoding scheme length function 
function 
say encode colliding number computationally unbounded adversary asks queries probability queries receive valid response 
pr responses encode 
shall say hm collide pair strings di erent :10.1.1.30.311
reader may prefer think 
typically adversary best strategy trying produce collision implies encodings valid di erent :10.1.1.30.311
example 
encoding scheme prepend random bits works follows 
message space function encode takes input outputs sequence random bits 
function decode takes input behaves follows 
bits decode outputs rst bits bits decode outputs 
prepend random bits colliding denotes probability collision experiment throwing balls independently random bins 
collision free encodings 
algorithm encode stateful means maintains state invocations 
initial value state xed constant typically limit number times encode may 
number invocations encode return inquiry require messages internal states encode returns binary string decode emphasize decoding stateless 
stateful encoding schemes interest encoding scheme collision free meaning colliding language 
note getting values count collision 
example 
example 
encoding scheme prepend bit counter works follows :10.1.1.30.311
message space counter ctr initialized 
th message encoded follows 
encoding :10.1.1.30.311
encoding hii hii number written bit binary string :10.1.1.30.311
function decode takes input behaves follows 
jm decode returns :10.1.1.30.311
returns having rst bits :10.1.1.30.311
clearly prepend bit counter collision free counter guarantees encodings collide :10.1.1.30.311
sparse encodings 
encode encode decode encoding scheme real number 
say encoding scheme encode dense pr decode message length fraction strings length valid decode strings 
rest invalid encodings decode 
example 
encoding scheme prepend zeros works follows 
de ne encode de ne decode stripping away rst bits assuming bits set decode 
prepend zeros dense string valid starts zeros probability probability random string valid exactly length bits probability length bits 
example 
message space odd parity adjusted ascii strings length bytes 
means message sequence bytes 
byte having low bits arbitrary high bit necessary number bits odd 
encoding scheme odd parity de ned follows 
function encode identity function 
function decode checks bit length input divisible input bytes byte odd parity 
conditions satis ed decode returns input 
returns 
odd parity dense random string valid probability probability random byte string valid input byte string 
encode decode fig 

scheme encode encrypting left hand side decrypting right hand side encode paradigm 
plaintext ciphertext cipher encoding scheme encode encode decode 
enciphering encoded messages encode encode decode encoding scheme ffk cipher key space de ne encapsulation scheme encode chooses random key outputs 
ek sets encode returns computes fk returns 
algorithm stateful encode encode stateful initial state initial state mandated encode maintains state needed encoding scheme 
dk returns computes sets decode returns pictorial representation see :10.1.1.30.311
privacy rare collision free encodings 
show encryption scheme encode private encoding scheme encode rare collisions secure cipher sense prp 
theorem formal quantitative 
theorem 
encode encode decode encoding scheme ffk cipher key space suppose encode colliding 
encode security adv priv adv prf 
proof 
adversary attacking privacy encode 
running time number queries length queries put plus length output 
goal upper bound adv priv 
introduce couple algorithms associated probabilities 
algorithm distinguisher oracle permutation perm 
runs oracle query distinguisher computes encode 
returns answer query 
terminates outputs outputs 
algorithm collision nding adversary encode 
oracle encode 
picks permutation perm random 
simulates permutation 
di erence technically immaterial running time restricted 
runs oracle query algorithm computes encode 
returns answer query 
terminates de ne probabilities pr ek 
pr ek 
pr fk 
pr perm pr responses encode 
note adv priv upper bound claims :10.1.1.30.311
second proofs claims omitted lack space full version :10.1.1.30.311
claims adv priv adv prp concludes proof theorem 
authenticity sparse encodings 
show encode authenticated encryption scheme encoding encode adds adequate redundancy strong prp 
theorem formal quantitative 
result requires prp strong previous result subsequently show extra requirement necessary 
theorem 
encode encode decode encoding scheme ffk cipher key space suppose encode dense encode security adv auth adv 
proof 
adversary attacking authenticity encode 
running time number queries total length queries put nal output 
goal upper bound adv auth 
introduce algorithm probabilities 
algorithm distinguisher oracles perm permutation 
runs oracle query distinguisher computes encode 
returns answer query 
terminates outputs ciphertext supposed forgery 
algorithm outputs computes time uses oracle :10.1.1.30.311
algorithm computes decode 
outputs outputs 
de ne probabilities pr ek 
new dk pr fk :10.1.1.30.311
pr perm note adv auth upper bound claims 
second 
proofs claims omitted lack space full version :10.1.1.30.311
claims adv auth adv prp concludes proof theorem 
discuss necessity extra requirement prp strong 
indicates requirement authenticity hold 
bounds proof informal theorem statement easily adapted give precise understandable quantitative assertion 
proof :10.1.1.30.311
theorem 
exists secure prp exists secure prp strong prp dense encoding scheme encode scheme encode achieve authenticity 
acknowledgments mihir bellare supported part nsf career award ccr packard foundation fellowship science engineering :10.1.1.30.311
phillip rogaway supported part nsf career award ccr micro funded rsa data security :10.1.1.30.311

bellare desai rogaway concrete security treatment symmetric encryption 
proceedings th symposium foundations computer science ieee 

bellare kilian rogaway security cipher block chaining 
advances cryptology crypto lecture notes computer science vol 
desmedt ed springer verlag 

bellare krovetz rogaway luby backwards increasing security making block ciphers non invertible 
advances cryptology eurocrypt lecture notes computer science vol 
nyberg ed springer verlag 

bellare authenticated encryption relations notions analysis generic composition paradigm 
advances cryptology asiacrypt lecture notes computer science okamoto ed springer verlag 

bellare rogaway construction variable input length ciphers 
fast software encryption lecture notes computer science vol 
knudsen ed springer verlag :10.1.1.30.311
:10.1.1.30.311
bellare rogaway encode encryption exploit nonces redundancy plaintexts ecient cryptography 
full version available www edu users mihir 

dolev dwork naor 
non malleable cryptography proceedings rd annual symposium theory computing acm 
appear siam computing 

goldreich goldwasser micali construct random functions 
journal acm vol 
:10.1.1.30.311

goldwasser micali probabilistic encryption 
journal computer system sciences april 

katz yung unforgeable encryption adaptively secure modes operation 
fast software encryption lecture notes computer science schneier ed springer verlag 

luby rackoff construct pseudorandom permutations pseudorandom functions 
siam computing vol 
april 

naor reingold construction pseudo random permutations luby revisited 
cryptology vol 
pp 
:10.1.1.30.311

rackoff simon non interactive zero knowledge proof knowledge chosen ciphertext attack 
advances cryptology crypto lecture notes computer science vol 
feigenbaum ed springer verlag :10.1.1.30.311

rivest encryption package transform 
fast software encryption lecture notes computer science vol 
biham ed springer verlag :10.1.1.30.311

shannon communication theory secrecy systems 
bell systems technical journal :10.1.1.30.311
