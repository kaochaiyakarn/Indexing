computational logic multi agent systems roadmap sadri francesca toni department computing imperial college queen gate london sw bz uk ffs ftg ic ac uk www lp doc ic ac uk ffs ftg december agent computing emerging computing paradigm proved extremely successful dealing number problems arising new technological developments applications 
report role computational logic modeling intelligent agents analysing existing agent theories agent oriented programming languages applications identifying challenges promising directions research 
past years eld agent computing emerged greatly expanded due new technological developments faster cheaper computers fast reliable interconnections emergence world wide web 
developments time opened new application areas electronic commerce posed new problems integrating great quantities information building complex software embedding legacy code 
establishment new eld agentbased computing con rmed emergence number regular specialised workshops conferences journals accompanied creation european network excellence agentlink international organisation setting standards eld fipa foundation intelligent physical agents 
www agentlink org www fipa org universally accepted de nition agents facilitate discussion agreement researchers take agents computing artifacts hardware software exhibit properties autonomy agents ability act direct intervention agents including humans 
reactivity agents situated environment perceive sensors act reaction stimuli 
agents revise beliefs reaction new input 
proactivity agents capable exhibiting intelligent problemsolving behaviour example plan activities order achieve short long term goals 
multi agent system collection agents addition properties exhibits social behaviour agents aware interact modify behaviour response 
order facilitate social behaviour agents capabilities communication set low high level constructs protocols means addressing directing communication 
cooperation agents joint individual goals 
need ability negotiate agents facilitate achievement goals construct joint plans achieve joint goals 
belief revision context additional sources information provided agents 
area agent computing orthogonal number traditional computing areas software engineering distributed computing humancomputer interaction telecommunication arti cial intelligence 
arti cial intelligence number approaches proposed representing agents logic formalism notably bdi approach agent 
bdi approach agent characterised beliefs agents interacts environment agents reside desires objectives aims intentions plans commits 
beliefs desires intentions represented modal operators possible world semantics 
agent agent characterised beliefs commitments 
commitments production rules refer non consecutive states world agent operates 
bdi agent approaches logic simply tool representing agents rely non logic execution model 
causes wide gap theory practice approaches 
years number logic programming proposals agents put forward :10.1.1.54.7045:10.1.1.27.4100
proposals form computational logic knowledge representation computational tool necessarily implementation tool 
past developments computational logic relevant crucial modeling understanding agents 
example agents need reason changes environment bring desired changes 
performance enhanced ability learn 
may function environment complete information may choose number alternative courses actions 
need modify beliefs dynamically perform integrity checking doing 
agents multi agent setting cooperating may need perform con ict resolution possibly arguing 
developments computational logic promising contributions include developments temporal reasoning defeasible reasoning abductive reasoning inductive reasoning reasoning actions planning reasoning priorities preferences belief revision argumentation 
comprehensive survey agent technology applications 
complements survey reports approaches modeling single agents multi agent systems computational logic theoretical applicative perspective 
best knowledge report rst attempt provide comprehensive survey computational logic agents multi agent systems discuss potential challenges promising rapidly emerging eld 
report organised follows 
section survey existing computational logic proposals agents multi agent systems 
section describes research challenges section outlines opportunities 
section concludes 
state art section survey existing proposals agent systems computational logic techniques 
section refer formalisms giving full descriptions extended logic programming abductive logic programming integrity constraints various formalisms reasoning actions time event calculus language situation calculus golog 
event calculus logic programming formalism 
original situation calculus understood computational logic terms number logic programming formalisations published 
golog formalised second order logic implemented prolog 
remainder section organised follows 
subsection analyse number di erent approaches viewpoint knowledge representation agents rely subsection architecture employ govern behaviour agents subsection features exhibit support multi agent systems subsection 
subsection describe main features existing languages programming agents multi agent systems 
subsection report applications implementations existing tools 
theory knowledge representation analyse number existing approaches view point representation beliefs desires goals intentions 
borrow ontology beliefs desires intentions bdi architecture borrowing speci representation language semantics 
analyse underlying computational mechanisms adopted various approaches obtain reactivity perform planning 
planning amounts proactive behaviour 
general plan set partially totally ordered actions planning deliberative process generating set actions achieve goals 
papers refer similar logical accounts planning 
kowalski sadri employ de nitions integrity constraints observations represent beliefs agents 
de nitions extensions usual clark completion logic programs negation failure 
integrity constraints implications 
observations conjunctions literals 
integrity constraints represent uniformly condition action rules commitment rules deontic modalities obligations prohibitions goals 
goals properties hold 
example de nition represent belief agent agent object buy steal way 
integrity constraints represent prohibition agents buy object obligation time agent buys television uk get tv licence condition action rule agent stealing object hears police door agent run away 
goal television possible plan achieving goal buy television get tv licence 
note informal description simpli cation domain omit representation time 
knowledge representation de nitions integrity constraints suciently general allow incorporation di erent temporal reasoning theories example event calculus extension incorporating macro events spirit golog situation calculus plan libraries :10.1.1.27.4100
reasoning engine underlying agent combines backward reasoning de nitions unfolding goals subgoals forward reasoning integrity constraints observations manner abductive proof procedures 
planning reactivity achieved reasoning backwards forwards respectively 
observation explained explanations conjunction beliefs 
kowalski sadri agents reactive senses 
recognise need replanning light new observations 
dynamically generate new goals activation integrity constraints characterise norms behaviour 
agents dynamically generated goals initial goals 
remainder section refer reactivity senses replan dynamic goals respectively 
example agent observes money example receiving bank statement earlier plan having tv buying invalidated agent replan 
reactivity rst sense described replan 
remaining plan steal tv 
suppose agent executes plan observes presence police 
rule generates new goal running away 
illustrates reactivity second sense dynamic goals 
shanahan represents beliefs agents formulation event calculus semantics circumscription 
formulation event calculus includes compound primitive actions 
example consider domain rooms connected doors 
connection represented set ground facts form door connects rooms 
primitive action go door 
compound actions de ned terms primitive ones example compound action go room de ned terms primitive action go door connecting room adjacent 
formulation event calculus allows hierarchical planning turn facilitates planning progression order 
hierarchical planning complete plan generated action plan needs fully decomposed terms primitive actions 
progression planner generates earlier actions plan rst 
advantages progression planner compared regression planner rst interrupted rst actions generated partially constructed plan primitive executed immediately 
case regression planner 
similarly shanahan agents augment beliefs means observations environment explained 
agents reactive rst sense replan 
baral gelfond extended logic programming implement modi cation language beliefs agents expressed theories language history past observations :10.1.1.27.4100
agents goals properties hold 
logic program proactively reduce goals plans 
agents reactive rst sense replan 
observations environment directly added knowledge base explanation triggers generating actions 
language basis mobile robot baral 
addition background theory actions preconditions ects baral formalise collection production rule type sentences called control rules ect allow reactivity agents second sense dynamic goals 
pereira represent beliefs mental states founded model extended logic program structured components extended logic programming formulation event calculus allowing explicit negation reason time actions set logic programming rules integrity constraints giving relationships agents attitudes form meta predicates bel goal int characterising agents beliefs desires intentions respectively set logic programming rules describing transfer beliefs intentions agents assimilation new information 
example specify naive agent accepts new information agent believes sincere 
contrast cautious agent accepts new information agent believes sincere provided new information contradict beliefs 
integrity constraints enforce various characteristics example property explicit negation hold time agent believe property negation agent contradictory goals 
observations past events 
agents reactive sense revise beliefs response observations 
vivid agents characterised beliefs extended logic programming form reaction rules generalising event condition action rules active databases action rules similar reaction rules lacking triggering event premises 
vivid agents goals 
reaction rules encode reactive communicative behaviour agent action rules encode proactive behaviour generate plans achieve goals 
example telecommunication scenario vivid agent hold beliefs base transceiver station normally sends live signals base station failure case live signal sent 
automated loading dock application agents load unload trucks agent reaction rules agent receives message agent agent got hold box loaded agent sends message back acknowledging receipt message 
note reaction rule allows avoid overlapping agents 
setting agent hold action rule position wants head north step nding di erent position closer objective 
impact system developed sponsorship darpa defence advanced research projects agency consortium collaborators including university maryland university universitaet koblenz landau universit di milano technische universitaet wien army research laboratory 
proposes agents beliefs represented agent programs style logic programming integrity constraints action base describing actions individual agents perform 
rules agent programs generalise rules including deontic modalities indicate actions permitted forbidden obliged 
example agent program specify tank obliged attack tank tank obliged proceed route blocked tank belongs enemy 
integrity constraints approaches specify situations arise actions performed concurrently example speed tank exceed maximum speed allowed di erent planes route concurrently 
alternative sets actions generated reaction messages agent programs 
di erent criteria characterising alternative sets actions computational complexity examined 
extensions approach incorporate temporal probabilistic agent reasoning chapter chapter :10.1.1.27.4100
interrap uses version event calculus reason time actions incorporates hierarchical planning 
structures beliefs components world model corresponding history agent actions mental model corresponding event calculus theory social model providing beliefs agents interact 
reasoning engine abductive proof procedure similar 
interleaves planning execution partially constructed plans 
apl combination imperative logic programming 
agents apl entities beliefs goals plan rules 
beliefs form sentences logic language full rst order logic logic programming 
goals imperative programs built primitive goals sequences goals way similar golog 
plan rules logic www cs umd edu projects impact programming style guarded rules primitive composite goals body 
agent architectures common feature existing agent architectures explicit implicit presence cycle terms described act 
kowalski sadri adopt resource bounded cycle resource limit parameter determined implementation terms inference steps absolute time 
thinking component consists explaining observations needed generating actions reaction observations planning achieving goals agent 
architecture independent planning algorithm underlying temporal action theory 
implementation hierarchical progression planner event calculus :10.1.1.27.4100
adopts event calculus formulation macro actions inspired 
agent cycle reasoning interrupted accept inputs observations generate outputs actions 
outputs actions generated response inputs received iteration cycle actions generated reactively proactively earlier iterations 
shanahan adopts sense plan act cycle 
sense plan phases iteration cycle resource bounded terms resolution steps 
baral gelfond adopt explicit agent cycle form goal plan execute rst action plan :10.1.1.27.4100
cycle third step cycle complete plan generated selected goal 
iterations cycle observation may invalidate preconditions actions plan case replanning needed 
impact system adopts similar cycle form receive messages nd action execute execute selected action record result 
cycle resource bounded reasoning takes place completed single iteration agent cycle 
agents explicit goals planning conventional sense 
step cycle nds action executed reasons agent program integrity constraints 
approach described length agent built top arbitrary software may legacy code 
special mechanism code calls bridging actual data structures software representation logical atoms framework 
impact provides new theoretical foundation working system building heterogeneous database techniques 
vivid agents run perception reaction cycle planning activity concurrently 
cycle receives incoming messages representing perceptions observations communication events generates reactions dictated set reaction rules 
reactions may depend agent beliefs may update 
planning component consists planner action component plan execution 
planner uses copy beliefs update beliefs 
remaining approaches implicit explicit cycle 
interrap layered architecture consisting layers lowest behaviour layer dealing agent reactivity middle local planning layer dealing planning top social planning layer dealing multi agent interaction 
layer associated knowledge base described earlier 
layers involve planning scheduling processes 
ow control behaviour agent emerges interaction individual layers 
model provides basic protocols ow control 
upward activation request layer competent deal situation sends request layer 
result processing layer reported back original layer 

downward commitment posting planning scheduling processes di erent layers coordinate activity communicating commitments 
allows local planning layer take account partial plans devised social planning layer course negotiating joint plan 
pereira approach cycle implicit 
agents explicit goals plan event calculus theory action time 
agent mental state updated observation 
approaches planning component concept intention bdi sense choice plan alternatives implicit explicit 
multi agent systems section consider features approaches previously described speci cally appropriate multi agent systems applications 
features include communication languages protocols capability representing reasoning agents beliefs 
dell acqua sadri toni extend language communication actions tell ask additional abducible actions meta level predicates beliefs :10.1.1.27.4100
model allows asynchronous communication 
illustrate extended language specifying updates agent beliefs communication agents 
authors show integrity constraints language proposed model communication protocols kind proposed fipa :10.1.1.27.4100
instance examples protocols agent asked question friendly agent agent nd answer tell answer agent agent asked question neutral agent agent nd answer units time tell answer soon nd answer units time reply apology 
dell acqua pereira propose combination agents kowalski sadri dynamic logic programming :10.1.1.27.4100
resulting framework agents plan react change knowledge bases goals attempt change knowledge bases goals 
dynamic logic programming gives declarative procedural semantics evolution knowledge bases state state 
impact approach approach pereira agents may hold beliefs agents 
impact approach agents exchange messages 
agents extended logic programs specify exchange beliefs intentions agents explicitly communication 
impact provides added security unauthorised updates 
social planning layer interrap involves communication reasoning agents beliefs 
extend single agent language apl communication primitives represent multi agent systems 
new primitives partitioned sets consisting tell ask consisting req er 
semantics set new primitives deduction abduction respectively 
deduction derive information received messages abduction obtain proposals reply requests 
communication primitives synchronous sender receiver participate time 
speech act theory semantics concerned mental states speakers 
agent tells necessarily believe way receiving agent deals message speci ed semantics 
prototype developed year project including consortium collaborators industry ibm boeing baan trw universities university maryland university michigan new york university university north carolina university florida 
prototype emerges experience developing industrial applications identi es rules general useful applications multi agent electronic commerce 
collaborators identi ed logic programs particular core declarative knowledge representation language major advantages compared rule approaches compared non rule programming approaches 
communicating logic programs multiple agents raises challenges 
translation needed heterogeneous rule systems 
involves syntactic parsing deep declarative semantics 
second facilities con ict handling needed merging updating rule sets example agent imports rules agents multiple business domain experts specify maintain rule sets 
incorporates con ict handling inter agent communication facilities complement variety existing rule execution engines 
particular adopts prioritised handling con icts courteous logic programming 
form prioritised logic programming tractably compiled preprocessor semantically equivalent ordinary logic programming 
agent communication includes translations rules facts common knowledge sharing interlingua xml called business rules markup language 
robertson develop method contract negotiation agents contracts represented logic programs change dynamically result negotiation agreement parties involved reached 
revised logic programs generated means argumentation techniques adapted developed 
poole proposes di erent complementary approach multiagent systems 
specify beliefs goals individual agents 
approach agent owns set alternatives set possible actions 
multi agent system consists nite set single agents 
special agent modelling environment called nature poole associated set alternative sets actions 
alternative owned nature probability distribution actions alternative 
probability distributions give measure actions chosen environment 
logic program negation failure abduction unde ned abducibles atomic actions owned agents 
logic program causal relationships actions states resulting agents performing actions assignment quantitative utilities payo states 
state corresponds unique canonical model logic program extended set selected actions 
poole adopts conventional quantitative decision theoretic techniques infer strategies choice actions individual agents 
pure stochastic strategy agent multi agent system utility individual agent computed means decision theoretic techniques 
example multi agent system consist goal keeper environment 
kick ball left right goal keeper jump left right order ball 
time front goal keeper decide direction kick ball goal keeper decide direction jump 
logic program specify agents actions lead world goal scored utility world high goal keeper low 
probabilities ctitious actions environment express chances goal scored quite high goal keeper jumps direction kicks exactly direction 
provide logic programming framework developing multi agent systems agents equipped sets facts de ning state sets rules specifying behaviour 
agents implemented prolog language enriched primitives updates communication 
agent oriented logic programming languages section illustrate proposed logic programming languages multi agent systems applications 
languages extend prolog exhibiting features multi threading thread thought process multiple threads share execution space inter thread communication condition action reaction rules code mobility computer network 
qu prolog qu prolog logic programming language extension prolog primarily intended implementation interactive theorem provers 
suitable development distributed arti cial intelligence applications interacting agents 
contains features expected standard prolog data base manipulation meta level predicates 
addition latest version version ers multi threading inter thread communication facilities 
qu prolog process ability launch threads providing concurrency execution 
agent beliefs characterised dynamic database accessed updated agent threads 
dynamic database provides blackboard mechanism inter thread communication 
agent setting multi threading facility exploited example perform belief revision incorporating component constantly monitors updates added agent beliefs agents background component derives asserts interesting new consequences updates 
multi threading facility allows concurrent execution queries agent database 
threads explicitly communicate sending messages prolog terms 
messages sent recipient receive information message originated reply sent 
threads equipped sets reaction rules specifying threads react messages receive 
threads execute reaction rules repeatedly 
reaction rules take form message choice message pattern action conjunction message pattern action conjunction message pattern action conjunction 
communication take place threads executing processes machines 
aspect communications machines exploits power computer network 
java inference engine networked interactor commercial multi threaded logic programming language integrating prolog knowledge processing components java objects distributed applications networked client server applications applets internet 
coordination threads achieved blackboards local threads synchronisation term uni cation 
threads computation perform mobile 
equipped high level communication primitives 
aims convenient development platform distributed arti cial intelligence applications general building intelligent autonomous agent applications particular 
example develop stock market simulator user programmable intelligent agents 
connection simulator real world internet stock trade services development 
possible applications envisaged assistance customers intelligent appliances web tv mobile cell phones car computers 
multi threading networking model ported 
ciao prolog ciao prolog public domain constraint logic programming system subsuming iso prolog 
number useful features implementation agent software 
ciao prolog supports threads shared database atomic updates objects high level remote inter process communication including interfaces local remote databases www access 
ciao module package system possible add syntactic semantic extensions language structured way traditional prolog systems done ecting parts language 
ciao includes large set libraries 
additionally ciao prolog generates executables compilation bytecode allows movement code dynamically platforms 
ciao prolog allows goals launched means high level primitives separate threads 
threads communicate synchronise prolog database shared threads 
threads accessing shared fact optionally wait failing exist 
example code concurrent current temp 
monitor temp read temp current temp temp 
read temp read temp device temp assert current temp temp 
launch concurrent thread predicate read temp primitive wait concurrent predicate current temp exist read temp accesses possibly external source temperature measures asserts concurrent fact stating read temperature 
primitives available extension conjunction placement operator generates handle concurrent goal executed remote machine 
basic primitives building blocks model variety knowledge representation paradigms architectural models 
condition action rules implemented ciao language extension capabilities language syntax packages 
specify reaction programs monotonic updates database 
ciao prolog supports objects having state represented set private facts accessible outside object 
objects fully integrated concurrent distributed primitives objects execute thread distributed fashion 
objects share code objects class share set internal facts model private state beliefs 
facts concurrently atomically updated accessed 
ciao prolog allows special kind object called active viewed network wide servers methods 
active object launched possibly remotely daemon answers requests method invocations receives 
active objects implement distributed knowledge bases blackboards updates global facts automatically available remote agents 
eel eel uses event approach process communication limited model communication allows synchronous point point communication :10.1.1.27.4100
concepts sending receiving messages relies message uni cation method exchanging information concurrent processes 
syntax similar prolog shares prolog operational semantics special reserved predicates deal synchronisation communication 
programming language extending prolog means features modules called cells inheritance multi threading thread communication shared memory called cell variables allowing synchronisation threads partially speci ed terms allow determine structure modules run time 
equipped built window interface network interface distributed multi processing environment 
threads execute logic program environment set modules 
modules seen fragments logic programs 
inheritance overriding modules apply 
give dynamic version brooks subsumption architecture symbol manipulation allowed permit communication agents dynamic recon guration achieved see 
dynamic subsumption architecture implement football playing agents robocup environment 
implementation applications section brie describe implementation architectures systems surveyed earlier describe applications 
kowalski sadri architecture implemented prolog java voyager tested number applications :10.1.1.27.4100
applications particularly noteworthy distributed information integration agents equipped knowledge allows act mediators integrate information sources answer user queries ectively handle heterogeneity di erent sources facilitate resolution con icts arise 
ci etl go jp collective management information networks www agents employed check enforce structural properties networks dangling links properties content nodes network 
learning agents example learn preconditions actions 
approach shanahan implemented prolog tested navigation problems khepera robot 
robot proximity sensors wheels move environment obstructions example oce environment 
architecture allows robot sense environment plan moves getting execute moves replan presence newly observed obstructions 
architecture baral gelfond implemented prolog envisaged application shuttle control :10.1.1.27.4100
supporting architecture mobile robots competing aaai robot competitions 
rst competition aaai robot contest robots required navigate way round oce environment topological map hitting obstacles 
placed third 
second competition aaai contest vacuum cleaning contest robots required navigate way corridor rooms order clean rooms 
robot various constraints example forbidden enter room human clean corridor presence humans 
won rst place contest 
system pereira implemented revise system xsb prolog tested examples :10.1.1.27.4100
vivid agents implemented pvm prolog tested distributed diagnosis problems distributed diagnosis computer network diagnosis unreliable communication protocols 
applications centralised technique costly inecient cause large communication overheads 
vivid agents approach decomposes system set subsystems diagnosed agent detailed knowledge subsystem knowledge neighbouring systems 
core impact implemented java 
system built collection heterogeneous databases 
tested number applications nontrivial army applications war reserves planning agencies responsible integration army logistics 
involves massive amounts data distributed databases 
distributed simulations route manoeuvre planning free terrain 
application involves tracking enemy vehicles battle eld attempting predict enemy agents meta knowledge 
system intended training simulation purposes deployment battle eld 
interrap implemented prolog oz tested number real life software hardware applications robot control automated loading dock simple agents responsible loading tracks coordinated manner avoiding con icts 
transportation task scheduling railroad network 
computer integrated manufacturing 
prototype implemented java 
applied inter enterprise integration manufacturing supply chains electronic commerce 
particular applied multi agent negotiation includes communicating revising contractual agreements describe bids goods services 
bid contains contractual agreement speci es just pricing product attributes complex terms conditions proposed deal 
security authorisation policies include delegations multiple agents cryptographically authenticated certi cates 
applications features agent communication prioritised handling con icts 
poole approach implemented prolog tested robotics examples 
framework applied www research ibm com rules www cs ubc ca spider poole train scheduling collaboration italian railway planning goods transportation collaboration international provides service automation retrieval medical information contained medical databases 
research challenges survey section illustrates diverse issues far addressed computational logic agent technology 
remain research development challenges 
roughly divided areas single agent architectures multi agent systems implementation application development 
single agent architectures functionalities single agent architectures enhanced signi cantly research number areas including sophisticated ecient planners 
traditional arti cial intelligence planners plan rst principle decomposing goal sub goals progressively complete plan form sequence actions 
agents act timely fashion dynamic environment may incomplete information 
handicapped act formed complete plan 
sophisticated planning techniques construct plans hierarchically incrementally deal eciently changes environment requiring replanning 
furthermore need developing plan libraries plan repair techniques avoid having recompute plans similar goals 
integration proactivity reactivity 
need integration recognised researchers practitioners 
sophisticated techniques needed selection goals actions ensure timely responses 
existing techniques prioritisation computing maximising utility actions developed schedule interleave execution plans reactions environment 
belief revision 
agents able revise beliefs goals light new information observe receive communication agents multi agent setting 
great deal research regarding belief revision example knowledge bases 
techniques tested possibly developed adapted agent systems 
perception 
application agents need perceive aspects environment important functioning 
selective perception avoid overwhelmed stimuli 
functioning delays perception environment 
issue arises hardware software agents 
learning 
agents function complex evolving environments capacity learn improve performance 
learn plans useful past preconditions actions pro le users communication protocols 
computational logic signi cant contributions learning inductive logic programming 
incorporation learning tool existing agent architectures worthy challenge 
multi agent systems needed number areas including cooperative joint planning 
agents joint individual goals 
cooperative behaviour crucial achievement joint goals help achievement individual goals 
formalisms reasoning techniques negotiation 
negotiation plays important part agent joint goals construct joint plans con icting individual goals resolve con icts 
contract negotiation argumentation promising realising negotiation computational logic setting 
development languages tools representing reasoning agents beliefs goals intentions 
cooperate negotiate agent multi agent setting advantage beliefs agents beliefs goals intentions 
performance community agents greatly enhanced agents avoid proposing actions plans know unacceptable preempt agents 
furthermore agents behave ectively information intentions agents increasing chances success actions 
development communication languages protocols semantics 
language allows cooperation negotiation ective dissemination information 
agent systems attempted incorporate communication 
developed 
applications approaches described earlier report reached sucient maturity tested complex realistic applications 
number currently large scale industrial applications interrap impact 
industrial commercial concerns identi ed possible bene ts agent technologies discuss detail section 
opportunities industry commerce rapidly appreciate potential agent technologies number applications 
jennings sycara wooldridge identify key domains industrial manufacturing process control telecommunication air trac control transportation systems commercial information management electronic commerce business process management entertainment games interactive theatre medical patient monitoring health care 
number companies established agent technology divisions direct collaboration academia 
purpose divisions develop exploit fast possible emergent agent technology 
emerging consensus research development endeavour recognition necessary complexity systems need handle rich diverse sources information complex processes need adjust increasingly sophisticated user demands 
leads realisation importance incorporating intelligence systems 
major aspects computational logic agents play signi cant role 
survey agent systems earlier section indicates systems designed deal rich representations knowledge incorporate proactive reactive behaviour dynamic environments 
poses exciting opportunity signi cant challenge research community industry aware research developments demonstrate promise techniques dealing emerging problems 
various projects started progress doing example impact 
noteworthy systems primarily funded developed despite fact computational logic originated enjoyed earlier developments europe great deal research computational logic agents carried european academic establishments 
addition opportunities immediately open eld industrial commercial exploitation great deal scope furthering research 
promising developments computational logic argumentation defeasible reasoning reached sucient maturity embedded agent architectures 
signi cantly enhance functionalities architectures pave way number exciting applications business client business business electronic commerce 
agents dynamic environments need adjust increasingly sophisticated user demands 
incorporating learning facility agent systems enhance functions 
symbolic manipulation data combination reactivity proactivity computational logic agents show promise information integration dynamic domains www 
incorporation user pro ling techniques agent architectures provide ne tuned personalised access heterogeneous information sources agent functionalities 
agent oriented programming languages develop opportunities faster easier application development 
surveyed current area computational logic agents emphasised includes speci cation agents computational models implementations realistic applications uni ed framework lling gap theory practice arises agents 
argued computational logic developments distributed arti cial intelligence shows great promise enriching research agents 
particular emerging consensus research develop ment endeavour recognition necessary complexity systems need handle rich diverse sources information complex processes need adjust increasingly sophisticated user demands leading realisation importance incorporating intelligence systems 
signi cant aspect computational logic agents contribute 
development agents computational logic techniques young fast growing area 
research community enthusiastic interest industry growing especially united states 
year workshops organised auspices exceeded expectations organisers number enthusiasm participants 
authors alastair bert urgen dix manuel hermenegildo luis pereira useful comments contributions report jim cunningham abe mamdani jeremy pitt helpful discussions 
alferes leite pereira przymusinski dynamic logic programming 
cohn schubert eds proc 
kr international conference principles knowledge representation reasoning pages morgan kaufmann 
baral gelfond reasoning agents dynamic domains :10.1.1.27.4100
minker ed 
pre proc 
workshop logic arti cial intelligence washington june 
baral morales son theory practice robot aaai aaai robot contests 
proc 
agents second international conference autonomous agents minneapolis st paul may 
bondarenko dung kowalski toni argumentation theoretic framework default reasoning 
arti cial intelligence 
martelli multiagent systems development software engineering enterprise 
proc 
international workshop practical aspects declarative languages padl gupta ed 
springer verlag lncs pages 
brooks intelligence representation 
arti cial intelligence 
cabeza hermenegildo 
implementing distributed concurrent constraint execution ciao system 
proc 
agp joint conference declarative programming pages 
cabeza hermenegildo 
www programming computational logic systems pillow ciao library 
proc 
workshop logic programming www conjunction www san francisco ca april 
cabeza hermenegildo 
new module system prolog 
proc 
workshop parallelism implementation lp systems 
conjunction iclp new mexico state university december 
robertson contract negotiation argumentation preliminary report 
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
distributed communicating agents 
meng thesis department computing imperial college science technology medicine london uk 
hermenegildo 
concurrency prolog threads shared database 
proc 
iclp international conference logic programming mit press 
chen warren tabled evaluation delaying general logic programs 
jacm 
clark negation failure 
gallaire minker eds logic data bases pages plenum ny new york 
clark robinson hagen multi threading message communication qu prolog 
proc 
australian workshop distributed arti cial intelligence brisbane 
clark robinson hagen programming internet distributed dai applications qu prolog 
proc 
australian workshop distributed arti cial intelligence brisbane 
clip group 
ciao system manual 
ciao system documentation series tr clip facultad de inform atica upm august 
gomez cabeza hermenegildo 
persistent database interface 
technical report clip project december 
cunha marques distributed algorithm development pvm prolog 
proc 
th euromicro workshop parallel distributed processing ieee computer society press 
dahl eel programming language internal concurrency logic agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
damasio pereira revise extended logic programming system revising knowledge bases :10.1.1.27.4100
kr international conference knowledge representation reasoning morgan kaufmann 
:10.1.1.27.4100
agents logic programming 
phd thesis imperial college science technology medicine london uk 
dell acqua pereira updating agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dell acqua sadri toni combining introspection communication rationality reactivity agents :10.1.1.27.4100
furbach del cerro eds proc 
jelia th european workshop logics arti cial intelligence pages lnai springer verlag 
dell acqua sadri toni communicating agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dix kraus subrahmanian temporal agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian probabilistic agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian pick meta agent programs :10.1.1.27.4100
appear journal logic programming 
dung acceptability arguments fundamental role non monotonic reasoning logic programming person game :10.1.1.27.4100
arti cial intelligence 
eiter subrahmanian pick heterogeneous active agents semantics 
arti cial intelligence 
eiter subrahmanian heterogeneous active agents ii algorithms complexity 
arti cial intelligence 
eiter subrahmanian rogers heterogeneous active agents iii polynomially implementable agents 
technical report institut ur informationssysteme technische universit wien infsys rr may 
fisher agent design holonic manufacturing systems 
appear journal robotics autonomous systems elsevier science 
fung kowalski proof procedure abductive logic programs 
journal logic programming elsevier 
gelfond lifschitz logic programs classical negation 
proc 
iclp th international conference logic programming pages mit press 
gelfond lifschitz representing action change logic programs 
journal logic programming 
grosof prioritised con ict handling logic programs 
ed 
proc 
ilps international logic programming symposium pages mit press 
grosof labrou chan 
declarative approach business rules contracts courteous logic programs xml 
wellman ed proc 
ec st acm conference electronic commerce acm press 
hermenegildo cabeza 
attributed variables implementation concurrent parallel logic programming systems 
proc 
iclp th international conference logic programming pages mit press 
hermenegildo cabeza garc de la banda opez 
ciao multi dialect compiler system experimentation workbench lp systems 
parallelism implementation logic constraint logic programming pages 
nova science ny usa 
de boer van der hoek ch 
meyer control structures rule agent languages 
proc 
atal fifth international workshop agent theories architectures languages lnai springer verlag 
de boer van der hoek ch 
meyer semantics communicating agents deduction abduction 
dignum chaib draa eds proc 
workshop agent communication languages 
conjunction ijcai pages 
jennings sycara roadmap agent research development 
autonomous agents multi agent systems kluwer academic publishers 
jung situated abstraction planning abductive temporal reasoning 
prade ed proc 
ecai th european conference arti cial intelligence pages wiley 
jung fischer layered agent calculus concurrent continuous processes 
singh rao wooldridge eds intelligent agents iv lnai springer verlag 
kakas kowalski toni role abduction logic programming 
gabbay hogger robinson eds handbook logic arti cial intelligence logic programming oxford university press 
kowalski 
logic programming integrity constraints 
proc 
jelia european workshop logics arti cial intelligence pages 
kowalski sadri 
logic programming multi agent systems 
appear annals mathematics arti cial intelligence 
kowalski sergot logic calculus events 
new generation computing 
kowalski toni wetzel executing suspended logic programs 
fundamenta informatica 
lavrac computational logic machine learning roadmap inductive logic programming 
technical report stefan institute ljubljana slovenia 
leite pereira iterated logic program updates 
ja ed proc 
jicslp joint international conference symposium logic programming pages mit press 
levesque reiter lesperance lin scherl golog logic programming language dynamic domains 
journal logic programming special issue reasoning action change 
mccarthy circumscription form non monotonic reasoning 
arti cial intelligence 
mccarthy hayes philosophical problems standpoint arti cial intelligence 
meltzer michie eds machine intelligence edinburgh university press 
mueller design intelligent agents layered approach 
lnai springer verlag 
mueller fischer pragmatic bdi architecture 
huhns singh eds readings agents pages morgan kaufman 
nakashima noda dynamic subsumption architecture programming intelligent agents 
proc 
international conference multiagent systems pages aaai press 
noda nakashima programming language application multi agent systems 
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
pereira modelling agent interaction logic programming 
fukuda ed proc 
th international conference applications prolog tokyo japan 
pineda hermenegildo 
ciao object oriented programming model ciao prolog 
technical report clip facultad de inform atica upm july 
poole independent choice logic modelling multiple agents uncertainty 
arti cial intelligence 
rao george modelling rational agents 
fikes sandewall eds proc 
kr international conference knowledge representation reasoning pages morgan kaufmann 
sadri toni abduction negation failure active databases agents 
proc 
ai ia th congress italian association arti cial intelligence pages bologna 
schroeder ecient argumentation framework negotiating autonomous agents 
proc 
maamaw workshop modelling autonomous agents multi agent world springer verlag 
schroeder wagner vivid agents theory architecture applications 
technical report department computer science city university london uk 
shanahan reinventing shakey 
working notes aaai fall symposium cognitive robotics pages 
shanahan abductive event calculus planner 
appear journal logic programming 
shoham agent oriented programming 
arti cial intelligence 
smolka oz programming model 
ed 
computer science today lncs springer verlag 
subrahmanian dix eiter kraus ross heterogeneous agent systems 
mit press 
see www mit edu book home tcl isbn www cs umd edu users dix web version ps gz logic programming tools advanced internet programming 
ed proc 
ilps international symposium logic programming pages mit press 
experience implementing high performance continuation passing prolog engine 
technical report 
www com index html intelligent mobile agent programming intersection java prolog 
proc 
paam fourth international conference practical application intelligent agents multi agent technology pages 
toni automated reasoning collective information management 
proc 
international workshop community interactive systems conjunction ac annual conference ec programme october siena italy 
van gelder ross schlipf unfounded sets founded semantics general logic programs 
proc 
acm sigmod sigact symposium principles database systems 
wellner concept learning multi agent systems 
msc thesis department computing imperial college science technology medicine london uk 
logic agent system semantic integration information 
msc thesis department computing imperial college science technology medicine london uk 
zaniolo ceri faloutsos snodgrass subrahmanian zicari advanced database systems 
morgan kaufman 

