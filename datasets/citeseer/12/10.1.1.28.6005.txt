electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages modeling fine control demand haskell tim sheard william harrison james hook paci software research center oregon graduate institute beaverton oregon lazy functional language haskell viewed levels 
highest level manipulated call name lambda calculus 
slightly level model call need lambda calculus control duplication computation explicit 
underneath level detailed model provides precise control evaluation data constructors destructors 
expert haskell programmers move levels ease making detailed operational arguments program representations discussing third level 
attributes haskell successful extraordinary semantic coherence levels 
introduces compositional meta circular interpreter haskell articulates third level semantics ne control evaluation data construction analysis precise 
haskell large lazy industrial strength language usable ecient wide variety domains 
commonly refer haskell lazy language technically really non strict contains constructs small changes standard lazy evaluation 
features haskell ecient harder understand 
meta circular interpreter haskell written haskell provides uni ed model constructs interactions haskell features 
interpreter compositional monadic interpreter written style liang hudak jones :10.1.1.17.268
described supported nsf cda murdock charitable trust department defense 
email sheard cse ogi edu email wlh cse ogi edu email hook cse ogi edu published elsevier science sheard harrison hook particular model nested patterns di erent forms lazy pattern matching guards clauses equations strict constructor functions newtype datatype de nition facility seq operator 
features subtle changes default lazy evaluation strategy haskell compelling reasons 
slight changes easy programmers understand 
simple concise model features understandable ordinary haskell users signi cant bene haskell community 
rationale part project oregon graduate institute attempting develop theory haskell programs automated tools manipulating theory 
important part develop logic manipulate haskell terms 
order develop sound rules inference logic need know meaning terms 
led literature surprise lacking formal descriptions big picture haskell 
plenty papers particular features haskell laziness class system little uni es essence haskell ne control mechanisms added re ned years 
just haskell di er lazy lambda calculus 
started exercise satisfy curiosity 
write haskell interpreter successfully modeled control structures haskell remain simple concise 
soon exercise just simple toy 
model judged 
anticipate model simple elegant turned 
quickly gained deep appreciation continuity semantic coherence control features haskell 
addition simple concise elegant model useful 
wish share haskell community large 
important questions ask haskell describe haskell 
features described 
haskell interested semantics haskell features precise appreciation meaning haskell programs 
interested haskell interpreter concise description standard descriptions implementations compared 
provides common language extensions additions haskell described precisely concisely 
criteria select features haskell represented interpreter 
goal describe haskell features haskell deal modules type classes comprehensions notation depend programs annotated type information 
reported deals core fragment sheard harrison hook require type annotations unambiguous interpretation 
fragment includes control structures haskell 
see key step denotational semantics haskell 
strategy writing interpreter 
haskell report uses strategy translating complex constructs simpler core language really just slightly extended lambda calculus 
feel translation approach useful semantically problematic 
translation schemas haskell report rely devices 
new variables second restructuring code avoid duplication usually maintain sharing avoid code blowup 
semantics languages binding mechanisms complex 
de nes language feature translation introduces new variables leaves understood world domains continuous functions moves complicated world 
languages binding mechanisms suggests kinds transformations means trivial model correctly 
reason eschew techniques relatively simple alternatives 
significantly larger core fewer simpler translations apt describing control features haskell 
features introduced give programmer explicit control evaluation high level manner 
give features meaning terms translation convoluted programs features meant replace 
reasons research provide concise model haskell 
wish point particular line code model change line change evident model 
particularly wanted able control features haskell 
interpreter meant provide mechanism ne distinctions 
goals research fold 
collect place formal description larger subset haskell previously described 
second provide concise description communicate haskell implementations 
view rst step program de ne formal logic haskell programs ultimately embedded large automated toolset 
model haskell section presents call name model haskell compositional monadic interpreter call need strategy discussed section 
call name appropriate theory program correctness may inappropriate theory program optimization 
call need approach tries model sharing resources consumed 
sabry liang expect primary di erence callby name call need interpreters underlying monad sheard harrison hook computation selected 
moggi introduced monads technique structure semantics introduced distinction value type computation type 
basic distinction danvy identi ed basic forms monadic interpreters functional languages kleisli interpreter models functions mappings values computations reynolds interpreter models functions transformations computations 
di erence reynolds interpreter evaluation strategy call value vs call name language modeled explicit depending evaluation strategy meta language 
reynolds interpreter express call byname call value haskell evaluation strategy meta language 
lazy meta language implement call name strategy kleisli interpreter 
meta circular interpreter developed re ects structure reynolds interpreter ways 
notion value interpreter corresponds terms weak head normal form computations value base values simply value embedded recursively 
data value models values haskell integer scalars fv value value cbn functions tagged name value algebraic structured data value tuples secondly environment maps names computations values 
possible put computation environment may weak head normal form value 
expressed type env name value maps names computations type envfrag name value intensional environment fragment data error ok err string run time error newtype env error environment monad errors 
see 
types meaning functions de ning interpreter yield computations opposed values ranges 
functions structure 
syntactic category language function mt 
say mt computes meaning associates type meaning 
type form computation monad 
concrete consider meaning functions datatypes de ned 
divided haskell subset syntactic categories called exp dec pat expressions declarations patterns 
corresponding meaning function mexp exp value sheard harrison hook dec mpat pat value envfrag analogy useful intuition thinking meaning functions 
functions mexp exp value thought computation producers 
function mexp produces computation exp computation computes result type value 
functions dec thought producing computation transformers 
term ds computation transformer 
computation input producing di erent related computation adds bindings indicated ds original computation 
adds necessary computational steps extend environment meaning values bound ds 
function give meaning haskell expression ds transforming translation follows ds mexp 
compositional interpreter additional property meaning term syntactic category depend purely functional manner meaning subterms 
monadic interpreters ability cleanly separate di erent concerns remarkably concise reusable :10.1.1.100.9674
haskell introduced explicit support monadic abstractions notation 
notation combines monadic expressions computations larger monadic expressions bigger computations 
notation composes computations clear order computations run 
monad 
de nition monad haskell 
call computational monad environment monad errors 
de ne monad transformer style :10.1.1.17.268
de ning pure error monad laying environment features top 
monad abstracts away additional structure necessary build compositional interpreters 
haskell additional structure deal correctly features suspended computation possibility failure 
haskell distinct kinds failures 
modeled monad 
rst kind failure modeled monad arises run time errors division zero non exhaustive pattern match coverage 
head empty list example kind failure 
ii second kind failure stems non terminating computations 
kind failure captured model terminating non terminating haskell program input 
sheard harrison hook de nition monad instance monad error return ok case ok err msg err msg instance monad return rho return rho dem non standard morphisms lift error lift ec ec raise string raise msg lift err msg rdenv env rdenv rho return rho inenv env inenv rho rho instance functor fmap fig 

computation type value 
environment monad errors 
iii third kind failure stems pattern matching failure context failure caught control proceeds match case clause multi line function de nition 
model outside monad computation type 
call computations partial computations 
partial computation failure rst kind occurs context match clause 
semantics failure rst kind reported nonstandard morphism raise 
monad propagates failures raised 
suspensions built environment 
environment component function name value binds free variables terms computations 
environment build suspended computations 
intuitively suspended computation thunk closure 
contains components set instructions execute set sheard harrison hook bindings free variables appear instructions 
suspensions built monadic level classic pattern 
nonstandard morphism rdenv capture current static mapping morphism inenv takes captured mapping computation create new computation run captured mapping 
structure values monad conventional 
assume reader familiarity monads interpreters monadic control structures nice property monadic computation haskell easy capture patterns control functions monadic level :10.1.1.17.268
familiar pattern occurs times semantics monadic conditional 
interpreting syntactic category computation called discriminant evaluated lazily just choice alternate paths 
pattern occurs dozen times semantics 
fall categories depending type discriminant 
discriminant type value value representing bool type guarded body expression simple lifting expression haskell 
capture pattern function ifv 
ifv value ifv test case tagged true tagged false raise bool ifv second kind choice captured function 
describing pattern matching 
pattern matching inherently partial 
example case expression pattern match control passes arm case 
matching succeeds additional information captured bindings variables bound pattern 
type behavior captured discriminant type 
arms conditional correspond computation producing just 
arm just case function produces computation applied test case just form conditional called dynamic sheard harrison hook matching tags algebraic structured data 
kind conditional compares statically known tag tag dynamically produced tagged value 
tag matches take path match take path 
case additional information available useful chosen path 
match successful list pairs binding variables representing variables bound pattern suspended computations representing data stored algebraic type known 
tags non matching tag name useful reporting failure known 
arms represented functions 
string value value string tag arg case tagged tag raise tagged value syntax haskell rich language features 
subset identi es di erent syntactic categories 
categories include names operators strictness annotations matches clauses bodies expressions declarations patterns 
display data de nitions haskell represent syntax 
de nitions conventional comments relate syntax concrete syntax haskell 
missing syntax necessary complete haskell de nition module system classes list comprehensions notation 
meaning expressions heart functional language haskell expression language 
meaning haskell program terms meaning expressions contains 
semantics meaning haskell program computation producing value 
rest section detailed explanation function mexp 
divided subsections 
subsection describes related clauses making de nition mexp auxiliary functions necessary clauses 
auxiliary functions supply meaning syntactic categories haskell 
pedagogical reasons text breaks de nition clauses time 
actual implementation need collect single place 
sheard harrison hook haskell subset syntax type name string data op plus mult data ls lazy strict deriving eq data pat integer pvar name pat name pat data name pat newtype pat data exp var name const integer app exp exp abs pat exp exp name exp ls data name exp newtype seq exp exp seq bin op exp exp cond exp exp exp dec exp case exp match case type match pat body dec case pat body decs data dec fun name clause decs val pat body dec decs type clause pat body dec body decs data body guarded exp exp ds normal exp ds fig 

comments constructor function meant illustrate concrete syntax represented constructor 
comment form example context possibly empty 
context supposed place example possibly ambiguous program text fragment perspective 
examples semicolon sides rule normally 
simple expressions mexp exp value mexp var rho mexp const return sheard harrison hook mexp es rho return map inenv rho mexp es mexp cond ifv mexp mexp mexp meaning variable obtained extracting current environment rho applying variables name 
useful think notation building computation 
lookup computation stored environment rho return 
constants simply turned values returned 
complicated translation necessary 
case tuples laziness haskell rst apparent 
subexpressions es suspended resulting list computations wrapped constructor 
suspend computation rst grab current environment rho translate expression apply computation transformer inenv rho enable computation nd correct environment run 
repeated sub expression tuple 
see pattern times 
tell computation run suspended embedded inside value 
conditional expressions easily translated control operator ifv 
application abstraction function application abstraction key functional language 
care taken implement haskell laziness correctly 
mexp exp value mexp app rho fv inenv rho mexp mexp abs ps arrow ps mexp compute meaning application grab current environment evaluate function part obtain function value fv 
apply suspended argument 
argument suspended rst translating transforming computation run current environment inenv 
spot specify reynolds style interpreter 
saw app case meaning function value form fv function type value value 
meaning abstraction compute value 
accomplished translating body abstraction applying computation transformer arrow 
arrow pat value value arrow sheard harrison hook arrow ps rho mpat raise mpat error fun vl inenv rho vl arrow ps return fv key understanding arrow pn body builds nested sequence fv objects fv 
fv vn body length list patterns 
body fvs suspended computation incrementally adds bindings variables pi 
hard performed transformer mpat 
meaning binding constructs patterns semantics associated production envfrag 
envfrag list pairing names computations 
envfrag extend env function env envfrag env 
patterns pattern matching nested patterns challenging problem describing semantics haskell 
consider treatment nested patterns major contributions 
patterns occur di erent syntactic contexts 
lambda expressions expressions matches case clauses multi line function de nitions 
patterns appear subpatterns inside patterns 
patterns distinctly separate semantic ways haskell 
way pattern decided syntactic context appears 
call semantic meanings patterns optimistic lazy patterns discriminant strict patterns 
optimistic lazy patterns occur expressions patterns annotated lazy 
discriminant strict patterns occur contexts 
di erent meanings patterns produce di erent kinds transformers 
meanings pattern thought computation transformers 
transform computation expression appearing scope variables pattern bound 
function mpat de nes meaning discriminant strict patterns 
function de nes meaning optimistic lazy patterns 
meanings patterns lazy sense 
discriminant strict patterns lazy force evaluation determine pattern matches 
optimistic lazy patterns lazy force evaluation 
optimistic sense assumed pattern match computation proceeds assumption 
sheard harrison hook events invalidate assumption failure rst type raised 
types functions mpat pat value envfrag pat value envfrag encode information 
function mpat gives meaning discriminant strict patterns 
partiality discriminant strict patterns shows type 
discriminant strict patterns may force computation discriminant resulting envfrag monadic computation 
partiality mpat signal advance match case clause multi line function de nition 
function gives meaning optimistic lazy patterns 
optimistically returns envfrag forcing evaluation 
forces evaluation discriminant variables bound pattern demanded 
value matched optimistic pattern failure rst type raised 
failure delayed 
advancing arm multi arm case guarded lazy pattern possible arm guarded optimistic lazy pattern chosen 
illustrated table 
rst lines table correspond mpat matching lines correspond matching 
example value comment bottom succeeds xs bottom bottom diverges xs failure match failure xs succeeds case xs failure delayed error transformer mpat type value envfrag transforms translated argument computation run time computation computes type 
type observed dynamically di erent courses action taken 
result successful match just envfrag 
recall type envfrag name value 
think envfrag dispatch table pairing variable computation needs executed get variable value 
computations may non trivial small amount computation necessary produce value pattern matched may forced 
give de nition mpat 
mexp discuss clauses time 
mpat pat value envfrag mpat pvar arg return just arg mpat arg sheard harrison hook return just return matching variable forces computation succeeds simple list single pair immediately returned 
match pattern constant argument forced value compared constant pattern 
tuples structured data common discuss cases 
key force evaluation match pattern 
mpat pat value envfrag mpat ps arg return mpat tag ps arg tag arg return return arg forced get underlying tuple 
sub pattern recursively matched sub components tuple 
note sub patterns tuple variables computation forced 
variables just components argument tuple forced 
zipping mpat sub patterns suspended computations body tuple compute list recursive results 
recursive results just frag 
form just frag combined large fragment 
just just xs fmap xs xs structured data similar 
conditional operator forces evaluation argument 
tag matches rst arm proceeds tuples tag match arm immediately returns partial result 
mpat pat value envfrag mpat arg mpat arg sheard harrison hook mpat arg return just arg constructor function introduced newtype declaration acts identity function 
match pattern argument just match sub pattern argument 
similar rule evaluation newtype constructor functions function mexp 
pattern annotated lazy treated optimistic lazy pattern regardless context 
function immediately succeeds forcing computation 
mpat returns result call returns just envfrag wrap just constructor result 
meaning optimistic lazy pattern computation transformer 
matching optimistic lazy pattern partial transformer transforms argument directly envfrag envfrag binding variables computations 
computation demands argument variables pattern demanded 
pattern match argument computations incorporate delayed match error 
key understanding understand argument computation lazily incorporated computation envfrag 
pat value envfrag mv pvar mv mv mv mv ps mv concat zipwith argn 
ps argn vs error tag raise tag tag mv mv ps concat zipwith select 
ps select proj proj int value value proj phi structured data sub pattern may bind variables patterns pulls original argument variables demanded 
happens calling turn pulls mv call mv return error 
similar action takes place function proj tuple case 
optimistic lazy patterns constant sub patterns worth thinking moment 
optimistic pattern matches immediately delayed failure raised pulling variables pattern discovers value matched structure pattern 
optimistic lazy constant pattern matches variables causes delayed failure 
constant pattern optimistic lazy context acts wildcard pattern 
sheard harrison hook return discussion meaning expressions 
constructor application constructor applications evaluated manner tuples 
key di erence possibility constructors arguments annotated strict arguments 
example haskell write data string int denote second argument forced head normal form object allocated heap 
denote syntax pairing sub argument strictness annotation ls 
mexp exp value mexp es rho lazy es cs strict es cs return tagged cs lazy arguments suspended rdenv inenv current environment strict ones evaluated immediately 
inspecting interpreter shows strict constructors store computations form 
case expressions case expressions pattern matching transformers de ned section 
case contains discriminant list matches ms 
match consists pattern body optional list local declarations pattern match matched turn returning meaning body rst successful match 
match may partial semantics handle properly 
meaning match form pat body transformer meaning discriminant computation returning value 
form just mexp body pattern matches 
example case expression case meaning expression mexp mexp raise match failure right associative fatbar operator returns rst left operand returns just value 
precise mexp exp value discuss clause declarations section 
sheard harrison hook mexp case ms foldr fatbar mexp raise match failure map ms fatbar arg mm mm arg return meaning match computed match value value 
mpat may force computation may partial 
pat transforms computation value envfrag 
partiality match stem causes 
consider xs term partial pattern match failure term partial guard failure 
match value value body ds arg mpat arg return frag rho inenv rho frag ds mbody body function basically extension mpat executing corresponding body environment extended additional sets bindings 
rst set bindings envfrag computed successful match second bindings clause ds 
discuss section 
body single expression list guarded expressions 
mbody body value mbody normal mbody guarded guards guards exp exp value return gs ifv mexp gs partiality mbody necessary guarded expressions possible guards partial 
happens match partial control pass match enclosing case expression 
declarations expressions sets mutually recursive de nitions appear expressions clauses top level haskell programs 
di erence sheard harrison hook subtle distinction scope 
semantics set mutually recursive de nitions transformer 
distinction scope way transformer applied 
meaning set mutually recursive de nitions dec value value 
transformer transforms computation scope de nitions knows access de nitions 
diculty de ning meaning function set mutually recursive de nitions recursion 
transformer quite straightforward 
example meaning expression simply mexp exp value exp ds body ds mexp body de nition problematic 
meaning binding constructs semantics associated production envfrag 
envfrag list pairs 
pair consists name computation 
set mutually recursive declarations computations inside envfrag include bindings names declared set 
environment constructed envfrag complete 
chicken egg problem 
comes rst env envfrag 
fortunately problem easy solve recursion metalanguage haskell 
expect recursive equation hold semantics ds produces envfrag env contains bindings names declared ds 
equation 
give compositional de nition satis es equation 
function builds transformer extends environment variables bound set declarations 
recursion solves chicken egg problem explicit explicit fix operator 
function works grabbing current environment adding bindings produced new env inenv transformer build suspension evaluate original computation environment 
dec ds mexp rho fix rho ds inenv mexp function straight forward 
kinds sheard harrison hook declarations val fun 
kind declaration build pair pairing names bound associated computations 
recall environment contain bindings constructing 
env dec envfrag ds foldr ds val body ds frag inenv ds mbody body frag fun nm cls frag nm cls frag pat body dec value raise guard matches ps body ds cls arrow ps inenv ds mbody body recall meaning declaration perform computation build new environments 
val clause function 
note recursive handle clauses inside declaration 
newtype constructor application newtype constructor acts identity function easy de ne clause mexp newtype constructors mexp exp value mexp mexp miscellaneous expressions come miscellaneous expression forms seq operator primitive binary operators 
assume primitive operators strict operands 
mexp exp value mexp seq mexp mexp mexp bin op return mop op mop op integer integer value mop plus mop mult mop mop true tagged true false tagged false seq operation needs explanation 
seq evaluates rst operand evaluates returns value second operand 
bene seq sheard harrison hook evident monad models sharing call need semantics 
model uses seq force computation rst operand subsequent shared demands perform small constant amount computation 
common seq de ne strict application operator 
seq usefully change monad encode sharing 
interpreter adding call need evaluation simple changes interpreter developed callby need call name 
happy consequence parameterizing interpreter monad structured monad transformers 
changes necessary adding heap structure monad replacing closures formed function application thunks 
section outline changes 
treatment follows liang dissertation closely 
previously de ned env error rst change include heap de nition env error heap heap sto sto sto loc loc value loc int heap state monad heap structure sto 
rst component sto loc represents free address heap 
second component sto loc value represents heap 
pair list represents thunk stored location new definition simple matter specify operations alloc loc read loc value write loc value allocate new location heap read write heap locations respectively 
necessary change interpreter replace closures thunks de nition function application mexp exp value mexp app rho fv loc write loc rho loc mexp sheard harrison hook read loc phi rst lines code identical original call byname de nition section 
new location loc allocated heap thunk argument rho loc mexp written loc 
passing closure inenv rho mexp call name loc passed read loc 
de ning application manner implements call need evaluation 
rst time evaluated thunk rho loc mexp evaluate closure inenv rho mexp value update writing unit computation return loc 
successive evaluations share return original closure call name 
fully exploit sharing call need interpreter rephrase pattern binding matches case expression case mn incremental evaluation performed 
interpreter evaluation subtleties consider example taken haskell report page demonstrates subtle di erences evaluation constructors introduced data data strictness annotations newtype data int data int newtype int di erences evaluation illustrated equivalences haskell terms equivalent 
possible point lines code explain behavior 
example exactly 
just look clauses de ning various avors constructor application sheard harrison hook mexp es rho lazy es cs strict es cs return tagged cs mexp mexp evaluated lazy constructor application meaning line marked non 
suspension return inenv 
having strictness annotation evaluates argument line marked produces 
constructor introduced newtype treated bona de semantic function data constructors shown line semantically thing 
equivalent 
behave strictly equivalent lazy equivalent 
just consider lines de ning pattern matching data newtype constructors mpat tag ps arg tag arg 
mpat arg mpat arg mpat pvar arg return just arg know discriminant evaluates argument arg see equivalent 
pattern matching compilation just desugaring pattern variables constructor function simple pattern 
variable patterns nested pattern 
pattern matching compilation typically performed part front ghc hugs yields ecient programs see chapter wadler details 
shows example pattern match compilation de nition haskell function nested patterns transformed similar de nition nested patterns 
feature transformation necessity generating new variables xs xs way 
previous attempts de ne denotational semantics core haskell concentrate fragment language nested patterns kind programs produced pattern match compilation 
semantics unnested haskell core extended simply full language de ning meaning term nested patterns meaning compilation 
example meaning identi ed 
observe extended semantics sheard harrison hook original nested patterns case xs xs xs xs pattern match compilation case xs xs case xs xs xs xs fig 

syntactic implicit reliance ability generate fresh names just xs xs generated 
implicit assumption approach pattern match compilation essentially semantically irrelevant elimination syntactic sugar 
drawback extended semantics longer compositional 
serious aw derives reliance fresh name generation pattern matching compilation 
developments semantics staged languages reveal structural consequences including name generation denotational semantics considerable 
serious consequences developing simple logic haskell programs 
haskell commonly referred lazy functional language properly understood non strict language contains features patterns seq operator introduce strict perturbations default lazy evaluation mechanism 
perturbations important practical reasons expert haskell programmers may strictness sparingly programs avoid computational overhead associated laziness giving entirely 
mixed evaluation order complicates haskell semantic point view 
modeled haskell control demand reynolds style interpreter model full range fully strict fully lazy languages 
monadic style get ne control demand encapsulate various ects haskell 
rst formal treatment ne control demand haskell 
language de nition clearly separates lazy sheard harrison hook normal patterns 
patterns considered nested patterns resort pattern match compilation simplify task 
clearly de nes interaction data strictness annotations newtype data constructors haskell features 
de nition lays foundation equational reasoning system real haskell programs 
code available online www cse ogi edu sheard 
abelson sussman sussman structure interpretation computer programs mcgraw hill cambridge mass second edition 
danvy compiling monads technical report cis kansas state university manhattan kansas 
url ftp ftp diku dk pub diku semantics papers dvi espinosa semantic lego ph thesis columbia university 
url www swiss ai mit edu users dae home html friedman wand haynes essentials programming languages mcgraw hill book new york second edition 
gabbay pitts new approach syntax involving binders longo editor proceedings th annual symposium logic computer science lics pp 

gunter semantics programming languages programming techniques mit press cambridge massachusetts 
hall hammond jones wadler type classes haskell lecture notes computer science pp 

james hook investigator home page www cse ogi edu projects default htm 
jones system constructor classes overloading implicit higherorder polymorphism fpca conference functional programming computer architecture copenhagen denmark pp 

jones implementation functional programming languages computer science prentice hall 
jones implementing lazy functional languages stock hardware spineless tagless machine journal functional programming pp 

jones santos transformation optimiser haskell science computer programming pp 

sheard harrison hook jones john hughes report programming language haskell technical report yaleu dcs rr yale university cs dept 

kamin programming languages interpreter approach addison wesley 
liang modular monadic semantics compilation ph thesis yale university 
liang hudak jones monad transformers modular interpreters acm editor conference record popl nd acm sigplan sigact symposium principles programming languages papers symposium san francisco california january pp :10.1.1.17.268

moggi functor categories level languages lecture notes computer science pp 

moggi view programming languages technical report dept computer science edinburgh univ 

url theory doc ic ac uk papers abs view dvi peyton jones marlowe secrets glasgow haskell compiler inliner idl research microsoft com users simonpj papers inline ps gz 
peyton jones santos transformation optimiser haskell science computer programming pp 

pitts gabbay metalanguage programming bound names modulo renaming mathematics programme construction lncs pp 

reynolds de nitional interpreters higher order programming languages acm conference proceedings pp 

sabry purely functional language journal functional programming pp 

sheard el benaissa dsl implementation staging monads proceedings nd conference domain speci languages pp 

steele jr sussman art interpreter modularity complex parts zero ai memo massachusetts institute technology arti cial intelligence laboratory 
stoy denotational semantics scott strachey approach programming language semantics mit press cambridge massachusetts 
wadler comprehending monads mathematical structures computer science pp 

sheard harrison hook wadler essence functional programming th popl pp :10.1.1.100.9674

wadler monads functional programming lecture notes computer science pp 


