compositional refinement hierarchical hybrid systems rajeev alur radu grosu lee oleg department computer information science university pennsylvania department computer science state university new york stony brook 
develop theory modular design refinement hierarchical hybrid systems 
particular compositional trace semantics language charon allows modular specification interacting hybrid systems 
hierarchical description system architecture charon supports building complex agents operations instantiation hiding parallel composition 
hierarchical description behavior atomic components charon supports building complex modes operations instantiation scoping encapsulation 
develop observational trace semantics agents modes define notion refinement trace inclusion 
show semantics compositional respect constructs language 
modern software design paradigms promote hierarchy key constructs structuring complex specifications 
concerned distinct notions hierarchy 
architectural hierarchy system collection communicating agents constructed parallel composition atomic agents behavioral hierarchy behavior individual agent described hierarchical sequential composition 
hierarchy concurrency formalisms block structured programming languages introduced state machine modeling statecharts forms integral part modern notations uml 
hybrid system typically consists collection digital programs interact analog environment 
specifications hybrid systems integrate state machine models discrete behavior differential equations continuous behavior 
developing formal compositional semantics hierarchical hybrid specifications 
formal semantics leads definitions semantic equivalence refinement specifications observable behaviors compositionality means semantics component constructed semantics subcomponents 
formal compositional semantics cornerstone concurrency frameworks csp ccs prerequisite developing modular reasoning principles compositional model checking systematic design principles stepwise refinement 
research supported part nsf ccr aro daag darpa ito darpa ito mars program xxxx onr muri 
main contribution formal compositional semantics language charon accompanying compositional refinement calculus 
building block describing system architecture agent communicates environment shared variables 
language supports operations composition agents model concurrency hiding variables restrict sharing information instantiation agents support reuse 
building block describing flow control inside atomic agent mode 
mode basically hierarchical state machine mode submodes transitions connecting 
variables declared locally inside mode standard scoping rules visibility 
modes connected defined entry exit points 
allow sharing modes mode definition instantiated multiple contexts 
support exceptions language allows group transitions default exit points applicable enclosing modes support history retention language allows default entry transitions restore local state mode exit 
discrete updates specified guarded actions labeling transitions connecting modes 
variables charon declared analog flow continuously continuous updates model passage time 
evolution analog variables constrained ways differential constraints equations algebraic constraints equations invariants jx gamma yj limit allowed durations flows 
constraints declared different levels mode hierarchy 
define modular semantics modes mode associate relations capturing discrete behavior capturing continuous behavior 
defining discrete relation tricky presence features group transitions exceptions history retention 
solution relies closure construction inspired similar construction hierarchical discrete systems allows treat transfer control mode environment game 
discrete steps mode environment interleaved continuous steps need synchronized time global parameter 
fact flow active hierarchically nested modes participate 
allow flexible hierarchical specifications charon flow constraints specified levels hierarchy 
formalize feature consistent modular manner require mode participate flow control default exit point 
applicable constraints properly define permitted flows 
discrete continuous relations mode allow define executions mode corresponding traces obtained projecting private variables 
show set traces mode constructed traces submodes 
compositionality result leads compositional notion refinement modes 
mode refines mode interface terms entry exit points shared variables traces subset traces notion admits modular reasoning manner 
suppose obtain implementation design specification design simply locally replacing show refines suffices show refines illustrate benefit simple example 
compositionality results modes analogous results agents relatively straightforward 
define observational trace semantics agents resulting notion refinement show compositional respect operations parallel composition hiding instantiation 
related 
early formal models hybrid systems include phase transition systems hybrid automata 
models hybrid automata hybrid modules allow compositional treatment concurrent hybrid behaviors 
notion hierarchical state machines introduced statecharts software design paradigms uml 
treatment hierarchy closest hierarchical reactive modules shows define modular semantics hierarchical discrete modes 
tools shift ptolemy stateflow see www mathworks com allow hierarchical specifications hybrid behavior formal semantics concern 
presents hierarchical model modular operational semantics consider refinement 
formal model hierarchical hybrid systems 
spirit differs model technically significant aspects allows nesting sequential parallel composition allows general form synchronous communication disallows high level features charon modes exceptions history retention specification constraints various levels 
motivational example section simple example outlines features useful specification language hybrid systems 
point difficulties defining semantics language 
give intuition approach semantics definition allows overcome difficulties 
example system controls level liquid leaky tank 
level controlled flow liquid tank 
level tank measured directly rate leak estimated 
controller goals sure level critical bounds 
emergency measures taken level safe 
level safe controller change infusion rate instructions user 
controller periodically recomputes desired rate change infusion maintains computed rate update 
hierarchical description system charon 
hierarchy charon twofold 
architectural hierarchy describes system agents interact hiding details interaction sub agents 
behavioral hierarchy describes behavior agent hiding low level behavioral details 
example level architecture description agents tank controller 
variables shared agents level level liquid infusion infusion rate 
agents primitive concurrent sub agents 
behavior primitive agent mode hybrid state machine equipped analog discrete variables 
mode stays state analog variables updated continuously set constraints 
transitions state mode updates discrete variables 
states mode submodes behavior 
mode number control points control enters exits mode 
perform computation submodes mode takes transition entry point 
computation complete transition exit point taken 
computation mode completed may interrupted group transition originating default exit point dx 
interrupt control restored mode default entry point de 
example behavior tank represented single differential equation level infusion gamma leak leak local variable tank 
shows behavior agent controller 
top level mode controller submodes normal emergency 
show details mode emergency 
activated level enters critical region 
est est 
rate rate compute local discrete real est 
level dx infusion est emergency dx de infusion est de level level global discrete real rate global analog real level infusion level level de dx dx de infusion rate maintain dx de compute normal local analog real global analog real local discrete real rate level infusion fig 

behavior controller mode normal submodes 
maintain maintain current rate change infusion represented local variable rate 
seconds measured local clock maintain call compute computes new value rate 
details computation irrelevant assume computation done differently depending level 
introduce submodes compute show constraints infusion 
exit transition compute assigns computed value variable rate 
note mode normal controls value clock rate change submodes 
contrast infusion updated differently submodes 
case provide constraint infusion 
note rate discrete variable 
updated transitions compute 
invariants force outgoing transitions 
control reside mode long invariant satisfied 
soon invariant violated control leave mode enabled outgoing transitions 
invariants modes shown braces 
example time units entering mode maintain transition compute taken 
distinguish regular transitions interrupts 
example control transferred compute maintain computation complete 
time perform computation start 
hand transition normal emergency works interrupt 
regardless normal operating interrupt occurs control transferred emergency 
return interrupt control state normal restored 
priority regular transitions interrupts mode ignore enabled interrupt execute internal transitions time elapse 
invariants described enforce interrupts see invariant mode normal 
invariants give user finer control interrupts 
example situation interrupt optional time urgent easily expressed 
addition discrete steps described mode continuous steps time progresses analog variables mode updated set constraints 
hierarchical structure mode set applicable constraints consists constraints defined mode currently active 
implies mode engage continuous step control properly resides submodes 
example allow time pass control point compute executing transition maintain compute transition enter 
modes notation 
represent modes agents tuples components 
tuple ht identify component extend notation sets tuples 
st set tuples structure write st mean st set typed variables valuation function mapping variables values 
assume valuations type correct 
set valuations denoted variables possibly primed subscripted range valuations 
valuation set denotes restriction variables flow set variables differentiable function closed interval non negative reals ffi refer ffi duration flow 
assume constant functions differentiable non real valued types 
denote set flows syntax definition 
mode mode tuple sm cons set entry control points set exit control points set variables sm set submodes cons set constraints set transitions 
variables 
mode finite set typed variables partitioned subsets sets analog discrete variables respectively 
sets global local variables assume conflicts names local variables different modes 
submodes 
sm finite set submodes 
require global variable variable global local parent mode 
sm treatments interrupts handled equally proposed framework 
example discuss weak interrupts similar setting 
charon refines set global variables allowed read write access won distinction clarity presentation 
induces natural scoping rule variables hierarchy modes variable introduced local mode accessible submodes mode 
control points 
set entry points set exit points 
distinguished control points representing default entry exit de dx set control points mode sm sm constraints 
finite set cons constraints defines flows permitted cons contains invariant defines mode active see definition active mode 
variable cons contain algebraic constraint defines set admissible values differential constraint defines admissible values derivative respect time 
invariant algebraic constraint predicate differential constraint predicate flow permitted mode domain variable satisfies constraints cons 
examples constraints 
transitions 
finite set transitions form ff sm sm ff action transition relation vg 
transition connects control points mode submodes 
transition executed updates variables mode 
mode assumed identity transition de dx disallow transitions non default control point dx 
transition originates default exit point called group transition 
group transition executed interrupt execution 
require exited group transition entered default entry point resume interrupted execution 
furthermore require mode blocked non default control points 
precisely de dx submodes union ff actions transitions originating complete ff special modes 
distinguish kinds modes play special role semantic definitions 
mode leaf mode sm 
leaf modes perform continuous steps constraints 
top level mode single entry point init non default exit points 
top level modes describe behavior agents shown section 
semantics intuition 
mode engage discrete continuous behavior 
execution mode environment take turns making discrete steps take continuous step 
discrete continuous steps mode alternate 
continuous step mode follows flow set flows possible current state length duration updating variables flow 
note set flows permitted mode constraints may restricted mode environment 
discrete step mode finite sequence discrete steps submodes enabled transitions mode 
discrete step begins current state mode ends reaches semantics depend sets flows specified 
chose possible ways 
exit point mode decides yield control environment choice step 
note case decision break discrete step mode 
technically mode ends discrete step submodes returns control environment default exit point 
closure construction described ensures mode yield control appropriate moments discrete control state mode restored environment schedules discrete step 
state mode 
define state mode terms variables mode submodes 
sm set variables 
state mode pair location discrete control mode qm mode control resides control points 
case special symbol ffl denote case mode control 
state refer control state data state preemption 
execution mode preempted group transition 
group transition mode originates default exit mode 
discrete step mode control transferred default exit enabled group transition selected 
priority transitions mode group transitions 
execution mode preempted control state mode recorded special history variable new local variable introduce mode 
mode entered default entry point time control state mode restored history variable 
history variable active submodes 
order record location discrete control executions introduce new local variable mode submodes 
history variable mode assume values set sm ffl 
called active history variable value top level mode active 
closure mode 
closure construction technical device allow mode interrupt execution allow environment schedule step provide preemption mode execution group transitions 
transitions mode modified update transition executed 
addition default entry exit transitions added set transitions mode 
default transitions affect history variable allow interrupt execution resume point 
closure modifies transitions way transition records active 
transition leads control point resulting state transition leads control point value transition ffl 
closure adds default exit transition dx dx 
transition change variables mode enabled 
default entry transitions restore local control state default entry transition leads default entry mode default entry enabled furthermore sure default entry transitions interfere regular entry transitions originating de 
closure changes transition enabled ffl 
formally closure mode sm cons defined mode sm cons new local variable sm fc smg set closed submodes closed set transitions obtained extending transitions ff dx sm dx de ff sm de extending transition ff iff sm transition ff respective closed transition ff ff iff ff ffl sm ffl ffl sm ffl 
closure construction example introduced section illustrated 
avoid cluttering omit default transitions show variables modes 
rate rate maintain compute level level infusion est est est dx normal level de de maintain compute maintain infusion rate de dx infusion est dx compute compute dx dx de de dx de fig 

closed modes formally defining executions mode illustrate continuous discrete steps example 
assume controller maintain mode invariants violated 
maintain voluntarily relinquish control environment take step advance time default exit transition dx normal 
group transition enabled default exit transition parent mode taken 
control arrives top level environment schedule continuous step 
analog variables agents updated constraints active modes 
active modes maintain normal controller 
applicable constraints infusion rate 
global variable level updated constraint tank 
continuous step control returns maintain chain default entry transitions 
assume invariant normal violated control inside compute 
control transferred dx compute dx normal 
choice group transition emergency default exit transition non deterministic 
invariant violated continuous step taken 
operational semantics 
operational view closed mode set variables consists continuous relation pair discrete relation relation theta gives data state mode set flows state 
definition control state mode dx set flows state empty 
require addition set flows ff prefix closed 
domain ffi ffl ffi flow ffl coincides ffl belongs obtained constraints mode relations sm submodes 
data state mode iff permitted active sm sm relation theta describes discrete behavior control transferred relation comprises macro steps mode starting macro step consists sequence micro steps 
micro step transition mode macro step submodes 
relations sm sm macro steps submodes micro execution mode sm sequence form odd sm micro execution definition 
operational semantics operational semantics mode consists control points variables relations operational semantics mode defines transition system states mode 
write dx dx defined interval extend include environment steps 
environment step begins exit point mode ends entry point 
represents changes global variables mode components mode inactive 
private variables mode unaffected environment steps 
environment step 
range fo execution mode path graph en trace semantics able define refinement relation modes consider trace semantics modes 
trace mode projection execution global variables mode 
trace obtained execution replacing transition labels 
denote set traces mode lm definition 
trace semantics modes trace semantics control points global variables set traces lm defining compositional hierarchical semantics decide details behavior lower level components observable higher levels 
approach effect step updates local variables mode observable environment time introduced step observable 
example consider systems idle updates local variable second 
systems different second flows second long 
defining modular semantics way distinction difficult 
agents syntax definition 
agent agent htm ii consists set variables set initial states set top level modes tm top level modes collectively define behavior agent 
set partitioned local variables global variables require tm tm global variables originate mode 
set initial states specifies possible initializations variables agent 
primitive agent single top level mode 
composite agents top level modes constructed parallel composition agents described 
semantics execution agent follows trajectory starts initial states sequence flows interleaved discrete updates variables agent 
execution constructed relations toplevel modes 
fixed initial state mode tm starts state init init non default entry point note long mode control state init continuous steps possible 
discrete step mode come dx bring control state dx 
execution agent htm ii jt start exactly discrete initialization steps 
point top level mode default exit point allowing alternation continuous steps discrete steps de dx choice continuous step involving modes discrete step modes left environment 
discrete step environment step takes control point chosen mode dx de leaves private variables top level modes intact 
discrete step chosen mode happens bringing control back dx 
execution jt sequence tm dx steps initialize top level modes holds ffl defined mode tm step continuous step mode takes part ffl mode tm step environment step ffl tm de dx step discrete step modes 
note environment steps agents modes different 
agent environment step may contain discrete steps agents participate continuous step 
environment mode engage number continuous steps mode inactive 
definition 
trace semantics agents trace execution projected set global variables 
denotational semantics agent consists set global variables set traces 
primitive agent init dx gamma 
trace top level mode 
easy see gamma trace similar statement true agents multiple top level modes 
operations agents variable hiding 
hiding operator set agent variables private 
agent htm ii agent htm ii gamma trace projected set global variables trace variable renaming 
variable renaming replaces set variables agent set variables 
fx xn fy yn indexed sets variables agent set global variables gamma semantics variable renaming operator renaming variables traces agent 
parallel composition 
composition agents jja agent htm ii defined follows compositionality results show semantics compositional modes agents 
set traces mode computed definition mode semantics submodes 
second set traces composite agent computed semantics sub agents 
lack space omit proofs concentrate intuitions results 
compositionality modes order show trace semantics modes compositional need able define semantics mode terms semantics submodes 
compositional trace construction 
show trace mode constructed traces submodes 
theorem 
set traces mode computed set traces submodes closed transition relation set constraints cons 
fig 

compositionality rules modes theorem relies observation 
project trace oe obtain trace projection restrict data states flows global variables replace subsequence oe inactive single environment step convert continuous steps continuous steps removing transitions dx dx de de 
critical point proving observation control state dx active control state dx default exit transitions identity transition mode dx 
mode refinement 
trace semantics leads natural notion refinement modes mode refines global variables control points trace trace definition 
refinement mode mode said compatible compatible modes refines denoted mn lm ln finite index set write fm ig fn ig refinement operator compositional respect encapsulation theorem 
compositionality mode suppose sm sn sm sn 
refinement rule explained visually left 
consider mode remaining submodes transitions viewed environment mode context words context mode holes general submodes interface local variables put constraints update global variables 
contexts said compatible compatible modes compatible holes 
definition 
context traces execution mode context holes path en graph ffl trace obtained projecting execution global variables 
modes set traces context denoted lc refinement defined language inclusion 
context holes set modes write mode obtained filling holes contexts compositional 
theorem 
context compositionality compatible contexts holes set modes compatible holes visual representation rule shown right 
compositionality rules allow decompose proof obligation refinement submodes general context refinement contexts general 
dx de dx de normal normal level level fig 

refinement example consider mode normal place context 
normal differ normal allowing rate computation happen 
transition compute relaxed guard shown 
theorem normal maintain compute normal maintain compute 
controller agent normal replaces normal theorem controller controller 
compositionality agents agent essence set top level modes interleave discrete transitions synchronize flows compositionality results modes lift natural way agents 
operations agents compositional respect refinement 
definition 
refinement agent agent said compatible agent refines compatible agent denoted ab la lb theorem 
agent compositionality compatible agents ab fx xn fy yn indexed sets variables jja jjb example theorem 
hierarchical modular semantics hybrid systems 
proposed semantics compositional respect system architecture parallel agents system behavior modes submodes 
introduced notion refinement system components modes agents showed proposed semantics composition components preserves refinement 
currently working build compositionality results provide assume guarantee proof rules hybrid systems extending results 
proposed semantics modeling language charon toolkit currently development authors 
details see www cis upenn edu charon 

alur courcoubetis halbwachs henzinger ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science 

alur grosu 
modular refinement hierarchic reactive machines 
proceedings th annual acm symposium principles programming languages pages 

alur grosu hur kumar lee 
modular specifications hybrid systems charon 
hybrid systems computation control third international workshop volume lncs pages 

alur henzinger 
modularity timed hybrid systems 
concur eighth international conference concurrency theory lncs pages 
springer verlag 

booch jacobson rumbaugh 
unified modeling language user guide 
addison wesley 

davis goel lee liu liu reekie smyth xiong 
overview ptolemy project 
technical report ucb erl university california berkeley 

deshpande varaiya 
shift formalism programming language dynamic networks hybrid automata 
hybrid systems lncs 
springer 

grosu broy 
modular visual model hybrid systems 
formal techniques real time fault tolerant systems lncs 
springer verlag 

harel 
statecharts visual formalism complex systems 
science computer programming 

henzinger 
formal model embedded components 
tcs theoretical computer science lncs pages 
springer 

hoare 
communicating sequential processes 
prentice hall 

lynch segala vaandrager weinberg 
hybrid automata 
hybrid systems iii verification control lncs pages 

maler manna pnueli 
timed hybrid systems 
real time theory practice rex workshop lncs pages 
springer verlag 

milner 
calculus communicating systems 
lncs 
springer verlag 
