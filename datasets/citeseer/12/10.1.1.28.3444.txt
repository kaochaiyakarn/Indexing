typed representation html xml documents haskell peter thiemann universit freiburg germany email thiemann informatik uni freiburg de february de ne family embedded domain speci languages generating html xml documents haskell 
designed implemented combinator library provides means create modify html xml elements 
resulting html xml code guaranteed formed 
addition library guarantee generated documents valid xml documents html weaker guarantee possible 
haskell meta language de ne parameterized documents map structured documents html xml de ne conditional content extract information documents de ne entire web sites 
combinators support programming convention called style 
programs written style visual appearance similar html xml source code modifying syntax haskell 
key words embedded domain speci language html xml functional programming type classes programming web page isolation hard 
programming entire web site nightmare 
simple html editors help rst task full blown web authoring systems required task 
plethora systems available task 
systems come basic avors 
wysiwyg front purely textual 
pure wysiwyg tools program single line html don know 
disadvantage html code produced tools usually easily modi ed tool 
textual tools require knowledge html add concepts top 
usually come sort previewing feature separate window 
course tools live middle ground extremes 
limited tool hand 
particular systems provide xed means structure documents systems build structures features low level abstraction 
programming languages structuring problems building abstractions 
especially true functional programming language expressive type system haskell 
language structure problem build abstractions top type system provide additional guarantees 
potential generation dynamic web pages 
pages constructed templates computed values results data base queries 
library provides higher order templates free ensures validity generated pages 
initially built prototype library haskell model html able reap bene ts alluded 
domain speci language combinator library 
basic idea build data structure rendered html text 
due type classes haskell type checker guarantees validity generated documents large degree 
exploitation type system key contribution 
haskell interpreter possible interactively create manipulate web pages entire web sites 
haskell stages creation customized styles site maps multi language pages just matter writing haskell code 
library successfully generate dynamic content cgi scripts written haskell 
stage parameterized combinator library respect xml dtd document type de nition 
dtd restricts way elements may nested valid xml document 
similar restrictions built html case xml may vary particular group documents 
de ned implemented translation maps xml dtd custom version library 
version incorporated programs generate valid xml respect particular dtd 
similar way libraries may created di erent versions html xhtml 
version library created html ocial dtd available author webpage www informatik 
uni freiburg de thiemann haskell wasp 
overview section simple examples get glimpse programmer view library 
section explains typed representation html xml elements haskell elements lled contents supplied attributes 
section shows multi parameter type classes enforce particular dtd assembling elements 
section de nes translation dtds instances library 
section discuss problems features library originating limitations haskell type system 
section concludes brief assessment 
discuss related section conclude 
assume familiarity haskell html xml 
strictly speaking library valid haskell program due multi parameter type classes 
number haskell implementations support extension 
examples illustrate library examples 
rst example hello world document 
second example demonstrates construction parameterized document 
example describes prototype implementation simpli ed 
hello world html standard demands document consists head body 
start new document provide head body 
doc elt document doc build document doc head doc body particular code tested january release haskell interpreter hugs mode 
storage space instances increased de ne num insts src prelude 
build document creates new html element components doc head doc body 
moment operator may regarded concatenation operator components 
case component stands particular html element 
head document provide title 
doc head addto head elt elt doc head head title text hello world component doc head stands element contains single element turn contains string hello world 
predicate addto head indicates element put inside element type related head type class addto 
combination tag contents legal html 
example putting text directly element illegal 
try library get type error 
text modeled cdata type 
example head text hello error unresolved overloading type addto head cdata addto head elt elt expression head text hello moment dig deeper type consider predicates addto head cdata addto head 
type class addto governs element contain element 
instance addto elements tag put element tag type error tells instance addto head cdata indicates plain text put directly element html 
body supply minimal content 
doc body addto body elt elt doc body body text ttl text traditional ttl page hr empty address text peter thiemann mailto thiemann acm org ttl hello world 
body creates element contains heading text horizontal rule address 
parameter empty hr indicates sub elements attributes 
address element contains hyperlink constructed auxiliary function 
addto href attrvalue href elt elt elt elt body url body attr href url url link supplied attribute anchor tag 
parameterized body assume put function attr takes attribute name value builds attribute 
just combination tag attribute valid html 
governed class 
example src attribute specify url picture image tag valid tag 
attempt add src attribute tag yields type error example attr src xxx error unresolved overloading type src addto elt elt expression attr src xxx show document function yields rendition document html 
simple service translates character html encoding character special meaning 
example character translated 
example putstr show document doc www org tr html strict dtd hello world hello world 
traditional hello world page 
peter thiemann parameterized documents far shown plain html programming legality checking 
parameterized documents just simple 
suppose want documents look similar structure hello world document preceding section 
abstracting title contents yields html doc ttl contents build document head title text ttl body text ttl contents time look bit closer type html doc html doc addto html string elt body elt document function takes string ttl text title function contents type elt body elt yield document 
contents parameter body transformer maps element element type added element 
restriction indicated addto html predicate 
type elt generic type html elements 
index type denote tag element 
particular case body sense restrict type somewhat 
type general type inferred haskell 
strange type contents function 
turns natural choice type component read group elements 
example type body function body addto elt body elt elt elt rst argument body function transforms empty body element element tag usually body 
second argument container body element put 
predicate addto guarantees combination container content legal 
result type container 
call functional style parameterization container passing style 
facilitates handling groups elements simply composing element functions 
operator reversed function composition empty identity function empty grouping elements function composition exible lists 
due associativity function composition nested arbitrarily 
list representation run eciency problems due repeated concatenation 
addition list representation lose type information individual elements 
nal example parameterized document write function adds signature 
signature attrvalue href addto address addto hr string elt elt signature name url hr id address text name url type signature extract signature container allows addition address hr tags 
pick blocks produce template hello world example considered 
doc addto html addto address addto hr string elt body elt document doc ttl contents html doc ttl contents signature peter thiemann mailto thiemann acm org type doc speci es rst argument string second argument transform body allows addition address hr 
de nition place document rst example reduces just doc hello world text traditional hello world page linked nodes idea structure text set nodes interconnected hyperlinks 
node unique name referred simpli ed version links 
links point previous nodes previous hierarchical level nodes link points node higher hierarchy 
nodes rendered html essentially way 
pattern captured function node html 
rst need discuss basic datatype 
datatype node elds see 
contains name node contents node subnodes administrative elds lled automatically name stub generated les unique number generated le section counter 
author structure specify contents node list subnodes 
function node html translates node corresponding html data structure 
data node node string name node node content contents node node subnodes administrative fields string int name stub number node int section counter type node content string type node node html node node node node document node html node name contents subnodes sec count previous html doc title link link previous previous link hr empty pars contents menu node ref subnodes title show sec count sec count name level length sec count translation node html menu addto list addto list elt li elt elt elt menu ref empty menu ref subnodes menu foldr add node empty subnodes add node node items li ref node items creating menu subnodes standard title heading de ned hyperlinks previous created link 
horizontal rule followed text structured paragraphs pars nally menu immediate subnodes menu 
menu see pars probably interesting 
list subnodes non empty menu creates function adds adds list item subnode 
pars function takes list strings transforms html composite component making paragraph string list 
pars addto string elt elt pars foldr empty prelude map text complete implementation requires simple auxiliary functions main function tree html node node string io takes node data structure possibly enclosing document stub io action 
executing main function results automatically assigning node translating html writing resulting html source texts respective les 
modeling html elements section explain underlying data structures 
main tools type classes phantom types parameterized types type parameter appear right side de nition 
prelude function map quali ed map html tag 
types elements basic data type html elements de nes just standard untyped representation cf 

data element element tag string attrs attr elems element empty tag string attrs attr cdata string doctype doctype string elems element element consists tag type string list attributes type attr list sub elements nested inside current element type element 
empty constructor stands empty elements closing tag sub elements 
constructor cdata represents just string text 
nal alternative element doctype represents document header 
enable typed representation documents introduce wrapper data type elements 
phantom type parameter occur types right side de nition 
data elt elt element addition data type html tag 
types candidates parameter elt 
example tags de ned data html html deriving show data head head deriving show data body body deriving show tag type member type class tag de ned 
member function class maps value type wrapped element type elt way type wrapped elements re ects toplevel tag 
default implementation standard uses element constructor 
elements declared empty dtd override empty 
elements constructed contents attributes initially 
class show tag elt show tag string standard show tag map show standard elt element show tag empty elt empty show tag type class tag choice typed representation html elements unfortunate consequence 
possible construct list contains elements di erent tags 
example element type elt head element type elt body possible construct list containing 
documents examples contained 
fortunately validity element depends tag tags immediate sub elements 
clear element valid sub element discard wrapper collect subelements list type element simple display typed element 
unwrapping toplevel elt constructor standard programming exercise display element html syntax 
types attributes attributes dealt way elements 
attribute name datatype may tag name 
matter html di erent name spaces tag names attribute names attribute values haskell able discriminate uses context 
de nes basic data types classes attributes 
analogously previous representation elements value type attr pair strings name attribute value 
de nes untyped layer lists type attr di erent attributes possible 
type attr implements typed layer 
phantom type parameter 
intended take types class attribute 
data attr attr attr name string attr value string data attr attr attr class show attribute show name string show name map show de nitions attributes type class attribute single member function show name print attribute name 
essence class attribute de nes certain subset elements class show 
example type attribute href data href href deriving show instance attribute href create href attribute href mailto thiemann acm org 
moment assume simple implementation attribute show attr attr attr show name show give re ned type 
assembling html datatypes previous section just provide uniform means accessing modifying printing values type element attr 
provide checks constructed data represents valid html 
validity particular combination tag sub elements attributes governed dtd document type de nition 
dtd gives rise type classes implement validity checks 
section considers subset sgml dtds widely versions html de ned way 
dealing xml dtds analogous 
dtds basically document type de nition contains kinds entries element de nitions attribute de nitions element de nition de nes tag declares sub elements 
attribute de nition de nes admissible attributes element types default values 
typical element de nition form dl de nes name tag dashes state opening tag closing tag written indicate optional dt dd content speci cation 
speci es tags immediate sub elements 
case sub elements may tags dt dd 
content speci cation restricted regular expression operators sequencing alternative repetition repetitions zero occurrences 
empty content speci cation self explanatory 
typical attribute de nition form excerpt action cdata required server side form handler method get post get method submit form cdata application www form form name tag attributes belong action method names attributes cdata get post specify respective types rst third string types second enumeration type elements get post required get application www form specify default values attributes required default supplied 
ignore abbreviation mechanism called entities conditional sections eliminated pre pass 
sgml additional binary operator means occur arbitrary order 
class tag add attr elt attr elt add attr elt attr att elt attrs att attrs admissible attributes element attributes values consider relation elements attributes 
attribute sense particular element 
type class see fig 
de nes single member function add attr type new attribute joins underlying untyped representation element wraps element back typed representation 
instance declarations govern exactly typed attribute admissible particular typed element 
example form element take attributes action method instance form action instance form method instance form attribute de nition previous section know attributes typed 
action attribute take arbitrary string value method attributes take values limited set choices 
attribute method takes get post application www form multipart form data sense 
dtd html states restrictions declaring enumeration types attributes 
fortunately possible restrict formation attributes type class relates attribute name type possible values 
corresponding type class attrvalue member functions just restrict type function de ned 
class attribute show attrvalue attrvalue attr attr attr show name show valid uri hard check 
class tag tag addto add elt elt elt add elt elt elt elems elems type class relating element sub element typing connection instance declarations attrvalue ensures values correct type adopted attributes 
implementations action method attributes 
action simply string user library free de ne type uris create suitable instances classes show attrvalue 
method attribute take values types get post implementing enumeration type 
alternative implementation de nes enumeration type instance show 
instance attrvalue action string data get get deriving show data post post deriving show instance attrvalue method get instance attrvalue method post data multipart instance show show application www form show multipart multipart form data instance attrvalue rst alternative allows greatest amount sharing types names library second alternative avoids proliferation types 
implementation sense 
second alternative preferable attribute name overloaded takes di erent types values depending element belongs 
current implementation employ rst alternative plus name avoid con icts 
elements valid nesting elements governed parameter type class addto shown 
addto type container type content 
default method sub element enters elems eld unwrapped container wraps back elt overridden current version library 
specify element legal content element need declare instance addto 
example instance addto dl dt instance addto dl dd states allowed contents de nition list term de nition list de nition term elements 
corresponds directly html dtd document type de nition de nes tag phrase says little instance declarations insists contains ll return point section 
character data assumed elements constructed tag function 
unfortunately true 
notable exception character data 
data type elements provides constructor cdata 
remains de ne function turns string component right type 
type cdata serves pseudo tag type 
data cdata cdata deriving show instance tag cdata text addto cdata string elt elt text str flip add elt cdata str elt cdata function text takes string turns value type element wraps value type elt cdata 
main document main document constructed function build document elt html elt html elt document build document contents document html contents transforms empty html element contents applies result document constructed document 
just constructs data structure contains document type information html document adds top level html element 
operator just reversed function application flip 
data document document deriving show instance addto document html instance tag document document elt doctype html public dtd html en www org tr html strict dtd interface functions implementation tag functions exported users library straightforward 
implementation element identical 
head addto elt head elt elt elt head elt elt add head rst argument head transformer newly created head element 
second argument elt element transformed head element inserted 
predicate addto originates add function indicate result transforming new head element suitable putting enclosing elt type elt translation section collect various bits pieces show complete translation dtd haskell code 
de nes translation distributed number functions 
functions yield top level haskell de nitions 
dt translates item dtd translates element de nition generating data type tag de ning interface function passing ct tag content tag content tag body tag tag content data deriving show elt elt add ct tag content ct tag empty instance tag empty ct tag content instance tag instance addto sub tag content tag tag type default data deriving show instance attribute instance vt name type tag vt name cdata instance attrvalue string vt name id instance attrvalue string vt name number instance attrvalue integer vt name val valn data deriving show instance attrvalue 
data deriving show instance attrvalue translation dtd haskell ct generates instance declaration tag depends content empty de nitions content part element translates attribute list de nition generating data type instance declarations attribute generating value de nitions vt vt generates data types attribute values necessary instance declarations class attrvalue 
name functions transform name dtd valid haskell identi er starting uppercase character lowercase 
de nition translation glosses problems addressed implementation 
dtd name element tag attribute name attribute value enumerated type 
example html uses names cite dir link title element tags attribute names 
translation de ne single data type names 
name dtd may contain characters allowed haskell identi ers example attribute name equiv html 
mapping valid haskell identi ers particular instance show de ned attribute names data equiv equiv instance show equiv show equiv equiv instance attribute equiv translating html dtd way yields lines roughly haskell code 
lines instance declarations 
lines data declarations remaining lines de ne interface functions 
extensions section consider extensions library powerful increasing extent validity checks 
checks conducted ways static dynamic 
dynamic approach elt data type additional eld containing value encodes current state element 
add attr operation change state way test nal state element closed 
unfortunate thing dynamic approach correctly typed code give rise errors generating html output 
clearly undesirable reveal errors testing 
concentrate static approach additional information encoded types 
interesting see extent haskell type checker perform validity checks compile time 
regular expressions particular feature html dtds library explained far model regular expressions specify contents element 
example declarations specify contents exactly followed exactly contents sequence elements member 
library approximates allowing arbitrary number respectively arbitrary sequence 
approximation practical purposes interesting consider construction library guarantees valid documents 
elements illustrate basic ideas rst consider dynamic approach concentrate static approach 
dynamic approach elt data type additional eld containing regular expression speci es sequence elements legally added 
initially expression content speci cation dtd 
new element added contents add function computes state derivative regular expression approach uses regular expressions set states nite automaton 
addition code checks new content element complete demanding state nal state 
code fragment illustrates idea add elt state elt state state nextstate derivative state tag nextstate error illegal content sequence elt nextstate elems elems error incomplete element static approach encodes states nite automaton data types employs type classes model transition function 
requires type classes functional dependencies extension haskell type system 
speci cally type classes replace class addto class nextstate nextstate class initial final final initial add nextstate elt elt elt add elt elt elt elems elems class nextstate encodes transition function 
functional dependency speci es types determine nextstate type 
data type tag split types required nite automaton encoding contents corresponding element 
prototype implementation member function nextstate remains unused provide debugging information 
class relates initial state tag automation nal states 
fact function maps nal state initial state due functional dependency final initial 
class required test element complete added contents 
function add takes container element type elt new subelement type elt produce updated container element type elt provided nextstate 
untyped implementation remains 
case html element dtd prescribes means head followed body 
corresponding nite automaton states 
initial html state af ter adding head html nal state adding head body html 
data html html deriving show data html html deriving show data html html deriving show instance html html instance head head nextstate html head html nextstate html head html instance body body nextstate html body html nextstate html body html instance declarations nextstate say head nal state tag head value type elt head changes elt html elt html 
body nal state tag body value type elt body changes elt html elt html 
initially expected proliferation states 
turns number states small 
majority tags number states content description form elt 
complicated element table just di erent states 
attributes approach multiple occurrences attributes rejected presence required attributes guaranteed 
practice elt data type receive second phantom variable keep track attribute automaton 
implicitly constructs product element automaton attribute automaton tag 
unfortunately approach practical automata huge number states 
elements take attributes arbitrary order valid element attribute may occur 
automaton checks restriction states 
alternative approach possible inspired record types 
idea encode state type attrs parameters di erent attributes 
type parameters ranges element types data data absent absent data attrs action method attrs action method illustration purposes type attrs considers attributes form 
html de nes attributes total attrs parameters 
element type elt receives additional phantom type parameter 
function creates empty form element type elt form attrs absent absent absent meaning attribute 
keep track presence absence particular attributes functions add add attr receive suitable types implementations remain add attr elt attr elt add addto elt elt elt types mention new type classes 
predicate implements transition function attrs 
current attribute state attribute attribute state 
clearly function depends speci ed functional dependency 
predicate determines attribute state nal state element tag class de nitions instances 
class attribute class tag instance attrs absent method action attrs method instance attrs action absent method attrs action instance attrs action method absent attrs action method instance form attrs method instance cdata attrs absent absent absent instance body attrs absent absent absent instance form states action attribute attributes arbitrary 
cdata body elements take attributes 
nal attribute states contain absent 
example main putstr show document build document body form id error unresolved overloading type form attrs absent absent absent io expression putstr show document build document body form id term rejected suitable instance 
provide required attribute result displayed 
main putstr show document build document body form attr action mailto thiemann www org tr html strict dtd provide attribute twice type error occurs 
main putstr show document build document body form attr action mailto peter attr action mailto peter error unresolved overloading type attrs absent absent action form io expression putstr show document build document body form attr action mailto peter attr action mailto peter presently chosen include check library gives raise instance declarations bumps library size 
exceptions inclusions inclusion declaration element declaration dtd indicates body declared element certain elements admissible regardless content indicator nested elements 
dually exceptions elements regardless content indicator nested elements 
example flow form push button indicates element may appear nested inside element 
likewise elements may nested 
may appear inside elements 
interestingly possible encode exceptions multi parameter type class encoding inclusions require extension type class model 
key idea encode negative information comes type systems records need express absence particular label 
demonstrate approach example 
absence special row types de ne data type elems type parameters di erent element tags 
example amounts data elems form button elems form button types absent signal presence absence particular tags elems type 
type elt receives additional parameters parameter parameter 
parameter re ects tags element parameter re ects tags siblings element 
instantiated particular instance elems type 
type class exception governs propagation information type add function 
add addto exception elt elt oo elt class exception tag tag instance exception elems form button elems absent form button instance exception form elems button elems absent button entity inline flow macro expand content descriptions regular expressions 
instance exception button elems form elems absent absent absent absent instance exception elems form button elems absent absent absent absent instance declaration says elements contain type corresponding variable instantiated colliding type absent required exception class 
instance declaration form quite similar 
remaining elements form button inherited 
instance declaration button says form button 
inclusions type add restrictive 
necessary express information related addto allowed enclosing inclusion declaration disallowed enclosing exception declaration 
allowance formalized exception class type class additional type variables remains problem expressing disjunction type class system 
presently implemented type checkers deal conjunctions class predicates 
progressing html xml solve problem xml support exceptions anymore 
fact xhtml side conditions mentioned informally expressible xml dtd 
current library implements inclusions exceptions 
necessary due imminent transition xml xhtml 
second render library useless due enormous increase size caused instance declarations type parameters number tags supported html demonstrated attributes 
related tkgofer toolkit building graphical user interfaces gofer tcl tk 
employs multi parameter constructor classes relate con guration parameters widgets 
type classes statically avoids errors detected dynamically execution time 
idea inspired approach handling attributes class 
approach simpler fewer type classes learn parameterization constructors 
addition type check way html elements widgets put 
libraries cgi programming standard interface generating dynamic documents hanus hughes meijer 
meijer provides thin layer abstraction top raw access cgi parameters convenience functions generating di erent types output 
top basic functionality hughes sophisticated method dealing interactions generalization monads 
previous works deal haskell hanus library implemented functional logic language curry 
introduces powerful abstractions allow speci cation event handlers interactions taken html document 
works attempt provide untyped representations html documents 
believe complementary works gained combination 
type classes structuring tool various functional hardware modeling frameworks 
employ type classes conventional way structure operations may applied certain values 
contrast class instance declarations simple logic program fact nite automaton rule invalid programs 
wallace runciman propose alternative ways haskell represent xml documents 
type encoding maps xml dtds directly specialized haskell data types sacri cing exibility 
addition haskell data types express subset content models elements encoding su ers similar problems simple model 
elaborate type structure address shortcomings cf 
sec 
haskell data types extended way 
addition wallace runciman generic encoding represents documents similar way untyped encoding developed combinator library processing xml data encoding 
encoding impose validity constraints generated processed documents 
possible combine representation typed layer 
result highly exible xml processing library admits generic operations searching restructuring admits guaranteed typed way dealing documents 
logic programming world toolkits generating html pages 
pillow toolkit allows easy creation documents including cgi functionality 
widely connect logic programs www 
ers tighter integration includes client side scripting 
ers advanced typing features 
facility sandholm schwartzbach similar goals 
de ne language type system dynamically composable documents scratch prove soundness standard ow analysis techniques 
contrast fully relies type system haskell standard extensions parameterization facilities exploit full power functional programming 
facilities provide additional safety html forms 
facilities extend mawl 
mawl admits rst order document templates holes lled data items document templates 
addition repetition construct ll hole repeatedly elements list 
previous rst attempt library 
retrospect implementation considered exible unnecessary complicated 
particular previous implementation easily extended generic operations ones wallace runciman 
addresses shortcomings 
designed implemented family convenient embedded domain speci languages meta programming web pages web sites haskell 
haskell type classes particular multi parameter classes functional dependencies instrumental construction 
introduced container passing style means concisely construct abstractions fragments web pages 
resulting programming style natural yields visually appealing programs 
library surprisingly easy intuitive 
possibility commonly patterns pays enormously bene ts visible examples shown section 
type checking capabilities simple version strict dtd checking sucient captures common errors element wrong place 
initial experiments elaborate static scheme outlined section yield quite natural precise typings 
negative side type errors fairly hard users deeply haskell 
nice type errors ltered translated informative casual users library 
users appreciate syntax closer html 
subject investigation 
sebastian schulz testing library helping construction 
david atkinson thomas ball michael benedikt glenn bruns kenneth cox peter kenneth 
experience domain speci language form services 
conference domain speci languages santa barbara ca october 
usenix 
koen claessen mary sheeran singh 
lava hardware design haskell 
paul hudak editor proc 
international conference functional programming pages baltimore usa september 
acm press new york 
tim bray jean paoli michael sperberg macqueen 
extensible markup language xml recommendation 
www 
org tr rec xml feb 
janusz brzozowski 
derivatives regular expressions 
journal acm 
daniel cabeza manuel hermenegildo 
www programming computational logic systems pillow ciao library 
www clip dia fi upm es software pillow pillow www pillow www html march 

www com 
ralf 
website meta language wml 
www 
com sw wml 
michael hanus 
server side web scripting curry 
workshop constraint logic programming software engineering london july 
haskell non strict purely functional language 
www 
haskell org definition december 
html speci cation 
www org tr html december 
john hughes 
generalising monads arrows 
science computer programming may 
software 
www com 
mark jones 
quali ed types theory practice 
cambridge university press cambridge uk 
mark jones 
hugs online embracing functional programming 
www haskell org hugs june 
mark jones 
type classes functional dependencies 
gert smolka editor proc 
th european symposium programming volume lecture notes computer science pages berlin germany march 
springer verlag 
seng wai andrew davison 
logic programming world wide web 
proceedings th acm conference hypertext hypertext pages washington dc usa march 
john matthews john launchbury byron cook 
microprocessor speci cation hawk 
ieee international conference computer languages iccl chicago usa may 
ieee computer society press 
erik meijer 
server side web scripting haskell 
journal functional programming january 
microsoft 
microsoft 
www microsoft com 
fusion 
www com 
ousterhout 
tcl tk toolkit 
addison wesley 
pc magazine 
web authoring tools 
www com features open htm january 
simon peyton jones mark jones erik meijer 
type classes exploration design space 
john launchbury editor proc 
haskell workshop amsterdam netherlands june 
yale university research report yaleu dcs rr 
john krishnamoorthy 
simple html editor xhtml 
www cs rpi edu november 
didier emy 
typing record concatenation free 
proc 
th annual acm symposium principles programming languages pages albuquerque new mexico january 
acm press 
anders sandholm michael schwartzbach 
type system dynamic web documents 
tom reps editor proc 
th annual acm symposium principles programming languages pages boston ma usa january 
acm press 
internet software technologies 
pro 
www ist ca 

org 
peter thiemann 
modeling html haskell 
practical aspects declarative languages proceedings second international workshop padl volume lecture notes computer science pages boston massachusetts usa january 
ton wolfram schulte 
design functional gui library constructor classes 
psi andrei ershov second international memorial conference perspectives system informatics volume lecture notes computer science pages russia june 
springer verlag 
malcolm wallace colin runciman 
haskell xml generic combinators type translation 
peter lee editor proc 
international conference functional programming pages paris france september 
acm press new york 
mitchell wand 
type inference record concatenation multiple inheritance 
proc 
th annual symposium logic computer science pages paci grove ca june 
ieee computer society press 
appear information computation 
xhtml extensible hypertext markup language 
www 
org tr xhtml january 

