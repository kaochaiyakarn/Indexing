compile time path expansion lore jason mchugh jennifer widom stanford university db stanford edu www db stanford edu semistructured data usually modeled labeled directed graphs query languages declarative path expressions specify traversals graphs 
regular generalized path expressions regular expression operators specify traversal patterns 
regular path expressions typically evaluated run time exploring database graph 
database includes structural summary dataguide alternative approach expand regular path expressions compile time structural summary reducing run time overhead database exploration 
describes algorithms compile time regular path expression expansion context lorel query language semistructured data reports performance results conducted lore system illustrating benefits compile time expansion 
efficiently storing querying semistructured data data need adhere fixed schema emerged important topic database research community abi bun suc 
researchers addressed design query languages semistructured data aqm bdhs ffls implementation prototype database management systems semistructured data ffls mag query optimization issues related semistructured data path expressions bdhs fls fs mw 
emergence xml proposed standard exchanging information web lb remarkable similarity xml typical models semistructured data support query languages semistructured data performance queries large semistructured databases increasing importance 
xml semistructured data stored database system modeling data labeled directed graph 
queries path expressions describe traversals labeled edges graph 
efficient evaluation query hinges choosing efficient traversal schemes set path expressions query mw 
regular generalized path expression uses regular expression operators specify possibly recursive path pattern 
regular path expressions particularly useful structure data irregular changes completely known user 
modeling semistructured data labeled graphs querying language regular path expressions common research semistructured data bdhs ffls mag 
run time evaluation regular path expressions expensive 
explore improving efficiency performing compile time expansion regular path expressions structural summary dataguide gw current database 
compile time expansion incurs cost exploring structural summary rewriting query eliminate significant amounts unnecessary database exploration run time 
implemented algorithms lore dbms semistructured data mag preliminary performance results confirming benefits approach reported 
similar spirit details fs 
fs cross product computed graph schema summary database small reside memory representation query 
cross product expanded version query name library movies movie proceedings conference name basedon books book conference author title cites book title author name address city state age actor city state name semistructured library database produced expected execute efficiently original 
algorithm traverses dataguide corresponds roughly graph schema order rewrite query 
require dataguide small full cross product formed 
require dataguide reside memory consider cost incurred portions dataguide read disk query rewrite 
address additional query rewrites covered fs 
setting examples conducted context lore database management system designed specifically storing querying semistructured data mag 
lore data model object exchange model oem pgmw 
data model thought labeled directed graph objects vertices edges representing object subobject relationship 
details oem lore mag 
query language supported lore lorel aqm 
lorel extension oql supporting features declarative regular path expressions traversing semistructured data 
semistructured data need conform predefined schema lore introduced dataguides gw replace traditional schema dynamically generated structural summary database 
dataguide stores information unique label paths current database graph 
shows sample oem database library information atomic values omitted 
sample data primarily show representative kind information exception book conference edges graph serves dataguide running example 
course actual database including experiments large number books movies conferences lorel path expressions lorel path expression specifies traversal database graph 
example library 
books book path expression binds variable books subobjects library object variable book subobjects object bound path expression sequence path components component triple form subpath 
source variable variable name 
name uniquely identifies single object entry point graph 
subpath single label subpath regular expression operators decomposed 
regular path expression path expression path components contains subpath regular expression operator applied 
example path component hx yi bind descendents reachable edges labeled 
path component hx yi bind cites subobjects addition kleene closure alternation operators lorel includes operators closure optionality subpath match edges label 
examples lorel queries containing regular path expressions intended database 
select library cites sequel select library proceedings title cites select library author exists title stand query returns database objects objects influenced influenced means exists path length cites sequel edges 
second query returns titles objects proceedings subgraphs entries cite 
note bound descendent title cites subobjects order satisfy bindings variables third query includes sql style operator returns authors objects stand title 
compile time rewrites introduce schemes eliminating regular path expressions compile time path expansion eliminating operators alternation elimination eliminating operators 
path expansion dataguide replace regular expression operators alternations representing possible paths current database 
rewrite algorithm effectively executes entire regular path expression dataguide records label paths seen 
lorel allows shortcuts eliminate variables convenient practice 
lore implementation shortcuts transformed fully instantiated path components describe 
lorel supports label wildcards fact abbreviation matches label aqm 
label wildcards expanded alternations efficiently lore preprocessor considered 
dataguide typically smaller database efficiently replace regular path expression operators actual set possible matching paths 
performing replacement eliminate unnecessary exploration full database run time query execution plans selected lore cost optimizer mw 
path expansion increase query execution time plan including plans exploit lore dataguide path indexes gw 
cycles handled carefully semantics lorel traverse data cycle evaluating path expression closure operator semantics preserved eliminate closure compile time 
note assuming compile run scenario concurrency control ensuring structure database remains stable compilation execution 
obviously dataguide change compile time run time approach apply 
example consider subpath library author example query 
path component xi binds descendent named object library 
path restricted second path component hx author yi 
performing compile time expansion ignore run time database paths don lead author subobject 
example applying path dataguide determine match proceedings conference books book movies movie basedon yielding equivalent path expression library proceedings 
conference books movies movie basedon author 
expansion paths proceeds similarly 
expanding regular path expression compile time dataguide guaranteed visit run time subset objects visited original path expression regardless query execution strategy 
dataguide small resides memory expansion fast certainly worthwhile 
dataguide large may reside partially completely disk obvious cost associated compile time expansion plus cost evaluating expanded path expression run time evaluation original path expression 
section empirically evaluate expansion tradeoffs 
preliminary ideas efficient data structure stores certain path statistics tuned enable optimizer quickly choose perform compile time path expansion 
simple heuristics say size dataguide sufficient detailed coverage topic scope 
alternation elimination eliminate alternation operators regular path expressions introducing union operator disjunct clause 
alternation appears clause library book movie title rewrite clause library book union library movie title 
transformation applied times necessary union implemented properly introduce computational overhead execution strategies 
alternation replaced union consider query rewrite select book union movie 
select book 
union select movie 
replaced union expression clause queries connected union 
section give examples showing transformation advantageous 
alternation appears clause exists subject keyword semistructured rewrite union transfor path compile time query total execution expression expansion execution original path library name library title library books book name library movies title library movies movie actor table execution times small database path compile time query total execution expression expansion execution original path library title library books book name library movies title library movies movie actor table execution times larger cyclic database mation rewrite disjunction exists subject semistructured exists keyword semistructured 
note general introduce disjunction clause expressed disjunctive normal form care taken ensure quantification scope remain correct 
importance transformation allows take advantage index created keyword objects corresponding index exists subject objects vice versa 
implementation performance section empirically evaluate benefits compile time rewrites described 
extended lore system expand path expressions containing dataguide 
lore currently support general query rewrite mechanism implement union rewrite described section hand fed original rewritten queries order evaluate effectiveness transformation 
path expansion set experiments compare execution times path expressions containing path expansion 
recall matches label path length 
synthetic library databases similar 
atomic values unimportant concerned primarily paths database 
database generator creates graphs parameters number books average number authors percentage books tables execution times seconds path expression evaluation path expansion 
cases final query execution strategy top mw 
execution strategies show different levels improvement technique degrade performance final query execution plan 
numbers table generated running lore small library database objects edges 
database books authors actors movies 
data tree structured cycles graph key query select library books book select library books book title union select library books book keyword table key table query execution time notes index 
index created keyword 
index title 
index created title 
index keyword 
index created title keyword 
index created title keyword 
table execution times alternation elimination dataguide consists objects 
indexes 
execution times table database contains objects edges books authors actors movies 
data follows general form database data generally cycle dataguide double size dataguide 
indexes 
tables show compile time path expansion reduce execution time 
databases dataguides time perform expansion cases actual query execution time 
seen essentially benefit expanding operator appears path row table case expansion prune paths consideration run time 
small difference query execution times due efficient implementation physical scan operator transformed path expression 
clearly construct database large dataguide cost exploring dataguide outweigh run time benefit compile time expansion 
example generated database dataguide size close size database due unstructured data 
time execute sample regular path expression seconds faster time required expand path expression seconds execute expanded path expression seconds 
alternation elimination test effectiveness replacing alternation union ran experiments reported tables 
table shows original rewritten queries 
transformation alternation clause union operator subsequent query rewrite disjunction performance improvement significant 
table shows execution times seconds variety indexes smaller library database 
experiments table show situation beneficial eliminate alternation 
lore value indexes may quickly locate atomic objects specific values incoming labels objects incoming label title value 
traverse backwards graph match path expression evaluated 
details see mw 
example queries value index exists title keyword objects extremely difficult optimizer exploit just index evaluation query query take advantage single index exists 
example index keyword objects rewritten query ran faster original 
speedup title index typically keyword subobjects movie usually title requiring search title index 
indexes optimizer selects sophisticated query execution strategy combination traversing graph upwards indexed values queries significantly faster execution times shown lines table 
general terms advantage transforming alternation union expression queries connected union redundant path traversals may occur rewritten query subqueries optimized independently different execution strategies 
transforming alternation disjunction particular example dramatic effect 
general principle separating execution strategies applies path expression operands alternation longer 
simple way decide rewritten query advantageous send queries physical query plan generator compare estimated cost mw 
intend investigate efficient heuristics decision 
abi abiteboul 
querying semistructured data 
proceedings international conference database theory pages delphi greece january 
aqm abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
journal digital libraries april 
bdhs buneman davidson hillebrand suciu 
query language optimization techniques unstructured data 
proceedings acm sigmod international conference management data pages montreal canada june 
bun buneman 
semistructured data 
proceedings sixth acm sigact symposium principles database systems tucson arizona may 
tutorial 
ffls fernandez florescu levy suciu 
query language web site management system 
sigmod record september 
fls florescu levy suciu 
query optimization algorithm semistructured data 
technical report laboratories june 
fs fernandez suciu 
optimizing regular path expressions graph schemas 
proceedings fourteenth international conference data engineering pages orlando florida february 
tang 
cost selection path expression processing algorithms object oriented databases 
proceedings second international conference large data bases pages bombay india 
gw goldman widom 
dataguides enabling query formulation optimization semistructured databases 
proceedings third international conference large data bases pages athens greece august 
lb light bray 
presenting xml 
sams indianapolis indiana 
mag mchugh abiteboul goldman quass widom 
lore database management system semistructured data 
sigmod record september 
mw mchugh widom 
query optimization semistructured data 
technical report stanford university database group august 
document available www db stanford edu pub papers qo ps 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proceedings eleventh international conference data engineering pages taipei taiwan march 
suc suciu 
semistructured data xml september 
manuscript draft 

