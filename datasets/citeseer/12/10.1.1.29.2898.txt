contract soundness object oriented languages robert bruce findler rice university computer science department main ms houston tx usa matthias felleisen northeastern university rice university checking pre post conditions procedures methods runtime helps improve software reliability 
procedural world pre post conditions straightforward interpretation 
procedure pre condition doesn hold caller failed establish proper context 
post condition doesn hold procedure failed compute expected result 
object oriented world checking pre post conditions methods called contracts context problems 
methods may overridden sufficient check pre post conditions 
addition contract hierarchy checked ensure contracts overridden methods properly related contracts overriding methods 
class hierarchy may violate substitution principle may longer true instance class substitutable objects super class 
study problem contract enforcement object oriented world foundational perspective 
specifically study contracts refinements types 
pushing analogy state prove contract soundness theorem captures essential properties contract enforcement 
theorem illustrate existing tools suffer fundamental flaw improved 

checking pre post conditions procedures important technique improving reliability software 
available languages including ada java :10.1.1.16.800:10.1.1.31.7982
languages including eiffel sather blue supported runtime checked pre post condition contracts inception 
eiffel community developed design contract programming discipline idea 
languages enforcing pre post condition contracts acm conference object oriented programming systems languages applications 
oopsla simple effective matter 
functions annotated pre post conditions 
pre condition violated function caller blame post condition violated function blame 
rosenblum study demonstrates effectiveness contracts world 
object oriented languages contracts annotate method signatures monitoring contracts complex procedural languages 
additional complexity due subtyping relationships heart object oriented programming 
instances type may substituted contexts expecting supertype behavior objects type related behavior objects supertype 
contracts represent key aspects object behavior contracts type related contracts supertype 
theory object substitutability exists complementary theory contract monitoring missing result existing contract monitoring tools flawed 
starting point theory run time contracts theory type systems 
major role contracts specify properties similar types checked type checker 
example java method may accept integer intending array index certain range 
java type system express range constraint java programmer resort contracts state fact 
additionally type systems benefited developed theory 
particular type systems satisfy type soundness theorem ensures type checker respects language semantics 
observations conclude contract checkers benefit similarly developed theory 
develops formal foundation theory contracts 
discuss contracts respect program behavior give semantics defines contract hierarchies interpreted 
additionally state prove contract soundness theorem 
theorem shows contract checker discovers invalid contract hierarchies method calls returns 
consists sections 
section motivates contract checking theorem explains intuitively 
section presents syntax type checking semantics contract elaborator contract java small model sequential java extended pre post condition contracts 
section states contract soundness theorem proves holds con tract elaborator section 
section discusses existing contract checking tools explains exception jass satisfy contract soundness theorem :10.1.1.16.800:10.1.1.16.800:10.1.1.31.7982
section briefly discusses implementation 
section summarizes results 

behavioral subtyping programs subtyping checking pre post conditions simple matter 
consider code implements wrapper class floats class float float getvalue 
float sqrt 
pre getvalue post math abs sqrt sqrt getvalue case pre condition sqrt ensures method applied positive numbers 
post condition promises square result certain tolerance original input 
tradition name method stand result body post condition 
case sqrt method pre post conditions fully specify correctness 
practice programmers pre post conditions specify entire behavior method programmers contracts refine method type specifications 
consider program interface iconsole int getmaxsize post getmaxsize void display string pre length getmaxsize class console implements iconsole int getmaxsize 
post getmaxsize void display string 
pre length getmaxsize iconsole interface contains methods types pre post conditions small window display message console class provides implementation iconsole 
getmaxsize method returns limit message size display method changes console visible message 
postcondition getmaxsize pre condition display merely guarantee simple invariants console ensure correctness 
long programs inheritance contract checking merely involves evaluating conditions programmer stated 
programs employ inheritance contract monitoring requires sophistication 
notion behavioral subtyping instance subtype substitutable instance supertype 
pre postcondition contracts behavioral subtyping mandates precondition method type implies pre condition method subtypes 
similarly requires post condition subtype implies corresponding postcondition original type 
contract checker objectoriented languages verify pre condition postcondition hierarchies meet behavioral subtyping requirement 
example consider extension console class runningconsole extends console void display string 
super display string substring 
getmaxsize 
pre true display method creates thread displays portion string fits console updates console display scrolling message character character 
precondition display runningconsole true implied pre condition console runningconsole behavioral subtype console 
pre condition method turns subclass behavioral subtype 
concretely extensions console class may pre conditions implied supertype precondition 
consider example class prefixedconsole extends console string return void display string super display pre length getmaxsize length case pre condition prefixedconsole implied pre condition console 
accordingly code written accept instances console may violate pre condition prefixedconsole violating pre condition console 
clearly code expects instances console blamed code fulfilled obligations meeting console pre condition 
blame lie programmer prefixedconsole failing create behavioral subtype console 
addition classes interfaces describe type hierarchy 
class type hierarchy interface type hierarchy specify hierarchy behavioral subtypes 
blame malformed hierarchy fall author code contains interfaces 
consider part java program written guy interface void int pre interface extends void int pre written james class implements void int 
pre public static void main string argv new imagine different programmers guy james wrote different parts program 
james main method creates instance type invokes 
contracts perfectly valid input 
contract illegal input 
behavioral subtyping condition tells subtype substitutable context 
true accepts fewer arguments particular accept 

guy claim extends wrong 
method call james code fails blame contractual violation lie guy 
preceding examples suggest contract checking systems object oriented languages signal kinds errors precondition violations post condition violations hierarchy errors 
distinguishes contract checking procedural world contract checking object oriented world 
hierarchy error signals subclass extending interface behavioral subtype hierarchy pre conditions hierarchy post conditions malformed 
goal develop theoretical framework state prove claims contract monitoring system java 
reasoning develop framework analogy milner type systems type soundness theorems 
type soundness theorem parts 
specifies kind errors runtime exceptions evaluation typed program trigger 
second implies certain properties hold evaluation subexpressions 
example addition operation ml program receive numbers ml programs terminate errors due misuse addition operation 
similarly array indexing operation receive integer index integer may array range 
ml program may terminate due misuse array primitive 
show contract checking system satisfy contract soundness theorem 
type soundness theorem contract soundness theorem spells properties 
states kind errors evaluation monitored program may signal 
second implies specified hierarchy interfaces classes satisfies implications stated pre postconditions overridden methods 
formalize intuitions develop model java contracts form calculus 
calculus specifies syntax type system semantics small java language mechanisms simple contract specifications 
calculus specify contract checking translation full language small kernel 
calculus state prove contract soundness theorem 

contract java contract java extends classic java calculus pre post condition contracts methods :10.1.1.23.8118
section presents contract java calculus syntax semantics 
section presents syntax type checker 
section focal point section presents contract elaborator 
section presents operational semantics 
syntax type checking contains syntax contract java 
syntax divided parts 
programmers syntax write programs 
type checker elaborates syntax syntax contains type annotations evaluator contract compiler 
contract compiler elaborates syntax syntax 
elaborates pre post conditions monitoring code result accepted evaluator 
program sequence class interface definitions followed expression represents body main method 
class definition consists sequence field declarations followed sequence method declarations contracts 
interface consists method specifications contracts 
contracts arbitrary java expressions type boolean 
method body class indicating method overridden subclass class instantiated 
java body method just expression result result method 
java classes instantiated new operator class constructors contract java instance variables initialized null 
view forms represent java casting expressions capability binding variables locally 
code examples omit extends implements clauses appear 
type checker translates syntax syntax 
inserts additional information underlined contract elaborator evaluator 
support contract elaboration method calls annotated type object method called 
support evaluation field update field annotated class containing field calls super annotated class 
contract elaborator produces syntax evaluator accepts 
pre post conditions removed interfaces classes inserted elaborated program 
syntax adds constructs language 
constructs signal contract violations 
carried study complex contract specification language plain java expressions suffice express important contracts 
additionally single language pre conditions post conditions expressions simplifies presentation proofs 
pre post condition contracts constructors treated contracts methods overridden 
defn defn class extends implements field meth interface extends imeth field fd meth md arg body pre post imeth md arg pre post arg var body new var null fd fd md super md view binding true false binding var var variable name class name object interface name empty fd field name md method name boolean surface syntax defn defn class extends implements field meth interface extends imeth field fd meth md arg body pre post imeth md arg pre post arg var body new var null fd fd md super md view binding true false binding var var variable name class name object interface name empty fd field name md method name boolean typed contract syntax defn defn class extends implements field meth interface extends imeth field fd meth md arg body imeth md arg arg var body new var null fd fd md super md view binding true false return binding var var variable name class name object interface name empty fd field name md method name boolean core syntax contract java syntax contracts compiled away expressions shape return mark method returns 
type indicates type object method invoked parallel type annotations method calls class name class defined invoked method 
standard java contract java programmer write return expressions program 
evaluator introduces return expressions executes program 
annotations statement proof contract soundness theorem 
important relations syntax prep defines subtyping relationship 
type subtype type program written conditions holds type classes derived interfaces extension written class interface implements implements interface derived class relations prep relate expressions pairs methods types 
expression pre condition program prep expression appears program declared precondition similarly expression postcondition program 
contract elaboration contract checking modeled translation called syntax syntax 
contract checking triggered method calls need understand deals 
consider code fragment iconsole 
display crunch time 
programmer know kind console represents run time ensure preconditions display iconsole specifies 
code produces method call test preconditions display iconsole 
test fails author method call mistake 
test succeeds contract monitoring code check ancestor portion class interface hierarchy determined class tag 
hierarchy checks ensure precondition overriding method implies precondition overridden method postcondition overridden method implies postcondition overriding method 
perform forms checking adds new classes check subtype hierarchy inserts methods existing classes check pre post conditions 
method class elaborator inserts wrapper methods type instances class 
wrapper methods perform pre post condition checking call hierarchy checkers 
additionally elaborator redirects method call invokes appropriate wrapper method static type object method invoked 
invocation elaborator inserts display iconsole wrapper method console class console class cast iconsole 
additionally rewrites call display method call display iconsole method type iconsole 
display iconsole method checks iconsole pre condition pre condition hierarchy instantiated class upwards 
display console method calls original display method 
returns display iconsole method checks iconsole post condition post condition hierarchy instantiated class upwards 
rest subsection presents elaborator concretely example console classes interfaces abstractly judgements define elaborator 
formally contract elaborator defined judgements program compiles program defn defn defn post defn compiles defn checkers defn post imeth imeth imeth compiles imeth meth meth meth compiles meth class meth meth meth checks pre post conditions meth blames contract violations 
compiles blames contract violations 
imeth pre imeth imeth checks hierarchy pre condition imeth imeth post imeth imeth checks hierarchy post condition imeth judgement program elaboration judgement 
judgement builds definitions definition original program 
derived original definition 
second third pre post condition hierarchy checking classes respectively 
judgements erases interface method contracts 
judgements produce annotated class 
ml tradition word type refer static type determined type checker 
words class tag refer called dynamic run time type 
defn imeth imeth imeth pre meth pre imeth post meth post interface extends 
imeth 
imeth interface extends 
imeth 
imeth class check pre imeth pre 
imeth pre class check post imeth post 
imeth post defn meth meth meth pre meth pre meth post meth post meth method class extends implements 
meth 
class extends implements 
meth 
meth method 

class check pre extends object meth pre 
pre class check post extends object meth post 
post wrap prep md md md 

md 
string cname new check pre md 
md md 
new check post md dummy true md 
md cname pre md var 
var pre post pre boolean md var 
var new check pre md var 
var 
res res res res post md var 
var pre post post boolean md string tbb boolean md var 
var res res res new check post md res md var 
var 
tbb call md 
md 
blame compilation constructs wrapper methods check contracts 
judgement re writes methods erases class method contracts 
judgement rewrites expressions method calls re directed wrapper methods type call 
final judgements pre post produce methods pre post condition hierarchy checkers 
important clauses judgements 
remainder section illustrates judgements console example section 
defn rule defn rule show definition original program generates definition additional classes 
definition corresponds original definition contracts erased case classes wrapper methods inserted 
wrapper methods check pre condition postcondition violations invoke hierarchy checkers 
elaborator inserts wrapper methods types instances class 
consider console class section 
elaboration adds wrapper methods getmaxsize instances console types iconsole console 
elaborator adds wrapper methods display class console implements iconsole int getmaxsize 
post 
int getmaxsize iconsole 
int getmaxsize console 
void display string 
pre 
void display iconsole 
void display console 
similarly runningconsole prefixedconsole adds methods instances classes may take types 
runningconsole class runningconsole extends console int getmaxsize 
post 
int getmaxsize iconsole 
int getmaxsize console 
int getmaxsize runningconsole 
void display string 
pre 
void display iconsole 
void display console 
void display runningconsole 
wrap rule specifies shape wrapper methods 
uses program class wrapper method appears type method called method header md 

wrapper method accepts arguments original method plus extra argument naming class program text contains method call 
wrapper method checks pre condition fails blames calling context establishing required pre condition 
pre condition succeeds wrapper calls pre condition hierarchy checker pre condition hierarchy checker traverses class interface hierarchy making sure subtype behavioral subtype pre conditions 
hierarchy checking succeeds wrapper method calls original method 
method returns saves result variable md checks post condition calls post condition hierarchy checker 
pre condition hierarchy checkers postcondition hierarchy checker ensures subtype behavioral subtype post conditions 
post condition checking succeeds wrapper method delivers result wrapped method 
additionally wrap rewrites contract expressions pre post condition methods invoked contracts checked 
console display console wrapper method 
void display console string string cname length getmaxsize new check console pre display display display new check console post display dummy true display cname original console class display method post condition expression wrap rule eliminated 
variable display bound result method postcondition 
arguments check console post initial values accumulators explained 
second third classes definitions introduced defn defn rules hierarchy checkers 
hierarchy checker responsible checking portion hierarchy combining result rest hierarchy checkers 
pre post condition checking hierarchy checking begins class tag object static type object 
example consider hierarchy diagram code fragment new invoked hierarchy checkers ensure hierarchy formed 
instances cast boxed portion hierarchy checked 
invoked hierarchy checking classes ensure pre condition implies pre condition pre condition implies pre condition 
similarly returns post conditions checked ensure post condition hierarchy formed 
omit annotations inserted type checker clarify presentation 
qk qk example hierarchy diagram running console example classes generated check iconsole pre check console pre check runningconsole pre check prefixedconsole pre check iconsole post check console post check runningconsole post check prefixedconsole post 
hierarchy checking classes method method original class 
methods hierarchy checking classes names methods original class purpose different 
hierarchy checking methods check pre post condition method 
combine result results rest hierarchy checking determine hierarchy violations 
example hierarchy checking class contains getmaxsize method display method 
pre rule produces pre condition hierarchy checker md method interface resulting method accepts arguments md accepts plus binding 
argument passed contract checking code test state object 
hierarchy checking method returns result pre condition md recursively calls hierarchy checkers immediate super interfaces combines results disjunction 
second evaluates pre condition md checker ensures hierarchy formed checking pre conditions super methods imply current pre condition 
implication holds checker returns res value pre condition 
implication hold hierarchy checker method signals hierarchy error blames extending interface 
rule classes analogous 
pre condition checkers runningconsole console display methods class check runningconsole pre extends object boolean display runningconsole string new check console pre display res true res res res runningconsole class check console pre extends object boolean display console string new check iconsole pre display res length getmaxsize res res res console post rule specifies post condition hierarchy checking method 
post condition hierarchy checker similar precondition checker 
returning truth value condition post condition checker accumulates results conditions argument 
accumulator fashion means post condition checker uses recursive traversal type hierarchy pre condition checker checks implications reverse direction 
tbb argument accumulator 
represents subclass blamed implication hold 
mentioned initial values accumulators tbb dummy false respectively 
post condition checker particular class blames subclass hierarchy violation postcondition checker assigns blame 
initial false passed guarantees blame assigned checker dummy ignored 
additionally highest class interface hierarchy blamed possibly violate hierarchy 
code post condition hierarchy checker getmaxsize runningconsole console class check runningconsole post extends object boolean getmaxsize string tbb boolean runningconsole int getmaxsize res getmaxsize res res new check console post getmaxsize runningconsole res getmaxsize tbb class check console post extends object boolean getmaxsize string tbb boolean console int getmaxsize res getmaxsize res res new check iconsole post getmaxsize console res getmaxsize tbb call rule shows elaboration re writes method calls 
method call call wrapper method type object method invoked 
example code fragment iconsole 
display crunch time rewritten iconsole 
display iconsole crunch time gathers code fragments running example 
left column contains proper interfaces classes enriched wrapper methods 
right column contains hierarchy checking classes plus translation method call 
evaluation operational semantics contract java defined contextual rewriting system pairs expressions stores 
evaluation rule shape reduction rule name store mapping objects class tagged field records 
field record mapping field names values 
consider configurations expressions stores equivalent renaming variables store bind free variables expression 
expression program defined 
complete evaluation rules 
example call rule models method call replacing call expression body invoked method syntactically replacing formal parameters actual parameters 
dynamic aspect method calls implemented selecting method run time type object store 
contrast super reduction performs selection class annotation statically determined type checker 
call super expressions reduce return expressions 
return expressions markers signal post condition contract violations occur 
inserted method call super call reductions statement contract soundness theorem 

contract soundness contract monitoring system properties 
minimum preserve semantics programming language 
second contract monitoring guarantee certain properties evaluation program 
contracts model arbitrary java expressions may side effects raise errors may affect behavior underlying program 
considering role contracts undesirable 
restrict attention contracts effect free 
definition effect free expression 
expression effect free store free variables included dom exists value 
key definition effect free expressions evaluate value changing store signalling error 
mean allocates 
garbage collection modeled non deterministic reduction step contract expression may allocate long newly allocated objects garbage evaluation contract produces value 
kleene equality supplementary definition equality programs 
informally states terminating programs equivalent produce answer error 
additionally non terminating programs equivalent 
definition kleene equality 
programs kleene equal conditions holds store value error str error str stores error message str 
definition specifies coherence 
intuitively coherence guarantees contract checker preserves meaning programs violate contracts 
define coherence trivial contract elaborator erase merely erases contracts insert calls error signalling primitives 
definition elaboration coherence 
elaboration annotated contract java syntax unannotated contract java syntax coherent program pre post conditions effect free expressions conditions holds kleene equal erase practice approaches enforcing restriction different pros cons 
interface iconsole int getmaxsize void display string class console implements iconsole int getmaxsize 
int getmaxsize iconsole 
int getmaxsize console 
void display string 
void display iconsole 
void display console string string cname length getmaxsize new check console pre display display display new check console post display dummy true display cname class runningconsole extends console int getmaxsize iconsole 
int getmaxsize console 
int getmaxsize runningconsole 
void display string 
super display string substring 
getmaxsize 
void display iconsole 
void display console 
void display runningconsole 
class prefixedconsole extends console int getmaxsize iconsole 
int getmaxsize console 
int 
string return void display string super display void display iconsole 
void display console 
void 
class check iconsole pre 
class check console pre extends object boolean display console string new check iconsole pre display res length getmaxsize res res res console class check runningconsole pre extends object boolean display runningconsole string new check console pre display res true res res res runningconsole class check prefixedconsole pre 
class check iconsole post 
class check console post extends object boolean getmaxsize string tbb boolean console int getmaxsize res getmaxsize res res new check iconsole post getmaxsize console res getmaxsize tbb class check runningconsole post extends object boolean getmaxsize string tbb boolean runningconsole int getmaxsize res getmaxsize res res new check console post getmaxsize runningconsole res getmaxsize tbb class check prefixedconsole post 
iconsole 
display iconsole crunch time elaborated console example 
object object null true false fd fd fd md 
md 

super md 

view var 
var var 
object md 
vn return object var 
vn varn call object md 
var 
varn super object md 
vn return object var 
vn varn super md 
var 
varn return return new object object new object dom fd null fd object fd get object fd object fd object fd set object view object object cast object var 
varn vn var vn varn true iftrue false iffalse seq error violated pre condition pre error violated post condition post error bad extension hier view object error bad cast object view null error bad cast null fd error dereferenced null null fd error dereferenced null nset null md 
vn error dereferenced null operational semantics contract java error violated pre condition store error violated post condition store error bad extension store elaboration change expressions method calls 
furthermore wrapper methods effect contracts effect evaluate true 
contract evaluate false contract checker guaranteed signal errors listed 
elaboration coherent 
definition specifies contract soundness 
intuitively soundness guarantees elaborated programs respect contracts original program 
concretely program contract elaborator produces signal contract error program contract sound step evaluation 
definition contract soundness 
elaboration contract sound program pre postconditions effect free expressions conditions holds error violated pre condition store error violated post condition store error bad extension store state erase locally contract sound respect recall erase just contract annotations erased 
roughly local contract soundness configuration means store contracts hold necessary relations contracts hold 
precisely states perform method call method return locally contract sound 
state evaluate method call locally sound conditions true 
pre condition method satisfied 
second pre condition hierarchy behaviorally formed 
type pre condition imply subtypes preconditions method invoked 
similarly state perform method return locally sound postcondition method satisfied post condition hierarchy behaviorally formed 
definition local contract soundness 
program state locally contract sound respect contract java program conditions holds 
vk exists prep true store exists prep prep return exists true store exists method call method return 
theorem 
elaboration contract sound 
proof sketch 
program 
assume signal contract error 
contract sound show reduction step erase locally contract sound 
lemma takes reduction step erase takes 
elaboration expressions method calls erase synchronized long method calls 
consider method call 
reductions erase look erase 
vn return 
xn vn ellipses contain method calls reductions method call identical 
elaborated version calls wrapper method 
know wrapper method effects contract expressions effect free signal pre condition error hierarchy error 
reduction sequence looks 
vn 
vn return 
xn vn extra context remainder wrapper method checks post conditions post condition hierarchy 
post conditions effect free raise hierarchy error post condition error code effect computation 
pictorially reduction sequences look erase pre condition checking post condition checking method call 
smaller arrows extra steps takes method call 
inductive argument conclude reduction erase takes takes reduction step possibly extra context contract enforcement 
lemma holds 
lemma prove theorem 
step reduction erase 
decompose evaluation context method call evaluation context return instruction locally hierarchy sound 
assume decompose context method call 
show bullet definition true 
reached method call previous argument know wrapper method invoked 
wrap rule see pre condition check succeeded 
remains show exists prep prep states types pre conditions evaluate hierarchy checkers traverse entire hierarchy checking pre condition type implies pre condition subtypes holds 
step locally hierarchy sound 
similarly decomposes context method return returned wrapper method code invoked step locally contract sound 

related calculus contract java contract soundness theorem show means monitor enforce contracts objectoriented world 
analogous typed lambda calculi constants primitives type soundness theorems 
type soundness theorems analyze type systems existing languages say ml pinpoint flaws 
similarly study existing contract enforcement determine monitor contracts program 
existing contract checking systems collect pre conditions method super methods disjunction :10.1.1.31.7982
similarly collect post conditions method super methods conjunction 
pre super pre super pre type manual state treats pre postcondition derived methods manner unable get run 
tautology post super post type post super tautology tools detect malformed precondition post condition hierarchies 
put differently tools rewrite programmer contracts assume programmer mistakes concerning relationship pre conditions methods super methods postconditions methods super methods 
assume implementor class perfect understanding superclass contracts merely adds additional specifications 
believe ironic tools check programmer capability maintain contracts procedure code trust programmer comes subtle task forming correct hierarchies contracts 
tool designers aware problem 
example point re writing programmer contracts mentioned manner leads undetected contract violations malformed type hierarchies 
example interface int int pre interface contains single method pre condition requirement greater 
imagine extension interface extends int int pre extends pre condition imply precondition case 
witness failure implementation method call 
interface extension faulty judged programmer original contracts 
unfortunately rewriting series pre conditions disjunction reveal problem 
true contract enforcement tools reveal implementor properly understand precondition interface short contract monitoring systems rewrite hierarchy contracts conjunctions disjunctions contract sound sense theorem 
example may look artificial glance just version console example section 
test translated iconsole console prefixedconsole icontract syntax maximum dummy display routine just prints stdout 
created main method invokes prefixedconsole method string abc follows new prefixedconsole display abc call erroneous pre condition prefixedconsole display method requires input string character 
icontract responded error message java lang error precondition violated console display string declared iconsole display string length console display prefixedconsole display main main icontract blames call super display inside prefixedconsole display method hierarchy caller prefixedconsole display 
general tool rewrites programmer pre post conditions manner produce analogous result program cause programmers look errors wrong place 
jass contract checker java discover errors type hierarchy :10.1.1.16.800
discover hierarchy errors jass programmer specify simulation method creates object supertype current object 
contract checker uses simulation method create supertype object time method called method returns 
checks relevant contracts supertype object original object related proper implications 
contract checker signals hierarchy error 
jass contract java differ respects 
subtypes contract java function state space respective supertypes 
implies programmer doesn define simulation method checks significantly cheaper jass new objects created 
second contract java notion subtyping naturally extends interfaces jass 
third contract java checks entire portion hierarchy atop method just single step 
model comes contract soundness theorem 

implementation full java contract java elaborator section produces inefficient java code 
changes calculus improve efficiency generated code 
hierarchy checking classes eliminated 
class definitions hierarchy checking methods added directly class 
interface definitions single class static methods hold hierarchy checkers 
second case single inheritance hierarchy hierarchy checking turned loop 
value initial pre condition test saved re pre condition hierarchy checking 
similarly value post condition test re post condition hierarchy checking 
issues considered detail companion 

presents contract java calculus java programs contracts 
contracts come pre post conditions icontract response edited clarity formatting 
methods classes interfaces 
calculus specifies programs contracts elaborated plain java programs code enforces integrity contracts 
code specifically enforces properties method calls returns respectively pre conditions hold method call post conditions hold method return pre conditions method imply preconditions overriding methods subtypes postconditions method implied post conditions overridden methods supertypes 
contract soundness theorem guarantees items properly enforced far programmer stated contracts concerned 
contract java complete semantic account run time enforced contracts object oriented setting 
contract soundness theorem formal summary properties especially respect behavioral subtyping 
fills gap established theory behavioral subtyping established practice contract checking java object oriented languages general 
philippe meunier detailed comments draft 
daniel jackson shriram krishnamurthi clemens szyperski valuable 
addition gratefully acknowledge support nsf ccr texas atp 

america designing object oriented programming language behavioural subtyping 
proceedings foundations object oriented languages volume lecture notes computer science pages 
springer verlag 
und beim mit 
diplomarbeit universitat oldenburg april 
fischer moller 
jass java assertions 
workshop runtime verification 
held conjunction th conference computer aided verification cav 
duncan 
adding contracts java handshake 
technical report university california santa barbara december 
findler felleisen 
behavioral contracts behavioral subtyping 
proceedings acm conference foundations software engineering 
flatt krishnamurthi felleisen :10.1.1.23.8118
classes mixins 
proceedings acm conference principles programming languages pages 
gomes stoutamire 
language manual sather august 
gosling joy steele 
java tm language specification 
addison wesley 
holzle bruno 
reflective java library support design contract 
proceedings meta level architectures reflection volume lncs july 
language specification 
www com 
rosenberg 
blue language specification version 
kramer icontract java design contract tool 
technology object oriented languages systems 
leavens leino poll ruby jacobs 
jml notations tools supporting detailed design java 
object oriented programming systems languages applications companion pages 
department computer science iowa state university tr august 
liskov wing 
behavioral subtyping invariants constraints 
technical report cmu cs school computer science carnegie mellon university july 
liskov wing 
behavioral notion subtyping 
acm transactions programming languages systems november 
luckham von henke 
overview anna specification language ada 
ieee software volume pages march 
man machine systems 
design contract java 
www com html 
meyer object oriented software construction 
prentice hall 
meyer applying design contract 
ieee computer october 
meyer eiffel language 
prentice hall 
milner theory type polymorphism programming 
journal computer systems science 
rosenblum practical approach programming assertions 
ieee transactions software engineering 
wright felleisen 
syntactic approach type soundness 
information computation pages 
appeared technical report tr rice university 
