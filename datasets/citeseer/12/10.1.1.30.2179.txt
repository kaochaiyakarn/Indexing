semantics shape barry jay shapely types separate data represented lists shape structure 
separation supports shape polymorphism operations defined arbitrary shapes shapely operations shape result determined input permitting static shape checking 
shapely types closed formation fixpoints include usual algebraic types lists trees include standard data structures arrays graphs records 
values shapely type uniquely determined shape data 
shape thought structure holes positions data elements stored list inserted 
shape computing widespread till apparently subject independent study 
body presents semantics shape elementary ideas category theory 
consider examples possible applications 
classes examples inductive types arrays records 
inductive types shapely 
example tree leaves type shape corresponding unlabelled tree data list leaves say left right order 
shape provides approach semantics parametric polymorphism 
particular interest inductive types existence shape polymorphism see program arbitrary shapes 
representation inductive types supports greater parallelism data held list 
mccoll writes language gpl inductive types deliberately excluded gpl lead representations hard obtain high degrees concurrency 
mcc 
shape array size 
matrix pair natural numbers 
generally arrays dimension shape tuple arrays arbitrary dimension shapes lists numbers 
inductive types representation shape small compared data tends quite stable 
shape analysis see may yield substantial benefits error detection optimisation particularly parallel programming 
function types shapely general 
may account tension higher order functions arrays 
example core type systems underlying sequential functional languages mt support array types 
contrast parallel functional languages emphasise arrays compromise function types restricting order sisal second order say skeletons col 
shape theory may provide context explore trade offs 
sparse arrays shapely 
represented list position data pairs list positions shape 
symbolic computation gauss jordan elimination uses shape try minimise number non zero entries der 
graphs order nodes represented sparse matrices 
directly shapes unlabelled graphs relations 
school computing sciences university technology sydney po box broadway australia 
programming shape allow graph topology problem handled explicitly embedded structure sparse array 
shape polymorphism support code re despite varying geometries 
processor architecture may expressible terms compilation expressed mapping shape problem shape processor 
shape record set fields represented ordered list 
records fundamental databases object oriented programming may clarify semantics 
example database theory missing fields recorded shape 
objectoriented languages eiffel mey container classes designed represent shape 
having considered variety shapes consider 
applications code re error detection optimisation 
collectively called shape analysis 
examining consider existing languages type systems capable expressing desired benefits 
shape polymorphism shape polymorphism novel form parametric polymorphism allows operations parametrised shapes data 
consider operation map applies function element list 
existing functional languages type ff fi ff list fi list ff fi may range types 
data polymorphism allows data ff fi vary uses fixed shape list 
shape polymorphism fixes data allows shape vary types instances map include tree tree matrix matrix case map applies data leaves entries leaving shape fixed 
shape polymorphic operations need fix shape shape may replaced constructed thetas 
common kinds parametric polymorphism exist map implies appending lists data polymorphic shape polymorphic mapping particular function square root may shape polymorphic data polymorphic 
shape polymorphism benefits 
allow operations arbitrary shapes including defined user 
array languages function definition issues size dimension 
record types adaptation missing additional fields records handled automatically 
shape polymorphism supported type system glt underlies dominant functional languages 
extension shape viewed connective omega omega maps types types maps trees 
possible type map omega omega xy fx fy type empty 
difficulty connectives may contravariant case natural type map xy fy fx fundamentally single algorithm map connectives covariant ones 
existence meaningful type map means type checked algorithm implement depend type polymorphism ad hoc parametric 
map supported type classes haskell gofer jon algorithm supplied user 
charity cf algorithm inferred automatically type 
parametrically polymorphic version map fold implemented jay polynomial types built products sums fixpoints lists trees 
language inductive types forests currently construction 
shape polymorphism incorporated existing functional languages 
approximations shape polymorphism existing languages 
array languages nested arrays represented shape flat array vcode bc jg allow operations variety shape classes 
object oriented languages container classes mey support shape polymorphic mapping routine performing map variety containers start loop item forth shape analysis computations require high degree interaction data shape graph reduction 
large class operations interaction minimal non existent 
shape result determined shape arguments input data data result may depend shape 
common data parallel computation ski systolic array computations kun 
shapely operations possible compute intermediate shapes result examining data 
phase distinction hmm similar occuring static type checking 
expect early error detection computation data begins 
compiler generate shape constraints program simplifying possible 
occasionally constraints shown unsatisfiable error reported input considered 
inputs provided shapes shown satisfy constraints data processed matrix dimensions match multiplication attempted 
additional benefit knowledge shapes intermediate values optimise large scale computations particularly important parallel processing 
shapes carry size information load balancing pre determined 
shapes may allow complexity estimates various sub tasks leading improved scheduling determination non deterministic algorithms 
example symbolic computation sparse matrices manipulates positions non zero entries maximise efficiency der 
operations shapely separation shape data may useful runtime algorithms 
example optimal matrix problem ka chapter uses shapes 
task data split shared processors may desirable transmit smaller portion data size easily computed shape 
semantics results reported jc 
setting category list objects 
setting quite weak cartesian closure subobject classifiers assumed assumption finite limits reasonable computationally probably weakened 
characterisation shapely type constructors uses pullbacks fa ffi la arity values type fa uniquely represented shape type data type la length data list equals arity shape 
construction fa functorial ffi natural transformation 
inherits properties list functor shapely functor 
similarly definition ffi pullback confers additional properties making shapely natural transformation 
shapely functors transformations form attractive setting explored 
data represented structures lazy lists streams multi sets varying degrees success 
emphasis finite lists justified main theorem asserts shapely types closed formation fixpoints 
theorem establishes existence inductive types trees lists 
proof observation inputs sequential computers lists parsed produce values fixpoint type 
algorithm recognition language folding reduction instances single operation lists 
link fixpoint types parsing accident witness link parsing context free grammars 
link data storage shape equivalent data entry language section 
shapely type system open questions type system built semantics 
method represent types exactly appear semantics pullbacks 
values represented shape data list subject constraint arity shape equals length list 
constraint inputs checked compiler involve techniques similar shape analysis 
clear limitations imposed shape arity feasible 
shapely type represented dependent type sigma type sigma values shape data type arity 
course languages support dependent types calculus constructions ch dependence types values means type checking performed run time intent type shape checking performed early possible preferably compilation 
possibility arises lists la represented sigma really type vectors 
represent shapely type power series sigma sn thetaa sn represents shapes having arity approach emphasises connections polynomial types jay combinatorics particularly theory species joy 
example represents tree shapes sn number trees leaves represents possible arrays sn number unfortunately approach useful algorithmically arity poor discriminator shapes 
structured follows 
section section reviews categorical setting establishes notation lemmas sections introduce shapely functors transformations types shape polymorphism shape analysis section constructs initial algebras fixpoints section draws 
types operations modelled objects arrows category lists underlying products coproducts required define pullbacks shapes 
specifying class pullbacks done boolean categories man stage impose burden simplify slightly assume pullbacks category list objects coc 
extensive equivalent requiring coproduct diagrams disjoint monomorphic inclusions stable pulling back 
examples include usual semantic categories including sets complete partial orders topological spaces suffice illustrate ideas 
fix notation 
morphisms hf gi thetab pairing 
left right projections product respectively 
unique morphism terminal object 
symmetry product denoted thetab thetaa 
dually coproduct inclusions case analysis functors pi sigma denote chosen fold products coproducts respectively delta diagonal functor 
distributive law witnessed natural isomorphism da theta thetab thetac inverse id theta id theta 
subscripts natural transformations omitted required disambiguate expression 
pullback commuting square pair morphism ffi ffi unique morphism ffi ffi pullback thetab hx yi 
pairing notation general case 
list constructor functor constructors nil la cons la choice objects morphisms thetac unique morphism foldr la thetab called diagram commute hnil idi la thetab oe cons thetaid thetab foldr oe thetac id follows nil cons la isomorphism expresses la coproduct 
primitives construct usual family list operations notation mixture list notation bw categorical notation monads lf la lb map la length map la singleton lists la la append snoc la thetaa la appends singleton la flattens list lists la lb ffi lg extends lb act lists 
natural numbers object zero successor nil cons respectively 
addition ln summation 
eq equality elementary results lists jay 
lemma concludes section needed prove main theorem 
define la la la la la thetaa hid nili snoc thetaid la isomorphism coproduct decomposition second list distributive law 
split la foldr hnil idi 
divides list segments initial segment length projection list long 
define take ffi split la drop ffi split la lemma equations hold ffi split split ffi ffi id pullback la ffi true bool eq ffi ffi proof sides equation equal foldr id id 
second proved similarly 
eq ffi ffi true induced morphism pullback split ffi ffi split ffi ffi follows equation ffi ffi split ffi ffi take ffi ffi follows assumption induced morphism la unique ffi monomorphism second equation 
shapely functors shapely functors defined properties list functor strength koc stability review 
construct hnil idi la thetab oe cons thetaid thetab hnil idi thetab thetab oe thetal thetab thetab id theta ffi id thetac define strength ffi la thetab thetab 
sets maps bi ha bi 
allows parameters introduced list 
generalise 
am gamma object object define thetab thetab am gamma thetab 
strong functor functor equipped natural transformation fa thetab thetab called strength satisfies usual associativity unicity axioms 
ensure result independent parameters introduced time tuple 
generally strength strength projections list functor preserves pullbacks stable coc 
preserve products 
terminal object mapped natural numbers object represents length shape lists 
construct binary product pullback apply get thetab lb la induces isomorphism zip la theta lb thetab canonical choice pullback indicated theta thetab 
definition functor strength shapely functor stable functor 
object shapes fa shape fa 
zip fa theta fb thetab canonical isomorphism 
finite limits constructed pullbacks terminal object follows shapely functors preserve finite limits possible having non trivial shape 
examples shapely functors 
example fx constant functor shapely 
example coproduct functor strength distributive law 
stability follows directly 
example product functor theta strength canonical morphism thetaa thetab thetab theta thetab stability follows products commute finite limits 
example composites shapely functors shapely oe shapely functors ffi shapely 
stability immediate strength gfa thetab fa thetab goe gf thetab example oe shapely hf gi thetac strength having components oe stability reduces separately 
example combining results see shapely ffi hf gi thetag theta ffi hf gi 
example list functor shapely 
consider alternatives lists means storing data 
functors preserve terminal object pullbacks 
usually additional properties welcomed object shapes trivial resulting shape theory 
examples 
example sa streams infinite lists 
final coalgebra hag functor theta gamma 
algebra ff thetac unique algebra homomorphism sa 
follows strength preserves finite limits 
stream infinite length 
example object exponential function type exists objects functor gamma strong preserves limits right adjoint 
combining lists yields shapely functors gamma gamma 
alternatives lists non trivial shapes 
example object finite infinite lists final algebra functor fx thetax 
follows directly definition 
shape object sets 
example ba bags multi sets elements shapely bags shapes lists 
words shape record multiplicities elements dependent data 
turn example 
example object weights 
define weighted lists functor theta gamma object shapes lw represent multiplicities approximation bags element may appear twice bag 
weights positions say sparse matrix 
note weights thetaa may considered part shape data 
shape explicitly 
couple non examples 
example covariant functor sets sets constructs finite sets elements preserve pullbacks 
merely determines set empty little information 
example functor gamma contravariant shapely 
example showed exponentials construct shapely functors 
functor gamma covariant preserve pullbacks sets 
shapely transformations strong natural transformation oe strong functors natural transformation ff commutes strengths 
fa thetab ff thetaid ga thetab thetab oe ff thetab thetab natural transformation ff cartesian morphism square pullback fa ff ga fb ff ff gb gf cartesian strong natural transformation ff oe shapely functors shapely transformation case shapely ff 
example coproduct inclusions shapely strength distributive law cartesian ness follows coproduct 
type constructors nil cons shapely 
example projections product theta strong shapely 
transformations interest shapely 
pullback thetad thetad thetaid shows transformation gamma thetad id cartesian 
shapely shapely example ff fi shapely transformations pairing hff fii similarly ff fi shapely ff fi theorem 
powers corresponding shapely functors shapely transformations form category respect usual operations 
proof ff oe fi ae shapely fi ffi ff components fi ffi ff fi ffi ff ff fi shapely horizontal composite fi ff components fi ff fi ffig ff 
case strength cartesian ness follow pasting 
proposition shapely functor functors 
suppose object transformation ff ga cartesian object transformation fi hb cartesian hff fi ga cartesian proof consider commuting square hx yi ga hff fii ga gg induce unique morphism cartesian ness ff 
similarly induce morphism 
commutativity id id stability induce desired morphism 
theorem ff fi thetag shapely transformations fl foldr ff fi thetaf ga shapely transformation 
proof adapt proof special case jay theorem 
main operation new operations constructed preserves 
example foldr nil cons foldr nil shapely ffi shapely lemma shows strength cartesian ness interact 
theorem ff cartesian shapely unique strength oe oe ff shapely 
proof strength oe ff strong fig 
commute 
square pullback determines oe uniquely 
conversely pullback define oe desired properties inherited fa thetab ff thetaid ga thetab oe thetab ff thetab fa ff ga strength corollary equivalence functors shapely morphisms shape 
proof ff oe shapely ff desired morphism 
conversely define functor pullback fa ff ga action extends functor follows ffi gf equals implies pullback defining fa constructed stages fig 

fa ff ga fb ff ff gb gf cartesian ness ff 
equations functoriality follow directly universal properties cartesian ness ff immediate diagram 
theorem shows ff shapely 
constructions inverse isomorphism 
shapely types functor shapely lists shapely type constructor 
generally functor shapely type constructor shapely delta pil 
functor may need unravelling 
list functor acts component separately 
am gamma object la theta gamma delta copy component hf fn gamma ffi hffi ffi gamma shapely transformation pullbacks fa ffi ffi ffi known ith arity 
significance pullback values type fa shape type data type arity shape equals amount data supplied 
words shapes thought having fixed numbers holes entries type filled data 
corollary shows shapely type constructors specified giving shape arity 
consider single example detail 
trees labelled leaves nodes described la thetan theta shape tree corresponding unlabelled tree 
worth emphasising pullbacks defined isomorphism provide specification object implementation 
level abstraction real benefit unanswered questions remain 
current case pullback determine list leaves represents left right right left order arcane fashion 
issue resolved constructors type turn determined action level shapes 
notational simplicity illustrate trees ta leaves type unlabelled nodes 
define ta fig 

leaves listed left right fig 

number leaves result sum sub trees lists leaves appended 
note leaves represent leaves right left order lists swapped appending 
choice node constructor fixes representation leaves 
course constructions depend prior existence shape arity constructors 
existence inductive types arbitrary established subsection 
examples inductive types 
example languages generated grammar shapely data lists terminal symbols shape production 
la 
id ta la leaf id leaves leaf 
ta la 
ta la node leaves node 
example define matrices ma entries type pullback ma entries la thetan matrix list factorisation length 
underlying shape matrix dimensions 
corollary shows entries shapely 
matrix multiplication general operations linear algebra produced definition jay 
example arrays dimension generalise matrices 
constructed arity computes product sizes 
types arrays possible dimension shapes lists numbers ln length list determines dimensionality array 
usual array operations updating defined operations data list shape determine necessary positions 
skillicorn bs give categorical semantics arrays represented dimensions stream 
lack constraint linking sizes data limits potential error checking 
manes man interprets matrices morphisms category objects sizes 
result universe matrices distinguishing matrices data type 
example sparse arrays represented list position datum pairs result zipping position list shape data list 
example underlying shape graph unlabelled graph relation 
canonical order nodes graph elements set imposed 
relation represented symmetric boolean matrix 
efficient representation uses upper triangular matrix 
relations finite orders pullback ffi choose choose maps gamma 
follows determines number nodes ffi ffi determines number edges unlabelled graph 
graphs nodes type edges type pullback la ffi ffi thetan theta note order chosen nodes implicit order edges 
second means representing graphs shape number nodes la thetal hid choose thetan theta edge pair nodes labelled dummy edges 
result sparse matrix dummy labels edge 
directed graphs handled way possible edges 
directed multi graphs necessary order edges connecting single pair vertices 
pair nodes list labels 
representation gdm la hid si thetan theta squaring function 
example consider records field names type assume fields canonical order lexicographic 
simplicity assume fields type 
shape record finite set fields arity cardinality 
represent set list fields correct order 
data list represents values assigned fields 
types data partitioned subobjects consisting fields type 
usual operations adding deleting changing fields defined properties pullbacks 
example weighted lists shapely lists obvious way 
functor shapely weighted lists automatically shapely lists 
example shapely type constructors closed composition 
ff fi shapely type constructors gfa fi ff lla la gf shapely type constructor 
example trees arrays form shapely type 
consider happens lists replaced candidates data storage previous section 
example shows weighted lists graphs add new 
example consider shapely natural transformation ff bag functor 
values fa determined shape bag data connection number items bag equals arity shape 
interesting 
example preserves terminal object shapely natural transformation ff isomorphic thetag gamma pullback defining ff reduces product diagram 
constraint linking shape data 
example matrices infinite dimensions shape isomorphic streams 
similarly necessarily infinite trees non trivial shapes data stream shape constraint 
example data stored lazy list construct lazy data types lazy trees shapes possibly infinite trees lazy arrays may infinite dimensions 
course care taken choosing order entries data list 
definition shapely types image structure holes different types data stored represented functors shapely product la theta gamma lists type data 
alternative image exploited takes data entry primitive notion 
input string type sigmaa am gamma data different types may mixed 
leads consideration functors shapely sigma pil 
intuitions useful preferred 
fortunately resulting notions equivalent proposition shows 
proposition pil sigma shapely 
proof clearly shapely natural transformation pil sigma pil pil sigma sigma kth inclusion sum fold append lists 
transformations shapely result 
conversely list entries different types filtered produce tuple lists entries type 
define natural transformation check cons la shapely foldr nil check 
generalised define shapely transformation sigmaa la strips list entries obvious fold generalisation proposition shows sigma pil shapely transformation 
shape polymorphism separation data shape shapely types allows operations defined giving action part separately occurred defining node operation trees 
parametric polymorphism arises operations independently types involved 
version data polymorphism understood 
occurs action shape independent data 
example balancing binary tree fig 
shape fixed binary trees data may type 
ta la 
bala id ta la bal id leaves balancing tree 
form parametric polymorphism called shape polymorphism completely new 
case data fixed shape vary 
example summing data values fixes data type numbers defined shape fig 

course happens data shape polymorphism exist canonical example map 
typically applied lists defined quite generally fig 
shape remains fixed data changes 
implemented large class inductive types jay 
clear appropriate class shape polymorphic operations 
shape polymorphic operations include zip fa theta fb thetab strength basic operations projections inclusions 
examples pointwise operators introduced example jon defined jay 
iterate endomorphism entry shape 
number iterations entry determined weight shape morphism fn particular shapes fn ln 
sum ffi sum ln id summing shapely type 
fa la 
ff lf fb lb id id shape polymorphic map 
may special weights weight leaf tree depth weights lists yield shape polymorphic operations 
examples include weighting entry length list position 
discrete fourier transform defined pointwise operators ibid 
seen shape polymorphic 
calculating shape interaction shape data computation may major consideration graph reduction non existent mapping 
interaction greater benefits separating 
simplest case interaction 
number operations map zip 
realistically able perform shape computations looking data shape influence data 
example size array may appear parameter data calculations fourier transform 
shapely operations 
semantically operations fa gb shapely types operation shapes diagram commutes fa gb example consider decomposition tree leaf pair sub trees ta id ffi la la id ffi shape result determined input order know break list leaves number leaves left sub tree required 
shape processing add computed value environment prior data processing 
program built shapely operations intermediate shapes performed considering data 
information optimise run time code performing load balancing determining communication patterns 
example symbolic computation important technique optimising gauss jordan elimination sparse matrices bad choice pivots may dramatically increase number non zero entries array 
structure shape depth tree may useful making complexity estimates 
shape depends data separation may productive benefits obtained having shape outweigh overheads maintaining 
example consider distributed divide conquer algorithm part divided problem passed processor 
choice part may easy shapes known 
initial algebras main purpose section show existence lists infer presence inductive types constructed initial algebras shapely type constructors 
underlying intuition inductive type identified language alphabet omega gamma sub object omega distinguished recogniser represented morphism omega bool maps true false 
situation captured pullback omega true bool true represented 
recogniser constructed techniques parsing 
endofunctors theory context free languages parsing typically introduced considering data 
example language trees handled considering problem matching brackets identifying unlabelled trees 
mimic approach considering shapely endofunctors 
ffi shapely type constructor 
algebra object action fl fc fl ff initial algebra unique algebra homomorphism define omega 
omega represents words polish notation initial algebra sub object omega formed words 
example fx thetax unlabelled binary trees omega fl ng represents leaf represents node 
example represents tree left branch leaf right branch smallest possible tree node 
trying recognise formed expressions elements necessary keep track formed sub expressions produced 
done morphism omega omega thetan maps word pair hw ni represents number formed expressions part parsed 
initial algebra oe omega hnil omega thetan parses produces single expression string represents expression 
composing appropriate test omega thetan bool 
special case operation omega omega thetalc defined algebra fl terminal object 
just producing number formed expressions constructs images fold fl 
parsing constructing preview uses 
restriction yield fold fl second omega omega standard notion parser type parse trees 
short derived recogniser parser initial algebra algebra homomorphisms fold fl 
reasons generalise usual terminology call parser 
lemma test eq ffi ffi ffi thetaid omega thetalc bool recognises subobject id theta ffi ffi thetaid fc thetalc omega thetalc proof show diagram pullback fc thetalc id theta ffi ffi thetaid omega thetalc lc thetalc ffi thetaid ffi thetalc ffi thetaid paste lemma 
test just constructed picks pairs arity omega greater length list 
resources construct type fc list left 
qc omega thetalc pullback test false 
define omega thetalc omega thetalc fc thetalc qc hnil cons ffi fl theta id thetaid ffi omega thetalc words action follows 
arity shape length list take list form type fc apply fl cons result remaining list list omega gamma nil 
arity exceeds length shape singleton list leave 
construct action omega thetal omega thetalc omega thetalc follows 
decompose source omega thetalc omega theta omega thetal omega thetalc splitting omega nil cons cons ffi id thetaid sense middle component nil parse failed just cons new omega existing list 
apply foldr hnil nili 
lemma fl fl algebra homomorphism id ffi constructed stages fig 

oe omega 
hnil jc omega thetalc hnil omega thetan id theta initial algebra 
proof clearly functor natural transformation 
natural respect algebra homomorphisms 
couple lemmas required proving initial algebra fold fl unique algebra homomorphism lemma ffi oe hnil lf omega thetalc 
proof suffices show sides equation hnil nili foldr id ffi oe thetaid 
nil case trivial 
cons case left hand side fig 

comparable diagram right hand side fig 

cells commute left hand cell lower edge 
resolve digression required 
lower edge cell foldr hnil idi denoted equations may proved sequence elementary arguments 
ffi hid nili ffi lf oe cons omega oe oe omega thetal omega oe oe thetaid thetal omega id omega thetalc oe foldr id omega thetal omega thetalc id theta oe oe thetaid thetal omega thetalc id theta representing ffi oe lf oe cons lc lh oe cons thetalc oe thetaid thetalc id phi phi phi phi phi phi phi phi phi phi phi hnil ji thetaid phi phi phi phi phi phi phi phi phi phi phi oe thetaid omega thetalc thetalc oe thetaid omega thetalc phi phi phi phi phi phi phi phi phi phi phi id theta omega thetalc hnil idi foldr id omega thetal omega thetalc id idi oe oe thetaid thetal omega thetalc id idi representing hnil 
ffi ffi id thetaf ffi ffi ffi id theta ffi thetaid ffi id theta follows sides lemma fixed post composing suffices show cell commutes post composition ffi id theta ffi thetaid ffi id theta ffi ffi hid nili thetaid ffi id theta ffi thetaid ffi hid nili thetaid ffi id theta ffi hid nili thetaid lemma shows de parse reverse parse notational clarity subscript contracted lemma ffi id ffi idl omega proof commutativity lower square fig 
follows case analysis definition omega oe cons omega thetal omega omega oe omega thetal omega id theta omega ffi id oe cons omega thetal omega id theta ffi id de parsing 
return algebra structure consider fig 

lemma implies commutativity rear face 
right bottom faces commute definitions 
induced action fl homomorphism 
course definition fl action dependent particular choice algebra 
ff ffi omega id omega thetal omega 
fl cons oe omega fc fh nil ffi omega thetal omega thetalc id theta fl hnil ji omega thetalc action initial algebra 
remains prove uniqueness 
fl fl algebra homomorphism 
ffi fig 

suffices prove id oe omega hnil ji omega hnil ji omega thetalc id factorisation oe ffi ffi id ffi hnil ji ffi ffi id ffi ffi oe oe equation holds lemma 
id oe monomorphism 
general case construction previous section shows build particular types order obtain type constructors construct initial algebras parametrised fashion 
functor thetac represent system parametrised domain equations sp solution constructing object initial algebra ff functor gamma 
example thetax ta binary trees leaf node constructors coproduct inclusions ta oe ta thetat followed structure morphism initial algebra 
initial algebras exist extends functor action gamma algebra homomorphism induced action id ff fi hid gi natural transformation unique algebra homomorphisms induce natural transformation fi theorem thetac shapely type constructor exists 
fi hid gi shapely transformation fi proof determined projections shapely pil 
bekic lemma treat individually equivalently assume 
object initial algebra gamma constructed 
shapely delta pil consequence second part theorem applied composite transformation fi delta ffi delta pil delta delta ffi shapely delta pil second transformation built natural isomorphisms transformation hl pi pil shapely proposition 
fi delta pil shapely required 
additional notation clarify proof second assertion fi shapely 
define omega gamma gamma omega observe square pullback omega thetal omega omega thetal omega omega thetal omega omega ga omega omega gb cartesian fact shapely 
shapely theorem 
morphism show left hand square oe omega ga fi gf gb fi hnil ji omega gb pullback 
right hand square pullback definition suffices observe outer square 
re drawn oe omega omega omega ga fi hnil ji omega ga omega omega gb strength defined fig 
defining pullback thetab strength omega 
right face commutes strong 
ga shows strength depend fi 
diagram shows fi strong shapely 
note theorem asserts shapely lists establish stronger conjecture merely shapely proof existence relies parsing argument 
semantic notion shape prove mild assumptions existence lists establish existence inductive types trees 
indicates shape polymorphic operations mapping introduced types 
broader significance semantic notion embraces fundamental data types arrays graphs records inductive types outside core languages 
thetab oe thetaid omega thetab 
thetab oe thetab ga thetaid omega thetab ga thetab fi thetaid hnil ji thetaid omega thetab thetab fi hnil ji omega thetab thetab thetab strength type system programming language shape yield benefits including shape polymorphism detection shape errors optimisation run time code shape analysis inputs 
anonymous referees clarke crossley edwards mahler constructive criticism 
bc blelloch chatterjee 
vcode data parallel intermediate language 
proceedings rd symposium frontiers massively parallel computation pages october 
bs skillicorn 
foundation theories arrays 
queen university canada 
bw bird wadler 
functional programming 
international series computer science 
prentice hall 
cf cockett fukushima 
charity 
technical report university calgary 
ch coquand huet 
calculus constructions 
information computation 
carboni lack walters 
extensive distributive categories 
journal pure applied algebra 
coc cockett 
list distributive categories 
journal pure applied algebra 
col cole 
parallel programming list homomorphisms maximum segment sum problem 
editor proceedings advances parallel computing 
elsevier 
der duff reid 
direct methods sparse matrices 
clarendon press oxford 
feo 
report sisal language project 
journal parallel distributed computing 
glt 
girard lafont taylor 
proofs types 
tracts theoretical computer science 
cup 
hag hagino 
categorical programming language 
phd thesis university edinburgh 
hmm harper mitchell moggi 
higher order modules phase distinction 
th popl 
acm 
hudak peyton jones wadler 
report programming language haskell non strict purely functional language 
sigplan notices 
jay jay 
matrices monads fast fourier transform 
technical report university technology sydney 
jay jay 
tail recursion universal invariants 
theoretical computer science 
jay jay 
polynomial polymorphism 
editor proceedings eighteenth australasian computer science conference south australia february volume pages 
australian computer science communications 
jc jay cockett 
shapely types shape polymorphism 
sannella editor programming languages systems esop th european symposium programming edinburgh april proceedings lecture notes computer science pages 
springer verlag 
jg jenkins glasgow 
logical basis nested array data structures 
computer languages journal 
jon jones 
deriving fast fourier transform algorithm calculation 
functional programming glasgow springer workshops computing 
springer verlag 
jon jones 
implementation gofer functional programming system 
technical report yaleu dcs rr yale university 
joy joyal 
une th eorie des 
advances mathematics 
ka kumar 
parallel computing design analysis algorithms 
benjamin cummings publishing 
koc kock 
strong functors monoidal monads 
archiv der mathematik 
kun kung 
systolic architectures 
ieee computer january 
man manes 
predicate transformer semantics volume cambridge tracts theoretical computer science 
cambridge university press 
mcc mccoll 
bsp programming 
proceedings dimacs workshop specification parallel algorithms 
mey meyer 
eiffel libraries 
prentice hall 
mt milner tofte 
commentary standard ml 
mit press 
ski skillicorn 
foundations parallel programming 
number cambridge series parallel computation 
cambridge university press 
sp smith plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
article processed macro package taylor diagrams package 

