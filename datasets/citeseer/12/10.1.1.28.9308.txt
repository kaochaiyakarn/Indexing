desugaring jml method specifications arun raghavan gary leavens tr march revised july december august keywords behavioral interface specification language formal specification desugaring semantics specification inheritance refinement behavioral subtyping model specification formal methods precondition postcondition eiffel java jml 
cr categories software engineering software program verification formal methods programming contract reliability tools jml software engineering distribution maintenance enhancement documentation logics meanings programs specifying verifying reasoning programs assertions pre post conditions specification techniques copyright iowa state university 
document distributed terms gnu general public license published free software foundation version option version 
department computer science hall iowa state university ames iowa usa desugaring jml method specifications arun raghavan gary leavens department computer science hall iowa state university ames iowa usa microsoft com leavens cs iastate edu july jml stands java modeling language behavioral interface specification language designed specify java modules 
jml features great deal syntactic sugar designed specifications expressive 
presents desugaring process boils syntactic jml simpler form 
desugaring help manipulate jml specifications tools understand meaning allows jml specifications verification 
jml stands java modeling language behavioral interface specification language designed specify java modules 
jml features great deal syntactic sugar designed specifications expressive 
syntactic additions language easier humans 
syntactic sugar gives user easier notation easily desugared translated produce simpler core syntax 
desugaring useful manipulating jml specifications tools understanding meaning 
tool uses part desugaring process 
option jml checker ships jml release 
focus mainly method specifications specifications describe methods 
treat subset jml method specification syntax leave description interact jml redundancy features refinement calculus features model programs 
jml inherit allow refinement declarations classes interfaces combined straightforward way 
essentially union combine inherited refined declarations union semantics conjunction clauses predicates invariants history constraints 
inheritance refinement declarations discussed document 
background jml method specifications describe desugaring detail 
jml method specifications section describes method specifications general terms giving syntax 
raghavan leavens supported part nsf ccr leavens supported nsf ccr 
minor adaptation chapter raghavan master thesis adapted previous version document 
jml release available www cs iastate edu leavens jml html 
basic method specifications jml basic method specification pre postconditions 
precondition jml introduced keyword requires postcondition introduced keyword ensures 
predicates pre postconditions written extension subset java expression syntax restricted side effect free 
example extension jml allows logical implication written infix operator 
example pre state value expression may old postcondition notation adapted eiffel 
default jml takes total correctness view specifications precondition true method call finish execution finite time java virtual machine encounters runtime error stack overflow running memory 
measured clause assist proofs termination 
addition may specify diverges clause method allowed go infinite loop 
method specification say method may throw various kinds exceptions 
done signals clause 
visualize execution method call terminating normally case relation pre state post state described postcondition ensures clause throwing exception type case relation pre state described exceptional postcondition signals clause names type true looping forever case diverges clause held pre state encountering java virtual machine error 
method specification may include frame axiom introduced keyword assignable says locations may assign conditions may assign 
locations mentioned frame axiom may assigned method execution locations may assigned corresponding conditions hold 
method specifications support kinds local declaration 
may declare universally quantified variables forall clause 
furthermore may declare initialize local specification variables purpose highlighting abbreviating expressions old declarations 
sideeffect free initializing expressions old declarations evaluated pre state just parameter passing 
method specifications clause specification concurrency 
clause says method execution proceeds condition holds 
addition basic features flat method specifications jml forms syntactic sugar specifications expressive 
aim explain boiling features described subsection 
extending specifications interesting subtle kind sugar jml support specification inheritance behavioral subtyping 
brief method specification extended refined method specification 
jml subtype inherits public protected specifications supertype public protected members inheritance includes method specifications 
behavioral subtyping requires method specifications subtype extend public protected method specifications methods defines supertypes 
jml allows specification single type split files refinement 
example specifications refines jml refine specifications java 
method specifications refinement extend corresponding method specifications file refined 
clear reader method specification extension opposed specification new method jml uses keywords 
forms method specification non extending specification extending specification non extending specification spec case seq spec case seq spec case spec case 
spec case generic spec case behavior spec extending specification additive specification spec seq additive specification spec case seq top level method specification syntax jml 
extending specification specification overriding refining method regardless methods overridden refined specification 
furthermore form extending specification method override refine existing method 
extending specifications keyword called additive specifications specifications called specifications jml grammar figures give parts jml grammar necessary understanding 
sections grammar quote restriction grammar appendix preliminary design jml 
jml grammar defined extended bnf 
conventions grammar nonterminal symbols written italics 
terminal symbols appear font symbols square brackets optional 
ellipses 
indicates preceding nonterminal group optional text repeated zero times 
gives top level syntax method specifications jml 
gives syntax lightweight specifications 
lightweight specification syntax designed easy lightweight specifications assumed complete 
generic spec case syntax part general form heavyweight specification syntax 
heavyweight specification begins behavior keywords behavior normal behavior exceptional behavior heavyweight specifications called behavior specifications assumed complete 
specification syntax note 
note lightweight heavyweight forms specifications 
syntax spec var decls 
semantics section describes desugaring process level method specification 
stand visibility level public private protected empty 

nested generic spec case seq normal spec case seq exceptional spec specifications inside see section 
eliminates nesting 

lightweight specifications public behavior 
spec cases normal behavior exceptional behavior behavior see section 
leaves spec cases behavior 
generic spec case spec var decls spec header generic spec body spec var decls generic spec body spec header requires clause requires clause 
clause 
measured clause 
clause clause 
measured clause 
measured clause measured clause 
generic spec body simple spec body generic spec case seq generic spec body seq generic spec case generic spec case 
simple spec body assignable clause assignable clause 
ensures clause 
signals clause 
diverges clause 
ensures clause ensures clause 
signals clause 
diverges clause 
signals clause signals clause 
diverges clause 
diverges clause diverges clause 
generic specification cases 
behavior spec privacy behavior generic spec case privacy exceptional behavior exceptional spec case privacy normal behavior normal spec case exceptional spec case spec var decls spec header exceptional spec body spec var decls exceptional spec body privacy public protected private exceptional spec body assignable clause assignable clause 
signals clause 
diverges clause 
signals clause signals clause 
diverges clause 
exceptional spec case seq exceptional spec case seq exceptional spec case exceptional spec case 
normal spec case spec var decls spec header normal spec body spec var decls normal spec body normal spec body assignable clause assignable clause 
ensures clause 
diverges clause 
ensures clause ensures clause 
diverges clause 
normal spec case seq normal spec case seq normal spec case normal spec case 
behavior specification syntax 
spec seq spec spec 
spec generic spec behavior spec generic spec spec var decls simple spec body behavior spec privacy behavior spec var decls simple spec body privacy exceptional behavior spec var decls exceptional simple spec body privacy normal behavior spec var decls normal simple spec body exceptional simple spec body assignable clause assignable clause 
signals clause 
diverges clause 
signals clause signals clause 
diverges clause 
normal simple spec body assignable clause assignable clause 
ensures clause 
diverges clause 
ensures clause ensures clause 
diverges clause 
specification syntax 
spec var decls forall var decls var decls var decls forall var decls forall var decl forall var decl 
forall var decl forall quantified var decl var decls old local spec var decl local spec var decl 
local spec var decl model type spec spec variable ghost type spec spec variable requires requires ensures result requires ensures result int int specification variable declarations syntax 
requires requires ensures result requires requires ensures result int int motivational example nested specifications left desugaring right 

combine extending specification subclass refinement inherited refined method specifications dictated syntax single see section 

signals clause refers exception type exception standard name see section 

multiple clauses kind multiple requires clauses see section 

combinations spec cases 
see section 
way explaining semantics method specifications imagine steps run 
tools may wish semantics differently 
example tool tries leave specifications sugared form avoiding steps order process conjunctive specifications steps necessary 
hand jml runtime assertion checker uses steps 
detailed description steps follows describes process purely syntactic terms tools manipulate internal representations syntax trees textual form 
desugaring nested specifications forms specification allow nesting 
mainly factor common declarations requires clauses factoring applies measured clauses 
gives simple example 
concrete syntax jml uses annotation markers appendix delimit text jml sees 
annotations look java comments ignored java 
jml reads text annotation markers jml ignores signs line body annotation 
signs annotation markers reflected grammar 
general clauses top spec header copied nested spec case seqs 
example outer requires clause requires copied nested specification cases 
problem careful avoid variable capture 
rename specification variables declared nested spec case seq free variables outer spec header 
detail consider schematic normal spec case top assuming renaming needed avoid capture desugared bottom 
kind desugaring applies generic spec case exceptional spec case 
desugaring normal exceptional specifications point nested spec cases 
obtain behavior specifications steps 
lightweight specifications desugared filling defaults omitted clauses appendix simply specified prefixing result behavior determined visibility method specified 
lightweight specification behavior specification 
example process 
spec cases start normal behavior behavior inserting signals clause form signals exception false says exceptions thrown 
similarly spec cases exceptional behavior behavior inserting clause ensures false says method return normally 
process leaves single non nested spec case sequence consisting solely spec cases behavior specs keyword behavior 
spec cases may different visibility processing convenient specification cases grouped visibility level 
combine spec cases visibility single behavior spec having generic spec body generic spec case seq contains bodies behavior specs privacy level separated keyword 
nesting sort behavior spec spec var decls spec header empty generic spec body single simple spec body consists flat generic spec case seq nesting troublesome 
process leaves spec case seq behavior specs form described privacy level 
simple example desugaring shown 
desugaring inheritance refinement extending specifications augment inherited specification specification java method superclass superinterfaces refined specification 
described previous step inherited specification spec cases visibility levels 
step forms augmented specification specification called augmenting specification inherited refined specifications 
augmented specification spec cases visibility level joined 
visibility level corresponding augmented spec case formed generic body behavior spec case augmenting specification generic body corresponding behavior spec cases superclasses superinterfaces refined specifications 
augmenting specifications combined inherited refined specifications visibility level 
details done vary form augmenting specification described 
rules combining specifications refinements slightly different rules combining specifications inherited supertype method specification 
case refinements visibility levels specification inherited extending specification 
inherited specification comes supertype private visibility specifications inherited package visibility specifications inherited subtype package corresponding supertype 
subtype different java package supertype public protected specifications inherited 
forall quantified var decl 
var decl old local spec var decl 
local spec var decl requires 
requires rn 
wn measured mb 
mb 
measured mbn mb mbn 
mbn mbn mb mbn mbn forall quantified var decl 
var decl old local spec var decl 
local spec var decl requires 
requires rn 
wn measured mb 
mb 
measured mbn mb mbn 
mbn mbn mb mbn mbn normal spec case body 
forall quantified var decl 
var decl fk old local spec var decl 
local spec var decl vk requires pk 
requires pk rnk wk 
wk measured ek mbk 
ek mbk 
measured ek mbk 
ek mbk normal spec case body forall quantified var decl 
var decl forall quantified var decl 
var decl old local spec var decl 
local spec var decl local spec var decl 
local spec var decl requires 
requires rn requires 
requires rn 
wn 
wn measured mb 
mb 
measured mbn mb mbn 
mbn mbn mb mbn mbn measured mb 
mb 
measured mbn mb mbn 
mbn mbn mb mbn mbn normal spec case body 
forall quantified var decl 
var decl forall quantified var decl 
var decl fk old local spec var decl 
local spec var decl local spec var decl 
local spec var decl vk requires 
requires rn requires pk 
requires pk rnk 
wn wk 
wk measured mb 
mb 
measured mbn mb mbn 
mbn mbn mb mbn mbn measured ek mbk 
ek mbk 
measured ek mbk 
ek mbk normal spec case body desugaring nested specifications normal spec case 
requires places public int shift int places public behavior requires places specified assignable specified ensures specified signals exception specified diverges specified public int shift int places example desugaring lightweight specification left behavior specification right filling defaults 
public normal behavior requires empty ensures result header public exceptional behavior requires empty signals true public object top throws public behavior requires empty ensures result header signals exception false requires empty ensures false signals true public object top throws example desugaring normal behavior exceptional behavior left behavior right 
inherited specification public behavior forall var decls old local spec var decl 
local spec var decl spec header assignable clause seq ensures clause seq signals clause seq diverges clause seq 
forall var old local spec var decl 
local spec var decl vk spec header assignable clause seq ensures clause seq signals clause seq diverges clause seq extending specification public behavior forall var old local spec var decl 
local spec var decl assignable clause seq ensures clause seq signals clause seq diverges clause seq combined specification public behavior forall var decls forall var old local spec var decl 
local spec var decl local spec var decl 
local spec var decl spec header assignable clause seq assignable clause seq ensures clause seq ensures clause seq signals clause seq signals clause seq diverges clause seq diverges clause seq 
forall var forall var old local spec var decl 
local spec var decl vk local spec var decl 
local spec var decl spec header assignable clause seq assignable clause seq ensures clause seq ensures clause seq signals clause seq signals clause seq diverges clause seq diverges clause seq desugaring extending specifications 
extending specifications syntax shown 
idea conjoined specification augments inherited refined specifications changing precondition parts spec header 
desugaring adds clauses specification corresponding sequence clauses generic spec case inherited refined generic spec body shown 
furthermore spec var decls extending specification combined shown renaming may need done avoid capture 
describing desugaring step assumed kind desugaring described sections done spec seq extending specification resulting sequence behavior specs visibility level keyword behavior separated 
inherited specification extending specification uses syntax default specification inherited 
default specification lightweight specification default clauses equivalent behavior specification clause specified appendix 
default specification case assume person writing code unknown implicit specification mind 
extending specification syntax allows sequence specifications 
desugaring part part desugared described 
form extending specification starts may spec cases inherited specification behavior spec 
spec extending specification behavior spec 
spec combined specification behavior spec 
spec spec 
spec desugaring extending specifications 
visibilities 
visibility level combine inherited specification corresponding spec case extending specification shown 
standardizing signals clauses point may signals clauses spec case may describe behavior method different exception thrown 
standardize signals clauses describe behavior exception type exception thrown added check exception type 
standard fresh name exceptions allow signals clauses combined step 
name fresh avoid capture desugaring rules conciseness 
desugaring done follows signals signals exception instanceof notation means cast expression substituted free occurrences example desugaring shown 
desugaring multiple clauses kind multiple clauses kind 
conjoining predicates specification case 
specification case done requires clauses clauses assignable clauses ensures clauses signals clauses diverges clauses 
measured clauses assignable clauses process purely syntactic consists joining lists clause commas 
predicate omitted store ref default true 
example assignable clauses specification case combined follows 
assignable sr 
sr 
assignable srk mk 
srk mk assignable sr 
sr 
srk mk 
srk mk clauses process predicates clause type specification case 
example requires clauses shown schematically follows public behavior assignable assignable size ensures old size ensures size old size signals ee old empty ee null signals tse old size tse null public void throws public behavior assignable assignable size ensures old size ensures size old size signals exception instanceof old empty null signals exception instanceof old size null public void throws example desugaring signals clauses 
requires 
requires pn requires 
pn exactly technique clauses ensures clauses diverges clauses 
signals clauses things marginally bit complex signals clause bit extra syntax 
due processing previous step idea described follows signals exception 
signals exception pn signals exception 
pn example desugaring step 
step generic spec case body spec cases clause type signals clauses describe behavior exception type exception name 
desugaring combinations point single method specification spec case visibility level 
visibility level internal generic spec case seq eliminate nesting shown 
process preconditions various specification cases visibility level uses implications precondition wrapped old necessary corresponding predicate precondition governs behavior holds 
additional detail need mentioned 
specification variable declarations combined possibility variable capture 
avoid capture renaming general 
example desugaring 
defined desugaring jml method specification syntax semantically simpler form 
point desugaring suitable formal study 
public behavior public behavior assignable assignable size assignable size ensures old size ensures old size size old size ensures size old size signals exception signals exception instanceof instanceof old empty old empty null null signals exception instanceof instanceof old size old size null null public void public void throws throws example desugaring eliminates multiple clauses kind specification case 
area disentangle various desugaring steps tools order 
example able multiple clauses type conjunction rule illustrated section time 
allowing different orderings brings possibility applying desugaring steps different orders produce different results nice prove happen 
jml redundancy features example ensures redundantly implies example clauses 
impact kinds semantics jml serve highlight reader 
debugging specifications conditions needed check need formally stated done extent larch 
challenging giving semantics jml model programs derived refinement calculus 
especially problematic combination specifications 
thinking issue led propose specifications allowed inherited specifications model program 
albert baker curtis clifton bart jacobs rustan leino peter ller clyde ruby raymie stata joachim van den berg discussions syntax semantics specifications 
curtis clifton don clyde ruby comments earlier drafts 
ken arnold james gosling 
java programming language 
java series 
addison wesley reading ma second edition 
ralph johan back von wright 
refinement calculus systematic 
springer verlag 
behavior forall var decls old requires measured mb 
mb assignable sr 
sr ensures signals exception ex diverges 
forall var old requires pk wk measured ek mbk 
ek mbk assignable srk mk 
srk mk ensures qk signals exception diverges tk behavior forall var decls 
forall var old 
requires 
pk old 
old pk wk measured mb 
mbk 
ek pk mbk 
ek pk mbk assignable sr 
sr 
srk pk mk 
srk pk mk ensures old 
old pk qk signals exception old ex 
old pk diverges old 
old pk tk desugaring combinations public behavior public behavior requires empty empty ensures requires empty old empty ensures result header result header signals exception false old empty false requires empty ensures false signals exception old empty signals exception false instanceof old empty true instanceof true public object top throws public object top throws example desugaring eliminates 

run time assertion checker java jml 
technical report department computer science iowa state university hall ames iowa may 
available anonymous ftp ftp cs iastate edu mail cs iastate edu 
alex borgida john mylopoulos reiter 
frame problem procedure specifications 
ieee transactions software engineering october 
krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
proceedings th international conference software engineering berlin germany pages 
ieee computer society press march 
corrected version iowa state university dept computer science tr 
james gosling bill joy guy steele 
java language specification 
java series 
addison wesley reading ma 
hoare 
axiomatic basis computer programming 
communications acm october 
gary leavens 
larch manual 
version 
available ftp ftp cs iastate edu pub ps gz world wide web url www cs iastate edu leavens html april 
gary leavens albert baker 
enhancing pre postcondition technique expressive specifications 
jeannette wing jim woodcock jim davies editors fm formal methods world congress formal methods development computing systems toulouse france september proceedings volume lecture notes computer science pages 
springer verlag 
gary leavens albert baker clyde ruby 
preliminary design jml behavioral interface specification language java 
technical report iowa state university department computer science august 
see www cs iastate edu leavens jml html 
richard allen lerner 
specifying objects concurrent systems 
ph thesis cmu cs school computer science carnegie mellon university may 
bertrand meyer 
object oriented software construction 
prentice hall new york ny second edition 
carroll morgan 
programming specifications second edition 
prentice hall international uk 
arun raghavan 
design jml documentation generator 
technical report iowa state university department computer science july 
yang meng tan 
formal specification techniques promoting software modularity enhancing documentation testing specifications 
technical report massachusetts institute technology laboratory computer science technology square cambridge mass june 
yang meng tan 
formal specification techniques engineering modular programs volume kluwer international series software engineering 
kluwer academic publishers boston 
jeannette wing 
writing larch interface language specifications 
acm transactions programming languages systems january 
jeannette marie wing 
tiered approach specifying programs 
technical report tr massachusetts institute technology laboratory computer science 

