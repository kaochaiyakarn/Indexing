copyright american association artificial intelligence 
rights reserved 
tuning local search satisfiability testing andrew parkes cis dept cirl university oregon eugene parkes cirl uoregon edu joachim programming systems lab universitat des saarlandes postfach saarbrucken germany cs uni sb de local search algorithms particularly gsat wsat attracted considerable attention primarily best known approaches hard classes satisfiability problems 
replicating reported results difficult setting certain key parameters art details algorithms discussed published papers large impact performance 
efficient probabilistic method finding optimal setting critical local search parameter maxflips discuss important details differing versions wsat 
apply optimization method study performance wsat satisfiable instances random sat crossover point extensive experimental results wide range problem sizes 
find results described having optimal value maxflips scale simple power number variables average run time scale sub exponentially basically log range 
years variety local search routines proposed boolean satisfiability testing 
shown selman levesque mitchell gu selman kautz cohen local search solve variety realistic randomly generated satisfiability problems larger conventional procedures davis putnam 
characteristic feature local search starts total variable assignment works repeatedly changing variables appear violated constraints minton 
changes typically hill climbing heuristic supported arpa rome labs contracts doctoral fellowship dfg second author 
official version published american association artificial intelligence proceedings aaai 
www aaai org strategy aim maximizing number satisfied constraints 
usual hillclimbing liable get stuck local maxima 
standard ways overcome problem noise introduced selman kautz cohen frequency controlled cutoff parameter maxflips just give local moves restart new assignment 
typically techniques raises interesting issues 
value assign maxflips 
known fundamental rules set significant impact performance deserves optimization 
empirical comparison different procedures done fairly involves optimizing parameters 

optimal choice performance suffer 

performance scale problem size 
especially important comparing local search algorithm classes 

local search routines fail find solution problem instance satisfiable 
idea happens false failure rate relevant time problem size restrictions 
resolving issues requires extensive empirical analysis random noise implies different runs require different runtimes problem instance 
meaningful results require average runs 
give probabilistic method reduce computational cost involved maxflips optimization scaling results obtained help 
organized follows firstly discuss generic form local search procedure details specific cases wsat algorithm selman kautz cohen 
describe optimization method call retrospective parameter variation rpv show allows data collected value maxflips reused produce runtime results range values 
note concept rpv study effects introducing varying amounts parallelization local search simulating multiple threads 
results experiments study performance versions wsat random sat crossover point cheeseman kanefsky taylor mitchell selman levesque crawford auton :10.1.1.49.9940
making extensive rpv fast multi processor machines able give results variables 
find optimal maxflips setting scales simple monomial mean runtime scales faster simple power law 
local search sat gives outline typical local search routine selman levesque mitchell find satisfying assignment set clauses ff proc local search sat input clauses ff maxflips new total truth assignment maxflips satisfies ff return select variable ff flipped return satisfying assignment generic local search procedure sat 
local moves flips variables chosen select variable usually randomized greedy strategy 
refer sequence flips restarts new total truth assignments try sequence tries finishing successful try run 
parameter ensure termination experiments set infinity 
assume new assignments chosen randomly methods considered gent walsh 
wsat procedures experiments variants wsat walk satisfiability class local search procedures 
class introduced selman 
selman kautz cohen wsat flips randomly picking clause satisfied current assignment picking random greedy heuristic variable clause flip 
wsat restricted version remains substantial freedom clause disjunction literals 
literal propositional variable negation 
choice heuristic 
focus selection strategies 
denotes number clauses fixed satisfied variable flipped 
similarly number break unsatisfied flipped 
gamma simply net increase number satisfied clauses 
wsat proc select variable ff random unsatisfied clause probability random variable probability gamma variable maximal gamma return wsat skc proc select variable ff random unsatisfied clause min variable probability random variable probability gamma variable minimal return wsat variable selection strategies 
ties best variable broken random 
strategy wsat simple hillclimbing net number satisfied clauses perturbed noise probability variable picked randomly clause 
second procedure wsat skc version wsat cohen kautz selman 
give details published selman kautz cohen interesting 
particular wsat skc uses obvious effective selection strategy 
firstly hill climbing done solely number clauses break variable flipped number clauses get fixed ignored 
secondly random move possible move previously satisfied clauses broken 
exhibits sort minimal greediness definitely fixes randomly selected clause merely tries minimize damage satisfied clauses 
contrast wsat cause lots damage get paid back clauses 
andrew baker personal communication 
publically available ftp ftp research att com dist ai retrospective variation maxflips describe simple probabilistic method efficiently determining maxflips dependence mean runtime randomized local search procedure wsat 
term retrospective parameter varied actual experiment 
discussed earlier side effect randomness introduced local search procedures runtime varies runs 
case inter run variation large give meaningful runtime results need average runs 
furthermore need determine mean runtime range values maxflips 
naive way proceed totally independent sets runs different maxflips values 
wasteful data successful try run uses fewer flips current maxflips able re number failed tries produce results smaller values maxflips 
suppose take single problem instance runs local search procedure maxflips md resulting sample total tries 
goal predictions maxflips md label successful tries number flips took succeed 
write bag successful tries fx define reduced bag removing tries took longer fx mg randomness try learning tries consider tries independent 
follows new bag provides information distribution flips successful tries maxflips estimate probability try succeed flips simply pm js pm allow predictions behaviour maxflips concerned expected mean number flips instance consideration 
mean elements bag probability pm solution try case expect flips 
probability gamma pm pm try fail second succeed case expect flips 
gamma pm pm simplifies give main result section gamma pm estimated reduced bag defined 
expected pm expected number tries 
clearly easy implement system take single data set obtained maxflips md estimate expected number flips different smaller values note direct obvious method take bag runs tries simply discard runs final try took longer method discard information associated tries took longer contrast method captures information entire population tries 
instance collections deal collection instances apply rpv instance individually proceed exactly retrospectively simulated data obtained directly 
example expected mean number flips em jcj note rpv approach restricted means allows investigation statistical measures standard deviation percentiles 
practical application rpv primary limit rpv arises need ensure bag successful tries get small invalidate estimate pm bag size decreases decrease follows effective lower bound range safely apply rpv md offset collecting runs instance 
tradeoff trying predictions small value efficient give trying data maxflips md new data collection smaller maxflips 
problem bag size exacerbated fact different instances different behaviours different ranges rpv valid 
certainly possible analysis errors arising rpv 
data collection system analysis monitor current progress concentrate new runs instances values maxflips results needed 
practice followed simpler route fixed number runs instance accepted rpv results values fixed large fraction instances large 
rpv remove need consider data collection various values maxflips allow collect data widely separated maxflips values interpolate resulting direct data points saves time consuming fine grained data collection binary search maxflips values 
experimental results evaluate performance satisfiability procedures class randomized benchmark problems random sat studied extensively mitchell selman levesque mitchell crawford auton :10.1.1.49.9940
random sat provides ready source hard scalable problems 
problems random sat variables clauses generated follows random subset size variables selected clause variable negated probability 
instances taken near crossover point randomly generated problems satisfiable fastest systematic algorithms tableau crawford auton show behaved increase hardness time required scales simple exponential results performance variants wsat satisfiable random sat problems crossover point :10.1.1.49.9940
put particular emphasis finding maxflips value mean runtime averaged instances minimum 
note clause variable ratio quite constant crossover point tends slightly higher small avoid falling hardness peak experimental results crawford auton number clauses crossover constant value :10.1.1.49.9940
guarantee fair sample satisfiable instances tableau filter unsatisfiable instances 
took hours instance part computationally nontrivial fact turned limiting factor maximum problem size 
wsat skc setting noise parameter reported optimal selman kautz cohen 
evidence values close optimal wsat produced results wsat variants discuss section 
experiments parts 
firstly compare variants wsat small number problem instances wide range maxflips values show usage rpv determine maxflips dependencies 
concentrate efficient wsat skc medium number instances investigate scaling properties range variables 
part represents bulk data collection heavily relied rpv 
look large data sample check outliers 
maxflips dependence aim show usage rpv give broad picture mean runtime em varies different wsat variants 
took fixed randomly selected sample instances flips wsat rpv wsat direct wsat skc rpv wsat skc direct variation em maxflips instances runs instance 
runs instance variants wsat 
directly calculated em applied rpv samples extend results data point 
results plotted 
error bars confidence intervals particular set instances reflect uncertainty limited number runs limited number instances 
note rpv lines data point match lower directly obtained points 
shows rpv introducing significant errors extrapolate ranges 
clearly wsat algorithms exhibit different dependencies maxflips selecting large value slows wsat factor contrast slowdown wsat skc 
maxflips slowest try wsat took minutes minutes worst effort wsat skc 
observed gent walsh random walk significantly reduce maxflips sensitivity local search procedure restarts noise fulfill similar purpose allowing downhill moves driving algorithm search space 
experimentally peak performance em varies little small variation sigma maxflips sensitivity vary quite remarkably 
topic warrants study rpv useful effectively reduces dimensional parameter space just average difference em random sat typically factor certain instances circuit synthesis problems selman kautz cohen wsat skc times faster 
having identified better wsat concerned optimized scaling 
extensive experiments wsat skc obtain accurate results performance wsat skc random sat flips number variables variation gamma gamma upper lower error bounds main 
far considered confidence intervals resulting inter run variation 
unfortunately previous sample instances error em arising inter instance variation larger 
means obtain reasonable total errors needed look larger samples instances 
interested behaviour near preliminary experiments indicated making main data collection just allow safely rpv study minimum 
wsat skc runs instance rpv find results summarized table explain entries table 
useful characterize em curves values maxflips denote gamma define largest value em larger em similarly define smallest value property 
easily read curve produced rpv 
rpv produces set sorted calculated various percentiles distribution th percentile means expect instances average solved number flips 
error em confidence level obtained standard deviation sample inter instance 
error limited number runs negligible comparison 
section interpret data respect em vary convert flips times actual flips rate varies remarkably little flips sec flips sec 
scaling optimal maxflips see gamma vary order interpret data fitted function gamma em curves flat relatively ill defined 
scaling gamma defini flips number variables mean scaling behaviour wsat skc crossover 
data points em confidence limits 
lines best fits functions text 
tion 
obtained best fit values resulting line plotted 
similar results wsat indicate similar scaling comparison gsat variant incorporates history mechanism observed scaling gent walsh 
scaling performance plot variation em see scaling fast simple exponential upward curve corresponding log log plot indicates worse simple monomial 
unfortunately know theoretical scaling result reasonably compared data 
example results known koutsoupias papadimitriou number clauses omega gamma apply crossover 
approached scaling purely empirical perspective trying fit functions data reveal certain characteristics scaling 
find interesting fit simple power law aware explanation 
fits provide idea scaling practical lead theoretical arguments 
find parameter fit em curve functions give fits provide lines 
values sigma gamma sigma sigma 
lg exp fact different functions give fits data illustrates obviously limited dis marquardt levenberg algorithm implemented universitat des saarlandes germany 
vars cls gamma em cnf 
median perc 
table experimental results wsat skc random sat crossover 
results instances variables instances vars instances vars instances vars 
power attempts empirical fits 
certainly claim asymptotic complexities 
include indicative 
fact indicates scaling similar simple power law exponent slowly growing 
alternatively fact regarded indication scaling slower simple exponential 
testing outliers immediate concern average runtimes quoted truly meaningful problem class random sat 
easily effect outliers instances wsat takes longer solve eventually dominates 
sample size increases get sufficiently hard instances sufficient frequency mean drift upwards mitchell 
check effect decided concentrate took instances 
wanted check outliers need high accuracy estimates sufficient just runs instance wsat skc maxflips rpv 
directly calculated mean seed plot distribution lg 
instances total instances give number instances expected number flips range wsat skc runs instance 
tail distribution long signs bimodal distribution small secondary peak large em concerned validity means quoted 
see signs effects 
contrary distribution quite smooth mean consistent previous data 
note distribution tail sufficiently large significant fraction total runtime spent relatively instances 
means sample sizes effectively reduced reason samples scaling results computationally feasible 
related optimal parameter setting maxflips scaling results examined gent walsh gent walsh 
sample point maxflips optimized experimentally 
computational cost systematic maxflips optimization randomized algorithms high problems larger variables 
experimental range sufficient rule polynomial runtime dependence order number variables gsat gent walsh 
sophisticated approach study incomplete randomized algorithms framework las vegas algorithms luby sinclair luby sinclair zuckerman examine optimal speedup 
shown single instance advantage having maxflips vary tries optimal cutoff times distribution runtimes 
results directly applicable average runtimes collection instances 
local search procedures close relations simulated annealing selman kautz 
combinations simulated annealing gsat tried hard sat problems spears 
look restart short period high temperature drive variable assignment random value 
case find interesting simulated annealing cases periodic useful boese kahng 
intend explore connections 
tried address issues empirically 
order allow optimizing maxflips retrospective parameter variation rpv simple resampling method significantly reduces amount experimentation needed optimize certain local search parameters 
studied different variants wsat label wsat wsat skc due selman 
application rpv revealed better performance wsat skc 
open question relative insensitivity wsat skc restarts carries realistic problem domains 
note general sat problems maxflips scaling course simple function number variables affected properties problem 
study scaling behaviour local search experimented wsat skc hard random sat problems wide range problem sizes applying rpv optimize performance 
experimental results strongly suggest subexponential scaling random sat support previous claims selman levesque mitchell gent walsh local search scales significantly better davis putnam related procedures 
unfortunately rpv directly determine impact noise parameter useful varying parameters varied experimentally different maxflips values simulated 
plan extend directions 
firstly intend move closer real problems 
example investigations binary encodings scheduling problems reveal strong correlation number bottlenecks problems optimal maxflips wsat secondly understand maxflips dependence terms behaviours individual instances 
members cirl particularly jimi crawford helpful discussions andrew baker wsat 
david mcallester anonymous reviewers aaai ecai helpful comments 
experiments reported possible sgi silicon graphic power challenge systems purchased university oregon computer science department nsf sti 
boese kahng 
best far vs implications optimal finite time annealing 
systems control letters 
cheeseman kanefsky taylor 
really hard problems 
proceedings ijcai 
crawford auton 
experimental results crossover point random sat 
artificial intelligence 
appear 
gent walsh 
understanding hill climbing procedures sat 
proceedings aaai 
gent walsh 
unsatisfied variables local search 
hybrid problems hybrid solutions proceedings aisb 
ios press 
gu 
efficient local search large scale satisfiability problems 
sigart bulletin 
koutsoupias papadimitriou 
greedy algorithm satisfiability 
information processing letters 
luby sinclair zuckerman 
optimal speedup las vegas algorithms 
technical report tr international computer science institute berkeley ca 
minton johnston philips laird 
solving large scale constraint scheduling problems heuristic repair method 
artificial intelligence 
mitchell selman levesque 
hard easy distributions sat problems 
proceedings aaai 
mitchell 
empirical study random sat 
master thesis simon fraser university 
selman kautz 
empirical study greedy local search satisfiability testing 
proceedings ijcai 
selman kautz cohen 
noise strategies improving local search 
proceedings aaai 
selman levesque mitchell 
new method solving hard satisfiability problems 
proceedings aaai 
spears 
simulated annealing hard satisfiability problems 
dimacs series discrete mathematics theoretical computer science 
appear 

retrospective analysis refinements local search satisfiability testing 
master thesis university oregon 
