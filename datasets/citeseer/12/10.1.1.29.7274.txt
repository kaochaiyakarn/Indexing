software tools technology transfer manuscript 
inserted editor model checking java programs java pathfinder klaus havelund thomas nasa ames research center recom technologies moffett field california usa 
mail ptolemy arc nasa gov url ase arc nasa gov september 
describes translator called java pathfinder jpf java promela modeling language spin model checker 
jpf translates java program promela model model checked spin 
java program may contain assertions translated similar assertions promela model 
spin model checker look deadlocks violations stated assertions 
jpf generates promela model state space characteristics java program 
java program finite tractable state space 
seen broader attempt formal methods applicable nasa areas space aviation robotics 
continuation effort formally analyze spin multi threaded operating system deep space space craft previous applying existing model checkers theorem provers real applications 
key words program verification java model checking spin concurrent programming assertions deadlocks 
describe java pathfinder jpf translator subset java programming language promela modeling language spin model checker 
java general purpose objectoriented programming language built mechanisms multi threaded programming 
spin verification system supports design verification finite state asynchronous process systems 
models formulated promela language quite similar ordinary programming language certain non deterministic specification oriented constructs 
processes communicate shared variables message passing buffered channels 
properties verified stated assertions code formulae linear temporal logic ltl 
spin model checker automatically determine program satisfies property case property hold generate error trace 
spin finds deadlocks 
jpf translates java program promela model model checked spin 
java program may contain assertions translated similar assertions promela model 
spin model checker look deadlocks violations stated assertions 
jpf apply analysis reduce size generated model 
java program finite tractable state space 
jpf applied programs having lines code 
seen broader attempt formal methods applicable loop programming nasa areas space aviation robotics 
main long term goal create automated formal methods workbench java programming programmers apply daily loop need specialists manually reformulate program different notation order analyze 
tool developing named rover operating mars called mars pathfinder 
mission generally regarded big success rover fact contain number software bugs causing repeated panic nasa headquarters potentially proper verification tools 
java pathfinder name play words finds paths java program lead errors 
earlier effort formally verified spin multi threaded operating system spacecraft 
operating system component nasa new millennium remote agent ra artificial intelligence spacecraft control system architecture launched october part deep space mission asteroid validate potential artificial intelligence ion propulsion technologies space 
operating system implemented multi threaded version common lisp 
verification effort consisted hand translating parts lisp code promela language spin 
total errors identified successful result 
addition described errors appeared different part system examined spin caused deadlock flight space resulting thrusting turned requested 
regarded clear demonstration potential system spin 
stated model checkers today handle real sized programs consequently handle real sized java programs 
certainly true 
aspects effort worthwhile anyway 
providing abstraction workbench possible cut state space java program 
second imagine model checking applied unit testing focuses single class classes puts parallel aggressive environment represented number threads 
java design language just promela 
attempts automatically verify programs written real programming languages 
attempt mention reported translates java programs promela handling exceptions polymorphism 
defines translator concurrent extension limited subset promela 
disadvantage solution concurrency extensions broadly programmers 
described called extended static checking technique detecting compile time common programming errors 
technique uses program verification technology feels programmer type checker 
underlying automatic theorem prover technique semantically thorough decidable static analysis techniques 
time trying detect certain kinds errors prove program correctness technique automatic program verification 
describes theory translating java programs transition models making static pointer analysis aid virtual coarsening reduces size models 
sequence transitions obtained model collapsed atomic transition access variables local thread protected lock owned thread 
seen complementing sense jpf produces transition model promela describes reduce size model 
significant subset java version supported jpf dynamic creation objects data methods class inheritance threads synchronization primitives modeling monitors synchronized statements wait notify methods exceptions thread interrupts standard programming language constructs assignment statements conditional statements loops 
translator prototype misses features packages overloading method overriding recursion method calls translated inlining method bodies strings floating point numbers thread operations suspend resume control constructs continue statement 
addition arrays objects java modeled promela arrays obtain efficient verification 
translate predefined class library 
tool currently improved cover java 
despite omissions expect current version jpf useful large class software 
front translator checks program allowed subset prints error messages 
general observation jpf translates bigger subset java similar existing tool knowledge 
translator developed common lisp having java parser written front 
gerard holzmann supported efforts changing semantics promela construct order simplify translation exceptions 
organized example java program translated automatically java pathfinder verified automatically spin 
section describe program bounded buffer 
section describe resulting promela code looks 
section experiment seeded errors example program ran spin model checker code generated jpf 
section ends suggestions 
bounded buffer program translation scheme illustrated translation complete small non trivial java program covers features java translate 
translation jpf spin applied prove disprove program satisfies properties stated assertions program deadlock free 
buffer class java program interested verifying properties bounded buffer represented single class 
object class store objects kind objects subclasses general top level class object 
shows declared interface class 
contains put method get method class extends exception interface public void put object public object get throws public void halt fig 

java buffer interface halt method 
typically producer threads call put method consumer threads call get method 
halt method invoked producer inform consumers longer produce values buffer 
consumers allowed empty buffer safely halt consumer calls get method halt method called buffer empty exception object class thrown 
class exception class subclass class throwable 
particular class exception subclass throwable 
contains buffer class annotated line numbers 
java class generally speaking described name set data variables zero constructor methods different argument types name class collection methods 
constructors executed object created new construct 
note buffer class user defined constructors 
class declares array length hold objects buffer 
addition array couple pointers declared pointing free location pointing object returned get method 
variable usedslots keeps track current number elements buffer 
variable halted true halt method called 
methods class synchronized note synchronized keyword 
methods exclusive access object executed 
methods called buffer object thread buffer gets locked serve thread unlocked method call 
put method takes parameter object stored buffer return value void 
enters loop testing buffer full having elements case calls built wait method 
calling wait method synchronized method suspends current thread allows threads execute synchronized methods object 
thread call notify method wake arbitrarily chosen waiting thread continue past wait call 
notifyall method wakes waiting threads 

class buffer implements 
protected static final int size 
protected object array new object size 
protected int putptr 
protected int 
protected int usedslots 
protected boolean halted 
public synchronized void put object 
usedslots size 
try wait 
catch ex 
array putptr 
putptr putptr size 
usedslots notifyall 
usedslots 


public synchronized object get 
throws 
usedslots halted 
try wait 
catch ex 
usedslots 
throw new 

object array 
array null 
size 
usedslots size notifyall 
usedslots 
return 


public synchronized void halt 
halted true 
notifyall 

fig 

java buffer class call wait put inside try construct java exception handling construct 
general try construct form try catch catch en cn cn block statement sequence statements enclosed ei exception type class 
body try statement executed exception thrown finishes successfully 
exception thrown catch clauses examined top bottom order find thrown exception corresponding class ei subclass thereof 
catch corresponding block ci executed 
appropriate catch exception flows try statement outer try handle 
number catch clauses try including 
catch clause method catches exception exception thrown code invoked method 
clause try code executed processing try complete 
happens matter completion achieved normally exception control flow statement return 
normally exception thrown explicitly thread throw statement exception object normal object exception class may include data methods 
thread may throw exception thread executing interrupt throws throws exception 
try construct wait call supposed catch interrupts threads 
see done case lines try statement necessary order java type checker accept program 
shall see real exceptions 
main results fact prove properties programs throw exceptions 
put method gets past loop known buffer free space insertion new object completed 
case buffer fact empty waiting consumers notified 
get method little bit complicated takes account buffer halted 
basically wait buffer return element buffer empty time halted 
case thrown 
buffer element returned producers notified buffer full case may waiting 
setting environment order verify properties class looking complete application occurs create small application buffer 
say set environment consisting number threads accessing buffer prove properties small system 
regarded unit testing buffer 
concretely shall define thread classes producer consumer class start system shown main method 
order illustrate translator capabilities translate inheritance define objects stored buffer see 
class attribute defined contains integer variable 
constructor method name class main public static void main string args buffer new buffer producer new producer consumer new consumer fig 

java main program class attribute public int attr public attribute int attr attr attr class attrdata extends attribute public int data public attrdata int attr int data super attr data data fig 

java attribute attrdata classes class takes parameter stores variable 
class attrdata extends class field defines constructor takes parameters calls super class constructor parameter 
producer consumer threads going buffer defined 
producer class extends thread class means run method executed object class started start method 
seen constructor class fact calls start method addition storing locally buffer elements produced 
run method adds attrdata objects buffer attributes order squares data calls halt method buffer 
consumer class extends thread class 
run method stores received objects received array 
note receiving loop written inside try construct catches prevents going 
property specifications jpf allows programmer annotate java program assertions verify spin model checker 
addition deadlocks identified 
assert statement expressed call static method assert verify class shown 
fact class producer extends thread private buffer buffer public producer buffer buffer start public void run int attrdata ad new attrdata buffer put ad yield buffer halt class consumer extends thread private buffer buffer public consumer buffer buffer start public void run int count attrdata received new attrdata try count received count attrdata buffer get count catch verify assert count int count verify assert received attr fig 

java producer consumer classes static means call method directly class name verify prefix making object instance 
body method real importance verification call method definition translated corresponding promela assert statement 
meaningful body printing error message example useful normal testing translated promela 
assertion states consumer receives exactly elements buffer 
second assertion loop states received elements correct ones wrt 
attr value 
class verify public static void assert boolean system println assertion broken fig 

java verify class consider kinds verify methods general methods corresponding operators ltl linear temporal logic spin 
methods called statements occur kind logic represents called embedded temporal logic 
example consider statement form verify eventually count inserted second statement consumer run method 
major advantage approach need change java language parse special specification comments 
java specification language 
note point assert method supported 
translation classes inheritance object creation general principle translation 
java class basically consists data variables methods 
new creation object new set data variables data area allocated methods object newly allocated area 
point time set data areas allocated object garbage collected 
shall model set data areas class array records typedef spin terminology record data area 
index variable point free record array initially having value record array 
method definitions mapped macro definitions method calls mapped applications macros 
note translated code shown unedited promela code generated translator couple omissions 
illustration start translation simplest classes attribute attrdata methods show inheritance 
shows data areas classes 
class array named obj defined size max object type class 
addition pointer index free data area object declared 
attrdata class inherits attribute class includes attr variable addition data variable 
note translation puts limit max object number objects created class 
particular object referenced object containing information class con define index byte define typedef int attr index typedef int attr int data index fig 

object arrays attribute attrdata classes 
define attribute define attrdata 
define define getclass define fig 

general object operations array instance index array concerns 
promela record concept typedefs flexible needs field access applied conditional expression decided represent object integer operations macros dealing calculations shown 
class unique identification number example class attribute number 
order access variables arrays macros defined shown 
macros prefixed name class defines variable statically decidable java point variable accessed contrast method calls 
java supports polymorphism object may belong subclass statically declared class example parameter method need define variable accessors access right array 
example macro attribute get attr reading attr variable defined attribute class defined conditional expression subclasses 
classes constructors executed creating new objects 
example java expression new attrdata cause call define undefined define obj getclass obj attrdata 
obj attr getclass obj attribute 
obj attr undefined define obj value getclass obj attrdata 
obj attr value getclass obj attribute 
obj attr value fi define obj obj data define obj value obj data value fig 

variable accessors attribute attrdata classes define obj attr obj attr define obj attr data obj attr obj data fig 

constructors attribute attrdata classes atomic attrdata fig 

translation new attrdata constructor turn call constructor super class attribute 
constructors modeled macros shown slightly simplified presentation purposes real translation takes account variable initializations occurring variable declarations 
parameter obj object denoting object constructed 
construction new object example java statement new attrdata mapped sequence promela statements shown slightly simplified respect treatment variable see bound pointer incremented constructor applied stored typedef int lock byte waiting chan wait bit array int putptr int int usedslots bit halted fig 

object type buffer class synchronization objects buffer class complicated contains methods addition synchronized means exclusive access object executing 
thread time may execute synchronized method object 
translation provide locking mechanism lock object serve particular thread calls synchronized method object 
purpose extra variables inserted data area object shown 
addition variables declared class note java arrays modeled directly promela arrays contains variables lock waiting wait managing object locking release 
lock variable time null negative integer thread id thread currently executing synchronized method object non negative promela process id 
field set proper thread id thread calls synchronized method thread thread id allowed operate object 
call synchronized method terminates lock released setting null 
note synchronized method allowed call synchronized methods object causing blocking 
variables waiting wait manage threads call wait notify notifyall methods object 
thread calls wait unlock object try read value zero place channel wait 
zero place channel promela model rendezvous communication thread send value channel order calling thread released 
time threads waiting get access object waiting channel 
time thread calls wait method object waiting variable additionally incremented conversely decremented released 
value variable number threads waiting object 
variable notifyall called thread waiting threads released define obj obj waiting define obj obj waiting define obj obj waiting fig 

operations waiting define pid define obj atomic obj null 
obj define obj obj null fig 

operations locking unlocking objects need know times wait channel signaled 
operations waiting variable shown 
locking unlocking object implemented operations shown 
locking object done thread calls synchronized method object thread locked 
thread waits lock free thread locked case lock field null 
note promela equality statement executable equality holds blocks case 
atomic move thread locks object assigning value lock field denotes thread id current thread defined pid promela refers process id currently executing process 
unlocking object just corresponds setting lock field null 
macros modeling wait notify notifyall methods shown 
buffer wait macro models wait method 
ignore moment constructs 
called unlocks object threads access call notify 
waiting field increased thread starts waiting signal value wait channel 
thread awakened notify notifyall locks object occurring call buffer lock obj order continue exclusive access object note wait called synchronized context java 
buffer notify macro signals wait channel case threads waiting signal 
buffer notifyall macro long threads waiting 
note happens atomically define continue define obj atomic obj obj obj continue 
obj obj obj define obj atomic obj 
obj continue obj 
skip fi define obj atomic obj 
obj continue obj 
break od fig 

operations wait notify notifyall new threads join waiting threads notification 
explain constructs buffer wait macro 
extra complication caused fact thread interrupt thread waiting 
recall interrupt exception thrown inside waiting thread interrupted stopped 
shall explain exceptions detail suffices say case exception thrown waiting thread released immediately occurs conditions constructs true 
promela construct executes executable termination case aborted execution continues suppose waiting thread blocked buffer get wait obj continue statement interrupt occurs 
due new semantics promela construct see section inner construct triggered shall see implies get exn bigger zero 
causes waiting variable decremented necessary buffer notify buffer notifyall macros normally chance 
waiting thread may code constructs executed termination shown necessary lock object stopping finalize code executed exclusive access object 
done outermost construct 
necessary introduce constructs interrupt may arrive thread notified waiting lock released waiting occurring buffer lock obj statement 
methods order illustrate methods modeled illustrate simplest halt method 
synchronized method class defined parts macro dealing object locking code macro containing actual code method 
non synchronized methods distinction 
shown synchronized halt method 
general method call translated call macro parameters corresponding method parameters 
case halt method parameterless object object method called parameter 
macro tests object locked calling thread case actual code code executed 
models situation method called synchronized method object locked 
case object locked calling thread attempt lock buffer lock obj successful locking code executed 
try macro models try construct java models fact object unlocked buffer unlock obj leaving method case exception raised execution code 
threads remains explain things put translating main method threads starts 
describe thread classes producer consumer translated 
focus producer 
thread classes translated similar manner classes addition run method translated promela process type proctype started promela run statement corresponding java thread started define obj obj 
obj 
obj try obj obj fi define obj obj true obj fig 

translation halt method proctype obj int 
atomic attrdata obj 
break od obj fig 

producer run method java start method 
shows translation run method producer class 
process takes parameter object 
notice local variables called methods declared global variables process 
example variable ex put method binds caught exception try statement declared point 
necessary promela support local variables new inline procedures promela got 
solution course prevents translation recursive methods efficient respect verification time don need maintain call stack represents normally hand translation 
possibility translate methods suggested experiences earlier define obj obj run obj fig 

producer constructor suggested inefficient see 
loop translated promela od construct straight forward way 
note object buffer buffer variable declared inside producer class accessed passed argument put halt methods 
models dot notation java accessing methods object 
surrounding producer thread code construct supposed catch exceptions thrown caught user program 
explained section 
shows translation producer object constructor 
shows buffer variable initialized argument process started corresponding start call 
exceptions java exceptions complicated considering situations may arise method returns middle try constructs construct interrupts exceptions thrown thread threads called wait method fact objects unlocked exception thrown synchronized method 
shall try illustrate solution 
promela construct closely related exception construct fact works outside inside case exceptions 
example consider java statement assuming variable try try throw new exception catch exception catch exception result executing statement assigned inner catch invoked exception thrown 
contrast consider related promela statement exn variable initially introduced 
variable positive regarded exception thrown exn exn 
exn 
typedef exn buffer fig 

consumer object type define getclass exception fig 

exn exception predicate effect statement assigned 
outermost construct invoked exn positive 
gerard holzmann helpful implementing option java verifier changes semantics promela way constructs interpreted inside 
leaves second issue soon inner chosen executing inner exn outer invoked exn true gets value anyway 
prevent kind behavior 
note promela code needs modifications statement statement executable get executed 
recall java exception object exception classes built user defined exception class 
exception may contain data methods 
throw statement takes exception object argument model translate store object special variable exn data area thread potentially main program thrown 
constructs thread test variable see different null 
data area consumer class shown 
corresponding macros accessing variable 
macros get exn obj set exn obj value accessing variable thread identified obj 
addition macros get exn set exn access exn variable thread 
exception class predicate exn evaluates true exn variable contains exception object class subclass thereof 
example shows predicate built exception class 
recall defined subclass thereof 
exception throwing mainly modeled macros shown 
dotted throw macro throws exception particular object parameter 
allows thread throw exception thread causing thread exn variable define obj exn obj exn define throw exn obj exn define obj obj fig 

operations throwing exceptions set 
throw macro throws exception object identified free variable obj current thread object 
calling java program corresponds throwing predefined thread death exception object object 
shall explain exceptions caught 
consider try statement form try catch catch catch en en cn java statement form translated promela statement form macros defined prime block indicates translated version try catch catch 
catch 
en cn fi example try construct get method translated promela code 
general idea translation inner construct catches exceptions match exception predicates exn exn en outer construct models construct java block executed matter thing 
example case example throws new exception executed exception thrown 
explain macros 
try macro executes throws predefined exit object exit final 
exit exception caught macro inserted shall see 
catch exn try obj catch skip fi skip fig 

translation try statement get method define try skip define throw exit define catch 
define define 
skip define 
exit 

fi define fig 

operations catching exceptions macro tests current value exn variable satisfies exn predicate catch cond exn case branch executed 
catch cond exn macro atomic move tests predicate exn executable true see predicate stores value exception local variable accessible block executed 
note exn variable zeroed predefined exn value order avoid outer constructs triggered discussed earlier page 
macro defines outer construct triggered final cond executable 
final cond macro executable exception object exn variable bigger 
note reset exn exception caught inner level outer final construct get activated 
exception just normal exit blocks cn try statement forgotten set exn exn 
hand concerns exception caught need remember re thrown code construct executed 
need sure activate constructs higher execution code 
way negate constructs translation react positive values exn 
leave construct negate back positive value thrown 
macros contain skip statements 
necessary order due semantics construct 
figures macros called 
defined respectively buffer unlock obj call unlocks object case exception thrown synchronized method 
step ensures exception thrown unlocking economic negating exception unlocking completely atomic blocking statements 
buffer lock obj call locks object call wait interrupted 
locking atomic possible possibility blocking thread may lock 
step allow blocking 
value returning methods java return statement forms 
form return case method value returning form return exp method value returning 
case return statement effect throwing exception caught return exception handler surrounding body value returning method constructs way 
shows get method buffer class translates respect value return 
see body method surrounded construct triggered return cond predicate 
predicate defined executable exn variable executing thread executes value returning method gets value return predefined fixed object 
happens example return define obj fig 

translation value returning get method define res top throw return define throw return define return 
fig 

operations return exceptions macro called argument denoting value returned 
return models return method return value 
assignment res top return macro needs explanation 
problem faced java allows value denoting expressions contain calls value returning methods may side effects 
promela expressions syntactically different class statements side effects 
consider example statement consumer class run method received count attrdata buffer get ignoring casting attrdata right hand side assignment side effects right hand side promela assignment allow 
solution execute method assignment store result value result array introduced purpose 
note array order model assignment statements form value returning method calls occur expression 
part translation consumer class run method shown 
buffer get macro execute store return value res top res result array 
value picked assignment statement 
note value returning method calls single expression top variable incremented evaluation reset previous value values accessed 
define proctype obj int res byte top 
obj res top 
fig 

consumer thread init atomic obj main atomic buffer atomic producer atomic consumer fig 

main method main method main method main class translated promela init section seen 
explained translation object creation activity particular main method 
recall constructors producer consumer classes example start processes 
analyzing program program correct sense errors spin applied promela code generated jpf 
order illustrate effectiveness jpf spin course seeded errors program shown error analyzed incorrect program jpf 
experiment described 
result results experiment shown table 
error give line numbers changed referring new contents lines 
example error obtained changing line protected int putptr initializing 
results applying jpf shown fourth column 
result applying spin model checker promela code generated jpf 
possible outcomes deadlock assertions violated referring occurring count referring second received attr 
point errors caught 
columns show result running modified java program versions java virtual machine jvm order see plainly executing program highlight errors seeded 
jvm version older version deterministic 
means executing multi threaded program times yields result time 
jvm newer version native threads java threads mapped solaris threads 
version non deterministic potentially yielding different results different runs multi threaded program 
program run times numbers indicate percentage runs highlighted error deadlock assertion violation thrown nullpointerexception 
runs model checking jvm runs executed sun ultra sparc mb main memory solaris operating system version 
running spin model checker promela code generated jpf typically half second find error explored states similar number transitions 
cases error approximately states transitions explored seconds 
memory consumption mb 
amount memory probably explained modeling java virtual machine promela 
errors special marked sense really errors environment described section 
environment creates consumer errors manifest needed create consumers 
addition consumers assertions sense deleted 
table 
verification results nr 
line modification changed jpf jvm jvm protected int putptr protected int usedslots usedslots size usedslots putptr putptr size array putptr putptr size putptr putptr usedslots size notifyall remove usedslots notifyall usedslots usedslots notifyall usedslots notify usedslots size notify usedslots usedslots halted usedslots notifyall remove usedslots size notifyall usedslots usedslots size notifyall usedslots remove halted true notify remove notifyall just looking deadlocks 
table rows errors show result verifying executing changed multi consumer environment 
verification error needed minutes mb exploring states transitions deadlock 
verified scaled version error buffer size producer producing values 
deadlock model checker minute mb exploring states transitions 
spin seconds verify original program contained errors 
involved exploration states transitions memory consumption mb 
comments result example small main purpose illustrate translation done jpf 
exercise show half errors guaranteed caught plainly executing program newest version jvm contrast jpf finds errors time setup errors consumer 
difference obvious errors 
errors suggested reviewer 
chance catching errors executing program gets smaller program size increases 
error traces spin identifies error translated promela code deadlock assertion violation returns error trace showing sequence executed promela statements leading initial state state error occurs 
tool currently map promela error traces back corresponding java traces 
alternative extended verify class special print methods called programmer selected places java code 
calls translated promela print statements set print graphical dimensional message sequence chart 
shows chart illustrating trace error number 
obtain chart explained added print statements places code 
example lines pushing current lines downwards added statements verify print put putptr verify print get printed text string put get position buffer value stored put respectively retrieved get 
fig 

trace error print statements record events producer setting halted flag consumer getting corresponding exception 
illustrates situation producer center vertical line produces values stored positions 
consumer gets value position consumer gets values 
producer finishes sets halted flag consumer gets exception trying get fourth value position 
consumer values assertion count broken 
note second assertion broken 
adding print statements requires thought idea may fact useful cut enormous amount information contained error traces created spin 
described initial prototype translator non trivial subset general purpose programming language java model checking language promela 
applied translator variations small example program observing model checker catches bugs executing programs catch bugs safely half cases 
currently applying translator collection real programs developed nasa outcome experiments published time 
example collaboration nasa goddard space center involves verification satellite file link protocol written java 
translator addition applied analyze chinese chess game server application written java 
lead confirmation suspected deadlock identification smaller scenario leading deadlock 
documented 
essential question translation optimal 
need evaluate question 
may ways translate promela may consider making pass avoiding promela translating directly interface spin model checker 
major point discussion model object creation 
early thought promela model classes spawn process object creation 
solution turned attractive direct access variables process outside process 
described extension spin allowing accesses 
jpf modified translate object synchronizations exceptions efficiently introducing new special purpose arrays holding locking exception variables keeping variables separate user defined variables 
gave reduction amount code generated spin 
simpler solution readability reasons 
see current translator prototype experiment involving man months 
plans involves writing model checker directly java 
equally important planned efforts build abstraction workbench java programs reduced size model checking applied 
techniques program slicing interpretation partial evaluation great influence 
believe kind technology useful unit testing focuses single classes just demonstrated example 
requires setting aggressive environment consisting collection threads unit accesses 
believe technology useful students learning program java 
concerning specification language main approach extend java language express temporal properties calls methods defined special temporal logic class verify class methods static need instantiate class objects calling methods 
addition assert method example imagine method eventually method basically include spin linear temporal logic operators methods having boolean return types addition boolean argument types composed 
calls methods generate ltl formulae verified referring position called code 

gerard holzmann changing spin support translation exceptions 
members automated software engineering team nasa ames research center comments particular mike lowry supporting project john penix willem visser proof reading manuscript 
reviewers 
java parser ported peter sestoft royal veterinary agricultural university denmark moscow ml standard ml version written olivier brunet gordon alex aiken group university california berkeley usa 

arnold gosling 
java programming language 
addison wesley 


modeling verification sc applications 
tacas tools algorithms construction analysis systems number lecture notes computer science april 
lisbon portugal 

corbett 
constructing compact models concurrent java programs 
proceedings acm sigsoft symposium software testing analysis march 
clearwater beach florida 

iosif 
modeling validation java multithreading applications spin 
proceedings th spin workshop november 
paris france 

detlefs leino nelson saxe 
extended static checking 
technical report compaq systems research center palo alto california usa 

gosling joy steele 
java language specification 
addison wesley 

havelund 
mechanical verification garbage collector 
ery sanders editors fourth international workshop formal methods parallel programming theory applications number lecture notes computer science april 
san juan puerto rico usa 

havelund larsen skou 
formal verification audio video power controller real time model checker uppaal 
th int 
amast workshop real time probabilistic systems number lecture notes computer science may 
bamberg germany 

havelund lowry penix 
formal analysis space craft controller spin 
proceedings th spin workshop november 
paris france 
appear ieee trans 
software engineering 

havelund shankar 
experiments theorem proving model checking protocol verification 

gaudel woodcock editors fme industrial benefit advances formal methods number lecture notes computer science 
oxford england 

havelund 
applying model checking java verification 
dams gerth editor theoretical practical aspects spin model checking th th international spin workshops number lecture notes computer science july september 
trento italy toulouse france th workshop 
describes application jpf game server 

havelund skou larsen lund 
formal modeling analysis audio video protocol industrial case study uppaal 
proceedings th ieee real time systems symposium dec 
san francisco california usa 

holzmann 
design validation computer protocols 
prentice hall 

pell gat muscettola smith 
plan execution autonomous 
proceedings international joint conference artificial intelligence august 
nagoya japan 

visser havelund penix 
adding active objects spin 
dams gerth editor theoretical practical aspects spin model checking th th international spin workshops number lecture notes computer science july september 
trento italy toulouse france th workshop 

