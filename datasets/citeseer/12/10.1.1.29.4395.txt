nfas tagged transitions conversion deterministic automata application regular expressions ville helsinki university technology laboratory computer science pl finland vl iki fi conservative extension traditional nondeterministic finite automata proposed keep track positions input string uses selected transitions adding tags transitions 
resulting automata reminiscent nondeterministic mealy machines 
formal semantics automata tagged transitions 
algorithm convert augmented automata corresponding deterministic automata process strings efficiently 
application regular expressions discussed explaining algorithms implement example substring addressing lookahead operator informal comparison widely algorithms done 

methods translating regular expressions deterministic finite automata known 
resulting automata able distinguish string belongs language defined original regular expression 
possible example tell position extent subexpressions regular expression matching string 
algorithms exist solving problem described widely ones usually require simulating operations nfa processing input string interpretive backtracking algorithms take polynomial exponential worst case time nonconstant space combination 
example gnu regexp library consumes time exponentially regular expression input 
input characters matching takes tens seconds modern workstation 
nakata proposed way adding semantic rules regular expressions converting deterministic automata algorithms resolve ambiguity handle situations application semantic rule postponed time 
course attribute grammar parser generator option speed essential 
approach simpler faster orders magnitude cases intuitively understandable user 
simple regular expressions productions may necessary express equivalent language 
propose extension traditional nfas tagged transitions allow store sufficient information path taken automaton matching subexpression matching information style example posix extracted minimal 
give algorithm converting augmented nfas deterministic automata process strings linear time bound importantly efficient simple matcher loop reminiscent traditional dfa engines 
organized follows section introduces concept tagged transitions formal description semantics 
section describes conversion nfas tagged transitions deterministic automata section gives algorithm doing conversion 
section discusses application algorithms regular expressions 
technical reader may skim section skip right section 
nfas tagged transitions nfas tagged transitions similar normal nfas transitions may tag attached 
transitions called tagged transi tions 
tags form integer 
tag corresponding variable set read tagged transition current position input string assigned corresponding variable 
tag unused special value initially tags unused value 
symbol tag variable say tag implies existence variable shows tagged transitions marked graph 
untagged transitions denote tag 
usually 
omitted graphs 


reminiscent nondeterministic mealy transducers interested single path results final state input string want know addition tags places input string 

tagged transition definition 
tnfa tuple 
finite set states finite set tags alphabet finite set symbols 
prioritized tagged transition relation finite subset unique items relation 
initial state set final states meaning quintuple 
state may consume string input string set value current position input string enter state meaning priority transition explained section 
configuration element item current state second item processed part input string third item unprocessed part input string function tags values priority transition 
relation configurations yields step defined follows wu 
pw jp 
define reflexive transitive closure string accepted state function integer 
note item configuration priority transition really needed omitted 
input string parts strictly necessary 
read see included 
particular string machine may different satisfy 
order results computation predictable practical able determine particular values choose result 
choose different simply assign final state unique priority choose highest priority 
basically lexical analyzers typically patterns match lexeme 
choose different tag value ambiguity define relation configurations yields tag wise unambiguously step wu 
pu holds pw jp 
reflexive transitive closure string tag wise unambiguously accepted state function integer 
note definition recursive possible calculate effectively non recursive process automaton input string 
particular string machine accepted tag wise unambiguously accepted uniquely determined 
converting tnfa corresponding deterministic automata ways simulating operations tnfa deterministically 
main differences simulation mechanisms backtracking sets possible tag values handled matching 
reasonable deterministic matchers jwj time space string processed 
performing jwj time bound means backtracking algorithm 
traditional finite automata usual time space tradeoffs apply converting tnfa deterministic automaton may take lot time needs done resulting automaton process characters fast 
deterministic automaton may take space store corresponding nondeterministic automaton time space wasted computing transitions 
simulating tnfa takes space slower deterministic automaton 
lazy transition evaluation approach deterministic automaton constructed transition transition needed possibly keeping limited amount previously calculated transitions cache 
going need definitions 
saving possible tag values operation finite maps functions tag 
map tag values maps set operations form assign value subscript tag identifier superscript index map 
writing just shorthand writing letting need tag value mappings reordered 
similar notation example set value define set possible lists reordering commands assignment commands form define variable contains number read input symbols current position input string 
definition 
tuple finite set states alphabet finite set symbols transition function function initial state set final states initializer list commands executed symbol read set list commands executed symbol read 
final state list 
algorithm converting corresponding deterministic automata basic principle subset construction algorithm convert traditional nfas traditional dfas enumerates possible situations may occur nondeterministic automaton consumes input string 
course possible tag values enumerated finitely 
fortunately necessary need keep track tag values stored actual values ignored incremental changes stored value sets transitions 

small example 
example tnfa algorithm means simple example pseudo code follow section 
example tnfa shown 
priorities literals marked superscript integers 
tnfa corresponds posix leftmost matching regular expression gives extent parenthesized subexpression 
generate step find initial state 
initial state tnfa tagged transition definition previous section tnfa stay state reflexive enter state 
tag need save current position input string 
considerations form initial state fg fm initialization list 
states represented sets pairs tnfa state set map items pointing map locations tag values stored 
tag map item set value tag 
particular state interpreted mean tnfa state tags state containing value give initial state number shorthand 
symbol read tnfa choose actions move fg move fg move move fm move fm get second state fg fm fm fm note item position second usage stored second item map want overwrite previously stored value may needed 
notice possible ways tnfa reached state reading symbol 
value respectively situation ambiguous 
ambiguities resolved priorities assigned transitions tnfa definition section 
case fm prioritized fm state reached lower priority transition 
resolve ambiguity simply remove highest priority item set state fg fm fm give state number 
new occurrence tag introduced state current position saved add transition function entry 
notice state contains tnfa state number final state 
state number final 
input string ends state tnfa state order produce match 
give tags correct values situation add item set 
symbol read state tnfa choose actions move fg move fg move move fm move fm way get state fg fm fm command comes tricky part matter values tags freely move values maps different keys reflect changes state 
particular situation map indices may subtracted resulting state state 
add transition transition function 
complete 
depicted 
state drawn arrow leaves state enters state 
reader may wish verify matches language produces value original tnfa 

corresponding tnfa section algorithm doing kind conversions arbitrary mechanically 

conversion algorithm reach procedure takes arguments state set pairs state tags state tnfa state tags set map items tell tag values stored 
argument input symbol procedure calculates states reached states transition labelled returns result set pairs note map items form procedures refer values act symbolic names places actual tag values stored 
reach empty list transition state labelled add return closure procedure takes argument set pairs calculates states tag wise unambiguously reached states returns result set pairs tnfa state set map items 
closure push stack initialize closure stack empty pop top element stack transition state transition tagged remove add smallest nonnegative integer occur closure remove closure closure add closure push stack remove middle element priority triples closure return closure procedure main conversion algorithm basically just subset construction see example page modified tagged automata 
tnfa closure map item add initializer add unmarked state states unmarked state states mark input symbol closure reach empty list map item append state states converted series reordering commands append add unmarked state states contains final state choose smallest state set correspondingly simplicity algorithm assumes transitions tagged transition lead state transitions transitions strings longer symbol 
tnfa easily modified changing behavior follow restrictions generality lost 
algorithm understood difficult see terminates 
fairly simple theorems proofs theorem 
algorithm generates finite amount states tnfa 
proof 
finite amount tnfa states 
state item tnfa state letting denote number states tnfa state holds jsj finite amount different tags finite amount transitions 
furthermore map item set item tag 
follows items map states tnfa 
finite amount possible map item sets finite amount possible states 
consequence theorem algorithm terminates 
theorem 
generated tnfa algorithm processes input string jsj time 
proof 
deterministic amount operations transitions constant operation 
theorem immediately follows 
interesting result assumes reorder items takes operations theorem 
maximum amount operations associated transition generated algorithm amount states original tnfa amount different tags tnfa 
proof 
note algorithm obviously creates operations tag transition account operations transition 
reordering operations tag transition need items map time permuted order operations 
maps operations transition 
noted better theoretic upper bounds operations transition reached elaborate mechanisms storing tag values 
constant factors involved complicated methods far outweigh theoretical maximum amount practice simple solutions usually better 
deletion relaxed queues unidirectional flow yield upper bound transition slight penalty number states practice penalty small near pathological cases 
simply leaving reordering operations maximum operations transition easily achieved 
doing blow amount states simplest cases acceptable uses 

applications behave similarly ordinary nfas applications nfas readily adapted retaining advantage tags 
primary motivation regular expressions section considers 

regular expressions tags thompson construction see example pages create nfas regular expressions 
tags give symbol special meaning interpreted literal symbol transition tag created 
example say want match string digits followed number characters want know digit having scan part string 
tagged regular expression value tells index character successful match 
consider regular expression input string abba 
clearly ambiguous possible values 
resolve ambiguity may choose prefer leftmost match input symbols matched possible left regular expression 
case matched part regular expression left second matched part get value 
case automata generated extended thompson construction regular expressions places ambiguity may arise follows state subautomata union combined 
left subexpression right subexpression preferred 
state subautomaton repeated subexpression state looping transition leads 
zero repetitions repetitions preferred 
follow example posix semantics left subexpression higher priority right zero repetitions preferred repetitions searching longest match 
semantics need changed automaton method probably flexible backtracking algorithm matching algorithm automaton generator need modified just input data thompson construction phase fairly simple 
example get rightmost match leftmost match choosing exactly opposite preferences 
possible example rules apply individual characters subexpressions giving literal unique priority propagating decision transitions listed 
tags provide mechanism implement lookahead operator style lex flex regular expression abc def matches abc followed def def part matched string 
appel lex uses incorrect algorithm described aho fails example ab ba input aba matching ab match flex uses better mechanism works case fails warning message zx xy 
tag place tell length match lookahead operator implemented correctly 
regular expressions tags virtually normal regular expressions 
applications include lexical analyzers parsers grammars regular right parts multitude things 
implemented regular expression matching searching library lexical analyzer library support tags 

searching matching substrings introduce symbol syntax regular expressions 
easy specify language contains strings contain substring specified regular expressions 
example want recognize strings contain substring matches regular expression give loop lower priority transition add tag mark position matching substring begins loop working solution 
need ensure implementation reasonable 
usually searching defined finds longest matching substring reasonable applications 
matching hand usually defined finds longest matching prefix string 
simply matching procedure searching finding longest matching substring longest 
automata generated searching equivalent knuth morris pratt pattern matching algorithm fixed strings arbitrary regular expressions 
means automatically searching algorithm equivalent aho corasick algorithm searching fixed string patterns simultaneously 
searching algorithm extended support substring addressing tags 
course method searching matching substring stated efficient possible achieve sublinear expected time regular expression logarithmic expected time preprocessing text searched allowed algorithms developed regular expressions baeza yates case regular grammars watson 

described efficient way match regular languages extract points selected transitions single pass 
algorithms regular expression matching search library lexical analyzer library high level functional prototype language called developed research project joint helsinki university technology nokia 
main reason settle existing libraries real time existing libraries 
speed essential exponential time backtracking algorithm viable option pathological cases rare practice 
claimed easier write backtracking matcher automaton 
claim contrasted experience writing tnfa compiler probably easier write backtracking matcher easier sure automaton matcher supposed easier understand 
tested library generating pseudo random regular expressions strings match 
regular expressions strings fed existing matchers matcher 
immediately discovered numerous bugs performance problems gnu regexp library bugs gnu rx library 
libraries widely 
open problem operator defined example posix incorporated tnfa method regular expression matching 
having operator means moving realm regular languages proved nuisance regexp package implementors 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
appel 
modern compiler implementation java 
cambridge university press 
baeza yates gonnet 
efficient text searching regular expressions 
ausiello rocca editors proceedings th international colloquium automata languages programming volume lncs pages berlin july 
springer 
baeza yates gonnet 
fast text searching regular expressions automaton searching tries 
acm nov 
lesk 
lex lexical analyzer generator 
technical report bell laboratories murray hill nj 
lewis 
elements theory computation 
prentice hall 
nakata 
generation pattern matching algorithms extended regular expressions 
advances software science technology 
nakata 
regular expressions semantic rules application data structure directed programs 
advances software science technology 

real time garbage collection functional persistent heap 
thesis helsinki university technology faculty information technology department computer science 
available cs hut fi 
paxson 
flex fast lexical analyzer generator 
lawrence berkeley laboratory berkeley california 
ftp ftp ee lbl gov flex tar gz 
soininen 
languages parsing volume parsing theory pages 
springer 
stephen 
string searching algorithms volume lecture notes series computing 
world scientific publishing 
watson 
implementing finite automata toolkits 
journal natural language engineering dec 
watson 
new regular grammar pattern matching algorithm 
diaz serna editors proceedings european symposium algorithms volume lecture notes computer science pages berlin sept 
springer 
