framework understanding classifying ontology applications robert jasper mike uschold robert jasper boeing com michael uschold boeing com boeing math computing technology box seattle usa ontologies cost effectively deployed require clear understanding various ways ontologies today 
achieve framework understanding classifying ontology applications 
identify main categories ontology applications neutral authoring ontology specification common access information ontology search 
category identify specific ontology application scenarios 
indicate intended purpose role ontology supporting technologies principal actors 
illuminate similarities differences scenarios 
draw communities software developers standards organizations 
relatively broad definition ontology show done communities may viewed practical applications ontologies 
common thread need sharing meaning terms domain central role ontologies 
additional aim draw attention common goals supporting technologies relatively distinct communities facilitate closer cooperation faster progress dearth ontology applications reported ai ontology community 
begun change past year flurry papers reporting attempts successes applying ontologies especially area search retrieval information repositories example mcguinness guarino 
outside ai ontology community industry regularly ontologies successfully may call ontologies 
order cost effectively deploy ontologies require clearer understanding myriad situations contexts ways ontologies applied today 
framework understanding classifying ontology applications 
main focus describe framework immediately increase understanding ontology applications 
examples illustrate framework 
doing lay foundation comprehensive classification ontology applications scope 
longer term hope lead development specific guidelines ontologies achieve specific benefits set circumstances 
draw similar done outside ontology research community 
communities include software developers standards organizations database community working integrate heterogeneous databases 
common thread binds different communities need overcome barriers created disparate vocabularies approaches representations tools respective contexts 
need share meaning terms domain 
achieving shared understanding accomplished agreeing appropriate order authors determined coin flip 
revised version title appeared proceedings ijcai ontology workshop 
minor differences emphasis reflecting different different goals kaw workshop 
way conceptualize domain explicit language 
result ontology applied wide variety contexts various purposes 
goal draw attention similarities different communities facilitate faster progress 
groups strive overcome barriers noted previous paragraph ironically underlying issues create barriers closer cooperation different communities addressing similar problems 
hope lower barriers identifying highlighting commonality communities pointing important differences 
creating framework propose common nomenclature hope enable workers different communities overcome terminological confusion 
try reconcile differences communities highlight commonality groups single framework 
terminology acronyms purposes take lowest common denominator view notion ontology 
aim define adopt characterization quoted uschold emphasis ontology may take variety forms necessarily include vocabulary terms specification meaning 
includes definitions indication concepts inter related collectively impose structure domain constrain possible interpretations terms broad interpretation helps show goals technical approaches developed achieve similar different communities 
example common goals include reuse interoperability 
common technologies include special purpose modeling languages ontolingua gruber express wilson international standards organization idl translation tools 
easily view number standardization efforts step omg practical applications ontologies 
overview framework main part framework consists set ontology application scenarios 
application mean system process usually computer program benefits ontology 
scenario case class similar applications 
describes particular situation ontology put specific purpose 
identify main categories ontology applications neutral authoring ontology specification common access information ontology search 
category identify specific application scenarios 
example neutral authoring category scenarios authoring ontology authoring operational data 
scenario illustrated simple diagram 
scenarios important variations call attention 
scenarios variations illustrated examples diverse communities 
achieve goal enabling scenarios easily compared uniform way consistent terminology 
scenario characterized give rise key dimensions framework intended purpose benefits role ontology actors required implement scenario supporting technologies maturity level 
object language specifying information models originally developed part step standard 
standard exchange product model data informal name iso family standards object management group see www omg org additional distinctions play important role scenarios meaning terms represented informal formal sharing vs exchange pass pass value 
remainder section describe key dimensions distinctions form basis framework 
ontology application scenarios 
framework dimensions purpose benefits fundamentally ontologies improve communication humans computers 
broadly may grouped areas assist communication human agents achieve interoperability improve process quality engineering software systems 
adapted uschold 
communication people 
unambiguous informal ontology may sufficient 
inter operability computer systems achieved translating different modeling methods paradigms languages software tools ontology interchange format 
systems engineering benefits particular re usability ontology basis formal encoding important entities attributes processes inter relationships domain interest 
formal representation may automatic translation re usable shared component software system 
search ontology may meta data serving index repository information 
reliability formal representation possible automation consistency checking resulting reliable software 
specification ontology assist process identifying requirements defining specification system knowledge 
maintenance ontologies system development part application render maintenance easier number ways 
systems built explicit ontologies serve improve documentation software reduces maintenance costs 
maintenance important benefit ontology neutral authoring language multiple target languages maintained place 
knowledge acquisition speed reliability may increased existing ontology starting point basis guiding knowledge acquisition building knowledge systems 
role ontology ontology application scenarios vary ontology 
complicated fact scenario frequently possible think ontology involved 
example ontolingua frame ontology basis expressing domain ontology 
ontology application scenario needs clear ontology 
facilitate introduce roles information play scenarios 
thought information levels 
operational data role information plays information consumed produced applications runtime 
information written terms vocabulary defined ontology role information plays information specifies terms definitions important concepts domain 
ontology typically development processes create applications 
information provides vocabulary language author information application developers development process write ontologies level information author information ontology representation language role information plays information ontology au importantly information play different roles different times depending context 
example schema express plays role ontology viewpoint user application 
viewpoint application development tool express compiler information plays role operational data 
avoid kind potential confusion focus user applications information plays role operational data 
assumption examples information typical level operational data particular part process description ontology ap pif ontology representation language express ontolingua share exchange information requires model example sharing ontolingua ontologies requires development tools parse syntax ontolingua 
example arises context step family standards 
step defines standard exchange schema instances clear text encoding iso level exchange level requires schema written express wilson international standards organization level similar analogies exist object sharing exchange standards omg 
information level represented syntax ontology ontolingua versus loom 
possible syntax represent information different levels 
example class definition instance definition may expressed syntax ontolingua 
primitives ontolingua define instance part language 
terms may require mapping levels 
example class ontolingua may mapped loom 
actors scenario involves set actors 
actor represents role person application may play 
person application may play role scenario 
actors may play primary secondary role scenario 
follow list describes actors ontology author oa role author ontology 
role usually played person 
operational data author da role author operational data language uses defined terms vocabulary ontology 
application developer ad role developer application 
applications may discover information level operation application 
requires intelligence part application learn ontology prior actual interpretation information application user au role user application 
knowledge worker kw role person knowledge 
supporting technologies great variety technologies exist support ontology applications 
include limited ontology representation languages uml express ontolingua xml knowledge interchange languages kif pif lee cdif translation tools ontolingua translators cdif tools 
lots distributed objects corba com maturity level indicate degree applications supporting technologies scenario mature 
extreme scenario may untested idea specification class potential applications 
systems implemented tiny scale demonstrations feasibility research environment fielded applications commercial environment 
important distinctions representation meaning meaning ontology represented varies greatly turns important factor success applying ontologies 
simplest ontologies regard consist simple taxonomy terms 
meaning supplied single relation defines taxonomy 
relation usually specialization relationship various relationships part similar subject matter 
close inspection implicit taxonomy yahoo 
reveals consistent specific meaning relationship 
extreme rigorously formal carefully axiomatized ontologies tove gruninger fox pif lee 
meaning captured ontology varies amount represented degree formality representation 
amount meaning attribute ontology directly related restricting possible interpretations serves primary purpose reducing ambiguity 
greater amount meaning fewer possible interpretations ambiguity 
formality attributed ontology representation language vary natural language formal logic 
human communication purposes informal specification meaning may preferred 
low ambiguity important humans ontologies aid development systems 
formal definitions may helpful informal ones accompanying documentation 
ontology intended automatically processed ontologies rich meaning challenging task may promise greater rewards 
short term light weight ontologies rich meaning easier apply working systems 
excellent example multiplicity uses ontologies semantically structure information repository basis search retrieval 
happening industry yahoo 
research 
contrasts challenging task taken pif project maturing commercial tools 
nature tasks search vs inter operation dramatically different 
light weight ontology help developing translation tools immediate benefit search purposes 
common object request broker architecture search area obvious benefits richer ontologies 
example support inference increase precision recall semantically structured information repository 
sharing vs exchange depending purpose ontology specific needs application different architectures appropriate accessing information resources 
distinguish exchange sharing examples step collection standards iso 
similar distinctions environments 
sharing multiple agents computer human common piece information 
information typically resides outside applications sharing information 
common sharing single application internal data external applications 
step standard data access interface iso exchange multiple applications exchange passing data value copying data 
step clear text encoding standard iso 
ontology application scenarios section describes scenarios applying ontologies achieve purposes 
scenarios abstractions specific applications ontologies taken industry research 
analogous jacobson cases jacobson 
scenario includes overview identifies intended purpose ontology role ontology important actors supporting technologies 
illustrated diagram includes concrete examples 
appropriate identify number alternate variations main scenario 
assess maturity level scenario 
diverse applications ontologies literature various dimensions classified clear best group major categories 
eventually main categories emerged 
neutral authoring information artifact authored single language converted different form multiple target systems 
benefits approach include knowledge reuse improved maintainability long term knowledge retention 
ontology specification ontology domain created basis specification development software 
benefits approach include documentation maintenance reliability knowledge re 
common access information information required persons computer applications expressed unfamiliar vocabulary inaccessible format 
ontology helps render information intelligible providing shared understanding terms mapping sets terms 
benefits approach include inter operability effective reuse knowledge resources 
ontology search ontology searching information repository desired resources documents web pages names experts 
chief benefit approach faster access important information resources leads effective reuse knowledge resources 
scenario neutral authoring basic idea scenarios author artifact single language artifact translated different format multiple target applications 
benefits approach include decreased cost reuse portability knowledge applications improved application maintainability artifact authored place centrally updated long term knowledge retention reduced disruption changes vendor formats 
important distinction authored artifact requiring translation ontology operational data 
discussed sections 
authoring ontologies overview au ontology convert convert application oa authoring ontologies motivation authoring neutral ontologies decreased cost reuse maintenance knowledge 
accomplish actors develop ontology translated multiple operational target systems 
supporting technologies include unidirectional ontology translators 
principle actors ontology author application user 
scenario ontology author creates ontology translated different formats multiple target applications 
example ontology may part knowledge base application 
application users interact operational system perform desired tasks 
examples ontology author creates ontology titanium ontology authoring language ontolingua 
application developer translates ontology loom syntax possibly assisted automatic translation tools 
application developer directly imports translated ontology loom part application may contain additional information knowledge base 
application user interacts final system answer questions titanium 
ontology reused application developer wishes language prolog 
case translate ontology prolog proceed loom example 
note authoring scenario way translation required 
contrasts case described way translation required ontology interchange format 
example illustrates achieve knowledge reuse virtue fact ontology authored single language multiple applications 
application maturity totally automated translation ontologies operational targets difficult typically relies translation idiomatic expressions gruber 
case studies analysis problems see grosso uschold valente :10.1.1.24.3839
authoring operational data uses au da authors ontology operational translate data application 
authoring operational data translate application neutral authoring operational data identical structure neutral ontology authoring 
focus authoring translating operational data ontology 
main differences role ontology plays scenario primary actors 
overview motivation authoring neutral operational data improved maintainability operational data 
accomplish ontology author secondary actor develops ontology defines neutral format primary actor author operational data 
tools translate operational data application 
supporting technologies include unidirectional operational data translators 
scenario data author creates operational data pre existing ontology tools translate operational data operational target system unidirectional translator 
application users interact system perform analysis query operational data 
ontology originally constructed careful analysis domain intended class target systems identifying integrating implicit ontologies applications 
examples operational data author uses ontology workflow systems describe workflow model 
tools translate description operation data various target systems 
application users perform analysis critical path translated operational data 
example frame ontology plays role ontology class object oriented representation systems loom classic 
engineering math ontology gruber olsen set sentences written ontology 
converted appropriate format set sentences plays role operational data target applications loom 
note example viewing loom system development tool user application 
example illustrates importance distinguishing different roles information scenarios information artifact may play role 
enables show commonality apparently different scenarios 
variations may application translator time 
arises motivation reduce risk changing vendor offerings 
maintains models operational data single representation new vendor format introduced may easier reliable develop new translator convert neutrally authored artifact new format thousands lines code convert artifact directly may hundreds thousands lines 
example commercial application approach outlined uschold gruninger 
case point point translators built going interchange format ontology may play important role specifying translator created manually 
ontologies formal rich scope partially automating construction translators maintaining changes language 
analogous ontologies kads methodology plays role specifying requirements software 
maturity remarks apply previous section 
common practice industry build point point translators need arises 
may turn cost effective depending environment 
closing remarks insofar single ontology may converted different applications important way achieve knowledge reuse 
various systems ontology facilitates inter operation systems required 
involve sharing exchange knowledge systems 
addressed detail 
scenario similar neutral authoring important differences 
scenario ontology specification basic idea scenario author ontology models application domain provides vocabulary specifying requirements target applications 
richer ontology expressing meaning potential ambiguity creating requirements 
software ontology plays important role development software 
benefits approach include documentation maintenance reliability knowledge re 
structurally scenario similar neutral authoring see 
cases ontology plays important role development application 
important differences 
ontology useful scenario application 
second neutral authoring scenario ontology translated se 
guides development target application 
scenarios target application intimately related sense contains ontology 
neutral authoring scenario ontology explicit component application 
current scenario 
oa authors build ad ontology application conforms optional ontology specification application application ontology explicit implicit 
principled methodology software development building conceptual model domain uml comprise explicit ontology application 
ontology software application may implicit 
ontology application scenario ontology target application explicit develop software 
examples kads cml ontology author creates ontology conceptual modeling language cml kads methodology 
application developer uses ontology part requirements specification developing target kbs diagnosing faults 
application user interacts kbs solve tasks 
example documentation improved explicit representation ontology software 
better documentation maintenance easier 
reuse achieved ontology different applications domain 
ii ontologies help automate process knowledge acquisition software development 
ii system automatically generates knowledge acquisition tools ontology 
ensures tight connection ontology user interface facilitates entering knowledge 
resulting knowledge bases target application 
documentation improved explicit connection ontology target software 
turn assists maintenance 
direct benefit terms maintenance ontology changes easier update knowledge acquisition tools automatically created 
scope automating migration existing knowledge bases underlying ontology changes 
reuse achieved ontology different knowledge systems 
information modeling data modeling languages express wilson international standards organization idef bruce create data base schema thought ontologies 
case express data base schema specifies physical file format target implementation 
generally information system modeling languages uml create ontologies serve specify target software 
object oriented modeling special case information modeling object oriented analysis design popular years 
analysis phase approach building software consists identifying taxonomy classes provides vocabulary specifying software requirements 
taxonomy attributes slots essentially thing ontologies produced examples noted 
primary motivation object oriented methodology reuse methods particular attributes class inheritance 
kind reuse analogous reusing existing ontology building systems larger ontologies 
different form notion ontology achieve knowledge sharing neutral authoring neutral interchange format 
software synthesis automated software synthesis multiple target languages specware waldinger williamson generalization neutral authoring language scenario 
application developers play key role development ontology problem statement specification 
typically developers semi automatically refine specification ontology operational target application 
maturity kads methodology widely building knowledge systems 
formal connection ontology developed software 
main role ontology guide development software serves important purpose documenting system 
stress ontology kept synch application utility ontology documentation aid 
practice frequently happens 
ii system process ontology develop software partially automated tighter connection ontology implemented software 
system produce fielded applications dozens licensed users medical domain 
express idef uml various languages commercial tools automatically generating parts target software specifications 
various tools translating languages express uml 
semi automated software synthesis formal connection ontology qua specification software shows promise primary focus ontology community 
scenario common access information basic idea approach ontologies enable multiple target applications humans access heterogeneous sources information unintelligible 
benefits approach include interoperability knowledge reuse 
scenarios category differ number ways 
direct consumers information may humans computer applications 
second information artifact may play role ontology operational data may non computational product data computational services 
important distinction target applications agree shared ontology local ontology 
case information intelligible translators case ontology mapping rules 
access information may sharing exchange 
kw oa human communication overview kw oa ontology human communication major benefit ontology development promote common understanding knowledge workers 
accomplish authors develop common shared ontology knowledge workers 
non computational skills library classification valuable building ontologies commonly take form glossaries 
supporting technologies include ontology editors browsers 
principle actors ontology authors knowledge workers 
information shared ontology 
scenario ontology authors create ontology knowledge workers 
scenario require computer 
examples glossary terms enable different working groups may different jargon understand workflow management coalition document members 
producing glossaries providing common access humans important knowledge assets key focus knowledge management community 
form explicit glossary framework embodies informal ontology ontology applications serves purpose enhancing communication humans different terminology 
variations may ontology main item interest enables knowledge workers better understand documents written unfamiliar terminology 
example easier understand papers different communities discussed 
maturity informal methods exist creating informal ontologies 
library classification skills long history appropriate 
may various tools offer automated assistance creating ontologies aware 
kw application ad specifies oa builds translators ontology conforms operational data application specifies tn application scenario indicates ontology interchange format enable common access operational data 
data access shared ontology overview data access shared ontology motivation data access shared ontology reducing cost multiple applications having common access data 
may turn facilitate inter operability 
accomplished developers agreeing shared ontology defines common language exchanging sharing operational data 
supporting technologies include translators parser generators printers 
principle actors ontology authors application developers 
scenario ontology author creates ontology different application developers agree 
defines interchange format way translation required application formats 
pair translators application effect defines application interface read write data 
translators 
manually created cases api reading writing new format may automatically generated parser generators printers see variation 
helps bulk deciding calls api required translate data item stored internal data structures remains challenging manual effort 
inter operation multiple applications possible allowing access information 
examples team ontology authors created process interchange format pif 
idea library process models expressed various application specific formats available applications 
currently working formats idef ilog 
ongoing research 
ecocyc karp commercial product uses shared ontology possible access various heterogeneous databases field molecular biology 
ontology conceptual schema integration conceptual schemas separate databases 
variations depicts natural way view situation explicit linear format application uses saving loading operational data 
translators logically separate applications operate independently 
variation case format internal data structures application generated reader writer oa ontology conforms operational data generated writer reader application variation translation formats achieved readers writers reside applications 
data access shared ontology variation application converted target format readers writers internal application 
explicit language language translation se effect way translation neutral format see 
example ontology author creates shared ontology geometric data ontology representation language express 
application developers parser printer generators generate code language du jour commercial product 
provides applications api read write data applications exchange 
guarantees data conforms axioms express schema 
maintaining consistency left application developers users 
variation data access shared ontology exemplified ecocyc example 
applications formats translating ontology interchange format just application database uses single format specified ontology 
case translation operational data case databases pre existing formats new format 
example pif example similar process creating ontology place 
possibly implicit ontologies languages express information domain combined single neutral format 
variations 
typically applications ontology development process incorporating code generated ontology application 
variation application ontology runtime known late binding development time early binding 
variation involves applications interchanging data shared data store 
example step interface 
related variation single application reads writes data store purpose persistence ease maintenance 
maturity contexts product data express approaches data access shared ontology relatively mature 
commercial success exists application developers agree shared ontologies 
achieving agreement wide variety applications industries difficult 
contexts pif technology long way mature 
number factors may influence apparent gulf maturity step community explicit language language translation approach pif 
apparent success may due sheer differences amount effort applied 
vendor supporting step formats devotes significant amount effort obtain compliance 
furthermore effort spread vendors 
means dozens hundreds person years effort compared just person years devoted pif research project 
express may state important constraints rules rules shared exchanged translated 
maintain integrity data 
pif effort specification operational behaviour intended shared 
fully general techniques translating behavioural specifications current state art 
addressed time included long term vision step 
pointed compliance step standard imply complete error free movement data vendor applications 
problems remain 
representations pif community contain implementation require manual effort implement 
contrast express closer implementation manual effort reduced expense flexibility implementation 
data access mapped ontologies overview oa generated application ontology reader writer generates mapping mediator generated writer reader data access mapped ontologies oa ontology application motivation scenario 
key difference explicit shared ontology mapping rules define term ontology means ontology 
mediator uses rules runtime applications access data 
approach advantage requiring application developers explicitly agree shared ontology 
supporting technologies include parser generators printers mediators 
principle actors ontology authors application developers 
scenario application wishing exchange data local ontology 
application developers cooperate create shared mapping relates terms different ontologies 
mapping generate mediator maps operational data expressed terminology ontology operational data expressed ontology 
example developer application electrical power suppliers wants share data application schematic viewer 
application ontology created express 
developers agree mapping represented express relates terms power supply application electrical schematics 
mapping generate mediator maps portions electrical power supply data schematic data 
variations variations data exchange mapped ontology shared ontology 
mapped ontologies define views 
ontology represents view data mapped larger ontology 
analogous database views 
shared services overview client ad generated oa ontology ad generated api api shared services motivation shared services neutrality language machine operating system location 
developers achieve agreeing shared ontology defines interfaces multiple target languages 
similar data access shared ontologies focus shared 
supporting technologies include interface generators marshaling routines 
principle actors ontology authors application developers 
scenario ontology author creates ontology different application developers agree 
parser generators printers generate application interface definitions application uses read write data 
example ontology author uses language idl uml create ontology objects domain discourse product data management 
ontology generate interface code client server corba 
client applications interface services server regardless location operating system location 
maturity standards machinery supporting approach relatively mature 
success depends primarily agreement ontology semantic richness satisfy requirements client server 
server kw scenario ontology search ontology search engine ontology search information basic idea approach ontology searching information repository desired resources documents web pages names experts 
motivation improve precision recall reduce amount time spent searching see 
principle actors knowledge workers application users ontology authors 
supporting technologies include ontology browsers search engines automatic tagging tools automatic classification documents natural language processing meta data languages xml natural language ontologies large general purpose knowledge bases thesauri knowledge representation inference systems 
scenario ontology author creates ontology assists knowledge workers identifying concepts interested 
search engine uses concepts locate desired resources repository 
examples knowledge discovery tool knowledge worker enters words related concept interest tank 
browser consults large wordnet ontology identifies potential ambiguities asks user identify correct concept storage tank army tank 
browser re formulates query automatically appending negation terms closely related wrong concept 
example desired concept storage tank responses contain words strongly associated army excluded yahoo 
approach ontology index repository 
requires items repository linked items index 
ontology author creates ontology typically simple taxonomy relations terms 
knowledge worker uses help limit scope search 
specialized search engine uses terms locate relevant documents repository 
variations various specific roles ontology may play assist search 
may separately concert 
basis semantically structuring organizing information repository structure may distinct ways chosen draw kw perspective fact search engine ontology application irrelevant 
equally valid introduce application developer actor uses ontology view knowledge worker application user 
conceptual framework help user think information repository formulate queries yahoo 
taxonomy vocabulary meta data indexing tagging documents repository require user interaction assist query ontology different ways depending involvement user 
ontology drive user interface creating refining queries example disambiguating corresponds example 
perform inference improve query requiring user interaction addition specific role ontology plays scenarios ontologies search vary queries strictly word semantic concepts documents explicitly tagged concepts ontology various steps partially fully automated 
automation may help various ways 
important area research automatic tagging classification documents 
natural language processing kick start ontology development process automatically identifying potential concepts producing preliminary taxonomy 
natural language processing may help understand user query 
challenging active area research ontology basis performing inference improve search 
subsumption helpful mcguinness provided description logic languages 
boeing internal prototype search tool performs inference various concept associations term thesaurus improve search queries 
semantic richness ontology may important factor 
hypothesize richer ontology improve inference capability turn improve search 
maturity commercial internet portals explore concepts technologies described ontology search 
research projects closely aligned idea explored 
discussion framework understanding ontology applications 
reasons diversity ontology applications different notions ontology partly correlates different applications main point highlight similarities done different areas 
intend disseminate framework step omg information integration communities 
hope increase repertoire tools methods wider community achieving goals 
important emphasize application may integrate scenarios 
hope bringing place workers may inspired creatively combine useful applications 
going done 
includes details interesting variations exist scenarios mentioned 
addition ones mentioned important warrant separate diagrams examples discussion 
said maturity approaches 
particularly interested illuminating approaches great limitations contexts seeing commercial success contexts 
example pif versus express applications data access shared ontology scenario 
alternate technologies tradeoffs areas ontologies may applied explicit account circumstances approach 
identify alternate technologies accomplish goals tradeoffs 
example ontologies interchange formats unproven technology sharing complex operational data 
alternative build point point translators 
host unexplored issues 
eventually turned guidelines potential ontology application developers advised approach specific circumstances 
areas areas explored sufficiently 
need brought framework 
role large scale general purpose ontologies cyc 
domain modeling community software engineering 
information integration heterogeneous databases data warehouses 
populate framework list wide variety actual systems reported research industry classify framework 
recommend research performing analysis hope provide thorough review state art ontology application 
populated framework better understanding maturity various approaches various tradeoffs hope naturally suggest fruitful areas research 
peter clark john thompson helped identify distinctions ontology search scenarios 
peter clark florence deborah mcguinness richard fikes doug lenat fritz lehman provided helpful feedback discussions earlier versions 
helpful feedback provided anonymous referees 
bruce 

designing quality idef information models 
house publishing 
york 

knowledge base discovery tool 
proceedings aaai 
grosso gennari musen 

knowledge models collide happens 
proceedings eleventh workshop knowledge acquisition modeling manage ment 
track shareable reusable components knowledge systems banff alberta canada 
see url ksi cpsc ucalgary ca kaw kaw kaw proc html 
gruber 

translation approach portable ontology specifications 
knowledge acquisition 
gruber olsen 

ontology engineering mathematics 
proc 
fourth international conference principles knowledge representation reasoning 
morgan kauffman 
available stanford knowledge systems laboratory technical report ksl 
gruninger fox 

logic enterprise modelling 
brown sullivan eds reengineering enterprise pages 
chapman hall 
guarino masolo 

ontoseek large linguistic ontologies accessing line yellow pages product catalogs 
ieee intelligent systems 
international standards organization 
express language manual 
iso 
jacobson jonsson 

object oriented software engineering case driven approach 
wokingham england addison wesley 
karp riley paley toole 

ecocyc encyclopedia coli genes metabolism 
nucleic acids res 
see ecocyc com abstracts html 
lee yost group 

pif process interchange format framework 
technical report mit center coordination science 
mcguinness 

ontological issues knowledge enhanced search 
guarino ed formal ontology information systems pages trento italy 
members 

glossary workflow management coalition specification 
technical report workflow management coalition 
gennari eriksson puerta tu musen 

reusable ontologies tools performance systems ii solutions sisyphus 
international journal human computer studies 
wilson 

information modeling express way 
oxford university press 
uschold gruninger 

ontologies principles methods applications 
knowledge engineering review 
available aiai tr aiai university edinburgh 
uschold healy clark woods 

ontology reuse application 
guarino ed formal ontology information systems pages trento italy 
uschold 

knowledge level modelling concepts terminology 
knowledge engineering review 
available aiai tr aiai university edinburgh 
valente russ macgregor swartout 

building re ontology air campaign planning 
ieee intelligent systems 
waldinger srinivas goldberg 

specware language manual 
williamson healy jasper 

formally specifying engineering design rationale 
technical report applied research technology boeing 

