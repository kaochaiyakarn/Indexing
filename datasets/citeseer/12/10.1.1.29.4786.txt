netsolve network server solving computational science problems henri casanova jack dongarra november presents new system called netsolve allows users access computational resources hardware software distributed network 
project motivated need easy efficient mechanism computational resources remotely 
ease obtained result different interfaces require programming effort user 
performance ensured load balancing policy enables netsolve computational resource available efficiently possible 
netsolve designed run heterogeneous network implemented fault tolerant client server application 
keywords distributed system heterogeneity load balancing client server fault tolerance linear algebra virtual library 
university tennessee technical report cs department computer science university tennessee tn mathematical science section oak ridge national laboratory oak ridge tn ongoing thread research scientific computing efficient solution large problems 
various mechanisms developed perform computations diverse platforms 
common mechanism involves software libraries 
unfortunately libraries presents difficulties 
software libraries highly optimized certain platforms provide convenient interface computer systems 
libraries may demand considerable programming effort user may time learn required programming techniques 
limited number tools developed alleviate difficulties tools usually available limited number computer systems 
matlab see example tool 
considerations motivated establishment netsolve project 
netsolve client server application designed solve computational science problems network 
number different interfaces developed netsolve software users fortran matlab web easily netsolve system 
underlying computational software scientific package ensuring performance results 
netsolve uses load balancing strategy improve computational resources available 
introduces netsolve system architecture concepts 
describe netsolve solve complex scientific problems 
focus linear algebra problems emphasize netsolve project easily extended order solve classes problem 
instance straightforward netsolve image processing pdes instance 
netsolve system section presents short description netsolve system discusses users exploit system complex problem solving 
architecture netsolve system set loosely connected machines 
loosely connected mean machines local network international network 
netsolve system heterogeneous means machines incompatible data formats system time 
current implementation sees system completely connected graph hierarchical structure 
initial implementation adopted simplicity 
expect order manage efficiently pool hosts scattered large scale network implementations provide greater structure tree structure limit group large range communications 
shows global conceptual picture netsolve system 
netsolve client send request netsolve agent 
netsolve communication servers effective implementations netsolve agent 
agent best netsolve resource netsolve computational server 
details choice communication server see section 
host netsolve system runs netsolve server 
distinguish types server computational communication servers 
computational server netsolve resource seen 
communication server instance netsolve agent 
implementation netsolve agent local network clients sending request netsolve 
course mandatory netsolve system may contain instance agent 
important aspect server system instance agent view system 
agents may aware details depending locations 
eventually system reaches stable state agent possesses available information system provided system undergo modifications 
netsolve client netsolve agent netsolve system request choice reply resource netsolve netsolve system term agent agent instance communication server design process contacted client sending request 
netsolve management netsolve fully distributed system needs special features management safe easy 
modifying system 
prerequisite distributed system able evolve safely easily possible 
designed netsolve new servers added time 
new server contact server system order obtain view system 
broadcasts existence servers aware independent entity 
current implementation completely nonhierarchical 
vein possible remove servers system time restart necessary modifying system behavior 
interactive managing 
manage distributed system developed interactive tool enables netsolve manager get information system modify dynamically 
tool provides telnet interface user get data configuration number participating servers characteristics number problems solvable servers problems solved 
command line instance gives list servers netsolve system seen server host jupiter 
netsolve jupiter list sv netsolve servers system known jupiter 
earth agent 
jupiter resource 
saturn resource tool provides statistics number problems solved server number requests processed instance agent date server started 
appendix shows briefly add servers netsolve system 
protocol choices communication netsolve system achieved means socket layer 
chose tcp ip protocol ensures reliable communication processes 
fact process limited certain number simultaneous tcp connections problem netsolve specification 
ensure possible heterogeneous environment netsolve uses xdr protocol hosts incompatible data format 
default protocol hosts agree data format 
interfaces main goal netsolve provide user largest number interfaces keep simple possible 
describe different kinds interface interactive programming interfaces 
interactive interfaces interactive interfaces offer advantages 
easy completely free user code writing 
second user exploit power software libraries 
third provide performance capitalizing standards tools matlab 
assume instance matlab installed machine local network 
possible run netsolve matlab machine fact computational power machine matlab available 
current implementation netsolve comprises interactive interfaces 
matlab interface example matlab interface solve eigenvalues computation 
rand 
real imaginary netsolve matlab script creates random theta matrix call netsolve function returns solution vectors real imaginary contains real parts imaginary parts eigenvalues matrix call netsolve manages netsolve protocol computation may executed remote host 
shell interface developed shell interface 
example shell interface earth netsolve mat real imaginary mat real imaginary files 
interface slightly different matlab interface call netsolve difference inputs outputs 
difference internally user responsibility know correct number parameters 
number obtained interactive tool developed netsolve see 
graphic interface interactive interfaces attractive 
developed tk tcl 
aspect interface appendix graphic interface simplest 
built top shell interface described preceding paragraph 
programming interfaces addition interactive interfaces developed programming interfaces fortran interactive interfaces programming interfaces require programming effort user 
view simplicity netsolve libraries contain routines straightforward possible 
new feature interfaces allow user call netsolve asynchronously 
mean possible post request netsolve go computation requests poll results 
asynchronous system important reasons 
allows users programs overlap netsolve computation computation 
second allows netsolve system perform computation parallel different computational servers sending netsolve requests row see 
netsolve libraries provide functions 
example enable user contact netsolve server order obtain useful informations number parameters problem 
simple examples fortran interfaces appendix load balancing netsolve load balancing attractive features netsolve project 
netsolve performs computations network containing large number machines different characteristics logical think machines suitable problem 
consider netsolve tries guess machine chosen examine criteria determine best machine 
calculating best machine hypothetical best machine yielding smallest execution time problem compute estimate time machine netsolve system 
basically split time tn ffl tn time send data receive result network ffl time perform computation time tn computed knowing workload rs processor sparc server processors workload versus workload 
network latency bandwidth local host 
size data send 
size result receive 
computation involves knowledge 
size problem 
complexity algorithm 
performance depends ffl workload ffl raw performance theoretical model developed simple theoretical model enabling assess performance raw performance workload 
model gives actual performance function workload raw performance number processors machine theta theta theta max gamma theta gamma validate model performed experiments 
results experiments shown shows ratio versus workload machine 
measure gave marks 
computed mean measures value workload 
asymptotic interpolation mean values shown continuous curve 
theoretical model shown dashed line 
see theoretical model close reality 
machine processors curve flat line performance begins drop processors loaded 
model accurate optimistic take account operating system delay manage different processors 
chaotic behavior processor machine comes fact operating system process migrations processors 
computation computation takes place communication server problem request computational server computation uses parameters listed 
distinguish different classes parameter ffl client dependent parameters 
size data send 
size result receive 
size problem ffl static server dependent parameters 
network characteristics local host 
complexity algorithm 
raw performance ffl dynamic server dependent parameters 
workload client dependent parameters included problem request sent client communication server 
evaluation completely straightforward 
static server dependent parameters generally assessed new server contacts netsolve servers configuration 
network characteristics 
network characteristics assessed times reasonable average value latency bandwidth obtained 
call static parameters supposed changed greatly mean value computed 
complexity algorithm 
new computational server joins netsolve system posts complexity problems 
complexity change depends software computational server 
raw performance 
raw performance mean performance machine process cpu 
value determined computational server startup time 
linpack benchmark obtain rate 
linpack benchmark computes user time run corresponds definition raw performance 
workload information workload parameters dynamic server dependent parameters required perform computation predicted execution time strategy described getting workload computational server computing absolutely question 
problem request involve huge number communications netsolve system highly inefficient 
communication server possesses cached value workload computational server 
cached mean value directly computation updated periodically 
admittedly value may date lead wrong estimate believe better average take risk having wrong estimate pay cost getting accurate 
emphasize tried estimate accurate possible minimizing cost computation 
shows scheme manage workload broadcast 
workload confidence interval time slice time units workload broadcast workload confidence interval view outer world width workload policy netsolve consider computational server communication server performs computation value workload knows 
broadcasts workload periodically 
call time slice delay workload broadcast shows workload function versus time 
simplest solution broadcast workload time slice 
experience proves workload machine stay long time 
time value broadcast network 
avoid useless communication chose broadcast workload significantly changed 
see shaded areas called confidence interval 
basically time value workload broadcast netsolve computational server decides value broadcast different broadcast words outside confidence interval 
workload broadcast times time slices 
parameters involved workload management width time slice width confidence interval 
parameters chosen carefully 
time slice narrow causes workload assessed costly term cpu cycles 
remember netsolve server supposed run host long period time impossible lot cpu time 
width confidence level considered carefully 
narrow confidence interval causes lot useless workload broadcasting costly term network bandwidth 
choosing effective time slice confidence interval serves function 
helps workload information communication servers accurate possible estimated value reasonable 
emphasize experimentation needed determine suitable time slice confidence intervals 
fault tolerance fault tolerance important issue loosely connected distributed system netsolve 
failure components system cause malfunction 
number side effects generated failure low possible minimize drop performance 
fault tolerance netsolve takes place different levels 
justify implementation choices 
failure detection failures may occur different level netsolve protocols 
generally due network malfunction server disappearance server failure 
netsolve process client server utility process created server detects failure trying establish tcp connection server 
connection failed reached timeout completion 
case netsolve process reports error closest netsolve server 
client report default communication server utility process server created 
server simply take failure account 
prerequisites netsolve server stopped restarted safely 
error reports contain information determine server restarted error occurred 
netsolve spread network old failure reports may arrive server failed restarted 
current policy ensures running server seen stopped servers 
words netsolve stopped restarted safely 
server takes failure account marks failed server data structures remove 
server removed time restarted 
failure robustness aspect fault tolerance minimize side effects failures 
designed client server protocol 
netsolve server receives request problem sends back list computational servers sorted suitable 
client tries servers sequence accepts problem 
strategy allows client avoid sending multiple requests problem computational servers stopped 
list server able answer client asks list communication server 
reported failures receive different list 
connection established computational server guarantee problem solved 
computational process remote host die reason 
case failure detected client problem sent available computational server 
process transparent user course solve time 
problem migrated possible computational servers solved server remains 
failures account failure occurs communication servers update view netsolve system 
communication servers keep track status remote hosts reachable unreachable 
keep track status netsolve servers hosts running stopped failed 
host unreachable netsolve server stopped hours communication servers erase corresponding entry view netsolve system 
communication servers keep track number failures encountered computational server 
number reaches limit value corresponding entry removed 
computational server poorly implemented instance calls library incorrectly eventually disappear system 
linear algebra issues netsolve deal large number different computational problems 
focus linear algebra problems 
giving general definition arbitrary linear algebra problem 
define problem name ffl name character string ffl numbers matrices vectors scalars input problem ffl numbers matrices vectors scalars output problem distinguish different data types character problem name way done lapack ffl real single precision ffl real double precision ffl complex simple precision ffl complex double precision instance define double precision linear system solve dax 
definition allows keep netsolve general purpose possible linear algebra context 
examples 
scientific packages netsolve able scientific linear algebra package available platforms installed provided formalism remains valid 
allows netsolve administrator choose best platform install netsolve select best packages available chosen platform 
current implementation netsolve university tennessee uses blas see lapack 
packages available large number platforms freely distributed 
massively parallel processors way power highperformance parallel machines netsolve 
performance challenges designing netsolve combine ease excellence performance 
factors ensure performance increasing amount required user 
addition availability diverse scientific packages discussed preceding section factors include load balancing simultaneous resources 
ffl load balancing 
computational resources available netsolve provides user best effort find suitable resource problem 
ffl simultaneous resources 
programming interfaces netsolve user write netsolve application parallelism 
see results experiments conducted local network sparc workstations 
netsolve program kept sending requests theta eigenvalues problems solved simultaneously network 
added computational servers netsolve configuration running program 
shows execution time problem experiment 
expected problems solved simultaneously different servers average execution time problem decreases number computational servers increases 
adding new problems netsolve server part design objective ensure netsolve extensive application range 
possible add new problems computational server 
netsolve administrator modifying netsolve code new addition developed simple tool handle task 
input tool configuration file describing problem output actual code computational process charge problem solving 
new problems added having concerned netsolve internal data structure 
version pseudo compiler requires effort netsolve administrator 
fact kind library supposed netsolve completely free administrator code writing 
provide simple efficient way accessing parameters problem 
particular function calls library written predefined set macros 
example formal description problem appendix details set macros way available soon compiler reaches stable development status 
initial netsolve system bound undergo numerous modifications 
eigenvalues problems experiment servers servers servers server addition simultaneous request evolving netsolve system load balancing strategy needs improved order change best guess best choice possible 
challenge come close best choice flooding network 
danger waste time computing best choice computation taken case best guess 
increase number interactive interfaces 
instance write maple mathematica interfaces similar matlab 
currently thinking providing user hotjava interface solaris systems 
interface easier matlab interface 
way improve netsolve extend wider class problems linear algebra 
problem expressed terms matrices vectors scalars solved netsolve computational server 
instance straightforward interface netsolve image processing library 
improvements intended combine ease performance main purpose netsolve project 
gui netsolve netsolve tk tcl interface main window netsolve tk tcl interface solve window example netsolve interface 
double matrix double real imaginary real imaginary parts eigenvalues int request netsolve request number int flag giving computation status int nb blocking call request netsolve eigenvalues problem matrix input real nb imaginary nb vectors output real imaginary asynchronous call request real nb imaginary nb 
computations request probe poll previous request 
computations request wait poll blocking fashion example netsolve fortran interface 
integer lda parameter lda double precision lda double precision integer request bn integer call blocking call call request lda bn bn asynchronous call call request lda bn bn 
computations 
call request probe 
computations 
call request wait adding resources netsolve start netsolve agent network earth netsolve agent starting 
netsolve agent running earth agent running start resources 
start computational server need configuration file containing information problems solvable new resource 
need specify name machine running netsolve agent 
agent entry point system agent chosen 
starting resource saturn done saturn file earth netsolve resource starting 
problems initializing 
contacting agent earth 
netsolve resource integrated netsolve system saturn check status system interactive tool described section netsolve earth list sv netsolve servers system known jupiter 
earth agent 
saturn resource netsolve earth shown easy add resources 
pre requisite know name ip address machine running netsolve agent 
formal description lapack function problem problem section name description linear system solve lapack input number matrices vectors scalars input output number matrices vectors scalars output complexity complexity algorithm xn language language target library fortran function name function call code code section int int info int null niv mim return dimension mismatch nov niv int malloc sizeof int niv mim im mim call function iv niv info ov iv null free info return solution problem info return failure 
code section math works 
matlab guide 

anderson bai bischof demmel dongarra du greenbaum hammarling mckenney sorensen 
lapack users guide 
siam philadelphia pennsylvania edition 
lawson hanson kincaid krogh 
basic linear algebra subprograms fortran usage 
acm transactions mathematical software 
dongarra du hammarling hanson 
extended set fortran basic linear algebra subprograms 
acm transactions mathematical software 
dongarra du duff hammarling 
set level basic linear algebra subprograms 
acm transactions mathematical software 
dongarra walker 
software libraries linear algebra computations high performance computers 
siam review 

