java bytecode modification applet security shin cs stanford edu john mitchell mitchell cs stanford edu computer science department stanford university stanford ca java virtual machine includes bytecode verifier checks bytecode programs execution bytecode interpreter performs run time tests array bounds null pointer checks java applets may behave ways annoying potentially harmful users 
example applets may mount denial service attacks forge email display misleading information order trick users 
concerns mind techniques may insert additional run time tests java applets 
techniques may restrict applet behavior potentially insert code appropriate profiling monitoring efforts 
main techniques class level modification involving subclassing non final classes method level modification may control objects final classes desired 
java language proven useful variety purposes including system development addition active content web pages 
previous language implementations pascal smalltalk systems intermediate bytecode bytecode medium exchange places java bytecode new light 
protect execution erroneous potentially malicious code java virtual machine verifies code properties execution performs additional checks run time 
tests protect certain forms undesirable run time behavior denial service attacks irritating audio sounds violation conventions regarding submitted research language design implementation analysis design methods software engineering practices experienced object oriented applications systems security 
contact tel contact tel fax hypertext links 
users easily customize tests performed built java virtual machine 
goal develop methods enforcing applet properties manner may customized easily 
propose technique called bytecode modification put restrictions applets inserting additional bytecode instructions perform necessary run time tests 
additional instructions may monitor control resource usage limit applet functionality provide control inaccessible objects 
techniques bear relation software fault isolation check different properties code operations specifically tailored file structure commands java language 
technique falls parts modification method level modification 
class level modification class modified refer class 
method uses class inheritance simple fast applied final classes interfaces 
cases method level modification may applied method method basis regard class hierarchy restrictions 
implemented techniques proxy server modifies classes received browser 
proxy server controlled user interface runs java applet may configured block access specific sites redirect requests special java classes eliminate tagged advertisements 
section discuss example java applet attacks outside scope current java verifier security model 
explain bytecode modification techniques section examples section 
experimental performance data appears section comparison related safe execution java applets section 
conclude section 
java applet safety describing series techniques modifying java bytecode programs give motivating examples hazardous undesirable java applets 
problems outlined section eliminated contained approach 
denial service attack java virtual machine provides little protection denial service attacks 
applet system unstable cpu time allocating memory system runs starving threads system processes 
example applet may create huge black windows screen way users access parts screen may open large number windows 
machines limits number windows open time may crash limits exceeded 
safety java runtime system may threatened inordinate system resource useful mechanism monitor control resource usage 
disclosure confidential information attack browsers navigator internet explorer hotjava provide network security mode allows applet connect web server loaded 
spite security mode applet send confidential information various covert channels 
possible third party channel available url redirect feature 
normally applet may instruct browser load page web 
attacker server record url message redirect browser original destination 
channel available ability applet send email message machine internet 
web server running smtp mail daemon applet interact sendmail connecting port web server 
allows hostile applet forge email 
way prevent form email forgery disallow connections port 
time delayed access files covert channel 
specifically applet access private information prohibited accessing net information sent applet shares file applet inter applet communications storage channels detected monitoring actions applets logging facilities 
spoofing attack spoofing attack attacker creates misleading context order trick user making inappropriate security relevant decision 
applets display url accessed mouse held graphic link 
convention url shown specific position status line 
applet displays fake url user misled 
allow applet mislead user connecting site hazardous way 
fortunately spoofing attack controlled enforcing conventions url displayed status line 
annoyance attack applet annoy users noisy sound ends 
form sound attack exploits useful feature java ability play sound background 
eliminate annoying sound users typically kill thread playing sound disable audio quit browser 
inconvenient 
possible annoyance attack browser visit web site popping new copy browser time 
way manage annoying sounds provide ability turn sound 
java runtime system monitor control objects sound 
java bytecode modification presents safety mechanism java applets sufficient solve problems summarized 
basic idea put restrictions applets inserting safeguarding code 
examples implemented tested safeguarding code may monitor control resource usage limit functionality applets 
approach form software fault isolation adapted specific structure representation java bytecode programs 
safety mechanism substitutes executable entity class method related executable entity performs additional run time tests 
instance class window replaced restrictive class safe window performs additional security sanity checks 
prefix safe indicate safe classes 
safety mechanism applied applet executed 
convenience developing proof concept applets currently modified proxy server sits web server client browser 
implementation require changes web server java virtual machine web browser 
applets browser notified changes applet subsequent requests executable entities may issued web server 
problem handled having proxy redirect requests cites safeguarding entities stored 
sections explain modified executable entities inserted java bytecode 
modifications may divided general forms class level modifications 
class level modification class window replaced subclass window called safe window example restricts resource usage functionality 
example safe window constructor method put limit windows open screen 
method allows new windows created number windows exceeds limit 
limit exceeded method throws exception indicating windows open 
safe window subtype window type safe window appear type window expected 
applet notice change attempts create windows exceeding limit 
example class level substitution done merely substituting class window class safe window 
java strings classes fields methods resolved indices constant pool class file class name index class name constant class entry constant utf entry constant pool class represented entries constant pool java awt window safe window class level modification substitutes class symbolic names stored 
constant pool modified java class file 
detail entries represent class constant pool 
class represented constant pool entry tagged constant class refers constant entry utf string representing fully qualified name class shown 
replace class name constant entry window new class name safe window constant class entry represent new class safe window shown 
class level substitution requires simple modification constant pool entry takes advantage property class inheritance 
obviously class inheritance prevents approach applied final classes interfaces 
unicode standard version iso iec jointly define bit character set encompasses world writing system 
utf ucs transformation formats developed compatibility bit characters applications protocols ascii characters 
information regarding utf format see file system safe ucs transformation format utf open preliminary specification open document number 
method level modification address limitation class level modification method level modification replaces method related method making class hierarchy structure 
approach provides flexibility method final accessed interface requires complicated modifications method method invoking instructions 
getting details show brief description field method descriptor java class file format 
field descriptor represents type class instance variable 
example descriptor int instance variable simply table shows meaning field descriptors 
descriptor type character integer boolean classname instance class table meaning field descriptor method descriptor represents parameters method takes value returns 
parameter descriptor represents zero field types 
return descriptor represents field type character indicates method returns value void 
example method descriptor method void foo thread int ljava lang thread explaining method invoking instructions modified show method compiled class file example gives bytecodes look 
method void foo thread int compiles method public foo ljava lang thread push ljava lang thread push invokevirtual thread going explain method level modification example trying replace thread restrictive method instance called safe thread ljava lang thread allow applet higher priority new upper limit defined class safe thread 
new safeguarding method invokes instance method class thread instance class thread passed new method 
instance safe thread 
new method takes priority type integer arguments compares upper limit 
argument higher argument set upper limit 
eventually new method invokes thread verified argument 
method modification method class static method class instance instance method represented constant pool entry tagged constant methodref 
constant methodref entry refers constant class entry representing class method member constant entry representing name descriptor method shown 
example constant class entry constant entry refer constant entries representing java lang thread respectively 
new class safe thread appears add new constant entry representing string new class name new constant class entry referencing new constant entry 
constant methodref entry modified refer new constant class entry old constant class entry representing class java lang thread 
method descriptor changes need add constant entry representing symbolic name new method descriptor ljava lang thread constant entry modified refer new constant entry method descriptor 
constant methodref entry represents new method safe thread ljava lang thread shown 
method invoking instruction modification various java virtual machine instructions implementing method invocations interested invokevirtual instance method invocation invokestatic class static method invocation example 
instructions take argument index constant methodref constant pool entry operand stacks different 
instance method invocation set pushing instance method belongs operand stack 
method invocation arguments pushed 
shows operand stack instruction sequences java lang thread safe thread ljava lang thread java lang thread constant class constant constant methodref constant utf constant utf constant utf entry entry entry constant class constant methodref constant constant utf constant utf constant utf constant utf constant utf constant class entry entry entry entry entry entry entry entry entry thread safe thread ljava lang thread entry entry entry method level modification substitutes method top push instance ljava lang thread ljava lang thread push argument top operand stack operand stack ljava lang thread push argument invokevirtual push instance ljava lang thread invokestatic argument argument argument instance class method invocation instance method invocation thread safe thread ljava lang thread operand stack instruction sequences method invoking instructions instance method call thread argument invokevirtual index 
class method invocation requires arguments pushed operand stack 
operand stack instruction sequences instance method call safe thread ljava lang thread shown 
argument invokestatic index 
operand stacks push instructions arguments instruction method invocation different 
new method safe thread ljava lang thread added bytecode program change invokevirtual invokestatic 
section covered details bytecode modification techniques 
class level modification requires simple modification constant pool method level modification requires bytecode instruction modifications constant pool modifications 
essentially class level modification requires computation method level modification depending relative size constant pool 
class level modification applied final classes interfaces method level modification may applied 
examples applet security section outline examples bytecode modification technique protecting malicious attacks mentioned section 
window consuming attack applet crash system creating windows windowing system handle 
protect resource consuming attack safety mechanism keep track window creation 
java library class frame handles optionally top level window 
constructor methods create window 
key solution attack disallow applet invoke constructor methods certain number times 
frame final subclass safe frame generated way safe frame monitor control window generation 
safe frame create windows constructor methods frame counting current number open windows 
create window number windows exceeds limit 
class level modification substitute frame safe frame 
technique may restrict window size window positions 
email forging attack applet able disclose user confidential information email web server running smtp mail daemon 
prevent access covert channel applet able connect port web server 
java library class socket implements socket interprocess communication network 
constructor methods create socket connect specified host port 
want put restrictions constructor methods familiar constructor method invocation implemented java virtual machine jvm 
jvm class instances created jvm new instruction 
class instance created instance variables initialized default values instance initialization method new class instance init 
invoked 
level jvm constructor appears method special compiler supplied name init 
example socket create return new socket host name port number compiles method java net socket create new class java net socket dup getfield field host name java lang string getfield field port number invokespecial method java net socket init ljava lang string areturn invokespecial java virtual machine instruction instance initialization method invocations 
invokes instance methods requiring special handling superclass private instance initialization methods 
socket final class browser replace constructor methods method level modification 
static safe method safe socket init class method monitor control socket connection 
safe socket init establishes socket connection request excluding request port return new socket object 
refuses request port 
safe socket init takes argument type constructor socket takes returns different return type returns new socket object 
socket init ljava lang string replaced safe socket init ljava lang string ljava net socket 
safe socket init static method replace invokespecial invokestatic 
addition remove socket object created new stack new method returns socket object 
modified codes follows method java net socket create new class java net socket pop getfield field host name java lang string getfield field port number invokestatic method safe socket init ljava lang string ljava lang socket areturn url spoofing attack applet spoof user fake url display status line 
spoofing attack protected checking consistency url displayed url web page loaded 
java library interface defines methods allow applet interact context web browser applet viewer 
method requests browser applet viewer show web page indicated url argument 
method displays text web browser applet viewer status line 
safe static safe method method saves current text addition displaying safe method safe refer text 
safe invoked examines url argument equals text currently displayed status line 
method requests browser bring web page indicated url argument 
method displays url argument status line passing request 
case users may notice inconsistency take appropriate action 
general users get web page loaded mouse click 
guarantees users bring new web page url displayed status line 
positive side effect displays url url available 
interface inheritable interface methods replaced method level modification 
ljava net url substituted safe safe ljava net url respectively 
invokeinterface instruction invoking interface method 
interface methods substituted static methods invokeinterface replaced invokestatic 
invokestatic operands invokeinterface operands assigned nop instruction 
annoying sound attack applet annoy user sounds 
prevent annoyance attack user allowed turn sounds 
solution keep track sound object 
java library interface describes essential methods playing sound 
applet return object implements interface 
loop method object starts playing audio clip loop method stops playing audio clip 
attack implemented looping sound stopping 
applet invokes loop method object safety mechanism opens window users turn sound keeps object order invoke method object users want turn 
shows control window sound object 
interface inheritable safety mechanism uses modification 
methods replaced 
loop substituted safe loop pop window controlling sound object safe respectively 
invokeinterface replaced invokestatic extra arguments replaced nop 
extend idea bringing user interface perform forms monitoring 
example techniques watch control internal variables variety java objects 
example users window lists threads locks allowed kill threads 
window able list windows created big 
users allowed change public variables call methods making way debug experiment applets 
performance results safety mechanism imposes extra overhead inserting safeguarding code applets executing additional safeguarding code 
evaluate performance safety mechanism implemented measured prototype system consists safeguarding classes client proxy server 
client java program sends request web server receives reply server measures time takes receive reply 
proxy server written python performs forwarding messages client web server transformation applets 
client running sun ultra model mhz ultrasparc processor proxy server sun ultra enterprise mhz ultrasparc processors 
machines mbit ethernet links 
ran test times measure performance safety mechanism 
encapsulation overhead evaluated overhead encapsulating java classes terms loading time 
treated java class loaded network untrusted encapsulated bytecode 
proxy server performs encapsulation classes loaded web browser 
encapsulation overhead increases time takes classes transferred browser 
table shows time encapsulation takes encapsulate classes 
shows encapsulation linearly proportional size java class 
class size encapsulating loading time loading time overhead time sec encapsulation encapsulation table encapsulation overhead hard measure loading time browser client 
loading time defined time transfer request web browser request plus time server process request server plus time takes browser receive reply reply 
include time takes browser verify applets displaying 
table shows loading time encapsulation applied 
increases proportion network speed 
consider encapsulation affects loading time 
define encapsulation overhead encapsulation encapsulation reply table shows overhead 
tested class files reasonable upper limit 
measured cost encapsulating applet substantial 
encapsulation loading time increase linearly overhead increases linearly 
analyzing overhead realized overhead mainly results proxy written python 
python interpreted language easy times slower code kind program individual bytes bytecode examined modified current java compiler javac turned unable compile java source files bytecode size bigger kbytes 
ends java lang 
java class size loading time sec encapsulation encapsulation encapsulation overhead shown appendix 
proxy server rewritten encapsulating overhead minor 
safeguarding code execution overhead evaluated cost running safeguarding code terms executing time 
implemented kinds safeguarding classes explained section measured execution overheads respectively 
safeguarding code running sun ultra model netscape navigator tm gold 
table shows overhead safeguarding code 
safeguarding code overhead safe frame window attacks safe socket network accesses safe url spoofing safe sound object control table execution overhead safeguarding code falls general categories 
type performs additional security checks raise exception check fails 
safeguarding codes window attacks network accesses url spoofing included group 
shown table security checks attacks done overhead 
types keeps track object provides control 
protects faulty programming malicious attacks loses control resource 
experimental data show problem may handled half execution time overhead 
related general approaches proposed safe execution mobile code 
lucco introduced software fault isolation transforming untrusted mobile code escape fault domain 
showed memory accesses encapsulated slowdown 
java uses simple sandbox security model executing untrusted applets restricted execution environment 
sandbox model supposed prohibit untrusted applets sensitive system services failed small implementation errors 
malkhi proposed concept playground sandbox executing untrusted mobile code remote protected domain machine called playground 
prior execution applet transformed downloading user web browser graphics terminal input output 
way applet transformed class level modification explained section 
just substituted names awt classes names representative stubs corresponding remote awt classes 
long awt classes inheritable final method class level modification approach 
approach related software fault isolation 
encapsulate applets bytecode modification order perform security sanity checks provide controls objects happen inaccessible 
language semantics enforce safety guaranteeing program affect resources name 
semantics extended include exact conditions requirements security protocol satisfy resource consumption information communication 
necula lee introduced proof carrying code mobile code carries proof complies certain invariants requirements 
treated effort provide formal method specify check extended semantics 
research underway provide formal method 
approach securing hosts mobile code import run trusted mobile code network 
example digital signature mechanism enables user download applets written trusted authors 
princeton research group proposed java filter preventing untrusted applets entering user computer 
user download java applets trusted servers java filter 
browser employ java filter changes browser class library class file 
firewalls filter outside applets allowing trusted internal applets run 
techniques considered try block java applets firewall 
idea look applet 
tags downloaded stream delete replace tags 
firewall scan different mechanisms html ftp gopher mail news deliver applets encapsulating properly 
technique imposes great deal traffic loads firewall 
javascript build applet 
tags fly 
tags html document browser executing javascript cause inserted time document viewed 
idea detect java class files firewall magic byte sequence required class file name class 
technique detect class files passed encrypted ssl connection indistinguishable ordinary files firewall part compressed archive jar zip 
idea proxy bytecode modification proxy suffers limitations 
bytecode modification incorporated browser virtual machines limitations apply 
technique modifying bytecode programs users may customize behavior applets prototype implementation protecting certain kinds hazardous run time behavior 
safety system transforms applets bytecode modification order perform additional security sanity checks provide control inaccessible objects 
showed examples bytecode modification may address security concerns regarding resource consuming email forging url spoofing annoyance attacks 
encapsulating overhead shown section considerable results primarily python proxy server 
interpreted language python times slower code individual bytes bytecode examined modified 
proxy server rewritten encapsulating overhead minor 
experimental performance results show encapsulated code additional security checks executed slowdown code inaccessible objects slowdown 
technique context java security model believe certainly wider range applicability simple security related examples 
plan explore ways utilize technique settings interacting normally inaccessible objects 
dirk balfanz edward felten 
java filter 
technical report department computer science princeton university 
cardelli donahue glassman jordan kalsow nelson modula language definition 
sigplan notices august 
drew dean edward felten dan wallach 
java security hotjava netscape 
proceedings ieee symposium security privacy may 
edward felten dirk balfanz drew dean dan wallach 
web spoofing internet con game 
technical report department computer science princeton university february 
mark 
hostile applets home page 
www com index html 
tim lindholm frank yellin 
java virtual machine specification 
addison 
gary mcgraw edward felten 
java security hostile applets holes 
john wiley sons 
malkhi michael reiter avi rubin 
secure execution java applets remote playground 
david martin jr rajagopalan rubin 
blocking java applets firewall 
proceedings internet society symposium network distributed system security february 
mehta karen sollins 
expanding extending security features java 
proceedings th usenix security symposium january 
necula peter lee 
safe kernel extensions run time checking 
proceedings nd symposium operating systems design implementation october 
java language environment white 
sun microsystems computer may 
robert wahbe steven lucco thomas anderson susan graham 
efficient software fault isolation 
proceedings th symposium operating systems principles december 
appendix comparison performance python implemented bubble sort algorithm python compare performance 
table show cpu time sorting hundreds variable length words number words cpu time sec python program faster python 
python programs respectively 
example may say program times faster python 
word number cpu time cpu time python table program faster python 
data table estimate encapsulating time code encapsulating written comparison shows estimated encapsulating overhead 
java class size loading time sec encapsulation encapsulation proxy rewritten encapsulating overhead minor 

