estimating network path properties mark allman nasa glenn research center gte internetworking rd ms cleveland oh nasa gov information current network conditions available transport protocol efficiently network transfer data 
networks internet transport protocol form estimates network properties measurements performed connection endpoints 
consider basic transport estimation problems determining setting retransmission timer rto reliable protocol estimating bandwidth available connection begins 
look problems context tcp large tcp measurement set pax trace driven simulations 
rto estimation evaluate number different algorithms finding performance estimators dominated minimum values lesser extent timer granularity virtually unaffected round trip time measurements settings parameters exponentially weighted moving average estimators commonly 
bandwidth estimation explore techniques previously sketched literature hoe ad find practice perform anticipated 
develop receiver side algorithm performs significantly better 
operating heterogeneous environment information current network conditions available transport protocol efficiently network transfer data 
acquiring information particularly important operation wide area networks strong tension exists needing keep large amount data flight order fill product pipe versus having wait lengthy periods time attain feedback regarding changing network conditions especially onset congestion 
wide area network internet provide explicit information network path transport protocol form estimates current network conditions adapt efficiently possible 
classic example estimation adaptation tcp infers presence congestion internet path observing packet losses cuts sending rate presence congestion increases absence jac :10.1.1.15.3262
vern paxson center internet research icsi lawrence berkeley national center street suite berkeley ca vern aciri org examine basic transport estimation problems determining setting retransmission timer rto estimating bandwidth available connection begins 
look problems context tcp trace analysis large collection tcp packet traces 
appeal analyzing tcp particular dominant protocol internet today 
analyzing behavior actual tcp implementations introduces complications variety different tcp implementations behave variety different ways pax 
consequently analysis endeavor distinguish findings specific different tcps implemented today versus apply general tcp properties versus apply general reliable transport protocols 
analysis subset tcp trace data collected pax 
data set consists sender side receiver side packet traces tcp connections geographically diverse internet hosts 
hosts interconnected paths ranging kbps ethernet speeds connection transferred kb data recorded tcpdump 
modified pax perform analysis 
rest organized follows 
inx look problem estimating rto discussions basic algorithm evaluation methodology 
analyze impact varying number estimator parameters finding greatest effect lower bound placed rto followed clock granularity parameters little effect 
evidence argues intrinsic difficulty finding optimal parameters finish discussion cost retransmitting unnecessarily ways detect occurred 
look problem estimating bandwidth available connection starts 
discuss evaluation methodology partitions estimates different regions reflecting expected impact ranging impact preventing loss attaining steady state optimally utilizing path reducing performance 
assess number estimators finding sender side estimation previously proposed literature fraught difficulty receiver side estimation considerably better summarizes analysis possible 
estimating rto acknowledgment reliable transport protocol tcp fundamental question long absence receiving acknowledgment ack sender wait retransmitting 
problem similar estimating largest possible round trip time rtt network path 
differs rtt estimation ways 
goal accurately estimate truly maximal possible rtt estimaci de las de una de red de terminal terminal mark allman centro de glenn de la nasa gte internetworking rd ms cleveland oh nasa gov sobre las de red que est en el de usar ste la red para los datos 
en como internet el de sus de las de la red bas en por los de la conexi dos en la estimaci del la del de rto para un de el ancho de banda de la conexi en el del tcp un de para de tcp pax trazas 
para la estimaci del rto algoritmos que la de las est por sus en por la del de la con que se las en el tiempo de ida de la de los par de los de com 
para la estimaci del ancho de banda en las en la hoe ad la de que en la pr su est por de lo 
un algoritmo de que se 
en un neo el de una red para datos mayor es la para el de con las en la red 
esta para en de rea un entre la de una gran de datos en fin de la de de por ancho de banda el tiempo de para las de red de una vern paxson centro de internet de en icsi nacional lawrence de berkley center street suite berkley ca vern aciri org en una red de rea como internet que expl la de red del de el sus de las en la red para de la 
un cl de tal estimaci es la forma seg la cual el tcp la de una lo de una de internet la rdida de paquetes la de ante la de bien en su jac :10.1.1.15.3262
en el art dos de las de la del de rto el ancho de banda de una conexi en el del tcp por de un en trazas un gran de paquetes de tcp 
el inter de el tcp en que es ste el en internet 
sin el de el de de tcp dado que una gran de tcp que se de pax 
en en las espec ficas las de tcp en la de que son las del tcp de de los de de general 
est en el de trazas tcp en pax 
este de datos en trazas de paquetes de conexiones tcp entre internet en 
los que entre los kbps ethernet cada conexi kb de la cual por de tcpdump 
para el pax 
el del art est de la 
en el de la estimaci rto el algoritmo de las tras de par de que de mayor es el inferior para el rto por la del que par de 
la intr de par con una del coste en el que se con el de las de cuando han stas 
en el compromise balances avoiding unnecessary retransmission timeouts due waiting long ack arrive versus slow detect retransmission necessary 
second sender really needs estimate feedback time round trip time sender receiver plus amount time required receiver generate ack newly received data 
example receiver employing delayed acknowledgment algorithm bra may wait msec transmitting ack 
estimating value retransmission timer involves estimating property network path property remote connection peer 
third loss due congestion may sender wait longer maximum feedback time order give congestion time drain network sender retransmits soon feedback time elapses retransmission may lost sending successful 
long recognized setting retransmission timer fixed needs reflect network path generally requires dynamic adaptation greatly rtts vary course connection nag 
early tcp specification included notion dynamically estimating rto maintaining exponentially weighted moving average ewma current rtt static variation term pos 
estimator studied mills mil characterizes measured internet rtts resembling poisson distribution occasional spikes higher rtts suggests changing estimator rapidly adapts increasing rtts slowly decreasing rtts 
knowledge modified estimator evaluated literature 
mil noted balance responding rapidly face true loss versus avoiding unnecessary retransmissions appears fundamental tradeoff obvious optimal solution 
zhang zha discusses number deficiencies standard tcp rto estimator ambiguities measuring rtts associated retransmitted packets conservative rto policy retransmitting lost packet round trip difficulty choosing initial estimate failure track rapidly increasing rtts times congestion 
karn partridge kp addressed eliminating ambiguities measuring rtts 
selective acknowledgments sacks mmfr addressed second issue retransmitting lost packets slowly 
jacobson jac refined tcp rto estimation introducing ewma estimate rtt variation defining rto srtt rttvar srtt smoothed estimate rtt rttvar smoothed estimate variation rtt :10.1.1.15.3262
jac revised version tok jk :10.1.1.15.3262
estimator widespread today knowledge systematic evaluation measured tcp connections previous study pax aggressive estimator appears sufficiently conservative sense rarely results unnecessary timeout 
widely bsd rto implementation ws possible limitations adaptive rtt rtt variation estimators updated new measurements round trip adapt fairly slowly changes network conditions measurements clock msec granularity necessarily yields coarse estimates jac introduces subtle tricks squeezing precision estimates resulting rto estimate large minimum value second may inherently conservative :10.1.1.15.3262
advent higher precision clocks tcp timestamp option jbb limitations removed 
remains open question best reengineer rto estimator new capabilities know current estimator sufficiently conservative conservative 
improve relaxation limitations 
questions attempt answer 
basic rto estimation algorithm jacobson algorithm state variables srtt rttvar estimate current rtt notion variation 
values attain rto 
variables updated time rtt measurement taken 
segment corresponding ack timed time updates occur rtt referred flight 
srtt updated ewma gain srtt srtt jacobson jac recommends leads efficient implementation fixed point arithmetic bit shifting :10.1.1.15.3262:10.1.1.15.3262
similarly rttvar updated time packet retransmitted due rto expiring lost tcp sender doubles current value rto 
doing diminishes sending rate presence sustained congestion possible adverse effects underestimating rto retransmitting needlessly repeatedly 
srtt rttvar initialized measurement srtt rttvar 
prior measurement rto sec 
important additional considerations measurement done clock granularity clock advances increments ofg rto bounded rtomin 
common bsd implementation tcp sec rtomin sec sec 
shown value rtomin quite significant 
granularity coarse code updating rttvar sets minimum bound rttvar ofg value sec naturally arise 
oft proposed variations implementing rto estimator time segment rtt flight smaller values ofg order spend time waiting timeouts 
rfc jbb explicitly supports original motivation part study evaluate changes worth pursuing 
assessing different rto estimators fundamental properties rto estimator investigate long wait retransmitting lost packet 
expire mistakenly unnecessarily trigger retransmit 
conservative rto estimator simply rto sec mistake satisfying second property doing extremely poorly regards leading unacceptable delays aggressive estimator rto msec reverse relationship flooding network unnecessary retransmissions 
basic approach assess properties simulation evaluate different estimators methodology mirrors rto estimator implementation ws 
data packet sent rto timer currently active started 
timer restarted data packet retransmission sequence 
bsd timer implementation uses heartbeat timer expires seconds phase independent timer set 
included behavior simulations 
de el ancho de banda para una conexi de la 
de la cual divide los en que el total de hasta la de rdida por del estado de la de la eficiencia 
con que la estimaci en la tal como se en dif cil de que la estimaci en puede 
en se resume el las de 
estimaci del rto para un de en tal como el tcp una fundamental es cu tiempo en de del ack un para con la este es similar de el tiempo de ida rtt lo de una de red de terminal terminal 
sin de la estimaci del rtt en tres 
el es el rtt un que la de de conexi de el tiempo para la del ack con la de ser en que una es 
en segundo el el tiempo de que es tiempo de ida entre receptor la de tiempo por el receptor para un ack por cada 
por un receptor que el algoritmo de bra puede hasta mseg 
de el ack 
por lo tanto un valor para el de lo el una de la de la red una del par de conexi 
en si la rdida es puede por del tiempo de fin de un mayor para que la de la red si el tan como ha el tiempo de la puede que un env posterior 
ya tiempo se ha que la del de puede ser que la de red en una din mica lo que puede el rtt el de una conexi nag 
la del tcp un para la estimaci din mica del rto en un ewma del rtt un de est pos 
esta por mills en mil en la que describe las de rrt de internet de forma similar una de poisson pero con de rtt el algoritmo de que se del rtt su 
seg nos la que este se con mayor 
mil observ que el entre responder una rdida real el ser un de fundamental sin una que 
zhang zha describe en el est de rto del tcp en la del rtt la de paquetes la del rto en lo la de lo un paquete en un ida la para una estimaci la de el del rtt de kan partridge kp se del primer en la del rtt 
la de sacks mmfr la del en la de paquetes 
jacobson jac la estimaci de rto del tcp una estimaci ewma de la del rtt para la rto srtt rttvar srtt es una estimaci del rtt que rttvar es una estimaci de la del rtt :10.1.1.15.3262
en jac pero en una del jk :10.1.1.15.3262
que el de este estimador est en la seg nos la tica del de conexiones tcp es la de pax el cual que ante este estimador en el de que lo genera interrupciones 
la bsd del rto tan ws las de del rtt de del rtt se con lo una vez por cada ida por lo cual se los en las de la red de las se un con mseg 
de lo cual induce jac para en la estimaci del rto el valor de un segundo lo cual puede :10.1.1.15.3262
tres con la de de mayor la de usar del tcp jbb 
sin cu es la de ar la estimaci del rto que el todo de actual es pero si es 
si ese el mo una de las 
son las que 
algoritmo de estimaci del rto en el algoritmo de jacobson las dos variables de estado srtt rttvar el rtt una de su son en la con un fin de el rto 
variables se cada vez que se una del rtt 
que un dado se un segmento su ack las lo una vez por rtt lo que se como una vez por 
srtt se un ewma con una srtt srtt jacobson jac lo cual una tica de de bit :10.1.1.15.3262:10.1.1.15.3262
rttvar se sobre la base de la srtt cada vez que se un paquete por del rto el de tcp el valor del rto 

data packet retransmitted tcp trace due timeout assess timeout unavoidable meaning segment retransmitted lost acks sent segment arrival receiver arrival retransmission lost 
check necessary tcps dataset aggressive rto estimators fired prematurely face high rtts pax retransmissions treated normal timeout events 

timeout unavoidable retransmission classified timeout time segment retransmitted repeated timeout 
estimator charged current rto setting reflecting amount time passed prior retransmitting consideration separate bookkeeping repeated timeouts reasons explained 
rto timer backed doubling 

timeout avoidable reflects problem actual tcp trace deficiency charged estimator evaluating 

arrival ack new data trace ack arrival time compared rto computed estimator 
ack arrived rto fired consider expiration bad timeout reflecting feedback time network path moment exceeded rto 
ack covers outstanding data rto timer turned 
ack yielded rtt measurement acknowledged segment currently timed segment timed srtt rttvar updated measurement rto recomputed 
rto timer restarted 

sending receiving tcp syn fin packets assessed packets retransmission timers interpreted simple ack packets lead erroneous measurements rtt 
note approach contains subtle significant difficulty 
suppose trace lost seconds tcp real life rto expires andp retransmitted 
treat timeout charge estimator rto computed msec 
examining trace impossible determine waiting msec successful 
waiting amount time seconds fact short interval congestion leading top original loss drained network 
conversely lost retransmitted seconds 
loss second fact uncorrelated case retransmitting waiting seconds yield successful transmission 
way assess effect conduct live experiments trace driven simulation leave 
assess retransmission effective meaning retransmitted packet safely arrived receiver decision retransmit correct meaning packet lost feedback receiver lost 
related consideration effectiveness rto estimator predicting timely timeouts assessed 
repeated timeouts difficult gauge exactly potential repeated retransmissions necessary 
considerations estimator ti total time required estimator wait unavoidable timeouts 
number necessary minimum msec msec msec msec msec rto msec rto msec rto msec table effect varying rto min msec timeouts total number bad timeouts including multiple bad timeouts due backing timer soundly assess repeated retransmissions unnecessary 
gi sort timeout define normalized number bad timeouts trace define 
note may particularly metric considering transfers varying length 
study focuses transfers kb 
timeout rto rto setting expiring timer rtt observed rtt rtt measured purposes updating srtt rttvar state variables 
reflects cost timeout units rtts 
define average normalized timeout cost ej include timeouts 
collection traces ti total time spent waiting timeouts fw ei gi mean normalized timeout cost connection experienced timeout andb ei mean proportion timeouts bad connection including connections include timeouts want reward estimators particular trace don generate bad timeouts 
dominated traces large number timeout retransmissions total time waiting timeouts high biased highlighting bad things get 
fw impartial number timeouts trace better reflects performance estimator 
likewise better reflects estimator avoids bad timeouts 
estimators may particular traces retransmit unnecessarily large number times noted 
pairs traces inn pairs eliminated analysis due packet filter errors recording traces inability pair packets traces occur due packet filter drops ip id fields changed flight header compression glitches pax inability determine retransmissions due timeouts 
leaves traces analyze total timeout retransmissions 
timeouts traces timeout retransmissions 
varying minimum rto turns setting rto min lower bound rto major effect rto estimator performs analyzing effect 
note usual setting rto min clock ticks rto min heartbeat timer single tick translates time 
accordingly usual coarsegrained estimator ofg sec rto min sec see conservative real bsd implementation timeout sec sec 
forg msec se la de ante la de se los de una del rto las 
srtt rttvar se con la srtt rttvar 
de la rto seg 
dos son que toda se una de de el en de que el rto est por el rtomin el 
en la com bsd del tcp seg 
rtomin seg 
seg 
como se ver mas el valor de rtomin es 
dado que la es general el para rttvar un inferior de para el rttvar en del valor de que puede de forma natural 
tres para el estimador del rto son el rtt de cada segmento en vez de lo uno por usar de el rtomin fin de tiempo en de 
la rfc jbb expl las dos la original de esta de la de con la de 
de rto sobre dos de un estimador de rto cu tiempo de un paquete con qu por error genera una un estimador de rto un rto sin un error con la pero con la 
por un estimador un rto segundo esta la red con 
para dos es usar en trazas con de la la cual la de de rto en ws 
para cada paquete de datos se el de rto si ste est 
el se cuando el paquete de datos es el de una de 
para cada paquete de datos en la de tcp una si sta era inevitable lo cual que bien el segmento se bien que los ack de la del segmento receptor hasta la de la se 
esta es que de los tcp en el de datos de rto que se ante altos de rtt pax de tal que son como de 

si la inevitable la se como si es la vez que el la de bsd un cron metro que cada con una fase del en el cual el es 
este en 
segmento es como en el 
estimador se le el valor del rto para la de tiempo de la anterior para interrupciones 
el de rto es la de su valor 

si la era un con el tcp real de la consider esta en contra del estimador que 

para cada de un ack datos en la el tiempo de del ack es con el rto seg los del estimador en si el ack una vez que el rto se el como una err nea que el tiempo de de la de red en rto 
si el ack los datos de el del rto se 
si el ack una del rtt por que el segmento en ese por que los segmentos est se las variables srtt rttvar en de la se el rto 
se el de rto 

se eval la de los paquetes syn fin del tcp que paquetes sus de si se como paquetes ack del rtt 
obs que este una tiempo que 
sup que se el paquete que el rto real el paquete que es una estimador con el valor del rto para mase que mseg 
la si la de tras mseg 
que el de un de tiempo inferior seg 
de un para que de la red la que la rdida original de consid que se de haber seg 

que la la rdida en la de lo seg 
haber en una 
la de este ser en vez de en trazas algo que de para 
por lo tanto si una result que el paquete receptor si la de con que el paquete en se que se toda del receptor 
en con esta solo se eval la de un estimador de rto para interrupciones 
para interrupciones dif cil cu de eran 
para un estimador sea el tiempo total por el para interrupciones gi el de interrupciones msec ws msec msec msec msec msec msec msec table effect varying rto min sec tick minimum msec setting rto min larger values major effect 
table fw andb different values rto min msec 
see runs seconds minimum sec minimum 
column fw shows sec minimum means typical rto costs bit rtts expense disappears decrease minimum hand shows sec minimum average timeouts bad minimum nearly bad timeouts clustered particular small subset traces 
clearly adjusting minimum rto provides knob directly trading timely response premature timeouts obvious sweet spot yielding optimal balance 
noted delayed acknowledgments tcp result elevating rtts msec number common implementations frequently elevate rtts msec 
accordingly clear minimum rto ticks msec sound 
bulk subsequent analysis consider estimators minimum bound highlight contribution estimator efficiency factors quite dominant minimum rto keep mind transport protocols different tcp introduce minimum 
comparison include static timers constant setting rto double rto repeated timeouts 
table highlights heavy cost adaptive timer 
constant estimators generate times bad timeouts adaptive estimators similar relative performance figures fw 
values ofb don tell story static timers bad timeouts clustered relatively traces 
example rto msec results bad timeout traces rto min msec similar value ofb spreads bad timeouts twice traces 
varying measurement granularity caution regarding considerable importance rto min mind look effect 
ranges msec msec 
order compare different granularities footing hold rto min sec constant having relative differences granularities overwhelmed rto min 
include additional row ws estimator implemented ws 
implementation includes fixed point arithmetic bit shifting order estimate srtt effective granularity msec rttvar granularity msec rto computed granularity msec 
note forg msec performance timeouts absolute relative fw essentially identical regardless fine granularity 
steadily gain avoiding bad timeouts granularity finer 
reason gain coarse granularities parameters ew ws ws take rto min take slow slow slow std std fast take take take rtomin table effect varying ewma parameters take action face minor change rtt finer granularity estimator adapt reflect change gives slight edge 
msec start trading reduced performance avoiding bad timeouts 
cut average rate bad timeouts nearly factor msec cost factor performance 
note ws estimator clearly performs better msec fw andb lower 
gains performing better large rtt traces able better reflect relatively small rtt changes due finer effective granularities srtt rttvar 
varying ewma parameters table shows estimator performance varying eqn msec rtomin msec fixed noted 
rows ws implementation msec second row reflecting variant derives rtt measurement ack arriving sender 
see frequent srtt rttvar updates little effect estimator performance making slightly aggressive 
remaining estimators msec 
take extreme simply uses rtt measurement initialize srtt rtt rttvar rtt yielding rto rtt 
changes srtt rttvar rto back rto face repeated retransmissions undo backing retransmission epoch ends 
variant reflects rtomin sec second rtomin sec 
extreme take sets srtt rtt rttvar 
take variant packet timed just packet round trip final variant raises minimum rtt sec 
extremes run gamut slow uses tenth usual parameters std estimator fast uses twice parameters time packet variants 
table see settings ewma parameters little difference estimator performs 
goal minimize rate bad timeouts remain aggressive pick exceedingly simple take estimator barely adapts network path conditions take take show decent performance compared rto estimators rto estimators perform extremely poorly network paths exhibit large sudden changes rtt 
bi el total de interrupciones err interrupciones err del dado que que eran 
si gi bi sea si la alg de el de interrupciones err en el ser bi bi gi en 
obs que puede una cuando se de variable 
este se en de kb 
para la ava sea rto el del rto para el tiempo de rtt el rtt de cuando un rtt con el prop de las variables de estado srtt rttvar 
def rto rtt de tal que el coste de la en de rtt 
un coste de interrupciones ej cuando el 
para una de trazas iti como el tiempo total en de interrupciones ei gi como el coste de por conexi que experiment una ei como la media de interrupciones err por conexi conexiones que dado que nos los que para una en particular err nea 
puede por trazas con gran de por para las el tiempo total de para interrupciones puede ser alto por lo cual est un estado de mal 
es de la de interrupciones en una por tanto la general de un estimador 
de la en que un estimador interrupciones err de general 
como se con para trazas sobre las que se una gran de 
sobre los de trazas en de de de paquetes en el de las trazas la para paquetes lo de trazas puede por ca das en el de paquetes por en los campos id del ip el de pax la del para qu se deb interrupciones 
nos con trazas para con un total de interrupciones 
de stas interrupciones con un las trazas que por el rto que la del rtomin el inferior del rto puede un sobre el del estimador de rto 
por tanto 
en primer que la usual del rtomin es de de rtomin dado un de un se como un valor de tiempo entre seg 
de para el estimador usual de gran con seg el rtomin es seg valor que seg dado que una real de bsd una de seg 
pero para mseg el de mseg 
por tanto el rtomin puede 
la para de rtomin mseg 
que var para un de seg 
hasta un de este valor cuando se 
la de que para el de seg un rto pico un que rtt pero gran de que el 
por que para un de seg en lo uno de cada interrupciones es err nea que para una de cada lo es interrupciones err est en ning particular de trazas 
el rto un de para un entre interrupciones sin un de que determine el balance entre las dos 
rto mseg 
mseg 
mseg 
mseg 
mseg 
rto mseg 
rto mseg 
rto mseg 
de el rtomin mseg 
como ya se ha los en el tcp los rrt hasta en mseg 
en los rtt con hasta los mseg 
de si un rto de para 
sin para el de sin inferior tanto para la la del estimador de tan rto como para en que los de del tcp ese 
tres est que usan una del rto por la del rto en interrupciones 
la el alto coste de usar un 
los interrupciones err que los con de 
los de todo sobre los dado que sus interrupciones err est en una de trazas por con rto mseg 
se interrupciones err en trazas que con rtomin mseg que un valor de similar las interrupciones err se en del de las trazas 
la de la con la la del rtomin nos en el de en la var mseg 
hasta mseg 
de las sobre una base el rtomin seg que usar un rtomin con las entre las 
una ws que la del estimador en ws 
esta tica de de bit fin de srtt con rttvar adapt rto min msec rto min msec take msec rto min msec rto min msec rto min msec rto min msec table effect varying rttvar factor pick slow average incurs normalized delay timeout occupies sweet spot locally minimizes ws timing packet little difference timing packet rtt timing packet run measurements unit time 
turn causes adapt srtt rttvar quickly current network conditions rapidly lose memory conditions past similar effect larger values 
note timer quickly adapts increases take generating average bad timeout indicating correlations rtt variations span multiple round trips 
greatly diminish problem raising rtt min sec losing great deal estimator timely response better corresponding take variant 
evaluated varying ewma parameters rto min msec 
find fw increases roughly variation estimators diminishing falls factor illustrating dominant effect rto minimum 
number paths inn contain slow buffered links lead steady large increases rtt seconds 
expect take quite poorly connections measured rtt little subsequent rtts fact take quite 
key part step inx rto timer restarted arriving ack new data 
consequently data flowing rto implicit extra rtt term lud take suffices avoid bad timeouts rtts grow orders magnitude 
take better connections estimators track changing rtt 
adaptive estimators wind waiting longer arriving ack rto expires take retransmits appropriate case 
advantage particular highly regularized feedback connections 
suggest notion feedback timeout discussed briefly 
varying rttvar factor rto estimation parameter consider multiplier rttvar computing rto eqn 
standard implementation 
table shows effects forg msec rto min sec 
adapt estimator starts doubles time incurs bad timeout 
cumulative distribution rttvar max rtt rto ratio extra wait necessary extra waiting time necessary avoid bad rto clearly provides knob trading waiting time unnecessary timeouts obvious sweet spot 
balance changes bit increase rto min shown second half table 
example find rto min msec performs strictly better variant rto min msec performs better variant 
extremely simple take estimator rto min msec performs bit better regular rto min msec estimator 
estimate rto better 
having evaluated effects different estimator parameters part tradeoffs little way compelling sweet spots turn question opportunities devise better estimators 
key consideration answering question underestimate 
example underestimates tend rtt suggest modification eqn srtt factor applied 
amount additional waiting time needed avoid bad rto 
plots cumulative distribution ratio rttvar solid maximum rtt seen far dotted rto dashed msec estimator 
ratio rttvar ranges orders magnitude indicating finding particular value eqn efficiently takes care remaining bad timeouts 
shown generally current rto maximum rtt seen far suggests adding values rto sufficiently conservative avoid bad timeouts 
doing effect estimator variants wait longer factors value ofk 
example changing estimator shown table twice computed rto add additional rto term increases fw bit better just better 
rto min sec plot similar slightly separation rto max rtt lines 
suggests fundamental tradeoff aggressiveness suffering bad timeouts 
related question packet unnecessarily retransmitted reflect momentary increase rtt sustained increase 
find bad timeouts followed rtts current rto bad timeout reflected transient rtt increase 
followed exactly elevated rtt bit followed elevated rtts 
time significant rtt increase quite transient non negligible tail weight sustained rtt increases 
una de mseg 
rttvar con mseg de que el rto se calcul con una de mseg 
en primer que para mseg 
la de las interrupciones tanto como es id de lo que ser la 
sin en interrupciones err de de que se la 
la raz de en que las ante un del rtt que el estimador de se para lo cual le 
mseg 
ws mseg 
mseg 
mseg 
mseg 
mseg 
mseg 
mseg 
de la rtomin seg 
sin por de mseg de interrupciones err 
la de interrupciones err en un factor de mseg pero costa de un factor de rdida de superior 
que el estimador ws se que el de mseg tanto con un como con un 
superior dado que se en el de trazas de rtt grande es de los de rtt os su en el de srtt rttvar 
los par de ewma la el del estimador ver mseg 
rtomin mseg se lo 
las dos la ws que usa mseg con la una del que una de rtt por cada ack que 
que la de alta de srtt rttvar sobre la del estimador que lo lo un 
par pw ws ws del rtt por cada ack take rtomin take slow slow slow std std fast take take take rtomin de los par del ewma los usan mseg 
el take de usa la de rtt para tanto rtt como rttvar rtt rto rtt 
srtt rttvar rto por el de rto ante el odo de 
la del el de rtomin seg 
la rtomin seg 
en el de la take que srtt rtt rttvar rtt 
la take es en que se los paquetes en vez de lo uno por de ida 
la el valor de rtt seg 
entre el slow el cual reduce los par un de su valor normal para el estimador std hasta fast que el valor de los entre de time packet 
en la ver que la de los par de ewma produce sobre el del estimador 
tal es que si es la tasa de interrupciones err la amos el simple estimador take que se las de la de la red bien el slow que en en un de por un de que 
que con ws cada paquete solo un paquete por rtt de que cada paquete de los ewma por de tiempo 
su vez que los ewma los de srtt rttvar las en la red que se de similar de usar altos para 
que que el se mas con take en una err nea por cada en las de rtt que los de 
este seg 
pero costa de en gran la de la del estimador por lo que usar en su la take 
los par de ewma para rtomin mseg 
que en con la de las de los que se reduce en un factor de el del rto 
en con buenos buffers que del rtt hasta de 
amos que take mal para conexiones la del primer rtt con los rtt pero de take de un 
la clave reside en la del paso de el del rto es con la de cada ack datos 
cuando los datos el rto un rtt impl lud con take es para interrupciones err con los rtt en dos de 
en take para cuando que take take en general un en con de rto mal en de red que de rtt 
impact bad timeouts finish study rto estimators brief comments concerning impact bad timeouts 
time tcp times unnecessarily suffers loss useful throughput seriously unnecessarily cuts ssthresh half current sustainable window begins new slow start 
addition tcp sending retransmitted packets uses tcp timestamp option safely measure rtts packets karn algorithm kp take long time tcp adapt rtt estimate order improve broken rto estimate 
see pax illustration effect 
bad timeouts major negative impact tcp connection performance 
adverse impact network performance definition occur time network congested point dropping connection packets 
turn leads observation undo deleterious effects tcp connection cutting ssthresh entering slow start aggressive rto estimator attractive tcp able sustain bad timeouts unduly impairing performance network stability 
tcp uses timestamp option unambiguously determine retransmitted unnecessarily observing ack echoes timestamp packet sent prior retransmission 
tcp principle sack option 
tcp remember value ssthresh cwnd prior retransmission timeout restore discovers timeout unnecessary 
timestamps sack heuristic considered tcp retransmits due rto measures time retransmission ack arrives 
minimum rtt measured far arguably ack transit retransmission occurred timeout bad 
ack comes minimum rtt timeout necessary 
assess performance heuristic fairly simply 
msec estimator total bad timeouts followed ack arriving minimum measured rtt 
fully correspond timeouts indicating surprisingly heuristic generally fails 
failure indicates smallest rtt seen far occurs right timeout find fact case lull timeout interval gives network path chance drain load empty queues 
threshold minimum rtt corresponding timeouts comprise timeouts 
forf proportion falls 
reduced thresholds chance detecting bad timeout falls respectively 
evaluated modified heuristic works drops reduction nearly factor qualify estimator sweet spot estimating bandwidth turn second estimation problem determining amount bandwidth available new connection 
clearly transport protocol sender knows available bandwidth immediately sending data rate 
absence knowing bandwidth form estimate 
tcp estimate currently exponentially increasing sending rate experiencing packet loss 
loss taken implicit signal rate grown large rate effectively halved connection continues conservative fashion 
context tcp goal section determine efficacy different algorithms tcp connection start determine appropriate sending rate pushing network hard current mechanism 
general context goal explore degree timing structure flights packets exploited order estimate fast connection safely transmit 
assume familiarity standard tcp congestion control algorithms jac ste aps state variable cwnd bounds amount unacknowledged data sender currently inject network state variable ssthresh marks cwnd size connection transitions exponential increase slow start linear increase congestion avoidance ideally ssthresh gives accurate estimate bandwidth available connection congestion avoidance probe additional bandwidth appear conservative linear fashion 
new connection begins slow start setting cwnd segment increasing cwnd segment ack received 
receiver acknowledges acks lost cwnd increase factor rtt 
tcp receivers currently delayed acknowledgment policy generating acks bra value assume subsequently 
note round trip connection hasn segments flight slow start possible rtt overflow drop tail queue path segments lost group queue completely full carrying segments round trip 
loss general significantly impede performance multiple segments dropped window data current tcp implementations require retransmission timeout resend dropped segments ff hoe 
congestion avoidance thought connection steady state tcp increases cwnd segment rtt ensures cwnd overflow queue segment 
tcp fast retransmit fast recovery algorithms jac ste aps provide efficient method recovering single dropped segment relying retransmission timer ff 
hoe hoe describes method estimating ssthresh multiplying measured rtt estimate bottleneck bandwidth packet pair algorithm outlined kes transfer :10.1.1.133.3305
hoe showed correctly estimating ssthresh eliminate large loss event ends slow start discussed 
hoe results simulation important follow question explore degree results applicable actual measured tcp connections 
mechanisms mitigate problems caused tcp slow start phase lessen need estimate ssthresh 
routers implementing random early detection red fj bcc randomly dropping segments low rate average queue size increases 
drops implicitly signal connection reduce sending rate queue overflows 
currently red widely deployed 
red guarantee avoiding multiple losses window data especially presence heavy congestion 
red highly appealing property requiring deployment changes current tcp implementations 
alternate loss recovery techniques rely tcp re strictly speaking cwnd usually managed terms bytes segments full sized data packets conventionally discussed terms segments convenience 
distinction rarely important 
aps allows initial slow start cwnd set segments experimental extension tcp standard allows initial slow start cwnd set possibly segments afp 
comment briefly implications change 
conexiones que los que el del rtt 
los de la del primer ack de el rto que en este take con la 
pero esta en conexiones que una 
la idea de una por lo cual se en 
el factor rttvar factor rttvar adapt rtomin mseg rtomin mseg 
take mseg rtomin mseg rtomin mseg 
rtomin mseg rtomin mseg de el factor de rttvar el par metro de estimaci del rto que es el de rttvar rto seg la 
para la est la los de entre para mseg 
rtomin seg 
el estimador adapt con pero se cada vez que en una err nea 
un de para un en el tiempo de de interrupciones pero sin un de 
como se en la de la este cuando rtomin 
por que la rtomin mseg se que la sin que rtomin mseg que la 
el estimador take tan simple cuando usa rtomin mseg se que el estimador normal rtomin mseg 
el rto 
los de par del estimador en su mayor de la de de la de si en de ar 
una clave para responder esta es en el de por cu lo 
si por las ser un rtt una de la seg la cual se un factor de srtt 
para un rto err neo sea un del para un rto err neo 
la las de la entre rttvar nea continua del rtt hasta ese nea del rto nea para el estimador usual con mseg 
la entre rttvar var en de que es improbable un valor particular de en la que la mayor de las interrupciones err 
se observa que es inferior rto rtt hasta ese 
uno de rto con de interrupciones err 
sin un similar de del estimador que la bas en por el valor de 
por el estimador est de en la para usar el del rto sea un rto de pero de algo favorable que usar pero del todo 
para rtomin seg el gr es similar con una mayor entre las de rto rtt max 
por lo tanto la una fundamental entre de interrupciones err 
en puede que si un paquete se un del rtt un considerable 
que del de las interrupciones err por de rtt rto por lo tanto la err nea un del rtt 
por un rtt con un valor un del por de rtt 
por lo tanto la mayor de las un del rtt result mas bien si bien un que un 
el de las interrupciones err de los de rto con un de las interrupciones err 
toda vez que un tcp se lo una rdida de til que de el ssthresh la de la un 
dado que el tcp est paquetes que la de temporal el tcp puede con el rtt de paquetes ver algoritmo de karn kp por lo tanto tiempo de que el tcp su estimaci del rtt fin de su estimaci del rto 
ver en pax una de 
por lo tanto las interrupciones err un en la eficiencia de una conexi tcp 
sin un gran sobre la eficiencia de la red por en un en el cual la red est hasta el de los paquetes de la conexi su vez en que si ramos los de la conexi tcp que el ssthresh en un un estimador de rto de este el tcp ser de las interrupciones err sin la eficiencia de la red bien en su 
cuando el tcp usa la de temporal puede que una un ack posterior que una temporal de la transmission timer developed diminish impact multiple losses flight data 
sack tcps mm mmfr ff provide sender complete information segments dropped network non sack tcp implementations provide 
allows algorithms quickly recover multiple dropped segments generally rtt loss detection 
shortcoming sack approaches require implementation changes sender receiver 
class algorithms referred newreno hoe ff fh require sacks effectively recover multiple losses requiring timeout quickly sack algorithms 
addition newreno requires implementation changes sender 
estimation algorithms studied require changes sender tcp implementation 
assume sender tcp implementation form newreno loss recovery mechanism 
methodology section discuss number algorithms estimating ssthresh methodology assessing effectiveness 
noting distinction available bandwidth bottleneck bandwidth 
pax define maximum rate tcp connection exercising correct congestion control transmit network path second upper bound fast connection transmit path due data rate slowest forwarding element path 
ideal goal estimate available bandwidth terms correct setting ssthresh fully utilize bandwidth available connection exceed precisely exceed linear increase congestion avoidance 
analysis terms bottleneck bandwidth upper bound ssthresh estimate quantity easily identifiable timing structure flight packets data packets sent back back uncongested path interarrival time receiver directly reflects bottleneck bandwidth path 
note tcp implementations ssthresh initialized essentially unbounded value concentrate lowering value attempt improve performance avoiding loss excessive queueing 
algorithms considered section conservative ideally impair tcp performance relative tcps implementing algorithm 
estimator yields small value ssthresh tcp perform poorly compared unmodified tcps 
noted bottleneck bandwidth estimator packet pair kes :10.1.1.133.3305
pax showed packet pair algorithm implemented strictly sender side measurements performs poorly estimating bottleneck bandwidth real traffic 
developed robust method packet bunch mode pbm looking modalities timing structure groups back back packets pax pax 
pbm effectiveness assessed running npd datasets including dataset referred earlier arguing algorithm accurate datasets produced estimates correspond known link rates kbps ethernet 
pbm analyzes entire connection trace generating bottleneck bandwidth estimates 
developed assessing network path properties practical current tcp implementations perform fly requires information sender receiver quite complicated 
purposes need accurate assessment network providing path isn multi channel subject routing changes pax 
path bottleneck bandwidth assume pbm provides 
pbm calibrate efficacy ssthresh estimators evaluate 
traces available inn removed analysis reasons traces packet filter errors pax major clock problems pax 
problems reflect network conditions path hosts trace removing traces arguably introduce bias subsequent analysis 
traces retransmission trace avoidable meaning tcp sender merely waited longer ack retransmitted segment arrived 
retransmissions usually due tcps initial rto short pax pad 
eliminate traces retransmission results ssthresh set value little actual network conditions unable soundly assess larger ssthresh worked 
removing traces introduces bias connections particularly high rtts connections engender avoidable retransmissions 
traces pbm algorithm failed produce single unambiguous estimate 
need remove traces analysis uses pbm estimate calibrate different estimation algorithms assess noted 
removing traces introduces bias network conditions pbm fail produce single estimate multichannel paths changes bottleneck bandwidth course connection severe timing noise 
removing traces left connections analysis 
trace driven simulation assess bandwidth estimation algorithms perform 
base evaluation classifying algorithm estimate trace regions representing different levels impact performance 
trace define variables bottleneck bandwidth estimate pbm algorithm loss point meaning transmission rate effect lost packet sent lost segment sent cwnd corresponding tow bytes thenl rtt bytes second 
connection experience loss bandwidth attained largest cwnd observed connection 
network path essentially free competing traffic loss presumed caused connection overflowing queue network path 
conversely path presumed congested 
bandwidth estimate ssthresh estimation algorithm assessed 
addition define seg rtt segment size representing size congestion window segments needed achieve bandwidth second tcp segment size rtt 
note defined seg continuous discrete 
connections loss definitions connection contains loss assess estimator performance determining regions falls 
note analyze regions order estimate considered regions subsequent matches 
strictly speaking largest flight observed connection smaller cwnd due connection running data send exhausting kb receiver window 
en un tcp lo la sack 
tal tcp el valor del ssthresh cwnd la por si que la result 
sin temporal sack la heur que un tcp rto de tiempo entre la la del ack 
si ser inferior rtt hasta el es que el ack ya en tr la por lo tanto la err nea 
si el ack del rtt es probable que la 
la de esta heur de simple 
para estimador usual de mseg un total de err por un ack con inferior rtt 
de un total de interrupciones que de la heur de general 
el que el rtt hasta el de una lo cual de es el quiz que el el odo de da la de red la de su las de 
sin si el es en del rtt el de las interrupciones lo el de las interrupciones 
para la cae lo 
con la de una err nea del 
la heur que bien para cae de una con un factor de dos para estimador como 
estimaci del ancho de banda segundo de estimaci que es la de ancho de banda para una conexi si el de un de el ancho de banda datos esa 
pero si se el ancho de banda es una estimaci para el tcp estimaci se la de hasta que se una rdida de paquete 
la rdida se como una se impl de que la ha por lo tanto la se reduce la la conexi contin de 
en el del tcp el prop de esta es la de algoritmos que una conexi tcp su con de la de sin la red de tan como lo el actual 
en un general el es el hasta el cual se puede el de de de paquetes fin de la mayor la que una red puede 
una con los algoritmos de control de del tcp standard jac ste aps 
la variable de estado cwnd la de datos sin que un puede la red en cada la variable de estado ssthresh el valor de cwnd cual una conexi del de con de de con 
ssthresh da una estimaci del ancho de banda para la conexi la de se usa de para ancho de banda que la una conexi en cwnd segmento cwnd en segmento por cada ack 
si el receptor env un cada segmentos si se ning ack cwnd en un factor cada rtt 
la mayor de los tcp usan un de para los ack bra en el cual por tanto valor que en 
obs que si un ida una conexi segmentos en en el es que el pr rtt se una cola de paso lo del de tal que se segmentos de un si la cola la de los segmentos el primer ida 
en general esta rdida la eficiencia cuando segmentos en una de datos la mayor de las de tcp por lo una de que los segmentos ca dos ff hoe 
el de de que puede ser como el estado de una conexi tcp cwnd en de un segmento por rtt lo cual que cwnd una cola como en un segmento 
los algoritmos de de tcp jac ste aps un todo para la ca da de un lo segmento sin depender del de ff 
hoe hoe describe un todo para el rtt por una estimaci en el algoritmo de par de paquete en kes del ancho de banda de una :10.1.1.133.3305
hoe que la estimaci de ssthresh el de alta rdida que con el tal como se ha 
dado que los de hoe en una que es hasta qu son las conexiones del tcp real 
que los por la fase de del tcp que por lo tanto la de ssthresh 
en primer los que azar red por random early detection fj bcc el de las segmentos azar 
ca das impl la conexi su de de que la cola se 
red est 
red la de de una de datos ante la de que se una alta red la de la de en las del tcp 
para las en un env de datos se han que del de del tcp 
los tcp en sack mm mmfr en cwnd se en de bytes de segmentos paquetes de datos de 
por se en de segmentos 
la es 
asp un con cwnd segmentos una experimental del tcp est un con cwnd segmentos afp 
las de esta estimate 
estimator failed produce ssthresh estimate segment loss occurred trace 
impact 
estimate 
means sufficiently large overestimate connection behave differently estimate estimate 
loss prevention 
holds ssthresh estimate prevents loss data packets 
estimate greater loss point reduces size slow start flight seg segments 
tons segment drops may prevented 
steady state 
classify ssthresh estimate steady state congestion avoidance defines tcp steady state behavior jac cwnd decreases half loss detection increases linearly loss occurs 
loss point ofl cwnd expected oscillate connection second loss event 
making estimate andl estimator range connection naturally oscillate assuming loss point stationary 
optimal 
analysis reaches point know conditions hold 
seg seg holds ssthresh estimate reduces queueing requirement follows 
close larger bottleneck bandwidth know loss point greater bottleneck bandwidth ssthresh estimate bottleneck bandwidth segment bottleneck bandwidth 
consider segment bottleneck bandwidth range slow start congestion avoidance take single rtt increase cwnd correspond prefer reach point congestion avoidance slow start don overshoot 
assuming connection lasts long queue filled tol 
fill queue slowly smoothly slow start 
furthermore exceed queue congestion avoidance segment slow start exceed capacity queue times capacity 
connection falls region queue length initially reduced rtt bytes 
region reduces queueing prevents loss fully utilizes network path deem optimal reduce performance 
conditions hold ande bounds tight 
fore set ssthresh low force cwnd growth continue linearly exponentially 
estimator underestimates min half con performance reduced consider especially bad estimate 
case reported percentage connections experiencing reduced performance marked 
size cwnd detecting loss event roughly halving cwnd causes approximately subsequent loss event overflow queue slightly cwnd reduced implementations congestion avoidance add constant times segment size cwnd ack received tion avoidance 
non standard behavior shown lead overflowing queue single segment time cwnd approaches pad 
algorithm 

opt 
tot 
red 
est 
imp 
loss state perf 
pbm csa csa csa csa recv min recv med table connections loss traces connections loss regions assess impact ssthresh estimation connections dataset experience loss 
trace placed regions 
note analyze regions order estimate considered regions subsequent matches 
estimate 
estimator failed produce ssthresh estimate 
unknown effect 
holds estimate limit tcp ability open cwnd connection 
measure limit network path assessed performance estimator 
optimal 
seg seg holds estimate greater bottleneck bandwidth limit performance 
know due region 
estimate reduces initial queueing requirement similar optimal region inx 
reduce performance 
point min seg holds indicating estimate failed provide exponential window growth tol known safe sending rate 
furthermore failure providing exponential cwnd growth long fill pipe bytes second 
mark connections reduction particularly large 
benchmark algorithm noted pbm benchmark terms accurately estimating bottleneck bandwidth 
ssthresh estimation revised version algorithm pbm provide sort upper bound expect algorithm perform 
strong upper bound may algorithms estimate available bandwidth considerably better pbm best currently available 
difference pbm pbm pbm analyzes trace point loss pbm analyzes trace entirety 
pbm represents applying detailed heavyweight accurate algorithm trace allowed inspect having ssthresh decision 
shown tables pbm estimate yields ssthresh values rarely hurt performance regardless connection experiences loss 
column lists percentage traces estimator fell regions discussed inx 
tot 
column gives percentage traces estimator improved matters attaining prevent loss ff que las de tcp sin sack los segmentos por la red 
los algoritmos de la ca da de segmentos del rtt que la de la rdida 
sin un de los en sack es que en la tanto del como del receptor 
de algoritmos hoe ff fh sack por tanto ser para de tan como cuando se algoritmos en sack 
el lo de en el 
los algoritmos de estimaci en esta la del tcp en el 
por lo tanto que la tcp del en un de de similar de 
en esta algoritmos para ssthresh como para su 
por una entre ancho de banda ancho de banda de de botella 
en pax el como la la cual una conexi de tcp puede lo de una de red un control de el segundo como el superior de la cual conexi puede en la red la tasa de datos del lo de red 
ideal es el ancho de banda en de la del ssthresh de tal que el ancho de banda para una conexi pero sin solo el de de 
la mayor de se en de ancho de banda del dado que ste es tanto un superior para una estimaci de como una mas del de de un de paquetes ya que para par de paquetes uno tras back back lo de una el entre la de receptor el ancho de banda del lo del 
obs que en la mayor de las de tcp ssthresh se con un valor que nos en este valor en un de la eficiencia la de la de de 
por lo tanto los algoritmos en esta son pero la eficiencia del tcp en que el algoritmo 
sin si el estimador produce un valor de ssthresh el tcp se de en con tcp que 
como se observ un estimador de ancho de banda del est en de paquetes kes :10.1.1.133.3305
en pax que un algoritmo de par de paquetes en el se el ancho de banda del en el tr real 
un todo el de de paquetes pbm por packet bunch mode que se fundamenta en la de en el de cuando la sea multi canal est de pax 
de de paquetes pax pax 
la del pbm sobre de datos npd el de datos que el algoritmo era dado que en de datos que correspond de conexi tales como kbps ethernet 
pbm una de conexi de estimaci de ancho de banda 
para de de red en pr para ser en tiempo real por las de tcp ya que tanto del como del receptor es 
sin para fines lo que es una del ancho de banda de una de red lo cual que puede ser por el pbm 
por lo tanto el pbm para la de los de ssthresh 
de las trazas en de las trazas da adas por de de paquetes pax graves de pax 
dado que de red lo de la entre los dos de la que trazas introduce ning en 
trazas en las la era que si el de tcp tiempo un ack del segmento 
son los tcp que un rto pax pad 
trazas por que las que el ssthresh un valor que con las en la red de con mo un ssthresh mayor 
trazas introduce un que las conexiones con rtt altos dado que son las conexiones de 
trazas para las el algoritmo pbm una estimaci 
trazas por que como se usa la estimaci del pbm para los algoritmos de estimaci 
trazas introduce un las de la red que pbm una estimaci multi canal en el ancho de banda de de botella el de una conexi de la tras las trazas nos conexiones para ser 
con para el de cada uno de los algoritmos de estimaci del ancho de banda 
en la estimaci del algoritmo para cada seg una de las de sobre la eficiencia 
para cada tres variables es la estimaci de ancho de banda de de botella el algoritmo pbm 
es el de rdida la de cuando se envi el primer paquete por lo tanto si el primer paquete con cwnd bytes algorithm unk 
opt 
red 
est 
imp 
perf 
pbm csa csa csa csa recv min recv med table connections loss traces steady state regions 
column directly compared column reduce performance assess estimator trades improvement cases damage 
see pbm provides benefit steady state prevention loss optimal connections experience loss loss occurs estimate falls optimal region connections 
remaining estimates overestimates case connection experiences loss unknown impact harm performance connections dropped segments 
indicates time available bandwidth raw bottleneck bandwidth pbm measures accords finding pax 
sender side estimation algorithms description sender side bandwidth estimation algorithms corresponding ssthresh estimates investigated 
tcp congestion control algorithms principle self clocking jac :10.1.1.15.3262
data segments injected network arrive receiver rate bottleneck link consequently acks generated receiver spacing reflects rate bottleneck link 
sender side estimation techniques measure rate returning acks bandwidth estimate 
algorithms assume spacing injected data stream network arrive intact receiver preserved returning ack flow may true due fluctuations return channel altering ack spacing ack compression mog 
algorithms advantage able directly adjust sending rate 
case tcp directly set ssthresh variable soon estimate 
disadvantage algorithms reliance ack stream accurately reflecting arrival spacing data stream 
tracking slow start flights technique investigate tcp specific algorithm tracks slow start flight acks flight obtain estimate ssthresh 
algorithm tcp specific general idea measuring spacing introduced network segments transmitted rtt applicable transport protocols 
parameterize algorithm number acks estimate bottleneck bandwidth 
analysis current flight size segments 
tracking slow start flights algorithm initialize current segments data segment sent andf initial value cwnd segments 
sequence time delayed ack leading timing lull currents andf check ack subsequent arriving acks sequence range flight 
flight estimate 
continue flight 
acks arrive reordered duplicates algorithm terminates 
looking forward subsequent acks algorithm ignores acks single segment presumably delayed 
find flight segments 
number acks new data arrive old value ofs new value size flight isf na slow start increase 
find suitable flight estimate bandwidth amount data acked ack divided time arrivals acks 
second rows tables show performance algorithm quite poor 
overwhelming problem estimator underestimating bandwidth cause reduction performance 
underestimation caused part tcp delayed acknowledgment algorithm 
rfc bra encourages tcp receivers refrain incoming segment acknowledge second incoming segment requires receiver wait longer msec second segment arrive sending ack 
tcp implementations msec heartbeat timer generating delayed acks 
timer goes time msec segment arrived receiver waiting second segment generate ack single segment arrived 
mechanism fail preserve returning ack stream spacing imposed data stream bottleneck link 
time receiver spends waiting second segment arrive increases time acks assumed sender indicate segments spaced network leads underestimate bandwidth 
furthermore delayed ack timer effect injected ack stream flight effectively partitioned mini flights duration slow start data segments sent response incoming acks 
sequence time plot illustrates effect 
plot recorded sender perspective outgoing data segments indicated solid squares drawn upper sequence number segment incoming acks drawn hollow squares sequence number acknowledge 
flight shown consists segments elicits single ack arrives timet 
flight segments ack triggers elicits acks segments arriving att just segment time rtt bytes por segundo 
si la conexi rdida es el ancho de banda en el mayor cwnd la conexi cuando la red est libre de tr en que la rdida ha por un de la cola de de la conexi en la de red 
si son se que la est 
es la estimaci de ancho de banda por el algoritmo de estimaci de ssthresh en seg rtt de segmento el de la de en segmentos para un ancho de banda de bytes segundo para un dado de segmento rtt del tcp obs que por seg es continua 
conexiones con rdida las una conexi con la eficiencia de un estimador cu de las le 
obs que las en un orden dado por lo cual un estimador ser para de las que le en primer 
sin estimaci el estimador logr una estimaci de ssthresh de la de la rdida de segmento lo de la 
sin 
la estimaci con que es una sobre estimaci lo grande como para que la conexi se ya sea esta estimaci bien sin estimaci 
de rdida 
la estimaci de ssthresh pero la de las paquetes de datos 
que la estimaci es mayor que el de rdida reduce en ns seg segmentos el de la en 
por lo tanto se hasta ns ca das de segmentos 
estado 
cuando se que ssthresh como estado 
la de la cual define el de estado del tcp jac cwnd la ante la de rdida hasta la de rdida 
por lo tanto dado el de rdida del segundo de rdida de la conexi se puede que cwnd entre una estimaci entre que el de rdida es est el estimador el del cual la conexi 
optima 
cuando el este que se ha dado de las 
si se que seg seg la estimaci de ssthresh reduce el de la cola de seg lo en es el tiempo de la conexi que ser inferior cwnd si la conexi se sin datos la de la del receptor kb 
el de cwnd el primer de rdida es por lo tanto el primer de cwnd que cada de rdida solo la cola de por tanto cwnd se 

dado que se ancho de banda de de botella pero inferior que el de rdida es mayor que ancho de banda si bien la estimaci de es inferior ancho de banda de de botella este ancho de banda un segmento que el ancho de banda de de botella un segmento est del tanto el como la de lo un rtt para el cwnd hasta corresponder con este de la de que con de tal que se 
de este que la conexi lo la cola se en la cola de gradual que con el 
sin cuando la cola una de lo es por un segmento que el la amos su 
cuando una conexi cae de esta la de la cola de se reduce en nq ttt bytes 
esta optima ya que reduce la de red 
de eficiencia 
si se de las son 
por lo tanto ssthresh un valor el de cwnd hasta en de 
que la estimaci es cuando un estimador min en de la del de las conexiones en las se la eficiencia 
en este el de conexiones que una de la eficiencia se con un 
de de una de el de segmento por cada ack la de este habitual ha que la cola de en de un solo segmento cada vez que cwnd se pad 

reflects delayed ack 
flight packets lull msec middle 
lull reflected acks flight plus additional delayed ack occurs sub flight segments times 
resulting flight segments reflecting lull introduced new delayed ack original delayed ack general pattern repeats flight segments 
ack flights give bandwidth estimate hope flight 
mundane real effect significantly complicates tcp sender side bandwidth estimation 
transport protocols effect avoidable acks delayed general observation sender side estimation significantly benefit information regarding just packets sent arrived receiver trying infer timing assuming receiver sends feedback promptly generate echo arrivals 
closely spaced acks ssthresh estimation algorithms hoe ad notion measuring time closely spaced acks 
measuring algorithms attempt consider acks sent response closely spaced data segments interarrival timing receiver presumably reflects rate passed bottleneck link 
defines exactly constitutes set closely space acks 
explore range csa definitions varying parameters 
fraction rtt consecutive acks closely spaced group arrive order considered close examined values 
second parameter number acks close order estimate 

bandwidth estimate arrive save rtt sec predecessors 
algorithm advantage easy implement 
depend details tcp congestion control algorithms algorithm easy transport protocols 
disadvantage algorithm potentially highly dependent constants 
goal find sweet spot parameter space works diverse set network paths 
rows tables show effectiveness points parameter space 
values range performed appreciably worse shown 
chosen sweet spot parameter space 
choice clear cut provide similar effectiveness 
parameter values shown including chosen sweet spot reduce performance large number connections experience loss yield performance benefit connections experience loss due inability form estimate overestimating 
tracking closely spaced acks ssthresh estimation algorithm ad assumes arrivals closely spaced acks form tentative ssthresh estimates final estimate picked settle form consistency 
csa estimator sweet spot assess effectiveness proposed approach 
scheme take multiple samples minimum observed sample set ssthresh 
continue estimating point loss observe sample minimum sample observed far case presumed converged 
show effectiveness tracking closely spaced acks algorithm tables 
csa method described algorithm performance impact connection connections loss 
furthermore number connections performance reduced increased roughly factor connections experienced loss comparing csa 
shows increase number connections performance reduced clearly estimates low devised variant depend minimum observation underestimate 
compare csa estimate ei fori 
samples average bandwidth estimates set ssthresh 
tables show comparable ways 
exception number underestimates reduce performance decreased preferred algorithm 
receiver side estimation algorithm problems sender side estimation outlined led evaluation receiver side algorithm estimating bandwidth 
estimating bandwidth receiver removes problems introduced ack spacing delay fluctuations return path due delayed ack timer 
disadvantage algorithm receiver properly control sender transmission rate 
receiver inform sender bandwidth estimate tcp option mechanism transport protocol tcp 
purposes assume problem solved note alternate uses estimate receiver area 
receiver side algorithm outlined tcp specific 
key requirement receiver predict new segments transmitted back back response acks sends know arrivals segments candidates reflecting bottleneck bandwidth 
transport protocol receiver prediction related estimation technique 
particular timestamp inserted sender receiver determine segments sent closely spaced knowledge specific algorithm sender 
area near term 
convenience describe algorithm assuming sequence numbers terms segments bytes 
denote segment acknowledged ack sent receiver 
denote highest sequence number sender transmit receiving ack 
number ack initial syn packet thena 
assuming initial congestion window arrival ack segment 
accommodate initial congestion windows larger segment afp increased accordingly 
basic insight algorithm works receiver knows exactly new segments arrival acks sender allow 
segments presumably sent back back receiver form bandwidth estimate timing arrive receiver 
tcp receiver attempt adjusting advertised window limit sender estimated ssthresh value increasing linearly reflect congestion avoidance 
doing diminishes efficacy fast recovery algorithm ste aps need increase artificially limited window algorithm ack ignored perspective sending new data response receiving 
algoritmo sin est 
sin imp 

prev 
est 
cont 
opt 
tot 

red 
pbm csa csa csa csa conexiones con rdida trazas conexiones sin rdida las usan para el de la estimaci de sobre las conexiones en el de datos que rdida 
cada se en una de las obs que las en el orden dado tal que una estimaci ser para de las la que le 
sin estimaci el estimador logr una estimaci de 

cuando se que la estimaci la del tcp para cwnd ya que est por del cwnd por la conexi que una del de la de red se puede nada en de eficiencia del estimador 
optima 
cuando se que seg seg la estimaci es mayor que el ancho de banda de de botella por lo tanto la eficiencia 
sin que la anterior 
por lo tanto la estimaci reduce los de cola de la en 
de eficiencia 
min seg que la estimaci logr un de lo cual se como de 
de puede un cwnd por el tiempo para la bytes segundo 
con conexiones para las la es grande 
algoritmo de como se pbm como de en de estimaci del ancho de banda de botella 
para la estimaci de ssthresh una del algoritmo pbm fin de alg de superior con que de algoritmo es un superior que puede ser que algoritmos el ancho de banda de que como lo el pbm pero es lo que 
la entre pbm pbm reside en que pbm la hasta el de la rdida que pbm la en su 
por lo tanto pbm un algoritmo pero sobre la en la en que de una ssthresh 
como se puede en las la estimaci del pbm produce de ssthresh que la eficiencia de si la conexi 
cada el de trazas que para cada estimador cada una de las en 
la tot 
el de trazas para el cual el estimador la bien por una de rdida el estado la 
esta puede con la eficiencia con de como un estimador dado con en con en 
que pbm alg estado de rdida sobre el de las conexiones que cuando stas la estimaci cae en la para el de las conexiones 
el de las son en los en los la conexi rdida un pero da la eficiencia en las conexiones que segmentos ca dos 
que la mayor del tiempo el ancho de banda es inferior ancho de banda de de botella por pbm lo cual est de con las en pax 
algoritmo sin est 

desc 
opt 

red 
pbm csa csa csa csa conexiones sin rdida trazas time receiver sends st ack knows receipt ack sender flow control window slide aj aj segments congestion window increase segment total number packets sender transmit aj 
furthermore sequence numbers precisely identify particular arrivals order form sound measurement 
measurements continue data segment lost form bandwidth estimate 
assessment 
note algorithm may form poor estimates face ack loss lose track data packets sent back back 
tested oracular version algorithm accounts lost acks serve upper bound effectiveness algorithm 
extra knowledge slightly increases effectiveness algorithm 
algorithm provides estimates connections algorithms studied ack yields estimate 
tables show receiver algorithm different methods combining bandwidth estimates 
recv row table shows effectiveness minimum measurements estimate 
yields underestimate large number connections decreasing performance time connection experiences loss time loss 
row shows averaging samples improves effectiveness minimum number connections reduced performance drastically reduced connection experiences loss halved case loss occurs 
flip side number cases overestimate bandwidth increases loss connection 
median samples provides similar benefits average number connections experiencing reduced performance increases factor averaging loss occurs 
maximum estimates increases number overestimates connections experiencing loss 
maximum reduces number underestimates nearly regardless connection experiences loss 
methods investigated maximum appears provide effective ssthresh estimate 
note alternate algorithms combining estimates area near term 
varied number bandwidth samples obtain average maximum estimates reported determine quickly algorithms converge 
find averaging estimates effectiveness increases slowly steadily samples 
maximum sample estimate little benefit derived observing samples 
assessment different rto estimators yielded basic findings 
minimum value timer major impact timer performs terms trading timely response genuine lost packets minimizing incorrect retransmissions 
minimum rto sec realize considerable gain performance timer granularity msec keeping bad timeouts 
hand varying ewma constants little effect estimator performance 
estimator simply takes rtt measurement computes fixed rto nearly adaptive estimators 
related finding little difference estimator measures rtt flight measures rtt packet 
finding calls question assumptions rfc jbb presumes benefit timing packet 
benefit elusive goals jbb currently accomplished timestamp options revisited consider larger sequence number space 
finished rto assessment noting timestamps sacks simple timing heuristic reverse effects bad timeouts making aggressive rto algorithms viable 
assessment various bandwidth estimation schemes sender side estimation algorithm problematic due failure ack stream preserve spacing imposed data segments network path developed receiver side algorithm performs considerably better 
question complexity estimating bandwidth worth performance improvement quarter connections studied benefit 
context uses transports estimating bandwidth receiver side algorithm may prove compelling 
study data benefit considerably verification new data live experiments 
rto estimation natural step fully explore combinations different algorithm parameters yield significantly better sweet spot avenue consider bimodal timer mode estimating rtt lack feedback network estimating variation feedback interarrival process quickly detect receiver feedback stream stalled 
bandwidth estimation interesting step assess algorithms estimates ramp new connections available bandwidth quickly tcp slow start 
estimation problems merit study scenarios routers red queueing drop tail red deployment lead smaller rtt variations source implicit feedback bandwidth estimation 
acknowledgments significantly benefited discussions sally floyd reiner ludwig 
sigcomm reviewers sally floyd paul craig partridge helpful comments 
key insight receiver determine sender packets sent back back due venkat rangan 
ad aron peter druschel 
tcp improving startup dynamics adaptive timers congestion control 
technical report tr rice university computer science 
afp mark allman sally floyd craig partridge 
increasing tcp initial window september 
rfc 
aps mark allman vern paxson richard stevens 
tcp congestion control april 
rfc 
bcc robert braden david clark jon crowcroft bruce davie steve deering deborah estrin sally floyd van jacobson greg craig partridge larry peterson ramakrishnan shenker wroclawski lixia zhang 
recommendations queue management congestion avoidance internet april 
rfc 
bra robert braden 
requirements internet hosts communication layers october 
rfc 
acks los algoritmos de estimaci de ssthresh en hoe ad est en la idea de el tiempo entre ack closely spaced acks 
la de algoritmos los ack que son en segmentos de datos tiempo entre receptor la la cual por el 
sin de art define qu es lo que un de ack 
un de de csa la de dos par 
el es la de rtt de la cual los ack de un fin de ser 
de 
el segundo par metro es el de acks que fin de una estimaci de 
la estimaci del ancho de banda se la vez que acks la de los rtt de su 
este algoritmo la de su de de de los algoritmos de control de del tcp lo cual que el algoritmo cil de usar en de 
una de este algoritmo es que de las dos 
un de en los par de de tal que bien sobre un de de red 
las de las la para de los par 
los de de este se que 
como de en los par de 
sin la ya que tanto como de una similar 
los de par los del de la eficiencia de un gran de conexiones que sobre la en del de las conexiones que las la de una estimaci 
de acks el algoritmo de estimaci de ssthresh en ad que las de acks son para de ssthresh tom una estimaci final cuando stas se en forma de 
un estimador csa con el de con de la del 
para este la nima hasta un para ssthresh 
hasta el de rdida bien hasta una del de la nima hasta el en 
en las la de usar el algoritmo de de acks tracking acks 
que el todo csa el algoritmo sobre la conexi en de eficiencia en del de las conexiones con 
con csa la de conexiones para las la eficiencia se en un factor de tanto para las conexiones que rdida como para que la 
que un en el de conexiones eficiencia est que se estima 
por tanto una que de la nima la cual es una 
cada estimaci csa ei con la estimaci ei para 
si dos est del una de para el ssthresh el de las dos del ancho de banda 
las que comparable con en la mayor de 
la es que la mayor de las que la eficiencia usar por lo cual ser el algoritmo 
algoritmos de los en la estimaci de la del algoritmo de estimaci del ancho de banda en 
el ancho de banda en el receptor el que puede en la de los ack del lo de la de del ack 
una de este algoritmo es que el receptor puede la de del el receptor sobre el ancho de banda una del tcp alg en el de un de tcp 
para prop este que los de la estimaci por el receptor ser de 
el algoritmo de es espec del tcp 
su clave es que el receptor los segmentos rec en los ack que env de esta usar las de segmentos como buenos para el ancho de banda de de botella 
de receptor sea de tal puede usar una cnica de estimaci 
en particular la temporal por el el receptor qu segmentos sin espec del algoritmo por el 
ser de 
por este algoritmo que los de la se en de segmentos en bytes 
sea ai el segmento por el ack por el receptor di el de alto que el puede de el ack 
si el ack del paquete syn como 
que la de de la del ack es de un segmento 
para las de os un segmento afp en 
la idea en el del algoritmo es que el receptor cu les son los segmentos de datos de la de uno sus ack 
el receptor de tcp la para valor de ssthresh para la de pero la del algoritmo de ste aps la de con el algoritmo un ack que ser la de datos como su doug matthias bernd werner harry rudin robin williamson 
survey light weight transport protocols high speed networks 
ieee transactions communications november 
ff kevin fall sally floyd 
simulation comparisons tahoe reno sack tcp 
computer communications review july 
fh sally floyd tom henderson 
newreno modification tcp fast recovery algorithm april 
rfc 
fj sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking august 
hoe hoe 
improving start behavior congestion control scheme tcp 
acm sigcomm august 
jac van jacobson :10.1.1.15.3262
congestion avoidance control 
acm sigcomm 
jac van jacobson 
modified tcp congestion avoidance algorithm april 
email interest mailing list 
url ftp ftp ee lbl gov email apr txt 
jbb van jacobson robert braden david borman 
tcp extensions high performance may 
rfc 
jk van jacobson michael karels 
congestion avoidance control 
ftp ftp ee lbl gov papers ps kes srinivasan keshav :10.1.1.133.3305
control theoretic approach flow control 
acm sigcomm pages september 
kp phil karn craig partridge 
improving round trip time estimates reliable transport protocols 
acm sigcomm pages august 
lud reiner ludwig 
case flow adaptive wireless links 
technical report ericsson research february 
mil david mills 
internet delay experiments december 
rfc 
mm matt mathis jamshid mahdavi 
forward acknowledgment refining tcp congestion control 
acm sigcomm august 
mmfr matt mathis jamshid mahdavi sally floyd allyn romanow 
tcp selective options october 
rfc 
mog jeffrey mogul 
observing tcp dynamics real networks 
acm sigcomm pages 
matt mathis jeff semke jamshid mahdavi ott 
macroscopic behavior tcp congestion avoidance algorithm 
computer communication review july 
nag john nagle 
congestion control ip tcp internetworks january 
rfc 
pad vern paxson mark allman scott dawson william fenner jim ian kevin jeff semke volz 
known tcp implementation problems march 
rfc 
pax vern paxson 
automated packet trace analysis tcp implementations 
acm sigcomm september 
pax vern paxson 
internet packet dynamics 
acm sigcomm september 
pax vern paxson 
measurements analysis internet dynamics 
ph thesis university california berkeley 
pax vern paxson 
calibrating measurements packet transit times 
acm sigmetrics june 
pos jon postel 
transmission control protocol september 
rfc 
ste richard stevens 
tcp slow start congestion avoidance fast retransmit fast recovery algorithms january 
rfc 
kevin thompson gregory miller rick wilder 
wide area internet traffic patterns characteristics 
ieee network november december 
ws gary wright richard stevens 
tcp ip illustrated volume ii implementation 
addison wesley 
zha lixia zhang 
tcp timers don 
acm sigcomm pages august 
lixia zhang scott shenker david clark 
observations dynamics congestion control algorithm effects way traffic 
acm sigcomm september 
segmentos son rec de tal que el receptor una estimaci del ancho de banda bas en la con la cual su 
en el en que el receptor env el primer ack que tras la del ack en el la de control de se en aj aj segmentos la de en segmento de que el total de paquetes que el ser aj aj 
sus de ser dj hasta dj por lo tanto puede sus fin de una 
las de hasta la rdida de un segmento de datos partir de estimaci del ancho de banda 
para la 
que el algoritmo puede ante la rdida de acks el control de cu les ser los paquetes rec 
una oracular del algoritmo que en la rdida de acks con de de una de 
que el lo la del algoritmo 
que cada ack genera una estimaci este algoritmo produce para conexiones que de los en este art 
las el algoritmo de de de las de ancho de banda 
la recv de cada la del de un de como estimaci produce una en una gran de conexiones la eficiencia un de las en las la conexi un de las en las se 
la que las la del el de conexiones con eficiencia se reduce dr para las conexiones que la para el en el que 
sin el bil es la de en los que sobre el de ancho de banda cuando se en la conexi la de las los que usar el que cuando el de conexiones con eficiencia por un factor de sobre el las 
usar el de las la de sobre para las conexiones que 
usar el reduce el de de que las conexiones 
de los en esta el del ser el que produce la estimaci de ssthresh 
que es de el algoritmos de de las 
por para la la cual los algoritmos la de de ancho de banda para el el de las 
que las la pero que hasta 
sin la como estimaci el de que las 
estimaci de de rto en 
el valor del un gran sobre el del en con de paquetes las 
que para un rto de seg se una en la eficiencia una de de mseg 
inferior las interrupciones err por del 
por el las del ewma sobre la eficiencia del estimador 
un estimador que la de rtt partir de la un rto se tan bien como los 
en es que el estimador lo un rtt por env el rtt de cada paquete 
esta la sobre de las en rfc jbb la cual que hay un en cada paquete 
dado que este los de jbb el de las de temporal fin de un de mayor 
de rto que las sacks una simple heur puede ser para los de las interrupciones err que los algoritmos de rto mas 
de de estimaci de ancho de banda nos la de que usar un algoritmo de estimaci en problem la del de ack en el por la de red sobre los segmentos de datos 
un algoritmo de estimaci en que 
dado que lo un de las conexiones una es si la de la eficiencia la de el ancho de banda 
en el de la estimaci del ancho de banda en puede 
se bas en datos de con la usar datos 
para la estimaci del rto el paso natural es con si la de par de algoritmos puede un de 
de es un bimodal con un en la estimaci de rtt para cuando con de la red el en en el de de de tal que la del de del receptor 
para la estimaci del ancho de banda un paso ser algoritmos que las para las conexiones hasta el ancho de banda que el del tcp 
por dos de estimaci en los red en vez de ya que la de los red de rtt como una de impl en la estimaci del ancho de banda 
algoritmos de se una de los algoritmos de estimaci de las de ssthresh en este art 
los algoritmos de control de de tcp sobre el de auto temporal jac :10.1.1.15.3262
es los segmentos de datos son en la red receptor la del los ack son por el receptor con un que esta 
por lo tanto para una estimaci del ancho de banda las de estimaci de la de los ack 
algoritmos que el por la red de datos receptor en el de los ack lo cual puede ser en el canal de que la de los ack por la de ack mog 
algoritmos la de ser de la de en el del tcp la variable ssthresh tan como se la estimaci sin una de algoritmos es su de ack el de de la de datos 
de env os de la cnica que es un algoritmo espec del tcp que cada de 
los ack de un son para una estimaci de ssthresh 
este algoritmo es espec del tcp la idea general de el por la red en los segmentos en un rtt ser de 
algoritmo el de los ack para el ancho de banda de de botella 
para 
sea el actual del en segmentos 
el algoritmo de de env os de tracking slow start flights en el segmento como primer segmento de datos como valor de cwnd en segmentos 
para los si tanto el ack de como de los ack est del de que la del env si es este env para una estimaci en con el env si de los ack es un el algoritmo 
los ack el algoritmo ack de un solo segmento 
para el env en segmentos 
si na es el de ack de datos que entre el valor anterior de su valor el del env es na el del 
cuando un env el ancho de banda como la de datos con ack entre el primer el simo ack por el de tiempo entre la de ack 
como lo las de las la eficiencia del algoritmo es 
el mayor de este estimador reside en el ancho de banda lo cual una de la eficiencia 
en la est por el algoritmo de del ack 
rfc bra que los de tcp un ack por cada segmento uno por cada dos que el receptor de mseg 
la del segundo segmento de el ack 
de tcp usan un de de mseg 
para ack 
cuando el lo cual puede en entre mseg de la del segmento si el receptor esta la del segundo segmento genera un ack para el nico segmento 
la de este puede en el de en el de ack el sobre la de datos por el 
el tiempo por el receptor la del segundo ack el entre los ack lo cual es por el como una de que la red ha el entre los segmentos lo cual su vez una del ancho de banda 
la fase de una vez que el de de un ack es la red el env se divide en dos mini env os que los segmentos de datos son en los ack 
el gr de en de tiempo de la este 
en el gr la del los segmentos de datos est en la del mayor de del segmento que los ack est vac os en la del de que 
ack de de el primer env que de dos segmentos replica un nico ack que tiempo 
pero el env de de segmentos por este ack replica en dos ack uno para dos segmentos en para solo un segmento tiempo 
este el del ack 
el env de paquetes en de un de mseg 
este se en los ack de env un ack lo cual partir del primer de tres segmentos hasta 
el env de segmentos est el por el ack el por el ack original el para el env de segmentos 
de los de ack produce una estimaci del ancho de banda ni hay de que un env posterior 
este pero real estimaci de ancho de banda en la del tcp 
para de el ser si los ack son la general es que la estimaci en se con tan lo en que los paquetes receptor en vez de esta que el receptor env su de forma lo como para un eco de las 
la se ha de con sally floyd reiner ludwig 
amos los de sigcomm sally floyd paul craig partridge por sus tiles sobre este art 
la idea clave de que el receptor puede los paquetes del rec venkat rangan 
ad aron peter druschel 
tcp improving startup dynamics adaptive timers congestion control 
cnico tr universidad rice de ciencias de la computaci 
afp mark allman sally floyd craig partridge 
increasing tcp initial window 
rfc 
aps mark allman vern paxson richard stevens 
tcp congestion control 
rfc 
bcc robert braden david clark jon crowcroft bruce davie steve deering deborah estrin sally floyd van jacobson greg craig partridge larry peterson ramakrishnan shenker wroclawski lixia zhang 
recommendations queue management congestion avoidance internet 
rfc 
bra robert braden 
requirements internet hosts communication layers 
rfc 
doug matthias bernd werner harry rudin robin williamson 
survey light weight transport protocols high speed networks 
ieee transactions communications 
ff kevin fall sally floyd 
simulation comparisons tahoe reno sack tcp 
computer communications review julio 
fh sally floyd tom henderson 
newreno modification tcp fast recovery algorithm 
rfc 
fj sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking 
hoe hoe 
improving start behavior congestion control scheme tcp 
en acm sigcomm 
jac van jacobson :10.1.1.15.3262
congestion avoidance control 
en acm sigcomm 
jac van jacobson 
modified tcp congestion avoidance algorithm 
email la lista interest url ftp ftp ee lbl gov email apr txt 
jbb van jacobson robert braden david borman 
tcp extensions high performance mayo 
rfc 
jk van jacobson michael karels 
congestion avoidance control 
ftp ftp ee lbl gov papers ps kes srinivasan keshav :10.1.1.133.3305
control theoretic approach flow control 
en acm sigcomm 
kp phil karn craig partridge 
improving round trip time estimates reliable transport protocols 
en acm sigcomm 
lud reiner ludwig 
case flow adaptive wireless links 
cnico ericsson research 
mil david mills 
internet delay experiments 
rfc 
mm matt mathis jamshid mahdavi 
forward acknowledgment refining tcp congestion control 
en acm sigcomm 
mmfr matt mathis jamshid mahdavi sally floyd allyn romanow 
tcp selective options 
rfc 
mog jeffrey mogul 
observing tcp dynamics real networks 
en acm sigcomm 
matt mathis jeff semke jamshid mahdavi ott 
macroscopic behavior tcp congestion avoidance algorithm 
computer communication review julio 
nag john nagle 
congestion control ip tcp internetworks 
rfc 
pad vern paxson mark allman scott dawson william fenner jim ian kevin jeff semke volz 
known tcp implementation problems 
rfc 
pax vern paxson 
automated packet trace analysis tcp implementations 
en acm sigcomm 
pax vern paxson 
internet packet dynamics 
en acm sigcomm 
pax vern paxson 
measurements analysis internet dynamics 
sis de ph universidad de california berkeley 
pax vern paxson 
calibrating measurements packet transit times 
en acm sigmetrics 
pos jon postel 
transmission control protocol 
rfc 
ste richard stevens 
tcp slow start congestion avoidance fast retransmit fast recovery algo rithms 
rfc 
kevin thompson gregory miller rick wilder 
wide area internet traffic patterns characteristics 
ieee network 
ws gary wright richard stevens 
tcp ip il volume ii implementation 
addison wesley 
zha lixia zhang 
tcp timers don 
en acm sigcomm 
lixia zhang scott shenker david clark 
observations dynamics congestion control algorithm effects way traffic 
en acm sigcomm 
