scaling planning resource scheduling srivastava kambhampati email asu edu fax department computer science engineering arizona state university tempe az usa 
planning consists action selection phase actions selected ordered reach desired goals resource allocation phase resources assigned ensure successful execution chosen actions 
real world problems phases loosely coupled 
existing planners exploit loose coupling perform action selection resource assignment employing algorithm 
shall show strategy severely scale potential existing planners including ones graphplan blackbox 
response propose novel planning framework resource allocation apart planning handled separate scheduling phase 
ignore resource constraints planning produce plan correctly achieve goals resource constraints 
actual resource availability plan allocated resources produce executable plan 
approach preserves correctness quality measured length plan improves efficiency 
describe prototype implementation approach top graphplan show impressive empirical results 
planning comprises causal reasoning resource reasoning 
domain set actions change states domain initial state desired goal state planning problem find sequence actions known plan executed initial state goal state reached 
causal reasoning ensures action plan preconditions satisfied effect action preceding plan 
causal relationships force sufficient orderings actions achieve goals furthermore determine extent concurrency possible plan 
resource reasoning ensures resources needed execution action available allocation resource conflicts 
resource conflict occurs actions assigned resource due resource characteristics non sharable resources borrowing operating system terminology concurrency refers potential executing actions parallel 
parallelism lack exhibited final plan dependent actual number resources available exploit concurrency 
due domain characteristics actions interfere 
resources scarce resource allocation may involve freeing limited resource add ordering relationships actions effectively serialize plan 
abstraction switch planning done resources alloc planner scheduler fail success start inexpensive alloc possible change allocation policy planning problem executable plan re schedule re plan planner scheduler fig 

left shows unified planning scheduling framework 
right compare generalized plan model separate planning scheduling see discussion section 
planners distinguish forms reasoning handle planning algorithm 
discrete resources sharable non sharable robots trucks planes traditionally straightforwardly handled logic planners ucpop graphplan way objects domain 
show section strategy severely scale potential existing planners including ones graphplan blackbox 
particular planners exhibit seemingly irrational behavior worsening performance increased resources 
continous resources time fuel planning systems additionally employed time resource map managers ensure resource consistency sipe ixtet ipp lpsat :10.1.1.15.6244
integration explodes search space planner action sets minimal respect logical goals 
actions may added achieve resource goals may necessary logical goals 
handle ipp restricts expressivity avoiding explicit temporal modeling planners take performance drop slower flaw resolution 
introduce novel approach causal reasoning planning generate plan ignoring resource conflicts 
plan post processed allocate required resources altering causal structure plan 
separating planning scheduling quite normal practice project planning scenarios industry planning done humans scheduling done variety software packages 
proposing similar flow planning scheduling phases automated 
left provides general overview approach 
unified framework accepts domain description optional annotations resources finds plan modulo choice resource abstraction allocates resources produce correct final plan necessary 
focus discrete reusable non sharable resources 
argue section approach extended continous resources 
resources declared domain expert deduced automated methods discussed 
planning complete scheduler decide resources allocate 
implemented approach top graphplan algorithm resulting planner rational treatment resources worsen increased resources significantly outperforms graphplan benchmark problems 
number technical challenges arise making approach 
identify resources domain 
second decide optimization criteria scheduling 
third need allocate resources plan transferring full complexity planning scheduling phase 
planning phase produces plan shortest length terms number steps step may contain concurrent actions aim scheduling phase number resources producing final plan length plan minimum number additional actions causal relationships changing relative positions actions 
resource allocation possible increasing plan length currently consider hard resource allocation problem revert back traditional planning 
ongoing directed relaxing restriction 
particular addressing issue scheduling resource allocation failure planner guide planner replanning effort see section 
outline rest 
section provide empirical motivation need separation planning scheduling 
section presents new planning formalism resources away planning allocate separate phase 
section elaborates resource scheduling phase 
section presents empirical evaluation effectiveness approach 
section observations nature problem put perspective 
section discusses related section presents 
empirical motivation motivate need separating resource scheduling shall see behavior state art planner graphplan modified blocks world domain contains multiple robot hands 
run graphplan multiple times problem increasing number robot hands available expect performance improve increased resources 
left shows performance plan may optimal actions differing costs graphplan works 
graphplan shuffle problem block stack needs shuffled symmetric way form new stack 
notice total planning time gp tot increases quite steeply increase number robots 
fact providing robots robot planning time slowed order magnitude 
lest reader suspect increase just due increased cost constructing planning graph plots time building planning graph gp time searching planning graph gp 
note increase number robots 
robots log time secs performance graphplan blackbox satz block shuffle problem blocks world gp gp gp tot bb tot robots log time secs performance graphplan shuffle problem varying number blocks robots shuf gp tot shuf gp tot shuf gp tot shuf gp tot fig 

performance graphplan blackbox satz block shuffle problem varying number robots left comparative performance graphplan shuffle problem blocks right 
performance degrades increase size domain resources 
wanted check results consistent problem size scaled independent number resources 
right show performance graphplan shuffle problems blocks number robots varied 
note planning performance degrades increase size domain resources 
counter intuitive behavior planning algorithm realize causal failure needlessly rediscovered multiple times different identities robot hands 
specifically asymptotic cost planning graphplan planners width planning graph length graph 
resources number robots blocks world increase tends reduce increases 
reduce indefinitely shuffle problem multiple robots version block blocks facts shuffle problem graphplan system 
consider block shuffle versions 
increase monotonically resource increase 
net effect performance degrades increased resources 
ensure behavior peculiar graphplan experimented blackbox uses sat techniques searching plan graph ucpop traditional partial order planner 
similar behavior cases 
plot titled bb tot left graph illustrates behavior blackbox 
new planning formalism reduce graph expansion search overheads abstracting resources needed actions planning ignoring interactions obtaining maximally concurrent plan 
plan post processed allocate resources actions 
see left schematic overview approach 
start identification resources 
resources declared domain expert resource specification language developed derived set automated methods development 
method involves considering resources object types object type mentioned goals 
procedure example detect robot hand resource blocks world domain 
currently extending automated resource identification methods resource identification methodology orthogonal main focus viz abstracting identified resources planning 
resources identified resource abstraction switch set planning proceeds normal fashion important differences dummy values assigned resource variables initial state equivalent resources dummy value 
interference relationships mutexes case graphplan resource equivalent operators ignored 
operators may interfere due preconditions effects 
problem unsolvable stage know resource scheduling going solvable 
give resultant plan scheduler resource allocation 
example plan generated shuffle problem disregarding inter resource conflicts planning shown 
plan consists time steps levels number resources left allocated level shown right column marked robots 
aim resource scheduling assign actual resources dummy resource variables undoing causal relations established planning 
straightforward method resource allocation assign new previously freed resource complex domains logistics objects resource type equivalent trucks boston substitutable trucks needed phoenix handled recognizing different equivalence classes resource type altogether different resource types 
choose consider objects resource type equivalent 
classes resource allocation scheduling inh easy hard fix fig 

classification resource allocation instances indication resource quantities shuffle problem fall classes 
action involved resource conflict 
suppose method uses maximum resources 
problems resources infinite resource assumption holds resource allocation quite trivial 
method fails allocation problem solved set progressively complex methods modify plan introducing actions free unnecessary allocations re allocate freed resources needed ii moving actions step level constrained step 
restrict modifications keep length plan terms number steps unchanged allow adding actions different steps 
hard resource allocation problem currently interpreted requiring increase plan length approach reverts back traditional planning resetting abstraction switch invoking recursively 
motivation keep cost scheduling small revisiting complexity planning resource scheduling phase 
scheduling resources details ready delve deeper resource scheduling phase 
level resources available scheduler way resource allocation phase interacts planning phase resource allocation problem classified variety classes shown 
start describing main classes briefly class inh problem inherently unsolvable example goals blocka blockb blockb blocka blocks world considering ignoring resources planning affect solution help create planning graph faster 
problem handled planner efficiently 
class resources sufficient overcome resource conflicts scheduling view problem infinite resources 
shuffle problem robots overcome resource conflicts plan reason problems robots take time 
class remaining case number resources small cause resource conflicts problem inherently solvable 
case decomposed difficulty resource scheduling problem number specific sub classes shown 
turns handle sub classes efficient methods 
level actions level robots unstack unstack unstack unstack blka stack pickup blka stack stack stack blka stack blka putdown unstack fig 

resource abstracted solution shuffle problem 
curved lines show resource usage spans see 
number resources needed level equals number spans crossing level shown 
complexity resource scheduling instance amount modification needed original plan allocate resources increases left right top bottom 
general scheduling method classes cycle scheduling methods tailored specific classes easiest hardest 
approach able allocate resources amount modification plan 
turn ensures plans developed method comparable quality developed normal planner 
posing resource allocation problem setup resource allocation problem constraint satisfaction problem csp treating actions needing resources variables posting codesignation non codesignation constraints actions resource allocated resource conflicts 
consider facts effects preconditions actions refer resource type consideration arm empty holding blocka robot type blocks world 
interactions involving facts non resource objects clear blocka handled planning 
setup csp problem follows 
visit plan level level determine span similar causal link partial order planners allocation resources 
span tuple ha ei effect action function allocate resources parameters problem returns plan span span nil continue conflict level ffl need number cutsets span ffl need positive 
allocated continue 

solve scheduling classes level allocated plan obtained 
solve conflict 
solve fix conflict 
solve conflict 
return problem 

increase level continue return fig 

pseudo code allocating resources produced level consumed level precondition action actions resource allocated resource conflicts actions level resources resources non sharable 
action falls span levels sb se deletes produces fact sf allocated differently actions sa sa examples spans ha holding ha holding 
solving resource allocation problem case resource allocation problem posed csp ready solving 
pseudo code resource allocation algorithm shown 
method traverses levels plan computes spans relevant level finding spans pass shuffle example spans relevant unallocated relevant span checks see way assign resource 
check easiest hardest allocation instance terms change plan 
class compatible conventional csp formulation new actions variables introduced 
standard csp solver place solve 
csp problem solved levels plan solve means bet planning causal reasoning sufficient resources available handle resource related interactions paid solution 
free reallocate resources necessary 
solving resource allocation problem case amount resources divide class number sub classes summarized 
sub classes currently detected scheduling 
general idea traverse plan level level go allocating resources resource pool face resource scarcity level scarcity suggests greater demand resource availability 
resolved provided number resources low re arranging resource usage pattern 
information variable bindings supplied planner causal dependencies 
re visit issue section 
conflict resolution starts going previous level level gamma plan introducing freeing action de allocate resource assigned action effect immediately needed 
process solve ix shrinks resource demand levels level level gamma effect needed level action reallocate resource added level gamma 
shuffle problems robots handled method 
particular respect robot corresponding span ha holding freed level re allocated level 
number robots needed levels reduce 
problem instances solvable method class fix 
resource scarcity persists unallocated action moved subsequent level potentially allocated 
move may force consumers effects actions effects clobbered potential move moved 
unrestricted movement actions complex planning solve allowed increase plan length required maintain relative action positions 
shuffle problem robots handled method 
shuffle problem action move level ease scarcity 
needs clear effect needs move level 
note length plan remains 
problem instances solvable method class 
approaches fail class length plan increased scheduling plan serialization affects plan length 
shuffle problem robot belongs class 
give problems class back original planner solving resource reasoning normal way 
class occurs number resources small resource allocation feasible 
resources identify class start scheduling determined class 
handle classes fix backtracking time polynomial length plan plan traversed 
class resource abstraction penalty go back original planner solve problem abstraction 
empirically shown penalty small easily offset savings classes 
mentioned earlier reason series methods order keep number additional actions small possible maintaining optimal plan length 
empirical evaluation developed prototype implementation approach top graphplan 
compare performance prototype standard graphplan vary amount resources 
consider blocks world number robot general adding actions plan change causal structure assume actions known sub plans domain pickup putdown blocks world free re allocate resources doing 
pathological cases assumption may hold hold normal domains 
hands varied logistics domain number trucks different cities varied 
left shows results shuffle problems blocks number robots varied 
plots clearly show planning followed scheduling ps tot significantly better original planning presence resources gp tot 
consider block shuffle problem detail 
method planning time constant scheduling time dependent specific class problem falls 
shuffle case problems robots class problems robots class fix problems robots class 
class needs modifications plan second class requires insertion new actions third requires movement actions levels steps 
shuffle problems robot class sent back planner 
reflected dip plot shuf ps tot robot case 
robots performance graphplan planning scheduling shuffle problem varying number blocks robots shuf gp tot shuf gp tot shuf gp tot shuf gp tot shuf ps tot shuf ps tot shuf ps tot shuf ps tot robots log time secs performance graphplan planning scheduling blocks huge fact block bw large problems gp tot ps tot gp tot ps tot fig 

comparative performance shuffle problems blocks left huge fact blocks bw large blocks problems right 
shown plots length plan approach original graphplan terms number levels actions 
number resources robots increase approach takes constant time performance graphplan adversely impacted significant extent 
right see performance method block huge fact problem block bw large problem 
huge fact problems robots class remaining problems class 
class search time original planner increases resources falls resource scarcity eased 
classes performance original planner degrades resources 
method relies original planner class suffers minor penalty instances shows remarkable improvement 
bw large problems robots class remaining problems class 
obtain results similar huge fact case 
notice amount resources transition class depends problem 
algorithm cycles methods problem 
trucks city normal gp gp sched table 
runtime results experiments logistics domain cpu sec multiple resources logistics domain note algorithm handle domains multiple resources 
valid plan allocated resources respect resource types domain plan iteratively scheduled respect resources type 
order resources scheduled may important scheduling efficiency correctness optimality final plan 
illustrate multi resource case consider results experiments logistics domain shown table 
problem involves packages cities need delivered cities originating city airplanes 
number trucks city varied shown 
resource declaration truck city equivalent trucks city 
ensures trucks different cities considered inter changeable 
total number trucks domain total number trucks domain largest problem 
planning abstracting trucks 
resource allocation phases corresponding allocation trucks specific city 
see separating planning scheduling idea domain leading significant speedups number resources trucks city increases 
discussion exploring planning model resource allocation apart planning handled separate scheduling phase see right 
observe necessary condition schedulable plan causally correct irrespective nature resources 
produce plan correct sans resource allocation starting point planning problems differ number amount resources 
actual resource availability plan allocated resources produce executable plan 
existing classical planning systems sharable discrete resources typically assumed infinite capacity trucks load number packages continous resources assumed unlimited fuel available 
causal plan created optimistic resource assumption unlimited infinite 
scheduling actual resources may insufficient assign force replanning take place honor resource limits 
scheduler aid planner informing re planning needed 
communication planner schedule limited flagging failure allocate resources improved having scheduler explain reason failure allocate sufficient resource 
explanation presumably terms resource limitations plan structure regressed just restrictions plan structure 
regressed explanation passed planner re starting search 
type multi module dependency directed backtracking approach variation hybrid planning methodology developed akin approach link satisfiability linear programming solvers :10.1.1.15.6244
algorithm resource type level transition scheduling class occurs marks failure information 
planner scheduler share common structure making regression straightforward 
replanning additional actions introduced limited resources allocated freed re allocated reusable resources simply provided re 
iteration planning scheduling continue plan executable shown right 
current implemented model discrete sharable non sharable resources 
consider continous resources modeling handling linear constraints 
inefficiency current implementation propagate constraints resource variables planning aposteriori causal dependencies mutex constraints 
increases scheduling setup time information available planning 
addressing problem lifted planning scenario codesignation non codesignation constraints variables propagated causal reasoning 
note selective resources committed 
mentioned earlier counter intuitive behavior performance worsening resources restricted disjunctive planners graphplan blackbox traditional planners including ucpop 
plan pp 
identified inefficiency combining resource scheduling planning knowledge specific steps taken address inefficiency plan 
related seen abstraction resources planning phase 
angle idea keeping structure causal plan intact resource allocation phase akin enforcement ordered monotonicity property alpine 
important difference dependent availability strong abstractions motivated desire exploit loose coupling planning scheduling real world domains 
plan scheduled support interaction scheduler planner arrive schedulable plan 
planners considered resources sipe domain specific operator ordering provided defining resource objects domain 
closer el richards cesta cristiano perform temporal resource reasoning plan obtained 
consider interactions resource allocation planning phases 
lpsat planner wolfman weld distinguishes discrete continous state variables pushing assignment continous ones lp solver :10.1.1.15.6244
note discrete continous distinction really orthogonal resource non resource distinction 
abstraction resources applied continous discrete parts lpsat 
fox long described way utilizing symmetry domains speedup planning 
symmetric domain objects definition functionally similar usefully distinguished 
insight symmetric objects sufficient solution verification avoid equivalent failures 
keep track symmetric objects planning resources 
exist methods improving performance graphplan removing irrelevant literals problem specification 
methods applicable problem resources may irrelevant 
explanation learning ebl dependency directed backtracking techniques kambhampati expedite graphplan 
methods capture regularities domain problem competitive approach 
complexity changing plans scheduling parallelization studied backstrom 
focuses parallelizing complete correct plan start maximally parallel resource abstracted plan add shift actions levels handle resource constraints 
introduced novel planning framework resource allocation apart planning handled separate scheduling phase 
aim planning efficient scale large domains containing multiple resources 
described resources discussed allocated plan obtained causal reasoning notion plan length optimality 
runtime approach sensitive resource quantity 
admits paradigm plan schedule anytime 
allocated resource unavailable plan execution handle exception resource reallocation 
resource scheduling phase currently aims generate shortest length plan equating effect plan cost plan length 
consistent current practice systems graphplan blackbox real world domains need general cost metrics function plan length resource costs 
handled discrete sharable non sharable resources 
plan incorporate continous resources modeling linear constraints 
planner scheduler interaction planner provide variable binding information scheduler explore class falling back planning resource abstraction 
ongoing concentrates general issues 

backstrom 
computational aspects reordering plans 
jair vol 

blum furst 
fast planning planning graph analysis 
proc ijcai 

cesta cristiano 
time resource problem planning architectures 
proc 
ecp 

currie tate 
plan open planning architecture 
ai vol 

kautz selman 
blackbox new approach application theorem proving problem solving 
workshop planning combinatorial search aips pittsburgh pa 

el richards 
temporal resource reasoning planning approach 
proc 
ecai 

kambhampati tenenbaum lee 
integrating general purpose planners specialized reasoners case study hybrid planning architecture 
ieee trans 
systems man cybernetics special issue planning scheduling control vol 
november december 
earlier version appears proc 
aaai 

kambhampati 
ebl graphplan 
proc 
ijcai 

knoblock 
automatically generating abstractions planning 
ai journal 

ghallab 
planning sharable resource constraints 
proc 
ijcai 

fox long 
detection exploitation symmetry planning domains 
proc 
ijcai 

mcallester rosenblitt 
systematic nonlinear planning 
proc 
th 

nebel dimopoulos koehler 
ignoring irrelevant facts operators plan generation 
proc 
ecp 

koehler nebel hoffmann dimopoulos 
extending planning graphs adl subset 
proc 
ecp 

penberthy weld 
ucpop sound complete partial order planner adl 
proc 
aaai 

wolfman weld 
lpsat engine application resource planning 
proc 
ijcai 

wilkins 
practical planning extending classical ai planning paradigm 
morgan kaufmann pub san mateo ca 
