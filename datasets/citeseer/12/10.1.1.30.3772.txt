instrumentation optimization win intel executables etch ted romer geoff voelker dennis lee alec wolman wayne wong hank levy brian bershad university washington brad chen harvard university etch info cs washington edu etch general purpose tool rewriting arbitrary win binaries requiring source code 
etch provides framework modifying executables measurement optimization 
etch handles complexities win executable file format instruction set allowing tool builders focus specifying transformations 
etch handles complexities win execution environment allowing tool users focus performing experiments 
describes etch tools built etch including hierarchical call graph profiler instruction layout optimization tool 
decade intel instruction set computing industry 
arguably intel processors executed instructions computers built 
despite widespread intel processors applications tools available assist programmer user understanding exploiting interaction applications processor memory system platforms 
university washington building software architecture binary rewriting developing tools intel platforms running win 
describes etch binary rewriting system win applications run intel processors 
developed etch aid programmers users researchers understanding behavior arbitrary applications running intel architectures 
application source required rewrite program 
etch supports general transformations programs rewritten optimize performance access original source code 
etch targeted different user groups architects wish understand current application workloads interact architecture computer system developers wish understand performance programs development cycle users wish understand improve performance common applications executing environment 
etch provides groups measurement tools evaluate performance levels detail optimization tools automatically restructure programs improve performance possible 
previous binary modification tools pixie chow atom srivastava eustace eel larus schnarr run unix systems 
tools modifying programs eggers run unix systems require access compiler generated assembly language versions input programs 
contrast etch call graph profiling tool works directly win binaries 
environment creates challenges unix environments including code discovery complexity instruction set current practice interleaving data executable instructions text segment difficult statically discover code executable image 
structure win pe header defined standard defines executable internal structure 
internally binary contain code data jump tables arbitrary order format commonly changes compiler compiler 
binary rewriting tool able accurately distinguish code data rewrite code leaving data intact 
failure distinction result broken executable large amounts uninstrumented code 
module discovery win applications commonly composed top level executable large number dynamically linked libraries dlls 
example lotus loads dlls simple application listed executable header identified run application 
libraries may statically identified executable headers identified loaded dynamically 
case names dlls loaded application determined running program 
transformation loosely structured application requires instrumentation tool able identify dlls program 
contrast unix applications composed single statically loaded executable executable relatively small number shared libraries 
environment management win application executes context includes working directory program name invoked 
typical unix applications win applications sensitive context may module application copied moved different directory 
consequently necessary run transformed executable pro shell appear win executable running original context 
model etch system framework supports integration nearly type measurement optimization tool similar systems atom eel 
etch permits measurement tools instrument binary application program executed produces required measurement data runs 
example tool may instrument program produce trace memory reads writes may instrument program record number conditional branch instructions succeed fail 
furthermore etch allows complex modifications executable binary etch tools rewrite program order improve performance 
example etch tool may reorder instructions optimize pipeline structure particular processor implementation may relocate procedures improve memory system locality behavior 
etch separates process instrumenting tracing executable phases instrumentation phase analysis phase 
similarly tool split components instrumentation module analysis module 
instrumentation phase etch processes program order discover components program instructions basic blocks procedures 
etch discovers component calls tool instrumentation module telling module discovered 
callback instrumentation module opportunity instruct etch examine possibly modify executable insert measurement instructions instruction basic block procedure 
inserted instructions may include calls procedures analysis module loaded executable run time analysis phase 
program runs execute additional inserted code including calls tool analysis routines record process crucial measurement information 
program completes analysis module opportunity run analysis routines required process data collected execution 
original binaries analysis code instrumented optimized binary etch instrumentation code etch transforms program instrumentation code add new code program take old code simply reorder pieces program 
illustrates general transformation executable etch 
etch discovers pieces original executable invokes instrumentation code manner indicated 
tion tool provides implementations functions 
functions turn direct etch modify executable respect specific instruction 
directions effect say instruction runs please call specific function specific set arguments 
example count instructions procedure direct etch insert call procedure incremented counter run time 
instrumentation code add remove modify instructions add procedure calls point executable 
provisions communicating program state register values analysis code run time 
default program state respect original executable 
entire executable traversed etch generates new version executable includes instructions added instrumentation 
functions called instrumentation points etch run time library linked dynamically loaded new executable 
executable written etch run analysis routines run side effect running program 
instrumentation routines inspect state program example contents registers effective addresses 
addresses text data relative original binary collection routines addresses run time 
transformations performed binary etch change program correctness etch discovers program components program instrumentation invokes instrumentation code component component written new executable 
implementations instrument routines may direct etch add new code specified component 
procedure program basic block procedure instruction basic block cache data collection popular nt applications 
course possible write instrumentation analysis code causes program break executes 
program transformed performance measurement collection may run slowly depending number additional instructions executed 
etch require changes operating system binaries may utilize os facilities software timers implementation specific facilities intel pentium performance counters 
measurement typical etch measurement tool analyzes appli cation behavior runs program termination saves information run disk 
example cache simulation tool examine application memory stream report cache rates various cache configurations 
post processing tool predict application execution time cache rates hypothetical processor cache memory speeds 
different tool simply display cache data graphically illustrated 
graph shows number misses instruction level instruction cache second level unified cache perl interpreter commercial compilers microsoft word 
optimization etch provides facilities rewriting executable order improve performance 
example possible reorder instructions optimize code layout cache vm behavior 
shows reduction instruction cache misses execution time cycles collection call graph profile parents name time self desc calls children synch exe synch exe kernel dll synch exe synch exe synch exe synch exe lock release synch exe lock acquire synch exe getc synch exe condition signal synch exe fopen synch exe putchar performance impact code layout optimization 
excerpt typical hierarchical call graph profiler output 
procedure output includes name module executable dll name procedure unique identifier procedure time spent procedure callers parents callees children number calls caller procedure procedure callee 
popular win programs optimized code layout etch mhz pentium 
etch discover programs locality executing training input rewrite applications order achieve tighter cache vm packing 
infrequently executed basic blocks moved line frequently interacting blocks laid contiguously executable algorithm pettis hansen pettis hansen 
results measured hardware performance counters 
different inputs training testing 
call graph profiling example relatively complex etch tool etch call graph profiler 
shows pro gram activity terms program dynamic callgraph format originally unix gprof profiler graham 
designed give precise complete information bottlenecks time sinks application 
etch debugging information provide output procedure names 
source code available coordinated gnu emacs browsing mode provides point click navigation source profiles 
provides multiple views profile information help developers identify bottlenecks different structural levels 
views include module procedure view identify modules procedures execution time spent hierarchical view illustrated 
uses etch instrumentation monitor procedure calls returns execution statistical sampling commonly profilers 
count cycles instructions quantify activity application modules 
counting cycles tool uses hardware cycle counter measure path lengths 
counting instructions instruments basic block add length basic block counter 
tools written etch basic ways tools developed etch time hand gui tool specific wrapper command line 
primitive simply invoke etch component program passing argument name tool program component 
complex programs somewhat tedious error prone necessary specify program component time 
second convenient way run etch graphical user interface 
etch gui visual etch standard collection tools available etch users requiring write understand mechanics building etch tools 
goal visual etch user interface 
developing gui extremely easy nave user undergraduate programmer architecture course able run sophisticated experiments commercial software 
follows point click go model control illustrated 
user simply specifies program tool runs program modified tool looks output 
user interface determines program components drives rewriting process ensures environment working directory data files initially available original executable available transformed executable run time 
gui runs etch original binary produce new binary modified collect necessary data 
executes modified binary produce data feeds data analysis tools produce graphs charts illustrate behavior pinpoint problems 
example shows output opcode histogram tool displays distribution instruction types mpeg player 
etch optimize performance user may instruct etch apply performance optimization transformation 
example etch may rewrite original binary change layout data code order improve cache virtual memory performance illustrated 
third way run etch command line version instrumentation front 
command line front generic wrapper program specialized compile time specific instrumentation tool 
example compile wrapper libraries build program 
instrument applications call graph profiling 
instrumented profiled application run command post process raw profile information 
example sequence commands instrument profile notepad exe notepad exe notepad exe notepad exe sample results showing distribution instruction opcodes 
step takes original program case notepad exe dlls produces versions transformed collect profile information 
second step runs transformed version program uses transformed dlls calling run time analysis routines generate output file containing profile information 
third step converts output file human readable text 
command line interface possible include profiling part automated build test environment requiring interaction gui 
command line interface manages discovery instrumentation modules application 
watch application training run build entire list modules application specific test list available instrumentation process 
alternatively new modules detected instrumented profiling experiment runs 
possible eliminate training run accommodate slight variations testing runs cause new dlls loaded 
summary etch general binary rewriting tool win executables running intel architectures 
key features generalized api allows tools developed relatively quickly run relatively performance 
learn etch project obtain version color figures please visit www cs washington edu homes bershad etch traces generated popular win programs visit etch eecs harvard edu traces index html chow fred chow earl killian weber engineering risc compiler system ieee compcon march 
eggers eggers keppel levy techniques efficient inline tracing shared memory multiprocessor proceedings acm conference measurement modeling systems may 
graham graham kessler mckusick 
execution profiler modular programs software practice experience pp 

larus schnarr james larus eric schnarr eel machine independent executable editing proceedings acm sigplan conference programming languages design pldi june 
pettis hansen karl pettis robert hansen code positioning proceedings acm sigplan conference programming language design implementation pldi june 
matt peering inside pe tour win portable executable format microsoft systems journal vol 
pg march 
srivastava eustace srivastava eustace 
atom system building customized program analysis tools proceedings acm sigplan conference programming language design implementation pldi june 
see dec wrl research report 
com frames html 
