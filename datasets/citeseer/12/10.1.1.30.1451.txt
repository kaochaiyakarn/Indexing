call push value subsuming paradigm paul levy department computer science queen mary westfield college london ns pbl dcs qmw ac uk 
call push value new paradigm subsumes call name call value paradigms sense operational denotational semantics paradigms seen arising translations provide similar semantics call push value 
explain call push value discuss general operational ideas especially distinction values computations principle value computation 
example program see lambda calculus primitives understood push pop commands operand stack 
provide operational denotational semantics range computational effects show agreement 
obtain semantics call name call value familiar new known previously appeared mysterious 
contribution invited lecture popl reynolds surveying years programming language development suggested valuable bring typed call name cbn typed call value cbv common framework 
propose call push value cbpv new typed paradigm filinski variant moggi computational calculus solution problem :10.1.1.41.840:10.1.1.134.8272
introduce cbpv language give translations cbn cbv languages 
claim translations cbpv subsumes cbn cbv 
mean language subsume 
sound adequate translations cbn cbv languages languages linear calculus moggi calculus :10.1.1.41.840:10.1.1.19.4622
explain sense translations cbpv go classic transforms consequently cbpv solution reynolds problem 
introduce informal criterion 
translation ff language language naturally arising denotational semantics operational semantics equation arises ff supported epsrc research studentship paul levy similar denotational semantics operational semantics equation importance translation need longer attend primitives seen syntactic sugar complex constructs shall see sect 
classic translations mentioned 
essence reynolds problem expressed follows give translations cbn cbv languages single language 
key features cbpv enable solve problem 
divides moggi type constructor type constructors give types thunks producers respectively 
distinguishes values computations 
writing applied calculus primitives understood commands operand stack read push read pop 
reminiscent division monad adjunction 
adjunction extra structure gives rise model cbpv different non equivalent adjunctions give rise model structure 
explained 
feature shared cbv feature cbn 
push pop interpretation commonly implementation lazy languages 
translations cbpv informal claim prove diverse collection examples corroborate give operational semantics cbpv big step small step machine form recover standard operational semantics cbv cbn 
formulated include various computational effects 
give scott semantics cbpv recover cbn cbv 
give state passing semantics cbpv recover mysterious cbn semantics hearn straightforward cbv semantics 
give continuation semantics cbpv recover cbv semantics cbn semantics nb strictly speaking cbn validate law 
give game semantics cbpv recover cbn game semantics cbv game semantics :10.1.1.37.813
give equational theory cbpv 
equations gives cbn include fi laws functions generally fail cbv 
equations obtain cbv include example gamma bool true false generally fails cbn 
fact special case law sum types 
call push value subsuming paradigm give messy categorical semantics cbpv 
cbpv structure construct cbn cartesian closed category cbv premonoidal category sense 
add sum types cbn cbv languages translations cbpv extended include 
operational denotational semantics sum types differs cbn cbv differences recovered translation cbpv 
discussing related give operational account principles cbpv 
add divergence recursion basic language provide scott semantics helps motivate translations cbn cbv cbpv 
provide operational denotational semantics range computational effects 
conclude brief discussion practical issues 
related briefly give ways proposed translations cbn cbv 
course objectives designed achieve different 
look cases semantics source language far see extend translation 
evident provide operational semantics monadic target languages recover standard operational semantics source languages :10.1.1.19.4622:10.1.1.134.8272
monad language provide semantics cbn translation cbn preserve law functions 
applies transform cbn cbv 
remarked linear language assumes commutativity effects continuation models example arise likewise language 
cps transforms course preserve scott semantics 
subtly cases semantics source language extend target similar semantics types complicated 
decompose cbv predomain model cbv tb drop countable base condition predomains total function space operation preserve 
example predomain flat uncountable 
cbn game model exhibit linear decomposition cbn requires types interpreted longer arenas games 
problems linear approach discussed abandoned technical reasons 
define predomain countably algebraic directed poset joins nonempty bounded subsets set fy xg element 
condition adapted 
domain predomain element 
paul levy call push value introduce cbpv section operational account cbn cbv operational ideas remain essentially constant different effects range models wide 
operational principles types cbpv distinguish computations values 
intuitively speaking computation value cbpv disjoint classes types computations computation type value value type 
clarity underline computation types 
classes types ub theta fa set tags countable language infinitary 
explain types follows notice explanation maintains principle 
execution operand stack values tags pushed popped 
value type ub thunk computation type value type pair value type value type theta pair value type value type value type tuple 
largely omit mention type entirely analogous theta 
computation type fa produces value type computation type pops tag operand stack behaves computation type computation type pops value type behaves computation type computation perform effects popping producing 
example computation type fa output pop value type push value type input pop value type produce value type crash diverge choices jump perform effects producing computation begins value produced 
values stored input output pushed popped chosen 
identifiers bound replaced values value type 
computation active thunk computation value stored thunk forced happens 
course single thunk forced times 
call push value subsuming paradigm call value type form write just 
particular write bool nat ftrue falseg respectively 
moggi type ta type system ufa value type ta thunk computation produces value type basic language definition 
context gamma finite sequence identifiers value types xm gamma am gamma omit identifiers write gamma list value types 
calculus kinds judgement gamma gamma computations values respectively 
terms defined typing rules fig 

regarded sugar types convenient regard primitive 
note projection product theta pattern match product 
key computations produce trivial producer sequenced computation firstly producer happens produces value happens bound sequenced computation filinski generalized somewhat similar cbn conditional 
intuitively means push means pop similar interpretations delta delta delta intuition illustrated sect 
formalized sect 

reader may wonder included complex values theta pm arithmetic expressions 
reason somewhat complicate operational semantics presentation exploits fact values need evaluated 
consequently lie outside range translations cbn cbv omit example program sect 

denotational categorical models interpret straightforwardly 
computation type called ground computation produces value 
example computation example illustrates cbpv computation straightforward imperative reading 
convenience add language arithmetic expressions facility prefix print command computation 
paul levy gamma gamma gamma gamma gamma gamma gamma produce fa gamma fa gamma gamma gamma gamma thunk ub gamma ub gamma force gamma gamma gamma delta delta delta gamma delta delta delta gamma pm gamma gamma gamma theta gamma theta gamma gamma pm delta delta delta gamma delta delta delta gamma gamma gamma gamma gamma xm gamma gamma gamma pm abbreviation pattern gamma match 
fig 

terms basic language call push value subsuming paradigm print hello thunk print hello print just popped produce print hello print hello print just pushed force print bound produce note word thunk omitted ill typed identify value computation 
type nat nat identifies thunk computation pops natural number produces natural number 
outputs follows hello hello hello just pushed hello just popped bound produces value 
clear lines print hello exchanged lines print hello exchanged behaviour unchanged 
say effects commute 
familiar example phenomenon equivalence diverge diverge 
assuming example global computation ground computation danger try pop empty stack 
intuitive operational semantics intuitive interpretation cbpv program operand stack illustrated sect 
formalized follows 
define operand stack finite sequence closed values tags configuration operand stack closed computation 
paul levy nil denotes empty operand stack 
define rewrite configurations st st st produce st st force thunk st st pm st st pm st st st st st st st st xm st rule st st st st evaluate closed computation start configuration nil rewrite rule applicable 
point configuration nil form produce xm pop empty stack 
call computations terminal computations write give direct definition easier reason 
big step operational semantics explained sect 
class terminal computations subset closed computations defined produce xm write set closed computations type tb set terminal computations type va set closed values type basic language define relation tb fig 

proved total function agree characterization sect 

note computations happen values need evaluated 
equations observational equivalence form equational theory axioms equations fig 
substitution instances 
computational effect introduce add extra equations recursion inequational reasoning discuss 
equations theory fact observational equivalences sense define 
call push value subsuming paradigm produce produce produce force thunk pm pm xm xm xn note rules form delta delta delta mn gamma tn gamma 
fig 

big step semantics paul levy gamma gamma produce gamma force thunk gamma pm gamma pm gamma gamma xm gamma produce fa gamma gamma thunk force ub gamma pm gamma gamma theta pm gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma fig 

fi laws laws laws definition 
ground context closed ground computation zero occurrences hole computation value 
definition 
say ground context produce iff produce cbpv languages definition need adapted 
equations theory hold observational equivalences 
usual follow soundness adequacy models 
worth noticing imperative understanding fi law equates push pop 
similarly law equates occur free pop push 
intuitively compelling 
divergence recursion scott semantics divergent recursive computations divergence computational effect familiar study 
add basic language computations gamma diverge gamma ub gamma xm sequencing observe producer computations non producer type observed 
call push value subsuming paradigm big step rules diverge diverge thunk xm xm partial function tb recursion binder read imperatively bind thunk computation xm computation 
scott semantics cbpv interprets value types contexts predomains computation types domains 
example lift underlying predomain domain continuous functions computation gamma associate continuous function gamma value gamma associate continuous function gamma 
example ae gamma produce ae lift ae ae ae ae ae 
ae lift thunk ae ae force ae ae proposition soundness adequacy 
closed computation 

proof 
straightforward adapt usual logical relation technique 
define mutual induction types families inclusive relations tb va key clause iff omit clauses 
note terminal iff show gamma ai gamma gamma 
gamma gamma gamma 
similarly value 
subset predomain inclusive closed directed 
subset domain inclusive contains 
relation theta predomain domain inclusive fx inclusive 
paul levy type recursion briefly indicate add type recursion cbpv 
value types computation types defined recursively extend type expressions follows delta delta delta delta delta delta syntactic difference kinds recursive type gamma gamma fold gamma gamma gamma pm fold gamma gamma fold gamma gamma unfold big step operational semantics extend terminal computations delta delta delta fold add rules pm fold fold fold fold unfold fold discuss denotational semantics 
translating cbn cbv cbpv expect scott semantics sect 
cbn types translate computation types cbv types translate value types 
important type decomposition cbpv cbn ub corresponds fact cbn function effectively applied thunk 
interpretation thunk invisible cbpv scott semantics decomposition remained hidden long 
important type decomposition cbpv cbv fa call push value subsuming paradigm similar sense equivalent moggi decomposition tb notice avoids countability problem mentioned sect 

says cbv function thunk computation pops value type produces value type translations cbpv fig 
fig 

source languages translations prototypical cbn cbv languages pcf pcf sum types 
equipped scott semantics gamma cbn gamma cbv semantics gamma val cbv cbv values big step semantics cbn cbv omit presenting detail 
followed convention supplying projection product cbn pattern match product cbv 
simplest choice principle kinds product paradigm 
computation type bool ftrue falseg nat ua theta pi ua ub am gamma ua uam gamma force thunk xm xm false produce false pm ae true false inl produce inl thunk xm xm fig 

translation cbn types terms selection position describe fundamental subsumption properties scott big step semantics cbn cbv recovered cbpv 
preservation scott semantics straightforward proposition 
cbn type cbn 
gamma cbn term cbn 
cbv type cbv 
gamma cbv value val cbv val 
gamma cbv term cbv paul levy value type nat fb theta theta am gamma am gamma val false false xm thunk xm am gamma am gamma fc value produce val mn force fig 

translation cbv types values terms selection big step semantics treat cbv 
proposition 
suppose closed cbv term 
terminal iff terminal 
cbv iff unique cbv cbn situation complicated fact evaluation introduces extra force thunk prefixes 
example example xy produce force thunk produce need definition 
precongruence reflexive transitive relation closed term constructors 

precongruence cbpv terms force thunk proposition 
suppose closed cbn term 
terminal iff terminal 
cbn iff unique cbn omit proof uses relational techniques 
call push value subsuming paradigm operational semantics computational effects saw sect 
cbpv straightforwardly incorporate computational effects 
provide big step semantics range effects divergence treated sect 

simplicity treat just effect time 
global store consider single global storage cell stores value 
add basic computations gamma deref gamma gamma gamma possible give type commands assignment output regard prefixes 
define relation theta theta tb replace rule fig 
delta delta delta gamma mn gamma tn gamma add rules deref produce proved total function 
say ground context iff produce read store language similar sect 
reading 
interest simpler denotational model 
add basic computation gamma deref define relation theta theta tb replace rule fig 
delta delta delta mn gamma tn gamma paul levy add rule deref produce proved total function 
say ground context iff produce finite output errors monoid set 
computation outputs elements evaluating output element 
rough analogy general output corresponds set finite output streams set infinite output streams 
add basic language computations gamma gamma gamma error regard output commands prefixes 
define relation theta tb replace rule fig 
delta delta delta mn gamma mn gamma tn gamma delta delta delta mn gamma delta delta delta gamma gamma gamma delta delta delta gamma add rules error proved total function 
say ground context iff produce iff monoid triple set theta gamma 
satisfies 
monoid set pair set gamma 
satisfies 
set homomorphism function gamma 
satisfying je 
call push value subsuming paradigm nondeterminism add basic language divergence recursion facilities sect 
term gamma gamma choose extra rule choose computations language diverge looking effect nondeterminism divergence continue def 
observational equivalence divergence observable may testing 
example computation chooses diverge produce equivalent produces sect 
denotation 
control effects big step semantics unsuitable presenting control effects 
require machine semantics explicit search redex 
defer sect 

denotational semantics computational effects describe denotational semantics computational effects considered sect 

part semantics straightforward value type context denote set theta interpreted usual way value gamma denote function gamma gamma 

remainder semantics differs various effects 
priori obvious sort object computation type denote 
fact effect computation type denote set exception finite output errors computation type denote algebra definition 
monoid set 

algebra triple set set homomorphism 
call carrier 

defined 
set defined canonical algebra carrier theta 
defined canonical algebra carrier paul levy 
defined canonical algebra carrier logically various semantics state soundness results interpretation type constructors appear counterintuitive 
proceed reverse order 
state soundness adequacy theorems aiming achieve meaningful motivate semantics 
proposition soundness adequacy 
suppose closed computation 

global store 
read store 
global output errors je 

nondeterminism 

machine semantics sect 
control effects looking prop 
guess interpretation computation gamma 
recall fa judgement corresponds cbv term type interpretation familiar 
global store denote function theta gamma set 
fa theta denotes function theta gamma theta 
read store denote function theta gamma set 
fa denotes function theta gamma 
finite output errors denote function gamma algebra 
fa denotes function gamma theta nondeterminism denote relation gamma set 
fa denotes relation gamma 
control denote function gamma theta fixed set regard set answers set 
fa denotes function gamma theta 
turn attention interpretation 
know values gamma ub correspond computations gamma case global store functions gamma correspond functions read store semantics value gamma denotes function theta gamma denote identity 
semantics closed values sum types unsatisfactory sums closed external sense 
call push value subsuming paradigm theta gamma 
set 
similarly determine interpretation effect 
expected follows case ufa denotes set moggi type ta effect uf global store gamma theta gamma 
theta gamma read store gamma gamma gamma finite output errors theta gamma nondeterminism gamma control gamma gamma gamma know computations gamma correspond computations gamma case nondeterminism relations gamma correspond relations gamma theta 
set theta 
similar reasoning suggests interpretations effects effect global store read store finite output errors nondeterminism theta control theta remains give semantics terms straightforward omit 
proposition 
denotational semantics cbpv validate equations sect 

precisely provable equational theory 
return prop 

prove prop 
result generalized non closed terms 
proof 
straightforward 
show 
define mutual induction types families relations tb va key clause iff omit clauses 
note terminal iff prove induction types value type exists va computation type exists show paul levy gamma gamma gamma 
gamma 
gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
models give rise translations sect 
models cbn cbv 
cbv recover familiar continuation semantics cbv theta 
cbn recover continuation semantics combination cbpv semantics global store readonly store state passing semantics 
machine semantics control operators cps machine semantics big step semantics fig 
implicitly describes search redex 
suppose seek machine semantics specified rewrites search explicit 
move computation searching put layers move stack called outside 
remains closed computation called inside 
say outside type accompanies inside type write closed interest 
outside type fa called consumer waits producer produce value type roughly speaking outside consists part operand stack sense sect 
consumer 
adapting notation represent layers move contexts 
fix type nil fa terminal configuration form nil 
say nil nil reflexive transitive closure 
proved total function configurations terminal configurations nil nil iff big step semantics sect 

cbn language idealized algol terms type read store terms type comm write 
call push value subsuming paradigm force thunk pm pm xm fig 

machine rewrites preliminaries control operators introducing control operators helpful changes language 
firstly extend operational semantics non closed computations fact computations fixed context gamma context 
requires addition terminal computations computations force pm pm terminal configuration form terminal free identifier form outside 
secondly convenient introduce new form judgement gamma written type computation require outside 
examples seen far diverge sect 
error sect 
computations coerced computation type gamma gamma coerce bm omit brevity constructs forming computations sequencing pattern matching machine configuration consists computation outside outside free computation 
add machine rewrite coerce bm control operators control operators idea values 
outside input restored throw introduce type paul levy constructor computation type os value type type 
longer need class judgement special outside nil regarded free identifier type replace rules forming gamma gamma os gamma os fa gamma os gamma os gamma gamma os gamma os add control operators gamma os gamma gamma os gamma gamma throw rule alternatively require computation type 
rewrites add xm throw km remains total function 
define observational equivalence 
gamma sequence types form os say configuration machine ground configuration 
modify def 
def 
follows 
definition 
configuration ground context ground configuration zero occurrences hole computation value 
definition 
say configuration ground context produce iff continuation semantics interpretation types largely 
add os 
addition illuminates semantics computation type think set example definition theta read heyting style outside value outside usual value gamma denotes gamma gamma 
computation gamma outside extra parameter denotes gamma theta gamma 

computation gamma outside denotes gamma gamma 

omit straightforward semantics terms 
generalize prop 
non closed terms 
call push value subsuming paradigm proposition soundness 
ae gamma ae ae ae ae deduce similar fact variants rewrites outside free computations 
algebras cbpv algebra models generalize def 
clause clause follows 
definition 
strong monad set 

algebra consists pair object morphism tx jx tx oe oe id tx commutes 
called carrier structure map algebra 

algebra define carrier 
object define tx free algebra 
indexed family algebras define algebra carrier structure map tx 
object algebra oe define oe algebra carrier structure map ty oe map composite obtained strength write class algebras 
theta gamma agrees def 

appropriate strong monad adapt denotational semantics finite output errors sect 
provide alternative denotational semantics effects considered sect 

particular computation type denotes algebra computation gamma denotes function gamma paul levy carrier 
scott semantics sect 
seen algebra semantics domain corresponds algebra lifting monad 
notion exploited 
illustrate approach case global store strong monad 
theta gamma 
closed computation denote element 
suppose prefix command 
immediately gives element tx applying gives element required denotation 
see role structure map absorb effects 
role seen interpretation sequencing construct especially simple example nondeterminism algebra powerset monad precisely complete join lattice algebra semantics choose ae ae 
morphism composites corresponds idea commuting effects inside hi discussed sect 

algebras disguise exception divergence output errors algebra semantics computational effects complex 
strong monads class category computation objects mapping gamma 
algebra isomorphism range contains free algebras closed gamma includes denotation computation types 
interpret computation types objects thought algebras disguise 
discuss connection adjunctions 
cases free algebras sufficient interpret computation types 
ob example read store monad gamma isomorphisms 

algebra isomorphisms commute structure map 
nondeterminism monad isomorphisms px py theta order algebra isomorphisms 
call push value subsuming paradigm case global store monad 
theta gamma set class sets kx canonical algebra carrier range big includes free algebras isomorphisms 

algebra isomorphisms 
case control monad gamma set class sets kx canonical algebra carrier 
range big includes free algebras isomorphisms 
theta algebra isomorphisms 
models sect 
model finite output errors seen disguised algebra models 
provides alternative motivation interpretation type constructors 
models 
fact explained cbpv models seen disguised algebra models 
algebraic soundness immediately obvious sense algebra semantics said sound producers 
statement case finite output errors viz 
prop 
note expressed commutative diagram set xb gamma oe gamma monad theta gamma xb algebra interpreting call algebraic soundness 
furthermore exception control effects apparently regarded function regard various models sect 
disguised algebra models soundness adequacy statements prop 
seen disguised forms algebraic soundness 
similarly prop 
seen statement algebraic soundness 
know algebraic soundness global store proved directly deduced soundness adequacy disguised algebra model 
paul levy type canonical forms coherent isomorphisms ub theta ub pi definable type isomorphic type canonical form 
follows ua ub fa perspective value general record tags thunks seen tag thunk 
likewise computation seen popping tag popping thunk producing value 
similar complex infinitely deep canonical forms exist terms 
practical issues cbpv emerged common theoretical foundation cbn cbv 
speculate addition suitable syntactic sugar provide basis practical programming language 
firstly operand stack interpretation application illustrated sect 
fairly intuitive 
secondly separation parts cbv abstraction viz 
thunk currying functions problematic cbv cf 
easy cbn isomorphism theta 
furthermore cbpv gives rise equivalences cbn cbv benefit implementers 
specifically comparatively simple continuation semantics sect 
allow efficient compilation lines 
am grateful marcelo fiore michael guy mccusker eugenio moggi peter hearn simon peyton jones john power reddy john reynolds edmund robinson paul taylor thielecke helpful comments discussions related material 
paul taylor diagram macros 

samson abramsky kohei honda guy mccusker 
fully game semantics general 
appear proceedings thirteenth annual ieee symposium logic computer science ieee computer society press 

samson abramsky guy mccusker 
call value games 
csl 
submitted publication proceedings csl 
call push value subsuming paradigm 
appel 
compiling continuations 
cup 

nick benton philip wadler 
linear logic monads lambda calculus 
proceedings th annual ieee symposium logic computer science pages new brunswick new jersey july 
ieee computer society press 

bruce duba robert harper david macqueen 
typing class continuations ml 
acm sigplan acm sigact editor conference record th annual acm symposium principles programming languages popl pages orlando fl usa january 
acm press 

felleisen friedman 
control operators secd machine calculus pages 
north holland 

andrzej filinski 
controlling effects 
phd thesis school computer science carnegie mellon university pittsburgh pennsylvania may 

jean yves girard yves lafont taylor 
proofs types 
cambridge tracts theoretical computer science 
cambridge university press 

john hatcliff olivier danvy 
thunks calculus 
journal functional programming may 

kohei honda nobuko yoshida 
game theoretic analysis call value computation 
degano robert gorrieri alberto marchetti spaccamela editors automata languages programming th international colloquium volume lecture notes computer science pages bologna italy july 
springer verlag 

hyland 
ong 
full abstraction pcf ii iii 
submitted publication 

simon peyton jones 
implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming july 

simon peyton jones john launchbury mark shields andrew tolmach 
bridging gulf common intermediate language ml haskell 
conference record popl th acm sigplan sigact symposium principles programming languages pages san diego california january 

lafont reus streicher 
continuation semantics expressing implication negation 
technical report ludwig maximilians universitat munchen 

lassen 
relational reasoning functions nondeterminism 
phd thesis university aarhus february 

leroy 
zinc experiment economical implementation ml language 
technical report inria 

paul levy 
call push value subsuming paradigm draft supplement categorical issues 
unpublished july 

michael 
fully model sequential computation 
draft 

guy mccusker 
games full abstraction functional metalanguage recursive types 
phd thesis university london 

meyer 
semantical paradigms 
proc 
third annual symposium logic computer science pages 
computer society press 

eugenio moggi 
notions computation monads 
information computation 
paul levy 

strong monads algebras fixed points 
fourman johnstone pitts editors applications categories computer science proceedings lms symposium durham 
cambridge university press 
lms lecture notes series 


hereditarily sequential functionals game theoretic approach sequentiality 
shaker verlag 
dissertation universitat siegen 

hearn 
semantics opaque types algol languages 
manuscript may 

andrew pitts 
operational semantics program equivalence 
lecture thirteenth conference mathematical foundations program semantics carnegie mellon pittsburgh pennsylvania march 

plotkin 
call name call value calculus 
theoretical computer science 

gordon plotkin 
lcf programming language 
theoretical computer science 

gordon plotkin 
lectures predomains partial functions 
notes course center study language information stanford 

gordon plotkin 
structural approach operational semantics 
tech 
rep fn daimi univ aarhus denmark september 

power 
premonoidal categories categories algebraic structure 
submitted 

john power edmund robinson 
premonoidal categories notions computation 
mathematical structures computer science october 

john reynolds 
theory practice meet popl past 
invited lecture th acm sigplan sigact symposium principles programming languages san diego california january 

john reynolds 
essence algol 
de bakker van vliet editors algorithmic languages pages amsterdam 
north holland 

mark shields simon peyton jones 
bridging gulf better 
draft january 

alex simpson 
recursive types kleisli categories 
unpublished manuscript august 

dorai sitaram matthias felleisen 
reasoning continuations ii full abstraction models control 
acm conference lisp functional programming pages 
acm acm press june 

th 
streicher reus 
continuation semantics machines control operators 
submitted journal functional programming 
