solving polynomial systems branch prune approach van hentenryck brown university box providence ri pvh cs brown edu mcallester mit ai lab technology square cambridge usa dam ai mit edu kapur suny albany dep 
computer science albany ny kapur cs albany edu presents newton branch prune algorithm nd isolated solutions system polynomial constraints 
newton characterized global search method uses intervals numerical correctness pruning search space early 
pruning newton consists enforcing node search tree unique local consistency condition called box consistency approximates notion arc consistency known arti cial intelligence 
box consistency parametrized interval extension constraint instantiated produce hansen narrowing operator interval methods new operators ective computation far solution 
newton evaluated variety benchmarks kinematics chemistry combustion economics mechanics 
benchmarks outperforms interval methods aware compares state art continuation methods 
limitations newton sensitivity size initial intervals problems discussed 
particular interest mathematical programming simplicity method 
ams subject classi cation keywords system equations global methods interval finite analysis applications science engineering chemistry robotics economics mechanics require nding isolated solutions system polynomial constraints real numbers 
problem dicult due inherent computational complexity np hard due numerical issues involved guarantee correctness nding solutions ensure termination 
interesting methods proposed past task including fundamentally di erent methods interval methods continuation methods 
continuation methods shown ective problems total degree high number paths explored depends estimation number solutions 
interval methods generally robust tend slow 
purpose propose study novel interval algorithm implemented system called newton 
user standpoint newton receives input system polynomial constraints say variables box interval tuple hi specifying siam journal numerical analysis april 
initial range variables returns set small boxes speci ed accuracy containing solutions typically solution box returned 
operationally newton uses branch prune algorithm inspired traditional branch bound approach solve combinatorial optimization problems 
newton uses intervals address fundamental problems listed 
numerical reliability obtained evaluating functions intervals outward rounding interval methods 
complexity issue addressed constraints reduce intervals early search 
pruning newton achieved enforcing unique local consistency condition called box consistency node search tree 
box consistency approximation arc consistency notion known arti cial intelligence solve discrete combinatorial problems systems 
box consistency parametrized interval extension operator constraint instantiated produce various narrowing operators 
particular box consistency taylor extension constraint produces generalization operator known interval methods 
addition box consistency natural extension produces narrowing operators ective algorithm near solution 
newton properties correctness newton nds isolated solutions system sense hv solution newton returns box hi 
addition newton may guarantee existence unique solution boxes result 
solutions isolated oating point system precise separate solutions boxes returned algorithm may contain solutions 
termination newton terminates 
ectiveness newton evaluated variety benchmarks kinematics chemistry combustion economics mechanics 
outperforms interval methods aware compares state art continuation methods problems 
interestingly newton solves banded function problem mor cosnard discretization nonlinear integral equation variables 
simplicity uniformity newton simple mathematical results easy implement 
single concept box consistency 
rest organized follows 
section gives overview approach 
section contains preliminaries 
section presents version branch prune algorithm 
section discusses implementation box consistency 
section describes experimental results 
section discusses related development ideas 
section concludes 
short version available 
overview approach mentioned newton global search algorithm solves problem dividing subproblems solved recursively 
addition newton branch prune algorithm means best viewed iteration steps 
pruning search space 
making nondeterministic choice generate subproblems solutions problem 
pruning step ensures local consistency conditions satis ed 
consists reducing intervals associated variables constraint appears locally consistent 
local consistency condition newton called box consistency approximation arc consistency notion known arti cial intelligence systems solve discrete combinatorial search problems :10.1.1.31.1797:10.1.1.31.1797
informally speaking constraint arc consistent value range variable exist values ranges variables constraint satis ed 
newton approximates arc consistency computed real numbers general 
pruning step fails showing absence solution intervals succeeds enforcing local consistency condition 
local consistency implies global consistency case banded function fj max min pruning step newton solves problem essentially linear time initial intervals form proves existence solution nal box 
general local consistency imply global consistency multiple solutions simply local consistency condition weak 
consider intersection circle parabola initial intervals assume want resulting intervals size smaller 
pruning step returns intervals informally speaking newton obtains pruning follows 
rst constraint reduce interval searching leftmost rightmost zeros interval function zeros new interval modulo numerical precision 
reasoning applies second constraint reduce interval searching leftmost rightmost zeros producing interval reduction obtained newton branching needed progress 
branching produces intervals precision pruning step depends numerical precision improvement factor selected see section explains digits results 
pruning obtained taylor extension polynomials equations center box conditioning system 
newton uses new constraints nd leftmost rightmost zeros done previously obtain 

additional pruning original statement constraints leads rst solution backtracking choice produces intervals second solution 
note case newton smallest number choices isolate solutions 
conclude motivating section illustrate newton larger example describes inverse kinematics elbow manipulator assumes initial intervals 
pruning step returns intervals example solved replacing rst equation obtain univariate constraint solved independently 
done discussion newton making optimizations 
showing interesting pruning 
exactly branchings second newton produces rst box proof existence solution box 
preliminaries section review basic concepts needed including interval arithmetic representation constraints 
information interval arithmetic places 
de nitions slightly non standard 
interval arithmetic consider set real numbers extended nity symbols natural extension relation set 
consider nite subset containing 
practice corresponds oating point numbers implementation 
de nition interval interval set real numbers fr ug set intervals denoted ordered set inclusion 
de nition enclosure hull subset denoted smallest interval write frg interval hull denoted de ned denote real numbers letters numbers letters intervals letter real functions letters interval functions functions signature letters possibly subscripted 
resp 
denote smallest resp 
largest number strictly greater resp 
smaller number capture outward rounding dre resp 
brc return smallest resp 
largest number greater resp 
smaller equal real number denote box hi denote tuple hr set rational numbers set natural numbers 
notations 
left right center fundamental concept interval arithmetic notion interval extension 
intervals usually called oating point intervals literature 
de nition interval extension interval extension interval relation bool interval extension relation bool example interval function de ned ba db interval extension addition real numbers 
interval relation de ned interval extension equality relation real numbers 
important stress real function resp 
relation extended ways 
instance interval function precise interval extension addition returns smallest possible interval containing real results function returning accurate 
assume xed interval extensions basic real operators exponentiation instance interval extension de ned basic real relations 
addition overload real symbols interval extensions 
denote relations letter possibly subscripted interval relations letter possibly subscripted 
note constraints relations synonyms 
division unions intervals basic real operators naturally extended intervals division creates problems denominator interval includes 
tight extension division intervals best expressed result allowed union intervals 
assuming de ned follows bb cc db de bb cc db de da ce da ce bb cc ba dc 

case easy de ne 
note operations addition subtraction extended unions intervals 
typical unions intervals interval arithmetic intersection interval result operation form produce new interval increase precision computed unions intervals producing result form result intersected produce single interval result union intervals 
generalized intersection operation de ned purpose compute result may precise illustrate gain precision consider 
expression evaluates interval expression returns interval 
constraint representations known di erent computer representations real function produce di erent results evaluated oating point numbers computer 
consequence way constraints written may impact behaviour algorithm 
reason constraint function considered expression written formal language composing real variables rational numbers prede ned real numbers arithmetic operations exponentiation natural number parentheses relation symbols 
abuse notation denoting functions resp 
constraints representations symbol 
real variables constraints taken nite arbitrary large set fx similar conventions apply interval functions constraints 
interval variables taken nite arbitrary large set fx interval functions denoted letter interval constraints letter simplicity exposition restrict attention equations 
straightforward generalize results inequalities see section 
branch prune algorithm section describes branch prune algorithm newton 
section de nes box consistency key concept algorithm 
section shows box consistency instantiated produce various pruning operators achieving various tradeo accuracy eciency 
section de nes conditioning operator newton improve ectiveness 
section speci es pruning newton 
section describes algorithm 
recall assume constraints de ned variables easy extend language include functions sin cos 
box consistency box consistency approximation arc consistency notion known arti cial intelligence states simple local condition constraint set possible values variables say informally speaking constraint arc consistent reduced projections de nition projection constraint projection constraint hc ii pair constraint index 
projection constraints denoted letter possibly subscripted 
example consider constraint hx hx projection constraints 
de nition arc consistency projection constraint hc ii arc consistent wrt hd fr constraint arc consistent wrt hd projections arc consistent wrt hd system constraints arc consistent wrt hd constraint arc consistent wrt hd example constraint 
arc consistent wrt arc consistent wrt instance value 
initial domains hd arc consistency algorithm computes largest domains hd included hd constraints arc consistent 
domains exist unique 
enforcing arc consistency ective discrete combinatorial problems 
computed general working real numbers polynomial constraints 
simple approximations take account numerical accuracy expensive compute exact complexity open problem 
instance simple approximation arc consistency consists working intervals approximating set computed arc consistency return interval gg condition systems easily enforced simple constraints computationally expensive complex constraints multiple occurrences variables 
decomposing complex constraints simple constraints entails substantial loss pruning making approach applications 
see experimental results approach comparison approach 
notion box consistency introduced coarser approximation arc consistency provides better trade eciency pruning 
consists replacing existential quanti cation condition evaluation interval extension constraint intervals existential variables 
interval extensions single constraint de ne box consistency terms interval constraints 
de nition interval projection constraint interval projection constraint hc ii association interval constraint index 
interval projection constraints denoted letter possibly subscripted 
de nition box consistency interval projection constraint hc ii box consistent wrt hi left right interval constraint box consistent wrt projections box consistent wrt system interval constraints box consistent wrt interval constraint system box consistent wrt intuitively speaking condition states ith interval pruned unary interval constraint obtained replacing variables intervals boundaries satisfy unary constraint 
note condition equivalent shows clearly box consistency approximation arc consistency 
di erence arc consistency box consistency appears essentially multiple occurrences variable 
example consider constraint 
constraint arc consistent wrt value satis es 
hand interval constraint box consistent non empty 
interval extensions box consistency box consistency strongly depends interval extensions chosen constraints di erent interval extensions produce di erent incomparable tradeo pruning computational complexity 
section consider extensions newton natural interval extension distributed interval extension taylor interval extension 
natural interval extension simplest extension function resp 
constraint natural interval extension 
informally speaking consists replacing number smallest interval enclosing real variable interval variable real operation xed interval extension real relation xed interval extension 
resp 
real function resp 
constraint denote resp 
natural extension 
example natural interval extension natural interval extension function interval function 
natural interval extension constraint interval constraint interesting note de nition related theorem miranda 
case seen replacing universally quanti ed variables intervals range 
advantage extension preserves way constraints written users system choose constraint representations particularly appropriate problem hand 
nice application extension fundamental mor cosnard discretization nonlinear integral equation see section 
natural extension allows users minimize problem dependency interval arithmetic increase precision 
distributed interval extension second interval extension newton preserve way constraints written uses distributed form constraints 
key advantage extension allows algorithm enforce box consistency applying interval newton method univariate real functions 
real functions derived univariate interval constraints obtained replacing variable intervals 
consequence applying box consistency particularly ecient pruning may weaker natural extension due dependency problem interval arithmetics 
intuitively distributed interval extension viewed way speed computation box consistency natural extension 
may happen gives precision natural extension users careful stating constraints 
de nition distributed form constraint simpli ed sum products form 
monomial form qx 
en said distributed form 
de nition distributed interval extension distributed interval extension function resp 
constraint natural extension distributed form 
distributed interval extension function resp 
constraint denoted resp 

example distributed interval extension distributed interval extension function interval function distributed interval extension constraint interval constraint taylor interval extension interval extension introduce taylor expansion point 
extension example centered forms interval extensions introduced moore studied authors important properties 
taylor interval extension constraint parametrized intervals variables constraint 
assumes constraint applied form denotes function continuous partial derivatives 
assumptions key idea extension apply taylor expansion function center box bound rest series box 
note necessary go distributed form obtain property newton adopts simplicity 
distributed version easily turned canonical representation constraints 
de nition taylor interval extension constraint function continuous partial derivatives box center taylor interval extension wrt denoted interval constraint current version system partial derivatives computed numerically automatic di erentiation 
conditioning interesting note box consistency taylor interval extension closely related hansen operator improvement krawczyk operator 
hansen smith argued operators ective system ff wrt box hi interval jacobian ij diagonally dominant mig mag mig min mag max suggest conditioning consists multiplying linear relaxation real matrix inverse matrix obtained center resulting system generally solved gauss seidel iterations giving hansen operator 
see extensive coverage 
newton exploits idea improve ectiveness box consistency taylor interval extension 
conditioning newton abstracted de nition 
de nition conditioning ff 
conditioning system ff ik ik implementation newton uses conditioning cond ff returns system ff ik ij ij center ij singular 
note computation inverse obtained standard oating point algorithms approximation actual inverse 
pruning newton describe pruning newton 
key idea newton apply box consistency node search tree newton reduces current intervals variables way constraint system box consistent wrt reduced intervals solution removed 
pruning performed narrowing operators deduced de nition box consistency 
operators reduce interval variable projection constraint 
de nition box narrowing hc ii interval projection constraint hi box 
narrowing operator box narrow de ned box narrow hc ii hi hi de ned largest set included hc ii box consistent respect hi proposition soundness box narrowing interval extension hc ii interval projection constraint hi box hi box narrow hc ii hi proof assume 
de nition interval extension hypothesis 
box consistent wrt hi contradicts hypothesis de ned largest set included hc ii box consistent respect hi case similar 
position de ne pruning algorithm newton consists essentially applying narrowing operators projection reduction occurs 
procedure prune set constraint inout repeat box prune ii ng fhe ii ng box prune ii cond ng procedure box prune set interval projection constraint inout repeat narrow pruning newton pruning algorithm depicted 
rst applies box consistency natural distributed extensions reduction occurs applies box consistency taylor extension 
steps iterated xpoint reached 
termination algorithm guaranteed set nite intervals reduced nitely 
branch prune algorithm newton high level description branch prune algorithm highlighting control ow 
algorithm applies operation prune initial box 
resulting box empty means components empty solution proposition 
resulting box small speci ed desired accuracy solutions included result 
function branch splits box dimension variable 
variables splitting chosen branch round robin heuristic fx set variables algorithm splits variables order reiterates process solution 
implementation box consistency precise description branch prune algorithm leaves open implementation procedure box narrow 
purpose section describe procedure implemented newton 
basic idea implementation di erent implementation procedure box narrow interval extension order exploit speci properties 
function set constraint set prune isempty return ig branch return endif return endif branch prune algorithm procedures section box narrow ne box narrow de box narrow te 
addition convenient de ne terms projection constraints terms interval projection constraints 
rest section organized follows 
start describing basic tool implementations describe various narrowing operators discuss prove existence solution conclude implementation issues 
extreme zeros interval function box consistency reduced subproblems informally speaking consist shrinking left resp 
right interval leftmost resp 
rightmost zero univariate interval function univariate interval function extension real function univariate case traditional interval extension multivariate case obtained interval extension substituting variables say intervals 
addition disposal function derivative interval extension derivative univariate case interval extension partial derivative wrt variables replaced intervals 
subproblems computed variation univariate interval newton method 
method uses property pruning search space zero lies center center dicult modifying algorithm accommodate change 
function right return left left return hi split return return endif left narrowing function precisely algorithm uses depicts simple function shrink leftmost zero function de ned similarly 
uses function split interval returns intervals left right 
algorithm rst applies pruning procedure 
terminates left zero interval contain zero 
interval split subintervals 
leftmost interval explored rst 
contain zero rightmost interval explored 
worthwhile mentioning reduction right bound part result function meet speci cation case 
function responsible nding rightmost zero 
box consistency natural interval extension position de ne narrowing operator natural interval extension 
basic idea simple 
constraint hf ii consists interval extension replacing variables interval obtain univariate function 
leftmost rightmost zeros computed produce result 
de nition narrowing operator natural interval extension narrowing operator natural interval extension de ned follows box narrow ne hf ii hi hi example constraint function de nition de ned follows box consistency natural extension distributed extension applied function di erentiable 
suces omit application operator functions 
box consistency distributed interval extension turn narrowing operator distributed interval extension 
box consistency distributed interval extension enforced univariate interval function searching extreme zeros 
function distributed form possible better idea 
key insight exactly univariate real functions de ned follows left right note box consistency enforced searching leftmost rightmost zeros interval extensions say interval extensions say derivatives course nd extreme zeros 
key advantage distributed interval extension easy de ne function constructively 
form np function de ned low low low left right function de ned high high high right left example consider function assume range 
distributed interval extension function obtained projecting distributed interval extension variable corresponding functions natural interval extensions course narrowing operator obtained interval newton method functions 
care applied obviously di erentiable 
method ecient applying interval newton method interval function intervals replaced numbers increasing precision newton operator narrowing operator 
de nition narrowing operator distributed interval extension hf ii projection constraint functions left right left right assuming hi empty narrowing operator distributed interval extension de ned follows box narrow de hf ii hi hi left left right right 
taylor interval extension conclude presenting narrowing operator taylor interval extension 
box consistency taylor interval extension enforced interval function hi applying simple implementation newton operator omitted 
possible better noticing constraint form mn center contains single variable isolated compute directly 
de nition narrowing operator taylor interval extension narrowing operator taylor interval extension de ned follows box narrow te hf ii hi hi center 
existence solution brie describe newton proves existence solutions 
special ort devoted topic techniques certainly improved various ways 
ff conditioned system equations variables fx hi box de ne intervals follows center 
hi hi exists unique zero hi proof result credit moore nickel 
note intervals computed box consistency taylor interval extension 
implementation issues review implementation issues arise programming algorithm 
priorities pruning algorithm important eciency reasons priority queue ensure projections distributed interval extension selected projections natural interval extension 
newton enforce box consistency distributed version believed lose precision expression raised power 
precision practice sucient return intervals widths desired accuracy returning intervals form 
easy modify branch operation split intervals widths required accuracy 
system allows users specify accuracy 
improvement factor box consistency take time remove small parts intervals 
cases probably cost ective branch 
easy modify algorithm avoid problem making sure narrowing operators update intervals signi cant reduction taken place 
notion signi cant reduction may problem dependent system lets users specify improvement factor necessary update interval projection 
automatic di erentiation mentioned algorithm takes simple approach obtain partial derivatives ort spent factoring common expressions reduce dependency problem interval arithmetic 
main reason comes fact automatic di erentiation evaluate derivatives functions 
choice may reconsidered version system 
inequalities straightforward generalize algorithms inequalities 
general suces test inequality satis ed points interval 
problem reduces nding leftmost rightmost zeros 
experimental results section reports experimental results newton variety standard benchmarks 
benchmarks taken papers numerical analysis interval analysis continuation methods 
compare newton traditional interval method hansen operator range testing branching 
method uses implementation technology newton denoted hrb 
compare newton state art continuation method denoted cont 
note results section obtained running newton sun sparc workstation obtain solutions 
addition nal intervals widths smaller width interval methods sophisticated hrb sophistication aims speeding computation near solution 
main contribution completely orthogonal aims speeding computation far solution comparing hrb meaningful 
benchmarks range newton hrb cont mor cosnard mor cosnard mor cosnard mor cosnard kin kin eco eco eco eco eco eco combustion chemistry neuro neuro table summary experimental results newton uses improvement factor 
results summarized table 
benchmark give number variables total degree system initial range variables results method seconds 
note times continuation method dec 
space column means result available method 
question mark means method terminate reasonable time hour 
rest section describes benchmark results detail 
benchmark report cpu times seconds growth cpu time number branch operations branching number various extensions na ne na ee na te total number na tot number function evaluations including evaluation derivatives counted normal function evaluations extensions fe ne fe ee fe te total number function evaluations fe tot 
indicate number pr con algorithm prove existence solutions resulting intervals proof 
banded functions traditional benchmark interval techniques instance 
consists nding zeros functions cpu time growth branching na ne na ee na te na tot fe ne fe ee fe te fe tot pr con proof table newton banded functions initial intervals cpu time growth branching pr con proof table newton banded functions initial intervals fj max min interesting features benchmark easy scale arbitrary dimension provides basis compare various methods 
table reports results algorithm various sizes assuming initial intervals 
results indicate newton solves problem constraint propagation branching needed 
addition growth computation times low indicates newton essentially linear solve large instances problem 
newton proves existence solution nal intervals 
knowledge algorithm functionalities 
table shows results initial intervals 
indicate cpu time increases slightly problem initial intervals substantially larger 
interesting note substantial pruning obtained natural distributed extensions 
maximal box consistency extensions produces intervals cpu time growth branching na ne na te na tot fe ne fe te fe tot fe grow pr con proof table newton mor cosnard nonlinear integral equation initial intervals widths lower note hansen operator produce pruning initially returns initial intervals form 
indicates box consistency natural distributed interval extensions particularly ective far solution box consistency taylor extension hansen operator ective near solution 
interesting stress importance box consistency natural extension example reduce growth factor 
algorithm takes seconds newton distributed interval extension loses precision due dependency problem 
interesting compare newton traditional interval methods 
hrb takes seconds branchings seconds branchings return hour 
discretization nonlinear integral equation example comes standard benchmark nonlinear equation solving consists nding root functions xm de ned jh 
functions come discretization nonlinear integral equation giving constraint system denser sparse constraint system banded functions 
variables initial domains computation results table 
interesting note newton completely deterministic problem branching 
newton probably cubic number variables problem 
important point critical role box consistency natural extension cpu time growth branching pr con proof table newton mor cosnard nonlinear integral equation initial intervals cpu time 
branching 
fe tot 
pr con 
proof 
table hrb algorithm mor cosnard nonlinear integral equation initial intervals solve problem eciently 
newton natural extension deterministic slow exponentially box consistency distributed extension loses precision due dependency problem multiple occurrences variable taylor interval extension helpful initially 
observe box consistency natural extension helpful far solution box consistency taylor extension useful terminate search quickly 
table gives result initial intervals size shows algorithm continues perform case 
table gives results hrb algorithm problem 
newton outperforms hrb method substantially 
interval arithmetic benchmarks section considers standard benchmarks interval arithmetic papers 
benchmark set equations initial intervals 
benchmark set equations initial intervals 
benchmark set equations initial intervals 
benchmark set equations initial intervals 
number solutions multiple 
benchmark set equations cpu time branching na ee na te na tot fe ee fe te fe tot pr con proof table newton traditional interval arithmetic benchmarks cpu time branching fe tot pr con proof table hrb traditional interval arithmetic benchmarks initial intervals 
newton solves problems solution branching solves problem having solutions branchings 
note box consistency distributed extension solves benchmark 
results con rm observation various extensions useful 
closely related results observed benchmarks see related section detailed comparison algorithm general times faster assuming similar machines branching 
table describes results traditional interval arithmetic method 
importance box consistency distributed extension easily seen results 
note newton interval methods prove existence solution nal intervals problems 
interesting note problem solved dramatically eciently simply introducing intermediary variables times dropped seconds 
kinematics applications describe performance newton kinematics examples 
application kin comes robotics describes inverse kinematics elbow manipulator 
consists table coecients inverse kinematics example 
sparse system variables set equations follows second benchmark denoted kin describes inverse position problem revolute joint problem mechanics 
equations describe denser constraint system follows coecients ki table 
examples initial intervals 
results newton benchmarks table 
newton fast rst benchmark branch obtain solutions 
algorithm branches reported gure branches really comparable due nature algorithm times slower comparable machines 
aware results continuation methods problem 
newton slower second application takes minutes 
continuation method described requires seconds dec 
method exploits fact newton polytopes equations 
note hrb requires seconds examples 
note kin kin cpu time branching na ee na te na tot fe ee fe te fe tot pr con proof table newton kinematics benchmarks cpu time growth branching na ee na te na tot fe ee fe te fe tot pr con proof table newton economics modelling problem initial intervals newton prove existence solutions nal intervals problems computer representation uses intermediate variables improve eciently slightly rst problem 
economics modelling application example taken 
dicult economic modelling problem scaled arbitrary dimensions 
dimension problem stated system constants chosen random 
table reports results various values initial interval 
interesting compare results continuation methods 
reports cpu time growth branching na ee na te na tot fe ee fe te fe tot pr con proof table newton economics modelling problem initial intervals times dec second seconds seconds seconds 
newton substantially faster problem continuation method takes seconds 
importantly growth factor lower newton 
continuation method going newton 
table gives results initial intervals 
interesting note computation times increase factor growth factor independent initial intervals 
note newton establish existence solutions problems 
worthwhile stating results obtained computer representation eliminated problem dimension combustion application problem morgan book represents combustion problem problem described sparse systems equations typical chemical equilibrium systems 
table describes results newton initial intervals 
newton behaves example continuation method takes seconds 
note substantial increase size initial intervals induces slowdown newton 
note newton prove existence solutions formulation variable eliminated 
cpu time branching na ee na te na tot fe ee fe te fe tot pr con proof table newton combustion problem 
cpu time branching na ee na te na tot fe ee fe te fe tot pr con proof table newton problem initial intervals chemical equilibrium application problem originates describes chemical equilibrium system 
set equations follows positive 
results depicted table initial interval 
indicate newton particularly ective problem takes seconds proves existence solution nal intervals 
note continuation method takes seconds problem 
cpu time growth branching na ee na te na tot fe ee fe te fe tot pr con proof table newton neurophysiology problem 
neurophysiology application conclude experimental section showing example illustrating limitations newton 
application neurophysiology consists system equations initial intervals variables constants chosen random 
continuation method solves problem seconds 
results newton depicted table various initial intervals 
newton fast initial intervals small 
unfortunately running time algorithm increases linearly size initial intervals showing limitation method example 
related discussion research described originated attempt improve eciency constraint logic programming languages intervals prolog clp 
constraint logic programming languages constraint solving basic operation simple generalization arc consistency described previously gg approximation enforced simple constraints complex constraints decomposed terms simple constraints 
mentioned earlier approach ective main goal design new approximations arc consistency existing interval methods 
main problem diculty characterizing pruning newton operator declarative way order introduce nicely programming languages box consistency emerged attempt generalize operator sure bounds interval locally consistent 
subsequent research realize box consistency independent newton operator enforced functions continuous di erentiable 
addition value applying box consistency extensions clear 
hand box consistency taylor extension generalizes interval methods gauss seidel iterations enables capture nicely hansen operator 
hand natural distributed extensions really orthogonal pruning obtained taylor expansion producing particularly ective algorithm 
worth pointing newton spends time natural distributed extensions 
applications taylor interval extension critical terminate search quickly avoid generating small intervals solutions 
general observation box consistency natural distributed extensions ective far solution box consistency taylor expansion ective near solution 
worth mentioning interval community spent ort design additional techniques speed computation near solution considered techniques improve pruning far solution 
interesting note idea approximations arc consistency independently hong stahl exposed research constraint logic programming 
projections quite di erent 
key idea set boxes projections split box isolating zeros projection 
gives algorithm di erent nature easily characterized branch prune algorithm constraints branch 
approach ective practice projections may generate may need pruned away implying redundant 
approach branching pruning takes place generates strictly necessary progress 
interesting report benchmarks tested projection contained zeros 
indicate searching zeros may worthwhile cases box consistency may right tradeo 
note approach implicitly distributed extension natural extension important applications 
note current implementation novel techniques interval community advanced splitting techniques 
course possible include easily recursive structure implementations essentially similar 
integrating results obviously bene techniques complementary 
research described provides uniform framework integrate techniques constraint logic programming understand importance various pruning operators relationships suggest research directions 
instance higher notions consistency path consistency may worth investigating applications 
idea interval function real functions described 
branch prune algorithm nd isolated solutions system polynomial constraints reals 
solution isolated algorithm return boxes contain solutions 
algorithm single concept box consistency approximation arc consistency notion known arti cial intelligence 
instantiated produce hansen operator narrowing operators ective computation far solution 
algorithm mathematical foundations simple 
algorithm shown behave variety benchmarks kinematics mechanics chemistry combustion economics 
outperforms interval methods know compares continuation methods benchmarks 
addition problems banded function mor discretization nonlinear integral equation solved variables 
limitations method sensitivity size initial intervals problems identi ed 
acknowledgments referees help making accessible wider audience pointing related works careful comments manuscript 
benhamou colmerauer le charlier interesting discussions topic 
pascal van hentenryck supported part oce naval research onr national science foundation numbers ccr nsf national young investigator award matching funds hewlett packard 
deepak kapur supported part united state air force oce scienti research afosr 

interval computations 
academic press new york ny 
benhamou mcallester van hentenryck 
clp intervals revisited 
proceedings international symposium logic programming ilps pages ithaca ny november 
benhamou older 
applying interval arithmetic real integer boolean constraints 
journal logic programming 
appear 
hammer 
numerical toolbox veri ed computing basic numerical problems theory algorithms pascal programs 
springerverlag heidelberg 
hansen 
global optimization interval analysis 
marcel dekker new york 
hansen 
global optimization interval analysis multi dimensional case 
numer 
math 
hansen greenberg 
interval newton method 
appl 
math 
comput 
hansen sengupta 
bounding solutions systems equations interval analysis 
bit 
hansen smith 
interval arithmetic matrix computation part ii 
siam journal numerical analysis 
hanson 
interval arithmetic closed arithmetic system computer 
jet propulsion laboratory report 
hong stahl 
safe starting regions fixed points tightening 
computing 
kahan 
complete interval arithmetic 
lecture notes summer course university michigan 

preconditioners interval gauss seidel method 
siam journal numerical analysis 

review preconditioners interval gauss seidel method 
interval computations 
krawczyk 
newton algorithmen zur von mit 
computing 
mackworth 
consistency networks relations 
arti cial intelligence 
morgan 
chemical equilibrium systems numerical test problems 
acm transactions mathematical software 
montanari 
networks constraints fundamental properties applications picture processing 
information science 
moore 
interval analysis 
prentice hall englewood cli nj 
moore 
methods applications interval analysis 
siam publ 
moore jones 
safe starting regions iterative methods 
siam journal numerical analysis 
cosnard 
numerical solution nonlinear equations 
acm transactions mathematical software 
morgan 
computing solutions polynomial systems homotopy continuation 
appl 
math 
comput 
morgan 
solving polynomial systems continuation scienti engineering problems 
prentice hall englewood cli nj 
neumaier 
interval methods systems equations 
phi series computer science 
cambridge university press cambridge 
older 
extending prolog constraint arithmetics real intervals 
canadian conference computer electrical engineering ottawa 
rall 
automatic di erentiation techniques applications 
springer lectures notes computer science springer verlag new york 

new computer methods global optimization 
ellis horwood limited chichester 
rump 
veri cation methods dense sparse systems equations 

ed 
editor topics validated computations pages 
elsevier 
siskind mcallester 
nondeterministic lisp substrate constraint logic programming 
aaai pages 
van hentenryck 
logic language combinatorial optimization 
annals operations research 
van hentenryck 
constraint satisfaction logic programming 
logic programming series mit press cambridge mass 
van hentenryck mcallester kapur 
interval methods revisited 
technical report mit ai lab mit 
van hentenryck saraswat deville 
design implementation evaluation constraint language cc fd 
constraint programming basics trends 
springer verlag 

homotopies exploiting newton polytopes solving sparse polynomial systems 
siam journal numerical analysis 

