planning nondeterministic domains partial observability symbolic model checking bertoli alessandro cimatti marco roveri paolo traverso itc irst sommarive povo trento italy cimatti roveri irst itc dsi university milano milano italy planning partial observability significant challenging planning problems 
shown hard theoretically experimentally 
novel approach problem planning partial observability non deterministic domains 
propose algorithm searches possibly cyclic graph induced domain 
algorithm generates conditional plans guaranteed achieve goal despite uncertainty initial condition uncertain effects actions partial observability domain 
implement algorithm means bdd symbolic model checking techniques order tackle practice exponential blow search space 
show experimentally approach practical evaluating planner set problems taken literature comparing state art planners partially observable domains 
research planning focusing problem planning nondeterministic domains incomplete information see instance pryor collins kabanza weld cimatti rintanen bonet geffner search mechanism structure generated plans depend information assumed available run time 
approaches kabanza cimatti instance construct conditional plans assumption full observability state world completely observed run time 
spectrum conformant planning smith weld bonet geffner cimatti roveri bertoli constructs sequential plans guaranteed solve problem assuming information available run time 
tackle problem middle spectrum planning partial observability general case part domain information available run time 
approaches proposed past pryor collins weld bonet geffner problem significantly difficult limit cases fully observable conformant planning littman compared planning full observability planning partial observability deal uncertainty state actions executed 
search space longer set states domain powerset space belief states bonet geffner compared conformant planning structure plan longer sequential tree shaped order represent conditional course actions 
propose general efficient approach conditional planning partial observability 
contributions 
formal model partially observable planning domains represent observations resulting execution sensing actions pryor collins weld automatic sensing depends current state world tovey koenig second propose novel planning algorithm searches possibly cyclic graph induced domain 
algorithm generates conditional acyclic plans guaranteed achieve goal despite uncertainty initial condition uncertain effects actions 
third implement approach means bdd symbolic model checking techniques extending planning model checking paradigm related system mbp cimatti experimentally evaluate approach analyzing problems distributions available planners partially observable domains problems including maze domains proposed koenig tovey koenig mbp outperforms state art planners partially observable domains sgp weld gpt bonet geffner organized follows 
provide formal definition partially observable planning domains conditional planning 
planning algorithm implementation mbp planner 
report experimental evaluation discuss related draw 
partially observable domains consider nondeterministic domains hypothesis partial observability limited amount information acquired run time 

goal simple robot navigation domain definition partially observable planning domain tuple hp finite set propositions pow set states finite set actions 
transition relation 
finite set observation variables pow observation relation 
intuitively state collection propositions holding 
transition relation describes effects action execution 
action applicable state iff exists state 
set contains observation variables value observed run time execution 
loss generality assume observation variables boolean 
denote observation variables 
call written observation relation action executed resulting state specifies values assumed run time observation variable state action observation variable may convey information specified stating hold true false values possible 
case say undefined holds hold value state true 
dual holds false value 
cases say defined observation variable associated value holds 
consider example simple robot navigation domain containing room extra wall 
propositions domain nw ne sw se corresponding positions room 
exactly holds states robot move directions deterministic actions provided wall direction motion 
action applicable 
time tick information walls proximity direction available robot observation variables walls 
instance action domain nw nw 
case observation variable defined state execution action domain 
call action independent observation variables provide useful information automatically independently previous execution action 
require action independent observation variable satisfy condition write 
different formulation domain action required order acquire value corresponding variable 
case defined state action undefined 
observation variables modeled action dependent 
action independent observation variables model automatic sensing tovey koenig information acquired usual embedded controllers signal environment sampled acquired fixed rate latched internally available 
action dependent observations observation approaches planning weld value variable observed explicit effect action 
conditional plans partially observable domains plans need branch conditions value observable variables 
plan domain empty plan action concatenation plans conditional plan read example plan moves robot uncertain initial condition nw sw state sw 
depicts corresponding execution 
action executed 
notice initial condition observation variables value nw sw states indistinguishable pointless observe 
robot moves east guaranteed ne se 
plan branches value 
allows planner distinguish state ne se robot ne moves south 
point robot guaranteed se move west 
plan guaranteed reach sw initial states actions initial state nw actions initial state sw 
define fs set states true fs set states false 
undefined state 
case action independent observations fs 
fs partial observability plans sets states elements distinguished belief states 
say action applicable non empty belief state bs iff applicable states bs 
define plan execution case action independent observations 
definition bs execution plan set states defined follows 
exec 
exec bs fs jr applicable bs 
exec bs applicable bs 
exec bs bs 
exec bs exec exec bs 
exec bs exec bs exec bs bs exec bs bs 
exec bs 
exec bs 
say plan applicable bs iff exec bs 
plan applicable execution set states reached execution plan 
conditional plans collapse single set execution branches item 
conditions guarantee branches executable 
definition extended case action dependent observations replacing 
action executed plan 
notice starting time action dependent observation variables undefined action previously executed 
lack space omit explicit formal definition 
formalize notion planning problem partial observability follows 
definition planning problem solution planning problem defined tuple hi di planning domain set initial states set goal states 
plan solution problem hi di iff exec planning algorithm planning partial observability search space seen graph belief states recursively constructed initial belief state expanding encountered belief state possible combination applicable actions observations 
consider example swg 
instance belief state expands node representing effect action 
actions applicable observation conveys information 
belief state expands node representing effect action resulting belief state effect observing resulting belief states 
order find solution possible find solution solution 
non applicable actions discarded 
plan partial observability exploring andor search space described 
algorithm basically postorder traversal search space proceeding forward initial belief state ruling cyclic plans 
state search stored associating mark encountered belief state 
possible marks process ing solved visited associated belief state bs procedure res ili nil res res res rest return res procedure res success nil res res rest return res procedure bs bs return bs bs return success bs bs bs return success bs return bs res bs res bs bs res bs return res bs bs return success planning algorithm distinguish situations 
bs previously encountered 
solved plan bs 
processing bs processed currently stack 
visited bs previously processed search failed currently bs stack 
belief state marked processing search bumped cycle shall fail 
visited bs may deserve expansion marked processing 
primitives recognizing setting mark belief state 
order avoid visiting portions search space store previous failures associating belief state set belief states marked pro cessing blocked search cycle detection 
store hypothesis search attempt fail primitive 
retrying process visited belief state bs data base failures accessed check previous failures applies current situation proc 
vis 
failures solved plan gos goe algorithm solves example sociated bs belief states contained currently processed 
case bs processed retrieved failure returned 
planning algorithm 
algorithm built recursive subroutines returning success signal search completed successfully pair signal search failed belief states reason stack 
lack space plan construction steps carried case search success reported outlined case example 
processes node list nodes 
nodes repeatedly extracted input 
results processed constructs return value accumulating set failure reasons different searches 
success return value 
search proceeds success node completely explored case failure returned 
processes node trying find solution contained belief states 
selects promising belief state node uses input 
soon failed search detected failure reason pair propagated 
success received belief state success returned 
processes single belief state 
checks bs loop back case failure due bs constructed returned 
lines case success handled 
lines node encountered time checked goal 
lines ure called check bs pruned previous failure 
bs put stack line expanded constructs corresponding node 
provided input 
result failure bs removed stack 
failure stored disregarding bs primitive search started stack 
planner invoked 
depicts data structures built algorithm solving example problem 
step report belief states marked processing marked visited stored failures belief states marked solved associated plan 
failure introduced step means search started belief state failed loop back processing 
column associates plan belief state solved 
belief state subset associated empty plan 
concatenation action leads case similar 
conditional plan constructed observation variable associated node manipulated test plan branches plans associated successful belief states 
notice belief state processed step failure due loopback step 
storage previous failures speed search substantially nw possible enter different branch navigation domain lead solution 
planner integrated algorithm described mbp cimatti planner nondeterministic domains binary decision diagrams bdd bryant symbolic model checking techniques mcmillan mbp allows conditional planning full observability cimatti considering temporally extended goals pistore traverso extended mbp main directions 
developed bdd implementation observation relation second implemented search algorithm described previous section 
rely machinery bertoli conformant planning tackled deterministic search space belief states 
visited belief state represented unique bdd hashing structure efficiently implement marking mechanism described previous section 
expansion belief state bs primitive described logical terms implemented means bdd transformations 
apply symbolic expansion case conformant planning computes belief states corresponding execution bs possible actions 
generated belief states bs take account effect observations generating nodes form bs bs 
order dominate complexity application full combination observations apply automatic domainindependent simplifications 
analyze domain discover possible consider observation time losing completeness 
possible apply observations set wise bs consider corresponding splits applied resulting node bs 
bs 
bs bs 
general plans may produced observations needlessly carried branches useless actions precede observations 
special purpose procedure solution getting rid sources redundancy 
search driven simple selection heuristic orders node delaying expansion belief states observation effect 
medical mbp gpt sgp packages bt metal detection mbp gpt sgp cpu search time sec packages bt metal detection sniffing xray mbp gpt sgp room size empty room mbp gpt sgp size maze maze mbp gpt cpu search time sec rooms ring mbp gpt table experimental results experimental evaluation experimentally evaluated approach sgp weld gpt bonet geffner 
similar systems cassandra pryor collins outperformed sgp shown weld considered 
sgp graphplan 
produces acyclic conditional plans unable deal nondeterministic action effects uncertainty limited initial condition 
planning graph built initial state distinguished observation 
gpt models planning domains markov decision processes probability distributions produces policy associating actions belief states 
search repeated generation learning control trials starting randomly selected states initial belief state 
policy tends improve number trials grows 
gpt guarantee returned policies acyclic 
considered test domains 
ones distributions sgp turned trivial report results medical bt see weld description 
maze domains tovey koenig similar explanatory example certain goal position reached completely unknown initial position 
empty room problem basically maze internal walls 
ring domain cimatti roveri ring shaped navigation domain room window robot observe open close 
goal windows closed initial situation unknown 
consider domains gpt distribution 
meaningful probabilistic setting admit cyclic solutions domain 
experiments run pentium ii mhz mb memory running linux fixing memory limit mb timeout hour cpu specified results comparison depicted table 
plot refers problem class 
report logarithmic scale search time seconds 
performance sgp tends degrade quite rapidly 
instances bt packages reached time limit 
case empty room sgp unable solve version problem hours cpu time 
gpt report average performance runs increasing numbers trial runs 
order ensure fair comparison liked report performance gpt minimum number trials needed convergence 
unfortunately detecting gpt converged solution evident output 
necessary condition convergence appears existence successful trial possible initial state cardinality initial state called lower bound convergence 
reported results correspond increasing multiples computation time grows accordingly 
increases number trials probability gpt converging solution increases 
simpler problems medical bt gpt converges small number trial runs 
complex problems number initial states increases required number trials 
implies growth computational resources needed clear results 
maze tests parser unable deal problems larger 
ring domain gpt fails compute heuristic function time limit 
tried run heuristics exhausted available memory hours cpu time 
important point difficulty problem slows convergence due increasing possibility failed repeated trials certain initial states 
thick line bullets crossing results gpt indicates problem size gpt reached convergence 
instance empty room domain gpt find solution 
room size larger attempted runs 
similarly mazes size larger 
mbp tackles analyzed problems quite 
search belief space avoids explosion enumeration initial states symbolic data structures limits memory requirements 
produced plans reasonable length exception ring domain selection function effective combined depth search algorithm results extremely plans 
research needed tackle problem 
related novel approach conditional planning partial observability 
approach model observation encompasses automatic sensing tovey koenig action sensing cassandra weld bonet geffner see goldman boddy similar model observation 
planning algorithm exploration possibly cyclic graph induced domain 
different heuristic search algorithms ao assumption search graphs acyclic 
exhaustive style exploration algorithm decide problem admits acyclic solution plan guaranteed reach goal finite number steps 
algorithm efficiently implemented mbp planner means bdd symbolic model checking techniques 
show mbp outperforms sgp gpt planners 
interesting system qbfplan rintanen extends sat approach planning case nondeterministic domains 
planning problem reduced qbf satisfiability problem input efficient solver rintanen qbfplan relies symbolic representation approach limited plans bounded execution length 
search space significantly reduced providing branching structure plan input planner 
problem planning partial observability deeply investigated framework partially observable mdp see cassandra hansen zilberstein poupart boutilier 
gpt follows approach 
methods interleave planning execution koenig simmons genesereth nourbakhsh considered alternative orthogonal approaches problem planning line large state spaces 
methods guarantee find solution assumptions domain 
instance koenig simmons assumes safely domains cycles 
genesereth nourbakhsh describes line planning algorithm breadth search graph 
shows version algorithm interleaves planning execution efficient line version theoretically experimentally 
research objectives extension partially observable approach strong cyclic solutions cimatti temporally extended goals kabanza investigate heuristic search techniques extension case planning non deterministic noisy sensing 
bertoli bertoli roveri cimatti 
heuristic search symbolic model checking efficient conformant planning proc 
ijcai 
bonet geffner bonet geffner 
planning incomplete information heuristic search belief space 
proc 
aips 
bryant bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys 
cassandra cassandra kaelbling littman 
acting optimally partially observable stochastic domains 
proc 
aaai 
cimatti roveri cimatti roveri 
conformant planning symbolic model checking 
jair 
cimatti cimatti roveri traverso 
automatic obdd generation universal plans nondeterministic domains 
proc 
aaai 
genesereth nourbakhsh genesereth nourbakhsh 
time saving tips problem solving incomplete information 
proc 
aaai 
goldman boddy goldman boddy 
expressive planning explicit knowledge 
proc 
aips 
hansen zilberstein hansen zilberstein 
heuristic search cyclic graphs 
proc 
aaai 
kabanza kabanza st denis 
planning control rules reactive agents 
artificial intelligence 
koenig simmons koenig simmons 
solving robot navigation problems initial pose uncertainty real time heuristic search 
proc 
aips 
littman michael littman judy goldsmith martin mundhenk 
computational complexity probabilistic planning 
jair 
mcmillan mcmillan 
symbolic model checking 
kluwer academic publ 
pistore traverso pistore traverso 
planning model checking extended goals non deterministic domains 
proc 
ijcai 
poupart boutilier poupart boutilier 
belief state approximation pomdps 
proc 
sixteenth conference uncertainty artificial intelligence uai 
pryor collins pryor collins 
planning contingency decision approach 
jair 
rintanen rintanen 
constructing conditional plans theorem prover 
jair 
rintanen rintanen 
improvements evaluation quantified boolean formulae 
proc 
ijcai 
smith weld david smith daniel weld 
conformant graphplan 
proc 
aaai 
tovey koenig tovey koenig 
testbeds planning incomplete information 
proc 
aaai 
weld daniel weld corin anderson david smith 
extending graphplan handle uncertainty sensing actions 
proc 
aaai 
