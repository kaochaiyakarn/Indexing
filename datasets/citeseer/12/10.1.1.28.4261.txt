appears proceedings usenix annual technical conference usenix pragmatic nonblocking synchronization real time systems michael hermann dresden university technology department computer science drops os inf tu dresden de os inf tu dresden de drops pragmatic methodology designing nonblocking real time systems 
methodology uses combination lock free wait free synchronization techniques clearly states technique applied situation 
reports novel results various respects restrict usage lock free mechanisms cases widely available atomic compare swap operation suffices 
show brinch hansen monitors alias java synchronized methods implemented top mechanisms demonstrating versatility 
describe detail mechanisms full reimplementation popular microkernel interface 
kernel contrast original implementation bounds execution time operations 
report previous implementation mechanisms massalin pu single server approach resulting performance lead abandon known scheme 
microkernel implementation daily user level linux server running large variety applications 
system considered just academic prototype 
despite implementation compares favorably original highly optimized non real time assembly language implementation 
years nonblocking data structures caught attention real time systems community theoretical practical operating systems groups 
researchers devised new methods efficiently synchronizing interesting data structures nonblocking fashion 
conceived general methodologies transforming algorithm nonblocking results theoretical nature methodologies lead inefficient implementations 
section briefly discusses number works 
contrast boom know system implementations successfully exploit nonblocking synchronization 
operating systems aware exclusively nonblocking synchronization synthesis cache kernel :10.1.1.39.8065:10.1.1.25.5436
problems approach appears difficult apply modern cpu architectures efficient algorithms available lock free data structures require primitive atomically updating independent memory words word compare swap cas processors popular cpus provide instruction 
significantly synthesis cache kernel originate motorola architecture cas primitive 
pragmatic approach building nonblocking real time systems 
methodology works cas archi appears proceedings usenix annual technical conference usenix 
rely solely lock free synchronization implementing nonblocking data structures inconvenient slow architectures considered 
methodology allow locks ensures system wait free 
addition technique easy apply developer perspective looks programming mutual exclusion monitors 
describe application approach build real system methodology developed fiasco microkernel kernel drops real time operating system runs cpus 
kernel implementation microkernel interface sufficiently mature support software developed including drops servers linux 
evaluate effectiveness methodology nonblocking design examining fiasco microkernel real time properties synchronization overheads 
fiasco currently runs uniprocessors 
consequently concentrate single processor implementation details 
methodology lends multiprocessor system implementations point routes multiprocessor extensions 
discuss number nonblocking synchronization mechanisms 
synthesis massalin pu introduced concept single server thread variant serializer pattern described hauser associates serializes complex object updates implemented nonblocking fashion :10.1.1.39.8065:10.1.1.39.8065
simple modification single server scheme truly nonblocking useful real time systems 
furthermore show mechanism semantically equivalent locking scheme 
particular real time version replaced locking scheme priority inheritance easier implement better performance 
linux port linux kernel version runs user program top binary compatible original linux 
see contribution leading interest nonblocking synchronization practicable interim result scientific community verify 
source code fiasco microkernel freely available allowing researchers study techniques experiment 
organized follows section consider related nonblocking synchronization 
section develop methodology designing wait free real time systems 
section shows applied methodology development fiasco microkernel 
section performance values fiasco microkernel evaluate kernel real time properties 
section derive conditions applicability methodology development multithreaded user mode real time programs 
conclude section summary suggestions 
nonblocking synchronization related lock free wait free synchronization overview 
nonblocking synchronization strategies important properties provide full allow multi cpu concurrency 
second priority inversion avoided lower priority threads block higher priority threads blocking 
characteristics nonblocking synchronization interesting real time systems 
concepts discussed section new way systems implement variants optimistic concurrency control priority inheritance 
describe completeness 
nonblocking synchronization comes flavors wait free lock free synchronization 
wait free synchronization thought locking helping replacing blocking 
appears proceedings usenix annual technical conference usenix higher priority thread critical section detects interference lower priority thread helps finish critical section 
helping lends priority ensure activities interfere 
finished executes critical section 
wait free object implementations satisfy stronger form block freedom lock free synchronization discussed paragraph guarantee freedom starvation 
authors point wait free synchronization special case lock free synchronization 
wait free synchronization implemented locks albeit nonblocking helping scheme 
example locking scheme priority inheritance considered wait free synchronization scheme long critical sections block 
lock free synchronization works completely locks 
critical code sections designed prepare results line try commit pool shared data atomic memory update instruction compare swap cas 
compare part cas detect conflicts threads simultaneously try update data fails operation restarted 
needed retries delayed exponential backoff avoid retry contention 
synchronization mechanism nice properties locks avoids deadlocks provides better insulation crashed threads resulting higher robustness fault tolerance operations hold locks critical data automatically multiprocessing safe 
preconditions lock free synchronization primitives atomic memory modifications available data stored type stable memory management 
digress memory management see discussion operating systems related issues rest subsection discusses atomic memory modification :10.1.1.25.5436:10.1.1.25.5436
backoff needed single cpu systems 
atomic memory update 
cpus kinds atomic memory modification operations test set instruction tas cas instruction 
newer models intel pentium newer double size word bytes compare swap instruction 
cpus support atomically updating independent memory words word swap cas 
number data structures implemented locks directly top cas overhead multi word cas counters widths bytes stacks fifo queues 
valois introduced lock free single linked list design supporting insertions deletions list data structures 
designs just cas 
greenwald criticized quite complex difficult get right computationally expensive 
algorithms lock free data structure synchronization developed assume availability stronger atomic primitive cas 
data structures include general single linked double linked lists 
number techniques exist implementing lock free wait free general multi word compare swap top cas cas enabling nonblocking synchronization arbitrarily complex data structures 
techniques considerable overhead space runtime complexity especially compared common lock operations making interesting kernel design 
common technique implement atomic multi word updates uniprocessors prevent preemption update 
usually done disabling interrupt delivery cpu 
disadvantage method course multiprocessors 
bershad proposed implement cas software implementation lock known appears proceedings usenix annual technical conference usenix operating system 
preempting thread operating system consults lock set rolls back thread releases lock 
greenwald cheriton discuss generalization technique implement cas mw cas :10.1.1.25.5436
method disadvantage incurring overhead maintaining lock 
multiprocessors lock set reading shared data structures readers see intermediate states 
technique facilitate complex object updates serializer single server approach 
uses single server thread serialize operations 
threads enqueue messages server thread queue request execution operations behalf 
server thread runs high priority block requesting thread executed operation directly 
nonblocking synchronization operating systems know operating system projects explored nonblocking synchronization kernel cache kernel synthesis :10.1.1.39.8065:10.1.1.25.5436
systems run architectures cas primitive motorola cpu authors cas sufficient synchronize accesses kernel data structures 
authors report lock free implementation viable alternative operating system kernels 
massalin pu originally implemented single server mechanism lock free synthesis kernel need true greenwald cheriton cache kernel :10.1.1.39.8065:10.1.1.25.5436
revisit single server approach section 
greenwald cheriton report powerful synergy nonblocking synchronization structuring techniques operating systems :10.1.1.25.5436
assert nonblocking synchronization reduce complexity improves performance reliability modularity software especially lot communication system 
warn results may applicable cpu support cas primitive 
investigate nonblocking systems implemented environment 
nonblocking synchronization vs realtime systems nonblocking object implementations interest real time systems provide avoid priority inversion 
known wait free method implementations bounded time fixed number threads help retry loop immediately apparent applies lock free synchronization 
surface lock free methods ones section look dangerous potentially unlimited number retries 
fortunately anderson colleagues determined upper bounds number retries occur priority systems 
derived scheduling conditions hard real time periodic tasks share lock free objects reported lock free shared objects incur overhead object implementations wait free lock synchronization schemes 
design methodology realtime systems design goals main design goal allow realtime properties systems 
specifically wanted higher priority threads able preempt system including kernel virtually time soon ready run allowing schedulability event handlers appears proceedings usenix annual technical conference usenix 
true sets threads depend common resources independent thread sets 
secondary goals short critical sections working global state induce essentially overhead synchronization synchronization scheme single processor multi processor architectures 
design applicable compatible uniprocessors implementable cas 
design guidelines design goal rules synchronization scheme suffers priority inversion 
looking nonblocking synchronization schemes lock free wait free synchronization 
secondary goals strongly favor lock free synchronization schemes locks induce overhead multi cpu case cpus compete locks 
generally disallow schemes frequently global state way 
particular design methodology comprises guidelines classify system objects follows local state consists objects related threads threads cooperate job assignment 
global state consists objects shared unrelated threads 
frequently accessed global state implemented data structures easily accessed lock free synchronization 
section mentioned number data structures synchronized fashion cpus cas counters stacks fifo queues 
point incompatibilities design methodology multiprocessor architectures occur 
cpu lacking better single word cas suggest global data double linked lists implemented lock free fashion software implementation 
kernel atomic update protected disabling interrupts discussed section 
course disabling interrupts help multiprocessors suggest spin locks protect short critical sections 
discuss software user mode programs section 
global state relevant real time computing local data accessed wait free synchronization 
propose wait free locking mechanism characterized locking helping explained detail section 
kind synchronization overhead 
avoided objects independent threads access 
synchronization scheme waiting events inside critical sections allowed 
restriction ensures wait freedom 
show section restriction limit synchronization mechanism power 
designer decided object synchronized scheme methodology straightforward 
approximates ease programming mutual exclusion monitors providing desired real time properties 
wait free locking helping suggest wait free locking helping scheme 
object synchronized fashion protected lock wait stack correctly helper stack 
lock knows thread holds entering critical section 
thread wants acquire lock different thread puts top lock helper stack 
appears proceedings usenix annual technical conference usenix blocking waiting finish helps passing cpu effectively lending priority pushing critical section 
time reactivated previous time slice consumed reason checks owns lock continues help 
finishes critical section find helping thread top lock stack case thread passes lock cpu thread 
stack fifo wait queue important advantage threads scheduled hard priorities follows thread highest priority lands top helper stack 
way lower priority thread get front higher priority thread high priority thread go sleep enqueuing helper stack preempted lower priority thread remains top stack 
property ensures highest priority threads get critical sections 
locking mechanism implementation priority inheritance 
course execution critical sections may preempted higher priority threads ready run 
ensure wait freedom threads executing critical section sleep wait 
threads leave critical sections entered go sleep 
requirement raises question deal producer consumer situations race conditions 
number textbook solutions problem 
describe solution section 
long critical sections nest easy see construction implement generally true uniprocessors 
multiprocessors priority ordering helper list ensured different data structure priority queue migrating helper cpu lock owner force cpu priority execution order 
subtle arguments designs scope 
wait notify monitors descendant java synchronized methods :10.1.1.46.7240
monitor protected object method called acquire object lock 
wait operation implemented unlock sleep lock sequence 
shows possible monitor implementation uses simple lock free semaphore shown 
synchronization difficult object locked time 
discuss scenarios nested monitor calls nested critical sections atomic acquisition multiple locks 
long monitor methods wait events locking helping works nested monitor calls way non nested monitors 
nested method wants wait event freeing nested monitor help outer monitor locked sleep illegal scheme 
nested monitor calls sleep 
ways deal restriction construct system second level monitors monitors sleep locking coarse grained objects locked going sleep fact protected single monitor 
fiasco microkernel chosen option fact constructed kernel critical sections need sleep 
discuss synchronization fiasco microkernel detail section 
different situation arises locks critical section needs known critical section starts execution 
case wait operation release locks sleeping reacquire 
large variety monitors differing semantics shown equivalent expressive power 
wait notify monitors classified priority nonblocking monitors mesa 
appears proceedings usenix annual technical conference usenix class binary semaphore thread list lock free thread list int count public void enqueue current int old old count 
cas count old old old semaphore safely dequeue dequeue current sleep thread sem wakeup dequeued void int old old count 
cas count old old old thread dequeue wakeup thread sem wakeup binary semaphore pseudocode simple lock free binary semaphore single cpu machines 
lock free list threads thread list queuing discipline example fifo queue priority queue sleep wakeup primitives 
class monitor helping lock lock public void enter lock lock locking helping void leave lock unlock void wait binary semaphore condition lock unlock condition lock lock locking helping void signal binary semaphore condition condition monitor pseudocode wait notify monitor helping lock 
simple textbook implementation uses nonblocking synchronization primitives 
semaphores condition variables need initialized 
signal operation wakes waiter semaphore queueing discipline 
restarted threads trying enter monitor helping lock helper stack guarantees thread highest priority enter monitor 
appears proceedings usenix annual technical conference usenix synchronization fiasco microkernel developed fiasco microkernel basis drops operating system project research project exploring various aspects hard soft real time systems multimedia applications standard pc hardware 
microkernel runs uniprocessor pcs implementation binary interface 
able run linux linux server running user level program binary compatible standard linux freely available os inf tu dresden de drops 
kernel closely follows design outlined section 
section report various data structures synchronized kernel detail design wait free locking mechanism 
kernel objects briefly describing objects fiasco microkernel implements 
philosophical discussion microkernel implement refer liedtke 
local state threads 
thread descriptors contain complete context thread execution kernel stack areas saving cpu registers address space thread attributes ipc state infrastructure locking section 
address spaces 
exists address space task 
address spaces implement cpu level page tables 
contain task number number task right delete address space 
hardware interrupt descriptors 
hardware interrupt attached user level han thread 
kernel sends thread message time interrupt occurs 
mapping trees 
fiasco microkernel allows transferring persistent virtual page mappings ipc tasks 
mapping receiving task dependent sender mapping flushed sender address space mappings depending recursively flushed 
mapping trees objects keep track dependencies 
mapping tree physical page frame 
global state list ready list 
double linked ring lists contain threads currently known system ready run respectively 
lists idle thread serves start list 
array address space 
array indexed address space number 
contains existing address space address spaces array contains address space index referring task right create address space 
fiasco microkernel uses array create rights management keep track look created tasks 
array interrupt descriptor 
array fiasco microkernel stores assignments user level handler threads hardware interrupts 
page allocator 
allocator manages kernel private pool page frames 
mapping tree allocator 
allocator manages mapping trees 
mapping flushed transferred ipc corresponding mapping tree grows shrinks 
certain thresholds exceeded new larger smaller mapping tree needs allocated behavior artifact fiasco microkernel implementation mapping trees 
appears proceedings usenix annual technical conference usenix synchronization kernel objects design methodology section global state synchronized lock free synchronization local state overhead wait free locking acceptable 
primarily closely adhered guidelines 
requirements somewhat stronger performance critical allowed small relaxation affect real time properties 
local state 
threads interesting objects synchronized 
accomplish synchronization wait free locks described section 
ipc performance reasons lock thread state 
defined parts thread data protection lock lock free synchronization accessing parts 
particular data members thread descriptors implemented lock free thread state word contains ready run flag condition flags waiting events explained section sender queue double linked list threads want send thread message 
state word synchronized cas 
double linked sender list simulated disables interrupts memory modification 
fiasco microkernel protects mapping trees bulk thread data wait free locks 
address spaces require little synchronization 
kernel synchronize enters new second level page table level page table 
deletion synchronized thread carry operation thread corresponding task deletes deleted 
synchronize accesses address spaces task threads access task address space result concurrent updates mapping virtual address defined 
mappings prospective port kernel smp machines plan protect spin lock receiver 
managed concurrency protected mapping trees page tables mappings get lost possible states concurrent update consistent 
synchronize hardware interrupt descriptors assigned array global state thread accesses 
global state 
arrays address spaces hardware interrupt descriptors easily synchronized simple cas 
double linked ready lists resort simulate disabling interrupts short time 
lists sender list mentioned previously objects revert ugly inevitable synchronization method 
believe unnecessary implement kernel allocators pages mapping trees lock free synchronization wait free locking local state 
allowed relaxation guidelines instances reason threads real time requirements allocate memory page tables shrink grow mapping trees initialized 
sure allocate memory resources need initialization time 
real time threads compete access shared resources overhead accessing irrelevant 
assertion untrue revisit design decision 
wait free locking fiasco microkernel implementation wait free locking helping fiasco microkernel similar mechanism section 
smp port problem ready list cpu interrupt disabling 
accesses list seldom synchronized spin lock 
appears proceedings usenix annual technical conference usenix fiasco microkernel extends basic wait free locking mechanism respects 
thread locks fiasco microkernel furnished switch hint 
hint overrides system standard policy scheduling threads locking thread locked thread frees lock 
usually runnable thread highest priority wins fiasco microkernel ipc system call semantics dictate receiver gets cpu 
hint flag take values lock freed switch previously locked thread higher priority 
achieve ipc semantics sender locks receiver wakes sets hint value releasing lock 
second locking objects including threads threads need maintain count objects locked 
count checked thread delete operation avoid deleting threads hold locks 
thread locked usually scheduled 
scheduler thread activates locked thread activated 
exception explicit context switch thread 
operation uses characteristic push tobe deleted threads critical sections 
time slice donation scheme introduced section requires nested critical sections sleep 
implementation fiasco microkernel find limitation restricting 
completely avoided nesting critical sections want sleep complex ipc operations need lock interacting threads 
thread needs manipulate thread usually locks 
kernel code running context needs ensure locked operations third thread change state needed locked operation practice easy achieve locked operations check change locked thread allowed 
locked thread correct state locked opera tion aborted 
threads explicitly allow set locked operations adjusting state accordingly 
shows pseudocode sleep wakeup operations 
means avoid race conditions sleep wakeup binary condition flags synchronization 
condition flags located memory word contains scheduler ready run flag 
cas thread wants sleep sure condition flag unset removes ready run flag 
solution applicable inside kernel restricts number condition flags number bits memory word 
microkernel severe restriction fiasco microkernel needs condition flags may problem complex systems 
systems general solution protecting sleep wakeup simple lock 
single server synchronization revisited implemented wait free locking scheme described section experimented massalin pu single server synchronization scheme discussed section 
section discuss single server mechanism changed real time systems changed simpler locking scheme 
massalin pu scheme threads want change object put change request message request queue server thread owns object 
similar spirit helping lock design section minimize worst case wait time high priority threads replacing request queue stack messages high priority senders get processed letting requesters actively donate cpu time server thread handled request 
designed implemented synchronization mechanism drew appears proceedings usenix annual technical conference usenix void sleep unsigned condition thread thread current unsigned old state thread state old state condition condition occurred break cas thread state old state old state thread running ready flag deleted sleep schedule try thread state condition void wakeup thread thread unsigned condition unsigned old state thread state cas thread state old state old state thread running condition cas succeeded break thread prio current prio switch thread pseudocode sleep wakeup operations 
condition flag stored memory word scheduler ready run flag sleep implementation risk race condition wakeup code 
tion massalin pu 
particular design looked follows kernel ensured serialization critical sections allowing thread object owner execute operations object 
words locked operations ran thread context owner object 
threads owners 
consequently threads carried locked operations including initiated threads 
kernel assigned ownership objects threads fly lock free synchronization 
design viewed follows object type locked thread 
objects locked locking thread assigning ownership object thread 
operations object carried owner 
helping owner simple repeatedly switching owner owner completed request thread deleted owner aborted request 
code took care executing requests returning context thread 
consider design inelegant unfortunately required context switch locked operation 
realized mechanism fact shares properties wait free locking scheme priority inheritance derived section 
new locking mechanism complex performs better original single server scheme 
performance evaluation evaluate real time properties fiasco microkernel overhead synchronization mechanisms conducted series measurements 
verify kernel matches requirements regards scheduling measured lateness userlevel interrupt handler 
second measured overhead synchronization primitives number microbenchmarks 
appears proceedings usenix annual technical conference usenix system max 
lateness fiasco kernel linux linux rtlinux table maximum lateness periodic interrupt handler 
fiasco kernel handler ran user task rtlinux handler real time task running kernel mode 
carried measurements mhz pentium pro machine 
cpu built local apic served interrupt source 
real time characteristics test set timer device trigger hardware interrupt 
created userlevel task containing high priority handler thread connected interrupt measured time interrupt occurrences 
results computed maximum lateness 
measurements cache flooding application linux system running various multi user benchmarks ran concurrently handler thread inducing high load system 
conducted test operating systems fiasco microkernel linux liedtke high performance kernel linux comparison rtlinux handler running kernel mode 
table shows maximum systems 
average lateness small smaller systems 
turns maximum lateness fiasco microkernel order magnitude smaller 
uses interrupt disabling liberally kernel synchronize accesses kernel data structures 
fiasco microkernel close rtlinux interrupt handler rtlinux measurements equivalent carried 
results showed worse maximum lateness fiasco microkernel poor results caused kernel bug fixed 
system cycles cycles ii counter unsynchronized counter cas counter fiasco thread lock counter old massalin pu style thread lock includes context switch ipc ipc ipc space small addr 
offers optimization called small address spaces significantly reduces context switch cost small address spaces implementing segment switch page table switch 
table synchronization overhead contention fiasco microkernel different machines 
comparison show ipc times way fiasco microkernel 
measured numbers column mhz pentium box number ii column mhz pentium ii box 
normal programs hand optimized assembly conduct measurements 
runs kernel mode kernel address space fiasco handlers run task 
microbenchmarks carried small series measurements evaluate overhead synchronization mechanisms get clues optimizations 
implemented simple word counter protected increment operation synchronization schemes cas wait free helping lock fiasco microkernel new synchronization wait free object lock operation running different thread fiasco microkernel old massalin pu single server style synchronization 
comparison measured unprotected counter complete address space appears proceedings usenix annual technical conference usenix crossing short ipc operation fiasco microkernel needs lock put results relation performance liedtke ipc performance 
table shows results 
quite satisfied performance overhead new helping lock implementation 
optimize code experienced twofold improvement comparison implementation massalin pu single server scheme 
nonblocking synchronization user mode programs section discuss design methodology applied multithreaded user level programs 
recall preconditions effectiveness methodology nonblocking design simulated concurrent access shared data disabled 
second ensure wait freedom critical sections protected priority inversion safe locks block 
third helping works threading system provides priority inheritance 
meeting conditions user level programs definitely possible difficult 
discuss conditions turn 
interrupt disabling method prevent user level 
disabling concurrent access implies kind locking 
critical sections accessing data updated simulated typically short priority inversion best prevented employing preemption safe locks locks prevent lock holding thread favor thread shares lock protected data structure 
general locking mechanism depends underlying operating system 
example spin locks multiprocessor systems gang schedule program threads uniprocessors operating system assisted implementa tion discussed section assisted preemption safe lock 
avoid blocking inside critical sections user programs take extra care typically unnecessary kernel need ensure critical sections trigger page faults leading paging 
user programs need operating system support 
optimally operating system support priority inheritance kernel 
summary multi threaded user programs design technique operating system provides support real time systems provide frequently easily implement support preemption safe locking memory pinning priority inheritance 
summary introduced pragmatic methodology designing nonblocking real time systems dependent atomic memory modification primitive cas just cas sufficient 
methodology consists basic guidelines partition system global local objects implement global objects synchronization far possible protect objects locks priority inheritance wait events inside critical sections 
argued rules ensures wait freedom 
derived conditions operating system methodology applicable wait free user mode programs operating system provide help user mode implementation directly supporting preemption safe locks provide service memory pinning support priority inheritance 
proposed wait free locking helping mechanism priority inheritance showed similar effect better appears proceedings usenix annual technical conference usenix performing single server synchronization mechanism introduced massalin pu :10.1.1.39.8065
devised monitor implementation works top locking mechanism 
application methodology lead systems excellent real time properties built fiasco microkernel methodology 
linux fiasco microkernel reaches level close rtlinux 
currently significant limitations 
performance results preliminary ways 
steps analyze detail causing worst case interrupt latencies look processor dependencies 
evaluation intend develop model predicting worst case interrupt latencies methodology 
second compared performance synchronization primitives performance primitives commercial research operating systems 
limitations addressed part author thesis 
near plan add multiprocessor support fiasco microkernel order verify methodology multiprocessors 
plan optimize fiasco microkernel locking helping mechanism thread switching 
plan research applicability techniques user level programs depth real software measurements 
availability fiasco microkernel freely available researchers invited study implementation design methodology experiment 
fiasco linux downloaded os inf tu dresden de drops 
frank providing measurement framework michael peter improving fiasco synchronization primitives 
grateful shepherd sheila anonymous reviewers valuable suggestions 
special go thomas roche helped debugging prose 
project partially funded deutsche forschungsgemeinschaft framework supported generous ibm university partnership shared university research programs intel mrl lab 
atul adya barbara liskov robert gruber umesh maheshwari 
efficient optimistic concurrency control loosely synchronized clocks 
proceedings sigmod san jose ca may 
james anderson srikanth rohit jain 
implementing wait free objects priority systems 
proceedings sixteenth annual acm symposium principles distributed computing pages santa barbara california august 
james anderson srikanth kevin jeffay 
real time computing lock free shared objects 
acm transactions computer systems may 
bershad 
practical considerations nonblocking concurrent objects 
robert werner editor proceedings th international conference distributed computing systems pages pittsburgh pa may 
ieee computer society press 
peter buhr michael 
monitor classification 
acm computing surveys march 
michael greenwald 
non blocking synchronization system design 
phd thesis stanford university august 
appears proceedings usenix annual technical conference usenix michael greenwald david cheriton :10.1.1.25.5436
synergy non blocking synchronization operating system structure 
nd symposium operating systems design implementation osdi october 
seattle wa pages berkeley ca usa october 
usenix 
cl 
hamann sch wolter 
drops os support distributed multimedia applications 
proceedings eighth acm sigops european workshop sintra portugal september 
liedtke sch wolter 
performance kernel systems 
th acm symposium operating system principles sosp pages saint malo france october 
carl hauser christian jacobi marvin theimer brent welch mark weiser 
threads interactive systems case study 
th acm symposium operating system principles sosp pages asheville nc december 
maurice herlihy 
methodology implementing highly concurrent data objects 
acm transactions programming languages systems november 
michael 
fiasco kernel requirements definition 
technical report tud fi tu dresden december 
available url os inf tu dresden de papers ps fiasco spec ps gz 
john howard 
signaling monitors 
second international conference software engineering pages san francisco ca october 
lampson redell 
experience processes monitors mesa 
communications acm february 
liedtke 
kernel construction 
th acm symposium operating system principles sosp pages copper mountain resort december 
henry massalin calton pu :10.1.1.39.8065
lock free multiprocessor os kernel 
technical report cucs columbia university 
frank 
rtl porting rtlinux api fiasco 
workshop common microkernel system platform kiawah island sc december 
michael michael scott 
simple fast practical non blocking blocking concurrent queue algorithms 
proceedings th annual acm symposium principles distributed computing podc pages new york usa may 
acm 
moir 
transparent support wait free transactions 
lecture notes computer science 
sha rajkumar lehoczky 
priority inheritance protocols approach real time synchronization 
ieee transactions computers september 
treiber 
systems programming coping parallelism 
technical report rj ibm almaden research center april 
john valois 
lock free linked lists compare swap 
proceedings fourteenth annual acm symposium principles distributed computing pages ottawa ontario canada august 
erratum available ftp ftp cs rpi edu pub podc errata ps gz 
john 
lock free data structures 
phd thesis rensselaer polytechnic institute may 
victor michael 
real time linux 
proceedings linux applications development deployment conference anaheim ca january 
usenix association 
