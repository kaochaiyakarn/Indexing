practical programmable packets jonathan moore michael hicks scott nettles computer information science electrical computer engineering university pennsylvania university texas austin snap safe nimble active packets new scheme programmable active packets centered new lowlevel packet language 
previous active packet approaches snap practical adding significant flexibility ip compromising safety security efficiency 
show compile known active packet language plan snap showing snap retains plan flexibility give proof sketches novel approach resource control experimental data showing snap attains performance close software ip router 
keywords active networks active packets capsules resource control 
explosive growth internet placed new increased demands network infrastructure 
applications varied service requirements high bandwidth low delay low jitter size fits single service model ip certainly contributed success longer fits user application needs 
meet new demands network infrastructure evolve encompass new service models protocols 
unfortunately ip difficult change due centralized committee controlled nature cf 
ipv 
active networks seek avoid committee bottleneck making network programmable easier change fly 
radical way network programmable packets carry programs 
active packets capsules traditional packet header replaced program executed determine handling effect 
previous research efforts active packets plan ants demonstrated flexibility provided active packets improve application performance functionality 
examples active packet applications include application specific routing transparent redirection web requests nearby caches distributed line auctions reliable multicast mobile code firewalls reduced network management traffic 
unfortunately active packet platforms restricted control plane unacceptably low performance achieved reasonable performance sacrificing safety security 
done effective job providing safe resource control 
led widespread belief active network processing data plane fundamentally impractical 
show contrary active packets general 
support claim drew extensive experience plan successes failures generation active packet languages general design snap safe nimble active packets 
design supported darpa contract nsf contracts ani ani 
snap focuses dimensions active packet design space safety security existing systems progress preserving node integrity providing protection fail cope adequately resource allocation flexibility existing systems excel performance existing systems key limitations especially data transport 
demonstrating snap adds significant flexibility ip sacrificing safety efficiency establish snap practical active packet system 
ii 
approach proceeding body consists snap design implementation performance characteristics examine closely design space axes safety security flexibility efficiency explain snap approach improves prior approaches 
safety security active packet systems provided protection packets damaging nodes packets 
general strategy type checking dynamic monitoring 
minor variations discussed section vi snap uses techniques benefits 
existing systems generally fail controlling resource utilization active packets 
systems time ttl counters limit packet proliferation watchdog timers allocation limits terminate packets local resources 
approaches sacrifice safety forced termination unsafe 
plan limits packet execution restricting expressibility programs terminate 
bounding termination time problematic packets may run time exponential length 
general prefer packet resource usage predictable network decide process packets effectively 
snap takes dramatic approach problems 
language designed limited expressibility snap program uses bandwidth cpu memory resources linear proportion packet length 
furthermore constant proportionality known small 
means node trivially predict strict upper bound resources packet 
furthermore snap uses ttl mechanism drawn plan called resource bound 
taken mechanisms place bound resource utilization computed packet enters network 
strict resource control snap novel advance 
linear resource achieved 
bandwidth inher linear packet length linear cpu memory achieved restricting bytecodes snap language 
forward branches allowed bytecode executed 
bytecodes key exceptions see section iii execute constant time 
restrictions imply execution time linear number bytecodes 
bounding memory works similarly instruction push item stack add element heap 
linear number bytecodes executed linear amount additional space may 
flexibility principal feature active networks add existing networks flexibility 
existing active packet systems best example allowing custom protocols flows packets 
systems clearly meet initial flexibility goals active networking especially coupled extensible routers planet 
systems somewhat compromise flexibility limiting expressibility aid achieving safety example plan designed language ensure packet programs terminate 
experience shown compromise 
snap take compromise restricting flexibility achieve greater safety linear bounds resource usage 
question gone far 
argue section answer presenting compiler translates plan snap 
safety reasons effectively translate plan programs snap translate large useful subset 
plan flexible existing systems snap achieves high flexibility 
efficiency exception existing systems achieve mediocre performance unable saturate mb ethernet relatively fast cpus 
exception pan achieves performance key ways implemented kernel avoiding overheads imposed user space implementations second packet language unrestricted machine code abandoning guarantees node safety 
believe high performance security acceptable design alternative 
snap designed performance provides basic operators control flow enabling lightweight interpreter 
snap linear safety properties possible compute maximum size packet buffer avoiding high memory management costs execution 
furthermore compact wire representation improves throughput leaving room payload data 
wire representation possible inplace execution packet programs cases avoiding expensive marshalling unmarshalling 
kernel implementation avoids unnecessary domain crossings 
compare snap performance relative ip implemented similar environment 
experiments show active processing imposes negligible overhead normal ip processing 
words snap user pay amount activeness 
feel result important active packets viewed practical impose small penalty penalty ip service 
addition show snap considerably faster predecessor system plan 
remainder expand themes introduced section presenting details snap language implementation 
overview snap bytecode language sections demonstrate practicality section iv sketch network safety proofs possible snap design section show snap achieves flexibility previous active packet systems describing plan snap compiler sections vi vii show snap efficient implementation compared software ip router 
concluding discuss previous active packet systems section viii 
iii 
snap overview snap introducing features important rest 
snap designed successor packet language plan shares plan design philosophy comparisons 
plan snap specifically designed permit formal proofs particularly safety programs 
readers seeking detailed formal description language directed 
snap executes stack bytecode virtual machine vms supports snap communication primitives safety approach 
snap program consists sequence bytecode instructions stack heap 
stack values small data integers addresses heap values large data byte arrays tuples pointed small values 
snap instruction consists opcode optional immediate argument 
snap network semantics packet program executed snap enabled node simply forwarded legacy ip routers 
describe section vi accomplished 
addition snap packet resource bound field similar ipv time live ttl field field decremented hop packet donate resource bound child packets sent 
snap instructions fall classes listed table general snap instructions 
execute constant time 
allocate constant amount stack heap space 
points crucial safety claims discussed section iv 
discussed exceptions points exist 
example ping illustrate snap basic features concretely version ping coded snap shown 
ping allows simple example snap instructions tuple thought array small values 
instruction class examples network control forw send demux flow control bne beq ji stack manipulation push pop pull environment query simple computation add addi xor eq tuple manipulation nth service access calls table snap instruction classes forw move dest bne jump instrs nonzero top push means return trip get source field send return packet pop pop local ping demux deliver payload fig 

snap code ping 
reader familiar 
furthermore program benchmarks section vii 
assume neighboring nodes want ping case create packet containing ping code initial stack port payload 
top stack indicates packet moving source destination port port number corresponding ping application sending node payload byte array carried packet 
packet injected network executes 
bytecode executed forw forward compares packet destination header field current host address 
match copy packet forwarded destination currently running packet terminates happens initially 
packet reaches destination forw simply drops instruction happens packet reaches forw special case general network control instruction send spawn new packets 
send creates new packet copy current code stack consisting sender top stack values entry point index instruction execute resource bound destination field executing send results resource bound child packet deducted packet executes send 
forw just shorthand send keeping destination entry point current packet current stack current packet resource bound 
network control operations exceptional operate time linearly related packet length 
bytecode executed bne branch equal zero 
bne consumes top stack value argument nonzero takes branch adding immediate argument program counter 
example top stack popped test fails branch falls instruction 
addition bne provide variety branch types including conditional branches beq bne unconditional branches ji jump immediate branches targets carried stack pop jump 
branches go forward offsets positive implying standard loops function calls straightforwardly encoded 
despite seemingly restriction see section special compilation techniques allow useful programs 
bytecode executed push pushes stack signifying packet return trip 
stack port payload 
snap supports usual stack manipulation operations push pop pull copy value stack pushes copy source address stack 
general snap provides environment query instructions allow packet read contents header fields remaining resource bound current entry point query node information pushes current node address stack 
causes packet sent back forw reads destination argument stack case address pushed 
return packet effectively sent source destination fields swapped carrying stack port payload 
packet arrives execution begins forw falls return packet destination address bne consumes top stack takes branch jumps instructions demux instruction 
demux takes arguments stack port number value deliver port 
design exactly remains stack port payload 
sixth instruction pop executed destination source host 
case packet destination fall pop just pushed 
instructions instruction classes table appearing ping program simple computation heap manipulation service access 
simple computation instructions pop arguments stack perform computation optionally immediate argument push result 
provide standard integer floating point arithmetic operators relational operators special purpose instructions addresses subnet masks 
tuple manipulation instructions allow program allocate length tuples heap select ith field existing tuples nth 
require instruction followed non instructions ops needed 
allows amortize allocated small values instructions 
instruction calls allows packet invoke service named string services node resident general purpose routines augment limited functionality packets 
example service allows packets store soft state routers traverse 
services differ normal instruction implementations service namespace extensible meaning upload new service routines runtime add new functionality 
essentially model services supported plan 
iv 
safety safety security important issues shared internetworking infrastructure possible users maliciously accidentally crash network unusable 
particular properties hold packet scheme active node integrity impossible processing packet result node crash subversion 
packet isolation impossible active packet affect packets permission 
resource safety possible predict strictly bound amount local network resources consumed active packet 
high level snap follows basic design philosophy plan limited expressibility domainspecific language know program safe execute examining 
accomplish language design safe interpretation techniques formal proof 
ensure node integrity packet isolation defense snap simply contain primitives exert control local node packets snap programs may query node information may affect 
complete guarantee employing form dynamically fault isolation :10.1.1.142.4909
essentially prevents attacker ill formed packet exploiting buffer overruns gain control node tamper user packets 
example pointer dereferences verified packet heap 
approach active packet systems 
resource safety snap novel contribution achieves resource safety 
limited expressibility snap possible compute priori bounds running time memory usage program giving significant leverage controlling resources 
consider resource safety requirements 
cpu safety node processing packet take jpj time jpj length 
memory safety node processing packet require jpj memory 

bandwidth safety network bandwidth consumed packet resource bound associated creation 
requirements derived properties unicast ipv packets examining header including options forwarding packet take jpj time space 
similarly amount network bandwidth consumed packet bounded product size packet ttl contained header snap properties possible prove formally 
outline basic ideas proofs reader interested formal details referred technical report 
cpu safety branches snap go forward instruction program executed 
furthermore exception network control instructions snap instructions execute constant time 
aside network control instructions snap program runs time linear length length containing packet 
sending packet takes jpj time delivering data demux 
pathological case program consisting send instructions total time jpj jpj jp 
gain desired linear bound restrict number network operations allowed packet constant resulting jpj jpj 
conservative case set allowing single send delivery packet matching unicast semantics prohibiting multicast style programs reasonable implementations traceroute 
flexible bound current implementation multicast may programmed varies node number network interfaces node 
demux permit delivery packet force packet exit delivery 
gain experience snap expect develop insight reasonable policies 
note know expensive constant time instruction maximum number sends maximum packet size precisely compute upper bound program runtime 
memory safety prove memory safety show instruction amortized analysis small value may allocated heap stack 
snap instructions instruction zero arguments consumed stack result value added heap affected 
furthermore requirement followed instructions means instruction allocates amortized small value heap 
instruction snap program executes see maximum number small values allocated program twice length 
result snap vm need allocate buffer constant size packet current implementation mtu due additional heap object overheads 
buffer immediately recycled program termination avoiding memory management overheads garbage collection costs plagued previous systems 
multicast ipv packets comply standard multicast resource usage open problem bandwidth safety property conservative goal 
bandwidth safety prove bandwidth safety observing snap packet resource bound decremented reception child packets parent resource bound conservation resource bound 
packet initial resource bound cause transmissions jpj directly offspring 
services safety safety guarantees necessarily apply snap program invokes node resident service calls 
services general purpose functionality priori guarantees resource usage 
services node resident review processes currently protocol deployment may 
proof sketches provide guideline services execute constant time space 
naturally complex services feasible probably desirable covered existing safety framework 
flexibility seen restrictions snap flexibility imply important safety properties 
demonstrate snap retains expressibility useful developed compiler translates plan snap 
plan flexibility documented literature compiler ensures snap remains useful 
active applications mentioned currently implemented plan 
plan important application internetwork planet 
planet internetworking functionality implemented plan packets router services including address resolution dynamic routing encapsulation fragmentation error reporting compiler demonstrates likewise perform internetworking functions snap 
snap provides stronger safety guarantees language restrictions feasible translate plan programs snap 
plan programs ruled ones problematic resource usage see obstacle practice 
sample programs shipped current release planet may encoded snap 
section compilation techniques possible snap compilation target 
provide example compiler output plan ping program comparison hand coded snap shown section iii 
compiling plan snap plan purely functional programming language augmented primitives remote evaluation 
supports standard features functions arithmetic features applications implemented ants easily implemented set plan services vice versa 
common functional programming lists list iterator fold notable restriction functions may recursive part guarantee plan programs terminate 
snap plan programs packet resident may call general purpose service routines node resident 
snap fairly straightforward target language plan lack backward branches 
backward branches typically compilers ways 
returning caller completing function call 
calling mutually recursive function 
returning head loop body deal points eliminate function calls plan functions inlining straightforward plan prohibits recursive functions service function calls translated directly calls opcode 
plan looping construct list iterator fold case unroll fold inline call iterator function 
number times iterator called depends length list generally speaking know times unroll fold user provides conservative upper bound compiler 
expect problem practice uses fold short lists addresses multicast program flow routing program 
plan differs slightly snap execution model 
plan programs evaluate active router traverse snap programs destination 
intervening plan nodes packet specified routing function evaluated determines hop forwards packet 
routing function specified argument plan packet transmission function 
translate model snap add piece snap code evaluated hop checks packet reached destination looks hop specified function forwards packet 
packet arrived destination code jumps entry point stored top stack 
special routing function bit code simply forw instruction followed pop jump 
compilation example ping illustrate plan compilation simple example 
top shows plan version ping 
program sent network evaluates function destination wishes ping 
function calls send packet evaluate function back sender 
packet routing function get back source routing function get specified send time 
executed delivers data variable application listening port numbered translation program compiler shown lower portion 
routing function appears followed code sequences intuitively fold executes function element list accumulating result goes 
fun blob int fun blob int forw forward dest jump top stack value pull get port num pull get data demux deliver data exit pull pkt stack port pull pkt stack data push pkt stack offset push entry point push stack rb return src send send return packet pop pop send return val pop extra stack exit done fig 

ping plan compiled snap simply copies top stack values pull calls demux exits immediately delivering data 
constructs packet evaluate source 
constructs stack call consisting arguments pushes offset function 
remaining opcodes push arguments send entry point specifies amount stack take pushes current packet resource bound pushes current packet source address 
send pop arguments sent packet stack return value send 
general compiler decent job translating plan snap shown section vii compiled code performs 
fact program longer hand coded instruction version section iii achieves performance show experimentally section vii 
compiled code fully optimized especially space example instructions send eliminated 
near term expect compiler achieve initial translations tune hand necessary 
vi 
implementation implemented snap vm user space versions 
user space implementation daemon communicates daemons user applications udp 
kernel version implemented linux kernel version part redhat linux accessible user applications special socket type 
snap currently positioned transport layer protocol ultimately intend reside strictly necessary stack properly arranged call demux compiler optimization 
code bits ipv destination address ipv source address port resource bound entry point instrs code size octets stack size octets heap size octets heap stack endian flag fig 

snap packet format shim layer layers ip router alert option flag packets active ones 
followed implementation principles 
execution fast possible 
minimize size snap program representations 
trade large initial fixed costs incremental ones total intention reduce overhead snap especially common case programs data delivery diagnostics 
remainder section discuss achieved goals covering snap packet format snap program representations structure interpreter implementation key operations sending packets checking formedness 
packet format packet format shown 
portion header contains standard header fields source destination port resource bound field bandwidth safety described earlier 
second portion header describes snap program 
preceding resource bound field flag indicate values packet program header fields network byte order may converted need 
header field entry point indicates instruction execution 
fields delineate main portions program code heap stack 
program laid order permit execution place additional copying describe 
result packet execution immediately arrival structural checks entry point code various lengths exceed buffer size 
contrast systems plan ants require extensive unmarshalling execution 
program representation snap program generally represented follows 
code section consists array uniformly sized instructions 
stack values uniformly sized consisting tag data field 
tag indicates type data contains actual value 
values large fit stack tuples byte arrays data resides heap pointed stack value 
pointer implemented offset relative base heap allowing packet arbitrarily relocated memory cost extra calculation interpretation 
feature eliminates large fixed cost adjusting pointers code stack execution 
heap objects contain header length type information 
implemented scheme require little space possible 
instructions stack values word heap objects word header 
stack values divided bit tag bit data part 
integer precision reduced result addresses floating point values allocated heap 
believe minor limitation floats addresses infrequently integers require high precision context simple packet programs 
instructions similarly bit opcode bit immediate corresponding data part stack value 
distinct instructions final encoding set bits tags opcodes meaning integer precision bits 
snap interpreter interpretation instructions extremely straightforward exception send network operations explained 
interpreter constructed loop large switch statement case opcode 
instructions extract arguments stack heap perform computation push result 
initial packet buffer sufficiently large packet execution may occur place 
packet front buffer stack allowed grow buffer execution 
heap allocation takes place second heap situated buffer growing stack 
user space implementation allocate single buffer size mtu maximum possible size required section iv receive incoming packets buffer 
kernel implementation buffer receive kernel bigger packet 
immediately copy packet maximally sized buffer needed 
execution proceeds buffer heap allocation takes place current stack overrun point copy done 
permits simple executions avoid copy ping program forwarded copy needed executes destination instruction causes address allocated heap resulting copy return packet sent 
implementing send send creates new packet containing subsets parent code stack heap parent resource bound 
creating new packet presents difficulties 
allocation taken place parent packet heaps consolidated single heap child packet 
second prefer include portions parent packet needed child packet 
address issues employing scheme similar copying garbage collection 
process ensures portions parent heaps reachable child stack copied child heap adjusts heap offsets code stack heap point correct locations child heap 
currently copy code new packet similarly employ control flow analysis prune code occurs planet 
approach general computationally memory intensive 
fortunately take optimal approaches certain common cases 
performed heap allocation copy parent heap stack subset directly new packet requiring heap offset fix ups position heap objects changed 
result faster packet creation times potentially larger packets objects unreachable removed 
better stack required new packet consists entire stack current packet may reuse current packet buffer requiring modifications header transmission occur modifications take place 
program terminates executing forw simple routing active packets may occur significant marshalling unmarshalling costs 
formedness checking program may executed interpreter verify formed 
systems dynamically load code notably java proof carrying code verify entire code body formed allowing executed 
depending size complexity program may result large front cost prefer avoid 
dynamic checks interpretation resulting performance improvement packet executes fraction instructions 
case packets require frequent routing implemented forw instruction occasional computation programs figures exhibit property 
reduce number dynamic checks willing verify little possible ensuring node integrity 
result avoid checks normally associated type safety 
instance interpreters check argument integer signal type error 
omit check assume may result incorrect program behavior compromise safety properties 
vii 
efficiency having seen snap implementation tailored efficient execution experimental evidence snap efficient practical settings 
examine snap performance areas 
kernel snap implementation compare snap ip software router setting bandwidth latency 
second user space implementation snap plan compare latency snap plan examine cost snap plan compiler 
number hops latency ms snap snap icmp icmp fig 

ping latencies snap competitive ip shows greatly reduced evaluation overheads compared plan 
snap latencies slower ip depending payload size hop count 
snap saturate mb ethernet link roughly byte greater sized packets switch packets second 
measurements compare favorably ip platform switch packets second saturate roughly byte packets 
snap ping times faster smaller comparable plan program 
snap considered practical domains software routers practical experiments run dual cpu mhz pentium ii systems mb ram 
machines kb split level caches unified kb second level caches rate specint 
machines run linux kernel connected mb ethernet links 
due slightly skewed distributions report medians trials jain 
times measured clock granularity 
comparing snap ip compare snap latency ip measured round trip times snap ping shown standard ip icmp echo reply 
program overhead size packet minus ip header payload snap ping bytes icmp bytes 
adjusted payloads program byte essentially minimal byte maximal ethernet frames 
results shown axis shows latency milliseconds ms axis presents number hops network links traversed hops machine pinging 
maximally sized packets snap latencies slower ip depending hop count slower minimally sized packets 
hop case snap faster packet sizes believe snap efficiently supported high speed core router environments topic research ip snap packet byte table ii node switching costs payload size bytes bandwidth mb ttcp udp snap fig 

throughput measurements 
implying cost snap execution ping program cheaper kernel icmp code 
detailed comparison calculated byte packet switching costs traversing router ip snap 
calculated costs linear regression find hop cost packet size doing regression packet size independent variable find byte packet costs 
results shown table ii 
see fixed cost packet higher snap byte costs higher 
believe higher costs include fact ip demultiplex packet snap overheads actual snap evaluation 
intend instrument kernel measure costs carefully 
bandwidth compared snap equivalent udp forw followed demux ttcp load generator sending udp packets 
snap udp overhead bytes compared bytes udp 
performed series measurements machine configuration varying payload result ethernet frame sizes byte increments calculating throughput packets 
intermediate router system bottleneck 
results shown 
axis plots throughput mb payload axis plots payload size bytes 
snap udp level saturate link snap maximal bandwidth slightly udp additional bytes overhead 
cases curves ramp level saturating link 
udp happens roughly byte packets snap occurs byte packets 
interesting feature graph byte packets snap number hops latency ms snap hand coded snap compiled plan plan fig 

comparing snap ping plan ping 
appears outperform udp 
believe due peculiar scheduling kernel opposed improvement snap udp 
particular noticed snap udp able switch packets faster small sized ones 
suspect due achieving synchrony device packets sent certain rate 
intend investigate behavior thoroughly 
comparing snap plan snap competitive ip significantly outperforms comparable active packet systems 
illustrate compared snap planet implementation plan 
experiments planet compiled native code bytecode option running top udp 
planet user space implementation compared snap user space implementation runs top udp 
plan ping program see overhead bytes 
hand coded version snap ping see overhead bytes version compiled snap plan version see overhead bytes 
cases byte payloads 
results shown 
snap versions perform essentially identically times faster plan hops nearly times faster hops 
addition space overhead snap significantly plan hand coded snap ping smaller plan ping compiled ping smaller 
encouraged fact compiler code verbose performs competitively code produced hand 
experience needed see holds true general 
viii 
related section discuss previous research active packets 
summarized systems respect flexibility safety efficiency table iii 
projects demonstrated utility derived flexibility active project flexibility safety efficiency space speed fair fair ants excellent excellent fair pan excellent poor excellent excellent plan excellent fair snap excellent excellent excellent table iii comparison active packet systems 
packets achieved completely satisfying degree safety efficiency 
bbn mobile network management agents snmp interface query configure nodes 
safety largely ignored authors mention authorization scheme 
execution data available program representation optimized compact 
ants active packets called capsules contain pointer code needed handle code dynamically loaded demand previous nodes flow essentially eliminating packet space overheads 
scheme may benefit snap 
ants relies implementation language java provide safety watchdog timers regulate resource usage 
hawblitzel shown practice abruptly terminating subprograms address space generally unsafe adding significant overhead 
owing java ants exhibits low throughput 
follow project ants pan mobile code platform essentially implements ants model native code 
unexpectedly pan achieve ip performance cost safety guarantees 
plan project snap direct predecessor similarly attempts address safety concerns language design 
plan programs guaranteed terminate possible write exponentially long running programs 
experimental results show reasonable performance slow plan evaluation leads active processing unsuitable data plane 
ix 
second generation active packet system snap safe nimble active packets contributions 
snap provides provable resource safety linear bounds bandwidth cpu memory usage novel language restrictions 
second despite language restrictions snap retains flexibility generation systems demonstrated plan snap compiler 
third efficient wire format implementation achieve performance extremely close ip software router 
taken contributions establish active packet systems practical general software routers practical 
expect implementation available near 
acknowledgments authors luke hornof jessica comments early drafts 
anonymous referees helpful comments 
network performance testing ttcp 
network monitor 
case 
simple network management protocol snmp 
rfc ietf may 
deering 
internet protocol version ipv specification 
rfc ietf december 
gosling joy steele 
java language specification 
addison wesley 
hawblitzel 
chang czajkowski hu von eicken 
implementing multiple protection domains java 
usenix annual technical conference june 
hicks moore gunter nettles 
network programming plan 
ieee workshop internet programming languages may 
hicks moore gunter nettles 
plan packet language active networks 
acm sigplan icfp september 
hicks keromytis 
secure plan 
international working conference active networks june 
hicks moore alexander gunter nettles 
planet active internetwork 
ieee infocom march 
jain 
art computer systems performance analysis 
wiley new york 
katz 
ip router alert option 
rfc ietf february 
guttag 
network level support improve cache routing 
proceedings rd international www caching workshop june 
wetherall guttag 
improving performance distributed applications active networks 
ieee infocom march 
lehman garland tennenhouse 
active reliable multicast 
ieee infocom march 
moore 
safe efficient active packets 
technical report ms cis department computer information science university pennsylvania october 
necula 
proof carrying code 
acm sigplan sigact popl january 
garland kaashoek 
pan high performance active network node supporting multiple mobile code systems 
ieee march 
postel 
internet control message protocol 
rfc ietf september 
postel 
internet protocol 
rfc ietf september 
raz shavitt 
active network approach efficient network management 
international working conference active networks july 
schwartz jackson strayer zhou rockwell partridge 
smart packets applying active networks network management 
acm transactions computer systems february 
wahbe lucco anderson graham :10.1.1.142.4909
efficient fault isolation 
acm sosp december 
wetherall 
active network vision reality lessons system 
operating systems review december 
wetherall 
service active network 
phd thesis mit february 
wetherall guttag tennenhouse 
ants toolkit building dynamically deploying network protocols 
ieee april 
wilson 
uniprocessor garbage collection techniques 
proceedings international workshop memory management september 
