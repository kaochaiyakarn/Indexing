datalog queries strati ed negation choice sergio greco domenico sacc carlo zaniolo deis univ della italy greco si deis computer science dept univ california los angeles ca zaniolo cs ucla edu 
introduces uni ed solution problem extending strati ed datalog express db complexity classes ranging solution strati ed negation core simple declarative semantics negation ii choice construct capture non determinism stable models iii ability bind query execution complexity class includes problem hand iv general algorithm ensures ecient execution di erent complexity classes 
obtain class datalog programs preserves computational tractability achieving completeness wide range complexity classes 
issue designing declarative logic oriented database languages suf cient expressive power key motivation current research databases knowledge bases 
datalog represents major breakthrough line due datalog ability recursive queries 
datalog rule language simple elegant semantics notion minimal model equivalently notion xpoint 
second semantics leads operational semantics amenable ecient implementation demonstrated deductive database systems 
unfortunately basic datalog language negation function symbols severely limited expressive power express queries practical interest 
exact expressive power datalog understood shown datalog express proper subset monotonic polynomial time queries 
order support non monotonic queries negation allowed bodies rules 
particular interest strati ed negation avoids semantic implementation problems connected non monotonic rst authors supported cnr project sistemi murst project di 
constructs recursive de nitions 
write datalog denote datalog strati ed negation 
simple intuitive semantics leading ecient implementation exists datalog unfortunately datalog express polynomial time queries express proper proper subset xpoint queries 
simplest step greater expressive power remove condition negation strati ed 
unfortunately relaxation strati cation assumption non monotonic programs opens box semantic computational problems 
take instance concepts stable models founded models :10.1.1.24.6050
founded model semantics de nes unique intended model program computed polynomial time 
programs founded total model meaning programs remain unde ned 
terms expressibility founded semantics express xpoint queries express polynomial time queries express queries db np dramatic leap expressive power provided concept stable models emerged compendium concepts theories developed years ai researches working non monotonic reasoning default theories autoepistemic logic 
gain expressive power complications 
non deterministic nature follows fact program stable models 
deterministic query semantics ensured requesting answers hold true stable model possibility semantics stable models certainty semantics known ai membership entailment semantics respectively 
semantics capture classes np conp respectively 
remain problems 
usage unrestricted negation programs simple intuitive lead writing programs total stable model occurs similar problem exists founded models 
exponential time algorithms needed compute stable models expected situations programs express np hard problems 
unfortunately know ensure exponential algorithms compute eciently programs solve polynomial time problems 
current research focusing overcoming limitations proposals put forward give declarative semantics fall back procedural semantics xpoint computation procedure 
largely inspired conviction modeltheoretic semantics ers important bene ts strive preserve 
propose novel approach strati ed datalog programs extended include explicit non deterministic construct called choice semantics de ned terms stable models implemented eciently quanti ers query goals achieve desired levels expressive power computational eciency controlled fashion allows user match expressive power semantic intrinsic complexity problem hand 
proposes approach allows users express easily compute eciently problems ranging class classes np conp way ability expressing np hard problems cost gross solving polynomial problems 
practical problems fall class introduce capability capturing class 
furthermore presents unifying algorithm automatically adapts complexity problem hand 
algorithm shows stable model semantics amenable ective implementations 
summary presents simple framework exploiting advances model theoretic semantics non monotonic datalog naturalness eciency strati ed negation 
preliminary de nitions assume reader familiar concepts relational databases datalog language logic programming 
semantics logic programs terms total stable model semantics brie recall 
logic program interpretation subset herbrand base total stable model minimal model program gl de ned follows gl obtained ground instance deleting rules negative literal body ii removing negative literals bodies remaining rules 
logic program may stable models deciding admits stable model np complete 
positive negation free programs unique stable model corresponding minimum model 
program predicate symbols write exists rule occurs head body exists predicate say depends say depends rule occurs head 
program strati ed exists rule predicate occurs negative literal body occurs head recursion negation 
strati ed programs unique stable model corresponding strati ed xpoint 
datalog program function free logic program predicates partitioned extensional intensional predicates edb idb predicates respectively 
datalog program associated relational database scheme dbp fr edb predicate symbol pg 
edb predicates seen database relation schemes attribute domain countable set occur rule heads assumed de ned database 
database scheme dbp set nite relations edb predicates relation associated edb predicate denoted 
nite database dbp considered set facts fr jt tuple relation dg 
set databases dbp denoted dp assume semantics program applied database stable models datalog program positive simply called datalog program unique stable model applied database computed time polynomial size point referring called data complexity size assumed constant 
datalog program strati ed called datalog program 
unique stable model datalog program applied database computed time polynomial size ground datalog query pair conjunction ground literals called query goal datalog program 
denotes set possible datalog queries possible query goals possible datalog programs 
semantics complexity datalog assume reader familiar basic notions complexity classes query language complexity evaluation see instance 
answer query database dbp de ned follows 
non deterministic semantics true stable model true false exists stable model stable model false queries true false answer correct 

possibility semantics true stable model true false 
certainty semantics true stable model true false query database semantics denoted equivalently subscripts respectively stand non deterministic semantics possibility semantics certainty semantics 
answer query database semantics denoted equivalently 
query considered function collection databases dbp ftrue falseg 
turns describe complexity query semantics complexity recognizing database input true answer semantics 
expressive power semantics set functions formulated possible queries denoted expr 
measure expressive powers turing machine complexity class corresponding class db denoting class functions recognition problem particular class db db np db db non deterministic semantics answer query true false queries considered functions 
bound queries practical interest answer queries deterministic non determinism increase expressive power simplify formulation 
instance test relation number tuples write datalog program non deterministically partitions tuples number pairs stable models number combinations tuples result matter stable model selected 
shall consider deterministic queries 
non deterministic semantics denote set possible datalog queries deterministic 
observe problem query database deterministic non deterministic semantics worse problem query deterministic databases decidable 
view real problem assume programmer responsibility write deterministic queries way responsibility write correct terminating program 
query turns deterministic eventually get answer appropriate case wrong programs 
restriction queries considered functions non deterministic semantics expressive power expressed terms db complexity classes 
results known literature 
fact see 
expr db np 
expr db conp denote set datalog queries set datalog queries query deterministic 
fact see db types semantics 
show expressive power non deterministic semantics deterministic queries 
proposition 
expr 
db np 
proof 
membership db np 
take query database dbp want recognize 
true 
just guess interpretation test deterministic polynomial time total stable model ii verify stable model done polynomial time need compute xpoint gl test coincides 
completeness 
fagin result see np recognizable database collection de ned existential second order formula list new predicate symbols rst order formula involving predicate symbols database scheme shown formula equivalent form second order skolem normal form conjunctions literals involving variables predicate symbols dbp consider program rst groups rules de ne instance predicates rst groups rules implement second order formula 
fourth rule checks formula satis ed 
fth rule force global program total stable model false 
note true program total stable model 
program stable model query goal true non deterministic semantics database belongs collection 
observe restriction contains deterministic queries non deterministic semantics necessary proposition hold 
notice expressive power non deterministic semantics coincides possibility semantics 
order provide exibility expressing queries additional cost shall discuss allow combine possibility certainty semantics 
write compound query goals having form related useful ways discussed 
particular program stable model hold true model 
proposition 
expr db proof 
compound query corresponds conjunction query possibility semantics query certainty semantics 
result follows fact possibility semantics captures certainty semantics captures conp choice strati cation datalog queries choice construct supported ldl form coral enforce functional constraints rules logic program :10.1.1.24.6050
goal form choice rule denotes set consequences derived respect fd general vector variables possibly empty denoted vector variables 
shown formal semantics construct terms stable model semantics follows 
rule form choice choice rewritten chosen chosen chosen chosen datalog program choice constructs 
strati ed modulo choice removing choice predicates stable model general unique existence guaranteed 
result remains valid choice predicates occur recursive rules 
strati ed modulo choice program stable models computed polynomial time 
study expressive power queries datalog programs datalog programs choice constructs 
denote set queries datalog programs 
restrict attention deterministic queries non deterministic semantics subset possible queries 
theorem 
expr 
db 

expr db np 

expr db conp 

expr db proof 
papadimitriou shown strati ed negation reduced version plus ordering domain captures computing stable model query database done polynomial time sucient extend strati ed xpoint simple polynomial time implementation choice construct 
contains deterministic queries answer depend stable model returned 
expressive power go sucient introduce ordering domain able nd minimal maximal element domain 
done choice strati ed negation reported program min domain choice succ succ min domain choice choice max domain succ follow lines proof proposition time datalog program de ned way label label label choice easy see query goal query database true possibility semantics database belongs collection 
consider program proof part 
time required check database belong collection 
happens query goal query database true certainty semantics 
combining proofs part 
observe time proof part theorem strongly depends restriction contains deterministic queries 
proposition 
query database 


solved time 
solved time polynomial size number stable models program proof 
stable models datalog program choice computed polynomial time 
finding stable model sucient solve query non deterministic semantics 
semantics worst case nd stable models 
done simple exhaustive search scheme generating possible selections choice constructs 
selection produce di erent stable model polynomial time 
proposition clari es results choice models unrestricted stable models basis computation 
number choice models program exponential number stable models program 
computing choice model polynomial time computing stable model exponential time 
choice models answering queries possibility certainty semantics remains exponential polynomial problems computed polynomial time requesting non deterministic semantics 
examples classical graph problems easily expressed datalog rst examples classical problems polynomial np complete respectively 
example 
spanning tree graph 
graph arcs stored pairs edges 
spanning tree graph starting source node de ned program st spanning tree connected choice connected connected connected spanning tree non spanning tree spanning tree choice goal ensures node connected subgraph constructed transitive closure incoming arcs delivering tree 
graph spanning tree connecting nodes source node query spanning tree st answer true 
query obviously deterministic 
understand relevance non deterministic semantics observe query returns correct answer possibility semantics 
computation possibility semantics ecient non deterministic semantics cases graph spanning tree 
case possibility semantics insists trying selections choice exponential number non deterministic semantics stops rst 
example 
hamiltonian path graph 
undirected graph nodes arcs stored facts form respectively 
graph contain loops edges form 
consider datalog program hp selects simple paths graph simple path connected choice choice choice connected connected connected simple path non hp path simple path graph hamiltonian path simple path visits nodes exactly query hp path hp answer true 
example shows program example replicated express problems classes conp example 
unique hamiltonian path 
consider datalog program selects simple paths graph labeled respectively 
predicate di veri es path label di erent path label 
label label label simple path connected choice choice label choice connected connected connected simple path non hp sp simple path diff simple path simple path hp non hp sp non hp sp diff query non hp sp solves np complete problem graph hamiltonian path 
query non hp sp solves conp complete problem maximal simple paths hamiltonian 
query non hp sp hp solve problem graph unique hamiltonian path note problem complete belongs class problems unique solution 
program example deterministic queries expressible non deterministic semantics little practical interest 
observe example discussed useful combine fully unbound queries non deterministic semantics bound queries possibility semantics reasonable assumption stable model chosen non deterministic part existential part query 
instance query sp non hp sp outputs hamiltonian path exists returns false 
implementation section shall provide implementation scheme computation choice strati ed queries various types semantics 
rst consider case non deterministic semantics 
query database 
order solve query nd stable model extend choice xpoint proposed positive choice programs cope strati ed negation 
nd strati cation program divide number subprograms pn corresponding stratum 
subprogram re function choice xpoint passing stable model input set facts subprogram input set facts database algorithm algorithm non deterministic query evaluator input query facts output true false var lp list programs int mp facts compute strata lp lp pn mp choice fixpoint mp return 
observe database interpretations represented sets facts type acts 
function compute strata implements wellknown methods nding strati cation detailed description function choice xpoint 
obviously algorithm runs time polynomial size give unique implementation scheme semantics 
sake presentation compound semantics shall consider subclass queries amenable simple implementation 
shown restriction subclass reduce generality approach 
datalog query 
choice disconnected resp 
set choice rules de ning predicate goal resp depends 
cd denote set choice disconnected queries 
result shows class cd expressive power class proposition 
expr cd db proof 
combination proofs part theorem consider separated problems 
query choice disconnected simply replicating rules 
instance query example nding unique hamiltonian path choice disconnected put format simply replicating labeled rules value label moving label argument predicate name predicate symbol sp sp sp sp corresponding replicated rules 
ready describe implementation algorithm choice disconnected query 
simply considering existential goal universal goal true get query possibility semantics certainty semantics respectively 
algorithm works semantics 
query cd predicate symbols respectively 
divide program subprograms resp consists rules having head predicate symbol resp depends depends choice rule depends rg 
de nition choice disconnected query construction 
strati ed program choice datalog programs 
consider strati cation subprograms 
sake presentation assume possible choice rules stratum 
construction choice rules rst stratum write algorithm solving query algorithm choice disconnected query evaluator input query acts output true false var program facts stratified fixpoint solve false return solve true return false 
initial database algorithm proceeds follows 
rst classical strati ed xpoint computes set facts relevant resolving goals common stable model depend choice rules set facts 
function solve computes query database certainty semantics say set facts computed 
nally function solve computes query database possibility semantics say set facts computed 
function solve arguments 
rst argument denotes query goal second denotes semantics query true looking model false third denotes input program arguments denote input output set facts respectively 
procedure solve de ned follows function solve goal bool program facts bool var previous choices list choices choices choices choice bool lp list programs int return true compute strata lp lp pn choices repeat choice choice fixpoint choices choices choice append choices choices choice ftrueg return ftrueg note type acts considered sub type represents program thought de ning edb predicates type choices describes complete set choices includes suitable information order allow function choice fixpoint time red select set choices di erent previous ones stored choice 
function choice fixpoint simple extension original function non deterministic semantics 
new function returns set choices performed called receives previously performed sets choices order select new set choices time 
function returns value false possible choices explored 
procedure extended handle list previous sets choices order select set choices eventually report choices available 
course part easily implemented time polynomial size xpoint computed time polynomial size size polynomially bounded size input database function choice fixpoint runs polynomial time 
surprisingly algorithm runs exponential time iterations repeat function solve 
cycle executed number times equal number di erent sets choices carried procedure choice fixpoint clearly exponential equal number stable models 
interesting observe behavior function cases 
works iteration kept set choices satis es goal corresponds solve query possibility semantics 
hand works iteration stopped soon set choices satisfy goal corresponds solving query certainty semantics 
table summarizes results obtained expressive power various classes datalog queries 
fact expressive power stable model semantics achieved simple declarative constructs strati ed negation choice obvious conceptual interest 
practical signi cance results follows fact programs constructs de ned semantics lack total stable model simplicity intuitive appeal ecient implementation algorithm 
fact class queries ective implementation scheme expressive power higher class classical queries possibility certainty semantics 
query complexity db np db np marek db conp marek db db np db conp db cd db fig 

expressive power datalog datalog 
abiteboul simon vianu 
non deterministic language express deterministic transformation 
proc 
ninth acm pods conference 

abiteboul vianu 
datalog extensions databases queries updates 
journal computer system science pages 

afrati cosmadakis yannakakis 
datalog vs polynomial time 
proc 
tenth acm pods conference pages 

apt blair walker 
theory declarative knowledge 
proc 


deductive database logic prog ed 

blass gurevich 
unique satis ability problem 
information control pages 

chandra harel 
structures complexity relational queries 
journal computer system science pages 

chandra harel 
horn clause generalizations 
journal logic programming vol 
pages 

fagin 
generalized order spectra polynomial time recognizable sets complexity computation karp ed siam ams proc 

gelfond lifschitz 
stable model semantics logic programming 
proc 
fifth intern 
conf 
logic programming pages 

pedreschi sacc zaniolo 
nondeterminism deductive databases 
proc 
nd dood conference pages 

greco zaniolo ganguly 
greedy choice 
proc 
eleventh acm pods conference pages 

immerman 
languages capture complexity classes 
siam journal computing pages 

johnson 
catalog complexity classes handbook theoretical computer science vol 
ed 
north holland pages 

kanellakis elements relational databases theory 
handbook theoretical computer science ed 
north holland pages 

kolaitis 
expressive power strati ed logic programs 
information computation pages 

kolaitis papadimitriou 
negation xpoint 
journal computer system science pages 

lloyd 
foundations logic programming springer verlag berlin 

marek truszczynski 
autoepistemic logic 
journal acm 

naqvi tsur 
logic language data knowledge bases 
computer science press 

papadimitriou 
note expressive power prolog 
bull eatcs pages 

papadimitriou 
computational complexity 
addison wesley 

papadimitriou yannakakis complexity facets facets complexity journal computer system sciences pp 


srivastava 
coral control relations logic 
proc 
th vldb conference 

sacc expressive power stable models datalog queries negation 
unpublished manuscript extended proc 
nd 
structural complexity recursion theoretic methods logic progr 

sacc zaniolo 
stable models non determinism logic programs negation 
proc 
ninth acm pods conference pages 

schlipf 
expressive power logic programming semantics 
proc 
ninth acm pods conference pages 

schlipf 
survey complexity undecidability results logic programming 

structural compl 
recursion theoretic met 


ullman 
principles databases knowledge base systems vol 
ii 
computer science press 

van gelder 
negation failure tight derivations general logic programs 
journal logic programming vol 
pages 

van gelder ross schlipf 
founded semantics general logic programs 
journal acm 

vardi 
complexity relational query languages 
proceedings th acm symposium theory computing pages 
article processed macro package llncs style 
