chapter multi dimensional separation concerns hyperspace approach harold ossher peri tarr ibm watson research center box yorktown heights ny ossher tarr watson ibm com key words separation concerns software decomposition composition modularization evolution traceability limited impact change 
separation concerns core software engineering decades 
led invention interesting effective modularization approaches 
problems supposed alleviate including dangerous expensive invasive change obstacles reuse component integration 
key reason needs different decompositions different concerns different times languages modularization approaches support dominant kind modularization class object oriented languages 
system decomposed extensive refactoring reengineering needed 
multi dimensional separation concerns allows simultaneous separation multiple arbitrary kinds dimensions concerns demand remodularization 
concerns overlap interact 
discusses multi dimensional separation concerns general particular approach providing called hyperspaces support hyperspaces java called hyper 
chapter 
separation concerns par core software engineering 
general form refers ability identify encapsulate manipulate parts software relevant particular concept goal purpose 
concerns primary motivation organizing decomposing software manageable comprehensible parts 
different kinds concerns may relevant different developers different roles different stages software lifecycle example prevalent kind concern object oriented programming data class concern dimension data type defined encapsulated class 
features tur printing persistence display capabilities common concerns aspects concurrency control distribution roles viewpoints nus variants configurations 
refer kind concern class feature dimension concern 
separation concerns involves decomposition software dimensions concern 
achieving clean separation concerns hypothesized reduce software complexity improve comprehensibility promote traceability artifacts software lifecycle limit impact change facilitating evolution non invasive adaptation customization facilitate reuse simplify component integration 
goals important achieved practice 
primarily set relevant concerns varies time context sensitive different development activities stages software lifecycle developers roles involve concerns dramatically different kinds multiple dimensions 
separation dimension concern may promote goals activities impeding criterion decomposition integration appropriate contexts requirements 
example data decomposition object oriented systems greatly facilitates evolution data structure details encapsulated single closely related classes impedes addition evolution features typically include methods instance variables multiple classes 
multiple dimensions concern may relevant simultaneously may overlap interact features classes 
modularization different dimensions concern needed different purposes class feature viewpoint aspect role criterion 
considerations imply developers able identify encapsulate modularize manipulate multiple dimensions concern simultaneously introduce new concerns dimensions point 
multi dimensional separation concerns hyperspace approach software lifecycle suffering effects invasive modification 
modern languages methodologies suffer problem termed tyranny dominant decomposition tar permit separation encapsulation kind concern time 
examples decompositions classes object oriented languages functions functional languages rules rule systems 
impossible encapsulate manipulate example features object oriented paradigm objects rulebased systems 
impossible obtain benefits different decomposition dimensions software lifecycle 
developers artifact forced commit dominant dimension early development artifact changing decision catastrophic consequences existing artifact 
artifact languages constrain choice dominant dimension class objectoriented software different artifacts requirements design documents forced different decompositions obscuring relationships 
believe tyranny dominant decomposition single significant cause failure date achieve expected benefits separation concerns 
term multi dimensional separation concerns denote separation concerns involving multiple arbitrary dimensions concern 
separation dimensions simultaneously 
ability handle new concerns new dimensions concern dynamically arise software lifecycle 
overlapping interacting concerns appealing think concerns independent orthogonal rarely practice 
full support multi dimensional separation concerns opens door demand remodularization allowing developer choose time best modularization concerns development task hand 
multi dimensional separation concerns represents set ambitious goals 
apply irrespective software development language paradigm 
existing mechanism fully satisfies research remains done pursuit goals 
believe necessary achieve order overcome problems associated tyranny dominant decomposition 
remainder organized follows 
section motivates need multi dimensional separation concerns exploring evolutionary scenario simple software system 
section describes multidimensional separation concerns 
section introduces approach hy chapter hyperspaces section describes hyper tool support java illustrates evolutionary scenario 
section discusses related section 

background motivation illustrate serious ubiquitous problems software engineering motivate describing running example involving construction evolution simple software engineering environment see introduced tar 
see facilitates development fairly simple programs consist solely expressions 
expression programs constructed see represented syntax trees asts illustrated 
environment straightforward commonly architecture shown collection tools operates shared data structure ast 
example necessity small simple typical broad class real systems involve multiple tools applications manipulating wholly partially shared domain models 
syntax correct display check eval 
tools shared ast expression see 
multi dimensional separation concerns hyperspace approach scenario matter concern see running example involves initial creation see series evolutionary changes 
assume simplified initial software development process consisting informal requirements specification natural language design uml rum implementation java gos 
initial requirements specification straightforward see supports creation manipulation expression programs 
contains set tools share common representation expressions 
set tools include evaluation tool determines result evaluating expression displays 
display tool depicts expression program textually default display device 
check tool checks expression program syntactic semantic correctness 
straightforward partial uml design see shown 
design uses standard object oriented approach class defined represent kind expression ast node 
class contains constructor accessor modifier methods plus methods eval display check realize required tools standard object oriented manner 
code structured similarly 
create get set methods eval display check create get set methods eval display check expression create get set methods eval display check literal create get set methods eval display check create get set methods eval display check tools implemented methods ast class create get set methods eval display check plus minus create get set methods eval display check 
partial uml design expression see create get set methods eval display check chapter simple example demonstrates different kinds dimensions concerns 
include classes objects classes design code represents class concern 
features particularly statement requirements decompose software coherent features kernel ast includes actual representation expressions independently see tools display feature check feature evaluation feature 
note feature includes corresponding requirement specification design elements code test cases pertain addressing feature concern system 
artifacts traditionally different stages software lifecycle produced different kinds software artifacts 
common ones requirements specifications designs code test plans 
noted earlier refer different kinds concerns dimensions concern 
informally dimension concern simply approach decomposing organizing structuring software concerns particular kind 
note despite clear presence different dimensions concern subset identified encapsulated explicitly languages example artifacts features requirements artifact objects design code artifacts 
resulting see clients request changes possible versions see include subsets tools capabilities 
possible impose optionally checks conformance programming styles 
possible log selectively execution see 
set modifications suggests set concerns configurations new requirement permit different variants see different tool configurations essentially request able mix match tools see 
think see representing family software par member family contains combination tools 
feature style checking new concern feature dimension 
logging logging kind feature see tools coherent tool may optionally affect features execution see 
design patterns initial version software simple require design patterns gam new requirements opportunities benefit extra flexibility design patterns offer 
example logging capability mod 
multi dimensional separation concerns hyperspace approach readily observer 
perspective comprehensibility may beneficial look software terms design patterns architected kel 
deep analysis clear making changes satisfy simple requirements means simple matter standard object oriented technology 
allowing selection features addition optional style checking requires substantial reengineering probably introduce design patterns visitor provide needed flexibility 
support logging requires invasive changes method logged perform logging directly participate observer design patterns 
detailed analysis similar example appeared tar 
tyranny dominant decomposition primary reason difficulties new requirements deal concerns encapsulated original see 
draw important simple scenario 
different decompositions different properties bad dimension concern promotes different subsets key software engineering properties noted earlier importantly facilitates different kinds change 
example objects units data abstraction aid isolating users details data representation implementation localizing effects representation changes 
hand class decomposition results negative phenomena respect features scattering tangling 
features scattered multiple classes class ast design implementation display method key method display feature 
display method class isolated exists tangled methods supporting features class 
scattering tangling complicate understanding particular functions features realized software 
change function feature display high impact scattering implies entails modifications classes define display methods tangling implies modifications inadvertently affect features 
dimensions concern positive negative software engineering characteristics best dimension purposes reason different artifact languages different purposes 
different dimensions useful different reasons different times example demonstrates clearly crucial points 
set dimensions concern set concerns dimensions chapter vary time 
note example design patterns configurations logging dimensions relevant initial software relevant new requirements 
second fact dimension concern provides subset desirable software engineering benefits means developers find different dimensions useful depending developer role stage development particular goals wishes accomplish 
example adding new style check feature simple additive software decomposed feature features encapsulated feature retrofitted object dimension 
concerns match cut tar modification conceptually difficult invasive high impact costly 
anticipation causes deeply software engineering notion anticipating designing kinds changes goal limiting impact evolution 
example argue developer anticipated need new features style checking designed software visitors start facilitated style checking 
true believe anticipating planning changes possible 
anticipation panacea evolution 
clearly possible anticipate major evolutionary directions 
possible building evolutionary flexibility comes price increases development cost increases software complexity reduces performance 
observation holds identifying dimensions concern possible identify encapsulate possible dimensions resulting software probably complex unwieldy small number dominant dimensions encapsulated 
multiple dimensions simultaneously artifact formalisms programming languages design notations uml general provide small number means decomposing software support dimension concern 
fact different artifacts software may written languages different dominant dimensions leading conceptual mismatches artifacts poor traceability complicates evolution 
example requirements specified function feature example customers specify requirements think software object oriented designs code decomposed classes 
developers continuously translate different expressions concepts different formalisms 
artifact language specifically supports dimension possible developers identify separate encapsulate concerns dimen 
multi dimensional separation concerns hyperspace approach sion particular artifact 
seen kinds concerns identified encapsulated manipulated class entities software engineering benefits provide achieved 
tyranny dominant decomposition concerns developer point lifecycle match ones encapsulated 
symptoms kinds scattering tangling cascaded high impact changes scenario demonstrates 

breaking tyranny multi dimensional separation concerns observations previous section lead important requirements separation concerns mechanisms 
term multidimensional separation concerns denote separation concerns mechanisms satisfy requirements necessary developers able identify encapsulate kinds dimensions concern simultaneously 
dimensions created equal dimensions preclude decomposition dimensions 
developers able identify new concerns new dimensions concern incrementally time course software lifecycle 
example possible identify dimensions concerns dimension dimension introduced identify introduce needed having software invasive modifications 
developers required know pay attention concerns dimensions concern affect particular activities 
key purpose separation concerns reduce amount complexity developer deal 
forcing developers know concerns increase complexity 
possible represent manage overlapping interacting concerns 
noted earlier independent orthogonal concerns particularly pleasing properties overlapping interacting concerns common real world 
representing concerns possible identify points interaction maintain appropriate relationships concerns evolve 
separation concerns clearly limited concerns separated integrated jackson notes having divided conquer reunite rule jac 
separation chapter concerns mechanism include powerful integration mechanisms permit integration separate concerns 
important additional goal opinion defining characteristic multi dimensional separation concerns ability impose new decompositions existing software decompose concerns new dimension explicit refactoring reengineering invasive change 
call capability demand remodularization 
allows developer choose time best modularization development task hand perturbing existing ones 
addition reducing impact change substantially feature opens door noninvasive system refactoring reengineering 
potentially ways achieve multi dimensional separation concerns 
discussed section variety modern mechanisms break tyranny extent 
rest describes approach called hyperspaces 
goals listed extremely challenging research remains fully achieved 

hyperspace approach developed particular approach multi dimensional separation concerns refer hyperspaces 
hyperspaces permit explicit identification concerns importance encapsulation concerns identification management relationships concerns integration concerns 
decisions defining hyperspaces aimed achieving limited impact change simplified evolution 
deliberately left detailed decisions open allow variations different tradeoffs 
describe hyperspaces section illustrate expression see example section context hyper tool supports hyperspaces java 
concern space units introducing terminology applies separation concerns approaches general 
software consists artifacts comprise descriptive material suitable languages 
unit syntactic construct language 
unit example declaration statement state chart class interface requirement specification coherent entity described language 
distinguish primitive units treated atomic compound units group units 
example method instance variable 
multi dimensional separation concerns hyperspace approach formance requirement treated primitive unit class package collaboration diagram treated compound unit 
concern space encompasses units body software set software systems component libraries product family 
example concern space expression see contains software artifacts described section initial system extensions 
job concern space organize units body software separate important concerns describe various kinds interrelationships concerns indicate software components systems built integrated units address concerns 
identify distinct components separation concerns identification encapsulation integration 
identification process selecting concerns populating units pertain 
example identify display feature concern expression see comprising display requirement display methods uml design diagrams java code 
identification useful fully realize benefits separation concerns concerns encapsulated manipulated class entities 
java class example encapsulated concern 
display feature encapsulated concern java units scattered java classes 
concerns encapsulated possible integrate create software addresses multiple concerns 
standard java classes integrated simply loading combination import specifications class path determines relationships 
concerns classes interfaces integrated standard java 
identification concerns concern matrix hyperspace concern space specially structured support approach multi dimensional separation concerns 
distinguishing characteristic units organized multi dimensional matrix 
axis represents dimension concern point axis concern dimension 
explicit dimensions interest concerns belong dimension concerns affected units 
coordinates unit indicate concerns affects note concern identification done top bottom depending stage software lifecycle 
design activities concerns may selected units may developed concerns selected 
system evolution units may exist new concerns identified 
case identification process determines existing units address new concerns 
chapter structure clarifies unit affects exactly concern dimension 
dimension viewed partition set units particular software decomposition 
single concern dimension defines hyperplane contains units affecting concern 
matrix structure permits uniform treatment kinds concerns allows developers navigate slice matrix desired concerns 
believe concerns dimension disjoint need unrelated expect concern structure hierarchies dimensions valuable oss kim 
remains issue research 
dimensions concern naturally partition concern space 
example unit system addresses exactly feature feature dimension naturally partitions units 
units system may pertain feature error reporting routine see 
handle situation dimension hyperspace specially designated concern containing units interest perspective dimension 
units hyperspaces organize manipulate units written language course tool support language specific 
date worked units granularity declarations methods functions classes uml diagrams lower level constructs statements expressions 
believe hyperspaces extended handle finer grained units disciplined fashion remains issue research 
concern specifications concern specifications hyperspaces serve identify dimensions concerns specify coordinates unit matrix 
simple approach concern mapping consisting specifications form dimension concern name unit collection units directory package pattern representing units collections units 
examples concern mappings java units section 
general concern specifications complex specify meaning dimension concern formally informally 
styles specification 
extensional specifications explicitly enumerate units concern 
intensional specifications specify properties 
multi dimensional separation concerns hyperspace approach concerns units determine unit pertains concern 
intensional specifications advantage conveying intent explicitly able accommodate changes underlying set units manual intervention 
encapsulation concerns hyperslices concern matrix identifies concerns organizes units dimensions concerns 
allows useful sets units identified concerns affect units pertaining single concern concerns areas overlap concern 
matrix support encapsulation concerns sets units simply treated modules additional mechanism 
hyperspaces additional mechanism hyperslices sets units declaratively complete 
units typically related variety ways example function unit may invoke may define variable declaration unit 
kinds interrelationships exist units different concerns high coupling results 
decouple hyperslices defined declaratively complete declare refer 
example hyperslice minimum include declaration function members invokes variable members 
hyperslice need provide full definition declarations may declare function providing implementation 
declarations specifying partially fully formally informally properties hyperslice relies 
declarative completeness important eliminates coupling hyperslices 
hyperslice referring depending specific hyperslice hyperslice states needs means declarations remaining selfcontained 
require provide full definitions abstractly declared entities fully complete appropriate hyperslice provide shown section 
approach fosters flexible configuration reuse hyperslices crucial achieving limited impact change 
example suppose display hyperslice contains unit plus display uses plus accessor function defined kernel hyperslice 
display declaratively complete augmented declaration plus necessarily implementing 
plus display refer local declaration accessor function kernel 
eliminates coupling chapter display kernel favor assertion new declaration eventually bound unit hyperslice provides suitable implementation 
set units fashioned valid hyperslice declaration completion providing declarations referenced declared set 
extent process performed automatically straightforward language specific analysis 
automatic declaration completion determine declarations needed create valid declarations 
semantic information associated declarations formal informal specifications matter probably requires human intervention 
specifications declarations extent determined automatically analysis declaration completion remain issues research 
set units hyperslice declaration completion arbitrary concerns encapsulated hyperslices 
limitations underlying artifact language concern possible synthesize hyperslice contains just units pertaining concern plus declarations 
relationships concerns units concerns hyperslices exist isolation interrelated number different ways 
example display feature expression class related overlap share units display method part concerns change concern may affect 
example choose integrate syntax check style check hyperslices produce check feature performs syntax style checks 
case hyperslices related integration relationships indicate combined 
identify distinct classes relationships context insensitive context sensitive 
overlap example context insensitive relationship display feature expression class related way long share units common 
integration relationships exemplify context sensitive relationships syntax check style check concerns relationship integrated context create check tool relationship inherent definition 
common kinds concern relationships generalizes subsumes precludes hyperspaces permit identification representation context insensitive context sensitive relationships analysis impact change integration 
multi dimensional separation concerns hyperspace approach integration concerns hyperslices building blocks integrated form larger building blocks eventually complete systems 
example create working see containing display hyperslice discussed display integrated hyperslice provides unit bound new declaration plus provide implementation 
refer kind binding relationship units correspondence 
correspondence context sensitive relationship 
occurs context integration particular software component system declaration unit may associated example different implementation units different systems 
hyperspace integration context hypermodule 
hypermodule comprises set hyperslices integrated set integration relationships specify hyperslices relate integrated 
correspondence important integration relationship indicating specific units different hyperslices integrated 
additional details needed specify just integration occur 
example methods correspond override integrated system executed 
order return value computed 
types parameters match transformations needed reconcile 
example sufficient integrate corresponding declarations plus display kernel results kernel implementation called plus display run time 
conceptually practice tool integration specified integration relationships performed produce set integrated units 
set declaratively complete hyperslice 
hypermodule thought composite hyperslice produced integrating number subsidiary hyperslices 
implies nested allowing large systems built successive integration 
declarative completeness correspondence detailed integration relationships represent fairly loose forms binding promotes evolvability 
hyperslices depend directly software artifacts subject completeness constraint declaration unit system correspond compatible definition implementation hyperslice 
replacing definition implementation non invasive hyperslices merely requires redefinition integration relationships 
correspondence provides great chapter ity directly supports substitutability including mix match play 
completeness constraints imposed needed code ensure run necessary hypermodule represents building block reusable component framework remaining needs satisfied integration 
different types correspondences occur association declarations definitions 
example requirements unit may correspond design units satisfy unit implementing eval function may correspond unit encapsulates code check previously cached result evaluating 
correspondence relationships deliberately left model details depend factors including language units written constructs treated primitive compound units extent environment support correspondence intent provide model multiple semantics correspondence multiple realizations hyperspaces specified 
correspondence relationships hyper described section extend composition rules earlier subject oriented programming oss 
clearly issue corresponding units compatible implementation unit satisfies declaration unit requirements design unit satisfies requirement involves syntactic semantic issues 
characterize check compatibility remains issue research 
resolved expect checking semi automatic general ultimately software engineers understand corresponding units determine compatible best integrate 
encapsulate kinds software artifacts components fragments thereof integrate different ways 
example entire artifact requirements specification design code modeled hypermodule 
software system hypermodule subject completeness constraint 
system hypermodule consist hyperslice artifact composition relationships describing artifacts interrelate example indicate particular design code units elaborate requirements units 
alternatively consist subsidiary hypermodule feature integration relationships specifying features interact 
feature hypermodule turn consists hyperslice artifact integration relationships 
multi dimensional separation concerns hyperspace approach 
hyper hyperspaces java implemented tool called hyper hyp supports hyperspaces 
currently supports language defining units java begun looking incorporating uml cla 
section describe hyper illustrate describing application development evolution expression see example 
conclude section summarizing hyper model hyperspaces embodies overcome problems described section achieve software engineering goals noted section 
tool hyper permits identification encapsulation integration composition multiple dimensions concern realizes model hyperspaces section 
takes input project specification identifies units java code hyperspace concern mapping describes units organized concern matrix hypermodule specification describes controls composition 
describe detail 
hyper stages software lifecycle initial development extension evolution software initially developed 
hyper includes visual wysiwyg support specifying integrating concerns 
support preliminary hyper allows developers identify manipulate concerns focus particular dimensions concern create trial integration concerns 
developer starts creating hypermodule choosing set concerns default relationship concerns described 
hyper creates valid hyperslices concerns automatic declaration completion composes specified relationship 
resulting composed hyperslice displayed 
desired developer specify new relationships examine new result 
modify original concerns hyper automatically recompute relationships deactivating deleting longer apply create new composed hyperslice cases correct close desired 
interaction continues composed hyperslice meets developer requirements 
development hyper influenced important design goals intended foster easy incremental adoption 
want chapter require developers adopt new programming languages special purpose compilers virtual machines 
implemented hyper generate standard java class files 
support multi dimensional separation concerns occurs outside artifact language java 
second wanted hyper provide useful benefits applied standard java programs additional benefits applied programs written hyper mind 
able identify encapsulate integrate concerns standard java programs requiring special coding conventions packaging 
developing hyper expression see hyperspace convey sense different ways developers leverage hyper capabilities software development lifecycle part development process expression see 
small illustrations code shown full runnable code see example available hyperspace web site hyp 
initial development hyper illustrate incremental adoption hyper assume initial see developed standard object oriented design implementation techniques hyper produce design code shown section 
feature concerns identified encapsulated code 
mix match features developing product lines hyper change requirements entailed permitting creation different versions expression see different subsets features 
hyper help ways 
provides demand remodularization ability identify encapsulate new dimensions concern time invasive changes 
developers introduce needed feature concerns hyper manipulate concerns class entities 
second hyper composition capability permits selective integration concerns creation variants expression see integrate different subsets available features needed non 
hyper accomplish task developer performs steps 
multi dimensional separation concerns hyperspace approach create project specification developers create hyperspaces initially specifying set java class files contain code units populate hyperspace 
analogous creating project repository integrated development environment 
hyper gui developers choose add class files time browser batch system developers write project specification hyperspace expression see hyperspace class com ibm file smith com ibm util set class project specifications contain wildcards shown java fully qualified class names path names files 
hyper automatically creates dimension class file dimension creates concern dimension class file loads 
contents concerns units interfaces classes methods member variables corresponding class files 
create concern mappings achieve mix match features desired developer encapsulate features class concerns 
creating new dimension feature dimension describing existing units hyperspace address concerns dimension 
specifies concern mappings package com ibm feature kernel operation display feature display operation check feature check operation eval feature eval mapping indicates default units contained java package com ibm address kernel concern feature dimension 
feature dimension exist hyper create kernel concern processing concern mapping 
mappings indicate methods named display check eval address display check eval features respectively 
concern mappings override apply 
illustrates approach employed hyper specification general rule followed exceptions clarify shorten specifications 
concern matrix contains dimensions class file feature 
unit addresses exactly concern dimension 
example method expression display addresses concern com ibm expression class file dimension display concern feature dimension 
chapter create feature concerns identified developer create versions see contain different sets features defining 
hypermodule specification comprises set hyperslices specified terms concerns identified concern matrix 
examples include individual concerns unions intersections complements concerns 
hyper performs declaration completion automatically create valid hyperslices 
integration relationships hyperslices units 
general rules determining relationships followed exceptions 
example hypermodule specification defines version see contains kernel display check capabilities hypermodule see display check hyperslices feature kernel feature display feature check relationships hypermodule kernel display check concerns related integration relationship 
byname indicates units different concerns considered correspond names signatures appropriate 
merge indicates corresponding entities combined include details example members corresponding classes brought composed class 
integration relationship hyper composition rules defined subject oriented programming oss 
hyperslice results composing concerns contains ast classes just kernel display check functionality 
particular eval methods 
developer satisfied composed hyperslice ask code generated 
hyper generates java class files composed pseudo source files composed hyperslice 
class files executed java classes pseudo source files source debugging sessions 
example composed program represents executable version expression see contains kernel display check functionality 
versions environment created similarly defining new hypermodule specifications composition 
note creation entirely non invasive retrofitting design patterns usually needed achieve similar result 
part scenario demonstrated utility hyper ondemand remodularization integration capabilities existing code 
notice feature concerns identified separated initial development permit encapsulated 
notice 
multi dimensional separation concerns hyperspace approach concerns reusable component integrated different contexts different concerns coupled 
properties imply powerful support development configuration variations product lines families 
addition style checking expression see clients eventually requested enhancement permits optional style checking expression programs 
hyper allows new feature developed separately existing features non 
developers write code new feature new separate java package packages call hyperslice package deliberately written encapsulate concern 
able integrate package concerns needed 
adds tremendous flexibility code architectures developers select range software development processes 
helps illustrate point 
depicts code new package realizes style checking feature 
notice package contains solely code needed implement style checking feature plus declarations shown foreign accessor methods kernel 
class structure similar original system identical style checking affects expression classes 
important feature multi dimensional separation concerns hyper different concerns different perspectives views domain model development 
different views reconciled specifying appropriate relationships concerns 
expression check literal check check check 
style checking hyperslice package chapter code complete compiled java compiler developer add resulting class files existing hyperspace 
results automatic addition new concerns class file dimension class files style checker package 
developer define additional simple concern mapping create style checker feature concern package com ibm feature style checking feature identified concern developer create variants expression see contain style checking desired way mix match features described earlier 
addition style checking demonstrated important feature hyper 
shown section developers need hyper initial development development choose initial development part system achieve separation concerns code architectures difficult impossible achieve standard object oriented techniques 
extra flexibility derive new languages paradigms style checker example written standard package java integration composition features hyper 
important advantages uses including ability treat hyperslice packages reusable components 
hyperslice packages new contexts composition relationships possibly referring special purpose glue code include adaptation necessary white box reuse 
ability structure code design lines requirements cla enhancing traceability encapsulating code realizes particular requirement hyperslice packages 
retrofitting design pattern logging final change explore addition optional logging debug tracing expression see 
modification entails making methods various classes features print log messages method entry exit 
clearly logging capability specific expression see expression classes methods logging capability multiple contexts 
developers determined pre existing generic reusable logging component satisfy new user requirement 
reusable component library contains implementation observer design pattern particular instantiation pattern 
multi dimensional separation concerns hyperspace approach implement logging shown 
case developers hyper retrofit logging capability encapsulated separate hyperslice package reusable library integrating see 
hyper permits change additively 
developer simply loads existing component class files hyperspace rest system specifies appropriate concern mapping create new feature concern calls logging 
common definitions object globals observer object params logger object params register observer unregister observer notify object params 
logging hyperslice package string classname string methodname string classname string methodname instrument methods existing code developer defines hypermodule integrate logging feature concerns wants logged 
example create version expression see contains kernel evaluation syntax check features features logged define hypermodule hypermodule see logged eval check hyperslices feature kernel feature check feature eval feature logging relationships merge feature logging bracket classname methodname classname methodname chapter merge relationship expands relationship indicates unit logging concern feature dimension merged class units hyperslices names differ 
example merged expression class feature kernel 
types units merged classes case 
bracket relationship indicates method name underscore bracketed methods 
example display method composed hyperslice call entry exit 
parameters passed bracketing methods names class method enabling logger identify method called 
bracket relationship useful circumstances developers need add behavior methods 
notice development scenario entailed integration generic reusable components observer design pattern logging existing system designed 
common problem developers occurs forms stages software development example integrating commercial shelf database library component software initial development retrofitting design pattern component software course evolution 
hyper facilitates wide range integration activities 
mechanisms integration customization example shows 
note multi dimensional approach permits integration customization concerns dimensions 
example developers chose add logging subset features equally decided add subset classes mix features classes 
difference set hyperslices specified hypermodule 
ability treat concerns equal provides developers ability focus attention precisely part system care accomplish goals 
evaluation achieving development evolution scenarios just described demonstrate ways developers hyper facilitate broad range common software engineering activities software lifecycle 
conclude evaluating hyper briefly respect helps developers achieve desirable properties described section 
multi dimensional separation concerns hyperspace approach comprehensibility structure hyperspaces enable software engineers focus dimensions concerns importance represented hyperspace need examine hyperplane containing concern 
facilitates comprehensibility 
ability define new concerns demand permits developers identify concerns ongoing basis arise course software lifecycle 
reduces initial design development burden developers forcing identify concerns front possibly important point software lifecycle 
improves comprehensibility permitting developers identify concerns important imposing cognitive burden identifying separating potentially useful concerns advance 
ability separate simultaneously concerns importance enables developers focus interactions concerns identify encapsulate new concerns 
hyperspaces explicit ways concerns affect intersect interrelationships involved 
interactions extremely important evaluating impact change concerns working particular concern 
concern intersections turn useful concerns style checking binary operations intersection feature class concerns 
hyperspaces provide identification reification concerns 
structure hyperspace aids identification types hidden concerns 
example definition dimensions precludes situations concerns dimension overlap 
property helps identify kinds potential encapsulation errors ranging failure identify concerns poor separation concerns coupling concerns 
evolvability limited impact change traceability hyperspaces greatly facilitate aspects evolution 
enable additive invasive extension customization extraction hyperslices changes anticipated example shows 
significant part goal achieving limited impact change 
second addition units concerns dimensions hyperspaces clearly straightforward little impact existing concerns 
process adding units hyperspace defining new concerns forces developers determine new units concerns affect existing concerns units indicating new units concerns affect existing concerns units 
hyperspaces help limit impact removing concerns typically invasive high cost evolutionary activity 
common problem removal changes tend cascade large chapter parts software system 
including declarative completeness requirement part definition hyperslices ensured removal units concerns worst affect set units concerns played explicit roles relationships 
model eliminates direct dependencies hyperslices declarative completeness 
removal unit hyperslice hyperslice hyperspace may eliminating units units related breaking followed non establishment new relationships units hyperslices fulfill intended semantics concern relationship 
impact removal limited particular hyperslice affects relationships 
dangling relationships result removing units identify concerns separated appropriately identify concerns removed removing display requirement certainly want remove design code concerns satisfy requirement 
model promotes traceability limited impact change 

related prior tar discussed modern approaches introduced novel modularization mechanisms related multi dimensional separation concerns subject oriented programming har oss aspectoriented programming contracts hol role models van adaptive programming mez viewpoints nus catalysis dso 
viewpoints pertain object oriented systems dominant decomposition class 
introduces mechanism analogous hyperslices segregate design code addresses non class concerns 
approaches provide benefits hyperslices terms identification encapsulation concerns dominant decomposition dimension 
approaches provide benefits degree flexibility composition concerns useful dimensions tar :10.1.1.43.7026
valuable contributions satisfying goals multi dimensional separation concerns satisfies 
key distinguishing characteristic hyperspaces relative mechanisms known support demand remodularization ability extract hyperslices encapsulate concerns separated original software artifact 
lowers entry barrier greatly 
multi dimensional separation concerns hyperspace approach evolution opens door non invasive refactoring reengineering 
important characteristics hyperspaces help differentiate approaches include hyperspaces restrict nature number dimensions concern permitted 
allow new concerns dimensions added time apply existing units demand remodularization new units 
hyperslices grouping constructs collect software pertains particular concern 
contracts role models similar aspects composition filters propagation patterns finer grained dealing part concern methods share weave specification filtration needs particular object 
integration kinds relationships separate artifacts 
reduces coupling benefits 
hyperslices reusable different integration relationships different contexts specify details reused contexts 
separate relationship specifications permit hyperspace approach applied changing artifact languages 
composition filters similar attachment specified separately filter code aspects contain weave specifications code bundled 
hyperslices complete separately understandable reusable 
possible understand hyperslice isolation conceptually possible specify semantics 
conceptually possible understand hypermodule combining understanding component hyperslices composition relationships necessary create composed artifact examine 
details semantic specification hyperslices composition remain important area research 
hyperspaces support primitive units granularity declarations functions members 
limitation simplifies understanding hyperslices implementation composition oss tar 
concerns span lifecycle phases 
details making practical reality remain worked 
hyperspaces relate incorporate results areas related 
loose binding accepted means helping limit impact forms change 
area software architecture sha identified need separate software components hyperslices connectors relationships 
similarly earlier precise interface control pic wol identified benefits representing particular kind inter component interaction provides re chapter quests 
declarative completeness requirement separately specified composition relationships spirit similar approaches 
barrett bar describe spectrum mechanisms achieve connections components ranging tightly loosely bound early late binding 
attempted choose point spectrum balances need limit impact change permitting software components know need analyzability readily accomplished presence tighter binding 

number important problems software engineering resisted general solution including problems related comprehensibility traceability evolvability 
believe problems share common cause failure identify encapsulate simultaneously concerns importance software system inability different dimensions concern different purposes system lifetime 
multi dimensional separation concerns ambitious set goals need achieved address problems fully 
approach achieving called hyperspaces realization tool support java called hyper 
hyperspaces permit identification encapsulation integration kinds concerns standard software initial system development retrospect need arises course evolution 
allow set concerns interest grow change 
permit explicit representation relationships units concerns dimensions loose coupling concerns demand remodularization 
allow representation concerns span software lifecycle example display concern requirements design code test module units associated 
developers choice apply hyperspaces hyperspaces interfere existing software processes developers may choose modify processes take advantage extra flexibility hyperspaces give entry barrier developers quite low 
clearly early stage largely unproven practice 
considerable body experience related research exists support claim multi dimensional separation concerns key software engineering issues today important area research 
questions remain sorts concerns important real software development projects 
structure nature interactions concerns software ar 
multi dimensional separation concerns hyperspace approach 
understand specify encapsulated concerns integration 
mechanisms needed achieve goals multi dimensional separation concerns 
scale 
tool support needed 
software process improved take advantage ideas tools 
open questions answered tools built possible apply multi dimensional separation concerns real development explore benefits limits 
allen garlan 
formal basis architectural connection 
acm transactions software engineering methodology july 
andersen 
system design composing structures interacting objects 
madsen editor ecoop european conference object oriented programming pages utrecht june july 
springer verlag 
lecture notes computer science 
bar barrett clarke tarr wise 
framework event software integration 
acm transactions software engineering methodology october 
cla clarke harrison ossher tarr 
subject oriented design improved alignment requirements design code 
proceedings conference object oriented programming systems languages applications pages november 
acm 
dso souza wills 
objects components frameworks uml catalysis approach 
addison wesley 
gam gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
gos james gosling bill joy guy steele 
java language specification 
addison wesley 
har harrison ossher 
subject oriented programming critique pure objects 
proceedings conference object oriented programming systems languages applications pages september 
acm 
hol holland 
specifying reusable components contracts 
madsen editor ecoop european conference object oriented programming pages utrecht june july 
springer verlag 
lncs 
hyp hyperspace web site www research ibm com hyperspace 
jac jackson 
complexities computer systems implications system development 
proceedings international conference computer systems software engineering pages 
kel keller pag 
pattern reverse engineering design components 
proceedings st international conference software engineering icse pages may 
kiczales 
aspect oriented programming 
ecoop european conference object oriented programming 
invited presentation 
chapter kim doug multidimensional tree structured spaces separation concerns software development environments 
position oopsla workshop multi dimensional separation concerns object oriented systems www cs ubc ca murphy workshop oopsla 
mez mezini lieberherr 
adaptive plug play components evolutionary software development 
proceedings conference object oriented programming systems languages applications october 
nus nuseibeh kramer finkelstein 
framework expressing relationships multiple views requirements specifications 
ieee transactions software engineering october 
oss ossher 
case study structure specification grid description scribe 
ieee transactions software engineering november 
oss ossher kaplan katz harrison kruskal 
specifying composition 
theory practice object systems 
oss ossher tarr operation level composition case join point 
ecoop workshop reader pages july 
springer verlag 
lncs 
par parnas 
criteria decomposing systems modules 
communications acm december 
par parnas design development program families 
ieee transactions software engineering march 
rum rumbaugh jacobson booch 
unified modeling language manual 
addison wesley 
sha shaw garlan 
software architecture perspectives emerging discipline 
prentice hall april 
tar tarr clarke 
object management system software engineering environments 
proceedings acm sigsoft symposium foundations software engineering pages december 
tar tarr ossher harrison sutton jr degrees separation multidimensional separation concerns 
proceedings st international conference software engineering icse may 
tur turner fuggetta wolf 
feature engineering 
proceedings th international workshop software specification design april 
van notkin 
roles components implement designs 
proceedings conference object oriented programming systems languages applications pages october 
acm 
wol wolf clarke wileden 
toolset supporting interface control analysis software development process 
ieee transactions software engineering march 
