metrics refactoring frank simon frank claus lewerentz software systems engineering research group technical university cottbus germany mail simon cl informatik tu cottbus de refactoring key issue increase internal software quality software lifecycle 
identifying structures refactorings applied explained subjective perceptions bad taste bad smells automatic refactoring location finder difficult 
show special kind metrics support subjective perceptions effective efficient way get support decision apply refactoring 
due fact software developer authority provide powerful metrics software visualisation support developers judging products 
demonstrate approach typical refactorings tool supporting identification case studies application 
longer object oriented systems probable systems maintained pres optimised goal perfective maintenance corrected respect identified defects corrective maintenance adjusted changing environment adaptive maintenance 
activities subsumed reengineering area additional changing activities difficult apply typical reengineering activities change external behaviour 
main goal mini reengineering activities improve understandability simplify reengineering activities 
fowler calls activities refactorings defines change internal structure software easier understand cheaper modify changing observable behaviour 
refactoring sense activity accompanies phases software lifecycle cf 
lune attempts just understand foreign code motivate refactorings adding comments 
fowler presents different kinds refactorings main problems applying technique large systems question apply refactoring 
question difficult fowler statements refactorings human intuition subjective perceptions smells gives impression refactorings automatically 
fowler explicitly mentions metrics experience set metrics rivals informed human intuition 
shows metrics help identify special anomalies certain refactorings 
fowler believe developer authority decision apply refactoring 
tool support necessary assist human intuition efficient effective way 
believe software visualisation static structure analysis metrics key issue task 
demonstrate support intuition concentrate typical refactorings focus members class methods attributes 
briefly refactorings corresponding bad smell help identify parts system apply corresponding refactoring cf 
move method move method class class uses method method class turned simple delegation removed completely 
bad smell motivating refactoring method uses features class class defined 
metrics refactoring move attribute move attribute class class uses attribute users attribute changed 
bad smell motivating refactoring attribute class class defined 
extract class create new class move cohesive attributes methods old class new class 
bad smell motivating refactoring class offers functionality provided classes 
inline class move members class class delete old class 
bad smell motivating refactoring class doing 
respect special character refactorings constraints satisfied support available long delays 
application refactorings take hours fowler suggests longest refactoring take hour creation support take seconds 
support give immediate feedback refactoring application 
feedback necessary demonstrate impact applied refactoring understandability 
support integrated case environment refactorings applied source code 
support easily understandable adjustable individual goals 
internal quality subjective impression explicit analysis tool adaptable subjectivity 
support available different object oriented languages 
advantages refactoring browser tool smalltalk environment supports execution refactoring cf 
chapter completely embedded special case tool hand largest disadvantage reduction language smalltalk 
solution automatically identify explained bad smells quickly generate adjustable powerful software visualisations different object oriented languages 
creation support started case tool displayed objects visualisation linked corresponding sourcecode parts case tool 
section briefly explains generic visualisation framework generic similarity measure 
section applies framework refactorings gives examples 
section presents tools created automatic visualisation 
section gives ideas apply visualisation large systems classes 
closes summary 
distance cohesion refactorings including explained section violations principle put belongs 
measure degree parts belong exist cohesion measures cf 

generic cohesion measure firstly introduced sil le strongly connected theory similarity dissimilarity 
correspondence bunge define similarity entities relates collection shared properties 
suppose set considered properties special similarity viewpoint 
property set possible define metrical distance measure follows cf 
sil le dist considered entities properties possesses 
opposite fowler call fields attributes 
refactoring move attribute equal refactoring move field ff 
metrics refactoring defined distance measure supports measurement cohesion 
bieman kang define cohesion cohesion refers degree module components belong 
respect distance concept means parts low distances cohesive parts higher distances cohesive 
important special role definition property set similarity depends lot point view 
calculating degree similarity distinct property sets lead identical opposite entity pair 
instantiation generic measurement framework consists steps 
decide kinds entities measured 
example sil le sil classes measured resulting distances motivate move class subsystem subsystem 

decide kind properties considered particular similarity concept 
example properties set superclasses subclasses class names methods features cf 
sil le 
respect goal step class members considered distances calculated methods attributes 
second step depends special view cohesion 
explained refactorings section depend usage relations entities belong 
section explains distance concept different refactorings detail 
distance motivated refactorings refactorings relations features heavily belong class 
respect distance concept translated requirements identification possible refactoring move method attribute extract inline class reduced identification high distances class members low distances members foreign class 
subsection application distance cohesion concept explained refactorings steps 
identify corresponding properties distance concept 
typical pathological case application refactoring sense 
calculate distances case study identified give intuitive visualisation 
possible distance geometric equivalent euclidean distance 
special techniques multidimensional scaling spring embedding cf 
chen possible calculated distances dimensions 
fast spring embedder program produce models virtual reality modelling language vrml displayed vrml client 
identification move method situations considered entities refactoring methods 
methods methods attributes helpful add attributes set considered entities 
apply distance concept identification move method refactoring sense consider properties feature consist method attribute considered method considered attribute directly methods methods 
directly attributes 
calculation distance entities needed union definition effect method attributes methods classes low distance members methods locally defined methods attributes high distance 
imagine code classes metrics refactoring class class public static void static void static void static int static int class class public static void class class class static void static void static int static int location method bad smell uses features class 
refactoring move method applied method 
automate identification problem distances entities methods attributes calculated 
resulting distances displayed called distance matrix single element represents distance entity entity abbreviation ma method aa attribute 
ma ma ma mb mb mb aa aa ab ab ma ma ma 
mb mb mb aa aa ab ab mentioned spring embedder arranges entities euclidean space calculated distances correspond displayed distances 
geometrical positions produce vrml world shown visualisation vrml world uses parameters green light displayed figures elements class blue dark displayed figures elements class 
attributes displayed squares methods displayed spheres 
better understanding possible click displayed display corresponding source code case tool measurement visualisation started 
moving mouse cursor displayed element shows additional information element name corresponding class file subsystem list relations 
feature displaying member names shown turned object separately interactive way 
presentation vrml worlds satisfactory difficult guess distances colours properties 
additionally features easy understanding space related navigation possibilities fly fly cf 
pa 
metrics refactoring visualisation strongly recommends simple understandable way move indicated arrow class class 
cases sense leave situation unchanged 
developer authority possible 
visualisation support analysis 
identification move attribute situations case considered entities attributes 
attributes sense methods helpful add methods set considered entities 
set considered properties equivalent set properties refactoring move method underlying relationships 
give example pathological case modify source code example section class class public static void static void static void static int static int fig 
vrml world motivates refactoring move method class class public static void class static void class static void class static int static int quite clear location attribute better class class 
having calculated distances positions graphical objects euclidean space vrml world diagram shown analysed visualisation parameters taken section metrics refactoring fig 
vrml world motivates refactoring move attribute identification extract class inline class situations things easily seen visualisation supports decision apply refactoring move attribute attribute blue dark box cluster right cf 
right arrow 
additionally obvious attribute attribute displayed little box clusters elements cf 
left arrow position outside represents high distances members 
attribute sense delete special case inheritance cf 
section 
section refactorings extract class inline class considered reverse class extracted methods attributes class separated class extracting undone inlining extracted members original class 
opposite true 
means decision apply extract inline class refactoring certain degree 
support decision common visualisation helpful 
goal refactorings get cohesive classes 
cohesiveness reached levels weakest coincidental cohesion strongest functional cohesion static analysis technique able consider indicators cohesion 
cohesion measures lcom sfc tcc consider relations functions attributes indicators functional cohesion members common member relate 
distance measure need properties attributes methods 
demonstrate pathological case refactorings large example created 
showing source code explain class refactoring sense 
imagine class methods attributes properties methods hold uses uses uses 
uses methods hold uses uses uses 
uses construction obvious sense extract methods attributes separate class 
calculating distances positions figures euclidean space vrml world diagram shown analysed visualisation parameters taken sections metrics refactoring fig 
vrml world motivates refactoring extract class tool support members class displayed figures colour 
layout shows typical motivation refactoring extract class separation members right side members left side yield cohesive classes 
kind visualisation recommend restructuring inline class 
imagine methods attribute separate class 
visualisation similar different colours 
recommendation merge classes easily detectable 
approach support identification bad smells powerful software visualisation practical relevance generated fly 
software engineer enabled just click button select members wants examine immediately analyse visualisation 
done seconds 
fulfil requirements enhanced metrics tool called developed research group distance concept cf 

suitable task fully integrated industrial case tool language independent especially small number measured entities fast 
steps create distance matrix needed generation visualisation 
user create repository project 
done started selecting special menu item case tool 
goal action extract relevant symbols classes methods relations repository implemented relational database 
large projects classes step needs minutes 
extraction done 
created database times support refactorings project 
get required feedback applied refactoring cf 
section database modified slightly supported 
currently database completely order get feedback 

user select classes members analysed 
task gui supported take time 

distances calculated 
members take seconds 

distances re arranged spring embedder program 
members take seconds 

calculated positions information repository vrml world created displayed vrml client available plug browsers netscape 
task fast 
steps done automatically user input necessary anymore 
tools running windows solaris 
section show visualisation approach applied real world systems thousands classes especially inheritance 
metrics refactoring bad smells large systems demonstrating power visualisation approach artificial pathological cases examined kind problems occur applying approach large systems 
main problems 
large object oriented systems classes examined separately included inheritance hierarchy 
problem inheritance increases difficulty apply refactorings discussed exploring separated class inheritance context suggest wrong refactorings inherited attributes methods considered 

classes analysed identify possible refactorings 
large systems exist thousands classes time consuming analyse classes detail explained section 

analysis artificial pathological cases simply obvious situations rarely practical systems 
difficult interpretation generated visualisations real world systems identification possible refactorings 
subsections give answers questions 
impact inheritance bad smells ignoring inheritance impacts identification application refactorings including ones focus 
problem covers problem refactoring identification problem application ignoring inherited members give wrong impression example impression methods cohesive caused fact common attributes considered inherited 
problem occurs relations static analysis reduces coupling couplings super classes directly detectable code 
possibility call methods subclasses especially super class class interface ignored 
ignoring possible subclasses increase difficulty apply suggested refactoring 
example visualisation suggests move method class wrong method sub classes current class 
problem introduced concept flattening represent class members access 
additionally concept extend relations potential relations coupling superclasses extended possible couplings subclasses 
flattening done automatically possible generate visualisations flattened elements including inherited members prevent wrong interpretations 
distinguish self defined inherited members different visualisation parameters different layouts 
second problem partly solved members subclasses selected visualisation easily detected member superclass inherited subclass detecting member name different visualisation attributes subclass method subclass distance inherited member class members 
subclass selected visualisation problems refactoring application visible tested manually cross case tool 
selection candidates identification bad smells main questions classes selected visualisation 
question depends lot special case possible refactorings identified understanding developers try understand foreign software system focus classes interested start classes classes near main classes name system start visualisation process approach simplify understanding software 
examining visualisation developers detect bad smells apply refactorings 
class important select new classes local context 
modification developers try modify software system 
doing problems occur solved particular refactorings cf 
chapter 
selecting metrics refactoring appropriate classes modification applied corresponding visualisation simplifies process detect bad smells 
quality improvement metrics engine classical object oriented metrics developer able get quantitative feedback system 
interpretation show anomalies classes resolved applying refactorings 
classes selected detailed visualisation 
example high value weighted method count metric wmc analysed visualisation possible easily detect wmc improvements application refactoring extract class 
example suspicious metric values high values lack cohesion methods metric lcom visualisation class help analyse suggests solutions application refactorings move method move attribute 
addition strategy start anomalous candidates possible create distance view class level cf 
sil measured entities classes corresponding distances calculated properties members class members class 
distance classes lower interactions exist 
kind visualisation anomalies detected turn set detailed visualisation shown 
useful selection possible select classes visualisation 
disadvantage technique confusing visualisation elements 
problem increasing time spring embedder elements take nearly hour calculate meaningful positions 
interpretation visualisations real world systems depending number selected classes number contained elements relationships difficult identify candidates refactorings 
typical maintained system classes consisting methods attributes 
classes cohesive cf 
cluster top right contains elements class 
interesting obviously separated method bottom left cf 
arrow 
method previous releases applying refactoring move method method anymore class 
deletion method basic refactoring done problems 
identification obvious anomalies simple detailed fig 
vrml world classes real practise system interpretation visualisations learned 
experience possible get feeling bad smells look 
kind visualisation helpful taken support possible 
metrics refactoring summary generic approach generate visualisations supporting developer identify candidates refactorings 
due premise developer authority identifying applying refactorings focuses providing decision support 
generic approach instantiated way analyse source code refactorings move method move attribute extract class inline class 
refactorings result common visualisation visualisation taken identification different refactorings 
demonstrated approach applied artificial pathological cases tool enables developer get visualisations fly integrated case tool 
extended concept real world systems explained inheritance considered adequately classes analysed respect underlying case typical interpretation visualisation real life system looks 
point view approach looks promising combines consensus refactorings necessary positive software quality necessity fast effective 
research focus refactorings especially ones cover inheritance pull push method attribute analysed flattening concept identification supported visualisation 
james bieman kang measuring design level cohesion ieee transactions software engineering vol nr 
february james bieman linda ott measuring functional cohesion technical report cs michigan technological university mario bunge treatise basic philosophy volume ontology furniture world reidel publishing dordrecht holland chen chen information visualisation virtual environments springer verlag london chidamber kemerer metrics suite object oriented design ieee transactions nr pa rolf ler hartmut palm ume mit vrml informationen und pr verlag heidelberg ludwig alfred multivariate verfahren walter de gruyter berlin martin fowler refactoring improving design code addison wesley new york claus lewerentz frank simon product metrics tool integrated software development environment proceedings european software measurement conference antwerpen lune andreas ludwig rainer neumann refactorings engineering meets reengineering proceedings nd workshop reengineering bad published tr university koblenz pres roger pressman software engineering practitioner approach mcgraw hill new york frank simon dirk beyer claus lewerentz considering inheritance overriding overloading polymorphism measuring sources technical report computer science reports technical university cottbus may published partly proceedings th international workshop software measurement berlin oct sil frank simon silvio koh reiner franz lehner software und pages verlag sil le frank simon silvio claus lewerentz distance cohesion measuring proceedings nd european software measurement conference amsterdam frank simon frank claus lewerentz spring embedder complete graphs technical report computer science reports technical university cottbus september frank simon frank claus lewerentz mess und published proceedings th workshop reengineering bad yourdon constantine structured design prentice hall englewood cliffs metrics refactoring 
