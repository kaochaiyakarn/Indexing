proceedings ieee symposium security privacy may oakland california complete safe information flow decentralized labels growing mobile code downloaded applications servlets increased interest robust mechanisms ensuring privacy secrecy 
information flow control intended directly address privacy secrecy concerns information flow models restrictive widely 
decentralized label model new information flow model extends traditional models principal information flow policies permits safe form declassification 
extends new model making flexible expressive 
define new formal semantics decentralized labels corresponding new rule relabeling data sound complete 
show extensions preserve ability statically check information flow 
growing mobile code downloaded applications servlets increased interest robust mechanisms ensuring privacy secrecy 
key problem information shared downloaded code preventing code leaking information 
information flow control intended address privacy secrecy concerns information flow models restrictive widely 
increases power promising new model decentralized label model ml making practical useful 
goal check information flow straightforward static analysis annotated program code 
idea node share information downloaded applet uploaded servlet prevent mobile code leaking information additionally applet servlet protected leaking private information research supported darpa contract monitored usaf rome laboratory 
andrew myers supported intel fellowship 
web page www pmg lcs mit edu copyright ieee 
published proceedings may oakland california 
andrew myers barbara liskov mit laboratory computer science technology square cambridge ma liskov lcs mit edu programs running node 
decentralized label model basis information flow control improves earlier models ways allows individual principals attach flow policies pieces data 
flow policies principals reflected label data system guarantees policies obeyed simultaneously 
model works principals trust 
model allows individual principals declassify labels modifying flow policies 
arbitrary declassification possible flow policies principals maintained 
declassification permits programmer remove restrictions appropriate example programmer determine amount information leaked inconsequential 
previous information flow allow model 
compatible static checking information flow 
static analysis required prevent leakage information implicit flows provide practical finegrained control information flow dd 
care taken static checking restrictive model unusable 
previous ml static analysis expressive supporting label polymorphism safe run time label checking 
demonstrated label inference reduce burden adding static information flow annotations program 
extends previous decentralized labels label system flexible retaining advantages just described 
contributions extend model allow safe relabelings previous permit 
provide formal definition model allows define exactly relabelings legal 
model differs earlier models den earlier approaches deal safe relabelings rely relationships different principals 
define rule static checking prove rule sound complete allows safe relabelings allows safe relabelings 
show label checking label inference done easily efficiently new rule 
rest organized follows 
section briefly review decentralized label model show allow certain useful intuitively safe relabelings 
section provides formal model labels explains label interpreted set flows uses define legal relabelings 
section sketches programming language annotations permit static flow checking presents static relabeling rule proves sound complete shows relabeling rule statically analyze code annotations described 
related discussed section conclude section 
decentralized labels section provides brief summary decentralized label model ml 
explains rules restrictive kinds restrictive rules desirable 
model decentralized label model notion labels allow individual owners information express policies 
owners principals identifiers representing users authority entities groups roles 
principals authorized act principals information maintained principal hierarchy database 
assume principal hierarchy changes time revocations occur infrequently 
moment process authority act behalf possibly empty set principals 
value computed program execution associated label 
label contains set owners owners principals data observed order obtain value 
addition owner label contains set readers readers principals allows observe value 
observations happen values written output channels 
output channel associated set readers principals able observe information written channel people access printer 
value written channel reader channel authority act reader effective readers set value label 
effective readers set intersection reader sets label 
restricting writing channels ensures owner policy obeyed 
example label owners readers readers value labeled written channel provided readers act 
model variable input channel label 
value read variable input channel acquires label 
value written variable value current label forgotten acquires label variable 
assignment effectively creates new copy value different label avoid information leaks rule requires new label restrictive old 
changes information variable accomplished modifying principal hierarchy 
assignment causes relabeling value assigned 
kind relabeling termed restriction 
relabeling restriction new label contains owners original fewer readers owner 
restriction performed process matter authority 
expression means restrictive equal values relabeled label label 
values may relabeled declassification reduces restrictiveness removing owner adding reader owner 
declassification performed process authority act owner policy changed requires run time check proper authority 
important point declassification affect policies owners process act reading occurs consensus owners limited declassification safe 
computations multiplying numbers cause joining labels label result restrictive label reflects policies labels values computation owners owners owners readers readers readers rules follow definition label inference requires meet labels determinable restrictive label relabeled definition dual join 
hmo logs hmo records hmo hmo hmo records patient patient hmo auditing doctor report hmo patient patient hmo records doctor patient record general information patient patient doctors patient confidential patient patient hmo confidential hmo records hmo report patient patient doctor display device doctor patient patient doctor example acts doctor doctor doctors patient doctor principal hierarchy example section gives example illustrate model 
example parties privacy concerns patient obtaining medical services doctor providing services hmo serves intermediary 
principals system patients doctors doctors additionally act stands group doctors hmo 
hmo principals representing maximum authority hmo representing authority record keeping functions hmo act authorization authorized declassification procedure edited copy patient record patient patient doctors patient patient doctor hmo records hmo doctor act patients patient trust hmo keep track records 
resulting principal hierarchy shown 
shows system 
hmo maintains patient medical history example tracks information flow patient receives medical services 
patient record parts general information patient controlled patient readable doctor private information medical history normally readable doctors confidential information hmo release patients 
step patient doctor interaction doctor obtain copy patient record 
record declassified doctor read happen authorization patient 
patient authenticated request existing program running authority program uses patient authority provide doctor edited version patient private information hmo confidential information 
read information doctor requires output channel display device single reader information edited patient record written channel act channel created code authenticates note patient information written channel readers way doctor declassify patient information 
eventually doctor sends report hmo services rendered 
report reflects components patient record acquires joint label reflecting sources 
note joint label prevents doctor reading report general patient information explicitly permit reader 
example unnecessary restrictiveness model 
audit program runs authority principal store information appropriate labels log patient record database 
send report patient designer audit program mechanisms outside scope information flow control determine hmo confidential information leaked leak acceptably small 
limitations model rule restrictions described earlier general prevents doing valid relabelings simplify example just 
kinds relabelings existence acts relationship principals 
adding readers 
able add reader owner allows reader acts 
rule sense allowing read allows principals act read 
replacing owners 
able replace owner principal act rule sense new label allows process acts declassify original label allowed processes weaker authority declassify 
allow adding readers doctor example able view report 
confidential patient information label allows doctor view data item ought able relabel item explicitly allow particular doctor view reader component joint label view report 
allow replacing owners advantage special rule section needed output channels treated ordinary variables 
authority hmo display device assigned label labeling allow information patient record transmitted display device 
label means hmo certified reader channel 
global notion readers channel data owned owner written channel trusts hmo act 
original trusted channels easily modeled assigning owner high level principal 
relabelings add readers replace owners done process sufficient authority declassification mechanism 
relabelings restrictions ought require authority require run time check determine principal act principal 
relabeling write useful procedures run minimal authority observing principle privilege sal 
providing extensions easier model desirable security policies 
example suppose user wants define security classes multi level fashion personal classes protecting data 
extensions security classes represented principals system principal act user assign security classes principals system allowing act principals correspondingly marks data item readable appropriate security class principal 
trivial extend relabeling rule permit relabelings want preserve ability statically analyze information flow 
pointed denning denning dd information flow checked statically compile time avoid leaks implicit flows 
new relabelings depend principal hierarchy exists run time structure known compile time 
need sure assumptions hierarchy compile time checking valid hierarchies encountered run time 
solve problem steps 
section give formal model labels allows define legal relabelings 
section define rules static checking show sound complete 
extending interpreting labels new relabelings depend existence certain acts relationships need rule takes principal hierarchy account 
section formalize notions labels principal hierarchies define intuitive condition judging relabeling rule correct 
generalizing labels generalize label model slightly allow owner repeated label 
section label characterized owner set owning principal appear associated reader set 
see allowing duplicate owners important maintaining lattice structure labels 
label set components expresses policy single owner 
policy specifies set readers permitted owner read data 
different components label may owner 
intuitive meaning label component obeyed 
component part label notation denote owner component notation denote set readers specified component 
equations letters denote label components 
principal hierarchy principal hierarchy defined acts relations principals system 
act denote fact expression binary relation reflexive transitive antisymmetric distinct principals may act case say principals equivalent 
notation indicate principal hierarchy principal act principal principal hierarchy binary relation principals treated set ordered pairs principals specifies relations exist 
interpretation equivalent principal hierarchy contains acts relations say extends write model principals easily generalized 
obvious extension divide acts transitive authorizations 
example individual doctors able read information allowed reader able declassify information owned principal 
help control information doctor ejected group 
similarly ability act principal imply ability change may act explore extensions lack space 
interpreting labels intuitively relabeling allowed create new ways relabeled information flow 
specify rule precisely need simple way interpret label decide information flows described label 
useful think label describing set flows flow owner reader pair 
label component owner describes flows reader set principal owner label describes flows principal intuitively means expressed flow policy labeled data permits flows principal 
interpretation labels sets flows earlier relabeling rules described section expressed quite simply 
relabeling permitted exactly restrictive 
words partial order labels exactly partial order sets flows 
reason call relabeling rule section subset relabeling rule 
similarly join labels simply intersection 
meet labels union labels 
flow set constraints subset relabeling rule restrictive take principal hierarchy account 
thinking label set flows observe constraints set flows ought satisfy particular principal hierarchy constraint readers owners 
constraints construct restrictive relabeling rule 
reader constraint follows 
set flows contains flow principal act set contain flow example label equivalent label principal act principal idea label explicitly states set flows actual flows denoted label depend principal hierarchy 
call set denoted flows label interpretation principal hierarchy 
define function maps label interpretation 
definition intuitively sound relabelings described section easily described 
function takes current principal hierarchy implicit argument 
label represents interpretation label current principal hierarchy 
reader constraint just described stated formally follows reader constraint sufficient want allow relabelings change label owners 
consider relabeling relabeling effectively transfers responsibility controlling flow data principal principal transfer restricts data flow act key insight allowing kind relabeling owner constraint symmetry rule reader constraint incorrectly imply inferior principal dictate addition readers reader set interpretation different superior owner states flow occur flow removed reader sets inferior owners 
superior owner try prevent flow inferior owners may prevent 
inferior owner policy restrictive superior owner policy 
owner constraint written equivalent negative form captures intention directly constraint label seen equivalent label principal hierarchy 
label allow flows readers owner constraint prevents reader set larger label functions help construct label interpretation function define functions establish reader owner constraints 
define function expands set readers include implicitly allowed readers described reader constraint 
adds readers component produce expanded reader set define function converts label set flows restricting obeys owner constraint 
form roughly dual expect monotonic set label manipulate sense 
functions differ behavior principal hierarchy changes 
making principal hierarchy explicit argument functions principal hierarchy extension anti monotonic argument 
composing functions obtain label interpretation function maps label set flows particular principal hierarchy result satisfies reader owner constraints preserves reader constraint established component intuitively effect applying flow implied label owner act permits flow explicitly allowing read implicitly allowing principal act read 
function write correctness condition relabeling presence arbitrary principal hierarchy 
relabeling principal hierarchy valid long new flows added 
making principal hierarchy explicit argument correctness condition apply rule show relabeling valid 
applying gives set containing flow flows patient acts patients flows unrelated owners readers applying gives set containing pairs example 
relabeling legal 
function composition monotonic respect monotonic anti monotonic respect interesting properties 
interpret set produced applying label label probably large write label flow mentioned explicitly 
interpretation see function idempotent xx function thought closure operator converts label closed set flows 
accordance interpretation set labels produced closed intersection union labels 
checking relabeling statically wish support static checking programs containing label annotations static checking allows precise fine grained analysis information flows capture implicit flows properly dd dynamic label checks create information channels controlled additional static checking ml 
correctness condition derived section directly static checking depends principal hierarchy time relabeling takes place static checking done earlier part compilation 
principal hierarchy may changed checking execution full run time principal hierarchy available relabeling checked 
relabeling checked partial information principal hierarchy 
section develop general rule checking relabelings statically partial information principal hierarchy 
giving sketch programs annotated 
define relabeling rule show sound complete 
discuss practicality system arguing label checking label inference practical 
annotations assume programs statically annotated information labels data manipulate programs checked static label checker statically analyzes information flows determine program follows information flow rules 
ml set language annotations described permits static information flow checking 
summarize important features give idea framework describe new annotations needed support extended relabeling rule 
variables arguments procedure return values labeled types 
example labeled integer variable declared label may omitted local variable causing inferred automatically 
label omitted procedure argument implicit parameter procedure generic respect 
statement allows run time test process running code act principal 
statement executed process act principal label checker allow behalf expression value label label may add readers label owners remove owners statement legal containing statement established process act procedures assigned principal compiled principal derives user running compilation 
procedure called runs authority 
callers additionally called procedure authority act principals act recall process may act behalf principals done explicitly 
variables arguments may declared special base type permits run time label checking 
variables type argument label parameters may label variables mentioned procedure body 
may expressions 
statement determine runtime label value special type conveniently encapsulates value run time label 
extensions previous framework enable static reasoning principal hierarchy variables special type may labels statements 
procedure granted authority principal caller identity principal placed argument type second kind statement statement executed run time test determines principal act principal 
label checker uses knowledge checking relabelings occur example extension assignment legal body statement checker knows act program statement label checker verifies acts relations determined exist lexical nesting statements 
relations form subset true principal hierarchy exists run time known statically true principal hierarchy contains explicitly stated acts relations 
fairly general model programming static information flow annotations challenge define sound conservative rule checking relabelings 
section show defining rule simple expect 
rule sound complete permits relabeling leak information 
static correctness condition program assigns value variable data assigned value label changed label variable 
relabeling sound long create new ways assigned data flow 
example sound relabeling rule original subset relabeling rule value label variable label monotonicity guarantees correctness condition holds regardless principal hierarchy 
subset relabeling rule seen excessively restrictive 
rule recognizes principal hierarchy 
principal hierarchy contains acts relations statically known containing statements 
refer principal hierarchy static principal hierarchy 
actual principal hierarchy run time extension contain acts relations plus possibly additional relations 
actual principal hierarchy notation introducing principal hierarchy explicit argument function express static correctness condition safe relabel holds expect check relabeling valid check apply correctness condition principal hierarchy construction rule allows valid relabelings take place relabeling allowed rule creates new flows principal hierarchy example show rule sound 
consider bad relabeling consider happens apply labels assuming principal hierarchy contains single relation note contain flow superior owner rules 
label interpretations equal relabeling correct 
learn doctor applying labels leads quite different relabeling invalid principal hierarchy adds flow 
example shows correctness condition applied directly relabeling rule 
sound complete relabeling rule correct rule checking relabeling label label intuitive component corresponding component restrictive component restrictive relabeled principal hierarchy write 
condition defined formally follows expanding definition obtain equivalent symmetrical formulation binary relation defined principal hierarchy relation pre order transitive reflexive anti symmetric labels may equivalent equal 
equivalent write mean example hierarchy labels equivalent 
principal hierarchy generates pre order labels defining legal relabelings 
nature relabeling rule understood considering incremental relabelings permits 
allows arbitrary sequence kinds relabelings clearly sound individually reader may dropped owner reader set 
new owner may added label arbitrary reader set 
reader may added long act member reader set 
owner may replaced owner acts 
interestingly incremental relabelings capture sound relabelings 
rule call complete relabeling rule sound complete 
say rule complete mean exactly captures set valid relabelings respect static correctness condition defined section assumptions static checking environment 
provide sketches formal proofs claims 
rule checked soundness counterexample generator jd 
soundness 
show relabeling rule holds principal hierarchy correctness condition holds possible extensions suppose relabeled contain flow show 
owner suppresses 
corresponding owner transitively show prevents appearing arbitrary reader know 
contradiction know means true arbitrary flow relabeling rule sound 
completeness 
show converse prove statement contradiction relabeling rejected rule find words relabeling rejected result leak 
owner component consider arbitrary component relabeling leaks 
component reader readers construct principal hierarchy extends results leak 
consider principal hierarchy exactly additional principal unrelated owners readers 
form adding relation transitive closure definition find shows relabeling causes leak relabeling rule complete 
completeness result strengthened rule complete presence negative information principal hierarchy 
imagine acquiring negative information allowing clause statement 
tests principal act body clause able determine statically specified principal relationship exist 
static information establish upper bound dynamic principal hierarchy 
upper bound useful checking relabelings proof completeness holds presence upper bound simply choose arbitrary mentioned upper bound 
static checking consider involved doing static checking 
explained check assignments complete relabeling rule 
labels compared may results joins account computations meets checker doing label inference 
need define join meet 
labels form pre order lattice partial order labels equivalent equal 
labels preserve important properties lattice static reasoning information flow feasible pair elements possesses upper bounds greatest lower bounds unique equivalence class 
addition join meet operations distribute 
define join meet 
definitions desirable properties easy evaluate resulting labels easy deal applying complete relabeling rule 
join 
join upper bound useful assigning label result operation combines values adding numbers 
result adding numbers ought general restricted numbers added 
restrict sum unnecessarily assigned restrictive label restrictive input labels 
lattice unique label uniqueness important purposes 
label equivalence class acceptable long relabeled label restrictive input labels 
join label expressions defined quite simply concatenation components 
examples join expressions principals unrelated acts relation doing join compiler simplify label expression removing redundant components checking steps run efficiently 
simplification performed second example 
component redundant relabeling rules behave identically label regardless component 
component component redundant possible relabelings involving label presence component affect validity relabeling 
third example illustrates difference join operator earlier defined section subset relabeling rule 
earlier join definition results label reader sets owner intersected 
difference join results may inconsequential label relabeled label 
difference rules significant 
see important owners repeatable labels completes lattice equivalence classes 
repeated owners allowed upper bound pairs labels 
consider third example disallowing repeated owners 
principal restrictive labels relabeled include relabeled 
upper bound labels 
join operation just described produces upper bound labels 
seen interpreting join result set flows extended principal hierarchy follows directly definition hierarchies equation means label restrictive relabeled 
join operator produces upper bound labels equivalence class 
reasoning joins 
components join independently relabeled declassified 
property important allows checking code generic respect labels appear 
case declassification surprises principal set flows added join subset set flows added individual components 
interactions parts join create new unexpected flows 
example label relabeled relabeled regardless may opaque label label determined run time invalidating relabeling 
similarly declassified safely declassified 
relabelings join guarantees components respected 
meet 
meet greatest lower bound labels restrictive label relabeled 
meet labels produced computations program execution useful defining algorithms automatic label inference dd ml 
meet useful automatically infer labels inputs just join useful produce labels outputs 
example code restrictive label expressed meet example variables labels respectively 
variable assigned label long relabeled upper bound label simple algorithm inferring variable labels described ml uses succession meet operations fashion refine unknown variable labels downward variables consistent assignments contradiction reached 
construct meet labels consider meet components statically known relation owners components meet result obtained uninterpreted label parameter known owners static relationship established containing statement 
suppose act includes case equal meet components consider meet arbitrary labels 
label containing components really join components meet computed distributing meet joins 
result meet join pairwise meets components component label 
pairwise meets may produce label course dropped join 
formula join validity formula meet seen label interpretation function 
extension principal hierarchy compute meet labels formula meet sound formula join produce restrictive label possible extensions happens rule joining components return owners known relationship real hierarchy relationship may exist 
result label inference conservative cases significant problem explicit label declarations cases 
shown straightforwardly join meet distribute expected way producing equivalent labels means static checker doing label inference described ml rely properties meet join simplify label expressions 
related information flow control static analysis security guarantees 
lattice model information flow comes early bell lapadula bl denning den 
decentralized label model similarities model models provide approximation originator controlled release labeling dod intelligence community 
support joining labels computation occurs model lacks important lattice properties 
model intended dynamically checked 
dynamic checks result storage run time overhead data labeled 
label checks covert channel 
shown static checking control channel ml 
interestingly allow owners replaced label components acl checks analogous checks support declassification new relabelings described 
information flow policies examined complex aggregation policies commercial applications cw bn fol 
addressed policies capture conflicts interest fine grained tracking ownership information applicable 
information control models designed checked statically 
ix example real world information flow control system dynamic checking 
ferrari introduces form dynamically checked declassification special strict flow checking 
need declassification framework avoided fine grained static analysis 
applied dynamically mention specific data objects administrative run time overheads 
static analysis security guarantees long history 
applied information flow dd ar access control jl rsc 
interest provably secure programming languages treating information flow checks domain type checking 
focused formally characterizing existing information flow integrity models po vsi vol 
smith volpano examined difficulty statically checking information flow multithreaded environment sv addressed problem 
heintze riecke hr shown information flow labels simple functional language statically check integrated model access control information flow control integrity 
model allow declassification information flows runtime flow checking 
abadi aba examined problem achieving secrecy security protocols typing rules shown encryption treated form safe declassification primitive encryption operator 
decentralized label model promising approach making information flow practical way guarantee secrecy privacy 
provides considerable flexibility allowing individual principals attach flow policies individual values manipulated program 
flexible labels permit values declassified owner value 
declassification safe affect secrecy guarantees principals interest secrecy data 
support multiple principals label model ideal mutually principals 
original model contained principal hierarchy hierarchy fully integrated relabeling rules making rules unnecessarily restrictive 
defined complete relabeling rule decentralized label model 
new rule precisely captures legal relabelings allowed knowledge principal hierarchy available statically 
shown rule sound complete furthermore easy apply 
formalized relabeling rule pre order relation distributive lattice properties join meet operators defined labels means compiler static checker check information flow statically support label polymorphism label inference 
new rules relabeling join meet decentralized label model practical usable 
easier model common security paradigms allowing control information flow system group role principals 
allow individual principals model multilevel security classes conveniently 
acknowledgments authors acknowledge helpful comments received including suggestions mart abadi bala phillip chandrasekhar boyapati miguel castro stephen garland jason hunter reviewers 
daniel jackson help 
aba mart abadi 
secrecy typing security protocols 
proc 
theoretical aspects computer software third international conference september 
ar gregory andrews richard reitman 
axiomatic approach information flow programs 
acm transactions programming languages systems 
bl bell lapadula 
secure computer system unified exposition multics interpretation 
technical report esd tr mitre mtr bedford ma 
available ntis ad 
bn brewer nash 
chinese wall security policy 
proc 
ieee symposium security privacy pages may 
cw david clark david wilson 
comparison military computer security policies 
proc 
ieee symposium security privacy pages 
dd dorothy denning peter denning 
certification programs secure information flow 
comm 
acm 
den dorothy denning 
lattice model secure information flow 
comm 
acm 
fol simon foley 
taxonomy information flow policies models 
proc 
ieee symposium security privacy pages 
elena ferrari samarati elisa bertino sushil jajodia 
providing flexibility information flow control object 
proc 
ieee symposium security privacy pages oakland ca usa may 
hr nevin heintze jon riecke 
slam calculus programming secrecy integrity 
proc 
acm symp 
principles programming languages popl san diego california january 
jd daniel jackson craig damon 
elements style analyzing software design feature counterexample detector 
ieee transactions software engineering july 
jl anita jones barbara liskov 
language extension expressing constraints data access 
comm 
acm may 
ml andrew myers barbara liskov 
decentralized model information flow control 
proc 
th acm symp 
operating system principles sosp pages saint malo france 
catherine judith 
pale mac dac defining new forms access control 
proc 
ieee symposium security privacy pages 
mcilroy reeds 
multilevel security unix tradition 
software practice experience august 
po jens palsberg peter rb trust calculus 
proc 
nd international symposium static analysis number lecture notes computer science pages 
springer september 
rsc joel richardson peter schwarz luis felipe cabrera 
efficient fine grained protection objects 
proceedings acm conference object oriented programming systems languages applications pages vancouver bc canada october 
sal saltzer 
protection control information sharing multics 
comm 
acm july 
sv geoffrey smith dennis volpano 
secure information flow multi threaded imperative language 
proc 
acm symp 
principles programming languages popl san diego california january 
vol dennis volpano 
provably secure programming languages remote evaluation 
acm sigplan notices january 
vsi dennis volpano geoffrey smith cynthia irvine 
sound type system secure flow analysis 
journal computer security 
