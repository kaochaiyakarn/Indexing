general incremental technique maintaining discovered association rules david cheung lee benjamin kao department computer science university hong kong road hong kong cs hku hk general incremental updating technique developed maintaining association rules discovered database cases including insertion deletion modification transactions database 
previously proposed algorithm fup handle maintenance problem case insertion 
proposed algorithm fup previous mining result cut cost finding new rules updated database 
insertion case fup equivalent fup 
deletion case fup complementary algorithm fup efficient deleted transactions small part database applicable case 
general case fup efficiently update discovered rules new transactions added transaction database obsolete transactions removed 
proposed algorithm implemented performance studied compared best algorithms mining association rules studied far 
study shows new incremental algorithm significantly faster traditional approach mining updated database 
keywords association rules data mining knowledge discovery large databases maintenance 
years data mining attracted attention database research 
due wide applicability areas including retail industry finance sector 
availability automated tools enabled collection large amount data 
large databases contain information potentially useful making market strategies financial forecasts 
data mining task find useful proceedings fifth international conference database systems advanced applications melbourne australia april 
information large databases 
information includes association rules characteristic rules classification rules generalized relations discriminant rules various data mining problems mining association rules important 
classical example retail industry 
typically record sales data describes items bought single transaction information transaction time customer id mining association rules database find huge amount past transactions rules customer buys item item buy item transaction initially unknown 
rules useful marketers develop implement customized marketing programs strategies 
interesting works published association rules mining including mining quantitative association rules multi level association rules parallel distributed mining association rules :10.1.1.40.6984:10.1.1.50.1686
feature data mining problems order stable reliable results giant amount order gigabytes data collected analyzed 
large amount input data mining results poses maintenance problem 
new transactions appended database obsolete ones removed rules patterns discovered updated 
examine problem maintaining discovered association rules 
propose new incremental algorithm fup efficiently handle update cases including insertion deletion modification transactions 
previous works problem mining association rules introduced 
shown problem decomposed subproblems 
find large itemsets sets items contained sufficiently large number transactions respect threshold minimum support 

set large itemsets find association rules confidence value exceeding threshold minimum confidence 
solution second subproblem straightforward major research efforts spent subproblem 
algorithms proposed solve subproblem efficiently apriori dhp algorithms successful 
apriori algorithm finds large itemsets iteratively 
iteration generates number candidate large itemsets verify scanning database 
key success apriori gen function generate small number candidate itemsets 
dhp improves apriori reducing number candidate itemsets hashing technique 
apriori dhp efficiently discover association rules database rules maintenance problem addressed 
problem maintaining association rules studied 
proposes fup algorithm update association rules database new transactions added database 
framework apriori finds new large itemsets iteratively 
idea store counts large itemsets previous mining operation 
stored counts examining newly added transactions algorithm generate small number candidate new large itemsets 
count candidate itemsets obtained scanning original database 
consequently new large itemsets 
fup algorithm efficient 
algorithm handle case deleting transactions database 
modification transactions addressed 
propose new algorithm called fup update existing association rules transactions added deleted database 
generalization fup algorithm 
fup fup previous mining result cut amount done discover new set rules 
remaining organized follows 
section gives detailed description problem 
new algorithm described section 
performance study fup section 
discuss implementation issues fup section ended section 
problem description mining association rules fi mg set literals called items 
database transactions transaction set items itemset transaction say contains support count itemset defined oe number transactions contain say itemset large respect support threshold oe jdj theta jdj number transactions database association rule implication form 
association rule said hold database confidence transactions contain contain rule support oe jdj theta 
pair confidence support thresholds problem mining association rules find association rules confidence support greater corresponding thresholds 
problem reduced problem finding large itemsets support threshold 
support threshold mining problem reduced problem finding set fx jx oe jdj theta convenience subsequent discussions call itemset contains exactly items itemset 
symbol denote set itemsets update association rules update activities old transactions deleted database new transactions added 
treat modification existing transactions deletion followed insertion 
delta gamma set deleted transactions delta set newly added transactions 
assume naturally delta gamma denote updated database note gamma delta gamma delta denote set unchanged transactions gamma gamma delta gamma gamma delta database support count itemset large itemsets delta ffi gamma delta gamma ffi gamma delta gamma gamma oe gamma delta oe table definitions symbols defined previous subsection oe support count itemset original database set large itemsets set itemsets define oe new support count itemset updated database set large itemsets set itemsets define ffi support count itemset database delta ffi gamma delta gamma definitions summarized table 
define ffi ffi gamma ffi gamma change support count itemset result update activities 
lemma oe oe ffi gamma ffi gamma oe ffi proof 
definition 
result previous mining old database oe update problem find oe efficiently knowledge delta gamma gamma delta oe fup algorithm section introduce fup algorithm step step 
focus special case transaction deletion delta 
special case considered complement fup algorithm handles transaction insertion 
generalize deletion algorithm handle case transaction deletion insertion delta 
special case transaction deletion delta delete case delta gamma gamma gamma delta gamma note ffi discover large itemsets updated database fup algorithm executes iteratively 
th iteration large itemsets follows 
apriori form set candidates superset iteration exactly set subsequent iterations calculated gamma large itemsets previous iteration apriori gen function apriori 
itemsets guaranteed contained old large itemsets previous mining result divide candidate set parts gammap words set candidate itemsets previously large small respect goal select itemsets currently large 
treat candidates partitions separately 
partitioning candidates know support count oe previous mining results 
find ffi gamma scanning delta gamma obtain updated support count oe lemma 
candidate goes oe jd theta 
candidates know large original database know support counts 
large know oe jdj theta information tell candidates may large 
lemma ffi oe jd theta ffi gamma delta gamma theta 
proof 
oe jdj theta 
oe oe gamma ffi gamma ffi jdj theta gamma delta gamma theta jdj gamma delta gamma theta jd theta say candidate large delta gamma large scan delta gamma obtain ffi gamma delete candidates ffi gamma delta gamma theta leaving small delta gamma note checking small itemsets delta gamma checking small itemsets delta gamma number itemsets large candidates remain scan gamma obtain new support counts oe add candidates oe jd theta 
discovered candidates large put oe completed iteration 
subsequent iterations large itemsets larger sizes discovered 
iterations go jl steps kth iteration summarized follows 

obtain candidate set itemsets 
halt 

partition gamma 
scan delta gamma find ffi gamma 
calculate oe 
delete candidates ffi gamma delta gamma theta 
application lemma 

scan gamma find oe remaining candidates 
add candidates oe jd theta 

halt jl 
previous works speed apriori algorithm depends size candidate set 
improve performance fup algorithm information oe reduce size candidate set 
scans updated database candidate set significantly smaller apriori see section 
algorithm scan deleted transactions delta gamma number candidates apriori 
reduce number candidates optimization 
optimization observe step fup algorithm removing candidates large delta gamma small delta gamma remain 
way determine candidate itemset small prior knowing ffi gamma saving finding value ffi gamma lemma itemsets ffi gamma ffi gamma proof 
deleted transaction contains contain corollary supersets small itemset small 
remember itemsets small delta gamma iteration subsequent iterations quickly determine candidate small delta gamma finding support count delta gamma optimize algorithm adding steps candidate contains item small itemset delta gamma move set candidates moved small delta gamma corollary 
move candidates modification significantly reduces number candidates scan delta gamma additional cost remember set small itemset iteration 
requires extra memory space size linear ji extra cpu time required negligible find ffi gamma itemsets anyway 
additional cost optimization relatively inexpensive 
number candidates scanning gamma affected optimization number candidates scanning delta gamma significantly reduced 
optimization speeds performance algorithm negligible cost 
illustrate special case fup algorithm example shown table 
original database contains transactions set support threshold 
itemsets support count oe theta large 
large itemsets shown table 
convenience write xy itemset fx zg ambiguity arises 
transaction deleted leaving transactions final database apply fup algorithm see generated 
transactions fa delta gamma phi gamma large itemsets support threshold delta gamma gamma itemsets ab oe table example delta iteration fa 
candidates large partitioning fa dg feg 
scan delta gamma update support counts candidates occur delta gamma counts updated oe oe oe oe 
scan delta gamma find ffi gamma delta gamma theta 
large delta gamma small large lemma 
removed leaves empty need scan gamma iteration 
remaining candidates support count gamma jd theta fall remember small delta gamma optimization 
second iteration obtain applying apriori gen function gives fab ac ad bc bd cdg ab large partitioning results fac ad bc bd cdg 
scan delta gamma update count oe ab oe ab gamma ffi gamma ab gamma 
candidates contain item small delta gamma know candidates definitely small delta gamma corollary potentially large lemma 
need find ffi gamma candidates job scan gamma obtain oe candidates gives oe ac oe ad oe bc oe bd oe cd 
consequently ab ac ad bc bd cd large included third iteration apriori gen gives candidate set abd acd 
candidates large 
candidates contain item item know small delta gamma having find support counts delta gamma need scan delta gamma iteration 
scan gamma obtain support counts candidates 
results oe abc oe abd oe acd oe bcd 
abc goes large itemset iteration 
insufficient generate candidates iteration 
algorithm stops iterations 
table compares size candidates apriori applied fup employed 
apriori scans gamma times total candidate itemsets fup scans gamma twice total candidates 
fup scan delta gamma candidate sets time spent insignificant jd gamma ae delta gamma practical applications 
example fup reduced number candidates scanning gamma gamma significant improvement 
iteration apriori fup scan gamma scan gamma scan delta gamma total table size candidates example general case transaction deletion insertion extend algorithm introduced previous subsection handle general case transaction insertion deletion 
longer assume delta 
ffi may positive consequently lemma applied corollary longer useful 
find oe kth iteration 
iteration form candidate set partition parts 
candidate know oe previous mining result 
scan delta gamma delta update support count candidates fup algorithm choose scan delta gamma find ffi gamma candidate 
scan delta gamma support count time remove candidate soon support count drops jd theta gamma delta candidate hope oe jd theta ffi delta scan delta find ffi candidate remains calculate oe candidate lemma add oe jd theta candidates know oe know oe jdj theta 
generalization lemma able prune candidates knowing counts gamma lemma ffi ffi gamma ffi gamma delta gamma delta gamma theta proof 
oe jdj theta 
oe oe ffi gamma ffi gamma jdj theta delta gamma delta gamma theta jdj delta gamma delta gamma theta jd theta 
definition candidate obtain values ffi ffi gamma scans delta delta gamma calculate ffi remove ffi delta gamma delta gamma theta lemma tells fall remaining candidate scan gamma obtain support counts gamma adding count ffi gives oe add candidates oe jd theta finishes iteration 
algorithm scans delta gamma delta candidate set size jp jc apriori 
scans gamma candidate set smaller initial size saving time assuming jd gamma ae delta gamma algorithm saves lot time compared apriori 
optimizations algorithm described paragraphs databases delta gamma delta scanned candidate set size jc improvement algorithm reduce size finding bounds values ffi ffi gamma candidate prior scans delta gamma delta idea comes extension lemma 
lemma itemsets ffi gamma ffi gamma ffi ffi proof 
transaction delta gamma contains contains true transactions delta lemma th iteration obtain upper bound gamma ffi gamma candidate scanning delta gamma bound taken minimum ffi gamma ae jx jy gamma 
note candidate generated apriori gen size gamma subsets gamma gamma ffi gamma previous iteration 
bound similarly obtained ffi candidate scanning delta lower bounds ffi ffi gamma zero course 
scan delta gamma know values ffi gamma ffi candidate apply lemma directly 
combining lemmas pruning stage candidate delta gamma delta gamma theta remove similarly may bound remove candidates satisfy oe jd theta 
reduces number candidates scanning delta gamma negligible cost 
scanning delta gamma scanning delta know value ffi gamma ffi candidate combining lemmas gives pruning delete candidate gamma ffi gamma delta gamma delta gamma theta 
candidates satisfying oe gamma ffi gamma jd theta deleted 
number candidates reduced negligible cost scanning delta bound gamma employed optimization corresponds optimization introduced section 
note candidate need find ffi gamma deleted transactions contribute final support count oe value ffi gamma helps remove candidates scanning gamma helps improve performance 
candidate satisfying gamma gamma delta gamma delta gamma theta value ffi gamma gamma ffi gamma gamma gamma delta gamma delta gamma theta 
need find ffi gamma candidates 
section remove candidates set scan delta gamma reducing size candidates scan 
candidate may ffi gamma available candidate 
causes troubles calculation gamma candidates iteration 
remedy assign gamma ffi gamma candidates bounds calculated valid optimal 
scan delta directly apply lemma candidates directly 
prune candidates ffi delta gamma delta gamma theta 
deletion case section introduced set optimize algorithm paying cost 
true general case 
reduces candidate set scan delta gamma causes candidate set scan gamma larger 
candidate gets moved count ffi gamma delta gamma tallied 
want apply lemma test ignored scan gamma trivial lower bound zero ffi gamma 
test pruning effective 
tradeoffs amount saved scanning delta gamma effectiveness pruning lemma 
naturally delta gamma large save 
algorithm applies delta gamma delta final version fup algorithm iteration 
iteration set delta gamma delta gamma 
obtain candidate set itemsets 
halt 

calculate 
partition 
remove oe jd theta 

remove delta gamma delta gamma theta 

delta gamma delta 
calculate gamma gamma gamma delta gamma delta gamma theta move assign gamma ffi gamma 
scan delta gamma find ffi gamma 
delete candidates oe gamma ffi gamma jd theta 

delete candidates gamma ffi gamma delta gamma delta gamma theta 

scan delta find ffi 
candidate calculate oe 
candidate delete ffi gamma ffi gamma delta gamma delta gamma theta 

candidate delete ffi delta gamma delta gamma theta 

scan gamma get count add count ffi get oe 
add candidates oe jd theta 

halt jl 
interesting note algorithm reduces apriori set delta gamma gamma fup set delta gamma transaction deletion algorithm section set delta 
generalization algorithms 
improvement applying dhp technique 
technique introduced fup algorithm hash counts itemsets brings benefits dhp algorithm fup algorithm immediately 
call dhp enhanced update algorithm fup distinguish fup 
illustrate final fup algorithm example table 
example previous delta containing transaction fc dg time 
large itemsets counts shown table 
iteration fa fa dg feg 
note iteration delta gamma delta gamma delta gamma scanned find ffi gamma ffi gamma ffi gamma ffi gamma ffi gamma 
pruning step 
delta scanned ffi ffi ffi ffi 
empty steps skipped 
gamma need scanned iteration 
oe oe oe oe 
large fa dg 
dhp algorithm requires extra memory store big hash table 
algorithm fup applied memory plentiful 
transactions fa delta gamma phi gamma delta phi large itemsets support threshold gamma delta itemsets cd oe table example delta second iteration fab ac ad bc bd cdg fac ad bc bd cdg 
ac ad bc bd ffi ffi corresponding candidates removed step leaving 
scan delta gamma obtain ffi gamma ab ffi gamma cd 
ab ab removed step leaving 
delta scanned get ffi cd followed scan gamma oe cd cd large 

iteration jl insufficient generate third iteration 
find updated database fa cdg 
large itemset ab obsolete new large itemset cd added note fup scans gamma obtain count cd second iteration 
apply apriori algorithm scan gamma twice candidates fup reduces candidate size gamma significant improvement apriori 
performance analysis assess performance new algorithms apriori dhp fup fup implemented rs workstation model running aix 
experiments conducted compare performance 
generation synthetic data experiments synthetic data input databases algorithms 
data generated technique introduced modified 
readers referred papers detailed description 
table gives list parameters data generation method 
model change association rules result inserting deleting transactions slightly modified data generation method follows 
delta gamma number deleted transactions jd gamma number unchanged transactions delta number added transactions jt mean size transactions jij mean size potentially large itemsets jlj number potentially large itemsets number items table parameters data generation split data generation procedure steps 
step set potentially large itemsets generated 
second step subset generate database transactions 
model change association rules choose integers range zero jlj jlj 
potentially large itemsets generate delta gamma potentially large itemsets generate delta gamma generated result potentially large itemsets higher tendency large delta gamma gamma gamma delta correspond large itemsets turn obsolete due updates 
similarly potentially large itemsets higher tendency large correspond new large itemsets updated database 
middle gamma jlj potentially large itemsets take part generation delta gamma gamma delta large represent association rules remain unchanged result update 
varying values control degree similarity notation tx iy di gammaj modified denote experiment databases sizes jdj delta gamma jd gamma delta gamma delta jt jij experiments set jlj 
dhp fup hash table entries 
hash table prune size candidates 
experiment dhp find large itemsets run fup fup supplying databases delta gamma gamma delta large itemsets support condition model rules stay old new databases 
parameters data generation procedure reported 
example sq clustering size generation potentially large itemsets ps size pool potentially large itemsets transactions generated multiplying factor associated pool 
set sq ps 
readers referred detailed explanation parameters 
counts time taken noted 
compare performance apriori dhp run algorithms updated database note amounts time spent 
time taken algorithms compared 
comparing algorithms algorithms tested setting gamma 
support thresholds varied 
results plotted 
fup times faster apriori fup times faster dhp times faster apriori 
explain performance gain examine number candidate itemsets generated algorithm scan gamma particular instance support threshold see table 
total number candidates generated fup apriori 
candidate size fup dhp apriori 
significant reduction number candidates main reason performance gain 
clearly fup efficient combines techniques fup dhp greatly reduce number candidates 
fup fup dhp apriori gamma support threshold execution time seconds comparison iteration apriori dhp fup fup total total apriori total dhp table number candidate itemsets effect size updates experiment find size delta gamma delta affects performance algorithms 
setting gammax experiment support threshold 
words initial database transactions 
database transactions deleted added 
shows results experiment 
expected fup fup spend time size updates increases 
hand size final database constant transactions amounts time spent apriori dhp algorithms sensitive note fup faster apriori long fup faster dhp 
apriori dhp scan delta gamma performances better delta gamma large 
results indicate incremental update algorithms efficient small moderate size updates 
size updates exceeds original database apriori dhp perform better 
primarily amount changes original database large updated database different original previous mining results helpful 
better mining updated database scratch amount updates large 
fup fup dhp apriori gammax support thousands tuples inserted deleted execution time seconds effect delta gamma delta varying number deleted added transactions independently experiment conducted find size delta gamma affects performance algorithms 
setting gammax experiment 
support threshold 
words initial database transactions 
transactions added database deleted 
shows results experiment 
number deleted transactions increases amounts time taken apriori dhp decrease size final database decreases 
example fup times faster apriori 
increases number transactions fup fup handle increases algorithms take time grows 
fup fup outperform apriori dhp 
apriori dhp take time fin ish 
means long number deleted transactions original database incremental algorithms win 
practically original database data mining problem large 
amount updates fup fup dhp apriori gammax support thousands tuples deleted execution time seconds effect delta gamma similar experiment done setting gamma support threshold 
time keep size delta gamma constant vary size delta results plotted 
increases jd increases 
execution time apriori dhp increases run faster fup fup large 
fup fup dhp apriori gamma support thousands tuples inserted execution time seconds effect delta examining closely notice execution time fup fup quite steady range 
execution time increases greater value transactions algorithms handle 
range execution time drops increases 
examine carefully notice sharper rises execution times fup fup range understand phenomenon recall iteration itemset large put suppose small small occur frequently statistically ffi ffi gamma small magnitude close 
ffi ffi gamma ffi gamma small magnitude 
may positive negative 
lemma applied prune step fup candidate pruned ffi delta gamma delta gamma theta 
delta gamma delta gamma ae high change deleted delta gamma delta gamma small magnitude may escape pruning ffi large high chance pruned away 
delta gamma delta gamma pruned away ffi negative chance low 
delta gamma delta gamma increases negative value small positive value varies thousands chance gets pruned increases 
itemsets behave drop execution time fup fup dramatic delta increases slightly delta gamma slightly delta gamma similar result occurs delta gamma decreases slightly delta slightly 
scale experiment find fup fup large databases experiments scale databases conducted 
setting dx gamma support threshold 
results shown 
execution times algorithms increase linearly increases 
shows fup fup scalable large databases 
fup fup dhp apriori dx gamma support number tuples original final database execution time seconds scale experiment discussion new incremental algorithms certain information achieve high performance 
information includes old large itemsets support counts transactions changed update gamma transactions inserted deleted delta delta gamma 
reasonable assume information available 
answer 
large itemsets support counts original database come results previous mining activity 
assume information stored 
association rules calculated counts efficiently desirable store counts association rules 
storing counts enables maintain association rules efficiently 
database system supports recovery keeps updates log files 
consequently possible retrieve log files deleted newly added transactions mining 
identifying newly inserted transactions current updated database help transaction ids select updated database transactions remained unchanged mining activity 
obtain set unchanged transactions 
delta gamma gamma delta available 
studied efficient incremental updating technique maintenance association rules discovered database mining 
technique updates association rules old transactions removed database new transactions added 
uses information available previous mining reduce amount done discover association rules updated database 
generalization previous algorithms apriori fup 
performance studies show new technique significantly faster mining updated database scratch 
new technique works wide ranges system parameter values 
particular works updates wide range insertion sizes small moderate deletion sizes 
agrawal ghosh imielinski iyer swami 
interval classifier database mining applications 
proc 
th int 
conf 
large data bases pp 
vancouver canada august 
agrawal imielinski swami 
mining association rules sets items large databases 
proc 
acm sigmod international conference management data washington dc may 
agrawal srikant 
fast algorithms mining association rules large databases 
proc 
th int 
conf 
large databases pp 
santiago chile 
cheung han ng wong 
maintenance discovered association rules large databases incremental updating technique 
proc 
th int 
conf 
data engineering new orleans louisiana 
cheung han ng fu fu 
fast distributed algorithm mining association rules 
proc 
th int 
conf 
parallel distributed information systems miami beach florida dec 
fayyad piatetsky shapiro smyth uthurusamy 
advances knowledge discovery data mining 
aaai mit press 
han cai cercone 
data driven discovery quantitative rules relational databases 
ieee trans 
knowledge data engineering vol 
pp 

han fu 
discovery multiple level association rules large databases 
proc 
int 
conf 
large data bases zurich switzerland pp 
sept 
han fu wang chiang gong koperski li lu rajan xia zaiane 
dbminer system mining knowledge large relational databases 
proc 
international conf 
data mining knowledge discovery kdd portland oregon august 
klemettinen mannila ronkainen toivonen verkamo 
finding interesting rules large sets discovered association rules 
proc 
rd int 
conf 
information knowledge management pp 
gaithersburg maryland nov 
lu setiono liu connectionist approach data mining proc 
th int 
conf 
large data bases pp 
zurich switzerland sept 
park chen yu 
effective hash algorithm mining association rules 
proc 
acm sigmod international conference management data san jose california may 
park chen yu efficient parallel data mining association rules 
proc 
internation conference information knowledge management baltimore md nov 
srikant agrawal 
mining quantitative association rules large relational tables 
proc 
acm sigmod international conference management data pp 
montr eal canada june 
