natural deduction approach dynamic logic furio honsell marino miculan dipartimento di matematica informatica universit di udine delle scienze udine italy 
honsell miculan dimi dipartimento di informatica universit di pisa corso italia pisa italy 
miculan di unipi 
natural deduction style presentations program logics useful view implementation logics interactive proof development environments type theory lego coq fact nd style systems kind systems take best advantage possibility reasoning assumptions offered proof assistants generated logical frameworks 
introduce discuss sound complete proof systems natural deduction style representing various truth consequence relations dynamic logic 
discuss design decisions lead adequate encodings logics coq 
derive dynamic logic set rules representing nd style system hoare logic 
computerized proof assistants useful probably necessary logical systems reasoning programs 
fact amount trivial repetitive routine details involved program logics renders error prone activity human prover 
type theories edinburgh logical framework calculus inductive constructions especially designed fruitfully general logic specification language logical framework lf 
streamline process generating interactive proof development environments tailored peculiarities logics 
fact interactive proof development environment type theories lego coq elf readily turned specific logic soon fix suitable environment corresponding encoding logic 
editors efficient especially designed specific logic logical frameworks useful reasons 
provide common medium integrating different systems 
lf derived editors rival special purpose partially supported esprit brp types proofs programs italian murst 
results papers communicated second author types annual meeting astad 
editors efficiency increased integrating independent logical systems 
secondly lf generated editors natural 
user original logic transfer immediately practical experience trade tricks 
force user overhead unfamiliar indirect codings editors derived fol editors encoding 
contrary frequent experience encodings logical frameworks provide ultimate normative formalization logical system consideration 
specification methodology logical frameworks fact forces user precise tacit conventions 
thirdly logical frameworks type theory natural deduction style analogy judgements types 
naturally allow user lf generated editor reason assumptions go developing proof way mathematicians normally reason hypotheses formulating conjectures storing retrieving lemmata top goal directed fashion 
feature offered logical frameworks urges designer implementor editor object logic look presentation logic take best advantage possibility manipulating assumptions 
crucial concept involved discussing notion assumption logic consequence relation cr 
cr representations logical dependencies assumptions 
play crucial le stating proving encodings logical frameworks 
usually logic gives rise cr 
instance fol validity cr truth cr understand free variables assumptions 
modal logics cr arise focus frames worlds 
usually cr differ form deduction theorem yield 
truth cr yield simplest deduction theorems 
validity cr best suited capturing notion sets axioms notion theoremhood 
different cr defined program logics take account possibility restricting attention interesting subclasses models 
building editor logic designer implementor clarify equally important apparently orthogonal issues 
cr focus 
style presentation best logic hilbert natural deduction nd gentzen sequent style 
methodology logical frameworks answering question amounts decide judgements encode 
experience shows nd style systems representing truth cr best suited exploiting reasoning power assumptions provided logical frameworks 
investigate logical systems dynamic logic dl view encoding interactive proof development environment coq 
similarly happens fol validity truth cr arise dl program logics general 
sound relative complete systems representing validity cr restricted finite sets assumptions readily derived hilbert systems dl 
surprisingly little attention far literature truth cr program logics 
line introduce discuss natural deduction style systems representing truth cr developing nd style systems dl delicate complicated issues deal free logical variables versus program identifiers 
new difficulties arise consider derivations assumptions assumptions program variables enforce local constraints environments subderivations 
type theoretic metatheory provided logical frameworks allows express schematic generalized assumptions provides interesting solutions difficulties 
problematic issue arises connection infinitary rules 
logical frameworks coq offer case remarkable metatheoretic solution 
embody power higher order intuitionistic logic inductive definitions recursive functions defined 
difficulties arise connection rules proof rules applied premises depend assumptions proper sequent style rules scott rule rules modify substantially structure assumptions 
problematic side conditions rules internalized framework expense slight modification basic judgment exploiting possibility schematic premises rules 
encodings exploit thoroughly higher order features provided logical frameworks 
sake simplicity consider datatype natural numbers 
organized follows 
section introduce sound complete nd style systems respect truth cr dynamic logic dl order language peano arithmetic 
encodings systems type theory section 
section describe derivation impure nd style system truth cr hoare logic 
section compare kiv system special purpose editor dl implementation hoare logic cambridge hol 
final remarks appear section 
appendix give syntax semantics peano arithmetic pa hoare logic dl 
appendix give notion consequence relation related basic logical notions 
standard proof theoretic notions notations see 
terminology notations concerning logical frameworks 
coq code implementations examples available url www dimi miculan dl 
authors grateful referees useful remarks earlier version 
nd style proof systems dynamic logic dynamic logic see app definitions thoroughly investigated model theoretic point view 
attention proof theory possibility representing consequence relations different validity 
relevant concept theoremhood proof systems considered mainly hilbert style systems 
remarkable exception albeit unpublished nd style system deterministic dl due stirling see sect 
absolute validity absolute truth various cr introduced class models focuses 
focus language peano arithmetic pa consider classes models class order structures models pa consisting standard model denoted 
truth validity cr dl defined suitably specializing general definition definition truth validity order structures 
order language range sets formul formul 
order model see appendix truth cr wrt relation defined validity cr wrt relation defined sm sm 

absolute truth cr relation lm absolute validity cr relation lm ranges order models introduce nd style system snd dl adding usual nd style system peano arithmetic rules fig 
denote formula obtained replacing occurrences bound quantifier possibly converting order avoid capturing free variables 
set variables occurrences bound denoted fv 
write natural deduction rules proofs linearized notation denotes proof tree premises respectively 
system infinitary system possibly infinite set 
system snd dl sound complete respect truth cr theorem 
snd dl proof obtained modifying suitably proof theorem see details :10.1.1.12.8714
system snd dl nd style system rules program constructor corresponding elimination rules induced rules 
rules equality quantifier involved usual ones fol due presence commands 
reflexivity equality encoded immediately rules congruence rephrased care derivations fv fv xp ci fv xp fv xp fv congr pt command free fig 

system snd dl 
prevented 
introduce rules congr 
congr applied command free formul formul command appears see app 
applied formula merely replaces occurrences identifier new identifier 
non traditional form elimination due fact general quantified formula may contain commands occurrences bound variable replaced term 
instance holds na instantiation clearly meaningless 
correct formulation instantiation quantified variables fact difficult technical issues deal encoding dl 
hilbert systems usually achieved replacing required program equivalent normal form 
zn xn 
xn zn xi identifiers appearing zi fresh obtained replacing xi zi see 
solution clearly cumbersome want practically formal system 
problematic nature instantiation quantifiers lies case congruence rules different nature pure logical identifiers program variables 
fact property hold dl 
solution instantiation problem replace bound variable fresh variable assume minor premise 
usual elimination rule derivable case command free predicates 
infinitary nature rule essential achieving completeness snd dl respect full 
fact proofs finitary systems take account finite number assumptions dl satisfy compactness consider set easily find true consequence finitary system 
useful albeit impure intro rule scott rule sc def clearly admissible snd dl 
focusing consequences true models peano arithmetic system snd dl rules interesting consequences true reasoning real programs utilize datatype real integers 
instance formula def valid take nonstandard model consider state nonstandard integer 
happens termination formula 
reason focusing sole standard model arithmetic associated cr order represent extend standard nd style system snd dl hybrid natural deduction modal system nd dl adding convergence rule equivalent dual induction principle rule conver px px fv fv rules impure sense avron proof rules premise theorem 
easily see nd dl sa dl 
nd nd dl sound complete respect standard model integers 
theorem 
nd dl proof readily derived th 
interesting notice rule recover full power rule infinitary order logic theorem 
command free formula rule derivable sa nd dl 
pn xp proof 
sketch proof relies fact command iteration nondeterministic xp equivalent fresh 
premise rule rendered means formula fresh applications yield rule 
introducing proof rules alternatively noninterference judgments la reynolds side conditions rules 
judgments generalize side conditions fv 
see details 
encoding nd style systems dl section apply generalize methodology developed define encoding snd dl sa nd dl calculus inductive constructions implemented coq proof assistant 
te set te te te te te te te te te fig 

representation dl dl constructors 
te important difference respect encoding hol longer treat par object language identifiers metalanguage schematic variables see similar difficulties handling hoare logic 
fact presence identifiers formul standing left hand values substituted forces introduce specific type identifiers 
substitutions terms identifiers handled mor free metalanguage higher order syntax 
handle metalevel substitution identifiers identifiers 
encoding snd dl signature dl syntax 
syntactic category represented inductive set denoted name font syntactic constructor represented functional constant fig 
function defined induction syntax embeds propositional formul formul 
clear form context omitted sake readability 
applications computable coq environment 
compositional bijective representation syntactic classes 
sake simplicity omitted term denote formula encoding lf signature similarly shall deal sets assumptions 
represent universal quantifier syntactic constructor take care conversion bound variables metalevel 
consequently xp instance represented 
rules 
snd dl nd style rules encoded straightforwardly methodology judgment prop fig 
intended meaning formula holds 
briefly discuss interesting points concerning encoding complex rules 
infinitary rule 
due presence system snd dl take account infinite sets premises 
need able refer infinite sets formul 
represent sets assumptions coq term type nat prop 
version rule encode coq nat nat fig 

representation rules snd dl signature dl 
isnotin isnotin te te isnotin isnotin isnotin te isnotin te ay fig 

lf encoding rules assignment 
isnotin encoding refer premises enumerated function provably total pa 
assignment rules 
remarked earlier exploit higher order syntax directly encode substitution operator possible 
na encoding assignment constructor te te yield meaningless commands 
substitution dealt differently style 
encodings rules appear fig 
need express fact identifier fresh different pre existing identifier 
generalize mason idea expounded introduce auxiliary judgments isin isnotin set prop 
intuitive meaning isin identifier appears phrase type dually isnotin 
judgments derivable means simple set rules polymorphic syntactic constructors fig 
inference judgments completely syntax driven sufficient look top level constructor phrase deciding rule applied 
premise isnotin rule enforces fact context contain occurrence rules reify freshness condition variables locally quantified premises 
achieved assuming suitable isnotin judgments 
reified assumptions needed deal contexts rule 
isin isin isin isin isin isin isnotin symm set op set op isin isin op set op set op isin isin op isin isin op isin isin op isnotin isnotin isnotin zero isnotin te zero isnotin false isnotin false isnotin isnotin set op set op isnotin isnotin op isnotin isnotin isnotin op isnotin el isnotin isin isnotin isnotin set set op isnotin op isnotin isnotin fig 

rules auxiliary judgments isin isnotin dl 
congruence rules 
encodings congr appear fig 
encoding check context contain occurrence enforced premises isnotin isnotin encoding congr check predicate command free 
easily achieved introducing new judgment bf prop rules bf false bf false bf forall bf bf bf eq bf bf bf bf bf te bf bf bf bf imp bf bf bf clearly derivations bf syntax driven automated coq environment auto tactic 
congr isnotin isnotin te te bf fig 

lf encoding congruence rules 
isnotin isnotin te isnotin isnotin te fig 

lf encoding rules 
quantifier rules 
encoding rules appearing fig straightforward standard fol case 
deal reify freshness assumptions variables locally quantified premises case rules 
adequacy encoding 
statement adequacy theorem encoding dl problematic paradigm case fol take account infinite sets formul 
clearly done full generality able state adequacy theorem respect representable sets assumptions sets formul encodings enumerated coq 
formally pn representable context exists term dl nat dl pn representable set assumptions order define coq representation proceed follows 
assume free identifier appearing identifier judgment asserting different identifier notice obvious reasons interested considering finite set identifiers time put def fv isnotin fv 
pn finite put 
pn 
un pn pn infinite representable term put nat 
theorem proved induction 
theorem adequacy dl 
representable set assumptions 

te snd dl isin fv snd dl isnotin fv 
snd dl dl 
encoding nd dl signature dl new problematic issues encoding proof rules 
fact underlying theory direct way enforcing premise condition theorem depends assumptions generally formula depends set assumptions 
solution give exploits possibility provided logical frameworks considering locally quantified premises general judgments terminology martin basic judgment dl prop set constructors 
elements called worlds suggestive reasons 
define new signature snd dl dl rules obtained corresponding rules dl just replacing quantifying universally extra parameter conver rule adequately encoded follows conver isnotin isnotin te te succ idea extra parameter making assumption forced assume existence world say instantiate judgment judgment appears hypothesis deriving premise judgment universally quantified respect amounts judgment generic world assumptions assumptions 
simple encoding proof rule illustrates point ass cons comp termin fv fig 

rules system snd hl 
idea suitably generalized take care infinite sets premises encode scott rule sc nat nat nat general methodology allows encode adequately arbitrary proper sequent rules 
lack space discuss adequacy formally see details 
derivation truth hoare logic section outline derivation coq rules nd style system representing truth cr hoare logic dl 
truth cr hoare logic obtained definition appropriate parameters appear app lack space elaborate different cr hoare logic formal systems representing 
area truth cr nd style systems hoare logic unexplored see 
system sound wrt validity cr 
various possibilities defining nd style systems hoare logic utilizing non interference judgements 
interesting systems successfully scale languages procedures arise take seriously reasoning assumptions 
conceptually appealing connect naturally language dl 
expect practically significant 
consider system snd hl appearing fig sound complete truth cr 
proposition 
partial correctness rules snd hl derivable snd dl sc rule termin derivable nd dl sc 
proof 
sketch examine case fig 
recall def suppose defined inductively application sc 
derivation proof snd dl 




sound applications sc respectively 
sc essential rule admissible 
derivation snd hl easier assume sc explicit rule system 
fact due rules discharged hypotheses coq allow inductive definition truth judgment reason inductively proofs derive system sc 
formal counterpart prop carried coq quite easily signature dl sc 
comparison related knowledge published nd style proof system dynamic logic 
approach inspired unpublished notes colin stirling nd style system deterministic dynamic logic sketched 
stirling fundamental idea divorce notion free occurrence variable substitution 
system deals assertions form called explicit substitution 
prefix form tn xn represents sequence delayed substitutions 
substitutions performed formula applied command free 
idea inspiring clearly impractical 
snd dl retains idea overcomes explicit substitution problem assignment rules display derivations slightly non standard self 
full advantage assumptions distributing substitution proof context 
course sound respect truth consequence relation 
technique treating substitutions means sets assumptions introduced burstall honsell fully exploited context encoding natural operational semantics programming languages type theories 
number interesting issues arise compare proof development environments generated signatures dl dl remarkable examples mechanized environments program logics karlsruhe interactive verifier kiv system implementation hoare logic cambridge hol 
kiv system tactical theorem prover deterministic dynamic logic realizes environment development verified software 
tradition edinburgh lcf kiv provides metalanguage representing logic tactics strategies proof search proof management 
kiv hilbert style proof system dynamic logic axiomatised means axioms rules :10.1.1.12.8714
user defined strategies tactics unnatural calculus user friendly 
intended consequence relation kiv validity truth 
consequence kiv enjoy deduction theorem fails contrary built system snd dl deals truth 
kiv encodings snd dl represent infinitary rule means quantification naturals kiv system quantification level logic approach meta level level coq 
encoding closer spirit original proof system 
furthermore higher order features coq provide metavariables free quantify programs carry schematic proofs reused 
hilbert style proof system sh hl hoare logic implemented cambridge hol aspects features interesting treatment program variables represented objects type string 
encoding provides naturally infinite set variables different need supplementary assumptions 
technique simplify treatment identifiers 
need judgments isin isnotin deal variables quantified locally assumptions 
final remarks directions pragmatics 
systems quite powerful natural proof development environments coq generated encodings probably effectively usable large case studies 
serious pragmatic problem duplicate level object logic lot machinery coq take full advantage built tactics strategies 
open possible extend formula types paradigm boxed formul dynamic logic explain away hol constructs 
possible pragmatic improvement approach derivations connected side condition judgments isin isnotin bf deterministically syntax driven 
done logic programming language elf defining suitable tactics 
systems dynamic logic data types pa investigated 
finitary vs infinitary systems 
systems essentially infinitary interested strongly complete representations 
interesting investigate power finitary proof systems 
instance replace rule finitary invariance rule system snd dl def snd dl incomplete allow derive fundamental axiom iteration theor snd dl snd dl strongly complete respect 
equivalences programs 
interesting application proof editor generated signature dl coq possibility proving formally equivalences programs 
meyer halpern programs equivalent words model distinguish programs 
encodings snd dl particularly suited computer assisted proofs equivalence programs naturally provide metalogical facilities quantifications predicates second order quantifications proofs induction structure predicates 
arithmetical completeness 
completeness dynamic hoare logics usually discussed terms arithmetical expressive models arithmetical cook completeness 
hilbert style system sh cook complete class arithmetical models th sh th denotes collection command free formul valid model means completeness particular model achieved adding system order properties model 
different completeness results th extra axioms needed 
order theory derived nd dl due power infinitary rule 
hand theorem holds special case standard model arithmetic 
want give natural deduction formulation systems need introduce auxiliary unary predicate symbol intended meaning set standard integers see 
case conver rule modified follows px conver fv syntax semantics dl syntax semantics pa language pa peano arithmetic defined follows identifiers 
terms propositional formul formul xp interpretation functions sm dm sm defined style denotational semantics model dm peano arithmetic 
sm dm domain environments ranged 
semantic functions defined syntax phrases obvious way 
semantics formul na def extended sets formul usual tarski interpretation relation sm amounts membership syntax semantics hoare logic 
focus pa give definition hl dl respect order theory pa language hl defined restricting pa quantifier free formul introducing new syntactic domains nondeterministic programs hoare triples assertions follows non deterministic programs hoare triples assertions semantics hoare logic naturally extending interpretation new syntactic domains sm sm sm sm 
hoare triples interpreted usual def sm ms 
syntax semantics dl 
language dl defined extending pa new formula constructor introducing new syntactic domains command free formul regular programs follows command free formul xp regular programs 
formul xp semantics dl extending interpretation domain function sm sm defined follows composition operator extended obvious way def ms def def ns def def semantics formul sm extended def extra case putting sm 
consequence relations definition cr 
single consequence relation set formul binary relation satisfies properties reflexivity formula transitivity cut called antecedent set assumptions 
definition differs allow possibly infinite sets assumptions exactly 
cr usually defined completely way semantics 
definitions cr usually ineffective practice order establish consequences formul sets assumptions 
order cr needs concrete way representing 
achieved defining formal proof system called calculus 
objects formal proof systems usually simply formul logic formal representations sequents proofs formul 
definition fps 
formal proof system calculus cr set formul method defining cr denoted 
sound faithful 
complete 
strongly complete assertion called formal sequent read derivable system rules nd style calculi general schemata form 

pn 
possible side condition restriction max 
level terminology applicability schemata 

apt 
years hoare logic survey part acm transactions programming languages oct 

avron 
simple consequence relations 
inform 
comput jan 

avron honsell mason pollack 
typed lambda calculus implement formal systems machine 
journal automated reasoning 

burstall honsell 
operational semantics natural deduction setting 
huet plotkin pages 

coquand huet 
calculus constructions 
information control 

gordon 
mechanizing program logics higher order logic 
subrahmanyam birtwistle editors current trends hardware verification automated theorem prover pages 
springer verlag 

harel 
order dynamic logic 
lncs 
springer verlag 

harel 
dynamic logic 
gabbay guenthner editors handbook philosophical logic volume ii pages 
reidel 

harper honsell plotkin 
framework defining logics 
acm jan 

reif stephan 
dynamic logic program verification 
meyer editors proc 
lfcs logic number lecture notes computer science pages 
springer verlag 

honsell miculan 
encoding program logics type theories 
despeyroux editor deliverables types workshop proving properties programming languages sophia antipolis sept 

honsell miculan 
encoding modal logics logical frameworks 
appear 

huet plotkin editors 
logical frameworks 
cup june 

inria rocquencourt 
coq proof assistant manual july 

kozen tiuryn 
logics programs 
van leeuwen editor handbook theoretical computer science volume pages 
north holland 

luo pollack taylor 
lego preliminary user manual 
department computer science university edinburgh oct 

meyer halpern 
axiomatic definition programming languages theoretical assessment 
acm apr 

michaylov pfenning 
natural semantics meta theory elf 

eriksson schroeder heister editors proceedings second international workshop extensions logic programming number lnai pages sweden jan 
springer verlag 

miculan 
expressive power structural operational semantics explicit assumptions 
barendregt nipkow editors proceedings types number lncs pages 
springer verlag 

miculan 
encoding logical theories programs 
phd thesis universit di pisa 
appear 

pfenning 
elf language logic definition verified metaprogramming 
fourth annual symposium logic computer science pages 
ieee june 

prawitz 
natural deduction 
almqvist wiksell stockholm 

reif 
kiv system systematic construction verified software 
kapur editor proc 
cade number lecture notes computer science pages 
springer verlag 

reynolds 
syntactic control interference 
conference record fifth annual acm symposium principles programming languages pages tucson oct 
association computing machinery 

stirling 
logics programs algorithmic dynamic logics 
unpublished notes 

stirling 
modal temporal logics 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 

werner 
une th orie des constructions 
phd thesis universit paris 
