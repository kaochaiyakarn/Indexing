centrum voor wiskunde en informatica coordination heterogeneous coastal hydrodynamics application manifold blom arbab hummel software engineering sen sen december report sen issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax coordination heterogeneous coastal hydrodynamics application manifold blom arbab cwi box gb amsterdam netherlands hummel wl delft box mh delft netherlands show coordination language manifold control interactions multiple heterogeneous application programs 
concrete example delft consulting research develops models natural hydraulic systems river flows currents wave penetrations 
simulation programs accurately model water flow phenomena places world 
number programs need conjunction address comprehensive problems 
example water level rotterdam harbour determined behaviour north sea discharge rivers 
creating unix shell scripts particular configuration application programs executive program developed implemented manifold reads configuration file subsequently starts interconnects controls relevant component programs 
mathematics subject classification computing reviews classification system keywords phrases coordination reusability heterogeneous applications distributed computation hydraulic modelling industrial applications 
shallow water hydrodynamics computation intensive application combination various modeling techniques algorithms study real life consequences number natural phenomena 
studies vital importance various planning decision making processes parts world required regulatory policy making agencies countries 
example consider problem deciding factory allowed drain waste water river 
adding factory outlet river consequences river thermal chemical morphological biological exist various models study di erent aspects consequent natural phenomena 
di erent aspects independent influence thermal changes ect viscosity nature flow flow changes morphology river bed displacing changes chemistry morphology ect plant animal biology river biological changes turn ect chemistry morphology thermal properties river 
application type heterogeneous sense employs number inherently di erent mathematical models algorithms 
furthermore principle decision applicability particular model algorithm may depend fluctuations certain computed values may dynamically 
near coastal areas ects coastal waves tides seasonal changes accounted 
adds form heterogeneity application domain time scale relevant phenomena time step modeling ranges fractions second flow thermal chemical transport decades long term ects waves coastal river beds 
founded independent research consulting organization delft known experimental modelling facilities 
decades delft developed acquired large number numerical hydraulic modelling programs various aspects flow modelling 
programs input specifications internal hidden assumptions input data consistency 
north sea rotterdam harbour domain decomposition 
programs conjunction single application recognize coordination problem compounded inherent heterogeneity output program easily input 
serious form heterogeneity grid boundary consistency problem 
programs domain decomposition models di erent grid sizes orientations origins 
common boundaries respective regions observe mismatch grids 
instance possible decomposition modelling flow phenomena sketched 
promising approach overcome heterogeneity special mapper modules convert domain common boundary 
case grid inconsistency problem example mappers ensure certain parameters water levels discharges heat chemicals remain consistent common boundary domains preservation matter energy equations 
facilitate coupling di erent domains delft constructed set mappers task map output program suitable input 
mapper bidirectional programs mapper programs combinations su ciently supported individual mappers 
number participating programs respective mappers increasing 
furthermore programs generally developed separate black box pieces code independent 
overview executive program hyman groups regards potential coupling application 
concept coordination outside relevant practice 
iwim model ers paradigm exogenous control oriented process coordination ideally suited situation described 
iwim clear distinction classes processes workers managers 
worker processes considered black boxes regulated openings called ports information units flow 
furthermore process virtual antenna broadcast receive occurrences events received broadcast processes 
worker processes supposed job designed numerical computation sort maintain large datasets manager processes hand supposed coordinate control pools worker processes 
facilities worker processes possess communicate processes facilities create new processes set communication channels 
way set break arbitrary complex networks communicating processes 
manifold pure coordination programming language realization iwim model 
processes described hydraulic modelling processes data mapper processes conveniently regarded black boxes worker processes iwim manifold 
new executive program called hyman hydra written manifold 
task program start necessary processes computation data mapping interconnect coordinate particular application run 
rest describe notable elements executive program excerpts manifold source code 
manifold see additional language elements informally explained 
remainder organized follows 
give overview executive program hyman describing layout process table table constructed application run 
give overview methods hook various existing atomic processes minimal ort 
section 

overview executive program hyman typical hydraulic modelling example depicted 
cross section river model di erent flow layers 
flow river modelled layers called represented di erent finite element grid 
small element number physical quantities velocity concentrations chemicals temperature computed solving partial di erential equations subject initial conditions 
results computations valid limited time period determine initial conditions time step 
repeating procedure obtains series values physical quantities representing flow river 
layers numerical computations routinely done executing existing fortran programs unix shell scripts 
typically programs read write number disc files time step 
modelling river dividing layers reasonable approximation layers completely independent 
step input layer updated output program called mapper responsible ensure data program suitable 
example take account di erence grid sizes downwards movement salt grid element 
overview executive program hyman proportionally divided adjacent grid elements 
advent parallel computers advantageous programs run simultaneously communicating parallel processes 
realize synchronization points added exiting fortran programs processes exchange control messages data sets 
executive program called hyman written manifold coordination language set control static network interconnected processes 
focus structure executive program 
realize example configuration interconnected processes set shown fig 

data hyman flow flow executive numerical model numerical model mapping process configuration layer numerical modelling flow river 
executive reads desired process configuration file contains specifications numerical processes process names class names start arguments followed mapper process specifications list bi directional connections processes called joins example hydra topology file process flow top mdf process flow bot mdf mapper flow flow top mdf bot mdf join join example computation process instances defined instance names class flow 
mapper process defined instance name class flow flow 
computation processes connected mapper process 
having read file executive proceeds built specified network number steps 
computation processes created activated executive waits computation processes complete initialization procedures barrier synchronization 
subsequently mapper processes created activated sends message neighbors computation processes waits replies 
collecting replies mapper checks convergence happens reports fact executive program calling barrier synchronization function 
converts datasets neighbor equivalent datasets suitable neighbor neighbors turn wait new input 
executive program waits convergence results mappers barrier synchronization 
happens final results reported processes terminated 
look closely details implementation executive program hyman 
parsing process configuration file process table constructed contains entry process information fields process name status type class names arguments run time joins mappings joins connected processes 
information manifold main program understood 
overview executive program hyman manifold main process args auto process variable 
auto process err integer 
auto process variable max processes 
auto process joins variable max joins 
event setup complete error occurred wait 
message hyman start reading process configuration file err args joins err post error occurred joins post setup complete 
setup complete process process 
process mappers mapper 
mappers post wait 
wait message hyman waiting barrier mappers barrier mappers message mappers reached barrier checking votes raise barrier request mappers vote mappers message hyman mapper voted post wait 
message hyman mappers vote terminating mappers deactivate mappers message hyman processes deactivated void 

message hyman 
error occurred hyman error occurred err stderr cancel 
auxiliary processes instantiated auto matically activated internal usage 
particular line line join table joins created instances variable 
tables partially filled information process configuration file line 
line processes specified instantiated activated table updated run time process known remembered numerical computation processes shared memory data segments created allow fast exchange voluminous data 
line joins created join table process table updated appropriate run time information 
joins created streams type kk processes sources sinks permanent event sources executive hyman 
event setup complete posted received enter new block new auxiliary processes created mappers values returned manner 
manner scans delivers set 
overview application program interface process type specified second argument 
sets startup application orderly fashion allowing wait event activate mappers 
joins information flow processes application running 
coordinating main process waits mappers raise event barrier 
mappers agree having reached convergence application terminate computations resumed implying main resuming wait state 
illustrative show manner implemented manner event port save 
auto process variable 
dimension return process deref 
terminated 
void 
return 
keyword dimension returns actual number elements port array 
argument output port array variable containing process may dereference element obtain process wait specified event process occur line keyword terminated waits termination process specified preemptable event 
loop terminates event processes contained received 

overview application program interface facilitate communication mapper processes numerical modelling processes application programmers interface defined consisting interface function specifications include datatypes hydra application programmers interface functions int hy resume int int outgoing messages outgoing messages int max actual incoming msgs incoming messages int hy mapper processes int value vote convergence hy int objid object identifier char object name char configuration string int shared memory context id 

void hy int objid object identifier char object name char configuration string int number neighbor objects neighbors array neighbor objects initialization function provides application process numeric mapper process identification objid process name startup arguments specified instantiation manifold coordinating program arguments originally derived configuration file 
addition mapper process gets description processes connected neighbors prepared receive requests send replies 
initially part startup protocol numeric process call hy initialize call hy resume argument set zero output messages 
interpreted hy resume raise event picked manifold coordinating program 
described previous section coordinating program activates mapper processes numeric processes reached stage 
numeric processes wait hy resume incoming messages available mapper connected barrier synchronization 
mapper processes initialize loop call hy resume exchange messages neighbors 
outgoing messages send neighbors numeric processes wake wait states hy resume 
mapper processes turn wait hy resume messages neighbors arrived 
mapper processes essential task data received neighbors decide convergence criterion reached 
mapper process call interface function hy argument set 
established convergence criterion reached current data sets call function argument set indicating computation needs restarted slightly modified data set better chance reaching convergence 
function generate event barrier picked manifold coordinating program take appropriate action terminate application restart adapted data 
manifold environment functions implemented manifold atomic process interface functions messages relevant information packed units sent output ports executive appropriate connections 
units picked input ports respective joins 


manifold coordination language process control application realized consisting simple static process network 
serve model complex process control applications dynamic configuration required 
amount modifications existing programs minimal partly due mapper processes 
numerical computation processes modifications needed initialization data needed produced calling hy resume 
having realized application manifold run parallel process manifold may run machine case multiprocessor machine thread separate processor 
manifold threaded applications easier write maintain threading realized calling low level functions 
logically implied manifold language ectively realized manifold compiler run time system 

arbab 
iwim model coordination concurrent activities 
paolo ciancarini chris hankin editors coordination languages models volume lecture notes computer science pages 
springer verlag april 

arbab blom burger 
reusable coordinator modules massively concurrent applications 
software practice experience june 
extended version 

tan hummel 
delft hydra architecture coupling concurrent simulators 
parallel computational fluid dynamics developments advances parallel computers amsterdam 
elsevier science 

hummel cate 
distributed computing systems environmental applications engineering education 
proc 
th int 
conf 
rotterdam august 


hummel 
distributed engineering systems coastal zone management 
peter marian bob editors high performance computing networking volume lecture notes computer science pages 
springer verlag april 
