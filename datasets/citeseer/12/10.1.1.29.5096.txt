information extraction supported question answering rohini srihari wei li cymfony main street ny rohini cymfony com wei cymfony com phone fax october discusses information extraction system textract qa track held trec tests 
major objectives examine help ir information retrieval applications qa 
study shows provide solid support qa ii low level named entity tagging necessary component handling types questions iii robust natural language shallow parser provides structural basis handling questions iv high level domain independent extraction multiple relationships general events expected bring breakthrough qa 
natural language qa question answering ideal test bed demonstrating power information extraction 
vision natural operation ir information retrieval 
important question type support ir qa support 
forms major topic 
structure remaining part follows 
section give overview underlying technology cymfony developing 
section technology implement prototype qa track 
section examine question types discuss relationship tasks 
section propose sophisticated qa system supported levels 
supported part air force rome laboratories afrl phase contract 
afrl phase contract 

overview textract decade seen great advances interest area 
darpa sponsored tipster text program grishman message understanding conferences muc muc driving force developing technology 
fact muc specifications various tasks de facto standards research community 
necessary effort context muc program 
muc divides distinct tasks ne named entity te template element tr template relation st scenario templates chinchor marsh 
proposal levels modeled muc standards muc style representation 
modified muc task definitions order useful practical 
precisely propose hierarchical level architecture developing kernel system domain independent 
fact level cymfony developed textract state art ne tagger srihari 
textract obtained score combined precision recall tested muc dry run data muc provided scorer 
tagging speed approximately mb hour pentium system comparable deployed ne systems krupka hausman nymble bikel 
noted definition ne significantly expanded type information extracted 
addition muc defined ne types person organization location time date money percent entities identified existing ne tagger duration frequency age number fraction decimal ordinal math equation weight length temperature angle area capacity speed rate product software address email phone fax www name default proper name belong category sub type information government agency school belonging type organization military person religious person belonging person identified 
new types sub types named entities provide better foundation defining multiple relationships identified entities supporting question answering functionality 
example key question processor identify asking point 
cases asking point corresponds ne muc definition type questions long duration length depending question context far length frequency old age extended ne tagset helpful sophisticated qa 
ce correlated entity concerned extracting pre defined multiple relationships entities 
represents giant step forward existing deployed systems identifinder muc cymfony textract output isolated named entities 
ce extraction salient information available user individual isolated named entities inter related 
cymfony implemented ce prototype 
consider person entity example ce prototype textract capable extracting key relationships 
name including aliases 
title prof subtype military religious 
age gender male female 
affiliation 
position 
birth time 
birth place 
spouse 
parents 
children 

address 
phone 
fax 
email 
descriptors shown information ce represents mini cv person 
general ce template integrates greatly enriches information contained muc te tr 
terms relationships couple relationships employee location defined muc tr 
final goal effort extract open ended general events ge level information 
general events refer argument structures centering verb notions plus associated information time location 
ge dramatically different muc st task open ended domain independent st pre defined highly domain dependent 
currently cymfony stage research prototype implementation high level technology 
show example defined ge extracted text muc data julian hill research chemist accidental discovery tough compound revolutionized everyday life proved worth warfare died sunday del predicate die argument julian hill time sunday location del show system architecture system textract cymfony developing 
kernel modules linguistic modules ge ce ne pragmatic filtering pos qa question answering br intelligent browsing automatic summarization output database qa br application modules shallow parsing full parsing ne named entity tagging ce correlated entity extraction ge general event extraction referencing nominal signs tokenizer input textract system architecture shown core system consists kernel modules linguistic modules 
modules remain domain independent 
multi level linguistic modules serve underlying support system different levels 
results stored database basis related applications qa br intelligent browsing threading automatic summarization 
shown level immediate application enhancing function ir systems 
example ne ce ge support qa 
words need wait sophisticated module completed try port component technology qa 
done trec qa employing ne shallow parser 
table gives concise comparison task definitions architecture defined muc 
precisely ce technology supports intelligent browsing threading sense viewer access collected information entity ce interested jump freely inter related entities 
ge results basis automatic summarization 
adapted particular domain textract wide variety application potential intelligence police archive commercial banking medical records classified ads personalized news abstraction 
believe key application area information retrieval 
modules corresponding muc definitions ne ne ne types defined ce te tr tr types defined ce ge st substituting domain dependent st domain independent ge allows non deterministic output table comparison task definitions approach consists unique blend machine learning fst finite state transducer rule system srihari 
combining machine learning fst rule system able exploit best paradigms overcoming respective weaknesses 
ne supported qa section presents approach qa named entity tagging 
ne tagger textract trec qa track obtained encouraging results accuracy 
analysis showed questions asked ne response person time date location long duration length far length 
ne tagger proven helpful 
example answering questions happen answer contain ne time date 
questions type usually require answer containing ne person 
course ne targeted type necessary complete answering questions ne nature extracts isolated individual entities text 
sophisticated technology ce ge required locating targeted answer 
ce prototype textract available unable new technology enhancing qa performance 
simplistic methods nearest ne queried key words ne related key words line paragraph ne help narrow targeted text portions contain potential answers 
basic strategy employed qa prototype 
possible achieve effect traditional search engine ne support 
answer largely negative difficult form query pertaining information ne general 
search engines allow users form types queries wild cards pattern matching help locating targeted ne associating ne 
due types ne ne percent expressed variable forms natural language fact varieties usually expects 
sophisticated user may able readily come patterns cover great number varieties ne forming query system answer 
illustrates system design textract qa prototype 
components qa prototype question processor text processor 
text matcher module links processing results tries find answers processed question 
matching keywords plus ne type question pertains entity common location sentence 
addition types ne captured pattern matching effectively 
considerable number nes person organization location appear texts obvious surface patterns captured 
exactly rational hybrid approach combining pattern matching rules statistical learning srihari 
question processor asking point determination search engine ne tagger text matcher ne database question expansion text processor question answer document pool textract qa prototype architecture question processing question processor consists modules asking point determination question expansion 
results list keywords plus information asking point 
example question won nobel peace prize 
contains keywords won nobel peace prize 
asking point refers ne type person determined module asking point determination 
output question expansion simple feature template shown asking point person key word won nobel peace prize example asking point correspond type ne definition cultural revolution occur china 
system maps question template asking point reason key word occur cultural revolution china basically module asking point determination scans question search question words wh words maps corresponding ne types sub types pre defined notions reason 
adopt sets pattern matching rules purpose structure pattern matching rules ii simple key word pattern matching rules regarded default rules 
set rules shallow parsing results questions existing fst textract english shallow parser shallow parser system shown 
parser identifies basic syntactic constructions basenp basic noun phrase basic prepositional phrase vg verb group 
sample set rules name np city country mountain river city country mountain river name np person person name np org organization name np person org name rule checks head word np 
covers cases vg name np country vg developing np magnetic railway system 
rule works cases vg name np private citizen vg fly pp space citizen belongs word class person 
rule catch rule np class person person organization org asking point proper name default ne realized english capitalized string words 
examples include name film won golden bear berlin film festival 
pattern transformations expand ruleset please name np aux name np np words rules expanded rules 
example rule corresponds rule rule derived rule aux np city country mountain river city country mountain river np person person rule extracts asking point cases np aux np longest river pp united states 
rule covers questions np costume designer vg decided np michael jackson vg wear np glove np ku member vg won np elected office pp np nobel vg expelled pp pp conference pp east np famous communist leader vg died pp mexico city seen shallow parsing helps capture variety natural language question expressions 
cases simple key word pattern matching capture asking point 
second set rules 
rules set rules failed produce results 
sample rules person time date place location time day time day week day month month age old age brand product name far tall high length large big small area heavy weight rich money frequency number long length duration reason times rule keeps ambiguity unresolved produces non deterministic output asking point 
example long maps ne type duration length text matcher attempt find sentences contain ne duration ne length time maximally satisfying key word matching constraints 
obviously naive approach simple approach robust proven helpful trec experiments 
second module question processor question expansion corresponding query expansion ir 
currently module simple lexical lookup procedure 
attempts find synonyms key verbs plus morphological variants synonyms non ne notion asking point 
expansion template template asking point person key word won win gain gained get got acquire acquired obtain obtained nobel peace prize template corresponding expanded shown asking point due reason order order vb key word occur occurred happen happened take place took place cultural revolution china item asking point list attempts find infinitive checking word followed verb part speech tag vb 
know infinitive verb phrases english explain reason action 
text processing text processing side send question directly search engine order narrow document pool say documents ne processing 
employed trec supplied search engine results engine purpose 
text matcher attempts match question template processed documents asking point key words 
preliminary ranking algorithm built matcher order find probable answers 
primary rank count unique keywords contained sentence 
secondary ranking order keywords appear sentence compared order question 
third ranking exact match variant match key verb 
implemented procedure filter extracted sentences representing potential answers string bytes required qa track 
procedure ensures output contain information ne key words determined asking point 
cymfony textract qa participated trec qa category submitting text strings bytes 
accuracy 
considering ne technology support qa run encouraging result 
considerable room performance enhancement 
believe high level defined task ce ge helpful qa see discussion 
results answers questions study general question types related section 
suggests research direction terms qa 
show proposed hierarchical system covers wide range questions supported conventional muc defined tasks system performing muc tasks helpful performing qa function 
example answering questions located tr information location provides ready answer 
identification different types ne helpful raising retrieval hit rate performing qa 
frequently asked questions muc little help 
questions major types shown 
type ask entity aspect feature including relationship address email telephone number 
profession 
organization employer 
wife 
located 
products 
type ii ask event happen 
happen 

meet 
give 
give 
entity related questions 
entity related environment multiple aspects couple trs defined muc cover fraction type questions 
design correlated entities motivated users frequent needs search various aspects information entity type questions shown defined relationships deemed important entity ce template 
covers type questions better muc tr 
addition expected implementation trivial function threaded search type questions answered ce system extended general questions type example julian hill wife telephone number 
equivalent polly telephone number 
hill affiliated located 
equivalent du pont located second event related questions general events 
muc st information help answering general event questions entirely domain dependent 
example st defined muc specific domain air vehicle launch reports 
defined capture information launch vehicle payload vehicle date site launch information mission type function status 
type extremely domain dependent information place general purpose ir qa 
powerful qa support believe comes general event design address questions open ended domain independent events 
effort implementing ge expected produce breakthrough qa 
summary pointed limitation muc standards qa 
demonstrate level domain independent design serves purpose qa better 
multi level supported qa illustrates system architecture proposed qa development plan levels support textract development 
question processor semantic template search engine ne ce ge nlp modules text matcher database question expansion text processor question answer document pool template matcher ne nlp modules textract qa system architecture tackle parsing questions extraction appropriate answer free text sub systems question processor ii text processor 
noted sub systems go parallel processes share nlp resources point matching ranking 
fact questions form sub domain natural language phenomena syntax 
design question goes tokenization pos tagging ne tagging shallow parsing full parsing generate semantic template question 
nlp module place question processing questions normally related form meaningful discourse 
design keeps qa system modular flexible 
sub systems linguistic support 
merging question templates ge templates template matcher fairly straightforward 
undergo nlp processing resulting semantic templates form 
question templates ge templates correspond fairly standard predictable patterns predicate value open ended structure remains stable 
precisely user ask questions general events participants event time place events 
addresses far types general questions potential user 
example user interested acquisition events ask questions companies acquired microsoft 
companies microsoft acquire 
system parse questions templates shown 
predicate acquire argument microsoft argument time user wants know acquisition happened ask netscape acquired 
system translate pattern 
predicate acquire argument argument netscape time note variables instantiated 
question templates serve search constraints filter events extracted ge template database 
question templates extracted ge template share structure just compare question templates ge template simple merging operation accomplish function providing user exactly event related information searching 
important questions waiting answered done verb question differs processed text verbs convey meaning 
ii done question asks ge ce information 
question occurs question netscape acquired text netscape bought aol 
discussed previously ge extractor designed capture variations surface structures passive expressions semantic structure argument structure ge template open ended predicate slot simply filled actual verb inflection removed buy case 
thing happens question parsing resulting acquire filler predicate slot 
order successfully merge synonyms acquire buy designed module question template expansion ontology 
line ontology conceived interface system automatically produce related patterns question template 
example template acquire buy trigger word sell automatically produced sell template derived template synonymous trigger word possess produced possess open ended question answering feature supported ge results lexical resources ontology ultimate goal qa application system 
answer second question lies back model model trec qa track fully included part 
naive qa implementation maximally satisfying key word constraints plus ne constraint robust 
questions information ge ce defined scope get list potential possibly accurate answers 
colleagues william andrews liu lars nilsson cheng niu ray wen hao xu qiao assistance completing qa task 
addition wish acknowledge professor gordon cormack university waterloo waterloo ontario providing access line search engine 
bikel 
nymble high performance learning name finder 
proceedings fifth conference applied natural language processing morgan kaufmann publishers pp 

chinchor marsh 
muc information extraction task definition version proceedings muc grishman 
tipster architecture design document version 
technical report darpa 
krupka hausman 
description tm extractor system muc proceedings muc muc 
proceedings seventh message understanding conference muc published website www muc saic com srihari 
domain independent event extraction toolkit afrl rs tr final technical report published air force research laboratory information directorate rome research site new york decided nature 
effective information extraction system ignores information attempts extract salient key information 
contrast user may ask questions information 
