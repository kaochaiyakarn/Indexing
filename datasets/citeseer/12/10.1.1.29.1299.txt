ibal probabilistic rational programming language avi pfeffer division engineering applied sciences harvard university avi eecs harvard edu rational programming language program specifies situation faced agent evaluating program amounts computing rational agent believe situation 
presents ibal rational programming language probabilistic decision theoretic agents 
ibal provides rich declarative language describing probabilistic models 
expression language allows description arbitrarily complex generative models 
addition ibal observation language possible express compose models result conditioning observations 
ibal integrates bayesian parameter estimation decisiontheoretic utility maximization thoroughly framework 
packaged programming language rich type system built extensibility 
presents detailed account syntax semantics ibal overview implementation 
rational programming language program situation encountered agent evaluating program amounts computing rational agent believe situation 
rational programming combines advantages declarative representations features programming languages modularity compositionality type systems 
system designer need reinvent algorithms deciding system possible situation encounters 
sufficient declaratively describe situation leave sophisticated inference algorithms implementors language 
think prolog rational programming language focused computing beliefs agent uses logical deduction 
past years shift ai specifications rational behavior terms probability decision theory 
presents ibal probabilistic rational programming language 
ibal pronounced eyeball stands integrated bayesian agent language 
name suggests integrates various expects probability rational behavior including probabilistic reasoning bayesian parameter estimation decisiontheoretic utility maximization 
ibal main contributions 
highly expressive language representing probability models significantly expressive previous languages 
second ibal integrates language probabilistic modeling bayesian learning decision theory single coherent semantic framework 
third provides unified inference engine solving reasoning learning utility maximization problems generalizes algorithms standard kinds models 
ibal packaged usable programming language features strong type system built extensibility 
ibal designed kinds users mind 
system modeler may expert probabilistic reasoning 
type user basics language reasonably easy learn fairly easy come decent models domains 
kind user benefit greatly selection libraries implementing standard kinds models 
default inference algorithm needed expected reasonably large number models 
second kind user modeling expert understands inference algorithms probabilistic reasoning 
expert user language provide power carefully tweak model control inference algorithm evaluate different parts model 
third kind user ai researcher may want introduce new kinds probabilistic models new inference algorithms 
ibal easy introduce new models libraries implementation framework provides support building new algorithms extending inference capabilities system 
space limitations prevent full description language implementation 
section provides fairly detailed account language semantics 
section presents extended example showing various components ibal provide declarative implementation fairly complex decision theoretic agent 
section presents overview main features ibal implementation 
genealogy related direct ibal language koller referred kmp 
kmp lisp language extended flip construct describe random events 
ibal extends kmp number powerful ways 
ibal basic definition expression language describing generative probabilistic models similar kmp significantly richer particularly higher order functions 
addition ibal uses observations condition distributions allows easily describe richer class models 
ibal integrates decisions learning framework provided kmp 
ibal indebted integrating probabilistic order representation languages 
strands direction relational probability models pfeffer stochastic logic programs muggleton projects tried integrate expressive modeling language aspect learning decision theory 
project similar spirit ibal dtgolog boutilier integrates decision theory golog action 
functional programming framework ibal uses 
roots traced back markov decision processes ibal roots bayesian networks 
result systems quite different approach inference example notion variable elimination dtgolog 
dtgolog integrate learning framework 
mcallester presents language kmp describing decision problems policies agents calculating expected utilities agents 
ibal attempt solve decision problem compute optimal policies 
roth integrates learning reasoning expressive compositional language probabilistic 
ibal language ibal provides declarative language describing probability distributions parameter estimation problems utility maximization problems 
top level language component ibal block 
block consists sequence declarations 
number kinds declarations including definitions stating values things stochastically generated observations stating property holds generated values priors describing prior probability distributions learnable parameters decisions describing decisions agent information rewards describing rewards agent receives pragmatics containing control knowledge perform inference block 
describe turn 
sake presentation semantics language incrementally discuss kind declaration 
discussions semantics somewhat technical skipped reading 
definitions definition states value associated name generated 
name symbol chain sequence names definition form expression forms constant symbol chain function xn conditional stands pattern discussed dist dist pn probabilities summing block fbg block application pattern defines condition may satisfied value 
notation stands predicate true iff value expression satisfies pattern 
pattern may specify equality constant chain may negation pattern conjunction disjunction patterns 
addition expression syntax language provides plenty syntactic sugar case statements easier syntax defining functions 
type system discussion omitted lack space 
intuitive meaning definition defines stochastic experiment generating value consider simple example fair dist biased dist pick dist fair biased coin pick coin coin intuitively fair biased functions return appropriate probabilities 
function pick higher order function returns fair biased function 
value coin generated applying pick fair biased 
expression defining block expression data structure components generated applying value coin 
chains mutually dependent coin fair biased conditionally independent coin 
ibal inherits kmp idea laziness allow infinitely long experiments defined results may needed 
example real dist zero rest real half real zero real defines uniform distribution real numbers represented binary expansion 
executing real involves infinite recursion bit needed determine value half value boolean predicate looks real 
think executing real lazily get single bit needed 
intuitions precise 
kinds values ibal symbols heads true special undefined value denoted complex values consist environment maps names values closures denoted xn consisting formal xn body environment 
chain viewed representing function values 
formally chain value define follows empty complex 
value associated 
determine value satisfies pattern need environment assigning values variables appearing pattern 
formally define meaning satisfies symbol 
conjunctive disjunctive defined obvious way 
note satisfy pattern 
order generate value expression need environment binding free variables source randomness provided infinite sequence real numbers 
formally define function hei meaning value generated environment random choices 
notation subsequence elements index congruent modulo device allows split multiple independent subsequences 
hd tl indicate head tail 
constant chain function conditional dist expressions hei defined si xn ei xn pn tl hd value block expression complex definition block results component mapping value definition evaluated environment including bindings names appearing previously block 
furthermore lambda expression binding added environment evaluated bound resulting closure 
allows recursive functions defined 
formally hfx xn gi fx xn vn lambda final case define function application 
determine value compute value closure result application undefined 
evaluate body environment formed extending closure environment binding formal parameter value formally xn note preceding definitions elegantly take care issue infinite experiments finite observations half example needing explicit laziness semantics 
rule generating value expression uses chains appear 
furthermore block expression returns complex value 
semantics operational semantics showing program consisting definitions defines random experiment generating values 
provide denotational semantics terms probability measure values 
underlying probability space consists countable sequences real numbers generated uniformly 
program defines function sequences values empty environment 
measurable set sequences image measurable pr pr 
natural properties values talk fact measurable 
example property form measurable 
see defining depth bounded evaluation function hei definition hi hi uses hi evaluating body function applications 
words values require recursion depth greater undefined 
program defines sequence functions clear set sg measurable requires looking finite subsequence determine set sg measurable 
furthermore argument suggests anytime approximation algorithm computing pr 
non decreasing union probabilities non decreasing sequence limit pr pr 
observations language described far similar kmp albeit richer syntax type system refined semantics 
express common models bayesian networks relational probability models stochastic logic programs hidden markov models dynamic bayesian networks stochastic context free grammars 
models generative nature defining experiment stochastically generates values variables 
richness model encoded way values generated 
flavor probability model model 
model data generated simple process uniformly data fails satisfy certain constraints may rejected 
richness model encoded rejection process 
example model product experts poe hinton poe datum generated uniformly passed set probabilistic experts 
expert accepts probability depends property data accepted experts accept 
probability datum proportional 
ibal able express models making observations integral part language 
observation declaration form 
recall syntax boolean predicates 
observation simply statement certain predicate true 
example general schematic form poe model expressed follows 
generate produce uniform datum generate expert code expert 
return accept reject expert accept kind model expressed observation declarations markov random field mrf 
mrf undirected analogue bayesian network viewed type poe 
interesting effect 
ibal expression language defines directed generative models observation language implements undirected notion constraint 
result ibal able express directed undirected models combinations 
important stress observations integral part language pasted model fact order condition 
occur blocks functions composed just generative definitions 
power modular functional language extended models 
course ibal allows models combined generative models 
example natural way build language model stochastic context free grammar initial generator sentences probabilistic constraints express global properties agreement sentence length 
defining semantics observations ibal subtle point stressed 
observation block condition variables defined block free variables 
far containing block concerned definition contained block considered black box 
simply defines distribution value block values free variables 
containing block need concern distribution defined 
failure enforce rule serious violation modularity 
get right effect simply modifying definition case block expressions 
addition defining values components block sure observations block satisfied 
generated values block rejected process repeated 
resulting distribution defined block conditioned observations satisfied 
course possible define set observations fail probability case attempt generate value block go 
case value block 
note rejection repetition process contained block value block conditioned observations free variables 
learning observations provide basis integrating learning form bayesian parameter estimation ibal framework 
unknown probability parameters specified prior declarations form learn dirichlet 
prior declaration form achieves things 
defines probabilistic parameter specifies dirichlet prior parameter 
positive real numbers specifying hyperparameters dirichlet 
second prior declaration creates definition equivalent dist 
view ibal program prior declarations specifying joint model defines joint probability distribution model parameters value returned program 
observations condition joint model standard bayesian way 
refine coins example earlier adding priors observations 
fair result dist biased learn result dirichlet pick learn result dirichlet fair biased coin pick result coin result coin result fair coin known produce probability 
probability biased coin unknown prior peaked prior coin gets picked uniform 
coin result picking coin tosses coin 
observation came 
observation multiple effects 
biased coin probability coin biased increased turn increases probability 
observation conditions probability parameters 
coin result applying pick turned biased get posterior pick parameter weighted biased result 
furthermore coin may biased toss coin came posterior biased parameter weighed slightly strongly heads 
learning component ibal able parameter estimation common models including hidden markov models stochastic context free grammars probabilistic relational models 
furthermore learning ibal just added probabilistic representation language thoroughly integrated language 
result benefits compositionality modularity obtained representing learning tasks 
particular ibal representing cumulative learning framework smaller models learned components larger learning problems 
just observations condition values scope learn model parameters scope 
compositional learning process specified providing nested scope containing data parameters learning subproblem containing scope uses results subproblem 
defining semantics learning ibal need get subtle point correct 
prior declaration appears body function parameter values time function applied 
fundamental learning different observations function observations parameter 
means terms generative semantics parameter value returned application function generated function defined stored part closure representing value function object 
achieve effect definition 
parameters directly inside block parameters prior declarations defined block nested body lambda expression 
generative process values parameters directly inside body lambda generated time closure created values applications closure 
remainder semantics stays basically 
definition resulting prior declaration encountered relevant parameter values looked environment choose branch taken way dist expression 
decisions utilities representation decision problems ibal geared popular models influence diagrams ids markov decision problems mdps 
ibal easily represent models including various kinds structured mdps 
decision declaration ibal form choose specifies name decision variable range information available decision maker chains called informational parents 
block may contain multiple decision declarations case enforce rule ids informational parents decisions include earlier decisions decisions 
reward declaration receive case receive 
form states reward depends value real number associated pattern value satisfies 
second states reward times reward positive real number 
block may multiple reward declarations case total reward sum individual rewards 
example typical mdp schematically represented follows mdp takes current state argument transition 
returns state reward reward case 
choose state transition current reward reward reward mdp state reward current reward reward reward points representation decision problems ibal 
block constitutes distinct decision problem 
block decisions viewed identifying implicit agent decisions receives rewards mentioned block 
decisions rewards nested blocks implement notion delegation decisions nested block consider effects containing block 
reason enforcing interpretation similar reason observations don condition values outside scope alternative result serious loss modularity 
agent nested block concerned rewards calling block decisions nested block longer determined solely free variables 
program calling nested block longer treat black box 
second point clarify assumed values free variables known agent making decisions block 
failure enforce restriction result modularity problem 
agent know values free variables know distribution values order rational decision 
distribution defined block depends values free variables distribution 
unfortunate restriction prevents ibal capable representing pomdps 
situation borrowing idea belief state pomdps adding extra implicit input block 
third point relationship observations decisions block 
assume observations known decision maker appear lexically subsequent decision 
reason observations viewed simply part definition probability distribution block values assumption decision maker knows correct distribution 
result assumption disallow observations statement mention variables depend directly indirectly decisions block 
restriction prevents semantics learning decisions interfering 
defining semantics utilities 
value associate utility 
non complex values 
complex values determined reward declarations block created 
recall complex value created extend definition produces producing set sum reward declarations ur defined follows 
reward case ur environment resulting extending bindings reward ur 

decisions 
strategy block decision dd decision statement value informational parents environment evaluate particular strategy define function meaning utility strategy bindings free variables random choices specified 
holding fixed function random variable space sequences 
expectation function sequences produces expected utility optimal strategy maximizes expected utility 
definition proceeds choosing arg max processing block choose values decision variable informational parents 
pragmatics ibal language allows wide variety different kinds models expressed 
single best inference algorithm models 
ibal implements default algorithm situations allows possibility methods 
programmer specify control knowledge solve program form pragmatic declarations 
specify algorithm details particular algorithm specific elimination orderings variable elimination 
pragmatic declarations part block specify inference block nested blocks 
furthermore pragmatic declarations nested block override containing block 
features allow fine modular control inference done allowing complex models built different inference methods different components 
anticipated pragmatic declarations library designers 
user library shielded thinking library models solved 
modularity inference methods may turn important modularity representation building complex probabilistic agents 
example section illustrate declarative high level representation language unifies probabilistic reasoning decision theory parameter estimation simplify integrate implementation sophisticated rational agents 
consider task implementing automated receptionist agent 
job agent receive spoken requests phone respond appropriately 
requests include asking directions talking particular person responses include giving directions connecting extension asking caller repeat request 
decision theoretic design agent agent receives utility response matches actual request user 
course agent observe actual user request sequence signals 
decision model prior distribution requests conditional distribution signals requests 
existing tools difficult implement decision theoretic design single coherent model 
typical implementation consist components probabilistic stitched ad hoc manner 
typically speech recognition component determines words generated received signal language model determine probability particular request generated particular sentence high level influence diagram deciding 
results request generator fed language model 
results language model fed influence diagram 
result may coherent probabilistic model 
furthermore may hard tailor components application 
example getting speech recognizer recognize unusual names individuals require extra engineering effort 
ibal application described single declarative model 
high level generative model consists steps request generation function function generates sentences requests function generates phoneme sequences sentences 
decision making component agent phoneme sequence chooses response 
agent utility determined request response 
highlevel code looks request request sentence sentence request phonemes phonemes sentence choose response type connect repeat choose response fred wilma receive match request response describe turn generative steps utility computation 
function request produces request 
request type field value talk 
talk request field value person 
person complex value fields name title extension 
typical programming language type name string typically want names compare read print 
application important thing name tends pronounced 
type name function stochastically generates phoneme sequence 
true title 
request function follows request learn fred wilma learn type talk generating request involves choosing things type request person request talk person 
choices learnable 
agent lots past experience kinds requests tend generated 
expressed observation statements follows request type request type talk wilma 
sentence function produces sentence request 
sentence list words function stochastically produces list phonemes activated 
illustrate extremely simple sentence generation model real application complex grammar model 
simple example illustrates power passing data structures contain functions fields 
sentence generator simply slots person name title appropriate place 
xn list containing xn list concatenation operator 
sentence request request type give directions connect dist request name request title phonemes function takes sentence produces list phonemes 
word sentence function generates phoneme sequences phonemes just executes words sentence concatenates results 
individual word models probably hidden markov models may part speech recognition library 
unusual names people may generic hmm library library may provide function creates new trainable hmm learned particular name 
phonemes sentence sentence empty head sentence phonemes tail sentence utility model takes request response produces utility request matches response 
response utility 
incorrect response utility 
match request response correct request type response type request type talk response type connect request response receive correct response type repeat implementation overview inference tasks ibal estimate learnable parameters compute utility maximizing decisions solve conditional distribution various chains values chains 
tasks accomplished order 
decisions influence observations irrelevant learning task 
parameters learned expected utility strategy computed decision task solved 
decisions fixed distribution values known probabilistic reasoning task solved 
ibal implemented objective caml variant ml 
design implementation divided parts 
component frontend consisting parser type checker translator job produce code shallow form 
shallow form nested subexpressions replaced chains simple patterns allowed 
second component set support modules 
include ubiquitous polymorphic container type implementing efficient maps chains values kind general implementation events measurable sets values factors measurable functions values elements ring 
events factors support generalized version variable elimination algorithm 
third component implements main line inference 
main line begins code shallow form proceeds sequence steps 
step domain generation support chain program computed 
domain generation uses rules definition dist pn union 
domain generation uses observations restrict domains 
domain generation may followed optional constraint propagation step restricts domains propagating observations back definitions program 
constraint propagation may worthwhile cheaper full scale variable elimination process performed 
second step compute needed chains relevant answering query 
include chains influence query variables observed variables directly indirectly 
computation step particularly important recursive models stochastic grammars 
deduces example order determine word sentence non terminal need expanded stage assuming productions key step main line factor production converts definition program set factors 
goal produce factors simple possible dummy variables may introduced achieve 
example definition suppose complex needed 
separate factors produced enforcing equal definition dist pn dummy variable introduced represent branch taken 
dummy variable serves separate dummy variable appear factor 
set factors produced branch saying takes value components value takes value branch irrelevant constraint additional factor saying takes value probability 
probability pn produced 
final solution step variable elimination commonly bn inference 
set factors computed factor production represents sum products expression 
variables query variables free variables block eliminated factors result conditional probability query variables free variables 
solution steps final variable elimination recursive recursive call process nested blocks function applications 
final component implementation glue holds 
solution steps turned dynamic programming algorithm recursive calls looked cache solving explicitly 
iterative deepening strategy provide anytime approximation algorithm queries may terminate 
recursion strategies implemented generic modular way 
example dynamic function provided takes recursive algorithm produces dynamic programming version algorithm 
glue responsible handling pragmatics 
glue implemented programming technique recursive function takes special argument recurses calling directly calls function hole needs filled 
recursion strategies implemented ways filling hole 
simplest way fill hole plug gives basic recursion pattern 
possibility define function cached looks result cache calling calls result stores result calling cache 
cached plugged result dynamic programming algorithm similarly depth bounded produces version stops recursing recursion depth returning 
recursion strategies composed method functions holes 
provides nice modular way deal multiple inference methods 
inference method invoked pragmatics handler recognizes particular type pragmatic declaration 
pragmatic handlers installed top recursive call results handlers checked 
inference methods need know handlers recursive calls 
inference problems dynamic programming main line inference described 
decision making id algorithms backward induction solve decisions block bottom 
mdps algorithm reduces value iteration dynamic programming component reachability analysis domain generation 
probabilistic reasoning task reasoning directed particular query pruning problem variables required query accomplished computing needed chains 
probabilistic reasoning tasks algorithm reduces regular variable elimination standard bns dynamic programming equivalent forward backward hmms inside algorithm scfgs 
parameter estimation uses general version em algorithm compute maximum posteriori parameter values 
approximation true bayesian posterior course 
step consists main inference line compute times branch taken prior declaration 
expected sufficient statistics 
step combines expected sufficient statistics dirichlet hyperparameters produce new parameter values maximum posterior probability expected sufficient statistics 
combination variable elimination dynamic programming results algorithm reducing typical em bns baum welch hmms outside algorithm scfgs 
claim ibal efficient inference algorithm applications 
problems inherently hard require special methods variety algorithms needed 
believe ibal integrates number widely methods provides default algorithm 
furthermore support modules glue easier extend system alternative methods 
ibal rich declarative programming language describing probabilistic models decision theoretic situations bayesian parameter estimation problems 
syntax semantics language overview implementation probabilistic reasoning utility maximization parameter learning 
ibal divided implementation enhancements practically useful theoretically challenging significant extensions expressive power language 
plans category include implementing variety approximate solution methods providing libraries implement common kinds models useful structures sets objects extending type system include algebraic data types polymorphic types modeled ml 
main tasks second category support learning model structure parameters 
keeping philosophy done ibal thoroughly integrated require richer language express priors including priors structure 
important extension provide way describe ibal agent interacts environment words provide declarative description agent 
final task allow multiple agents ibal framework 
allow ibal modeling gametheoretic situations provide way describe agents models agents 
tasks range interesting challenging issues ibal provides foundation tackling 
boutilier boutilier reiter soutchanski thrun 
decision theoretic high level agent programming situation calculus 
aaai 
roth roth 
relational representations facilitate learning 
kr 
hinton hinton 
training products experts minimizing contrastive divergence 
technical report gatsby computational neuroscience unit 
koller koller mcallester pfeffer 
effective bayesian inference stochastic programs 
aaai 
mcallester mcallester 
bellman equations stochastic programs 
revision talk lpnmr 
muggleton muggleton 
stochastic logic programs 
journal logic programming 
accepted subject revision 
pfeffer pfeffer koller 
system probabilistic object oriented knowledge representation 
uai 
