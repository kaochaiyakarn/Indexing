cheat proof playout centralized distributed online games nathaniel brian neil levine cs umass edu brian cs umass edu department computer science university massachusetts amherst ma explore exploits possible cheating real time multiplayer games client server distributed serverless architectures 
offer formalization cheating online games propose initial set strong solutions 
propose protocol provable anti cheating guarantees suffers performance penalty 
develop extended version protocol called asynchronous synchronization avoids penalty serverless offers provable anti cheating guarantees robust face packet loss provides significantly increased communication performance 
technique applicable common game features clustering cell techniques massively multiplayer games 
performance claims backed analysis simulation real game traces 
cheating old concept game playing 
networked games cheating closely tied major factors affect quality game timely playout real time interaction scalability communication game architectures large numbers users prevention detection cheating players 
online real time strategy games person massively multiplayer virtual worlds rely similar techniques simulation 
ideally players network able synchronize game events actions player control interaction consistent player viewpoints 
games trade precise control communication performance gains preserve realtime quality game playout 
popular today centralized client server game architectures offer single point game coordination create bottleneck processing signaling size number players online worlds increases 
moving distributed serverless architecture increases scalability performance complicates player interaction increases troubling potential cheating extant centralized approaches 
cheating abounds current game play internet little real security prevent cheating online games 
cheats simple download 
cheat proof interaction fair playout interactions necessary condition game communication 
show common synchronization techniques preserve realtime quality online games detrimental game play create situations destroy coordination game 
uncover potential cheating common synchronization techniques show cheating players indistinguishable non cheating players 
propose protocol multiplayer game communication anti cheating guarantees 
protocol shown sufficient offer precise player interaction coordination scalable large virtual worlds 
extend protocol new technique online game synchronization way preserves coordination security scalability performance 
protocol ensure fair playout events distributed serverless architectures architectures trusted third party 
section ii presents background information game architectures 
section iii considers potential cheating game synchronization 
section iv presents new protocols cheat prevention 
section presents analysis performance protocols 
section vi looks techniques may combined clustering cell techniques scaling massively multiplayer scenarios 
section vii concludes 
ii 
assumptions terminology cheaters ability read insert modify block messages involved game protocols 
develop techniques guard attacks vulnerable application level signaling 
protecting attacks existing transport layer network layer protocols denial service attacks scope 
assume application software readable user perform functions originally intended 
information available client available player game state cryptographic keys 
assumption precludes attempt employ security obscurity predominant model games today 
compromised client possible requires access understanding original source code ability change compiled version application 
preventing cheats available client modifications scope initial study left 
specific techniques cheat proof playout tolerant modifications client 
refer set information needed describe game time game state composed entity states 
entity may consist game objects military troops controlled player 
may refer player person playing game objects person controls game 
partitioning game state depicted 
automated players possible 
players decisions decide events change states 
interaction occurs multiple players decisions player player player player game state entity state entity state entity state entity state fig 

game state partitioning change request update game view client player change request update game view client player change request update game view client player world entity state server game state entity state entity state entity state fig 

centralized control client server resolved computing resulting state 
consider simulators progression game time called frame distinct wallclock time simulator computes game state frame 
players take exactly turn frame 
simulators offer precise game control may appear slow player simulator compute successive unit game time quickly 
player may perceive slower game play terms wallclock time wait updates player network 
multiplayer games coordinated centralized client server decentralized distributed architectures 
architectures differ game state maintained involves effecting changes coordinating interactions 
client server architecture entity states maintained server computes game state input clients informs clients current game state 
client server architecture illustrated client sends requests server change client entity state 
decentralized control client server architecture illustrated client informs server update decisions affected client entity state server resolves interactions game objects coordinates global game state 
distributed architecture clients referred hosts host maintains entity state informs hosts decisions resolves interactions centralized authority 
distributed architecture illustrated serverless refereed peerto peer gaming 
client server architectures offer single point game coordination server 
decentralized control client server architecture server maintains entity model represents known entity state updated client 
face entity state entity state entity state world entity state server game state player client update state update player client update state update player client update state update model model entity model entity entity fig 

decentralized control client server host game state state update state update state update state update host game state host game state world entity state model entity model entity local entity state model entity model entity local entity state world entity state world entity state model entity local entity state model entity fig 

distributed missing updates server uses entity model resolve interactions may result conflicting views game state server affected client 
server authority maintaining game state client accept discrepancies conform server view game world 
simplifications benefits client server architecture popular 
entity model distributed hosts remote entities 
interaction decisions face missing entity state potentially corrupting game state 
explore section 
architecture results various potentials cheating 
cheating occurs player causes updates game state defy rules game gains unfair advantage 
example players may cheat piece game state player permitted knowledge game rules 
related dead reckoning technique compensates variable communication latency loss network allowing host guess state player updates missing known vectors 
dead reckoning part distributed interactive simulation dis high level architecture hla standards commonly researchers developers 
simplest form predicted position player equal previous position plus velocity times elapsed time 
singhal cheriton refined basic formulation 
diot gautier kurose evaluated performance bucket synchronization dead reckoning simple distributed game called mimaze 
bucket synchronization provisions series buckets host bucket discrete time unit game 
bucket collects state updates sent remote player 
time process bucket game time reached bucket assigned time unit missing updates dead reckoned 
absent player entity model guessed player state previous bucket 
previous places dead reckoning necessary technology timely game play largely leaves resulting problem entity interaction resolution enhancement 
show employing dead reckoning scheme resolving entity interactions mutually exclusive 
addressed previous potential cheating synchronization schemes 
show cheating possible dead reckoning system 
provide solutions cheating problem sections 
section shows form dead reckoning leads player interactions especially distributed architecture 
related interest management techniques massively multiplayer games applications 
typically interest grouping done basis grid coordinates natural interest clustering application area virtual environments 
section vi discusses leverage techniques 
lastly related parallel simulation techniques 
parallel simulations operate conservative optimistic event processing 
conservative processing entity may synchronization entities lookahead processing events possible 
optimistic techniques allow entities execute events asynchronously tolerant incorrect state computation execution 
typically realized incorrect state exists computation undone rolled back correct point 
method requires states saved 
techniques useful real time multiplayer games practical force human participant restart previous points game 
allow optimistic processing need rollback 
iii 
fair playout define online game fair state perceived player consistent player expectations including server defined game rules 
fair resolution game events complicated dead reckoning ways 
interactions stated player cheats causing updates game state defy rules game gains unfair advantage 
correct playout real time interaction means game state identically perceived player 
fair game players see events occurs expected games rules taken action 
goal achieve correct fair gameplay 
solutions scalable players terms signaling costs maintain playout delays advance game time minimally perceivable players 
dead reckoning client server distributed environments operation 
centralized case interactions resolved server uniformly unfairly 
server sole authority game state resolve interactions clients updated resulting view world 
server uses dead reckoned state resolve interaction decision may differ expectation dead reckoned player 
dead reckoned player may view server decision unfair player true actions server 
resulting discrepancy playout may cause game play artifacts 
due unreliability latency variability internet client server unfairness tolerated game players 
annoyance unfair decisions damaging distributed architecture interactions dead reckoned state may corrupt global game state seen host 
dead reckoned state may consistent hosts dead reckoned state resolve interactions results unfair decision players 
distributed context fairness includes correctness 
result resolving interaction dead reckoned state distributed architecture potential incorrectness game state 
example say players dead player take actions reality destroyed reality defined game state interactions resolved fairly correctly player destroys player actions resolved game play corrupted 
game time restored state interaction clearly fair practical solution exactly approach taken high level architecture optimistic time management service 
interaction problem results dead reckoning interactions determined unfairly server potentially incorrectly distributed host 
cheating dead reckoning possibility cheating widely disregarded multiplayer games 
games designed clientserver architecture provides implicit security centralized control game state 
distributed games prone cheating cheats possible client server game 
security flaw bucket synchronization term suppress correct cheat allows host gain advantage purposefully dropping update messages 
suppose dead reckoning policy buckets allowed dead reckoned player considered lost connection removed game coordinating removal player distributed game scope 
policy cheating player purposefully drop update packets playing 
player uses knowledge current game state construct update packet nth bucket provides advantage 
simple example allows sluggish player chase agile player begins pursuit drops updates dead missing state confirm really nth bucket sends fabricated update places long sends plausible updates nth bucket confirm cheating cheating simply claims congested lossy link 
cheat applies client server distributed games 
conclude fair play indistinguishable cheating dead reckoning 
sections provide strong guarantees cheat prevention detection 
iv 
cheat proof game interaction real time strategy games require interaction resolution discrete unit time turn game 
wait type protocol similar reliable transport fulfill requirement client server distributed architectures time advances game state change decisions player available 
words game frame players wait players decide announce turn frame receive announcements players continuing frame 
dead reckoning allowed suppress correct cheat eliminated 
state decisions known turn interactions resolved host 
scheme expects player turn decision current turn state send decision player 
represents opportunity cheating cheating player simply wait players sent decisions call lookahead cheat 
example may take shot defended normal human reaction times 
lookahead cheat player may cheating agent sends decision raise shields time 
wait type protocol employed players appear slower may implementing lookahead cheat serious depending game features 
section protocol lookahead cheats suppress correct cheats possible 
protocol performance drawbacks players rates restricted slowest player 
second part section provide enhancements allow fair play allowing players wait players advancing game time 
lockstep protocol counter lookahead cheat propose protocol decision commitment step 
call secured version lockstep protocol sufficient implementing lockstep synchronization described 
suppose turn complete 
player decides announce turn 
player announces cryptographically secure way hash decision commitment including randomized padding necessary avoid recognizable hashed decisions avoid collisions 
players announced commitments players reveal decisions plaintext 
hosts easily verify revealed decisions comparing hashes plaintext previously sent committed value 
host current turn information turn decision lookahead cheat prevented 
waiting longer beneficial 
optimization host required commit decision hosts committed theirs player may reveal decision immediately 
phase commitment required waiting period players lockstep protocol introduces performance penalty 
correct playout preserved lookahead cheat prevention game players run speed slowest player 
reception player packets delayed current network conditions 
section presents synchronization mechanism protocol retains desirable properties lockstep protocol allows game run speed independent players possible 
proof correctness safety liveness proof lockstep protocol shows fulfills requirements producing error condition progressing 
number assumptions exists reliable channel players players know players players able authenticate messages player players wait finite time making decisions revealing commitments 
theorem lockstep protocol safe host receives state host game rules permit error occurs knows state frame committed events players 
lockstep protocol live frames player resolves monotonically advance wallclock time 
proof safety lockstep property follows directly protocol specification 
equal current frame resolved arbitrary player initially 
protocol description announces hashed version decision received commitments players frame 
announce committed decision time decisions time player revealed received verified commitments 
player including may alter announced events hash commitments 
may advance possibility participant learn decision frame earlier currently resolved 
liveness wallclock time arbitrary player starts resolve frame game 
wallclock time players learn revealed decisions players frame occurs 
wallclock time player advances time frame occurs 
show finite 
assume player player commit 
equal value variable player wallclock time definition protocol know players wait finite time committing decisions communication takes place reliable channel know commitment player received finite time assumptions implemented practice 
example players revealing committing decisions bounded time released game play 
finite 
protocol safe know value incremented time clear statement algorithm non decreasing value time 
non decreasing players reveal commitments finite time reliable channel finite 
similar proof constructed player player commit 
case communication ensures finite 
asynchronous synchronization section new synchronization technique guaranteed fair playout called asynchronous synchronization relaxes requirements lockstep synchronization decentralizing game clock 
host advances time asynchronously hosts enters lockstep style mode interaction required 
correct playout fairness guaranteed 
asynchronous operation lockstep mechanism provides performance advantage times players advance game time contact players 
relaxed contact requirement may overcome intermittently slow network signaling packet loss slow host processing 
expect allow players completely different network host resources play 
initial design meant technique isolate effects temporarily poor connections players play rate large majority time reduce time takes resolve interactions 
spheres influence player host keeps track player advance game time space game play 
area game possibly affected player turn potentially require resolution player decisions called player sphere influence soi 
define influence game information affects player decisions outcome player decisions game refers parts game world opposed external knowledge player may certain opponent typically follows strategy 
accordingly sphere influence game area encompasses sources potential influences player upcoming decisions 
follows outside player current soi immaterial player gameplay decisions resulting events 
example player forest player cares falling tree sound fell 
player considers intersection types soi 
player soi indicates geometric area decisions contribute resolved player decisions turn 
second soi remote players indicate areas affected players turn 
accordingly players soi intersect certain turn decided events affect resolving game state turn 
games host may making decisions different time frame advancing time frame independent hosts details described subsequently 
remote delta base base local fig 

base delta spheres influence local host set remote hosts remote host current frame local host state host frame hash state host frame potential influence host frame fig 

table variables 

compute 
send 
process accepted messages arrived 
foreach take arrived frame latest state taken compute dilated record waiting accepted waiting waiting 
waiting send resolve interactions finalize render turn advance turn fig 

local player game turn 
soi composed parts 
base soi maximum area may influence influenced turn 
delta soi change influence area may occur subsequent turns 
base delta represented radii illustrated fig 
delta added base compute subsequent turns 
asynchronous synchronization protocol description protocol point view host distributed serverless architecture 
protocol easily adapted centralized architecture 
formal description protocol figures take place arbitrary turn player player reached turn assume revealed state turn 
simplicity assume order fully reliable delivery packets 
extend protocol order unreliable delivery messages section 
shown initial figures illustrate play clearly mechanisms exist coordinate systems 
fig 

left dilation 
right dilation intersection ization phase occurs game begins player learns full set remote players starts remote player lockstep player initial positions players received network 
arbitrary turn player determines decision turn step second announces commitment decision players step 
third commitments frame past revealed frame remote player accepted step 
revealing commitment local player determine remote players waiting step 
remote player wait state intersection soi dilated revealed frame remote player commitment remote player accepted local player 
remote player soi computed base radius known position plus delta radius time frame local player ahead remote player known time frame 
local host relative player player potential influence local player decision dilated local player time frame fig 

local host remote host dilation performed 
intersection soi local player moves time frame receiving revealed state remote player frame illustrated fig 

remote hosts wait state local host reveals state turn updates local entity model player known state including remote host known time frame dead reckoning performed advances turn step 
protocol repeats turn 
allows host advance time rate independent hosts potential influence slower player result interactions resolved 
illustrative example consider case depicted figs drawn simulation results 
fig 
shows pair players crossing xy plane game 
axis represents frame player corresponding xy coordinate 
players paths start frame zero frame 
consider set players take paths game proceed lockstep synchronization 
players frame versus coordinates coordinates frame number fig 

player position versus game frames 
top lines players bottom lines paths xy plane 
coordinates coordinates wallclock time fig 

player position versus wallclock time 
top lines players middle lines players bottom lines paths xy plane 
xy coordinate graph players fig 
shows paths xy plane axis represents wallclock time players coordinate 
players represented lines advancing slowly wallclock time higher plane 
contrast players proceed algorithm may advance time quickly possible proceeding lockstep soi intersect 
fig 
shows players having sharp increase slope approach xy plane 
players need wait hear player continue game affected network delays 
contrast players constantly wait network delays affect moment game 
lookahead cheats prevented similarly lockstep protocol committing hash turn decision hosts committed time frame revealed past decisions remove potential cheating potential interaction 
eliminates suppress correct cheat way lockstep protocol 
host advance time potential influences turn resolved 
lookahead cheat appear serious lockstep synchronization host may purposely lag hosts order preview information 
host advance time past point potential influence detected cheating useless player affect cheat 
note simple jumps position easily detectable located outside dilated soi known position 
definition soi information released advancing host immaterial player game decisions 
note signaling may give player advance location information player allow cheating game playout may possibly alter player strategy 
solution situation centralized distributed architectures section vi 
protocol preserves lockstep synchronization guaranteed correct fair playout interactions resolved perfect information turn game 
performance increase ability advance time independent remote hosts interactions possible 
demonstrate performance gains simulation section host distributed game protocol execute fast possible potential influence overlap detected 
preserve set game play frame rate designers may impose maximum game speed 
simulation results section similar type capped rate 
best soi intersection detected host wait update player restrict potential soi allow local host continue 
worst potentially interacting player catch time faster host order resolve actual interaction 
worst case occurs example lagging player moves directly position player maximum delta rate 
past player dilated soi intersect player soi player may continue 
packet loss proof assumed existence reliable channel players assumption relaxed 
simply stated players skip missing packets accept new order packets players missing packets represent state outside soi intersection 
missing packets represent intersection soi dropped skipped 
new proof easily constructed examining dilated soi resulting missing packets result intersection packet may skipped 
clear protocol information determine missing information possibly result soi intersection eventually received 
conclude represents performance advantage lockstep 
contact player turn players need contact players soi intersection 
words player soi radii away need heard turns sure soi intersection 
performance benefits explored detail section 
secret possessions games include notion secret information valuable game state may known subset players 
type secret possessions objects player chooses reveal immediately players condition actions taken object revealed 
players distributed game may wish hide object weapon key 
opponents may desire proof object fact acquired earlier game rules 
example capture flag game player may capture opponent flag bring back home base win game 
player may hide game soldiers flag causing opponent player soldiers running home base unclear flag 
solve dilemma define promise place holder secret possessions condition remote player claims potential interaction exists hidden possession 
promises easily implemented form hashed encrypted commitment sent opponent revealed 
opponent sign commitment prevent repudiation secret promised 
promising player may choose continue game promise signed opponent 
provide local player confidence remote player acting honestly cheat detection scheme prevent cheating allows discovered 
promise commit current secret state example way hash function lockstep protocol 
records committed state 
state revealed verified designated time game completed expiration old secret information considered declassified longer important kept secret 
define logger service mechanism resides host records promised information verified 
provide real time cheat detection solution define observer service trusted centralized entity receives secret information secure channels verifies gameplay 
cheating detected protocol alert players prompt action taken removal current game tournament 
knows position asynchronous operation provided advance time rate promises assuming issue promise time frame 
wishes advance time faster certain dilated potential soi intersect potential interactions may 
preserve benefit asynchronous time advance provide centralized solution 
promise service trusted centralized entity receives secret non secret information way observer service 
promise service soi time frame issues promise interaction exists 
assuming promise service host execute fast host promises issued case advanced time 
secret information revealed interaction resolution guaranteed promise service enacting protocol 
promise service solves situation player may know entity state 
soi dilated promises issued behalf player promise service 
introducing centralized solution potential deployed large distributed simulated environments distributed solution left 
performance analysis analyzed performance protocol compared lockstep protocol simulation 
compare dead reckoning techniques clear dead reckoning perform better introduces unfair actions centralized architectures events distributed architectures 
unaware presents analytical models typical game play 
took traces representative game networked multiplayer game players control ships dimensional space 
accordingly claim results section generic 
hope representative 
built custom simulator controlled player game traces real sessions 
configured run frames game play various numbers automated players size map modified game log xy coordinate information file 
logging players joined game 
simulator took logs input player xy coordinate log considered turn decision taken player 
unit simulator time represented milliseconds wallclock time 
unit time simulator players read logs turn send turn players 
sending decision blocked appropriately lockstep protocol constraints 
assumed star topology players 
player network connection delay center point star topology drawn turn exponential distribution mean simulator time units 
simple exponential distribution suitable preliminary investigation include simulation varied distributions network topologies 
star topology interpretations 
packets multicast player player 
second packets unicast non playing server located center star immediately simultaneously unicast packets player 
players take turns units simulation consistent constraints human reaction times assumed previous simulation termed lower cap 
additionally players upper cap advance turns units simulator time passed 
value map size granularity player position coordinate system finer order 
ms frames player simulation lockstep soi soi soi ms frames player simulation lockstep soi soi soi ms frames player simulation lockstep soi soi soi ms frames player simulation lockstep soi soi soi fig 

distribution milliseconds stalled frames due lockstep interaction 
simulate game running frames second consistent typical game 
example consider player simulator time just read sent decision game frame players 
wait steps reading turn lower cap may send packet simulator time reached upper cap 
consider due lockstep constraints player forced wait simulator time send packet frame 
time units passed read frame trace time passed immediately read frame trace log able try send packet immediately subject lockstep constraints 
took traces players 
include study larger number players game suitable play players numbering hundreds larger 
suitable consider simulation cell cell clustered game discussed section vi 
trace simulator different soi sizes 
smallest soi usable set maximum distance player move single turn 
expect size practice 
largest soi simulated infinite size corresponding exactly lockstep protocol 
comparison purposes simulated twice smallest soi size denoted soi graphs times smallest soi size denoted soi 
fig 
shows results traces players 
graph shows histogram representing distribution time stalled frames average player due lockstep anti cheating constraints milliseconds stalled average player turn decision transmitted network measured turn 
stall time due upper lower caps included results involved calculations 
simulation results clearly show performance advantages protocol 
lockstep protocol players wait slowest player send decision 
protocol larger numbers players turns taken delay player coordination guaranteeing cheat proof game play 
player stalled protocol enables players stall time 
simulations show performance degrades slowly lockstep protocol maintains large advantage 
expect results hold large numbers players large environments test theory 
additionally section technique support distributed game play players need contact players cell anti cheating constraints 
vi 
supporting cell architectures order massively multiplayer games scale thousands participants case amount communication processing client remain low entities involved 
true server serverless architectures 
employ client server filtering approach commonly cluster participants separate multicast addresses separate servers geo fig 

game arena divided cells 
metric position 
accordingly virtual playing field may broken cells increase scalability 
cells transparent player view game 
technique couples nicely cell techniques 
cell sizes quite bit larger soi size 
player perform players inside cell 
unfortunately cheating player may information cell position available signaling necessary correct operation dead reckoning lockstep order learn upcoming 
knowledge position remote hidden possession may affect game resolution discussed section iii affect player strategy 
client server architecture secret information problem server may trusted resolve interactions advance players revealing secret information players 
distributed architectures secret information presents difficult dilemma dead reckoning lockstep approaches 
players exchange positional information order execute protocols signaling represents opportunity cheating providing advance knowledge position players possibly altering strategy 
section solution problem context protocol 
technique allows players discover occupy simulation cell revealing current positions 
hidden positions assume game arena divided cells fig 

cell game assigned number assume player cell player cell player engage protocol decided enter new cell 
unfortunately perform exchange players determine cell 
optionally player cell cell player inform new participant cell members 
discuss details optimization 
assume cryptosystem commutative rsa hellman message ek ek ek denotes encryption message key scheme requires key exchanges players specify indebted mikhail atallah purdue university suggesting technique secure multiparty computation solution 
methods exist may employed schneier lists 
step 
player generates random number sends player way hash generates random number sends way hash committed choices 
step 
compute bitwise xor step 
sends result encrypting random key generated known ek step 
sends result encrypting random key generated known step 
sends result encrypting received step key step 
ek ek step 
sends result encrypting received step key step 
ek step 
learn comparing true commutativity cryptosystem 
try cheat asking encrypt choices 
require player reveal commitments steps 
worst case may done game 
vii 
time cheat proof playout necessary condition design network game communication architectures 
shown previous methods network game communication exploitable cheating players 
proposed protocol providing cheat proof fair playout centralized distributed network games 
improve performance protocol proposed asynchronous synchronization protocol allows optimistic execution events possibility conflicting states due packet loss possibility cheating 
asynchronous synchronization require roll back techniques centralized server 
performance analysis shows significantly improves performance lockstep protocol 
asynchronous synchronization provides implicit robustness face packet loss allows reduced signaling requirements combination cell techniques maintaining cheat prevention detection allowing massively multiplayer environments 
grateful andy fagg university massachusetts amherst mikhail atallah purdue university helpful insight 
technology contained document protected worldwide patent 
blizzard entertainment www blizzard com 
id software doom www com 
id software quake www com 
heat net www com 
turbine entertainment software call www com 
hurt hackers game developer magazine pp 

june 
standard information technology protocols distributed interactive simulation tech 
rep ansi ieee std institute electrical electronics engineers march 
creating computer simulation systems high level architecture prentice hall ptr upper saddle river 
blau hughes michael curtis networked virtual environments acm siggraph symposium interactive graphics march pp 

cheriton amaze multiplayer computer games 
diot gautier distributed architecture multiplayer interactive applications internet ieee networks magazine vol 
pp 

jul aug 
gautier diot kurose transmission control mechanisms multiparty interactive applications internet proc 
ieee infocom 
singhal cheriton exploiting position history efficient remote rendering networked virtual reality presence teleoperators virtual environments vol 
pp 
acm siggraph course 
watt games real time rendering software technology addison ch 

aronson dead reckoning latency hiding networked games magazine september www com features aronson htm 
van hook calvin approaches relevance filtering eleventh workshop standards interoperability distributed simulations september 
zyda pratt barham exploiting reality multicast groups ieee computer graphics applications vol 
september 
van hook evaluation grid relevance filtering multicast group assignment proc 
th dis workshop march 
turletti issues designing communication architecture large scale virtual environments proceedings st international workshop networked group communication november 
morse adaptive distributed algorithm interest management ph thesis university california irvine 
levine crowcroft diot garcia luna aceves kurose consideration receiver interest ip multicast delivery proc 
ieee infocom march 
fujimoto parallel distributed simulation systems wiley interscience january 
fujimoto time management high level architecture simulation vol 
pp 
december 
bertsekas gallager data networks prentice hall englewood cliffs 
schneier applied cryptography protocols algorithms source code john wiley sons new york second edition 
story acm crossroads student magazine winter software available xxx org 
adleman rivest shamir method obtaining digital signature public key cryptosystems communication acm vol 

hellman improved algorithm computing logarithms gf cryptographic significance ieee trans 
inform 
theory vol 
pp 
jan 
