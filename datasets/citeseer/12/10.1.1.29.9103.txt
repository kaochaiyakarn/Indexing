manipulating documenting software structures margaret anne storey school computing science simon fraser university burnaby bc canada cs sfu ca muller kenny wong department computer science university victoria victoria bc canada csr uvic ca ective approach program understanding involves browsing exploring creating views document software structures multiple levels abstraction 
exploring relationships multi line legacy software system easily lose context 
approach alleviate problem visualize structures sheye view techniques 
chapter introduces simple hierarchical multi perspective shrimp views 
shrimp visualization technique incorporated rigi reverse engineering system greatly enhancing capabilities documenting software abstractions 
applicability usefulness shrimp views illustrated selected software visualization tasks 
clutter confusion failures design attributes information 
edward tufte envisioning information 
term software visualization describe di erent processes 
taxonomy software visualization price term describe broad research areas algorithm visualization program visualization visual programming 
visually software artifacts structure graphs particularly suitable 
nodes graph typically represent system components directed arcs represent dependencies components 
size software systems increase representations graphs 
advanced graphics abstraction techniques needed manage visual complexity large graphs 
rigi reverse engineering system designed extract navigate document static structure large software systems aid software maintenance reengineering activities 
software structure refers collection artifacts software engineers form mental models designing understanding software systems 
artifacts include software components subsystems procedures interfaces dependencies components containment function call data access attributes component type source code location 
exploring relationships multi line system easily lose context 
visualization techniques developed browsing large information spaces elds applied problem understanding large software systems 
simple hierarchical multi perspective shrimp visualization technique presents software structures sheye views nested inclusion graphs 
technique provides mechanism presenting detail large information space displaying contextual cues time 
technique incorporated rigi reverse engineering system 
chapter describes software visualization shrimp technique outlines bene ts applying technique understanding large software systems 
section describes rigi reverse engineering system 
overview shrimp technique appears section 
section illustrates shrimp views visualizing software structures 
section discusses applicability usefulness shrimp views reverse engineering large software systems 
section draws 
rigi system rigi reverse engineering system developed extract navigate analyze document structure evolving software systems 
rigi system centered language independent graph editor presenting software artifacts 
rst phase reverse engineering subject software system fully automatic involves parsing software storing extracted artifacts 
rigi parsers imperative languages including cobol 
rst phase results resource ow graph manipulated rigi editor 
phase semi automatic objective reverse engineer obtain mental model structure software system build abstractions graph capture model 
manage complexity large software systems second phase involves skills features subsystem composition techniques generate multiple layered hierarchies higher level abstractions 
discovery graph layouts cobol program 
left window displays sugiyama layout top right window shows tree layout bottom right window displays spring layout 
phase reverse engineer employs various visualization aids recognize patterns identify candidate subsystems understand software structures graph 
discovery phase partially automated perceptual abilities domain knowledge reverse engineer play central role 
various visualization tools available rigi editor aid reverse engineer discovering documenting system design information 
tools include selection algorithms ltering elision algorithms software metrics graph layout algorithms 
example fig 
graph small cobol example displayed graph layouts spring sugiyama tree layout 
layouts different views software structure 
single set nodes selected highlighted graphs 
note nodes placed close forming cluster sugiyama spring layouts 
kind visual information gives strong evidence reverse engineer cluster candidate subsystem abstraction 
addition rigi editor supports editing manipulation annotation hypertext exploration capabilities graph 
subsystem hierarchies multiple windows overview windows provide perspective 
user navigates hierarchy opening window show layer hierarchy 
overview window provides context individual windows 
shows hierarchy program visualized navigated rigi editor 
rigi sophisticated tool visualizing software structures 
ective methods required visualizing software structures large legacy systems 
browsing graphs consisting thousands nodes arcs user needs inspect smaller groups nodes arcs detail 
larger software systems preferable obtain understanding high level structure software proceeding lower level details 
ideally user able focus parts system losing sight 
trying understand smaller substructures desirable retain sight structure see artifact interest relates rest software 
rigi user programmable rigi command language rcl tcl tk scripting language 
result extending rigi editor new visualization techniques shrimp feasible 
shrimp technique described section 
shrimp views shrimp visualization technique uses nested graph formalism sheye view algorithm manipulating large graphs providing context preserving constraints orthogonality proximity 
subsections provide background nested graphs dealing large graphs sheye views preserving mental maps 
material brief description underlying shrimp sheye view algorithm 
nested graphs david harel introduced concept higraph form nested graph 
nested graphs addition nodes arcs contain composite nodes denote set inclusion 
containment nesting composite nodes conveys parent child relationships hierarchy 
shows hierarchy displayed nested graph fig 

dealing large graphs visualizing large information spaces focus current research 
information spaces represented large graphs 
displaying manipulating large graphs small screen di cult various approaches proposed dealing large graphs 
window contains root node program entitled src 
user may open node double clicking 
newly opened window contains children src main list element 
arcs window called composite arcs relate composite subsystem nodes 
window created user opens list node 
nodes called leaf nodes 
arcs window represent call data dependencies program 
window overview window provides context windows 
shows subsystem hierarchy structure program 
arcs levels overview window depict parent child relationships nodes 
tree view hierarchy 
nested graph view hierarchy 
approach partitions graph pieces displays piece time separate windows 
multiple window approach loses surrounding contextual cues focus narrows details 
original approach taken rigi see fig 

second alternative approach reduces scale entire graph drawing narrowing focus preserving context details smaller di cult see 
third approach combination view provide context window detail requires user mentally integrate easy task 
various techniques developed view navigate detailed information providing user important contextual cues 
sheye view paradigm way accommodating need see detail maintain contextual cues 
fisheye views fisheye views proposed furnas provide context detail view 
display method sheye lens metaphor objects center view magni ed objects center reduced size 
furnas formulation object con guration assigned priority calculated degree interest function 
objects priority certain threshold ltered view 
information lesser interest variations theme developed size position color addition ltering 
example semnet uses dimensional point perspective display nearby objects larger distant objects 
sarkar brown developed sheye view technique magni es points greater interest correspondingly reduces points lesser interest distorting space surrounding focal point 
survey approaches treemaps perspective walls cone trees described 
related methods include dps 
visualizations certain information spaces notion geometric distance 
nodes close focal point important nodes far away 
applications may better uniformly reduce rest graph allow selected regions increase size 
approach strictly follow sheye lens metaphor avoid problem causing distortion certain areas graph 
continuous zoom algorithm biform technique rubber sheet orthogonal method bifocal technique uniformly distort space surrounding focal points 
rst approaches applied nested graphs 
problem techniques di cult implement distortion techniques easily altered suit di erent kinds graph layouts 
preserving mental map misue describe properties maintained adjusted layouts preserve user mental map orthogonal ordering proximity topology 
orthogonal ordering nodes preserved horizontal vertical ordering nodes maintained 
proximity preserved keeping nodes close distorted view close original view 
topology preserved distorted view graph homeomorphism original view 
impossible distort graph violating properties described 
kind graph layout considered deciding properties preserve 
particularly important software visualization various kinds graph layouts convey information di erent aspects software 
instance grid tree layout orthogonal ordering nodes important preserve 
layouts spring layout show clusters highly connected nodes proximity relationship nodes important property 
graph layouts composed combination layout strategies may visualize software 
example structure software may tree subgraphs laid clusters indicate higher module cohesion 
zooming part graph layout subgraph layouts maintained 
sheye view algorithm underlying shrimp visualization technique exible preserving orthogonality proximity properties graph graph scaling done 
grid nodes displayed inside larger box representing screen 
node interest center node grows desired scale factor pushes siblings outward nite screen space 
node siblings scaled inside screen 
step step visible user shrimp previous step shown describe algorithm 
layout 
grid layout nodes parallel remain parallel distorted view 
layouts node adjacencies important proximity relationship nodes maintained 
tree layouts preserved variant algorithm 
shrimp fisheye view algorithm shrimp sheye view algorithm provides automatic way uniformly resize nodes manage screen space available 
layout adjustment algorithm shrimp sheye views elegant simplicity 
nodes graph uniformly yield screen space allow focal node grow 
focal node grows pushing sibling nodes outward node resized edges maintain required geometric property siblings 
focal node siblings scaled allotted screen space see fig 

nested graph node pushes boundaries parent node outward 
parent turn pushes siblings outward propagating ect 
nodes scaled screen 
node grows shrinks pushing pulling sibling nodes outward inward translation vectors 
vectors determine sibling nodes repositioned node requires space 
methods setting magnitude direction vectors described storey muller 
layout strategy preserves orthogonal relationships nodes shrimp motivated part igi continuous zoom project simon fraser university 
grid scaling done 
center node scaled layout strategy preserves orthogonality graph 
center node scaled layout strategies preserve proximity graph 
strategies preserve proximity relationships 
strategies enlarge center node grid layout fig 

mental map combination graph layouts preserved applying hybrid strategies 
example tree layout desirable preserve orthogonal relationships levels hierarchy keep children close parent 
hybrid strategies straightforward method calculating translation vectors need sibling nodes 
addition multiple focal points di ering scale factors supported 
exibility particularly important presenting software structures 
section describes shrimp visualization technique incorporated rigi help users visualizing software structures 
visualizing software structures shrimp views section describes shrimp visualization technique rigi system 
provides examples shrimp technique visualize software graphs created rigi 
usefulness approach variety software visualization tasks 
nested graphs software hierarchies shrimp visualization technique nested graphs software structures 
nesting nodes represents hierarchical structure software subsystem containment 
small program implements linked list demonstrate shrimp technique navigating software hierarchies 
src src list list main element src src list list list main element main element element root node program entitled src 
user may open parent node see children double clicking 
children src main list element displayed src 
children list displayed list opened 
composite arc main list expanded display lower level dependencies 
element node opened display children 
view serves similar function rigi overview window previously shown 
nesting nodes shows parent child relationships 
software hierarchy illustrated fig 
equivalent hierarchy fig 

shrimp technique user descends hierarchy opening nodes 
nodes arcs representing layer hierarchy displayed inside opened node opposed displayed separate window 
fig 
src node displayed large box 
user opens node double clicking 
causes children src node displayed inside src node shown fig 

similarly fig 
children list displayed inside list node opened user 
opening element node fig 
shows information overview window fig 

fig 
composite arc similar functionality composite node opened display lower level dependencies main list subsystems 
feature provides details particular functions main calls list subsystem 
leaf node hierarchy corresponds software artifact extracted parser 
rigi user select leaf node display le containing artifact corresponding source code separate text editor 
shrimp technique source code may directly inside node 
relevant section source code corresponding artifact displayed inside node opposed displaying entire le 
shows shrimp view sample program leaf nodes opened display representative source code 
fisheye views software structures shows views graphics program consisting modules 
program written design data types 
shows grid layout initial graph artifacts dependencies extracted rigi parser 
spring layout algorithm applied graph fig 

algorithm places highly connected nodes closer 
complex area center graph magni ed shrimp sheye view algorithm fig 

reveals single node causing visual complexity 
node represents error printing routine called functions 
error routine provide information trying understand structure system user may choose hide node reduce complexity region 
node ltered fig 

examples serve shrimp views applied visualizing software rigi 
section discusses shrimp technique relevant source code software artifacts represented leaf nodes displayed directly inside nodes shrimp view 
allows user browse source code simultaneously visualizing location code software hierarchy 
float unnamed unnamed slabs unnamed unnamed unnamed rand rnd sphere grand unnamed quadric light shadow plane trace prim procs shade surf readfile compute normal shader voxel polygon screen visible plane gettype blip main unnamed grid layout graphics program written 
spring layout graph 
complex area center graph magni ed shrimp algorithm exposing heavily node 
identi ed busy node ltered reduce visual complexity 
helpful visualizing large legacy software systems summarizing various advantages disadvantages technique 
results section discusses advantages disadvantages shrimp visualization technique manipulating documenting software structures 
detail context larger software systems understanding structural aspects system architecture initially important understanding single component 
nested graph formalism particularly suitable showing levels abstraction system architecture time 
single shrimp view allows user focus smaller details software perspective high level software structure 
user incrementally exposes structure software opening subsystems current interest presenting children nodes parent 
improvement multiple window approach user need mentally synthesize mental model information di erent windows 
addition shrimp technique dependencies subsystems various levels abstraction opening composite arcs reveal constituent lower level dependencies 
shows structure small program implements game 
fig 
high level view major subsystems program shown 
subsystems opened fig 

fig 
subsystems opened show detail program structure 
composite arcs elide details lower level dependencies subsystems 
fig 
composite arcs opened show lower level dependencies program 
opening composite arcs provides ne grained details dependencies system nesting subsystem nodes concurrently shows highlevel view program structure 
larger programs opening composite arcs quickly complicate view 
deciding display elide important ective visualization 
documenting software structures larger systems shrimp views suited exposing structures patterns software 
sheye view mechanism provides alternative scrolling expanding nodes user de ned area interest intro initialization intro initialization init instructions usage main main utilities utilities shared main intro initialization intro initialization usage utilities instructions utilities shared shared shrimp views depicting multiple levels abstraction small program 
init main spring layout algorithm applied sql ds software system 
algorithm helped expose clusters nodes fringe graph candidates subsystems 
clusters nodes scaled show detail 
concurrently reducing hiding remainder graph 
zooming di erent portions large graph user quickly identify busy nodes candidate subsystems important features 
ltering busy nodes considerably improve comprehensibility graph 
addition user select group nodes necessarily adjacent graph scale nodes study 
presents call graph extracted sql ds line legacy software system evolved nearly decades 
discovering patterns large complex systems particularly di cult 
shows result selecting expanding nodes forward dependency tree procedure calls module sql ds 
expanding related distributed sets nodes structures graph emphasized adversely ecting general layout graph 
concurrently scaling di erent substructures software maintainer see relative locations structure examine similarities di erences visualize dependencies 
browsing source code software maintainers understanding high level structure prerequisite understanding code modules functions 
shrimp views source code integral part structural documentation opposed separate entity 
consequently software maintainer seamlessly switch implementation documentation system 
early experiments indicate capability increase maintainer understanding considerably 
clear source code larger programs ectively browsed manner issue currently investigated 
navigating software hierarchies large information space navigation large software systems non trivial 
multiple window approach user travels hierarchy opening new windows move level 
unusual users lost move deeper hierarchy 
shrimp technique provides better contextual cues navigate hierarchy 
steps path traveled visible form nested nodes 
user elect return subsystem branch traveled elide information contained subsystem closing node 
nested graph formalism single sheye view previously manual operations open close resize reposition windows automatically performed sheye view algorithm 
multiple window approach originally provided rigi may desired certain situations 
example large project maintainer may interested small part system 
shrimp view may retain unnecessary information higher levels abstraction 
rigi overview window ective presenting tree view hierarchy 
may familiar visualization hierarchy shrimp views certain users 
combinations shrimp traditional rigi visualization techniques may bethe best approach 
example software maintainer may choose open separate rigi windows subsystem current interest reached produce shrimp view show contents subsystem 
chapter demonstrated structures large software systems various levels abstraction ectively explored documented shrimp views 
views help users discovery phase reverse engineering allowing see detailed structures patterns view structures context system structure 
nesting feature subsystem nodes implicitly communicates parent child relationships readily exposes structure subsystem containment hierarchy 
maintainers wishing understand structure software approach provides mechanism high level structure system simultaneously browse implementation 
early observations show users quickly adopt shrimp views easily exploit relative advantages software visualization technique 
ectiveness technique currently evaluated user experiments 
acknowledgments supported part british columbia advanced systems institute ibm software solutions toronto laboratory centre advanced studies iris federal centres excellence natural sciences engineering research council canada university victoria simon fraser university 

tufte 
envisioning information 
graphics press 

price baecker small 
principled taxonomy software visualization 
journal visual languages computing june 

muller wong tilley 
understanding software systems reverse engineering technology 
missaoui editors object oriented technology database software systems pages 
world scienti 

muller orgun tilley uhl 
reverse engineering approach subsystem structure identi cation 
journal software maintenance research practice december 

muller tilley orgun 
reverse engineering environment spatial visual software interconnection models 
proceedings fifth acm sigsoft symposium software development environments sigsoft tyson corner virginia december pages december 
acm software engineering notes 

tilley wong storey muller 
programmable reverse engineering 
international journal software engineering knowledge engineering december 

reingold 
graph drawing force directed placement 
technical report uiuc cds department computer science university illinois urbana champaign 

sugiyama toda 
methods visual understanding hierarchical systems 
ieee transactions systems man cybernetics 

reingold 
drawing trees 
ieee transactions systems man cybernetics se march 

wong tilley muller storey 
structural case study 
ieee software january 

ousterhout 
tcl tk toolkit 
addison wesley 

harel 
visual formalisms 
communications acm may 

muller 
rigi system large 
proceedings th international conference software engineering icse ra es city singapore april pages april 
ieee computer society press order number 

burnett baker carlson yang van zee 
scaling visual programming languages 
ieee computer special issue visual languages march 

furnas 
generalized sheye views 
proceedings acm chi boston ma pages april 

fairchild furnas 
semnet threedimensional graphic representations large knowledge bases 
guindon editor cognitive science applications human computer interaction 
lawrence erlbaum associates publishers 

sarkar brown 
graphical sheye views 
communications acm december 

johnson shneiderman 
tree maps space lling approach visualization hierarchical information structures 
proceedings visualization san diego california october pages oct 


space presentation emphasis techniques visualizing graphs 
proceedings graphics interface ban alberta may pages may 

carpendale fracchia 
dimensional surfaces ective presentation visual informa tion 
uist proceedings acm symposium user interface software technology pages 


simple algorithm drawing large graphs small screens 
graph drawing volume lecture notes computer science 
springer verlag october 

dill bartram ho 
continuously variable zoom navigating large hierarchical networks 
proceedings ieee conference systems man cybernetics 

misue sugiyama 
multi viewpoint perspective display methods formulation application compound graphs 
th intl 
conf 
human computer interaction stuttgart germany volume pages 
elsevier science publishers september 

sarkar tversky reiss 
stretching rubber sheet metaphor viewing large layouts small screens 
user interface software technology pages november 

leung spence apperley 
applying bifocal displays topological maps 
international journal human computer interaction 

misue eades lai sugiyama 
layout adjustment mental map 
journal visual languages comput 

henry hudson 
interactive graph layout 
uist hilton head south carolina pages november 

storey muller 
graph layout adjustment strategies 
proceedings graph drawing passau germany september 
springer verlag 
lecture notes computer science 


storey muller 
manipulating documenting software structures shrimp views 
proceedings international conference software maintenance icsm nice france october 

