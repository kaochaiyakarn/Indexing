impact copyright development cutting edge binary reverse engineering technology cristina cifuentes department computer science electrical engineering university queensland brisbane qld australia cristina csee uq edu au reverse engineering executable code growing area software engineering research technology development due variety reasons including porting programs newer faster machines 
discuss core object code reverse engineering technologies emulation decompilation binary translation uses decades 
uses point economic need techniques benefit users technology 
extent copyright protection binary code implications development binary code manipulation tools 
argue copyright laws hinder development computer software technology time hardware developing increasingly fast rates software needs available new machines 
economic considerations need taken account 
keywords intellectual property decompilation emulation binary translation 
reverse engineering executable code growing area research development new technology computing community mainly due continuous development newer faster machines necessitating continuous upgrade software run new machines 
commonly research funded software engineering australia www sea net au terms executable code binary code object code synonyms refer code produced compilation linking assembler linking process 
known computing community software keep hardware developments normally lags years due technical cost benefit factors 
software developed new machine software development tools compilers debuggers graphical user interface builders need available new hardware platform 
development software new machine driven marketing research foreseeable return investment development new software software may developed machine 
performance computers doubles months trend appears continue decade 
rate improvement causes software products age rapidly despite copyright protection software years countries years 
technology developed decade aid migration porting software programs executable form 
translation process mainly performed automatically translation binary code source machine binary code target machine emulation binary translation source code decompilation processes commonly known reverse engineering binary code fall reverse engineering re engineering forward engineering definitions 
uses emulation decompilation binary translation technologies development computing industry years 
uses support economic need technologies 
extent copyright protection computer software current legislation european union eu proposed legislation australia 
conclude looking rationale copyright system fulfilled objectives relation computer software 
look impact current system development technology helps development computing industry 
concentrates copyright binary code level arguments relevant areas reverse engineering translation code proprietary gl gl languages form language 
reverse engineering object code source code program transformed object code program compilation process see 
object code program includes machine instructions particular machine dependent machine instruction set 
order program available machine appropriate tools libraries need exist platform compilation process 
alternatively program emulated binary translated new platform 
object code file composed series sections include code data sections program 
code text section part contains machine code instructions program se 
data sections contain initialised data program 
nature von neumann machines code data represented way 
series bytes data may stored code section 
hard distinguish code data object code programs 
separation code data equivalent halting problem general 
practice heuristic methods successfully decode executable code files 
subsections summarize core object code reverse engineering technologies uses years 
technologies share common step object code assembly representation 
emulation emulation process running program machine source machine machine target machine decoding source machine code instructions simulating functionality instructions target machine see 
simulation introduces time overhead program emulated needs decoded run time appearing user program running directly target computer 
naive software emulators emulate program times slower program run source machine 
caching techniques bring factor 
emulation referred interpretation technically emulation performed hardware level interpretation software level 
practice terms considered equivalent 
emulation terminal emulation example emulate mainframe terminal pc 
emulation aid migration nd rd generation machines time programs written assembly code migrated new machine considerable time expense rewriting code 
emulation aid development new hardware operating systems 
seen emulators run old programs new machines particularly games obsolete machines 
time overhead introduced translation process run time fact new machines normally faster old machines resulting emulated programs performing reasonable speed 
possible run multiple operating systems virtual machines physical machine emergence emulators operating systems runs windows applications solaris emulation computer architectures embra vmware tools provide low level binary compatibility oss running particular platform wine 
year emulators games consoles developed 
virtual game station emulate sony 
ultra high level emulator emulates console 
explained section sony taken court 
decompilation decompilation process translating executable code back source code inverse compilation process 
illustrates compilation process emulation process decompilation process binary translation process decompilation process 
decompilation incomplete process general amount information lost compiler compiling source code binary code 
heuristics human intervention aid recovery source code 
quality generated code normally original source code meaningful variable names comments normally missing 
decompilation techniques initially developed decompiler built compiler developed navy electronic labs 
decompiler built proof concept refinement decompilation technology led commercial uses technology aid migrate nd generation code new rd generation machines 
decompilers port programs newer machines aid documentation debugging programs recreate lost source code aid understanding computer viruses worms internet worm 
decompilers reverse engineering tool capable helping user tasks checking software existence malicious code validation compiler generated code safety critical systems recovery lost source code fix year bug operational software 
java language seen java decompilers 
java decompilers accurate traditional decompilers register machines java language compile source code machine code intermediate representation known bytecodes 
bytecodes resemble assembly language stack machine 
java bytecode files information rich need interpreted order run program java virtual machine 
binary translation binary translation process automatically translating executable code source machine target machine emitting native machine instructions target machine emulating source instructions see 
translator generates functionally equivalent assembly code target machine 
binary translation involves reverse forward engineering techniques borrow decompilation compilation processes 
process binary translation performed ways statically dynamically 
involves creation target object code program run target machine normally aid run time interpreter pieces code 
involve generation target binary code program dynamic execution generated code translation taken place 
dynamic translation way similar emulation advantage generation native code optimizations frequently executed pieces code resulting efficient techniques emulation 
binary translation relatively new area research late aid porting code newer machines 
vest mx fx 
developed alternative emulation interpretation considered slow purposes running application software machines 
reported digital fx runs applications times faster run emulation 
relative infancy technology means techniques development research labs 
hewlett packard compaq universities 
university queensland 
summary techniques summarizes uses emulation decompilation binary translation technology years 
uses helped development computing industry cheap effective migration porting techniques amounts time resources need spent rewriting legacy code 
emulation binary translation techniques helped developing operating systems migration techniques new risc hardware late 
techniques helped marketing hardware machines years earlier possible 
copyright reverse engineering object code computer software protected worldwide literary copyright 
copyright gives author software right control reproduction program creation derivative programs adaptations program 
copyright legislation incorporate computer software enacted december australia 
electronic nature computer programs requires transient copying program ram time run 
backup copies usually users protect accidental loss corruption program 
common acts involve copying program legally stepping copyright owner exclusive rights exception rights exists legislation 
copyright act enacted allow transient copies ram creation back copies programs 
section provides infringement copyright owner program authorize making program adaptation program provided ffl new copy adaptation created essential step utilization computer program conjunction machine manner ffl new copy adaptation archival purposes archival copies destroyed event continued possession computer program cease rightful 
commonly copyright infringement arguments involving transient copying ram process reverse engineering object code copyright act 
section relation transient copying program ram broader decided 
section provides fair defence allows copying purposes criticism comment news reporting teaching 
scholarship research 
sets non exclusive factors decade technology terminal emulation emulation migration porting nd generation programs rd generation machines emulation decompilation development hardware operating systems emulation aid documentation debugging programs decompilation recreate lost source code decompilation aid understanding viruses worms decompilation migration porting cisc programs risc machines binary translation emulation operating systems machines emulation validation compiler generated code decompilation recovery lost source code fixes decompilation migration competitor hardware programs risc binary translation summary uses binary reverse engineering technology years 
considered determining fair particular case ffl purpose character including commercial nature nonprofit educational purposes ffl nature copyrighted ffl amount portion relation copyrighted ffl effect potential market value copyrighted 
eu european union ec directive legal protection computer programs provided exceptions copyright permit decompilation limited circumstances 
article ec directive establishes user right decompile contracted away article 
decompilation permissible essential achieve interoperability independently created program programs confined parts original program necessary achieve interoperability 
decompilation done right program information acquired decompilation readily accessible 
article provides exception allow error correction programs article allows understanding ideas 
important note exceptions interoperability error correction terms decompilation reverse engineering 
australia australia exceptions normal program recommended copyright law review committee included transient reproduction program computer ram making copies backup purposes 
recommendations implemented legislation similar definition 
recommended exceptions relation decompilation programs 
proposed exceptions ec directive exceptions decompilation included decompilation purposes interoperability error correction 
fair regime proposed legislative considered 
proposed fair regime available 
seen figures processes emulation decompilation binary translation involve initial step decoding information object file disassembly process 
section look australian legislation relates disassembly decompilation code cases decided extent disassembly performed 
raise issues addressed emulation binary translation technologies due lack precedent cases protection provided copyright countries 
disassembly decompilation section explain changes legislation relation disassembly decompilation australia 
eu changes legislation ec directive allowed decompilation certain circumstances 
eu acknowledge need exceptions cases taken courts 
fair defence enterprises games america 
cases courts disassembly program find interface functionality machine incorporation interface information program competing program fair 
court words conclude disassembly way gain access ideas functional elements embodied copyrighted computer program legitimate reason seeking access disassembly fair copyrighted matter law 
words disassembly interoperability permitted details interface available means 
case set precedent reverse engineering object code 
context fixing programs year compliant arguable tool fixes object code program correct dates falls fair defence 
digital millenium copyright act provoked considerable reaction computing community particular computer security community 
original proposed form prohibited criminal sanctions distribution information circumvent copy protection mechanism 
proposal allowed developer prevent reverse engineering program long copy protection mechanism place password protection 
prevented analysis viruses order provide solution program considered copy protected 
computer security organizations analyze vulnerabilities existing systems prevented doing 
final form provides prohibition introduces series exceptions ffl reverse engineering interoperability ffl encryption research ffl security testing 
australia australia legislation eu fair provision 
australia limited fair dealing defence available purposes study research 
main australian decisions area services pty data access 
cases courts held reproduction lookup table part computer program infringement copyright table constitutes substantial part program despite black box testing techniques 
disassembly 
clearly lack consensus international level allows decisions development local industry 
copyright law review committee computer software protection report recommended exceptions owner rights relation decompilation interoperability error correction 
governmental response copyright amendment computer programs bill writing australian parliament containing exceptions ffl making interoperable products ffl correcting errors ffl security testing 
binary translation emulation binary translation emulation cutting edge software development research 
lack legal precedent legislation raises questions software developers copyright owners 
eu australia legislation area 
appears precedent set case sony computer entertainment relating emulation technology 
sony announced sue emulation technology 
section briefly reason copyright issues raise questions need addressed aid development computing industry 
binary translation process includes transient intermediate copying ram parts original object code program 
fair apply case substantial part program subject adaptation 
arguable apply dynamic translations transient copies code process running program machine albeit different machine originally intended static translation clear allowed new copy adaptation program file 
purpose static translation dynamic translation viz 
able run program reasonable performance newer machine 
startling result dynamic translation permitted copyright law static translation prohibited 
dynamic binary translation emulation involves transient copying program emulated ram creation adaptation program file translation done fly memory 
reasoning dynamic translation relevant emulation 
emulation technology slower binary translation technology today computing machines quite fast powerful able run legacy application faster original host machine cases 
assume applied support dynamic binary translation emulation techniques faced problem australia countries provide equivalent laws 
australia recommendations computer software protection left issue porting migration software machines negotiation copyright owner user program 
see justification apart convenience user allowing porting programs copyright owner unable unwilling supply suitably modified version program reasonable time 
considered rights copyright holder way justified 
user need get license permission copyright owner order run legally acquired copy program machine machine 
raises questions ffl happens copyright owner give license user plans releasing new version program new machine 
ffl happens copyright owner gone 
user required negotiate 
ffl copyright owner plans version program available new machine user legally acquired copy program old machine required buy copy program new machine 
ffl copyright owner allowed dictate hardware platform program run today fast pace hardware change 
sony case developers popular games machines threatening sue companies available emulators machines 
january sony development virtual game station emulator emulator machine runs macintosh 
sony game market won round bound long battle emulation rights extent copyright protection computer programs 
april federal district court san francisco ruled sony bios diluted sony trademarks 
district court issued prevent bios development windows emulator 
early april sony lost attempt blocking launch emulator pc 
developers surprised sony decision sue full supporters platform making emulator available pc expanding games market 
customers require buy copy sony games order emulator 
author opinion cases bound set precedent cases involving emulation 
important courts put copyright economic context consider underlying principles copyright benefit users society large return monopoly 
stated note free consider public benefit resulting particular notwithstanding fact alleged may gain commercially 
public benefit need direct tangible may arise challenged serves public interest 
case identification functional requirements genesis compatibility led increase number independently designed video game programs offered genesis console 
precisely growth creative expression dissemination creative works unprotected ideas contained works copyright act intended promote 
emphasis added 
section shown technology aided development computing industry copyright protection extend protect meant protect innovation progress benefiting users society large 
ieee usa response response sony case potential damage computing community ieee usa submitted court appeals ninth circuit brief supporting reversal district court decision extent needed clarify affirm legal principles authorizing reverse engineering 
ieee usa submission states supports reverse engineering obtained copies software doing necessary understand ideas unprotected aspects copyrighted software 
ieee usa submission author belief reverse engineering computer programs fundamental development programs technology 
ieee usa supports fair cases argues fair applicable case sony 
ieee usa puts forward contractual provisions vendors software licenses prohibit reverse engineering object code enforceable attempt limit engineer fair privileges software 
extent copyright protection computer software finding right balance worldwide computer software protected copyright literary 
copyright protects expression idea idea 
case computer software copyright protects source code aspects object code 
copyright intellectual property system designed give authors incentive create new works 
providing authors monopoly limited amount time society large benefits able progress innovate 
important understand copyright created benefit users society large benefit authors 
copyright privilege provided government right 
previous aims copyright system misconceptions current way system relation software discussed 
copyright protects expression functionality functionality protected trade secrets patents 
early copyright protect functionality software 
court decisions clear copyright protect functionality access particular functionality interfaces interoperability 
courts relied fair doctrine explain limits copyright protection object code 
countries understood fact australia copyright protecting functionality software reverse engineering involving disassembly taken place 
clearly international agreement needed issue 
disassembly decompilation techniques traditionally reverse engineer program order get interface information required interoperability purposes 
emulators binary translators reproduce functionality program machine original expression program 
emulators dynamic binary translators create transient copy program run ram purposes running program machine 
copyright created benefit users society large making available operating systems games application software different computers emulation binary translation benefits users society large matter hardware platform user version program legally obtained run hardware platform user choice emulator binary translator 
technology software products available variety machines minimum extra costs user 
user required buy new hardware run certain types software 
nature software requires runs hardware platform 
programs developed machine necessarily available machine 
available user buy copies program run different machines say machine machine home 
clearly way users required buy copies book read office home users required buy copies software product just underlying hardware different technology available run software hardware 
constant upgrade hardware performance doubles months leads continual changes underlying hardware platform software runs 
java virtual machine runs java bytecode programs machine indication trend software hardware independent 
allowing techniques emulation binary translation run software hardware independent way users general benefit 
summary processes disassembly decompilation binary translation emulation described 
review computing literature shows technologies aided migration porting software new machines development new operating systems machines 
current rate hardware change months performance machines doubles 
software age quickly copyright software years 
existing legal protection computer software fails adequately reconcile fact software exist hardware object code distributed users tightly bound particular machine 
rapid change hardware technology users benefit decrease length protection computer software ability freely translate object code run machine choice 
acknowledgments anne fitzgerald insightful discussions copyright david research assistance especially legal cases involving emulation 
information intellectual property protection computer software refer computers law page www csee uq edu au cristina cal html 
software decompiler 
www com 
games america fed circ 


ipr 

piler system computer program translation 
technical report probe consultants september 

efficient architecture simulation techniques 
proceedings winter usenix conference pages 
miller 
hp emulation hp precision architecture computers 
hewlett packard journal pages december 

www com 

inverse compiling 
www csee uq edu au csm decompilation ic htm 
chikofsky cross 
reverse engineering design recovery taxonomy 
ieee software january 
cifuentes van emmerik ramsey 
design retargetable binary translator 
appear working conference reverse engineering atlanta usa october ieee computer society press 
cifuentes gough 
decompilation binary programs 
software practice experience july 

www com 
copyright law review committee 
computer software protection final report 
office legal information publishing canberra april 
copyright law review committee 
simplification copyright act part exceptions exclusive rights copyright owners 
canberra september 
digital millenium copyright act october 
european council directive legal protection computer programs may 
eec may 
freeman 
don missing source code stall year project 

year survival guide 
halstead 
machine independent computer programming chapter pages 
spartan books 
hamilton 
moore law century 
computer january 
hoffman 
recovery firm hot missing source code 
computer world march 

digital fx combining emulation binary translation 
digital technical journal 

decompilation 
phd dissertation university california irvine computer science 
ida pro disassembler data rescue 
www com ida htm 
ieee usa 
brief institute electrical electronics engineers usa 
submission court appeals ninth circuit sony computer entertainment 
johnson 
fun profit 
proceedings winter usenix conference pages 

emulator thwarted 
www wired com news news politics story html april 
bc 
le 
order execution technique runtime binary translation 
proceedings th international conference architecture support programming languages operating systems pages san jose ca october 
acm press 

object code object code translation 
usenet posting november 
may mimic fast system simulator 
proceedings sigplan symposium interpreters interpretive techniques pages june 

demonstrating equivalence source code prom contents 
computer language 
services pty data access 

june 
reuter 
ftp cs washington edu pub decomp tar public domain software 

computer program translate machine language fortran 
proceedings pages 
enterprises th circ 
sites chernoff kirk marks robinson 
binary translation 
communications acm february 
sony computer entertainment federal district court san francisco april 
source recovery 
www 
source recovery com 
ji 
stewart 
stay infringement line 
ip magazine february 
sunsoft 

www sun com sunsoft products pc integration products 

computers 
computer october 
van vliet 
mocha decompiler 
www 
com mocha zip 
vmware virtual platform technical white 
www vmware com products html 
wine project 
www com 
witchel rosenblum 
embra fast flexible machine simulation 
proceedings conference measurement modeling computer systems sigmetrics philadelphia usa 
acm acm press 
