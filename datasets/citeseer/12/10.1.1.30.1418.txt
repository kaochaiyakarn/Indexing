recovery jump table case statements binary code cristina cifuentes mike van emmerik department computer science electrical engineering university queensland brisbane qld australia csee uq edu au technical report december fundamental problems analysis binary executable code recognizing machine independent way target addresses conditional branches implemented jump table 
addresses decoding machine instructions procedure incomplete analysis procedure 
technique recovering jump tables target addresses machine compiler independent way 
technique slicing expression substitution 
assembly code procedure contains indexed jump transformed normal form allows determine jump table located information contains offsets table absolute addresses 
technique tested sparc pentium code generated fortran pascal compilers 
tests show code text segment technique 
technique developed part retargetable binary translation framework suitable binary manipulation tools binary profilers decompilers 
sponsored australian research council 
sun microsystems 

growing reliance software continued development newer faster machines increased need machine code tools aid migration emulation debugging tracing profiling legacy code 
tools binary translators emulators simulators code disassemblers decompilers 
fundamental problem decoding machine instructions distinguishing code data represented way von machines 
executable program entry point program program header 
information text data sections header 
data stored text areas information stored executable program header 
need analyze code decoded text area program separate data code 
standard method decoding machine code involves reachable paths entry point 
method give complete coverage text space presence indirect transfers control indexed jumps indirect calls 
common technique overcome problem patterns 
pattern generated particular compiler cater way compiler family compilers generate code indexed jump 
technique extensively tools deal particular set compilers example processes windows binaries generated microsoft compiler 
presence optimized code patterns tend effectively code generated compiler known pattern recognizer 
technique recover targets indexed jumps variety machines languages 
technique slicing binary code expression substitution normal form 
section presents pentium sparc examples code indexed jumps section explains normalization technique section provides results technique existing benchmarks programs section gives previous area 
contains appendix extra interesting examples 

compiler code generation branches conditional branches suggested wirth hoare useful extension algol language 
conditional branch allows programming language determine branches code 
extension implemented algol form allowed statement expression 
words result case assigned variable 
high level statement evolved known switch statement case statement pascal labels different arms conditional branch default arm allowed 
code shows indexed variable num tested values range individual actions successful defaults default action 
commonly documented compiler textbooks compiler writers generate different types machine code conditional branches 
ways generating conditional branches determined talking compiler writers reverse engineering executable code 
techniques generating branches compiler documented optimization space speed important issue 
common techniques described 
include int main int num printf input number please scanf num switch num case printf break case printf break default printf break return 
sample switch program written language 
simplest way generating code branch linear sequence comparisons arm statement 
form efficient small number arms typically 
sophisticated technique tree selection accomplished nested set comparisons organized tree 
common implementation jump table may hold labels offsets particular label 
implementation requires range test determine membership values table 
jump tables fastest method arms conditional branch jump tables space wise inefficient case values sparse 
cases search tree convenient implementation 
arms conditional branch sparse clustered ranges common technique combine search trees jump tables implement cluster values 
deals issue recovering code generated jump tables way target addresses indexed jump determined 
attempt recover high level case statements information necessary translate indirect branch indexing jump table 
conditional branch jump table indexed table set addresses offsets cases branch 
table located read data section mixed text section 
interest efficiency range tests jump tables need concise 
common way doing tests follows compare upper bound lower bound unsigned greater goto range assertion lower bound upper bound case selector value bounds upper lower bounds offset jump table calculated size entry table typically bytes bit machine 
addressing modes available machine indirect jump address table plus offset indexed jump values generated 
machine continues execution target indirect indexed jump 
retargetable compilers techniques 
brief description code generation indirect jump branch table retargetable compiler specification goto upper bound goto table compiler writers variety heuristics determine code generate conditional branch addressing modes instructions available target machine 
common compiler way emitting code construct number arms conditional branch sparseness values arms 

examples existing indexed jumps binary code section presents examples pentium sparc code indexed jump tables 
examples aim familiarize reader variety ways encoding conditional branch assembly code show degree complexity code 
assembly code examples generated unix utility dis 
disassembler uses convention placing destination operand right instruction 
examples show annotated native assembly code relevant address assembly instructions indexed table 
movl ebp eax read index variable subl eax minus lower bound eax check upper bound ja exit range jmp eax indexed scaled jump table addresses code handling various switch cases 

pentium assembly code simple switch program produced cc compiler 
ld fp read index variable add minus lower bound cmp check upper bound bgu exit range sethi hi set table address 
continued sll multiply ld fetch table jmp jump nop table pointers 

sparc assembly code simple switch program produced cc compiler 
examples figures generated cc compiler solaris pentium sparc machine respectively sample pro gram 
register eax index variable value read local variable stack ebp 
lower bound range table checked respectively code exits value index variable bounds 
bounds indexed scaled jump eax performed offset start indexed table 
contents values table addresses displayed little endian format 
performs logical steps sparc assembly code indexed jumps exist indirect jumps registers allowed 
example indexed variable initially gets set local variable stack fp 
lower bound computed indexed variable set 
range table checked bounds code exits address 
bounds address table computed sethi instructions indexed register multiplied get right byte offset indexed table value table indexed fetched 
jump performed 
presents sparc example uses hash function determine index table 
code comes solaris vi program 
index variable set normalized subtracting lower bound 
range table checked value range jump case statement performed 
bounds table address set register 
indexed register hashed multiplied get right offset table table contains byte entries case 
word loaded table register value compared hash function key normalized index variable 
value matches code jumps address second word read table register jump performed address 
case value fetched table match key hashing comparison performed value 
code exits indexed register set point value table wrapping offset table table start process repeated address 
note table contains entries case normalized index value second target address code associated case entry 
movb eax edx andl xff edx da ecx da andl xff ecx da dab eax dae andl xff eax db edx db ecx db orl edx ecx dba orl eax ecx dbc ecx dbf 
jmp ecx 
table addresses ec code handle 
switch cases 
pentium assembly code ksim program produced sun cc version compiler 
example ksim spec benchmark suite 
example shows groups tests bits field structure get stored registers edx ecx eax 
partial results get resultant indexed variable register ecx 
upper bound checked bounds branch address taken indexed branch contents register ecx offset right amount table address 
note branch opposite normally switch statements ja 
illustrates danger relying patterns instruction recover indexed branch targets 
appendix illustrates examples 
ld fp read indexed variable sub subtract lower bound cmp compare range sethi hi set upper table addr bgu exit range nop set lower table addr srl hash 
sll 
add function modulo sll mult ld entry table cmp compare keys branch matched cmp unused entry 
exit nop 
delay slot add linear probe ba continue lookup nop add point entry ld load second entry jmp jump nop entry key value code address pair case unused entries xffffff entry rest table case case 

sparc assembly code vi program produced sun cc version compiler 

technique developed technique recover branches disassembled code 
technique architecture compiler language independent tested cisc risc machines variety languages compilers unknown compiler dealing precompiled executables 
development general techniques aim analysis executable code rely particular compiler knowledge knowledge prevents techniques working code generated compilers cases machines 
steps technique 
slice code indexed indirect register jump 
perform expression substitution recover pseudo high level statements 
check indexed branch normal forms 

slicing binary code executable code analysis framework allows disassembly code intermediate representation composed register transfer lists rtl control flow graphs decoded procedure program 
rtl describes effects machine instructions terms register transfers general support risc cisc machine descriptions 
indexed indirect jump decoded create intraprocedural backward slice disassembled binary code 
slicing occurs transitive closure registers condition codes expression 
criterion register path register loaded memory local variable procedure argument global variable returned function reaches start procedure defined register set caller 
purposes determining indexed jump tables extra criterion lower bound indexed jump relevant information slicing performed 
course condition satisfied indexed tables starting need check lower bound 
cases slice finishes means conditions 
case slices calls register returned call eax pentium sparc cases assume registers preserved calls continue slicing 
heuristic works practice needed cases 
heuristic works machine code conforms operating system application binary interface 
example slice created rtl notation eax ebp eax eax zf eax cf eax eax eax pc cf zf dc pc pc eax register ebp points stack indexed variable eax gets value local memory procedure 
indexed register normalized subtracting lower bound range checked difference upper lower bounds 
bounds indexed jump performed 

expression substitution slice computed perform expression substitution means forward substitution 
common technique reverse engineering recovering higher level statements elementary ones assembly code cobol code 
definition register instruction terms set registers fa forward substituted register instruction fr definition unique definition reaches paths program register redefined path 
resulting instruction look follows ff fa need instruction disappear 
previous relationship partly captured definition du definition ud chains instruction register uniquely defined reached instruction ud chain set element 
relationship known clear relationship register formally ff fa iff ud du clear note definition place restriction number uses definition number elements du instruction potentially substituted different instructions provided satisfy clear property 
example application forward substitution slice section gives pseudo high level statements jcond ebp dc jmp ebp 
normal form comparison previous example rewritten way jcond var num jmp var num var local variable example ebp num upper bound conditional branch example num lower bound branch example indexed table address type address example constant equivalent size word machine example 
information infer number elements indexed table num num total case 
example elements indexed table labels addresses jump target address loaded address ebp previous example shows normal forms encode conditional branches indexed jump table 
call previous normal form type shows different normal forms identified executable code runs sparc pentium 
normal form address indexed tables contain labels values 
normal form offset indexed tables contain offsets start table code case 
normal form hashing contains labels offsets indexed table 
form position independent version 
normal form contains pairs entry indexed table 
examples figures find normal forms respectively jcond dc jmp normal form jcond jmp normal form jcond jmp normal form jcond dc jmp eb normal form examples form appendix 

experimental results tested technique recovery indexed branch code pentium sparc solaris environment 
spec benchmark programs testing go artificial intelligence plays game go ksim motorola chip simulator runs test program gcc gnu compiler builds sparc code compress compresses decompresses file memory li lisp interpreter ijpeg graphic compression decompression perl manipulates strings prime numbers perl vortex database program benchmark programs compiled sun cc compiler version standard spec optimizations sparc pentium 
include results awk script interpreter utility vi text editor solaris 
programs part unix os 
figures show number indexed jumps benchmark program classification indexed jumps normal forms unknown types 
case sparc code indexed jump tables form means indexed table stores offsets start table destination target address 
case pentium code indexed jump tables form meaning table contains type normal form types allowed jcond num jmp jcond num jmp jmp pc pc jcond num jmp mask 
normal forms conditional code analysis benchmark unknown vi vi go ksim gcc compress li ijpeg perl vortex total 
number indexed jumps sparc benchmark programs target addresses entries case statement 
primary motivation increase coverage decoded code executable program 
measured coverage obtained technique size bytes text segment program compared number bytes decoded number bytes indexed jump tables 
figures necessarily add due unreachable code decoding phase 
case sparc duplicate instructions order remove delayed branch instructions duplication counted twice model leading slightly coverage rare cases 
figures show results coverage analysis 
results show indexed tables program code reached decoding tables correctly 
benchmark unknown vi go ksim gcc compress li ijpeg perl vortex total 
number indexed jumps pentium benchmark programs li ijpeg programs show small coverage code sections 
due indirect calls registers fact decoding performed known paths 
case ijpeg large percentage procedures reached indirect calls decoded 
extended analysis techniques deal indirect calls 
context binary translation framework rely interpreter process code runtime 

previous published literature recovery indexed jump targets 
techniques tend ad hoc tailored specific platform compiler tend rely pattern matching 
qpt binary profiler tool profile trace code mips sparc platforms 
profiling program analysis analysis difference awk vi vi go ksim gcc compress li ijpeg perl vortex 
coverage code sparc benchmarks program analysis analysis difference awk vi go ksim gcc compress li ijpeg perl vortex 
coverage code pentium benchmarks tracing done instrumenting executable code 
indexed jump tables detected relying way compiler generated code jump mainly expecting table data segment case mips code segment immediately indirect jump sparc 
table examining instructions prior indirect jump determining table size alternatively text space scanned invalid address met 
dcc decompiler experimental tool decompiling dos executables code 
method tool pattern matching known patterns generated compilers dos machine 
eel executable editing library risc machines 
slicing determine instructions affect computation indirect jump determine indexed jump table 
precise method 
measurements success technique sparc spec benchmarks reveal recovery indexed jumps achieved code compiled gcc sun fortran compilers compilers 
recovery ratio measured counting number indirect jumps expected recovered 
ida pro pentium disassembler compiler patterns determine compiler compile original source program 
ida pro recovery indexed jump tables technique documented literature 
techniques compare favourably tools 
tested extensively code generated different compilers cisc risc machines indicating generality machine independence technique 

technique slicing expression substitution understand recover code conditional branches implemented indexed jump tables 
technique suitable recovery code machine code manipulation tools binary translators code decompilers 
technique tested pentium sparc code solaris environment spec integer benchmark programs 
branches correctly detected programs making technique suitable path coverage decoding machine instructions 
perl benchmark extra code decoded due recovery technique 
part retargetable binary translation project university queensland 
information refer www csee uq edu au csm uqbt html appendix figures illustrate examples form sparc code 
contains indexed table offsets table code handles individual switch case 
contains indexed table offsets table code way address table calculated position independent code call produces side effect setting register current program counter 
indexed table dc offsets fc sethi hi set table address add ld fp read idx variable sub subtract min val cmp cmp range bgu exit range sll multiply ld fetch table jmp jump table offset nop delay slot instr 
form example sparc assembly code 
unix system application binary interface 
prentice hall englewood cliffs new jersey 
ida pro disassembler data rescue 
www com ida htm 

wine project 
www wine 
ball larus 
optimally profiling tracing programs 
transactions programming languages systems july 
bernstein 
producing code case statement 
software practice experience 
cifuentes 
interprocedural dataflow decompilation 
journal programming languages june 
get switch var clr 
relevant sub subtract min value cmp cmp range bgu acc exit range sll multiply call set pc sethi hi set add eb ed ld fetch table jmp jump table offset nop delay slot instr ed table offsets ed af table case code edc ed fcc ee 

form example sparc assembly code position independent code 
cifuentes 
intraprocedural slicing binary executables 
harrold editors proceedings international conference software maintenance pages bari italy october 
ieee cs press 
cifuentes gough 
decompilation binary programs 
software practice experience july 
cifuentes 
specifying semantics machine instructions 
proceedings international workshop program comprehension pages italy june 
ieee cs press 
cifuentes simon 
assembly high level language translation 
proceedings international conference software maintenance pages washington dc usa november 
ieee cs press 
cmelik keppel 
shade fast simulator execution profiling 
proceedings acm sigmetrics conference measurement modeling computer systems 
communications 
commenting disassembler instruction set support 
communications stevens creek blvd suite san jose ca 
fraser hanson 
retargetable compiler ansi sigplan notices oct 
fraser hanson 
retargetable compiler design implementation 
ben jamin cummings publishing redwood city ca 
freeman 
don missing source code stall year project 

year survival guide 
hennessy mendelsohn 
compilation pascal case statement 
software practice experience 
huang tsai bhattacharya chen wang 
business rule extraction techniques cobol programs 
journal software maintenance research practice jan 
larus ball 
rewriting executable files measure program behavior 
software practice experience feb 
larus schnarr 
eel machine independent executable editing 
sigplan conference programming languages design implementation pages june 
sale 
implementation case statements pascal 
software practice experience 
sites chernoff kirk marks robinson 
binary translation 
commun 
acm feb 
thompson 
alpha pc clothing 
byte pages feb 

hierarchical profiler 
www com products 
wirth hoare 
contribution development algol 
communications acm 

notes case statement 
software practice experience 

