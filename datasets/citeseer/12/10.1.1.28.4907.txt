shapely hierarchical graph transformation berthold hoffmann hof tzi de informatik universitat bremen postfach bremen diagrams represented graphs animation transformation diagrams modeled graph transformation 
studies extensions graphs graph transformation important programming graphs extend graphs notion hierarchy supports value composition define hierarchical graph transformation intuitive way resembles term rewriting 
require shapes hierarchical graphs specified context free graph grammars order set type discipline shapely hierarchical graph transformation 
resulting computational model shall basis visual language programming graphs represent diagrams 
unified modeling language uml prominent evidence steadily increasing importance visual languages computer science 
syntax visual language represented graphs graph transformation computational model specifying semantics 
specification implementing visual language 
investigate computational model visual language programming diagrams 
start definition graph transformation variable substitution particularly simple intuitive 
extend concepts fundamental programming composition values values recursively central structuring data programming partially supported esprit working group applications graph transformation 
languages 
extend graphs lines hierarchy forbids edges components :10.1.1.28.4907:10.1.1.28.4907
notions hierarchical graphs software modeling sacrifice compositionality allowing edges cross component boundaries 
typing values operations important detecting inconsistencies programs 
require shapes graphs specified context free graph grammars refine transformation shaped hierarchical graphs manipulated 
goes related typing concepts graphs merely restrict labelling degree nodes edges 
structured follows sections recall substitutive transformation plain graphs 
section introduces hierarchical graphs substitutive transformation extended section 
section describe specification graph shapes refine transformation section adheres shape discipline 
conclude remarks related section 
acknowledgments 
author habel frank useful comments 
plain graphs base definitions graphs general express relations arity 
graphs may contain variables placeholders sub graphs 
hypergraph 
set labels label rank number rank 
hypergraph quadruple hv lab consisting finite sets nodes edges labelling function lab attachment function att assigns sequences nodes hyperedges att length rank lab 
edge rank label denotes set sequences vocabulary 
empty sequence denoted 
may qualified ary edge 
hypergraph simply called graph components denoted vg att lab label shall denote handle graph consists single edge attached rank pairwise disjoint nodes 
variables 
assume contains distinguished set variable names 
variable names occurring graph denoted 
edges labelled variable names called variable edges variables short 
variable straight graph attachments pairwise distinct 
denote skeleton graph variables removed 
example chain graphs running example concerned representing chains graph values 
plain graphs chain structure represented kinds edges edge attached node chain edges edge turn attached node item graph stored chain 
shows graphs contain chain item graphs 
graphs drawn boxes names written upper right corner 
nodes drawn circles 
edges drawn boxes label connected attachments lines ordered counterclockwise starting noon 
variable names occurring written upper case edge labels appear lower case 
boxes binary edges empty labels disappear drawn lines second attached node ordinary graphs 
apply convention item graphs stored chain graph 
morphisms 
structure preserving node edge mappings graphs identify copies graph subgraph 
graphs 
morphism pair hm vg vh eh functions preserve labels attachments lab lab att att morphism surjective injective component mappings surjective injective respectively 
surjective injective called isomorphism graphs called isomorphic denoted 
omit index relevant 
composition functions function extension function maps empty sequence sequence sequence 
edge replacement 
edge graph may replaced graph gluing attachments distinguished nodes operation central defining transformations 
pointed graph hg pi graph distinguished sequence points 
length determines rank written rank 
denote pointed graphs graph component refer points pg points drawn filled circles see example 
replacement edge graph pointed graph hu pi defined rank lab rank proceeds steps construct disjoint union remove glue corresponding nodes att instantiation 
substitution pair 
associates variable name pointed graph rank points pairwise distinct 
substitution finite mapping fx 

substitution pairs pairwise distinct variable names domain dom fx subst denotes substitutions instantiation graph substitution obtained parallel replacement variables dom substitution denoted 
defines uniquely isomorphism edge replacement commutative sect 

graph matches graph substitution constructing instantiation 
graph matching far obvious decidable np complete general see corollary lemma decidable graph matches graph 
example graph instantiation substitution 


graphs match graphs respectively 
plain graph transformation graphs transformed matching pattern graph rule host graph rewriting instantiated replacement graph rule 

plain rules 
plain transformation steps transformation 
graph transformation rule rule short consists pattern graph replacement graph rule matches graph substitution triple ht called redex transforms graph graph written example chain graph transformation rule enters item graphs chain graph rule removes item graph chain graph 
shows transformation steps rules 
substitution example redex step 
image skeleton morphism highlighted fat lines image morphism second step highlighted 
lemma transformation steps computable 
redex ht determines transformed graph uniquely 
substitutive transformation general gluing approach graphs arbitrary size substitutions variables deleted duplicated single transformation step 
example occurrences variable name graph duplicate item graph graph deletes item graph substituting rule may redices context 
substitution example substitution subgraphs removed glued points left match pattern graph reveals general deficiency plain graphs impossible represent identifiable subgraphs chain graph denoted item graph denoted unique way 
reason introducing hierarchical structuring graphs 
hierarchical graphs hierarchical graph consists plain graph edges contain graphs may hierarchical 
definition follows allows wider variables :10.1.1.28.4907:10.1.1.28.4907
hierarchical graph 
set hierarchical graphs consists hv lab att hv lab plain graph called top set frame edges just frames labelled variable names cts contents function mapping frames hierarchical graphs 
constituents hierarchical graph denoted vh eh lab att cts hierarchical morphism 
hierarchical morphism pair mi plain graph morphism fh frames fg cts cts fg family hierarchical morphisms contents frames 
plain case hierarchical morphism surjective injective component morphisms surjective injective respectively 
induces isomorphism relation surjective injective 
component replacement 
frames nested hierarchy 
occurrence frame hierarchy designates contents isolated hierarchical graph component freely replaced component 
hierarchical graph 
frame fh hierarchical graph cts denoted considered frame nodes may contain hierarchical graphs add power representation 
node shall contain hierarchical graph hv hv may contained frame attached recursion definition hierarchical graphs defined inductively fh cts frame fh 
hierarchical rules entering left removing right items chain 
hierarchical substitutive transformation steps called direct component replacement component hierarchical graph hierarchical graph eh fh lab att cts contents function cts cts cts 
define occurrences hierarchical graph frame sequences fh extend notion component component replacement arbitrary occurrences follows fw fw silently assume substitutions instantiation extended hierarchical graphs 
example hierarchical chain graphs hierarchical representation chains turn edges example frames contain chain item graphs respectively 
frames boxes ordinary edges contents drawn inside filled different shades grey labels omitted 
figures shows hierarchical graphs contain chain graph components 
representation chain graphs item graphs isolated components 
helps maintain consistency representation allows compose decompose freely 
hierarchical graph transformation easy extend plain graph transformation hierarchical graphs definition rules substitutions plain graphs replaced hierarchical graphs rule may applied component hierarchical graph 
define transformation step requiring occurrence hierarchical pattern graph substitution construct transformed graph component replacement 
complicated impose shape discipline transformations section 
define transformation slightly different way embedding pointed pattern replacement graphs context hierarchical graph single variable 
substitutive hierarchical transformation 
hierarchical graph transformation rule cal rule short consists pointed hierarchical pattern graph points pairwise distinct pointed hierarchical replacement graph hierarchical graph context denoted contains single straight hole variable named components 
embedding pointed hierarchical graph rank rank defined replacing edge denoted 
rule matches hierarchical graph context substitution 
triple ht called redex transforms graph denoted note redex rule determines result rewriting redex uniquely isomorphism 



context substitution example hierarchical chain graph transformation shows hierarchical versions rules example transformations rules 
fat lines indicate matching shows context substitution transformation step 
hierarchical substitutive transformation computable hierarchical graph matching problem solved matching finite set plain graphs corresponding plain graphs component shapes shape analysis inferring pointer structures imperative programs shaped lists root connected trees 
devise means specify shapes way possible level imperative languages functional logical languages pointers hidden altogether 
specification edge replacement immediately adopt terminology fitting purposes 
shape grammars 
shape rule form associates shape name variable free pointed hierarchical graph shape rule directly derives hierarchical graph hierarchical graph replacing edge written shape rules perform edge replacement hierarchical graphs 
finite set shape rules induces shape system hh si shape names occur left hand sides denotes direct derivation reflexive transitive closure say derives shape name shape grammar hh defines set fn fg hg shape forms 
example shapes chain graphs item graphs defines shape chain item graphs 
shape names denoted lower case greek letters case 
write shape rules shape name 


shape chain item graphs shape grammars generate kind graph languages largest classes called context free 
see section details 
particular allow define recursive algebraic data types functional languages constructed disjoint union cartesian product 
doubly linked cyclic lists leaf root connected trees imperative data structures employing structure sharing specified 
shapely hierarchical graph transformation define shaped graphs define shapely hierarchical graph transformation preserves shapes 
shaped graphs 
rest fix shape system hg si assume variable name typed shape name type shape dgc pointed hierarchical graph pointed hierarchical graph obtained relabelling variable shape name type 
set shaped graphs defined uniting sets shaped graphs gn fg dgc fn write type gn substitution pair 
hu pi shaped type shaped substitutions consist shaped substitution pairs denoted subst lemma hierarchical graphs shaped substitutions subst dgc dg 
implies type type 
numbers attached node shape expresses node second point empty chain 
note pairs substitutions may different shapes 
proof 
shaped substitution pair 
duc type 
replacement variable occurring yields hierarchical graph corresponds replacement edge dgc duc yielding dg dgc dg follows definition edge replacement associative sect 
conclude dgc dg 
dgc fn means dgc dg transitivity derivations 
type type shapely transformation 
restrict attention transformation shaped graphs shapely rules 
rule shapely pattern replacement graphs shaped type type 
rule matches shaped graph shaped context graph type type shaped substitution 
transforms hierarchical graph written lemma shaped context graphs pointed shaped graphs type type type type 
proof 
shaped substitution 
ug lemma applies directly 
shape discipline consistent result shapely transformation shaped graph 
theorem shapely rule shaped graph shaped graph 
proof 
ht redex 
shaped graph definition shaped graphs lemmata 
cases variable free shaped graphs transformed 
question arises variable free shaped graphs closed shapely hierarchical transformation 
true rules introduce new variables replacement graphs appear pattern graphs 
corollary shaped graphs shapely hierarchical rule 
variable free variable free 
proof 
variable free substitutions variable free 
variables required occur dom variable free 

shape graphs example chain item graph substitutions consider example shapes specified 
assume variable names figures types type type type 
substitution shaped graphs type context type theorem graphs variable free shaped graphs type step shapely 
step shapely 
decidable hierarchical graph shaped membership context free hypergraph language decidable sect 
:10.1.1.28.4907
shapes set practical shape discipline allows detect errors hierarchical graphs hierarchical rules automatically 
type disciplines statically checked just inspecting programs may application rules efficient host graph transformed type checked parsing shape grammar 
shape grammars unambiguous shaped graph exactly derivation tree graphs represented trees rule matching boils matching pattern derivation tree host graph derivation tree 
nearly efficient pattern matching functional languages 
watt followed similar idea devised analysis oriented restriction level string grammars 
shape chain graphs defined example ambiguous 
fail shaped 
ambiguous shapes adaptation cocke kasami younger parsing algorithm graphs devised employed parses ambiguous grammars 
number derivation trees may exponential general 
defined class shape grammars number derivation trees polynomial 
extended graphs compositional notion hierarchy devised notion hierarchical graph transformation extends rewriting terms trees function symbols trees graphs hierarchical graphs straight forward way transformation substitutes variables rule pattern embeds instantiated pattern context inserts instantiated replacement context 
way graph transformation quite intuitive programming point view 
furthermore easily refined shape discipline consistent decidable may allow efficient implementation 
hopefully accepted excuse inventing variation graph transformation 
related 
pratt probably define hierarchical graph languages 
specified semantics programming languages context free graph grammars consider transformation graph languages 
engels heckel study hierarchical graph transformation basis system modeling languages uml 
allow edges components crossing frame borders necessary application domain adequate programming give away de compositionality hierarchical graphs 
substitutive hierarchical graph transformation modest extension hierarchical graph transformation variables denote entire contents frames :10.1.1.28.4907:10.1.1.28.4907
kind transformation essential variables may denote arbitrary subgraphs see 
investigate generic notion hierarchical graph transformation approaches simulated probably shapely hierarchical graph transformation :10.1.1.42.7994:10.1.1.28.4907:10.1.1.28.4907
way define shapes inspired fradet structured gamma uses structured multiset rewriting notion translated graph transformation edge replacement straight forward way 
steps 
transformation may highly nondeterministic 
may lead overload backtracking 
nondeterminism restricted degree really needed solving particular problem 
design rule patterns hierarchical structure shapes reduce nondeterminism 
context rule may substitutions matching rule host graph see example 
important goal bind nondeterminism imposed substitution 
instance require frame pattern contains variable 
pattern graphs kind 
rule matching nearly efficient deterministic gluing approach :10.1.1.28.4907:10.1.1.28.4907
search pattern skeleton graph subgraph isomorphism problem known np hard general 
shapes just structural way classifying values graph ical representation 
type discipline useful instance pro 
context free graph languages restricted specifying shapes graphs occur certain applications 
church rosser graph languages considered :10.1.1.28.4907
reader may noticed nice polymorphic shapes chain type example type schema type parameter instantiated concrete types 
rules defined polymorphically chains containing items shape functional language 
perspective 
shapely hierarchical graph transformation shall computational model rulebased language programming hierarchical graphs 
concepts shall defined top model transformation predicates parameters shall allow transformation sequences 
application conditions predicate parameters shall allow specify control imperative functional way 
classes shall encapsulate shape rules transformation predicates 
primitive values numbers strings shall integrated graph model 
shall integrated diagen tool generating diagram editors yielding language tool programming diagrams visual diagen generate editors arbitrary diagram languages represented shaped hierarchical graphs 
editors allow construct input programs display results diagram notation tailored program application domain 
program semantics diagrams terms hierarchical graphs represent internally 
semantic operations called user interface editors 
instance extend statecharts editor generated diagen operations animate behavior statecharts transformations simplify 
minas schurr taentzer 
application graph transformation visual languages 
engels ehrig 
kreowski rozenberg editors handbook graph grammars computing graph transformation vol 
ii specification programming chapter pages 
world scientific singapore 
hoffmann :10.1.1.42.7994
comparing notions hierarchical graph transformation 
electronic notes theoretical computer science 
appear 

kreowski 
hierarchical graph data model 
technical report fachbereich mathematik informatik universitat bremen appear 
claus ehrig rozenberg editors 
proc 
graph grammars application computer science biology number lecture notes computer science 
springer 
cuny ehrig engels rozenberg editors 
proc 
graph grammars application computer science number lecture notes computer science 
springer 
habel 
kreowski 
hyperedge replacement graph grammars 
rozenberg chapter pages 
hoffmann plump :10.1.1.28.4907:10.1.1.28.4907
hierarchical graph transformation 
journal computer system sciences appear 
short version appeared number lecture notes computer science pages 
ehrig 
algebraic theory graph grammars 
claus pages 
engels heckel 
graph transformation conceptual formal framework system modelling evolution 
montanari editors automata languages programming icalp proc number lecture notes computer science pages 
springer 
fradet metayer 
structured gamma 
science computer programming 
hoffmann 
graph transformation rulebased programming diagrams 
nagl schurr editors int workshop applications graph transformations industrial relevance selected papers number lecture notes computer science pages 
springer 
hoffmann minas 
generic model diagram syntax semantics 
broder corradini gorrieri heckel vaccaro wells editors icalp workshops number proceedings informatics pages waterloo ontario canada 
carleton scientific 
huet 
confluent reductions properties applications term rewriting systems 
journal acm 

complexity graph languages generated hyperedge replacement 
acta informatica 
minas 
concepts realisation diagen 
science computer programming appear 
minas hoffmann 
specifying implementing visual process modeling languages diagen 
electronic notes theoretical computer science appear 
plump :10.1.1.28.4907
church rosser hypergraph languages 
talk workshop und formale sprachen germany september 
plump habel 
graph unification matching 
cuny pages 
pratt 
definition programming language semantics grammars hierarchical graphs 
claus pages 
rozenberg editor 
handbook graph grammars computing graph transformation vol 
foundations 
world scientific singapore 
rumbaugh jacobson booch 
unified modeling language manual 
object technology series 
addison wesley 
sagiv reps wilhelm 
solving problems languages destructive updating 
acm transactions programming languages systems 
schurr winter 
progres approach language environment 
rozenberg chapter pages 
watt 
analysis oriented level grammars 
phd thesis university glasgow 

