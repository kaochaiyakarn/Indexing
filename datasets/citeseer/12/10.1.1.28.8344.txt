comparing decompositions produced software clustering algorithms similarity measurements decomposing source code components relations subsystem clusters active area research 
numerous clustering approaches proposed reverse engineering literature different algorithm identify subsystems 
different clustering techniques may produce identical results applied system mechanisms measure extent differences needed 
measure similarity decompositions done considers assignment source code components clusters criterion similarity 
argue better similarity measurements designed relations components considered 
propose similarity measurements overcome certain problems existing measurements 
provide suggestions identify deal source code components tend contribute poor similarity results 
conclude presenting experimental results highlighting benefits similarity measurements 

interesting software systems large complex consequence understanding structure difficult 
software systems composed resources classes modules variables depend intricate ways procedure calls inheritance relationships variable 
structure systems represented graph nodes resources edges relations resources 
automated assistance software structure graph provides little value understand design practical systems large number nodes edges 
system maintainers brian mitchell department mathematics computer science drexel university philadelphia pa usa mcs drexel edu find easier design documentation provides simplified description software structure 
unfortunately find accurate design documentation exist original developers system unavailable consultation 
turn developers generally modify source code thorough understanding modifications affect system structure 
address problem mentioned researchers reverse engineering community developing clustering tools 
tools decompose resources subsystems partitioning software structure graph 
subsystems generally consist collection source code resources collaborate implement feature provide service rest system 
typical resources subsystems include modules classes possibly subsystems 
subsystems facilitate program understanding treating sets source code resources high level entities 
primary goal clustering tools propose subsystems expose abstractions software structure 
various clustering tools different algorithms different assumptions subsystems formed 
techniques source code component similarity optimization concept analysis implementation information module directory package names determine clusters :10.1.1.14.3376:10.1.1.142.3736
clustering techniques exist researchers turned attention evaluating relative effectiveness 
reasons papers software clustering formulate case studies soliciting opinions authors systems case studies 
partition partition partition partition original graph maintenance 
example dependency graphs software system research measuring similarity decompositions considers assignment system modules subsystems 
argue realistic indication similarity consider module depends modules subsystem depends modules subsystems 
illustrate point graph nodes represent source level modules edges represent inter module relations 
notice decompositions left side identical decompositions right side far module placement concerned 
dependencies considered obvious decompositions shown left side similar decompositions right side 
decompositions compared source code resources tend treated equally 
argue section special consideration certain modules 
decompositions compared formulated value similarity distance measurement 
section investigate poor similarity results useful gaining intuition system structure 
points provide motivation 
section examine similarity measurements compare decompositions 
section propose new measurements address shortcomings similarity measurements described section 
section argue certain modules classes warrant special consideration clustering process 
section review results comparative study similarity measurements 
conclude section summary research contributions 

measuring similarity earlier show number unique ways decompose software system non overlapping clusters subsystems grows exponentially respect number modules classes source code :10.1.1.14.3376
heuristic algorithms necessary automate process 
past years clustering techniques literature making underlying assumptions constitutes poor system decomposition 
ideally effectiveness clustering techniques measured standard agreed decomposition system 
find standard benchmarks exist 
times clustering results decompositions analyzed evaluated soliciting feedback developers designers system 
evaluation mechanism subjective effective determining result reasonable 
clustering techniques produce different results system know agree certain aspects software structure disagree 
initial step addressing issues researchers begun formulating ways measure differences system decompositions 
example developed similarity measurement precision recall 
holt authored similarity distance measurement called mojo 
measurements treat difference decompositions system equally 
section similarity distance measurement ranks individual differences decompositions applies appropriate weighted penalty disagreement 
presenting similarity measurements review mojo precision recall techniques highlighting issues encountered evaluate software clustering results 

mojo distance similarity measurement mojo measures distance decompositions software system calculating number operations needed transform decomposition 
transformation process accomplished executing series move join operations 
mojo move operation involves relocating single resource cluster join operation takes clusters merges single cluster 
partition partition 
slightly different decompositions software system example shown illustrate calculate mojo 
mojo value example decomposition transformed decomposition single move operation move cluster cluster 
shows decompositions structure respect placement modules 
difference decompositions shown edges shown 
mojo consider edges mojo value decompositions shown 
appro priate decompositions shown left side candidate cluster graph isomorphism 
things clear decompositions right side 
clearly module connected cluster 
mojo value transforming partition partition misleading clearly belong cluster connected 
relations taken account partition similar similar respective partitions left side 
holt introduce quality measurement mojo 
mojo quality measurement normalizes mojo respect number resources system 
decompositions system resources mojo quality measurement defined mojo measurements discussed evaluate similarity percentage refer mojo quality measurement simply mojo point forward 

precision recall similarity measurement precision recall defined calculates similarity measuring intra pairs pairs software resources cluster 
assuming comparing partitions precision defined percentage intra pairs intra pairs recall defined percentage intra pairs intra pairs partition partition 
example decomposition mojo precision recall measurement consider edges calculating similarity 
partitions produce precision recall values 
undesirable aspect precision recall value measurement sensitive terms partition decomposition 
size number clusters 
misplaced modules cluster relatively members larger impact precision recall cluster members 
number clusters impacts precision recall 
think correlation size number clusters measuring similarity 
example consider 
example modules spread clusters 
module differs placement number mojo move join operations remains 
precision recall values shown respectively lower precision recall 
mistakenly leads believe similar partitions shown 

interpreting similarity results lethbridge state clustering techniques recover software system decomposition impose 
ask mean results produced different clustering techniques differ 
meaningful learned clustering algorithms produce significantly different partitions 
obviously comparing pair partitions high similarity desirable 
consider simple experiment pair partitions high similarity 
compare pair different system partitions find lower similarity value 
safely assume pair partitions similar second pair 
consider pair systems clustering times different clustering algorithms 
furthermore assume average similarity system high average similarity second system low 
cases average similarity low find modules system assigned particular subsystems high degree certainty tend drift subsystems belong particular subsystem 
low similarity value may indication inconsistent unstable clustering algorithm tendency modules assigned subsystem clustering results 
similarity measurements evaluate stability clustering algorithm 
idea stability small changes software system structure result large differences clustering algorithm decomposes system 

similarity measurements section similarity measurements designed implemented overcome shortcomings precision recall mojo discussed 
examining similarity measurement evaluates differences partitions software system structure 
describe algorithm computes distance partitions number steps required transform partitions 
section compare similarity measurements precision recall mojo 

edge similarity measurement problems mentioned section propose approach measuring similarity considers vertices edges partitioned graph 
describe approach formally example 
graph represent structure software system set modules classes set weighted dependencies modules classes 
edge weights indicate relative strength relationship pair modules system graph generated software systems readily available source code analysis tools acacia java 
consider partitions graph ai clusters bj clusters ai bj subsets vertices shows sample graph similar partitions 
consider sets ai ai bj bj ai ai bj bj sets set edges edges connect vertices cluster edges connect ller provides suggestions determine edge weights 
similarity measurements take edge weights account 
graph partition partition vertices distinct clusters illustrates edges partition thick arrows 
edges indicate agreement placement pair vertices aggregate edge weights calculate measurement 

set ratio weights set respect weights edges normalizes measurement 
specifically similarity weight weight ei ei weight weight 
example clustering graphs contain weighted edges assume edge weight 
weight set example bold edges 
measurement 
measurement reflexive calculated time 

partition distance measurement section measurement called compute distance partitions graph 
splits clusters partition merges back reproduce partition 
name merge clusters 
explanation presenting definitions 
graph define partition 
gn gi cluster partitioned graph 
specifically gi vi ei vi vi vj ei vi define vertices vi edges ei gi respect vg gi vi gi ei vi vi gi ei vi vi gi ei gi gi illustrate definitions consider cluster shown 
partition va ea definitions provided proceed measuring distance partitions software system 
represent partitions graph 
define subgraphs clusters respect 
ak 
bl step determining distance involves ai respect subgraphs refer ai respect subgraph bj ci ci formally defined follows ci vi ei vi va ai vb bj ei ea ai eb bj illustrates non empty respect example 
labelled formed intersecting cluster cluster formed intersecting cluster cluster 
show common vertices edges partitions 
define set defined follows ai bj ai ci derived combine recreate clusters bj shown bottom part 
merge process performed follows bj vj ej vj vi ej ei merge process pay attention example edge cluster cluster 
shown clarity omit define set introduced merge process form cluster partition bj bottom part summarizes merge process 
recreate partition union 
recreate partition union 
introduced merge process 

compute evaluate total cost merge operation bj set sum weights introduced merge process bj weight weight measurement rewards clustering technique forming cohesive sub clusters respect cost introducing new paid subgraphs ci merged reproduce original clusters cost assigned common inter edges indicate agreement clustering results 
measurement contain weighted edges expression simplified computing cardinality set 
measurement measurement reflexive 
general 
direction transformation important goal obtain measure relative closeness suggest value min 
revisiting example illustrated shown set contains edges 
converted transformation partition partition consider transforming partition partition find set contains edges 
weight weight software graph example contains total edges 
presentation measurement section shows measurement calculated 
evaluated time 

isolating certain modules improve similarity able measure similarity decompositions software system important evaluating effectiveness clustering technique 
cases benchmark decomposition system exist able measure similarity little value 
system clustered times different clustering algorithms similar decompositions produced gain confidence proposed clusters 
various clustering algorithms different criteria form clusters need identify large differences similarity due clustering algorithms differences result way certain special modules bias results 
goal gain intuition structure system may find beneficial exclude special modules associated dependencies similarity process especially exclusion improves results produced clustering algorithm 
questions asked 
special modules 
identify 

answer question revisit ller authors introduce notion omnipresent module 
omnipresent modules defined modules highly connected modules system 
modules tend obscure system structure removed consideration forming subsystems 
think modules appear high degree degree removed clustering process belong particular cluster behave libraries system 
automation identification omnipresent library modules tedious 
address added feature identify special modules clustering tool called bunch 
bunch propose candidate omnipresent library modules automatically allowing user add remove special modules necessary 
modules identified software engineer may wonder 
bunch modules associated dependencies removed clustering process 
clustering results omnipresent library modules collected special clusters named accordingly 
visualized modules shown special shape user knows module participate clustering process 
final consideration measuring similarity partitions account isomorphic modules 
isomorphic modules modules connected clusters total edge weight 
example decompositions shown left side consider partition partition identical argue module member cluster 
performing similarity analysis think isomorphic modules included virtual member subsystems connected 

comparative study section comparative study illustrate effectiveness similarity measurements section validate assumptions removing special modules clustering process 
bunch clustering tool unique features lend study :10.1.1.14.3376:10.1.1.142.3736
particular bunch uses randomization optimization approach form clusters large original modules special modules removed regular isomorphic regular isomorphic system pr mj es mc pr mj es mc pr mj es mc pr mj es mc compiler bison incl rcs boxer grappa cia linux table 
similarity comparison results numbers indicate percentage agreement search space repeated runs produce exact decomposition software system 
continue brief overview clustering technique implemented bunch 
bunch starts generating random partition software structure graph 
refer graph module dependency graph mdg 
mdg represents modules classes system nodes dependencies nodes edges 
edges mdg may may weighted emphasize relative strength dependency nodes 
bunch determines candidate clusters moving nodes clusters cases creating new clusters order maximize objective function call modularization quality mq :10.1.1.14.3376
mq function property rewarding cohesive clusters penalizing excessive inter cluster coupling 
bunch non determinism provides basis study systems produce relatively consistent results systems exhibit variability results bunch cluster system mdg times 
case bunch converges similar mq value placement certain modules system number clusters result varies slightly run 
primary goal focus clustering approach implemented bunch investigate variation clustering results infer useful information system structure 
study conducted systems varying size 
systems open source academic environment 
sample systems clustered times bunch 
system individual results pairwise compared similarity measure ments discussed section section 
recomputed similarity pairs account isomorphic modules 
done treating isomorphic module member clusters attached 
final test repeated experiment described change 
time systems removed omnipresent library modules associated dependencies input mdg 
table show results experiments 
data test represents average percentage similarity samples 
observations data shown table similarity measurements examined study behave consistently respect systems examined 
indication measurements suitable measuring similarity 
values measurements differ individual system expect comparing results systems individual measurements related way 
compare measurements systems expect see values systems larger corresponding similarity values system 
data table shows relationship constantly systems examined 
example pr bison pr expect see mj bison mj es bison es mc bison mc 
table abbreviations shown column headers follows precision recall mj mojo quality measurement es mc 
indicated section removal special library omnipresent modules improve similarity 
results study validate claim 
data table indicates average improvement precision recall improvement mojo improvement improvement omnipresent library modules removed 
best improvement cia system 
cause improvement nodes cia omnipresent library modules far system 
average number special modules systems examined study approximately 
grappa rcs systems cases value precision recall measurement dropped removal special modules 
systems clusters small deviations partitions probably amplified shortcomings precision recall measurement discussed section 
data study indicates slight improvement similarity attained allowing isomorphic modules virtual members clusters connected 
counterexamples data showing special treatment isomorphic modules negative impact similarity measurement results 
compiler boxer systems appear improved isomorphic modules considered 
result probably compiler boxer systems smallest systems study consisting modules respectively 
frequency agreement individual similarity mojo quality precision recall similarity results 
frequency distribution linux similarity measurements consider relations source code components produce results variable similarity measurements precision recall mojo consider differences module assignments 
study conducted pairwise comparisons runs exact system expect see little variability individual similarity measurement results 
show frequency distribution results clustering linux system 
graph illustrates variance precision recall mojo measurements larger variance measurements 
due space restrictions show frequency distribution linux system systems examined case study share behavior 
linux system table shows min max spread variance similarity measurement 
similarity max standard measurement min deviation precision recall mojo table 
similarity measurement variance linux data study indicates average values measurements tend larger precision recall mojo measurements 
measurement high systems examined 
result related bunch clustering technique optimization approach bunch tries minimize coupling subsystems 
expect minimal changes successive clustering runs 
suggest study repeated multiple clustering approaches investigate measurements remain high 
noted mojo numbers change considering isomorphic modules 
implementation mojo provided access mojo source code unable treat isomorphic modules differently 

summary primary goal investigate importance evaluating software clustering results 
examined measurements similarity distance evaluate software clustering results raised concerns measurements 
address concerns argued measuring software clustering results take account placement modules clusters connectivity system modules 
new measurements address concerns conducted study investigate effectiveness measurements 
addressed importance recognizing special isomorphic modules comparing clustering results proposed ways deal types modules 
measurements integrated bunch api bunch gui 
bunch downloaded drexel software engineering research group web page mcs drexel edu bunch 
followup investigate effectiveness similarity measurements comparing decompositions produced clustering algorithms bunch 
taken initial steps goal creating framework software evaluation 

research sponsored ccr cise national science foundation nsf 
additional support provided research laboratories sun 
opinions findings recommendations expressed material authors necessarily reflect views nsf government sun microsystems 
mojo calculator 

comparison concept reverse engineering 
proc 
intl 
workshop program comprehension 
lethbridge 
experiments hierarchical clustering algorithms software remodularization methods 
proc 
working conf 
reverse engineering 
lethbridge 
recovering software architecture names source files 
proc 
working conf 
reverse engineering 
chen 
reverse engineering 
krishnamurthy editor practical reusable unix software chapter pages 
john wiley sons new york 
chen gansner koutsofios 
data model supporting reachability analysis dead code detection 
proc 
th european software engineering conference th acm sigsoft symposium foundations software engineering sept 
choi scacchi 
extracting restructuring design large systems 
ieee software pages 
mitchell 
automatic clustering software systems genetic algorithm 
proceedings software technology engineering practice 
basili 
system structure analysis clustering data bindings 
ieee transactions software engineering aug 
korn chen koutsofios 
reverse engineering tracking java applets 
proc 
working conference reverse engineering 
koschke eisenbarth 
framework experimental evaluation clustering techniques 
proc 
intl 
workshop program comprehension 
lindig snelting 
assessing modular structure legacy code mathematical concept analysis 
proc 
international conference software engineering 
mitchell chen gansner 
bunch clustering tool recovery maintenance software system structures 
proceedings international conference software maintenance aug 
mitchell chen gansner :10.1.1.14.3376
automatic clustering produce high level system organizations source code 
proc 
th intl 
workshop program comprehension 
mitchell 
craft framework evaluating software clustering results absence benchmark decompositions 
proc 
working conference reverse engineering oct 
ller orgun tilley uhl 
reverse engineering approach subsystem structure identification 
journal software maintenance research practice 

intelligent tool re engineering software modularity 
proc 
th intl 
conf 
software engineering may 
holt 
orphan adoption problem architecture maintenance 
proc 
working conf 
reverse engineering 
holt 
mojo distance metric software clustering 
proc 
working conf 
reverse engineering 
holt 
stability software clustering algorithms 
proc 
intl 
workshop program comprehension 
van deursen kuipers 
identifying objects cluster concept analysis 
proc 
international conference software engineering aug 
