call name call value call need linear lambda calculus john martin odersky university karlsruhe david turner philip wadler university glasgow november girard described translations intuitionistic logic linear logic maps gammaffi maps gammaffi 
detail action translations terms show corresponds call name calculus second corresponds call value 
show target translation taken affine calculus controls contraction weakening allowed second translation corresponds call need calculus defined ariola felleisen odersky wadler 
different calling mechanisms explained terms logical translations bringing scope curry howard isomorphism 
plotkin call name call value lambda calculus plo demonstrated different calling mechanisms explained different translations continuation passing style 
time wrote call value translation widely appreciated call name translation known 
call value translation reinvented times rey call name translation credited plotkin private communication reynolds 
hesitate compare plotkin goal similar 
demonstrate different calling mechanisms explained different translations linear logic 
time writing call name translation widely appreciated callby value translation known 
translations original girard gir mapping gammaffi second mapping gammaffi 
translation frequently studied known correspond call byname second translation frequently studied correspondence call value completely obvious 
evidence note girard suggested gir second translation connected abramsky lazy lambda calculus abr abramsky calculus call name 
number different lambda calculi linear logic proposed including lafont laf holmstrom hol wadler wad wad wad wad abramsky abr mackie mac lincoln mitchell lm troelstra tro benton bierman hyland della rocca rr 
various embeddings appears technical report fakultat fur informatik universitat karlsruhe technical report fp department computing science university glasgow 
institut fur universitat karlsruhe postfach karlsruhe germany 
email odersky ira uka de 
department computing science university glasgow glasgow qq scotland 
mail wadler dcs glasgow ac uk 
intuitionistic logic linear logic studied including girard gir troelstra tro schellinx sch 
linear lambda calculus minor refinement previously wadler wad wad girard successor linear logic logic unity gir 
similar calculus devised plotkin plo 
corresponding girard translation define mapping call name calculus linear calculus show mapping sound name gamma gamma gamma gamma 
implies lin gamma gamma gamma 
complete converse holds 
corresponding girard second translation define second mapping call value calculus linear calculus show mapping sound complete val gamma gamma gamma 
lin gamma gamma gamma 
believe soundness completeness results new showing soundness straightforward completeness somewhat trickier establish 
original motivation studying questions came interest call name call value call need calculus proposed ariola felleisen odersky wadler af mow 
call name calculus entirely suitable reasoning functional programs lazy languages beta rule may copy argument function number times 
call need calculus uses different set reductions large guarantee observational equivalence call byname calculus 
call value call need guarantees argument function copied reduced value 
emphasis avoiding copying suggests resource conscious approach linear logic may relevant 
linear lambda calculus linear logic connective control duplication contraction discarding weakening lambda terms proofs 
call need wish avoid duplication discarding appropriate target translation affine calculus contraction controlled connective weakening allowed 
separately control contraction weakening studied jacobs jac 
derive call need calculus call value calculus steps 
step adds terms enforce sharing call value calculus 
resulting call calculus observationally equivalent call value translation easily extended sound complete 
add law allows value bound discarded computed value needed result 
resulting callby need calculus observationally equivalent call name opposed call value translation remains sound complete target taken affine calculus opposed linear calculus 
result call value call need calculi brought scope isomorphism translation relates reductions reductions linear calculus clear logical explanation 
additional contribution confirm linear calculus confluent 
linear calculi described relatively possess claims confluence notable exception della rocca rr 
remainder organised follows 
section introduces linear lambda calculus 
sections describe call name call value call call need calculi translations 
simplicity restrict attention function types 
section sketches may extended adding products adding constants primitive operations removing types remarks adding sums recursion problematic 
section concludes 
linear lambda calculus linear lambda calculus similar introduced previously wadler wad wad 
presentations logic key role played structural rules contraction provides syntactic domains types gammaffi terms typing judgements id dereliction gamma gamma contraction gamma gamma weakening gamma gamma gamma gamma gamma delta gamma delta gammaffi gamma gamma gammaffi gammaffi gamma gammaffi delta gamma delta reduction relation fi gammaffi fi 
gammaffi 
linear lambda calculus lin 
way duplicate assumption weakening provides way discard 
linear logic gir presence contraction weakening revealed formula presence course connective written 
logic unity gir takes step introducing sorts assumption contracted weakened write write presents details linear lambda calculus lin 
type corresponding formula logic base type course type linear function range base types range types 
term corresponding proof logic variable course course eliminator function abstraction function application range variables range terms 
write result substituting term free occurrence variable term contexts sets containing forms assumption variable distinct 
gamma delta range contexts 
gamma delta contexts distinct variables gamma delta denotes union 
gamma context form xn gamma context typing judgement gamma indicates context gamma term type rules concerned connective dereliction contraction weakening structural rules introduces eliminates connective 
assumption form introduced rule 
thing may done assumption duplicate contraction discard weakening convert assumption form dereliction 
furthermore rule context gamma contains assumptions form analogous id may derived combining id 
reduction relation defined union compatible closure rules 
assume free bound variables term distinct order avoid capture instance rules gammaffi variable appear free term general notation write 
reflexive transitive closure 
write reflexive symmetric transitive closure write syntactic identity 
necessary may write name calculus symbol disambiguate lin lin gamma gamma gamma 
may write name rule arrow indicate rule applied lin gamma gamma gamma gamma gamma 
fi gammaffi reduction rules logical basis 
ffl rule fi gammaffi arises gammaffi rule meets gammaffi rule rules annihilate 
ffl rule fi 
arises rule meets rule rules annihilate 
ffl rule gammaffi arises rule meets gammaffi rule commuting 
ffl rule 
arises rules meet commuting 
action reductions proof trees written full appendix evaluate term form sufficient reduce term form substitute may view term associated forcing evaluation term associated suspending evaluation 
important verify substitutions respect restrictions variables 
rule fi gammaffi variable appears linearly free variable appears linearly appear linearly 
substitution formed 
rule fi 
variable may appear number times free variable may copied arbitrarily times 
distinguishing sorts assumptions helpful constraint rule guarantees term may contain free variables appear number times 
substitution formed 
general terminology calculus satisfies subject reduction property gamma gamma calculus confluent 

exists term 

systems study possess subject reduction confluence properties 
proposition 
lin satisfies subject reduction 
proposition 
lin confluent 
proof 
subject reduction result inherent said full details appear appendix confluence proof similar proof confluence call need lambda calculus mow uses barendregt technique marked weighted redexes norm weighted terms bar 
show fi gammaffi fi gammaffi 
individually church rosser 
subsystem method exactly barendregt fi 
norm show strong normalization tedious straightforward case analysis show weak church rosser property imply fully system 
show multistep fi gammaffi fi gammaffi 
reductions commute subject reduction result full system 
conclude section words relation linear lambda calculus formulations 
fuller description relationship see previous wad wad 
formulation logic unity gir omitting extra complication polarities 
girard presentation rule appear derived combining elimination rule fourth rule right structural rules rule right 
chose formulation yields simpler fi 
rule 
system follows logic unity differs linear lambda calculi forms assumption enables subject reduction property established simple way 
systems listed lack property altogether syntactic domains types terms values typing judgements id contraction gamma gamma weakening gamma gamma gamma gamma gamma delta gamma delta reduction relation fi 
translation gammaffi xn call name lambda calculus name 
satisfy restricted version possess full subject reduction complex syntax 
systems treat weakening contraction logical rules associated term forms 
system treats weakening contraction structural rules clutter term forms 
result compact arguably suitable basis programming language 
call name reviews call name lambda calculus name presents translation linear lambda calculus 
types terms values standard type base type function type term value function application value variable function abstraction 
contexts sets assumptions form variable distinct 
typing judgement gamma indicates context gamma term type type rules standard 
chose formulation weakening contraction stress connection linear type system key difference contraction weakening unconstrained 
call name calculus reduction rule fi 
calculus course satisfies usual subject reduction confluence results 
proposition 
name satisfies subject reduction 
proposition 
name confluent 
translation takes types terms contexts gamma call name lambda calculus name types terms contexts gamma linear lambda calculus lin 
translation abstractions fresh variable appearing idea translation added left gammaffi right 
function argument surrounded thought suspending evaluation corresponding call name discipline 
proposition 
call name translation 
translation name lin preserves substitution types reductions 

ii gamma name gamma lin 
iii name gamma gamma gamma gamma 
lin gamma gamma gamma 
proof 
prove easy structural induction terms name prove ii easy structural induction type derivations name 
prove iii forward direction observe reduction fi 
translates lin gamma gamma gamma gamma gamma 
fi gammaffi lin gamma gamma gamma gamma 
fi 
backward direction consider grammar defines set lin terms reachable translations terms name lin gamma gamma gamma 
define erasure ffi takes set back name ffi ffi ffi ffi ffi ffi ffi ffi ffi show mapping ffi right inverse ffi name 
mapping ffi sends lin reduction sequences name reduction sequences lin gamma gamma gamma 
ffi name gamma gamma gamma gamma 
ffi lin gamma gamma gamma 
implies ffi name gamma gamma gamma gamma 
ffi implies name gamma gamma gamma gamma 
hard show lin gamma gamma gamma 
exists name term lin gamma gamma gamma 
name lin call value reviews call value lambda calculus val presents translation linear lambda calculus 
types terms values call name calculus 
reduction rule restriction fi 
rule call name case function argument value 
usual subject reduction confluence results apply 
proposition 
val satisfies subject reduction 
proposition 
val confluent 
translation takes types terms contexts gamma val types terms contexts gamma lin 
auxiliary mapping types values val syntactic domains name 
typing judgements name 
reduction relation fi 
translation gammaffi xn call value lambda calculus val 
types terms lin mapping omits outermost 
translation applications abstractions fresh variables appearing idea translation added left right gammaffi 
function arguments longer surrounded argument reduced encountered evaluation function body proceeds 
translation terms form function arguments forced reduce values 
proposition 
call value translation 
translation val lin preserves substitution values preserves types preserves reductions 

ii gamma val gamma lin gamma val gamma lin 
iii val gamma gamma gamma 
lin gamma gamma gamma 
proof 
prove ii similarly name 
prove iii forward direction observe fi 
translates lin gamma gamma gamma gamma 
fi 
lin gamma gamma gamma gamma gamma 
fi gammaffi lin gamma gamma gamma gamma 
fi 
backward implication follows results stated section implication holds enriched call value calculus reduction conservatively extends reduction val 
easily shown val implies lin converse true 
instance val terms equal val translations equal lin 
syntactic domains val plus terms delta delta delta typing judgements val plus gamma delta gamma delta reduction relation translation val plus call calculus 
call common define say add new term form call value lambda calculus 
lin gamma gamma gamma gamma 
fi 
lin gamma gamma gamma gamma gamma 
fi gammaffi reasonable define term equal 
refer new calculus call calculus 
ask set reductions required order guarantee gamma gamma gamma 
lin gamma gamma gamma 
answer somewhat larger set reductions required 
defines call lambda calculus presents translation linear lambda calculus 
terms previously plus values remain unchanged 
types type rules addition obvious rule 
reduction defined compatible closure rules stand introduce value commute associate 
subject reduction confluence hold 
proposition 
satisfies subject reduction 
proposition 
confluent 
proof 
subject reduction verified straightforwardly 
confluence easily shown modifying previous results call need mow 
translation extended adding clause 
proposition 
call translation 
translation lin preserves substitution values preserves types preserves reductions 

ii gamma gamma lin gamma gamma lin iii gamma gamma gamma 
lin gamma gamma gamma 
proof 
proof ii similar val 
prove iii forward direction consider possible reduction 
reduction rule translates lin gamma gamma gamma gamma 
fi 
lin gamma gamma gamma gamma gamma 
fi gammaffi reduction rule translates lin gamma gamma gamma gamma 
fi 
reduction rule translates lin gamma gamma gamma 
lin gamma gamma gamma gamma 
gammaffi reduction rule translates 
lin 
proof backward direction similar corresponding proof call name 
shows set lin terms reachable translations terms produced grammar term image value image prefix erasure takes set back ranges contexts language dm straightforward show right inverse furthermore analysis lin reductions shows sends lin reduction sequences reduction sequences 
result follows call name case 
relationship val 
clearly fi 
reduction val simulated pair reductions 
reduction extends val reduction 
furthermore show extension conservative proposition 
val val gamma gamma gamma 
gamma gamma gamma 
proof 
direction val gamma gamma gamma 
gamma gamma gamma 
trivial 
reverse direction relies intuitive idea reduction sequence results val term structures manipulated contractions contracted away 
contrast note hold fi details proof appendix syntactic domains lin 
typing judgements lin changing weakening follows weakening gamma gamma reduction relation lin plus weakening free affine lambda calculus aff 
syntactic domains 
typing judgements 
reduction relation plus free translation aff lin 
call need lambda calculus need 
call need call name translation function argument surrounded freely duplicated discarded 
call value call translations values surrounded non values duplicated discarded 
call need calculus differs term may discarded needed term duplicated reduced value 
wish shift calculus discarding weakening allowed duplication contraction remains strict control connective 
presents details resulting affine lambda calculus aff 
types terms contexts linear lambda calculus lin 
type rules identical lin exception rule weakening lin allows weakening assumptions form replaced rule allows weakening assumptions form strictly stronger previous rule previous rule derived combining weakening dereliction 
reduction defined compatible closure rules fi gammaffi fi gammaffi 
new rule weakening 
rule logical basis 
ffl rule weakening arises rule meets weakening rule commuting 
required effect rule weakening allow term discarded needed reducing form logical origin rules ensures subject reduction property 
furthermore confluence holds 
proposition 
aff satisfies subject reduction 
proposition 
aff confluent 
proof 
easily demonstrated modifying equivalent proofs lin 
defines call need calculus need derived slight modification call calculus 
change addition new reduction rule thought surface manifestation underlying reduction weakening 
name stands garbage collection 
proposition 
need satisfies subject reduction 
proposition 
need confluent 
proof 
subject reduction easy requiring just case 
previously published proof confluence call need mow 
design viewed call need calculus need affine calculus aff transformation result holds 
proposition 
call translation 
translation need aff preserves substitution values preserves types preserves reductions 

ii gamma need gamma aff gamma need gamma aff 
iii need gamma gamma gamma gamma 
aff gamma gamma gamma 
proof 
proof noting reduction need translates weakening aff 
conclude section results observational behavior calculi studied 
general terminology assume calculi say extended constants primitives outlined section 
assume calculus bigger calculus term term necessarily conversely 
assume systems constants primitives delta rules defining value 
say calculus observationally equivalent calculus term calculus constant gamma gamma 
gamma gamma 
previous section result conservative extension val corollary 
proposition 
observationally equivalent val 
addition single law changes situation significantly 
proposition 
need observationally equivalent name 
proof 
showed previous mow term value name name gamma gamma gamma gamma 
exist terms value need gamma gamma gamma gamma 
delta delta delta proof modified show result repeatedly applying get name gamma gamma gamma gamma 
implies need gamma gamma gamma gamma 
reverse implication easy 
extensions sketch results extend products constants primitives 
explain extension sums recursion difficult 
note results extend easily untyped language 
products extensions products constants primitives straightforward shown figures 
discuss products section constants primitives 
linear calculus may extended additive product linear logic shown 
call name translation ordinary products theta additive product syntactic domains types delta delta delta terms delta delta delta fst snd delta delta delta typing judgements gamma gamma gamma gamma gamma fst gamma gamma snd const type lin prim gamma type lin delta delta delta gamma type lin gamma gamma delta delta delta type lin reduction relation fi fst fi snd fst fst snd snd ffi delta delta delta apply lin extending linear lambda calculus lin 
entirely straightforward follows girard shown 
call value translation fairly straightforward shown 
call value translation involves points note 
maintain uniform principle values correspond term forms 
call value components pair restricted values 
pair components values 
general construct may added call value language defining abbreviation restricting pairing values reduction rules translation easier define corresponds restriction pairs arises naturally call need calculi lau 
second call value translation uses additive product linear logic 
contrast girard version translation gir defines theta omega uses multiplicative tensor product omega linear logic 
products related isomorphism omega 
translation isomorphic girard omega omega theta theta results carry extended calculi 
sums extending call name translation sums straightforward 
type level girard translation defined phi phi additive direct sum linear logic term translation follows immediately 
extending call value translation sums problematic 
type level girard expect definition satisfying isomorphism phi syntactic domains types delta delta delta theta terms delta delta delta fst snd delta delta delta mk values delta delta delta typing judgements theta gamma gamma gamma theta theta gamma theta gamma fst theta gamma theta gamma snd const type name prim gamma type name delta delta delta gamma type name gamma gamma delta delta delta type name reduction relation fi theta fst fi theta snd ffi delta delta delta apply name translation theta fst fst snd snd type lin type name type lin type name apply lin delta delta delta apply name extending call name lambda calculus name 
products desirable re express left hand side form unfortunately clear choose phi result treatment sums clear 
constants primitives lambda calculi discussed may straightforwardly extended addition constants primitive applications delta delta delta arity shown figures 
specify total function type giving type constant types arguments results primitive partial function apply giving closed term defined application primitive constants 
plotkin plo explains convenient apply yield closed terms constants 
translation valid interpretation primitives linear calculus related interpretations call name call value calculi shown figures 
results carry extended calculi 
extension constants primitives particularly useful supports simple version operational equivalence theorems section 
desire avoid constants led somewhat complex operational equivalence theorem previous 
syntactic domains types delta delta delta theta terms delta delta delta fst snd delta delta delta values delta delta delta typing judgements theta gamma gamma gamma theta theta gamma theta gamma fst theta gamma theta gamma snd const type val prim gamma type val delta delta delta gamma type val gamma gamma delta delta delta type val reduction relation fi theta fst fi theta snd ffi delta delta delta apply val translation theta fst fst snd snd delta delta delta delta delta delta delta delta delta type lin type name type lin type name apply lin apply name extending call value lambda calculus val 
recursion adding recursion translation difficult 
problems 
clear typing recursion operator linear calculus 
call name translation suggests corresponding typing rec gamma gamma name take rec gamma gamma lin 
call value translation suggests corresponding typing rec gamma gamma val take rec gamma gamma lin 
clear reconcile choices 
second adding recursion call need poses additional difficulties noted previous 
order maintain sharing typical call need implementations recursion appears necessary shift single nonrecursive bindings multiple recursive bindings 
doesn appear pose fundamental difficulties translation expected increase size calculus awkward 
untyped languages confluence translation results depend types carry directly untyped version calculi 
type rules linear lambda calculus enforce constraint variables bound linear assumptions appear linearly free variables term bound assumptions 
easy enforce constraints recourse types instance formedness judgements 
derived typing judgements simply erasing types 
shown call name call value call call need explained translations linear affine lambda calculi 
transformations provide logical explanation call value call need style curry howard isomorphism 
illuminated substantial issues relationship various calculi terms translations linear calculus interesting questions remain 
conclude summary mentioning issues 
standard reductions previous call need slightly different version rule arbitrary context 
fi 
rule linear affine calculi changed similar way translation preserved 
systems reduction name val need possess notions standard reduction normal order call need applicative order call value complex order call need described previous 
case value standard reductions correspond closely operational semantics language question 
reason adopting variant rule enables close correspondence case call need 
conjecture standard reduction order linear affine calculi lin aff 
considered question translations preserve standard reductions bear interesting relation 
eta rules common include rule call name calculus rule call value calculus 
free free similarly add gammaffi rules linear lambda calculus 
gammaffi free syntactic domains types terms values non values typing judgements 
reduction relation fi free id comp moggi computational lambda calculus comp 
second similar right unit law moggi computation lambda calculus mog mog 
just fi rule simplifies logical followed corresponding logical elimination rules simplifies logical elimination followed corresponding logical 
expect translation name lin preserve rule translation val lin preserve rule translation need aff preserve rule 
case suggests reduction rules added lin aff 
various rules possible far rules logical resonance considered 
equality moggi computational lambda calculus addition reduction usually considers theory equality 
confluent notion reduction defines reflexive symmetric transitive closure 
follows church rosser theorem exists term 

translation name lin relatively easy show name gamma gamma gamma gamma 
lin gamma gamma gamma 
name lin translation lin fact gamma gamma gamma 
lin gamma gamma gamma 
guarantees implies lin reverse implication hold may lin gamma gamma gamma 
lin gamma gamma gamma 
having form 
instance easy see xn lin xn 
reasonable ask laws added yield theory lin candidate theory moggi computational lambda calculus comp mog mog shown 
version shown untyped reduction calculus appears technical report mog lics mog 
grammar theory values non values distinguished 
system satisfies subject reduction moggi shows confluent 
system designed apart rule fi strongly normalising types 
hard show equalities properly contained equalities comp implies comp conversely 
furthermore reductions reductions comp incomparable gamma gamma gamma 
imply comp gamma gamma gamma gamma 
converse true 
interesting open question extension equalities comp 
interesting question know extension lin encoding extended extended lin sound complete 
question brings full circle 
plotkin showed continuation passing style cps translation val sound complete plo 
moggi designed comp sound complete monad translation generalises cps mog sabry felleisen verified cps translation comp val sound complete sf answering question implicitly raised plotkin 
seen questions raised complete extensions similar vein 
clear translations linear lambda calculus described value translations continuation passing style described plotkin 
answers claim asking right sort questions 
abr abramsky lazy lambda calculus 
turner editor research topics functional programming addison wesley 
abr abramsky computational interpretations linear logic 
theoretical computer science 
af ariola felleisen call need lambda calculus 
technical report cis tr department computer science university oregon october 
ariola felleisen odersky wadler 
call need lambda calculus 
symposium principles programming languages acm press san francisco california january 
bar barendregt 
lambda calculus syntax semantics volume studies logic foundations computer science 
north holland publishing 
bh barendregt 
types lambda calculus programming languages proc 
esop european symposium programming 
springer verlag lecture notes computer science 
benton bierman de paiva hyland type assignment intuitionistic linear logic 
draft august 
gir 
girard linear logic 
theoretical computer science 
gir 
girard message linear electronic mailing list september 
gir 
girard unity logic 
annals pure applied logic 
hol holmstrom linear functional language 
draft chalmers university technology 
jac jacobs semantics weakening contraction 
manuscript cambridge university may 
available cwi nl 
laf lafont linear machine 
theoretical computer science 
lau launchbury natural semantics lazy evaluation symposium principles programming languages acm press charleston south carolina january 
lm lincoln mitchell operational aspects linear lambda calculus 
th symposium logic computer science ieee press santa cruz california june 
mac mackie functional programming language linear logic 
master thesis imperial college london 
mog moggi computational lambda calculus monads 
technical report ecs lfcs laboratory foundations computer science university edinburgh october 
mog moggi computational lambda calculus monads 
th symposium logic computer science ieee press asilomar california june 
mow odersky wadler 
call need lambda calculus 
technical report fakultat fur informatik universitat karlsruhe october 
appears technical report department computing science university glasgow 
plo plotkin call name call value lambda calculus 
theoretical computer science 
plo plotkin private communication 
mfps 
rey reynolds discoveries continuations 
lisp symbolic computation november 
rr della rocca lambda calculus intuitionistic linear logic 
manuscript july 
available university pisa rover di unipi 
sch schellinx noble art linear decorating 
ph dissertation institute logic language computation university amsterdam 
sf sabry felleisen reasoning programs continuation passing style 
lisp symbolic computation november 
tro troelstra lectures linear logic 
csli lecture notes 
wad wadler linear types change world 
broy jones editors programming concepts methods sea israel north holland april 
wad wadler linear logic 
conference partial evaluation semantics program manipulation pepm new haven connecticut acm press june 
wad wadler syntax linear logic 
ninth international conference mathematical foundations programming semantics new orleans louisiana april 
springer verlag lncs 
wad wadler taste linear logic 
mathematical foundations computer science poland august 
springer verlag lncs 
subject reduction linear calculus appendix details proof subject reduction theorem linear lin 
rule fi gammaffi arises gammaffi rule meets gammaffi rule 
delta delta delta gamma delta delta delta gammaffi gamma gammaffi delta delta delta delta gamma delta delta delta delta delta delta delta delta gamma delta rule fi 
arises rule meets rule 
delta delta delta gamma gamma id delta delta delta id delta delta delta delta delta gamma delta delta delta delta gamma delta delta delta delta delta delta gamma delta delta delta gamma gamma delta gamma delta rule requires additional explanation 
double bars stand number applications contraction weakening dereliction 
subscripts introduced handle renaming required contraction 
assume delta occurrences term occurrences replaced respectively distinct fresh variables 
assume gamma range oe substitution variables gamma fresh distinct variables take oe gamma gamma oe 
rule 
arises rules meet commuting 
delta delta delta gamma delta delta delta delta gamma delta delta delta delta theta gamma delta theta delta delta delta gamma delta delta delta delta delta delta delta theta delta theta gamma delta theta rule gammaffi arises rule meets gammaffi rule commuting 
delta delta delta gamma delta delta delta delta gammaffi gamma delta gammaffi delta delta delta theta gammaffi gamma delta theta delta delta delta gamma delta delta delta delta gammaffi delta delta delta theta gammaffi delta theta gamma delta theta rule affine lambda calculus arises commuting weakening 
delta delta delta gamma delta delta delta delta weakening delta gamma delta delta delta delta delta weakening gamma delta conservative extension val definition 
take operator map terms val terms reverting applications abstractions viz proposition 
gamma gamma gamma 
rule gamma gamma gamma 

proof 
trivial replacing value prevent contractions note result hold substitution arbitrary terms 
proposition 

gamma gamma gamma gamma gamma 
val exists value gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 

gamma gamma gamma gamma gamma 
exists value gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
proof 
part holds binding removed val term 
oe name reduction oe gamma gamma gamma gamma gamma 
clearly oe oe oe oe oe gamma gamma gamma gamma gamma 
oe gamma gamma gamma gamma gamma 
oe gamma gamma gamma gamma gamma 
oe interleaving independant reductions oe gamma gamma gamma gamma gamma 
oe gamma gamma gamma gamma gamma 
preceeding proposition oe gives gamma gamma gamma gamma gamma 
result follows 
part similar top level construct contracted away produce result 
proposition 
hm gamma gamma gamma gamma gamma 
val 
gamma gamma gamma gamma gamma 
proof 
hm know gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
preceeding proposition result follows 
hm gamma gamma gamma 
gamma gamma gamma gamma gamma 
fv result follows gamma gamma gamma gamma gamma 

gamma gamma gamma 
gamma gamma gamma gamma gamma 
proposition 
gamma gamma gamma 
gamma gamma gamma gamma gamma 
val 
gamma gamma gamma gamma gamma 
proof 
unfortunately preceeding result generalize easily 
problem arises internal redexes redex duplicated substitutions reduces produce redexes 
solution extended reduction system marked bindings 
markings reminiscent barendregt marked fi redexes bar barendregt marks terms redexes mark bindings val redexes 
rely series basic lemmas result rely rely keeping track marked bindings 

lemma 
unmarked 
subterms contexts gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
identities redex proof 
trivial induction contexts 
lemma means may postpone contractions just contraction removes new binding introducing removed bindings 
may contractions number contractions remain constant 

lemma lets extend usual standardization properties call value reduction 
need spell strategy need property 
lemma 
standard strategy gamma 
selecting redexes property reduces abstraction gamma gamma gamma gamma gamma 
gamma 
gamma gamma gamma gamma gamma 
proof 
write gamma gamma gamma gamma gamma 
iff gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
contractum contractum 
lemma reduction sequence written gamma gamma gamma gamma gamma 
contractions followed gamma gamma gamma 
contractions lemma follows result val sequences identifying gamma gamma gamma gamma gamma 
steps fi steps terms equivalent modulo reduction 

introduce terms including marked bindings lemma 
unmarked 
gamma gamma gamma 
gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 

gamma gamma gamma gamma gamma 
cn gamma gamma gamma gamma 
cn gamma gamma gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
delta delta delta gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
delta delta delta gamma gamma gamma gamma gamma 

gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
delta delta delta gamma gamma gamma gamma gamma 
proof 
follows immediately preceeding result 
prove proposition observe elementary analysis term structures resolve cases described lemma result follows immediately 
proposition 
gamma gamma gamma 
val 
gamma gamma gamma gamma gamma 
proof 
follows immediately result induction length length reduction sequence 
proposition 
val val omega omega omega omega omega oe val 
gamma gamma gamma 
val gamma gamma gamma 
val omega omega omega omega omega oe val 

val 
gamma gamma gamma 
val ae ae ae ae ae ae ae 
val 
proof 
part simple structural induction part trivial 
proposition 
gamma gamma gamma gamma gamma 
val val gamma gamma gamma 
proof 
follows previous result induction length reduction sequence 
proposition 
val gamma gamma gamma 
val gamma gamma gamma 
proof 
follows preceeding proposition equation val gamma gamma gamma 
val gamma gamma gamma gamma gamma 
val val gamma gamma gamma 
val gamma gamma gamma 

