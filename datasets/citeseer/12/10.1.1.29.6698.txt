online algorithm optimize file layout dynamic environment ghandeharizadeh doug roger zimmermann 
describe algorithm manage storage layout files cached mechanical devices magnetic disk drives 
algorithms respond online manner maintain dynamically changing working set disk resident files providing guaranteed degree contiguity layout file device fewer dlg ne breaks disk resident file blocks 
keywords data processing file systems file geometry caching continuous media 
trend area databases increase number repositories primary function disseminate information 
systems expected play major role scientific applications library health care general data warehousing entertainment industry deployment knowledge applications 
repositories typically provide line access vast amount data 
large size databases led hierarchical storage structures consisting combination fast slow devices database resides permanently slowest devices system controls placement data strata hierarchy hide high latency faster devices magnetic disks disk arrays 
data cached disks swapped expected access patterns objective minimizing frequency access slower devices 
hierarchical storage structure may consist variety devices magnetic optical disks tape boxes 
devices share properties point view device driver interface data stored medium linear manner 
read head device may moved physical location medium operation termed seek 
seeks generally involve mechanical operations time required seek substantial 
seek complete device read sequentially medium generally sustain relatively high transfer rate 
sense seek operations wasteful minimized order maximize net transfer rate 
study describes algorithm manage storage placement objects files devices 
goal maximize contiguity layout objects stored device minimize number seeks incurred retrieving object sequential manner termed intra file seeks 
simplify discussion shall assume objects cached magnetic disks 
date october 
optimizing file layout 
motivation 
motivated design continuous media server isochronous media bu digital audio video 
focus design storage manager disk drives 
objects system read copy resides permanently slowest device hierarchy tape box 
storage manager file system components cooperate place data devices lay data devices time required retrieval minimal predictable 
consequence object system retrieved units particular size size determined bit rate length scheduling period degree striping 
study focuses layout units single device 
multimedia systems sort sketched gc sequential contiguous layout various forms constrained allocation minimize eliminate occurrence seeks optimize performance disk subsystem 
studies focused largely case objects bit rate unit retrieval uniform objects 
situation complex case collection objects different bandwidth requirements 
motivates question extent maximize contiguity heterogeneous collection objects files minimize occurrence seeks 
dynamic environment disk resident population changes time expect tradeoff degree contiguity achieved amount goes reorganizing disk configuration 
problem addressed 
focus space management issue assume external module determines set objects cached disk 
module issues potentially infinite sequence requests materialize free objects device 
assume request materialize object blocks issued free blocks disk 
external module selects victims deleted accommodate objects materialized issued necessary requests appropriate order 
module duty disk manager maintain requested working set disk 
assume disk viewed linear sequence physical blocks 
performance judged criteria number breaks layout disk resident object worst case additional required maintain disk organization 
algorithm developed requires copying additional blocks materializing block object disk guarantees laid dlg ne breaks 
algorithms tradeoff number additional maintenance operations incurred complexity disk bookkeeping structure 
note context motivates objects may entire multimedia objects video audio clips just parts objects retrieved scheduling period 
case bound number breaks model disk drive omits important characteristics device 
model consistent approaches taken variety implementations linear sequence logical addresses disk blocks gc took account seeks may result disk drive remapping defective sectors 
optimizing file layout layout corresponds total number seeks incurred retrieval entire object case number seeks may incurred period 

model 
assume storage medium partitioned physical blocks fixed size block minimum unit space allocation physical device 
blocks assumed size 
bc gamma denote ordered sequence physical blocks disk 
assume fixed collection objects files 
object composed ordered sequence ho pages size denoted joj 
physical block disk hold exactly page data 
object disk resident pages reside disk 
assignment pages blocks partial function assigns pages physical block 
disk block free assign page disk resident object 
set disk resident objects 
assume object disk resident pages residing disk 
algorithm take advantage partially resident objects 
disk resident object page break predecessor gamma assigned block immediately preceding 
continuous retrieval pages sequence device forced perform seek block reading gamma 
internal fragmentation layout number breaks file layout 

basic operations costs 
materialization object disk implies set resident objects layout change 
simplify analysis assume cost writing page disk materialization algorithm incur cost 
focus quantities algorithm intends minimize internal fragmentation object number pages copied physical block 
assumed various data structures record state system directories free list maintained main memory 

basic algorithm manage disk space impose ordered ary tree structure sequence physical blocks leaves correspond blocks disk order corresponds blocks physical sequence 
simplify description algorithm take 
generalization case straightforward 
tree structure imposed physical blocks built manner 
denote contiguous sequence blocks integer blg cc bc interval gamma th section height sections height consisting single blocks leaves 
section height contains exactly sections height gamma children 
sections internal nodes blocks disk organized ordered forest complete binary trees 
see illustration 
contiguous sections siblings tree called buddies kno contiguous section height decomposed optimizing file layout height illustration proposed organization sections block disk 
pair buddy sections height gamma 
conversely pair buddies height gamma combined form single contiguous section height section height buddy call unpaired sections 
root complete binary tree forest 
example disk capacity blocks organize blocks disk complete binary tree height 
remaining blocks organized trees height 
non paired sections corresponding root complete binary trees heights 
say section occupied object subsequence pages laid contiguously blocks section 
sections mean maximal sections occupied maximal height containment 

free list 
section free page free 
layout free list list free sections contained free sections 
current free list recorded data structure maintained sequence lists possible section height blg cc 
address maximal section height enqueued list handles sections height 

invariant properties 
denote hth bit binary expansion blg cc simplest version algorithm managing data disk maintain properties 

object occupies section pages section stored contiguously blocks section 

disk resident object joj 
exactly maximal sections height blg cc 

suppose free blocks disk 
free list contains exactly maximal free sections height blg cc 
example suppose disk capacity blocks 
sections range height 
unpaired sections complete binary tree height height 
object pages resident optimizing file layout blocks height free list free blocks simple example showing possible layout objects block disk 
sections free list 
properties require pages occupy sections height blocks section height blocks height block 
breaks layout similarly free list contains free blocks occupy single section height 
record state system directory suffices record set disk resident objects maximal sections sections free list 
maximal section specified starting address height disposition resident object blocks recorded lg space sections free list recorded lg space 
record entire system requires space lg joj jrj lg denotes set objects currently resident 
sample layout free list shown 

materialization 
materialization object handled algorithm 
assume request materialize object pages 
blg cc partition blocks intervals intervals size height blg cc allocate section height follows 

section height free list allocate section 

recursively allocate section height 
partition sections height enqueue free list return 
sections allocated interval copied contiguously section appropriate height 
lemma 
allocation preserves properties 
requires lg processing time writes exactly disk blocks 
proof 
free blocks maximal free sections height free list 
algorithm simply mimics algorithm computing difference binary numerals 
properties follow immediately observation 
property follows induction number allocations 
optimizing file layout blocks height free list blocks height free list blocks height free list blocks height free list deletion object layout 

deletion 
steps remove object disk resident set reclaim space 
sections enqueued appropriate free lists 
height blg cc space compacted 
memory new layout determined algorithm 
sections list steps repeated 
choose sections choose buddy 
loss generality assume buddy 
remove free list 
record page stored block copied 
add free list 

buddy free list height remove list merge place resulting section height free list height 
new layout determined realized disk copying pages directly final locations computed algorithm 
course algorithm determined page copied multiple times block copying phase merely moves directly final location 
example suppose object deleted configuration 
leaves configuration sections height blocks free list 
combined single section height 
arbitrarily choose free buddy block 
data copied combined single section height 
resulting configuration sections height recorded updated free list shown 
compact data copied buddy section see 
sections combined single section height 
final configuration shown 
lemma 
deletion algorithm preserves properties 
optimizing file layout proof follows observation freeing space allocated object formally equivalent adding binary numerals induction number deletions 

lazy variant algorithm implementation basic operations yields high cost deletion objects amortized sense 
worst case deletion object cause cascade involving sections larger height 
example case sublists heights exactly section freeing single block require copying nearly additional blocks 
copying costs associated larger sections larger cost deletion bounded immediately size object deleted 
costs bounded simple variant algorithm compaction deallocation procedure lazy 
words new layout data disk determined deallocation object data immediately reorganized 
record kept changes needed realized new organization 
consequence deletion initiate disk activity argued additional overhead incurred materializing object proportional size 
realize section free list designated dirty clean physical block section contains valid data page disk resident object stored block section clean dirty 
dirty section carries list target blocks sections receive valid data blocks subsections contains 
materialization deletion procedures modified follows 

deletion 
sections merged deallocation procedure respective lists physical movement data new blocks postponed 
invariant properties may fact violated disk may unoccupied section height property maintained memory resident free list 
deletion procedure affects data structures copying disk resident data 

materialization 
object materialized algorithm section minor modification 
object written disk valid data occupying sections allocated object moved target locations recorded previously 
theorem 
modified storage management algorithm dynamically maintain disk resident set objects 
object blocks algorithm guarantees disk resident dlg ne breaks layout materialization disk requires fewer additional disk reads writes algorithm deletion disk requires additional disk activity 
proof 
guarantee follows fact invariant properties continue hold memory disk 
object dlg sections 
second point follows observation number blocks moved write object strictly number optimizing file layout blocks contained 
guarantee immediate description deallocation procedure 
note cost incurred adopting lazy behavior larger size memory resident free list 

discussion algorithms suggested related buddy system efficient main memory storage allocation proposed kno discussed ld 
buddy systems required allocate contiguous chunk storage object materialized 
case memory allocation results wasted space fragmentation requires re organization process garbage collector 
gr structure algorithms resembles memory algorithms certain dynamic data structures binomial heap 
clr proposed disk organization seen natural hierarchical extension level partitioning disk blocks fragments unix fast file system 
algorithms implemented everest storage manager component experimental continuous media server currently development 
empirical study everest currently progress 
believe lazy algorithm proposed provides optimal organization bounding number breaks layout object caching working set objects linear storage medium minimizing overhead required maintain organization working set changes maximizing utilization medium amount data cached 
precisely conjecture assumptions storage management scheme guarantees layout disk resident object fewer dlg gamma breaks requires joj gamma additional disk copies materializing object fully utilize space device sequence requests 
members database systems laboratory university southern california comments suggestions various stages development anonymous referees numerous suggestions improving focus presentation jeffrey ullman suggesting conjecture described 
research supported part national science foundation iri iri nyi award cda ccr ccr gift hewlett packard 
anderson file system continuous media 
acm trans 
computer systems 
november 
pp 

bu 
multimedia systems addison wesley 
clr cormen leiserson rivest 
algorithms 
mit press 
gemmell vin kandlur rangan rowe 
multimedia storage servers tutorial 
ieee computer 
gc gemmell christodoulakis 
principles delay sensitive multimedia data storage retrieval 
acm trans 
information systems 
optimizing file layout ghandeharizadeh zimmermann 
management space hierarchical storage systems technical report usc cs university southern california department computer science november 
gr gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
kno knowlton 
fast storage allocator 
communications acm 
ld lewis 
data structures algorithms 
harper collins 
mckusick joy leffler fabry 
fast file system unix 
acm transactions computer systems august 
optimizing file layout figures appearing text height optimizing file layout blocks height free list free blocks optimizing file layout blocks height free list optimizing file layout blocks height free list optimizing file layout blocks height free list optimizing file layout blocks height free list optimizing file layout department computer science university southern california los angeles ca 
