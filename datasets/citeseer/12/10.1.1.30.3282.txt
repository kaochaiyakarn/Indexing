technical report ordered binary decision diagrams knowledge bases takashi ibaraki april department applied mathematics physics kyoto university kyoto japan 
propose ordered binary decision diagrams obdds means realizing knowledge bases 
show obdd representation ecient suitable cases compared traditional cnf model representations view point space requirement 
consider recognition problems obdds polynomial time algorithms testing obdd represents unate boolean function represents horn function 
graduate school information science nara institute science technology nara japan 
mail aist nara ac jp department applied mathematics physics graduate school informatics kyoto university kyoto japan 
mail ibaraki kyoto ac jp logical formulae traditional means representing knowledge ai 
known deduction set propositional clauses np complete abduction np complete 
alternative way representing knowledge subset models called characteristic models proposed see 
deduction knowledge base model approach performed linear time abduction performed polynomial time 
propose method knowledge representation ordered binary decision diagrams obdds :10.1.1.1.5124
obdd directed acyclic graph representing boolean function considered variant decision trees 
restricting order variable appearances sharing isomorphic subgraphs obdds useful properties variable ordering obdd reduced canonical form boolean function 
boolean functions appearing practice compactly represented 
ecient algorithms boolean operations obdds 
result properties obdds widely various applications especially computer aided design veri cation digital systems see 
manipulation knowledge bases obdds deduction abduction rst discussed madre coudert 
rst compare representations formula model obdd basis sizes 
particular show cases obdds require exponentially smaller space representations cases requires exponentially smaller space 
words representations mutually incomparable respect space requirement 
known obdds ecient knowledge base operations deduction abduction 
investigate fundamental recognition problems obdds testing obdd represents unate boolean function testing represents horn function 
encounter recognition problems knowledgebase representing real phenomenon required unate horn hypothesis posed phenomenon investigation mechanism causing phenomenon 
example knowledge base represents data set test results various physical measurements body temperature blood pressure number pulses case diagnosis certain disease monotonically depending test result allow changing polarities variables necessary 
arti cial intelligence common consider horn knowledge bases processed eciently respects example deduction set horn clauses done linear time 
show recognition problems obdds solved polynomial time unate horn cases 
rest organized follows 
section gives fundamental de nitions concepts 
compare representations section consider problems recognizing unate horn obdds sections respectively 
preliminaries notations fundamental concepts consider boolean function 
assignment vector th coordinate denoted model satisfying assignment theory representing set models denote usual bitwise componentwise ordering assignments 

subset 
ng denotes characteristic vector th coordinate equals 
variables corresponds th coordinate assignments evaluates 
negation variable denoted variables negations called literals 
clause disjunction literals conjunction clauses called conjunctive normal form cnf 
say represented cnf holds boolean function represented cnf may unique 
distinction function theory cnf represents confusion arises 
de ne restriction replacing variable constant denote 


holds 
restriction may applied variables 
de ne resp resp 
lemma relation properties holds gj holds 
holds hold 
assignment de ne bit bit holds bit denotes bitwise componentwise exclusive operation 
boolean function unate polarity holds assignments theory unate represents unate function 
clause unate polarity positive literals negative literals clause 
cnf unate polarity contains unate clauses polarity known theory unate represented unate cnf 
unate function positive resp negative polarity 
resp 

theory horn closed operation bit bit bitwise models example bit 
closure theory respect bit denoted cl bit de ned smallest set contains closed bit operation bit set operation bit fa bit holds denotes bit bit convenience 
note functions bit di erent 
boolean function horn horn equivalently bit holds sets models 
clause horn number positive literals cnf horn contains horn clauses 
known theory horn represented horn cnf 
de nition negative function horn conversely 
horn theory model called characteristic produced bitwise models cl bit fag 
set characteristic models horn theory call characteristic set denoted char 
note horn theory unique characteristic set char satis es cl bit char 
set minimal models respect de ned min fa exists satisfying ag denotes hold 
lemma gives upper bound size cardinality characteristic set 
lemma horn function variables 
characteristic set size bn jmin 
ng characteristic vector set 
ng 
ng 
fig 
ordered binary decision diagrams ordered binary decision diagram obdd directed acyclic graph represents boolean function 
sink nodes called node node respectively called constant nodes 
nodes called variable nodes variable node labeled variables 
var denote label node variable node exactly outgoing edges called edge edge respectively 
variable nodes unique source node called root node 
fx 
denote set variables 
variable ordering total ordering 
associated obdd permutation 
ng 
ng 
level node denoted level de ned label node label level de ned 
root node level label nodes level label 
level constant nodes de ned 
path root node constant node obdd variable appears decreasing order levels 
node obdd represents boolean function de ned subgraph consisting edges nodes reachable node constant node equals label 
node variable node de ned var succ var succ shannon expansion succ succ respectively denote nodes pointed edge edge node function represented obdd represented root node 
illustrates obdds representing de nition level may di erent common 
edge edge constant node variable node level level level level obdds representing variable ordering 
assignment value determined corresponding path root node constant node manner variable node outgoing edges selected assignment var variable var 
value function label nal constant node 
nodes obdd represent function levels called equivalent 
node edge edge point node called redundant 
obdd called dense variable node satisfy level succ level succ level paths root node constant nodes visit nodes 
dense obdd equivalent nodes quasi reduced 
quasi reduced obdd redundant nodes reduced 
obdds fig 
dense reduced respectively 
assume obdds reduced stated 
size obdd number nodes obdd 
function variable ordering reduced obdd unique minimum size obdds variable ordering 
minimum sizes obdds representing boolean function depend variable orderings 
obdd represents obdds obtained jf log jf time jf denotes size obdd size increase restriction 
obdds representing applying fundamental logic operators performed jf 
jgj time property checked jf 
jgj time 
partition pair sets satisfying fx 

called left partition called right partition 
denote assignment variables denote assignment variables 
denotes complete assignment obtained combining subset positive number satisfying 
partition called balanced satis es jx jc jx lj jx je 
partition set assignments 
called fooling set satis es 



lemma tells size fooling set gives lower bound size obdd represents lemma boolean function variables subset variables positive number satisfying 
fooling set size balanced partition size obdd representing variable ordering 
approaches knowledge base representation section compare knowledge base representations cnf model obdd 
known cnf model representations play orthogonal roles respect space requirement 
allows exponentially smaller sizes depending functions 
show obdd representation incomparable sense 
start relations obdd cnf representations 
lemma exists negative theory variables obdd cnf require size characteristic set requires size 
proof consider function 
size cnf obviously 
characteristic set fa exactly 
mg size 
obdd representing illustrated fig 
variable ordering 

size obdd 
edge edge obdd representing 
lemma exists negative theory variables obdd requires size characteristic set requires size cnf requires size 
proof consider function sb 
sb 
fx 
mg 
dual smallest cnf representation clauses 
characteristic set mgs ig jg 
mg 
mgg size 
obdd representing illustrated fig 
variable ordering 

note dual obdd obtained negating input variables exchanging roles edges edges negating output exchanging roles node node obdd fig 

size obdd 
combining lemmas show theory obdd exponentially smaller characteristic set cnf representations 
theorem exists negative theory variables obdd requires size characteristic set cnf require sizes 
edge edge obdd representing 
proof consider function 
shown lemma characteristic set requires size represent rst half 
lemma cnf representation requires size represent second half 
note rst second halves independent variables rst half appear second half vice versa 
lower bounds characteristic set cnf valid obdd represents illustrated fig 
variable ordering 

size obdd 
turn opposite direction cnf characteristic set exponentially smaller size obdd 
lemma size characteristic set horn function variables xm proof consider set de ned lemma convenience set edge edge obdd representing corresponding variable holds characteristic vector jmin 
similarly jmin holds 


implied 
enumerate minimal models de nition obtain ipping th coordinate minimal model 
th coordinate xed clause satis ed ipping th coordinates 
th coordinates corresponding vector minimal 
jmin 
similarly jmin 
enumerate minimal models en en 
obtain ipping th coordinate 
th coordinate xed minimal models obtained ipping exactly th coordinates 
exactly th coordinates 
jmin 
total bn jmin 
lemma means size characteristic set 
lemma boolean function variables partition satisfying jlj jrj properties holds di erent satisfying fx 
fx 

di erent satisfying fx 
fx 

lemma size obdd representing negative function variables variable ordering proof prove lemma section 
consider set lemma set variables 
balanced partition assuming case lemma loss generality di erent satisfying fx 
fx 

select fi 
select variables construct set assignments assignment satis es restrictions assigned 
variables fx 
fx assigned 
variables assigned 
size set choices restriction 

denote assignment satisfying 
satis es prove set fooling set de ned just lemma 
show 
assigned holds 
assigned 
holds 
mg 

show 
holds exists variable assigned 

restriction assigned 

assigned assignment 
implying holds 
proves fooling set 
size fooling set balanced partition lemma follows lemma 
theorem exists horn theory variables cnf requires size characteristic set requires size size smallest obdd representation 
proof consider function lemma 
stated lemma size characteristic set 
size cnf obviously 
function lemma obtained restricting 
xm xm 
xm xm 
size obdd increase restriction size smallest obdd 
results show representations dominate 
obdds nd place knowledge bases represent theories eciently 
unfortunately combining theorems negative result obtained 
corollary exists horn function variables characteristic set cnf require sizes size smallest obdd representation 
proof consider function consists parts rst resp second corresponds theorem resp theorem 
variables respectively share variables 
similarly case theorem lower bounds representations easily obtained 
checking obdd section discuss problem checking obdd represents unate function 
assume loss generality variable ordering 

known property show problem solved polynomial time 
property boolean function variables 
unate polarity 
resp holds 
noted subsection obdd representing resp obtained jf log jf time obdd representing jf denotes size 
size increase restriction property checked jgj 
jhj time checked time checking conditions 
known property useful reduce computation time 
property boolean function variables 
unate polarity 
xn xn unate polarity 
ii implies xn xn implies xn xn functions xn xn checked applying property recursively additional condition xn xn polarity 
note property xn xn resp xn xn checked recursively holds xn xn xn xn resp xn xn xn xn holds 
algorithm check unate fig 
checks conditions bottom manner level root node 
array denote polarity respect level element stores checked 
twodimensional array imp denote holds element stores checked 
step polarity speci ed array checked functions nodes level 
precisely functions checked step consistency polarities checked step 
step imp computed functions levels 
check step easily done succ succ checked unate polarity 
succ succ compared step previous iteration 
note constant functions considered unate 
polarity respect level temporarily stored pol step 
step polarity consistency respect checked comparing polarity node pol 
rst node checked level store algorithm check unate input obdd representing variable ordering 

output polarity unate 
step initialize 
set 
imp 
step check level compute 
node level labeled apply steps 
step 
set pol imp succ succ holds set pol imp succ succ holds output halt 
step 
set pol pol hold output halt 
step compute imp level 
pair nodes considered di erent level level level level equal set imp imp succ succ imp succ succ set imp 
step iterate 
level root node output polarity 
halt 
set return step 
algorithm check unate check obdd 
pol 
pol checked output consistent 
note check unate outputs nodes level depend 
step comparison performed easily comparisons completed 
convention succ resp succ denotes succ resp succ level denotes level 
succ succ hold level holds level 
note holds node 
step done know imp pairs nodes level level 
store results may needed 
consider computation time algorithm 
step computation performed constant time data computed previous step 
total time step jf 
step comparison pair performed constant time 
number pairs compared step entire computation jf jf requires jf time 
theorem obdd representing boolean function checking unate done jf time jf size obdd 
start algorithm check unate initial condition resp 
check positivity resp 
negativity positive resp negative polarities nodes resp 
corollary obdd representing boolean function checking positive resp negative done jf time jf size obdd 
checking obdd section discuss problem checking obdd represents horn function 
examining condition subsection algorithm subsection 
conditions assume loss generality variable ordering 

denoting xn xn simplicity boolean functions variables 
similarly case check bottom manner 
lemma boolean function variables 
expanded horn horn bit holds 
proof rst prove identity bit bit bit bit considering models fa bit fb bit fc bit fc bit fc bit fc bit bit bit bit part lemma immediate bit bit property bit imply bit bit bit bit bit consider part 
bit equality imply bit bit bit equality implies horn 
bit holds bit holds model 
bit bit bit combining bit horn 
holds holds bit checked applying lemma recursively 
lemma says condition bit lemma checked bottom manner 
lemma boolean functions variables expanded respectively 
property bit holds bit bit bit bit hold 
proof identity bit bit bit bit bit proved manner similar considering models 
bit holds bit xn bit bit bit hj xn bit xn bit hj xn hold prove lemma lemma 
note condition type bit lemma requires check condition type bit checking type bit functions 
condition checked recursively lemma 
algorithm check applying lemmas recursively boolean function checked scanning nodes obdd bottom manner 
node level check condition lemma horn bit holds 
lemma gives condition bit checked bottom manner 
algorithm check horn fig 
checks obdd manner 
array horn denote node represents horn function dimensional array bit imp denote bit holds 
element arrays stores checked horn says horn bit imp says bit holds 
note obdd reduced condition bit may checked functions di erent levels case functions considered max variables adding dummy variables max denotes maximum level nodes step algorithm check horn horn computed constant time fig 
corresponds lemma level succ level succ hold horn succ horn succ bit imp succ succ succ fig 
computed previous iterations 
similarly bit imp step triple computed constant time fig 
corresponds lemma 
case algorithm check unate succ resp succ denotes succ resp succ level denotes level 
completing step results bit imp triples level level level 
contain information required iteration may needed 
consider computation time algorithm check horn 
step horn node computed constant time jf time required checking algorithm check horn input obdd representing variable ordering 

output horn 
step initialize 
set horn constant node bit imp 
step check level 
node level labeled check function horn fig 
set result horn 
exists node level horn output halt 
step compute bit imp level 
triple nodes level level level level level level equal check bit holds fig 
set result bit imp 
step iterate 
output halt 
set return step 
algorithm check horn check obdd 
horn succ horn succ bit imp succ succ succ 

checking horn node step 
bit imp succ succ succ bit imp succ succ succ bit imp succ succ succ bit imp succ succ succ 

checking bit imp bit triple nodes step 
nodes obdd 
step bit imp triple computed constant time 
number triples checked step entire computation jf 
time rest computation minor 
theorem obdd representing boolean function checking horn done jf time jf size obdd 
considered obdds represent knowledge bases 
shown conventional cnf model representations new obdd representation mutually incomparable respect space requirement 
obdds nd place knowledge bases represent theories eciently 
considered problem recognizing obdd represents unate boolean function represents horn function 
turned checking done quadratic time size obdd checking done cubic time 
obdds eld computer aided design veri cation digital systems 
reason boolean functions encounter practice compactly represented operations obdds eciently performed 
believe obdds useful manipulating knowledge bases 
developing ecient algorithms knowledge base operations deduction abduction addressed 
authors professor endre rutgers university valuable comments 
research partially supported scienti aid ministry education science sports culture japan 
akers binary decision diagrams ieee trans 
comput pp 
bryant graph algorithms boolean function manipulation ieee trans 
comput pp 
bryant complexity vlsi implementations graph representations boolean functions application integer multiplication ieee trans 
comput pp 
burch clarke mcmillan dill sequential circuit veri cation symbolic model checking proc 
th acm ieee dac pp 
dowling gallier linear time algorithms testing satis ability horn formula logic programm pp 
kautz kearns selman reasoning characteristic models proc 
aaai pp 
kautz kearns selman horn approximations empirical data arti cial intelligence pp 
papadimitriou horn envelopes hypergraph transversals proc 
th international symposium algorithms computation isaac eds 
ng lncs springer pp 

khardon roth reasoning models arti cial intelligence pp 
madre coudert logically complete reasoning maintenance system logical constraint solver proc 
ijcai pp 
mccarthy hayes philosophical problems standpoint arti cial intelligence machine intelligence ed 
michie edinburgh university press 
shared binary decision diagram attributed edges ecient boolean function manipulation proc 
th acm ieee dac pp 
selman levesque abductive default reasoning computational core proc 
aaai pp 
takahashi fault simulation multiple faults bdd representation fault sets proc 
ieee acm iccad pp 
theoretical studies memory parallel computation ordered binary decision diagrams ph thesis department information science graduate school engineering kyoto university 

