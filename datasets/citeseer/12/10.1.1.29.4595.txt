proofs folklore polymorphic type inference algorithm lee yi korea advanced institute science technology hindley milner polymorphic type inference system different algorithms de facto standard algorithm bottom context insensitive folklore algorithm top context sensitive 
algorithm formally soundness completeness proofs relation algorithm rigorously investigated place combination founded 
article formally define context sensitive top type inference algorithm named prove soundness completeness show distinguishing property stops earlier input program ill typed 
proofs seen theoretical justifications various type checking strategies practice 
categories subject descriptors programming languages language constructs features data types structures logics meaning programs studies program constructs type structure general terms algorithms languages theory additional key words phrases type error type inference algorithm 
algorithm standard presentation hindley milner polymorphic type inference system fails late input program type error 
algorithm fails application expression subexpressions function argument conflicting types erroneous expression successfully type checked long consequence collides application expression 
bottom algorithm reports application expression problem area implying subexpressions ill typed 
large type error message help programmer find cause type problem 
different type inference algorithm early ml compiler leroy cure problem 
folklore algorithm carries type supported part korea science engineering foundation korea ministry information communication samsung electronics lg information communications kaist center artificial intelligence research 
authors addresses department computer science kaist korea email cs kaist ac kr 
permission digital hard copy part material fee granted provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission association computing machinery 
acm 
copy republish post servers redistribute lists requires prior specific permission fee 
delta lee yi rec fac fac toplevel input rec fac fac expression type int 
int type bool 
int 
rec fac fac toplevel input rec fac fac expression type 

bool type 

int fig 

different type error messages constraint expected type implied context expression sub sibling expressions 
example application expression type constraint say int type constraint ff int constraint type ff type inference constant variable expression type satisfy type constraint algorithm carried point 
top nature name algorithm article formally define algorithm prove soundness completeness show finds type errors earlier property implies algorithm combination generate strictly informative type error messages algorithms 
example show difference algorithms see 
program factorial function recursive call mistakenly fac fac 
algorithm leroy sml nj macqueen appel reports definition problem area algorithm fails unify argument type bool inferred recursive call fac type int inferred argument delta delta delta 
hand algorithm leroy pinpoints operator problem spot 
exact error message possible type constraint function argument int argument recursive call type checked 

algorithm overview algorithm carries type constraint context expression stops expression satisfy current type constraint 
consider expression fn 
fn 
true false false proofs folklore polymorphic type inference algorithm delta expression function expression infers type constraint ff fi 
inference succeed substitution fff int fi intg 
imposes constraint argument expression type int 
infers type constraint int 
turn infer type constraint fl int 
branch expression function body boolean stops true expression type error 
characteristic type constraint derived current context dominates subsequent steps 
example expression false type ff theta ff theta ff ff reports bool type constraint false expression forces subsequent sibling expressions type 
comparison johnson walz unification algorithm johnson walz reports false expression type int selects popular types multiple conflicting types bound type variable 
notation conventional notation 
vector ff shorthand fff delta delta delta ff ff ff delta delta delta ff equality type schemes renaming bound variables 
type scheme oe ff set ftv oe free type variables oe ftv ff ftv set type variables type type environment gamma ftv gamma dom gamma ftv gamma 
substitution ff ng substitutes type type variable ff write ffg shorthand substitution ff ng ff length ff delta delta delta rff substitution support supp fff sff ffg set itv involved type variables fff fi supp ff ffig ftv sfi substitution type type resulting applying substitution component ff fg substitution type scheme oe soe fi sf fi ffg fi itv ftv oe 
substitution type environment gamma gamma fx 
soe 
oe gammag 
composition substitutions followed written rs fr sff ff ff supp ff ff supp substitutions equal sff rff ff supp supp 
substitution set type variables write ff ff notation ff means exists substitution supp ff 
write gamma oe mean fy 
oe 
oe gammag fx 
oeg 
clos gamma gen gamma damas milner ff ff ftv ftv gamma 
algorithm definition source language hindley milner style polymorphic type system algorithm shown 
algorithm shown 
algorithm returns substitution components expression type environment type constraint 
inferred type expression achieved applying result substitution type constraint expression 
type constraints just types 
note algorithm unify types application expressions 
unifies constant variable lambda delta lee yi syntax expr constant variable function application fix type constant type ff type variable function type oe ff oe gamma var fin type environment con gamma var gamma gamma fn gamma gamma app gamma gamma gamma gamma gamma clos gamma gamma fix gamma gamma fix theta expr subst theta type gamma id gamma id fi ffg gamma ff new fi gamma gamma fi new fi fi gamma gamma gamma fi new fi fi gamma gamma gamma clos gamma gamma fix gamma fi new fi fi fig 

language type inference rule algorithm new type variable distinct set new new type variables introduced recursive call gamma satisfies new ftv gamma 
expressions 
consider variable case 
current type constraint ae type gamma agree ae fi ffg 
lambda case thing check current type constraint ae function type 
unification proofs folklore polymorphic type inference algorithm delta theta expr theta type subst gamma ae ae gamma ae ae fi ffg gamma ff new fi gamma ae ae fi fi new fi fi gamma fi fi gamma ae gamma fi ae new fi gamma fi gamma ae gamma fi new fi gamma clos gamma fi ae gamma fix ae gamma ae ae fig 

algorithm new type variable distinct set new new type variables introduced recursive call gamma ae satisfies new ftv gamma ftv ae 
ae fi fi new fi fi job 
application case current type constraint ae range part new constraint fi ae function expression gamma fi ae new fi 
constraint argument expression type fi 
case type constraint binding expression null gamma fi new fi constraint type available 
constraint body type ae 
fix case constraint expression constraint ae 

soundness completeness algorithm sound complete respect polymorphic type inference system 
theorem soundness 
expression gamma type environment 
exists type ae gamma ae gamma sae 
proof uses lemma lemma 
lemma damas milner 
substitution gamma gamma lemma milner 
substitution gamma type environment type 
gamma clos gamma sf fi ffg ff ftv ftv gamma fi new 
proof theorem 
prove structural induction case sae 
gamma sae con 
delta lee yi case sae sf fi ffg oe gamma 
var gamma sae 
case induction implies gamma fi fi fn gamma fi fi gamma ae case induction implies gamma fi ae 
lemma apply sides 
gamma fi ae induction implies gamma fi app rule gamma ae case fi ffg ff ftv fi ftv gamma fi new type variables 
induction implies gamma fi 
lemma apply sides 
gamma fi induction implies gamma clos gamma fi ae 
lemma fact gamma gamma differs variables gamma gamma clos gamma fi ae rule gamma ae gamma ae case fix gamma ae ae 
induction implies gamma sae sae fix gamma fix sae 
definition damas milner 
oe oe type schemes oe ff oe fi exists substitution supp ff ftv oe ftv oe say oe generic instance oe write oe oe write gamma gamma dom gamma dom gamma gamma gamma dom gamma 
theorem completeness 
expression gamma type environment 
exist type ae substitution gamma ae gamma ae defined exists substitution new rs new new set new type variables gamma ae 
proofs folklore polymorphic type inference algorithm delta completeness means expression type satisfies type constraint ae ae algorithm expression constraint ae succeeds substitution result type sae subsumes sae 
completeness proof uses lemmas 
lemma 
substitution gamma type environment type 
gamma clos gamma 
proof 
see appendix lemma damas milner 
gamma gamma type environments gamma gamma gamma gamma lemma 
itv ftv ftv 
proof 
definition unification algorithm robinson 
lemma 
gamma ae itv ftv gamma ftv ae new new set new type variables gamma ae 
proof 
see appendix lemma 
itv rs rj proof 
see appendix proof theorem 
prove structural induction rigorous treatment new type variables assume new type variable algorithm distinct set new new type variables call gamma ae satisfies new ftv gamma ftv ae 
case judgment gamma ae 
con ae 
ae unifier ae 
gamma ae succeeds general unifier ae 
exists substitution rs 
case judgment gamma ae fi new type variables 
prove unifier ae fi ffg exists gamma ff var rule gamma ae fl type variables ftv gamma ftv ae itv fi fl 
gamma ff fl fl ffg exists substitution supp fl bpf fl ffg ae right hand side gives ae pf fl ftv ae fi bpf fl supp fl fl itv ftv ae delta lee yi left hand side gives bpf fl ffg bpf fl fi ffg fi ftv ff bpf fl fig unifier ae fi ffg note bpf fl fig fl unifier ftv ae ftv fi ffg fl 
succeeds general unifier ae fi ffg exists substitution rs bpf fl fig fl rs fi bpf fl fig fl fi bp fl fi bj fl fi lemma itv fl fi supp fl case judgment gamma ae new ffi fi new fi fi new type variables new set new type variables gamma fi fi 
prove unification ae fi fi succeeds 
fi fi ffi fi unifier ae fi fi ae ae ffi fi ftv ae fi fi exists substitution fn rule gamma apply induction gamma fi fi prove exists substitution fi gamma gamma fi 
fi fi gamma fi gamma fi gamma ffi fi ftv gamma induction imply exists substitution new new proofs folklore polymorphic type inference algorithm delta rs new new new ffi fi note itv new itv ftv ae ffi fi lemma ftv ae new ftv ae new ffi fi new assumption new type variables distinct 
lemma eq 
new ffi fi new ffi fi new ffi fi new ffi fi lemma new new new ffi fi new case judgment gamma ae new ffig new new fi new type variable new new sets new type variables gamma fi ae gamma fi respectively 
app rule exists type gamma ae gamma fig ffig ae fi ae gamma gamma fi ftv gamma ftv ae 
applying induction gamma fi ae exists substitution new new similarly apply induction gamma fi fi fi fi new gamma gamma fi ftv gamma gamma ftv gamma new induction exists substitution new new rs new new new new ffig note itv new itv ftv gamma ftv ae new ffig lemma ftv gamma ftv ae new ftv gamma ftv ae new delta lee yi new ffig new assumption new type variables distinct 
lemma eq 
new new ffig new new ffig new new ffig new lemma new new ffig new new fi new case judgment gamma ae new ffig new new fi new type variable new new sets new type variables gamma fi gamma clos gamma fi ae respectively 
rule exists type gamma gamma clos gamma ae fig ffig fi gamma gamma fi ftv gamma 
induction imply exists substitution new new note clos gamma clos gamma fi clos gamma fi ftv gamma ffig new oe clos gamma fi lemma gamma gamma gamma new ftv gamma 
gamma clos gamma oe gamma clos gamma fi lemma gamma clos gamma fi ae ae ae ae gamma clos gamma fi ae induction imply exists substitution new new exactly steps proof application expression rs new new proofs folklore polymorphic type inference algorithm delta case fix judgment gamma fix ae 
fix rule gamma ae ae induction gamma ae ae succeeds substitution exists substitution new rs new new set new type variables gamma ae ae 
gamma fix ae succeeds new rs new 
stops earlier model behaviors type inference algorithms call strings 
call string gamma written gamma constructed starting empty call string ffl appending tuple gamma respectively gamma gamma called respectively returned 
superscript indicates downward upward movement stack pointer inference algorithm recursively called returned 
algorithm stops unification failure call string matching returns tuples calls tuples 
similarly define call strings algorithm example expression fn call string gamma gamma gamma gamma fi gamma fi gamma gamma gamma gamma ill typed expression call string gamma gamma gamma gamma gamma note tuple gamma missing algorithm stops unification failure application 
note call strings gamma gamma ae finite expression type environment gamma type ae call respectively occurs subexpression gamma respectively gamma ae 
say respectively fails expression current argument expression respectively unification fails definition 
gamma type environment expression type error fi new type variable 
gamma fails rightmost tuple call string gamma gamma similarly gamma fi fails rightmost tuple call string gamma fi gamma ae example 
consider expression true 
fails top expression true succeeded proper subexpression 
fails true 
example 
consider expression 
fails 
fails earlier left expression checked right expression 
delta lee yi example 
consider expression 
fails 
fails checks body expression 
examples indicate algorithm stops earlier algorithm theorem earliness 
gamma type environment expression fi new type variable 
gamma fi gamma jsj number tuples call string proof theorem uses completeness algorithm lemmas 
theorem completeness damas milner 
gamma gamma instance gamma oe type scheme gamma oe 
gamma succeeds gamma substitution gamma rs gamma gamma oe 
lemma 
gamma gamma type environments type 
gamma gamma clos gamma clos gamma 
proof 
see appendix lemma damas milner 
oe oe soe soe lemma 
expression gamma type environment fi new type variable 
gamma gamma gamma fi gamma ae exists substitution gamma gamma 
note called subexpression gamma gamma defined 
proof 
prove induction length prefixes gamma delta delta delta gamma gamma gamma fi delta delta delta gamma ae gamma fi 
note prefixes length check sub expressions order 
symbols algorithms identified superscripts 
base case prefixes length represent initial calls gamma gamma identical 
identity substitution satisfies gamma gamma followings inductive cases 
case type environment parameters gamma gamma visited 
induction gamma gamma lemma gamma gamma rj ffi ffi fi 
gamma fi gamma fi fi ftv gamma gamma fi case call occurs environment accompanied call case holds induction hypothesis 
proofs folklore polymorphic type inference algorithm delta case soundness implies gamma fi ae induction gamma gamma lemma gamma gamma lemma gamma fi ae completeness exists substitution gamma gamma gamma gamma gamma case call occurs environment accompanied call case holds induction hypothesis 
case soundness implies gamma fi induction gamma gamma lemma gamma gamma lemma gamma fi completeness exists substitution fi gamma gamma gamma gamma clos gamma clos gamma lemma clos gamma fi clos gamma fi lemma facts imply case proven 
case fix induction exists substitution gamma gamma rj ffi fae fi gamma fi gamma ae fi ftv gamma gamma ae lemma 
expression gamma type environment fi new type variable 
suppose gamma gamma gamma fi gamma ae gamma fails gamma ae fails 
proof 
assume contradiction gamma ae succeeds gamma ae defined 
soundness gamma sae lemma exists substitution gamma gamma lemma sr gamma gamma lemma sr gamma sae delta lee yi completeness gamma succeeds 
contrasts condition assumption true 
prove theorem 
proof theorem 
case type error trivially true obvious gamma gamma fi consider case type error 
gamma fail application expression 
gamma delta delta delta gamma delta delta delta gamma fails right returned application operand 
suppose contradiction gamma gamma fi gamma fi delta delta delta gamma ae delta delta delta gamma ae delta ffl order visiting subexpressions call return return return gamma ae delta means gamma ae succeeds 
impossible lemma gamma fails 

hindley milner polymorphic type inference system different algorithms de facto standard algorithm milner damas milner bottom context insensitive folklore algorithm top context sensitive 
article formally defined folklore algorithm named proved soundness completeness showed finds type errors earlier considers number expressions proofs seen theoretical justifications various type checking strategies 
example compiler user switch algorithms may help situations hard find cause type error 
algorithms different expressions reporting different causes type problem 
combination variant implemented practice th ery 
compiler mix algorithms fly choosing algorithm depending current subexpression type check 
example type checking definitions recursive functions compiler may switch algorithm generates better type diagnostic recursive calls ill typed arguments seen 
variant technique implemented sml nj compiler system version 
similar bidirectional type checking ideas formalized setting subtyping impredicative polymorphism pierce turner 
proofs folklore polymorphic type inference algorithm delta formalization enables see clearly algorithm unobtrusively adapt existing techniques generating informative type error messages developed algorithm mind 
techniques wand duggan bent th ery essentially record history type instantiations unifications resulting substitutions 
type instantiation standard unification algorithm approaches directly reason inferring types free variables bernstein stark programmer probe types puzzling points program straightforward implement inside making free variables distinct initially bound fresh type variables 
idea destructive implementation algorithm cardelli type variables destructively updated unification free variables remembered quickly computing type closure practical implementation algorithm appendix proof lemma ff ftv gamma fi type variables fi itv ftv ffj fij 
gamma ff fi sf fi ffg fs ff fig 
rsf fi ffg supp fi condition generic instance satisfied 
second condition holds follows ftv gamma fl ftv ftv gamma ftv sfl fl ftv ftv sfl fl ftv gamma ftv sfl ftv ftv gamma ftv clos gamma proof lemma proof uses lemma 
lemma milner 
substitutions type 
itv rs itv itv ftv ftv itv 
proof structural induction case lemma itv ae ftv ae ftv ftv ae 
delta lee yi case itv ae fi ff ftv ae ftv fi ffg lemma ftv ae ftv ff fi ftv ae ftv ff fi ftv ae ftv gamma fi ftv ae ftv gamma new case lemma itv ftv ae ftv fi fi 
induction itv ftv gamma fi ftv fi new itv ftv gamma new ffi fi lemma itv itv itv ftv gamma ftv ae new ffi fi cases similarly proven 
proof lemma prove rs ff rj sff ff 
case ff rs ff ff itv rj sff rj ff ff 
case ff rs ff 
ff supp rj sff itv 
ff supp rj sff rff 
proof lemma definition gamma gamma dom gamma 
implies ftv gamma ftv gamma dom gamma ftv gamma ftv gamma 
ftv clos gamma ftv ftv gamma ftv ftv gamma ftv clos gamma acknowledgments anonymous referees associate editor valuable suggestions corrections substantially improved presentation 
david macqueen encouragement early draft article laurent th ery xavier leroy pierre weis sharing experiences type inference algorithms 
eo oh ryu comments 

explaining type errors polymorphic languages 
acm lett 
program 
lang 
syst 

bernstein stark 
debugging type errors full version 
tech 
rep state university new york stony brook 
cardelli 
basic polymorphic typechecking 
sci 
comput 
program 
apr 
damas milner 
principal type scheme functional programs 
proceedings th annual acm symposium principles programming languages 
acm new york 
duggan bent 
explaining type inference 
sci 
comput 
program 
july 
johnson walz 
maximal flow approach anomaly isolation unification incremental type inference 
proceedings th annual acm symposium principles programming languages 
acm new york 
proofs folklore polymorphic type inference algorithm delta leroy 
caml light system release 
institut national de recherche en informatique en automatique 
leroy 
caml light system release 
institut national de recherche en informatique en automatique 
macqueen appel 
standard ml new jersey 
tech 
memo bell labs 
milner 
theory type polymorphism programming 
comput 
syst 
sci 

pierce turner 
local type inference 
proceedings th annual acm symposium principles programming languages 
acm new york 
th ery 
interactive programming environment ml 
tech 
rep institut national de recherche en informatique en automatique 
march 
robinson 
machine oriented logic resolution principle 
acm jan 
wand 
finding source type errors 
proceedings th annual acm symposium principles programming languages 
acm new york 
received july revised march accepted july 
