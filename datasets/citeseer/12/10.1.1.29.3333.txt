cognitive architecture michael byrne department psychology rice university main st ms houston tx byrne acm org voice fax byrne hohci chapter page designing interactive computer systems efficient easy important people society may realize potential benefits computer tools 
modern cognitive psychology contains wealth knowledge human behavior simple matter bring knowledge bear practical problems design build applied psychology includes theory data knowledge card moran newell vii 

integrating theory data knowledge cognitive psychology human performance way useful guiding design hci simple matter 
significant advances card moran newell wrote passage 
key advances development cognitive architecture subject chapter 
chapter consider cognitive architecture cognitive architecture relevant hci 
order detail state cognitive architectures hci important consider past cognitive architectures hci research 
architectures actively research community licai soar epic act pm application hci examined 
chapter conclude discussion cognitive architectures hci 
cognitive architectures 
dictionary list different definitions word architecture example dictionary com lists style method design construction byzantine architecture orderly arrangement parts structure architecture novel computer science design structure computer system qualify cognitive architecture 
senses word architecture attempt describe structure arrangement particular thing human cognitive system 
cognitive architecture broad theory human cognition wide selection human experimental data byrne hohci chapter page implemented running computer simulation program 
young gray young ritter young defines cognitive architecture embodiment scientific hypothesis aspects human cognition relatively constant time relatively independent task idea part cognitive science early days cognitive psychology artificial intelligence manifested general problem solver gps newell simon successful computational cognitive models 
theories progressed great deal gps gradually broad 
best descriptions vision area newell book unified theories cognition 
newell argues time come cognitive psychology collecting disconnected empirical phenomena seriously considering theoretical unification form computer simulation models 
cognitive architectures attempts just 
cognitive architectures distinct engineering approaches artificial intelligence strive construct intelligent computer systems technologies best serve purpose 
cognitive architectures designed simulate human intelligence way newell 
example chess program defeated kasparov deep blue qualify cognitive architecture solve problem chess human way 
deep blue uses massive search game space human experts generally look moves ahead concentrate effectively quality moves 
cognitive architectures differ traditional research psychology cognitive architecture integrative 
include attention memory problem solving decision making learning 
theorizing psychology follows divide conquer strategy tends generate highly specific theories limited range phenomena changed little newell 
limits usefulness theories applied domain hci users employ wide range cognitive capabilities simple tasks 
asking describe isolated phenomenon people working byrne hohci chapter page cognitive architectures ask phenomenon fit know aspects cognition important feature cognitive architectures specify human virtual machine fixed architecture 
cognitive architecture 
generally architecture supplied knowledge needed perform particular task 
combination architecture particular set knowledge generally referred model 
general possible construct model particular task 
specific knowledge incorporated particular model determined modeler 
relevant knowledge supplied architecture knowledge engineering task facing modelers attempting model performance complex tasks formidable 
centrally important feature cognitive architectures software artifacts constructed human programmers 
number relevant ramifications 
model task constructed cognitive architecture runnable produces sequence behaviors 
behavior sequences compared sequences produced human users help assess quality particular model 
may provide insight alternate ways perform task may show possible strategies utilized people performing task 
useful guiding interface design 
feature architectures enable creation quantitative models 
instance model may say just click button menu may include time clicks 
models cognitive architectures produce execution times error rates learning curves 
major strength cognitive architectures approach certain kinds hci problems discussed detail section 
hand cognitive architectures large software systems considered difficult construct maintain 
individual models essentially programs written language cognitive architecture 
individual modelers need solid programming skills 
byrne hohci chapter page cognitive architectures wide hci practitioners 
right exist primarily academic research laboratories 
barriers practitioners learning cognitive architectures generally difficult task 
gradually changing issues addressed regard discussed section 
furthermore cognitive architectures wide practitioners mean irrelevant practitioners 
section highlights cognitive architectures relevant wide hci audience 
relevance human computer interaction readers relevance models produce quantitative predictions human performance obvious 
may immediately clear 
cognitive architectures relevant usability engineering discipline hci relevant applications computing systems serve important role hci theoretical science 
nearly hci oriented conferences online resources areas corporations recruit hci professionals 
common job title forums usability engineer implicit title view usability part engineering enterprise 
people job title certainly involved product design sense usability engineering recognized engineering people trained traditional engineering disciplines electrical aerospace engineering 
traditional engineering disciplines design generally guided part quantitative theory 
engineers disposal hard theories domain theories allow derive quantitative predictions 
consider aerospace engineer designing wing 
usability engineer aerospace engineer start pre existing design provides starting point 
aerospace engineer decides change design usually quantitative guidance performance wing change result change design 
guidance quantitative need evaluation tools wind tunnels 
usability engineer usability test 
usability testing aerospace quantitative idea outcome test byrne hohci chapter page guided simply intuition experience quantitative theory aerodynamics 
fact theory advanced wind tunnels built anymore 
replaced computer simulations outcome application computational techniques complex problems aerodynamics called computational fluid dynamics entirely replaced wind tunnels demand wind tunnel time clearly affected development 
part usability engineer lacks quantitative tools available aerospace engineer 
design subjected wind tunnel usability test engineer little guidance expect intuition experience similar tests 
intuition experience certainly valuable guides fall short hard quantitative methods 
engineer interface allow users complete tasks faster interface faster 


small savings execution times add large financial savings organizations considers scale activity 
paradigm example telephone operators studied gray john atwood second saved average call save telephone millions dollars 
computational models cognitive architectures potential provide detailed quantitative answers just execution times 
error rates transfer knowledge learning rates kinds performance measures metrics provided architecture models 
models precisely accurate absolute sense may useful comparative sense 
example usability engineer comparing interface interface model disposal accurately predict absolute times complete set benchmark tasks may accurately capture difference interfaces may 
additionally certain circumstances usability tests impractical prohibitively costly 
example access certain populations physicians may difficult expensive bringing repeated usability tests may byrne hohci chapter page feasible 
developing model pilot air traffic controller performing expert task specialized systems may difficult re running model assess change user interface straightforward performing new usability test iteration system 
possible quantitatively realistic model human loop produce things execution times error rates 
computational models principle act surrogate users usability testing special populations 
course measures obtained methods goms analysis card moran newell john kieras cognitive walkthrough polson lewis wharton 
techniques originally grounded ideas prominent cognitive architectures essentially abstractions relevant architectures particular hci purposes 
architecture computational models provide things goms models cognitive walkthroughs 
models executable generative 
goms analysis hand description procedural knowledge user sequence actions performed accomplish specific task instance equivalent computational model generates behaviors real time faster 
equally importantly computational models capacity reactive real time 
may possible construct goms model describes knowledge necessary time take operator classify new object air traffic controller screen pencil goms model execute procedure response appearance object 
running computational model hand 
property architecture computational models important uses acting virtual users usability tests 
intelligent tutoring systems 
consider lisp tutor anderson conrad corbett 
tutoring system contained architecture running computational model knowledge necessary implement relevant lisp functions module assessing pieces knowledge mastered student 
model executable predict action student take student correct knowledge solve problem 
byrne hohci chapter page student took different action told student missing relevant pieces knowledge 
student feedback knowledge missing incomplete problems exercise knowledge selected 
identifying students knowledge gaps knowledge possible generate effective educational experiences 
problems contain knowledge student mastered avoided bore student things know 
frees student concentrate material mastered resulting improved learning anderson 
lisp tutor old research system underlying cognitive architecture essential methodology developed pressing educational needs algebra geometry sold commercially see www com 
hci relevant application high fidelity cognitive models populating simulated worlds situations 
example training fighter pilot expensive simulator trainee needs face realistic opposition 
realistic opposition consists trained pilots training person requires trained pilots away normal duties flying airplanes real missions 
difficult expensive 
pilots simulated realistically trainee face opposition useful training value having remove trained pilots duties 
training situations way train involve multiple human experts taken away regular jobs 
need expensive experts potentially eliminated reduced architecturally cognitive models place human experts 
military started experiment just scenario jones laird nielsen kenny 
domains training having realistic opponents desirable video games 
things texture mapped graphics features sell games network play 
enables players engage opponents capabilities comparable typical computer generated opponents 
network play possible byrne hohci chapter page game find appropriate opponent 
computer generated opponent high fidelity simulation human terms cognitive perceptual motor capabilities video game players difficulty finding appropriate opponents relying network play 
scientifically interesting cognitive architectures inevitable cognitive architectures way 
cognitive architectures theoretically important hci interdisciplinary field 
people including cognitive psychologists find terms cognitive psychology working memory mental model vague ill defined 
harsh evaluation explanations relying terms quite possible interpretations relying nebulous constructs masquerading ignorance essentially vacuous terminology computational cognitive architectures hand require explicit specifications semantics theoretical terms 
architectures imperfect descriptions human cognitive system minimum specified clearer predict strictly verbal theories 
second theoretical advantage computational theories cognitive architectures provide window theory works 
theories grow size number mechanisms interactions mechanisms increasingly difficult predict analytically 
computer simulations permit relatively rapid evaluations complex mechanisms interactions 
excellent discussion topic see simon 
problem theories solely verbal descriptions difficult assess internal coherence theories assessment straightforward computational models 
verbal theories easily hide subtle subtle inconsistencies poor scientific theories 
computational models hand force explanations high level internal coherence theories internally consistent typically impossible implement real machines 
hci interdisciplinary field theories fundamentally interdisciplinary nature appropriate 
cognitive architectures theories combining byrne hohci chapter page computational methods knowledge artificial intelligence computer science data theories cognitive psychology 
cognitive psychology computer science certainly disciplines participate hci highly visible forces field 
psychological theories manifested executable programs alien people computer science background traditional psychological theories 
cognitive architectures clearly relevant hci number levels 
fact gone unnoticed hci research community 
fact cognitive architectures long history hci dating back original card moran newell 

brief look past systems hci total history cognitive architectures hci far long document single chapter possible touch highlights 
systems described section qualify complete cognitive architectures share intellectual history current architectures influenced development hci 
concepts developed efforts central parts ongoing research cognitive architecture 
natural starting point model human processor mhp goms psychology human computer interaction card moran newell clearly seminal hci defining academic works early days field 
produce running cognitive architecture clearly spirit cognitive architectures quite influential development current cognitive architectures 
particular pieces relevant model human processor mhp goms 
mhp represents synthesis literature cognitive psychology human performance time sketches framework cognitive architecture implemented 
mhp system multiple memories multiple processors properties processors memories described detail 
see byrne hohci chapter page 
card moran newell specified interconnections processors number general operating principles 
system processors cognitive perceptual motor 
cases system behaves essentially serially 
instance order system press key response appearance light perceptual processor detect appearance light transmit information cognitive processor 
cognitive processor job decide appropriate response transmit motor processor responsible executing appropriate motor command 
situation processors act serially 
complex tasks transcription typing processors working parallel 
insert specification timing processor connectivity processors card moran newell lay general operating principles ranging general qualitative detailed quantitative 
example principle problem space principle states rational activity people engage solve problem described terms set states knowledge operators changing state constraints applying operators control knowledge deciding operator apply 
card particularly general somewhat vague principle 
contrast consider principle fitts law time move hand target size lies distance away log pos im ms bit 
card specific principle quantitatively describes hand movement behavior highly relevant say pointing mouse 
specification mhp quite thorough lays basis cognitive architecture able wide variety hci byrne hohci chapter page relevant tasks 
card implement mhp running cognitive architecture 
pedagogical reasons necessary complete running cognitive architecture general properties architecture useful guiding hci researchers practitioners 
time computational modeling domain specialized cognitive psychology 
card lays concept highly influential hci particularly community computational modelers 
goms stands goals operators methods selection rules 
goms framework task analysis describes routine cognitive skills terms listed components 
routine cognitive skills user knows task task doing problem solving 
text editing familiar editor prototypical case clearly great tasks interest hci classified routine cognitive skills 
potential applicability goms quite broad 
goms applied variety tasks web site www org lists goms related papers bibliography 
goms analysis provide 
essentially goms analysis task describes hierarchical procedural knowledge person successfully complete task 
sequence operators executed possible quantitative predictions execution time particular task 
analyses predictions error functionality coverage learning time possible 
original formulation card number different forms goms analysis developed slightly different strengths weaknesses john kieras 
core point relates cognitive architectures goms analysis originally production rule analysis card personal communication 
come times brief production systems warranted 
production rules condition action pairs set production rules simply productions just rules computational engine interprets productions called production system 
addition productions production systems contain representation current state 
byrne hohci chapter page representation typically consists set loosely structured data elements propositions attribute value pairs 
set called working memory declarative memory working memory psychological term somewhat different meaning literature declarative memory discussions 
operation production system cyclic 
cycle system goes pattern matching process 
side production tests presence particular pattern declarative memory 
conditions production met production said fire actions specified side executed 
actions things pressing button higher level abstraction action turn left 
actions include modifying contents declarative memory usually means different production productions match cycle 
purely symbolic level production systems turing complete compute computable newell flexible model wide array computations performed human cognitive system 
relevant cognitive architectures cognitive architectures contain production systems 
goms abstracted production rule analysis 
card discovered routine cognitive skills structure productions quite similar tasks representation possible 
representation original goms formulation 
translating goms analysis production rules language cognitive architectures generally straightforward 
similarly routine cognitive skills relatively simple derive goms analysis set productions model task 
models cognitive architectures go routine cognitive skills connection certainly influenced evolution research cognitive architecture hci 
connection fed back research development goms techniques ngomsl kieras 
ngomsl natural goms language allows prediction learning time knowledge described goms model theory transfer byrne hohci chapter page training referred cognitive complexity theory cct described detail section 
cognitive complexity theory cct learned perform task particular interface switch doing task new interface better just learning task new interface 
knowledge gained old interface transferred new interface 
question intrigued psychologists century having answers question implications training programs user interface design areas 
cognitive complexity theory bovair kieras polson kieras polson psychological theory transfer training applied hci 
relevant current discussion theory production rules 
major points cct follows knowledge procedures people need execute perform routine tasks represented production rules 
relevant production rules generated goms analysis task modeled 
complexity task reflected number content production rules 
certain conventions adopted style production rules complexity reflected entirely number rules 
time takes execute procedure predicted production system interprets rules set typical operator times time takes type letter command 
production interpreter intended general cognitive architecture production system framework certainly consistent current architectures 
time takes learn task function number new rules user learn 
new clearly defined context 
user production new task requires rule similar similarity defined production rule syntax rule new task need learned 
byrne hohci chapter page predictions errors speedup practice gleaned contents production rules 
obviously ambitious agenda subtleties 
example notion task term description cct includes just task level 
consider simple instance text editing task deleting word redux middle sentence 
actual commands needed accomplish task different different text editors modeling delete word task require different sets productions editor 
necessary knowledge production rules representing function task user point view delete word interface provided accomplish task 
transfer text editor depends great deal particulars interface 
cct predicts asymmetrical transfer learning editor editor learning editor editor cct models goms analysis omit modeling details user behavior 
general falls outside domain procedural knowledge knowledge modeled 
means model model motor actions primitive operator 
cct models model things natural language comprehension clearly requirement text editing 
cct models include model perceptual processes required users model simply information state display example look see cursor particular character 
scope typical goms model cct model formalized quantitative goms models described card 

spite limitations part limitations allowed researchers concentrate central aspects phenomena cct fared 
numerous laboratory experiments provide empirical support claims cct see especially bovair kieras polson 
cct framework developed validated greatest detail pre gui text editing applied menu systems polson byrne hohci chapter page control panel device kieras bovair 
anderson provide strikingly similar analysis transfer training supporting empirical results lending credence cct analysis 
cct certainly prominent early successes computational modeling hci 
caps caps collaborative activation production system just carpenter cognitive architecture designed model individual differences working memory wm capacity effects working memory load 
speciality applicable number hci situations 
certainly kinds user interfaces create excessive working memory demands example phone interfaces 
phone interaction options remain screen kind available storage users forced remember options 
prime candidate modeling system designed capture effects working memory demand exactly lerch junker kass 
data showed contrary guideline advice people intuition restricting phone menus items reduce error rates 
caps model provided clear theoretical account phenomenon 
model showed short menus necessarily better side effects designing menu hierarchies options level 
number total items increases menu depth creates working memory demand 
second fewer items level individual item general vague especially top levels hierarchy 
forces users spend wm resources disambiguating menu items situation wm demands supply 
application caps hci relevant account error provided byrne bovair 
error 
anecdotal evidence intuition suggests interacting man artifacts certain kinds errors occur greater frequency 
particular entire family errors intuitively common errors people part task occurs byrne hohci chapter page main goal task accomplished 
nearly reports having error type time 
prototypical examples leaving original glass 
main goal generally get copies goal satisfied remove original document 
error common include document current equivalent leaving document glass scanner 
leaving bank card automated teller machine atm 
main goal order get cash atms card removal occurs cash dispensed 
error common generation atms atms designed way error impossible 
leaving gas cap filling car gas tank leaving change vending machines readers probably think 
numerous hci researchers aware class error young barnard simon polson account previously developed explained type error persistent frequent occurs time 
caps model provides just account serve useful example application cognitive architecture hci problem 
production systems caps contains kinds knowledge declarative memory productions 
declarative memory elements caps associated activation value elements threshold level activation matched productions sides 
additionally production systems side caps production may request activation element incremented 
truly useful modeling working memory limit total amount activation available elements 
total activation exceeds limit elements lose activation bring total back limit 
provides mechanism simulating human working memory limitations 
byrne hohci chapter page byrne bovair error model production increments activation subgoals parent goal active unsatisfied 
example get copies subgoal supplies activation unfulfilled subgoals task 
get copies goal satisfied activation supply subgoals stops 
goal remove original subgoal goal loses activation supply 
model predicts subgoals especially vulnerable working memory load lower capacity individuals risk higher capacity individuals 
byrne bovair conducted experiment test prediction data supported model 
nice demonstration power cognitive architectures 
byrne bovair designed implemented caps architecture able theory construct model empirically testable predictions predictions borne 
caps guide hci designers longer developing supporting gone different direction provides excellent example case 

contemporary architectures currently cognitive architectures actively developed updated applied hci oriented tasks 
prominent production systems centrally built production systems 
soar epic act particularly act pm 
contain production rules level granularity individual production rule varies considerably architecture architecture 
different history unique focus 
share certain amount intellectual history particular influenced way mhp 
level may similarities differences borrow science converging open question 
fourth system somewhat different production system models considered 
byrne hohci chapter page licai licai polson example non production system architecture hci context 
discussed point assumes users modeled relatively skilled specific interface approaches poor job modeling relatively raw novices 
main goals licai addressing concern 
paradigm question addressed licai users explore new interface architectures discussed licai central control mechanisms production system 
licai built architecture originally designed model human discourse comprehension construction integration kintsch 
production systems operation cyclic 
happens cycles somewhat different happens production system 
cycle divided phases construction integration name 
construction phase initial input contents current display fed weakly constrained rule process generates network propositions 
items network linked basis argument overlap 
example goal graph data represented proposition perform graph data 
proposition containing graph data linked goal 
construction phase completes system left linked network propositions 
follows integration phase activation propagates network neural network fashion 
essentially phase constraint satisfaction phase select propositions network preferred 
example system may need select action perform interface 
action representations added network construction phase action selected integration phase 
action performed cycle initiated 
various models basic process select things actions 
original system cycles select different interpretations sentences 
main kinds cycles licai type selects actions generates goals selects goals 
contrast hci tasks modeled byrne hohci chapter page production system architectures systems goals usually included knowledge system 
true licai fact knowledge licai modelers quite minimal 
particular application licai modeling users knew macintosh tasks word processing asked plot data macintosh program called group users worked microsoft excel included basic knowledge macintosh gui knowledge graphing 
supply model goal hierarchy polson gave model somewhat minimal instructions subjects 
major jobs licai model generate appropriate goals arose attempting carry instructions 
illustrates strengths cognitive architecture model hci tasks 
polson develop theory text comprehension licai able comprehend instructions subjects licai architecture originally designed text comprehension essentially got functionality 
additionally include just text comprehension engine empirically validated predictions people represent text read 
claim model started roughly knowledge users highly credible 
actual behavior model revealing exhibits exploratory behaviors users 
model pursues general strategy classified label polson 
model users strong tendency examine screen label matching nearly matching near synonym key word task instructions 
particular subtask pursued model contained steps labeled users rapid model predicted 
prediction counter intuitive important note licai programmed strategy 
strategy naturally emerges normal operation construction integration linkages created shared arguments 
intuitive result byrne hohci chapter page modeled successfully licai effect number screen objects 
exploration task users slower choices objects screen items classified poor labels 
presence labels literal match near synonym number objects screen affect decision times users licai 
programmers implemented programs operated users put clever direct manipulation tricks 
example change properties graph axis double clicks axis dialog box specifying properties axis appears 
microsoft excel functionality easily accessed drag drop 
majority encounters kind direct manipulations users required hints experimenter able continue minutes exploration 
licai fails interactions appropriate links formed kind task goal unlabeled apparently static screen objects construction phase 
screen objects tend receive little activation integration phase actions involving objects selected 
licai excellent job capturing empirical regularities exploratory learning gui interface 
important issue interfaces particularly interface aimed walk audience 
currently common walk interfaces atms provide simple functionality enormously difficult case sophisticated systems information kiosks 
licai updated renamed comprehension linked model deliberate search polson handle interaction web pages 
involves goals considerably elucidated interfaces wider range semantic content 
order help deal complexities licai updated robust attentional mechanism sophisticated notion semantic similarity latent semantic analysis lsa landauer byrne hohci chapter page dumais 
shows effects poor labels poor hierarchical organization web navigation getting lost way real users 
promising tool analysis semantically rich functionality poor domains web 
interestingly pirolli card implemented similar model modified version act term act stands information forager systems ultimately converge diverge simply complement open question 
soar development soar generally credited allan newell especially newell soar model wide variety human cognitive activity reasoning newell flying combat aircraft simulated jones 
soar newell candidate unified theory cognition computational theory offered 
soar production system possible think soar level 
guiding principle design soar principle model human processor problem space principle 
soar casts cognitive activity occurring problem space consists number states 
states transformed application operators 
consider soar playing simple game tic tac toe player problem space set states tic tac toe board large space 
operators available state space placing available open spaces board 
obviously simplified example problem space available operators flying simulated radically complex 
soar operation cyclic central cycle soar operation called decision cycle 
essentially decision cycle soar answers question soar phases 
productions match current contents declarative memory fire 
usually causes changes declarative memory productions may match 
productions allowed fire continues new productions fire 
time decision procedure gets executed soar examines special kind declarative memory byrne hohci chapter page element preference 
preferences statements possible actions example operator better current operator rejected state soar examines available preferences selects action 
decision cycle may contain production cycles 
modeling human performance convention decision cycle lasts ms productions soar low level encapsulating knowledge small grain size 
distinguishes soar productions production systems 
ubiquitous application problem space principle soar defining characteristics come mechanisms developed specifically soar universal subgoaling general purpose learning mechanism 
depends universal subgoaling described 
features soar decision process guaranteed unambiguous set preferences 
alternately may preferences listing acceptable action 
system know acceptable operators current state system lacks knowledge apply best operator 
reason decision procedure unable select action impasse said occur 
halting entering kind failure state soar sets new state new problem space goal resolving impasse 
example multiple operators proposed goal new problem space choose proposed operators 
course resolving impasse soar may encounter impasse create new problem space 
long system provided fairly generic knowledge resolving degenerate cases fails choose randomly operators universal subgoaling allows soar continue cases little knowledge 
learning soar product universal subgoaling 
impasse resolved soar creates new production rule 
rule summarizes processing went substate 
resolution impasse change superstate state impasse originally occurred change called result 
result condition side new production 
condition side production generated byrne hohci chapter page dependency analysis looking declarative memory item matched course determining result 
soar learns learns new production rules learns result resolving impasse 
important realize impasse equated failure inability proceed problem solving may arise simply example multiple actions take soar choose 
soar regularly problem solving learning pervasive soar 
surprisingly soar applied number learning oriented hci situations 
best examples altmann altmann john altmann 
altmann collected approximately minutes data experienced programmer worked understanding updating large computer program examining trace 
data included verbal protocols thinking aloud log actions taken scrolling 
minutes programmer scrolled back find piece information previously displayed 
altmann constructed soar model activity 
model kind comprehension model attempts gather information environment complete model complex knowledge experienced programmer 
model attends various pieces display attempting comprehend sees issues commands 
comprehension context models manifested model attempt retrieve information object comprehended 
item attended creates altmann termed episodic trace production notes object seen particular time 
learning pervasive soar creates new rules 
dependency learning mechanism new productions quite specific context impasse originally occurred 
index model fairly extensive episodic memory consists specific cues usually display 
seeing particular variable name trigger memory having previously seen variable name 
importantly memory generated automatically need model deliberately set goals remember particular items 
byrne hohci chapter page altmann john primarily description model altmann discusses hci ramifications kind episodic memory trace discusses terms display clutter 
avoiding display clutter hardly new advice generally argued avoided visual reasons 
altmann model shows display clutter serious implications effective episodic memory 
clutter create enormous demands retrieval 
objects generally attended cluttered display episodic trace large lowering predictive validity single cue 
certainly reasonable account surface kind analysis generated guided cognitive architecture provided omnipresent learning soar 
second implication altmann model surprising potential utility browsing 
simple browsing creates episodic trace objects encountered regardless intent browsing complex interface may pay learning curve 
course effective interface structured correctly order best support retrieval episodic trace clear exactly best organization support browsing 
soar implement models exploratory learning somewhat spirit licai 
prominent models called rieman young howes related model called task action learner howes young 
models attempt learn unfamiliar gui interfaces 
operates graphing domain licai task action starts knowledge learns basic gui operations open file 
brevity described detail 
goes scanning processes licai rely different mechanisms evaluation soar fundamentally different licai 
models evaluation various display elements search multiple problem spaces internal search soar internal knowledge search display 
items evaluated search soar learns productions summarize products evaluation 
search broad shallow item receiving byrne hohci chapter page minimum elaboration 
prior elaboration guides round elaboration gradually allowing focus best items 
model suggests number ways interface designers help learners acquire new knowledge needed utilize new interface 
licai highlights need labels guide exploration 
radical suggestion subtle behavior users 
exploring evaluating alternatives long pauses occur particular menu items 
long pauses attempting determine outcome selecting menu item considered 
suggestion speeding learning new menu driven gui detect pauses show easily way results selecting item 
instance choosing item brings dialog box specifying certain options dialog box shown grayed form simply vanish user moved menu item 
evaluation item certain excellent guide novice users 
toolbar icons larger scale 
model excellent job highlighting power cognitive architectures soar nelson lehman john 
stands nasa test director responsible coordinating facets testing preparation space shuttle launched 
complete checklist launch procedures current form consists pages manuals graphical timetables describing critical timing particular launch events 
accomplish talks extensively members launch team way radio 
addition maintaining understanding status entire launch responsible coordinating troubleshooting attempts managing communication members launch team necessary expertise 
constructing model able perform task significant accomplishment 
nelson lehman john able build model byrne hohci chapter page model able produce timeline behavior closely matched timeline produced actual modeled 
ultimate result quantitative model human performance accurate 
effort accomplished integrated cognitive architecture 
soar model soar models 
nelson lehman john generate implement theory natural language understanding model communication reading pages checklist constructed soar lewis 
construct model visual attention manage scanning visual search pages model existed soar 
great deal knowledge engineering go understand model complex task integrated architecture greatly eased task modelers 
modeling effort aimed particular hci problem difficult see applicable 
wanted replace page checklist personal digital assistant pda pda evaluated 
world able devote time participatory design usability testing 
appropriate quantitative model exists possible give model simulated pda assess impact change model performance 
model perfectly capture effects change model identify problem areas guide developers time actual 
soar basis simulated agents jones 
model tacair soar participates virtual humans participate 
tacair soar models take variety roles environment fighter pilots helicopter crews planes 
cognitive architecture function agents environment 
interactions complex simple scripted agents interact humans environment english natural language 
byrne hohci chapter page ambitious model containing production rules 
major goals project sure tacair soar produces human behavior critical role serve part training scenarios human soldiers 
large scale simulations entities cheaper computer agents humans fill role simulation 
agents ubiquitous generally disliked clip widely penetrated common desktop interface remains active hci research area agents roles cognitive architecture engineering oriented ai models 
applications soar hci related problems 
ritter baxter jones young report number soar models gui tasks 
applicability soar development quantitative theory hci clear 
soar particular strengths regard relative architectures covered chapter 
particular soar focussed learning systems learnability clearly important property user interfaces 
second known soar models scale complex tasks soar tacair soar tasks complexity modeled architectures 
epic possible exception model models discussed point purely cognitive models 
perception action parts models handled indirect way 
models focus cognition involved surprising generally cognitive background systems 
original formulation mhp included processors perception motor control 
fact user interfaces moved having exclusively cognitive demands remember problem solve generate command names relying heavily perceptual motor capabilities 
gui shift visual processing direct manipulation reliance complex composition commands 
byrne hohci chapter page providing accurate quantitative models kind activity requires system detailed models human perceptual motor capabilities 
major foci contributions epic executive process interactive control 
epic kieras meyer see especially kieras wood meyer 
structure processors memories epic shown 
certainly bears surface similarity mhp epic substantially detailed 
epic explicitly designed pair high fidelity models perception motor mechanisms production system 
perceptual motor processors represent new synthesis human performance literature production system cct discussed earlier 
insert constructing model epic requires specification knowledge needed form production rules relevant perceptual motor parameters 
number processors quite number numeric parameters epic 
types parameters epic standard system parameters believed fixed tasks typical free vary task situations conventional values 
standard parameter epic duration production cycle cognitive processor ms example typical value time takes visual processor recognize particular shape represents right arrow ms processors epic run parallel 
visual processor recognizing object screen cognitive processor deciding word spoken response input time manual motor processor pressing key 
information flow typical traditional psychological models information coming eyes ears outputs coming mouth hands 
specifically modeled processors primarily time course 
epic visual processor take raw pixels input compute pixels represent letter determines object screen seen level detail long take representation object delivered epic declarative byrne hohci chapter page memory letter available visual processor 
appearance letter cause number different elements deposited epic declarative memory different times example information letter color delivered information letter identity 
similarly motor side epic simulate computation torques forces needed produce particular hand movement 
epic computes time take particular motor output produced cognitive processor requested 
complicated fact movements happen phases 
importantly movement includes preparation phase execution phase 
time prepare movement dependent number movement features prepared movement features movement prepared 
features prepared previous movement re saving time 
epic repeated identical movements rapidly feature preparation time necessary movements identical 
identical amount savings function different current movement previous 
prepared movement executed 
execution time movement corresponds roughly time physically takes execute movement execution time aimed movements hands fingers governed fitts law described section 
epic motor processors prepare movement time execute movement time may preparing movement executing 
tasks may possible pipeline movements effectively order generate rapid sequences movements 
epic cognitive processor production system earlier cct 
highly salient feature system multiple rules allowed fire production cycle 
fact upper bound number productions fire cycle 
productions system higher grain size productions soar gives epic highly parallel quality levels 
processors parallel epic cognitive processor capable parallel processing 
byrne hohci chapter page allows epic particular leverage multiple task situations 
task performed tasks execute parallel 
perceptual motor processors effectively serial 
people set eyes aimed place time multiple tasks ongoing require eyes 
epic additional knowledge manage multiple tasks termed executive knowledge productions implement knowledge execute parallel productions implementing task knowledge 
machinery extra knowledge necessary 
world hci changing 
gui forced designers analysts consider seriously perceptual motor constraints propagation computers user interfaces away desktop mobile phones kiosks automobiles places creates huge demand people ability multi task 
multiple task issues largely gone unmodeled outside theoretical scope psychological accounts hci epic 
licai soar adequately equipped deal high performance perception action components tasks epic equipped handle issues covered architectures 
particular epic include learning mechanisms difficult generate epic models domains soar approached successfully 
fatal shortcoming wide variety domains learning enormously key component high fidelity modeling perception action multiple tasking central 
kinds domains epic applied 
major applications epic deceptively simple dual task paradigm known psychological refractory period prp see meyer kieras 
task laboratory subjects typically confronted choice reaction time tasks order red light green light appear red hit key green hit key sounds simple empirical literature rich shows variety subtle effects epic provides unified account 
critically epic models experiments show people byrne hohci chapter page low level strategies scheduling tasks play large role determining performance simple paradigm 
epic model classic psychological results short term memory working memory literature kieras meyer muller seymour 
concerns question people remember repeat string words numbers 
example reads telephone number dial number moments person remember number speaks number repeatedly 
called articulatory rehearsal psychology literature phenomenon described detail years epic serious quantitative model process 
accurate model process clearly important hci applications interfaces force people remember things short periods rehearsal response demand 
field better answer understanding problem simply reduce working memory demand certainly advice precise performance prediction warranted 
epic model tasks hci oriented flavor 
tasks menu selection kieras meyer hornof kieras brevity detailed description models omitted 
application epic definitely merits mention model telephone assistance operators taos data originally gray john atwood 
telephone customer dials tao person answers 
taos modeled sat dumb terminal style workstation assisted customers completing telephone calls 
particular taos determine calls done speaking customer 
detailed epic models kieras wood meyer covered subset possible billing types 
provided test epic task performed time pressure seconds milliseconds counted task performance 
second task multimodal 
tao speak type listen look display 
third fine grained performance data byrne hohci chapter page available help guide model construction 
come surprise reader possible construct epic model excellent job modeling time course tao interaction customer 
modeling effort went just provided insight knowledge engineering problem facing modelers utilizing cognitive architectures 
production system models epic provides certain amount freedom modeler model construction 
architecture provides certain kinds constraints constraints critical doing science affecting final form model howes young modeler leeway writing production rules model 
true production rule model derived structured representation goms model case tao model 
epic possible write set aggressive productions maximize system ability process things parallel possible write number aggressive sets representing conservative strategies 
epic produce quantitative performance prediction regardless strategy kind strategy modeler choose 
generally priori basis decision clear people accurately self report low level decisions 
kieras wood meyer generated elegant approach problem termed bracketing kieras meyer 
idea construct models maximally aggressive version 
strategy spectrum models contain little way cognition 
cognitive processor virtually deliberation spends cycles simply reading perceptual inputs immediately generating appropriate motor output 
represents super expert performance limited entirely rate information flow peripherals 
spectrum model incorporating slowest reasonable strategy produced 
slowest reasonable strategy basic task requirements met strategic effort optimize scheduling produce rapid performance 
idea observed performance fall byrne hohci chapter page extremes 
different users tend perform different ends range different tasks excellent way accommodate individual differences observed real users 
discovered employing bracketing procedure tao models surprising 
despite fact taos considerable time pressure extremely practiced experts performance rarely approached fastest possible model 
fact performance closely matched version model termed hierarchical motor parallel model version model eye hand vocal movements executed parallel possible furthermore motor processor somewhat aggressively preparing movement current movement progress 
primary place epic faster data indicated taos description task knowledge 
possible represent knowledge task single flat goms method subgoals 
hand epic productions represent full subgoal structure traditional goms model 
retaining hierarchical representation incurring time costs goal management provided best fit taos performance 
provides solid evidence psychological reality hierarchical control structure inherent goms analysis practised experts fairly regular domains abandon kind faster knowledge structure 
final epic model considered model task heitmeyer perez 
model appeared kieras meyer richer version model described detail kieras meyer 
display split screen right half display user confronted manual tracking task performed joystick 
left half display tactical task user classify objects hostile neutral behavior 
versions interface tactical task command line style interface keypad direct manipulation style interface touchscreen 
byrne hohci chapter page performance measure interest task time taken respond events appearance new object change state object tactical display 
task suited epic perceptual motor demands fairly extensive 
task interesting 
interesting human performance data cases keypad interface faster touchscreen interface cases yielded identical performance cases touchscreen faster 
general claims superiority guis apply case precise detailed account necessary 
epic provides just tools necessary 
models constructed interface bracketing approach 
results revealing 
fact fastest possible models showed performance advantage interface 
apparent direct manipulation advantage touchscreen initial target selection perfectly offset type ahead advantages keypad 
reason inconsistent results users generally operate speed fastest possible model tended brackets interfaces 
tended upper slowest reasonable bracket touchscreen interface 
suggests advantage keypad interface caveat slowest reasonable performance bound touchscreen faster slowest possible keypad 
strategy changes users course doing task dynamic response changes workload affect interface superior particular point task 
results interface faster inconsistent exactly 
kind analysis impossible conduct clear quantitative human performance model 
constructing applying model suggested alternative interface certainly faster speech driven interface 
major performance bottlenecks task hands voice interaction case faster 
clearly identified kind precise quantitative modeling enabled epic architecture 
byrne hohci chapter page despite epic architecture considered complete architecture include learning mechanism unsuitable kinds interfaces tasks modeled licai soar 
licai soar conversely considered incomplete lack detailed specification perceptual motor processors definition complete cognitive architecture entirely clear point 
incompleteness acknowledged epic community soar community experimentation done union architectures soar place epic cognitive processor 
fusion called epic soar initial results promising 
example chong laird demonstrated soar learn complex executive knowledge needed manage dual task situation combination tracking task simple decision making task epic 
john looked task slightly different version epic soar effectively negated cognitive parallelism epic 
things cognitive parallelism epic necessary performance particular task true tasks open question 
epic soar uncertain point fact integration possible viable produced running models encouraging complete vision cognitive architecture 
act pm act pm byrne anderson press byrne represents approach fully unified cognitive architecture combining broad model cognition rich perceptual motor capabilities 
act pm extension act cognitive architecture anderson anderson lebiere set perceptual motor modules epic act pm 
act long history cognitive psychology various versions theory developed years 
general act family theories concerned modeling results psychology experiments certainly true current incarnation act 
anderson lebiere shows byrne hohci chapter page range covering areas diverse list memory chapter choice chapter scientific reasoning chapter 
act originally designed model things multimodal multiple task situations epic designed handle 
act certainly moving application gui style interactions anderson lebiere fully developed epic 
fact standard version act incapable showing kind time savings simple dual task situation operation entirely serial 
issue corrected inclusion pm portion act pm 
ways act pm fusion epic act spirit epic soar 
differences extent differences result serious differences models hci domain clear 
act system heart act pm epic soar production system activity centered production cycle set ms duration 
differences act architectures 
act fire production rule cycle 
multiple production rules match cycle arbitration procedure called conflict resolution comes play 
second act developed theory declarative memory 
epic soar declarative memory elements act simply symbols 
declarative element act associated activation value determines rapidly may accessed 
third act contains learning mechanisms pervasive learning system sense soar 
mechanisms rational analysis anderson information needs adaptive cognitive system 
example consider conflict resolution 
production act associated numeric parameters including numbers represent probability production fires goal reached cost time incurred production fires 
values combined formula trades probability success vs cost produces expected gain production 
matching production byrne hohci chapter page highest expected gain gets fire conflict resolution invoked 
expected gain values noisy system behavior somewhat stochastic probability cost values learned time act adapt changing environments 
similarly activation elements declarative memory bayesian analysis probability declarative memory element needed particular time 
function general utility element reflected termed base level activation element association current context 
frequently element accessed higher base level activation easier retrieve 
value changes time frequency recency value learned 
associations elements may learned activation element receives association current context change 
mechanisms helped enable act successfully model wide range cognitive phenomena 
act pm basic act production system augmented epic peripheral modules depicted 
epic modules run parallel giving act ability overlap processing 
peripheral modules come variety sources 
act pm vision module act visual interface described anderson lebiere 
feature attentional visual system explicitly model eye movements 
vision module extended include eye movement model 
motor module nearly identical manual motor processor epic directly specification kieras meyer speech module similarly derived epic 
audition module hybrid auditory system epic attentional system act pm vision module 
insert important property act pm possible act pm interact software human users modeled 
fairly restrictive byrne hohci chapter page conditions software developed conditions met user model forced software 
reduces number degrees freedom available modeler impossible force unpleasant modeling details model user interface model user interface 
said issue section 
described section epic multiple tasking increasingly critical hci endeavors 
major modeling efforts act pm dual task phenomena fact kinds simple prp dual tasks epic applied byrne anderson press 
architecture described act pm widely applied hci tasks 
models directly hci endeavors prp 
example comes dissertation 
things developed act pm model fairly simple subtle experiment 
experiment subjects shown target color asked click button yield color 
buttons types blank arbitrary icon text label color 
color condition task simple users just color matched target clicked button 
text label condition task slightly difficult users read labels buttons select correct description matched color 
arbitrary icon condition random pictures appeared icon mailbox 
users memorize picture color mapping discover trial error memorize location color buttons change function time 
hardest condition blank condition users simply memorize mapping button location color discover trial error 
clearly conditions produce different average response times produced somewhat different learning curves time 
added additional manipulation performing task time labeling removed 
surprisingly amount disruption different different conditions byrne hohci chapter page reflecting amount incidental location learning went subjects performed task 
act pm model constructed excellent job explaining results 
model represented screen built visual mechanisms act pm learned mappings color location act standard associative learning mechanisms 
initial difference various conditions reproduced learning curves 
model suffered disruptions similar suffered human users labels removed 
model excellent demonstration power act pm exercising perceptual motor capabilities system graded learning act rational analysis driven mechanisms 
describes act pm model tests act pm ability handle multimodal high performance situations compelling task model drives automobile driving simulator 
robotics project act pm model turn steering wheel manipulate communicates automobile simulation software 
model primary job maintain lane position car drives road 
adds additional task particularly interesting model dials telephone numbers variety mobile phone interfaces 
factors crossed telephone manually keypad vs voice full telephone number needed vs shortened speed dial system 
model validated comparison data human users 
model human users showed dialing driving faster dialing driving steering performance disrupted telephone dialing 
surprisingly disruptive interface full manual interface full phone numbers keypad 
due largely fact dialing keypad requires visual guidance causing model users take eyes road 
little disruption associated voice interfaces regardless full numbers speed dial 
byrne hohci chapter page nice illustration value cognitive architectures number reasons 
basic driving model simply re task re implemented 
second model provides excellent quantitative fit human data 
third excellent example situation testing human users difficult 
testing human drivers interfaces degrade driving performance dangerous simulators generally kind evaluation 
maintaining driving simulator requires great deal space quite expensive 
wanted test variant telephone interface faster cheaper give interface model recruit test human drivers 
published ongoing applying act pm hci problems byrne gray space considerations prohibit exhaustive review 
vitality research effort suggests act pm combination perceptual motor modules strong theory cognition pay dividends hci research tool 
fact limited act pm cognitive architectures exciting active area hci research 
systems described take slightly different approaches focus slightly different aspects various hci problems clearly great deal cross 
lessons learned advancements architecture affect systems example development epic peripheral systems clearly impacted soar act 
comparisons exhaustive detailed comparison major cognitive architectures scope chapter excellent comparison includes number architectures pew 
certainly production systems soar epic act pm related major difference original focus originally developed model slightly different aspects human cognition 
develop appears convergence divergence 
generally taken byrne hohci chapter page sign science differences certainly production systems licai 
relevant comparisons summarized table 
insert table table include hybrid epic soar system clear store system system essentially contain attributes soar get detailed perceptual motor systems feature 
entries table discussed previously exception 
support learning discussed section 
presence size user community discussed clear role community plays predictions system 
may relevant researchers reasons particularly trying learn system 
addition values table change 
example pervasive learning mechanism act part revision theory 
result act successful soar modeling things exploratory learning clear 
difficult classify value architecture particular attribute advantage disadvantage constitutes advantage modeling phenomenon may disadvantage modeling 
example consider learning soar 
certainly attempting model improvement users time particular interface soar learning mechanism critical 
applications modeling learning critical soar pervasive learning feature occasionally causes undesired side effects model construction difficult 

cognitive architectures hci incremental development application architectures soar act pm hold cognitive architectures hci 
challenges faced ultimate promise 
currently number important limitations cognitive architectures 
questions address questions hard see byrne hohci chapter page address 
limitations pragmatic principle relevant 
wide array hci problems simply outside scope current cognitive architectures 
right architectures focus cognition performance aspects hci user preference boredom aesthetics fun 
important challenge overcome architectures generally applied social situations encountered groupware online communities olson olson volume preece volume 
principle impossible implement model social interaction cognitive architecture knowledge engineering problem certainly difficult 
characterize implement knowledge social situations precision implemented production system 
may ultimately possible happen anytime soon 
problem entirely resolved matter diligent modelers knowledge engineering problem 
model constructed cognitive architecture needs knowledge user interface tasks 
integrating models knowledge engineering demands entering new domain may reduced nice example eliminated 
requirement persist architecture contain perfect theory human learning considerable done meet goal 
barrier widespread cognitive architectures hci architectures large complex pieces software ironically little done usable novices 
example epic packaged user friendly manner full fledged lisp programming expertise required simulation package introductory tutorial user manual kieras meyer 
situation slightly better soar frequently asked questions web resource ritter ist psu edu soar faq tutorial materials byrne hohci chapter page www psychology nottingham ac uk staff frank ritter pst pst tutorial html 
soar reputation difficult learn 
tutorial materials documentation examples act available years week summer school interested learning act see act psy cmu edu 
resources act pm somewhat limited rudimentary examples documentation see rice edu byrne rpm 
limiting factor implementation 
order cognitive architecture accurately model interaction interface able communicate interface 
user interfaces closed pieces software built support supplying cognitive model information needs perception screen accepting input model creates technical problem 
interface model connected 
excellent summary problem ritter 

number different approaches taken 
general epic solution problem re implement interface modeled lisp model interface communicate direction function calls 
act pm solution entirely dissimilar 
general act pm applied relatively new experiments interfaces initially implemented lisp act pm interface communicate function calls 
order facilitate construction models reduce modeler degrees freedom implementing custom interface strictly model act pm provide abilities automatically manage communication interface built native gui builder macintosh common lisp macos common lisp windows 
interface implemented way human users models interact interface 
despite limitations particularly exciting time involved research cognitive architectures hci 
synergy areas cognitive architectures certainly useful hci hci useful cognitive architectures 
hci complex rich tractable domain ideal candidate testing cognitive byrne hohci chapter page architectures 
hci tasks realistic require integrated capabilities typical cognitive psychology laboratory experiments cognitive architectures best theoretical tools available psychology 
theories epic soar act pm complete psychological models go perception cognition action detail 
significant advance holds great deal promise 
limitations generated solid research attempt overcome 
example ritter 
describes implementation generic sim eye sim hand part general program researching term cognitive model interface management systems 
instance implemented virtual hand eye tcl tk interact soar act socket interface 
trivial technical accomplishment may serve help easier develop computational cognitive models interact software systems 
intriguing development line st riedl 
implemented system called directly parses screen bitmap windows systems 
windows display windows display parse identify things text scroll bars gui widgets 
facilities simulating mouse keyboard events 
intriguing development principle possible connect architecture epic act enable architecture potentially windows application native form 
number technical details worked potential fulfilling visions held cognitive architecture community high fidelity virtual user potentially application combination applications 
providing wide array new domains researchers real interest practitioners opens door degree automated usability testing 
idea new byrne wood sukaviriya foley kieras st technical scientific issues precluded adoption limited scale 
eliminate need human usability testing see ritter byrne hohci chapter page young clear discussion point reasons listed significantly change usability engineering practice long run 
architectures continue updated applied tasks interfaces 
new version version act currently development new version definitely influenced issues raised pm system numerous hci concerns 
new applications epic result new mechanisms similarity decay verbal working memory storage kieras new movement styles click point hornof kieras 
applications world wide web drive models semantically rich domain areas tasks involve greater amounts problem solving candidates modeling 
need truly quantitative engineering models grow user interfaces propagate places tasks 
cognitive architectures firmly established niche hci promising road models 
architectures expand range application fidelity humans attempting model niche expand 
hci excellent domain testing cognitive architectures continue fruitful way street 
byrne hohci chapter page altmann 

near term memory programming simulation analysis 
international journal human computer studies 
altmann john 

episodic indexing model memory attention events 
cognitive science 
anderson 

adaptive character thought 
hillsdale nj erlbaum 
anderson 

rules mind 
hillsdale nj erlbaum 
anderson conrad corbett 

skill acquisition lisp tutor 
cognitive science 
erlbaum 
anderson lebiere 

atomic components thought 
mahwah nj anderson lebiere 

act theory higher level cognition relation visual attention 
human computer interaction 
heitmeyer perez 

evaluating aspects direct manipulation advanced 
proceedings acm chi conference human factors computing systems pp 

new york acm 
bovair kieras polson 

acquisition performance text editing skill cognitive complexity analysis 
human computer interaction 
byrne 

act pm menu selection applying cognitive architecture hci 
international journal human computer studies 
byrne anderson 

perception action 
anderson lebiere eds atomic components thought pp 

hillsdale nj erlbaum 
byrne anderson douglass 

eye tracking visual search click menus 
acm chi conference human factors computing systems pp 

new york acm 
byrne bovair 

working memory model common procedural error 
cognitive science 
byrne hohci chapter page byrne wood sukaviriya foley kieras 

automating interface evaluation 
acm chi conference human factors computing systems pp 

new york acm press 
card moran newell 

psychology human computer interaction 
hillsdale nj erlbaum 
chong laird 

identifying dual task executive process knowledge epic soar 
langley eds proceedings nineteenth annual conference cognitive science society pp 

hillsdale nj erlbaum 


learning look acquisition location knowledge display interaction 
unpublished doctoral dissertation george mason university fairfax va 

exploration acquisition retention skill display systems 
unpublished doctoral dissertation university colorado boulder 
gray john atwood 

project validating goms analysis predicting explaining real world task performance 
human computer interaction 
gray young 

special issue cognitive architectures human computer interaction 
human computer interaction 
hornof kieras 

cognitive modeling reveals menu search random systematic 
proceedings acm chi conference human factors computing systems pp 

new york acm 
hornof kieras 

cognitive modeling demonstrates people anticipated location knowledge menu items 
proceedings acm chi conference human factors computing systems pp 

new york acm 
howes young 

learning consistent interactive meaningful task action mappings computational model 
cognitive science 
byrne hohci chapter page howes young 

role cognitive architecture modeling user soar learning mechanism 
human computer interaction 
lerch junker kass 

working memory failure phone interaction 
acm transactions computer human interaction 
john kieras 

goms family user interface analysis techniques comparison contrast 
acm transactions computer human interaction 
jones laird nielsen kenny 

automated intelligent pilots combat flight simulation 
ai magazine 
just carpenter 

capacity theory comprehension individual differences working memory 
psychological review 
kieras bovair 

acquisition procedures text production system analysis transfer training 
journal memory language 
kieras meyer 

epic architecture principles operation 
available ftp ftp eecs umich edu people kieras ps 
kieras meyer 

overview epic architecture cognition performance application human computer interaction 
human computer interaction 
kieras meyer 

role cognitive task analysis application predictive models human performance 
chipman eds cognitive task analysis pp 

mahwah nj erlbaum 
kieras meyer mueller seymour 

insights working memory perspective epic architecture modeling skilled perceptual motor cognitive human performance 
miyake shah eds models working memory mechanisms active maintenance executive control pp 

new york cambridge university press 
byrne hohci chapter page kieras meyer 

direct manipulation cognitive modeling charts gulf execution proceedings acm chi conference human factors computing systems pp 

new york acm 
kieras polson 

approach formal analysis user complexity 
international journal man machine studies 
kieras wood meyer 

predictive engineering models epic architecture multimodal high performance human computer interaction task 
transactions computer human interaction 
university press 
kintsch 

comprehension paradigm cognition 
new york cambridge polson 

comprehension model exploration 
human computer interaction 
polson 

comprehension model web navigation application web usability analysis 
mcdonald cockton eds people computers xiv usability 
proceedings hci pp 

new york springer 
john 

cognitive architecture modeling idiom examination models wickens task 
gernsbacher eds proceedings twentieth annual conference cognitive science society pp 

hillsdale nj erlbaum 
landauer dumais 

solution plato problem latent semantic analysis theory acquisition induction representation knowledge 
psychological review 
lewis 

architecturally theory human sentence comprehension 
unpublished doctoral dissertation university michigan ann arbor 
byrne hohci chapter page meyer kieras 

computational theory executive cognitive processes multiple task performance basic mechanisms 
psychological review 
nelson lehman john 

integrating cognitive capabilities real time task 
ram eiselt eds proceedings sixteenth annual conference cognitive science society pp 

hillsdale nj erlbaum 
newell 

play questions nature win projective comments papers symposium 
chase ed visual information processing 
new york academic press 
press 
newell 

unified theories cognition 
cambridge ma harvard university newell simon 

gps program simulates human thought 
feigenbaum feldman eds computers thought pp 

cambridge ma mit press 
pew 
eds 

modeling human organizational behavior application military simulations 
washington dc national academy press 


pirolli card 

information foraging 
psychological review newell 

deduction verbal reasoning 
psychological review polson lewis rieman wharton 

cognitive walkthroughs method theory evaluation user interfaces 
international journal man machine studies 
polson 

test common elements theory transfer 
proceedings acm chi conference human factors computing systems pp 

new york acm 
byrne hohci chapter page rieman young howes 

dual space model iteratively deepening exploratory learning 
international journal human computer studies 
ritter baxter jones young 

cognitive models users 
acm transactions computer human interaction 
ritter young 

embodied models simulated users special issue cognitive models improve interface design 
international journal human computer studies 


initiating formalization theories cognitive aging 
psychology aging 


integrated model eye movements visual encoding 
cognitive systems research 


predicting effects car interface driver performance integrated model approach 
international journal human computer studies 
gray 

argus prime modeling emergent complex simulated task environment 
eds proceedings third international conference cognitive modeling pp 

nl universal press 
simon 

sciences artificial rd ed 
cambridge ma mit press 
anderson 

transfer cognitive skill 
cambridge ma harvard university press 

st 
summer 
interface agents surrogate users 
intelligence magazine st riedl 

perception action substrate cognitive modeling hci 
international journal human computer studies 
byrne hohci chapter page 

formatting alphanumeric displays review analysis 
human factors 


operator model covert visual attention 
unpublished doctoral dissertation university michigan ann arbor 
young barnard simon 

favorite user model cope scenarios 
acm sigchi bulletin 
byrne hohci chapter page table architecture feature comparison 
licai original focus text comprehension basic cycle symbolic 
architectural goal management detailed systems learning mechanisms large integrated models extensive natural language support learning system user community outside researchers developed system 
soar epic act pm learning problem solving multiple task performance decision cycle production cycle parallel memory problem solving production cycle serial symbolic symbolic special cycle types supports vague goals universal subgoaling goal stack pervasive pervasive faq tutorial materials primarily ai extensive tutorial materials summer school growing primarily psychology byrne hohci chapter page 
model human processor 
card moran newell 
visual image store vis msec vis physical vis letters long term memory ltm ltm ltm semantic working memory auditory image store msec ais letters ais physical ais perceptual processor msec eye movement msec chunks wm wm chunks wm sec wm chunk sec wm chunks se acoustic visual wm cognitive processor msec motor processor msec byrne hohci chapter page 
structure epic architecture 
kieras meyer 
task environment simulated interaction devices auditory input visual input long term memory production memory auditory processor visual processor ocular motor processor vocal motor processor manual motor processor cognitive processor production rule interpreter working memory tactile processor byrne hohci chapter page 
structure act pm architecture 
byrne anderson 
production memory declarative memory cognitive layer target attention chunks attention target attention chunks attention vision module motor module speech module audition module perceptual motor layer screen objects clicks simulated speech simulated audio environment byrne hohci chapter page 
