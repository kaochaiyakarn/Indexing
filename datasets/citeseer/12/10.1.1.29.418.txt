page quantum treemaps zoomable image browser benjamin bederson human computer interaction laboratory computer science department institute advanced computer studies university maryland college park md bederson cs umd edu www cs umd edu hcil photomesa describes algorithms laying groups objects space filling manner 
quantum treemaps variation existing treemap algorithms designed laying images objects indivisible quantum size 
build ordered treemap algorithm guarantees generated rectangle width height integral multiple input object size 
fill space groups quantum sized objects generate blobs utilize space efficiently 
algorithms applied photomesa application supports browsing large numbers images 
photomesa uses zoomable user interface simple interaction designed novices family 
keywords zoomable user interfaces treemaps image browsers animation graphics jazz 
years information retrieval systems multimedia including systems concentrating images 
systems focus specifying queries presenting results manner helps users quickly find item interest 
image searches particular relatively little new interfaces visualizations interaction techniques support users browsing images 
image browsing important number reasons 
matter information retrieval system user browse results search 
certainly important build query systems help users get results close wanted possible 
images need browsed visually final pick 
second reason needing new image browsers subtle primary motivation doing 
people browse images just screen snapshot photomesa images groups 
pleasure looking images people 
especially true personal photos 
people take digital family pictures need better tools support users home settings look pictures computer screen 
looking home photos lot overlap traditional retrieval systems 
people want able find photos particular people events time pressured find particular photo interested serendipity finding photos weren looking 
image browsing systems images grid thumbnails user scroll vertical scrollbar see high resolution version image mouse interaction 
alternatives manually constructed digital photo albums commercial zoomable image browser 
home life needed better tools look pictures year old daughter 
want spend time custom albums 
addition traditional software grid thumbnails scrollbars popup viewer windows unpleasant page context 
wanted concentrate images importantly looking photos daughter crucial able understand going controlling mouse 
motivated need tool support browsing images family started investigate techniques presenting collections images visual data 
done visualizing complex datasets surprisingly techniques available presenting images 
goal come mechanism able automatically layout groups images way offer simple interface browse giving access large set images context 
ended developing new algorithms called quantum treemaps 
quantum treemaps variation existing treemap algorithms 
treemaps family algorithms partition dimensional space regions area proportional list requested areas 
problem existing treemap algorithms return areas arbitrary aspect ratios 
requirement photo display regions show groups photos dimensions integer multiples dimensions photos sized contain quantum indivisible contents 
treemaps display images known treemaps display visual content images just size color rectangles visualize numerical attributes dataset 
generated grid recursive fill algorithm 
fill cells grid leaving unused space generate groups images approximately rectangular circular 
parallel developed photomesa image browsing application uses layout algorithms demonstrating effectiveness approach satisfying need comfortable image browsing tool 
photomesa organizes images dimensional grid images shared attribute directory location nearness time shared word filename grouped 
uses zooming primary presentation mechanism simple interaction techniques developed navigation straight forward eliminate possibility getting lost 
describes quantum treemap algorithms illustrates photomesa 
software described written java fully functioning described available url title 
related previously mentioned standard way users browse set images grid thumbnails vertical scrollbar 
clicking image usually brings window high resolution version image 
user manually manage open windows close longer needed 
commercial example approach offers clean interface fast interaction 
approach extended research group university maryland developing photofinder 
lets users organize photos collections displayed representative image user selects 
interface shows collections selecting collection displays traditional grid thumbnails 
photofinder avoid problem window management displaying high resolution photos pane interface 
photofinder concentrates interfaces managing searching database meta information browsing interface essentially polished traditional approach 
document lens technique uses fisheye distortion grid thumbnails documents mechanism zoom document readable size place 
document lens visualizes just single collection objects time 
looked automated algorithms clustering semantically related information presenting results visually 
built system digital library retrieval system showing available thesaurus results searches 
platt built system automatically clustering photos extracting representative photos cluster 
groups investigated applications images story telling sharing home 
personal digital historian project merl building circular display tabletop intended people interact images 
design includes search kinds metadata mechanism interacting images described detail 
group building dedicated portable storytelling device construction sequences images 
dedicated hardware interface selecting sequences images annotated audio played back telling story associated images 
pure software approach built zoomable user interfaces image browsing 
interfaces information large flat space user smoothly zoom space see information detail zoom get overview 
potential advantages easy comprehend give consistent easy interface getting overview information seeing detail 
author helped build earlier image browser called zib zoomable image browser 
zib combined zoomable presentation grid images search engine searched metadata history mechanism access previous searches 
zib page provided access single group images manual zooming difficult 
approach started zib continued new project creating interface elementary school aged children find multimedia information digital library 
project called presents visual results zoomable interface simpler interaction mechanism photomesa 
image browser currently available commercially canon called ex 
canon browser presents hierarchy images manually constructed imported disk hierarchy containment 
top level shows grid squares contain grid image thumbnails smaller squares show thumbnails uses layout similar earlier pad directory browser 
layout disadvantage directories size contents scaled fit images large directories scaled small unreadable 
interaction click square contents square smoothly zoomed 
clicking image brings traditional high resolution image viewer separate window 
clicking special zoom button zooms level hierarchy 
magnification mode zooms fixed amount click zooming level hierarchy 
aspect image browsing order presentation images 
rodden examined presentation order images affected designers abilities select interesting images larger set images arranged grid 
compared random order order content similarity visual similarity 
study showed designers liked range organization mechanisms 
placing images visually similar near wasn best images similar colors tended distinguishable near 
approach motivate importance grouping images content utility approach clearly depends users tasks 
photomesa demonstrate effectiveness new layout algorithms describe photomesa standalone application supports browsing large sets images 
allows user view multiple directories images zoomable environment uses set simple navigation mechanisms move space images 
supports clustering images metadata available file system 
requires set images disk require user add metadata manipulate images browsing making easy get started existing images 
zoomed view photomesa showing result zooming single directory 
photomesa written entirely java built jazz framework zoomable user interfaces 
name photomesa derives spanish word mesa means table commonly southwestern states describe natural volcanic plateaus high flat tops 
standing atop mesa see entire valley see overview photos photomesa 
start photomesa user opens directory set directories photomesa lays directories images space filling manner shown 
hierarchical directory structure read images displayed flattened non hierarchical manner 
rationale users looking images primarily interested groups photos structure groups 
addition interface presenting managing hierarchies groups complicated simplicity goals photomesa 
user moves mouse directory mouse highlighted label shown full may clipped wasn room display full label 
user clicks view smoothly zoomed directory 
highlight showing set images mouse lets user know images focused mouse clicked 
number images highlighted varies fill half screen user able quickly drill full resolution single image 
point user press right button enter key zoom previous magnification 
addition user double click image zoom way image avoid intermediate zoom levels user double right click zoom way top level 
user press alt left right arrows move back forth history views 
press arrow keys pan left right 
zoomed way full resolution image arrow keys stay current group images wrapping necessary 
page zoomed image visible arrow keys move directories user explore entire space 
times cursor left dwell image thumbnail short time thumbnail zoomed pixels wide 
preview immediately removed mouse moved 
necessary users authoring browse images photomesa allowed change color image groups group background colors assigned default 
easier sense large display images colored areas act landmarks known effective navigation aids 
photomesa supports drag drop users directly export images email applications 
photos significant mode photomesa automatically reduces resolution quality images dragged photomesa resulting resolution controllable user 
eliminates need go special processing step images 
support browsing primary goal photomesa desirable find images specific directory difficult scan labels space 
search pane left side available shows directories order 
label highlights corresponding group images clicking label zooms group 
addition search pane search box users search images words filename 
photomesa built started browse directories images realized way thinking photomesa doing presenting large set images clustered directory 
added support clustering data 
didn want require users add metadata photomesa just uses data available file system just file date name 
user selects view year photomesa groups currently opened photos year creates layout region year 
thing viewing month 
interesting clustering technique takes advantage fact people frequently give meaningful filenames images words image describe contents image 
user selects view filename words parses filenames open images creates cluster unique word filename tokenized standard delimiters filename extensions numeric tokens ignored 
image words filename ben eats cake image appear clusters ben eats cake 
directory images left images grouped filename words right 
photomesa computes multiple sized thumbnails image dynamically loads appropriate 
manner maintains performance large numbers images 
thumbnails created time image loaded cached special directory managed photomesa 
design photomesa presents inherent difference compared traditional scrolling thumbnail grids 
traditional approach advantage searchable navigating dimension vertical scrolling photomesa requires navigation dimensions typically harder users 
photomesa advantage user easily get overview zooming 
interaction user control trade number images shown resolution 
difference direct effect zooming nature photomesa 
vertically oriented grid thumbnails zoomed space unused side linear list display space largely wasted 
zoomable interface displays data inherently incompatible 
quantum treemaps treemaps family algorithms space filling partitions dimensional area 
treemaps take input list numbers rectangle 
partition area rectangles input number 
rectangles guaranteed fill input rectangle rectangles proportional area list input numbers 
treemaps designed applied hierarchically resulting rectangle contain treemap recursively 
additional properties treemap algorithms order aspect ratios close rectangles close squares 
rest aspect ratio defined max width height height width aspect ratio perfectly square aspect ratios larger rectangular 
order important easier users find items treemap display 
addition ordered displays easier track items change time ordered display item stay approximately place screen 
rectangles aspect ratios close desirable generally speaking visually page attractive 
addition humans able estimate area square accurately skinny rectangle goals treemaps area rectangle useful attribute 
algorithms provided properties 
original treemap algorithm shneiderman simple slice dice approach 
divided input rectangle single horizontal vertical list rectangles typically quite skinny 
algorithm applied recursively sub rectangle split opposite orientation parent 
algorithm generate ordered rectangles typically extreme aspect ratios 
important ensuing treemap algorithm called treemaps gave ordering created rectangles 
treemaps recursively dividing space laying rectangle part rest rectangles part list rectangles split optimizing resulting aspect ratios 
variation algorithm independently developed applet 
shneiderman wattenberg introduced ordered treemaps offer compromise solution resulting rectangles ordered somewhat aspect ratios generated treemaps 
approaches space filling algorithms considered typically nice properties treemaps harel assign size rectangles independent variable 
treemaps applied number domains visualizing hard disk usage stock market 
current usage treemaps date visualize dimensional dataset typically dimension mapped area rectangles computed treemap algorithm dimension mapped color rectangle 
label placed rectangles large accommodate user interact treemap get information objects depicted rectangles 
surprisingly published uses treemaps information placed rectangles 
photomesa appears application put images area treemap rectangle 
reason treemaps manner 
treemaps guarantee area generated rectangle proportional input number promise aspect ratio rectangles 
treemap algorithms treemaps generate rectangles better aspect ratios rectangles aspect ratio 
fine general purpose visualizations appropriate laying images images fixed aspect ratios fit rectangles inappropriate aspect ratios 
look problem applying existing treemap algorithms laying fixed size objects images 
assume loss generality images square having aspect ratio 
see affect layout issues 
list groups images want lay obvious input treemap algorithm number images group 
treemap algorithm generate list rectangles just decide fit group images corresponding rectangle 
rectangle group images step decide dimensions grid lay images rectangle 
aspect ratio rectangle compute number rows columns best fit images 
resulting grid may spots images rows columns 
layout guaranteed fit rectangle 
example consider rectangle computed hold single image 
area long skinny width height 
obvious solution scale images just fit bounds rectangle 
lies problem 
group images fit separate rectangle group images potentially scaled 
result group images different size 
furthermore rectangles arbitrarily sized positioned images scaled resulting groups images align visually attractive way 
standard graphic design practice align content way easy eye quickly scan different areas 
group images different size aligned resulting layout attractive may slower user quickly scan 
see result laying simple sequence images ordered treemap quantum treemap algorithms see difference layout 
note showing results ordered treemap group consisting single image scaled smaller images 
showing results quantum treemap algorithm images size images aligned single grid groups 
ordered treemaps understand quantum treemap algorithm necessary understand basics ordered treemap algorithm direct modification 
ordered treemap algorithm treemap algorithms take input produces output page input ordered sequence numbers specify size resulting rectangles 
box box layout rectangles 
output ordered sequence rectangles completely fill box area proportional algorithm similar quicksort 
chooses pivot places box 
recursively lays side pivot side pivot 
shows basic visual strategy horizontal layout 
corresponding approach vertical layout 
ordered treemap algorithm described detail summarized 

return rectangle box 

choose pivot element pivot selection strategies include picking middle element largest 

calculate height fills box width large contain 

split sublists layed calculate splitting point aspect ratio closest 
calculate performed ratio size corresponding lists breaking available space ratios 

recursively apply ordered treemap algorithm algorithm results rectangles fairly square ordered approximately left right top bottom vertically oriented box 
quantum treemap algorithm goal quantum treemap algorithm similar treemap algorithms generating rectangles arbitrary aspect ratios generates rectangles widths heights integer multiples elemental size 
manner generates rectangles grid elements size layed 
furthermore grids elements align perfectly rows columns elements running entire series rectangles 
basic element size smaller led name quantum treemaps 
quantum treemap qt algorithm directly ordered treemap ot algorithm 
basic approach applied treemap algorithm treemap algorithm resulting quantified version 
qt input output similar ot returning set rectangles precisely fill specified input box generates set rectangles approximate input box 
wasted space resulting set rectangles usually larger box close aspect ratio 
addition qt takes additional input parameter aspect ratio elements layed box 
qt starts exactly manner ot picking pivot subdividing space recursively applying algorithm sub space 
works way way step ot stopping condition 
point step just unwinding recursive stack adjusts computed rectangle modifying dimensions making big precisely specified number elements 
recursion unwinds caller accommodate generated rectangles may fit precisely box asked 
tricky part captured modified version step 
rectangles generated recursive call may bigger smaller dimension asked rectangles regions moved don overlap possibly grown align nicely neighboring rectangles 
example see right 
rectangle originally computed dimensions rectangle taller rectangle stretched units tall match height rectangle 
similarly rectangle stretched match height rectangle 
new algorithmic steps stated new 
compute rectangle contains exactly grid arrangement aspect ratio close possible box 
result laying sequence groups elements size ordered treemap left quantum treemap right basic layout strategy ordered treemap algorithm 
pivot layed rp lp layed lp ln layed rp page new 
recursively apply ordered treemap algorithm new 
translate rectangles avoid overlapping 
new 
rectangles sub regions manner 
sure width 
sure height sure height evening steps accomplished similarly finding regions small 
wide add extra amount width rectangles region touch right boundary region 
analogous action rectangles tall 
element aspect ratio issues qt assume elements layed rectangles produced qt aspect ratio aspect ratio input parameter qt 
turns necessary modify internal structure qt accommodate element aspect ratio 
dimensions starting box simply stretched inverse element aspect ratio 
simply put laying wide objects wide box laying thin objects thin box 
growing horizontally vertically step requested rectangle may grown accommodate quantum element size 
basic question grow rectangle horizontally vertically 
simple answer just grow direction results rectangle closely matches aspect ratio original rectangle 
algorithm produces better layouts grows horizontally vertically layout boxes oriented vertically 
issue somewhat subtle related step rectangles 
example rectangles taller taller match rectangles wider rectangles need wider rectangles left 
general evening aspect qt algorithm remains somewhat problematic 
data sets occasionally yield undesirable layouts due wasted space 
happen region ends growing fair amount accommodate data doesn happen fit starting rectangles regions grown match 
regions grown match resulting rectangles bigger necessary wasted space 
doesn problem datasets contain regions small number elements real image datasets viewed regular quad snake result applying stopping conditions sequence groups elements size 
little wasted space 
stopping condition improvements changing stopping conditions offering special layouts small number special cases produce substantially better total results 
new stopping conditions apply equally qt ot 
basic improvement comes realization layout rectangles depicted necessarily give layouts best aspect ratios rectangles 
addition generates layout somewhat difficult parse visually eye move directions focus rectangles horizontally vertically horizontally 
layout improved visual readability offering alternative layouts 
produces quad rectangles 
second produces snake layout rectangles layed sequentially horizontally vertically 
snake layout equally applied rectangles 
photomesa applied rectangles 
shows result laying sequence groups elements strategies 
new algorithmic step new 
try regular layout continuing letting recursion get bottom level new 
layout groups quad 
split box horizontal vertical split depending orientation box number elements groups 
split remaining boxes opposite orientation number elements groups 
new 
layout groups snake dividing box sub boxes horizontally vertically depending orientation box number elements groups 
page new 
compute aspect ratios wasted space resulting rectangles steps layout best results 
layout strategy gives best result input data fewer rectangles photomesa computes layouts strategies original quad snake picks best 
practice strategy produces layouts substantially aspect ratios 
running randomized tests rectangles random numbers elements rectangle ranging produced average aspect ratio original stopping conditions new stopping conditions 
pivot selection improvement addition pivot selection strategies discussed third strategy specifically targeted evening problem previously discussed offers improved results 
new strategy called split size gives better results input data 
basic approach pick pivot split lists elements equal sizes close equal possible 
sublists containing similar numbers elements lay tends evening wasted space 
new algorithmic step new 
choose pivot element pivot selection strategies include picking middle element largest results splitting elements lists close equal size possible 
single pivot selection strategy works best practice photomesa computes layouts pivot selection strategies picks best average aspect ratios resulting rectangles amount wasted space 
quantum treemap analysis basic characteristics qt works better elements group 
gives algorithm flexibility computing rectangles 
rectangle say elements arranged quantified grids different sizes average aspect ratios comparing ordered treemaps quantum treemaps maximum elements rectangle average aspect ratio ordered treemap average aspect ratio rectangles run algorithms rectangles random numbers elements rectangle 
space quite efficiently 
rectangles containing smaller numbers elements offer options space efficiently 
example rectangle containing elements layed 
options give algorithm flexibility dozens grid options afforded larger number elements 
order assess effectiveness qt compared ot series trials random input 
algorithm run times generating rectangles number elements rectangle randomly generated 
done different ranges number elements rectangle 
test average aspect ratio rectangles recorded space utilization recorded percentage space display elements wasted space 
random numbers algorithm 
figures show results tests 
quantum treemaps better terms aspect ratio ordered treemaps better terms wasted space 
crucial visual advantage qt produces layouts elements size aligned single global grid 
bubble maps quantum treemaps disadvantage wasting space 
may possible improve quantum treemap algorithm impossible layout images rectangle leaving unused space general images size 
alternative approach give idea space divided rectangles allow complex shapes 
new algorithm lays groups quantum sized objects ordered position wasted space group small amount wasted space entire area 
groups objects created different shapes rectangular circular groups objects approximate wasted space comparing ordered treemaps quantum treemaps maximum elements rectangle ordered treemap quantum treemap average wasted space percentage entire layout space available 
tests run algorithms rectangles random numbers elements rectangle 
page layouts groups rectangles group 
rectangular left circular right 
shapes define exactly 
shows rectangular circular layout groups rectangles group 
algorithm integrated photomesa user selectable layout option 
shows algorithm applied set images photomesa 
wasted space regions arbitrary shapes 
sophisticated approach laying related images grid pursued proximity grid algorithm 
takes set objects highdimensional set relationships generates grid layout objects similar objects near grid 
hand simpler assumes input pre clustered 
keep clusters images optimizing dimensional set relationships 
algorithm completely different treemap algorithm 
subdividing rectangles standard pixel bucket fill algorithm 
works filling cells grid keeping track cells get assigned images group 
fills cells group time 
different algorithms select cell fill shape groups controlled 
basic algorithm runs time images 
basic algorithm follows input aspect ratio 
compute size grid total number images layout desired resulting aspect ratio 

create grid size computed step set cell value unassigned 

group images call fill algorithm starting step 

find starting point fill looking unassigned cell grid left right top bottom order 
initialize list cells called list add starting point list 

list empty 
take element list set cell location value assigned 

unassigned neighbor add list set cell location current group id goto 
note order neighbors added list affect shape resulting groups 
easy implement space efficiently give ordered space filling layouts treemaps 
produce arbitrary shaped regions rectangles users find harder visually parse 
may appropriate applications goal simply related items near may appropriate tasks users need clearly distinguish groups 
photomesa photomesa regularly year old daughter nearly months 
load family pictures sit front laptop computer 
point area click zoom 
keep zooming points areas get way single photo 
zoom level asks see photo zoom 
zoom level sees interested 
fashion look photos able stay control maintains high level interest 
zooming smooth animation clearly able follow going operate mouse 
addition members lab photomesa personal professional photos pc mac environments 
controlled study informative 
photomesa weeks interviewed received uniformly positive feedback 
designer disk mapper find disk 
reported liking ability see overview groups pictures coupled easy mechanisms navigating 
images layed rectangular 
page presents new algorithms laying groups images fixed size visual objects 
algorithms applied image browser program demonstrates effectiveness approach 
early shows layouts photomesa promising evaluation needed 
quantum treemap algorithm improved reducing amount wasted space 
useful consider approaches support internal padding group 
may worth applying quantum approach treemap algorithm compare current implementation 
photomesa application long list features added 
important integrate photofinder complement project concentrates photo annotation searching 
area look integration web 
zoomable characteristics photomesa match web offering potentially efficient manner browse large image databases web resolution needed current view needs sent client 
course detailed user study needed understand zoomable interaction photomesa compares traditional approaches 
appreciate feedback photomesa hcil members 
particular jesse suggested approach taken algorithm 
addition ben shneiderman suggesting interactive textual list groups allison druin suggesting ability color groups jon meyer catherine plaisant advise visual design photomesa matthias mayer suggesting try display directories images mark stefik xerox parc suggesting magnified preview images 

www com english products node htm 
canon 
www com software ps pc view html 

www com htm 

www 
com 
balabanovic chu wolff 

storytelling digital photographs 
proc 
human factors computing systems chi acm press pp 



proximity visualization data 
doctoral dissertation university cambridge cambridge england 
bederson hollan perlin meyer bacon furnas 

pad zoomable graphical sketchpad exploring alternate interface physics 
journal visual languages computing pp 

bederson meyer 

jazz extensible zoomable user interface graphics toolkit java 
proceedings user interface software technology uist acm press pp 

huizing van wijk 

treemaps 
proc 
joint eurographics ieee symp 
visualization ieee press pp 

combs bederson 

zooming improve image browsing 
proceedings digital library dl new york acm pp 

druin bederson sherman weng 

designing digital library young children intergenerational partnership 
proceedings joint conference digital libraries jcdl acm press 
press 
harel 

algorithm blob hierarchy layout 
proceedings advanced visual interfaces avi acm press pp 



visual relevance analysis 
proceedings international conference digital libraries dl acm press pp 

jul furnas 

critical zones desert fog aids multiscale navigation 
proc 
user interface software technology uist acm press pp 

kang shneiderman 

visualization methods personal photo collections browsing searching photofinder 
proceedings ieee international conference multimedia expo icme new york ieee pp 

platt 

autoalbum clustering digital photographs model merging 
proceedings ieee workshop content access image video libraries ieee press robertson mackinlay 

document lens 
proceedings user interface software technology uist acm press pp 

rodden sinclair wood 

organisation similarity assist image browsing 
proceedings human factors computing systems chi acm press pp 

shen moghaddam lesh beardsley 

personal digital historian user interface design 
proceedings extended abstracts human factors computing systems chi acm press shneiderman 

tree visualization treemaps space filling approach 
acm transactions graphics pp 

shneiderman kang 

direct annotation drag drop strategy labeling photos 
proceedings ieee conference information visualization iv new york ieee pp 

shneiderman wattenberg 

ordered treemap layouts 
tech report cs tr computer science dept university maryland college park md 
