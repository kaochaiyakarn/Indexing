polytypic programming ease ralf hinze institut ur informatik iii universit bonn bonn germany ralf informatik uni bonn de www informatik uni bonn de ralf july article proposes new framework polytypic extension functional programming languages 
polytypic functional program parameterised datatype 
polytypic functions de ned induction types induction values typically operate higher level abstraction counterparts 
polytypic programming necessarily complicated conventional programming 
fact polytypic function uniquely de ned action projection functors primitive functors sums products 
information sucient specialize polytypic function arbitrary datatypes including mutually recursive datatypes nested datatypes 
key idea nite trees index sets polytypic functions interpret datatypes algebraic trees 
approach simpler general ecient previous ones initial algebra semantics datatypes 
polytypic functions enjoy polytypic properties 
show things known properties various functions obtained direct consequences polytypic fusion laws 
article proposes new framework polytypic extension functional programming languages haskell standard ml 
framework simpler general ecient previous ones polyp initial algebra semantics datatypes :10.1.1.30.20
polytypic function de ned induction structure types 
archetypical example polytypic function size int counts number values type value type function size sensibly de ned parameterised datatype routine matter 
polytypic programming language enables user program size times 
specialization size concrete instances handled automatically system 
polytypic programs ubiquitous typical examples include equality comparison functions mapping zipping functions pretty printers haskell show function parsers haskell read function data compression digital searching 
ability de ne programs generically datatypes greatly simpli es construction maintenance software systems 
polytypic functions de ned induction types induction values tend counterparts 
certain familiarity gained turns polytypic programming simpler conventional programming 
support claim de ne simple functions size sum illustrative datatypes 
examples functional programming language haskell 
rst example consider datatype rose trees 
data rose branch list rose data list nil cons list size rose tree determined follows see instance 
rose int branch ts suml list ts list 
list list list nil nil list cons cons list suml list int int suml nil suml cons suml de nition quite sophisticated combining form list auxiliary function suml list incurs slight run time penalty list produces intermediate list immediately consumed suml ineciency eliminated fusing suml list single function called 
rose int branch ts ts list rose int nil cons ts ts interestingly de nition naturally arises change de nition rose trees data rose branch forest data forest nil cons rose forest de nition rose int int proceeds analogous fashion suces fact replace de nitions 
slightly complex datatype type perfect binary search trees 
data perfect zero succ perfect node data node node de nition perfect somewhat unusual recursive call right hand side perfect node identical left hand side equation perfect example called nested datatype term coined bird meertens 
perfect encompasses perfect binary search trees size tree type perfect computed logarithmic time 
sizep perfect int sizep zero sizep succ sizep function sizep counts number values type tree type perfect sizep assigned type perfect int recursive call type perfect node int summing perfect tree integers challenging 
perfect int int int zero succ perfect sumn id sumn node int int int sumn node perfect 

perfect perfect perfect zero zero perfect succ succ perfect node node 

node node node node node note perfect node denote mapping functions binary functors perfect node 
improving eciency fusing perfect sumn id left exercise reader 
de ne size sum times 
rst take closer look structure types 
reconsider datatype de nitions 
haskell data construct combines features single coherent form sums products recursion 
structure types apparent de nitions rewritten functor equations rose id list 
rose list id list perfect fst perfect 
node snd node fst snd fst kt constant functor id identity functor fst snd projection functors 
denotes composition ary functor functors arity 
sum product de ned pointwise essence functor equations written compositional point free style data de nitions written applicative pointwise style 
treat datatype declarations 
data data inl inr data de ne size suces specify action identity functor constant functors sums products 
polytypic functions written angle brackets distinguish ordinary functions 
sizehf int sizehf inl sizehf sizehf inr sizehf sizehf sizehf sizehf equation inevitable value type id contains element type value type kt contains elements 
determine size element type calculate size structure type structure type size structure type sum size components 
de ne size succinctly point free style sizehf int const const sizehf sizehf sizehf sizehf plus sizehf sizehf plus de nitions combining forms appendix 
styles pros cons 
point free style usually amenable mechanical reasoning pointwise style readable 
polytypic de nition size specializations automatically derived 
const branch ts ts nil cons const const zero succ node postpone detailed explanation specialization process section 
moment suces note di erent instances rigidly follow structure respective datatypes 
functions relate handcrafted de nitions 
corresponds second ecient de nition const negative side linear time implementation opposed logarithmic sizep 
general polytypic function linear running time 
reasonably expect achieve eciency handcrafted implementation exploits data structural invariants 
polytypic de nition sum equally simple 
int int inl inr specializing various datatypes yields de nitions similar obtained sizehf case generated functions ecient best handcoded implementations 
moral story far giving ad hoc de nitions functions size sum simple involving 
polytypic de nition slightly high degree inevitable 
feature polytypic programming light sweet 
rest article organized follows 
section reviews background material theory nite trees 
section introduces basic ingredients polytypic programming functor expressions algebraic trees 
section explains specialize polytypic function concrete instances datatypes 
polytypic functions enjoy polytypic properties 
fixpoint induction functor level fusion laws analogous fusion law catamorphisms described section 
section presents examples polytypic functions associated polytypic properties 
section reviews related points direction 
preliminaries section introduces basic notions facts theory nite trees needed subsequent sections 
detailed survey reader referred courcelle article contains 
ranked set family pairwise disjoint sets symbols rank arity ranked set function symbols denote set nite trees set trees nite nite see details 
known constitutes initial algebra implies facts 
fact definition structural induction set family functions 
exists unique function fact proof structural induction property nite trees 
establish suces show 
set nite trees turned complete partial order extend new function symbol arity say element respect suitably chosen partial order 
set rose id fst fst snd fst fst snd fst snd fst snd fst perfect types interpreted nite trees constitutes initial continuous algebra implies facts 
fact monotone function complete partial order uniquely extended continuous function type note function turned monotone function setting element property called pointed called chain complete chain 
fact pointed chain complete property nite trees 
establish suces show 
datatypes algebraic trees seen type de nitions haskell take form recursion equations 
interpret equations syntactically equation de nes unique nite functor tree 
displays trees de ned type equations section 
note rose interpreted rational tree perfect denotes algebraic tree 
rational tree possibly nite tree nite number subtrees 
algebraic trees obtained solutions called algebraic equations akin functor equations de ned 
ranked set functor variables ranked set primitive functors set functor expressions arity inductively de ned follows 

denotes ary projection functor selecting th component 
unary binary projection functors familiar names id fst snd expression 
denotes composition ary functor functors arity omit parentheses write 

keyword introduces local functor equations set functor equations grammar 
fx kp kp note haskell provide local type declarations 
included language functors uniform 
choice arbitrary 
concreteness set fk usual binary functors written write 
functor expression de nes unique nite tree called functor tree inner nodes labelled primitive functors arity leaves decorated nullary functors projection functors 
sense view nite trees kind nite normal form functor expressions 
possibly nite functor trees formed grammar 


corresponds tree root labelled subtrees 
corresponds leaf 
functor tree denoted functor expression jxk jp 
jf 
jf jf jf jf jf lfp jf environment mapping functor variables nite functor trees syntax extending environment binding functor expression closed omit environment write jf jf 
functor composition interpreted substitution operation functor trees 


rst equation speci es strict rst argument second de nes substitution leaf tree third formalizes propagation substitution subtrees node 
note fact implies uniquely extended continuous function nite functor trees 
properties substitution operation semantics functor equation xpoint reasons readability consider single functor equations 
note equation form 
unique solution realm nite trees 
example functor equations 
solution note composition strict rst argument 
example unique solution functor equation perfect fst perfect 
node snd 
fst snd perfect disjoint union perfectly balanced trees arbitrary height 
building semantics classify functors polynomial regular nested functors 
functor called polynomial denotes nite functor tree 
id id node fst snd fst fst snd fst snd fst functor 
called diagonal square functor node de nition trees 
regular functor yields rational functor tree 
bintree fst bintree snd bintree functor bintree models external binary search trees 
examples regular functors rose list rose forest 
functor perfect example non regular nested functor interpreted algebraic functor tree 
sequ sequ 
id sequ 
tree fst tree 
node snd okasaki uses functor sequ basis sequence implementation ecient indexing operation 
functor tree models trees 
novelty de nition data structural invariants trees interior node children path root leaf length manifest 
functor usually de ned variety ways 
take instance de nitions rose trees section 
rose id list 
rose list id list rose id forest forest rose forest rose rose denote rational tree depicted 
note classi cation functors regular nested functors deviates slightly usual notions 
example consider datatype de nition 
data zigzag nil cons zigzag fst snd recursive call right hand side de nition zigzag copy left hand side zigzag quali es nested datatype 
denotes rational tree depicted right 
equivalent non nested de nition zigzag data zig nil cons zag data zag nil cons zig standard classi cation functors purely syntactical form matters classi cation tree classes mild semantic structure matters 
polytypic functions seen examples polytypic functions 
general polytypic function parameterised ary functors de ned induction structure nite functor trees 
poly 
poly type speci ed type scheme may contain polymorphic types 
poly parameterised ary functors poly speci ed furthermore equation specifying poly primitive functor setting fact fact imply poly uniquely extended continuous function nite functor trees 
tacitly assume poly poly elements cpo typically programs haskell standard ml 
fact furthermore implies information sucient de ne unique value ki closed functor expression example code size de nes type scheme sizehf int functions size id size size kint size size size id const size const size kint const size size plus note speci es size size kint question pursue section derive specializations ki instances process specialization necessary ki directly implemented languages haskell standard ml 
reason simply type poly depends rst argument type possibly encoding type 
circumvented problem encodings universal datatype dynamic types typecase result inecient poly interpret type argument stage recursion 
specializing ki remove interpretative layer 
view special instance partial evaluation 
datatypes correspond algebraic trees may nite number di erent subtrees specialization structure datatypes 
functor expressions algebraic trees nitely represented idea suggests carry specialization representation functor trees 
main challenge lies treatment functor composition 
assume instance unary functor de ned terms binary functor 

want specialize ki generate code righthand side 
ideally ki compositionally de ned terms specializations jbk binary functor mapping jbk 
suggests de ning auxiliary function size maps functor trees seen functor composition corresponds substitution operation trees 
function size imitate substitution function level 
general de ne functor arity polytypic function poly satisfying poly functor trees 
convenience introduce abbreviations 
speci cation captures central idea specialization structure types mimicked value level 
compare jgk poly jgk ary functor sending jgk likewise poly ary function sending ti 
get derivation poly rst generalize speci cation slightly 
equation assumes functor expression closed 
course may general contain free functor variables 
poly extended environment mapping functor variables continuous functions 
environment environment mapping functor variables nite trees 
re ned speci cation reads ti free variables poly ti speci cation condition relating called environment condition 
derivation poly nice example program calculation proceeds mechanically 
case functor variables obtain poly speci cation ti de nition ti environment condition case derivation projection functors equally straightforward 
poly hh ii speci cation ti de nition de nition case primitive functors calculate poly hhp ii speci cation ti de nition de nition 
ti de nition poly poly case 
derivation functor composition essential fact substitution operation associative 
poly hhh 
ii speci cation 
ti de nition jh jh speci cation poly ti ti speci cation poly poly hhh ii poly hhh ii case calculation local functor equations proceeds follows poly hhh ii speci cation ti de nition lfp jh ti speci cation proof obligation poly lfp poly hhh ii step entirely obvious 
able apply speci cation prove extended environments satisfy environment condition 
de ne relation ti show lfp poly hhh ii lfp jh words show xpoints related 
argument variant xpoint induction stated inference rule lfp lfp recall xpoint induction sound chain complete predicates 
predicate satis es requirement takes form equation involves continuous functions 
easy see pointed induction step show poly hhh ii jh direct consequence speci cation assumption guarantees extended environments satisfy environment condition 
generalizing tuple calculated de nition poly poly poly hh ii poly hhp ii poly poly hhh 
ii poly poly hhh ii poly hhh ii poly hhh ii poly lfp poly hhh ii point free style poly de ned poly poly hh ii poly hhp ii poly poly hhh 
ii poly 
poly hhh ii poly hhh ii poly hhh ii poly lfp poly hhh ii th projection function denotes ary composition de ned 

worth emphasizing de nition poly inductive structure functor expressions 
level view poly interpretation functor expressions interpreted poly 
recursion xpoints 
remains de ne ki terms poly hhf ii assume closed ki speci cation poly hhf ii de nition poly poly hhf ii poly poly proposition summarizes derivation 
proposition correctness specialization poly polytypic function parameterized ary functors poly de ned ki poly hhf ii poly poly closed functor expressions arity derivation takes place semantic setting complete partial orders continuous functions 
course aim implementing poly say part preprocessor compiler operate syntactic level transform functor expressions haskell standard ml intermediate language 
syntactic variant poly hh ii denote poly simply works mapping di erent constructs functorial language corresponding constructs expression language 
instance recursion equations type level mapped recursion equations value level poly poly hf poly kp hf arity note expression variables 
straightforward de ne remaining cases poly hf ik poly hhf ii standard denotational semantics expressions 
correctness transformation follows immediately proposition 
leave reader ll details 
example specialize size datatypes perfect node perfect 
perfect 
node node 

system functor equations mechanically transformed system function equations 
size 

size 
size 
expanding de nitions size get plus plus original constructor names obtain haskell code 
worth mentioning specialization yields result different representations functor tree jf jf poly hhf ii poly hhf ii simple consequence proposition 
recall consequently size size ii 
translate size size ii haskell obtain course di erent functions simply rose rose di erent types 
haskell datatype declarations generative data declaration introduces new distinct type 
rose rose de ned scope di erent constructor names 
polytypic properties section investigates facet polytypic reasoning 
show prove properties polytypic functions principle xpoint induction polytypic fusion laws analogous fusion law catamorphisms 
fact fact suggest induction principle 
pointed chain complete property functor trees arity order prove holds functor trees suces show 

hold implication hold primitive functor example assume parameterized type comprising containers size const illustrate induction principle showing sizehf ai times sizehf times times strict pointed 
takes form equation furthermore 
show id remaining cases kt left exercises reader 
case id ai de nition assumption const arithmetic times const de nition size times case ai sizehf ai de nition size plus sizehf ai sizehf ai ex plus times sizehf times sizehf respects composition plus times times sizehf sizehf arithmetic times plus sizehf sizehf de nition size times sizehf turning polytypic fusion laws laws quite general 
hold de ned function 
brings certain level abstractness 
reader fully acknowledge value laws section take look examples 
rst fusion law states conditions fuse polytypic function poly poly 
proposition mono poly fusion poly poly polytypic functions strict function 
poly poly holds primitive functors poly poly closed functor expressions arity proof structure proof quite similar derivation poly able induction structure functor expressions show generalized statement environments free variables poly poly 
case poly de nition poly environment condition de nition poly poly case poly hh ii de nition poly de nition poly poly hh ii case poly hhp ii de nition poly poly assumption poly de nition poly poly hhp ii case 
poly hhh 
ii de nition poly poly poly hhh ii poly hhh ii ex poly poly hhh ii poly hhh ii ex poly poly hhh ii poly hhh ii de nition poly poly hhh 
ii case poly hhh ii de nition poly poly lfp poly hhh ii ex proof obligation poly lfp poly hhh ii de nition poly poly hhh ii remains show extended environments satisfy environment condition 
de ne show lfp poly hhh ii lfp poly hhh ii straightforward xpoint induction omitted note pointed strict 
example illustrate rst fusion law show length sizehf polytypic function es structure de ned follows list wrap const cat wrap cat proposition know length atten hhf ii wrap size hhf ii length wrap provided length const const length length length length cat plus length length conditions hold relevant laws listed appendix 
noting const proposition follows immediately 
second polytypic fusion law states conditions computation polytypic functions fused single polytypic function 
setting proposition poly poly fusion poly poly poly polytypic functions 
poly poly poly holds primitive functors poly poly poly closed functor expressions arity law proved way proposition 
applications second fusion law section 
examples section presents examples polytypic functions associated polytypic properties 
note functions arise generalizations corresponding list processing functions 
mapping functions categorical terms functor combination parameterized type mapping function describes action functor functions 
mapping function unary functor applies function element type structure type polytypic variant mapping function 
maphf maphf id maphf maphf maphf maphf maphf maphf revealing consider typings subsidiary functions map map 
replacing obtain typings ary mapping functions 
fact map corresponds mapping function ary functor de ne fmap generically unary functors mapping functions functors arbitrary arity required 
news programmer need take care de nition 
generated automatically 
mapping function unary functor required satisfy functorial properties 
id id rst property shown xpoint induction 
proof id id requires bit 
ect show id equation holds accommodates bottom element recall working cpo setting 
second property instance second polytypic fusion law 
setting poly poly poly map establish assume type variables appearing type signatures scoped type variables signature maphf universally quanti ed refer occurrences signature 
map map map map kt id map map conditions hold 
far excluded types contain function spaces 
surprisingly approach polytypic programming works equally additionally includes function space constructor 
omitted polytypic functions sensibly de ned function space 
instance fmap de ned functional types contravariant rst argument 



drawing theory embeddings projections remedy situation follows 
central idea supply pair functions left inverse id functions additionally satisfy id called pair 
notion de ne variant fmap additionally works function space constructor mape hf 
mape apply mape id mape hf mape hf mape hf mape hf apply 
assume embedding projection pair prove mape id xpoint induction 
con ne interesting cases 
case id de nition mape apply apply de nition apply de nition id embedding projection pair id case de nition mape mape hf mape hf mape hf de nition mape hf mape hf mape hf mape hf ex id similar calculations furthermore show id laws imply mape pair 
show 
mape functorial action category cpo complete partial orders embedding projection pairs 
variant fmap called monadic map 
discuss de nition brie review basics monads 
depth treatment refer interested reader wadler papers 
think monad type computations 
haskell monads captured class declaration 
class monad return 
essential idea monads distinguish computations values 
distinction re ected type level element represents computation yields value type computation may involve instance state exceptions nondeterminism 
trivial computation immediately returns value denoted return operator combines computations applies result computation datatypes computational content 
instance type data just model exceptions just represents normal successful computation yielding value represents exceptional failing computation 
instance declaration shows de ne return 
instance monad return just just seen strict post application exception exception propagated succeeds applied result 
de nition fmap combining forms 
monadic mapping function succinctly de ned raise combinators procedures procedure function maps values computations 
words procedure function type monad 
mmap monad 
mmap return 
monad 


inl mmap inl 
inr mmap inr monad 

return combinators de nition monadic map straightforward 
monad 
return note letter indicates structure traversed left right 
dual function de ned completely analogously de nition computations reversed 
applications monadic maps refer interested reader tutorial meijer jeuring 
reductions functions size sum atten instances general concept due meertens termed reduction crush 
reduction function type collapses structure values type single value type de ne reduction ingredients required value binary operation op usually necessarily neutral element op 


op inl inr op point free style de ne helper function red succinctly 
id const uncurry op number useful functions implemented terms reduce fmap see 
meertens jansson jeuring give applications 
interesting inspect subsidiary functions reduce reduce op red closely 
property reduce op reduce op map num bool bool true bounded ord min sizehf num sizehf const bool 
bool list wrap data tree empty leaf fork tree tree tree empty fork leaf examples reductions 
immediate consequence proposition shows reduce combines reduction map 
idiom fact old 
appears instance bird lectures shown homomorphism lists catamorphism expressed form :10.1.1.100.9674
sense reduce seen generalization scheme 
specializing proposition gives important fusion law reductions 
strict function op op reduce op reduce op immediate consequence fusion laws reductions instance length sizehf see example 
implementation atten quadratic running time computation takes time proportional length known technique accumulation improve running time 
basic idea de ne function op point free style condition written succinctly op suggests apply proposition deriving de nition calculation left exercise reader shows de nition improves provided op associative neutral element op 
reduce hf 

reduce hf op 
op const id uncurry implementation guarantees applications op nested right op op op name auxiliary function 
property reveals type reduce hf unnecessarily restricted arguments op need type 
may generalize type signature follows 



op 
op const id uncurry note rearranged arguments emphasize structure 
building give linear time program list note reducer equivalent fmap followed ordinary reduction 
op id op shown proposition 
equality comparison functions equality function nice example function indexed nullary functor 
haskell automatically derived datatypes rst order kind seen formalization process 
assume suitable equality function int prede ned 
bool true eqint inl inl inl inr false inr inl false inr inr note eq fmap reduce de ned uniform way constant functors 
functions indexed nullary functors typically require case analysis constant functors 
varying de nition eq slightly realize haskell compare function determines precise ordering elements 
data ordering lt eq gt ordering eq inl inl inl inr lt inr inl gt inr inr case feq ord ord zipping functions closely related mapping functions zipping functions 
zipping function takes pair structures returns structure pairs 
argument structures shape zipping function returns abbreviate fail yields just desired structure 
words zipping function uses exception monad signal incompatibility argument structures 
de nition zip similar eq cmp 
return eqint return fail return inl inl mmap inl inl inr fail inr inl fail inr inr mmap inr return note type zip generalized arbitrary monads contain zero element fail related article regarded successor previous polytypic programming similar approach rational trees 
major di erence frameworks lies treatment functor composition 
rational tree approach functor composition regarded function symbol implies polytypic de nition specify action 

clearly done exhaustively 
furthermore cases functor composition redundant guarantee polytypic function behaves equal functors rose rose problems disappear handle functor composition meta level generalizing rational trees algebraic trees 
classic approach polytypic programming realized polytypic programming language extension polyp initial algebra semantics datatypes :10.1.1.30.20
functors modeled grammar 
kt fst snd 
recursive datatypes modeled xpoints associated base functors functor known type functor denotes unary functor solution equation 
polytypic functions de ned structure types 
polyp polytypic function sizehf de ned follows modulo change notation 
sizehf int bi bi int int inl inr 
bi program quite elaborate compared section involves general combining forms cata fmap auxiliary polytypic function sum 
disadvantages initial algebra approach fairly obvious 
de nition redundant know size uniquely de ned action constant functors id sums products 
de nition incomplete size applicable regular functors recall instance perfect regular functor 
furthermore regular functor may depend functors arity functor composition de ned unary functors 
de nition exhibits slight ineciency combing form fmap produces intermediate data structure immediately consumed sum 
words corresponds rst ecient de nition framework far polyp allows programmer de ne general recursion schemes cata anamorphisms 
example recursion scheme cata size 
bi id bi operation called functorof polyp maps type functor base functor function decomposes element type unfolding level recursion 
explicit treatment type recursion unnecessary applications polytypic functions polylib implemented framework course cata anamorphisms indispensable 
polytypic uni cation algorithm described jansson jeuring instance requires function determines immediate subterms term 
similar function appears article bird de moor hoogendijk generalization maximum segment sum problem 
cases recursive structure datatype known 
framework deals type recursion meta level feel tempted conclude deal applications 
appears availability operations types orthogonal design issue 
prevents incorporating operator depicted 
simply take type inference algorithm described jansson jeuring :10.1.1.30.20
useful generalize maps ary regular functor associated ary base functor 
polytypic functions de ne cata anamorphisms functors arbitrary arity 
de nitions unary functors 

id 
id worth noting de nition subsidiary function proceeds 
particular need consider functor composition type functors 
furthermore base functor may nested functor 
function collects immediate subterms term de ned follows 
list direction suggests remains broaden approach include higher order polymorphism 
currently author working extension polytypic functions de ned generically datatypes expressible haskell 
results summarized 
application polytypic programming digital searching described companion show de ne tries operations tries generically arbitrary datatypes rst order kind 
central insight trie considered type indexed datatype adds interesting new dimension polytypic programming 
anonymous referees flops anonymous referees special issue valuable comments 
categorical combinators appendix contains de nitions categorical combinators main text 
notation fairly standard problems reading article 
background material reader referred textbook bird de moor 
standard combinators id identity function denotes functional composition const creates constant valued function 
id id 

const const sums treat sums datatype de nition 
data inl inr 

inl inr 

inl inr elements synthesized injection functions inl inr analysed case operator 
disjoint sum bifunctor mapping function 
operators satisfy variety properties inl inr id inl inr strict note fundamental reasons categorical coproduct non strict languages haskell see instance 
products products datatype 
data outl outl outr outr 



outl outr note haskell extra element 
simply ignore extra element 
elements analysed projection functions outl outr synthesized split operator 
product bifunctor mapping function 
properties dual 
outl outr id outl outr currying curry converts non curried function curried form uncurry inverse 
curry 
curry uncurry 
uncurry abadi cardelli pierce emy 
dynamic typing polymorphic languages 
journal functional programming january 
richard bird 
functional programming haskell 
prentice hall europe london nd edition 
richard bird oege de moor 
algebra programming 
prentice hall europe london 
richard bird oege de moor paul hoogendijk 
generic functional programming types relations 
journal functional programming january 
richard bird lambert meertens 
nested datatypes 
jeuring editor fourth international conference mathematics program construction mpc sweden volume lecture notes computer science pages 
springer verlag june 
richard bird :10.1.1.100.9674
lectures constructive functional programming 
manfred broy editor constructive methods computer science 
springer verlag 
bruno courcelle 
fundamental properties nite trees 
theoretical computer science march 
fokkinga 
monadic maps folds arbitrary datatypes 
technical report memoranda informatica university twente june 
gierz hofmann keimel lawson mislove scott 
compendium continuous lattices 
springer verlag 
ralf hinze 
polytypic functions nested datatypes 
discrete mathematics theoretical computer science september 
ralf hinze 
generalizing generalized tries 
journal functional programming 
appear 
ralf hinze 
new approach generic functional programming 
thomas reps editor proceedings th annual acm sigplan sigact symposium principles programming languages popl boston massachusetts january pages january 
hagen axel poign note inconsistencies caused xpoints cartesian closed category 
theoretical computer science june 
patrik jansson johan jeuring :10.1.1.30.20
polyp polytypic programming language extension 
conference record th acm sigplan sigact symposium principles programming languages popl paris france pages 
acm press january 
patrik jansson johan jeuring 
functional pearl polytypic uni cation 
journal functional programming september 
patrik jansson johan jeuring 
polylib library polytypic functions 
roland backhouse tim sheard editors informal proceedings workshop generic programming sweden 
department computing science chalmers university technology university june 
patrik jansson johan jeuring 
polytypic compact printing parsing 
doaitse swierstra editor proceedings european symposium programming esop volume lecture notes computer science pages berlin 
springer verlag 
mark jones 
functional programming overloading higherorder polymorphism 
jeuring meijer editors advanced functional programming international spring school advanced functional programming techniques astad sweden volume lecture notes computer science pages 
springer verlag may 
lambert meertens 
calculate 
swierstra editors proceedings th international symposium programming languages implementations logics programs plilp aachen germany volume lecture notes computer science pages 
springer verlag september 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
th acm conference functional programming languages computer architecture fpca cambridge ma usa volume lecture notes computer science pages 
springer verlag 
erik meijer johan jeuring 
merging monads folds functional programming 
jeuring meijer editors st international spring school advanced functional programming techniques astad sweden volume lecture notes computer science pages 
springer verlag berlin 
chris okasaki 
purely functional data structures 
cambridge university press 
simon peyton jones john hughes editors 
haskell nonstrict purely functional language february 
available www haskell org definition 
philip wadler 
comprehending monads 
proceedings acm conference lisp functional programming nice pages 
acm press june 
philip wadler 
essence functional programming 
proceedings th annual acm symposium principles programming languages fe new mexico pages january 
philip wadler 
monads functional programming 
jeuring meijer editors advanced functional programming international spring school advanced functional programming techniques astad sweden volume lecture notes computer science pages 
springer verlag may 
yang 
encoding types ml languages 
sigplan notices january 

