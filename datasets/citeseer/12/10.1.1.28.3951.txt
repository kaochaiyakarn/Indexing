jmpi implementing message passing interface standard java thesis steven raymond morin submitted graduate school university massachusetts amherst partial fulfillment requirements degree master science electrical computer engineering september electrical computer engineering copyright steven raymond morin rights reserved jmpi implementing message passing interface standard java thesis steven raymond morin approved style content israel koren chair mani krishna member ian harris member department head electrical computer engineering iv acknowledgments israel koren mani krishna generous patience guidance support graduate studies university massachusetts 
professor ian harris serving member thesis committee 
addition graduate possible generous support patience mark ben marsden entire staff engineering computer services 
mark ben gone way numerous occasions am grateful 
extend gratitude stephen cook entire staff computer science computing facility especially patience schedule spring semester 
furthermore possible support friendship lab mates joshua haines vijay osman luis eric 
special goes vijay sharing love crossword puzzles lunch 
parents family love patience graduate 
kimberly west love patience support 
jmpi implementing message passing interface standard java september steven raymond morin university massachusetts amherst university massachusetts amherst directed professor israel koren past decade researchers investigated ways leverage power inexpensive networked workstations parallel applications 
message passing interface mpi standard provides common api development parallel applications regardless type multiprocessor system 
java programming language significant programming language choice development internet applications 
propose message passing interface standard java complementary technologies develop implementation written completely java 
thesis discuss results port including adherence emerging java mpi standards performance results 
vi table contents page acknowledgments iv list tables viii list figures ix chapter 
message passing architectures 

data parallelism 
distributed computing 
message passing architectures 
parallel virtual machine 
message passing interface 

java programming language 
java programming language 
simplicity 
features java 
security 
performance 
object serialization 
remote method invocation rmi 

related research 


mpijava 
distributed object group metacomputing architecture 

considerations porting mpi standard java 
java inherent qualities parallel programming 
message passing jmpi 
jmpi architecture 
vii java mpi application programmer interface 
important api considerations java 
internal objects 
restrictions derived datatypes 
multi dimensional arrays offsets 
error handling 
communications layer 

testing methodology 
mpi standards adherence 
ibm test suite 
testing methodology 
jmpi test results 

jmpi performance 
performance 
test environment 
pingpong 
mandelbrot curve 
nozzle 


research 
research 
appendix getting started jmpi 

downloading jmpi software 
downloading java development toolkit 
configuring mpi runtime environment 
creating 
java sample java mpi application 
compiling 
running 
bibliography 
viii list tables table page 
test results npac test suite jmpi 
ix list figures page 
process distributed parallel application 

jmpi architecture 

mpi class organization 

pingpong performance nodes fast ethernet 

pingpong performance dual processor system 

pingpong performance single processor linux system 

output mandelbrot curve application 

performance mandelbrot application fast ethernet 

performance mandelbrot application dual processor system 

performance mandelbrot application single processor system 

screenshot nozzle application 

example virtual machine configuration file 

java example java mpi application 
chapter message passing architectures effort solve problems complex theoretical approaches dangerous expensive empirical approaches scientists turn simulation models solving problems 
problems global climate modeling demand computational resources single processor machine provide 
cost parallel computers outside reach budgets researchers form parallel supercomputers existing house workstations connected network 
parallel applications developed message passing libraries freeing developers cumbersome task network programming allowing developers concentrate algorithms 
data parallelism parallel computer consists identifiable identical processors working parallel solve problem 
parallel computers speed algorithms single operation simultaneously applied elements data structure array 
example algorithm inherent data parallelism matrix multiplication 
product matrices computed array processors processor ij responsible computing dot product ith row jth column 
processor executes sequence instructions different elements matrix array 
algorithm completes iterations 
earliest parallel computers consisted vector processors thinking cm 
vector model extended include parallel computers processors operate collections data structures 
shared memory multiprocessors single large contiguous address space accessible processors 
memory access individual processors shared address space coordinated implicit hardware locks explicit software locks defined parallel algorithm 
communication processors done shared address space 
contrast distributed memory multiprocessors separate cache address space processor 
communication processors done explicit remote memory operations 
remote memory operations processor able explicitly access address space processor get operator retrieve word remote memory put operator store word remote memory 
cost building dedicated multiprocessor computer hundreds thousands processors prohibitive researchers applications 
distributed computing distributed computer formed set independent workstations connected network ethernet solve single problem 
combined resources general purpose workstations connected exceed dedicated single high performance computer fraction cost 
example distributed computing application brute force attack ciphertext plaintext message encrypted digital encryption standard des 
ciphertext distributed thousands workstations internet 
workstation assigned search small subset keyspace reports results local search back distribution host 
des challenge distributed brute force attack thousands different workstations produced correct bit decryption key just hours 
message passing architectures message passing architecture defines communication primitives parallel processes communicate synchronize parallel processes 
primitives include communication functions send receive broadcast synchronization primitives barrier 
major benefit message passing primitives provide abstraction underlying hardware organized 
shared memory multiprocessors communication primitives shared memory transfer data processes 
distributed memory multiprocessors communication primitives remote memory get put operators transfer data processes 
standard message passing library porting application multiprocessor architecture normally requires just recompile 
second major benefit message passing communication architecture virtual parallel computer formed inexpensive workstations connected network 
message passing library responsible maintaining state virtual parallel computer distributing processes parallel application individual workstations providing reliable communication synchronization distributed processes 
virtual parallel machine homogeneous workstations virtual parallel machine architecture run operating system 
virtual parallel machine heterogeneous workstations virtual parallel machine different architectures operating systems 
hosts heterogeneous virtual parallel machine may internally represent primitive data types differently 
example long integer alpha processor represented bytes versus bytes short integer intel pentium pro processor 
furthermore processors may number bits represent primitive type processor may internally represent primitive type little endian format represents primitive big endian format 
case message passing library required convert types architecture neutral format 
external data representation xdr format defines architecture neutral representation primitives 
heterogeneous virtual machine message passing library automatically encodes primitives xdr representation sender decodes xdr native representation receiver 
application developer responsible compiling binary architectures included virtual parallel machine 
virtual parallel machine performs significantly slower dedicated multiprocessor cost dedicated multiprocessors expensive researchers 
cost building virtual parallel machine house workstations relatively low parallel applications run night workstations idle 
parallel virtual machine message passing libraries released forming virtual parallel machine called parallel virtual machine pvm 
developed prototype summer oak ridge national laboratory sunderam geist pvm developed university tennessee released public march 
receiving initial feedback developers complete rewrite undertaken pvm released february 
pvm available public download ported large number unix platforms including intel processors running linux freebsd digital alpha processors running digital unix sparc processors running solaris silicon graphic workstations running irix 
pvm library exploits native messaging support platforms support available distributed memory multiprocessors intel hypercube shared memory multiprocessors sgi challenge 
parallel virtual machine widespread latest official release 
parallel virtual machine composed components pvm daemon communication library 
daemon runs workstation parallel virtual machine responsible maintaining state parallel virtual machine providing routing messages processes 
state virtual machine changes workstations added removed 
addition providing functions communication library contains functions allow applications partition decompose data add remove tasks virtual machine add remove hosts virtual parallel machine 
library available applications written fortran 
configuration virtual machine current list tasks running monitored library call application graphical user interface 
message passing interface spring center research parallel computation sponsored workshop standards message passing distributed memory environment 
workshop featured technical presentations researchers industry leaders existing message passing implementations 
year group consisting members organizations formed mpi forum charter define open portable message passing standard 
mpi forum released initial specification mpi standard august 
standard defined library calls point point communication collective group operations process groups communication domains process topologies environmental management inquiry profiling included fortran bindings 
standard address implementation specific issues allowed implementers exploit dedicated hardware machines dedicated communication hardware intel paragon 
twelve implementations mpi standard currently available respected implementations mpich developed argonne national laboratory mississippi state university lam developed ohio supercomputer center 
members mpi forum spring address ambiguities errors mpi specification released mpi standard summer 
mpi forum summer address broader issues left original standard due time constraints 
mpi standard released summer included library functions dynamic process management input output routines sided operations bindings 
complete implementations mpi standard spring 
chapter java programming language java programming language java programming language developed patrick naughton mike sheridan james gosling sun microsystems originally intended controlling digital consumer devices cable television set top boxes personal digital assistants 
java designed simple objected oriented architecture neutral portable dynamic distributed robust multi threaded language derived 
java initiative started summer language remain obscure spring netscape signed agreement license incorporate technology upcoming release world wide web browser 
language gained widespread acceptance academic research communities industry intel microsoft novell oracle corporations signing licenses incorporate java technology core products 
public java development kit release occurred january didn take long developers release new products applications java technology 
simplicity java object oriented language 
java designers wanted create language programmers learn quickly removed complicated constructs notorious creating problems programmers 
examples constructs include operator overloading pointers multiple inheritance gotos union types 
operator overloading redefining operator operators call method set unary binary parameters 
pointers confusing cause large amount programmer errors replaced types 
types contain handle java object pointing physical location memory 
multiple inheritance class inherits methods fields parents removed 
goto statement eliminated replaced labeled break continue statements 
preprocessor removed replaced package system 
structures removed replaced classes strongly typed primitives 
union structure completely removed 
features java java interpreted language java compiler produces bytecode execute java virtual machine producing executable code designated target platform 
java bytecode architecture neutral portable bytecode executed target platform java virtual machine available 
java strongly typed language representation primitive data types explicitly defined java language specification compiler requires explicit method declaration 
java virtual machine responsible run time array bound checking run time cast checking exception handling garbage collection 
java language dynamic distributed multi threaded 
java virtual machine able dynamically load classes runtime local file system remote site internet 
java native interface specifies mechanism allows java applications access native code written assembly 
introspection allows java class dynamically probe runtime information loaded classes available constructors member functions fields 
remote method invocation defines mechanism allows java applications execute remote objects available network 
java language specification defines support multiple threads execution object synchronization thread scheduling operations thread groups base language 
security java includes security features traditional programming languages 
java virtual machine performs byte code verification prevent illegal byte code combinations performs run time bounds checks array types 
virtual machines integrated web browsers execute applets sandbox model access local file system network operations severely restricted 
java language specification doesn include support pointers java application access random areas memory outside java virtual machine 
type stores handle objects dynamically created 
handle java virtual machine fields methods main memory 
organizations application developers attach digital signature applications 
digital signature preserve integrity java bytecode preventing unauthorized modifications providing authenticity 
performance interpreted languages perform worse compiled languages applications developed java exception 
java applications compiled version java development kit execute approximately times slower applications written just time compiler available implementations java compiles java bytecode native assembly language target machine transparently execution 
just time compiler vastly improves performance java applications comparable performance level enjoyed applications 
object serialization data marshalling supported java object serialization 
object serialization process encoding java object array bytes 
similarly object process instantiating object array bytes 
object serialization supports entire graphs objects example single call serialize complete contents linked list 
objects saved file time transmitted network java application tcp ip 
specific fields object marked transient fields object serializer instructed skip context meaningless 
object serialization libraries customized overriding methods 
example custom serialization allow programmer compact array serialization compute correct number elements de serialization 
object versioning prevents conflicts caused newer version object serialized older version object 
remote method invocation rmi remote method invocation rmi allows java programmer offer services local object remotely network 
programmer develops interface object interface defines signature methods object available remotely 
implementation class coded interface 
compiler generate linkage information class form client stubs server skeletons 
registry serves role object manager naming service 
server wishes local object available remote objects rmi registers interface server skeleton registry 
client able invoke method contact registry locate object 
object registered registry returns client stub client 
client stub provides information marshall parameters object 
client invokes object server skeleton code marshall data registry server 
server objects located special uniform resource locator url form rmi hostname port 
omitted url default port 
chapter related research years separate research groups investigated approaches port message passing interface bindings java university mpijava northeast parallel architectures centre university distributed object group metacomputing architecture dogma glenn judd brigham young university 
mpijava wrapper implementations 
mpi function analogous wrapper method written java 
wrapper maps java parameters datatypes invokes equivalent function maps results back java objects 
mpich lam wrapper implementations 
dogma provides subset mpi bindings natively java 
attempt provide java binding mpi standard jdk 
developed university released fall 
set wrapper functions provide access existing native mpi implementation mpich lam native method interface provided jdk 
native method interface nmi allows java programmers access functions libraries developed programming language fortran 
wrapper functions generated jci tool automate development wrapper functions native methods java 
java bindings provided nearly conform mpi specification 
nmi replaced java native interface starting jdk 
consists classes mpi 
class contains declarations mpi constants mpi init initializes mpi environment 
mpi class contains mpi wrapper functions 
mpi bindings include functions require arguments passed return status information 
java doesn support call 
objects required calling mpi function call parameter 
complicates application development ways objects need instantiated new constructor mpi function call value variable accessed field rank val 
pointer arithmetic supported java elements array passed functions arguments fortran 
programmer function jci jci section arr pass th element array arr 
java doesn support passing subrange array 
programmer wishes send subrange array process application create mpi derived datatype send mpi derived datatype 
bindings provided significantly alter program structure mpi application 
result porting existing mpi application requires significant structural modification source code 
mpijava mpijava provides access native mpi implementation java native interface 
mpijava developed northeast parallel architectures center syracuse university released fall 
approach taken mpijava implementation define binding natural java 
mpijava models java bindings closely possible bindings defined mpi standard supports mpi subset bindings 
mpijava class hierarchy organized class hierarchy defined mpi specification consists major classes mpi group comm datatype status request 
shows organization classes 
mpi class responsible initialization global constants 
comm class defines mpi communication methods send receive 
argument communication methods specifies message buffer sent received 
bindings expect starting address physical location memory elements mpi primitive type 
java bindings expect object passed 
java object array elements primitive type 
java doesn support pointer arithmetic communication methods defined java bindings take additional parameter offset specify starting element array 
java doesn support call parameters methods viable method returning status method call return value 
different approaches handling multiple return values methods defined mpi specification taken depending method call 
mpi method modified elements array count modified elements returned 
mpi method returns array completely modified method count elements returned 
number elements modified available length member array 
object returned flag indicating status java bindings omit flag return null object method unsuccessful 
research conducted object serialization mpijava java bindings 
object serialization feature java language allows member variables class parent classes written file network connection 
class contains member variables objects member variables member objects serialized 
state object restored object 
bindings define mechanism describes layout memory structure mpi derived datatype 
datatype defined programmer send derived datatype processes 
object serialization java eliminates need creating derived datatype transmit member fields object mpi process 
programmer simply pass object communication routine object serialization take care rest 
distributed object group metacomputing architecture distributed object group metacomputing architecture dogma provides framework development execution parallel applications clusters workstations supercomputers 
dogma research platform active development glenn judd brigham young university 
dogma runtime environment written java platform independent supports dynamic reconfiguration remote management decentralized dynamic class loading fault detection isolation web browser screen node participation 
foundation dogma runtime environment java remote method invocation 
remote method invocation allows java objects virtual machine interact java objects separate virtual machine 
java applications remote method invocation able dynamically locate remote objects communicate remote objects distribute bytecode remote objects 
distributed java machine forms second layer dogma runtime environment 
responsibility distributed java machine connect java virtual machines single distributed machine 
nodes forming distributed machine organized categories families clusters 
families nodes similar architecture configuration 
clusters nodes nodes located near physically 
centralized daemon responsible entire distributed machine processing reconfiguration requests faults 
application runs node distributed machine applications communicate requests distributed machine local 
system topology dynamic nodes virtual machine added removed time administrator 
groups families clusters nodes stored configuration configuration dynamically added removed run time configuration manager 
web browsers may participate distributed machine loading applet 
applications served local disk space distributed world wide web server 
application programmers interface api topmost layer dogma environment 
api specifications available application development message passing interface distributed object groups 
mpi implementation completely written java approximately complete 
api bindings specified mpi specification possible 
dominant api dogma environment distributed object groups dog environment 
dog allows applications large groups objects 
dog api allows applications perform asynchronous method invocations large groups objects dynamically partition reassemble data define group members peer communication 
dogma ongoing research project 
enhancements dogma include ability reload newer version object shutting runtime environment 
research performed efficient object migration optimal performance application system management dynamic data partitioning enhancements fault tolerance 
chapter considerations porting mpi standard java java inherent qualities parallel programming potential java programming language researchers develop parallel applications running network inexpensive workstations vast 
java includes numerous features rich set libraries natural language develop parallel distributed applications 
reason java natural language development distributed parallel applications portability 
java source code compiles architecture neutral byte code format runs machine java virtual machine ported 
addition java language specification specifies exactly primitive data types represented big endian order terms size bits 
complete specification primitive types eliminates problems related data conversion heterogeneous virtual machine 
second reason java natural language development distributed parallel applications language simplicity 
language eliminates complex constructs source headaches programmers 
example elimination pointers pointer arithmetic 
programmers spend large amount time debugging code pointer inadvertently points invalid region memory 
java replaces pointer type strong type checking system ensures array bounds aren exceeded runtime garbage collector frees memory objects application longer objects 
final reason java natural language developing distributed parallel applications java includes functionality assist development distributed applications 
object serialization allows user defined data structure transferred remote processes transparently call 
remote method invocation process invoke method remote machine calling semantics local object 
object serialization remote method invocation important components message passing architecture developed java 
message passing jmpi java message passing interface jmpi implementation message passing interface distributed memory multi processing java 
wrapper implementations mpi mpijava jmpi completely written java runs host java virtual machine supported 
contrast mpijava relies java native interface jni communicate implementation mpi written result mpijava restricted running hosts native mpi implementation ported 
furthermore jni introduces platform specific dependencies reduces application portability 
wrapper implementation difficult install run 
host host host host tcp ip network 
process distributed parallel application shows process parallel application running processor distributed machine connected tcp ip network 
traditional model message passing environment berkeley sockets 
example lets assume host message send host time distributed machine formed host opens socket predetermined port listens incoming connections 
likewise host creates socket connects open port host connection established messages sent direction hosts messages sent processes sent array bytes 
result high level data structures encoded byte arrays message transmitted network 
jmpi implements message passing java remote method invocation rmi 
rmi native construct java allows method running local host invoke method remote host 
benefit rmi call remote method semantics call local method 
result objects passed parameters returned results remote method invocations 
object serialization process encoding java object stream bytes transmission network 
remote host object reconstructed object byte array stream 
object contains objects complete graph serialized 
example assume host wishes send message host time distributed machine formed host registers local object available remote method invocation java registry 
purpose registry function naming service 
registry allows local method running host turn object uniform resource locator url remote method 
bound process host invokes remote method message single parameter 
method running host inserts message local fifo queue blocked threads new message arrived 
remote method returns boolean value true indicate successful transmission message false returned 
jmpi architecture shows architecture jmpi 
jmpi distinct layers message passing interface api communications layer java virtual machine 
message passing interface api proposed set java bindings northeast parallel architecture centre npac syracuse university provides core set mpi functions mpi applications written 
communications layer contains core set communication primitives implement message passing interface api 
java virtual machine jvm compiles executes java bytecode 
operating system java virtual machine communications layer message passing interface api java mpi application 
jmpi architecture java mpi application programmer interface mpi forum group consisting members organizations formed late develop open portable message passing standard 
mpi standard released august defined set calls point point communication collective group operations process groups communication domains process topologies environmental management inquiry profiling 
initially standard included set bindings fortran subsequently mpi forum released mpi standard spring address ambiguities errors mpi standard address broader issues previously dealt initial release 
mpi standard released summer included library functions dynamic process management input output routines operations bindings 
portions mpi standard retrofitted mpi implementations complete mpi implementation released 
furthermore mpi forum officially summer mpi standard released 
result official bindings exist java 
northeast parallel architecture centre released draft specification closely follows bindings 
shows proposed organization mpi main classes mpi group comm datatype status request 
comm subclasses class intercomm class 
furthermore split subclasses 
package mpi mpi group comm datatype status request intercomm 
mpi class organization formal java bindings exist mpi standard choose follow bindings proposed northeast parallel architectures centre npac 
proposed java bindings derived closely follow official bindings developed mpi forum 
secondly felt important maintain compatibility implementation mpi implementations proposed bindings 
result programmers don need modify code different java implementations mpi 
furthermore able run ibm test suite validation software ported java npac implementation modifying source code 
important api considerations java mpi bindings java closely follow official mpi bindings important modifications due design java 
sections describe important changes proposed java bindings official bindings 
internal objects mpich implementation mpi inherently object oriented core data structures communicators groups requests opaque objects 
object defined opaque internal representation directly visible user 
program refers opaque object handle 
handle passed returned mpi calls 
contrast java bindings objects represent internal states objects passed directly returned mpi methods 
addition java bindings define appropriate methods objects 
example class defines send receive methods allow process send receive messages processes 
similar opaque object internal representation java object directly visible mpi application 
restrictions derived datatypes java virtual machine support direct access main memory support concept global linear address space 
result operations map data structures physical memory available java mpi applications 
java bindings support object serialization passing messages processes 
object serialization flattens state java object serial stream bytes 
object serializable programmer implements serializable interface object declaration 
object serialization mpi object type specified argument communication methods 
arrays objects strided arrays objects serialized 
multi dimensional arrays offsets multi dimensional arrays fortran mapped equivalent onedimensional arrays sequentially memory 
example declaration int equivalent int size array totaling bytes 
row mapped respectively second row mapped respectively 
multidimensional arrays passed buffers mpi routines interpreted onedimensional counterparts element type original multi dimensional array 
java represents multi dimensional arrays differently 
java dimensional array represented dimensional array dimensional arrays 
previous example int java equivalent element array element array integers 
complicates mpi implementation java multi dimensional arrays stored sequentially furthermore java prohibits direct access physical memory 
prevents mpi application specifying offset zero element message buffer 
fortran mpi bindings implicit offset parameter functions message buffer parameter 
implicit offset user directly specify starting address message buffer 
specify offset dimensional array application written passes address tenth element directly parameter 
java support direct access memory java mpi bindings add additional parameter methods message buffers parameters allow mpi applications specify starting element array integer offset 
jmpi provides supports multi dimensional arrays arrays laid sequentially memory support multi dimensional arrays dimension accomplished java introspection 
introspection allows java application dynamically determine type object 
message buffer passed parameter mpi method algorithm uses introspection determine number dimensions message buffer number elements dimension array 
number elements dimension calculated array containing element message buffer specified offset parameter determined 
algorithm sequentially steps multi dimensional array number elements specified mpi application exhausted element array reached 
contrast mpijava limited arrays dimension 
attempts multi dimensional arrays offset larger size innermost array result undefined values sent processes 
error handling error handling java bindings differs significantly fortran bindings 
example mpi functions api return single integer value indicate success failure call 
contrast java throws exceptions error occurs 
example program tries index array outside declared bounds java lang exception thrown 
program choose catch exception propagate exception java virtual machine jvm 
purpose code perform cleanup operation prompting filename exception thrown 
exception propagates java virtual machine stack trace printed application terminates 
java mpi bindings chose exceptions error condition occurs returning integer error code 
exception error handling facility built language run time libraries provided java 
addition java support pass calling semantics extremely clumsy return multiple error codes 
communications layer communications layer primary responsibilities virtual machine initialization routing messages processes providing core set communications primitives message passing interface api 
communications layer multi threaded runs separate thread mpi process 
allows implementation non blocking synchronous communication primitives mpi api 
messages transmitted directly destination remote method invocation 
communications layer performs tasks virtual machine initialization start instance java registry register instance communication layer server skeleton client stub registry perform barrier processes participate virtual machine 
registry serves object manager naming service 
process virtual machine registers instance communications layer local registry 
registered instance communication layer addressable uniform resource locator url form rmi hostname com represents port number registry accepts connections represents rank local process ranges total number processes virtual machine 
command line parameters passed process initialization url rank communications layer 
communications layer started local registry registered instance local communications layer step initialization perform barrier processes 
purpose barrier fold ensure processes initialized properly receive table containing urls remote processes communications layers virtual machine 
barrier formed processes invoked barrier method rank process 
processes means remote method invocation rank process 
remote method invoked process bind remote object uniform resource locator 
bound remote method invoked manner local method 
barrier rank process uses java notify wait methods implement barrier 
messages processes passed parameter remote method invocation destination process 
message serializable object consists fields represent source rank destination rank message tag 
addition message incorporates datatype object indicate type data sent message actual data 
remote method inserts message object local processes fifo message queue notifies locally blocked processes new message arrived java synchronization routines 
synchronous mode sends completion call indicates receiver progressed matching receive communication layer blocks waits notification local process matching receive started 
java wait notify methods implement synchronous mode sends 
communication modes remote method returns message inserted local message queue 
local process receives messages invoking local method communications layer 
method checks incoming message queue message matches source rank message tag passed parameters 
matching message receive call returns message 
call blocks waits new message come 
message queue implemented java vector class reasons synchronized access allows thread insert remove messages time vectors perform significantly faster hand coded linked list implementation 
addition vectors support order removal messages required implement mpi receive calls 
communications layer provides communication primitives mpi bindings implemented 
blocking point point primitives discussed previous paragraphs 
non blocking versions point point primitives implemented creating separate thread execution simply calls respective blocking version communication primitive 
collective communication primitives broadcast processes built top point point primitives 
separate message queue buffer incoming collective operations satisfy mpi specification document 
probe functions allow message queue searched matching messages retrieving 
barrier primitive allows processes synchronize execution 
chapter testing methodology mpi standards adherence formal mpi standard exists java programming language northeast parallel architecture centre npac syracuse university proposed draft standard 
draft standard proposes set java language bindings mpi implementers java application programmers take advantage power mpi java 
draft standard official bindings adopted mpi forum mpi specification modifications standard accommodate language differences java 
short list differences include mpi object datatype restrictions struct derived datatype offset parameter communication primitives indicate start message buffer java exceptions report error conditions 
document official mpi forum standard jmpi adherence proposed standard important reason compatibility 
adherence proposed standard ensures behavior programs written specification change program ported wrapper native implementations 
additionally similar efforts underway implement mpi bindings java draft standard 
ibm test suite spring ibm released suite applications test functionality mpi implementation 
applications organized main categories test specific functionality mpi implementation point point communication operators collective operators context environment topology 
npac ported ibm test suite java released java test suite part mpijava wrapper implementation 
functionality java test suite broken main categories collective communication operators communicators datatypes environmental operators group operators point point communication operators topography operators 
npac test suite includes new applications test java specific extensions java mpi implementation including tests proper handling mpi object datatype 
architecture test application included test suite similar examine test application java 
application tests mpi implementation comm binding 
point point communication primitive sends message receives message remote process call 
test requires processes master process slave process 
specific test determines array integers elements correctly passed mpi processes checks sure buffer send data buffer receive 
master process report error master detects incorrect data message process slave 
testing methodology addition normal testing accompanies software development process jmpi tested npac test suite ensure correctness mpi implementation 
test environment consisted machines dual processor pentium iii running solaris single processor running redhat linux 
test machines connected fast ethernet network 
test run different test environments 
test environment processes test distributed dual processor machine 
similarly second test environment distributed processes test single processor machines 
third test environment distributed process machine communication occurred fast ethernet channel 
jmpi test results npac test suite development jmpi test correctness implementation functionality added 
cases errors reported result draft standard 
example includes setting request objects null successful completion non blocking receive communication primitive 
feedback invaluable part development phase 
table shows final test results jmpi 
pass indicates successful completion functionality tested errors 
implemented indicates functionality tested implemented jmpi 
category test status collective communications pass collective communications pass collective communications pass collective communications pass collective communications implemented collective communications implemented collective communications implemented collective communications pass collective communications pass collective communications pass collective communications pass collective communications barrier pass collective communications bcast pass collective communications pass collective communications gather pass collective communications pass collective communications pass collective communications pass collective communications reduce implemented collective communications reduce scatter implemented collective communications reduce implemented collective communications implemented collective communications scan implemented collective communications implemented collective communications scatter pass collective communications pass collective communications pass collective communications pass communicators attr pass communicators pass communicators compare pass communicators intercomm implemented communicators split pass datatype implemented datatype implemented datatype implemented datatype implemented table 
test results npac test suite jmpi 
continued page 
category test status datatype implemented datatype pack pass datatype pass datatype type size pass datatype zero implemented datatype zero implemented environment abort pass environment initialized pass environment pass environment pass group group pass group range pass point point pass point point free pass point point org pass point point test pass point point pass point point buffer pass point point pass point point pass point point interf pass point point pass point point pass point point pass point point probe pass point point pass point point pass point point pass point point pass point point pass point point rep pass point point pass point point seq pass point point pass point point pass point point start pass point point pass point point pass point point test pass point point test pass table continued category test status point point test pass point point test pass point point test pass point point test pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point pass point point wildcard pass topography cart implemented topography implemented topography graph implemented topography map implemented topography sub implemented table continued chapter jmpi performance performance important characteristics parallel programming environment performance 
scientists won invest time develop parallel applications java performance significantly slower application coded furthermore java starts slight disadvantage language interpreted executed 
section performance jmpi compared performance mpi implementations mpich mpijava 
mpich argonne national laboratory implementation mpi completely written mpijava syracuse university wrapper implementation mpi java uses mpich native implementation mpi 
applications compare performance jmpi implementations pingpong 
pingpong measures round trip time required transmit message mpi processes 
mandelbrot calculates mandelbrot fractal grid distributing slave processes 
performance native mpich implementation measured application coded performance mpijava jmpi measured application coded java 
third application nozzle shows limitations wrapper implementation mpi 
nozzle java applet simulates flow non viscous fluid cylindrical nozzle 
comparison performance jmpi mpich mpijava shows mixed results performance application distributed workstations ethernet network suffers significantly small message sizes due extra overhead object serialization added latency remote method invocation 
overhead significant size message passed increases 
applications terminated abnormally mpijava error mis matched message mpich backend 
performance jmpi lags mpijava applications stable jmpi 
test environment test environment consists nodes connected fast ethernet network 
node contains intel pentium iii processors running mhz 
dual processor equipped mb main memory fast ethernet adapter runs solaris 
second node dell latitude laptop single processor running mhz 
laptop equipped mb main memory fast ethernet adapter runs redhat linux 
dual processor solaris production release java development jdk solaris version laptop runs freeware release blackdown jdk linux version rc 
core network port fast ethernet switch 
performance application measured ways processes distributed nodes processes distributed dual processor processes distributed single processor 
pingpong pingpong measures round trip delay message mpi processes calculates throughput available 
message consists dimensional array bytes number elements array varies function varies 
smallest message array containing element byte largest message array containing elements megabyte 
elements array initialized value defined equation byte double 
message sent 
message sent total times rank rank process 
rank process records round trip time message produces average round trip time average throughput measured mb sec array 
shows small message sizes performance jmpi significantly slower mpich mpijava 
mpich uses native socket interface transmit messages processes mpijava uses java native interface jni marshall java datatypes mpich 
contrast jmpi uses remote method invocation transmit messages source process destination process 
poor performance small message sizes due overhead attributed remote method invocation 
rmi overhead consists parts object serialization latency added invoking remote method 
object serialization flattens java objects array bytes transmission network 
process flattening increases message size fixed constant bytes 
small message sizes object serialization adds significant amount overhead 
measure amount latency added remote method invocation coded simple remote method performs computation returning control execution back caller 
method invoked iterations average added latency remote method ethernet network ms pingpong performance nodes fast ethernet size number elements message mb sec mpich mpijava jmpi 
pingpong performance nodes fast ethernet 
shows performance pingpong application dual processor solaris system 
poor performance jmpi attributed directly overhead remote method invocation compared shared memory transport mpich 
time jmpi processes started machine invoked separate java virtual machine environments processes remote method invocation message transport 
significant performance enhancements processes started separate threads virtual machine environment message transport processes local method call virtual machine 
processes execute single java virtual machine processes remain separately schedulable run separate processors run java virtual machine implements native threading 
pingpong performance dual processor size number elements message mb sec mpich mpijava jmpi 
pingpong performance dual processor system 
pingpong performance single processor size number elements message mb sec mpich mpijava jmpi 
pingpong performance single processor linux system 
shows performance pingpong single processor linux system significantly better mpich large message sizes continues lower small message sizes 
mpich implementation linux uses sockets shared memory message transport processes machine 
results bottleneck message sizes greater elements native elements mpijava due lack buffer space change transport protocol exchange messages 
small message sizes mpich uses eager protocol assumes remote process sufficient memory buffer messages 
large messages mpich transfers small sections message remote process waits sending section 
dual processor case significant performance enhancements processes started separate threads virtual machine environment message transport processes local method call virtual machine 
mandelbrot curve intriguing facets computer graphics fractals 
fractal curve surface exhibits degree self similarity 
fractals occur regularly nature clouds examples 
seen space appears rugged feature formed bays 
takes closer look sees similar set curves formed sand rocks 
famous fractals computer graphics mandelbrot curve 
mandelbrot curve formed calculating sequence values 
point grid 
sequence 
point formed iteratively calculating equations yi point sum iteratively calculated determine grows arbitrarily large 
dk greater point iteration successive iterations exponentially grow value infinity iteration stopped 
point considered part mandelbrot curve colored black 
iteration repeated times suitably large value typically 
point considered part mandelbrot curve assigned color magnitude 
mandelbrot curve algorithm coded master slave paradigm 
paradigm process created designated master process processes designated slaves 
master process responsible assigning slave processes accumulating results 
master process sequentially assigns slave square pixel area grid process 
assignment arrives form element integer array contains ordinate upper left hand corner region ordinate lower right hand corner 
slave calculates mandelbrot value point region iterating times pixel 
iteration area completes slave sends response back master form element integer array followed dimensional double array 
element integer array contains coordinates area described 
dimensional double array contains mandelbrot curve values point region 
master process copies mandelbrot values array respective positions master pixel array 
master slave section grid compute mandelbrot values 
processing completes values entire pixel array computed 
pixels colored mandelbrot value 
output algorithm sun raster file shown 

output mandelbrot curve application 
performance jmpi determined measuring amount time required calculate mandelbrot values pixel grid 
test case elapsed time runs averaged produce final result 
performance jmpi compared mpich mpijava test environments distributing master slave processes evenly dual processor single processor distributing processors dual processor distributing processes single processor 
addition number slave processes varied 
shorter elapsed times indicate better performance 
shows amount time elapsed calculating mandelbrot fractal processes distributed fast ethernet network applications mpich mpijava jmpi 
java implementations mpijava jmpi significantly slower native implementation mpich 
performance jmpi faster mpijava slave process linear slowdown occurs new slave process added 
furthermore performance mpijava increases number slaves increases performance remains relatively constant number slave processes increase 
expect performance decrease new slave processes added master process quickly bottleneck 
specifically bottleneck occurs result copying mandelbrot results returned slave main pixel array 
linear slowdown performance jmpi attributed overhead remote method invocation object serialization overhead due small message sizes 
time seconds complete pixel fractal ethernet number slave processes mpich mpijava jmpi 
performance mandelbrot application fast ethernet 
shows amount time elapsed calculating mandelbrot fractal processes distributed dual processor solaris system 
mpich mpijava shared memory transport passing messages perform significantly better jmpi uses rmi passing messages 
jmpi shows performance increase number slaves increased linear slowdown occurs slave added second 
shows amount time elapsed calculating mandelbrot fractal processes distributed single processor linux system 
degradation performance exhibited due decrease processing power change message transport shared memory sockets 
jmpi performs significantly better mpijava number slaves jmpi performs worse mpijava number slaves increases due linear slowdown performance caused bottleneck master process 
bottleneck attributed overhead rmi 
time seconds complete fractal dual processor number slave processes mpich mpijava jmpi 
performance mandelbrot application dual processor system 
nozzle nozzle java applet simulates dimensional flow nozzle 
core simulation stage runge kutta time stepping algorithm 
runge kutta algorithm solve ordinary differential equations initial variables known subsequent variables guessed iteratively calculated 
initial conditions flow initialized tran dat distributed application 
additionally numerical dissipation algorithm dampen spurious oscillations cause solution diverge presence shock waves 
sequential version nozzle developed northeast parallel architecture centre npac modified sang lim npac mpi 
nozzle distributed examples subdirectory mpijava 
time seconds complete fractal single processor number slave processes seconds mpich mpijava jmpi 
performance mandelbrot application single processor system 
nozzle java applet designed run processes process responsible area nozzle 
rank process additional responsibility reading starting conditions displaying results 
simulation displays contour plots flow control variables real time velocity pressure mach number density entropy temperature 
shows output nozzle simulation flow variable pressure contour plots minutes simulation 
flow nozzle left right boundaries process shown solid line 
approximately iterations required input output flow conditions supersonic approximately iterations required ingress egress flow conditions subsonic 
flow considered subsonic speed fluid nozzle slower speed sound supersonic speed fluid nozzle greater speed sound 
purpose nozzle simulation show jmpi adherence draft standard show compatibility implementation mpijava jmpi 
simulations run processes mpijava jmpi test environments nodes connected fast ethernet single process dual processor system processes single processor system processes 
dual processor system process ran concurrently separate processor 
native implementation mpijava mpich 
source code required modifications compiled implementations 
results simulation show problems portability mpijava environment 
specifically unable get nozzle correctly dual processor environment 
mpich backend reported message size mismatches sender receiver 
able get nozzle correctly test environments 
formal mechanisms exist measuring performance nozzle modification source code applications approached solution dual processor environment amount time 
additionally updates output screen appeared happen time interval platforms 
jmpi performance clearly suffers result remote method invocation primary message transport processes specifically multi processor environment 
semantics remote method invocation offer simpler implementations mpi primitives process barriers synchronous communication modes performance message transport greatly enhanced sockets 
addition research needed determine performance benefits integrating multiple processes java virtual machine environment multi processor system 
initial concern research stability multiple processes event process hogs resources 
performance jmpi lagged mpijava cases environment incredibly robust consistent compared mpijava 
changes message transport jmpi jmpi jmpi perform significantly better mpijava 

screenshot nozzle application 
chapter research research jmpi starting point implementation message passing interface java lack performance needs addressed 
specifically remote method invocation rmi slow handling message passing processes 
rmi adds constant bytes size message transferred adds average ms message latency 
research goal replace rmi communications layer berkeley sockets 
berkeley sockets replace bulk message transfer rmi play role virtual machine initialization process synchronization 
second research goal run multiple processes separate threads java virtual machine physical machine 
currently jvm instantiated process started virtual machine 
multiple processes run java virtual machine shared memory exchange messages processes 
shared memory increase performance message transfer processes decreasing total memory required machine 
appendix getting started jmpi appendix describes process downloading installing jmpi software configuring virtual machine compiling running sample application supplied jmpi 
jmpi completely written java requires java development kit jdk version better run 
addition users jmpi microsoft windows platform need install configure remote shell rsh daemon machines 
downloading jmpi software latest version jmpi source code pre compiled class files documentation available web euler ecs umass edu jmpi jmpi compressed tar archive unix platforms file microsoft windows platforms 
unpacking archive creates mpi jar top level directory src doc sub directories 
mpi jar pre compiled archive classes form mpi package ready immediate 
makefile included src directory running recompile source code recreate mpi jar archive 
makefile bat included users recompiling microsoft windows platform 
downloading java development toolkit jmpi requires version better java development toolkit jdk java runtime 
version currently active beta time document written preferred version performance enhancements remote method invocation object serialization 
version jmpi known jdk platforms listed 
jdk available free charge 
users microsoft windows windows nt windows sun solaris sparc sun solaris intel recommended jdk available download sun microsystems website www javasoft com time sun released final versions java software development environment standard edition se platforms listed 
addition public beta version se available users microsoft windows platform 
plan run mpi windows platform need rsh daemon available www com users linux platform versions java development toolkit known jmpi 
blackdown jdk version rc ported directly sun source code available www blackdown org second beta release jdk version ibm alphaworks project available www alphaworks ibm com complete list available platforms visit java sun com configuring mpi runtime environment set hosts mpi application execute forms virtual machine 
mpi process compiled executed virtual machine environmental variables need set modified 
addition host virtual machine needs entry rhosts file host launches mpi application 
home directory mounted hosts virtual machine sure install jmpi set environment variables host appropriately 
jdk uses classpath environment variable locate java classes 
filename jmpi jar archive path mpi application need included classpath environment variable 
example jmpi jar located usr local lib wish execute mpi class files home directory set classpath environment variable follows classpath usr local lib jmpi jar 
path statement needs include path jdk binaries installed 
example jdk installed usr local jdk include usr local jdk bin path statement 
home directory mounted hosts virtual machine set environment variables profile file 
creating file named contains entry host participate virtual machine 
host placed single line optionally followed number processes run host 
omitted process started machine 
additionally user may optionally specify path filename java class remote machine 
user optionally disable just time jit compiler 
disabling jit compilation results significantly slower performance stack traces include line number source code caused exception 
lines considered comments ignored 
golden gate usr home fred master export home slave 
example virtual machine configuration file shows example virtual machine configuration file 
processes started total process usr home fred master class machine golden gate processes export home slave machine 
java sample java mpi application shows source code trivial process mpi application 
process rank forwards contents float array buf rank process forwards float array rank process 
rank process waits float array arrive rank process negates element forwards array rank process 
rank process waits float array rank process float array rank process 
rank prints contents arrays processes application terminates 
compiling modified path classpath environment variables described section ready compiled java 
compile execute command javac java typos java source file compiler outputs class 
running jmpi applications started 
virtual machine configuration file created described section host running added rhosts file hosts virtual machine command starts mpi application java mpi np reads determine hosts participate virtual machine launches individual processes remote hosts rsh ssh 
remote processes running stdout stderr redirected console executing 
virtual machine aborted hitting control 
concludes processes virtual machine exit 
import java io import mpi public class public static void main string args throws int size int rank int offset int count double buf new double double buf new double mpi init args size mpi comm world size rank mpi comm world rank rank buf double buf double mpi comm world send buf offset count mpi double mpi comm world send buf offset count mpi double rank mpi comm world recv buf offset count mpi double buf buf buf buf mpi comm world send buf offset count mpi double rank mpi comm world recv buf offset count mpi double mpi comm world recv buf offset count mpi double system println buf buf system println buf buf mpi finalize 
java example java mpi application bibliography baker fox ko lim mpijava objectoriented java interface mpi november 
fox ko lim mpijava api specification november 
fox ko li zhang draft binding mpi september 
judd skjellum fox 
mpi java position document draft api specification java grande forum 
chan java developers 
reading massachusetts addison wesley longman 
flanagan java nutshell second edition 
cambridge reilly associates 
flanagan java examples nutshell 
cambridge reilly associates 
geist beguelin dongarra jiang manchek sunderam pvm parallel virtual machine users guide tutorial networked parallel computing 
cambridge massachusetts mit press 
flynn hummel high performance parallel programming java exploiting native libraries england yorktown heights ny october 
gordon essential jni java native interface 
upper saddle river nj prentice hall ptr 
gosling joy steele java language specification version 
reading massachusetts addison wesley longman 
gropp lumsdaine lusk nitzberg snir mpi complete volume mpi extensions 
cambridge massachusetts mit press 
gropp lusk skjellum mpi portable parallel programming message passing interface 
cambridge massachusetts mit press 
java grande forum panel 
java grande forum panel report making java high computing 
orlando florida november 
message passing interface forum 
message passing interface standard 
march 
message passing interface forum 
extensions message passing interface 
august 
writing programs london england university october 
oaks wong java threads 
cambridge reilly associates 
snir otto walker dongarra mpi complete volume mpi core second edition 
cambridge massachusetts mit press 
zhang carpenter fox li wen considerations language design implementation syracuse new york northeast parallel architectures centre syracuse university october 

