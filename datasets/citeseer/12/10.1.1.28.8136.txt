constraint satisfaction approach enclosing solutions parametric ordinary differential equations micha janssen ucl place louvain la neuve pascal van hentenryck brown university box providence ri yves deville ucl place louvain la neuve considers initial value problems ordinary differential equations odes data uncertain intervals case areas science engineering 
interval methods provide way approach problems raise fundamental challenges obtaining high accuracy low computation costs 
introduces constraint satisfaction approach problems enhances traditional interval methods pruning step global relaxation ode 
theoretical experimental results show approach produces significant improvements accuracy best interval methods computation costs 
results indicate new algorithm significantly faster complex problems 
initial value problems ordinary differential equations odes arise naturally applications science engineering including chemistry physics molecular biology mechanics name 
ordinary differential equation system form un 
un fn un denoted vector notation 
initial value problem ode initial condition addition practice case parameters initial values known certainty intervals 
traditional methods may simplest way approach resulting parametric ordinary differential equations essence solve infinitely systems 
interval methods pioneered moore moo provide approach tackle parametric odes 
return enclosures exact solutions different points time guaranteed return intervals containing exact solution 
addition inherently accommodate uncertainty parameters initial values intervals floatingpoint numbers 
talk odes denote traditional parametric odes 
traditional interval methods usually consist processes applied integration step bounding box process proves existence uniqueness solution computes rough enclosure called bounding box solution time interval forward process computes enclosure autonomous systems considered 
easy generalize results non autonomous systems 
solution bounding box process specific interval methods necessary bound error terms forward process 
forward process generally realized applying step taylor interval method making extensive automatic differentiation ral obtain taylor coefficients eij kru moo moo 
major problem methods explosion size boxes successive points accumulate errors point point lose accuracy enclosing solution box called wrapping effect 
system loh important step interval methods features efficient coordinate transformations tackle wrapping effect 
jackson iho method nj improved extending hermite approach viewed generalized taylor method intervals 
approach taylor models proposed makino bm reducing wrapping effect 
scheme validates existence uniqueness computes tight enclosures solution process contrary methods mentioned 
research described takes constraint satisfaction approach odes 
basic idea view solving odes iteration processes bounding box process predictor process computes initial enclosures times enclosures previous times bounding boxes pruning process reduces initial enclosures removing solutions 
real novelty approach pruning component 
main contribution show effective pruning technique derived relaxation ode importing fundamental principle constraint satisfaction field validated differential equations 
main steps necessary derive effective pruning algorithm 
step consists obtaining relaxation ode safely approximating solution hermite interpolation polynomials 
second step consists mean value form relaxation accuracy efficiency 
unfortunately steps sufficient resulting pruning algorithm suffers traditional problems interval methods 
third fundamental step consists pruning considering successive relaxations 
idea generating global constraint set primitive constraints heart constraint satisfaction 
possible new context address problem dependencies accumulation errors wrapping effect simultaneously 
fourth final step consists finding evaluation time relaxation minimizes local error relaxation 
global constraint generated third step relaxation ode parametrized evaluation time 
interestingly global filters hermite interpolation polynomials optimal evaluation time independent ode induces negligible overhead computational cost methods 
theoretical experimental results show benefits approach 
theoretical standpoint constraint satisfaction approach provides quadratic improvement accuracy asymptotically best interval method know computation costs 
theoretical results show approach significantly faster precision function contains operations 
experimental results confirm theory 
show constraint satisfaction approach produces orders magnitude improvements accuracy existing methods computation costs produce significant gain computation times complex problems 
particular interest versatility approach tailored problem hand 
rest organized follows 
section introduces main definitions notations 
section gives high level overview constraint satisfaction approach parametric odes 
sections core 
section introduces multistep filters section presents multistep observe interval extensions predictor corrector methods nj viewed composition predictor pruning step 
global constraints ordinary differential equations useful cb 
problem techniques cb fundamentally different 
hermite filters special case multistep filters section describes choose evaluation time minimize local error multistep hermite filter section presents algorithm 
sections report theoretical experimental analyses section concludes 
background definitions basic notational conventions small letters denote real values vectors functions real values 
capital letters denote matrices sets intervals vectors functions intervals 
ir denotes set closed intervals vector intervals ir called box 
denotes smallest box ir denotes set fg ag 
assume reals ir 
denote midpoint denote 
observe denote width box 
precisely ir 
ary function ary vector denotes jacobian matrix xm 
gn gn xm write simply differentiate wrt variables notation bold face notations set bold face notations 
ik observe 
assume underlying interval arithmetic exact theoretical parts rounding errors 
properties exact interval arithmetic 
basic definitions traditional restrict attention odes unique solution initial value sufficiently large techniques verify hypothesis numerically known moo moo cr ned 
practice objective produce approximation values solution different points motivates definition solutions generalization multistep solutions 
definition solution ode open set 
solution ode function definition multistep solution ode solution ode multistep solution partial function ms ms undefined 
multistep solutions partial functions generalize definition interval extensions partial functions 
definition interval extension partial function interval function ir ir interval extension partial function ir notation captures notions real interval taylor coefficients solution ode jacobians 
notation taylor coefficients jacobians solution ode 


box 
interval matrix 
generalize concept bounding boxes fundamental concept interval methods odes multistep methods 
intuitively bounding box encloses solutions ode going certain boxes times time interval 
bounding boxes needed enclose error terms validated methods odes see section 
definition bounding box ode system ms multistep solution ft ir 
box bounding box wrt ms midpoint technique midpoint technique standard tool interval computation avoid multiplying interval matrices invert interval matrix costly operations general see knu 
replaces matrix uses approximations simplify terms involving 
midpoint technique places illustrate clarity 
assume interested enclosing solution linear system ax interval matrix interval vector 
words enclosure set fx ax bg midpoint technique consists replacing system ax successive integration steps equation may approximated right hand side vector intervals real matrix 
simple obtain enclosure solutions formula provided non singular 
constraint satisfaction approach constraint satisfaction approach followed 
consists generic algorithm odes iterates processes bounding box process computes bounding boxes current step proves numerically existence uniqueness solution predictor process computes initial enclosures times enclosures previous times bounding boxes pruning process reduces initial enclosures removing solutions 
intuition successive integration steps illustrated 
bounding box predictor components standard interval methods odes 
focuses pruning process main novelty approach 
pruning component relaxations ode described section 
knowledge approach uses relaxations ode derive pruning operators approaches pruning component nj developed independently 
note predicted boxes generally superscripted symbol pruned boxes generally superscripted symbol 
pruning component uses safe approximations ode shrink boxes computed predictor process 
understand idea useful contrast constraint satisfaction nonlinear programming ordinary differential equations 
nonlinear programming constraint xn directly pruning search space cartesian product intervals associated variables 
suffices take interval extension xn constraint 
hold follows definition interval extensions solution lies interval extension seen filter pruning search space ways 
instance numerica uses box consistency interval constraints 
ordinary differential equations raise new challenges 
ode functions course unknown 
obvious obtain filter prune boxes 
main contributions approach show derive effective pruning operators parametric odes 
step consists rewriting ode terms multistep solution ms obtain ms ms denote formula rewriting may appear useful ms unknown function 
suggests way approximate ode 
show section obtain interval extensions ms ms polynomial interpolations error terms 
simply requires bounding box considered time interval safe approximations ms successive times available bounding box predictor processes 
interval extensions available possible obtain interval formula form fl approximates original ode 
formula ready filter universally quantified 
solution simpler consists restricting attention finite set times possibly singleton obtain relation fl produces computable filter 
relation fl hold time follows solution go boxes times definition proposition capture concepts formally 
definition multistep filter ode solution 
multistep filter interval relation fl ir bool satisfying fl proposition soundness multistep filters ode fl multistep filter fl hold exists solution going times filter obtain tighter enclosures solution 
simple technique consists pruning box computed predictor process 
assume box enclosing solution time interested pruning predicted box pruned away condition fl hold evaluation point explain briefly geometric intuition formula considering call natural filters 
interval extensions ms dms ms ms possible approximate ode formula dms ms formula left hand side equation represents approximation slope right hand represents slope approximation approximations conservative sides intersect boxes containing solution 
empty intersection means boxes formula contain solution ode system 
illustrates intuition 
generated actual ordinary differential equation considers points intervals uses ok ko geometric intuition multistep filter interpolation polynomial approximation ignores error terms simplicity 
illustrates technique prune away value potential solution time 
consider solution equation evaluates respectively 
possible points considered possible values curve marked ko describes interpolation polynomial going times determine value solution time idea test equation satisfied time 
say choose 
seen easily slope interpolation polynomial different slope specified time value solution curve marked ok describes interpolation polynomial going times case equation satisfied time means pruned away 
filter proposed earlier generalizes intuition boxes 
left right hand sides represent sets slopes filter fails intersection empty 
traditional consistency techniques algorithms filter applied 
instance may interested updating box computed predictor process operator fr fl observe operator uses evaluation time main results consists showing chosen optimally maximize pruning 
definition novel notion consistency odes capture pruning boxes 
definition backward consistency multistep filters multistep filter fl backward consistent time fu fl system successive multistep filters ffl backward consistent time vector fu fl interval methods odes necessary introduce coordinate transformation represent set solutions compactly 
useful generalize definition introducing affine transformations 
definition generalized backward consistency multistep filters ir 
multistep filter fl backward consistent time exists invertible affine transformation fy fl system successive multistep filters ffl backward consistent time vector exists invertible affine transformation fy fl rest backward consistency generalized backward consistency simplicity 
algorithm computational results enforces backward consistency system filters describe 
multistep filters filters rely interval extensions multistep solution derivative wrt extensions general decomposing unknown multistep solution sum computable approximation unknown error term ms exist standard techniques build bound section reviews derived hermite interpolation polynomials 
simply assume available show build filters 
natural filters section showed natural multistep filters obtained simply replacing multistep solution derivative wrt interval extensions obtain dms ms easy enforce backward consistency natural filter variables may occur complex nonlinear expressions 
problem addressed mean value filters study 
mean value filters mean value forms mean value forms play fundamental role interval computations derived mean value theorem 
correspond problem linearizations point result filters systems linear equations interval coefficients solutions enclosed reasonably efficiently 
mean value forms effective sizes boxes sufficiently small case odes 
addition linear equations allow easier treatment called wrapping effect crucial problem interval methods odes discussed sections 
consequence mean value forms especially appropriate context produce filters efficiently amenable backward consistency 
rest section describes obtain mean value filters 
implicit mean value filters consider function de de multistep solution ms defined ode solution going relation ir ir de de de ir mean value theorem write de de de de de de de de ju ju de 
allows define new multistep filter call implicit mean value filter 
filter parametrized initial domain variable definition implicit mean value filter implicit mean value filter ode ir interval relation fl de 
de em dem 
interval extension function de de interval extensions resp 
em dem de de de de note jacobians computed means automatic differentiation tools see ral 
proposition states implicit mean value filter eliminate solution ode 
direct consequence mean value theorem 
proposition implicit mean value filter ode multistep filter explicit mean value filters general initial value problems interested pruning predicted box convenient derive mean value filter explicit ir predicted box variable define 
implicit mean value filter interval constraint form ir ir write term normally small size substitute right side looking pruned box obtain system equation rewritten ir isolate term involving multiplying sides denotes enclosure inverse gives position define explicit mean value filters play fundamental role approach 
definition explicit mean value filter explicit mean value filter ode ir interval relation fl 
ir relation implicit mean value filter proposition explicit mean value filter ode multistep filter smallest enclosing box coordinate transformation enclosing box fits better 
easy explicit mean value filter prune predicted box time boxes previous integration steps isolated 
filter simply pruned box time follows directly explicit mean value filter backward consistent problems mean value filters mean value filters may produce significant pruning boxes computed predictor process 
suffer limitations wrapping effect inherent interval analysis variable dependency problem induced multistep method 
review describing address 
wrapping effect wrapping effect name overestimation arises approximating set box 
context odes set solutions integration step approximated box 
approximations accumulate step step may result explosion sizes computed boxes 
standard solution interval methods odes obtain tighter solution bounds choose step appropriate local coordinate system represent solutions compactly see loh nj 
wrapping effect occur context 
rewrite explicit mean value filter intuition globalization process 
assume point matrices point vector 
boxes computed previous steps exact solution set enclosed set generalization parallelepiped 
illustrates smallest enclosing box 
seen box significantly overestimates 
shows enclosed tightly coordinate transformation 
mentioned finding coordinate system necessarily trivial task idea find approximations main directions may sufficient variable dependency problem discuss 
variable dependencies explicit filters consider application explicit mean value filter successive time steps 
obtain equations form second equation computes box assuming independent case equation 
dependencies lost moving second time step 
variable dependency problem arises successive explicit mean value filters overlap computed box successive filters 
step methods encounter problem computed box time step compute box global filters section avoid variable dependency problem possible apply standard techniques wrapping effect 
global filters main idea underlying global filters cluster mean value filters overlap 
intuition illustrated 
seen global filter prunes predicted boxes times boxes computed times observe global filters overlap boxes subsequent filters 
precisely global filter system successive explicit mean value filters 
definition global filter global filter ode system ffl successive explicit mean value filters respectively function hk endfor downto downto downto endfor endfor endfor return algorithm computing explicit global filter 

key idea remove variable dependency problem solve globally transforming global filter explicit form 

concisely ir nk nk ir nk interesting property global filters pruned box times computed terms predicted boxes boxes times gaussian elimination 
consider instance system 
obtain variable eliminated equation obtain avoid multiplying interval matrices apply midpoint technique obtain variable eliminated equation similar fashion obtain filter involving similarly variable eliminated second equation obtain filter involving generic algorithm computing explicit global filter 
receives input ode system previous integration times pruned boxes bounding boxes new integration points predicted boxes integration points bounding boxes new integration points evaluation times filters 
generates matrix vectors explicit global filter compute pruned boxes 
resulting filter backward consistency respect resulting boxes 
precise specification follows 
specification bounding box ode wrt 
hc 
system global filter 
algorithm generic sense uses function generate explicit mean value filter 
generate filter discussed section specification follows 
specification bounding box ode wrt hk 
interval relation fl explicit mean value filter observe global filters remove variable dependency problem pruning process 
advantage producing square systems possible apply standard techniques address wrapping effect 
section discusses wrapping effect detail 
wrapping effect global filters wrapping effect global filters arises multiplying nk nk matrix box nk elements 
fortunately matrices global filters square wrapping effect handled step methods local coordinate transformations qr factorizations loh 
explain process detail 
initially starting previous boxes predicted boxes need solve system equivalently system 
pruned boxes obtained key idea tackling wrapping effect find coordinate system represent solution compactly errors drastically subsequent integration steps 
purpose introduce coordinate transformation terms variables solve system inverting matrix matrix boxes sent integration step 
observe compact representation local coordinate system 
integration step boxes data compute new predicted boxes new global filter coordinate transformation filter rewritten 
observe associativity multiplication critical reducing wrapping effect 
new boxes computed represent set solutions compactly local coordinate transformation obtain system equation system solved inverting observe associativity multiplication tackle wrapping effect 
hope matrix diagonally dominant triangular 
sent integration step 
consequence integration step solve new boxes obtained local coordinate transformation compute new addition inverting matrix standard midpoint technique obtain 
system rewritten definition process choice appropriate matrix course crucial 
qr factorization technique loh successful scheme obtain matrix 
pruning algorithm global filters position pruning algorithm global filters 
pruning algorithm enforces backward consistency global filter composed mean value filters 
algorithm shown specification follows 
specification prune ms multistep solution ode bounding box wrt 
hd prune fm fm function prune hc return hd pruning algorithm global filters 
ms ms 

exists global filter backward consistent time vector 
algorithm receives input previous integration times pruned boxes computed times bounding boxes previous integration steps boxes matrix previous integration step new integration times predicted boxes bounding boxes integration times 
returns pruned boxes integration steps new boxes new matrix integration step 
algorithm follows steps outlined preceeding section 
computes explicit form global filter line new boxes line pruned boxes line 
computes new matrix line new boxes line 
hermite filters previous section assumed existence interval extensions assumed bound error terms show hermite interpolation polynomials purpose 
informally speaking hermite interpolation polynomial approximates function sufficiently large known implicitly values values successive derivatives various points 
hermite interpolation polynomial specified imposing values values successive derivatives points equal values derivatives points 
note number conditions number successive derivatives considered may vary different points sb atk 
definition hermite interpolation polynomial consider ode hermite interpolation polynomial wrt unique polynomial degree satisfying proposition hermite interpolation polynomial polynomial satisfying conditions ij ij ij ij ij 
easy take interval extensions hermite interpolation polynomial derivative 
taylor coefficients solution specifying derivative conditions various interpolation points jacobians needed mean value hermite filters computed automatic differentiation techniques see ral 
remaining issue bound error terms 
standard theorem sb atk provides necessary theoretical basis 
theorem hermite error term hermite interpolation polynomial wrt 
ms ms ft tg 



theorem bound error terms 
bounding box produced validation process ode ft tg wrt suffices compute boxes automatic differentiation see ral 
obtain consequence compute effective relaxation ode specializing global filters hermite interpolation polynomial error bound 
filters hermite interpolation called hermite filters global hermite filter denoted ghf 
note appendix discusses evaluate hermite polynomials accurately 
optimal hermite filters summary achieved far 
basic idea approach approximate ode filter fl shown global filter prunes boxes successive mean value filters addresses wrapping effect variable dependency problem 
shown global filter obtained hermite interpolation polynomials error bounds 
consequence obtain filter ghf prune predicted boxes 
main remaining issue find evaluation time vector sizes solution boxes ghf purpose section show exists optimal evaluation time precise sense define approximated computed efficiently 
preview approach main goal choosing evaluation time minimize local error filter size boxes produced filter 
definition local error filter fl filter ode 
local error fl wrt denoted loc fl defined loc fl 
fu fl observe global filter obtained mean value filters 
minimizing local error amounts minimizing local error individual mean value filters 
local error defined evaluating filter real numbers restrict attention loss generality natural hermite filters need consider mean value forms 
find optimal evaluation time derive local error section 
local error characterize optimal evaluation time section 
main results section follows 
sufficiently small stepsize relative distance optimal evaluation time point natural mean value hermite filter depends relative distances interpolation points 
particular depend ode 

practical standpoint optimal evaluation time precomputed step size 
computation induce overhead method 
third main result concerned order natural hermite filter shown evaluation point chosen carefully 
assumptions notations analyze local error determine optimal evaluation time standard asymptotical notations 
notation asymptotical notations consider functions 
standard notations jf jf 
notations extend component wise vectors matrices functions 
assumptions section 
assume step size integration times increasing assume interval extension sufficiently precise sufficiently small 
assume see ned 
bounding box respect 
assume multistep solution ms defined words solution going times notations local error natural hermite filter characterize local error natural hermite filter need technical lemma characterizes behavior derivatives filter 
lemma consider ode hermite interpolation polynomial wrt uk uk sufficiently small 


defined formula 

lemma shows diagonal matrix proof appendix 
position characterize local error natural hermite filter 
theorem local error natural hermite filter fl natural hermite filter assume 
notations lemma 
singular loc fl jw jw 
singular 
sufficiently small singular proof consider relation de de de de de de bounding box ft tg wrt hermite interpolation polynomial wrt follows sufficiently small 
set fv approximation set fv fl provided bounding box fl 
consider arbitrary vectors de de de de de 
taylor theorem de equal de de de kv ke sufficiently small de de matrix non singular write de de vectors chosen arbitrarily follows loc fl de jd jw jw 
hypothesis loc fl jw jw proves point 
points direct consequences point lemma 
ready show find optimal evaluation time natural hermite filters 
optimal evaluation time natural hermite filter result fundamental characterizes order natural hermite filter 
hints obtain optimal evaluation time 
recall order method filter order local error minus 
theorem order natural hermite filter assume fl natural hermite filter 
notations lemma 
exists 
sufficiently small loc fl 
singular loc fl 
proof consider evaluation time sufficiently small 

assume 
theorem exists evaluation time theorem loc fl 
assume singular 
theorem loc fl 
observe theorem indicates zeros evaluation times giving better order natural hermite filters provided matrix non singular points 
basis result describes necessary condition optimality 
theorem necessary condition optimal natural hermite filters fl natural hermite filter loc fl min fe loc sufficiently small zero function proof assume sufficiently small 
theorem zero minimize local error 
note singular 
ft 
conclude 
result specifies number zeros function locations 
proposition function theorem exactly zeros 
proof 
theorem root 
furthermore roots fs root multiplicity degree 
defined zeros fs ready characterize precisely optimal evaluation time natural hermite filter 
table relative distance rightmost zero theorem optimal evaluation time fl natural hermite filter loc fl min fe loc fl zeros sufficiently small min fs fj jg function defined lemma 
proof definition 
theorem lemma loc fl discussion important discuss consequences theorem detail 
observe relative distance optimal evaluation time point depends relative distances interpolation points vector 
particular independent ode 
instance single zero addition zeros independent 
particular 
consequence step size relative distance optimal evaluation time computed integration 
addition distance depend ode relative distance precomputed stored variety step sizes vectors 
overhead choosing optimal evaluation time negligible 
worth stressing zero function theorem gives order hermite filter provided matrix non singular zero 
zero fact appropriate evaluation time necessarily optimal 
experiments right zero optimal evaluation time able prove result 
illustration illustrate experimentally theoretical results section 
table gives approximative values relative distance rightmost zero function point zeros zeros zeros zeros functions case 
loc rightmost zero loc rightmost zero loc rightmost zero loc rightmost zero local error global hermite filters function evaluation time lorentz system 
observe interpolation points middle moves closer closer larger values illustrates functions complex interactions 
top left shows function zeros top right shows function zeros superposition 
bottom left shows function zeros superposition 
bottom right picture shows function zeros seen right zeros minimizes local error example 
illustrates theoretical results experimentally specific ode 
plots local error global hermite filters ghf function evaluation time lorenz system 
assumed constant 
addition assume mean value filter composing ghf distance evaluation time rightmost interpolation point constant 
graphs 
shows rightmost zero function obtained table 
see rightmost zero approximation optimal evaluation time filter cases displayed 
algorithm position algorithm enclosing solutions initial value problems parametric ordinary differential equations 
algorithm gives specification procedures covered far 
lines initialize integration process compute initial bounding boxes pruned domains boxes matrices needed wrapping effect 
main step integration lines 
line computes new bounding boxes line function solve mk hd ik ik predictor ik ik hd prune ik endfor return mk constraint satisfaction algorithm initial value problems parametric odes 
specification solve solution ode mk solve mk 
mk specification 
bounding box wrt 
specification ms multistep solution bounding box wrt 
hd mi ms ms 
specification predictor solution ode bounding box wrt predictor specification main functions 
uses compute new predicted boxes line applies pruning step compute new pruned boxes 
theoretical analysis section presents theoretical results efficiency method compares best interval methods aware 
overview methods analyze cost solve algorithm global hermite filter method ghf compare iho method nj best interval method know 
iho method outperforms interval taylor series methods loh 
various methods theoretical experimental comparisons 
ghf method ghf method iteration loop function solve called step integration 
constant step size ghf assuming max remaining components ghf specified follows 
function ghf uses taylor series method moo cr order compute assume ik function computes single bounding box ik 
predictor function uses moore taylor method moo order compute boxes note compute taylor coefficients ik ik 
evaluation point hermite filters function rightmost zero function see section table 
ghf method order 
function needs jacobians interpolation point compute explicit mean value hermite filters 
ghf computes jacobians predicted boxes pruned boxes 
precisely computes jacobians reuses jacobians computed previous step 
function uses qr factorization technique loh 
iho method iho method implemented exactly described nj 
step size ghf method 
pruning interesting differences ghf iho 
predictor function iho uses mean value taylor method order 
second jacobians iho recomputed pruned boxes 
iho uses taylor series method order compute bounding box ghf 
iho method obtain experimental results informative possible introduce iho variant iho closer ghf 
particular predictor iho uses moore taylor method order mean value taylor method order 
iho recompute jacobians pruned boxes reuses jacobians predicted boxes ghf 
changes iho ghf closer differ pruning step 
interestingly iho extremely close precision iho benchmarks step size 
benchmarks loss precision significant smaller step size 
course iho faster iho step size 
comparison hypotheses assumptions conventions simplicity 
consider ode 
assume natural encoding function contains arithmetic operations 
denote number operations number operations sum assume cost evaluating times cost evaluating report main operations methods products real interval matrix arise pruning step generation jacobians 
main operations problems sufficiently high dimension contains sufficiently operations 
note products real interval matrix optimized substantially reduce number sign tests rounding mode switches costly tasks see knu 
consequence cost interval arithmetic operation real interval matrix product cost operation intervals jacobian computation 
report separately number interval arithmetic operations involved products real interval matrix pruning step cost generation jacobians cost 
note cost fixed cost sense independent ode 
cost variable cost increases expression contains operations 
methods order compare costs ghf iho fp 
methods order 
table reports main cost step iho iho ghf 
shows complexity particular cases ghf ghf implementation interpolation points ghf implementation conditions interpolation points 
main result ghf cheaper iho ghf method interpolation points guaranteed run faster iho section shows improvement accuracy obtained case 
observe cost iho approximately half iho jacobians computed pruned boxes iho note cost smaller ghf iho iho evaluates jacobian ghf expensive ghf iho contains operations jacobians cheap compute case fixed cost cost large wrt cost 
contains operations case practical applications ghf substantially faster cost ghf independent cost substantially smaller ghf ghf iho result shows versatility approach application hand 
step methods different orders similar cost show ghf methods tailored asymptotically precise iho methods similar cost 
consider costs iho ghf methods assume fp 
conditions iho method order ghf method order 
table reports main cost step iho iho ghf 
cost similar ghf iho twice iho 
ghf method asymptotically precise orders magnitude iho similar cost 
cost cost iho nn nn iho nn nn ghf knn ghf nn nn ghf nn table cost analysis methods order 
cost iho nn nn iho nn nn ghf nn nn table cost analysis methods different orders similar cost 
experimental analysis report experimental results implementation solve algorithm global hermite filter method ghf 
performed tests sun ultra workstation mhz ultrasparc cpu 
underlying interval arithmetic automatic differentiation packages bias knu bs bs respectively 
benchmarks benchmarks standard ode solvers 
come various domains including chemistry biology mechanics physics electricity 
equation initial conditions interval integration initial value problem appendix note comparisons uses point initial conditions easily generalized interval conditions 
full hires model famous chemical reactions 
hires stiff 
lorenz system lor called strange attractors 
body problem bp comes mechanics van der pol equation describes electrical circuit 
problems described detail 
consider problem molecular biology bio stiff problem 
consider dynamical systems lien function contains operations 
lien taken 
overview experiments experimental results obey assumptions theoretical analysis 
include types comparisons 
step methods order 
step methods different orders similar cost 
multistep versus step methods order 
tables report step size global error error ratio error ratio higher means ghf precise execution time methods seconds time ratio time ratio higher means ghf faster 
report execution time iho parentheses 
mentioned observed small precision loss iho iho larger step sizes 
significant assume error values iho nearly iho 
symbol tables means method failed integrate ode corresponding step size 
note global error point infinite norm width enclosure quantity interval integration 
step methods order table reports experimental results iho ghf methods order benchmarks orders step sizes 
general step size ghf iho similar accuracy execution time 
ghf usually slightly faster predicted theoretical results 
difference larger higher dimensional problems contains operations 
iho slower ghf iho problem order error ratio generally constant wrt step size confirming ghf iho methods order 
different orders theoretical results indicated step size ghf method tailored asymptotically precise iho similar computation cost 
validate claim experimentally 
table compares iho order ghf order 
benchmarks ghf faster iho produces significant improvements accuracy 
expected gain precision increases step size decreases confirming ghf method higher order iho 
ghf slightly slower iho course produces significant improvement accuracy 
ghf iho similar execution time higher dimensional problems contains operations predicted theoretical analysis 
error wrt time interesting compare various methods plotting error function execution time 
figures plot iho ghf ghf results tables 
take hires problems 
curve iho slightly curve ghf 
ghf curves iho curves 
results confirm theoretical results indicate ghf superior methods 
multistep versus step methods compare multistep ghf methods versus iho step ghf method order 
restrict attention problems function contains operations 
tables report results respectively tested examples orders step sizes step size multistep ghf methods usually produce precise results step methods especially large step sizes allow larger step sizes 
multistep ghf methods generally fast step ghf method iho faster operations case lien contains multiplications 
tables show step size step ghf method slightly precise faster iho iho slower 
figures plot error function execution time 
main result multistep ghf methods perform better step methods problems 
general multistep methods produce orders magnitude improvements precision fixed execution time 
step ghf method performs slightly better iho note lien problem ghf methods interpolation points efficient allow smaller execution times 
note lien problem bounding box computation method order 
iho ghf error time iho ghf ratio iho ghf ratio lor bp bio hires table step methods order 
iho ghf error time iho ghf ratio iho ghf ratio lor bp bio hires table step methods different orders 
time iho iho ghf ghf time lor iho iho ghf ghf time bp iho iho ghf ghf time iho iho ghf ghf comparison methods iho ghf ghf problems lor bp 
time bio iho iho ghf ghf time iho iho ghf ghf time iho iho ghf ghf time hires iho iho ghf ghf comparison methods iho ghf ghf problems bio hires 
iho ghf error time iho ghf ratio iho ghf ratio lien table multistep versus step methods lien problem 
iho ghf error time iho ghf ratio iho ghf ratio table multistep versus step methods problem 
iho ghf error time iho ghf ratio iho ghf ratio table multistep versus step methods problem 
iho ghf error time iho ghf ratio iho ghf ratio table multistep versus step methods problem 
time iho iho ghf ghf time iho iho ghf ghf time iho iho ghf ghf time iho iho ghf ghf ghf ghf time iho iho ghf ghf time iho iho ghf ghf ghf multistep versus step methods lien problem 
time iho iho ghf ghf time iho iho ghf ghf ghf time iho iho ghf ghf time iho iho ghf ghf multistep versus step methods problem 
time iho iho ghf ghf time iho iho ghf ghf multistep versus step methods problem 
discussion concluding section important number remarks 

ghf enhancement precision obtained recomputing jacobians pruned boxes insignificant problems tested 
recomputation increases computational cost 
experimental results showed holds iho method general 

pointed ned stability interval methods depends stability underlying approximation formula standard point numerical methods corresponding formula truncation error 
interval extensions standard numerical methods designed stiff problems may need smaller step sizes 
small local errors fundamental interval methods ghf significant advantage iho respect 

restriction step size interval methods comes bounding box process verifies existence uniqueness solution 
explains differences efficiency interval methods sharp traditional methods 

results close machine precision significant rounding errors actual method determining accuracy 
explains curves figures tend join high precisions cases lien 
summary summarize experimental results 
main 
step ghf method better existing step interval methods 
contains operations step ghf method outperforms multistep ghf methods existing methods 
contains operations multistep ghf methods outperform step ghf method existing methods time iho iho ghf ghf time iho iho ghf ghf time iho iho ghf ghf multistep versus step methods problem 

ghf methods versatile tailored application hand 
experimental results confirm theoretical analysis 
particular step ghf method performs generally better iho method variant iho method proposed performed better original method benchmarks 
low dimensional problems contains operations step ghf method slightly better iho higher dimensional problems contains operations step ghf method asymptotically precise orders magnitude iho cost 
contains operations step ghf method effective multistep ghf methods relatively high fixed cost 
contains operations multistep ghf methods perform better step methods 
may produce orders magnitude improvements accuracy execution time 
alternatively may reduce computation times substantially precision avoid expensive jacobian computations 
implementation constant order step size implementation easily enhanced incorporate standard order step size control strategies eij ned techniques 
described constraint satisfaction approach initial value problems parametric ordinary differential equations ordinary differential equations data initial conditions uncertain intervals 
main novelty constraint satisfaction approach introduce inside traditional interval methods pruning component reduces size predicted boxes relaxations ode called filters 
effective pruning algorithm relaxations ode hermite interpolation polynomials enclosures error terms clusterings successive relaxations remove variable dependency problems traditional techniques handle wrapping effect evaluation points relaxations minimize local errors 
resulting integration algorithm analyzed theoretically experimentally 
theoretical results indicate computation costs algorithm provides quadratic asymptotic improvement best interval method know 
show algorithm significantly faster ode contains operations 
experimental results variety standard new benchmarks validated theoretical results 
algorithm shows significant gains accuracy degrading computational performance 
experimental results illustrate approach produce significant gain computation time complex problems 
important stress versatility algorithm approach 
hand global hermite filters tailored problem hand choosing number interpolation points 
hand pruning step generic new pruning techniques may easily incorporated 
wealth topics research 
open issues current algorithm including order step size control strategies variable distance interpolation points 
constraint satisfaction approach clearly infancy new relaxations splines trigonometric interpolation legendre chebyshev laguerre polynomials investigated 
interesting apply constraint satisfaction approach boundary value problems pruning arises naturally 
consequence believe constraint satisfaction approach valuable addition existing methods reliable solutions differential equations 
acknowledgments research partially supported actions de recherche concert ee arc nsf nyi award 
special philippe interesting discussions detailed comments 
atk atkinson 
numerical analysis 
john wiley sons new york 
bm makino 
verified integration odes flows differential algebraic methods high order taylor models 
reliable computing 
bs 
flexible package automatic differentiation forward backward methods 
technical report technical university denmark 
bs 
flexible package automatic differentiation taylor series 
technical report technical university denmark april 
cb cruz barahona 
interval constraint approach handle parametric ordinary differential equations decision support 
proceedings 
cr corliss 
validating priori enclosure high order taylor series 
scientific computing computer arithmetic validated numerics pages 
deville janssen van hentenryck 
consistency techniques ordinary differential equations 
cp pisa italy october 
eij 
solution initial value problems interval arithmetic 
mathematical centre tracts 
stichting mathematisch centrum amsterdam 
hull lindberg 
comparing numerical methods stiff systems odes 
bit 
wanner 
solving ordinary differential equations springer verlag berlin 
janssen deville van hentenryck 
multistep filtering operators ordinary differential equations 
cp alexandria va october 
janssen van hentenryck deville constraint satisfaction approach parametric differential equations joint international conference artificial intelligence ijcai seattle wa august 
knu 
bias fast interval library 
computing pp 

kru 
ordinary differential equations 
hansen editor topics interval analysis page 
clarendon press oxford 
loh 
enclosing solutions ordinary initial boundary value problems 
computer arithmetic scientific computation programming languages wiley 
moo moore 
interval analysis 
prentice hall englewood cliffs 
moo moore 
methods applications interval analysis 
siam publ 
ned 
computing rigorous bounds solution initial value problem ordinary differential equation ph thesis computer science dept univ toronto 
nj jackson 
interval hermite method computing rigorous bounds solution initial value problem ode developments reliable computing kluwer 
jackson corliss 
validated solutions initial value problems ordinary differential equations 
applied mathematics computation pp 


differential equations dynamical systems 
springer verlag new york 
ral rall 
automatic differentiation techniques applications volume lecture notes computer science 
springer verlag berlin 

implicit methods enclosing solutions odes 
universal computer science 
sb 
numerical analysis 
springer verlag new york 
van hentenryck mcallester kapur 
solving polynomial systems branch prune approach 
siam journal numerical analysis april 
van hentenryck michel deville 
numerica modeling language global optimization 
mit press cambridge mass 
proof lemma 
prove lemma 
lemma consider ode hermite interpolation polynomial wrt 
assume 
sufficiently small uk proof uk uk 
assume 
uk 
observe definition 
furthermore 
minimum number values distinct interpolation points minimum number values distinct points 
continuity theorem sufficiently small distinct values distinct zeros distinct write 
assume hq 
distinct zeros hq arising distinct zeros strictly smaller distinct particular easily verify 
obtain 
degree 
zeros 
contradiction 
consequence sufficiently small 
position prove lemma 
lemma consider ode hermite interpolation polynomial wrt uk uk sufficiently small 


defined formula 

proof uk 
definition hermite interpolation polynomials see proposition rewrite follows kj kj 


independent proposition definition follows th canonical vector 
uk sufficiently small write lemma sufficiently small 
benchmarks 
full lorentz system lor body problem bp van der pol equation molecular biology problem bio vi vd kd kc vi vd kd kc stiff problem hires problem system lien problem problem problem evaluation hermite interpolation polynomials evaluating hermite interpolation polynomial derivative excessive propagation rounding errors occur careful way polynomials evaluated 
important problem precision results size computed boxes close machine precision 
case precision results governed rounding errors precision method 
consequence find way evaluating hermite interpolation polynomials derivatives limits possible propagation rounding errors 
subsection propose technique evaluating hermite interpolation coefficients derivatives subsection describes efficient way evaluating hermite interpolation polynomial point conditions derivative 
hermite interpolation coefficients hermite interpolation coefficients ij proposition evaluated formula ij ij ij ij 
formula appropriate evaluation rounding errors propagate quickly 
describe stable technique evaluate coefficients ij 
formula evaluated safely interval arithmetic 
rounding errors subexpressions involved computation ij intervals 
formula recursive contains occurences variables resulting large approximations ij 
idea factorize subexpressions eliminating successively variables 
variables eliminated recursive formula 
start eliminating variable factorizing terms involving variable ij ij ij ij ij ij ij ij ij ij evaluate expressions ij ij ij ij ij ij starting apply process eliminate successively variables 
derivative coefficients ij evaluated way replacing ij ij 
successive factorizations subexpressions technique stable evaluation produces orders magnitude improvements accuracy 
note cost factorization technique higher evaluation 
hermite interpolation polynomial point conditions subsection discuss propagation rounding errors evaluation hermite interpolation polynomial point conditions derivative evaluated mean value hermite filters see section 
propose efficient evaluation technique property hermite interpolation coefficients 
consider ode hermite interpolation polynomial wrt formula proposition ij point conditions defined formula derivative evaluated safely interval arithmetic 
evaluation coefficients ij ij yields tight intervals see subsection formula derivative appropriate evaluation step size small evaluation leads large approximations 
see ij ij reduce propagation rounding errors evaluation evaluate sums terms order magnitude evaluate sum results increasing order ij max fi jg formula suffers instability 
observe derivative formula small terms larger sum resulting important loss significant digits 
tackle problem property hermite interpolation coefficients 
proposition defined proposition 

proof proposition easily verify consider function 
function polynomial degree minimum number distinct roots interpolation points minimum number distinct roots theorem distinct roots distinct roots distinct write 
particular obtain 
follows root derivatives root 
consequence 
proposition write interesting observe terms sum order magnitude sum 
evaluation stable evaluation better choice evaluation 
proposition improve evaluation 
write observe evaluation term terms 
better numerically evaluation terms 
obtain formula evaluating ij 
