compiling simd register randall fisher henry dietz school electrical computer engineering purdue university west lafayette ecn purdue edu 
simd single instruction stream multiple data stream parallel computers existed decades past years new version simd evolved simd register swar 
styles simd hardware swar models tuned integrated conventional microprocessors existing memory instruction handling mechanisms primary goal improving speed specific multimedia operations 
swar implementations various microprocessors vary widely missing instructions swar operations needed support general portable high level simd execution model focuses missing operations implemented existing swar hardware conventional bit integer instructions 
addition swar offers new challenges compiler optimization briefly introduced 
swar model takes advantage fact wide data path processor treated multiple thinner simd parallel data paths 
register effectively partitioned fields operated parallel 
operations partitioned field field addition easily implemented minimal hardware enhancements 
example bit adder function bit adders simply needs modify adder carry logic carry bit field suppressed 
swar field sizes operations supported 
swar techniques motivated need improve multimedia application performance surprising field sizes supported hardware tend commonly associated multimedia natural data types 
particular bit pixel color channel values forms video image processing data size important 
similarly bit audio samples commonly field size intermediate results computations bit values need bit precision 
data sizes common applications directly supported swar hardware extensions current microprocessors example bit fields hold boolean values bit randall fisher henry dietz fields hold values logic simulator base pair value operating gene database bit bit values wide range digitizing devices 
high level swar language allow users specify precise number bits needed datum 
operations implemented swar hardware strongly biased favor specific multimedia applications algorithms 
addition subtraction various integer operations commonly supported 
adding bright pixel values result dark pixel variety saturation arithmetic operations supported overflow saturation arithmetic yields maximum representable value low bits larger value 
bit floating point operations supported amd dnow 
support soon current swar hardware supports integer field operations 
unfortunately point view building high level language compilers current swar hardware support limited just field sizes operations 
worse supported operations partitioning reflect designers expectations needs multimedia programmers internal structures particular processor architectures inconsistent architecture families 
table illustrates point showing partitioning supported enhanced architecture families typical arithmetic operations 
table columns represent multimedia extension set families 
extension families included digital equipment extensions alpha hewlett packard pa risc max intel advanced micro devices versions mmx silicon graphics mips sun sparc vis 
rows table describe basic characteristics multimedia mm registers swar registers 
wide register 
registers processor integer registers overlaid floating point register file 
remaining rows sample various parallel arithmetic operations families support 
part identify operations partitioned register operands notation specifying register holds fields containing bit value suffix indicating field values unsigned 
single refers single scalar operand value immed refers immediate value 
differences swar extension implementations significantly complex manage variations base instruction sets processors 
number instructions absent example instructions help implement simd style conditional branches condition tests 
support high level language problems efficiently managed compiler 
obvious shortcoming swar hardware support generally provides operations just field sizes 
fortunately limited set partitionings directly supported hardware 
logically partitioning compiling simd register table 
comparison multimedia instruction set extensions dec hp pa risc sgi mips intel amd sun sparc alpha max mmx vis mm registers acc 
mem 
bits mm reg 
acc 
registers 
integer integer float float float modular add part part single part immed part saturation add part part single part immed part sum abs 
diffs modular mul part part high low single part immed part saturation mul part part single part immed part mul sign part part single part immed part mul add 

average shift left right part part single part immed part signed shift right part part single part immed part shift add bit immed scale various forms maximum part part single part immed part randall fisher henry dietz property partitioned registers operation applied data registers 
words data path function units may partitioned various ways registers really partitioned example prevent programmer treating register contents having bit fields operation bit fields 
possible desirable operations treat register partitioned field sizes supported directly enhanced hardware 
fact partitioning need keep fields register size managing irregular field sizes complex discussed detail 
summary fact multimedia registers store partitioning information offers great flexibility 
traditional simd execution model data storage allocated processing element fixing number data operated parallel boundaries values different processors 
swar explicitly trade precision parallelism width bits operation algorithmically required 
penalty data crossing imaginary inter boundaries zero swar system gives swar interesting new abilities operations reductions 
approach making swar creating swar module language compilers users write portable simd programs compiled efficient swar modules interface code allows modules ordinary programs 
particularly difficult build optimizing simd module compiler supporting operations directly provided particular swar hardware implementation portability flavors swar capable hardware basic coding constructs interesting problem 
section discusses basic coding techniques needed achieve efficient execution general simd constructs type swar hardware support including bit integer instruction sets explicit support swar 
basic coding swar constructs swar execution model appropriate consider new types compiler optimizations briefly discussed section 
summarized pointers support code developed section 
basic simd swar compilation determining code high level simd constructs swar instructions useful distinguish different classes simd operations implemented swar polymorphic operation simd operation instruction implement operation independent field partitioning 
example bitwise operations xor polymorphic classical simd conditional test returns true bit field 
compiling simd register partitioned operation simd operation value computed processing element function data resides processing element 
swar implementation partitioned operation requires corresponding operand fields manipulated interfering adjacent fields 
current swar hardware implements fully general partitioning operations software techniques construct appropriate partitioned operations critical 
communication operation logically transmits data processing elements arbitrary pattern 
example maspar mpl construct router accesses value variable processing element unfortunately hp pa risc max current swar extensions allow general communication patterns rearranging field values max allows rearrangement single register solving problem simd vector lengths exceed register 
fact swar hardware explicitly provide communication operations constructed operations cross field boundaries unpartitioned shifts 
type conversion operation converts simd data type 
complicated swar systems data types different sizes yield different parallelism widths numbers fields register current swar hardware supports variety type conversion operations constructed easily communication partitioned operations 
reduction operation recursively combines field values single value 
traditional simd architecture involves communication shrinking set processing elements working values slowly growing precision natural procedure swar worth exploring 
masking operation allows processing elements disable 
obviously swar way disable part register arithmetic techniques achieve result 
control flow operation essentially branch instruction executed simd control unit 
swar systems control unit se ordinary processor instruction set viewed providing functionality 
order simplify pipeline structure swar hardware directly allow branching contents partitioned swar register necessary move swar fields ordinary register test 
sections describe basic coding interesting classes partitioned communication reduction masking operations 
partitioned operations partitioned operations primary focus hardware support swar 
particular speedup claims swar randall fisher henry dietz partitioned additions bit fields important field sizes handled swar hardware partitioned instructions simply omitted 
describe different methods implementing partitioned operations 
hardware partitioned operations ideal partitioned operation operation applied concurrently independently entire set register fields 
swar hardware supports swar code looks just single pure simd instruction 
example consider adding values stored bit register swar partitioned unsigned modular addition shown 
fig 

hardware partitioned modular addition numbering fields right left addition performed field yields field result 
value storable bit field modified storage 
contrast addition performed field yields 
value requires bits proper storage modularized fit bits available 
result stored field 
note overflow bit lost interfere operation performed field 
spacer spacer fig 

modular addition compiling simd register partitioned operations spacer bits ideal partitioned addition supported hardware spacer bits may allow field operations applied concurrently independently shown 
spacer bits buffer zones data fields overflow borrow occur interfering adjacent fields 
spacer bit technique may implement additional field sizes swar hardware implement swar partitioned operations architectures providing conventional bit integer operations 
example shown essentially previous spacer bits allows values fit register 
start operation spacer values unknown 
indicated question mark 
spacer field 
ensure field additions overflow field spacer bits preset normalized zero addition performed 
done anding mask bits spacer positions 
addition performed field occurs just ideal partitioned addition overflow modification stored result 
addition performed field yielding 
value requires bits storage stored lower bits field ninth bit carried spacer fields 
part result stored field considered valid 
valid result stored 
note overflow bit interfere operation performed field 
similarly addition field results carry spacer fields storage result 
spacer bit needed fields addition subtraction multiple spacer bits fields may allow multiple partitioned operations performed re normalizing spacer bits 
static optimization simply requires tracking range possible values spacer bits determine re normalization required 
software partitioned operations spacer partitioned operation code fast allows values bit register hardware partitioning 
instructions full densely packed partitioned operation implemented 
trick simply consider field bits smaller truly replacing significant bit field virtual spacer bit 
performing spacer partitioned operation modified register value significant bits field computed inserted result 
adding values done shown 
start operation split partitioned registers 
contain data virtual spacer bit positions cleared preparation partitioned addition 
resulting value correct value significant bits fields added 
fortunately bitwise xor operation implements bit add carry compute addition randall fisher henry dietz significant bits field xoring significant bits appropriate masking bits 
fig 

modular addition virtual note result field values ideal partitioned addition 
inter processing element communication fig 

toroidal communication registers partitioned registers may allow mesh toroidal communication performed applying shift rotate instructions register 
compiling simd register respectively upper lower halves vector layed partitioned registers 
numbering fields somewhat arbitrary consider right neighbor communication processing element sending value field right 
notice new value harder compute datum processing element logically fell right side machine 
right neighbor communication included wrap toroidal link computation similar 
unfortunately complex communication patterns directly supported swar implementations 
implementations general communication patterns built pack unpack operations swar extensions mmx implement shuffle inverse shuffle communication patterns composed simulate multistage interconnection network particularly efficient 
swar programs avoid complex communication patterns 
reductions reductions operations values stored fields register combined single result value successively applying operation intermediate result field values 
final value may stored fields result register 
example partitioned register contains values may store result fields form single result 
perform unsigned fields partitioned register containing values form single result value 
mask mask mask fig 

randall fisher henry dietz operation performed recursively 
register split multiples odd non multiples fields masking operations 
unpartitioned shift fields aligned added 
result register half fields twice large conveniently ensuring overflow occur 
process repeated field remains 
enable masking fig 

distinguishing characteristics simd computation ability disable processing elements portions computation 
unfortunately swar hardware allow fields disabled se form arithmetic nulling 
consider simple simd code fragment compiling simd register code vectors length 
corresponding field true non zero field replaced value corresponding field elements unaltered 
possible disable fields statement executed straightforwardly disabling fields corresponding values simply having enabled processing elements execute ability disable fields need undesired computations 
step simd code fragment symmetric looks strange accurately reflects fact fields unaffected literally actively read pasted fields taken variety techniques merge appropriate fields taken far cheapest bitwise mask undesired field bitwise merge masked results 
approach example 
converted appropriate mask field full field full non zero 
log length sequence unpartitioned shifts bitwise operations convert usable mask mask select appropriate fields terms scalar code essentially swar code looks somewhat strange arithmetic masking old trick borrowed various early simd machines 
example thinking machines cm approach 
compiler optimizations swar optimizations devised simd programming apply natural way swar programming 
unique features swar execution motivate variety new compiler technologies 
technologies briefly discussed promotion field sizes swar value tracking enable masking optimizations 
randall fisher henry dietz promotion field sizes just high level language program stated value needed bits mean precisely bits worth hardware 
example bit values handled hp pa risc max smaller sizes 
vector declared containing bit values yield efficient code sequences array object type promoted bit fields 
promotion particularly favorable number bit fields fit bit register precisely number bit fields fit bit fields add parallelism 
hardware unsupported field sizes inefficient example bit fields directly supported swar hardware swar implementations described extra parallelism width operations bit fields far effective promoting fields bits 
general swar implementation certain field sizes efficient somewhat larger field size inefficient field sizes directly 
notice promotion field sizes spacer bits result different data layouts vector different computers user specified field sizes imply particular field layout 
separate swar module compiler communicates code interfaces generates ensure non obvious machinedependent layouts visible outside swar modules 
swar value tracking nearly traditional compiler optimizations tracking values available 
example common subexpression elimination cse depends analysis 
interesting question swar technology raises constitutes basic unit swar data wish track 
fundamentally track values fields swar register vector 
discussed compiler treatment swar coding results code sequences dynamically change apparent partitioning effect destroying value tracking information 
similarly discussed section desirable spacer bits fields allow ordinary instructions function partitioned operations spacer bits definition part fields separate 
optimize spacer manipulations need able track spacer values field values 
fact unpartitioned operations manipulate field spacer values alike operations shifts transform 
support aggressive swar optimizations new value tracking method necessary 
suggest symbolic tracking values arbitrary patterns register appropriate 
subsections give brief examples benefits tracking 
compiling simd register bitwise value tracking surprising swar code uses bitwise masking operations unpartitioned shifts masks shift distances 
consider simple code example ff 
xff tracking arbitrary masked bit patterns shifted sequence code converted equivalent simpler form 
general type tracking merge multiple operations shifts merging shifts 
simplification spacer manipulation unusual manipulations spacer bits significant fraction instructions executed 
optimization technique reduce frequency spacer manipulations highly desirable 
preparation partitioned operation spacer bits may set particular values depend operation 
example operation addition spacer bits set operand registers 
partitioned operation carry borrow may alter spacer bit values 
may necessary zero spacer bits correctly isolate fields 
operations alter values spacer bits 
interesting fact polymorphic instructions bitwise operations alter spacer bit values produce field values affected values spacer bits 
instructions offer opportunity set spacer bits desired value cost 
example consider computing swar representation employing spacer bits identified mask expect conventional compiler optimizations eliminate redundant complement spacer mask required field isolation stage addition normalization stage subtraction 
save operation change calculation randall fisher henry dietz spacer value tracking may able significantly larger reductions number spacer manipulations needed 
suppose spacer bits known compiler zeros 
normalizations additions required original code compacted inspection reveals isolation stages additions unnecessary immediately followed normalization stage subtraction overwrites spacer values just written 
observation reduces original operations final form just operations constants interesting note analysis computing gamma constant valued mask accomplished number instructions constant 
general bitwise operations unpartitioned shifts discussed previous section optimized time spacer manipulation 
enable masking optimizations swar hardware allow fields disabled significant cost associated arithmetic nulling undesired field computations 
cost need incurred compiler static analysis prove fields active compiler generate code allows fields active correcting inactive field values 
virtualized processing elements single vector may span fields multiple words registers 
enable masking performed words 
allows compiler generate different versions word wide swar code select examining word worth enable mask enable mask word entirely enabled masking done corresponding word result directly computed 
enable mask word entirely disabled corresponding word result copied original value computation done 
enable mask word partially enabled usual masking computing result 
compiling simd register latest processors dec hp mips intel amd sun soon announced generation powerpc proven hardware support swar simd register easily efficiently added conventional microprocessor 
year processors available general purpose high level languages allow programmed portable simd model 
essentially design swar hardware implementations tuned hand coding specific algorithms sparse coverage swar functionality driven need minimize disturbance base processor instruction set architecture 
shown flaws largely overcome combination clever coding sequences new types compiler analysis optimization 
lack random inter field communication unsolvable problem operations avoided simd algorithms traditional simd machines lacked necessary hardware support 
information swar model libraries module compilers see ecn purdue edu swar 
advanced micro devices amd processor multimedia extensions advanced micro devices sunnyvale california march 

multimedia instruction set extensions sixth generation processor ftp ftp com hc mmx pdf august 

digital equipment alpha architecture handbook version digital equipment maynard massachusetts october 

intel intel architecture mmx technology programmer manual intel developer intel com mmx manuals prm prm htm mar 

ruby lee accelerating multimedia enhanced microprocessors ieee micro april 
ruby lee jerry huck hp technical computing bit multimedia pa risc architecture hewlett packard hpcc external hp com strategies pa go pa go html june 

silicon graphics mips digital media extension silicon graphics www sgi com mips arch isa 

sun microsystems vis instruction set sun microelectronics sun microsystems www sun com sparc vis index html april 

integrated device technology idt home page integrated device technology www com 

advanced micro devices dnow 
technology manual advanced micro devices www amd com docs pdf pdf 
