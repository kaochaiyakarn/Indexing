logics databases information systems edited jan chomicki gunter saake university university magdeburg kluwer academic publishers boston dordrecht london contents logics databases information systems jan chomicki gunter saake logic primer stefan conrad order logic fol syntax semantics proof theory modal logics kripke semantics axiomatization modal logics temporal structures logic programming herbrand models fixpoint semantics sld resolution negation temporal logic information systems jan chomicki david toman temporal databases vi logics databases information systems temporal databases relational database histories temporal queries temporal query languages expressive power space efficient encoding temporal databases concrete temporal query languages evaluation query languages compilation sql derived temporal query languages temporal integrity constraints notions constraint satisfaction temporal integrity maintenance temporal constraint checking multidimensional time multiple temporal dimensions 
query languages multi dimensional time encoding multi dimensional temporal databases order temporal logic role deontic logic specification information systems 
ch 
meyer wieringa dignum soft constraints deontic logic integrity constraints information systems deontic logic violations constraints paradoxes deontic logic standard deontic logic sdl paradoxes deontic logic known paradoxes paradoxes sdl contrary duty imperatives diagnosis problems solution ought version chisholm paradox ought dynamic perspective logic ought deontic logic dynamic logic paradoxes solution ought version chisholm paradox integrated logic ought ought constraints anderson reduction modal logic related sdl integrating applications modeling norms external environment contents vii modeling norms modeling norms system modeling norms specification case study discussion logic programming database transactions anthony bonner michael kifer overview introductory examples simple transactions rules non deterministic transactions transaction bases constraints syntax elementary operations state data oracles state transition oracles examples pragmatics oracles model theory path structures models execution entailment proof theory inference execution deduction example inference unification related declarative languages database transactions logics reasoning programs logics specifying concurrent information systems hans dieter ehrich carlos caleiro sernadas denker overview local logic distributed logics reduction extended example related viii logics databases information systems concluding remarks evolving logical specification information systems stefan conrad jaime ramos gunter saake cristina sernadas motivation language syntax semantics logic signatures terms formulae pre interpretation structures satisfaction specifications theories translation language logic logical framework hilbert calculus invariant calculus concluding remarks description logics conceptual data modeling diego calvanese maurizio lenzerini daniele nardi description logics syntax semantics logic alcqi knowledge bases alcqi semantic data models entity relationship model formalizing entity relationship schemata description logics extending expressiveness modeling language object oriented data models object oriented data model formalizing object oriented schemata description logics extending expressiveness modeling language support data modeling reasoning tasks data modeling realization reasoning integrity constraints semantics applications contents ix godfrey minker background semantics integrity constraints examples integrity constraints express model semantics extensions basic model reasoning integrity constraints eliminating integrity constraints model elimination residue method applications integrity constraints semantic query optimization cooperative answering combining databases resolving inconsistencies view updates additional applications directions logical approaches incomplete information survey ron van der meyden sources semantic framework incomplete databases relational model incomplete database semantics notions query answer algebraic models nulls logical databases complexity queries negative information integrity constraints updates incomplete databases issues inapplicable attributes constraints object oriented databases design indefinite databases dealing query complexity modal non standard logics incomplete information current technology logics databases information systems declarative frameworks inheritance laks lakshmanan motivation inheritance ai perspective oo perspective main issues problems logic approaches inheritance logic inheritance 
overview logics inheritance overview overview inheritance theories knowledge representation research directions logical foundations active databases georg lausen bertram wolfgang may basics active rules terminology fundamental properties research foundations active rules production rules declarative rules extending declarative rules states bibliographic notes deductive state oriented core language basic execution model syntax semantics transitions termination transactions compile time vs run time properties framework active rules signature user defined vs system defined rules enforcing termination expressive power normal forms index list contributors xi contributors anthony bonner university toronto department computer science king college road toronto canada mail bonner cs toronto edu carlos caleiro department mathematics instituto superior av 
pais lisboa portugal mail math ist utl pt diego calvanese dip 
di informatica sistemistica universita di roma la sapienza salaria roma italy mail calvanese dis uniroma jan chomicki department computer science university west long branch nj mail chomicki edu stefan conrad university magdeburg computer science postfach magdeburg germany mail conrad acm org denker abteilung technische universitat braunschweig postfach braunschweig germany mail denker tu bs de frank dignum technical university faculty mathematics computer science box mb eindhoven mail dignum win tue nl hans dieter ehrich abteilung technische universitat braunschweig postfach braunschweig germany mail hd ehrich tu bs de parke godfrey army research laboratory powder mill road maryland mail godfrey arl mil xii logics databases information systems john computer information sciences department university md mail edu jarek department computer science york university north york ontario canada mail jarek cs yorku ca michael kifer department computer science suny stony brook stony brook ny mail kifer cs sunysb edu laks lakshmanan concordia university department computer science de boulevard west montreal quebec canada mail laks cs concordia ca georg lausen universitat freiburg institut fur informatik am freiburg germany mail lausen informatik 
uni freiburg de maurizio lenzerini dip 
di informatica sistemistica universita di roma la sapienza salaria roma italy mail lenzerini dis uniroma bertram universitat freiburg institut fur informatik am freiburg germany mail informatik 
uni freiburg de wolfgang may universitat freiburg institut fur informatik am freiburg germany mail may informatik 
uni freiburg de john jules ch 
meyer utrecht university dept computer science de box tb utrecht netherlands mail jj cs ruu nl jack minker department computer science umiacs university maryland college park md mail minker cs umd edu daniele nardi dip 
di informatica sistemistica universita di roma la sapienza list contributors xiii salaria roma italy mail nardi dis uniroma jaime ramos department mathematics instituto superior av 
pais lisboa portugal mail math ist utl pt gunter saake university magdeburg computer science postfach magdeburg germany mail saake iti cs uni magdeburg de am sernadas department mathematics instituto superior av 
pais lisboa portugal mail acs math ist utl pt cristina sernadas department mathematics instituto superior av 
pais lisboa portugal mail css math ist utl pt dept computer science engineering wright state university dayton oh 
mail cs wright edu david toman university toronto department computer science king college road toronto canada mail david cs toronto edu ron van der meyden computing sciences university technology sydney australia mail ron socs uts edu au wieringa free university faculty mathematics computer science de boelelaan hv amsterdam mail cs vu nl logics specifying concurrent information systems hans dieter ehrich carlos caleiro sernadas denker chapter concentrates challenging problem information system specification design cope high level abstraction concurrent behaviour communication implied distribution 
distributed information systems reactive open systems maintaining data bases applications crucial develop high level specification techniques cope data programs concurrent workflow communication issues 
techniques conceptual modeling data types concurrent processes communication protocols relevant combined 
approach temporal logic specifying sequential object behaviour communication facilities added specifying interaction concurrent objects 
study distributed temporal logics dealing communication different ways 
adds basic statements express synchronous calling predicates adds richer facilities making local statements objects respective local logics 
operational animated implemented easily intuitively appealing logics databases information systems convenient modeling specification 
demonstrate example effectively reduced sound complete way 
early phases information systems development essential high level abstraction careful conceptual modeling specification techniques help making right design decisions adapting system changing needs 
objective give developer ability prescribe properties system predict check behaviour reasoning simulation animation specification give sound basis testing implementation 
chapter high level specification techniques distributed information systems giving due attention concurrency communication sites 
implementation platforms corba evolving facilitate implementation little known set specify distributed data behaviour models meaningful way 
information systems reactive systems capability maintaining utilizing large amounts data 
crucial point specification choose right logic family logics 
approach combines ideas concepts object oriented systems view traditions conceptual modeling behaviour modeling data type theory specification reactive systems concurrency theory 
experiences developing family languages semantic foundations started sse particular troll gnome object specification languages 
section account related 
outline follows 
section introduce basic concepts ideas means example 
section give account local propositional logic specifying single objects isolation 
section distributed propositional logics introduced add communication facilities adds basic statements express synchronous calling predicates adds fancy facilities making local statements objects respective local logics 
operational animated implemented easily intuitively appealing convenient modeling specification 
section demonstrate example effectively reduced expressive power specifications may automatically translated descriptions 
section give extended example drawn real application shows convenient logics specifying concurrent information systems hints related approach compiled section 
chapter closes concluding remarks section 
especially useful modeling object behaviour workflow involving inter object communication distributed information systems 
data modeling captured integral part object modeling 
specification techniques useful coping interoperability heterogeneous information systems integrating legacy systems new products 
envisage logics querying 
method described chapter tools working logics 
progress animating analyzing troll specifications conceive specifying properties distributed information systems validate design partly reasoning specification partly generating test cases validating implementation specification partly translation tools animation reasoning model checking testing 
reasoning may done hand semantic traditional mathematical way proof systems 
proof systems may value current emphasis 
holds attempts generate implementations specifications 
overview sufficiently view information system collection objects operating concurrently interacting exchanging messages 
object encapsulated unit structure behaviour 
identity persists change 
operations object usually called methods object model object oriented programming method may change state deliver value 
model underlies object specification languages foops cf 
section corresponds core model odmg cat 
object model object oriented databases restricted separates state changing proper methods side effect free read methods called attributes appear extended model odmg 
model underlies troll adopt 
illustrate concept means example state variables sense imperative programming 
specification ad hoc notation close spirit troll gnome uses traditional logic notation concrete syntax 
example formal specification class var state variables retaining values data sort state variable 
attribute val sort denoting current value 
actions alloc logics databases information systems allocating memory creating variable assign assigning values action assign value sort free giving variable back free space deleting 
follows specify class state variables unnamed generic state variable attribute val actions alloc assign free 
axioms temporal operator ffi expressing holds holds time 
action symbol predicate symbol expressing action occurred arriving current state 
notation means action enabled may occur transition current state 
predicate highlights menu actions may chosen proceed precondition occur 
note state transition caused action holds holds transition 
class var attribute val actions alloc assign free axioms alloc alloc assign free ffi free free alloc assign free assign val ffi assign free axioms say allocation deletion allocation disabled value assignment deletion enabled deletion action enabled value assignment retained assignment deletion 
fi object identities naming state variables 
identity denotes variable instance attribute val actions alloc assign free 
behaviour local set axioms obtained ones prefixing corresponding ones instance 
instance assign val vu ffi assign free third local axiom variable demonstrating communication integer variables 
specify assigned value simultaneously set 
situation arises counting sections chapters new chapter section counting starts 
object system objects var int axioms int assign assign logics specifying concurrent information systems 
axiom local condition instance action calling basic communication mechanism troll approaches 
section formalize idea logic consider communication 
express value changed set time action calling logic indicated introduce new communication actions say send receive 
system communication axiom reads send receive class axioms relate send receive actions value assignment 
discuss possibilities idea precise depending communication take place 
temporal operator 
assign send receive assign assign send receive assign assign send receive assign solution communication takes place immediately new value assigned time assigned second solution communication takes place time new value assigned immediately communication time assigned third solution communication takes place time new value assigned time assigned course version covers 
case communication synchronous 
logic described section situation may described introducing extra communication actions send receive axiom replacing 
assign assign assign assign assign assign able talk communication implicit way having recur explicit communication actions 
section show effectively reduced explicit communication actions introduced systematically reduction process useful translating specifications operational specifications analysis animation tools easier implement 
logics databases information systems note communications mentioned far synchronous 
asynchronous communication may modeled letting message object synchronizes sender sent receiver received 
possible asynchronous communication primitive concept treat synchronous communication special case 
local logic syntax object specification attribute action symbols giving rise state predicates saying attributes values actions occurred actions enabled details assume set state predicates 
definition object signature denumerable set elements called state predicates 
object specification phi consists object signature set formulae phi called behaviour axioms 
behaviour axioms may choose wide variety object logics 
choice propositional temporal logic goes little linear time offers weak kind branching expressiveness may operator expresses may hold holds state may reached previous state including current 
formula may hold holds 
operator useful defining action enabling cf 
example action enabled iff may happened state formally temporal operator 
sake conciseness concentrate directed temporal operators 
corresponding past directed ones offer specification convenience increase specification power ls 
definition syntax false predicates flexible intend give time dependent meanings 
symbols rigid intend give time independent meanings 
false usual logical constant denotes logical implication temporal operator may temporal operator 
means true moment true time need true soon holds eventually true 
means may true sense logics specifying concurrent information systems true current state alternative state entered previous state 
usual introduce derived connectives false true false derived temporal operators false expressing true expressing expressing ffi expressing suggested action enabling may introduce general form formula enabling defining holds iff holds 
furthermore apply usual rules omitting brackets 
interpreting need model sequential computation smoothly extends full model concurrency 
choice simple fact execution object sequential program leads finite infinite sequence events 
events occurrences actions change object state 
state execution may proceed ways 
set possible executions natural branching tree structure 
allowing start states arrive set trees forest grove 
nodes events edges represent sequencing means event occurs immediately event way put precondition model envisage may described unfolded state transition system 
ev set elements called events binary relation ev 
definition event grove acyclic graph ev events ev event ev trace backward closed totally ordered set ev imply set traces denoted 
life cycle maximal trace sense properly contained trace 
set life cycles denoted 
graph event grove set rooted trees 
trace linear path starting root 
life cycle trace infinite ends leaf 
traces prefixes life cycles 
familiar event structures model concurrency win wn note event grove ev determines prime event structure ev canonical way causality reflexive transitive closure causally unrelated events conflict 
concurrency relation empty equivalent saying sequential 
logics databases information systems event groves may seen kripke structures standard interpretation structures modal logics 
ev event grove ev set possible worlds accessibility relation corresponding reflexive transitive closure accessibility relation corresponding eventually order provide interpretation structures event labelled object state represented set propositions hold true state 
definition ev event grove object signature 
labelling total function ev denotational models objects object classes labelled event groves 
fact level abstraction difference object instance object class object isomorphic copy class 
order emphasize view speak object behaviours generalizations objects classes 
definition object behaviour labelled event grove triple ev event grove ev labelling formulae local logic interpreted events object life cycles 
definition object behaviour life cycle event state predicate 
satisfaction relation ffl inductively defined follows 
ffl iff ffl false hold ffl iff ffl implies ffl ffl iff event ffl ffl event ffl iff ffl previous event life cycle successor event ffl 
note rule redundant true life cycle true intended tautology hold 
logics specifying concurrent information systems note object behaviour formula may true life cycle event may true life cycle event abbreviations introduced may derive satisfaction conditions connectives temporal operators ffl holds iff event ffl holds 
formula said valid life cycle symbols ffl iff ffl holds events elaborate semantics object specification 
roughly speaking object specification phi object behaviour semantics substructure consisting life cycles axioms phi valid 
question define canonical object behaviour specification 
interested reader may find hints es 
distributed logics system collection interacting objects 
follows assume fixed finite set objects represented identities ng 
order emphasize distribution objects identities called localities object local logic local set state predicates definition system signature pair fp pn indexed family sets local state predicates 
system specification phi consists system signature set formulae phi distributed logic 
section introduce distributed logics offering poor communication facilities operational offering fancy facilities expressing communication implicit way 
logics propositional 
interpreting logics distributed event groves provide suitable structures 
informally speaking distributed event grove family event groves may share events local event sets need disjoint 
denotational system model 
definition ev sets identities global events respectively 
distributed event grove indexed family fg gn ev event grove ev ev logics databases information systems readers familiar event structures win wn note distributed event grove may considered presentation prime event structure ev ev ev reflexive transitive closure conflict conflict relation locality events different localities causal relationship concurrent 
note general sequential truly concurrent 
fact labelled prime event structure distributed event grove 
definition fg gn distributed event grove distributed trace set ev fe ev trace distributed life cycle set ev fe ev life cycle intuitively distributed trace web local traces glued interaction events 
holds distributed life cycles 
distributed life cycle maximal distributed trace sense properly contained distributed trace 
denotational model object system labelled distributed event grove called system behaviour 
definition system behaviour triple fg gn distributed event grove indexed family labellings object behaviour note shared events labels object sharing event 
interpretation structures pairs system behaviour distributed life cycle distributed logic system signature fp pn local sets state predicates distinguish subset communication predicates intuitive meaning communication predicates visible objects 
instance troll gnome languages action occurrence may global effect calling action object action values attributes seen objects 
definition syntax logics specifying concurrent information systems object cc false cc cn logic locality localities 
operational distributed logic underlying troll local axioms labelled localities formulae localities action 
predicates local logics need explanation 
intuitive meaning talks synchronizes shares event expresses communication opposed specific communications described communication formulae says true synchronizes event true formal details 
definition set object identities system behaviour local behaviours distributed life cycle local life cycles event state predicate identities communication predicates 
satisfaction relation ffl defined ffl iff ffl holds relation ffl inductively defined follows ffl iff ffl iff ffl false hold ffl iff ffl implies ffl ffl iff event ffl ffl event ffl iff ffl previous event distributed life cycle successor event ffl ffl iff ffl implies ev ffl rules local satisfaction ffl formulae distributed life cycles defined way satisfaction ffl local life cycles cf 
definition just replace ffl ffl logics databases information systems rule defines locality predicate intuitively explained communication modelled shared events 
rule formalizes basic communication mechanism predicate calling holds iff validity event implies validity shared event example section illustrates assign assign means value assigned variable value assigned variable time 
examples formulae section 
distributed logic special communication predicates introduced local formulae object visible objects 
idea local statements object local language object 
definition syntax object false cc cc logic locality allows local statements locality local logic note explicit locality predicate definable iff true 
account formula formula definition set object identities system behaviour local behaviours distributed life cycle local life cycles event state predicate identities 
satisfaction relation ffl defined ffl iff ffl holds relation ffl inductively defined follows ffl iff logics specifying concurrent information systems ffl false hold ffl iff ffl implies ffl ffl iff event ffl ffl event ffl iff ffl previous event distributed life cycle successor event ffl ffl iff ev ffl 
local satisfaction ffl formulae distributed life cycles defined way satisfaction ffl local life cycles cf 
definition just replace ffl ffl obtain rules 
rules correspond closely satisfaction rules definition 
rule defines convenience offers include arbitrary statements objects 
statements may refer objects turn objects may nested arbitrary way 
examples demonstrate convenience express communication patterns give formulae informal natural language translations time unit temporal operator assumed day 
example jim 
talk tell expect tomorrow 
tell expect tomorrow equivalent previous 
talk tell contact jim tomorrow 
tell contact jim tomorrow equivalent previous 
talk day 
holds talk day 
holds tell hold tomorrow 
tomorrow tell enjoy 
logics databases information systems formulae meaning derived follows 
true true similar argument demonstrates equivalence third fourth formulae 
reduction show elaborate illustrative example deal intricate high level interaction requirements simple way 
illustrate specification translated equivalent specification 
details proof soundness completeness ce 
example consider system consisting objects sender receiver sender attribute val determines value may send receiver attribute var updated value received sender sends value eventually communicated receiver eventually receive receiver receives eventually communicate sender acknowledgment receipt 
concentrating interactions sender receiver situation illustrated 
send receive sender receiver ffl ffl ffl ffi ffi ffi oo communication sender receiver 
system signature fs rg fp sender receiver parts follows 
set values 
sender send val receiver receive var specification system 
logics specifying concurrent information systems sender behaviour val val 
send val send receive axiom says sender value unique axiom enabling condition current value may sent axiom specifies actual communication takes place sender send action receiver receive action 
receiver behaviour var var receive var receive axiom says value may assigned time axiom says value assigned var soon received axiom says receiving receiver expects communication sender acknowledging receipt situation illustrated 
easy see axioms entail send sending value sender receive acknowledgment time 
note style interaction specification mention communication actions explicitly 
show communication patterns specifiable action calling style 
fact introducing new action symbols corresponding communication points identified arrive specification 
idea introduce new communication predicates objects specify communication pattern explicitly cf 

send receive introducing new communication predicate receive obtain send receive 
second third formulae ensure expresses communication 
precisely value communication actions logics databases information systems send receive sender receiver ffl ffl ffl ffl ffl ffl oo communication enriched sender receiver 
kind communication event happen 
expresses synchronous handshaking communication 
formula precise stands subformula receive context formula 
note term necessary formula describe unintended behaviour permanent communication hold time receive eventually happens 
analogously receive introducing new communication predicate obtain receive 
system signature fs rg fp communication predicates follows 
sender receiver 
summing discussed integrating unchanged parts specification specification system follows 
sender local behaviour val val 
send val send sender calls logics specifying concurrent information systems receiver behaviour var var receive var receive receive receiver calls idea quite general sender receiver behaviour axioms result uniformly replacing subformulae locality axioms explicit communication symbols 
axioms give definitions new symbols 
note communication symbols introduced pairwise communicating objects 
pair new communication symbols synchronized defining mutual calling sender receiver calls axiom pairs 
reader invited convince axioms entail send 
repeatedly applying steps suggested example obtain specification specification 
looks powerful glance really true 
expressive power 
translation outlined 
extend system signatures denotes system signature obtained adding extra communication predicates introduced translation process 
phi system specification ffl denote logical entailment phi ffl means holds system behaviour signature satisfies formulae phi 
main result sound complete reduction 
precisely 
theorem items defined phi ffl iff phi ffl part formalizes soundness part formalizes completeness 
reader referred ce detailed account reduction logics databases information systems full worked proof 
note formula translated entailment 
fact theorem corollary fact reduction fulfils condition simple map logics mes semantic translation natural isomorphism 
extended example example business process modeling extracted national german project authors involved 
brief description real life project necessary order get feeling useful project information system designed implemented formal object oriented techniques see kkh 
project located area computer aided testing certifying physical devices 
objective information system support various activities user groups ptb technische braunschweig german federal institute weights measures 
application distributed natural way involves persons acting concurrently communicating 
employees system 
complexity organization system supposed support organization high 
order understand complex communication structure persons involved business process build model data flow workflow 
follows briefly introduce problem domain turn formal specification workflow communication patterns persons 
specification logic 
project cooperation group ptb named explosion protected electrical equipment 
group concerned testing certifying explosion proof electrical equipment motors switches allowed operated hazardous areas 
assessment procedure consists testing formal informal documents checking design papers technical drawings tests carried 
group divided subgroups dealing experimental tests laboratories basic administration design approval respectively cf 

clients contact group ask certification specific electrical device 
application triggers business process group involves people subgroups 
procedure established due certain communication constraints 
administration employees talk peo logics specifying concurrent information systems client ptb group experimental test basic administration design approval test procedures test reports conformity standards submission data granting certificate fees test communication structure inside group client ple subgroups employees laboratory officers charge design approval 
communicate client certification query issued group 
cases employees design approval subgroup directly contact client ask missing formal documents technical drawings gives overview communication relations 
particular actions take place business process certifying electrical device 
client may request certification electrical device cert req 
implies administration officer orders appropriate tests laboratories test ord design appr ord 
corresponding subgroups answer queries returning results tests test res design appr res respectively 
depending results administration officer decides certificate issued cert dec 
case formal documents missing 
case design approval officer clarifies situation asking client missing papers req 
approval officer informs administration doing 
tests carried long design approval papers complete 
approval officer informs administration officer completeness application papers comp res 
business process formalized way 
system consists objects client administration officer logics databases information systems laboratory officer design approval officer 
obvious system signature fc dg fp sets local state predicates follows 
boolean variable ftrue falseg 
client cert req administration test ord appr ord cert dec dec answers answers answers laboratory test res design approval req comp res appr res administration officer attribute dec determines certification decision 
attribute answers store results received 
attribute determines laboratory design approval officers delivered results answers answers answers 
system specification phi phi phi follows 
client behaviour cert req cert dec client asks certifying item administration officer eventually communicate decision procedure client 
administration behaviour test ord test res test ord comp res true cert dec appr res cert dec test res cert req dec true answers test res dec dec answers answers appr res dec dec answers answers answers cert dec dec cert dec answers logics specifying concurrent information systems answers dec answers dec test res appr res axioms assure administration officer get result laboratory ordered tests tests carried design approval officer reported completeness application papers 
decision application results design approval laboratory 
fifth axiom assures attributes right initialization values 
formalize effects results laboratory design approval respectively attributes answers dec abbreviations syntactically correct formulae 
formula abbreviation formula dec answers test res dec answers axioms state administration officer eventually decision received results earlier 
axiom expresses results laboratory design approval change decision 
actions change value attribute 
assume frame axioms attributes altered action takes place 
design approval behaviour appr res req req 
design approval officer ask clarification request decided approval procedure 
clarification request necessary inform administration officer 
inform mean communication approval officer administration officer stated axiom 
specification shown client contacted design approval officer clarification received certification decision administration officer cert dec req related information systems modeling design abstraction level relational databases largely influenced entity relationship approach logics databases information systems originated chen che study aggregation generalization structures smith smith ss 
ideas way semantic data models quite extensions er model 
excellent overview systems development methods albeit emphasis requirements engineering wie 
considerable activity area object oriented analysis modeling design 
booch boo omt rbp oose methods jac merged universal modeling language uml fs submitted object management group considered standard 
successful oo analysis method fusion cab 
methods informal semiformal best 
come methodological guidelines graphical notations 
help formal languages fit benefits early modeling design stages 
ambiguous comes animation verification forecasting system properties comes generating test cases implementations specifications 
limited scope concurrency communication issues explicitly treated methods 
logic formal methods reported experiences developing family languages semantic foundations 
developed commercial product esp 
academic realm related developments troll hj eh har gnome sr lcm fw albert 
approaches formal object specification sound theoretical basis 
ones closely related foops gm rs gs maude mes 
foops obj gw turn equational logic 
maude rewriting logic uniform model concurrency mes 
language projects working related ideas ag ab 
family troll eh har address problems concurrency communication integrate benefits informal methods mentioned 
graphical notation troll called adopts elements omt 
theoretical foundations concurrency applied approach explored es ehr 
eh gives brief overview troll logic foundations 
order model sequential behavior objects concurrent behavior object systems models concurrency may adopted see wn excellent overview 
model denotational semantics labelled event structures provide powerful logics specifying concurrent information systems elegant approach 
relationship event structures models concurrency labelled transition systems petri nets investigated wn 
major approaches advocated specifying reasoning concurrent distributed systems 
hand systematic study relations equivalences behaviours systems started mil subsequently pursued people working process algebra bk hoa hm bw vg 
hand modal logics gol characterizing properties systems evolved early works floyd flo hoare hoa reasoning programs 
stress dynamic logics fl har pel temporal logics pnu logics knowledge hm hz 
distributed logics defined temporal logic extension concurrency called agent logic 
temporal logic succesfully applied number reactive systems specification problems mp simplest logic deal safety properties liveness properties lam 
agent logic introduced developed lt lrt thi ram 
agent corresponds object may thought site distributed system 
distinct approaches reasoning concurrency framework temporal logic 
simplest accepts naive view concurrent system modelled nondeterministic interleaving adequate assumptions fairness fra execution components 
branching temporal logics ub ctl ce ctl eh linear temporal logic purposes deeply studied pnu mp wol pen 
particular temporal logics information systems object orientation rely developed setting ser fsms fm scs ssc ssr 
certain subtleties concurrent systems lost simplifications see instance pra discussion subject 
need precise notion causality reflected time structures adopted logics led study partial order temporal logics pw kp pen 
basic difference assumption omnipresent observer entire system considered dropped replaced local causal perspective 
case logics partially ordered computations introduced pinter wolper pw interleaving set temporal logics kp temporal logics reasoning distributed transition systems systems product state spaces thi occurrence nets rei event structures pen 
logics databases information systems agent temporal logics 
adopt event structures win enriched information sequential agents lt models concurrent systems 
approach complies fact view individual agent may distributed system particular instant time partially due relative autonomy spatial separation agents supported communication lrt 
agent logics explicitly distinguish sequential agents localities system refer local viewpoint agent express communication agents major feature distribution lt lrt ram 
versions agent logics reflecting different perspectives non local information accessed agent ram 
logics propose assume assertion agent possible communication point 
instance logics assume instant actual information agent corresponding communication 
addressed context object orientation es axiomatize significant subset gnome language cal 
agent logics ram consider existence knowledge modality allowing non local properties agents cf 
kr 
detailed account logics knowledge see 
concluding remarks alternative versions distributed temporal logics referred sound complete axiomatizations 
decidability results available lrt pen ram 
effort done direction hope development robust proof system logics pointed emerson eme exogenous logics multiple time frames specially suited compositional modular specification verification bkp 
identified ram agent logics 
sake simplicity adopt elementary system view chapter just sets objects operating concurrently interacting synchronously 
real systems objects structured may aggregated complex objects related inheritance related ways 
effective specification method underlying logic inthe large mechanisms indispensable putting structures 
ehr gives approach treat issues way compatible ideas developed chapter 
logics specifying concurrent information systems important object relationships inheritance 
inheritance describes class reuses features 
specification level inheriting class adopts attributes actions possibly adds 
implementation level inheriting class reuses code implements inherited attributes actions way original class 
inheritance approaches allow overriding inherited actions name kept implementation replaced new 
trivial capture logically clean manageable way 
structuring may go 
mind module concept reflects generic building blocks software 
particular parameterization instantiation horizontal vertical composition modules supported 
module incorporate reification step external interface higher level abstraction internal interface lower level abstraction de den den 
issues investigation real time constraints deductive capabilities 
real time constraints important practical issue useful approach may 
deductive capabilities default handling harder cope eventually better understood incorporated 
theoretical developments experimental languages methods systems developed supported tools tested application case field studies 
troll project proceeded direction 
troll method designed supports views system object behaviour communication advice proceed step step 
troll workbench construction set tools designed developing validating troll specifications 
textual graphical editors parsers animator envisaged validating specifications user requirements give support exploring actual states variety means 
troll application study performed developing information system german national institute weights measures cf 
section kkh 
results experiences encouraging logics discussed chapter may take time find way practice 
research fundamental experimental needed understanding intricacies find incorporate specification methodology 
acknowledgments partially supported praxis xxi program praxis xxi projects mat logics databases information systems mat acl plus tit esprit iv working groups aspire fireworks 
gratefully acknowledge inspirations editors unknown referee members groups braunschweig lisbon narciso marti oliet 
ab 
algebraic specification object type specifications 
wieringa editors information systems correctness reusability selected papers core workshop pages 
ag goguen 
object oriented environment 
america editor proc 
ecoop pages 
springer berlin 
agm abramsky gabbay maibaum 
handbook logic computer science vols 

clarendon press oxford 
ben ari manna pnueli 
temporal logic branching time 
th acm symposium principles programming languages williamsburg va pages 
acta informatica 
bk bergstra klop 
process algebra synchronous communication 
information control 
bkp barringer kuiper pnueli 
may compose temporal logic specifications 
proceedings th acm symposium theory computing pages 
acm press 
boo booch 
object oriented analysis design applications 
benjamin cummings redwood city ca nd edition 
bw baeten weijland 
process algebra 
cambridge university press 
cab coleman arnold hayes 
object oriented development fusion method 
prentice hall 
cal caleiro distributed object communities 
master thesis instituto superior lisboa 
portuguese 
cat cattell 
object database standard 
morgan kaufmann publishers san mateo 
ce clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
workshop logics programs pages 
lncs 
ce caleiro 
ehrich 
temporal specification distributed systems power event calling 
technical report dept de matem atica instituto superior lisbon 
appear 
che chen 
entity relationship model unified view data 
communications acm 
dubois ph 
du bois petit wu 
albert formal agent oriented requirements language distributed composite systems 
hartel und saake dubois editor proc 
workshop formal methods information system dynamics caise pages 
de denker 
ehrich 
event semantics transactions 
editors proc 
int 
workshop information systems correctness reusability pages 
universite val laboratoire de informatique technical report 
den denker 
semantic refinement concurrent object systems serializability 
freitag jones lengauer 
schek editors object orientation parallelism persistence pages 
kluwer academic publ 
den denker 
von zu 
reihe band 
infix verlag sankt augustin 
eh emerson halpern 
revisited branching versus linear time temporal logic 
th acm symposium principles programming languages austin pages 
journal acm 
eh 
ehrich hartel 
temporal specification information systems 
pnueli lin editors proc 
int 
workshop honor chih sung tang world scientific singapore pages 
ehr 
ehrich 
object specification 

kreowski editor ifip volume foundations system specification chapter 
appear springer lncs 
eme emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science pages 
elsevier 
es 
ehrich sernadas 
local specification distributed families sequential objects 
astesiano reggio tarlecki editors trends data types specification proc 
th adt workshop th compass workshop selected papers pages 
springer berlin lncs 
logics databases information systems esp esp data inform atica lisbon 
users manual 
supplied case product kit 
fagin halpern moses vardi 
reasoning knowledge 
mit press 
fl fischer ladner 
propositional dynamic logic regular programs 
journal computation system sciences 
flo floyd 
assigning meanings programs 
schwartz editor mathematical aspects computer science proceedings symposium applied mathematics volume pages 
american mathematical society 
fm fiadeiro maibaum 
temporal theories modularization units concurrent systems specification 
formal aspects computing 
fra francez 
fairness 
springer verlag 
fs fowler scott 
uml distilled applying standard object modeling language 
addison wesley new york 
fsms fiadeiro sernadas maibaum saake 
semantics object oriented constructs 
meersman kent khosla editors object oriented databases analysis design construction north holland pages 
fw wieringa 
lcm language describing conceptual models syntax definition 
technical report vrije universiteit amsterdam 
gm goguen meseguer 
unifying functional object oriented relational programming logical semantics 
wegner shriver editor research direction object oriented programming pages 
mit press 
gol goldblatt 
logics time computation 
csli 
gabbay pnueli shelah 
temporal analysis fairness 
proceedings th acm symposium principles programming languages 
gs goguen 
module composition system design object paradigm 
journal object oriented programming 
gw goguen winkler 
introducing obj 
technical report sri international 
har harel 
order dynamic logic 
springer verlag lncs 
har hartel 
modellierung von als verteilte 
reihe 
infix verlag sankt augustin 
hartel denker krone 
ehrich 
information systems modelling troll formal methods 
information systems 
hj hartel 
modeling business processes objects 
int 
journal cooperative information systems 
hm hennessy milner 
algebraic laws nondeterminism concurrency 
journal acm 
hm halpern moses 
knowledge common knowledge distributed environment 
journal acm 
hoa hoare 
axiomatic basis computer programming 
communications acm 
hoa hoare 
communicating sequential processes 
prentice hall 
hartmann saake hartel 
revised version modelling language troll version 
informatik bericht technische universitat braunschweig 
hz halpern zuck 
little knowledge goes long way knowledge derivations correctness proofs family protocols 
journal acm 
jac jacobson 
object oriented software engineering 
addisonwesley reading ma 
saake hartmann sernadas 
troll language object oriented specification information systems 
acm transactions information systems april 
wieringa hartel saake hartmann 
combining troll object modeling technique 
editor bei und 
gi fg integration von und methoden fur die von software pages 
informatik springer verlag 
kkh krone hartel denker 
ehrich 
developing information system troll application field study 
mylopoulos vassiliou editors proc 
th int 
conf 
advanced information systems logics databases information systems engineering caise pages 
springer berlin lncs 
kp katz peled 
interleaving set temporal logic 
th acm symposium principles distributed computing pages 

kr ramanujam 
knowledge ordering events distributed systems 
proc 
theoretical aspects reasoning knowledge pages 
morgan kaufmann 
lam lamport 
proving correctness multiprocess programs 
ieee transactions software engineering 
mukund ramanujam thiagarajan 
models logics true concurrency 
thiagarajan editor models logics concurrency advanced school algebraic logical categorical foundations concurrency 
del 
parikh ramanujam thiagarajan 
logical study distributed transition systems 
information computation 
lrt ramanujam thiagarajan 
temporal logics communicating sequential agents international journal foundations computer science 
ls ph 
schnoebelen 
hierarchy temporal logics past 
theoretical computer science 
lt thiagarajan 
modal logic subclass event structures 
th 
ottmann editor proc 
th int 
colloq 
automata languages programming pages 
lncs springer verlag berlin 
mes meseguer 
conditional rewriting unified model concurrency 
theoretical computer science 
mes meseguer 
logical theory concurrent objects realization maude language 
agha wegner yonezawa editors research directions concurrent objectoriented programming pages 
mit press 
mil milner 
calculus communicating systems 
springer verlag lncs 
mp manna pnueli 
temporal logic reactive concurrent systems 
springer verlag new york 
pel peleg 
concurrent dynamic logic 
journal acm 
pen penczek 
temporal logic event structures 
fundamenta informaticae 
pen penczek 
branching time partial order temporal logics 
editors time logic computational approach pages 
ucl press 
pnu pnueli 
temporal logic programs 
proc 
th annual symposium foundations computer science pages 
ieee computer society 
new york 
pra pratt 
modeling concurrency partial orders 
international journal parallel programming 
pw pinter wolper 
temporal logic reasoning partially ordered computations 
rd acm symposium principles distributed computing pages 

ram ramanujam 
locally linear time temporal logic 
proc 
th annual ieee symposium logics computer science pages 
ieee computer society 
new york 
rbp rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall englewood cliffs nj 
rei reisig 
elements temporal logic coping concurrency 
technical report institut fur informatik technische universitat munchen 
postfach munchen germany 
rs 
introducing foops 
technical report prg tr programming research group oxford university computing laboratory 
scs sernadas costa sernadas 
institution object behaviour 
ehrig orejas editors trends data type specification pages 
springer verlag lncs 
ser sernadas 
temporal aspects logical procedure definition 
information systems 
sernadas fiadeiro sernadas 
ehrich 
basic building blocks information systems 
editors information systems concepts depth analysis pages 
north holland 
saake hartmann 
ehrich 
objectoriented design information systems troll language features 
paredaens tenenbaum editors advances database systems implementations applications 
springer verlag wien courses lectures 
saake hartmann 
application modelling heterogeneous environments object specification language 
huhns papazoglou editors logics databases information systems int 
conf 
intelligent cooperative information systems pages 
ieee computer society press 
sr sernadas ramos 
gnome language syntax semantics calculus 
technical report tech 
report instituto superior lisboa 
ss smith smith 
database abstractions aggregation generalization 
acm transactions database systems 
ssc sernadas sernadas costa 
object specification logic 
journal logic computation 
sse sernadas sernadas 
ehrich 
object oriented specification databases algebraic approach 
editor proc 
th int 
conf 
large databases vldb pages brighton 
morgan kaufmann palo alto 
ssr sernadas sernadas ramos 
temporal logic approach object certification 
data knowledge engineering 
thi thiagarajan 
trace extension linear time temporal logic 
proc 
th annual ieee symposium logic computer science pages 
ieee computer society press 
thi thiagarajan 
ptl product state spaces 
technical report school mathematics science foundation madras india 
vg van 
comparative concurrency semantics refinement actions 
phd thesis free university amsterdam 
wie wieringa 
requirements engineering 
john wiley sons chichester 
win winskel 
event structures 
brauer reisig rozenberg editors petri nets applications relationships models concurrency advances petri nets part ii proc 
advanced course bad september pages 
springer 
lncs 
wn winskel nielsen 
models concurrency 
agm 
wol wolper 
relation programs computations models temporal logic 
editors time logic computational approach pages 
ucl press 
index accessibility relation action calling enabling external internal occurrence symbol action sort action symbol active database active rule agent logic aggregation albert alcqi concept role knowledge base reasoning operator anderson reduction answer approximation assignment atom attribute alteration inherited symbol value auto epistemic logic automated deduction axiom behaviour class communication frame inherited local non rigid rigid system axiom attribute base formula base sort base term base variable behaviour axiom concurrent model object objects system belief revision formula branching time logic business policy table calling cardinality constraint certain answer chisholm set class axiom logics databases information systems inheritance class subclass hierarchy clause definite ground null closed world assumption closure consequence entailment coalescing codd table combined complexity communication action asynchronous axiom constraints event formula predicate protocol symbol synchronous compilation temporal queries completeness completion completion axiom complex object complexity composite event concept concurrency model concurrent behaviour events objects process system workflow condition confluence conjunctive formula consequence logical consistency constant symbol constraint constraint satisfaction potential context function contrapositive reasoning cooperative answering coupling mode credulous semantics cwa cycle local negative data complexity data domain data modeling data signature database deductive definite disjunctive distributed extensional edb extensional edb heterogeneous intensional idb logic multimedia normal object oriented object relational relational stable stratified database evolution database schema datalog datalog datalog datalog inflationary datalog datalog stratified datalog xy datalog db deduction deduction theorem default defeasible reasoning definite answer property delta relation deontic logic deontic derivation description logic description logic disjunctive answer disjunctive datalog disjunctive logic program distribution domain domain closure dynamic action logic dynamic behaviour dynamic logic dynamic osl dynamics eca rule encoding constraint interval entailment entity entity relationship model epistemic logic equivalence evolution transaction transition event algebra composite external interaction internal sharing event consumption mode event grove distributed labelling event structure evolution evolving algebra evolving temporal specification exception existential axioms existential generalization expression complexity expressive power extended relational theory external environment logic fact false presupposition finite model property order logic interval sorted fixpoint languages fixpoint semantics floating problem fol foops formula atomic clausal see clause closed function free ground query see query frame idealized reflexive symmetric transitive frame rule function symbol general subsumption generalized closed world assumption global invariant global invariant rule gnome goal goal clause ground term hard integrity constraints herbrand base herbrand interpretation herbrand model herbrand universe hilbert calculus hilbert system history horn table horn clause hypothesis logics databases information systems hypothetical query idle action implication inapplicable null incomplete information indefinite information information system concurrent distributed methods negative links inheritance formalization logics method multiple nonmonotonic structural inheritance net integrity constraint denial domain functional dependency inclusion dependency preference referential security state static temporal universal user interaction interpretation interpretation structure invariant global kb knowledge base knowledge discovery kripke frame see frame kripke semantics lcm leap life life cycle distributed linear temporal logic literal liveness local invariant rule local stratification locality logic default order higher order sorted modal non classical non monotonic temporal logic knowledge logic program logic programming logical consequence logical database login sorted logic valued logic marked null maude message meta formula meta sort meta term meta variables method blocking method inheritance method overloading mgu misconception mixed net modal order logic modal logic modal operator model canonical herbrand minimal modal logic perfect stable unique modeling behaviour business process conceptual data information systems object object oriented modus ponens monotonic net multi modal logic multiple temporal dimensions mutation mutation action symbol mutation attribute symbol mutation event mutation sort mutator natural deduction necessitation negation finite failure default logic programs logical negative information net effect operator non normal form non monotonicity non rigid axiom non standard logic nonmonotonic net normative position null value object behaviour class communication identity instance locality logic model modeling semantics signature specification specification language system object behaviour object identifier object oriented database object specification object specification logic object oriented data model obligation observation observation symbol path preemption open world assumption object ordered logic programs osl dynamic ought ought overriding paradoxes deontic logic parameter context parameterized complexity past formula ae performative document permission polymorphism population positive existential formula possible answer possible world pre interpretation structure predicate calling communication enabling local logics databases information systems locality state symbol predicate logic predicate symbol premise process algebra production rule program completion prohibition prolog proof proof theory quantificational axioms query answer empty intensional caching closed folding optimization semantic reasoning alcqi data models recursion recursively indefinite database refutation relation control delta protocol relation symbol relational model relationship residue rigid axiom role rule delta monotonic progressive body empty deductive definite disjunctive guarded head empty horn local normal progressive range restricted safety satisfaction local satisfiability sceptical semantics schema evolution scope sdl semantic mapping semantics fixpoint herbrand model stable supported stable state stratified stratified founded sentence set oriented signature sld resolution sldnf refutation sli refutation slot symbol snapshot view soft integrity constraints operator sort soundness specification specification attribute symbol specification sort speech act sql temporal sql tp stable model stable semantics state final initial intermediate object predicate term transition transition system variable state formula state meta formula delta interpretation nf normal form stratification stratified program stratum strict inheritance path strong dependency system strong representation system structural inheritance substitution ground inverse subsumption partial switch theorem synchronization system axiom behaviour concurrent denotational model development method distributed heterogeneous legacy object object oriented open properties reactive signature specification transition tarskian semantics tautology taxonomic hierarchy temporal connective order multidimensional past second order temporal data temporal database concrete snapshot timestamp temporal domain interval point temporal logic anchored version branching distributed information systems linear local multidimensional agent partial order propositional reduction temporal logic programming temporal ontology temporal query generic explicit time implicit time temporal relational algebra temporal trigger temporal unfolding term termination logics databases information systems terminological logic theory timestamp view tquel trace distributed transaction transition transition system distributed translation omega coalescing fotl fol trigger troll tsql tuple oriented type unification unifier unique names assumption universal relation assumption universe universe discourse operator see universe discourse update table vacuous axioms valuation order logic modal logic variable bound occurrence free occurrence view update view update weak dependency system weak representation system weak operator founded model founded semantics zombie path 
