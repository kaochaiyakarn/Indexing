distributed proxy design pattern distributed object communication ant nio silva francisco rosa teresa gon alves inesc ist technical university lisbon rua alves lisboa portugal tel fax silva acm org inesc pt tsg inesc pt presents distributed proxy pattern pattern distributed object communication 
distributed proxy pattern decouples distributed object communication object specific functionalities 
decouples logical communication physical communication 
distributed proxy pattern enforces incremental development process encapsulates underlying distribution mechanisms offers location transparency 
intent distributed proxy pattern decouples communication distributed objects isolating issues object functionality 
distributed communication decoupled logical communication physical communication parts 
motivation example motivates problems respective forces involved distributed object communication 
example distributed agenda application users manipulate agenda items private appointments shared meetings 
meeting requires participation users 
agenda session starts receives agenda manager agenda user information accessed 
simple design solution ignoring distribution issues 
booch class diagram shows functionalities design agenda application distribution issues ignored 
enriching design distribution complex 
example consider different address spaces 
terms agenda application means operation agenda manager return remote agenda session user object network 
source complexity need implement distributed communication 
instance communication session manager implemented sockets 
user perspective distribution issues hidden 
just want manipulate agenda items 
agenda session problem agenda manager user user meeting item meeting appointment agenda functionalities design 
construct design solution distributed object communication hard due complexity inherent distributed communication 
necessary deal specificities underlying communication mechanisms protocols platforms 
furthermore distributed communication spans nodes different name spaces names may meaning nodes 
particular invoking object belonging node results error 
forces design communication resolve forces complexity 
problem respective solution complex 
aspects dealt specificities underlying communication mechanisms diverse name spaces 
object distribution 
object may transparently passed distributed nodes 
transparency 
transparent functionality classes preserving interaction model objectoriented interaction confining number changes necessary functionality code 
functional logical physical agenda session client server proxy proxy send client server communicator return communicator agenda manager names bytes names flexibility 
resulting applications flexible incorporation change distribution issues 
underlying communication mechanisms isolated possible provide different implementations 
incremental development 
distributed communication introduced incrementally 
incremental development allows incremental test debug application 
solution shows layered distributed object communication constitutes design solution previous problems 
example session object invokes manager 
solution defines layers functional logical physical 
functional layer contains application functionalities interactions normal object oriented invocations 
logical layer proxy objects introduced distributed objects convert object distributed names vice versa 
layer responsible support object oriented model invocation distributed proxies dynamically created object node contained distributed message 
physical layer implements distributed communication underlying communication mechanisms 
solution takes account forces previously named complexity managed layered separation problems 
logical layer supports name spaces physical layer implements underlying communication mechanisms 
object distribution achieved proxy objects convert names vice versa 
layered distributed object communication 
transparency achieved logical physical layers decoupled functional layer 
functionality code uses transparently logical layer client proxy agenda manager interface 
flexibility achieved physical layer contains underlying communication mechanisms particularities decoupled logical layer 
incremental development achieved client proxy manager interface incorporation logical layer done functional layer developed 
server proxy client communicator interface physical layer incorporated logical layer developed 
way application incrementally developed steps functional development logical development physical development 
incremental way define interaction participating components pattern 
define functional level 
adding logical layer define interactions 
implementing physical layer establish interaction 
applicability distributed proxy pattern object oriented interaction model required distributed objects 
distributed objects fine grained entities large grained servers accessed clients 
distributed communication mechanisms may tested 
communication mechanism changed limited impact rest application 
functional logical physical client client proxy incremental development required development strategy 
incremental test debug enforced 
structure participants booch class diagram illustrates structure distributed proxy pattern 
layers considered functional logical physical layer 
classes involved layer 
client server functional layer client proxy server proxy manager logical layer client communicator server communicator physical layer 
classes server interface server name interface define interfaces integrate functional logical layer logical physical layer 
pattern main participants client 
requires service server methods 
server 
provides services 
client proxy 
represents client node 
uses manager convert sending object distributed names received distributed names object 
particular responsible converting object distributed names method converting distributed names object 
gets locator manager proceed invocation 
pair defined method 
name manager ref name name ref locator client communicator server communicator marshaling unmarshaling marshaling unmarshaling distributed proxy pattern structure 
server name interface server proxy server interface server server proxy 
provides distribution support object server node 
entry point remote requests 
client proxy responsible name conversions 
name manager 
responsible distributed naming policies unique universal identifiers 
associates object distributed names vice versa 
particular method ref name responsible converting object distributed name method name ref converting distributed name object 
associates distributed names locators 
particular method responsible converting distributed name locator 
locator 
defines address execution proceed 
logical case object proxy physical case includes distributed address socket address 
client communicator server communicator 
responsible implementing distributed communication 
called method marshaling methods defined convert distributed names data streams bytes vice versa 
server interface 
defines interface common proxy 
server name interface 
defines interface common server proxy client communicator 
convert send access marshaling send message unmarshaling convert received names invoke server convert send marshaling return results unmarshaling convert received names collaborations client client client server server name proxy communicator communicator proxy server manager ref name access name ref names names bytes names marshaling send types collaborations possible functional collaboration corresponds direct invocation client server logical collaboration invocation proceeds proxy proxy physical collaboration invocation proceeds logical physical layers 
booch interaction diagram shows physical collaboration includes functional logical collaborations 
phase client invokes client proxy object converted distributed names 
invoking instantiated distributed names client communicator necessary get locator associated proxy 
access proxy logical locator communicator physical locator 
invoked client communicator marshals data sends message communicator message proxy 
third proxy converts received distributed names object manager 
mis invoked 
invocation server similar phases executed return results 
return unmarshaling unmarshaling marshaling name ref ref name distributed proxy pattern collaborations 
collaboration possible variations occur name associated object client side associated distributed name server side 
situation means object corresponds local object create server proxy associate new distributed name manager 
situation create proxy associate distributed name name manager 
distributed proxy pattern advantages decouples object functionality 
distribution transparent functionality code clients distributed object aware object distributed 
allows incremental development process 
version application built distribution introduced 
possible simulate distributed communication non distributed environment implementing communicators simulate real communication 
data gathered simulations decide final implementation 
encapsulation underlying distribution mechanisms 
implementations distributed com client handler sock connector connector node client server node connector handler handler acceptor sock stream mt synch svc handler client server reactor communicator communicator reactor munication tested physical layer 
different implementations communicators tested sockets corba changing application functionalities 
portability different platforms achieved 
location transparency 
distributed names locators done operation gives location transparency remote objects 
way possible re configure application migrate objects 
pattern drawbacks overhead terms number classes performance 
new classes created extended distributed communication depending implementation uses delegation inheritance respectively 
performance overhead reduced implementation uses inheritance communicators subclasses proxies 
implementation variations naming policies possibilities manager distributed nodes share single name manager manager 
described naming policies 
name policies names universal local absolute relative pure impure 
distributed name universal valid distributed nodes exists managers 
distributed name absolute denotes object distributed nodes method returns locator nodes 
distributed name pure contain location information 
support dynamic re configuration migration distributed names universal absolute pure 
ace implementation structure 
server handler sock acceptor acceptor distributed name sent distributed node universal denotes object absolute 
names properties called unique universal identifiers 
supported manager shared distributed nodes managers enforcing distributed names properties 
performance requirement name managers support impure names price loosing reconfiguration 
impure distributed names avoid locator conversion 
distributed name locator 
implementation communicators physical layer implemented underlying communication mechanisms 
section described possible implementation communicators top ace framework 
ace adaptive communication environment object oriented network programming framework encapsulates operating system concrete mechanisms classes 
implementation ace features interprocess communication 
physical architecture implementation considers pair unidirectional sockets communicating distributed nodes 
socket called socket receive service request messages called socket send service request messages 
sockets encapsulated handler objects 
presents relevant ace classes implementation 
class ace reactor pattern register remove dispatch service handler objects 
reactors needed node 
client node anode connector object subclass ace connector establish communication server node generates client handler object encapsulates server node 
handler send messages associated invocations receive results 
server node anode acceptor object client communicator client handler client reactor server reactor server handler server communicator server proxy select marshal message marshaling send message message invoke marshal results send results results locator handler send select network communication subclass ace accept connections calling nodes generates handler object encapsulates socket client node 
handler receive messages associated invocations return results 
shows ace implementation collaborations communicators 
phase client communicator creates message server proxy name method name arguments 
message includes client communicator identification 
method marshaling responsible marshaling data 
uses locator identify client handler method send sends message 
message received server node server reactor dispatches handler object input 
server handler identifies server communicator method 
method unmarshaling responsible unmarshaling message 
method invoked proxy 
second phase invocation execution server proxy results returned back similar manner 
client handler identifies client communicator method identification included sent message 
simulate synchronous call client communicator blocks condition signaled handler 
responsible signaling condition 
sample code code shows distributed communication associated method class agenda manager user name returns user handle input network communication ace implementation collaboration 
unmarshaling marshaling object 
code emphasizes logical layer communication 
client proxy agenda manager cp agenda manager creates client proxies user cp user defined 
server proxies sp agenda manager sp user defined 
methods cp agenda manager sp agenda manager need defined entity sent string name object 
method sp agenda manager converts object user distributed name 
distributed name exist creates server proxy distributed name user 
void sp agenda manager user user dname obtains user distributed name associated user object ref name user distributed name exists distributed creates new server proxy sp user new sp user user creates new distributed name server proxy argument serves location associates user object distributed name bind user method cp agenda manager converts received distributed name acp user 
may case cp user exist created 
void cp agenda manager dname cp user obtains user client proxy associated distributed name name ref client proxy exists creates new client proxy new cp user associates client proxy distributed name bind redefinition proxy method operation specific 
client proxy uses distributed name obtain logical locator object 
accesses object 
object includes address proxy object 
dname cp agenda manager const string name obtains logical locator locator loc accesses server proxy returns distributed name return loc sp name physical layer physical locator object returned method 
client communicator knows structure uses information proceed access network 
case method redefined subclass agenda manager 
dname cp agenda manager const string name obtains logical locator locator loc sets locator client communicator communicator loc invokes communicator returns distributed name return communicator name known uses corba uses distributed proxy pattern 
implementation distributed communication encapsulated idl object dynamically created passed nodes 
corba implementations support location purpose debugging 
colocation implements logical layer distributed proxy pattern code executes centralized node 
pattern language distributed proxy patterns integrated design patterns component passive replicator provide component distribution replicated object distribution respectively 
related patterns proxy pattern clients object communicate representative object 
particular remote proxy variation corresponds logical layer distributed proxy 
distributed proxy allows dynamic creation new proxies completely decouples logical layer physical layer 
client dispatcher server pattern supports location transparency means name service 
distributed proxy pattern provides location transparency name manager supports unique universal identifiers 
forwarder receiver pattern supports encapsulation underlying distributed communication mechanisms 
pattern implement distributed proxy physical layer 
reactor pattern acceptor pattern connector pattern implementation distributed proxy physical layer shown implementation section 
component pattern decouples component configuration component functionality 
describes reconfigurable communication entities called plugs 
plugs implementation distributed proxy 
grady booch 
object oriented design applications 
benjamin cummings publishing 
pedro sousa ant nio silva 
naming identification distributed systems pattern naming policies 
conferenceon pattern programs plop allerton park illinois september 
douglas schmidt 
adaptive communication environment object oriented network programming toolkit developing communication software 
th th sun user group conferences san jose california san francisco california december june 
douglas schmidt 
reactor object behavioral pattern concurrent event demultiplexing event handler dispatching 
jim coplien douglas schmidt editors pattern languages program design pages 
addison wesley 
douglas schmidt 
acceptor connector design patterns active passive network connections 
dirk riehle robert martin frank editors pattern languages program design 
addison wesley 
jon siegel 
corba programming 
wiley 
ant nio silva hayes francisco torres pedro santos 
pattern language perception design implementation distributed application partitioning october 
oopsla workshop methodologies distributed objects 
francisco rosa ant nio silva 
component design pattern component configuration 
nd european conference pattern languages programming europlop germany july 
teresa goncalves ant nio silva 
passive replicator design pattern object replication 
nd european conference pattern languages programming europlop germany july 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
frank buschmann meunier hans rohnert peter michael stal 
pattern oriented software architecture system patterns 
john wiley sons 

