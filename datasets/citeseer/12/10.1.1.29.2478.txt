single machine scheduling release dates michel goemans maurice queyranne andreas schulz martin wang october revised august consider scheduling problem minimizing average weighted completion time jobs release dates single machine 
rst study linear programming relaxations problem time indexed formulation formulation 
show equivalence proving log greedy algorithm leads optimal solutions relaxations 
proof relies notion mean busy times jobs concept enhances understanding lp relaxations 
greedy solution describe simple randomized approximation algorithms guaranteed deliver feasible schedules expected objective function value factors respectively optimum 
concept common independent points respectively 
analysis implies particular worst case relative error lp relaxations provide instances showing 
algorithms may derandomized deterministic versions run time 
randomized algorithms apply online setting jobs arrive dynamically time decide job process knowledge jobs released 
keywords approximation algorithm lp relaxation scheduling line algorithm ams subject classi cation study single machine scheduling problem release dates objective minimize weighted sum completion times 
de ned follows 
set ng jobs scheduled single disjunctive machine 
job processing time released time 
assume release dates processing times integral 
completion time job schedule denoted goal nd non preemptive schedule minimizes positive weights 
department mathematics room massachusetts avenue cambridge ma usa 
email goemans math mit edu university british columbia faculty commerce business administration vancouver canada 
email maurice queyranne commerce ubc ca sloan school management room massachusetts avenue cambridge ma usa 
email schulz mit edu technische universit berlin fakult ii mathematik und naturwissenschaften institut ur mathematik ma stra des 
berlin germany 
email math tu berlin de san mateo ca usa 
email wang com classical scheduling notation problem denoted strongly np hard jobs 
key ingredients design analysis approximation algorithms design implicit enumeration methods choice bound optimal value 
linear programming combinatorial lower bounds proposed studied scheduling problem see example dyer wolsey queyranne queyranne schulz posner potts 
lp relaxations involve variety di erent types variables express job completed time non preemptive time indexed relaxation processed time preemptive time indexed relaxation job completed completion time relaxation dyer wolsey show non preemptive time indexed relaxation stronger preemptive time indexed relaxation 
show relaxation equivalent completion time relaxation called shifted parallel inequalities 
fact turns polyhedron de ned inequalities supermodular optimize greedy algorithm 
similar situation arises 
greedy solution may interpreted terms preemptive schedule call lp schedule point time schedules available jobs largest ratio weight processing time 
uma wein point value lp solution coincides combinatorial bounds posner potts idea allowing jobs split smaller pieces scheduled individually 
show optimal value times lower bound equivalent relaxations preemptive time indexed relaxation completion time relaxation combinatorial relaxation 
prove result quality relaxations converting preemptive lp schedule non preemptive schedule 
technique leads approximation algorithms recall approximation algorithm polynomial time algorithm guaranteed deliver solution cost times optimal value 
randomized approximation algorithm polynomialtime algorithm produces feasible solution expected objective function value factor optimal value 
technique converting preemptive schedules non preemptive schedules design approximation algorithms introduced phillips stein wein 
speci cally showed list scheduling order completion times preemptive schedule produces non preemptive schedule increasing total weighted completion time factor 
introduced concept points 
notion hall shmoys wein connection nonpreemptive time indexed relaxation dyer wolsey design approximation algorithms various scheduling environments 
purposes point job preemptive schedule rst point time fraction completed 
chooses di erent values sequencing order non decreasing points preemptive schedule may lead di erent non preemptive schedules 
increased exibility led improved approximation algorithms chekuri motwani natarajan stein goemans chose random analyzed expected performance resulting randomized algorithms 
show common value jobs appropriate probability distribution sequencing order points lp schedule expected performance worse times optimal preemptive time indexed lp value 
prove selecting separate value job improve bound factor 
algorithms inspired partly resemble algorithms hall chekuri 
contrast hall line line type schedule deterministic randomized deterministic phillips hall schulz hall chakrabarti combining schedule best schedule random schedule table summary approximation bounds schedule obtained sequencing jobs order non decreasing points lp schedule 
job dependent yields schedule 
results discussed second double line 
subsequently anderson potts gave deterministic competitive algorithm 
unit weight problem rst constant factor approximation algorithm due phillips stein wein 
performance ratio works line 
deterministic competitive algorithms :10.1.1.39.5261
algorithms optimal deterministic line algorithms :10.1.1.39.5261
chekuri motwani natarajan stein gave randomized approximation algorithm optimal randomized line algorithms 
exploit preemptive time indexed lp relaxation hand provides highly structured optimal solutions hand enables mean busy times 
random points 
algorithm chekuri starts arbitrary preemptive schedule random points 
relate value resulting schedule preemptive schedule underlying lp relaxation 
approach gives better approximations structural insights limits power preemption link lp schedule preemptive lp relaxation helps obtain approximations total weighted completion time 
variants algorithms line jobs arrive dynamically time point time decide job process knowledge jobs released 
line setting compare value computed schedule optimal line schedule derive bounds competitive ratios line setting 
see table account evolution line line approximation results single machine problem consideration 
main ingredient obtain results exploitation structure lp schedule 
surprisingly lp schedule solve strongly nphard preemptive version problem show lp schedule solves optimally preemptive problem related objective function mean busy time job average point time machine busy processing observe equivalent optimization problems non preemptive case considering preemptive schedules 
approximation techniques proved useful general scheduling problems 
problem precedence constraints prec sequencing jobs order random points optimal solution time indexed lp relaxation leads approximation algorithm 
approximation algorithm identical parallel machine scheduling result time indexed lp relaxation optimal solution interpreted preemptive schedule fast single machine jobs assigned randomly machines sequenced order random points preemptive schedule 
corresponding scheduling problem unrelated parallel machines performance guarantee obtained randomized rounding convex quadratic programming relaxation inspired time indexed lp relaxations discussed 
refer detailed discussion points machine scheduling problems 
signi cant progress understanding approximability scheduling problems average weighted completion time objective 
woeginger developed polynomial time approximation scheme scheduling identical parallel machines absence release dates subsequently research groups polynomial time approximation schemes problems release dates rm see resulting joint conference proceedings publication details 
brie discuss practical consequences 
uma wein uma wein performed experimental studies evaluate part quality lp relaxation approximation algorithms studied related scheduling problems 
rst authors report instances deliberately constructed hard approach formulation algorithms deliver surprisingly strong experimental performance 
note ideas led improved approximation algorithms lead heuristics quite ective empirical experiments furthermore extended give improved heuristics complex problems arise practice 
authors follow study report coupled local improvement lp heuristics generally produce best solutions nd simple heuristic outperforms lp heuristics 
machine idle heuristic starts non preemptively processing available job largest ratio 
analyzing di erences lp schedule heuristic schedule chou queyranne levi subsequently shown asymptotic optimality line heuristic classes instances bounded job weights bounded processing times 
contents follows 
section concerned lp relaxations relationship 
presentation discussion lp schedule 
section review time indexed formulation introduced dyer wolsey show solved optimality lp schedule 
section mean busy time relaxation completion time relaxation prove properties equivalence formulation 
section explores polyhedral consequences particular fact mean busy time relaxation scaling job processing times supermodular linear program job method constructing lp schedule equivalent corresponding greedy algorithm 
section deals approximation algorithms derived lp relaxations 
section method constructing schedules allows analyze bound job completion times resulting schedules 
section derive simple bounds schedules schedules deterministic common uniformly distributed random 
appropriate probability distributions improve approximation bound value schedules section value schedules section 
indicate algorithms derandomized time constructing deterministic schedules performance guarantees 
section show randomized approximations apply online setting section class bad instances ratio optimal objective function value lp bound arbitrarily close 
constant de nes lower bound approximation results obtained approach 
conclude section discussing related problems open questions 
relaxations section linear programming relaxations show equivalence discuss polyhedral consequences 
relaxations preemptive schedule plays crucial role point time schedule preemptively available job highest ratio 
assume jobs indexed order non increasing ratios 
wn pn ties broken order 
job released job processed preempted released job smaller index 
refer preemptive schedule lp schedule 
see example lp schedule 
lp schedule job instance 
higher rectangles represent jobs larger weight processing time ratio 
time shown horizontal axis 
notice lp schedule general minimize preemptive schedules 
surprising preemptive problem strongly np hard 
shown total weighted completion time lp schedule factor optimal value bound tight see 
lp schedule constructed log time 
see describe implementation may seen dynamic event oriented terminology machine executed line jobs dynamically arrive time 
algorithm keeps priority queue currently available jobs completely processed ratio key eld indicating remaining processing time 
scheduling decision types events job released job completes processing 
case released job added priority queue 
case completed job removed priority queue 
case top element priority queue highest ratio processed queue empty move job release jobs processed lp schedule complete 
implementation results total priority queue operations 
operation implemented log time algorithm runs log time 
lp schedule de ned somewhat di erent manner may seen static job 
consider jobs time order non increasing schedule job early possible starting preempting machine busy processing job came earlier ordering 
point view leads alternate log construction lp schedule see 
time indexed relaxation dyer wolsey investigate types relaxations strongest ones time indexed 
consider weaker time indexed formulations call formulation 
uses types variables job processed time interval zero represents start time job simplicity add replace resulting expression gives equivalent relaxation 
zd min subject upper bound makespan optimal schedule example max 
refer relaxation preemptive time indexed relaxation 
expression corresponds correct value completion time job preempted interpretation terms mean busy times section case 
observe number variables formulation pseudopolynomial 
eliminate relaxation obtain transportation problem result assumed integral lemma 
exists optimal solution indicated solved log time 
derive feasible solution lp schedule letting lp equal job processed 
theorem 
solution lp derived lp schedule optimal solution 
proof 
proof interchange argument 
consider optimal solution 
exist replacing obtain feasible solution increase objective function value 
resulting solution optimal 
repeating interchange argument derive exists optimal solution exist 
implies solution correspond lp schedule 
particular despite pseudo polynomial number variables lp relaxation optimal solution obtained eciently 
fact special structure lp schedule design analysis approximation algorithms see section 
note spite nice properties preemptive time indexed lp relaxation solves case processing job lp solution may fail consecutive case equation necessarily de ne completion time job preemptive lp schedule shown lemma 
mean busy time relaxation preemptive schedule indicator function processing job time machine processing time 
avoid pathological situations require preemptive schedule machine starts processing job positive amount time 
preemptive schedule de ne mean busy time job average time machine processing dt instance example mean busy time job 
rst establish important properties lemmas 
lemma 
preemptive schedule denote completion mean busy time respectively job job equality job preempted 
proof 
job processed preemption job processed interval total length times dt job processed time interval total length dt dt proof complete 
denote set jobs de ne min min 
machine capacity constraint may view indicator function job set de ne mean busy time set dt 
note dt dt start completion time mean busy time job set simple weighted average mean busy times elements 
consequence observation validity shifted parallel inequalities see 
lemma 
set jobs preemptive schedule mean busy time vector min equality holds jobs scheduled interruption min min 
proof 
note min dt min min min dt 
constraints minimized min min 
uniquely minimized feasible preemptive schedules jobs continuously processed min min 
minimum value min lower bound feasible preemptive schedule 
result lemma linear program provides lower bound optimal value zr min subject min proof theorem developments notion canonical decompositions 
set jobs consider schedule processes jobs early possible say order release dates 
schedule induces partition fs machine busy processing jobs exactly disjoint intervals min min refer partition canonical decomposition set canonical identical canonical decomposition canonical decomposition fsg 
set canonical feasible schedule jobs time interval min min 
note set example canonical subset decomposition ff gg 
min fs canonical decomposition lemma implies valid inequality mean busy time vector preemptive schedule 
words relaxation may written min theorem 
lp mean busy time job lp schedule 
lp optimal solution 
proof 
lemma lp feasible solution 
prove optimality lp construct lower bound optimal value show equal objective function value lp recall jobs indexed non increasing order ratios ig denote canonical decomposition 
observe vector 
expressed nonnegative combination expressions canonical sets 
construction lp schedule jobs canonical sets continuously processed min min lp schedule 
feasible solution canonical set min lp equation follows lemma 
combining derive lower bound feasible solution lower bound attained lp schedule 
theorems derive values relaxations equal 
corollary 
lp relaxations yield optimal objective function value zd zr weights 
value computed log time 
proof 
equivalence lower bounds note mean busy time lp job lp schedule expressed lp lp lp solution derived lp schedule 
result follows directly theorems 
shown earlier lp schedule constructed log time 
lp schedule necessarily minimize preemptive schedules theorem implies minimizes preemptive schedules 
addition lemma lp schedule optimal preemptive non preemptive problems preempt job 
example case processing times equal jobs released date 
lp schedule provides optimal solution problems known 
case coincides smith ratio rule see queyranne schulz case 
polyhedral consequences consider polyhedral consequences preceding results 
feasible region de ned constraints relaxation addition denote pr fm ng polyhedron de ned constraints relaxation 
theorem 
polyhedron pr convex hull mean busy time vectors preemptive schedules 
vertex pr mean busy time vector lp schedule 
ii polyhedron pr image space variables linear mapping 
de ned proof 
lemma implies convex hull mean busy time vectors feasible preemptive schedules contained pr show reverse inclusion suces show extreme point pr corresponds preemptive schedule extreme ray pr direction recession convex hull mean busy time vectors 
property second part statement follow theorem fact extreme point pr unique minimizer 
note extreme rays pr unit vectors immediate extension preemptive schedules mean busy times results balas implies unit vectors directions recession convex hull mean busy time vectors 
completes proof 
ii rst show image contained pr vector canonical decomposition fs de nition min min min inequality follows constraints de ning interchange argument proof theorem 
shows pr pr show reverse inclusion observation proof part pr represented sum convex hull mean busy time vectors lp schedules nonnegative orthant 
equation mean busy time vector lp lp schedule projection corresponding vector lp remains show unit vector direction recession 
lp schedule lp lp lp denote associated vector mean busy time vector respectively 
job real need show lp 
max lp ng 
choose lp choose integer maxf max de ne lp 
associated preemptive schedule processing job done interval postponed time units interval 
mean busy time vector satis es lp lp lp vector lp convex combination lp lp 
corresponding convex combination lp convex mapping linear lp 
view earlier results single machine scheduling identical release dates parallel machine scheduling unit processing times integer release dates interesting note feasible set pr mean busy time relaxation scaling job processing times supermodular polyhedron proposition 
set function de ned supermodular 
proof 
consider elements subset fj kg 
may construct lp schedule minimizing fkg job method considering rst jobs job 
note considering jobs sequence leads schedule minimizing jobs weighted processing times objective function 
de nition resulting mean busy times lp satisfy lp fkg lp fkg 
note job scheduled earlier release date rst units idle time left insertion jobs lp mean time units 
similarly may construct lp schedule mean busy time vector denoted lp minimizing fj kg considering rst jobs lp lp job fjg lp fjg job fj kg lp fj kg 
job inserted subset scheduled job idle time interval earlier lp schedule lp previously available idle time may occupied job causing delay mean busy time job lp lp fj kg fjg lp lp fkg suces establish supermodular 
alternate proof derived fact observed dyer wolsey mentioned relaxation transportation problem elimination 
interpretation nemhauser wolsey fisher result shapley follows value transportation problem function supermodular 
consequences proposition job method construct lp schedule just manifestation greedy algorithm minimizing supermodular polyhedron pr nally note separation problem polyhedron pr solved combinatorially 
separate family inequalities min trying possible values min applying log separation routine queyranne problem release dates 
separation routine implemented time observing bottleneck step queyranne algorithm sorting mean busy times jobs needs done job set 
provably schedules lp relaxations section derive approximation algorithms converting preemptive lp schedule feasible non preemptive schedule value bounded terms optimal lp value zd zr yields results quality computed schedule lp relaxations consideration value computed schedule upper bound optimal lp value lower bound value optimal schedule 
section describe family instances ratio optimal value problem lower bounds zr zd arbitrarily close 
lower bound sets target design approximation algorithms lp relaxations 
order convert preemptive lp schedule non preemptive schedule called points jobs 
point job rst point time fraction job completed lp schedule processed time units 
particular equal completion time de ne start time job notice de nition mean busy time lp job lp schedule average points lp notation xed job denote fraction job completed lp schedule time particular amount idle time occurs time start job lp schedule denoted idle note idle implicitly depend xed job construction idle time start completion job lp schedule express point idle de ne schedule schedule jobs processed non preemptively early possible order non decreasing points 
denote completion time job schedule idea scheduling non preemptively order points preemptive schedule introduced phillips stein wein subsequent results area 
idea extended individual job dependent points 
denote vector consisting 
schedule constructed processing jobs early possible nondecreasing order points completion time job schedule denoted compares schedule schedule derived lp schedule 
sequel results quality schedules schedules 
results imply bounds quality lp relaxations previous section 
main result construction random schedule expected value factor optimal lp value zd zr lp relaxations deliver lower bound times optimal value 
corresponding randomized algorithm implemented line competitive ratio running time log derandomized run line time 
investigate case single common show best schedule factor optimum 
non preemptive schedule schedule shown lp schedule respectively 
notice common value lead schedule 
bounding completion times schedules analyze completion times jobs schedules consider non preemptive schedules similar structure constructed slightly di erent conversion routine call conversion consider jobs order non increasing points iteratively change preemptive lp schedule non preemptive schedule applying steps remove units job processed leave machine idle corresponding time intervals say idle time caused job ii delay processing done iii remove remaining fraction job machine shrink corresponding time intervals shrinking time interval means discard interval move earlier corresponding amount processing occurs iv process job released time interval 
contains example illustrating action conversion starting lp schedule 
observe resulting schedule jobs processed non decreasing order points job started time property useful analysis line schedules 
illustration individual iterations conversion 
lemma 
completion time job schedule constructed conversion equal proof 
consider schedule constructed conversion 
completion time job equal idle time start plus sum processing times jobs start jobs processed non decreasing order points amount processing completion job idle time start job written sum idle time idle existed lp schedule start plus idle time start job caused steps conversion notice steps iii create additional idle time shrink ected time intervals 
job started contributes units idle time jobs contribute units idle time 
result total idle time start job written idle completion time job schedule constructed conversion equal sum expressions result follows equation 
follows lemma completion time job non preemptive schedule constructed conversion satis es feasible schedule 
schedule processes jobs early possible order conversion schedule obtain corollary 
corollary 
completion time job schedule bounded bounds schedules schedules start result quality schedule xed common value theorem 
xed value schedule factor max optimal lp value particular bound 
simultaneously ii length schedule factor optimal makespan 
proof 
proof ii immediate consequence corollary follows proof theorem sucient prove canonical set max min lemma follow max lp max lp max zr proving result 
consider canonical set assume renumbering jobs 
ordering necessarily anymore non increasing order 
fix job corollary derive represents fraction job processed lp schedule 
denote set jobs min 
canonical set jobs processed continuously lp schedule min min job observe min implies min 
simplify min jobs scheduled gaps min min min min combining derive min multiplying summing get min min implies 
sequel compare completion time job completion time lp lp schedule 
xed common value exist instances show type job job analysis give bound better 
show value exist instances objective function value schedule bad twice lp lower bound 
view results advantageous values appears instance simultaneously bad choices fact points develop full power combination randomization common job dependent chosen randomly appropriate density function 
motivated equation relates expected point job uniform distribution lp variable lp random values analyze expected value resulting schedule compare optimal lp value 
notice bound expected value proves existence vector corresponding schedule meets bound 
results compute polynomial time algorithms standard methods see propositions 
currently best known bounds achieved schedules job dependent investigate schedules single common 
hand helps better understand potential advantages schedules hand randomized algorithm relies single admits natural derandomization 
fact easily compute schedule objective function value refer schedule best schedule 
proposition show di erent schedules 
best schedule constructed time evaluating di erent schedules 
warm exercise kind analysis start proving bound expected worst case performance ratio uniformly generated schedules theorem 
result improved intricate probability distributions advantage additional insights structure lp schedule 
theorem 
random variables pairwise independently uniformly drawn 
expected value resulting schedule factor optimal lp value zd zr proof 
remember optimal lp value lp 
get claimed result prove eu lp jobs eu denotes expectation function random variable uniformly distributed 
performance follows job job bound linearity expectations 
consider arbitrary xed job analyze expected completion time rst keep xed consider conditional expectation eu 
random variables independent corollary equation yield eu obtain unconditional expectation eu integrate possible choices eu eu lp equation follows 
turn deriving improved results 
start analysis structure lp schedule 
consider job assume lp schedule preempted time processing resumes time jobs processed smaller index result jobs completely processed times lp schedule start time completion time job machine constantly busy alternating processing portions complete processing groups jobs smaller index 
conversely job preempted start time job wait job complete processing resumed 
capture structure partitioning xed job set jobs fjg subsets denote set jobs processed start completion job remaining jobs put subset notice function constant jobs simplify notation write jobs 
denote fraction job processed start job function rewrite equation idle plugging equation yields lp corollary rewritten fact equivalent expressions re ect structural insights need proving stronger bounds schedules schedules sequel 
mentioned second ingredient improvement bound sophisticated probability distribution random variables view bound cope contrary phenomena hand small values keep terms form right hand side small hand choosing larger values decreases number terms rst sum right hand side 
balancing ects contributes reducing bound expected value improved bounds schedules subsection prove theorem 
theorem 
unique solution equation ln satisfying 
de ne 
chosen density function expected value resulting random schedule bounded times optimal lp value zd zr prove theorem state properties density function crucial analysis corresponding random schedule 
lemma 
function theorem density function properties ii 
property bound delay job caused jobs corresponds rst summation right hand side 
second summation re ects delay job caused jobs bounded property ii 
proof lemma 
short computation shows ln function density function order prove property observe get property ii holds left hand side case 
completes proof lemma 
proof theorem 
lemma ii yield denotes expected value random variable distributed density theorem 
inequality lemma derive lp inequality follows de nition equality follows 
notice density function satisfying properties ii lemma value directly leads job job bound lp corresponding random schedule 
easy see unit function satis es lemma establishes variant theorem 
corollary 
random variable uniformly drawn 
expected value resulting schedule factor optimal lp value zd zr exponential density function motivated rst property lemma notice function 
satis es equality 
hand exponential function truncated order reduce term second property 
fact truncated exponential function theorem shown minimize optimal analysis 
addition exists class instances ratio expected cost schedule determined density function cost optimal lp value arbitrarily close shows preceding analysis essentially tight conjunction truncated exponential functions 
theorem implies best schedule value zr proposition shows randomized algorithm yields schedule easily derandomized sample space small 
proposition 
di erent schedules computed time 
proof 
goes schedule changes point say job reaches time job preempted 
total number changes schedule bounded total number 
preemption occur lp schedule job released total number number schedules schedules computed time result running time follows 
improved bounds schedules subsection prove theorem 
theorem 
unique solution equation ln satisfying 
de ne ln 
chosen pairwise independently probability distribution density function 
expected value resulting random schedule bounded times optimal lp value zd zr bound theorem yields bound quality lp relaxations corollary 
lp relaxations deliver log time lower bound times objective function value optimal schedule 
lines subsection state properties density function crucial analysis corresponding random schedule 
lemma 
function theorem density function properties ii denotes expected value random variable distributed notice similarity lemma lemma subsection 
properties ii bound delay job caused jobs respectively right hand side inequality 
property property ii yield 
proof lemma 
short computation shows ln follows arguments proof lemma density function property holds 
order prove property ii rst compute property ii certainly holds 
get completes proof lemma 
proof theorem 
analysis expected completion time job random schedule follows line argument developed proof theorem 
consider xed choice bound corresponding conditional expectation 
second step bound unconditional expectation integrating product interval 
xed job xed value bound lemma yield inequality follows property ii equation yields lp result follows linearity expectations 
total number possible orderings jobs 
log show lemma maximum number schedules observation 
denote number di erent pieces job lp schedule represents number times job preempted plus 

lemma 
maximum number schedules bound attained 
proof 
number schedules note job preempted lp schedule 

arithmetic geometric mean inequality furthermore bound attained achieved example instance contrast case random schedules ord randomized approximation algorithm enumerating schedules 
method conditional probabilities 
inequality obtain vector upper bound objective function value corresponding schedule ub ub rhs rhs denotes right hand side inequality 
expectations theorem shown ub zd 
job fq jq denote set intervals corresponding pieces job lp schedule 
consider jobs arbitrary order say assume step derandomized algorithm identi ed intervals ub zd conditional expectations left hand side inequality ub probf ge ub probf exists interval ub ub suces identify interval satisfying may conclude ub zd having determined way interval job note schedule 
deterministic objective function value schedule ub ub zd zd desired 
checking interval satis es inequality amounts evaluating terms may computed constant time 
observed just lemma total candidate intervals follows derandomized algorithm runs time 
proposition 
randomized approximation algorithm derandomized resulting deterministic algorithm runs time performance guarantee 
constructing provably schedules line subsection show randomized approximation results apply online setting 
di erent line paradigms studied area scheduling refer survey 
consider setting jobs continually arrive time time construct schedule time knowledge jobs arrive 
particular characteristics job processing time weight known release date 
shown section lp schedule constructed line 
unfortunately vector corresponding schedule constructed line 
learn position job sequence de ned non decreasing points time start job earlier point time line setting 
hand start time schedule earlier point 
schedule constructed line discussion reveals variant call line schedule constructed line vector process jobs early possible order points additional constraint job may start time 
see example 
note idea delaying start jobs sucient information decision available setting introduced phillips stein wein 
notice non preemptive schedule constructed conversion ful lls constraints value upper bound value line schedule 
analysis subsections relies bound corollary holds schedule constructed conversion lemma 
yields results 
theorem 
instance scheduling problem choosing constructing line schedule yields deterministic line algorithm competitive ratio running time log choosing randomly pairwise independently density function theorem constructing line schedule yields randomized line algorithm competitive ratio running time log 
competitive ratio theorem beats deterministic line lower bound unit weight problem 
problem proved lower bound randomized line algorithms 
line schedule previously considered instance points 
lp schedule shown comparison 
bad instances lp relaxations subsection describe family instances ratio optimal value problem lower bounds zr zd arbitrarily close 
instances jobs follows large job denoted job small jobs denoted 
large job processing time weight release date 
small jobs zero processing time weight release date assumed processing times non zero 
order satisfy assumption impose processing time small jobs multiply processing times release dates data integral tend nity 
simplicity just processing time small jobs 
lp solution job start time preempted small jobs mean busy times lp lp objective function value zr 
notice completion time job fact equal lp actual value preemptive schedule equal zr consider optimal non preemptive schedule bc number small jobs processed job optimal process small jobs release dates start processing job date just job optimal process remaining jobs date just job denote resulting schedule 
objective function value optimal schedule objective function value grows large lp objective function value approaches optimal non preemptive cost approaches polynomial time approximation schemes discovered problem algorithms developed variants superior practice 
experimental studies uma wein indicate lp relaxations scheduling order points powerful tools variety scheduling problems 
intriguing questions remain open 
regarding quality linear programming relaxations interesting close gap upper lower bound quality relaxations considered 
point situation strongly np hard problem similar 
shown completion time relaxation worst case factor factor optimum bound achieved scheduling preemptively lp random points 
chekuri prove optimal non preemptive value times optimal preemptive value example section shows bound tight 
dyer wolsey propose non preemptive time indexed relaxation stronger preemptive version studied 
relaxation involves variables job time representing job completed simply processed time 
relaxation strong preemptive version worst case ratio known strictly better 
randomized line algorithms gap known upper lower bound competitive ratios section 
deterministic line algorithms algorithm anderson potts optimal 
research rst author performed partly author neuve belgium supported part nsf contract ccr 
research second author supported part research nserc natural sciences research council canada uni tu rim 

universit nel support gratefully acknowledged 
research third author performed partly department mathematics technische universit berlin germany 
fourth author supported part frame tmr programme contract number erb ct staying louvain la neuve belgium academic year 
fth author supported research fellowship max planck institute computer science saarbr germany 
grateful anonymous referee comments helped improve presentation 
afrati chekuri karger khanna queyranne stein approximation schemes minimizing average weighted completion time release dates proceedings th annual ieee symposium foundations computer science new york city ny 
anderson potts line scheduling single machine minimize total weighted completion time manuscript 
balas facial structure scheduling polyhedra mathematical programming study 
posner potts scheduling release dates single machine minimize total weighted completion time discrete applied mathematics 
chakrabarti phillips schulz shmoys stein wein improved algorithms criteria meyer auf der heide monien eds automata languages programming proceedings rd icalp lecture notes computer science vol 
springer berlin 
chekuri motwani natarajan stein approximation techniques average completion time scheduling siam journal computing 
extended appeared proceedings th acm siam symposium discrete algorithms new orleans la 

chou queyranne levi asymptotic performance ratio line algorithm uniform parallel machine scheduling release dates eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
cormen leiserson rivest algorithms mit press 
dyer wolsey formulating single machine sequencing problem release dates mixed integer program discrete applied mathematics 
goemans supermodular relaxation scheduling release dates cunningham mccormick queyranne eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
goemans improved approximation algorithms scheduling release dates proceedings th acm siam symposium discrete algorithms new orleans la 
graham lawler lenstra rinnooy kan optimization approximation deterministic sequencing scheduling survey annals discrete mathematics 
hall shmoys wein scheduling minimize average completion time line line algorithms proceedings th acm siam symposium discrete algorithms atlanta ga 
hall schulz shmoys wein scheduling minimize average completion time line line approximation algorithms mathematics operations research 
optimal line algorithms single machine scheduling cunningham mccormick queyranne eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol :10.1.1.39.5261
springer berlin 
lawler lenstra rinnooy kan preemptive scheduling uniform machines subject release dates pulleyblank ed progress combinatorial optimization academic press new york 
lenstra rinnooy kan brucker complexity machine scheduling problems annals discrete mathematics 
motwani raghavan randomized algorithms cambridge university press 
queyranne schulz approximation bounds general class precedence constrained parallel machine scheduling problems bixby boyd ios eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
journal version appear siam journal computing 
nemhauser wolsey fisher analysis approximations maximizing submodular set functions mathematical programming 
phillips stein wein minimizing average completion time presence release dates mathematical programming 
extended appeared title scheduling jobs arrive time akl dehne 
sack santoro eds algorithms data structures proceedings th international wads lecture notes computer science vol 
springer berlin 
queyranne structure simple scheduling polyhedron mathematical programming 
queyranne schulz polyhedral approaches machine scheduling problems preprint department mathematics technische universit berlin germany revised 
queyranne schulz scheduling unit jobs compatible release dates parallel machines nonstationary speeds balas clausen eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
uma wein experimental study lp approximation algorithms scheduling problems proceedings th acm siam symposium discrete algorithms san francisco ca 
schulz scheduling minimize total weighted completion time performance guarantees lp heuristics lower bounds cunningham mccormick queyranne eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
schulz random scheduling new approximations lp lower bounds ed randomization approximation techniques computer science proceedings st international workshop random lecture notes computer science vol 
springer berlin 
schulz scheduling lps bear probabilities randomized approximations min sum criteria burkard woeginger eds algorithms esa lecture notes computer science vol 
springer berlin 
journal version appear title scheduling unrelated machines randomized rounding siam journal discrete mathematics 
schulz power points preemptive single machine scheduling journal scheduling appear 
sgall line scheduling survey fiat woeginger eds online algorithms state art lecture notes computer science vol 
springer berlin 
shapley cores convex games international journal game theory 
approximation randomization scheduling ph thesis technische universit berlin germany 
convex quadratic semide nite programming relaxations scheduling journal acm 
extended abstracts di erent parts appeared proceedings th annual ieee symposium foundations computer science palo alto ca ne set ril ed algorithms esa lecture notes computer science vol 
springer berlin 
woeginger ptas minimizing total weighted completion time identical parallel machines mathematics operations research 
extended appeared proceedings st annual acm symposium theory computing atlanta ga 
smith various optimizers single stage production naval research logistics quarterly 
cited personal communication :10.1.1.39.5261
randomized line scheduling low go 
manuscript 
uma wein relationship combinatorial lp approaches np hard scheduling problems bixby boyd eds integer programming combinatorial optimization proceedings th international ipco conference lecture notes computer science vol 
springer berlin 
line machine scheduling ph thesis eindhoven university technology netherlands 

