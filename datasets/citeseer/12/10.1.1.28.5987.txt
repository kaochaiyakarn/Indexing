pastry scalable distributed object location routing large scale peer peer systems antony rowstron peter druschel 
microsoft research st george house street cambridge cb nh uk 
microsoft com rice university ms main street houston tx usa 
druschel rice cs edu preliminary draft 
presents design evaluation pastry scalable distributed object location routing scheme wide area peer peer applications 
pastry performs application level routing object location potentially large overlay network nodes connected internet 
support wide range peer peer applications global data storage global data sharing naming 
insert operation pastry stores object user defined number diverse nodes pastry network 
lookup operation reliably retrieves copy requested object exists 
lookup usually routed node nearest client issuing lookup measure proximity nodes storing requested object 
pastry completely decentralized scalable self configuring automatically adapts arrival departure failure nodes 
experimental results obtained prototype implementation simulated network nodes confirm pastry scalability ability adapt node failures network locality properties 
peer peer internet applications global file sharing napster gnutella freenet gained popularity 
research projects aim constructing types peer peer applications understanding issues requirements applications systems 
peer peer systems characterized distributed systems nodes identical capabilities responsibilities communication symmetric 
key problems large scale peer peer applications provide efficient algorithms application level routing location content network 
currently peer peer application uses approach problem 
instance napster locates content centralized website gnutella relies done part visiting microsoft research cambridge uk 
broadcast locate content freenet uses randomized content routing gains scalability degree anonymity expense reliable content location 
presents pastry generic decentralized peer peer content location routing system large self configuring overlay networks nodes connected internet 
pastry completely decentralized fault resilient scalable reliably locates nearby copy requested content 
pastry building block construction variety peer peer internet applications global file sharing file storage naming systems 
insert operation pastry stores object user defined number diverse nodes pastry network 
lookup operation reliably retrieves copy requested object exists 
usually object retrieved live node nearest client issuing lookup nodes storing object 
proximity measured terms scalar application defined metric number network hops network delay 
depending application object hold content locator address associated content 
pastry completely decentralized self configuring automatically adapts arrival departure failure nodes scalable 
number nodes traversed number messages exchanged routing client request logarithmic total number nodes system 
pastry intended generic building block peer peer applications designed context past project internet peer topeer global storage utility 
past aims provide strong persistence high availability scalability content privacy anonymity clients storage providers 
focuses pastry past content location routing system 
rest organized follows 
section presents design pastry 
experimental results prototype implementation pastry section 
related discussed section section concludes 
design pastry pastry system self organizing overlay network nodes node routes client requests capable storing application specific objects 
computer connected internet runs pastry node software act pastry node subject application specific security policies 
inserted objects replicated multiple nodes 
system ensures high probability set nodes object replicated diverse terms geographic location ownership administrative entity network connectivity rule law forth 
node pastry peer peer overlay network assigned bit node identifier nodeid 
nodeid indicate node position circular namespace ranges 
nodeid drawn randomly node joins system 
assumed nodeid generated high quality uniform random number generator secure hash function set existing node identifier uniformly distributed bit namespace 
fundamental capability pastry provides efficiently route messages nodes system 
specifically destination id destid bits pastry routes associated message node nodeid numerically closest significant bits destid associated message live nodes 
furthermore assumed object assigned object id objid bits long 
set existing assumed uniformly distributed 
insert object client asks pastry route message node nodeid numerically closest significant bits objid node stores object 
look object client similarly sends message objid destid receiving node responds requested object 
achieve high availability load balancing object stored nodes nodeids numerically closest objid 
object available long nodes live reachable internet client 
furthermore pastry ensures high probability lookup message routed nodes near client 
provides load balancing reduced network load low client response time 
context past global storage utility instance formed secure hash sha object name content object owner identifier 
object stored nodes nodeids closest objid 
long copies alive pastry guarantees lookup message routed node 
lookup message pastry usually reaches node nearest client live subset nodes 
pastry nodeids nodeid sub divided sequence levels level specifies domain represented contiguous bits nodeid bits positions specify domain level significant bits nodeid indicate node domain level 
domains level numbered 
pastry routes messages node nodeid numerically closest destid 
accomplished follows 
routing step message destid matches local node nodeid level forwarded node nodeid matches destid 
purpose node maintains routing state describe 
pastry node state pastry node maintains routing table neighborhood set namespace set 
description routing table 
level routing table contains ip addresses nodes nodeid prefix local node level differ level nodes representative different domain level typically value principle node nodeid matches local node nodeid level domain level equals serve representative domain practice nodes correct nodeid prefix node closest node network chosen representative 
shown section ensures message routing pastry exhibits network locality 
choice involves tradeoff size populated portion routing table approximately dlog ne total number existing pastry nodes maximum number hops required route pair nodes dlog bne value nodes routing table contains approximately entries worst case message routed nodes 
neighborhood set contains nodeids ip addresses jm nodes closest proximity metric local node 
neighborhood set normally routing messages purpose clear section 
namespace set contains nodeids ip addresses jlj existing nodes nodeids numerically closest centered local node nodeid 
namespace set message routing described 
set object insertion replicas inserted object stored subset namespace set 
typical values jlj jm respectively 
various tables pastry node initialized maintained subject section 
depicts state hypothetical pastry node nodeid base system uses bit nodeids value 
routing routing procedure shown pseudocode form 
executed message destid arrives node nodeid defining notation 
entry routing table domain level bc 
entry neighborhood table representing th closest node jm th closest nodeid namespace table negative positive indices indicate nodeids smaller larger nodeid respectively 
domain destid level shl length prefix shared levels 
range namespace set forward th 
jd minimal routing table shl assume nodeids uniformly distributed 
fig 

state hypothetical pastry node nodeid 
numbers base 
top row routing table represents level zero 
null forward rare case forward th 
shl jt dj ja dj message node checks see destid falls range nodeids covered namespace set line 
message forwarded directly destination node node namespace set nodeid closest destid possibly node line 
destid covered namespace set routing table message forwarded node shares common prefix destid level lines 
certain cases possible appropriate entry routing table empty associated node reachable line case message forwarded node shares prefix destid long local node numerically closer destid current nodeid 
follows properties routing table namespace set node exist nodes adjacent nodeids failed simultaneously 
simple routing procedure converges step takes messages node shares longer prefix destid local node shares long prefix numerically closer destid local node 
routing performance shown message reaches destination dlog ne steps common case total number existing pastry nodes 
briefly consider cases routing procedure 
message forwarded routing table lines set nodes containing destination node reduced factor step means destination reached dlog ne steps 
destid range namespace set lines destination node hop away 
third case arises destid covered namespace set hop away destination routing table entry 
absence node failures means node corresponding domain exist lines 
due uniform distribution nodeids case provided jlj sufficiently large 
instance jlj jlj occurs cases respectively 
happens additional routing step results virtually cases 
event simultaneous node failures number routing steps required may worst linear nodes updating state 
practice routing performance degrades gracefully show experimentally section 
ultimately node may unreachable nodes consecutive nodeids fail simultaneously 
due expected diversity nodes adjacent nodeids reasonable choice jlj probability event low 
network locality previous section discussed pastry convergence expected number routing hops 
section focuses aspect pastry routing performance properties respect network locality 
show route chosen message terms network proximity object stored consecutive nodes query message object reach node near client nodes 
pastry notion network proximity scalar proximity metric number ip routing hops network delay combination factors 
pastry assumes application provides function allows pastry node determine distance node ip address 
node lower distance value assumed desirable 
application implements function depending choice proximity metric network services traceroute ping internet subnet maps appropriate caching approximation techniques minimize overhead 
route locality recall representative domain level routing table chosen node closest network node nodes nodeid prefix 
result routing step message forwarded closest node nodeid shares longer common prefix numerically closer destid local node 
step moves message closer destination namespace travelling possible distance network 
local information pastry minimizes distance routing step sense direction 
procedure clearly guarantee shortest path source destination chosen give rise reasonably routes 
facts relevant statement 
message routed node node distance message subsequently routed node distance follows directly routing procedure assuming accurate routing tables 
second expected distance traveled messages successive routing step exponentially increasing 
see observe representative routing table level chosen set nodes size bl representatives successive levels chosen exponentially decreasing number nodes 
random uniform distribution nodeids network means expected distance closest representative successive level exponentially increasing 
jointly facts imply guaranteed distance message source increases monotonically step message tends larger larger strides possibility returning node node encountered route distance routing step taken away node message go destination 
illustrates effect 
locating nearest replica turn second claim nodes adjacent nodeids store object client query routed node near client 
observe due random assignment nodeids nodes adjacent nodeids widely dispersed network 
important direct lookup query replica located relatively near client 
recall pastry routes messages node nodeid closest destid attempting travel smallest possible distance step 
nodes storing object query message tends reach node near client 
course process approximates routing nearest replica 
firstly discussed pastry local routing decisions minimizing distance traveled step notion direction 
secondly pastry routes primarily nodeid prefixes misses nearby replicas stored nodes different prefix object 
worst case replicas stored nodes nodeids differ fig 

trajectory typical message pastry network experimental data 
message re enter circles representing distance routing steps away intermediate nodes 
message may partly turn back initial steps exponentially increasing distances traveled step cause move destination quickly 
objid domain level zero 
result pastry route nearest remaining replicas 
despite anomaly results section show similar cases occur infrequently pastry able locate nearest replica approximately nearest replicas approximately queries 
exploring heuristics overcome prefix mismatch issue described 
simple heuristic studied estimating density nodeids namespace local information 
estimation heuristic detects message approaches replica set object switches numerically nearest address routing located nearest replica 
results show heuristic allows pastry locate nearest object nearest replicas queries expense slight increase average number hops taken 
self configuration adaptation section discuss pastry deals changes node membership 
particular describe protocols handling arrival departure nodes pastry network 
discussion assume proximity space defined chosen proximity metric euclidian triangulation inequality holds distances pastry nodes 
assumption hold routing correctness unaffected locality properties pastry routes may suffer 
node arrival new node arrives needs initialize tables inform nodes presence 
assume new node knows initially nearby network pastry node part system 
node detected automatically instance expanding ring ip multicast obtained system administrator outside channels 
new node draws random nodeid asks route special join message destination id equal message join routed existing node id numerically closest response receiving join request nodes nodes encountered path send state new node inspects information requests state additional nodes initializes state procedure describe 
informs nodes need aware arrival 
show procedure ensures initializes state appropriate values state interested nodes modified appropriately 
consider neighborhood set 
node assumed close new node neighborhood set close approximation neighborhood set initialize 
second closest existing nodeid namespace set basis namespace set 
furthermore provides information object replicas stored namespace set allowing properly forward lookup messages range namespace set 
consider routing table starting level zero 
consider general case nodeids share common prefix 
nodes share level zero domains representatives level depend node location 
denote node row routing table level assumed close closely approximates optimal values levels routing table ids share common prefix 
appropriate values taken node encountered route see observe mentions domains share prefix level 
intuitively appear choice representatives appropriate nodes close necessarily see recall representatives successive level chosen exponentially decreasing set size 
expected distance representatives larger expected distance traveled node result approximation argument applies successive level routing step depicted 
initialized routing table fashion information participate pastry network 
point routing table neighborhood set approximate closest nodes domain 
quality data improved avoid cascading errors eventually lead poor route locality 
purpose second stage requests state nodes routing table neighborhood set 
compares distance corresponding representatives nodes routine tables neighborhood sets respectively updates state closer nodes finds 
intuitively look illuminates incorporating state nodes mentioned routing neighborhood tables stage provides representa fig 

routing step distance versus distance representatives level experimental data 
circles th node route indicate average distance node representatives level note lies circle 
tives circles show average distance representative node route corresponding levels routing table 
observe lies circle albeit center 
second stage obtains state representatives discovered stage located average distance equal perimeter respective circle 
states include representatives appropriate discovered stage due center location 
transmits copy resulting state nodes neighborhood set namespace set routing table 
nodes turn update state information received 
experimental results section show procedure initializes node state correctly updates state relevant nodes appropriately 
total cost joining node number rpcs exchanged log 
constant omitting second stage reduces constant 
nodes largest message size approximately kbyte 
pastry uses optimistic approach controlling concurrent node arrivals departures 
arrival departure node affects small number existing nodes system contention rare optimistic approach appropriate 
briefly node provides state information node attaches timestamp message 
adjusts state information eventually sends update message notifying arrival 
attaches original timestamp allows check state changed 
event state changed responds updated state restarts operation 
node departure nodes pastry network may fail depart warning 
section discuss pastry network handles node departures 
node failures detected node attempts contact node routing table namespace set response 
explained section event normally delay routing message message forwarded node 
replacement preserve integrity routing table namespace set 
replace failed node namespace set node contacts live node largest index side failed node asks node namespace table 
instance failed requests namespace table received namespace set set partly overlaps node namespace set contains nodes nearby ids presently new nodes appropriate chosen insert verifying node alive contacting 
procedure guarantees node lazily repairs namespace set nodes adjacent nodeids fail 
due diversity nodes adjacent nodeids failure modest values jlj 
repair failed representative node contacts representative level asks value event representatives level pointer live representative domain node contacts representative casting wider net include representatives away network 
procedure eventually finds representative exists 
neighborhood set normally routing messages important keep current set needed joining node requests 
purpose node attempts contact member neighborhood set periodically hour see alive member responding node asks members neighborhood tables checks distance newly discovered nodes updates neighborhood set accordingly 
experimental results section demonstrate pastry effectiveness repairing node state node failures quantify cost repair terms number messages exchanged 
experimental results section experimental results obtained prototype implementation pastry 
pastry node software implemented java 
able perform experiments large networks pastry nodes implemented network simulation environment pastry nodes run simulated network 
experiments performed quad processor compaq alphaserver es mhz alpha cpus gbytes main memory running true unix version 
pastry node software implemented java executed compaq java sdk version compaq version 
pastry nodes normally java remote object invocation rmi communicate 
experiments reported pastry nodes configured run single java vm 
largely transparent pastry implementation java runtime system automatically reduces communication pastry nodes local object invocations 
simulated network environment maintains distance information pastry nodes 
pastry node assigned location plane coordinates inactive node namespace set routing table 
plane randomly assigned range 
pastry overlay network assume underlying networking infrastructure pastry provides total connectivity nodes 
drive pastry system fictitious objects inserted retrieved 
generated computing sha secure urls collected web crawler major university web sites 
experiments replicas stored inserted object 
routing performance experiment shows number routing hops function size pastry network 
vary number pastry nodes network jlj jm 
objects inserted object retrieved different randomly chosen starting node 
show results 
standard normal pastry routing procedure estimation routing procedure augmented heuristic mentioned section 
log shows value log included comparison 
dlog ne expected maximum number hops required route network containing nodes 
results show number route hops scale size network expected 
cost routing heuristic improve location nearby replicas terms average number route hops insignificant 
standard estimation require log hops due namespace set 
occasionally hop saved destination node lies namespace set routed directly requiring extra hop 
number nodes log standard estimation fig 

number routing hops versus number pastry nodes jlj jm objects 
second experiment compares distance message travels pastry fictitious routing scheme maintains complete routing tables 
distance traveled sum distances consecutive nodes encountered route simulated network 
routing scheme distance traveled simply distance source destination node 
goal experiment quantify cost terms distance traveled maintaining small routing tables pastry 
number nodes varies jlj jm objects inserted retrieved 
shows total cumulative distance traveled pastry retrieval operations labeled pastry compared distance traveled node complete routing table labeled complete routing tables 
complete routing table assumed node entry node system 
distance complete routing table distance source node node storing replica reached pastry necessarily closest replica 
results show pastry routes approximately longer achieved complete routing tables 
considering routing tables pastry contain approximately dlog bne entries result quite 
nodes pastry routing tables contain approximately entries compared case complete routing tables 
number nodes distance pastry complete routing table fig 

route distance versus number pastry nodes jlj jm objects 
determined routing throughput messages second pastry node 
unoptimized java implementation handled messages second 
confirms routing procedure lightweight 
maintaining network shows quality routing tables extent information exchange node join operation affects quality resulting routing tables 
experiment nodes join pastry network 
nodes joined routing tables examined 
parameters jlj jm 
options gather information node joins 
sl hypothetical method joining node considers appropriate row node route node closest existing nodeid see section 
wt joining node fetches entire state node path fetch state resulting representatives 
equivalent omitting second stage 
actual method pastry state fetched node appears tables stage 
fig 

quality routing tables jlj jm nodes 
results shown 
levels show quality routing table entries method 
nodes levels fully populated explains missing entries shown 
optimal means best closest network representative appeared routing table sub optimal means representative closest missing 
results show pastry method node integration highly effective initializing routing tables 
average entry level routing able best choice 
comparison sl wt shows information exchange node join operation comes dramatic cost routing table quality 
node failures experiment explores pastry behaviour presence node failures 
experiment objects inserted node pastry network jlj jm 
randomly selected nodes failed silently 
failure lookups performed objects lookups total randomly selected nodes node state repair facilities pastry disabled 
allows measure full impact failures pastry routing performance 
node state repair facilities enabled lookups performed locations 
shows average routing table quality nodes levels measured failures failures repair 
note missing entries shown separately sub optimal entries 
recall pastry lazily repairs namespace set routing tables entries 
routing table entries lookups discovered repaired 
isolate effectiveness pastry repair procedure excluded table entries 
fig 

quality routing tables node failures jlj jm starting nodes 
results show pastry recovers missing table entries quality entries fraction optimal entries approaches failures 
level zero average number best entries repair approximately prior failure 
seen results show actual distance suboptimal optimal representatives small 
intuitive average distance level zero representatives small 
currently investigating slight improvement repair procedure expect improve result 
note increase empty entries levels failures due reduction total number pastry nodes increases sparseness tables higher levels 
increase constitute reduction quality tables 
shows impact failures repairs route quality 
left bar shows average number hops failures middle bar shows average number hops failures tables repaired 
right bar shows average number hops repair 
data shows repairs stale routing table state causes significant deterioration route quality 
repair average number hops slightly higher failures 
fig 

number routing hops versus node failures jlj jm objects nodes failing 
measured average cost messages repairing tables node failure 
experiments total rpcs needed average failed node repair relevant table entries 
replica routing experiment explores pastry ability locate replicas near client 
pastry network nodes jlj object inserted replicas looked randomly chosen nodes 
shows percentage lookups reached closest replica better replicas second closest replica better replica 
results shown different protocols initializing new node state normal routing protocol heuristic mentioned section optimal version heuristic perfect estimation 
heuristic approach estimates namespace coverage nodes namespace sets estimate namespace sets coverage 
perfect estimation ensures estimate nodes namespace set coverage correct node 
standard routing procedure normal node joining protocol pastry able locate closest replica time top replicas time 
heuristic routing option increases respectively 
lesser routing table quality resulting sl wt methods node joining strong negative effect pastry ability locate nearby replicas expect 
results show heuristic approach approximately worse best possible results perfect estimation 
results show pastry effective locating replica near client vast majority cases heuristic improves performance pastry 
furthermore heuristic performance comparable perfect estimation 
fig 

number closer replicas client replica discovered 
jlj jm nodes objects 
related currently peer peer systems development require highly scalable content location request routing 
systems intended file sharing facilities gnutella freenet napster 
whilst systems proved popular location routing algorithms suffer limitations 
napster uses centralized document location discovery service limits scalability 
gnutella broadcast protocol limits system scalability incurs high bandwidth requirement 
furthermore routing algorithm guarantee find existing object 
true freenet 
systems designed large scale sharing mp files assumption replicas popular song probability finding high 
approach suitable general peer peer systems 
pastry routing scheme bears similarity plaxton 
general approach routing prefix matching objid systems seen generalization hypercube routing 
important differences 
plaxton approach single node holds information particular object system susceptible failure 
pastry hand replication fault tolerance 
plaxton assume static configuration pastry assumes dynamic system nodes free join leave time 
furthermore order achieve locality plaxton assume knowledge location nodes system pastry merely assumes node measure distance node 
number research projects focusing peer peer storage utilities farsite oceanstore 
farsite uses distributed directory service locate content 
pastry location function integrated routing infrastructure 
oceanstore uses phase approach content location routing 
stage probabilistic generalization bloom filters 
stage fails find object location routing scheme called tapestry 
tapestry plaxton extends earlier dimensions 
pastry tapestry replicates objects fault resilience availability supports dynamic node addition recovery node failures 
pastry tapestry differ approach take replicating files way achieve locality 
significant prior overlay networks 
overlay network consists collection nodes placed strategically existing network infrastructure nodes provide network abstraction 
pastry seen overlay network provides object discovery service 
example overlay network overcast system overlay networks aimed providing reliable multicasting content distribution 
overcast provides single source multicast stream distribution service 
considerable routing general particular interest hypercube mesh routing parallel computers 
routing ad hoc networks example grid routing algorithms pen 
challenges developing routing algorithms ad hoc networks differ main problem device mobility 
pastry assume network infrastructure capable routing messages nodes pastry network emphasis self configuration integration content location routing 
interest scalability pastry nodes local information traditional routing algorithms link state distance vector methods globally propagate information routes destination 
global information exchange limits scalability routing algorithms necessitating hierarchical routing architecture internet 
prior works consider issues replicating web content internet selecting nearest replica relative client query 
pastry provides general infrastructure aimed variety peer peer applications 
related area naming services largely orthogonal pastry content location routing 
lampson global naming system gns example scalable naming system relies hierarchy name servers directly corresponds structure name space 
cheriton mann describe scalable naming service 
gns service pure naming service relies hierarchy name resolvers reflects structure name space 
attribute intentional naming systems directory services resolve set attributes describe properties object address object instance satisfies properties 
systems support far powerful queries pastry 
power comes expense scalability performance administrative overhead 
pastry supports routing particular object identifier properties object 
systems potentially built pastry 
evaluated pastry generic decentralized peer peer content location routing system large self configuring overlay networks nodes connected internet 
pastry completely decentralized fault resilient scalable reliably locates copy requested content exists 
pastry usually locates copy requested content near client 
pastry building block construction variety peer peer internet applications global file sharing file storage naming systems 
pastry takes account network locality routing messages 
routing step pastry chooses nearest node closer namespace destination 
experimental results show pastry exhibits network locality pastry usually able locate nearest copy replicated object 
additional experimental results nodes show pastry scales fully gracefully adapt node failures 

napster 
www napster com 

ian clarke oskar sandberg brandon wiley theodore hong 
freenet distributed anonymous information storage retrieval system 
workshop design issues anonymity unobservability pages july 
icsi berkeley ca usa 

gnutella protocol specification 
dss clip com pdf 

bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proc 
sigmetrics pages 

john kubiatowicz oceanstore architecture global scale persistent store 
proc 
asplos november 

plaxton rajaraman richa 
accessing nearby copies replicated objects distributed environment 
proc 
th acm symp 
parallel algorithms architectures pages june 
newport rhode island usa 

plaxton rajaraman richa 
accessing nearby copies replicated objects distributed environment 
theory computing systems 

ben zhao john kubiatowicz anthony joseph 
tapestry infrastructure fault resilient wide area location routing 
submitted publication 

john jannotti david gifford kirk johnson frans kaashoek james toole 
overcast reliable multicasting overlay network 
proc 
osdi october 

li john jannotti douglas de couto david karger robert morris 
scalable location service geographical ad hoc routing 
proc 
august 

bennett david clarke joseph evans andy hopper alan jones david 
piconet embedded mobile networking 
ieee personal communications october 

yair amir alec peterson david shaw 
seamlessly selecting best copy replicated web servers 
proceedings th international symposium distributed computing greece september 

jussi james roberts keith ross 
performance evaluation redirection schemes content distribution networks 
proceedings th web caching workshop san diego ca march 

jussi keith ross 
replicated architecture domain name system 
proceedings ieee infocom tel aviv israel march 

butler lampson 
designing global name service 
proceedings fifth symposium principles distributed computing pages august 

david cheriton timothy mann 
decentralizing global naming service improved performance fault tolerance 
acm transactions computer systems may 

mic bowman larry peterson 
univers attribute name server 
software practice experience april 

william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
proceedings seventeenth acm symposium operating system principles kiawah island sc december 

reynolds 
rfc technical overview directory services protocol march 

mark sheldon andrzej duda ron weiss david gifford 
discover resource discovery system content routing 
proceedings rd international world wide web conference 
