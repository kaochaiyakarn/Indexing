bengal database replication system reiher popek mobile computers suffer limited connectivity complete lack network access 
wireless networks machines accessible mobile computers 
ideally nomadic users want quality speed database access connected network 
replicated databases meet need allowing mobile machine carry copy key data 
existing replicated systems suited nomadic scenarios 
certain important mobile computing situations require optimistic peer oriented database replication 
bengal database replication system characteristics designed operate difficult nomadic conditions 
presents design assumptions system describes architecture presents performance data operation discusses enhancements system 
contrasts system replicated databases concentrating suitability nomadic computing 
bengal technology play important role development highly scalable highly available fault tolerant database systems 
keywords distributed optimistic database replication peer peer 
central function distributed database system provide access data maintaining integrity consistency data 
system ability support large numbers users sacrificing performance 
higher reliability availability presence equipment network failures requirements mission critical enterprise data systems 
requirements odds leading solutions compromise availability consistency scalability performance 
nomadic computing exacerbates problems 
nomadic scenario users database travel place place experiencing varying connectivity participants 
cases completely disconnected users 
cases cliques nomadic users connectivity connectivity machine 
bandwidth connected machines cheap plentiful expensive scarce 
nomadic user ideally experience high quality database access regardless goes network connectivity available 
central problem supporting shared database access multiple nomadic users poorly connected disconnected 
situation requiring users connect single central server meet requirements 
system allow nomadic users access parts database locally 
solutions exist providing access 
solution uses client server architecture central server coordinates data updates initiated clients 
server machine typically large connected non nomadic machine clients connected nomadic machines 
clients store data locally cache data currently manipulated 
client access data connect server submit request 
single server handle finite number clients performance adversely affected 
server connectivity client server lost client perform operations database 
solution clearly poses problems nomadic users 
scalability availability performance improved replicating database multiple physical servers cooperatively provide access logical database 
traditional database replication techniques rely constant network connection servers coordinate access data replicas enforce consistency 
approach termed update propagation conservative replication 
methods involve locking subset data giving write ownership particular server cases client 
client wishes update subset funnel request site currently responsible data 
replication improves availability data 
replica server unavailable clients normally access server rerouted server available 
techniques implement replication reduce availability data particularly writes 
client replicates data locking server clients write access data 
lock recovery types systems problematic 
traditional database replication techniques suited challenges nomadic environment 
rely constant network connection function mobile computing environment wireless connectivity may intermittent degraded due environmental interference 
hostile military environment intentional jamming may inhibit communications 
commercial setting high cost wireless remote network access may constant mobile connection prohibitively expensive maintain 
case current wireless technology offer amount bandwidth wired networks 
database techniques assume wide bandwidth wired network environment constrained bandwidth wireless environment 
common requirement driven issues ability mobile computers access update database replicas disconnected replicas 
addition client server replication match communication patterns really needed mobile users 
mobile user making updates shared data needs share updates mobile users 
client server replication requires updates sent back server second mobile user download 
double communication may problem typical office environment connectivity fast cheap hopefully constant 
big problem mobile clients desert server los angeles 
mobile machines merely inches apart requiring send data thousands miles difficult connections unreasonable 
nomadic users able form ad hoc workgroups arbitrary mobile users disconnected central computing resources 
peer peer relationship supported current replication techniques 
bengal technology uses approach avoids limitations replication purely update propagation client server architecture 
bengal uses peer peer reconciliation optimistic database replication system allows transparent disconnected operation mobile peers distributed database 
updates reconciled replicas connectivity available mechanism detect resolve update conflicts 
developed prototype implementation technology called bengal database replication system provides replication services heterogeneous mix commercial database engines 
describes approach replication mobile computing environment 
section describes optimistic replication central mechanism bengal 
section presents architecture implementation bengal 
section presents performance data bengal 
section discusses enhancements bengal 
section briefly contrasts bengal related systems 
section offers lessons learned 

optimistic replication fundamental problem replicated data systems maintaining consistency 
problem addressed conservatively optimistically 
conservative replication called update propagation replication requires consistency maintained data records updated 
copies database remain consistent database replica servers coordinate reads writes 
coordination achieved locking restricting access records updates applied database replicas reliably 
various methods achieve effect including primary copies voting weighted voting tokens :10.1.1.12.6256
conservative approach preserves data consistency relies constant connectivity database replica servers 
replicas partitioned access data severely limited available 
nomadic environment disconnected replicas update important cause consistency problems 
alternately mobile computer hold writeable copy cost making data 
optimistic replication allows replica servers access update data records independent delaying consistency checks 
preventing inconsistency occurring mechanisms detecting resolving inconsistency 
periodically replicas exchange updates process called reconciliation 
reconciliation process replicas exchange updates occurred reconciliation 
optimistic replication systems detect inconsistencies reconciliation address process called conflict resolution 
replicas need connected times allowing disconnected operation requirement distributed database applications mobile computing 
form optimistic replication allows updates disconnected replicas consistency problems exist designated server accepts updates 
update conflicts previously accepted update update generated disconnected client simply discarded 
simplified approach conflict resolution allows form disconnected operation obvious problem potential loss data 
real world situations capable mechanism conflict detection resolution needed 
optimistic replication client server model peer model 
client server model replica data designated special server replica 
updates created replicas registered server propagated 
client server model tremendously simplifies design replicated system cost limiting flexibility 
updates go server server acts physical synchronization point 
conflicts occur detected server server needs handle 
single server machine fails unavailable updates propagated replicas 
individual machines accept local updates learn updates applied machines 
mobile environment connectivity limited changing server may difficult impossible contact client replicas simple cheap contact 
servers replicated replicated servers typically close communications time 
mobile computer reach servers easily definition reach 
peer model optimistic replication better conditions 
peer model replica communicate updates directly replica 
system may preferred topology updates propagated preferred topology include central site receives updates directly peer model allows opportunistic replicas happen available particular moment 
simulation studies file system arena demonstrated peer model increases speed update propagation set replicas decreasing frequency outdated version data 
concrete example consider case users set replicated database records traveling client remote site country 
update replicated records 
obviously re working share updates 
client server system user propagate updates receive replicas updates contacting server machine side country requiring long distance telephone calls mobile computers server 
machines need share data inches convenient moment requiring long distance indirect update propagation path inefficient 
telephone lines network connections available client server paradigm transfer updates collocated portable computers impossible transfer data machines 
peer system collocated peers simply trade updates directly local network 
major cost peer replication implementation complexity 
client server model necessary record keeping determines version data stored replica simplified clients apply new updates directly server 
server knows authoritative version data peer model new versions data gossiped replicas arbitrary paths 
determining version data stored replica versions supersede conflict versions requires complex data structures algorithms 
fortunately previous research peer file system replication defined precisely required data structures algorithms :10.1.1.35.6686
bengal able adapt data structures algorithms file systems databases relatively little difficulty 
main activities optimistic replication systems 
identifying updates 
propagating updates replicas 
detecting resolving data inconsistency updates data structure called version vector central optimistic replication implementation bengal 
primary function version vectors determine pedigree record order detect collisions updates partitioned systems 
version vectors distributed systems defined literature 

bengal architecture bengal database replication system allows nomadic computer users replicate multiple copies database 
bengal allows replica stored different machine 
machines portable computers 
bengal replica important replica system point view 
replicas full capabilities perform database operation 
bengal designed operate add service existing database system 
bengal added popular commercial databases including sybase sql tm oracle microsoft sql server tm 
design bengal require alterations source code systems 
bengal runs separate process augmented extensibility mechanisms popular commercial databases 
bengal replicates record level 
record regarded separate entity purposes determining updates 
bengal maintain information enforce inter record consistency 
example bengal aware transactions 
normal operation bengal methods update propagation produce results enforce transactional semantics unusual circumstances involving normal updates occurring concurrently reconciliation non transactional results occur 
undesirable effects easily avoided halting forms database update reconciliation 
shows bengal enhances existing single site databases provide peer replication 
bengal uses existing database management system event triggers help bengal engine trap updates keep necessary records 
bengal user interface allows users control bengal reconciles updates various configuration issues 
actual data stored database management system information bengal requires maintain database consistency 
insert section discusses bengal identifies records updated 
section discusses mechanisms bengal uses propagate updates replicas 
section discusses bengal detects handles concurrent updates 
identifying updates optimistic replication requires reliable mechanism detecting updates replicated objects ensure updates eventually propagated replicas 
mechanically updates identified ensure version vectors updated properly 
version vectors compare local remote versions data decide versions newer 
updates typically identified replicated systems ways update trapping passive scanning 
update trapping uses system hooks capture updates occur 
system hooks take variety guises defined loosely code inserted execution stream detects updates occur takes action necessary support replication 
example ficus uses file system extensions trap operations performed replicated file system allowing update log generated 
trapping updates allows updated records identified certainty avoids need examine unchanged records 
trapping code executed user processing care taken avoid adversely affecting normal system performance 
passive scanning identifies updated objects comparison current state replicated data known earlier state 
example rumor uses scanning identifying updates comparing update timestamps replicated files 
files newer timestamp examined version vector incremented 
approach advantage little reduction user performance processing postponed just reconciliation periods inactivity 
approach generally requires replicated objects examined determine changed 
large number replicated objects examination objects requires significant processing replication process slow 
depending system time reliable timestamp problematic 
bengal traps updates occur reasons 
passive scanning required artificial changes database accommodate strategy 
replicated table need timestamp field record timestamp need examined identify changed records 
second modern databases provide triggers offer easy efficient mechanism execute code performing update 
creating insert update delete triggers replicated table changed records easily detected update log entries created 
systems approach implement distributed replicated databases 
care required ensure code executed trigger fires relatively efficient 
approach deduce updates examination database transaction log 
method require intimate knowledge format transaction log vary significantly database vendor 
approach ruled initial design bengal reasons heterogeneity speed development 
additional obstacle structure transaction logs commercial databases considered proprietary confidential 
information available bengal modular design allow transaction log examination mechanism implemented place existing trigger mechanism 
update causes trigger fire bengal take actions 
version vector record incremented reflect new version 
second updated records placed sequence version vectors 
sequence identifies records modified reconciliation various replicas reconciliation time identify updated records interest remote replica 
having trigger perform functions entry single update log 
update log contains list records updated indication update type insert update delete 
update log periodically flushed bengal engine runs separate process database engine database application 
update log minimizes performance impact trigger 
bengal engine flushes update log update log entry read version vector record updated placed sequence 
operations successfully complete update log entry removed 
processing update log entry interrupted reason completes entry processed incrementing version vector needed 
double incrementation version vector harmless having impact correctness 
distributing updates bengal distributes updates purely reconciliation 
reconciliation way process single pair replicas 
replica requests relevant updates replica 
bengal supports multiple reconciliation threads allowing simultaneous reconciliation directions 
reconciliation initiated replication engine replica receiving request retrieves stored version vector sequence pointer corresponding remote replica 
stored sequence pointer including version vectors records generated 
record version vector sequence version vector id record sent remote replica 
version vector sent record locked entries update log record flushed 
locking flushing insures version vector sent accurately reflects data stored current version record 
particular record processed externally modified 
modification permitted process race conditions lead failure propagate updates failure notice concurrent updates 
receiving replica compares version vector remote replica local version vector determine remote version contains new updates conflict exists remote version local version 
version vector contains update count node 
new updates indicated update count version vector greater corresponding update count version vector 
version vector dominates second version vector update counts version vector greater equal corresponding update counts second version vector 
conflict exists version vectors indicate new updates dominant 
see section complete discussion conflicts 
record processed contains new updates request record data sent back 
sending replica transmits record data receiving replica installs new version record comparison version vector indicated conflict stores separately version signals conflict 
database record unlocked 
process continues entries version vector sequence processed 
sending version vector actual record data necessary conserves network traffic low bandwidth link 
sending version vector data steps inefficient high bandwidth high latency links 
situations bengal includes slight variant reconcile protocol sends version vector record data transmission 
receiving replica ignore record data needed 
high latency addressed batching version vectors data 
user choose protocol reconciliation time type link 
increased network utilization bengal packs records possible single network packet 
eventually updates propagated replicas 
requirement imply replicas directly reconcile shown 
gossiping allows replica send changes replica sends changes replica replica communicate directly replica receives updates applied version data replica insert insert insert data replicated sites users define reconciliation topology describes replicas normally reconcile 
topology form connected graph 
graph connected sets replicas isolated see data diverge data sets 
replica connected rest graph directions updates flow replicas updates flow 
typical replication topologies star replicas trade updates designated replica ring replicas propagate data circular topology tree bi directional links 
topologies possible including meshes completely connected 
insert insert insert factors drive design reconciliation topology 
replica links replica may heavily overloaded participate 
replicas critical progress update propagation failure unavailability may significantly degrade speed update propagation 
shortest path replicas contains links updates take relatively long time propagate replicas gossiped intermediate nodes 
topology adaptive 
node preferred reconciliation partner fails topology automatically suggest partner 
example ring topology replica ring unavailable node wants reconcile replica comes unavailable replica ring 
simulation results optimistic file replication topologies suggest star topologies low scale poorly high scale 
ring topologies acceptable low scale delay spread updates high scale 
fairly spread load reconciliation 
tree topologies compromise replicas involved 
note system mobile computers reconciliation topology may represent ideal exists 
moment links topology unusable nodes connect absent 
bengal users design reconciliation topologies effect mind 
topologies rely heavily ubiquitously links provide service topologies rely heavily links frequently unavailable 
reconciliation topology constrain replicas reconcile 
time replica trade updates replica 
performing suggested topology merely guarantees updates reach replicas 
performing topology suggests speeds process quiescence allows system opportunistic unanticipated reconciliation possibilities 
conflict detection resolution conflicts occur update stale record updated replica record contain data 
conflicts involve single pair replicas 
multiple updates multiple replicas record lead conflicts involving different versions data 
conflicting versions may contain important data system arbitrarily choose version preference 
multiple replica systems gossiping propagate updates conflict may detected nodes initiate conflicting updates 
bengal detects conflicts examining version vectors 
version vector compact encoding update history replica data 
replicas record completely identical version vectors replica seen updates replica seen 
updates need propagated 
replica version vector contains elements larger matching elements replica replica larger version vector elements seen updates data propagated replica 
version vector element larger matching element version vector replica seen update unknown replica 
case divergent versions data exist conflict resolved 
shows examples matching dominating conflicting version vectors 
insert insert insert bengal detects conflict local replica version record record data version vector conflicting version stored version separate table 
differing versions kept conflict resolved 
conflict resolved merging data conflicting versions single new version selecting versions dominate 
choice result new version incorporates updates seen conflicting versions 
record version vector set dominate local version vector version vector stored versions table 
entry conflict versions table removed 
conflict resolution postponed 
versions table replicated conflicts resolved nodes originally detected conflict 
normally conflicts resolved soon possible reduce inconsistency avoid divergent data versions 
comparison version vectors indicates conflict bengal calls series configured conflict resolvers attempt automatic conflict resolution 
conflict resolver software component contains application specific rules determining conflicting versions accepted new version merges created 
bengal maintains set configurable rules determine available conflict resolvers called handle particular conflict 
record matches rule specified resolver called 
matching resolver successfully resolve conflict bengal examines remaining rules find resolvers better 
cascading conflict resolver called turn conflict resolved configured resolvers called 
conflict resolvers run conflict resolver launcher program allows user examine conflicts known replica apply installed resolver 
manually initiated conflict resolvers accept user input assist resolution process 
manual conflict resolver included bengal allows user examine record data conflicting versions select version accept 
users expand bengal conflict resolver suite 
users understand semantics records replicated databases better equipped resolve conflicts properly system designers ignorant semantics data stored 
furthermore experience resolving conflicts file system environment shown hard predict kinds conflicts occur resolvable 
users configure bengal conflict interface match new resolvers conflicts particular tables data records 
bengal operation previous sections describe various components bengal 
section describes components fit data control communications paths components 
illustrates relationships various components bengal replica 
insert circles represent active components system 
cylinders represent data structures 
hashed box represents arbitrary data transport mechanism simply method moving data replica 
box diagram part single bengal replica 
dotted circles box corresponding components bengal replica 
solid lines show flows data dotted lines indicate control flow 
center diagram commercial dbms engine stores application data 
update performed record data built trigger mechanisms supplied dbms notify record event trigger mechanism 
mechanism entry local update log 
periodically update daemon examines update log unprocessed entries 
entry log update daemon updates version vector corresponding entry version vector table 
started replication manager automatically pre defined schedule external event directly request user 
reconciliation time distribution daemon site initiating reconciliation contacts reconcile server remote site 
distribution daemon sends list updates initiating site reconcile server 
reconcile server consults local version vector table determine seen updates listed remote site 
seen reconcile server responds remote distribution daemon requesting data 
remote distribution daemon consults dbms extract data ships current version vector 
due potentially concurrent operations version vector updated list updates sent initiating replica reconcile server care necessary ensure updates lost conflicts missed due concurrency 
reconcile server checks version vector incoming data assuming installs data dbms updates local version vector table 
cases conflicting updates occur 
detected reconcile server remote distribution daemon sends list updated records 
data conflicting record shipped initiating reconcile server server invokes conflict resolver agent fix problem 
conflict resolver agent resolve conflict automatically usually resulting changes dbms resulting changes version vector table 
conflict resolver agent automatically resolve conflict remote version conflicting record stored temporarily versions data structure user notified 
implementation details bengal designed microsoft component object model com 
components initially implemented 
components replication manager update daemon distribution daemon reconcile server version vector manipulation database access utilities action log manipulation 
components implement generic transport methods conflict resolvers 
implementation bengal action logs separate list updates configured remote replica 
action logs updated update daemon processed updates 
pre configured action log existed reconciliation started temporary action log created including replicated records database 
bengal initial implementation simply sent single record update reconcile server time 
functional inefficient network bandwidth 
address problem multiple updates packed single server request 
actual number updates sent single operation determined size updates network packets filled capacity 
action logs advantage list updates needed specific replica immediately known accessible 
action logs eliminated need reconciliation process scan potential updates 
disadvantage action logs required significant additional storage 
additionally action log configured complete database scan required construct temporary log 
unmodified records sent unnecessarily reconciliation process resulting significant performance penalty reconciling replica action log 
adding sequence number version vector table associated index functionality action logs obtained overhead administering storing 
architecture allows peer replicate peer requiring full scan database find updates remote peer sent 
disadvantage integrated action logs version vector removal process requires reverse flow version vector removed 
previously action logs contain entries deleted version vectors send remote replicas 
sequence part version vector table longer possible 
additional data structure added version vector table identifies replicas seen update 
allows ad hoc skip updates remote replica known seen 
bits called maintained update applied 
updated sending side impacts performance additional database write performed 
sequence number bits replaced functionality action log component 
code profiling experimentation revealed significant performance improvement obtained improving way database handled internally bengal 
improvements fell main categories caching parameterization 
component responsible database manipulation 
originally containing record data created needed discarded high cost member columns dynamically determined runtime 
cache added save particular tables 
having cache allows optimizations record retrieval database 
performing new database query filter parameterized query parameters need changed 
optimization allows database engine reuse prepared statements perform internal optimizations 
caching provide noticeable performance improvement parameterization change dramatic impact 
performance measurements indicated processing time component 
designed handle database operations needed replication engine 
performed operations simplistic read record write record methodology 
databases access table data multiple rows time 
complete redesign interfaces needed closely match database data access model 
microsoft offers com database access model called ole db 
ole db set com interfaces goal enable uniform access data stored dbms non dbms information containers 
exactly functionality required component replaced ole db 
initial bengal implementation handled database accesses 
update daemon called read available update log entry opening retrieving row closing incremented version vector deleted update log entry 
process required created update log entry processed update log table version vector table 
ole db update daemon opens update log table accesses row increments version vectors 
entire processed deletes rows processed 
update log entry processed requires creation version vector table update log table entire process 
switching ole db multiple row approach total number database operations performed reduced 
simplified implementation record locking allowed transactions group protect updates 

bengal performance fully characterizing performance replicated data systems difficult 
characteristics item storage overhead defined easy measure 
amount time required perform reconciliation somewhat trickier measure meaningful way 
degree system conceals distributed replicated nature open areas research 
difficulty performance replicated data system depends highly workload applied details configuration number replicas reconciliation frequency reconciliation topology 
overheads quality service metrics vary dramatically details change 
factor greatly affects performance database replication system underlying database engine related drivers 
performance characteristics commercial databases vary widely impacted processor speed amount memory machines run 
addition performance databases greatly impacted tuning employing sophisticated hardware raid disk drives 
extent possible experiments reported conducted similarly equipped machines attempt tune underlying databases 
section characterize performance bengal presenting measurements disk storage overheads required replicate particular data items extra overhead data added messages move real data replicas records second processed major bengal components reconciliation speed lan network modem connection analysis network traffic generated reconciliation elapsed times seen increasing percentages database updated noted experiments described run replicas hosted mhz windows nt desktop mb ram mhz windows nt laptop mb ram 
database sybase sql version 
mentioned experiments conducted bengal dcom data transport mbit ethernet 
experiment average trials 
storage communication overhead storage overhead calculated direct examination data stored bengal 
replica system disk data overhead record bytes 
part overhead store version vector overhead shrink grow depending replicas represented version vector 
replicated table names number primary keys defined tables affect 
information generate key associates version vector particular data record 
overhead deterministic vary runs 
communications overhead transport data record deterministic 
bengal uses dcom primary data transport requires extra messages set tear dcom connection 
packets totaling bytes dependent length hostname set dcom data transport connection packets totaling bytes tear 
overhead deterministic vary runs 
keep alive packets average size bytes periodically maintain connection 
sizes packets vary size data sent 
record sent data transport additional data sent allows record properly reconciled receiving side 
part overhead related encoding record data sample database experiments amounted bytes record 
size record encoding data highly dependent number columns replicated tables 
addition corresponding version vector record sent discussed amounts bytes 
total overhead record bytes 
overhead deterministic vary different replicated tables 
measurements analysis broad metrics characterize bengal performance 
time taken individual bengal components process number record updates 
second time required bengal reconcile number updates remote machine mbit ethernet modem connections 
third number network packets generated reconciliation number records 
fourth metric shows bengal scales larger numbers updates 
performance bengal components operation bengal divided broad functional areas described section record version maintenance update distribution update reconciliation 
functional areas individually measured determine time spent 
update tracking records updated version vectors incremented reflect new update 
implemented bengal update daemon 
update daemon background task directly impact application performance replication speeds performance important determines quickly update noticed system impact responsiveness replication system 
bengal current version update daemon handle updates second measured making batch update records record database measuring time taken update daemon update version vector records 
achieving performance required making better 
update distribution version vectors incremented updated records ready distribution remote replicas 
update distribution version vector record data changed record read sent transport remote replica 
transport synchronous operation dcom 
asynchronous transport needed separate transmission reconciliation time measurements 
accomplished file transport writes updates file read receiving replica 
collecting measurements update daemon described record updates ready distribution 
record updates processed bengal written file 
method bengal able process updates second 
intelligent caching query parameterization intelligent proved key achieving performance 
update reconciliation functional area reconciliation updates receiving replica 
file containing record updates generated described transferred receiving replica 
time required process apply record updates measured 
bengal able reconcile slightly updates second 
reconciliation clearly performance bottleneck system primarily records reconciled time single 
update daemon distribution daemon hand read records 
reconciliation process involves larger number database writes significantly slower reads 
theoretically time required completely reconcile replica sum replicate reconcile processes time spent transmitting data transport 
experimental results described confirm intuition 
reconciliation speeds basic time performance metric describes bengal long system takes reconcile replicas number record updates applied 
measure updates generated replica reconciled second replica 
reconciling updates mbit ethernet took minutes 
reconciling number updates kbit modem took slightly minutes 
speed communications link clearly effect reconciliation speed drop bandwidth orders magnitude caused reconciliation take twice long 
clearly overhead related computation network delays 
network overhead experiment number network packets needed reconcile records dcom measured generating updates replica reconciling updates second replica 
network analyzer capture network traffic generated reconciliation 
packets required perform reconciliation 
earlier versions bengal nearly times packets task 
reduction largely due bundling multiple record updates single packet lesser improvements better bundling record encoding algorithms 
bengal update times shows time bengal required reconcile different numbers updates 
experiment increasing numbers updates applied database containing records reconciled remote replica ethernet link 
updates increase time required reconcile updates slightly sublinear 
insert 
course research areas development related optimistic peer database replication identified 
transactional replication current system replicates individual records 
maintaining transactional integrity updates involve multiple records multiple tables difficult method 
replicating transactions records replicating associated record updates transactional manner integrity updates maintained 
transactional replication accomplished determining relationship tables identifying foreign keys database transaction log merging systemwide transaction log replicated nodes 
selective database replication replicated file systems rumor implement selective replication directory structure define files replicated individual file inclusion exclusion 
new files inherit replication properties parent directory 
selective database replication tougher problem criteria determining data replicated replica vary widely change time 
criteria selecting records changes new records needed replicated old records longer needed pruned 
problems arise reconciliation time 
replicas selective replication reconcile system determine records involved reconciliation partner may store different records may change set records stores time 
interactions selective database replication action log optimizations mentioned complicate problem 
automatic periodic reconciliation maintain consistency replicas decrease possibility conflicting updates replicas reconcile frequent regular basis 
reconciliation process automatically initiated specific amount time passed high watermark updates occurred 
system reconcile available replica see dynamic choice reconcile partners inform user connectivity established replication 
important events trigger automatic reconciliation 
example portable computers wireless networks choose reconcile come radio range 
modeling done ucla developed methods trading decreasing value possibly stale data costs scarce bandwidth fetch newer versions data 
modeling drive file system reconciliation usable database arena 
dynamic choice reconcile partners current replication topologies manually select specific replica reconcile making attempt improve choice dynamic information 
system choose reconciliation partners intelligently optimize spread updates system ensure high priority updates sent important replicas quickly possible 
method achieve goals advertise prospective reconciliation partners 
replicas match criteria advertisement respond offering reconcile 
advertiser decide ones wants reconcile 
method examine results past deduce replicas partners 
dynamic choice coupled automatic periodic reconciliation offer near maintenance free replication solution highly dynamic mobile replica set 

related research done replicated data management 
relatively little relates directly mobile computing particularly replication database systems 
briefly survey relevant replication databases general data replication mobile computers 
transaction processing distributed database systems replication requires consistency control 
form consistency control systems optimistic form 
form optimism different optimistic replication discussed 
optimistic concurrency control related system determines transaction properly committed 
optimistic concurrency control systems permit transaction processing proceed obtaining locks check transaction determine optimism led improper results 
transaction rolled back re executed 
type optimism insufficient mobile environments requires communications sites storing database components replicas transaction 
research replication database systems concentrated conservative solutions 
systems largely inappropriate general mobile computing requirements 
titled consistency partitioned network survey contains survey systems coverage forms optimistic replication 
growth mobile computers led major database manufacturers supply form replicated database solution allow functionality users working portable machines 
large systems support client server optimistic replication varying degrees support handling concurrent updates resulting conflicts 
systems commercial products cases detailed information architecture implementation unavailable deduced system 
oracle oracle contain advanced database replication capabilities 
oracle allows various styles replication master slave situation updates applied master client server replication updates clients eventually propagated server peer style replication updates performed replica propagated replicas 
oracle provides selective replication wide range transport options including broadcast update propagation conflict detection resolution choice data procedural replication propagation update causes deterministic running procedure transfer data strong user administration tools 
oracle supports disconnected mobile computers client server method 
oracle offers limited form peer replication 
oracle peer replication requires updates applied replica propagated replicas originating replica 
gossiping permitted 
choice simplifies problems concurrency detection update propagation cost slowing progress updates system 
suitable environment replicas connected replicas communicate indirectly due constraints mobility 
oracle solution specific oracle products bengal ported easily sql database 
sybase sql remote tm product supports optimistic client server replication mobile computers 
permits mobile computer selectively replicate portion database 
mobile client maintains log updates shipped server convenient email 
sybase offers replication solutions handling replication different offices multiple replication servers office solutions relevant mobile environment 
sql tm offers limited support mobile users typically allowing single mobile replicas replica server mobile replica receives updates 
oracle sybase sql remote sql products specific database offering 
novell replication services tm permit replication office servers 
novell replication services provides hierarchical client server replication support selective replication 
replication service designed support frequently disconnected machines suitable mobile computing 
oracle sybase novell replication system specific product 
lotus notes provides optimistic replication 
coda notes provides peer replication server machines client server replication workstation machines 
portable computers typically configured workstation machines servers 
mobile users lotus notes typically directly synchronize 
lotus notes provides various data transport mechanisms selective replication prioritized synchronization useful replication services 
lotus notes replicates internal forms data number products integrated lotus notes replication commercial databases typically simple client server mode 
lotus notes uses timestamps single version number detect potential conflicts 
complex circumstances lotus notes improperly identify non conflicting updates conflicting 
lotus notes unusual method dealing conflicts 
systems notes provides interface automatically resolving conflicts 
conflict resolved notes simply treats conflicting replicas equally versions data saving 
practice systems save conflicting replicas conflict resolved notes unusual treat conflicting versions sense incorrect requiring action clean 
ca replicator computer associates supports various forms optimistic replication 
replicator replicates transactions building journal needs communicate replica 
includes interface specifying conflict resolvers 
ca replicator supports peer peer replication replication queue maintained replica appear system scale large numbers peers 
documentation suggests conflicts detected replication key consists database number transaction id single sequence number 
complex patterns updates propagations may cause misidentification conflicts exists 
similarly documentation states system suitable mobile details provided 
appear system supports indirect distribution updates builds database synchronization product called provides replication services odbc compliant database 
provides client server replication tools conflict detection resolution support selective replication ability multiple data transports 
transmits difference logs updates 
system provides api integration mobile database applications 
detect updates maintaining shadow copy original state data checked server client 
comparing shadow copy real local copy current server copy allows detection relevant changes cost twice data storage client computer 
support peer replication 
representative wide class similar products discussed detail 
broadly provide kinds services product strengths weaknesses 
common theme lack support peer replication 
number optimistically replicated file systems built specifically designed support mobility 
include ficus coda reconcile rumor 
systems provided useful lessons development bengal including insights costs benefits different methods detecting updates methods handling conflicting data data structures maintaining state information update history replicated data items 
intended file systems databases choices systems suitable database environment 
bayou described replicated storage system 
capable supporting file oriented database oriented operations 
bayou takes application aware approach optimistic peer replication 
applications written include code information assists system providing best possible results face mobile replicas communicating links varying connectivity 
bayou support commercial database systems 
bengal seeks provide transparent replication bayou requires application writers aware replication data 

bengal demonstrated peer oriented optimistic database replication practical technique maintaining shared updateable information multiple mobile nodes mobile environment 
bengal able provide efficient access stored data correct update propagation data replicas gossiping techniques 
client server model current replication techniques depend constant network connectivity requirement realistic mobile wireless environment 
client server architectures enforce rigid communication structure prevent mobile users directly communicating 
master slave replication schemes unacceptable enforce consistency restricting update access 
bengal uses peer peer reconciliation replication approach addresses problems mobile computing client server forms replication 
new replication system allows disconnected operation shared database synchronization set replica peers 
bengal database replication system prototype implementation scheme research study problems mobile computing presents distributed databases 
bengal system sufficiently developed immediate critical environments feel bengal offers features flexibility needed mobile computing 
development prototype system improve performance reliability decrease resources required bengal 
focused problems mobile computing replication technology described may benefit environments 

additional information research conducted jointly computer associates international university california los angeles 
authors contacted address todd charles computer associates international la blvd ca firstname lastname ca com todd ca com peter reiher ph gerald popek ph university california los angeles dept computer science los angeles ca reiher cs ucla edu popek cs ucla edu 
authors laura smith joel steve levy supportive management role providing authors time resources conduct research 
especially shirley wei initial implementation bengal 
contributed significantly performance measurement analysis section 
research supported defense advanced research projects agency darpa contract dabt part darpa program 
names actual companies products mentioned may trademarks respective owners 

day principle resilient sharing distributed resources ieee nd international conference software engineering san francisco ca usa pp 
carey livny conflict detection tradeoffs replicated data acm transactions database systems vol dec 
davidson garcia molina skeen consistency partitioned networks computing surveys vol sept 
downing 
conflict resolution symmetric replication proceedings european oracle user group conference april 
fischer michael 
sacrificing serializability attain high availability data unreliable network proceedings th symposium principles database systems 
gifford weighted voting replicated data proceedings seventh symposium operating systems principles pacific grove ca usa acm :10.1.1.12.6256
pp 
guy heidemann mak page popek implementation ficus replicated file system usenix conference proceedings pp 
june 
guy reiher ratner gunter ma popek rumor mobile data access optimistic peer peer replication proceedings advances database technologies 
pp 
howard reconciliation share files occasionally connected computers proceedings fourth workshop workstation operating systems october pp 

kistler satyanarayanan disconnected operation coda file system acm transactions computer systems vol pp feb 
kuenning bagrodia guy popek reiher wang measuring quality service optimistic replication proceedings object oriented technology 
ecoop workshop reader brussels belgium 
pp 
microsoft ole db ado making universal data access reality white www microsoft com data ado sigmod htm may 
wiederhold resilient extended true copy token scheme distributed database system ieee transactions software engineering vol se pp may 
novell novell replication services nrs product white available web www novell com whitepapers nrs 
parker popek stoughton walker walton chow edwards kline detection mutual inconsistency distributed systems ieee transactions software engineering vol se may 
ratner popek reiher peer replication selective control ucla technical report csd 
ratner reiher popek dynamic version vector maintenance 
computer science department university california los angeles 

reiher heidemann ratner skinner popek resolving file conflicts ficus file system proceedings summer usenix conference boston ma usa pp 
reiher popek gunter ratner 
peer peer reconciliation replication mobile computers proceedings ecoop workshop mobility replication july 
satyanarayanan kistler kumar okasaki siegel steere coda highly available file system distributed workstation environment ieee transactions computers vol pp april 
sybase sybase sql replication server enterprise wide replication solution www sybase com products system html 
architecture operation www com ds ao htm 
tamura editor 
lotus notes domino server chapter replication administration sams publishing 
terry theimer petersen demers spreitzer hauser managing update conflicts bayou weakly connected replicated storage system operating systems review vol pp dec 
thomas solution concurrency control problem multiple copy data bases ieee proceedings spring compcon san francisco ca usa pp 
walker popek english kline thiel locus distributed operating system operating systems review vol spec 
issue pp 
wang reiher bagrodia simulation evaluation optimistic replicated filing mobile environments proceedings international performance computing communications scottsdale az usa pp 
database replication explained datamation pp 

computer associates ca replicator ingres world ru du compu cy index htm 
figures database management system bengal dbr engine event triggers user applications bengal dbr user interface replica version vector replica version vector replica version vector replica version vector replica version vector replica version vector version vector table distribution daemon reconcile server update daemon update log dbms record event trigger distribution daemon reconcile server replication manager replication manager versions data transport mechanism conflict resolver agent local replica remote replica time updates captions bengal place system architecture updates applied updates propagated updates propagated star topology ring topology tree topology matching version vectors replica dominates conflicting version vectors relationships bengal components update scalability 
