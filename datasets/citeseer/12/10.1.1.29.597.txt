generic arc consistency algorithm specializations pascal van hentenryck brown university box providence ri usa yves deville universit catholique de louvain pl ste louvain la neuve belgium man teng brown university box providence ri usa consistency techniques studied extensively past way tackling constraint satisfaction problems csp 
particular various arc consistency algorithms proposed originating waltz ltering algorithm culminating optimal algorithm ac mohr henderson 
ac runs ed worst case number arcs constraints size largest domain 
applicable class binary csp algorithms take account semantics constraints 
new generic arc consistency algorithm ac 
algorithm parametrized speci ed procedures instantiated reduce ac ac 
important ac instantiated produce ed algorithm number important classes constraints functional anti functional monotonic generalization functional anti functional monotonic piecewise constraints 
show ac important application constraint logic programming nite domains 
kernel constraint solver programming language arc consistency algorithm set basic constraints 
prove ac conjunction node consistency provides decision procedure constraints running time ed 
appear arti cial intelligence 
important problems areas arti cial intelligence operations research hardware design viewed constraint satisfaction problems csp 
csp de ned nite set variables values nite domains set constraints variables 
solution csp assignment values variables satisfying constraints problem amounts nding solutions 
problems class np complete means backtracking search important technique solution 
search algorithms preprocessing techniques constraint algorithms designed analyzed class problems see reviews comprehensive overview area 
mainly concerned network consistency techniques arc consistency particular 
consistency techniques constraint algorithms reduce search space removing domains constraints values appear solution 
arc consistency algorithms binary csp sure constraints individually consistent 
arc consistency algorithms long history originate waltz ltering algorithm re ned times optimal algorithm ac mohr henderson 
ac runs ed number arcs network size largest domain 
consistency techniques applied design constraint logic programming clp languages precisely design implementation chip 
chip allows solving variety constraints nite domains including numerical symbolic user de ned constraints 
applied variety industrial problems preserves eciency imperative languages shortening development time signi cantly 
examples applications include graph coloring warehouse locations car sequencing cutting stock see instance 
kernel chip nite domains arc consistency algorithm ac set basic binary constraints 
non basic constraints approximated terms basic constraints 
research originated attempt improve eciency kernel algorithm 
contributions 
new generic arc consistency algorithm ac 
algorithm generic sense parametrized procedures speci ed implementation left open 
reduced ac ac proper implementations procedures 
show ac specialized produce ed arc consistency algorithm important classes constraints functional anti functional monotonic constraints piecewise forms 
second show kernel chip consists precisely functional monotonic constraints ac conjunction node consistency provides decision procedure basic constraints running time ed 
organized follows 
section describes notation note mackworth mentioned early potential value consistency techniques programming languages 
contains basic de nitions 
section describes generic arc consistency algorithm ac speci es procedures arccons localarccons 
section presents various representations domains 
sections show ed algorithm achieved various classes constraints giving particular implementations procedures 
section introduces concept piecewise constraints sections extend results piecewise functional anti functional monotonic constraints 
section shows ac conjunction node consistency provides ed decision procedure basic constraints clp nite domains 
sections discuss related state research 
preliminaries take conventions 
variables represented natural numbers variable associated nite domain constraints binary relate distinct variables 
variables assume simplicity constraint relating denoted ij usual ij denotes boolean value obtained variables replaced values respectively 
denote union domains size largest domain 
arc consistency algorithms generally graph representation csp 
associate graph csp way 
node variable constraint ij relating variables directed arcs 
constraint associated arc ij constraint associated ji similar ij arguments interchanged 
denote number arcs arc node denote set arcs set nodes graph reproduce standard de nitions arc consistency arc graph 
de nition arc 
arc arc consistent wrt ij de nition graph arc consistent wrt arc arc consistent respect de nition useful specifying outcome arc consistent algorithm 
convention de ned de ned 
de nition largest arc consistent domain arc consistent wrt arc consistent wrt show largest arc consistent domain exists unique 
procedure post fg 
function boolean post fg 
procedure dequeue inout post 
procedure enqueue 
inout pre 
node 
post arc 
queue module theorem existence uniqueness largest arc consistent domain exists unique 
proof prove uniqueness note arc consistent wrt wrt arc consistent wrt tp union arc consistent domains included arc consistent largest arc consistent domain construction 
existence straightforward arc consistent 
purpose arc consistency algorithm graph set compute largest arc consistent domain new arc consistency algorithm algorithms arc consistency queue containing elements reconsider 
ac queue contains arcs ac contains pairs node value 
novelty ac queue contains elements arc value removed justi es need reconsider arc 
ac proceed steps 
rst necessary operations queues 
give speci cation procedures arccons localarccons 
algorithm prove number results 
operations queues operations need described 
procedure simply initializes queue empty set 
function tests queue empty 
procedure enqueue 
set values 
removed introduces elements form queue arc constraint graph 
procedure dequeue dequeues element queue 
speci cations take convention parameter subscripted represents value call time 
procedure arccons 
pre arc 
post 
fv ij procedure localarccons 
pre arc 
post 


fv ij ij 
fv ij speci cation procedures operations queues procedure enqueue achieved constant time 
procedure enqueue implemented run number new elements insert queue 
diculty fact procedure enqueue 
requires direct access variable arcs assumed arc consistency algorithms 
algorithms procedure enqueue implemented run 
lazy distribution arcs 
achieve result queue organized contain elements form fa am arc value 
procedure enqueue 
adds element fa am queue arcs form 
procedure dequeue picks element fa am removes set returns speci cation parametric procedures gives speci cation subproblems 
implementations various kinds constraints sections 
specialized produce ac ac ac 
procedure arccons 
computes set values 
variable supported procedure localarccons 
compute set values longer supported removal value note speci cation localarccons gives freedom result 
returned 
sucient compute 
guarantee correctness ac 
procedure gives opportunity achieve pruning 
preserving soundness algorithm 
extreme case 
computed element taken account localarccons result arccons 
fact procedure localarccons restrictive replacing 
set 

fv ij idea simpli es algorithms explored 
algorithm ac post dn dn maximally arc consistent wrt ac arc arccons 
enqueue 
remove 
dequeue localarccons 
enqueue 
remove 
ac arc consistency algorithm ac algorithm ac position algorithm ac 
algorithm depicted main steps 
rst step arcs considered arc consistency enforced 
procedure remove 
removes set values 
second step applies localarccons elements queue possibly generating new elements queue 
properties ac rst prove partial correctness ac 
termination straightforward proven complexity results 
lemma largest arc consistent domain invariant preserved ac lines 
proof invariant holds rst execution line execution line preserves invariant 
arc consistent 
follows 
lines preserve invariant 
proof invariant line similar 
theorem partial correctness algorithm ac partially correct 
procedure post arc status rejected function post arc status suspended 
procedure dequeue inout post status rejected 
procedure enqueue 
inout pre arc 
status 
post arc 
status suspended 
queue module structure status proof rst show arc consistent wrt ac terminates 
assume contrary exist arc ij 
value supported elements removed line 
wm elements supporting values removed execution elements form inserted queue 
ac terminates localarccons 
line executed 
de nition localarccons 
holds line removes resulting contradiction 
lemma largest arc consistent domain follows proves partial correctness ac 
turn complexity results 
simplify presentation introduce new data structure status dimensional array rst dimension arcs second values 
give ect procedures manipulating queue status 
note actual implementation need perform operations just merely ease presentation simplify theorem 
algorithm ac preserves invariant lines status status suspended vi rejected vi position prove theorem 
theorem algorithm ac properties invariant datastructure status holds lines 
ac enqueues dequeues ed elements size queue ed 
ac terminates 
numbers new elements queue iteration lines ed 
proof property holds initially 
assuming holds line holds iteration lines 
line sure suspended 
puts queue line removes 
invariant holds rst execution line 
execution lines preserves invariant lines maintain lines respectively sure suspended 
remove 
property holds element status allowed transitions suspended procedure enqueue suspended rejected procedure dequeue 
ed dequeues enqueues 
properties direct consequences property preconditions enqueue data structure status 
space complexity ac depends maximal size size domains variables 
theorem deduce complexity ac complexity procedures arccons localarccons 
theorem time complexity arccons time complexity localarccons time complexity ac ed 
time complexity arccons time complexity localarccons 

time complexity ac ed 
ac particular case ac value implementation procedure localarccons localarccons implemented arccons 
case localarccons arccons ac ed 
space complexity nd size queue reduced 
ac particular case ac implementation procedure localarccons node maintains data structure size ed 
case arccons initialises data structure localarccons 
resulting algorithm ed 
ed optimal time complexity way reduce complexity considering particular classes constraints allowing implement particular procedure arccons 
note arc consistency algorithm ed optimal subclass constraints reasonable assume need check value domain 
sections characterize classes 
really means max 

empty 
strictly speaking ac arc enqueued arc consistent 
optimization added ac adding argument enqueue adding constraint de nition 
function size integer post size procedure inout post fvg 
function member boolean post member 
function min value post min dg function max value post max dg 
function succ value post succ vg function pred value post pred vg domain module constraints guarantee procedure arccons procedure localarccons linearly related size output set 
resulting ac algorithm classes running time ed space ed nd 
representation domains particular implementations arccons localarccons perform operations domains depicted 
reader notice operations de ne domains sophisticated usually required arc consistency algorithms 
particular assume total ordering domain reasons clear 
additional sophistication necessary achieve bound ed monotonic constraints 
primitive operations domains assumed take constant time 
data structures enable achieve result 
rst data structure assumes domain consecutive integer values depicted 
eld size gives size domain elds min max pick minimum maximum values eld element test value domain elds pred succ access constant time successor predecessor value domain 
operation update elds preserve semantics 
done constant time 
domain sparse data structure depicted 
note unconnected domains distinct orderings possible transform underlying partial ordering total ordering 
fb bg fv vm 
syntax size integer min integer max integer element array booleans succ array integers pred array integers semantics size min max vm element succ succ pred pred domain data structure consecutive values fe fe vm syntax size integer min integer ag max integer ag element set couples ag organized hash table key value array elements succ array integers ag pred array integers ag semantics size min max vm element value succ succ pred pred domain data structure sparse values procedure arccons 

ij 
fvg arccons functional constraints reasons indices values uses hash table test membership domain 
time complexity membership theoretically reasonable assumptions expected time search element 
ease presentation assume rest ac stops soon domain empty 
functional constraints de nition constraint functional wrt domain resp 
exists resp 

note de nition parametrized domain constraints functional general functional restricted domain values 
example functional constraint 
convention ij functional constraint denote ij resp 
ji value resp 
ij 
value exist function denotes value outside domain constraint holds 
results assume takes constant time compute functions ij ji way arc consistency algorithms assume computed constant time 
procedures arccons localarccons functional constraints depicted figures 
clear procedures ful ll speci cations 
value arc needs checked procedure arccons constraint functional 
procedure localarccons computes set 
case value needs checked 
procedures arccons localarccons respectively functional constraints 
optimal algorithm 
theorem algorithm ac ed functional constraints wrt note functional constraints add requirement basic operations domains compared traditional algorithms 
procedure localarccons 
ji 
ff ji 
localarccons functional constraints procedure arccons 
size min 
ff ji 
procedure arccons anti functional constraints anti functional constraints negation constraint functional instance inequality relation optimal algorithm achieved 
de nition constraint ij anti functional wrt domain ij functional wrt anti functional constraint value domain value constraint hold 
procedures arccons localarccons shown figures 
convention functional constraints 
procedure localarccons 
arccons 
procedure localarccons anti functional constraints considering element yield complexity result arccons achieved considering size clear arccons ful lls speci cation fwg resulting set contain ij element complexity arccons 
allows implementation localarccons arccons leading 
case value considered localarccons computes set 
speci cation 
theorem algorithm ac ed anti functional constraints wrt monotonic constraints consider class constraints monotonic constraints example 
class constraints requires total ordering mentioned previously 
assume constraint element exist elements necessarily hold 
requirement simplify algorithms restrictive nature 
de nition constraint monotonic wrt domain exists total ordering value holds implies holds values convention ac working arcs associate arc functions ij ij ij relation ij monotonic constraint ij functions relation arc ij ij ij max ij pred ij arc ji ij ji min ji succ ji procedures arccons localarccons ij ij ij ij arc omit subscripts presentation algorithms 
functions assumed take constant time evaluate 
position describe implementation procedures arccons localarccons monotonic constraints 
depicted figures 
lemma procedures arccons localarccons ful ll speci cations 
proof procedure arccons localarccons compute set 
fv monotonicity constraint 

fv ij 
fv 

postconditions satis ed 
procedures arccons localarccons iterations lines elements resulting set 
follows optimal algorithm 
set 
computed show 

ff ji procedure arccons 


fvg arccons monotonic constraints procedure localarccons 
arccons 
localarccons monotonic constraints theorem procedure ac ed monotonic constraints wrt clear ac applied time anti functional monotonic constraints complexity 
monotonic constraints revisited reconsider arccons procedure monotonic constraints 
rst show succ pred functions applied initial domains denoted init procedure arccons 


fvg init revised procedure arccons monotonic constraints procedure localarccons 


fvg init revised procedure localarccons monotonic constraints eliminating need update part data structure 
revised procedure arccons depicted 
di erence lies lines obviously uence correctness arccons 
procedure localarccons arccons revised version 
correctness localarccons consequence preceding version computing set 
speci cation fact 
empty monotonicity ij possible compute 
prevent reduction domains early possible 
theorem revised implementation depicted figures procedure ac ed monotonic constraints wrt proof proof requires amortized complexity show localarccons amortized 
number iterations call revised version localarccons worst case elements may removed domain 
associate arc credits time test line arccons line localarccons executed arc element inserted 
total number credits ed 
prove amortized complexity show test line arccons line localarccons done value domain 
suppose test done execution remove value considered execution arccons localarccons rst execution test succeeds 
follows number credits complexity rst algorithm optimal ac algorithm 
line replace function integer post ij 
function integer pre post ij function boolean pre post ij procedure extend inout 
pre post 
ij status pd true function integer pre init post ij function integer post minfk ij function integer post ij function size integer post size fk ij piecewise decomposition module piecewise constraints preceding sections generalized case domain partitioned groups elements group behave similarly respect constraint 
convention sets constraint 
denotes 
denotes 
fwg 
de nition partitions fs fp pm piecewise decomposition wrt holds 
representation piecewise constraints presenting implementation arccons localarccons constraints having particular piecewise decomposition show operations piecewise decompositions depicted 
ease implementation assume elements groups piecewise decomposition removed execution 
piecewise decomposition respect ij denoted ij fs ij ij ij fs ij ij syntax ij group array sets ij integer ij size integer ij array integers ij integer ij integer semantics ij group ij ij ij size fk ij ij ij ij minfk ij ij ij piecewise decomposition data structure ji fs ji ji introduce new data structure status pd twodimensional array rst dimension arcs associated piecewise decomposition second group numbers 
semantics ij status pd false status pd false corresponding group empty 
primitive operations piecewise decomposition assumed take constant time complexity extend assumed size ij simple data structure enables achieve results 
space complexity piecewise decomposition 
data structure updated primitive constant time element domain belong di erent groups di erent piecewise decompositions 
update easily performed enqueue primitive ecting complexity 
dicult initialize data structure realistic assumption takes nd elements resp 
supporting value resp 
resp 

addition construction data structure assigns group number value operation trivially takes constant time 
assume data structure built 
piecewise functional constraints intuitively piecewise functional constraint ij constraint domains decomposed groups group resp 
supported group resp 

de nition constraint ij piecewise functional wrt domains exists piecewise decomposition fs fp pm wrt ij resp 
exists resp 
ij 
examples functional piecewise constraints modulo mod integer division div constraints 
element constraint chip programming language piecewise constraint 

note functional constraints subclass piecewise constraints size group partition exactly 
obviously piecewise functional constraint ij unsupported elements resp 
group piecewise decompositions fs fp number groups groups hold pf ij ij pf ij pf ij implementation arccons localarccons piecewise functional constraints assumes piecewise decomposition satis es pf 
property states necessary sucient conditions piecewise functional constraint 
property constraint ij piecewise functional wrt exists partition fs ij ij ij ij proof part straightforward 
part assume unsupported element unsupported element groups merged ecting conditions 
construct fp way fw ij sucient prove partition satisfy pf 
partition 

holds 
de nition ij 
ij 
ij ij 

function unsupported boolean pre post unsupported status pd unsupported function procedure arccons 

extend 
unsupported extend 
arccons piecewise functional constraints suppose 
impossible partition contains unsupported elements impossible hypothesis 

pf 
hold de nition 
pf 
de nition ij 
ij ij 
ij 
pf 
de nition ij 
ij 
procedures arccons localarccons piecewise functional constraint figures 
line handles group ij containing unsupported elements initial domain procedures boolean function unsupported speci ed 
correctness procedures immediate consequence correctness procedures functional constraints 
easily see semantics status pd invariant lines ac assuming holds initially 
procedure localarccons 

unsupported extend 
localarccons piecewise functional constraints procedure arccons 

size extend 
procedure arccons piecewise anti functional constraints procedure localarccons 
arccons 
procedure localarccons piecewise anti functional constraints time complexity analyzed globally ac 
complexity execution arccons localarccons arc bounded ac ed 
complexity execution arccons localarccons depends mainly number executions extend procedure 
arc speci cation unsupported extend status pd extend operation group complexity bounded 
amortized complexity case monotonic constraints follows optimal algorithm 
theorem procedure ac ed piecewise functional constraints 
piecewise anti functional constraints turn piecewise anti functional constraints mod 
piecewise anti functional constraint constraint domains decomposed groups group resp 
supported group resp 

de nition constraint ij anti functional wrt ij piecewise functional wrt notations preceding section procedures arccons localarccons anti functional constraints easily extended piecewise framework see figures 
note test group supports groups 
procedure arccons 

extend 
procedure arccons piecewise monotonic constraints complexity analysis similar preceding section show ac execution extend group 
result 
theorem algorithm ac ed piecewise anti functional constraints 
piecewise monotonic constraints monotonic constraints nally generalized piecewise monotonic constraints example div 
de nition constraint ij piecewise monotonic wrt exists piecewise decomposition fs fp pm wrt ij ij ij convention monotonic constraints associate arc functions ij ij ij relation ij piecewise monotonic constraint ij functions relation arc ij fk ij ij ji gg ij ij ij arc ji minff fk ij ij ji gg ji ji ji de nition ij requires sophistication handle case ij ji unsupported 
functions assumed take constant time evaluate 
monotonic constraints subscripts omitted algorithms figures 
correctness arccons localarccons monotonic constraints 
complexity analysis similar monotonic constraints 
executions arccons localarccons arc test line arccons line localarccons group 
optimal algorithm 
theorem algorithm ac ed piecewise monotonic constraints 
procedure localarccons 

kw kw extend 
procedure localarccons piecewise monotonic constraints application describe application ac constraint logic programming nite domains 
constraint logic programming class languages main operation computation domain 
computation step amounts checking satis ability conjunction constraints 
constraint logic programming nite domains investigated 
computation domain constraints equations inequalities disequations natural number terms equations disequations constants 
natural number terms constructed natural numbers variables ranging nite domain natural numbers standard arithmetic operators 
symbolic constraints provided increase expressiveness addition users de ne constraints 
computation domain available chip constraint solver consistency techniques arithmetic reasoning branch bound 
applied numerous problems combinatorial optimization graph coloring warehouse location scheduling sequencing cutting stock assignment problems microcode labeling name see instance 
space allow operational semantics language 
just mention kernel constraint solver arc consistency algorithm set basic constraints 
non basic constraints approximated terms basic constraints generate new basic constraints 
basic constraints domain constraints arithmetic constraints follows variables represented uppercase letters constants lower case letters domain constraint fa arithmetic constraints ax ax ax ax 
constraints chosen carefully order avoid having solve np complete constraint satisfaction problem 
instance allowing variables disequations variables inequalities equations leads np complete problems 
show ac basis ecient decision procedure basic constraints 
de nition system constraints pair hac dci ac set arithmetic constraints dc set domain constraints variable occurring arithmetic constraint occurs domain constraint de nition hac dci system constraints 
set domain dc domain constraints dc intersection 
de ne solved form constraints 
de nition system constraints 
solved form unary constraint node consistent respect domain binary constraint arc consistent respect domains study number properties systems constraints solved form 
property binary constraint ax ax wrt dx fv fw wm assume wm monotonic wm hold 
property binary constraint ax arc consistent respect dx fv fw wm assume wm functional holds 
satis ability system constraints solved form tested straightforward way 
theorem hac dci system constraints solved form 
satis able dci satis able 
proof clear dci satis able domain variable empty dc 
domain variable empty dc satis able 
possible construct solution properties binary constraints hold assign variable smallest value domain 
node consistency unary constraints hold assignment 
remains show transform system constraints equivalent solved form 
precisely purpose node arc consistency algorithms 
usual unary constraint node consistent wrt 
algorithm transform system constraints system solved form 
apply node consistency algorithm unary constraints hac dci obtain hac dc 
apply arc consistency algorithm binary constraints hac dc obtain hac dc theorem system constraints 
algorithm produces system constraints solved form equivalent give complete constraint solver basic constraints 
system constraints algorithm returns true satis able false 
algorithm check satis ability system constraints apply algorithm obtain hac dci domain variable empty dc return false return true 
summary shown node arc consistency algorithms provide decision procedure basic constraints 
complexity decision procedure complexity arc consistency algorithm 
specialization ac basic constraints obtain ed decision procedure 
discussion related section discuss practicability algorithms relationships 
results indicate classes constraints lead ed arc consistency algorithm improving ed bound 
better asymptotic complexity guarantee faster algorithm empirical theoretical results suggest practicability results 
theoretical side easy see constant factors fact small algorithms general 
empirical side classes integrated cc fd programming language improving computational results algorithms compared previous versions ac ac 
discussed forthcoming 
important note ac classes studied increase memory requirement 
memory management reasons ac may preferable 
far related concerned closely related papers deserve mentioned 
mohr discovered independently subset arithmetic constraints solved ed 
constraints considered binary equations inequalities disequations respectively subcases functional monotonic anti functional constraints 
indicate informally modify ac include constraints uniform generic algorithm ac 
perlin algorithm arc consistency algorithm working graph representation csp values variables nodes constraints represented links nodes 
algorithm bounded size graph 
perlin investigates idea factoring constraints graph representation 
precisely studies idea splitting constraint conjunction constraints new variables 
arc consistency produces pruning problem variables 
graph associated new problem smaller initial graph 
turns arc consistency runs ed constraints express equalities constraint variables 
note case reduces equation subcase functional constraints 
contributions perlin summarized identi cation general preprocessing technique factorization reduce size graph identi cation special kind functional constraints 
easy generalize results case functional constraints constraint variables 
similarly believe proven bound piecewise monotonic constraints obtained factorization piecewise functional constraints monotonic constraints 
note inconvenience graph representation memory requirement functional constraint requires space graph representation requires constant space ac 
arc consistency functional constraints solved reduction sat keeping ed result 
algorithm uses space constraint 
interesting study evolution arc consistency algorithms 
main contribution ac idea working domain values domain variables 
idea systematically exploited perlin obtain better bound classes constraints factorization 
exploiting structure domains new idea mohr monotonic constraints 
exploiting structure constraints key idea piecewise constraints 
ac accommodates results uni ed generic algorithm 
new generic arc consistency algorithm ac specializations include ac ac ed algorithm important subclasses constraints including functional monotonic anti functional constraints piecewise counterparts 
application ac constraint logic programming nite domains described 
node consistency provides main algorithms ed decision procedure basic constraints 
software engineering perspective ac advantage uniformity 
constraint may particular implementation ac ac speci techniques uencing main algorithm 
consequence di erent implementation techniques interleaved natural setting 
current research devoted applying ideas path consistency non binary constraints 
turns similar improvements obtained path consistency algorithms algorithms somewhat complicated 
non binary constraints investigated obtain equivalent gac ac 
preliminary results indicate results carry classes constraints algorithms involved 
acknowledgments anonymous ijcai reviewer mentioning reduction sat eugene freuder pointing perlin anonymous ai journal reviewers careful comments suggestions 
help avery correcting english appreciated 
research supported part national science foundation number ccr oce naval research arpa order 
cormen leiserson rivest 
algorithms 
mit press cambridge 
dechter pearl 
network heuristics constraint satisfaction problems 
arti cial intelligence 
dincbas simonis van hentenryck 
solving large combinatorial problems logic programming 
journal logic programming january march 
dincbas van hentenryck simonis graf berthier 
constraint logic programming language chip 
proceedings international conference fifth generation computer systems tokyo japan december 
freuder 
synthesizing constraint expressions 
communications acm november 
gaschnig 
constraint satisfaction method inference making 
proc 
th annual allerton conf 
circuit system theory pages illinois 
haralick elliot 
increasing tree search eciency constraint satisfaction problems 
arti cial intelligence 
ja ar michaylov 
methodology implementation clp system 
fourth international conference logic programming pages melbourne australia may 
kasif 
parallel complexity discrete relaxation constraint satisfaction networks 
arti cial intelligence 


language program stating solving combinatorial problems 
arti cial intelligence 
mackworth 
consistency networks relations 
arti cial intelligence 
mackworth 
constraint satisfaction 
encyclopedia arti cial intelligence 
stuart shapiro editor wiley 
mackworth freuder 
complexity polynomial network consistency algorithms constraint satisfaction problems 
arti cial intelligence 
mohr 
old discrete relaxation 
european conference arti cial intelligence ecai munich germany august 
mohr henderson 
arc path consistency revisited 
arti cial intelligence 
mohr masini 
running eciently arc consistency 
syntactic structural pattern recognition pages 
springer verlag 
montanari 
networks constraints fundamental properties applications picture processing 
information science 
montanari rossi 
ecient algorithm solution hierarchical networks constraints 
workshop graph grammars applications computer science december 
nadel 
constraint satisfaction algorithms 
computational intelligence 
mark perlin 
arc consistency factorable relations 
ieee computer society editor third international conference tools arti cial intelligence pages san jose ca november 
tarjan 
amortized computational complexity 
siam journal algebraic discrete methods 
van hentenryck 
framework consistency techniques logic programming 
ijcai milan italy august 
van hentenryck 
constraint satisfaction logic programming 
logic programming series mit press cambridge ma 
van hentenryck dincbas 
domains logic programming 
aaai philadelphia pa august 
van hentenryck saraswat deville 
design implementation evaluation constraint language cc fd 
constraint programming basics trends 
springer verlag 
waltz 
generating semantic descriptions drawings scenes shadows 
technical report ai mit ma november 

