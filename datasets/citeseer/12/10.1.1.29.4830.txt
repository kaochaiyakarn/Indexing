architectural overview ace framework case study successful cross platform systems software reuse douglas schmidt schmidt cs wustl edu department computer science washington university st louis mo article appear special issue usenix login edited peter 
communication software generation distributed applications possess qualities ffl flexibility needed support growing range multimedia datatypes traffic patterns quality service qos requirements 
ffl efficiency needed provide low latency applications high performance applications predictability real time applications 
ffl reliability needed ensure applications robust fault tolerant highly available 
ffl portability needed reduce effort required support applications heterogeneous os platforms compilers 
article describes software architecture ace freely available open source framework targeted developers high performance real time communication services applications 
ace framework provides integrated set components help developers navigate scylla limitations low level native os apis inflexible non portable higher level distributed object computing middleware inefficient unreliable 
article describes structure functionality ace outlines complex communication middleware applications developed ace summarizes key lessons learned developing deploying reusable oo communication software components frameworks ace 
overview ace ace object oriented oo framework implements core concurrency distribution patterns communication software 
ace provides rich set reusable wrappers framework components targeted developers high performance real time services applications wide range os platforms including win versions unix real time operating systems 
components ace provide reusable implementations common communication software tasks ffl connection establishment service initialization ffl event demultiplexing event handler dispatching ffl interprocess communication shared memory management ffl static dynamic configuration communication services ffl concurrency synchronization ffl distributed communication services naming event routing logging time synchronization network locking ffl higher level distributed computing middleware components object request brokers orbs web servers electronic medical imaging systems 
section outlines structure functionality ace framework 
structure functionality ace ace framework contains lines code divided classes 
separate concerns reduce complexity framework ace designed processes processes threads threads dynamic dynamic linking linking memory memory mapping mapping select select io comp io comp system system stream stream pipes pipes named named pipes pipes apis sockets sockets tli tli communication communication subsystem subsystem virtual memory virtual memory subsystem subsystem general posix win services process process subsystem subsystem frameworks acceptor acceptor connector connector self contained distributed service components name name server server token token server server logging logging server server gateway gateway server server sock sock tli tli fifo fifo sap sap log log msg msg service service handler handler time time server server wrappers sap sap corba corba handler handler wrappers wrappers shared shared malloc malloc ace orb ace orb jaws adaptive jaws adaptive web server web server middleware applications reactor reactor proactor proactor process process thread thread managers managers adaptive service executive adaptive service executive asx asx service service config config synch synch wrappers wrappers mem mem map map os adaptation layer layering structure components ace framework layered architecture 
illustrates relationships key components ace 
lower layers ace contain os adapter wrappers portably encapsulate core os communication concurrency services 
higher layers ace extend wrappers provide reusable frameworks selfcontained distributed service components higher level distributed computing middleware components 
layers components simplify creation composition configuration communication systems incurring significant performance overhead 
role layer outlined 
ace os adaptation layer os adaptation layer constitutes approximately ace lines code 
layer resides directly atop native os apis written os adaptation layer shields layers components ace platform specific dependencies associated os apis concurrency synchronization ace adaptation layer encapsulates os apis multi threading multiprocessing synchronization 
interprocess communication ipc shared memory ace adaptation layer encapsulates os apis local remote ipc shared memory 
event demultiplexing mechanisms ace adaptation layer encapsulates os apis synchronous asynchronous demultiplexing timer synchronization events 
explicit dynamic linking ace adaptation layer encapsulates os apis explicit dynamic linking allows application services configured installation time runtime 
file system mechanisms ace adaptation layer encapsulates os file system apis manipulating files directories 
portability ace os adaptation layer enables run wide range operating systems 
os platforms supported ace include win win borland versions unix sunos sgi irix hp ux dec unix aix dg ux linux sco netbsd freebsd real time operating systems vxworks chorus psos mvs 
abstraction provided ace os adaptation layer single source tree platforms 
design greatly portability maintainability ace 
ace wrapper layer possible program highly portable applications directly atop ace os adaptation layer 
ace developers wrappers layer shown 
ace wrappers simplify application development providing typesafe interfaces encapsulate enhance native os concurrency communication memory management event demultiplexing dynamic linking file system apis 
wrappers provided ace quite comprehensive constituting source code 
applications combine compose wrappers selectively inheriting aggregating instantiating components concurrency synchronization components ace abstracts native os multi threading multi processing mechanisms mutexes semaphores create higher level oo concurrency abstractions active objects polymorphic futures 
ipc filesystem components ace wrappers encapsulate local remote ipc mechanisms sockets tli unix fifos stream pipes win named pipes 
addition ace wrappers encapsulate os filesystem apis 
memory management components ace memory management components provide flexible extensible abstraction managing dynamic allocation deallocation interprocess shared memory heap memory 
wrappers provide features os adaptation layer ace 
features structured terms classes objects standalone functions 
oo packaging helps reduce effort required learn ace correctly 
instance improves application robustness wrappers strongly typed 
compilers detect type system violations compile time run time 
contrast possible detect violations level os apis sockets filesystem run time 
ace employs number techniques minimize eliminate performance overhead 
instance ace uses inlining extensively eliminate method call overhead incurred additional levels abstraction provided os adaptation layer wrappers addition ace avoids virtual methods performance critical wrappers send recv methods socket file ace framework components remaining ace consists communication software framework components integrate enhance wrappers 
framework components support flexible configuration concurrent communication applications services 
framework layer ace contains components event demultiplexing components ace reactor proactor extensible object oriented dispatch application specific handlers response various types timer signal synchronization events 
service initialization components ace connector acceptor components decouple active passive initialization roles respectively application specific tasks communication services perform initialization complete 
service configuration components ace service configurator supports configuration applications services may assembled dynamically installation time run time 
hierarchically layered stream components ace streams components simplify development communication software applications user level protocol stacks composed hierarchically layered services 
orb adapter components ace integrated seamlessly single threaded multi threaded corba implementations orb adapters 
ace framework components facilitate development communication software updated extended need modify recompile relink restart running applications 
flexibility achieved ace combining language features templates inheritance dynamic binding design patterns factory strategy service configurator os mechanisms dynamic linking multithreading 
self contained distributed service components addition wrappers framework components ace provides standard library distributed services packaged self contained components 
service components strictly part ace framework library play important roles network network orb orb interface interface real real orb orb operation operation stubs stubs real real object object adapter adapter skeleton skeleton args args args return value args return value client client os kernel os kernel high high network adapters network adapters real real time oo subsystem subsystem servant servant os kernel os kernel high high network adapters network adapters real real time oo subsystem subsystem components tao real time orb factoring reusable distributed application building blocks service components provide reusable implementations common distributed application tasks naming event routing logging time synchronization network locking 
demonstrating common cases ace components distributed services demonstrate ace components reactors service acceptors connectors active objects ipc wrappers effectively develop flexible efficient reliable communication software 
higher level distributed computing middleware components developing robust extensible efficient communication applications challenging communication framework ace 
particular developers master number complex os communication concepts ffl network addressing service identification 
ffl presentation conversions encryption compression network byte ordering conversions heterogeneous systems alternative processor byte orderings 
ffl process thread creation synchronization 
ffl system call library routine interfaces local remote interprocess communication ipc mechanisms 
possible alleviate complexity developing communication applications employing higher framework framework tilde framework cached virtual filesystem strategy protocol pipeline concurrency expander strategy home 
memento reactor proactor strategy singleton strategy active object pipes filters adapter service configurator protocol handler protocol filter event dispatcher asynchronous completion token architectural overview jaws framework level distributed computing middleware corba dcom java rmi 
higher level distributed computing middleware resides clients servers automates tedious error prone aspects distributed application development including ffl authentication authorization data security 
ffl service location binding 
ffl service registration activation 
ffl demultiplexing dispatching response events 
ffl implementing message framing atop oriented communication protocols tcp 
ffl presentation conversion issues involving network parameter marshaling 
provide developers communication software features higher level middleware applications bundled ace release ace orb tao tao real time implementation corba built framework components patterns provided ace 
tao contains network interface os communication protocol corba middleware components features shown 
tao standard omg corba model enhancements designed overcome shortcomings conventional orbs high performance real time applications 
tao ace freely available www cs wustl edu schmidt tao html 
jaws jaws high performance adaptive web server built framework components patterns provided ace 
illustrates major structural components design patterns jaws 
jaws structured framework frameworks 
jaws framework contains components frameworks event dispatcher concurrency strategy strategy protocol pipeline protocol handlers cached virtual filesystem 
framework structured set collaborating objects implemented combining extending components ace 
jaw freely available www cs wustl edu research 
lessons learned developing deploying ace section summarizes lessons learned past years developing reusable oo communication software components ace framework deploying ace wide range commercial applications avionics telecommunications medical domains 
software reuse fails largely non technical reasons theory organizations recognize importance reuse means reduce cycle time improve software quality 
practice factors conspire hard achieve systematic software reuse 
impediments largely political economical organizational psychological technical 
instance teams develop reusable middleware platforms viewed suspicion application development teams resent fact longer empowered key architectural decisions 
successful reuse large requires prerequisites experience large scale reuse software works best conditions apply ffl marketplace highly competitive competitive environment time market crucial 
essential leverage existing software substantially reduce development effort cycle time 
market place competitive tendency reinvent reuse 
ffl application domain challenging components relatively easy develop generic linked lists stacks queues rewritten scratch reused 
contrast developers generally willing reuse highly complex components dynamic scheduling frameworks real time orbs building complete solutions scratch difficult costly time consuming 
ffl corporate culture supportive hard develop high quality reusable components frameworks 
particular hard reap benefits reuse immediately 
great deal effort expended initially produce efficient flexible documented reusable software artifacts 
organization support effective process order reuse 
instance developers rewarded punished time build robust reusable components 
reuse process reward production concrete software artifacts endless meta models high level design documents 
experience prerequisites exist contemporary organizations 
cases observed organizations fall victim invented syndrome software components scratch 
unfortunately increasing global competition hard succeed type development process 
iteration incremental growth essential crucial organizations explicitly recognize components frameworks software architectures require time craft hone apply 
general developing reusing software requires mature organization distinguish key sources variability commonality application domain 
identifying separating concerns requires multiple iterations 
reuse succeed large management vision resolve support incremental evolution reusable software 
fred brook observation plan throw away anyway applies today years ago 
experience best enemy comes deploying reusable software frameworks components 
solution deployed evolved incrementally preferable waiting solution ships 
substitute hands experience developing high quality communication software hard developing high quality reusable communication software harder 
principles methods skills required develop reusable software simply learned generalities 
developers learn hands experience design implement optimize validate maintain enhance reusable software components frameworks 
engaging activities developers truly internalize development practices patterns 
integrate infrastructure developers application developers useful components frameworks originate solving real problems particular application domain telecommunications medical imaging avionics web programming 
time honored way producing effective reusable components generalize working systems applications 
ace evolved 
creating component teams build reusable frameworks isolation application teams counter productive 
intimate feedback application developers software artifacts produced component teams rarely solve real problems reused systematically 
design architecture program particular middleware technology standard risky expect emerging industry middleware standards corba dcom java rmi automatically eliminate complexity developing communication software 
single solution panacea standards necessarily ubiquitous implemented consistently 
complex communication software systems essential design architectures transcend specific middleware technology standard 
effective devise common software architecture instantiated multiple middleware platforms programming directly particular middleware api rapidly obsolete 
os api wars largely irrelevant ace os adaptation layer selection native os api posix vs win vs real time operating systems largely implementation detail 
ace straightforward develop highly portable communication software runs efficiently wide range operating systems compilers 
ace provides portability incurring performance penalties associated interpreted virtual machines 
portability provided ace allows developers select os platform features price performance development tools ease integration applications 
beware simple minded solutions complex software problems trying apply overly simple solutions complex problems exercise frustration recipe failure 
instance attempting translate software implementations entirely high level sdl specifications analysis rules rarely succeed complex communication systems 
likewise oo design methodologies modeling notations programming languages guarantee success 
experience simply substitute employing skilled software developers leads final lesson learned 
respect reward quality developers architects ultimately reusable components frameworks java version ace components available www cs wustl edu schmidt html 
people build 
developing robust efficient reusable middleware requires teams wide range skills 
need expert analysts designers mastered design patterns software architectures communication protocols alleviate inherent accidental complexities communication software 
need expert programmers implement patterns architectures protocols reusable frameworks components 
experience exceptionally hard find high quality software developers 
ironically companies treat developers interchangeable unskilled labor replaced easily 
time companies respect reward high quality software developers increasingly outperforming 
concluding remarks computing power network bandwidth increased dramatically past decade 
design implementation communication software remains expensive error prone 
cost effort stems continual re discovery re invention fundamental patterns framework components software industry 
growing heterogeneity hardware architectures diversity os network platforms global competition increasingly costly build correct portable efficient applications scratch 
object oriented application frameworks patterns help reduce cost improve quality software leveraging proven software designs implementations produce reusable components customized meet new application requirements 
ace framework described article illustrates development communication software orbs web servers significantly simplified unified 
widespread adoption ace testament power open source software process benefits systematic software reuse complex communication systems 
key success ace ability capture common communication software design patterns consolidate patterns flexible framework components 
framework components efficiently encapsulate enhance low level os mechanisms interprocess communication event demultiplexing dynamic configuration concurrency synchronization file system access 
ace wrappers framework components distributed services higher level distributed computing middleware components described article freely available www cs wustl edu schmidt ace html 
url contains complete source code documentation example applications including jaws tao 
ace research development projects universities companies 
instance ace build real time avionics systems boeing telecommunication systems bellcore ericsson motorola lucent medical imaging systems siemens kodak distributed simulation systems saic darpa 
widely research projects classroom instruction 
description projects ace tao jaws frameworks available www cs wustl edu schmidt ace users html 
addition comp soft sys ace usenet newsgroup devoted ace related topics 
success ace due dedication core development team washington university hundreds developers internet contribute time effort improve ace 
greatly appreciate help support usenix sponsored research tao real time scheduling service 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
schmidt family design patterns applicationlevel gateways theory practice object systems special issue patterns pattern languages vol 

schmidt acceptor connector design patterns initializing communication services pattern languages program design martin buschmann riehle eds reading ma addison wesley 
schmidt reactor object behavioral pattern concurrent event demultiplexing event handler dispatching pattern languages program design coplien schmidt eds pp 
reading ma addisonwesley 
schmidt cranor half sync half async architectural pattern efficient structured concurrent pattern languages program design coplien vlissides eds reading ma addison wesley 
harrison pyarali schmidt jordan proactor object behavioral pattern dispatching asynchronous event handlers th pattern languages programming conference washington university technical report wucs september 
schmidt harrison objectoriented components high speed network programming proceedings st conference object oriented technologies systems monterey ca usenix june 
schmidt suda object oriented framework dynamically configuring extensible distributed communication systems iee bcs distributed systems engineering journal special issue configurable distributed systems vol 
pp 
december 
jain schmidt service configurator pattern dynamic configuration services proceedings rd conference object oriented technologies systems usenix june 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
schmidt gokhale harrison high performance endsystem architecture real time corba ieee communications magazine vol 
february 
hu pyarali schmidt measuring impact event dispatching concurrency models web server performance high speed networks proceedings nd global internet conference ieee november 
jain schmidt design performance distributed electronic medical imaging system developed java applets web tools proceedings rd conference object oriented technologies systems usenix apr 
halstead jr multilisp language concurrent symbolic computation acm trans 
programming languages systems vol 
pp 
oct 
schmidt ipc sap object oriented interface interprocess communication services report vol 
november december 
pyarali harrison schmidt design performance object oriented framework highperformance electronic medical imaging usenix computing systems vol 
november december 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 
object management group common object request broker architecture specification ed feb 
box essential com 
addison wesley reading ma 
wollrath waldo distributed object model java system usenix computing systems vol 
november december 
schmidt levine design performance real time object request brokers computer communications vol 
pp 
apr 
schmidt flores gokhale alleviating priority inversion non determinism realtime corba orb core architectures proceedings fourth ieee real time technology applications symposium denver ieee june 
schmidt hu developing flexible highperformance web servers frameworks patterns acm computing surveys vol 

gill levine schmidt evaluating strategies real time corba dynamic scheduling submitted international journal time critical computing systems special issue real time middleware 
brooks mythical man month 
reading ma addison wesley 
jain schmidt experiences converting communication software framework java report vol 
january 
harrison levine schmidt design performance real time corba event service proceedings oopsla atlanta ga acm october 
schmidt stephenson experiences design patterns evolve system software diverse os platforms proceedings th european conference object oriented programming aarhus denmark acm august 

