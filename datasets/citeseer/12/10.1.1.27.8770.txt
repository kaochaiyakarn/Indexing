term graph rewriting detlef plump computing science institute csi september computing science institute nijmegen faculty mathematics informatics catholic university nijmegen toernooiveld ed nijmegen netherlands term graph rewriting detlef plump universitat bremen fachbereich mathematik und informatik postfach bremen germany det informatik uni bremen de term graph rewriting concerned representation functional expressions graphs evaluation expressions rule graph transformation 
representing expressions graphs allows share common subexpressions improving efficiency term rewriting space time 
efficiency term graph rewriting differs term rewriting properties termination confluence 
survey acyclic term graph rewriting emphasis relations term term graph rewriting 
focus soundness term graph rewriting respect term rewriting completeness proving validity equations computing term normal forms termination confluence term graph narrowing 
keywords term graph rewriting termination confluence term rewriting narrowing classification ams cr note appear handbook graph grammars computing graph transformation volume editors ehrig engels 
kreowski rozenberg world scientific 
partly written author visiting computing science institute university nijmegen 
support deutsche forschungsgemeinschaft gratefully acknowledged 
contents reduction systems term graphs hypergraphs term graphs collapsing copying bisimilarity bibliographic notes term graph rewriting term rewriting term graph rewriting incorporating collapsing copying bibliographic notes completeness simulating arbitrary term rewrite derivations graph reducibility bibliographic notes termination relation term rewriting combined systems recursive path order term graphs confluence relation term rewriting decidability combined systems plain term graph rewriting confluence modulo bisimilarity term graph narrowing term graph narrowing minimally maximally collapsing narrowing bibliographic notes topics term graph rewriting concerned representation functional expressions graphs evaluation expressions rule graph transformation 
representing expressions graphs motivated efficiency considerations 
consider example rewrite rules defining multiplication natural numbers denotes successor function natural numbers theta theta 
theta applying second rule expression form theta subexpression copied 
conspicuous expressions drawn trees theta theta copying expensive space time large expression 
worse evaluated necessary evaluate duplicated rewrite step 
obvious solution problem copying create pointers existing subexpression rewrite step looks follows theta theta resulting graph called term graph unique occurrence said shared 
evaluating occurrence correspond parallel evaluation occurrences expression theta sharing subexpressions saves space time wasted repeatedly evaluating equal subexpressions 
rewriting term graphs expressions come strings trees consequences efficiency issues 
certain rewrite sequences prevented subexpressions shared 
example may possible apply different rules position occurrences theta independent steps impossible shared 
result term graph rewriting may fail transform expression irreducible form 
happen rules 
see term graph rewriting differs conventional term rewriting properties termination confluence 
intends survey term graph rewriting scope restricted acyclic term graphs 
dealing acyclic graphs allows relate term graph rewriting rich theory term rewriting 
see textbook comprehensive survey term rewriting 
fact acyclic term graph rewriting seen sound implementation term rewriting accurately reflects properties real implementations 
application areas term term graph rewriting include theorem proving functional logic programming software specification computer algebra 
presentation stresses relations term term graph rewriting 
focus soundness term graph rewriting respect term rewriting completeness proving validity equations computing term normal forms termination confluence term graph narrowing 
topics briefly mentioned section 
keep survey concise proofs occasionally 

author wishes oliver dressler habel berthold hoffmann jan willem klop jurgen muller providing comments previous version 
reduction systems rewriting systems called reduction replacement systems means compute stepwise transformation objects 
objects may strings terms formulas graphs entities domain 
concerned rewriting systems domains terms term graphs 
concepts properties rewriting systems defined studied independently specific domains having advantage properties relations separated properties depending structure objects 
reduction systems sets binary relation representing elementary transformation steps 
studied time newman systematically applied influential papers rosen huet 
basic notions facts reduction systems collected 
concepts results example 
terminology literature completely uniform alternative terms parentheses 
definition reduction system reduction system ha consists set binary relation rest section ha arbitrary reduction system 
elements ha bi denoted inverse relation denoted binary relations written ffi definition identity relation fha ai ag 
reflexive closure relation 
fold composition relation ffi gamma 
transitive closure relation 
transitive reflexive closure relation 
symmetric closure relation 
equivalence closure 
convertibility respect denoted transitive reflexive closure 
elements convertible common reduct element normal form normal form normal form case normal form definition termination confluence properties relation terminating strongly normalizing noetherian exist infinite sequence form normalizing weakly normalizing element normal form church rosser see confluent see locally confluent weakly confluent see see convergent terminating confluent 
lemma termination implies normalization 
church rosser property equivalent confluence 
implies confluence 
confluence implies local confluence 
confluence implies uniqueness normal forms normal forms proof implications obvious 
church rosser property clearly implies confluence converse shown induction number steps constituting equivalence statement proved inductions showing second induction shows property implies confluence 
easy see follows 
ut ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl church rosser property confluence ffl ffl ffl ffl ffl ffl ffl ffl local confluence confluence properties notice statement confluent relation element normal form 
converses implications hold 
shows known counterexample converse viz 
locally confluent normalizing relation confluent 
result local confluence confluence equivalent presence termination 
see short proof fact 
lemma newman lemma terminating relation confluent locally confluent 
ffl ffl ffl ffl local confluence confluence term graphs graphs represent expressions defined various ways 
acyclic hypergraphs hyperedges labelled function symbols variables 
node term graph represents formed expression term 
see term set term graph representations forms complete lattice suitable partial order 
hypergraphs term graphs sigma set function symbols sigma comes natural number arity 
function symbols arity called constants 
infinite set variables sigma define arity hypergraph sigma system lab att consisting finite sets vg nodes vertices hyperedges labelling function lab sigma attachment function att assigning string nodes hyperedge length att arity lab 
sequel hypergraphs hyperedges simply called graphs edges 
edge att node result node argument nodes 
result node possibly empty string denoted res arg respectively 
path alternating sequence hv nodes positive integers unique edge res gamma th node arg 
say path node reachable node path graph acyclic contain path node occurs twice 
definition term graph graph term graph node root node reachable acyclic node result node unique edge 
shows term graph binary function symbols theta unary function symbol constant variable representation left edges depicted boxes inscribed labels bullets represent nodes 
line connects edge result node arrows point argument nodes 
left right order arrows leaving box corresponds order argument nodes 
right term graph depicted alternative compact way 
formats represent term graphs graphically 
theta theta theta theta term graph depicted different ways term sigma variable constant string function symbol arity terms 
subterms term subterms definition term representation node term graph represents term lab term unique edge res arg understood arg empty means lab 
denote root term 
note recursion definition ends term graphs acyclic 
example term graph term theta theta infix notation theta term reads theta theta graph morphism graphs consists functions fv vg vh fe eh preserve labels attachment nodes lab ffif lab att ffif ffi denotes function composition maps string fv fv 
morphism injective surjective fv fe 
injective surjective isomorphism 
case isomorphic denoted usually want distinguish isomorphic term graphs 
example convenient deal tree representation term infinite class isomorphic trees easier handle confluence confluence isomorphism 
achieve technically may isomorphism classes term graphs loses access nodes edges 
pursue alternative solution introduce standard term graphs serve unique representatives isomorphism classes 
idea number nodes term graph canonical way similar numbering positions terms see example 
node term graph access path possibly empty sequence positive integers hi exists path hv root denote acc set access paths definition standard term graph term graph standard term graph acc node res edge example naming nodes standard term graph 
term graph construct isomorphic standard term graph replacing node acc modifying edge set labelling attachment functions correspondingly 
graph morphism term graphs fv root root acc acc fv node implies property showing isomorphism class term graphs contains exactly standard term graph 
fh ig fh ig fh ig fh ig standard term graph lemma standard term graphs tacitly assume dealing standard term graphs 
collapsing copying bisimilarity conditions definition graph morphism term graphs surjective fv root root case seen collapsed compressed version definition collapsing copying term graphs collapses graph morphism mapping root root denoted morphism non injective kind collapsing said proper 
inverse relation collapsing called copying denoted proper copying denoted oe inverse relation proper collapsing 
examples collapsing copying 
lemma term graphs implies term term 
proof graph morphism mapping root root show induction node 
consider unique edge res arg suppose lab term oe collapsing copying lab term res res 
ut induction principle just allows show property holds nodes term graph 
principle called bottom induction follows edges show holds res holds nodes arg 
frequently term graphs minimal maximal sharing 
definition tree fully collapsed term graph term graph tree oe fully collapsed example middle graph fully collapsed 
characterization trees fully collapsed term graphs easy verify 
lemma term graph tree unique path root node 
term graph fully collapsed nodes implies lemma proved 
lemma term graph unique tree mg unique fully collapsed term graph og mg og mg og normal forms respect oe note lemma mg og represent term 
definition bisimilarity term graphs bisimilar denoted term term 
graphs instance bisimilar outer graphs related collapsing copying 
notion bisimilarity stems theory concurrency see example adopted term graphs 
term graph call set fg bisimilarity class class partially ordered theorem term graph complete lattice 
clearly mg og greatest element respectively 
bisimilarity characterized follows 
corollary term graphs equivalent 
mg mh 
og oh 
term write mt ot unique tree fully collapsed term graph representing respectively 
mg og term graph bibliographic notes term graphs defined special case called introduced 
defined requiring conditions definition roots need connected 
function symbols equipped list argument sorts result sort sorts represented node labels 
results graph rewriting refer 
literature exists variety definitions term graphs 
hypergraphs directed graphs terms labels recursion equations underlying structures 
acyclic graphs dealt consider cyclic graphs 
equipping function symbols additional labels sharing different occurrences subterm term expressed identical labels 
labelled terms correspond acyclic term graphs studied 
systems recursion equations realize finite infinite terms sharing 
complexity collapsing arbitrary term graphs fully collapsed time log size term graphs 
bound reduces term graphs finite sets function symbols variables 
see 
term graph rewriting section define transformation term graphs applications term rewrite rules introducing notion term graph rewriting 
fundamental property computational model soundness respect term rewriting 
consider addition collapse copy steps rewriting modulo bisimilarity 
collapsing speeds evaluation term graphs considerably show example 
term rewriting recall basic concepts term rewriting systems 
comprehensive reader may consult textbook surveys 
sigma set terms sigma substitution mapping oe sigma sigma oe constant oe oe oe composite term 
term rewrite rule pair hl ri terms written variable variables occur rule left linear resp 
right linear variable occurs resp 

term rewriting system sigma ri consists set sigma function symbols set rules sigma term rewriting system left linear resp 
right linear rules 
definition term rewriting rewrite relation sigma induced term rewriting system defined follows rule substitution oe oe subterm obtained replacing occurrence oe oe 
considerations aim fundamental result linking term rewriting logic 
show term rewriting complete method proving equation consequence equational specification having form term rewriting system 
algebra sigma consists non empty set da distinguished elements da constants sigma ary functions fa da function symbols sigma arity 
assignment valuation mapping da extended mapping sigma da sending constants composite terms fa 
equation pair hl ri terms written valid algebra assignments da words stands formula predicate logic equality variables occurring equational specification set equations 
model equational specification algebra equations valid 
write equation consequence valid models term rewriting system equational specification vice versa speak models validity models 
fundamental result due birkhoff see 
theorem completeness term rewriting terms validity models coincides convertibility term rewriting 
undecidable general result provides decision procedure equational validity case finite confluent terminating rewrite relation 
case suffices rewrite long possible obtaining unique normal forms 

term graph rewriting subsection define application term rewrite rules term graphs 
rule term graph find left hand side technically amounts find graph morphism starting graph representation repeated variables shared 
definition term term graph representing variables shared 
graph morphism mt distinct edges fe fe lab lab graph resulting removing edges labelled variables denoted 
example shows graphs mf sigmaf sigmaf 
note graph term graph definition 
may regarded term graph open node 
graphs regarded term graphs term graphs open nodes said closed 
graphs mf sigmaf sigmaf node term graph denote standard term graph isomorphic subgraph consisting nodes reachable edges having nodes result nodes 
definition instance redex term graph instance term graph morphism sending root root node term graph term rewrite rule pair hv ri redex instance call subgraph redex ambiguity applied rule irrelevant 
definition term graph rewriting term graph containing redex hv ri 
proper rewrite step term graph constructed follows gamma feg graph obtained removing unique edge satisfying res 
graph obtained disjoint union ffl identifying root ffl identifying image res res pair theta lab lab term graph obtained removing nodes edges reachable root garbage collection 
denote rewrite step simply example shows intermediate steps construction term graph rewrite step 
term rewrite rule applied theta 
theta theta 
shaded nodes edges belong occurrences sigmax theta sigma theta theta respectively 
note variables correspond node graph morphism sigmax theta identifies nodes representing theta theta theta theta theta intermediate steps construction term graph rewrite step term graph rewrite relation sound respect term rewriting sense proper step corresponds sequence applications parallel application occurrences subterm term 
explains possible gain time efficiency passing term rewriting term graph rewriting 
theorem soundness term graphs implies term term precisely unique standard term graph isomorphic term graph constructed step 
precisely term term number paths root proof result 
example consider application rule shown 
note graph sigmax single node identified root redex result node edge labelled 
paths root left graph root redex term graph rewrite step corresponds threefold term rewrite step theta 
theta theta theta application rule incorporating collapsing copying section see term rewriting derivations simulated derivations 
incompleteness partly overcome allowing proper collapse copy steps applications term rewrite rules 
completeness respect term rewriting achieved adding collapsing copying rewriting modulo bisimilarity 
topic discussed section 
subsection define mentioned extensions example collapsing speeds evaluation term graphs relate rewriting collapsing 
definition coll copy bi relations coll copy bi term graphs defined follows coll copy oe bi oe refer coll copy bi plain term graph rewriting term graph rewriting collapsing term graph rewriting copying term graph rewriting collapsing copying respectively 
relations coll copy bi sound sense theorem replace 
lemma collapse copy steps change term represented term graph 
note bi contains bisimilarity implies mg see lemma corollary 
example certain cases collapsing speed evaluation processes drastically 
prime example specification fibonacci function fib fib fib fib fib rules evaluating term form fib term rewriting requires number rewrite steps exponential see 
easily observes number steps needed plain term graph rewriting 
replacing coll possible evaluate fib linear number steps 
evaluation strategy described follows collapse steps priority proper rewrite steps produce fully collapsed term graphs 
fib redexes representing greater number reduced 
see illustration strategy 
difficult verify procedure evaluates fib steps viz 
proper rewrite steps collapse steps 
section show apart speeding evaluation collapsing necessary cope non left linear rewrite rules 
rules coll simulated follows 
theorem left linear term graphs coll implies term graph theorem corollary result showing coll derivation transformed called minimally collapsing derivation 
conclude subsection introducing rewriting modulo bisimilarity collapsing copying built sense rewrite steps transform bisimilarity classes term graphs 
fib 
fib fib 
fib fib fib 
fib fib 

collapsing speed evaluation definition rewriting modulo bisimilarity relation bisimilarity classes defined follows term graphs refer term graph rewriting modulo bisimilarity 
example exists rewrite step bisimilarity classes second fourth term graph 
term graph rewriting modulo bisimilarity generalizes term rewriting term graphs term term implies implies term term 
bibliographic notes term graph rewriting studied shown nonoverlapping rules give rise rewrite relation 
name term graph rewriting introduced 
focusses normalizing strategies states soundness left linear rules 
term graph rewrite rules considered operate possibly cyclic term graphs 
application rule involves redirection edges pointing root left hand side root right hand side 
alternative transitive version redirection investigated 
approach extended allowing choose rewrite step structure sharing schemes perform certain collapsing copying 
soundness respect certain kind infinite term rewriting shown left linear left finite left acyclic term graph rewrite rules 
see subsection evaluated rules conforming double pushout approach graph rewriting 
evaluation rules obtained translating term rewrite rules application corresponds effect steps definition garbage collection 
collapse steps called folding steps specified suitable graph rewrite rules 
relation jungle evaluation setting discussed 
similar jungle evaluation rewrite steps defined pushouts 
difference considers category category hypergraphs 
implicitly enforces kind minimal collapsing evaluation steps non left linear term rewrite rules 
categorical treatment garbage collection 
description term graph rewriting category 
completeness section consider completeness term graph rewriting simulating arbitrary term rewrite derivations subsection computing term normal forms subsection 
see general coll copy incomplete respects 
relations complete sense term rewriting proving validity equations compute term normal forms certain subclasses term rewriting systems 
simulating arbitrary term rewrite derivations theorem know term graph rewrite derivation corresponding term rewrite derivation term term 
examples show converse hold extend coll copy example obstacle completeness plain term graph rewriting non left linear term rewrite rules 
instance rule eq true applied tree graph morphism see 
reducible copy represented term reducible 
shows overcome problem collapsing identifying occurrences enables subsequent application rewrite rule 
eq eq eq true collapsing enable rule application example left linear systems certain term rewrite derivations correspond derivations coll consider example rules derivation simulated coll application rule leads shared constant see 
time simulate term rewrite derivation applications rules copy shown 
oe copy derivation examples show general collapsing copying needed simulate term rewrite derivations 
reflected lemma 
lemma simulation term rewrite steps term rewrite step term graphs mt mu illustrate lemma consider rule left linear right linear 
admits term rewrite step shows simulate step term graph rewriting 
general subtree mt corresponding replaced subterm oe compressed necessary apply term rewrite rule 
resulting graph contains path root redex application rule simulates single term rewrite step 
lemma straightforward show sequence term rewrite steps simulated collapsing copying 
oe simulation term rewrite step theorem completeness bi term graphs equivalent term term 
bi 

proof definitions bi clear implies implies soundness 
remains show implies 
lemma term rewrite step derivation mt bi mu 
induction length derivations term term implies bi 
follows bi ut equivalence remains valid replace respectively 
contrast bi collapse copy step term term hold general 
combining completeness bi observation bi coll copy obtain corollary theorem 
corollary completeness coll copy term graphs equivalent term term 
coll 
copy equation valid models sequence coll respectively copy steps term graphs representing words term graph rewriting collapsing copying complete proving equational validity sense term rewriting cf 
theorem 
decision procedure equational validity described theorem replaced corresponding procedure coll copy say coll convergent represents terms equation term graphs reduces normal forms coll equation valid resulting normal forms equal 
note plain term graph rewriting lacks kind completeness example conversion eq true valid equation example exist conversion mf mg 
graph reducibility previous subsection saw coll copy able simulate arbitrary term rewrite derivations 
relax requirement consider derivations normal forms 
definition graph reducibility term rewriting system graph reducible binary relation term graphs holds term graph normal form respect term normal form term respect 
term normal form respect normal form respect system strongly graph reducible satisfies term graph normal form term normal form representing condition ensures soundness sense derivation normal form computes term normal form 
condition expresses completeness term graph normal form represented term 
example know non left linear systems copy general feq trueg tree normal form respect copy eq reducible hand see system ff bg example graph reducible coll copy definition non overlapping orthogonal systems term overlaps term subterm variable substitutions oe oe 
term rewriting system non overlapping rules overlaps subterm 
non overlapping additionally left linear orthogonal system 
theorem orthogonal term rewriting system graph reducible 
fact orthogonal systems strongly graph reducible known term normal form respect 
see left linearity sufficient graph reducibility extend system ff bg rules 
easily check mf normal form reduces term normal form results establish graph reducibility coll classes systems need left linear non overlapping 
graph reducibility holds certain restricted forms term rewriting derivations suffice normalize terms 
define parallel rewrite relation sigma modifying clause definition follows obtained replacing occurrences oe oe 
call term rewriting system normalizing term having normal form normal form class normalizing systems includes example orthogonal terminating term rewriting systems 
theorem normalizing term rewriting system graph reducible coll term rewrite step innermost step proper subterms replaced subterm oe normal forms 
term rewriting system innermost normalizing term rewritten normal form sequence innermost rewrite steps 
classes innermost normalizing normalizing term rewriting systems incomparable see 
theorem innermost normalizing term rewriting system graph reducible coll conclude subsection considering graph copy result follows fact term rewrite rules left linear term rewrite derivation term graph rewrite derivation mt copy mu see 
theorem left linear term rewriting system strongly graph reducible copy bibliographic notes completeness coll proving equational validity shown 
considered lifting certain term rewrite strategies setting term graph rewriting studied 
stronger notion graph reducibility adequacy treated 
definition adequacy tailored orthogonal systems requires term rewrite sequence extended sequence corresponds term graph rewrite sequence 
shown adequate orthogonal systems orthogonal term graph rewriting possibly cyclic graphs adequate certain kind infinitary orthogonal term rewriting 
termination reasons termination important property rewriting systems 
rewrite relation term graphs known terminating term graph reduced normal form simply performing arbitrary rewrite steps long possible 
properties generally undecidable decidable presence termination 
example transitive closure coll question coll confluent decidable provided finite 
coll terminating confluent gives rise decision procedure equational validity models see corollary 
relation term rewriting compare termination term term graph rewriting 
see class terminating term rewriting systems properly included class systems coll terminating 
restricting attention right linear systems termination coll equivalent termination 
consequence undecidability termination carries term rewriting term graph rewriting 
theorem consequence soundness fact oe terminating relations 
theorem terminating coll copy terminating 
note result hold bi collapsing copying may infinite sequence alternating collapse copy steps 
reverse theorem holds copy require left linear system ff counterexample 
worth noting theorem wide range techniques proving termination term rewriting see example prove termination term graph rewriting 
example demonstrates term graph rewriting form coll terminates term rewriting 
example consider rules term rewriting terminating infinite rewrite sequence contrast coll terminating 
proved means function term graphs natural numbers 
term graph define number labelled edges argument nodes distinct number labelled edges number nodes difficult check step coll 

sequence coll steps sequence steps eventually terminate 
rest section concentrate term graph rewriting collapsing 
just proof theorem left linear terminating coll terminating 
theorem right linear coll terminating terminating 
proof direction contained theorem 
direction follows proof lemma 
collapsing chosen garbage collection phase rewrite step removes edge shared argument node meaning node argument node edge appears argument string 
right linearity inserted graph tree right hand side applied rewrite rule 
follows mu 
term rewrite sequence simulated sequence coll steps implies proposition 
ut corollary problem undecidable general instance finite term rewriting system question coll terminating 
proof known undecidable general finite right linear term rewriting system terminating see 
theorem termination coll decidable 
ut combined systems proving termination term term graph rewriting difficult task unsolvable general 
desirable method handling possibly large system decomposing subsystems proving termination separately 
approach needs criteria ensuring union terminating systems terminating 
may fail seen putting terminating systems fa bg fb ag yielding non terminating system 
worse toyama showed disjoint union terminating term rewriting systems need terminating 
gave counterexample 
example systems phi ae disjoint function symbols terminating 
union admits infinite rewrite sequence 

toyama observation stimulated researchers establish sufficient conditions disjoint union term rewriting systems preserves termination see 
interesting fact conditions needed case term graph rewriting 
termination coll behave modular respect disjoint unions 
demonstrate toyama example try simulate infinite term rewrite sequence shown 
starting tree mf obtains terminating derivations shown 
terminating derivations crucial point application rule 
term rewriting rule produces copies subterm evaluated independently 
contrast term graph rewriting yields shared occurrence subterm preventing applied 
see termination coll composed system guaranteed function symbols shared left hand sides respectively right hand sides definition disjointness term rewriting systems disjoint function symbols left hand sides rules occur right hand sides rules gammai 
example systems disjoint ae ae write relation coll term rewriting system theorem union disjoint term rewriting systems 
terminating terminating 
main motivation result facilitate termination proofs 
sharpen corollary obtaining stronger undecidability result termination 
corollary problem undecidable general instance finite term rewriting system terminating 
question terminating 
proof problem decidable decide termination arbitrary finite systems follows 
construct disjoint union ff bg 
example theorem non terminating term rewriting system terminating terminating 
problem decidable decide terminating 
contradicts corollary 
ut coming back question composed system inherits termination components consider alternative disjointness 
condition partitioning set function symbols defined symbols constructors leftmost symbols left hand sides rules remaining symbols 
definition constructor sharing term rewriting systems constructor sharing defined symbols occur gammai 
proof result framework called term rewriting holds setting 
theorem union constructor sharing term rewriting systems 
terminating terminating 
extended version result additionally allows share defined symbols occur right hand side 
form result generalizes theorem 
general result refrain stating technically involved premise 
find condition general disjointness guaranteeing normalization coll preserved combinations systems 
recursive path order term graphs previous subsections seen examples non terminating term rewriting systems coll terminating 
raises question termination proof techniques covering systems 
subsection introduce recursive path order term graphs analogy known order terms demonstrate proving termination coll exposition class simplification orders term graphs established extending kruskal tree theorem trees term graphs 
definition top immediate subgraphs term graph unique edge att root nodes top denoted top subgraph consisting nodes root term graphs immediate subgraphs denote multiset fg recall preorder reflexive transitive relation strict order irreflexive transitive 
terminating strict order said founded 
recursive path order term graphs parameterized preorder tops called precedence 
definition precedence set tops function symbols sigma denoted tops sigma precedence preorder tops sigma strict part equivalence part defined gamma 
example shows precedence function symbols example 
define recursive path order recall lifting order precedence multiset order 
strict order set multiset extension mul set finite multisets defined follows mul multisets gamma definition sigma denotes set variable free term graphs sigma 
definition recursive path order precedence 
recursive path order rpo sigma defined inductively follows rpo rpo immediate subgraph note convention deal standard term graphs tops tops sigma pairwise non isomorphic 
top top rpo immediate subgraphs top top mul rpo general variant recursive path order equality top top replaced top top equality relaxed similarly 
theorem recursive path order founded underlying precedence founded 
derive result proof technique termination coll consider precedences containing collapsing tops 
definition precedence collapse compatible graph morphism tops sigma founded precedence 
precedence example precedence 
recall theorem term graph instance term root preserving graph morphism variable free instance called ground instance 
theorem rpo induced precedence 
coll terminating root implies rpo rule ground instance precedence convince rewrite rules example satisfy condition theorem 
obtain alternative proof termination coll system 
give example recursive path order 
example consider rewrite system true false true true false term rewriting terminating seen follows true false true true true true false termination coll easily checked means theorem precedence 
true false precedence example confluence important consequence completeness coll equational proofs corollary coll convergent validity equations decided coll reduction procedure 
section take look relation coll respect confluence just opposite relation respect termination confluence coll strictly implies confluence 
respect convergence relation case termination 
coll convergent systems 
issues address decidability modularity confluence confluence plain term graph rewriting confluence modulo bisimilarity 
relation term rewriting start counterexamples demonstrate confluence term rewriting implies confluence confluence coll example suppose follows structural induction terms shown term unique normal form 
term rewriting normalizing confluent 
shows normalizing confluent 
applies coll collapse step mg og essentially change situation 
problem sharing created rule prevents rewrite step necessary reduce example case coll confluence guaranteed orthogonal rule system 
consider rule interesting note system independently invented counterexample completeness term basic narrowing 
non confluence coll suppose sigma contain binary function symbol shows coll derivations starting mg resulting graphs common reduct 
graphs derivable left represent terms graphs derivable right represent 
oe non confluence coll mentioned confluence behaves opposite termination carries coll 
fact straightforward proof completeness coll term convertibility 
theorem coll confluent confluent 
proof coll confluent consider terms choose term graphs term term corollary gives coll confluence term graph coll coll note confluence equivalent church rosser property see lemma 
soundness coll implies term confluent 
ut result holds analogously local confluence 
note example coll locally confluent 
despite fact confluence carry term term graph rewriting normal forms respect coll unique term normal forms unique 
words possible non confluence coll confluent term rewriting system impact uniqueness normal forms 
prove need lemma 
lemma term graph normal form respect coll fully collapsed term normal form respect 
recall reduction system ha unique normal forms normal forms theorem relation coll unique normal forms unique normal forms 
proof coll unique normal forms 
consider term normal forms ot coll ou completeness coll lemma ot ou normal forms respect coll uniqueness normal forms ot ou 
corollary follows conversely suppose unique normal forms 
term graph normal forms coll term term soundness coll terms normal forms lemma 
uniqueness normal forms gives term term 
uniqueness fully collapsed term graphs lemma 
ut consequence result confluence carries term rewriting coll normalizing 
particular coll convergent term rewriting convergent 
corollary suppose coll normalizing 
coll confluent confluent 
convergent coll convergent 
proof direction contained theorem 
conversely coll normalizing confluent 
implies unique normal forms see lemma 
theorem coll unique normal forms 
easy verify normalizing relation unique normal forms confluent 
theorem termination implies termination coll particular coll normalizing 
confluence carries coll ut example shows converse second part corollary hold 
class term rewriting systems coll convergent strictly contains class convergent term rewriting systems 
example consider system shown term unique normal form implying term rewriting confluent 
terminating infinite rewrite sequence recursive path order induced precedence difficult see theorem ensures termination coll corollary guarantees coll confluent convergent 
precedence example decidability combined systems analogously situation term rewriting termination coll implies confluence decided analysis called critical pairs 
state decidability confluence entering technicalities critical pairs term graph rewriting 
theorem algorithm solves problem instance finite term rewriting system coll terminating 
question coll confluent 
note combination result corollary coll terminating confluence term rewriting decidable 
consider confluence coll combined systems 
contrast confluence term rewriting confluence coll modular property 
fact confluence may destroyed just extending set sigma function symbols 
seen example coll confluent sigma fa fg 
adding binary symbol confluence breaks 
see convergence coll preserved union disjoint systems left hand sides mutually overlap 
definition non interfering systems term rewriting system non interfering left hand side overlaps left hand side gammai 
subsection write relation coll term rewriting system theorem union disjoint non interfering term rewriting systems 
convergent convergent 
result extended relaxing disjointness 
preservation convergence contrasts situation term rewriting disjoint unions need preserve property 
counterexample 
example consider systems disjoint function symbols ae shown term rewriting convergent systems 
union terminating theorem shows convergent convergent corollary 
particular exhaustive rewrite sequence starting mf ends unique normal form 
plain term graph rewriting confluence modulo bisimilarity far concentrated confluence term graph rewriting collapsing 
subsection presents confluence results plain term graph rewriting relations bi 
theorems reader may wish look definition introduces orthogonal systems 
theorem orthogonal 
result proved technical framework slightly differs 
proof shows larger class non overlapping term rewriting systems 
non overlapping systems virtually significant class systems confluent 
example need confluent left linear convergent term rewriting systems 
example left linear system clearly convergent term rewriting shows plain term graph rewriting confluent 
example suggests consider version confluence joining derivations need graph bisimilar graphs 
non confluence definition confluence modulo bisimilarity binary relation term graphs confluent modulo bisimilarity term graphs plain term graph rewriting confluence modulo bisimilarity confluence incomparable 
properties hold orthogonal systems 
theorem orthogonal confluent modulo bisimilarity 
worth mentioning orthogonal generalized nonoverlapping 
ensure confluent modulo bisimilarity confluent non orthogonal term rewriting system normalizing 
theorem left linear confluent normalizing confluent modulo bisimilarity 
normalization relaxed normalization witnessed example left linearity dropped 
result strengthened church rosser modulo bisimilarity see 
result section shows bi confluent exactly confluent term rewriting systems 
theorem equivalent bi confluent 
confluent 
confluent 
mention coll copy bi confluence modulo bisimilarity equivalent confluence 
generally applies relation term graphs transitive closure contains oe see 
term graph narrowing narrowing combines term rewriting unification order solve equations equation goal generate substitution oe oe oe 
narrowing originates area theorem proving operational principle combining functional logic programming 
see survey application 
section study term graph narrowing graph form narrowing combines term graph rewriting term unification 
case rewriting motivation sharing collapsing common subexpressions improve efficiency computations time space 
narrowing said complete solution equation generate solution general 
conventional narrowing complete term rewriting normalizing confluent term graph narrowing require coll normalizing confluent 
subsection discuss completeness restricted forms term graph narrowing called minimally collapsing maximally collapsing narrowing 
presentation 
term graph narrowing need substitutions replacing variables term graphs term graphs 
pair consisting variable term graph substitution pair 
applied labelled edge term graph removing adding identifying res root definition term graph substitution term graph substitution finite set ff fx substitution pairs pairwise distinct term term graph applying simultaneously edges labelled yields term graph hff 
domain ff set dom ff fx composition term graph substitutions fi defined fffi fx ff term fy fi dom ff satisfy fffi hff fi term graph term graph substitution ff induces term substitution ff term sigma sigma mapping term variable 
term substitution oe term write toe place oe 
may represent oe set fx oe xoe variable variant term rewrite rule rule form loe roe oe injective substitution mapping variables variables 
set terms ft unifiable substitution oe oe oe delta delta delta oe 
case oe chosen general unifier meaning substitution delta delta delta exists substitution ae ae ffi oe see example 
definition term graph narrowing term graphs set non variable nodes variant rule ff term graph substitution 
narrowing step ff ff term general unifier ug flg gff collapsing gff fv vg 
denote step ff term graph narrowing derivation sequence form ff ff ff gamma may denoted ff ff ff ff ff gamma ff 
assume contains rule true binary symbol constant true occur rule 
goal term form contain true 
solution goal substitution oe satisfying soe toe equivalently soe toe 
example consist rules theta theta 
theta true suppose want solve goal theta theta 
shows term graph narrowing derivation starting fully collapsed term graph representing goal 
table derivation gives applied rewrite rules involved term substitutions 
step set definition singleton 
note steps steps step consists collapse step followed step 
derivation computes term substitution fx restricting substitution variables goal yields solution fz solving goal term narrowing requires steps demonstrating term graph narrowing speed computation solutions 
substitutions oe write oe xoe oe substitution ae oeae 
set variables occurring term graph denoted var var lab theorem soundness completeness narrowing term graph term goal 
ff ff term solution 
coll normalizing confluent solution oe exists narrowing derivation fi fi term oe var 
sequel refer statement completeness term graph narrowing 
example example shows term narrowing complete general confluent normalizing term rewriting system term narrowing complete systems 
counterexample system example adding rule true term rewriting remains normalizing confluent 
reducible empty substitution solution goal demonstrates term graph narrowing variable free goal just combination collapsing rewriting solve goal note example coll normalizing confluent see confluence 
theta theta true step rewrite rule substitution theta 
theta fy theta fx fx fx fx 
true fx term graph narrowing derivation incompleteness term graph narrowing minimally maximally collapsing narrowing subsection consider completeness restricted forms term graph narrowing steps contain minimal maximal collapsing respectively 
definition minimal collapsing collapsing minimal respect redex hv ri term graph preimage pair hv ri redex 
particular equals minimal exists 
proper collapsing minimal left linear applied preimage definition minimally collapsing narrowing term graph narrowing derivation minimally collapsing narrowing step 
gff collapsing gff minimal respect redex hv ri 
example derivation minimally collapsing 
note minimally collapsing step ff set singleton 
turns theorem strengthened replacing unrestricted term graph narrowing minimally collapsing narrowing 
theorem completeness minimally collapsing narrowing minimally collapsing narrowing complete coll normalizing confluent 
turn maximally collapsing narrowing consider narrowing derivations involved collapse steps yield fully collapsed term graphs 
definition maximally collapsing narrowing term graph narrowing derivation maximally collapsing narrowing step 
gff term graph fully collapsed 
example consider rules exp exp exp exp specifying function exp 
natural numbers 
demonstrates maximally collapsing narrowing solve goal form exp delta delta delta times steps goal suitably represented 
substitutions represented parts affecting variables graphs 
contrast treebased narrowing minimally collapsing narrowing need number steps exponential solve goal 
minimally collapsing narrowing complete term graph rewriting normalizing confluent counterexample shows case maximally collapsing narrowing 
example consider term rewriting system true coll normalizing confluent shown induction size term graphs 
tree mg reduced normal form mb proper rewrite steps preceded maximal collapse steps shown 
follows maximally collapsing narrowing solve goal clearly equivalent 
completeness maximally collapsing narrowing ensured strengthening normalization termination 
exp 
times 


xn 

true maximally collapsing narrowing derivation incompleteness maximally collapsing narrowing theorem completeness maximally collapsing narrowing maximally collapsing narrowing complete coll convergent 
note corollary result maximally collapsing narrowing complete convergent term rewriting systems 
bibliographic notes definition term graph narrowing introduced 
extends definition corresponds special case nodes set represent term 
studies basic term graph narrowing analogue basic term narrowing 
roughly speaking strategy forbids narrowing steps nodes created substitutions previous steps 
turns minimally collapsing basic narrowing complete coll innermost normalizing confluent theorem holds maximally collapsing basic narrowing 
basic narrowing term graphs addressed kind narrowing going back provide collapsing application unifier rewrite step 
consequence narrowing incomplete non left linear system ff ag consider example goal 
narrowing conditional rewrite rules considered 
narrowing steps jungle pushouts leading kind minimally collapsing narrowing 
results aim showing correctness concrete implementation conditional narrowing 
narrowing possibly cyclic term graphs studied optimal strategy class constructor orthogonal term rewriting systems 
topics briefly mention topics term graph rewriting discussed preceding sections 
optimality reduction strategies sense finding normal form minimal number steps investigated 
essential considerations plain term graph rewriting orthogonal systems 
papers describing implementations term graph rewriting 
socalled concurrent term rewriting addressed deal term graph rewrite language 
report implementation enforces full collapsing 
aspects term graph rewriting relevant design implementation analysis functional programming languages discussed 
technique memoization keeps computed values realized term graph rewriting 
shown simulate logic programming term graph rewriting 
survey restricted acyclic term graphs finitary term rewriting may consider cyclic graphs infinitary term rewriting 
interested reader may consult 
issues considered term graph rewriting conditional term rewriting systems relation term graph rewriting event structures term generating power context free jungle grammars 
area graph reduction lambda calculus related term graph rewriting scope survey 
information topic refer 
harold abelson gerald jay sussman 
structure interpretation computer programs 
mit press 
ariola 
relating graph term rewriting bohm models 
applicable algebra engineering communication computing 
ariola arvind 
properties order functional language sharing 
theoretical computer science 
ariola jan willem klop 
equational term graph rewriting 
fundamenta informaticae 
ariola jan willem klop 
lambda calculus explicit recursion 
information computation 
ariola jan willem klop detlef plump 
bisimilarity term graph rewriting 
information computation 
appear 
ariola jan willem klop detlef plump 
confluent rewriting bisimilar term graphs 
proc 
fourth workshop expressiveness concurrency volume electronic notes theoretical computer science 
elsevier 
andrea asperti laneve 
interaction systems theory optimal reductions 
mathematical structures computer science 
jurgen 

springer verlag 
jurgen klaus 
term rewriting equational reasoning 
editor formal techniques artificial intelligence pages 
elsevier 
franz baader tobias nipkow 
term rewriting 
cambridge university press 
richard banach 
term graph rewriting garbage collection 
theoretical computer science 
richard banach 
fundamental issues design 
journal universal computer science 
richard banach 
transitive term graph rewriting 
information processing letters 
hendrik barendregt marko van eekelen john richard kennaway rinus plasmeijer ronan sleep 
term graph rewriting 
proc 
parallel architectures languages europe volume lecture notes computer science pages 
springer verlag 
ronald book friedrich otto 
string rewriting systems 
texts monographs computer science 
springer verlag 
david clark richard kennaway 
event structures non orthogonal term graph rewriting 
mathematical structures computer science 
andrea corradini frank 
cyclic term graph rewriting adequate rational parallel term rewriting 
technical report tr universit di pisa dipartimento di informatica 
andrea corradini fabio gadducci 
categorical presentation term graph rewriting 
proc 
category theory computer science volume lecture notes computer science 
springer verlag 
andrea corradini fabio gadducci 
rational term rewriting 
proc 
foundations software science computation structures volume lecture notes computer science pages 
springer verlag 
andrea corradini ugo montanari francesca rossi hartmut ehrig heckel michael lowe 
algebraic approaches graph transformation part basic concepts double pushout approach 
rozenberg editor handbook graph grammars computing graph transformation volume chapter pages 
world scientific 
andrea corradini ugo montanari francesca rossi hartmut ehrig michael lowe 
graph grammars logic programming 
proc 
graph grammars application computer science volume lecture notes computer science pages 
springer verlag 
andrea corradini francesca rossi 
hyperedge replacement jungle rewriting term rewriting systems logic programming 
theoretical computer science 
andrea corradini francesca rossi francesco parisi presicce 
logic programming hypergraph rewriting 
proc 
caap volume lecture notes computer science pages 
springer verlag 
andrea corradini dietmar 
jungle rewriting description lazy narrowing machine 
proc 
graph transformations computer science volume lecture notes computer science pages 
springer verlag 
nachum dershowitz 
orderings term rewriting systems 
theoretical computer science 
nachum dershowitz 
termination rewriting 
journal symbolic computation 
nachum dershowitz jean pierre jouannaud 
rewrite systems 
jan van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier 
nachum dershowitz zohar manna 
proving termination multiset orderings 
communications acm 
peter downey ravi sethi robert tarjan 
variations common subexpression problem 
journal acm 
klaus 

informatik 
springer verlag 
rachid jean christophe 
admissible graph rewriting narrowing 
proc 
joint international conference symposium logic programming 
appear 
hartmut ehrig 
algebraic theory graph grammars 
proc 
graph grammars application computer science biology volume lecture notes computer science pages 
springerverlag 
hartmut ehrig barry rosen 
commutativity independent transformations complex objects 
research report rc ibm watson research center yorktown heights 
joost engelfriet linda 
context free hypergraph grammars term generating power attribute grammars 
acta informatica 
william farmer john ronald 
correctness proof combinator reduction cycles 
acm transactions programming languages systems 
william farmer ronald 
redex capturing term graph rewriting 
international journal foundations computer science 
philippe flajolet paolo jean marc steyaert 
analytic variations common subexpression problem 
proc 
automata languages programming volume lecture notes computer science pages 
springer verlag 
john richard kennaway ronan sleep 
experimental graph rewriting language 
proc 
graph grammars application computer science volume lecture notes computer science pages 
springer verlag 
joseph goguen claude kirchner jos meseguer 
concurrent term rewriting model computation 
proc 
graph reduction volume lecture notes computer science pages 
springer verlag 
bernhard gramlich 
generalized sufficient conditions modular termination rewriting 
applicable algebra engineering communication computing 
habel hans jorg kreowski detlef plump 
jungle evaluation 
proc 
trends data type specification volume lecture notes computer science pages 
springer verlag 
habel hans jorg kreowski detlef plump 
jungle evaluation 
fundamenta informaticae 
habel detlef plump 
unification rewriting narrowing term graphs 
proc 
joint workshop graph rewriting computation volume electronic notes theoretical computer science 
elsevier 
habel detlef plump 
term graph narrowing 
mathematical structures computer science 
habel detlef plump 
complete strategies term graph narrowing 
submitted publication 
ga 
compaction acyclic terms 
proc 
parallel architectures languages europe volume lecture notes computer science pages 
springer verlag 
michael hanus 
integration functions logic programming theory practice 
journal logic programming 
berthold hoffmann 
term rewriting sharing memoization 
proc 
algebraic logic programming volume lecture notes computer science pages 
springer verlag 
berthold hoffmann detlef plump 
jungle evaluation efficient term rewriting 
proc 
algebraic logic programming 
mathematical research pages berlin 
akademie verlag 
springer lecture notes computer science 
berthold hoffmann detlef plump 
implementing term rewriting jungle evaluation 
rairo theoretical informatics applications 
erard huet 
confluent reductions properties applications term rewriting systems 
journal acm 
erard huet dallas lankford 
uniform halting problem term rewriting systems 
report inria rocquencourt 
erard huet derek oppen 
equations rewrite rules survey 
ronald book editor formal language theory perspectives open problems pages 
academic press 
jean marie 
canonical forms unification 
proc 
th international conference automated deduction volume lecture notes computer science pages 
springer verlag 
matthias 
confluent string rewriting volume eatcs monographs 
springer verlag 
matthias 
basics term rewriting 
grzegorz rozenberg salomaa editors handbook formal languages volume chapter pages 
springer verlag 
stefan 
uniqueness implementation 
proc 
programming language implementation logic programming volume lecture notes computer science pages 
springerverlag 
richard kennaway 
graph rewritings 
theoretical computer science 
corrigendum theoretical computer science 
richard kennaway 
implementing term rewrite languages 
theoretical computer science 
richard kennaway 
graph rewriting categories partial morphisms 
proc 
graph grammars application computer science volume lecture notes computer science pages 
springerverlag 
richard kennaway jan willem klop ronan sleep fer jan de vries 
event structures orthogonal term graph rewriting 
term graph rewriting theory practice chapter pages 
john wiley 
richard kennaway jan willem klop ronan sleep fer jan de vries 
adequacy graph rewriting simulating term rewriting 
acm transactions programming languages systems 
richard kennaway jan willem klop ronan sleep fer jan de vries 
transfinite reductions orthogonal term rewriting systems 
information computation 
claude kirchner patrick 
implementing parallel rewriting 
proc 
programming language implementation logic programming volume lecture notes computer science pages 
springer verlag 
jan willem klop 
term rewriting systems 
abramsky dov gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
jan willem klop 
term graph rewriting 
proc 
higher order algebra logic term rewriting volume lecture notes computer science pages 
springer verlag 
donald knuth peter bendix 
simple word problems universal algebras 
leech editor computational problems algebras pages 
pergamon press 
krishna rao 
graph reducibility term rewriting systems 
proc 
mathematical foundations computer science volume lecture notes computer science pages 
springer verlag 
krishna rao 
completeness results basic narrowing implementations 
proc 
int 
joint conference symposium logic programming 
mit press 
krishna rao 
modularity termination term graph rewriting 
proc 
rewriting techniques applications volume lecture notes computer science pages 
springer verlag 
krishna rao 
modular aspects term graph rewriting 
theoretical computer science 
appear 
joseph kruskal 
quasi ordering tree theorem conjecture 
transactions american mathematical society 
kurihara azuma 
modularity term rewriting 
theoretical computer science 
michael lowe 
implementing algebraic specifications graph transformation systems 
journal information processing cybernetics eik 
luc 
optimal derivations weak lambda calculi orthogonal term rewriting systems 
proc 
annual acm symposium principles programming languages pages 
acm press 
middeldorp erik 
counterexamples completeness results basic narrowing extended 
proc 
algebraic logic programming pages 
springer lecture notes computer science 
middeldorp erik 
completeness results basic narrowing 
applicable algebra engineering communication computing 
robin milner 
communication concurrency 
prentice hall international 
newman 
theories combinatorial definition equivalence 
annals mathematics 
ohlebusch 
modularity termination term rewriting systems 
theoretical computer science 
ohlebusch 
conditional term graph rewriting 
proc 
algebraic logic programming volume lecture notes computer science pages 
springer verlag 
peter 
graph grammars operational semantics 
theoretical computer science 
david plaisted 
equational reasoning term rewriting systems 
dov gabbay hogger robinson editors handbook logic artificial intelligence logic programming volume pages 
clarendon press 
rinus plasmeijer marko van eekelen 
functional programming parallel graph rewriting 
addison wesley 
detlef plump 
graph reducible term rewriting systems 
proc 
graph grammars application computer science volume lecture notes computer science pages 
springer verlag 
detlef plump 
implementing term rewriting graph reduction termination combined systems 
proc 
conditional typed rewriting systems volume lecture notes computer science pages 
springerverlag 
detlef plump 
collapsed tree rewriting completeness confluence modularity 
proc 
conditional term rewriting systems volume lecture notes computer science pages 
springer verlag 
detlef plump 
evaluation functional expressions hypergraph rewriting 
dissertation universitat bremen fachbereich mathematik und informatik 
detlef plump 
critical pairs term graph rewriting 
proc 
mathematical foundations computer science volume lecture notes computer science pages 
springer verlag 
detlef plump 
simplification orders term graph rewriting 
proc 
mathematical foundations computer science volume lecture notes computer science pages 
springer verlag 
jean claude 
graph rewritings 
theoretical computer science 
barry rosen 
tree manipulating systems church rosser theorems 
journal acm 
ronan sleep rinus plasmeijer marko van eekelen editors 
term graph rewriting theory practice 
john wiley 
john staples 
computation graph expressions 
theoretical computer science 
john staples 
optimal evaluations graph expressions 
theoretical computer science 
john staples 
speeding subtree replacement systems 
theoretical computer science 
toyama 
counterexamples termination direct sum term rewriting systems 
information processing letters 
toyama 
church rosser property direct sum term rewriting systems 
journal acm 

