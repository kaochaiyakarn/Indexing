high level modeling parallel executions nested loop algorithms ed edwin leiden university ca leiden netherlands nl bart university california berkeley ca usa eecs berkeley edu paul delft university technology cd delft netherlands cas tudelft nl high level modeling quantitative performance analysis signal processing systems requires high level models applications algorithms implementations architecture mapping simulator fast execution 
signal processing algorithms nested loop algorithms high degree inherent parallelism 
presents applications suitable application models method convert imperative executable specification specification terms method map specification architecture specification terms method analyze performance simulation 
methods tools illustrated means example 
new kind embedded architectures emerging composed microprocessor memory number dedicated coprocessors linked kind programmable interconnect see 
architectures devised real time high performance signal processing applications 
examples new architectures architecture architecture architecture respectively video consumer appliances adaptive array signal processing wireless mobile communications architectures common exploit instruction level parallelism offered microprocessor coarse grained parallelism offered coprocessors 
set applications hardware software codesign problem determine needs execute microprocessor coprocessors 
furthermore coprocessor contain programmable support set applications 
applications need execute architectures typically specified imperative model computation commonly matlab 
example show algorithm written matlab 
imperative model computation suited specify applications reveal parallelism due inherent sequential nature 
compilers exist able extract instruction level parallelism original specification fine level granularity 
unable exploit coarse grained parallelism offered coprocessors architecture 
mapping applications architecture difficult 
better specification format inherently parallel model computation process networks 
describes application network concurrently executing processes 
describes parallelism naturally fine grained coarse grained pre impose particular schedule describes process ieee international conference application specific systems architectures processors asap july boston massachusetts usa 
application polyhedral reduced dependence graph vec rot mapping panda process network spade architecture programmable interconnect network pe pe pe pen 
mapping application architecture difficult model computation application match way architecture operates 
process network imperative language 
mapping putting processes microprocessor coprocessor shown tools spade :10.1.1.22.8727
tools chart constructed allowing quality assessment mappings architectures 
describes compaan tool automatically transforms matlab application process network description shown 
converts matlab application polyhedral reduced dependence graph subsequently converted process network description 
compaan tool confined operate affine nested loop programs nlp applications interest described way 
describes spade tool maps process network description architecture network description allows simulation resulting system metrics collectors analyze performance system 
application architecture tuned violating model rules explore design space 
outline follows 
section gives chart exploration scheme underlying concept modeling simulation 
section matlab process network compiler compaan 
section briefly reviews tools generate imperative specification single assignment code reduced dependence graph respectively 
section introduces tool generates processes process network specification application 
section describes mapping simulation tool spade chart exploration scheme 
results section 
modeling concept line advocate development heterogeneous architectures follow general scheme visualized shaped chart 
upper right part set applications drives design architecture 
typically designer studies set applications initial calculations proposes architecture 
effectiveness architecture evaluated comparison alternative architectures 
architectures evaluated quantitatively means performance analysis 
performance analysis application mapped architecture performance application architecture mapping combination evaluated 
resulting performance numbers may inspire architecture designer improve architecture 
designer may decide restructure application modify mapping application 
designer actions denoted light 
approach assumed applications architecture specified terms model computation model implementation respectively 
parallel execution signal processing nested loop programs nlp natural model computation process network model quite different usual imperative model computation applications commonly specified 
necessary provide compiler extracts available parallelism application described nlp say matlab automatically convert process network specification 
extend chart environment shown environment shown 
specification architecture terms model implementation interconnection generic building blocks representative different types resources architecture 
resources example processing resources communication resources memory resources 
mapping application architecture means symbolic instruction traces connect application model implementation model 
way functional behavior application resides model computation timing behavior confined model memory micro processor architecture mapping performance analysis performance numbers chart 
applications architecture chart environment mapping spade performance numbers application matlab compaan process network extended chart 

chart extended chart 
implementation 
compared laborious writing fully functional architecture models save designer lot time enables exploration alternative architectures 
section focus upper right corner 
section take closer look chart part implemented spade tool 
compaan tool developed compilation matlab process networks compaan tool transforms nested loop program written matlab process network specification 
tool transformation number steps shown leveraging lot techniques available systolic array community 
box represents result ellipsoid represents action tool 
step 
step 
step 
matlab single assignment code polyhedral reduced dependence graph panda process network step detail network generation network description polyhedral reduced dependence graph process generation process generation detail reduced dependence graph domain scanning data partitioning linearization 
compaan consists tools transform matlab specification process network specification 
compaan starts transformation converting matlab specification single assignment code sac specification 
describes parallelism available original matlab specification 
derives polyhedral reduced dependence graph specification sac 
network description individual processes derived 
steps done compaan realized separate tools respectively 
mentioned tool panda uses description generate network description contents processes processes spade arch 
validation validation processes process network description 
generation processes decomposed domain scanning data partitioning 
elaborate tools section section 
matlab process network compilation role crucial 
compact representation nlp dependence graph 
directed graph set node domains set edge domains 
representation algorithm shown 
node domain 
example polyhedral reduced dependence graph 
node domain characterized fi lk fx ax bg polytope function set port domains 
integral matrices andb integral vectors 
function resides point iteration domain 
function takes arguments input ports returns values output ports 
particular input port output port belongs node domain input port domain ipd output port domain opd respectively 
edge domain edge domain ordered pair vi vj node domains ordered pair pi pj port domains pi opd vi pj ipd vj 
pi implicitly defined affine mapping ipd opd expresses data dependency output port function vi input port function vj 
example illustrate notion node port domains show part node domain 
shows node domain iteration domain left iterator port domains view appears 
port domains partition node domain 
show show 
identify ipd ipd 
identify opd opd 
shows edge domain opd port domain ipd port domain 
intermediate specification matlab specification required process network specification 
path matlab compaan uses tools 
array dataflow analysis compiler finds parallelism available written matlab aggressive data node domain iteration domain ipd ipd ipd ipd port domains 
node domain corresponding port domains 
dependency analysis technique integer linear programming 
focus matlab signal processing algorithms written language 
just writing language front operate written languages example finds variables dependent iteration 
partitions iteration space defined loops gives dependence vector partitions 
simple program solves parametric integer program problems find data dependencies 
part output shown algorithm 
shows iteration space spanned iterators partitioned statements 
consequently different partitions different data dependencies may apply 
case input argument value previously defined function vec defining data dependency value original matrix 
converts sac description description straightforward conversion 
accordingly shape node domain way loops defined partitioning node domain corresponds conditions 
relate ipd opd defined section 
panda established model algorithm panda tool generate network description individual processes 
network description straightforward follows topology 
node mapped single process edge mapped unbounded fifo 
case nodes ande define process edges define unbounded fifo 
shown panda tool divides generation process different steps domain scanning data partitioning linearization discuss detail running example shown 
shows process network nodes called producer consumer unbounded fifo channel communication 
shown part consisting node domains ndp ndc ndp shaded triangle ipd ndc shaded triangle affine mapping ipd opd 
panda generates top part bottom part 
domain scanning step panda scan node domains lexicographically ordering points node iteration domain 
opd opd opd opd single assignment code generated fork forj ipd ipd ipd ipd vec opd opd opd 
single assignment code domains fj mp pp ndp fi lck mc pc ndc respectively iterator scan orders say ndp ndc task return lexicographical ordering domains terms nested loop 
fourier motzkin procedure accomplish 
fourier motzkin fm finds iterators iterator scan orders 
fm returns order order 
conversion nested loop scanning straightforward 
data partitioning generates sac description explicitly specified 
means input arguments surrounded statements output values 
consequence output values generated input domain opd produces fifo buffer producer consumer ndp ndc 
mapping process network running example 
tokens ipd 
second step panda explicit 
making output port domains explicit illustrated 
shows communicating node domains ndp ndc 
tokens produced port domain pp node domain ndp consumed port domain pc node domain ndc described data dependency mapping port domain pp opd port domain pc ipd 
pp explicit panda applies derived ipd pp operation polyhedra 
nd pp opd ipd pc nd 
making output port domain explicit 
procedure goes follows 
starting point relation ipd opd ipd output gof ndc affine mapping fj ndp 
comparing port domains respective node domains follows remains checked run time detect port domains scanning node domains ndp ndc 
linearization channels processes dimensional fifo buffers 
order consuming process reads tokens channel order tokens written channel producing process 
course consuming process general read tokens different order order consumption 
channel fifo consumer process reorder memory modeled dimensional memory thisis shown 

producer consumer fifo consumer memory modeled memory logical storage structure lss lss opd ipd pair 
producer node writes tokens lss order write polynomial 
consumer node consumes tokens lss order read polynomial 
write polynomial follows ranking opd producer 
ranking follows order resulting domain scanning data partitioning steps 
read polynomial satisfies affine mapping ipd ndc opd ndp 
ranking ndp running example shown 
corresponding write polynomial corresponding read polynomial ndc ii linearization method panda relies methods count number integral points contained polytope called ehrhart polynomials 
methods implemented library polylib 
nd ndc 
ranking node domains derive read write polynomials addressing lss producer consumer 
steps domain scanning data partitioning result control program shown running example 
ndp ndc 
control program writing order channel reading possibly order memory seen ndp scans port domain produces point output function firing points 
condition true output values put order channel 
ndc gets values channel puts reordering memory 
ndc scans port domain condition satisfied input value function residing node domain scan point read reordering memory address 
spade tool spade tool designed execute charts shown 
spade clear distinction applications implementations 
application imposes workload resources provided architecture 
workload consists computation workload communication workload 
resources processing resources programmable cores dedicated hardware units communication resources bus structures memory resources rams fifo buffers 
architecture design process concerned specification resources best handle workloads imposed target applications 
spade applications architectures modeled separately 
application modeled kahn process network kpn functional model relatively free architectural aspects 
vice versa architecture modeled implementation network resources taken library generic building blocks 
architecture constructed applications benchmark set 
decoupling enables reuse applications architectures facilitates explorative design process applications subsequently mapped architecture 
order evaluate performance application architecture provide interfacing application models architecture models including specification mappings 
purpose extend technique called trace driven simulation 
simulation technique applied extensively memory system simulation field general purpose processor design 
technique performance analysis heterogeneous systems 
process kpn produces execution called trace represents workload imposed architecture process 
trace contains information communication computation operations performed application process 
operations may coarse grain opposed classical trace driven simulation traces contain information fine grain risc operations 
traces drive computation communication activities architecture 
activities executed specified architecture model 
execution time gets assigned events occur architecture model performance execution application architecture measured 
example application specified kpn shown 
trace process channel read write execute process port 
example application model 
processes depicted circles small circles process ports circle segments processes api functions 
spade offers application programmers interface api application modeling contains functions 
read function 
function read data channel process port 
furthermore function generates trace entry symbolic read instruction trace process invoked reporting execution read operation application level 
write function 
function write data channel process port 
generates trace entry symbolic write instruction reporting execution write operation 
execute function 
function performs data processing generates trace entry reporting processing activities application level 
execute function takes symbolic instruction argument order distinguish different processing activities 
example instruction may correspond vec rot function application code 
trace entries generated read write functions represent communication workload process 
trace entries generated execute function represent computation workload process 
trace entries drive architecture simulation executing application stand analyze computation communication workload application 
analysis may return number times operation process fires tokens transported fifo channel processes 
shown describes network 
values parameters see respectively 

firing numbers process channel processes executes processes 
processes execute frequently colored darker channels width depending communication load 
see example edge transported tokens edge transported tokens edge transported tokens 
trace processor port bus exec 
unit fifo 
example architecture model 
processing resources dashed boxes composed trace drive execution unit interface fifo bus 
example architecture model shown 
processing resources architecture model take traces generated application input 
taken modular approach allow construction great variety processing resources small number basic building blocks 
processing resource built types blocks 
trace driven execution unit interprets trace entries 
entries interpreted order put trace retaining order execution application process 
configurable number ports 
communication ports generic protocol 
number interfaces connect ports specific communication resource 
interface translates generic protocol communication resource specific protocol may include buffers model input output buffering processing resources 
currently interfaces communication direct link shared bus shared memory buffered unbuffered 
apart interface blocks current library contains generic bus blocks including bus arbiters generic memory block 
blocks parameterized 
instantiated list symbolic instructions latencies throughputs 
list specifies instructions traces executed processing resource cycles instruction takes executed processing resource 
latencies throughputs obtained lower level model processing resource estimation tools estimated experienced designer 
instances interface blocks buffer sizes 
bus instance bus width setup delay transfer delay specified 
recall generic building blocks performance models model timing synchronization architecture 
application model captures functional behavior 
application model architecture model defined mapping performed 
means workload application assigned resources architecture follows 
process mapped 
mapping case trace entries processes need scheduled 
scheduling policy selected specified user 
process port mapped port 
mapping implicitly maps channels combination communication resources memory resources possibly including user defined blocks specific bus model memory interface 
typically resources equivalent element application model 
simulation application model pamela multi threading environment kahn process executed separate thread 
simulation architecture model currently tss tool system simulation philips house architecture modeling simulation framework 
library generic blocks implemented library tss modules 
generic building blocks contain collectors different performance metrics 
metrics data collected simulation resource specific 
spade 
modeling simulation results application shown derived kpn specifications shown 
execution transmission counts see processes execute times node andd sporadically 
insight suggested partition architecture shown frequently executing processes mapped coprocessors incidentally executing processes put microprocessor 
consequently channels fa kg map low bandwidth communication structure connects coprocessors microprocessor 
edges fc gg map programmable interconnect network high bandwidth communication structure 
edge edges fi hg map internal communication structures inside coprocessor node respectively 
high bandwidth communication kept local coprocessors 
specific architecture specified spade shown 
bc bd cc cg cf dd df dg coprocessor coprocessor coprocessor ck ca dl db microprocessor aa ab output input el ek microprocessor coprocessor bus 
architecture modeling simulation example architecture consists microprocessor mp coprocessors cp mp cp bus single buffer space fifo interconnects local coprocessors 
bus transfer takes cycles fifo channel transfer takes cycle 
coprocessor coprocessor receive symbolic execute instructions parameters latency throughput 
simulation results shown table 
values parameters cycles respectively 
table 
simulated execution times problem sizes bus delay 
table 
problem period cycles problem sizes bus delay 
table problem period defined instruction latency dominating 
cycles 
values toolset certain nested loop matlab programs converted kahn process networks mapped high level architecture description simulation performance analysis high level abstraction 
discussed tool performing transformations intermediate specification application 
examples transformations index transformations unrolling 
example index transformed improve utilization pipelined operations vec rot architecture 
transformation unrolling typically results higher degree parallelism 
elements compaan tool implemented java 
part integrated ptolemy ii framework org compaan 
authors want pieter van der wolf kees vissers philips research laboratories valuable discussions support 
indebted vincent inria polylib guidance support 
supported part universities delft leiden part philips research part marco darpa silicon research center 
jeroen jef van jochen jess data driven multiprocessor architecture high performance dsp proc 
ed tc mar 
edwin ed strategy determining jacobi specific dataflow processor proceedings asap conference july 
arthur jan rabaey ultra low power domain specific multimedia processors vlsi signal processing ix pp 

gilles kahn semantics simple language parallel programming proc 
ifip congress 
north holland publishing edward lee thomas parks dataflow process networks proceedings ieee vol 
pp 
may 
bart ed kees vissers pieter van der wolf construction retargetable simulator architecture template proceedings th int 
workshop hardware software codesign seattle washington mar 
paul pieter van der wolf ed kees vissers methodology architecture exploration heterogeneous signal processing systems proceedings ieee workshop signal processing systems taipei taiwan :10.1.1.22.8727
bart design space exploration stream dataflow architectures methods tools ph thesis delft university technology jan 
peter held functional design data flow networks ph thesis dept ee delft university technology may 
bart ed kees vissers pieter van der wolf approach quantitative analysis application specific dataflow architectures proc 
asap july 
kung vlsi array processors prentice hall information system sciences series 
bart array dataflow analysis compiler tech 
rep ucb erl university california berkeley ca usa feb 
paul feautrier parametric integer programming recherche op operations research vol 
pp 

irigoin scanning polyhedra loops proc 
acm sigplan june pp 

patrice sanjay manipulating polyhedra tech 
rep institut de recherche en informatique syst mes 
ed memory floating point cordic pipeline processing element proceedings sips design implementation october pp 

vincent parametric analysis polyhedral iteration spaces journal vlsi signal processing vol 
pp 
july 
doran wilde library doing polyhedral operations thesis oregon state university corvallis oregon dec published irisa technical report pi rennes france dec 
richard uhlig trevor mudge trace driven memory simulation survey acm computing surveys vol 
pp 
june 
van performance prediction parallel processing systems pamela methodology proc 
th acm int 
conference supercomputing tokyo july pp 

tss tool system simulation ist newsletter vol 
pp 
mar philips internal publication 
paul pieter van der wolf ed kees vissers methodology architecture exploration heterogeneous signal processing systems appear journal vlsi signal processing 

