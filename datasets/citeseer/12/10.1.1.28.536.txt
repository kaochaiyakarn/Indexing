pattern discovery temporal databases temporal logic approach mannila finding frequent episodes sequences extended finding temporal logic patterns temporal databases 
argued temporal logic provides appropriate formalism expressing temporal patterns defined categorical data 
proposed temporal logic programming mechanism discovery frequent patterns expressible temporal logic 
explained frequent temporal patterns discovered constructing temporal logic programs 
test methods temporal logic programs constructed certain classes patterns implemented ops 
address problem finding interesting patterns temporal databases defined categorical symbolic data 
important problem frequently occurs various applications molecular biology finding patterns genetic sequences telecommunications finding patterns network behavior financial services finding patterns analysts recommendations stocks 
address problem language expressing temporal patterns defined mechanisms discover patterns temporal databases need developed 
broad problem addressed fields speech recognition signal processing kdd field 
example agrawal provide shape definition language sdl expressing shapes sequences 
context categorical data problem addressed mannila string matching research community 
mannila define temporal patterns sequences events episodes episodes defined partially ordered sets events described directed acyclic graphs 
class episodes describe efficient algorithm finds frequent episodes class 
presents interesting approach tested telecommunications data 
episodes defined limited expressive power specifying temporal patterns 
example unclear episodes define temporal patterns event occurs event occurs event event occurs time addition approach works sequences temporal databases temporal predicates changing time 
string matching researchers regular expressions define patterns strings alphabets develop efficient string matching algorithms 
aho presents padmanabhan alexander tuzhilin leonard stern school business new york university stern nyu edu supported part nsf iri 
survey algorithms 
regular expressions defined alphabet approach works strings symbols generalize temporal databases predicates change time 
extend mannila finding frequent patterns temporal categorical data propose order temporal logic fotl express patterns temporal databases propositional case constitutes special case firstorder case 
example episodes expressed temporal logic tl partial order symbols defining serial episode expressed 
addition tl express patterns hold stock market sentiment hold temporal predicate 
propose tl discovering temporal patterns generating temporal logic programs tlp patterns 
tl provides important advantages mechanism specification discovery patterns temporal databases 
studied expressive theoretically sound formalism extensively various fields computer science dealing temporal phenomena 
tl specification temporal patterns discovery temporal databases tlp techniques described 
tl provides sound framework integrating specification discovery methods 
preliminaries fotl express temporal patterns 
syntax fotl obtained order logic adding temporal operators previous derived operators past 
addition consider bounded temporal operators example defined iff semantics fotl defined terms temporal structures predicates changing time 
assume time discrete linear bounded temporal predicates define temporal database temporal relations represented event tables tables single temporal attribute 
temporal pattern ground fotl formula fotl formula containing ground atoms variables quantifiers 
class temporal patterns defined temporal formula variables 
instantiation variables specific ground values defines temporal pattern 
adopt convention uppercase alphabet represent variables temporal formula 
temporal logic programming 
tlp program consists set temporal rules form body head various tlp systems different assumptions structure body head 
example rule employees fired firm worked past hired firm expressed extension tlp system employ firm person employ firm person employ firm person alternatively done datalog express tlp programs order logic explicit time 
example temporal predicate employ firm person fol equivalent employ firm person time specifying employment history person time 
corresponding fol language datalog equivalent expressive power 
extension datalog express tlp programs 
datalog extended allowing negation body head rule done doubly negated datalog allowing comparisons temporal variables body datalog rules 
call resulting extension 
adhere parallel inflationary semantics datalog define semantics 
intuitively rules fired parallel conflicts rules program execution terminates done datalog 
finding frequent temporal patterns address problem finding frequent frequent patterns temporal databases 
example temporal database may want find frequent patterns class temporal patterns secondorder variables ranging predicates temporal database temporal pattern belongs class count number time instances pattern holds pattern frequent exceeds threshold value example assume associated predicate predicate instantiated 
pattern occurs times conclude pattern occurs frequently alternatively searched frequent patterns patterns having maximal frequency counts comparison patterns class 
unrestricted case problem finding frequent patterns trivially non interesting 
consider infinite class comprising tl formulae example frequent pattern temporal predicate temporal database restrict consideration certain defined classes temporal patterns problem nontrivial 
example classes temporal patterns defined follows 
single fotl formula variables arguments predicates second order range predicates 

parameterized single fotl formula defines class temporal patterns may differ parameters temporal operators 
example discussed parameter 

class temporal patterns defined operators 
class defined single fotl formula illustrate discovery methods described section consider class temporal patterns defined expression temporal predicates temporal database want find possible instantiations variables pattern occurs frequently frequency certain threshold 
find instances construct tlp identify occurrences temporal patterns belong 
temporal predicates appear explicit time 
illustrates tlp program written computes distinguished predicate 
ii iii flag flag iv flag flag flag vi flag flag flag flag vii 
tlp computing 
simulate forward movement time program fig uses predicate acts system clock rule ii advances forward tick basis 
rule iii sets flag predicate true time instant period time holds continuously rule iv continues set new flag flag time points period 
encountered flag flag rule sets distinguished predicate true instances time flag set time holds 
rule vi resets flags continuous period time holds 
find frequent frequent patterns form program fig easily extended incorporate counter number instances true 
note order variables program facilitates construction single tlp program find instances temporal patterns belong class 
generalize example theorem proof theorem 
class temporal patterns specified single fotl formula defined temporal database exists tlp program prog distinguished predicate finite instance holds holds vice versa 
proof theorem induction number operators tl formula constructive 
notion safety fotl expressions tlp programs may terminate 
tlp programs shown terminate finite domains arguments predicates finite 
class patterns consisting operators section consider class temporal patterns tl consisting operators study problems finding frequent frequent patterns 
frequent patterns 
distributivity operators pattern tl depending temporal predicates xn converted canonical form clarity omit arguments predicates kn xn kn xi xj ki kj 
frequent patterns case form xi xj tlp counts occurrences temporal patterns belong predicate val specifies times val pattern occurred database 
ii iii val val 
tlp program simulates program counting frequent occurrences patterns belonging obtained combining tlp programs fig 
possible pairs predicates adding control logic selecting highest values val predicate various values point program finds frequent patterns form single forward sweep time execution program complexity linear time 
frequent patterns 
starting point finding frequent patterns tl canonical form patterns 
frequency patterns monotonically decreasing function value temporal pattern frequent 
goal find maximal value find frequent patterns form case frequent patterns reduce simplified expression dealing general case 
naive approach find frequent patterns successive values value generate new frequent patterns outputs previous iterations 
efficient algorithm idea generating larger candidate patterns smaller ones 
method generating candidate patterns effectively agrawal mannila mine association rules episodes respectively 
start finding frequent patterns single predicate words expression reduced case kn 
vector attributes predicate algorithm described fig iteratively generates frequent patterns successive values utilizing frequent patterns discovered previous iteration 
largest value time domain value exists time domain bounded kn class frequent patterns stage count kn val predicate tracks frequency count val threshold frequency value 
predicate holds kn rule iii avoid 
initially set false values 
algorithm executes saturation point reached 
freq set frequent ground predicates repeat compute tlp program print program ii iii kn kn kn count kn val holds kn holds kn count kn val iv count kn val val kn 
algorithm find frequent patterns form note rule iii add predicate kn body rule 
improve efficiency smart rule evaluation strategy values kn kn 
evaluate kn frequent values kn rule iii 
generalization algorithm class patterns form defined multiple predicates straightforward notationally cumbersome omit 
furthermore leads combinatorial explosion size tlp programs constructed algorithm function number predicates database 
note contrast frequent patterns case construct multiple tlp programs program iteration algorithm 
means complexity algorithm longer linear 
experiments tl express patterns implemented tlp programs ops application different financial analysts rate various stocks terms buying selling holding recommendations 
application wanted find frequent recommendation change patterns various analysts correlation patterns stock recommendations different analysts frequently analyst recommends buy stock analyst recommends sell 
example recommendation change pattern expressed analyst report analyst stock analyst report analyst stock case want find analysts changed recommendations different stocks 
program finds patterns similar simulated program ops sun sparc artificially generated data set consisting analysts stocks days assumed frequency recommendations day 
performance function size data set 

execution time vs database size preliminary results demonstrate performance implementation quite slow 
attribute factors 
mainly version ops support arithmetic body rule 
simulated expressions form creating new predicates making ops program bigger efficient 
second ops interpreter serial semantics tuple instantiation cycle slowed execution tlp program 
summary tlp technology practical pattern discovery purposes need develop efficient tlp interpreters support important features pseudo parallel execution temporal rules provide efficient support temporal dimension 
tansel clifford gadia jajodia segev snodgrass 
temporal databases theory design implementation 
benjamin cummings 
clifford tuzhilin 
advances temporal databases 
springer verlag 
agrawal giuseppe edward zait 
querying shapes histories 
proceedings st vldb conference pp 

mannila toivonen verkamo 
discovering frequent episodes sequences 
international conf 
knowledge discovery databases kdd pp 
aho 
algorithms finding patterns strings 
van leeuwen ed handbook theoretical comp 
sc vol algorithms complexity 
elsevier 
manna pnueli 
temporal logic 
temporal logic reactive concurrent systems 
springer verlag 
abadi manna 
temporal logic programming 
symb 
computation pp 

chomicki wolper 
temporal deductive databases 
ch 
tuzhilin 
simulation language temporal logic 
transactions society computer simulation pp 


temporal logic programs volume 
springer verlag 
padmanabhan tuzhilin 
temporal logic find patterns temporal databases 
working dept information systems nyu 

specifying real time properties metric temporal logic 
real time systems 
snodgrass 
tsql temporal query language 
kluwer 
chomicki imielinski 
temporal deductive databases infinite objects 
proc pods 
abiteboul vianu 
datalog extensions database queries updates 
computer system sciences vol 
pp 

agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
fayyad piatetsky shapiro smyth uthurusamy eds advances knowledge discovery data mining 
aaai press 
