experiment management support performance tuning karen computer sciences department university wisconsin madison wi cs wisc edu www cs wisc edu barton miller computer sciences department university wisconsin madison wi bart cs wisc edu www cs wisc edu bart development high performance parallel system application evolutionary process code environment go changes program lifetime change key question developers performance change 
existing performance tool provides necessary functionality answer question 
reports design preliminary implementation tool views execution scientific experiment provides functionality answer questions program performance span single execution environment 
report results tool actual performance tuning study scientific application run changing environments 
goal historic program performance data develop techniques parallel program performance diagnosis 
keywords performance tuning parallel programming experiment management experimental science supposed experiments find generalities 
just supposed tally long list individual cases unique life histories 
butterfly collecting 
richard development high performance parallel system application evolutionary process 
may models simulations followed initial implementation program 
code incrementally modified tune performance continues evolve applications life span 
step key question developers performance change 
question arises comparing implementation models simulations considering versions implementation different algorithm communication numeric library language studying code behavior varying number type processors type network type processes input data set load scheduling algorithm benchmarking regression testing 
despite broad utility type comparison existing performance tool provides necessary functionality answer state art research tools paradyn pablo focus measuring performance single program execution :10.1.1.41.2316
describe infrastructure answering question stages life application 
view program run simulation result program model experiment provide functionality experiment management system 
project parts representation space executions techniques quantitatively automatically comparing executions enhanced performance diagnosis abilities historic performance data 
initial results parts 
measure success project activity complex cumbersome manually automate 
part concise representation set executions collected life application 
store information experiment program event enumerates components code executed execution environment stores performance data collected 
possible combinations code execution environment form multi dimensional program space dimension axis variation point program event 
enable exploration space simple naming mechanism selection query facility set interactive visualizations 
queries program space may contents performance data metadata describes multi dimensional program space 
graphical representation program space serves user interface experiment management system 
second part project develop techniques automating comparison experiments 
performance tuning multiple executions answer deceptively simple question changed run program 
developed techniques determining difference program runs automatically describing structural differences differences program execution structure resources performance variation resources change run 
apply technique compare actual execution predicted desired performance measure application compare distinct time intervals single program execution 
uses include performance tuning efforts automated scalability studies resource allocation metacomputing performance model validation studies dynamic execution models processes created destroyed migrated communication patterns distributed shared memory may optimized data values code may changed steering :10.1.1.25.8254
difference information necessarily simple measure total execution time may complex measure derived details program structure analytical performance prediction actual previous execution code set performance thresholds application required meet exceed incomplete set data selected intervals execution 
third part research investigate predicted summary historical data contained program events program space performance diagnosis 
exploring novel opportunities exploiting collection data focus data gathering analysis efforts critical sections large application isolating spurious effects interesting performance variations 
details outside scope 
program events automated comparison representation program run execution 
associated collection performance data 
automatically compare changes program events structural difference operator 
program event represent program collection discrete program resources 
possible resources include program code application processes machine nodes synchronization points data structures files 
group resources provides unique view application 
organize program resources classes aspect application represent structure class tree called resource hierarchy 
resource hierarchy collection related program resources 
root node resource hierarchy represents entire program execution labeled name entire resource hierarchy 
descendant root node represents particular program resource view 
move root node level hierarchy represents finer grained description program 
example code hierarchy level nodes represent modules level function nodes level loops basic block nodes 
program event program tester resource hierarchies code resource hierarchy root level level program level view application represents cumulative behavior program 
level module level view source code level function level view 
level resource hierarchy set resources level leaf level partition set nodes lower level 
example module level contains main vect partition set leaf nodes 
specify particular level hierarchy superscript notation refers level children root node resource hierarchy zero 
code hierarchy shows set functions partitioned modules code main vect main vect vect vect print 
shows sample program event parallel application called tester 
program event set code machine process 
code hierarchy contains nodes represent program modules functions machine hierarchy contains node cpu tester executed process hierarchy contains node process 
resource representation logical physical component program execution 
single resource represent particular aspect program environment executes process function cpu variable 
leaf node labeled represents resource semantic meaning attached particular resource relevant programmer affect model functionality program execution component uniquely represented single resource 
internal node resource hierarchy tree represents set resources example single resource represents aggregation set 
resource name formed concatenating labels unique path resource hierarchy root node representing resource 
example resource name represents function shaded representing performance information program event particular performance measurement may wish specify certain part parts program 
example may interested measuring cpu time average executions total entire execution total single function 
focus constrains view program selected part 
selecting root node hierarchy represents unconstrained view program 
selecting node narrows view include leaf nodes descendents selected node 
example shaded nodes represent constraint functions process tester running cpu 
program event provides intuitive naming scheme program components called resource normal form 
convert selected set resource normal form concatenating selections resource hierarchy 
example shaded selection represented performance data represented function form program execution defined definition 
name metric measurable execution characteristic cpu time 
focus performance data example cpu time focus time interval specifies execution data collected 
returns performance result may simple scalar complex object 
data uniquely identified focus say performance data stored resource normal form 
structural difference operator comparing performance program executions natural question different code environments tests differ 
perform test runs identical code running identical dedicated platforms resource hierarchy execution identical counterpart second execution performance data may meaningfully compared focus valid individual executions 
comparison complex consider cases code run time environment differ test runs need determine common set valid resources determine new set valid foci program 
algorithm find structural difference program events program events see calculate structural difference 
perform structural comparison program executions compare sets resource hierarchies top manner 
structural difference operator takes program events operands yields program event group peg 
result contains resources original program events structural difference operation works hierarchical set union operation 
operator applied iteratively build single set resource hierarchies characterizes number distinct program runs 
shows application structural difference operator program events top set resource hierarchies describes event middle set describes bottom shows result 
resources common executions outlined mixed dash dot examples resources 
resources unique outlined dot solid boxes respectively 
example structural difference operator moving single execution model collection program events stored program event group peg 
interface peg centered single set resource hierarchies constructed structural difference operator represents components program events 
collection program events stored multi dimensional program space 
users navigate space visualize form contents queries structure contents 
developed aggregation operators particular viewing peg performance data list aggregation operator applied hierarchy contains selected node yields performance result list values single value cluster aggregation operator groups requested performance data value group contains values specified represented average group 
defined new metrics particular multi execution peg 
discrete distance metric binary function indicates specified performance results differ specified interval 
metric dd calculated follows different performance results 
discrete distance metric building block clustering differencing performance results 
performance difference operator takes inputs executions returns list foci discrete distance metric yields answer true 
list computed hierarchically shown 
iterate resource nodes program event starting focus represents entire program execution 
performance difference noted check specific foci metric 
provide display performance difference results part prototype see 
metric useful focus attention immediately performance changes version 
algorithm performance difference operator 
performance difference operator searches performance results specified metric requested program events returning list foci results different 
construct specific foci operation call magnify see 
specified definition focus contains node resource hierarchy 
resource hierarchy original focus form set new foci replacing resource children lower level hierarchy 
result magnify operation applied focus set foci 
previous metrics aim describe changed 
metric describe performance changed 
currently investigating approaches performance distance metric euclidean distance weighted average performance result values 
goal quantitative measure performance differs executions weigh rank performance bottlenecks 
algorithm magnify 
magnify returns set foci constructed making possible step resource hierarchy starting focus 
case studies test model existing scientific applications implemented preliminary prototype experiment management performance tool 
prototype written tcl tk extended tree widget 
resource hierarchy loading display differencing implemented directly tcl tk 
test design examined data collected tuning parallel programs 
provide examples prototype compare implementations alternate communication libraries evaluate performance program evolves versions track data scalability analysis 
case experiment management system simplifies speeds programmer task 
comparing alternate implementations porting pvm application mpi study compared structure versions parallel message passing fft code called ns ported pvm mpi message passing libraries 
application solves navier stokes equation dimensions 
scientist porting application wants directed feedback resulting changes performance application hopefully idea cause performance degradation 
step provide feedback structural differences old new versions 
show resource hierarchies resulted applying structural difference operator program events node run pvm version node run mpi version ibm sp 
display provides quick way see differed code environment runs 
left shows code machine memory process resources appear program events 
code hierarchy modules ns appear runs 
leaf see procedures strip strip appeared program event 
message hierarchy right shows changes message tags tags represent mpi message tags rest represent message tags pvm version 
selecting resources display performance data program event include resource 
evolving application performance tuning shared memory application protein folding application called fold developed chemical engineering department 
tuning effort reported detail 
analyzed program versions performance data study able automate identification changes version 
resource hierarchies program event group 
peg display allows developer navigate resource hierarchies quickly see differed structurally program runs 
display organized resource hierarchies addition integer run identifier rid 
run labeled value resources appeared run labeled rid run example 
resources appear run labeled sum rids resources labeled appeared runs 
show views peg display left module expanded display right results expanding message node see individual message tags 
ran versions fold taken different steps performance tuning study 
researchers conducting study located problems 
version simple port wisconsin cluster workstations cow sgi 
problem identified serial portion code consumed execution time nodes 
version changed data partitioning try relieve bottleneck 
problem identified false sharing data blocks 
version padded aligned data improve cache behavior 
selected results demonstrate benefit experiment management approach navigating large space resources data involved complete performance tuning study 
examined structural differences versions 
consider changes version version merged program events applying structural difference operator generated program event group peg 
peg display distinguishes foci valid program events 
memory hierarchy shows data change kind occurred data structures memory hierarchy version 
examined performance differences applying performance difference operator metric 
operator pairwise compares performance data available program events 
results display shown 
display shows memory blocking behavior differed runs differed process differences localized data structures gm gm part 
results performance difference operator metric 
nodes shown represent resource combinations performance difference detected program events 
starting left node means performance change runs 
process nodes indicate performance changed way processes 
level details individual shared data structures gm shared index structure gm part gm part gm part gm part shared data structures listed index 
data structures listed common runs changed 
snapshot taken selecting nodes process process see detailed display children 
visualization performance data node showing plots values run launched selecting node display 
scalability study study compared executions parallel global circulation message passing code called ocean 
ran code nodes wisconsin cow merge cluster performance difference features explore behavior application scaling 
shows program event group display 
program event group built applying structural difference operator twice 
set resource nodes contains union resource hierarchies original program events 
views demonstrate prototype ability represent application different environments 
particular study different runs re common set machine nodes clearly shown display 
nodes labelled cow cow cow cow common executions tagged nodes cow cow cow cow unique node program run tagged remaining machine nodes node runs tagged display right shows different processes 
string comparison yields limited information process name unique 
display demonstrates prototype ability provide interface naming mechanism various types program resources multi execution performance tuning environment 
resource hierarchies program event group ocean 
program event group represents executions pvm application ocean run nodes result performing consecutive structural difference operations 
show views peg display left module machine expanded display right results expanding process node 
show example results multi execution query 
requested metrics cpu time executions application nodes sun sparcstation cluster 
data collected paradyn stored form paradyn grams 
result query paradyn histograms 
display result 
related extensive parallel profiling tools limited amount tools allow displays performance data multiple runs :10.1.1.41.2316
debugging area done find bugs comparing execution new program version old comparing program output user selected variables 
guard compares program currently debugged version program detect differences variable values user defined points execution 
comparisons simple complex data types programs compared may written different languages run heterogeneous environments 
defined difference operators simple complex data types compare complex structures factor machine dependent data representations returning boolean result indicates variable values differed matching points computation 
approach programmer separately determine points comparison items comparison version program 
results metrics io time sync wait program event group 
efforts defined program similarity 
includes metric compares observed predicted execution times granularity individual basic blocks 
approach useful memory tuning defines difference predicted observed execution time memory bottleneck 
mendes defines similarity execution graphs trace transformation approach performance prediction 
define similarity graphs degree largest isomorphic graphs induced subgraphs original graphs 
distance graphs defined number vertices original graphs 
saavedra smith metrics program similarity program characteristic similarity normalized squared euclidean distance execution time similarity 
addressing similar problem structural difference performance difference operators approach provide extensible framework structural execution comparison allow performance difference calculated different levels detail different metrics 
wisconsin program slicing project uw madison investigates methods determining syntactic semantic differences versions sequential source code 
focus precise characterization identification differences program versions 
currently limited sequential pascal codes examines source code useful identifying differences executions code differing environments 
physical life sciences automate store experimental data 
interactive data exploration scientific data visualization subject ongoing research 
restrict scope research identifying issues particular multi execution environment 
combined paradyn devise enable side side linked visualization data multiple executions parallel application 
initial effort address problems trying match phases program runs different execution time simply displayed runs ability correlate point graph corresponding point execution graph 
ips allowed linked visualization data different runs matching normalizing total execution time 
abrams virginia developed alternative methods visualizing categorical trace data including visualizing multiple traces simultaneously 
representation program space experiment management infrastructure automated comparison program runs represents new direction defining performance tool closely maps actual process programmers go tune codes uses automation focus user attention small critical areas change 
experiment management view performance tuning allows describe application behavior lifetime variety environments code ports 
multi execution view provides valuable feedback scientist developing maintaining parallel code 
currently working expand prototype described richer set data types web interface service developers engaged geographically distributed cooperative program development additional performance displays 
investigating object oriented database data storage exploring techniques improve paradyn fly diagnosis capabilities feedback experiment management system 
acknowledgments supported part wright laboratory avionics directorate air force material command usaf darpa order 
nsf cda cda department energy de fg er 
government authorized reproduce distribute reprints governmental purposes standing copyright notation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory avionics directorate government 
wheeler 
top population delivers critique field 
chronicle higher education february 
miller callaghan hollingsworth :10.1.1.41.2316
paradyn parallel performance measurement tool 
ieee computer november 
reed scalable performance analysis pablo performance analysis environment 
press editor proc 
scalable parallel libraries conference pages los alamitos ca 
foster kesselman :10.1.1.25.8254
globus metacomputing infrastructure toolkit 
international journal supercomputer applications appear 
dongarra geist manchek sunderam 
integrated pvm framework supports heterogeneous network computing 
computers physics 
reinhardt larus wood 
user level shared memory 
st annual international symposium computer architecture april 
gu kraemer stasko vetter schwan 
falcon line monitoring steering large scale parallel programs 
symposium frontiers massively parallel computation mclean virginia february 
miller 
integrating debugger performance tool steering debugging performance tools parallel computing systems 
ieee computer society press 
ed 
simmons hayes brown reed 
fink kohn baden 
flexible communication mechanisms dynamic structured applications 
irregular santa barbara ca august 
xu larus miller 
shared memory performance profiling 
th acm sigplan symposium principles practice parallel programming las vegas nevada june 
yan 
performance measurement visualization modeling parallel distributed programs aims toolkit 
software practice experience spe april 
williams hoel 
mpp apprentice performance tool delivering performance cray 
programming environments massively parallel distributed systems monte 
heath 
visualizing performance parallel programs 
ieee software september 
myllymaki livny miller 
integrated visualization parallel program performance data 
parallel computing 
ioannidis livny 
conceptual schemas multi faceted tools desktop scientific experiment management 
international journal intelligent cooperative information systems december 
sosic abramson 
guard relative debugger 
software practice experience appear 
kohn williams 

journal parallel distributed computing 
hollingsworth miller 
dynamic control performance monitoring large scale parallel systems 
international conference supercomputing tokyo july 
ousterhout 
tcl tk toolkit 
addison wesley publishing reading ma 
brighton 
tree widget tcl tk tools 
reilly associates appear 
bruce barton miller 
multi application support parallel program performance tool 
technical report cs tr february computer sciences department university wisconsin madison 
goldberg hennessy 
performance debugging shared memory multiprocessor programs 
proceedings supercomputing pages albuquerque nm november 
mendes 
performance prediction trace transformation 
fifth brazilian symposium computer architecture september 
saavedra smith 
analysis benchmark characteristics benchmark performance prediction 
technical report computer science technical report usc cs university southern california 
horwitz reps efficient comparison program slices 
acta informatica 
mathur abrams 
visualizing modeling categorical time series data 
technical report department computer science virginia polytechnic institute state university august 
author biographies karen working doctoral degree computer sciences department university wisconsin madison 
received ba ms degrees computer science new york university university wisconsin respectively 
holds nasa graduate student research fellowship 
barton miller received degree computer science university california san diego ph degrees computer science university california berkeley respectively 
university wisconsin madison professor computer sciences department 
research interests include parallel distributed program measurement debugging extensible operating systems network management naming services user interfaces 
currently directs paradyn parallel performance tool project developing generation performance tools massively parallel computers workstation clusters 
miller program chair acm sigmetrics symposium parallel distributed tools general chair acm sigmetrics symposium parallel distributed tools 
twice chaired acm onr shop parallel distributed debugging editorial boards ieee transactions parallel distributed systems computing systems international journal parallel processing 
acm permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm copyright paragraph prominently displayed postscript versions individual papers copyrighted acm exception produced government contract 
