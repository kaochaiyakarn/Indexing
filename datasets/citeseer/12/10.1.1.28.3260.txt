dynamic change bug concrete approach support workflow change van der aalst eindhoven university technology faculty technology management department information technology box nl mb eindhoven netherlands 
aalst tm tue nl 
adaptability major research topics area workflow management 
today workflow management systems problems dealing ad hoc changes evolutionary changes 
result workflow management system support dynamically changing workflow processes workflow process supported rigid manner changes allowed handled outside workflow management system 
focus notorious problem caused workflow change dynamic change bug ellis 
dynamic change bug refers errors introduced migrating case process instance old process definition new 
transfer old process new process lead duplication skipping tasks deadlocks livelocks 
describes approach calculating safe change region 
case change region transfer postponed 
keywords workflow management workflow change dynamic change petri nets 
workflow management technology aims automated support coordination business processes reduce costs flow times increase quality service productivity 
critical challenge workflow management systems ability respond effectively changes 
changes may range ad hoc modifications process single customer complete restructuring workflow process improve efficiency 
today workflow management systems ill suited dealing change 
typically support idealized version preferred process 
real run time process variable process specified design time 
way handle changes go system back 
users forced bypass workflow management system quite frequently system liability asset 
take challenge find techniques add flexibility loosing support provided today systems 
typically types changes ad hoc changes evolutionary changes 
ad hoc changes handled case case basis 
order provide customer specific solutions handle rare events process adapted single case limited group cases 
evolutionary change result reengineering efforts 
process changed improve responsiveness customer improve efficiency 
trend increasingly dynamic situation ad hoc evolutionary changes needed improve customer service reduce costs 
restrict evolutionary change 
fact ad hoc change partially handled existing workflow management systems inconcert tibco inconcert ensemble 
prepare shipment send goods send bill record shipment prepare shipment send goods send bill fig 

dynamic change bug 
record shipment term dynamic change refers problem handling old cases new process transfer cases new version process 
dynamic change problem mentioned ellis keddara rozenberg ellis 
discuss problem petri nets shown 
petri nets reisig rozenberg refer appendix sequential workflow process left changed workflow process tasks send goods send bill executed parallel right problems possible transfer case left right 
sequential process possible states states corresponds state parallel process 
example state token mapped state token 
cases tasks prepare shipment send goods executed send bill record shipment need executed 
consider situation parallel process changed sequential case moved right hand side process left hand side process 
states right hand side process problem token moved token token mapped token token token mapped token 
state token prepare shipment send bill executed causes problems corresponding state sequential process possible execute send bill send goods 
case moved place place task send bill executed twice 
case moved place place task send goods executed 
example shows straightforward migrate old cases new process change 
problem illustrated result reducing degree parallelism making process sequential 
similar problems occur order tasks changed sequential tasks swapped 
extending workflow new tasks removing parts aggregating group tasks single task may result similar problems 
changing workflow fly running cases transferred new process definition dynamic change bug occur 
problem relevant workflow management system truly supporting adaptive workflow 
today workflow management systems able handle problem 
systems versioning mechanism change leads new version case refers appropriate version 
case starts version process continue version 
versioning mechanism may suitable situations 
administrative process short flow time candidate versioning mechanism 
situations mechanism appropriate 
case long flow time acceptable handle existing cases way 
consider example process handling mortgage loans 
typically duration years 
process changes month lead hundreds different versions running parallel 
reduce cost keep processes manageable number active versions versions cases kept minimum 
processes shorter flow time may undesirable versions running parallel 
fact may legal reasons starting january new step process mandatory forcing transfer cases new process 
unfortunately problems illustrated direct transfer hazardous 
dynamic change bug generation workflow management systems unable truly support adaptive workflow 
dynamic change bug propose approach automatically calculates change region 
change region determined comparing old new process extending regions changed regions affected change 
due possibly complex mixture different routing constructs choice synchronization iteration far trivial compute regions affected 
case change region transferred 
transfer delayed change region empty 
show postponing migration case change region empty results correct execution case 
short period depending change region multiple versions soon transfer safe case handled new process definition 
approach differs existing approaches aalst basten aalst aalst casati reichert dadam ellis ellis keddara ellis keddara michelis ellis keddara herzog agostini michelis vossen weske weske sense local transformation rules assumed calculation change region structure workflow graph 
note restrict logical errors control flow resulting change 
clearly types constraint violations 
change result resource data conflicts 
problems outside scope 
remainder organized follows 
introduce basic concepts techniques going 
approach special subclass petri nets wf nets notion correctness named soundness aalst aalst 
section clearly define problem dynamic change bug give number dynamic change examples 
algorithm calculate change region 
section compare approach approaches addressing dynamic change problem 
summarize results conclude plans 
preliminaries section introduces basic concepts definitions techniques tackle dynamic change bug 
elaborate discussion topics refer aalst aalst ellis ellis nutt 
petri nets refer desel esparza murata reisig rozenberg appendix 
workflow process definitions term workflow management lawrence jablonski bussler refers domain focuses logistics business processes 
people term office logistics 
ultimate goal workflow management sure proper activities executed right person right time 
possible workflow management workflow management system people associate workflow management workflow management systems 
workflow management coalition wfmc defines workflow management system follows wfmc system completely defines manages executes workflows execution software order execution driven computer representation workflow logic 
terms characterize workflow management system business operating system workflow manager case manager logistic control system 
workflows case piece executed specific case 
examples cases mortgage insurance claim tax declaration order request information 
cases generated external customer 
possible case generated department organization internal customer 
goal workflow management handle cases efficiently effectively possible 
workflow process designed handle similar cases 
cases handled executing tasks specific order 
workflow process definition specifies tasks need executed order 
alternative terms workflow process definition procedure flow diagram routing definition 
tasks executed specific order useful identify conditions correspond causal dependencies tasks 
condition holds hold true false 
task pre postconditions preconditions hold task executed postconditions hold execution task 
cases handled workflow process definition 
result task executed cases 
task needs executed specific case called item 
example item execute task send refund form customer case complaint sent customer baker 
items executed resource 
resource machine printer fax person participant worker employee 
facilitate allocation items resources resources grouped classes 
resource class group resources similar characteristics 
may resources class resource may member multiple resource classes 
resource class capabilities functional requirements members called role 
classification structure organization resource class called organizational unit 
item executed specific resource called activity 
workflow perspectives control flow data organization task operation jablonski bussler control flow perspective prominent core workflow system formed processes supports 
control flow dimension building blocks split join split join model sequential conditional parallel iterative routing wfmc 
clearly petri net specify routing cases 
see appendix petri nets 
tasks modeled transitions causal dependencies modeled places arcs 
fact place corresponds condition pre post condition tasks 
split corresponds transition output places join corresponds transition input places 
splits joins correspond places multiple outgoing ingoing arcs 
aalst shown petri net approach allows useful routing constructs absent workflow management systems 
petri net models control flow dimension workflow called workflow net wf net 
noted wf net specifies dynamic behavior single case isolation 
definition wf net 
petri net wf net workflow net source place 
ii sink place 
iii node path 
wf net input place output place case handled procedure represented wf net created enters workflow management system deleted completely handled workflow management system wf net specifies life cycle case 
third requirement definition added avoid dangling tasks conditions tasks conditions contribute processing cases 
confusion possible denote input place output place wf net 
confusion possible add subscript referring proper wf net denote input place output place wf net 
definition wf net easy derive properties 
proposition properties wf nets 
petri net 
wf net source place place source place 
wf net sink place place sink place 
wf net add transition connects sink place source place resulting petri net strongly connected 
source place sink place adding transition connects sink place source place yields strongly connected net node path wf net 
register send questionnaire processing required time process questionnaire evaluate processing process complaint check processing processing nok fig 

wf net processing complaints 
archive processing ok shows wf net models processing complaints 
complaint registered task register parallel questionnaire sent task send questionnaire complaint evaluated task evaluate 
returns questionnaire weeks task process questionnaire executed 
questionnaire returned weeks result questionnaire discarded task time 
result evaluation complaint processed 
actual processing complaint task process complaint delayed condition satisfied questionnaire processed time occurred 
processing complaint checked task check processing 
task archive executed 
note sequential conditional parallel iterative routing example 
wf net shown clearly illustrates focus control flow dimension 
resources applications technical platforms 
case variables triggers 
case variables resolve choices split choice processing required processing partially case variables set execution task evaluate 
choice processing ok processing nok resolved testing case variables set check processing 
wf net case variables introducing non deterministic choices petri net 
don information model unknown behavior applications tasks analysis intractable 
indicated time process questionnaire require triggers 
task time requires time trigger weeks passed process questionnaire requires message trigger questionnaire returned 
trigger seen additional condition needs satisfied 
remainder trigger conditions 
assume environment behaves fairly liveness transition hindered continuous absence specific trigger 
result trigger condition satisfied eventually 
soundness property subsection summarize basic results wf nets aalst 
remainder build results 
requirements stated definition verified statically relate structure petri net 
requirement satisfied case procedure terminate eventually moment procedure terminates token place places empty 
dead tasks possible execute arbitrary task appropriate route wf net wf net safe 
additional requirements wf nets correspond called soundness property 
definition sound 
procedure modeled wf net sound state reachable state exists firing sequence leading state state 
formally ii state state reachable state token place 
formally iii dead transitions formally iv safe 
note soundness property relates dynamics wf net 
requirement definition states starting initial state state possible reach state token place state 
assume strong notion fairness requirement implies eventually state reached 
strong fairness means infinite firing sequence transition fires infinitely 
fairness assumption reasonable context workflow management choices implicitly explicitly applications humans external actors 
clearly introduce infinite loop 
note traditional notions fairness weaker forms fairness just local conditions transition enabled infinitely fire eventually sufficient 
see aalst aalst details 
second requirement states moment token put place places empty 
term proper termination describe requirements 
third requirement states dead transitions tasks initial state requirement states wf net safe single case isolation allowed multiple tokens place 
example wf net sound 
shows wf net sound 
wf net attempt simplify shown token removed process complaint process complaint return token archive longer needs remove remaining token 
may idea deficiencies 
tasks may executed completion firing register evaluate processing archive token place indicating completion time send questionnaire enabled 
second potential deadlock processing nok fires wf net gets stuck state just token 
attempt execute task processing complaint multiple times lead deadlock situation 
clearly wf net sound 
wf net want decide sound 
aalst shown soundness corresponds liveness boundedness 
link soundness liveness boundedness define extended net note overloading notation symbol denote place state token place see appendix 
register send questionnaire processing required time process questionnaire evaluate processing process complaint check processing processing nok fig 

wf net processing complaints 
archive processing ok petri net obtained adding extra transition connects 
extended petri net defined follows 
remainder call extended net short circuited net short circuited net allows formulation theorem 
theorem 
wf net sound live safe 
proof 
see aalst 
theorem shows standard petri net analysis techniques verify soundness 
short circuited version wf net shown live safe 
short circuited version wf net shown live safe 
dynamic change problem today workflow management systems typically support types change 
systems aiming predefined structured workflow processes referred production workflow support versioning mechanism cf 
section 
available systems fit category staffware mq series workflow cosa 
systems support different form change binding private process definitions cases 
class workflow systems support ad hoc workflow examples systems inconcert inconcert tibco ensemble 
versioning mechanism supported systems binds case specific version workflow 
version change new versions added 
case follow procedure defined corresponding version influenced changes lifetime 
new cases benefit change typically follow version workflow moment creation 
systems supporting ad hoc workflow associate workflow process definition case workflow instance carries description 
systems typically allow limited change inconcert possible remove add tasks parts process need executed 
clearly systems support evolutionary changes described 
types change versioning mechanism ad hoc workflow quite easy implement confronted problems illustrated 
dynamic change problem mentioned ellis keddara rozenberg ellis addressed systems 
clear need mechanisms allow migration instances cases process definition 
examples workflow processes considerable number instances long flow time 
consider example mortgage loans life cycle decades 
situations version mechanism acceptable versions active resulting unmanageable workflow 
may legal economical reasons migration instances cases process definition 
law changes processes may affected organization may forced migrate cases handle existing cases new way 
solution provided ad hoc workflow systems acceptable instance needs modified hand control uniformity workflow process 
solutions provided systems inconcert restrict modeling language avoid problems illustrated iteration 
tackle dynamic change problem concepts introduced previous section 
notion soundness staring point formulating problem 
remainder assume workflow process definitions old workflow workflow process definition change new workflow workflow change 
workflows specified terms wf nets 
denote old wf net new wf net respectively 
assume name clashes 
goal approach calculate possible migrate instances cases old workflow new workflow 
purpose need notion correctness 
choose pragmatic notion correctness transfer valid state case migration reached initial state 
definition valid transfer 
sound wf nets reachable marking transfer valid iff implies ii requirement definition states marked places exist new workflow valid migrate case tokens places removed new wf net 
second requirement states marking state case migrated reachable new process 
property shows valid state reachable newly created cases cases starting marking 
pn pn pn dc sc fig 

old new wf net 
consider shown 
ignore 
case marking place migrated transfer valid 
case marking place migrated satisfying requirements stated definition 
valid transfer case marking shows wf nets 
old wf net uses conditional routing 
new wf net uses parallel routing 
case marking place migrated transfer valid 
valid transfer case marking places 
consider example case token case migrated new wf net deadlock 
marking enables firing case gets stuck state just marking 
note state just marking reachable new process 
notion validity introduced definition guarantees essence soundness preserved migration 
valid transfer case termi pn pn fig 

old new wf net 
nate state just marking sink place moment case terminates places unmarked 
goal determine transfer valid 
principle possible calculate transfer valid standard techniques reachability graph cf 
reisig rozenberg 
looking pragmatic criteria 
practice process millions reachable states 
classify states valid invalid requires complete enumeration state space old new process 
definitely computational problems 
brute force partitioning state space indirect partitioning relates graphical workflow model indirect manner 
pursue earth approach change regions 
change region part model effected change 
change regions defined terms nodes tasks conditions workflow model states 
allows intuitive criteria facilitates realistic implementation 
define static change region 
static change region set nodes old new process model syntactically involved change 
definition static change region 
sound wf nets 
static change region context change set static change region calculated comparing flow relations nets arcs removed added recorded 
set nodes places transitions linked arc added removed constitutes static change region 
note change region consists nodes old new flow 
definition compares arcs nodes 
property shows nodes added deleted appear static change region 
property 
defined definition 

proof 
connected 
clearly 
similarly shown consider shown 
wf nets 
nodes removed part change region 
nodes static change region changed 
projections set shown dashed ovals 
shows set combined wf net 
old new wf net respectively 
combined wf net wf net denoted defined follows union petri nets defined appendix easy see wf net 
property 
wf nets wf net 
proof 
source place ingoing arcs 
places input transitions 
unique source place 
similarly unique sink place 
node path case wf net 
combined wf net contains union nodes arcs appear wf nets 
important note calculation static change region symmetric roles old new wf net reversed change region change 
consider example 
roles nets reversed parallel routing changed conditional static change region 
think long static change region unmarked migration old wf net new valid 
consider example tasks replaced subsequently 
case marking places outside migrated problems 
fact cases marking valid transfer 
situations transfer case marking places change region invalid 
consider example case marking place state reachable initial state part 
case marking places change region transfer valid 
transferring token results marking reachable initial state example shows static change region characterization part pn pn fig 

old new wf net 
wf net unmarked allow valid transfer 
problem addressed section 
dynamic change solution static change region introduced previous section elegant tangible notion 
readers familiar unix operating system static change region comparable diff program calculates differences unix files 
quite straightforward build small application program calculates static change region workflow process definition specified workflow management system 
illustrated situations unmarked static change region guarantee valid transfer 
section algorithm calculates change region guarantees transfer valid long change region unmarked 
term dynamic change region region 
prove dynamic change region provides sufficient condition validity case marking dynamic change region transferred correctness criteria mentioned 
dynamic change region provide necessary condition validity inherit consequence fact want syntactical criterion criterion explicit enumeration state space 
calculation dynamic change region starts continues extend set certain syntactical requirements met 
algorithm uses combined wf net forms components locally connected change regions correspond sound sub wf nets 
definition dynamic change region 
sound wf nets combined wf net static change region 
dynamic change region calculated algorithm 
algorithm dynamic change region generation algorithm 




partition 
connected 









output algorithm initializes set nodes static change region 
number iterations set extended 
iteration set partitioned subsets correspond connected components 
note projection net set nodes isdefined appendix component pair nodes component algorithm searches elementary paths start nodes start single common node function returns set elementary paths nodes set elementary paths start node node see appendix 
alphabet operator function returns set nodes path 
paths start start overlap nodes paths added set see lines 
node element input output node element input output nodes added see line algorithm 
complexity straightforward implementation algorithm factorial workflow nodes 
practical point view complexity acceptable algorithm considers graph structure wf net 
algorithm enumerate possible states executed change need compute dynamic change region individual cases 
typical workflow consists nodes 
despite factorial complexity dynamic change region generation algorithm tractable workflows encountered practice 
consider example 
dynamic change region coincides static change region 
dynamic change region static change region coincide wf nets shown 
shows example situation regions coincide 
static change region include 
nodes influenced change 
tasks executed conditional routing tasks executed parallel routing 
indicated possible migrate cases marking resulting invalid transfer 
dynamic change region includes 
pn pn fig 

old new wf net 
figures show additional examples 
example dynamic static change region indicated 
shows addition alternative branch containing tasks 
static change region addresses places dynamic change region includes 
shows addition parallel branch containing tasks 
place included static change region 
clear needs included 
transfer case state results deadlock 
place included dynamic change region 
shows addition feedback loop 
example shows effect line algorithm node element input output node pn pn fig 

old new wf net 
pn pn fig 

old new wf net 
element input output nodes added 
line tasks added dynamic change region 
note dynamic change region considerably larger static change region 
theorem shows dynamic change region calculated algorithm guarantee validity transfers cases outside dynamic change region transferred transfer valid 
theorem sufficient condition valid transfers 
sound wf nets dynamic change region 
reachable marking marking dynamic change re transfer valid 
proof 
see appendix consider example 
theorem guarantees case marking place transferred vice versa 
note just static change region dynamic change region symmetric 
result algorithm depend role roles reversed changing outcome algorithm 
consider examples shown figures 
dynamic change region indicated unmarked valid transfer possible 
examples indicate theorem provides sufficient necessary condition 
consider example 
dynamic change region includes 
transfer places valid 
markings single token reachable theorem gives weaker condition valid transfers 
theorem observation internal places inside dynamic change region may endanger validity transfer 
places border dynamic change region places connected transitions outside marked compromising validity transfer 
theorem weaker condition valid transfers 
sound wf nets dynamic change region 
reachable marking marking internal places dynamic change region transfer valid 
proof 
see appendix theorem shows strengthen result stated theorem quite easily 
set places considered theorem called minimal change region 
minimal change region defined follows 
minimal change region includes nodes dynamic change region called border places 
note minimal change region may smaller static change region 
consider example 
minimal change regions examples shown figures removed places removed removed removed removed respectively 
section illustrate dynamic change problem 
refer example section place identifiers different 
places nets named different avoid confusion explaining dynamic change problem 
clear essence place interconnection structures 
holds 
remaining places correspondence clear 
rename calculate 
static change region consists nodes prepare shipment send goods send bill record shipment 
dynamic change region consists prepare shipment send goods send bill record shipment 
minimal change region consists send goods send bill 
change add alternative task register email questionnaire send questionnaire processing required time process questionnaire evaluate processing process complaint check processing processing nok fig 

potential changes 
change remove task processing archive processing ok change remove tasks related check illustrate results complaint processing example introduced section 
shows potential changes 
change corresponds removal task processing 
assuming change static change region consists nodes processing 
dynamic change region coincides static change region 
minimal change region consists processing 
transfer wf net task processing net processing vice versa valid 
second change corresponds addition alternative task email questionnaire 
assuming change static change region consists nodes email questionnaire 
dynamic change region coincides 
minimal change region consists newly added task 
transfer valid 
third change harmless 
process complaint connected directly nodes check processing processing ok processing nok removed resulting net sound wf net 
assuming change static change region consists nodes process complaint check processing processing ok processing nok 
dynamic change region encompasses nodes minimal change region consists nodes register archive 
transfers state guaranteed valid minimal dynamic change region 
related dynamic change similarities dynamic change workflow domain schema evolution database domain 
requirements database applications change time definition schema structure data elements stored database changed 
schema evolution active field research decade mainly field object oriented databases cf 
bertino resulted techniques tools partially support transformation data database schema 
dynamic change schema evolution similar additional complications case dynamic change 
shown example possible transfer case 
second acceptable shut system transfer cases restart new procedure 
cases migrated system running 
dynamic change may introduce deadlocks livelocks 
solutions provided today object oriented databases deal complications 
need new concepts techniques 
researchers worked problems related dynamic change 
ellis keddara rozenberg ellis propose technique called change regions change region contains parts workflow process definition potentially cause problems respect transfer cases 
change region versions old situation new situation 
solution version complete process covers old new situation changes affect cases soon possible 
parts workflow change regions inactive old cases handled 
approach drawback process definition complex automatic garbage collection added 
drawback fact authors provide method identifying change region change regions need identified manually 
authors provide notion change correctness give specific circumstances guaranteed 
ellis keddara authors improve approach introducing jumpers 
jumper moves case old workflow new workflow 
jump postponed state jumper available 
authors give concrete technique transfer cases jumpers added manually 
ellis keddara keddara keddara ellis language support dynamic evolution workflow systems ml 
different modalities change authors give special purpose meta language geared model workflow change 
agostini de michelis agostini michelis propose technique automatic transfer cases old process definition new process definition give criteria determining transfer possible 
approach interesting automatically computes states possible migrate 
consider example 
approach agostini michelis indicates necessity postpone transfer running cases state 
unfortunately approach works restricted class workflows modeling language allow iteration runtime iteration achieved backward jumps 
summary approach michelis ellis 
weske vossen weske weske considers dynamic workflow change model similar model ibm mqseries 
model iteration alternatives synchronized 
result control flow similar subclass petri nets called acyclic marked graphs 
exploiting restrictions relatively simple criteria obtained guarantee proper migration instance schema weske 
herzog linked state charts address problem posteriori flexibility herzog 
casati ceri pernici casati tackle problem dynamic change set transformation rules partition state space part aborted part transferred part handled old way parts handled hybrid process definitions similar approach change regions 
reichert dadam reichert dadam similar approach 
semantical issues errors introduced swapping tasks skipping tasks multiple executions task considered 
van der aalst aalst aalst propose fixed set transformation rules support dynamic change 
rules explicitly net level semantical issues considered 
van der aalst basten aalst basten propose approach inheritance 
approach uses set generic inheritance preserving transformation transfer rules 
semantical errors swapping tasks skipping tasks multiple execution tasks avoided choosing appropriate inheritance notion projection inheritance guarantees tasks skipped transferring case superclass subclass 
unfortunately approach useful new workflow super subclass old workflow 
reader interested workflow change petri nets referred aalst contains papers authors mentioned 
refer phd thesis keddara keddara complete overview related dynamic change 
strength approach applied context arbitrary changes 
note assume absence certain routing constructs sequential conditional parallel iterative included restrict change specific types changes 
feature approach change regions determined structure workflow model syntax dynamics state space exploration 
facilitates implementation yields change regions tangible users 
provides pragmatic approach tackle dynamic change bug 
syntactic changes graphical workflow model types change regions calculated 
static change region incorporates parts workflow model directly effected change 
dynamic change region extends static change region incorporate parts workflow model indirectly effected change 
minimal change region reduces dynamic change region eliminating border nodes 
minimal change region subset dynamic change region 
main result cases workflow instances leave minimal change region unmarked transferred old workflow new workflow creating problems deadlocks livelocks successful termination guaranteed 
plan implement approach commercial workflow management system 
plan extend workflow management system cosa thiel ley cosa solutions feature calculate minimal change region enact valid transfers 
extension cosa quite straightforward cosa petri nets provides api remove create cases state workflow 
second plan realize functionality workflow management systems 
staffware staffware plc example system laboratory 
implementation feature staffware straightforward staffware petri nets known required api provided 
candidates realizing approach flow fujitsu software 
systems offer extensive api part reported conducted author visiting large scale distributed information systems lsdis laboratory department computer science university georgia athens usa 
author arpinar lsdis lab 
input visit eric verbeek proofreading 
aalst 

chapter reasons petri net workflow management system 
wakayama navathe yates editors information process integration enterprises rethinking documents volume kluwer international series engineering computer science pages 
kluwer academic publishers boston massachusetts 
aalst 

application petri nets workflow management 
journal circuits systems computers 
aalst 

workflow verification finding control flow errors techniques 
business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 
aalst basten 

inheritance workflows approach tackling problems related change 
theoretical computer science appear 
aalst basten verbeek 

adaptive workflow interplay flexibility support 
editor enterprise information systems pages 
kluwer academic publishers norwell 
aalst desel oberweis editors 
business process management models techniques empirical studies volume lecture notes computer science 
springer verlag berlin 
agostini michelis 

improving flexibility workflow management systems 
business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 
bertino 

object oriented database systems concepts architecture 
addison wesley 
casati ceri pernici pozzi 

workflow evolution 
data knowledge engineering 
desel esparza 

free choice petri nets volume cambridge tracts theoretical computer science 
cambridge university press cambridge uk 
ellis keddara 

workflow change workflow 
business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 
ellis keddara 

ml modeling language support dynamic evolution workflow systems 
computer supported cooperative 
appear 
ellis keddara rozenberg 

dynamic change workflow systems 
ellis kling mylopoulos kaplan editors proceedings conference organizational computing systems pages milpitas california 
acm acm press new york 
ellis nutt 

modelling enactment workflow systems 
marsan editor application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 
cerf estrin 

proper termination flow control programs involving concurrent processes 
acm sigplan 
jablonski bussler 

workflow management modeling concepts architecture implementation 
international thomson computer press london uk 
herzog 

managing evolving workflow specifications 
proceedings rd ifcis international conference cooperative information systems new york city new york usa august pages 
ieee cs press 
keddara 

dynamic evolution workflow systems 
phd thesis university colorado boulder colorado usa 
aalst 

liveness fairness recurrence 
information processing letters 


workflow imperative 
van nostrand reinhold new york 
lawrence editor 
workflow handbook workflow management coalition 
john wiley sons new york 
michelis ellis 

computer supported cooperative petri nets 
reisig rozenberg editors lectures petri nets ii applications volume lecture notes computer science pages 
springer verlag berlin 
murata 

petri nets properties analysis applications 
proceedings ieee 
reichert dadam 

supporting dynamic changes workflow loosing control 
journal intelligent information systems 
reisig rozenberg editors 
lectures petri nets basic models volume lecture notes computer science 
springer verlag berlin 
marjanovic orlowska 

managing change time dynamic workflow processes 
international journal cooperative information systems 
aalst 

conservative adaption workflow 
wolf reimer editors proceedings international conference practical aspects knowledge management pakm workshop adaptive workflow pages basel switzerland 
aalst 

ad hoc workflow problems solutions 
wagner editor proceedings th dexa international workshop database expert systems applications pages toulouse france 
ieee computer society press los alamitos california 
vossen weske 

wasa object oriented workflow management system 
faloutsos ghandeharizadeh editors sig mod proceedings acm sigmod international conference management data june philadelphia pennsylvania usa pages 
acm press 
weske 

foundation design implementation dynamic adaptations workflow management system 
angewandte mathematik und informatik universit germany 
wfmc 
workflow management coalition terminology glossary wfmc tc 
technical report workflow management coalition brussels 
petri nets classical petri net desel esparza murata reisig rozenberg directed bipartite graph node types called places transitions 
nodes connected directed arcs 
connections nodes type allowed 
places represented circles transitions rectangles 
definition petri net 
petri net triple finite set places finite set transitions set arcs flow relation place called input place transition iff exists directed arc 
place called output place transition iff exists directed arc 
weuse denote set input places transition 
notations similar meanings set transitions sharing input place 
note consider multiple arcs node 
context workflow procedures sense weights places correspond conditions 
illustrate concepts consider petri nets shown 
petri net left transitions places 
petri net right transitions places 
transition prepare shipment left model input place output places 
note source places places input transition 
places sink places 
time place contains zero tokens drawn black dots 
state referred marking distribution tokens places 
represent state follows state token place tokens token tokens 
represent state follows compare states define partial ordering 
states iff number tokens may change execution net 
transitions active components petri net change state net firing rule transition said enabled iff input place contains token 
enabled transition may fire 
transition fires consumes token input place produces token output place 
petri net state notations transition enabled state firing results state transition firing sequence leads state state possibly empty set intermediate states state called reachable notation iff firing sequence 
note empty firing sequence allowed denote petri net initial state 
state reachable state iff consider sequential petri net shown model right 
initially place contains token transition prepare shipment enabled 
firing transition results state just token starting state token states reachable 
parallel petri net shown reachable states starting state token 
transition prepare shipment fires resulting state token 
state send goods send bill enabled 
define standard properties petri nets 
define properties related dynamics petri net give structural properties 
definition live 
petri net live iff reachable state transition state reachable enables 
petri net structurally live exists initial state net live 
nets shown structurally live 
definition bounded safe 
petri net bounded iff place natural number reachable state number tokens 
net safe iff place maximum number tokens exceed 
petri net structurally bounded net bounded initially state 
nets shown structurally bounded 
definition formed 
petri net formed iff state live bounded 
paths connect nodes sequence arcs 
definition path elementary conflict free 
petri net 
path node node sequence elementary iff nodes 
conflict free iff place transition 
convenience introduce alphabet operator paths 

define function returns set elementary paths nodes set elementary paths start node node 
definition strongly connected 
petri net strongly connected iff pair nodes places transitions path leading 
definition free choice 
petri net free choice petri net iff transitions implies definition state machine 
petri net state machine iff transition exactly input output place 
definition component 
subnet called component petri net strongly connected state machine 
definition coverable 
petri net coverable iff node exist component contains node 
see desel esparza reisig rozenberg elaborate standard notions 
addition standard notions define operators nets union nets subnet notion projection net set places transitions 
definition union subnet 
petri nets 
union petri net subnet denoted iff definition projection 
petri net projection projection petri net set nodes includes connections nodes nodes connected included nodes connected 
note definition subnet 
proof theorems appendix show dynamic change region provides criterion sufficient guarantee validity transfers 
essence proof uses fact component identified algorithm similar sound wf net connected set nodes unique source node unique sink node composite behavior comparable single transition 
prove central theorem need introduce components source sink nodes 
definition source sink nodes 
petri net set source nodes defined follows 
set sink nodes defined follows 
source node node input nodes node external input nodes 
consider example 
place source node sink node node output nodes node external output nodes 
consider example 
place sink node source sink nodes notions source sink nodes define components 
definition component 
petri net component singleton ii singleton iii directed path iv elementary path 
components similar wf nets embedded larger petri net 
contrast wf nets source sink node transition place 
line algorithm set partitioned subsets 
goal algorithm extend subsets correspond components 
lemma lists properties components constructed algorithm 
properties proof theorem 
lemma 
sound wf nets dynamic change region 
partitioned 
connected partitioning exists unique 
partitioning properties component 
component 
component 
proof 
prove partitioned 
partitioning unique 
partition singletons 

partitioning satisfies properties 
partitioning satisfy property arc node node 
case join 
clearly nodes connected 
repeat procedure holds 
note existence partition line algorithm 
remains proven properties hold 
prove properties set nodes identified partitioning 
algorithm stops new nodes added lines 
implies 
ii 
iii implies 
iv implies observations follow directly algorithm 
result line algorithm property 
observations prove remaining properties 
property 
prove singleton 
source node 
contains source node 
contain directed path node 
consider node path 
clearly node source node property iii 
source nodes 
suppose source nodes 
directed elementary path 
common node paths walk backwards directed elementary path encounters node appearing path 
paths common node define subpaths elementary directed path elementary directed path 
clearly 
observation 
source nodes input nodes 
paths contain multiple nodes 
contradicts assumption shows source node 
similarly shown singleton 

need prove directed path 
directed path directed path paths exist wf net 
element clearly observation iii 
directed path 
similarly shown directed path 
elementary path 
observation implies 
property 
unique source node node appears node 
case static change region set nodes connected change 
node subnet source node note adding new connections source nodes non source nodes 
similarly show unique sink node sink node source node sink node show nodes unique focus properties component needs satisfy 
node path see proof property 
node path directed path directed path paths exist wf net paths paths easy show appear path consider node appear directed path path clearly see proof property 
directed path remains proven unique 
suppose additional source node 
directed path contained source node source node 
similarly shown unique 
observations conclude component property 
proof property identical proof property 
property 
property follows directly proof properties 
properties listed lemma prove theorem 
theorem states dynamic change region provides sufficient condition valid transfers 
theorem sufficient condition valid transfers 
sound wf nets dynamic change region 
reachable marking marking dynamic change region transfer valid 
proof 
prove implies 

property shows 
prove lemma shows parti tioned 
component component component consider arbitrary component places wf nets 
follows directly definition 
subnets sound wf nets subnets sound 
see theorem aalst 
note soundness subnet heavily depends safeness enclosing wf net 
subnets sound behavior corresponds single transition connecting 
consider firing sequence leads 
consider transitions occur 
transition form complete subsequences embedded wf net tokens left subsequence corresponds firing virtual transition firing virtual transition mimicked firing sequence embedded wf net way occurrences transitions replaced transitions assumes places 
reasoning applied components transitions 
transition bordered wf net transformed sound wf net adding source sink place 
repeated components 
transformed firing sequence leads 
prove theorem 
theorem weaker condition valid transfers 
sound wf nets dynamic change region 
reachable marking marking internal places dynamic change region transfer valid 
proof 
compared theorem called border places marked case transferred 
consider place 
component 
appears sets input transitions identical behavior similar single transition transfer token jeopardize validity transfer 
similarly token place jeopardize validity 
places outside border places marked valid 
biography wil van der aalst full professor information systems head department information technology faculty technology management eindhoven university technology 
part time professor computing science department university working part time consultant 
wil van der aalst research interests include information systems simulation petri nets process models workflow management systems verification techniques enterprise resource planning systems computer supported cooperative interorganizational business processes 
