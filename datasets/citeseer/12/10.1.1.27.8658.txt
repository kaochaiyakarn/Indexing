universit degli studi di bologna dipartimento di elettronica informatica sistemistica viale bologna italy phone fax dimensional bin packing problem martello david daniele vigo technical report deis dimensional bin packing problem martello david daniele vigo deis univ bologna viale bologna diku univ copenhagen univ copenhagen may revision operations research problem addressed orthogonally packing set rectangular shaped boxes minimum number rectangular bins 
problem strongly np hard extremely difficult solve practice 
lower bounds discussed proved asymptotical worst case performance continuous lower bound exact algorithm filling single bin developed leading definition exact branch bound algorithm dimensional bin packing problem incorporates original approximation algorithms 
extensive computational results involving instances boxes shown instances solved optimality reasonable time limit 
set rectangular shaped boxes characterized width height depth ng unlimited number identical dimensional containers bins having width height depth dimensional bin packing problem bpp consists orthogonally packing boxes minimum number bins 
assume boxes may rotated packed edge parallel corresponding bin edge 
assume loss generality input data positive integers satisfying 
restriction imposed boxes need packed layers guillotine cutting imposing packing boxes obtained sequential face face cuts parallel faces bin required 
problem bpp strongly np hard generalization known onedimensional bin packing problem bpp set positive values partitioned minimum number subsets total value subset exceed bin capacity clear bpp special case bpp arising important related problem arises case dimensional bin packing problem bpp calling determination minimum number identical rectangular bins size theta needed pack set rectangles sizes theta 
general classification packing loading problems refer dyckhoff dyckhoff finke dyckhoff 
bpp closely related container loading problems ffl knapsack loading 
knapsack loading container box associated profit problem choose subset boxes fits single container bin maximum profit loaded 
profit box set volume problem corresponds minimization wasted space 
heuristics knapsack loading problem meyer 
ffl container loading 
version boxes packed single container bin infinite length 
problem find feasible solution length bin filled minimized 
heuristic container loading problem george robinson variants 
bischoff marriott compare different heuristics george robinson framework 
ffl bin packing 
bpp calls solution boxes packed bins contrast container loading problem bins finite dimensions objective find solution smallest possible number bins 
approximation algorithm dimensional bin packing problem 
chen lee shen consider generalization problem bins may different dimensions 
integer programming formulation developed small instance boxes solved optimality mip solver 
knowledge algorithms exact solution bpp published start presentation considering number lower bounds 
section determine worst case behaviour called continuous lower bound bpp 
proved asymptotical worst case behavior continuous bound constructive algorithm meets bound 
new bounds introduced analyzed section 
section exact algorithm selecting subset boxes packed single bin maximizing total volume packed 
results section obtain approximation algorithms exact branchand bound algorithm 
extensive computational testing algorithms section showing exact algorithm able solve instances boxes optimality reasonable time 
denote optimal solution value bpp 
volume box denoted total volume boxes bin volume 
continuous lower bound obvious lower bound bpp comes relaxation box cut unit length cubes producing continuous lower bound clearly computed time 
examine worst case behaviour value optimal solution instance minimization problem value provided lower bound ae 
absolute worst case performance ratio defined smallest real number ae ae ae instance problem 
asymptotic worst case performance ratio smallest real number ae large ae ae instances satisfying proved martello vigo dimensional bin packing problem continuous lower bound wh absolute worst case performance ratio equal theorem defines dimensional case asymptotic worst case performance theorem asymptotic worst case performance ratio lower bound proof 
prove thesis introducing heuristic algorithm instance bpp sufficiently large solution value produces feasible solution requiring number bins arbitrarily close 
heuristic applies iteration algorithm called proposed martello vigo dimensional bin packing problem 
instance bpp algorithm determines feasible solution requiring say bins gamma filled average quarter area gamma gamma hw denotes total area occupied rectangles packed bin heuristic algorithm bpp works follows 

partition boxes depth number dlog de subsets gamma rule box assigned set boxes assigned set words contains boxes depth contains boxes depth 

nonempty subset instance bpp defined jj rectangles having sizes bin sizes apply algorithm obtaining solution value bins filled average quarter area derive corresponding dimensional solution bin slices width height depth observe slices filled average eighth volume denotes total volume occupied boxes packed bin slice call fractional bin slices possibly filled slices 

observe bin slices width height depth fraction consider bin slices part fractional ones decreasing depth combine full bins depth simply filling bins slices 
give number bins filling plus possibly filled bin 

consider fractional bin slices combine done step full bins depth observe new bins needed slices subset total depth gamma obtained solution uses bins 
total volume boxes gamma obviously 
show bound tight sufficient consider instance multiple sufficiently large value 
optimal solution value clearly denote delta volume box delta ratio arbitrarily close sufficiently large previously mentioned variant problem may admit boxes rotated order obtain better filling 
instance denote solution value hypothesis 
immediately gamma 
hand tightness example holds variant 
corollary asymptotic worst case performance ratio lower bound rotation boxes angle allowed 
new lower bounds continuous lower bound previous section produce tight values box sizes small respect bin size 
lower bound section better suited cases relatively large boxes 
bound obtained reduction dimensional case 
wh ae oe definition boxes wh possibly packed bin placing 
relaxed instance bpp consisting boxes equivalent instance bpp defined values wh bin size valid lower bound bpp valid lower bound bpp 
particular consider bound introduced martello toth dell martello wh fi fi fi fi ae wh fi fi fi max js gamma jj jd gamma jj gamma gammad fj wh gamma fj wh pg analogous lower bounds wd hd may obtained defining wd fj hd fj determining wd hd congruent modification 
proved theorem valid lower bound bpp wh wd hd wh defined wd resp 
hd obtained interchanging resp 
resp 

bound computed time proved martello toth dell martello values corresponding actual box sizes need considered computation may performed time 
lower bounds dominate 
instance introduced tightness proof theorem fj wh obtain 
consider similar instance multiple case wh wd hd 
instance shows worst case performance arbitrarily bad 
better bound explicitly takes account box dimensions provided theorem 
theorem pair integers define fj gamma gamma qg fj fj qg valid lower bound bpp wh wh max ks gamma delta wh gamma kv wh proof 
show wh valid lower bound relaxed instance bpp consisting boxes 
pair coincides set wh see wh valid lower bound number bins needed boxes 
second term increases value lower bound number additional bins needed boxes 
observe box packed bin placing 
words respect relaxed instance box sizes theta theta seen larger equivalent box sizes theta theta total volume wh bins boxes bl wh minus volume equivalent boxes minus volume boxes 
follows max ks gamma delta wh gamma wh kv gamma additional bins needed boxes thesis 
corollary valid lower bound bpp wh wd hd wh max wh wd resp 
hd obtained interchanging resp 
resp 
bound computed time 
proof 
validity immediate theorem 
prove second part thesis showing compute wh time 
observe wh independent computed time 
show computation sufficient consider values correspond distinct values respectively 
value distinct values note increase may cause boxes move wh wh box value numerator increased wh gamma 
distinct values need considered induce different sets intermediate values produce dominated lower bounds 
analogously obtain value values need considered 
conclude proof showing value computation bounds may parametrically performed time 
assume boxes nondecreasing values 
determination initial sets computation wh may clearly performed time 
remaining values computation corresponding bounds simply requires updating ks kv wh invariant new value boxes may move new boxes may enter 
value computation requires time 
worst case time complexity equal noted computational effort required compute considerably greater required theorem lower bound dominates proof 
fj hg wh wh max gamma bl wh max wh wh max wh analogously wd max wd hd max hd filling single bin section describe enumerative algorithm exact solution bpp 
algorithm repeatedly solves associated subproblems subset boxes packed possible single bin 
problem np hard strong sense solving special case boxes depth height answers question instance dimensional bin packing problem admits solution requiring bins 
section describe branch bound algorithm exact solution maximization version problem heuristic algorithms section 
problem consider selecting subset boxes assigning coordinates box box goes outside bin boxes overlap total volume boxes maximum 
dimensional case similar problem considered christofides 
non trivial generalization dimensional approach dimensional case give effective algorithm problem 
assume origin coordinate system left bottom back corner bin 
node branch decision tree described detail section current partial solution packs boxes certain subset ae increased selecting turn box generating descendant nodes placing admissible points 
placing box point mean left bottom back corner positioned coordinates point obviously box placed set admissible points considered may drastically reduced properties 
property packing bin replaced equivalent packing box may moved leftwards downwards backwards 
proof 
obvious 
similar property observed christofides case 
property ordering boxes optimal solution exists proof 
optimal solution define associated digraph vertex box arc vertex vertex holds 
clear resulting digraph acyclic cycle boxes boxes right 
dimensional single bin filling 
envelope associated placed boxes marked dashed line black points indicate corner points 
known vertices acyclic digraph re numbered arc exists 
follows enumeration scheme filling single bin limited generate solutions satisfy property ii sequence boxes assigned starting root node constitute box numbering satisfying property 
important consequence ii decision node boxes packed box selected branching may placed points box part right front words boxes define envelope separating regions boxes may resp 
may placed 
formally new box may placed set shows dimensional case feasible region set placed boxes corresponding envelope 
observe due property box may placed points slope envelope changes vertical horizontal black points points called corner points envelope 
subsection show set feasible corner points efficiently determined 
finding possible positions placing box solve problem stages starting dimensional case 
assume moment box dimensional packing faces considered 
box set quite easy find dimensions set corner points envelope associated 
assume boxes ordered points values nonincreasing breaking ties largest value see 
algorithm determining corner points set consists phases extreme boxes boxes point coincides point slope envelope changes horizontal vertical 
second phase corner points defined intersections lines leading points extreme boxes 
infeasible corners box fit removed 
get algorithm algorithm corners return comment phase identify extreme boxes ij comment phase determine corner points gamma gamma em em comment phase remove infeasible corner points min jni fw min jni fh 
consider example extreme boxes resulting corner points indicated filled circles phase remove corner points 
time complexity corners ij plus ij log ij initial box sorting 
assume resulting corner points 
area occupied envelope gamma gamma gamma gamma resp 
term nonzero resp 
corner point phase removed phase 
special case obviously set wh 
algorithm determine set corner points dimensions set dimensional boxes currently packed bin 
may apply algorithm corners distinct coordinate box ends increasing values 
coordinate corners applied subset boxes adding resulting corner points 
way may obtain false corner points corner points dimensional case dimensional case see 
points easily removed dominance say corner point dominates corner point hidden 
formally may written equalities expressions ensures boxes front chosen corner point generated inside dimensional envelope 
done algorithm generation corner points ends soon coordinate box placed 
algorithm corners return fz ig sort increasing values fz min jni fd dimensional single bin filling 
corner points applying algorithm corners times value true corner points filled circles false corner points empty circles 
fi apply corners yielding comment add true corner points gamma 
time complexity corners 
jij distinct coordinates set derived time sorting boxes done algorithm 
value check corner points prior addition requires gamma time total gamma ordered increasing decreasing complexity follows observation jij 
assuming index generated corners volume occupied envelope associated gamma gamma gamma gamma term nonzero branch bound algorithm filling single bin easily derive recursive way branch bound algorithm finding best filling single bin boxes set initially box placed iteration set ae currently packed boxes set determined corners corresponding volume 
total volume achieved current best filling may backtrack gamma remaining volume completely filled improve boxes fit bin possibly update backtrack 
position box assign box position provided points exceed bin limits call procedure recursively 
best performance branch bound algorithm obtained boxes priori ordered nonincreasing volumes 
small instances branch bound approach corners considerably limits enumeration compared naive technique trying boxes practical experiments shown algorithm time consuming 
branch bound algorithm section single bin filling solved small subset boxes 
specific procedure derived solving subproblem jjj direct evaluation possible 
case boxes arrangements boxes may placed respect 
arrangements simply tested 
boxes obvious guillotine packing exists 
problem may reduced placing boxes side cut remaining box side 
ways boxes partitioned partition cut orthogonal orientations boxes side cut handled packing problem boxes 
boxes case involved non guillotine packing possible 
boxes guillotine packed cut separate box remaining non patterns boxes gamma plane feasible 
separate boxes 
case different partitions partition orientation cut placing boxes handled packing problem second case different partitions partition orientation cut pair boxes handled packing problem boxes 
packings possible boxes lay plane illustrated gamma plane reasons symmetry may fix boxes lower left corner bin consider 
remaining boxes remaining corners plane checking boxes overlap 
exact approximation algorithms exact algorithm dimensional bin packing problem level decomposition principle martello vigo dimensional bin packing problem 
main branching tree assigns boxes bins specifying actual position boxes specialized version branch bound algorithm section certain decision nodes test subset boxes placed inside single bin determine placing answer affirmative 
order construct starting solution heuristic algorithms defined fit decreasing approach cut version single bin filling algorithm 
sections describe main branching tree specialized single bin filling algorithm heuristics 
main branching tree main branching tree assigns boxes different bins specifying actual position 
boxes previously sorted nonincreasing volumes exploration follows depth strategy 
incumbent solution value mg current set bins allocate boxes decision nodes 
bin called open box currently placed evidence box placed called closed resp 
denotes set currently open resp 
closed bins 
decision node free box assigned turn open bins addition jm gamma box assigned new bin opening 
box assigned bin contains say subset boxes actual feasibility assignment checked follows 
lower bound computed sub instance defined boxes fjg node immediately killed 
heuristics section executed sequence sub instance solution requiring single bin obtained assignment accepted 
solution optimal solution sub instance determined algorithm section node accepted single bin solution killed 
current node accepted attempt close current bin 
free box compute lower bound sub instance defined boxes fj lower bound greater bin closed know box placed 
dominance rule tested 
subset free boxes lower bound computation value single bin solution heuristics sub instance defined boxes know better placing possible boxes assign bin close 
bin closed lower bound computed instance defined boxes currently assigned closed bins jm backtrack 
closed bins seldom completely filled improved bound generally increases branching propagates 
single bin filling previously mentioned certain nodes main decision tree require implicit enumeration 
decision node killed lower bound computation accepted heuristics feasibility current assignment boxes tested single bin filling algorithm section 
interested finding solutions boxes currently assigned bin placed inside filling procedure section initialize current best filling gamma algorithm returns unchanged value may conclude filling exists boxes inside bin 
approximation algorithms order obtain upper bound root node branching tree limit number executions single bin filling algorithm different heuristics defined 
approaches computationally proved complementary behaviour instances poor performance corresponded performance 
heuristic layer building principle derived shelf approaches authors dimensional bin packing problem see chung garey johnson wang 
approaches rectangles sorted nonincreasing height packed left right rows forming shelves shelf bottom dimensional bin new shelf needed created horizontal line coincides top rectangle packed highest shelf 
dimensional case construct bin slices having width height different depths 
slice obtained dimensional shelf algorithm applied subset containing deepest boxes packed 
slices combined dimensional bins 
set boxes packed 
algorithm works follows 
algorithm sort boxes nonincreasing values fj jt js js construct single slice depth applying dimensional shelf algorithm boxes fj sort boxes nondecreasing height box fits existing shelf pack lowest shelf fits vertical space create new shelf pack remove packed boxes depths resulting slices dimensional bin packing algorithm combine slices minimum number dimensional bins depth 
final step fortran code mtp provided book martello toth limit 
algorithm construct bin slices width depth different heights bin slices slices depth different widths 
practice run times interchanging dimension boxes bins best solution taken 
second heuristic repeatedly fills single bin exact algorithm section 
set boxes packed 
algorithm sort boxes nondecreasing volume apply single bin filling algorithm remove packed boxes 
solution times single bin filling algorithm may unacceptable jt large branching scheme section changed cut enumeration described ibaraki decision node branches considered 
values experimentally jt jt larger problems 
limit decision nodes imposed filling bin best solution limit returned 
limit number branches algorithm produces different solutions dimensions boxes bins interchange algorithm run times 
computational experiments knowledge test instances published dimensional bin packing problem 
computational experiments chosen generate threedimensional instances generalizing classes randomly generated dimensional instances 
new class fill instances introduced 
short means uniformly random uniformly randomly 
classes instances generalizations instances considered martello vigo 
bin size types boxes considered ffl type 
ffl type 
ffl type 
ffl type 
ffl type 
obtained classes instances follows 
class box type probability types probability 
second group classes generalization instances wang 
classes may described class bin size boxes 
class bin size boxes 
class bin size boxes 
new difficult class fill problems introduced class 
instances known solution bins boxes generated cutting bins smaller parts 
problem boxes bin cut bn boxes bin cut gamma gamma boxes 
cutting recursion set boxes generated initial values respectively 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma oe gamma gamma non cuttable pattern boxes procedure cut jj generate box dimension jj generate non guillotine cutting pattern shown partition execute steps 
generate gamma call cut call cut gamma 
generate gamma call cut call cut gamma 
generate gamma call cut call cut gamma 
pathological situations may occur possible arrange boxes case new problem simply generated scratch 
exact code implemented experiments run sun ultrasparc mhz 
time limit seconds instance instances run class size problem 
fine tuning algorithm showed best performance obtained principle closing bin described section tested branching nodes farther nodes root 
outcome experiments tables vi 
table shows solved large majority problems time limit 
nearly instances solved optimality able solve half instances optimality difficult fill instances 
notice instances classes solved optimality large values average solution times table ii 
table number instances solved optimality class table ii average solution times class table iii shows average value solutions 
entries compared lower bound values tables iv vi 
theorem proved dominates interesting see practice considerably better 
comparing solution values seen extremely tight considered instances generally differing bin optimal solution value 
exact algorithms dimensional bin packing problem important aspects addressed 
number lower bounds compared theoretical practical performance 
table iii average solution class table iv average value class table average value class table vi average value class branch bound algorithm filling single bin plays central role algorithm bpp may useful research projects field cutting packing 
demonstrated framework proposed martello vigo exact solution bpp may adapted dimensional case small modifications 
computational results illustrate applicability results 
acknowledgments third authors acknowledge dell universit della ricerca scientifica tecnologica murst consiglio nazionale delle ricerche cnr support project 
second author ec network supporting research european research fellowship 

wang 
dimensional finite bin packing algorithms 
journal operational research society 
bischoff marriott 
comparative evaluation heuristics container loading 
european journal operational research 
chen lee shen 
analytical model container loading problem 
european journal operational research 
christofides 
algorithm dimensional cutting problems 
operations research 
chung garey johnson 
packing dimensional bins 
siam journal algebraic discrete methods 
dell martello 
optimal scheduling tasks identical parallel processors 
orsa journal computing 
dyckhoff 
typology cutting packing problems 
european journal operational research 
dyckhoff finke 
cutting packing production distribution 
physica verlag heidelberg 
dyckhoff 
cutting packing 
dell martello editors annotated bibliographies combinatorial optimization 
john wiley sons chichester 
meyer 
computer heuristic packing pooled shipment containers 
european journal operational research 
george robinson 
heuristic packing boxes container 
computers operations research 
christofides 
exact algorithm general orthogonal dimensional knapsack problems 
european journal operational research 
ibaraki 
enumerative approaches combinatorial optimization part volume annals operations research 
baltzer basel 
martello toth 
knapsack problems algorithms computer implementations 
john wiley sons chichester 
martello toth 
lower bounds reduction procedures bin packing problem 
discrete applied mathematics 
martello vigo 
exact solution dimensional finite bin packing problem 
management science 
appear 

container loading problem 
proceedings 

dimensional bin packing algorithm 
inform 
process 



