specifying representations machine instructions norman ramsey university virginia mary fern andez labs sled specification language encoding decoding describes binary assembly language representations machine instructions 
guided sled specification new jersey machine code toolkit generates bit manipulating code applications process machine code 
programmers write applications level abstraction toolkit enables applications recognize emit binary representations hardware 
sled suitable describing cisc risc machines specified representations mips sparc alpha intel pentium instructions toolkit users written specifications power pc motorola 
article includes representative excerpts sparc pentium specifications 
sled uses elements fields tokens describe parts instructions patterns describe binary representations instructions groups instructions constructors map binary levels 
combining elements different ways sled supports machine independent implementations machine level concepts conditional assembly span dependent instructions relocatable addresses object code sections relocation 
sled specifications checked automatically consistency existing assemblers 
implementation toolkit largely determined representations patterns constructors 
normal form facilitates construction encoders decoders 
article describes normal form 
toolkit help build applications 
built retargetable debugger retargetable optimizing linker 
colleagues built dynamic code generator decompiler execution time analyzer 
toolkit generates efficient code example linker emits binary faster emits assembly language making times faster produce directly assembler 
categories subject descriptors computer systems organization general sys tems specification methodology programming languages language classifications specialized application languages programming languages processors translator writing systems compiler generators general terms languages additional key words phrases compiler generation decoding encoding machine code machine description object code relocation funded fannie john hertz fellowship ph fellowship ibm graduate research fellowship bellcore 
authors addresses ramsey department computer science university virginia charlottesville va email nr cs virginia edu fern andez labs research park avenue florham park nj email mff research att com 
permission digital hard copy part material fee granted provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission association computing machinery 
acm 
copy republish post servers redistribute lists requires prior specific permission fee 
fl acm digits dashes slashes price acm transactions programming languages systems vol 
may pages 
specifying representations machine instructions delta 
article describes sled specification language encoding decoding implementation new jersey machine code toolkit 
sled define mappings symbolic assembly language binary representations machine instructions 
specified representations mips sparc alpha intel pentium instructions toolkit users written specifications power pc motorola 
specifications simple practical toolkit write applications multiple architectures 
toolkit uses sled specifications help programmers write applications process machine code assemblers disassemblers code generators tracers profilers debuggers 
toolkit lets programmers encode decode machine instructions symbolically 
guided sled specification transforms symbolic manipulations bit manipulations 
traditional applications process machine code include compilers assemblers linkers debuggers 
newer applications include profiling tracing tools ball larus cmelik keppel testing tools hastings joyce protection wahbe run time code generators george link time optimizers fern andez srivastava wall :10.1.1.111.6293
frameworks creating applications manipulate executable files machine johnson larus schnarr srivastava eustace 
graham describe auxiliary information needed facilitate machine code manipulations report support mips sparc architectures 
applications avoid machine code assembly language unix compilers emit assembly language object code 
practical assembler generating code run time adding instrumentation code generation 
machine code applications duplicated source code transformation applications usually machines applications object code source code available 
toolkit easier build applications frameworks object code executable file 
applications assembler currently implement encoding decoding hand 
different ad hoc techniques different architectures 
task intellectually demanding error prone bit manipulating code usually bugs 
toolkit automates encoding decoding providing single reliable technique variety architectures 
intended support traditional compilation support nontraditional operations rewriting executable files run time code generation 
applications toolkit encoding decoding 
example assemblers encode disassemblers decode profilers 
applications streams instructions 
decoding applications matching statements read instructions stream identify 
matching statement case statement alternatives labeled patterns match instructions sequences instructions 
encoding applications call procedures generated toolkit 
procedures encode instructions emit acm transactions programming languages systems vol 
may 
delta ramsey fern andez stream sparc call emits word fa 
streams take forms example debugger treat text segment target process instruction stream 
toolkit library provides representation streams convenient encoding applications 
toolkit parts 
translator takes program embedded matching statements translates statements ordinary code 
handles programs written modula nelson 
generator generates encoding relocation procedures procedures call code library 
library implements instruction streams relocatable addresses refer locations streams 
checker checks specifications consistency existing assemblers 
translator generator checker need instruction specification encoding procedures checking code generated specification matching statements match instructions parts thereof defined specification 
library machine independent 
sled specification language simple designed specifications resemble instruction descriptions architecture manuals 
sled uses single bidirectional construct describe encoding decoding consistency guaranteed 
toolkit checks specifications unused constructs underspecified instructions internal inconsistencies 
instruction encoding specified modest effort alpha mips sparc pentium specifications lines 
sled specification language primary subject article 
simplicity specification personal preference 
simple specifications correct correct specifications valuable variety applications 
toolkit simple general avoid describing semantics instructions semantic information hard get right single application 
sled focuses describing representation instructions automating translation representation 
personal experience applications toolkit 
mld retargetable optimizing linker fern andez uses toolkit encode instructions emit executable files 
ldb ramsey ramsey hanson retargetable debugger uses toolkit decode instructions implement breakpoints :10.1.1.30.6519
toolkit help develop run time code generator decompiler execution time analyzer braun optimizing compiler object oriented languages dean 
toolkit reduces retargeting effort code reliable 
example ldb disassembler mips requires lines code mld replaced lines hand written mips code generated encoding relocation procedures 
hiding shift mask operations replacing case statements matching statements checking specifications consistency toolkit reduces possibility error 
toolkit speed applications generate assembly language binary code 
example mld creates executable files times faster encoding procedures assembly language calling native assembler 
realize speedups toolkit mld need hand written encoding relocation procedures target architecture 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta primary contribution sled specification language expressive write clear concise reusable specifications instruction representations variety widely architectures 
processor specifications derives code encoding decoding problems eliminating significant source retargeting effort 
model machine instructions machine level concepts general specified implemented machine independent way 
concepts include conditional assembly instructions relocatable addresses object code sections relocation 
article devoted sled 
extended example specification representative subset sparc instruction set 
example shows typical specification structured sled 
cover details syntax semantics implementation followed smaller examples pentium specification show cisc addressing modes variable sized operands 
explain applications code generated toolkit conclude discussion related evaluation toolkit specification language 

specifying instruction representations illustrate sled specify subset sparc instruction set 
illustration drawn complete annotated specification sparc ramsey fern andez 
includes sparc integer instructions omits floating point instructions types load store synthetic instructions 
illustration explain elements specification language strategy language describe machine 
machine instructions fit machine word toolkit works streams instructions individual instructions 
instruction stream byte stream units may tokens size just bit bytes 
instruction sequence tokens token stream precise term 
tokens may come number classes help distinguish different parts complex instructions 
example pentium instruction include bit prefixes bit opcode bit format bytes bit immediate operand 
prefixes opcode tokens class format bytes operand different classes 
token partitioned fields field contiguous range bits token 
fields contain opcodes operands modes information 
tokens single class may partitioned way 
patterns constrain values fields may constrain fields single token sequence tokens 
patterns describe binary representations instructions groups instructions parts instructions 
example simple patterns specify opcodes complex patterns specify addressing modes specify group operand arithmetic instructions 
constructors connect binary assembly language representations instructions 
level instruction function constructor applied list operands 
operand may simple single field complex set fields taken tokens sequence 
applying constructor produces pattern gives instruction binary representation acm transactions programming languages systems vol 
may 
delta ramsey fern andez typically sequence tokens 
constructor associated function produces string instruction assembly language representation 
specification writers constructors define equivalent assembly language 
application programmers constructors emit instructions calling procedures derived constructor specifications decode instructions constructors matching statements match instructions extract operands 
machine designers expect binary representations untyped 
useful associate type information binary representations fragments binary representations reason programming languages help detect prevent errors 
classes tokens types 
require constructor type 
provide predefined anonymous type constructors produce instructions specification writers may introduce constructor types 
typically types describe effective addresses structured operands 
way constructor type corresponds operand class cattell constructor type corresponds access mode 
toolkit maps constructor types types code generates helps find errors application code specifications 
describe machine specifying tokens fields basic components instructions 
come patterns specify opcodes groups related opcodes constructors specify structured operands effective addresses 
having specified opcodes operands define constructors specify instructions 
possible specify constructors concisely opcode patterns group related instructions 
architecture manuals term synthetic describe instructions supported assembler directly hardware 
assembler synthesizes instructions special cases combinations instructions 
sled specifications include synthetic instructions binary representations applying previously defined constructors 
typically specify synthetic instructions separate file useful applications 
rest section gives excerpts specification sparc 
engineered sled syntax foster specifications architecture manuals refer relevant pages sparc manual sparc international page number 
concatenated excerpts form complete sled specification subset sparc architecture 
specification included toolkit source distribution 
bit numbers specify positions fields tokens 
different manuals different conventions toolkit supports little endian bit numberings 
sparc manual uses little endian numbering 
bit significant architecture manuals usually informal field specifications 
example fields sparc load instructions sparc international op rd op rs simm acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta fields declarations give locations sizes fields 
declaration defines fields sparc instructions 
line defines fields picture 
remaining lines define fields sparc manual floating point instructions omitted article 
fields op rd op rs simm disp op imm cond disp asi rs fd cd fs fs want give auxiliary information fields directives 
directive gives mnemonic names possible values field 
names bit toolkit uses names help derive names branch constructors 
architecture manuals define opcodes tables 
sparc manual uses hierarchy tables show specifications 
tables sparc international specified patterns call op sethi op expressions braces generate lists patterns pattern name bracketed list bound corresponding pattern right 
example call bound pattern op bound op op 
bindings wildcard ignored 
second line excerpt corresponds table identifier table appear table tables 
table sparc international defines opcodes integer arithmetic specified patterns add xor sub andn sll orn srl xnor sra flush save restore op columns acm transactions programming languages systems vol 
may 
delta ramsey fern andez toolkit handle opcode tables row major column major form 
expression columns generates integers sequence example bound pattern op op effectively column major numbering 
table sparc international defines load store opcodes specified ld lda ldf ldc st sta stf stc stb sth std swap op columns operands instructions fields integers operands effective addresses structure 
typed constructors define operands 
address operands sparc international possible formats constructors rs simm 
address rs simm simm 
address rs simm rs rs address rs rs rs address rs rs line specifies constructor giving opcode operands type pattern 
usually opcode simply constructor name 
plus signs operands indicate preferred rendering constructors assembly language 
operand specification simm 
indicates signed integer operand destined field simm 
constructors type address effectively disjoint union type containing element constructor 
address type specify operands constructors load store instructions 
field name pattern rs right hand side constructor abbreviation verbose pattern rs rs forces field rs equal operand named rs 
abbreviation appears frequently operands placed directly fields 
typed constructors specify register immediate operands constructors rs rs simm 
simm acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta architecture manuals group definitions related instructions instructions sparc manual sparc international 
disjunctions patterns represent groupings specifications concise 
specification patterns ld swap constructors address rd defines group untyped constructors general purpose load instruction 
specification demonstrates features sled opcode expansion implicit patterns 
pattern opcode constructor specification expanded individual disjuncts construct equivalent repeated specifications omitting right hand side tells toolkit compute pattern conjoining opcode operands 
idiom ubiquitous specifications risc machines 
square brackets comma indicate assembly language syntax 
examples show different elements specification interact 
constructor type address abstraction representing addressing mode 
constructors type specify different operands addressing modes representations 
type address specification load constructors take operand represents addressing mode 
operand result applying constructors type address defined 
example load register location stack compiler call fp 
example assumes fp suitably defined constants 
techniques specify logical shift arithmetic instructions take register operands operand type reg imm 
line specifies constructors patterns logical andn orn xor xnor shift sll srl sra arith add sub save restore alu arith logical shift constructors alu rs rd reg imm operand means second operand constructors produced applying constructor constructor defined 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez column table sparc international defines branch opcodes patterns branch bn ble bl bleu bcs bvs ba bne bg bgu bpos cond compound binding notational abbreviation relieves writing names square brackets bn 
twice 
defines names branch stand pattern matching 
specify branch instructions need features sled relocatable operands sets equations 
designating operand relocatable means value may unknown encoding time relocatable addr application tries encode instruction operand operand value unknown encoding procedure emits placeholder instruction relocation closure overwrite placeholder missing value known ramsey 
common example instruction branch unknown label 
convenience choose invalid instruction placeholder 
execution invalid instruction causes fault easy detect application bugs cause placeholders executed placeholder imm target address operand branch field instruction computed adding displacement program counter 
equation curly braces shows relationship taken sparc international pp 
constructors addr addr disp 
branch disp label refers location instruction exclamation point sign extension operator 
toolkit solves equation encoding procedure compute disp terms addr program counter 
toolkit expands alternatives branch alternatives line specifies constructors 
specify synthetic instructions applying constructors correspond instructions synthesized 
definitions bit set dec decrement sparc international constructors rd rd rd dec val rd sub rd val rd patterns right hand sides notated constructor applications 
synthetic instructions may stand instruction sequence depending values operands 
specify instructions putting alternative branches right hand side constructor specification 
branch may set equations 
toolkit encodes possible acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta branch equations solution operand values fit fields bound 
example synthetic instruction set sparc international expands single instruction possible requires general case constructors sethi val rd sethi rd imm val set val rd val sethi val rd val rd sethi val rd rd val rd bit extraction operator low high extracts bits positions low high 
branch sethi encoded significant bits val zero 
second branch works val encoded val fits signed bits 
final branch encoded 

sled syntax semantics illustrated sled extended example syntax semantics detail 
describe toolkit internal representation detail techniques systems 
sled solves intellectual problem describing instruction representations practical problems generation encoding decoding applications 
section associate language constructs problems solve identify constructs motivated special needs encoding decoding applications 
describe syntax ebnf grammar standard phi sequences psi theta optional constructs gamma alternative fi fi choices delta large help distinguish literals 
terminal symbols literally appear typewriter font 
terminal symbols nonterminals appear italic font 
excerpts grammar name nonterminal followed produces symbol 
specification grammatical start symbol sled specifications 
specification definitions appear uses parts specification may appear order specification list spec specification phi spec psi tokens fields toolkit supports little endian big endian bit numberings 
spec bit gamma fi fi delta significant default numbering bit significant bit 
fields declarations specify divide tokens fields 
fields declaration class tokens fields named declaration extracted tokens class 
field appears tokens exactly class 
fields declaration binds field names bit ranges specifies number bits tokens class 
toolkit generates shifts masks acm transactions programming languages systems vol 
may 
delta ramsey fern andez needed manipulate value field token 
fields syntax follows spec fields class name width phi field name low bit high bit psi field values unsigned storing signed values fields requires explicit sign extension operator postfix exclamation point 
example operator applied displacement field disp definition sparc branch constructors 
field values unsigned implicit sign extension confusing people reading specifications remember fields signed unsigned 
explicit sign extension supports field different contexts sign extension 
fields solve problem specifying binary representations lowest level 
offer advantages bit strings usual alternative 
token bit strings strings concatenated right order order fields implicit declarations 
assign wrong number bits field toolkit detects cases fields overlap leave gaps 
instructions vary size class tokens may needed 
intel pentium instructions composed bit tokens different classes different sizes 
useful put tokens size different classes 
example pentium uses byte specify addressing modes sib byte identify index registers intel mod reg opcode sib ss index base fields declarations bytes fields mod rm fields sib ss index base dividing tokens classes helps detect errors specifications 
example putting sib tokens different classes ensures user mistakenly match mod field index field byte 
divide sparc tokens classes different class instruction format 
define replicas fields op common multiple formats field belongs exactly class 
judge extra effort pay toolkit checks fields instructions partition instructions tokens check adequate detect errors machines sparc 
sled specifications include information names field values way fields expected application 
syntax follows spec phi field specifier phi field item psi psi field specifier field name phi field name psi acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta field item sparse binding phi binding psi names phi ident fi fi string psi checked unchecked guaranteed binding gamma ident fi fi string delta integer sparse names specify names fields 
names values names sparse 
naming field values solves single problem names variety ways 
unusual may sled field names constructor specifications fields specify constructor opcodes names values part names constructors 
example sparc specification uses names values field names part names branch constructors 
toolkit uses names generating encoding procedures emit assembly language generating disassemblers 
toolkit generate tables field names applications print names field values 
information fields helps solve problem generating efficient encoders 
toolkit normally checks field values encoding time sure represented number bits available 
safety checks needed field values supplied application safety checks generated toolkit infer values representable 
checks fine tuned checked unchecked guaranteed attributes fields 
application writers unwilling pay compare branch designate fields unchecked case encoding procedures check values simply mask high bits tokens corrupted bogus values 
unwilling pay cost masking designate fields guaranteed case values checking masking application guarantees value fits 
example code generators typically guarantee fields denoting registers register allocator easily ensure register numbers fall proper range 
guarantee added sparc example writing rs rs rd fs fs fd cd guaranteed fields checked default 
patterns patterns constrain division streams tokens values fields tokens 
instructions decoded patterns matching statements identify interesting inputs example pattern defined matches branch instruction 
instructions encoded patterns machine specification specify tokens written stream 
patterns composed constraints fields 
constraint fixes values field may 
constraints come forms range constraints field bindings 
range constraints values permitted field known statically 
range constraints represented internally form lo hi forcing value field fall range 
external syntax restrictive requires field name left single relational operator 
general form obtained conjoining constraints field 
restricted acm transactions programming languages systems vol 
may 
delta ramsey fern andez syntax presents burden practice range constraints range contains value write equals sign op 
field bindings value field known encoding time 
field binding forces field equal value computed dynamically dynamic computation represented expression containing free variables 
field bindings written equals signs 
patterns composed conjunction concatenation disjunction 
computed applying constructors 
syntax patterns follows pattern name name pattern field constructor type field name rel op expr constrains binds field opcode arguments constructor application pattern pat op pattern concatenates patterns class name matches single token class named label name pattern labels pattern pattern 
restrictive conjunction pattern restrictive conjunction patterns composition easily understood looking rules matching patterns 
patterns tested matching sequences tokens special pattern epsilon matches empty sequence 
constraint toolkit checks field named see falls range specified range constraint equal value bound field binding 
patterns combined conjunction concatenation disjunction 
patterns conjunction matches match 
typically conjunction constrain multiple fields single token 
concatenation matches matches initial sequence tokens matches tokens 
typically concatenation build patterns matching sequences token example match effective addresses pentium 
disjunction matches matches 
typically disjunction group patterns instructions related group sparc integer arithmetic instructions 
wildcard constraint class matches token class class example sparc matches bit token 
labeled pattern matches matches binds identifier location instruction stream matches 
ellipsis effect matching relaxes restrictions conjunction described 
patterns solve intellectual problem describing binary representations 
composition operator addresses different need 
conjunction specifies values fields combined form tokens 
concatenation describes representations containing multiple tokens sequence 
disjunction describes alternatives 
concatenation disjunction operators regular expressions 
regular expressions patterns kleene closure repetition operator 
omission ability examine fields order acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta component contains 
combined matches 
pattern disjunction disjuncts disjunct matches disjunct sequence sequents sequent matches token sequent conjunction constraints token satisfies constraint range constraint lo hi field falls range field binding expression fig 

components normal form patterns 
distinguishes problem matching patterns problem matching regular expressions 
representing patterns 
section presents detailed description toolkit representation patterns 
studying details representation best way understand meanings patterns pattern operators understand utility patterns generating encoders decoders 
details confusing similar identical list structures levels structures play different roles different contexts 
suggestive terminology helps distinguish structures roles level 
patterns represented disjunctive normal form 
normal form level structure levels correspond ways combine patterns 
shows components normal form terminology refer rules matching 
synonyms component changing synonyms shift focus component role component relationship component 
pattern represented disjunction list alternatives 
empty list permitted empty disjunction matches 
disjunct alternative sequence 
item sequence conjunction constraints 
pattern matches sequence tokens disjuncts alternatives matches 
disjunct matches sequence tokens sequent conjunction matches corresponding token 
empty sequence denoted epsilon matches consuming tokens 
conjunction matches token token satisfies constraints conjunction 
conjunction applies particular class tokens constraints conjunction constrain fields class 
empty conjunction denoted class permitted matches token associated class 
define shape sequence list token classes associated conjunctions sequence 
encoding decoding choose particular disjunct sequence emit match shape sequence determines tokens emitted matched sequence encoded decoded 
define simple constraints pattern operators terms normal form patterns 
hard show definitions combined rules matching normal form imply matching properties described 
normal form simple constraint pattern single disjunct sequence length single sequent contains constraint 
wildcard constraint form sequent contains constraints obtain empty disjunction conjoining mutually exclusive constraints 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez empty conjunction 
normal forms straightforward 
form concatenating disjuncts form large disjunction 
form distributing concatenation disjunction concatenate sequences concatenating sequents 
form distributing disjunction rules conjoining sequences complicated 
basic rule sequences conjoined shape length classes associated corresponding sequents 
example conjunctions sparc example operate sequences length sequent comes class 
pentium complicated 
example pattern mod permitted conjuncts constrain fields class 
pattern mod index permitted mod class index sib class 
conjoin sequences identical shape conjoining individual sequents elementwise 
conjoining sequents simply means conjoining constraints sequents constrain field conjunction constrains field lie intersection ranges 
basic rule conjunction restrictive machine pentium effective addresses varying shapes conjoined opcodes fixed shape 
shape sequence prefix shape conjoin sequences elementwise run elements shorter sequence take remaining elements longer sequence unmodified 
similar technique works sequence suffix 
toolkit prefixes suffixes automatically silently accept unintended incorrect conjunction uses told 
specification writer uses ellipsis pattern conjunctions pattern 
pattern defined shape prefix shape 
conjoined prefix shape matches shape rest concatenated result 
similarly defined shape suffix shape patterns aligned 
ellipsis effect making pattern lose shape ellipsis appears 
legal defined suffix defined prefix 
restrictions conjunction ellipsis guarantee disjunct valid pattern corresponds sequence tokens 
toolkit uses invariant generate encoders decoders 
rules prohibit mixing tokens different classes instruction sequence bits comes token unique class 
conditions names 
free variables may appear field bindings conditions associated pattern 
conditions appear grammar patterns conditions implicit parts specification associated patterns toolkit internal representation 
example encoding field binding subject condition computed value fit field condition part pattern field binding appears 
internally condition derived operator narrows value fit number bits available 
toolkit uses signed narrow sign acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta component contains matches 
encode 
pattern disjuncts name disjunct matches 
encode disjunct satisfied conditions 
disjunct conditions sequents labels ellipses name conditions satisfied sequent matches 
encode sequent token 
sequent constraints field bindings constraints bindings match 
set fields token constraints bindings emit token 
label matches binds identifier location 
encoded may equations 
range constraint lo hi lo hi constant field value falls range 
range element set field 
field binding expression matches equates expression value field 
set field value expression 
fig 

normal form patterns matching encoding rules 
extended fields unsigned narrow fields 
unsigned narrow toolkit derives condition value put field bits 
signed narrow toolkit derives condition gamma gamma gamma conditions may derived equations constructor definition 
example risc branch instructions described equations solutions condition target address differs program counter multiple word size 
associate conditions disjunct 
conditions associated constraint sequent disjunct better choice largest component pattern matched entirety 
disjunct natural place put conditions associated constructor definitions 
example binary representation sparc branch instruction represented pattern disjunct disjunct includes condition addr gamma mod represents location instruction addr represents target address branch instruction 
patterns disjuncts names 
pattern name pattern expected 
disjunct names compute constructors names patterns constructor opcodes 
shows full representation patterns rules matching encoding 
example alu pattern sparc specification disjuncts name alu 
disjunct conditions sequent labels ellipses name add 
single sequent disjunct sequent class 
range constraints op op field bindings 
naming patterns 
patterns specifications ways 
opcodes defined binding names pattern values contain field bindings computed statically 
constructors matching statements defined pattern expressions may contain free variables values known encoding decoding time 
variables operands constructor bound constructor definition 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez patterns declaration binds names pattern values pattern expressions constructor definitions matching statements described 
pattern bindings typically define opcodes group related opcodes define sparc opcodes 
syntax spec patterns phi pattern binding psi pattern binding pattern name pattern phi pattern name psi pattern pattern name phi pattern name psi pattern patterns bound special name ignored 
patterns may correspond unused opcodes table sparc example 
pattern binding bind name pattern list names list patterns 
lists patterns created generating expressions constraints 
generating expressions modeled expressions icon produce value griswold griswold 
ranges lists generating expression lo hi theta columns phi integer psi values generated enumerated left right lifo order 
example sparc example declaration table binds names table call table table patterns op op op op respectively 
constructors constructor maps list operands pattern stands binary representation operand instruction 
typed constructors produce operands untyped constructors produce instructions 
manuals describe instructions terms assembly language syntax designed constructor specifications resemble syntax 
constructor specification begins opcode list operands 
gives type zero branches designate possible representations 
spec constructors phi constructor psi constructor opcode phi operand psi theta type name theta branches constructor explicit branches representation obtained conjoining opcode operands 
type constructor determines corresponding encoding procedure 
constructor explicit type called untyped fact predefined anonymous type type instructions 
corresponding encoding procedures emit instructions 
encoding procedures explicitly typed constructors produce values operands constructors described 
opcodes tricky 
simple strings combinations strings pattern names field names expanded define multiple constructors specification 
example sparc alu constructor acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta specification expands alu pattern define constructors 
compound opcodes formed joining strings names symbol 
opcode phi psi name field pattern unbound name string 
unbound names mean strings example sparc example previously defined equivalent 
notational convenience means names constructors seldom need quoted 
name pattern field toolkit expands opcodes enumerating disjuncts patterns named values fields 
example toolkit expands opcode expanding pattern branch disjuncts named definitions expands field named values 
sparc example single constructor definition equivalent series definitions constructors bn addr addr disp 
bn disp bn addr addr disp 
bn disp 
addr addr disp 
disp architecture manuals name refer opcode instruction put constructors separate name space name refer constructors patterns 
operands may fields integers patterns 
field integer operands may signed unsigned may designated relocatable 
pattern valued operands result applying constructors designated type 
operand types distinguished names operand field pattern name field constructor type integer 
type operand determines name right hand side constructor 
integer operands integer expressions appear field bindings 
field operands integers patterns case field name stands pattern binding field corresponding operand shown sparc example 
pattern valued operands patterns 
list operands may decorated spaces commas brackets quoted strings punctuation 
punctuation represents assembly language syntax toolkit uses generate encoding procedures emit assembly language generate grammar recognizes assembly language 
constructors solve intellectual problems 
give structure instruction set connect structure binary representations assembly language formalize instructions functions mapping operands binary representations 
instruction set structure comes types constructors operands 
structure isomorphic grammar start nonterminal corresponds anonymous type instruction explicit constructor type corresponds additional nonterminal 
constructor corresponds production constructor type appears left hand side operands appear acm transactions programming languages systems vol 
may 
delta ramsey fern andez right 
terminal symbols grammar operands fields integers relocatable addresses 
patterns right hand sides constructor definitions equivalent synthesized attributes grammar 
field names constructor names punctuation define assembly language representation implicit constructor definition representations equivalent synthesized attributes grammar 
relocatable addresses essential intellectual task specifying representations support separate compilation encoding applications 
field integer operand designated relocatable spec relocatable phi identifier psi example addr operand sparc branch constructor declared relocatable 
labels appear constructors patterns relocatable 
applications typically relocatable addresses refer locations bound encoding link time 
allowing operand relocatable simplifies implementation applications usually emit assembly language 
example simplifies construction mld code generators enables automatic translation existing assembly emitting code generators mld binary emitting code generators 
ability operand relocatable large parts mld code generators written hand 
constructor uses relocatable operands applied checks see values known assigned absolute addresses 
treats ordinary integers emits instruction 
emits placeholder patterns creates relocation closure ramsey 
application holds closure addresses depends known point applies closure overwrite placeholder correct encoding instruction 
alternatively toolkit provides machine independent representation write closure file application read apply 
placeholder patterns associated token classes spec placeholder class name pattern toolkit uses shape constructor pattern compute placeholder placeholder size relocated instruction overwrite 
branches constructor specification contain equations patterns 
patterns specify binary representations equations relate constructor operands variables patterns 
branches theta equations theta pattern phi equations pattern fi fi pattern psi constructor single branch pattern omitted case taken conjunction constructor opcode operands 
ability specify multiple branches supports conditional assembly sparc set constructor 
encoding toolkit emits branch conditions satisfied 
explained conditions satisfied values bound fields fit fields equations acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta branch solutions 
decoding toolkit matches branches 
syntactic sugar equations express relationships operands fields 
written relate sums terms integer coefficients 
terms include field integer variables extract bits lo hi 
variable extracted bits postfix exclamation point shown descriptions sparc branch constructors 
equations may include inequalities conditions attached disjuncts branch pattern 
conditions may arise solving equations example condition addr gamma mod attached patterns sparc branch constructors derived equation constructors 
conditions satisfied constructor matched encoded 
toolkit uses simple equation solver ramsey 
encode toolkit takes operands known solves fields 
decode toolkit takes fields known solves operands 
constructors represented essentially lambda terms mapping operands patterns 
results solving equations represented patterns conditions expressions field bindings free variables constructor pattern constructor operands 
constructors multiple branches set constructor sparc example result patterns multiple disjuncts 
encoding procedure associated constructor emits disjunct conditions known satisfied 
condition depends value unknown relocatable operand toolkit conservatively assumes eventual value may satisfy condition moves disjunct 
disjuncts depend relocatable operands toolkit uses final disjunct 
technique safe unsuitable emitting span dependent instructions example uses general representation forward branches 
believe standard techniques resolving span dependent instructions szymanski applied specifications 
matching statements decoding decoding applications toolkit matching statements 
matching statements provide notation writing instruction recognizers efficient easily understood 
matching statements resemble ordinary case statements arms labeled patterns 
arm pattern matches executed 
syntax matching statements matching statement match code phi pattern theta equations theta name 
code psi theta code terminal symbol code stands fragment modula code 
code match evaluates location instruction stream 
representation instruction stream implicit code templates supplied application writer described 
arm may include equations satisfied arm match 
name square brackets bound name acm transactions programming languages systems vol 
may 
delta ramsey fern andez procedure follow memory pc word match pc epsilon 
return call target 
return target target ba fba cba 
return target target epsilon 
return target rs simm rd 
return rs simm rs rs rd 
return rs rs 
error fail unrecognized instruction follow fig 

matching statement control flow analysis sparc instructions 
pattern matched 
arm pattern matches code right hand side 
executed 
matching statement grammatical start symbol derived specification 
generating decoders toolkit translator reads specification file transforms different file containing matching statements 
matching statement free variable pattern binding instance toolkit computes value variable values host language code right hand side arm labeled pattern 
free variables associated typed constructors bound locations instruction stream 
generated decoder converts bound locations integers 
matching statements embedded programs written modula toolkit translator acts simple preprocessor finds embedded matching statements rewrites pure modula code 
matching statements application decoding code clear concise 
example ldb retargetable debugger ansi uses matching statements implement control flow analysis 
ldb breakpoint implementation machine independent machine dependent part analysis control flow ramsey 
shows simplified version sparc code ldb breakpoint implementation omitting subtleties associated delayed branches 
code finds instructions executed immediately instruction breakpoint planted ramsey 
ordinary instruction instruction follow inline successor computed arm matching statement 
set addresses containing single element location successor instruction 
calls unconditional branches instruction follow set conditional branches 
patterns indirect jumps registers procedure gets value register order compute target address 
matching statement expands nested case statements totaling lines modula code 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta count convey difficulty writing code hand toolkit eliminates unnecessary tests combining seemingly unrelated opcodes result execution code 
application writers representation instruction streams particular toolkit constrain application integers represent locations 
application writer specifies representation supplying toolkit code fragments data type represent locations template add integer offset location template convert location unsigned integer template fetch token specified width location 
templates specified spec fetch gamma width fi fi delta template address type template address add template address integer template template symbols stand quoted strings containing fragments modula code mixed escape sequences stand addresses widths offsets 
widths measured bits offsets measured units pc unit bits spec pc unit bits width size evenly divide width token default size bits 
toolkit builds decision tree matching statement 
decision tree checks applicable range constraints examining field 
patterns arms range constraints different conditions toolkit checks conditions sequentially situation rare 
toolkit tries minimize number tests needed identify arm 
polynomial time algorithm known problem toolkit builds decision trees tool compile time take long generate evaluate possible decision trees 
heuristics yield trees trees write hand 

specifying cisc instructions tools may risc architectures useful cisc architectures 
demonstrate utility specification language show complex aspects pentium specification addressing modes variable sized operands 
shows constructor specifications pentium addressing modes 
constructor type eaddr chosen represent effective addresses 
values type eaddr operands untyped constructors shown 
brackets asterisks specification punctuation indicating suggested assembly language syntax 
depicts structures patterns 
effective addresses byte token contains addressing mode register 
indexed modes token followed byte sib token holds index base registers scale factor ss 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez constructors reg reg eaddr mod rm reg reg eaddr reg reg mod rm reg disp reg eaddr reg 
mod rm reg disp reg eaddr reg mod rm reg abs eaddr mod rm constructors index base index ss eaddr index base mod rm index base ss index base index ss eaddr index 
mod rm index base ss index base index ss eaddr index mod rm index base ss index ss eaddr index mod rm index base ss fig 

constructor definitions pentium bit addressing modes 
mod reg reg delta delta delta reg reg delta delta delta reg disp reg delta delta delta reg disp reg delta delta delta reg abs delta delta delta index base index ss delta delta delta ss index base index base index ss delta delta delta ss index base index base index ss delta delta delta ss index base index ss delta delta delta ss index fig 

tokens pentium bit addressing modes 
token sizes scale 
modes take immediate displacements intel tables 
tokens fields effective addresses follows fields mod rm fields sib ss index base fields fields fields fields occupy tokens 
define constructors type eaddr create effective addresses bit mode 
group constructors specifies addressing modes 
simplest mode encoded mod register direct mode refer machine general registers 
modes register indirect modes displacement bit displacement bit displacement 
bit displacement computed sign extending field 
semicolons separate tokens displacement tokens follow 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta inequality reg shows may take value simple indirect mode 
denoting indirect base pointer register normally encoded combination mod encodes bit absolute mode 
inequality reg shows value may encode indirect stack pointer register normally encoded 
value encode indexed modes sib token token 
indexed modes second group figures 
token followed sib token 
stack pointer may index register index 
depending value mod token sib token may address bit bit displacement may follow 
mod base denotes indexed address base register bit displacement 
addressing modes specifies value reg opcode middle field token 
field part effective address depending instruction part opcode denote register operand 
effective addresses conjoining pattern constrains reg opcode resulting pattern specifies bit token 
need ellipsis operator conjunction 
effective addresses different shapes shapes legal write eaddr shape 
move byte move byte immediate instructions show ellipsis constructors mov mrb eaddr reg mov eb gb eaddr reg 
mov eb ib eaddr 
mov eb ib eaddr specifications pentium opcodes shown article mimic tables manual intel 
manual uses families opcodes add mov distinguished suffixes indicating locations sizes destination source operands 
suffix eb gb indicates destination effective address source generalpurpose register source destination operand byte wide 
cases mov eb gb specify operation suffix separately conjoin get opcode writing specifications theta specifications 
eb ib suffix uses immediate operand source scheme specify full opcode mov eb ib 
pentium uses unusual method identifying sizes operands 
instructions come variants bit bit bit operands 
typically bit variant distinct opcode bit variants share opcode distinguished presence absence instruction prefix 
specify object varying pattern sequence empty contains prefix patterns ow od epsilon ov ow od acm transactions programming languages systems vol 
may 
delta ramsey fern andez ow mnemonic object word od object 
specification assumes hardware codes bit operands default alternate assumption specified exchanging definitions od ow 
specify bit variants memory register move instruction write constructors mov ov eaddr reg ov mov ev gv eaddr reg 
specification differs move byte specification suffix ev gv codes operands word variable size depending presence absence prefix 
pattern ov expands prefix bit variant empty sequence bit variant 
immediate operands variants separate specifications operands different sizes 
bit move immediate instruction appears remaining variants specified constructors mov eb eaddr 
ow mov ev iv eaddr mov eb eaddr 
od mov ev iv eaddr instructions prefix od stands empty sequence 
features sled exist enable description cisc machines 
ability define tokens different sizes classes describe pentium motorola 
ability form sequences tokens cisc risc specifications rarely risc specifications typically synthesize instructions multi instruction sequences 
owen braun description braun exposes shortcomings sled 
addressing modes different representations depending currently associated distinct sets constructors distinct types 
example compiler writer call procedures encode register direct mode depending source destination operand move instruction 
addressing modes valid instructions different subsets data modes example 
incomplete specification dsp exhibits similar problems 
problems handled defining multiple sets constructors resulting specifications ugly difficult maintain 
considering extensions help improve specifications dsp help specify address prefixes pentium 
enable attach multiple pattern valued attributes constructors different attributes specify alternate representations parts representations 
support simple specification subsets typed constructors specify restrictions addressing modes 
cases believe simplifications cisc specifications justify extra complexity sled 
implemented extensions consider details scope article 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta 
implementation toolkit translator generator checker combined single icon program griswold griswold lines 
omit details implementation explain implementation assumes toolkit library supports assumptions 
matching statement toolkit generates efficient decoder nested case statements 
decoders manipulate instruction streams code templates supplied application writer 
decoders need templates isolated properties decoding application including byte order 
independent generated encoders toolkit library 
toolkit creates encoding procedure constructor specification 
procedures come typed constructors useful producing operands passed encoding procedures 
particular procedures side effects return values 
procedures generated untyped constructors side effects emit instructions 
constructor pattern disjunct conditions satisfied encoding procedure calls error handler supplied application 
signatures procedures generated address constructor untyped constructor appear sparc example unsigned rs int simm void address unsigned rd result argument 
normal encoding procedures emit binary representations determined encoding rules 
toolkit generate encoding procedures emit assembly language 
assembly language usually inferred punctuation constructor specifications possible specify assembly syntax separately described toolkit manual ramsey fern andez 
ability useful assembly languages common single architecture case pentium 
toolkit generate direct indirect interfaces encoding procedures 
indirect interfaces interface records structures containing function pointers 
applications choose binary assembly language run time pointer appropriate interface record 
binary encoding procedures side effects global instruction stream 
values relocatable operands available create relocation information form closures 
encoding procedures certain assumptions instruction streams relocatable operands 
enumerate assumptions explain implementations toolkit library satisfy assumptions 
relocatable address represents value relocatable operand 
abstraction operations force known 
force takes relocatable address produces integer absolute address 
known tells force applied 
generated encoding procedures known decide emit tokens create relocation closures force get values operands 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez instruction stream holds tokens emitted encoding procedures 
location counter marks location token emitted 
relocatable addresses location counter supports known force operations 
encoding procedures assume manipulate location counter call emitters put tokens instruction stream 
emitters write bits advance location counter 
library includes little endian emitter big endian emitter emitters native byte order host machine application supply emitters 
native emitters faster requires location counter aligned multiple token size 
encoding applications need richer model instruction stream assumed toolkit encoding procedures 
toolkit library provides relocatable blocks implement instruction stream abstraction 
support operations including changing blocks locations assigning addresses blocks emitting tokens blocks writing blocks files memory 
application number relocatable blocks emit tokens block block address assigned 
example unix assembler blocks code initialized data uninitialized data sections 
assembler linker determine assign addresses blocks 
label points location relocatable block provides basic known force operations 
toolkit associate names labels applications method name find labels 
flexibility library provides implementation relocatable addresses represents address sum label signed offset 
representation adequate applications compilers linkers 
authors applications sophisticated representations linear expressions addresses labels changing code generated toolkit 
toolkit needs little support applications 
applications primary obligations manage memory supply select code fetching storing tokens 
encoding applications supply routine library uses allocate memory closures labels relocatable blocks 
saving applying writing discarding closures application responsibility 
return application choose policies allocating memory managing closures 
toolkit careful require large blocks contiguous memory store large relocatable blocks 
toolkit provides code associate names relocatable blocks labels abstractions applications supply 
toolkit generates efficient code 
safety checks elided encoding procedure executes dozen instructions 
generated decoders test field test order quickly identifies right arm matching statement 
toolkit generator detect internal inconsistencies specifications identify specifications internally consistent match label different labels introduced construct kinds serve function 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta target machine 
ways write incorrect specifications example getting operand order wrong interchanging names opcode table 
toolkit checker fern andez ramsey finds inconsistencies mapping specified sled mapping implemented trusted independent assembler 
checker exploits generator ability create encoding procedures binary assembly representations 
exercises constructor emitting representations 
trusted assembler translates assembly binary checker compares binary representations 
identical toolkit specification probably consistent assembler toolkit assembler encode instruction differently probably error specification 
disassembler generated toolkit easier find source error 

related ferguson describes meta assembler creates assemblers new architectures 
meta assembler works declarative machine description macros pack fields words emit essentially macro processor bit manipulation operators special support different integer representations 
architecture description languages emphasize instruction semantics necessary building tools verify simulate instruction set encoding decoding descriptions necessary building tools process machine code 
wick describes tool generates assemblers descriptions written modified form isp bell newell 
investigates different part design space machine descriptions complex comprehensive 
example describe machine organization registers instruction semantics instruction encoding 
cook harcourt specification language includes distinct semantic syntactic descriptions 
specifies binary representations mapping sequences named fields sequence bits technique works risc machines awkward cisc 
nml specification language uses attribute grammar specify instruction sets 
underlying grammar attributes grammar induced constructors types 
specification nml uses rules rules 
rules sums 
correspond constructor types viewed disjoint unions correspond alternatives grammar 
rules products 
correspond cartesian products operands constructors correspond sequences symbols production grammar 
nml sled different notations types associate information instruction sets 
nml uses synthesized attributes represent register transfer semantics assembly language syntax binary representations 
writers introduce extra attributes represent things addressing modes 
values attributes may integers character strings bit strings register transfer sequences 
binary representations represented bit strings 
attribute values specified writing explicit attribute equations production acm transactions programming languages systems vol 
may 
delta ramsey fern andez grammar computed arithmetic functions printf formatting function special notation register transfer sequences 
nml description build simulator includes instruction decoder code generator includes binary encoder 
nml attribute equations build encoder appears straightforward authors published description invert equations produce decoder 
sled provides concise error prone way specifying binary representations nml binary string attributes 
sled generating expressions constructor opcodes easy specify representations integer literals 
patterns bit strings relieves specification writer having get fields right order helps toolkit detect missing duplicate fields 
sled specifications resemble architecture manuals nml specifications 
ideas exploited nml framework including pattern sublanguage tokens fields patterns nml pattern valued attributes specify binary representations 
conversely nml ideas exploited framework adding nml register transfer sublanguage permitting users attach arbitrary attributes constructors operands 
expect named pattern valued attributes help users describe machines dsp 
gnu assembler provides assembly disassembly targets different techniques applied ad hoc support different architectures 
example pentium instructions recognized hand written code mips instructions recognized selecting mask sample table applying mask word question comparing result sample 
targets operands recognized short programs written machines different machine target 
set machines encode instructions assembly 
implementations machines contain magic numbers handwritten bit operations 
programs interpreted machines represented strings appear written hand 
larus schnarr machine description related provide machine independent primitives query instructions 
syntactic part machine description derived subset language having fields patterns 
added semantic information associating register transfer semantics particular pattern names 
combined syntactic semantic information spawn tool generates classifiers put instructions categories jump call store invalid finds registers instruction reads writes generates code replicate computations finding target addresses 
descriptions spawn powerful 
semantic information possible derive variety predicates transformations indispensable instrumenting object code 
limited syntactic specification assumes single token current instruction notion comparable constructor difficult understand specifications factored 
spawn descriptions support encoding provide snippets machine code 
encoding done standalone compilers assemblers snippets extracted resulting object code 
acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta spirit asn international organization standardization create symbolic descriptions messages network protocols differences 
asn data encoded way principle writers asn specifications details encoding 
asn encodings byte level bit level encodings asn contains escape hatch octet string strings bytes individual bits may represent different values 
asn far complex language example contains constructs represent structured values sequences records unions describe optional default required elements messages distinguish tagged implicit encodings data 

evaluation code generation traditional compilers toolkit somewhat suitable vendor assembler 
toolkit easily support standard machinedependent formats relocatable object code provide optimizations vendors may build assemblers mips instruction scheduling 
sled evolved simpler language recognize risc instructions retargetable debugger ramsey appendix :10.1.1.30.6519
language field constraints patterns built conjunction disjunction concatenation constructors 
notion instruction stream instructions values fit machine word 
extended language specify encoding procedures writing constructor name list field operands conjoined 
extension sufficed describe mips sparc generate encoding procedures mld 
describe sparc completely unable describe pentium added concatenation pattern operators 
changes solved problems making patterns explicit right hand sides constructor specifications constructor types permit patterns operands 
realized reason restrict constructors specifying encoding procedures possible apply constructors pattern definitions matching statements yielding sled described article 
patterns simple powerful way describe binary representations 
field constraints conjunction concatenation architecture manuals describe instruction machines specified machines specifications incomplete written users 
patterns limited traditional instruction sets opcode operand clearly separated machines described instruction formats opcode bits scattered instruction 
disjunction possible specify new instructions improves specifications making possible combine descriptions related instructions 
removing need specify instruction individually disjunction eliminates potential source error 
constructor specifications provide clean representations instructions operands connect abstractions binary representations assembly language 
equations seldom needed describe instructions relative branches assembly level operands differ acm transactions programming languages systems vol 
may 
delta ramsey fern andez machine level fields 
equations express restrictions operands part definitions architectures intel pentium 
maximize sled expressive power minimizing restrictions way patterns constructors equations combined 
example patterns constructors definitions possible factor complex architectures pentium 
equations constructor specifications encoding decoding equations matching statements 
elements sled hard see language simplified destroying 
simplicity specifications checking done toolkit combine give users confidence correctness generated code 

availability version toolkit implements sled described article integer operands constructors signed 
available anonymous ftp ftp cs princeton edu directory pub toolkit 
toolkit home page www cs princeton edu software toolkit 

production note prepared article noweb tools literate programming ramsey 
examples extracted article run toolkit version 
editor anonymous referees suggested restructuring helped improve article 
especially grateful referee thorough reading pointers related 
ball larus 
optimally profiling tracing programs 
conference record th annual acm symposium principles programming languages 
albuquerque nm 
bell newell 
computer structures readings examples 
mcgraw hill new york 
braun 
retargetability issues worst case timing analysis embedded systems 
bachelor thesis dept computer science princeton university 
cattell 
automatic derivation code generators machine descriptions 
acm transactions programming languages systems apr 
cmelik keppel 
shade fast instruction set simulator execution profiling 
proceedings acm sigmetrics conference measurement modeling computer systems 

cook harcourt 
functional specification language instruction set architectures 
proceedings international conference computer languages 

dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
oopsla conference proceedings sigplan notices oct 

gnu assembler 
free software foundation 

describing instruction set processors nml 
european design test conference 

acm transactions programming languages systems vol 
may 
specifying representations machine instructions delta fern andez ramsey 
automatic checking instruction specifications 
tech 
rep research 
july 
submitted icse 
ferguson 
evolution meta assembly program 
communications acm 
fern andez 
simple effective link time optimization modula programs 
proceedings acm sigplan conference programming language design implementation sigplan notices june 
george reppy 
portable optimizing back sml nj compiler 
th international conference compiler construction 

graham lucco wahbe 
adaptable binary programs 
proceedings usenix technical conference 
new orleans la 
griswold griswold 
icon programming language second ed 
prentice hall englewood cliffs nj 
hastings joyce 
purify fast detection memory leaks access errors 
proceedings winter usenix conference 
san francisco ca 
intel 
architecture programming manual 
intel mount prospect il 
international organization standardization 
information processing open systems interconnection specification syntax notation asn 
international organization standardization 
iso ccitt 
johnson 
fun profit 
proceedings winter usenix conference 

larus schnarr 
eel machine independent executable editing 
proceedings acm sigplan conference programming language design implementation sigplan notices june 
nelson ed 

systems programming modula 
prentice hall englewood cliffs nj 
ramsey 
retargetable debugger 
ph thesis princeton university department computer science 
technical report cs tr 
ramsey 
correctness trap breakpoint implementations 
proceedings st acm symposium principles programming languages 
portland 
ramsey 
literate programming simplified 
ieee software sept 
ramsey 
relocating machine instructions currying 
acm sigplan conference programming language design implementation sigplan notices may 
ramsey 
simple solver linear equations containing nonlinear operators 
software practice experience apr 
ramsey fern andez 
new jersey machine code toolkit architecture specifications 
tech 
rep tr department computer science princeton university 
oct ramsey fern andez 
new jersey machine code toolkit manual 
tech 
rep tr department computer science princeton university 
oct ramsey hanson 
retargetable debugger 
acm sigplan conference programming language design implementation sigplan notices july 
sparc international 
sparc architecture manual version 
sparc international englewood cliffs nj 
srivastava eustace 
atom system building customized program analysis tools 
proceedings acm sigplan conference programming language design implementation sigplan notices june 
srivastava wall 
practical system intermodule code optimization 
journal programming languages 
available wrl research report december 
szymanski 
assembling code machines span dependent instructions 
communications acm apr 
acm transactions programming languages systems vol 
may 
delta ramsey fern andez wahbe lucco anderson graham 
efficient software fault isolation 
proceedings fourteenth acm symposium operating system principles 

wick 
automatic generation assemblers 
ph thesis yale university 
received december revised august accepted october acm transactions programming languages systems vol 
may 
