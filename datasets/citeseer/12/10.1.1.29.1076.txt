formal eavesdropping computational interpretation mart abadi jan strategic technologies architectural research laboratory computing laboratory university oxford 
compare views symmetric cryptographic primitives context systems 
express systems simple programming language views yields semantics language 
semantics treats cryptographic operations formally symbolically 
semantics detailed computational treats cryptographic operations functions bitstrings 
semantics leads de nition equivalence systems respect eavesdroppers 
establish soundness formal de nition respect computational 
result provides precise computational justi cation formal reasoning security eavesdroppers 
part ort bridge gap formal computational views cryptography cryptographic protocols 
formal view ideas methods logic programming languages :10.1.1.1.5724
led particular techniques high level reasoning automated reasoning security protocols 
computational view relies vocabulary complexity theory 
developed sophisticated foundations proof techniques 
projects progress direction linking views 
projects differ approaches technical details 
aim re ne provide foundations formal treatments cryptography combine bene ts treatments reasoning systems cryptography 
speci cally extends abadi rogaway compares formal account symmetric encryption computational account 
accounts fairly standard respective communities 
deals started author bell labs research 
expressions represent pieces data booleans pairs randomly generated keys symmetric encryptions 
expression induces ensemble choice security parameter probability distribution bitstrings expression represents 
main result expressions equivalent formal model ensembles induce computationally indistinguishable 
result means formal reasoning equivalence expressions sound respect computational model 
furthermore hypotheses result indicate signi cant discrepancies accounts example treatment encryption cycles 
go considering systems symmetric encryption decryption 
systems may particular represent cryptographic protocols parties 
describe systems simple programming language small expressive calculus kind common programming language literature 
models semantics language 
rely basic concepts techniques programming language theory 
formal model computational model systems generate traces traces sequences tuples values value communication channel time instant systems equivalent eavesdropping adversary distinguish trace generated trace generated 
formal model value formal expression adversary allowed simple symbolic computations expressions 
computational model value bitstring adversary resource bounded turing machine computes bitstrings 
obtain soundness result analogous abadi rogaway systems equivalent formal model probability ensembles induce computationally indistinguishable 
means formal reasoning equivalence systems sound respect computational model computational eavesdroppers power simpler formal eavesdroppers 
study eavesdroppers presents diculties ers insights encountered previous 
particular treat situations exactly ciphertext appears twice piece data adversary notice repetition cf 

addition analyze programs control ow depends properties underlying cryptosystem example program generates keys compares branches result comparison 
examples formal model computational model give rise exactly corresponding traces show di erences negligible 
consider substantial di erence formal computational accounts decryption 
formal models treat symmetric encryption commonly assume decrypting message key succeeds message encrypted success failure decryption evident performs 
property convenient protocol design analysis may argue encryption integrity checking useless 
property implemented means checkable redundancy 
computational models typically build 
outcome precise computational counterpart property 
section presents programming language 
sections give formal semantics computational semantics language respectively notion equivalence 
section establishes main soundness result purpose develops hypotheses 
section concludes 
longer version contains proofs secondary results 
focuses eavesdroppers symmetric cryptosystems hope serve stepping stone treating active adversaries cryptographic primitives 
respects opportunity convergence lincoln develops process calculus features computational approach waidner investigates secure composition reactive systems simulatability approach 
works consider formal models probabilistic aspects prefer avoid interesting complication long possible 
refer previous papers discussion background closely related 
language syntax informal semantics section de nes basic programming language serves setting 
bool 
keys coins var xed nite sets symbols channels nite set symbols may vary system system disjoint bool 
partition channels channels channels intuitively sets internal private channels external public channels 
system collection programs communicate synchronously rounds channels constraint channel system contains exactly program outputs program may take input channels including intuitively program description value output channel round computed values channels round local state maintained feedback channels iteration instance coding loops 
precisely set programs de ned grammar programs null value key keys bit bool error input channel channels variable var pair new keys fpg shared key encryption coins conditional case case pair var case fxg case encryption var words set programs de ned inductively contain null value keys bits pairs programs typically letters programs 
expression represents null value initial value channels 
occurrence channel name refers value previous instant 
variables introduced case constructs determine values 
new construct borrowed pi calculus see introduces fresh key symbol bound 
new notation appears fpg represents result encrypting value value key randomizing encryption fresh coins informally may just write fpg notation unambiguous encryption operation uses fresh coins 
rst case construct tests pair form evaluated actual values evaluated 
second case construct tests ciphertext key represented contents evaluated actual value evaluated 
construct re ects assumption discussed decrypting message key succeeds message encrypted key success failure decryption evident 
case constructs bound variables 
example suppose channels keys 
program case fxgk case fxgk program looks value ciphertext plaintext outputs outputs 
may form system example letting program output adding trivial program output may write resulting system case fxgk case fxgk see examples fragment calculus 
choice synchronous model avoids consideration scheduling delicate mix non deterministic probabilistic choices cf 

scheduling issues interesting believe best addressed context active adversaries 
aspects language somewhat arbitrary 
main concern tractable language express examples convenient way identify problematic issues develop precise solutions 
exact details language secondary 
formal model section gives rst precise semantics programs corresponding notion equivalence programs 
expressions 
indicated semantics views values communicated channels formal expressions 
set expressions exp generated grammar expressions null value key keys bit bool error pair fmg encryption keys coins set plain exp represents set plaintexts 
keys bool 
channels var keys coins fp plain keys fp plain keys fp 
keys case case pair case fxg fmg plain coins keys case fxg fig 

de nition formal semantics 
generating traces 
loss generality assume keys coins renamed system key coin symbol bound bound key occur free 
write new set bound keys program injective functions keys keys coins coins renaming keys coins 
program channels var exp de ne expression results running variables channels initial values de nition function channels var exp coincides maps trace sequence mappings channels exp sequence channels indexed tuples expressions 
suppose system consists program channel free variables 
de ne semantics nite trace substitutes occurrence key new occurrence key new occurrence coin 
substitutions guarantee fresh keys coins represented di erent symbols 
intuitively trace result running forever 
equivalence 
abadi rogaway de ne equivalence relation formal expressions intended relate expressions look adversary 
adapt extend de nition 
de ne entailment relation set expressions expression 
intuitively means adversary derive formally de ne relation inductively relation properties fng coins introduce box symbol represents ciphertext attacker decrypt 
attacker test bitwise equality ciphertexts index boxes coins represent ciphertext basically permit coin reuse programs 
set pat patterns generated grammar patterns null value key keys bit bool error pair fmg encryption keys coins undecryptable coins de ne function set keys expression reduces pattern 
intuitively pattern attacker see attacker keys keys bool fmg fp trace de ne corresponding sequence pattern tuples patterns set keys obtained trace projecting internal channels pattern fk keys ft jtj channels kg channels projection channels jtj length sequence roughly pattern attacker see set keys obtained say traces equivalent yield pattern equivalent renaming equivalent modulo renaming keys coins pattern pattern exist bijections keys coins result applying substitutions suppose systems set external channels compare 
equivalent generate equivalent traces intent holds eavesdropper distinguish observing external channels priori knowledge 
simple examples consider pairs systems consist program outputs external channel identify systems corresponding programs 
di er bit send encrypted key eavesdropper 
de nition equivalence obtain formal model need consider possibility eavesdropper guess key 
obtain formal model need consider possibility keys equal chance 
obtain case fxg formal model need consider possibility ciphertext decrypted simpli cations contribute greatly convenience practicality formal reasoning 
computational model section gives second semantics programs corresponding notion equivalence programs 
semantics relies bitstrings formal expressions 
limitations adversary expressed terms computational complexities probabilities 
elements encryption schemes basics 
string set nite strings jmj length string cipher key non empty sets nite strings 
coins set nite strings endowed probability distribution 
set security parameters parameter set nite strings bits 
parameter set plaintexts plain nite non empty set nite strings plain plain write plain plain allowing set plaintexts depend security parameter follow example goldwasser bellare 
particular strings plain particular string string plain cipher 
assume plain jmj jm plain encryption scheme triple algorithms parameter coins key key string coins cipher key string plain algorithm computable time polynomial size input consideration size coins input 
algorithm key generation algorithm encryption algorithm decryption algorithm 
usually write rst argument key subscript argument coin superscript 
omit nal argument indicates corresponding probability space support set space 
require parameter coins plain plain 
insist je depends jmj 
function negligible exists parameter indexed family distributions set called ensemble write indicate sampled fd fd ensembles set say computationally null key keys bool bool error mu channels var pair keys coins fp ciphertext keys coins fp error coins case pair case pair case fxg dk key ciphertext key dk 
case fxg fig 

de nition computational semantics 
indistinguishable write probabilistic polynomialtime adversary parameter coins function negligible def pr pr generating traces 
assume keys coins renamed system key coin symbol bound bound key occur free 
write keys coins sets key symbols coin symbols occur function keys coins key coins mapping keys key coins coins called choice function 
program channels var string choice function de ne bitstring results running variables channels initial values keys coins chosen de nition write bitstring representation tupling assume bitstring representations expression plaintexts plain mapped bitstring plaintexts plain negligible probability 
write function channels var string coincides maps despite super cial similarities de nitions assign di erent behaviors programs 
example formal model computational model bool bool depending part proof main theorem consists showing di erences negligible 
trace sequence mappings channels string sequence channels indexed tuples bitstrings 
suppose system consists program channel free variables 
sequence choice functions agree free keys de ne result running inductively unique program having output channel 
computational indistinguishability 
suppose systems external channels 
channels init coins keys new init coins keys new chooses sequence choice functions keys coins key coins agree keys nnew set free keys generating keys coins distribution coins 
intent holds eavesdropper distinguish observing external channels 
de nition relies computational view semantics systems powers eavesdropper quite di erent formal view section 
section relates views 
note de nition includes quanti cation lengths expected bound function security parameter 
quanti cation yields simpler relation 
may strong useful purposes 
soundness semantics section specify security assumptions underlying encryption scheme assumptions necessary order relate semantics 
type security variant standard notion semantic security de ned justi ed de nition type security 
encryption scheme parameter security parameter 
encryption scheme type secure probabilistic polynomial time adversary oracles function def pr 

pr negligible 
addition need computational counterpart assumption decrypting message wrong key noticeable error assumption built formal model 
concept confusion free encryption de nition confusion free encryption scheme 
encryption scheme confusion free string probability pr 
negligible 
fischlin related concept committing encryption requires encryption function essentially injective map di erent plaintexts di erent ciphertexts 
confusion freedom di ers allows collisions puts requirements decryption function 
long version describes construction confusion free encryption schemes 
need rule encryption cycles encrypting key 
cycles supported standard computational de nitions security semantic security example allow fkg reveal cycles may acceptable random oracle model allowed silently 
formal methods 
encrypts expression exist fng subexpression occurs adopt slightly liberal de nition ignores occurrences subscript encryption key 
de nes binary relation keys 
say cyclic relation cyclic acyclic 
similarly say trace cyclic acyclic 
system generate encryption cycles formal trace acyclic 
main theorem says systems equivalent respect formal eavesdroppers equivalent respect computational eavesdroppers 
computational eavesdroppers essentially power formal eavesdroppers may reason higher level formal eavesdroppers loss generality 
believe converse holds interesting important 
theorem 
systems generate encryption cycles 
suppose type secure confusion free encryption scheme 
proof theorem components 
analogous main proof abadi rogaway twists extensions example dealing repetitions 
deal concepts abadi rogaway instance control ow processes 
see details 
relates views symmetric cryptographic primitives context systems 
express systems simple programming language 
language semantics 
semantics leads notion equivalence systems roughly systems equivalent eavesdropper tell apart 
semantics cryptographic operations interpreted symbolically 
interpreted operations bitstrings concrete interpretation leads reasoning probabilities computational complexities 
formal semantics may simpler naive 
suitable hypotheses formal equivalence implies computational equivalence 
result provides computational justi cation high level formal reasoning security eavesdroppers signi cant promising link formal computational views cryptography cryptographic protocols 
discussions phillip rogaway john mitchell contributed writing 
partly done second author visiting bell labs research palo alto hospitality gratefully acknowledged 
mart abadi andrew gordon 
calculus cryptographic protocols spi calculus 
information computation january 
extended version appeared digital equipment systems research center report january 
mart abadi jan 
formal eavesdropping computational interpretation 
longer version available www de jan ps 
mart abadi phillip rogaway 
reconciling views cryptography computational soundness formal encryption 
proceedings ifip international conference theoretical computer science volume lecture notes computer science pages 
springer verlag august 
mihir bellare anand desai phillip rogaway 
concrete security treatment symmetric encryption analysis des modes operation 
proceedings th annual symposium foundations computer science focs pages 
mihir bellare phillip rogaway 
entity authentication key distribution 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 
steven bellovin 
problem areas ip security protocols 
proceedings sixth usenix unix security symposium pages july 
manuel blum silvio micali 
generate cryptographically strong sequences pseudo random bits 
proceedings rd annual symposium foundations computer science focs pages 
danny dolev andrew yao 
security public key protocols 
ieee transactions information theory march 
marc fischlin 
pseudorandom function tribe ensembles way permutations improvements applications 
advances cryptology eurocrypt volume lecture notes computer science pages 
springer verlag 
oded goldreich silvio micali avi wigderson 
play mental game 
proceedings nineteenth annual acm symposium theory computing pages 
goldwasser bellare 
lecture notes cryptography 
sha goldwasser silvio micali 
probabilistic encryption 
journal computer system sciences april 
sha goldwasser silvio micali ronald rivest 
digital signature scheme secure adaptive chosen message attack 
siam journal computing 
jan 
composability secrecy 
international workshop mathematical methods models architectures computer networks security mmm volume lecture notes computer science pages 
springerverlag 
jan 
secrecy preserving re nement 
fiadeiro zave editors formal methods europe volume lecture notes computer science pages 
springer verlag 
kemmerer meadows millen 
system cryptographic protocol analysis 
journal cryptology spring 
lincoln mitchell mitchell scedrov 
probabilistic poly time framework protocol analysis 
proceedings fifth acm conference computer communications security pages 
gavin lowe 
breaking xing needham schroeder public key protocol fdr 
tools algorithms construction analysis systems volume lecture notes computer science pages 
springerverlag 
menezes van oorschot vanstone 
handbook applied cryptography 
crc press 
robin milner 
communicating mobile systems calculus 
cambridge university press 
john mitchell 
foundations programming languages 
mit press 
lawrence paulson 
inductive approach verifying cryptographic protocols 
journal computer security 
birgit matthias michael waidner 
cryptographic security reactive systems extended 
electronic notes theoretical computer science april 
birgit michael waidner 
composition integrity preservation secure reactive systems 
proceedings th acm conference computer communications security pages november 
birgit michael waidner 
model asynchronous reactive systems application secure message transmission 
proceedings ieee symposium security privacy pages may 
andrew yao 
theory applications trapdoor functions 
proceedings rd annual symposium foundations computer science focs pages 
