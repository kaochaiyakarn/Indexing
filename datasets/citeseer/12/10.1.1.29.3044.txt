polyhedral visual hulls real time rendering wojciech chris leonard mcmillan mit laboratory computer science 
new algorithms creating rendering visual hulls real time 
voxel sampled approaches compute exact polyhedral representation visual hull directly silhouettes 
representation number advantages view independent representation suited rendering graphics hardware computed quickly 
render visual hulls view dependent texturing strategy takes account visibility information computed creation visual hull 
demonstrate algorithms system asynchronously renders dynamically created visual hulls real time 
system outperforms similar systems comparable computational power 
classical approach determining dimensional model set images compute shape silhouettes 
shape silhouette methods employ discrete volumetric representations 
discrete volumetric representation invariably introduces quantization aliasing artifacts resulting model resulting model seldom projects back original silhouettes 
algorithms developed sampling texturing visual hulls discrete set viewing rays 
algorithms developed context real time system acquiring rendering dynamic geometry 
techniques suffer aliasing effects viewing rays correspond pixels desired output image 
addition algorithms address rendering problem view dependently texturing visual hull proper visibility 
algorithms useful view dependent representation visual hull desired 
algorithms computing rendering exact polyhedral representation visual hull 
representation number desirable properties 
view independent representation implies needs computed set input silhouettes 
second representation suited rendering graphics hardware optimized triangular mesh processing 
third representation computed rendered just quickly sampled representations useful real time applications 
demonstrate visual hull construction rendering algorithms realtime system 
system receives input multiple video cameras constructs visual hull meshes quickly possible 
separate rendering process asynchronously renders meshes novel view dependent texturing strategy visibility 
previous introduced visual hull concept describe maximal volume reproduces silhouettes object 
strictly visual hull maximal volume constructed possible silhouettes 
practical setting compute visual hull object respect finite number silhouettes 
silhouette seen pinhole camera determines dimensional volume originates camera center projection extends infinitely passing silhouette contour image plane 
call volume silhouette cone 
silhouette cones exhibit hull property contain actual geometry produced silhouette 
purposes visual hull defined dimensional intersection silhouette cones set pinhole silhouette images 
visual hulls computed discrete dimensional grid volume elements voxels 
technique known voxel carving proceeds projecting voxel source image planes removing voxels fall completely outside silhouette 
octree hierarchies accelerate procedure 
related voxel approaches algorithm computes discrete slices visual hull graphics hardware acceleration 
approaches improve shape splines color information 
primary purpose shape representation produce new renderings shape different viewing conditions construction explicit model necessary 
image visual hull technique introduced renders unique views visual hull directly silhouette images constructing intermediate volumetric polyhedral model 
accomplished merging cone intersection calculation rendering process resulting algorithm similar spirit csg ray casting 
explicit dimensional model visual hull desired 
general boolean operations polyhedra 
algorithms require decomposing input polyhedra convex polyhedra 
operations carried convex polyhedra 
contrast algorithm convexity assumptions exploit fact intersection primitives silhouette cones generalized cones constant scaled cross section 
algorithm exploits property silhouette cones exhibits performance unsuitable real time :10.1.1.24.531
view dependent rendering popular models acquired real images see 
rendering algorithm closely related texture mapping introduced implemented real time 
particular algorithm different unstructured lumigraph rendering ulr algorithm 
implementation extend ulr algorithm handle visibility covered original 
real time system similar previous systems 
system constructs visual hull models voxels uses view dependent texture mapping rendering processing done line process 
virtualized reality system constructs models dynamic event variety techniques including stereo 
fig 

single silhouette cone face shown defined edge center silhouette 
projection silhouettes shown 
polyhedral visual hull construction assume silhouette specified set convex non convex polygons 
polygons holes 
polygon consists set edges joining consecutive vertices define possibly multiple contours 
silhouette know projection matrix associated imaging device video camera generated silhouette 
projection matrix maps coordinates image silhouette coordinates inverse maps image coordinates directions 
algorithm outline order compute visual hull respect input silhouettes need compute intersection cones defined input silhouettes 
resulting polyhedron described faces 
note faces polyhedron lie faces original cones faces original cones defined projection matrices edges input silhouettes 
simple algorithm computing visual hull input silhouette si edge input silhouette compute face cone 
intersect face cones input silhouettes 
result intersections set polygons define surface visual hull 
reduction intersection face cone cones operation polygon polyhedron intersections 
observed intersections reduced simpler intersections 
silhouette cones fixed scaled cross section defined silhouette 
reduction allows complex data structures accelerate intersections 
compute intersection face cone cone cone cone sj project image plane silhouette see 
compute intersection projected face silhouette sj 
project back resulting polygons plane face efficient intersection projected cones silhouettes previous section discussed intersecting projected cone face silhouette sj 
repeat operation projected cone face cone intersected entire projected silhouette cone cone silhouette sj 
section show efficiently compute intersection projected cone cone si silhouette sj 
accelerate intersection process pre processing silhouettes edge bin data structures described 
edge bin structure spatially partitions silhouette quickly compute set edges projected cone face intersects 
abbreviate cone si ci simplicity 
construction edge bins 
observe case perspective projection rays surface cone ci project pencil lines sharing common point epipole image plane parameterize projected lines slope lines line 
parameterization partition domain ranges projected line slope falling inside range intersects set edges silhouette sj 
define bin bk tuple start start range corresponding set edges bk start sk 
note silhouette vertex corresponds line defines range boundary 
certain configurations rays project set parallel epipolar lines image plane sj 
case occurs line parameterize lines arbitrary point line vector perpendicular direction projected rays 
define bins values parameter intersection points line epipolar lines passing silhouette vertices 
way describe boundary bin values start start values lines passing silhouette vertices define region 
edge bin construction involves steps 
sort silhouette vertices value parameter 
lines pass silhouette vertices define bin boundaries 
observe consecutive slopes sorted list define start bin 
compute set edges assigned bin traverse sorted list silhouette vertices 
time maintain list edges current bin 
visit vertex silhouette remove current bin edge ends vertex add edge starts vertex 
start edge defined edge endpoint smaller value parameter 
show simple silhouette bins corresponding edges bin 
edges bin need sorted increasing distance point distance parameterization line case parallel lines 
efficient algorithm performs partial ordering edges silhouette edges closer point list 
bins constructed edges inserted bins correct order 
bin bin bin bin bin bin bin bin edges fig 

example silhouettes corresponding edge bin data structures 
cases shown convergent bins parallel bins 
edges stored bins listed accompanying table 
efficient intersection projected cone faces silhouette 
edge bin data structure compute efficiently intersection projected cone ci silhouette sj cone cj 
order compute intersection process faces cone ci consecutive order 
start projecting face plane silhouette sj 
projected face defined boundary lines values 
need find bin start start 
intersect line edges edges sorted increasing distance projected vertex cone ci distance line case parallel lines immediately compute edges resulting intersection lie line 
traverse bins direction value 
move bins build intersection polygons adding vertices define bins 
get bin start start bin bin bin bin bin bin bin intersect line edges compute remaining edges resulting polygons 
important note projected face defined boundary lines 
search bin falls 
manner compute intersection projected faces cone silhouette sj 
calculating visual hull faces previous section described perform intersection cones efficiently 
performing pairwise intersection pairs cones results polygon sets face cone total number silhouettes 
faces visual hull intersections polygon sets cone face 
possible perform intersection polygon sets standard algorithms boolean operations custom algorithm easy implement output triangles directly 
polygon intersection routine works decomposing arbitrary polygons quadrilaterals intersecting 
demonstrate procedure region region region fig 

polygon intersection routine subdivides polygons quadrilaterals intersection 
sided polygons vertical hatching horizontal hatching 
divide space occupied polygons triangular regions polygons vertices apex silhouette cone similar edge bin construction process 
note triangular region polygon pieces quadrilaterals 
intersect quadrilaterals region combine results final polygon shown horizontal vertical hatching 
resulting polyhedral visual hull includes redundant copies vertex polyhedron fact number copies vertex equal degree vertex divided 
optionally eliminate redundant copies simply merge identical vertices 
ideally algorithm produces watertight triangular mesh 
non optimal face intersection routine meshes may contain junctions violate watertight property 
visibility order properly texture map visual hull need determine parts visual hull surface visible cameras 
visibility problem equivalent shadow determination problem places point light source camera position goal determine parts scene illuminated light parts lie shadow 
standard graphics hardware algorithms directly applicable mesh representation visual hull surface 
require rendering scene input camera viewpoint reading buffer frame buffer 
operations slow reading frame buffer slow suffer quantization artifacts buffer 
alternative novel software algorithm computes visible parts visual hull surface input cameras 
algorithm advantages simple computed virtually cost time compute visual hull polygons 
assume want compute faces visual hull lie extruded edge silhouette sj visible image observe faces visible camera edge visible epipole projection center projection image image plane camera 
effectively reduces visibility computation visibility computation 
perform visibility computation efficiently edge bin data structures computed camera camera fig 

perform conservative visibility test 
example thick edges silhouette camera cj determined visible camera ck 
edges correspond faces polyhedral visual hull 
visual hull computation 
label edges invisible 
determine visibility edges image respect image traverse bin edge bin data structure 
bin label part edge lies bin visible see 
edges bin sorted increasing distance epipole edge bin corresponds front surface 
edge visible full extent visible bins resides edge visible 
edge visible extent visible bins resides edge partially visible 
easiest solution case break visible invisible segments computing faces visual hull 
visibility computation described section conservative label edge visible fact invisible 
conservative especially objects silhouettes contains holes 
view dependent texturing applied novel view dependent texturing strategy rendering polyhedral visual hull models real time 
algorithm unstructured lumigraph rendering ulr algorithm detailed added extensions handle visibility information computed visual hull construction 
core idea ulr influence single image final rendering smoothly varying function desired image plane equivalently geometry representing scene 
smooth weighting functions combine form image blending field specifies contribution input image pixel output image 
assumption smoothness suggests efficient rendering strategy sparsely sample image blending field reconstruct simple basis functions linear hat functions 
reconstructed blending field blend pixels input images form output image 
case real time rendering blending field efficiently reconstructed triangulating samples hardware alpha interpolation faces desired ray fig 

nearest neighbor weighting cameras viewing rays closest angle desired viewing ray 
example desired ray shown bold addition camera viewing rays 
angles closest cameras ordered taken threshold weighting function falls zero 
triangles 
input image pixels blended projectively texturing mapping triangles accumulating results frame buffer 
pseudocode multi pass rendering version algorithm proceeds follows construct list blending field sample locations input image blending field sample location evaluate blending weight image store alpha channel set current texture set current texture matrix pi draw triangulated samples alpha channel blending weights sample locations simply rays blending field evaluated 
case reasonably dense model scene available sampling rays emanating desired viewpoint passing vertices model generally sufficient capture variation blending field 
case triangles drawn actual triangles scene model 
contrast general unstructured lumigraph case may sample rays randomly triangles drawn may roughly approximate true scene geometry 
texture matrix pi simply projection matrix associated camera itis rescaled return texture coordinates 
real time system matrices obtained camera calibration process 
evaluating blending weights view dependent texturing algorithm evaluates image blending field vertex visual hull model 
weight assigned image calculated favor cameras view directions closely match desired view 
weighting nearest neighbor weighting summarized 
vertex model find cameras rays vertex closest angle desired viewing ray see 
consider th ray largest viewing angle angle define local weighting function maps angles range weight applying function angles results general non zero weights 
renormalize weights arrive final blending weights 
practice typically camera system results non zero weights vertex 
weighting schemes possible easy implement require pre processing 
results smooth blending field degenerate cases input rays equidistant desired ray nearest neighbors due visibility reason 
handling visibility algorithm explicitly handle problem visibility 
case visibility information available polygon basis 
distinguish possible approaches incorporating information maintains continuous blending field reconstruction 
continuous blending field reconstruction blending weights cameras side triangle edge side edge 
continuous reconstruction generally apparent visual artifacts 
simple rule utilizing visibility enforcing continuous reconstruction vertex belongs triangle visible camera consider calculating blending weights rule causes camera influence zero face triangle expected visible forces influence fall zero sides edges assuming mesh watertight results continuous blending function 
assumption watertight mesh continuous visibility rule unsuitable non watertight visual hull meshes 
watertight mesh mesh fairly densely tessellated visibility boundaries may represented 
reasons relax requirement reconstruction continuity visibility treatment 
computing blending weights create separate set blending weights triangle 
set blending weights computed considering cameras see triangle 
rendering replicate vertices specify different sets blending weights triangle vertex 
rendering algorithm elegant complex continuous algorithm works practice 
real time system current system uses calibrated sony ieee video cameras 
camera attached separate client mhz athlon desktop pc 
cameras synchronized external trigger signal 
client captures video stream fps performs processing steps segments foreground object background subtraction 
silhouette texture information compressed sent mb network central server 
system typically processes video resolution 
optionally process video reduced frame rate 
central server mhz pentium iii pc performs majority computations 
server application threads network thread receives decompresses textures silhouettes clients 
construction thread computes silhouette simplification volume intersection visibility 
rendering thread performs view dependent texturing display 
thread runs independently 
allows efficiently utilize multiple processors server 
enables render visual hull faster rate compute 
result users perceive higher frame rate model updated 
results system computes polyhedral visual hull models peak frames second frame rate cameras run 
rendering algorithm decoupled model construction run frames second depending model complexity 
actual frame rates components especially rendering dependent model complexity turn depends complexity input silhouette contours 
order maintain relatively constant frame rate simplify input silhouettes coarser polygonal approximation 
amount simplification controlled current performance system 
show flat shaded renderings polyhedral visual hull captured real time system 
images demonstrate typical models system produces 
main sources error creating models poor image segmentation small number input images 
shows model view dependently textured video images 
model textured information novel visibility algorithm 
results discontinuous reconstruction blending field accurately captures regions model seen video cameras 
model textured visibility information 
resulting blending field smooth visibility errors near occlusions 
shows visualizations blending fields previous figures 
cameras assigned color red green blue yellow colors blended camera blending weights 
clear images image produced visibility information discontinuous image 
offline testing algorithms sufficiently fast run full frames second reasonable computer hardware 
maximum frame rate current live system limited fact cameras capture images frames second synchronized mode 
clearly improve system better cameras run frames second 
additional cameras improve shape visual hulls quality view dependent texturing 
current system compute throw away different mesh frame video 
applications useful derive mesh frame transformation mesh original frame store original mesh plus transformation function 
temporal processing enable accumulate texture radiance model seen different viewpoints 
accumulated texture information fill parts invisible frame information frames 
novel algorithms efficiently computing rendering polyhedral visual hulls directly set images 
implemented tested algorithms real time system 
speed system quality renderings better previous systems similar resources 
primary advantage system produces polygonal meshes visual hull frame 
demonstrated meshes rendered quickly view dependent texture mapping graphics hardware 

balaban optimal algorithm finding segments intersections proc 
th annual acm symposium computational geometry pp 


bentley ottmann algorithms reporting counting geometric intersections ieee trans 
comput sept pp 


gortler cohen mcmillan unstructured lumigraph rendering appear siggraph 

chazelle optimal algorithm intersecting dimensional convex polyhedra siam computing pp 


debevec taylor malik 
modeling rendering architecture photographs siggraph pp 


debevec yu efficient view dependent image rendering projective texture mapping eurographics rendering workshop 

kanade narayanan 
virtualized reality constructing virtual worlds real scenes ieee multimedia march pp 


visual hull concept silhouette image understanding ieee pami pp 


online model reconstruction interactive virtual environments 

raskar gortler mcmillan image visual hulls siggraph july pp 


jain 
reality modeling visualization multiple video sequences ieee cg nov pp 


generating octree models objects silhouettes sequence images cvgip pp 


pulli cohen duchamp hoppe shapiro stuetzle view rendering visualizing real objects scanned range color data th eurographics workshop rendering 

interactive boolean operations conceptual design solids siggraph pp 


roth ray casting modeling solids computer graphics image processing feb pp 


reconstruction tree models instrumented photographs eng 
thesis 

sullivan ponce automatic model construction pose estimation object recognition photographs triangular splines iccv pp 


seitz dyer photorealistic scene reconstruction voxel coloring cvpr pp 


szeliski rapid octree construction image sequences cvgip image understanding july pp 

fig 

flat shaded views polyhedral visual hull 
fig 

view dependently textured views visual hull model 
left rendering uses conservative visibility computed real time algorithm 
right view ignores visibility blends textures smoothly potentially errors 
fig 

visualizations camera blending field 
colors red green blue yellow correspond cameras system 
blended colors demonstrate pixel blended input image visibility visibility 
