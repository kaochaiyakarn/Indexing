lightweight structured text processing robert miller brad myers school computer science carnegie mellon university pittsburgh pa cs cmu edu www cs cmu edu rcm lapis text popular storage distribution format information partly due generic text processing tools unix grep sort 
unfortunately existing generic tools assumptions text format line record limit applicability 
custom built tools alternative require substantial time investment programming expertise 
describe new approach lightweight structured text processing overcomes difficulties enabling users define text structure interactively manipulate structure generic tools 
prototype system lapis web browser highlight filter sort text regions described user 
lapis advantages systems ability define custom structure simple intuitive pattern language interactive specification showing pattern matches context letting users choose convenient combination manual selection pattern matching external parsers standard text formats 
pattern language lapis text constraints describes text structure high level terms region relationships contains 
describe implementation text constraints novel compact representation region sets collections rectangles region intervals 
illustrate examples applying lapis web pages text files source code 
structured text popular way store process distribute information 
traditional examples structured text include source code sgml latex documents bibliographies email messages 
advent world wide web structured text form html dominant medium online information 
popularity text easy explain 
old standard data format ascii text viewed edited easily platform 
text cut pasted application printed printer included email message indexed search engine 
unix particular rich set generic tools operating text files grep sort uniq sed unfortunately generic nature existing tools weakness generic tools limited assumptions format text 
unix tools assume text file divided records separated newlines delimiter character 
assumption breaks kinds structured text source code html 
consider tasks difficult generic tools handle 
find functions call exit program 

check spelling program comments 

extract bibliography web page 

sort file postal addresses zip code 
traditional approach problems custom build tool particular text format 
example tasks solved development environment customized programming language 
tasks typically solved hand coded perl awk scripts 
problem approach custom built programs require substantial investment difficult reuse tasks text formats lie ability casual users create 
deficiencies custom built approach best highlighted custom text structure structure standard grammars widely available parsers 
users store small databases address lists text files 
programs generate reports logs text form 
nearly web page uses kind custom structure represented html examples include lists publications search engine results product catalogs news weather reports stock quotes sports scores proliferation custom text formats developing tool combination task text format 
approach generic tools structured text called lightweight structured text processing 
lightweight structured text processing enables users define custom text structure interactively incrementally generic tools operate text structured fashion 
envision lightweight structured text processing system components ffl structure description language describing text structure ffl interactive document viewer viewing documents developing testing structure descriptions invoking tools ffl parsers standard structures html programming language syntax ffl tools manipulating text structure descriptions sorting searching extracting reformatting editing computing statistics graphing plan built prototype system called lapis lightweight architecture processing information structure 
lapis includes new structure description language called text constraints 
text constraints describe set regions document terms relational operators contains primitive regions generated external parsers literal matching 
text constraints queries function contains exit structure definition example sentence ends just whitespace abbreviation abbreviation ms dr text constraints differ ways contextfree grammars regular expressions traditional techniques structure description 
text constraints permit conjunctions patterns indicated commas previous example context just 
text constraints refer structure defined external parsers multiple parsers simultaneously 
example line start function refers line name defined line scanning parser function defined parser match line function 
believe text constraints readable comprehensible users grammars regular expressions structure description reduced list simple intuitive constraints read understood individually 
lapis prototype text constraints implemented algebra operating sets regions efficient set representations achieve reasonable performance 
lapis combines text constraints web browser allows user develop text constraints interactively apply web pages source code text files 
browser user describe set regions programmatically text constraints external parser manually selection combination 
combining manual selection programmatic description quite powerful 
manual selection restrict attention part document selected easily described content area web page omitting navigation bars advertisements 
manual selection fix errors correct structure description adding removing regions set necessary 
relying manual intervention appropriate help finish task faster 
lapis browser includes commands operate sets regions 
find simply highlights navigates set regions 
filter displays selected regions eliminating text display 
sort displays set regions lapis web browser showing web page describes user interface toolkits 
user entered pattern bold start paragraph containing mac highlight names toolkits support macintosh development 
sorted value subfield 
lapis features provided interactive commands browser plan implement tools style grep sort take input text file structure description 
remainder structured follows section describes lapis browser tools 
section describes text constraints language 
section describes current implementation text constraints 
section presents applications system web pages text files source code 
section covers related section describes section concludes 
lapis web browser prototype lightweight structured text processing system lapis web browser extended pattern language text constraints generic text processing tools 
lapis built top sun java foundation classes 
screenshot browser shown 
web browsers lapis browser retrieve file named url retrieved ftp local filesystem 
browser display text files html pages 
html pages displayed text shows source including tags html renders page html formatting 
parsers included browser run automatically page certain mime type loaded 
parser interprets particular text format labels components document 
built parsers include ffl html parses html pages labeling html tags elements simultaneously building parse tree rendering page ffl character parses plain text html find character classes whitespace letters digits ffl java parses java programs find syntax constructs class method statement expression ffl parses plain text html find regions sentence line time date currency conventions american english 
parsers associated url patterns 
example parser identifies components altavista search result page associated urls form altavista digital com 
new parsers defined ways writing java class implements parser interface developing system text constraints 
html character parsers written hand java 
java parser automatically generated example grammar included javacc parser generator showing lapis take advantage existing parsers recoding grammar text constraint expressions 
developed interactively lapis system text constraints 
browser user enter text constraint expression see matching regions highlighted see 
highlighting simple implement familiar users unfortunately merges adjacent overlapping regions distinguishing endpoints 
research identify better ways display overlapping region sets context 
view highlighted regions user scroll document match menu command jump highlighted region 
addition patterns user highlight regions manual selection 
prototype selection mouse distinct highlighted region set showing matches pattern 
selection single contiguous region colored blue highlighted region set may multiple noncontiguous regions colored red 
current selection document available element region set named selection 
referring selection text constraint example user limit pattern scope manually selected region document 
user construct named region set adding removing regions 
label menu command adds current selection region set name 
corresponding command removes selection named region set deleting regions lie inside selection trimming ends regions overlap selection 
applying label repeatedly sequence selections user build named region set hand modify named region set created parser pattern 
tools provided manipulating highlighted regions 
filter eliminates text display 
default filter inserts highlighted regions keep display readable 
documents filtered source text level html documents 
result illegal html orphaned start tags tags web browser render 
filter sort filters display highlighted regions reorders regions 
regions sorted alphabetically numerically 
default sort key entire content region user provide additional text constraint expression describing sort field 
text constraints text constraints tc language specifying text structure relationships regions substrings text 
tc describes substring specifying start offset offset 
formally region interval inter character positions string length string 
region identifies substring starts bth cursor position just bth character string ends eth cursor position just eth character string 
length region gamma tc essentially algebra sets regions operators take region sets arguments generate region set result 
tc permits expression match arbitrary set regions structured text query languages constrain region sets certain types nonoverlapping regular expressions gc lists hierarchical proximal nodes 
primitives tc primitive expressions literals regular expressions identifiers 
literal string enclosed single double quotes matches occurrences string document 
finds regions exactly matching literal characters 
literal matcher generate overlapping regions matching aa string aaaaa yield regions 
regular expression indicated regexp 
regular expression matcher library java 
library follows perl syntax semantics returning set nonoverlapping regions long possible 
identifier whitespace delimited token words punctuation reserved tc operators identifiers refer named region sets generated parsers 
example html parser run tag refers set html tags document 
single namespace provided lapis prototype names generated different parsers chosen uniquely 
version lapis expected support multiple independent namespaces 
score years ago 
fundamental region relations example string 
regions related region follows overlaps start contains overlaps region relations tc operators fundamental binary relations regions contains overlaps start overlaps 
similar relations time intervals defined 
region relations defined follows contains overlaps start overlaps note inverses contains overlaps start overlaps 
region relations illustrated 
region relations complete sense ordered pair regions relations 
regions may related ways 
example point identical start point overlaps start relations useful pattern matching define set derived relations regions coincident endpoints just overlaps start just overlaps start overlaps start overlaps starts contains overlaps start ends contains overlaps illustrates derived relations 
score years ago 
region relations coincident endpoints 
regions related region follows just start starts ends just useful derived relation overlaps overlaps contains overlaps start overlaps regions overlap 
regions overlap relational operators region relation corresponds relational operator tc 
relational operator takes forms unary binary 
unary form op generates set regions bear relation op region matching example html document constraint expression paragraph returns regions inside paragraph element 
binary form relational operator op generates regions matching bear relation op region matching example html paragraph contains lincoln returns paragraph elements contain string lincoln 
sake simplicity relational operators equal precedence right associativity parsed 
intersection union difference constraints simultaneously true region expressed separating constraint expressions commas 
region set matched sn intersection region sets matched example just just nn describes regions start immediately newline 
alternative constraints specified separating constraint expressions 
region set matched sn union region sets matched set difference indicated 
region set matched set matches removing regions match delimiter operators certain relational operators intersected resulting region set larger user anticipates 
example expression starts ends matches possible pair occur 
situations adjacent pairs desired relational operator modified keyword delimiter 
example starts delimiter matches regions start region matching overlap region matching concatenation background concatenation regions indicated 
expression address matches regions consist followed address important 
meaning important depends parameter called background 
background set regions 
characters background regions ignored concatenating constraint expressions 
example background whitespace expression address finds address address split lines 
relational operators require adjacency background expression just address successfully match word address 
lapis browser chooses default background current document view guideline text printed screen part background 
plain text view default background whitespace 
html view default background union whitespace tag tags affect rendering displayed 
background set explicitly ignoring directive 
change background duration constraint expression expr form expr ignoring example query source code take form expr ignoring comment whitespace 
background removed setting generates empty region set 
definitions constraint systems constraint definition assigns name result constraint expression starts score years ago ends shall perish earth region sets named constraint definition way region sets named parser example sentence start 
constraint system set constraint definitions separated semicolons 
expressiveness theoretical power tc set languages matched tc expression depends power matchers parsers uses 
matchers parsers generate regular languages tc expression regular regular languages closed tc operators concatenation intersection union 
context free languages closed intersection tc expression context free parsers may match non contextfree language 
tc constraint system uses literals regular expressions external parsers powerful regular expression tc lacks recursive constraints repetition operators operator 
discussed section address issue 
implementation section describes implementation text constraints lapis 
interesting features implementation novel region set representation region interval 
region intervals particularly representing result region relation operator 
simple transformation region intervals may regarded rectangles dimensional space allowing lapis draw earlier research computational geometry find data structure suitable storing combining collections region intervals 
region interval representation key ingredient implementation text constraints choice representation shall region sets represented 
alternative bitvector bit possible region lexicographic order 
bitvector representation region set requires space length document 
considering region sets generated matchers parsers typically elements bitvector representation wastes space 
alternative represents region set list explicit pairs appropriate sparse sets 
unfortunately region sets generated relational operators sparse 
choose pathological example matches region document 
general region relation op region set set matching op may elements 
systems dealt problem restricting region sets nested sets overlapped sets sacrificing expressiveness linear storage processing 
restricting region sets compress dense region sets representation called region intervals 
region interval quadruple representing set regions essentially region interval set regions starts ends intervals points 
region interval depicted extending region notation regions replacing vertical lines denoting region endpoints boxes denoting intervals 
facts region intervals follow immediately definition ffl set regions string length represented region interval 
ffl singleton region set represented region interval 
ffl region interval represents empty set ffl region interval subset region interval ffl intersection intervals max min max min may course empty set 
region intervals particularly useful representing result applying region relation operator 
region region relation op set regions related op represented exactly region interval shown 
extension region relation operator applied region set elements result represented region intervals possibly fewer region intervals may redundant 
result extends region intervals applying region relation operator region interval yields exactly region interval 
example result set regions lie region 
assuming region interval nonempty region qualifies result operator described region interval 
contains overlaps start overlaps region intervals corresponding relational operators 
represent arbitrary region set union region intervals simply collection tuples 
size collection may worst case consider example set regions length represented singleton region intervals collections practice 
summarize union region intervals representation enables straightforward implementation text constraints language ffl primitives convert set regions generated literal regular expression parser union region intervals replacing region singleton region interval 
ffl relational operators region interval compute new region interval op 
ffl union merge collections region intervals eliminating region interval subset 
ffl intersection intersect possible pair region intervals collection collect results 
region space remains choose representation collection region intervals provides operations need region relations union intersection 
geometric interpretation regions prove helpful 
region regarded point plane coordinate indicates start region coordinate indicates 
refer dimensional interpretation regions region space see 
strictly speaking points integral coordinates correspond regions lie degree line interpretation region interval corresponds axis aligned rectangle region space 
region intervals intersect region space rectangles intersect 
region interval subset rectangle completely enclosed rectangle 
region set represented union region intervals turn represented union axis aligned rectangles region space 
seek data structure representing union rectangles operations ffl create create union rectangles set rectangles ffl relation op generate new union rectangles applying region relation operator op elementwise ffl union combine unions rectangles ffl intersect intersect unions rectangles start point point years ago region corresponds point region space 
ideally operations take linear time linear space 
words finding intersection union collection rectangles collection rectangles take time number rectangles result computing region relation collection rectangles take time 
data structure store rectangles space 
research computational geometry multidimensional databases developed variety data structures algorithms storing intersecting collections rectangles including plane sweep algorithms trees quadtrees various kinds trees see survey 
lapis uses variant tree 
tree balanced tree derived tree internal node children constants tree kept balance splitting overflowing nodes merging nodes 
rectangles associated leaf nodes internal node stores bounding box rectangles subtree 
decomposition space provided tree adaptive dependent rectangles stored overlapping nodes tree may represent overlapping regions 
keep lookups fast tree insertion algorithm attempts minimize overlap total area nodes various heuristics example inserting new rectangle subtree increase overlap siblings amount 
set heuristics called tree empirically validated reasonably efficient random collections rectangles 
initially tree heuristics prototype 
rectangle collections generated text constraints particularly random tend distributed linearly dimension region space degree line axis axis 
able improve performance factor simply ordering rectangles lexicographic order eliminating expensive calculations decide place rectangle sacrificing tree logarithmic decomposition region space 
trees intersected traversing trees tandem comparing current node current node expanding nodes bounding boxes overlap 
traversing trees tandem potential pruning search nodes high tree disjoint rectangles stored subtrees compared 
practice tandem tree intersection takes time 
worse nm 
tandem tree traversal effective implementing set intersection union difference 
performance lapis prototype written java 
core text constraints engine implemented lines code including matchers parsers 
web browser consists lines code top jfc text component 
text constraints engine evaluate operator typical rate regions second symantec jit mhz pentium 
actual evaluation time text constraint expression varies complexity expression size intermediate results 
text constraint expressions examples section evaluated second text files web pages ranging kb size 
applications web pages web pages display data custom format html markup set important parts text spatially 
shows part page describing user interface toolkits page describes toolkits various properties free commercial run unix microsoft windows macintosh cross platform 
browse page conveniently want restrict display show toolkits matching certain requirements example toolkits running unix microsoft windows sorted price 
toolkit page contained single paragraph element html 
start describing toolkit paragraph element identified built html parser toolkit paragraph cumulus technology court palo alto ca unix discontinued alpha numeric terminal windows window system design corporate plaza dr colorado springs unix windows ib amulet brad myers human computer interaction institute carnegie mellon univ pittsburgh pa amulet cs cmu edu free ms windows portable toolkit uims excerpt web page describing user interface toolkits 
finding prices straightforward number region set identified built parser price number free toolkit finding toolkits run macintosh easy toolkit contains mac page refers consistently macintosh mac 
unix platforms described windows motif microsoft windows called ms windows just plain windows 
deal problems defining constraint kind platform specifies possibilities constrains matched literal full word just part word macintosh word mac unix word unix motif word pc windows just definitions readily filter web page toolkits matching certain requirements toolkit contains unix contains sort price 
plain text plain text explicit structure html text constraints plain text typically refer delimiters punctuation marks line breaks 
consider example processing email messages 
airlines distribute weekly email announcing low price airfares 
excerpt message shown 
describing boundaries table fairly straightforward delimiters identified built parser table starts delimiter roundtrip fares departing ends delimiter rows table line identified built parser flight line starts table fare number just flight origin destination cities described terms boundaries origin just delimiter just delimiter line start table destination just price flight roundtrip fares departing boston ma indianapolis pittsburgh pa roundtrip fares departing philadelphia pa buffalo ny cleveland oh columbus oh dayton oh detroit mi pittsburgh pa richmond va syracuse ny excerpt email message announcing cheap airfares 
convert local filename url 
param file file convert return url corresponding file public static url file file throws return new url file file java method documentation comment 
definitions readily filter message flights interest boston pittsburgh flight contains destination contains pittsburgh table contains origin contains boston expression flight origin somewhat convoluted flights rows table contain origin field inherit heading table 
example demonstrates useful structure described queried small set relational operators 
source code source code processed plain text parser programming language source code queried easily 
lapis includes java parser examples follow java 
systems querying processing source code tc operates regions source text syntax tree 
text level user achieve substantial mileage knowing general types regions identified parser statement comment expression method text constraints specialize 
example parser identifies comment regions specially distinguish documentation comments automatically extracted javadoc utility 
shows java method preceded documentation comment 
user find documentation comments constraining comment text level expression comment starts similar technique distinguish public class methods private methods method starts public case accuracy pattern depends programmer convention attributes public may appear order method declaration necessarily 
method declarations equivalent java public static synchronized void static public synchronized void synchronized static public void necessary user deal problem adjusting pattern method starts line contains public relying java parser identify attribute regions method contains attribute contains public practice convenient typographic conventions public appearing modify parser contingency 
text constraints express conventions constraints enforce desired 
find public methods need documentation just text constraints useful defining custom structure inside source code 
java documentation comments include various kinds fields param describe method parameters return describe return value exception describe exceptional return conditions 
fields described text constraint expressions starts delimiter starts param starts return starts exception structure find methods documentation incomplete various ways 
example expression finds methods parameters parameter documentation contains just contains related text processing rich varied field 
languages awk perl popular tools providing fast regular expression matching imperative programming language designed text processing 
tools interactive sacrificing ability view pattern matches context particularly important web pages ability combine manual selection programmatic selection 
visual awk strides interactive development awk programs visual awk line oriented limited regular expression patterns unable external parsers 
concept lightweight structured text processing described independent language chosen structure description 
text constraints language lapis novel appealing simple intuitive operators uniform treatment parser generated regions regions concept background regions direct implementation language may 
variety languages proposed querying structured text databases proximal nodes strings tree inclusion pat expressions 
survey structured text query languages 
variant grep uses structured text query language regular expressions helped inspire incorporate unix style tools structured text processing system 
domain specific query tools include query language specific source code webl combines html query language programming language specialized fetching processing world wide web pages 
structured text editors common form structured text processing lacking enables users construct structure descriptions interactively 
examples structured text editors include gandalf extent emacs 
systems accept structure description provide tools editing documents follow structure 
structure description generally variant context free grammar emacs uses regular expressions describe syntax coloring 
emacs unusual sense structured text editors enforce syntactic correctness times emacs uses structure description assist editing possible prevent user entering free text 
lapis system follows philosophy allowing user describe access document free text structured text combination 
sam combines interactive editor command language manipulates regions matching regular expressions 
regular expressions pipelined automatically process structure ways line oriented systems 
lapis sam provide mechanisms naming composing reusing structure described regular expressions 
related efforts build user interfaces apple data detectors 
systems associate actions text structure urls associated open browser action email addresses compose message look phone number 
url email address selected user associated actions available user interface 
action association useful tool incorporated lapis lapis systems traditional structure description languages context free grammars regular expressions 
part author phd thesis research continues evolve 
section describes directions taken coming months 
lapis extended new matchers parsers tools 
useful matcher literals optionally ignore alphabetic case optionally match full words match spaces literal expression background character optionally simple stemming 
parser support improved allowing parsers operate limited parts document example applying html parser java documentation comments may contain html tags 
useful new tools include computing statistics region sets counts sums averages reformatting text template substitution 
fruitful area research integration lightweight structured text processing applications particular extensible text editor emacs 
integration text editor poses challenges interface problem named region sets fluidly direct manipulation text editing implementation problem updating region sets cheaply user edits 
text constraint language room improvement 
possible count nd line table numeric operators toolkit contains price 
constraint systems support recursive mutually recursive definitions 
useful precede constraint expression fuzzy qualifier usually rarely 
fuzzy qualifier describes important matching region satisfy constraint 
important determine conditions text contraints implementation tandem tree intersection runs linear time 
described lightweight structured text processing technique allowing users define manipulate text structure interactively 
prototype system lapis described evaluated example applications including web pages source code plain text 
lapis includes structure description language called text constraints express text structure terms relationships regions 
lapis prototype important advantages systems 
ability handle custom structure simple language accessible users 
second advantage interactive specification allows users see pattern matches context define text structure convenient combination manual selection pattern matching 
lapis supports external parsers giving user leverage standard text formats supporting existing parsers recoding new grammar language allowing user write patterns refer multiple parse trees 
availability lapis prototype described including java source code available free www cs cmu edu rcm lapis 
help authors david garlan laura anonymous referees 
research partially supported usenix student research partially national defense science engineering graduate fellowship 
views contained document authors interpreted representing official policies expressed implied government 
aho kernighan weinberger awk programming language 
addison wesley 
allen time intervals 
communications acm pp 
baeza yates navarro integrating contents structure text retrieval 
acm sigmod record march pp 
beckmann kriegel schneider seeger tree efficient robust access method points rectangles 
acm sigmod intl conf managment data pp 
clarke cormack burkowski algebra structured text search framework implementation 
computer journal pp 
crew language examining syntax trees 
proceedings usenix conference domain specific languages october pp 
dey abowd wood framework providing ubiquitous software services 
proceedings intelligent user interfaces january 
gonnet tompa mind grammar new approach modelling text 
proceedings th vldb conference pp 
guttman tree dynamic index structure spatial searching 
acm sigmod intl conf managment data pp 
habermann notkin gandalf software development environments 
ieee transactions software engineering 
december pp 
hopcroft ullman automata theory languages computation 
addison wesley 
jaakkola querying structured text files 
university helsinki department computer science report november 
mannila retrieval hierarchical texts partial patterns 
proceedings sigir pp 
kistler marais webl programming language web 
computer networks isdn systems proceedings www conference april pp 
appeared dec src technical note 
landauer hirakawa visual awk model text processing demonstration 
proceedings th international ieee symposium visual languages september 
www computer org vl talks html macleod query language retrieving information hierarchic text structures 
computer journal pp 
myers user interface software tools 
www cs cmu edu bam 
html nardi miller wright collaborative programmable intelligent agents 
communications acm march pp 
navarro baeza yates language queries structure contents textual databases 
proceedings sigir pp 
original reusable objects 
www com pike text editor sam 
software practice experience nov pp 
interactive system structured document manipulation 
text processing document manipulation proceedings international conference cambridge university press pp 
tompa pat expressions algebra text search 
uw centre new oxford english dictionary text research report oed 
samet design analysis spatial data structures 
addison wesley reading ma 
stallman emacs extensible customizable self documenting display editor 
sigplan notices june pp 
sun microsystems javacc 
www 
com javacc wall christiansen schwartz programming perl nd ed 
reilly associates 
