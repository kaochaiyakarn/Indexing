ane typing completeness cps extended summary draft josh peter hearn thielecke may companion linearly continuations authors 
show variety control behaviours continuations including calling returning procedures raising handling exceptions labelled jumping goto statements process switching coroutines 
purpose show ane typing discipline target cps transform prove completeness result 
control constructs continuations short focus basic case procedure call return brie sketch exceptions case 
formally ane typing discipline fischer continuation rst operator rst call value cbv transform 
rules barber plotkin dill system augmented weakening include single recursive type corresponding domain equation completeness result states terms appropriate type target language equal transform source term fails domain replaced 
reasonable ask full target cps source 
proof uses inverse transform seen type theoretic reconstruction part sabry felleisen completeness result :10.1.1.22.7509
target language grammar types cps language answers values continuations programs language tuned untyped cbv calculus 
di erent source languages say exceptions coroutines require type constructors di erent values programs 
type system uses judgements form 
intuitionistic zone contains value variables ane zone 
contains continuation variables 
kind value needed untyped variables type suppress type information consider just set variables 
similarly variables 
type 









rules require forced grammar types 
need consider domain equation want keep simple include explicit syntax folding unfolding interpret equation equality just isomorphism 
approach standard justi ed domain theoretic grounds categories information systems equation solved equality 



laws expected 
transform state cps transform 
usual occurrences required fresh avoid capture 
notice programs values ane functions ane application 
contrast continuations intuitionistic functions intuitionistic application form 
proposition soundness contains free variables proof straightforward induction 
important points note argument intuitionistic function continuation free continuation variables recursive type rules abstraction application cases 
question operational adequacy transform follows known results standard transform 
junk show term program type target equivalent transform source term 
ne coarser contextual equivalence relations satisfy similar properties 
proposition completeness think commutative nature ane typing admit coroutine examples switching continuations 
examples ruled combination ane typing special form types range cps transform 
types argument ane function current continuation opportunity switch continuations switch continuation transformers 
lemma 

empty singleton 
indicates commutative aspects ane typing exercised transform pure calculus 
rearrange de nition type system aspect explicit 
resulting system embedded commutative non commutative version ane typing 
facts somewhat accidental 
example want include coroutines di erent domain equation target necessary commutative aspect come handy see ane continuation passing 
proof completeness uses inverse transform 
idea transform type term gives completeness result 
specify auxiliary functions inverse transform continuations values answers respectively 
note essentially sabry felleisen inverse transform cps language include terms form answer program continuation 
forms excluded inclusion allows called administrative redexes sabry felleisen development elimination redexes 
understand idea transform note continuations accept value computation converting accepted value value throw new value continuation parent continuation 
continuation characterised function values values sitting inside driving idea inverse transform continuation transformed function 
continuations referring parent continuations name continuation depends exactly continuation see lemma inverse transforms continuations just composed 
main properties inverse transform summarised follows 
lemma 



exceptions sketch similar analysis exceptions 
typed language transform function type type exceptions 
untyped setting proceed domain equation redesign cps language domain 
answers values continuations continuation pairs programs typing rules expected 
double cps transform sugar hk hi 
hk hi hk hi hk mn hk hi mh hi hi hi raise hk hi hk hk hi hk ii proposition soundness completeness results hold exceptional cps language 
details results similar procedure call return analogues mention inverse transform 
raise hm ni handle related shown combination ane continuations restricted classes types lead completeness results 
main unresolved question necessary carved sublanguage 
standard typing rules ane calculus restricted class types just single recursive type 
languages obviously embed bigger companion question embeddings preserve junk results 
larger language contains terms program type sublanguage question terms equivalent contextual senses ones smaller language 
point view compilation really matter ne carved sublanguage 
conceptual point view nicer just language transform having cook new sublanguage time 
primarily interested soundness problem variant dill certain recursive types weakening suces 
completeness matter know type restrictions requisite tight connection source target 
completeness ane cps junk experience known initially 
said close familiarity details expect result :10.1.1.22.7509
case hope results give support signi cance sabry felleisen cps sublanguage deserves better known 
certainly domain type equation characterise target provides independent rationale cps language obtained starting types adopting dill style typing rules designing grammar 
stated small di erences detail language mainly owing fact consider compacting transform 
ane type system restrict typing cps language removing weakening resulting linear ane theory 
result stronger ane typing importantly consider unrestricted cps fundamental conceptual starting point see reason restriction 
contrary companion includes indications removal weakening type theory conceptually wrong 
danvy di erent cps sublanguage inverse transform 
way language di ers sabry felleisen closed characterises range cps exactly equivalence 
pfenning account analysis danvy approach typing rules linear calculus lacks exchange 
compared results important point ordered contexts account 
dicult see analysis approach continuation ane zone current continuation 
hand typing rules treat di erent occurrences continuations di erently linearly 
result obvious type system reconstructed explained starting domain equation 
andrew barber gordon plotkin 
dual intuitionistic linear logic 
tech report univ edinburgh 
olivier danvy 
back direct style 
science computer programming 
pfenning 
properties terms continuation passing style ordered logical framework 
workshop logical frameworks meta languages 
amr sabry matthias felleisen :10.1.1.22.7509
reasoning programs continuation passing style 
lisp symbolic computation november 

