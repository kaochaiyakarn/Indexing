qal query algebra complex objects university ljubljana faculty computer information sciences ljubljana slovenia fri uni lj si tari royal melbourne institute technology department computer science gpo box melbourne australia cs rmit edu au university ljubljana faculty computer information sciences ljubljana slovenia fri uni lj si main motivation development query algebra complex objects qal study operations needed query structural aspects object oriented databases due advantages object oriented database model conventional relational functional database models 
basic operations qal query algebra evolved relational algebras family functional query languages re ning operations manipulation objects 
order support features speci object oriented data models qal ers set operations provide means querying conceptual schemata ii operation provides simple cient way querying nested components complex objects 
show case study consisting comprehensive set examples operations employed express class queries speci object oriented databases 
index terms database algebras object algebra query languages complex objects conceptual schema 
characteristics database algebra re ect properties algebraic structures algebraic operations intended 
perspective di erences object algebra algebraic language de ned manipulation relations instance regarded consequences di erences underlying data models 
features included object algebra operations handling modelling constructs speci object oriented data models structural constructs including object identity types classes complex objects inheritance behavioral constructs including methods lation overriding overloading late binding :10.1.1.44.5524
study operations object algebras needed querying structural aspects objects due speci features object oriented data models compared relational nested relational functional data models 
particular examine operations needed express types queries emerge need deal modelling constructs speci object oriented database models queries conceptual schema database explored ii queries conceptual schema retrieve portions extensional database nally iii queries ciently manipulate complex objects 
results form query algebra complex objects referred qal 
qal query algebra bears close resemblance relational algebras family functional query languages 
qal operations generalisations operations relational algebras manipulation objects 
due close relation family query languages qal embodies advantages functional query languages simple functional semantics allows construction complex queries incrementally simpler queries 
background motivation detail 
reasons conceptual schema query object oriented databases basic ideas proposed operations querying conceptual schemata sub section 
second problems existing operations querying complex objects brief overview approach querying complex objects section 
conceptual schema query databases object oriented database aspects modelled environment represented stored part database conceptual schema 
example information adherence object parent class reason relationships classes forming database schema static behavioural properties relationships database instances 
result object oriented database system provide facilities allow inquiries reasoning properties individual objects derive relationships conceptual schema 
furthermore due rich semantic relationships modelled concepts large number di erent concepts appearing modelled environment conceptual schema may complex 
consequently users need facilities allow inquiring relationships elements schema short conceptual schema querying facilities 
example user may interested relationships classes course assistant properties class student 
facilities user obtain information needed plan conventional queries simply obtain answers inquiries conceptual aspects database 
qal query algebra includes set operations inquiring relationships indi vidual objects conceptual schema relationships elements conceptual schema 
operations constructs qal data model data model logic uni es representation intensional extensional portions object oriented database 
operations referred model operations 
operations qal query algebra model operations serve querying conceptual schema object oriented database ii employing relationships individual objects conceptual schema conventional queries 
querying nested components complex objects main approaches manipulation complex objects object algebras 
rst approach evolved nested relational algebras 
operations approach include variants nf operations nest unnest operations creating attening set sets 
approach object algebras including query algebra object algebra aqua 
second approach manipulation complex objects evolved functional programming languages 
operations manipulation complex objects approach variants operations apply operation tuple construction 
database algebras uenced functional languages include complex object algebra object oriented query algebra query algebra 
operations commonly referred restructuring operations 
object algebra uses approaches combines 
general restructuring operations appropriate expressing queries extract selected components complex objects change structure complex objects upper level composition hierarchy build entirely new complex objects existing complex objects 
argue restructuring operations suitable expressing class queries manipulate nested components complex objects retain original structure argument complex object manipulated component 
example type query ltering set objects nested argument complex object 
major drawbacks restructuring operations query nested components complex objects follows 
restructuring operations evolved nested relational algebras requires additional properties satis ed manipulated complex objects additional indexing techniques order prevent loss information restructuring 
queries manipulate nested components complex evaluation computationally expensive expressed restructuring operations 
detailed description disadvantages restructuring operations query nested components complex objects section 
operation called apply proposed evaluation queries nested components com plex objects 
proposed operation generalisation known operation apply 
operation apply overcomes problems arise restructuring operations query nested components complex objects 
show proposed operation provides simple cient way query arbitrarily nested components complex objects 
addition operation apply serves primarily querying nested components complex objects qal query algebra includes set restructuring operations primarily intended restructuring complex objects 
organisation organised follows 
section presents formalisation data model qal 
operations qal query algebra section 
operations de ned formally 
functionality illustrated example 
section qal operations expressing queries speci object oriented databases 
particular study querying intensional portion database querying complex objects 
experiences obtained prototype implementations qal section 
section algebras query languages related qal query algebra 
section give concluding remarks directions 
qal data model section formalisation qal data model serves basis de nition qal query algebra 
data model qal object oriented data model provides addition basic constructs object oriented database models uniform view database treating classes objects 
respect data model ideas introduced logic declarative language logic 
formalisation qal data model serves framework de nition simple operations intended manipulation properties individual class objects 
ofthese operations introduced section de ned constructs introduced formalisation qal data model 
observe uniform treatment schema data portions database provides simple means de ning semantic relationships basic concepts data model class type interpretations partial ordering values 
sub section de ne identi ers properties 
section gives de nitions values types presents basic structures form 
structural aspects objects section 
basic constructs qal data model essential development algebra 
complete formalisation qal data model formal description object behaviour 
identi ers rst de ne basic terms 
assume existence prede ned nite set identi ers identi er unique symbol represents concrete entity real world 
examples identi ers 
string tom instance identi er represents name person 
symbol identi er represents integer 
identi ers usually called constants 
furthermore identi er tom example serves unique identi cation person name tom 
identi er student unique identi cation representation student stands class individual students 
term string denote identi er represents concept string programming languages 
identi er string seen constant stands class constants 
suggested examples set divided set individual identi ers od representing concrete entities person tom number set class identi ers oc representing concepts identi ers person string stand group individual entities 
cases refer individual class identi ers simply individuals classes 
signi cant di erence class identi ers individual identi ers lies tions 
interpretation individual identi er individual interpretation class identi er set individuals 
interpretation class identi ers de ned follows 
id oc 
interpretation id denoted ic id properties 
ic id od 
id id oc id id ic id ic id 
seen de nition common engineering intuition stated treating individuals members interpretations single class identi ers 
design decision leads disjunctive sets individuals represent interpretations class identi ers 
individual identi er element interpretation exactly class identi er 
class interpretation speci es membership relationship individual class identi ers 
id od id oc 
identi er id member identi er id id ic id 
membership relationship confused instantiation relationship de ned shortly 
binary relation class identi ers denoted id subclass id id id oc represent inheritance hierarchy classes 
assume relation de nition identi ers qal correspond called logical id kifer 
conceptual schema object oriented database 
assume existence class called object root hierarchy de ned relationship subclass 
subclass relationship de ne relationship id id id id holds 
id id 
id id oc id id oc id subclass id id id 
id od id oc id id oc id ic id id id 
relationship called speci opposite general relationship 
example set identi ers ordered relationship de ned terms student person employee person instructor employee ta student ta instructor jim instructor tom student john ta 
relationship forms partial ordering identi ers :10.1.1.35.2950
ordinary class interpretation maps class identi ers sets individual identi ers called mem bers class 
account previously de ned partial ordering identi ers interpretation introduced 
inherited interpretation class identi er includes mem bers class members subclasses class oc 
inherited interpretation denoted de ned oc ic ic 
de nition inherited interpretation de ne instantiation relationship com represent associations individual objects classes 
id id oc 
identi er id instance id id id 
values far identi ers structural properties 
section extend concept identi er notion value 
rst basic terms section 
assume existence nite set values shown de nition set values subsumes previously de ned set identi ers just set identi ers partitioned individual class identi ers divide set values set ground values vd set values vt represent types 
assume existence set attribute names value 
id 
fo ong oi 
oi oi ai 
example value name jim age kids works cs representing proper ties person 
string jim integer number individual identi ers denote name age person 
component set individual identi ers represent kids instances class identi er person 
component cs denotes individual identi er stands object representing computer science department 
values include individual identi ers called ground values 
values composed solely class identi ers refer structural types simply types 
values include individual identi ers class identi ers permitted qal data model 
properties mixed values integration object oriented database model :10.1.1.35.2950
analogy perception class identi ers types stand representation set values 
formally atype de ned follows 
value type vt holds 
oc 
fsg vt 
tn ti vt ai 
example type 
tuple name string age int kids works organ represents properties person 
values attributes name age class identi ers string int role primitive types 
value attribute works class identi er organisation role type instances organisation individual identi ers representing di erent organisations 
value attribute kids instances sets individual identi ers representing persons 
properties values close integration concepts class identi er structural type provides clear method de nition type interpretation de ned straightforward extension class interpretation 
interpretation type vt denoted 
oc 
fsg fo 
tn vn vi ti de nition type interpretation speci es membership relationship ground values types 
vt 
value member 
members particular type elements interpretation type relationship de ned identi ers extended relate values 
new relationship denoted relationship call relationship speci relationship 
intuitively values speci ordering de ned relationship re ne general values higher set values regard relationship just relationship organises identi ers partially ordered set relationship forms partial ordering values :10.1.1.35.2950
formally relationship de ned follows 
values 
value speci value denoted holds 
oc 
vt fsg ftg 
vt bk bk aj bi aj bi 
vd vt vt 
de nition value poset subsumes notion partial ordering types de ned cardelli 
obtained restricting set values types vt type interpretation introduced de nition maps type set members structure strictly structure type 
remove constraint ning inherited interpretation type union interpretation type interpretations types speci type 
vt 
inherited interpretation denoted de ned vt ot 
de nition inherited interpretation types speci es instantiation relationship ground values types 
formally instantiation relationship de ned follows 
vd vt 
value instance type 
de nition relationship gives syntactical means checking relationship values 
correspondence syntactical de nition inherited interpretation function shown equivalence 
vt 
follows de nitions relationship inherited interpretation function 
de ne extended interpretation structural types de nition semantics qal variables variable required store ground value type 
extended interpretation type denoted includes values speci type respect relationship extended interpretation type includes ground values types 
vt 
extended interpretation denoted de ned fo tg 
objects data model qal distinguishes aspects objects 
object identi er called object identi er abbr 
oid distinguishes objects database 
second object value describes state 
basic object aspects linked means value assignment function de ned shortly 
formally object de ned pair id id 
distinguish primitive structured objects 
identity primitive object value 
example primitive object formal representation integer number 
identity value 
similarly object int int stands formal representation integer type 
section term int represents identi er 
value structured object previously de ned structured values 
example tuple structured object jim name jim age kids works cs term jim object identi er uniquely identi es object 
example presents individual object example give description entity represented object 
object person name string age int kids works address stands representation person 
examples distinction individual class objects 
individual object represents single concrete entity modelling environment 
value includes solely individual identi ers 
class object represents entity stands representation concept 
value class object includes class identi ers 
introduce value assignment function realises mapping identi ers values 
id 
value assignment function identi er id corresponding value id id object 
operations qal query algebra qal query algebra includes operations model operations declarative operations 
model operations access manipulate properties individual class objects represented constructs data model 
model operations derived concepts qal data model formalisation 
declarative operations qal express declarative queries databases 
model operations context assist declarative operations expressing database queries 
initial aims de ne query algebra serve basis declarative language included database programming language abbr 
dbpl 
ex amples include dbpl ode objectstore 
include programming constructs working object identi ers structures manipulation notion object 
reason de ne operations query algebra deal values 
rest section organised follows 
firstly database environment serves working example illustrating qal operations sub section 
model operations de ned section 
declarative operations qal section 
qal operations de ned formal manner 
functionality operations illustrated set examples 
working example examples sub sections conceptual schema describes simpli ed university environment 
simple language de nition classes types variables 
class de ned name set superclasses type 
name class speci ed keyword class 
specifying class name list superclasses follow keyword isa 
type class stated keyword type 
static type class speci ed value introduced previous section 
class department type dept name string head employee staff class course type title string instructor lecturer class project type proj name string descr string attend budget integer class person type name string age int address string family model operations class student isa person type courses class employee isa person type salary int manager employee projects dept department class lecturer isa employee class assistant isa lecturer class professor isa lecturer class student assistant isa assistant student model operations closely related concepts introduced data model formalisation previous section 
intended inquiring associations individual objects relationships individual objects class objects relationships class objects 
model operations de ned valuation operations extension operations comparison operations value poset closure operations partial ordering relationship operations nding nearest common general speci objects set objects equality operations 
operations examples queries written predicate calculus expressions 
valuation operator object identi er value object obtained value assignment function introduced section 
value assignment function realised query algebra operation val 
look example illustrate valuation function obtain properties individual class objects 
example rst expression example calculates value object identi er member class identi er student 
result second expression type class student 
note terms represent object identi ers 
val name jim age address ljubljana family fp courses fc student val name string age int address string family courses valuation function dot expression followed attribute name dot expression abbreviated operator common procedural programming languages 
instance expression age abbreviation expression val age 
extension operations section types class interpretations 
firstly ordinary interpretation ic class identi er maps set members 
operation denoted ext 
secondly inherited interpretation class identi er maps class identi er set instances 
interpretation denoted exts 
example example illustrates extension operations 
query class hierarchy insection 
result query set identi ers referring objects representing persons younger years student assistants 
fo person exts age student assistant extg comparison operations value poset simplest natural way express object properties relate partial ordering values partial ordering relationship introduced section 
comparison operations related relationship semantics de ned usual manner example call operations poset comparison operations 
poset comparison operations de ne subset partially ordered set values elements subset possess properties relate partial ordering values 
expression lecturer example de nes set identi ers composed class identi ers lecturer assistant professor student assistant including instances class identi ers 
illustrating poset comparison operations complex example operation maps individual identi er parent class identi er introduced 
operation denoted keyword class 
de ned class ic individual identi er ic denotes ordinary interpretation class identi er note individual identi er belongs exclusively interpretation class identi er 
example query example selects instances class identi er person speci class identi er lecturer time elements class identi er student assistant general class identi er 
fo person exts lecturer student assistant class ofg example poset comparison operations relate object identi ers 
example shows poset comparison operations relate structured values 
example query example selects values instances class person de ned attributes family manager 
value attribute family speci type 
similarly value attribute manager required speci class identi er lecturer 
query formulated follows 
fv person exts val family manager lecturer closure operations introduce transitive closure operations intended computing set subclass superclass identi ers class identi er respectively 
class identi er 
operations de ned follows 
fs oc cg fs oc sg example query example stated follows 
fo person exts class lecturer class student assistant transitive closure operations express exactly relationships class individual identi ers previously poset comparison operations 
expression class identi ers translated 
similar way expression translated comparison operations serve merely expressing relationships object identi ers result closure operation set identi ers query 
nearest common general speci objects operations de ned computing nearest common general speci identi ers set identi ers respect relationship operation computes nearest common general identi ers set identi ers respect relationship called lub set 
operation called glb set computes set nearest common speci identi ers set identi ers 
finding nearest common general speci identi ers set identi ers related upper bound greatest lower bound operation de ned lattices 
object identi ers ordered partially ordered set may upper bound identi er set object identi ers 
instance assume isa poset de ned working example extended class object phd student relationships hold phd student student phd student employee 
case nearest common general identi ers class identi ers phd student student assistant class identi ers student employee 
operation lub set formally de ned follows 
poset set lub set denoted lub set set properties 


de nition read follows 
firstly object identi ers resulting set related identi ers argument set relationship secondly exist identi er satis es rst condition speci object identi er set nearest common general identi ers 
note objects referenced identi ers result include properties common objects referenced identi ers set operation glb set similarly de ned 
set identi ers conditions true 
identi ers elements result set speci identi er argument set 
second result set includes general identi ers meet rst condition 
formal de nition glb set :10.1.1.35.2950
example example operation lub set 
query selects members class identi ers nearest common general identi ers set dent assistant 
fo assistant lub set extg query rst nds set class identi ers referring nearest general class objects include properties common class objects referred identi ers set dent assistant 
members class identi ers result query 
equality types equality operation de ned 
rst operation identity equality denoted symbol 
objects referenced identi ers identical identi ers denote value 
equality operation comparing structured values 
values identical identical components 
formal de nition identity equality isas follows 
denote values 
values identical written type ii holds 

oc denote value 
tn ai ai 
fsg exists mapping val val pair val val identity equality holds 
second equality operation value equality 
compares objects basis values 
distinguish types value equality deep equality local equality 
deep equality denoted de ned follows 
objects referenced object identi ers deep equal written values identical val val 
local equality operation denoted compares objects basis properties pertain particular class identi ed able compare objects local equality identi ers related class identi er relationships course imply parent class 
formal de nition local equality follows 
atr bethe function returns set attributes de ned class objects referenced identi ers locally equal class written holds 

atr identity equality holds 
example consider objects name tone age address family fp salary manager projects fg dept name age add family fp salary manager projects fg dept 
objects stances class employee 
objects value equal properties considered value equal considering local properties employee represented attributes salary manager projects dept declarative operations qal query algebra functional language 
declarative operation function manipulate set values called argument operation 
operations combined functional composition operator higher order functional operations form function expressions functions 
function expression query argument free variables appear expression bound values formally qal query function expression fn argument value represented constant dot operator represents functional composition fi qal operations 
operations set parameters depending operation values queries function expressions 
result query value 
set declarative operations comprises groups operations 
rst group includes generalisation basic operations relational algebra manipulation values 
group contains operations select union di er 
second group operations extends functionality restructuring operations nf algebra 
qal operations unnest group 
group qal operations set higher order functions evolved functional abiteboul beeri provide extended discussion functions queries algebras complex values 
de nitions terms function query taken 
query languages 
set includes qal operations apply tuple close apply 
rest section presents examples illustrating declarative operations expressing queries 
examples conceptual schema section 
variables queries de ned similar manner de nition variables programming language 
expression example speci es variable pset static type name string age int struct name string age int pset apply operation apply evaluate parameter function expression elements argument set 
operation formally de ned follows 
apply fv example example operation apply 
query maps set object identi ers referring instances class student set student names 
identity function id identify elements set students argument operation 
struct students struct names names students apply id name stated parameter operation apply function expression 
example illustrates case parameter operation apply apply operation 
provides tool accessing nested sets set sets 
example query rst maps set identi ers elements interpretation class identi er student set sets include identi ers refer courses studied students 
second step query replaces identi er nested sets identi er refers instructor particular course 
result query set sets nested set includes instructors courses studied student 
struct insts sets insts sets student ext 
apply id courses 
apply id apply id instructor selection operation select lter argument set values parameter predicate parameter predicate speci es properties selected values 
selection operation de ned follows select fo type result type input set objects 
parameter predicate boolean function 
predicate consist constants typed variables nested queries 
elements predicate related standard arithmetic relationships previously model operations set membership operation boolean operations 
illustrate operation select example 
example query uses operation select compute names students attend course graph theory 
struct stud names stud names student ext 
select id courses 
apply id title 
apply id name set operations algebra includes set operations union intersection di erence denoted union di er respectively 
formal de nition set operations 
union fo sg fo ug di er fo ug types sets ft ft respectively type resulting set lub upper bound operation 
example example illustrates operation union 
query computes union set instructors department named set students instructor department 
struct people people instructor ext 
select id dept dept name 
union student ext 
select id courses 
apply id instructor dept dept name close operation close de ned order provide user simple tool manipulation recursive data structures 
semantics de ned follows 
argument set contains instances type closure set computed parameter function expression result evaluation function instances type operation formally de ned follows 
close fg close fo class exts op depending cardinality result function expression op operation 
type result type input argument 
example query selects interpretation class employee set employees earn 
resulting set extended managers previously selected employees 
struct employee ext 
select id salary 
close id manager tuple operation tuple fn generalisation relational operation project 
set values argument ofthe operation tuple generated value set 
component newly created tuple speci ed corresponding tuple parameter consisting attribute name ai function expression fi 
function expression fi evaluated element argument set producing value serves value attribute ai resulting tuples 
operation tuple formally 
tuple fn fn sg type resulting value fn denotes type result function expression example query constructs tuple member class student 
tuple consists student name set tuples describe courses studied student 
nested tuples include titles courses names instructors 
struct sname string courses title string string students students student ext 
tuple sname id name courses id courses 
tuple title id title id instructor name group operation group group elements argument set 
function expressions evaluated element input set 
results evaluation grouped accordance result evaluation result operation group value structure column table 
values rst attribute denoted label distinct values function applied input set values 
values second attribute labelled groups results function application values share common value function operation group formally de ned follows 
group va vb va va vb vb va type resulting object form ft denotes type result function expression example example presents operation group group members class employee departments 
struct dept department emps depts groups depts groups employee ext 
group dept id dept emps id unnest di erent types restructuring operations unnest structured objects argument object 
operations producing structure set sets ii unnesting tuple component set values iii unnesting tuple component tuple 
operations de ned algebras usually denoted atten unnest tup collapse respectively 
qal algebra operations de ned frame single operation unnest 
operation di erent behaviour depending type object operation applied 
advantage de nition provides uniform view previously operations 
formal de nition qal operation unnest 
term de nition denotes set values function returns type value 
unnest fo si si si ai tn unnest ai ft ai ai aj aj ai bk sk tn unnest ai ft bl ai bl aj aj example example illustrate operation unnest 
rst query computes courses studied students 
second query computes set pairs composed object identi ers referring employees departments 
struct courses struct dept department emp employee depts courses student ext 
apply id courses 
unnest depts department ext 
tuple dept id emp id staff 
unnest emp apply able apply qal function expression nested component value functionality operation apply extended new parameter serves component selector 
operation apply identi es desired components applying aggregation path values elements argument set 
function evaluated identi ed components 
aggregation path speci ed sequence attributes separated dot operators 
evaluation aggregation path serves solely identi cation component restructure argument value 
manipulation activity results evaluation operation apply result argument function expression evaluation 
example illustrate operation apply 
example query lters nested components values describe departments 
nested components identi ed attribute staff 
ltered sets object identi ers include employees older 
struct dept name string head employee staff depts depts department ext 
apply id val 
apply staff select id age operation apply formally described set rules 
set values type ft value type aggregation path function expression atr function maps tuple structured type set attributes de ned operation apply de ned follows 
apply fo apply atr apply apply atr apply null apply apply null de nition read follows 
input argument operation set path empty rst rule applied 
argument operation set path empty ordinary operation apply evaluate function expression elements rule 
argument single value rule evaluate function expression selected component 
rule evaluate single argument value cases path empty 
illustrate operation apply example 
example example complex query data structure describing departments lters component identi ed path expression staff family selecting object identi ers speci class employee members class employee speci class 
note type argument value depts changed 
struct dept name string head employee staff emp name string address string projects family depts depts depts apply staff family select id employee prototype implementations apply show realised iterator recur accesses target nested components complex objects passes query tree realises parameter function expression apply nally assembles results parameter function expression 
words complex objects passed iterator apply individually decom posed assembled parameter function expression evaluated nested components 
important note operation apply require restructuring argument complex objects way restructured restructuring operations section accessing nested components complex objects previous de nition aggregation path operation apply access component complex values constructed set tuple constructors exception elements multilevel nested sets example elements nested ff gg 
able access elements components operation apply operation de ned 
operation included aggregation path ordinary attribute 
formally semantics de ned adding rule previous de nition operation apply 
restructuring operations querying nested components complex objects example 
apply fo apply seen rule function attribute analogous function operation apply 
argument operation set objects 
attribute follows operation argument query component aggregation path applied element argument set 
attribute demonstrated example 
example suppose variable named depts groups represents result grouping employees department value attribute groups set sets containing tuples describing employees 
query lters nested sets values attribute projects selecting projects budget higher 
struct dept name string groups ff emp name string projects gg depts groups depts groups dept groups apply groups projects id select id budget queries speci object oriented data models far operations qal query algebra 
section focus operations express queries speci object oriented databases 
types queries queries manipulate conceptual schemata ii queries manipulate complex objects 
queries manipulate conceptual schemata section 
queries classi ed kind objects manipulate type operation perform 
show comprehensive set examples model operations qal serve expressing queries inquire properties conceptual schemata relations individual objects conceptual schemata 
section queries manipulation complex objects classi ed depending type operation perform 
classi cation classi cation operations complex objects kim 
demonstrate qal operations express main types queries complex objects 
conceptual schemata querying databases rst de ne general types queries serve classi cation queries conceptual schemata 
firstly queries structure meaning data stored database explored answers consist elements conceptual schema called intensional queries 
secondly conventional queries elements extensional portion database manipulated answers consist solely extensional portion database referred extensional queries 
sub section study types queries conceptual schemata 
firstly intensional queries model operations inquiring reasoning properties con ceptual schemata 
second type queries sub section extensional queries model operations querying relationships individual objects elements database conceptual schemata 
intensional queries intensional queries allow browsing schema navigational facilities query language posing questions properties schema elements inquiring associations elements conceptual schema 
rst examples section intensional queries querying inheritance hierarchy classes 
third example presents inquiry structural properties classes 
example presents query searches common properties set objects 
semantics variables examples semantics intermediate results qal queries de ned extended interpretation types section 
atype interpretation includes values speci respect relationship interpretation type include ground values types 
example query selects set class identi ers properties 
firstly selected class identi ers subclasses class identi er person 
secondly selected identi ers speci equal class employee general equal class student assistant 
general queries poset comparison operations operations select subset class identi ers representing conceptual schema 
struct classes classes person 
select id employee id student assistant point give detailed explanation type result 
firstly operation takes argument class identi er person returns set class identi ers speci subclasses person 
type set 
natural interpretation de nition semantics types includes subsets set identi ers speci class identi er person 
secondly accordance de nition operation select type result operation select type argument 
example query retrieves classes top level class hierarchy query originally 
superclass object 
note role operator queries similar role extension operator 
struct top classes top classes object 
select id example query constructs tuple superclass class student assistant 
resulting tuples comprises class object identi er value class object 
static structure superclasses class student assistant returned query 
struct person ptype name string age int address string family stat struct stat struct student assistant 
tuple id ptype id val note extended interpretation de nition semantics types result query value speci type variable stat struct 
instance resulting set includes tuple student ptype name string age int address string family courses constructed class student 
example query nds common superclasses classes set assistant 
firstly operation lub set computes set closest common superclasses argument set class identi ers 
denote set secondly set extended class identi ers general class identi ers achieved applying operation class identi er set collapsing set sets operation unnest 
note operation lub set order assure resulting set includes class identi ers general equal student assistant professor 
struct common common assistant lub set 
apply id 
unnest relating extensional intensional portions database main characteristic extensional queries examples relate individual objects information represented conceptual schema 
rst example presents query relates individual objects inheritance hierarchy classes poset comparison operations operation class 
query second example presents poset comparison operations relate ground values structural types 
query example presents model operations generalise results extensional queries 
example section demonstrates local equality compare individual objects basis properties pertain relationships particular classes 
queries equivalent queries examples restated illustrate poset comparison operations context qal declarative operations 
example query uses poset comparison operations relate object identi ers 
retrieves members class identi ers speci equal class identi er lecturer time general equal class identi er student assistant 
struct lecturers lecturers person exts 
select id lecturer id class student assistant parent class identi er instance class identi er person computed operation class inorder select members class identi ers general equal student assistant 
parent class identi er need inorder determine instance element class identi er speci equal lecturer 
accordance de nition relationship section relationship id lecturer implies relationship id class lecturer vice versa 
example query demonstrates poset comparison operations relating tuple structured values 
returns instances type class person speci value family manager instructor 
struct name string age int address string family people people person exts 
apply id val 
select id family manager instructor result query set values type name string age int address string family extended interpretation types allows instance type value speci instances include addition attributes de ned attributes 
example query answers question parent classes em csd younger 
query rst lters set individual identi ers denoting employees applies operation class identi er ltered set 
re set class identi ers acts generalisation ltered set individual identi ers 
result generalised operation lub set computes closest common general class identi ers set identi ers 
struct classes classes employee exts 
select id dept csd id age 
apply id class example comparison individual objects inherited particular classes illustrated query 
query uses local equality de ned section select student assistants properties relate role employees equal properties employee referenced variable peter 
struct assistants struct employee peter assistants student assistant exts 
select id val employee peter val querying complex objects section qal operations manipulation complex objects 
pre sentation classi cation operations complex objects de ned kim 
types queries manipulate complex objects sections 
firstly set complex objects ltered specifying selection condition values simple complex attributes argument complex objects 
values complex attributes accessed path expressions nested queries 
queries second type retrieve selected attributes nested levels complex objects argument set 
queries late nested components complex objects 
qal operations restructuring complex objects demonstrated 
examples section complex object depts representing departments employees introduced example 
retrieving complete complex objects operation lters set complex objects retrieves entire complex object called object selection 
simple case selection condition values single valued attributes complex objects retrieving entire complex objects expressed operation select ordinary path expressions 
give example query 
example examples section variable depts representing de employees example 
query selects departments head member class professor speci class 
depts depts select id head class professor complex case retrieving complex objects expressing predicates nested components complex objects 
predicates speci ed nested queries 
query type example 
example query retrieves departments involved project identi ed object identi er pr 
depts depts select pr id staff 
apply id projects 
unnest projecting components complex objects second type queries retrieve complex objects similar nested relational operation project de ned 
queries type project selected attributes level nested levels argument complex objects 
realised qal operations tuple apply 
operation tuple projecting selected attributes 
realise complex operations arbitrary functional expressions specify components constructed tuples 
operation apply context access elements arbitrarily nested sets 
example query projects selected components complex object 
example set values describing departments query projects values attribute head values attributes describe personal information employees 
struct head employee staff emp name string address string family person depts personal depts personal depts tuple head id head staff id staff 
tuple emp name id emp name address id address family id family querying nested components complex objects section queries manipulate nested components argument complex objects retrieve complete complex objects changed target components 
queries manipulated operations approaches section 
rst approach commonly employed object algebras restructuring operations evolved nf algebras 
second approach querying complex objects higher order functional operations evolved functional languages 
queries manipulate nested components complex objects qal query algebra expressed operation apply 
example query manipulates nested components complex object express operations di erent approaches 
example rst query demonstrates operation apply querying nested com ponents complex objects 
complex objects set value variable depts manipulated ltering nested sets identi ed attribute family 
original set replaced set family members younger 
depts depts apply staff family id select id age simplest way express query previously stated rst type operations ordinary nf restructuring operations nest unnest de ned instance 
suppose relation de ned set attributes fa ang 
brief operation nest bk bi fa ang creates nested relation named includes values attributes bk 
operation unnest nested relation represented attribute fa ang 
query expressed follows 
depts depts unnest staff 
unnest family 
select id age 
nest family family 
nest staff emp name address projects family order express query operations previously stated second approach querying complex objects qal higher order functional operations tuple apply 
query equivalent query expressed follows 
depts depts tuple dept name id dept name head id head staff id staff 
tuple emp name id emp name address id address projects id projects family id family 
select id age restructuring complex objects section qal operations restructuring complex objects 
rst example demonstrates qal restructuring operations realise typical restructuring operations nf relations 
atype query uses restructuring operations operation apply realise restructuring nested components complex objects 
example examples section variable depts de ned example 
query rst attributes staff projects 
operation unnest twice order atten nested sets tuples values attribute staff see de nition operation unnest section 
rst operation unnest nested sets tuples second unnest collapses nested tuples 
query groups names employees departments projects participate 
struct project project group emp name string dept name string proj groups proj groups depts unnest staff 
unnest staff 
unnest projects 
group project id projects group id tuple emp id emp name dept id dept name parameter function expression operation apply includes restructuring operation complex object restructured component determined aggregation path 
way restructuring operation applied nested component complex object 
restructuring operation tuple parameter operation apply illustrated example 
example set complex objects describing departments query rst identi es components include set identi ers referring projects replaces occurrence ofan oid tuple contains name budget project 
struct dept name string head employee staff emp name string address string projects proj name string budget int family depts projects depts projects depts apply staff projects id tuple proj name id proj name budget id budget prototype implementations prototypes qal query algebra developed 
rst prototype implemented sicstus prolog 
prototype serves experimental environment studying theoretical aspects object oriented data models object algebras 
second prototype implemented extension database programming language 
studying problems qal integration database programming language 
prototypes address problems cient implementation query optimisation 
aspects prolog implementations sub sections 
prolog prototype aimed study previously theoretical aspects qal algebra prototype exible able experiment data model operations qal 
prolog prototype tied particular type system subject similar constraint example second prototype extends database programming language constrained etype system 
basic motives prolog implementation qal study operations cient manipulation complex objects ii implementation substitutability principle context query language iii optimisation queries include model operations iv implementation static type checking qal queries 
prototype comprises simple user interface module query evaluation module storage man ager module 
query evaluator consists query interpreter query optimisation type checking sub modules 
query interpreter designed similarly query execution sub system postgres extended relational database system pp 
query optimiser currently development 
current version prototype implemented ad hoc optimisation rules necessary speed evaluation critical types nested queries 
static type checking implemented provide user diagnostics type errors 
type checking algorithm ideas cardelli 
qal storage manager implemented top postgres dbms 
external representation objects subset structural part logic 
detailed description prototype implementation 
extending database programming language basic intention second prototype implementation study qal integration database programming language abbr 
dbpl provides programming constructs manipulation collections database objects 
integration qal dbpl extends functionality dbpl adding facilities declarative manipulation database objects 
problems arise integration procedural programming languages declarative query languages consequences di erent syntax semantics languages 
referred impedance mismatch problem 
extension dbpl constructs query language qal realised extending semantics dot expressions commonly accessing record components procedural programming languages programming language 
ordinary dot expressions extended subsume functional queries expressed qal query algebra 
experience functional nature qal comprehensible operations language suitable integration object oriented programming language 
integration language qal query algebra implemented preprocessor realised extension existing parser 
preprocessor written standard unix tools yacc lex 
parser extended recognise constructs ii compile qal expressions code 
currently implemented features query language support class extensions qal sets operation apply restricted evaluation class data members member functions operation select 
sets implemented class template setof 
generic type legal 
extended concept class extension 
class extension set object identi ers refer class members 
class extensions obey restrictions de ned es ii class extension persistent set iii include persistent instances iv instance object element single class extension 
operations ext exts de ned section accessing class extensions 
example example presents operation select language extended constructs qal query algebra 
operation select lters set selecting persons younger value variable max age ljubljana 
variable denotes implicit variable iterates argument set operation select 
int max age setof person setof person ps select age max age works institution ext 
select address ljubljana related database algebras evolved relational database algebra proposed codd 
algebras include operations relational algebra includes ability compute selection standard set operations projection cartesian product 
natural algebraic structures algebras subsume extend relations 
qal algebra relational algebra operations generalised able manipulate objects retained original semantics 
qal operation tuple instance generalises relational operation project 
hand qal set operations union de ned relational algebra 
qal algebra uenced early functional query language proposed class extensions de ned ordinary classes 
buneman frankel descendants gdl fdl functional database programming language fad 
algebra nature functional language operations combined functional composition higher order functions form language expressions 
algebraic structures manipulated entities represented functional data model 
qal algebra treated generalisation manipulation objects 
subsumes operations operations extension restriction selection composition aswell extensions provided query languages gdl fdl 
qal algebra closely related query algebra originally proposed shaw zdonik 
algebra basis excess equal algebra query optimiser algebra aqua 
qal shares similarities algebras basic operations select tuple set manipulation operations di ers operations restructuring complex objects querying nested components complex objects 
addition qal includes rich set primitive operations serve querying database schemata 
sub sections approaches algebras query languages problems addressed 
existing approaches querying conceptual schemata 
existing operations querying nested components complex objects overviewed 
schema querying databases problem querying conceptual schema object oriented databases knowledge addressed database algebras query languages include facilities manipulate schema 
respect qal signi cantly uenced logic proposed kifer lausen wu 
logic declarative language incorporates constructs object oriented data model frame knowledge representation languages logic 
possibility querying data schema portions database emerged frame knowledge representation languages language constructs representation schema data portions database 
brief logic provides possibilities querying database schema 
firstly relationships instances classes isa hierarchy database objects logic queried prede ned predicates testing class membership subclass relationship 
secondly logic provides facilities explore properties individual class objects treating attributes methods objects manipulated similar manner database objects 
allows things inquiring types non trivial relationships objects analogy similarity relationships 
similarly logic query language includes set constructs querying database schema 
queries include variables range class objects 
classes queried basis properties properties instances 
operation subclassof context inquire relationships classes inheritance hierarchy classes 
similar manner logic treats attributes methods objects queried user inquire properties individual class objects 
qal uenced papazoglou 
suggests set high level operations expressing intensional queries aid user understanding meaning stored data 
proposed operations express types queries relate individual objects classes browse isa hierarchy classes inquire class properties compute associations classes related isa relationship locate objects similarity basis inquire dynamic evolution objects represented roles 
query language closely related qal query algebra query language fdm 
fdm functional database model abbr 
fdm 
extends fdm incorporating language constructs object oriented database model 
fdm implemented prolog programming language 
database comprises data metadata entities 
metadata entity class function example described set prede ned predicates 
prolog predicates serve interface database query language fdm implemented predicates provide uniform access data metadata entities 
facilities allow querying properties metadata entities types relationships 
operations querying database schema provided query languages object oriented databases management systems query languages orion dbms postgres objectstore brie overviewed 
query languages allow class extensions queries function maps class set members set instances 
orion provides set operations modify database schema di erent levels modi cation inheritance class properties methods inheritance hierarchy 
include additional constructs allow querying conceptual schema relationships data schema parts database 
bertino proposes operator class returns class object run time 
resulting class queries 
odmg standard includes set operations accessing properties metadata 
information obtained type set operations de ned type set attributes set supertypes subtypes extent type 
odmg standard provide uniform access intensional extensional levels oo database way proposed model operations 
model operations expressed odmg types 
operations include poset comparison operations de ned structured values operations lub set glb set 
querying complex objects base discussion operations manipulation complex objects classi cation operations complex objects introduced kim 
operations querying complex objects classi ed basic advanced operations 
basic operations include retrieval complete complex objects ii projection selected attribute values iii restriction predicates nested components complex objects iv types object update operation insertion deletion modi cation complex objects 
advanced operations complex objects complex join operation allows joining complex objects di erent nesting levels ii recursive queries recursively structured hierarchies complex objects manipulated 
operations discussed kim closely related operations nested relational algebras 
basic types operations realised operations nf algebras algebraic structures restricted nested relations 
nf restructuring operations querying nested components complex objects computationally expensive requires reconstruction complex object manipulated component 
hand nf algebra verso introduced includes expressive operations provide means realise complex forms selection projection join operations complex objects 
join operation verso instance allows expression forms complex join kim classi cation 
basic queries complex objects de ned kim expressed operations object algebras 
discussed section algebras include operations evolved nf algebras operations derived functional query languages 
rst type operation querying complex objects includes variants nf operations nest unnest serve creating unnesting component relations argument complex object 
second type operation querying complex object includes operations evolved functional operations apply tuple construction 
types operations referred re structuring operations 
restructuring operations suitable expressing queries restructure complex objects extract components complex objects 
focus queries manipulate nested components complex objects 
problems appear restructuring operations querying nested components complex objects follows 
firstly shown roth korth restructuring operations nest unnest inverse general 
order safely restructure component relations additional constraints satis ed complex objects information may lost restructuring target components 
particular nf relations satisfy partitioned normal form strict conditions required operation nest retain partitioned normal form order safely restructured 
possibility retaining information unnested groups objects index unnested tuples 
second problem restructuring operations relates reciprocity property operations create atten sets sets operations group atten de ned instance 
operations inverse sense operations nest unnest 
possible restore original state attened set sets additional technique store information groupings objects 
evaluation query includes sequence restructuring operations computationally expensive reconstructs complex objects target nested components may require creation sequence temporal objects 
contrast approach querying nested components complex objects restructuring op erations operation apply require evaluation sequence restructuring operations argument complex objects order access theirs nested components 
implemented iterator accesses nested components complex objects passes evaluation parameter function apply query sub tree realises parameter function nally collects assembles results parameter function 
way stated problems appear restructuring operations access nested components complex objects avoided 
approach querying complex objects treated stated second approach querying complex objects including operations evolved functional languages suggested abiteboul beeri complex object algebra abbr 
coa 
operations coa express basic operations complex objects de ned kim 
algebra introduces operation replace provide facilities restructure complex objects apply queries nested structures complex objects 
operation replace generalisation known functional operation apply 
realises application parameter query set objects 
parameter query replace operation speci ed functional notation called replace speci cations subsumes de nable queries coa 
addition notation allows queries structured arbitrary set tuple constructors 
way replace parameter forms structured query applied set values restructure query complex objects 
recursive algebras proposed colby liu introduce approach querying complex objects 
algebras evolved nested relational algebras 
operations algebras de ned recursively operations recursively applied components argument complex object 
recursive operation includes list directs evaluation operations specifying components complex objects evaluation operation recursively transferred 
operations recursive algebras related qal operation apply provide means directing evaluation operations nested components argument complex object 
qal query algebra single operation apply serves navigator directing evaluation operations recursive algebras operations restructuring operations include list directs evaluation 
concluding remarks qal query algebra 
qal includes set simple operations referred model operations intended inquiring reasoning properties individual class objects 
salient feature model operations close relationship underlying data model formalisation uni es representation intensional extensional parts database 
consequence relationship data model qal model operations provide uniform access properties individual class objects 
serve means expressing intensional queries object oriented databases extensional queries refer properties conceptual schema 
declarative operations qal query algebra querying database 
evolved operations relational algebra nf algebras functional query languages 
set declarative operations includes operation apply querying nested components complex objects 
operation generalises known operation apply adding new parameter speci es path nested component parameter query evaluated 
semantics simple comprehensible serve basis cient implementation queries manipulate nested components complex objects 
list tasks remain done completed qal query algebra 
important 
firstly algebraic properties newly proposed operations studied order utilised query optimisation 
secondly study expressive power qal currently way 
addressing problem studying relationships qal database algebras logic languages 
current orts qal implementation show serve extend database programming languages declarative facilities 
cient implementation integration qal dbpl remains completed 
acknowledgments authors wish anonymous referees helpful comments draft versions 
particular referee gave constructive suggestions signi cantly improved readability quality 
prof mike papazoglou advise support early stages prototype qal gnu dbpl prof michael kifer suggestions draft version 
supported republic slovenia ministry science technology 
abiteboul bidoit non normal form relations algebra allowing data restructuring journal comp 
system science pp 

abiteboul beeri power languages manipulation complex objects verso report inria france dec 
abiteboul kanellakis object identity query language primitive proc 
acm conf 
management data pp 

agrawal gehani ode object database environment language data model proc 
acm conf 
management data pp 

database programming languages approach proc 
acm conf 
management data pp 

atkinson object oriented database systems manifesto proc 
int conf deductive object oriented databases north holland pp 

backus programming liberated von neumann style 
functional style algebra programs communications acm august pp 

cluet delobel query language object oriented database system proc 
nd workshop database programming languages pp 

batory leung wise implementation concepts extensible data model data language acm trans 
database systems sept pp 

bertino object oriented query languages notion issues ieee trans 
knowledge data engineering june pp 

buneman frankel functional query language proc 
acm conf 
manage ment data pp 

generation database systems communications acm 
cardelli semantic multiple inheritance information computation pp 

cattell editor object database standard odmg morgan kaufmann publishers 
ceri advanced database system complex applications ieee software july pp 

codd relational model data large shared data banks communications acm june pp 

colby algebra query optimization nested relations proc 
acm conf 
management data pp 

valduriez fad data intensive applications ieee trans 
knowledge data engineering feb pp 

davis documentation brown university 
deux story ieee trans 
knowledge data engineering march pp 

gnu manual design programming language exodus project documents university wisconsin madison 
gray prolog access metadata object oriented database practical application prolog 
graefe query evaluation techniques large databases acm comp 
surveys vol june pp 

kifer lausen logic higher order language reasoning objects inheritance scheme proc 
acm conf 
management data pp 

kifer kim sagiv querying object oriented databases proc 
acm conf 
manage ment data pp 

kifer lausen wu logical foundations object oriented frame languages jour nal acm july pp 

kim 
chou banerjee operations implementation complex objects ieee trans 
software engineering july pp 

kim features orion object oriented database system th chapter object oriented concepts databases applications kim ed sept pp 

kuper vardi new approach database logic proc 
acm conf 
management data pp 

richard velez object oriented data model proc 
acm conf 
management data pp 

richard database programming language proc 
th conf 
large databases pp 

leung aqua data model algebra technical report 
cs brown uni versity march 
liu formal approach structure algebra communications complex objects ph thesis tilburg university 
choi 
batory object oriented data language ieee trans 
software engineering nov pp 

mitchell extensible query processing object oriented database ph thesis brown uni versity 
orenstein query processing objectstore database system proc 
acm conf 
management data pp 

objectstore user guide release objectstore design 
papazoglou unravelling semantics conceptual schemas communications acm sept 
peyton jones implementation functional programming languages prentice hall 
postgres documents computer science department university california berkeley 
roth korth silberschatz extended algebra calculus non nf relational databases acm trans 
database systems pp 

query language complex database objects ph thesis university ljubljana csd technical report jozef stefan institute csd tr jun 
tari querying conceptual schemata object oriented databases proc 
database expert systems applications workshop ieee comp 
society pp 

tari querying objects complex static structure proc 
int 
conf 
flexible query answering systems roskilde denmark appear lecture notes arti cial intelligence 
tari unifying schema instance levels object oriented database csd technical report jozef stefan institute may preparation 
scholl 
schek synthesis complex objects object orientation oo databases analysis design construction ds meersman kent khosla eds elsevier science publishers 
shaw zdonik query algebra object oriented databases proc 
ieee conf 
data engineering pp 

shipman functional data model data language acm trans 
database systems march pp 

sicstus prolog users manual swedish institute computer science october 
su modelling integrated manufacturing data sam ieee computer jan pp 

su gou lam association algebra mathematical foundation object oriented databases ieee trans 
knowledge data engineering oct pp 


kuo approach recursive retrieval problem relational databases communications acm feb pp 

vance object oriented query algebra tech 
report cs dept comp 
science eng oregon graduate institute jan 
dewitt algebraic support complex objects arrays identity proc 
acm conf 
management data pp 

algebras object oriented query languages ph thesis technical report university wisconsin july 

