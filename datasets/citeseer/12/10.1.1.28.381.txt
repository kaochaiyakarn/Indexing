appear ipps predicting queue times space sharing parallel computers allen downey statistical techniques predicting queue times experienced jobs submitted space sharing parallel machine come served fcfs scheduling 
apply techniques trace data intel paragon san diego supercomputer center ibm sp cornell theory center 
show possible predict queue times accuracy acceptable intended applications 
coefficient correlation predicted queue times actual queue times simulated schedules 
space sharing parallel computers useful able predict long submitted job queued processors allocated 
applications predictions load metrics provide measure load concrete abstractions load average allowing users decisions jobs run run size problems solve allotted time 
internal resource selection allow malleable parallel jobs jobs require specific number processors run range cluster sizes choose cluster size appropriate current state machine 
type allocation called adaptive partitioning 
external resource selection allow distributed jobs choose various computing resources network quality service expect receive host 
part project computer science division university california berkeley ca san diego supercomputer center box san diego ca 
supported nsf asc advanced research projects agency ito distributed object computation testbed arpa order 
issued esc ens contract 
email downey sdsc edu www sdsc edu downey planning implement techniques proposed support resource selection distributed heterogeneous environment 
different applications predictions different times external resource selection need predict entire queue time arrival execution internal resource selection consider time arrival head queue execution called wait time 
focus internal resource selection making predictions jobs arrive head queue 
extend techniques include entire time job spends queue apply predictions external resource selection 
internal resource selection large parallel computers usually shared users 
mechanisms support sharing space sharing machine may partitioned sets processors clusters 
cluster allocated single job allowed run completion rtc 
time sharing job may allocated cluster case job runs quantum time preempted allow jobs run 
advantages space sharing dedicated system image cluster behaves small dedicated system low overheads preemption expensive high parallel efficiencies jobs tend run fewer processors 
disadvantage rtc scheduling allows short jobs sit queue waiting long jobs resulting poor average turnaround time 
systems studying intel paragon san diego supercomputer center ibm sp cornell theory center configured space sharing systems rtc scheduling 
programs running systems malleable meaning run range cluster sizes 
jobs change cluster sizes dynamically execution yield allocate processors 
context internal resource selection means choosing cluster size job begins execution 
job arrives head queue may allocate processors currently free may wait additional processors available 
chooses wait assume jobs queue wait 
words assume served fcfs queueing 
relax assumption address general queueing policies 
summary model computation ffl timesharing 
jobs allocate processors exclusively preempted complete exceed allocated time 
ffl jobs system malleable execution change cluster sizes dynamically 
ffl free processors job waits come serve fcfs queue 
ffl jobs different partitions independent 
consider communication interference 
approach internal resource selection allow job arrives head queue choose cluster size minimizes turnaround time sum queue time run time 
decision job know run time range cluster sizes predict queue time cluster size available 
develop speedup model predicts run times techniques predicting queue times 
predictions steps develop conditional lifetime model predicts remaining lifetime job current age 
aggregate job job predictions queue time prediction 
overview section describes related 
section presents distribution lifetimes jobs intel paragon sdsc proposes conditional lifetime model clm predict remaining lifetimes jobs 
section clm predict wait time cluster size 
section describes trace driven simulator evaluate techniques presents results 
section apply proposed techniques environment ibm sp cornell theory center 
section summarizes findings describes plan continuing 
related predict job duration useful know distribution lifetimes jobs 
sequential jobs unix workstations studies reported distributions lifetimes functional form cdf tg gamma min parameter varies workload workload 
approximately median remaining lifetime job equal current age 
property known past repeats heuristic 
section show distribution lifetimes parallel scientific applications fit model past repeats heuristic apply environments 
previous studies reported lifetime distributions parallel scientific applications discuss shape lifetime distribution develop workload model 
describe workload ibm sp cornell theory center 
moore wan describe workload scheduling policy intel paragon san diego supercomputer center distribution lifetimes batch jobs appears fit uniform log model proposed jobs hours duration 
feitelson nitzberg describe workload intel ipsc nasa ames 
compare workloads sdsc nasa ames 
iyer information past executions program predict lifetimes unix processes file memory 
atallah propose idea choosing cluster size minimizes turnaround time queue time plus run time job 
target system timesharing network workstations consider problem contention jobs system problem predicting time cluster available 
raise question local optimization greedy users affects system performance 
address question allow job choose cluster size minimizes expected turnaround time find application centric strategy leads global performance better proposed system centric strategies 
conditional lifetime model clm jobs submitted batch partition node intel paragon sdsc 
shows distribution lifetimes jobs 
longest shortest jobs distribution nearly straight logarithmic axis words distribution job lifetimes fraction jobs duration job lifetime jobs hr hrs 
distribution lifetimes batch jobs submitted intel paragon sdsc 
gray line shows squares fit observed data intercept fi slope fi 
logs lifetimes distributed uniformly 
know theoretical reason lifetimes uniform log distribution take advantage observation fitting straight line approximation observed distribution 
approximation observed values simplifies calculation conditional distribution lifetimes equation 
calculated straight line approximation leastsquares regression omitting longest shortest jobs 
value fit indicating linear approximation 
model distribution lifetimes cdf tg fi fi ln cdf cumulative function random variable representing lifetime job fi fi parameters model intercept slope 
bounded min gammafi fi max gammafi fi estimated parameters min seconds max hours 
model calculate distribution lifetimes conditioned current age job gamma cdf ag gamma cdf gamma cdf gamma fi gamma fi ln gamma fi gamma fi ln find median lifetime job current age set conditional cdf solve median remaining lifetime vs age actual values model predictions age hr hrs hr hrs 
median remaining lifetime job function current age 
gray line shows values predicted model estimated parameters 
cdf gamma fi gamma fi ln gamma fi gamma fi ln ln gamma fi fi ln substituting max gammafi fi express median lifetime max delta distribution obey past repeats heuristic median remaining lifetime increases slowly age max median remaining lifetime drops quickly 
shows median remaining lifetime calculated model observed data 
proposed model fits data ages hours 
longer lifetimes distribution lifetimes diverges model 
remaining lifetimes old jobs decline predicted appear increase 
difficult generalize behavior jobs lifetimes greater hours distribution fit model 
average remaining lifetime job max gamma ln max gamma ln behaves similarly increases slowly age drops sharply age approaches limit 
model accurate jobs lifetimes greater hours distribution jobs difficult characterize need careful apply model old jobs 
jobs time limit hours jobs allowed run hours longer special permission 
time limits hours account spikes curve 
distribution job lifetimes fraction jobs duration job lifetime short jobs medium jobs long jobs hr hrs 
distribution lifetimes parallel batch jobs submitted intel paragon sdsc broken queue 
gray lines show squares fit queue 
additional information jobs jobs divided classes basis priori information distribution lifetimes differs classes possible improve accuracy predictions estimating different workload parameters class 
depending environment jobs partitioned executable name user name declared resource requirements 
queueing systems ask users provide estimates resource requirements jobs number processors memory requirements estimated run times 
intel paragon sdsc users declare resource requirements jobs implicitly selection queues 
jobs submitted queues specify maximum cluster size job powers length time run short medium long 
surprisingly distributions short medium long queues significantly different 
differences distributions indicate users information expected run times jobs hand information far perfect 
considerable overlap different queues jobs submitted turns wrong queue 
example jobs short queue run longer median medium queue jobs medium queue shorter median short queue 
obvious queue information predict remaining lifetime job 
technique proposing different conditional distribution queue effective way information provided user suffering greatly information turns wrong 
technique previous section discarding longest shortest group fit line lifetime distribution queue 
table shows resulting coefficients 
treat sequential jobs distinct class distribution lifetimes significantly different parallel jobs 
long queue goodness fit metric quite long queue surprising distribution obviously straight line 
distribution long jobs bimodal roughly run seconds hours remaining run hours 
section extend model address poor fit estimated parameters table fi fi sequential short medium long calculating distribution queue times state system number jobs currently running ages cluster sizes clm estimate wait time cluster size available 
describe state machine time arrival follows jobs running ages cluster sizes words ith job running processors seconds 
predict time additional processors available gamma free free number free processors 
sections ways estimate median mean 
values predict wait times trace driven simulation 
predictor median calculate median exactly enumerating possible outcomes jobs complete running calculating probability request satisfied time find median queue time setting probability solving approach feasible jobs system leads approximation fast compute turns sufficiently accurate intended purposes 
represent outcome bit vector bit indicates ith job running indicates ith job completed time assume independence jobs system probability outcome product probabilities event completion job probability events come clm 
cdf delta gamma gamma cdf delta outcome number free processors sum processors freed job completes delta time probability number free processors requested cluster size sum probabilities outcomes satisfy request rff find median value setting rff solving course number possible outcomes time calculation increases exponentially feasible approach running jobs 
small case jobs running system single satisfy request complete 
case probability request satisfied time dominated probability complete 
words chance queue time processors exceed time approximately equal probability complete rff ijn gamma cdf calculation approximately correct ignores possibility small jobs complete satisfy request 
expect predictor inaccurate small jobs running system single satisfy request 
section presents alternative predictor expect accurate case 
predictor mean job running know time complete free processors 
age job clm calculate probability completed time approximate behavior model processors continuous discrete resource jobs release gradually execute 
case imagine clm indicates fraction job processors available time example job running processors minutes chance completing minutes releasing processors 
approximation behavior predict job release processors minutes 
predict number free processors time sum processors released job delta cdf estimate expected mean queue time set solve trace driven simulator evaluate accuracy predictors ran trace driven simulations workloads intel paragon san diego supercomputer center 
job arrived head queue calculated predictors observed state system compared predictions queue times followed 
obtained trace jobs submitted batch partition paragon january december 
arrival times cluster sizes durations jobs simulated execution parallel computer nodes size batch partition sdsc 
data simulator available sdsc edu downey predict 
table shows average median lifetimes cluster sizes jobs 
cv coefficient variation ratio standard deviation mean 
th th percentiles shown 
table avg cv median lifetime cluster size jobs traces malleable system point view 
users choose cluster size job system allocate fewer allocate 
arrival times jobs taken traces schedule simulator differs actual schedule executed paragon ffl paragon sdsc assigns different priorities queue schedules higher priority jobs 
simulator uses strict fcfs scheduling 
ffl real scheduler allocates processors modified buddy system power partition sizes jobs allocated contiguous set nodes 
simulator allocates jobs regard contiguity 
ffl nodes mb memory fat nodes mb 
reality jobs run fat nodes simulator ignores distinction 
ffl year size batch partition changed times simulator held number processors constant 
evaluating predictors actual queue times schedule generated simulator trace data 
simulations jobs arrive head queue find free processors execution immediately 
jobs spend time head queue predictions behalf 
system malleable jobs cluster sizes determined priori chosen state system number free processors expected queue times 
time job arrives head queue predict queue time range cluster sizes choose best requirements job minimizing expected turnaround time 
results predictor job reaches head queue free processors satisfy request calculate number additional processors required 
consider number jobs system cluster sizes greater jobs satisfy request complete 
simulations number processors required tended small number potential large time 
circumstances expect predictor perform 
table shows average median values number 
table average median times job waited head queue times jobs running satisfy request 
circumstances predictor prediction 
remaining predictions shown scatter plot predicted times axis actual queue times axis 
clear correlation predicted actual values coefficient correlation cc 
solid line shows mean actual queue times column broken line shows median 
predicted values seconds seconds mean median values closely follow degree line indicating predictions accurate average 
predicted values greater seconds predictions tend high 
bias reflects inherent conservative nature approximation predictor ignores possibility multiple jobs completing order fulfill request 
jobs satisfy request single predictions tend high 
range median mean similar indicating distribution actual queue times column roughly symmetric 
words prediction actual queue time equally higher lower amount 
results predictor small jobs system expect predictor provide accurate estimated queue times 
shows scatter plot predictions actual values 
general correlation predictor cc 
short queue times predicted values tend low 
reflects optimism approximation having wait job complete release processors approximation assumption jobs constantly giving processors 
small values predictor tends guess low 
combining predictors predictors perform different circumstances natural combine accurate 
comparing values cc various ranges find predictor best actual vs predicted queue times predictor predicted actual hr hrs hr hrs actual vs predicted queue times predictor predicted actual hr hrs hr hrs 
scatterplot actual queue times predictions calculated predictor predictor white line shows identity function perfect predictor 
solid line shows average actual queue times column 
broken line shows median 
distribution process lifetimes fraction processes duration process lifetime single stage model stage model hr hrs 
distribution jobs submitted long queue intel paragon sdsc 
single stage model 
stage model chosen hand fit observed data 
small values predictor best larger values 
predictor predictor greater get combined predictor accurate predictor cc 
improved model long jobs section observed uniform log distribution model fit distribution jobs long queue 
section develop alternate model fits distribution evaluate effect accuracy predictors 
uniform log model extended multistage model fits piecewise linear distribution 
example observed distribution appears contain classes job short seconds hours long hours 
divided distribution stages estimated parameters eye 
shows observed distribution improved model 
clearly stage model better fit 
calculating clm multi stage model slightly complicated single stage model 
age job bayes theorem calculate probability job belongs class 
conditional distribution cdf ag delta stage ig distribution job lifetimes ctc sp fraction jobs duration job lifetime short medium long hr hrs 
distribution lifetimes batch jobs submitted ibm sp ctc broken queue submitted 
enumerates stages model 
stage calculate conditional distribution equation parameters stage 
improved model significantly improve performance predictor 
conclude ill fitting model impair predictors se bimodal shape distribution root problem 
bimodal distribution indicates classes jobs users failing distinguish 
multistage model fits distribution recover lost information improve predictions 
way improve predictions solicit better information users 
place time know theoretical reason distribution lifetimes fit uniform log model propose natural ask techniques applicable environments 
answer question obtained data ibm sp cornell theory center including submission times execution times cluster sizes jobs submitted month interval june december 
divided jobs groups short medium long name queue submitted 
shows distribution lifetimes groups 
jobs paragon sdsc uniform log model fits short medium groups long group 
values fits somewhat better board paragon data table fi fi short medium long relationships curves jobs paragon 
paragon estimated lines nearly parallel intercept varied group group 
sp lines nearly intercept slopes vary 
observation suggests distributions vary environment environment proposed model able span range behavior 
submitted trace data sp simulator paragon data 
change simulator plug estimated parameters table 
jobs trace received predictions predictor received predictions predictor performance predictors follows pattern sdsc data predictor best small values predictor large 
cc combined predictor significantly better predictions sdsc data cc 
reason improvement sp bigger machine nodes vs paragon average cluster size jobs tended smaller vs paragon 
tend jobs system time 
predictions aggregate behavior jobs expect improve number jobs system increases 
reason improvement users ctc appear providing better run time estimates users sdsc overlap distributions different queues distribution lifetimes long jobs bimodal 
time far cheating trace data estimate distribution parameters estimated parameters inputs prediction algorithm 
course real system luxury knowing ahead time exact distribution lifetimes jobs submitted 
assuming distributions change drastically time possible accurate predictions parameters estimated distributions lifetimes month intervals fraction processes duration process lifetime hr hrs 
distribution lifetimes intel paragon sdsc month intervals january may 
accounting data 
test claim divided trace data intervals months long 
interval distribution lifetimes broken queue name section estimated parameters distribution 
shows distribution lifetimes interval 
clear distribution changes time year trend longer run times 
report similar trend ibm sp ctc trends may indicate maturing workload users submit fewer test runs production runs 
table shows median lifetime jobs submitted queue seconds 
lifetimes sequential jobs consistent time short jobs getting shorter medium long jobs getting longer 
table sequential short medium long jobs evaluate impact obsolete parameters accuracy predictors simulated trace calculated median values estimating parameters distribution calculating median model distribution 
estimates robust conventional medians values similar show trends 
intervals may april interval parameters estimated previous interval 
feel realistic simulation system updates parameters months accounting data previous months 
general performance predictors optimistically accurate parameters cc predictor predictor combined predictor 
difference accuracy large suggesting predictors greatly impaired parameters obsolete 
expect practical system sufficient estimate new parameters occasionally monthly 
workload distribution lifetimes medium long jobs increasingly bimodal similar 
indicates classes jobs queues users failing distinguish choose queue 
quality information provided users declines find predictions accurate 
mitigate effect part additional information jobs create classes 
example cluster size requested memory size correlated run time 
create set classes cross product sets attributes limit number classes need jobs class get estimate class distribution 
way improve information content distributions change interface queueing system provide better feedback run times users jobs solicit better estimates 
ffl proposed workload model batch jobs space sharing parallel computers distribution lifetimes 
show proposed model captures behavior real workloads different environments 
model generate synthetic workloads simulating evaluating scheduling policies similar environments 
ffl workload model develop statistical techniques predicting queue times waiting jobs 
proposed techniques worked simulations environments tested 
techniques useful applications especially selection cluster sizes space sharing parallel computers 
ffl scheduling policies supercomputing environments depend information provided users resource requirements jobs 
observe information unreliable show proposed techniques able distill information useful way 
algorithms predicting wait time job reaches head queue 
addressed question long take get 
predictor extended natural way predict behavior jobs queue predict entire queue time new arrival 
implemented extension seen promising preliminary results 
predictor extended handle non fcfs scheduling strategies priority scheme sdsc 
part distributed object computation testbed project implementing persistent legion object monitors load space sharing parallel computers answers queries regarding expected queue times 
application level schedulers apples information external resource selection 
george sdsc steven ctc help accounting data 
grateful paul hilfinger berkeley reagan moore sdsc jennifer schopf rich wolski san diego university milan reading drafts providing valuable comments 
atallah black siegel 
models algorithms compute intensive tasks network workstations 
journal parallel distributed computing dec 
berman wolski 
apples home page 
ucsd edu groups apples apples html 
university california san diego 
iyer 
predictability process resource usage measurement study unix 
ieee transactions software engineering december 
downey 
model speedup parallel programs 
technical report csd university california berkeley 
downey 
queue time predictions processor allocation 
technical report csd university california berkeley 
appear job scheduling strategies parallel programming workshop ipps 
feitelson nitzberg 
job characteristics production parallel scientific workload nasa ames ipsc 
feitelson rudolph editors job scheduling strategies parallel processing springerverlag lncs vol pages april 
french grimshaw wulf weaver reynolds jr legion home page www cs virginia edu mentat legion legion html 
university virginia 
harchol balter downey 
exploiting process lifetime distributions dynamic load balancing 
proceedings acm sigmetrics conference measurement modeling computer systems pages may 

personal correspondence 


workload evolution cornell theory center ibm sp 
feitelson rudolph editors job scheduling strategies parallel processing springerverlag lncs vol pages april 
schneider donnell 
analysis early workload cornell theory center ibm sp 
technical report tr cornell theory center january 
leland ott 
load balancing heuristics process behavior 
proceedings performance acm sigmetrics volume pages 
moore 
home page www sdsc edu 
san diego supercomputer center 
moore 
paragon throughput analysis 
proceedings intel supercomputer users group pages june 
wan moore 
batch scheduler intel paragon non contiguous node allocation algorithm 
feitelson rudolph editors job scheduling strategies parallel processing springer verlag lncs vol pages april 
lo feitelson nitzberg moore 
comparison workload traces production parallel machines 
th symposium frontiers massively parallel computation 

