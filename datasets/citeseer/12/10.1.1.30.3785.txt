crowds anonymity web transactions michael reiter rubin labs research introduce system called crowds protecting users anonymity worldwide web 
crowds named notion blending crowd operates grouping users large geographically diverse group crowd collectively issues requests behalf members 
web servers unable learn true source request equally originated member crowd collaborating crowd members distinguish originator request member merely forwarding request behalf 
describe design implementation security performance scalability system 
security analysis introduces degrees anonymity important tool describing proving anonymity properties 
categories subject descriptors computer general security protection computer communication networks network protocols applications computers society public policy issues privacy comput ers society electronic commerce security general terms security additional key words phrases anonymous communication world wide web 
man know conversations correspondence personal life private 
lyndon johnson president united states lack privacy transactions world wide web internet general documented fact brier miller 
encrypting communication web servers ssl elgamal hide content transaction eavesdropper internet service provider local system administrator eavesdropper learn ip addresses client server computers length data exchanged time frequency exchanges 
encryption little protect privacy client server 
web server record internet addresses clients reside servers referred clients times frequencies accesses clients 
additional effort information combined data invade privacy clients 
example automatically client computer shortly access computer comparing idle time user client computer server access time server administrator deduce exact user high likelihood 
consequences privacy abuses described miller 
introduce new approach increasing privacy web delta transactions system called crowds implements 
approach idea blending crowd hiding actions actions 
execute web transactions model user joins crowd users 
user initial request web server passed random member crowd 
member submit request directly server forward randomly chosen member case member chooses submit forward independently 
request eventually submitted submitted random member preventing server identifying true initiator 
crowd members identify initiator request initiator indistinguishable member simply forwards request 
studying anonymity properties provided simple mechanism introduce notion degrees anonymity 
argue degree anonymity provided attacker viewed continuum ranging anonymity complete anonymity having interesting points 
informally define intermediate points crowds mechanism described refine definitions prove anonymity properties system 
expect definitions proofs yield insights proving anonymity properties approaches 
intriguing property crowds member crowd may submit requests initiated users 
negative positive consequences 
negative side user may incorrectly suspected originating request 
positive side property suggests mere availability crowds offers user degree deniability observed browsing behavior possible crowds 
crowds widely adopted presumption computer request received computer originated request valid utilized 
rest structured follows 
section precisely state anonymity goals system introduce notion degrees anonymity 
gives sufficient groundwork compare approach approaches anonymity section 
describe basic crowds mechanism section analyze security section 
describe performance scalability system sections respectively 
discuss crowd membership section system user interface section obstacles firewalls wide scale adoption crowds section 
conclude section 

goals anonymity discussed pfitzmann waidner types anonymous communication properties provided sender anonymity receiver anonymity unlinkability sender receiver 
sender anonymity means identity party sent message hidden receiver message 
receiver anonymity similarly means identity receiver hidden 
unlinkability sender receiver means delta exposed provably exposed absolute privacy suspicion probable innocence possible innocence fig 

degrees anonymity degrees range absolute privacy attacker perceive presence communication provably exposed attacker prove sender receiver relationship 
sender receiver identified participating communication identified communicating 
second aspect anonymous communication attackers properties achieved 
attacker eavesdropper observe messages sent received collaborations consisting senders receivers parties variations pfitzmann waidner 
aspects anonymous communication add third degree anonymity 
shown degree anonymity viewed informal continuum 
simplicity describe continuum respect sender anonymity naturally extended receiver anonymity unlinkability 
spectrum absolute privacy absolute sender privacy attacker means attacker way distinguish situations potential sender sent communication 
sending message results observable effects attacker 
spectrum provably exposed identity sender provably exposed attacker identify sender message prove identity sender 
purposes intermediate points spectrum interest listed strongest weakest 
suspicion sender anonymity suspicion attacker see evidence sent message sender appears originator message potential sender system 
probable innocence sender probably innocent attacker point view sender appears originator originator 
weaker suspicion attacker may reason expect sender responsible potential sender appears sender responsible 
possible innocence sender possibly innocent attacker point view nontrivial probability real sender 
possible describe intermediate points receiver anonymity sender receiver unlinkability 
necessary define intermediate points precisely 
degree anonymity suffices user obviously depends user circumstances 
probable innocence sender anonymity prevent delta types attackers acting suspicions avoiding abuses cited miller due high probability suspicions incorrect 
user wishes avoid suspicion whatsoever including suspicions sufficiently certain attacker act insist suspicion sender anonymity 
default degree anonymity web information attackers exposed described section 
versions netscape navigator internet explorer configured automatically identify client computer web servers passing information including ip address host platform request headers 
crowds achieves described section system consists dynamic collection users called crowd 
users initiate web requests various web servers receive replies users senders servers receivers 
consider anonymity properties provided individual user distinct types attackers local eavesdropper attacker observe communication user computer 
collaborating crowd members crowd members pool information deviate prescribed protocol 
server web server web transaction directed 
descriptions intended capture full capabilities attacker 
example collaborating members server eavesdrop communication members 
similarly local eavesdropper eavesdrop messages sent received user computer 
local eavesdropper intended model eavesdropper local area network user administrator monitoring web usage local firewall 
lan serves server eavesdropper effectively global provide protections 
table 
anonymity properties provided crowds attacker sender anonymity receiver anonymity local eavesdropper exposed suspicion gamma 
collaborating members probable innocence absolute privacy gamma 
gamma absolute privacy gamma 
server suspicion security offered types attackers summarized table justified remainder 
indicated omission unlinkability sender receiver column table system serves primarily hide sender receiver attacker 
table denotes number members crowd moment treat static delta denotes probability forwarding crowd member receives request probability forwards request member submitting server 
explained fully section 
boldface claims table probable innocence sender anonymity collaborating members suspicion sender anonymity server guarantees 
probability suspicion receiver anonymity local eavesdropper hand increases asymptotically crowd size increases infinity 
put way local eavesdropper sufficiently lucky observes events expose receiver web request receiver suspicion 
probability views events decreases function size crowd 
similarly sender assurance absolute privacy collaborating members holds asymptotically probability crowd size grows infinity constant number collaborators 
collaborators unlucky users achieve absolute privacy 
provide careful treatment notions section 
course attacker comprised attackers described system yields degrees sender receiver anonymity provided attackers 
example local eavesdropper server user request destined collaborate attack techniques achieve sender anonymity receiver anonymity 
caveat claims sender receiver anonymity section justifications remainder require message contents priori knowledge sender behavior give clues sender receiver identity 
crowds achieve crowds effort defend denial service attacks rogue crowd members 
crowd member accept messages crowd members refuse pass 
system denial service result malicious behavior typically result process representing crowd member fails leaves crowd 
result attacks detectable 
difficult detect active attacks crowd members substitute wrong information response web requests receive crowd members 
attacks inherent system uses intermediaries forward unprotected information fortunately utilized compromise anonymity directly 

related basic approaches previously proposed achieving anonymous web transactions 
approach interpose additional party proxy sender receiver hide sender identity receiver 
examples proxies include anonymizer www anonymizer com lucent personalized web assistant gabber com 
crowds provides protection wider range attackers proxies 
particular proxy systems entirely vulnerable passive attacker control proxy attacker monitor record senders receivers communication 
system presents single point delta passive attack users anonymity 
addition proxy typically single point failure proxy fails anonymous browsing continue 
crowds single failure ongoing web transactions 
second approach achieving anonymous web transactions mix chaum 
mix enhanced proxy addition hiding sender receiver takes measures provide sender receiver unlinkability global eavesdropper 
collecting messages equal length senders cryptographically altering typically decrypting private key forwarding messages recipients different order 
techniques difficult eavesdropper determine output messages correspond input messages 
natural extension interpose sequence mixes sender receiver chaum 
sequence mixes tolerate colluding mixes single correctly behaving mix server sequence prevents eavesdropper linking sender receiver 
mixes implemented support types communication example electronic mail tsudik isdn service pfitzmann general synchronous communication including web browsing syverson 
properties offered crowds different offered mixes 
described crowds provide probable innocence sender anonymity collaborating crowd members 
contrast closest analog attack typical mix systems group collaborating mix servers mixes provide sender anonymity ensure sender receiver unlinkability pfitzmann waidner 
difference mixes provide sender receiver unlinkability global eavesdropper 
crowds provide anonymity global eavesdroppers 
intention crowd span multiple administrative domains existence global eavesdropper 
difference mixes typically rely public key encryption algebraic properties exploited break implementations pfitzmann pfitzmann 
crowds unique properties admit efficient implementations comparison mixes 
mixes length message routed mix network grows proportionally number mixes routed mix network pad messages fixed lengths generate decoy messages foil traffic analysis 
typical mix implementation routing message sequence mixes incurs cost public key encryptions private key decryptions critical path message comparatively expensive operations 
unlinkability provided mixes tolerant gamma mixes colluding increasing improves anonymity hurts performance 
privacy crowds similarly enhanced increasing average number times request forwarded members submitted server impact performance public private key operations inflation message transmission lengths small constant size header decoy messages needed 
performance advantage crowds user actively participates function crowd throughput crowd grows function number users 
fact show section crowd scale delta theory sense load user computer expected remain roughly constant new users join crowd 
fixed network mixes load server increases proportionally number users resulting linear decrease throughput 

crowd overview discussed previously crowd thought collection users 
user represented crowd process computer called jondo pronounced john doe meant convey image participant 
user local administrator starts jondo user computer 
jondo started contacts server called blender request admittance crowd 
admitted blender reports jondo current membership crowd information enables jondo participate crowd 
defer discussion blender crowd membership maintenance section 
user selects jondo web proxy specifying host name port number web browser proxy services 
request coming browser sent directly jondo 
receiving user request browser jondo initiates establishment random path jondos carries users transactions intended web servers 
precisely jondo picks jondo crowd possibly random forwards request 
jondo receives request flips biased coin determine forward request jondo coin indicates forward probability result forward jondo selects random jondo forwards request jondo submits request server request destined 
request travels user browser number jondos server 
possible set paths shown 
paths server server server server server server 
subsequent requests initiated jondo follow path going different server server replies traverse path requests reverse 
pseudocode description jondo 
describes thread execution executed received request 
description uses client server terminology jondo client successor path 
path indicated path id value path id jondo path 
assign jondos paths jondo maintains set jondos jondos believes active included 
chooses direct path jondo selects jondo uniformly random set lines denotes selection set uniformly random 
subsequent sections shed greater light operation jondo pseudocode description 
services include gopher ftp ssl 
ftp requests triggered downloading web page go crowd reveal user ip address server 
java activex disabled browser java applet activex control embedded retrieved web page connect back server directly reveal user ip address server 
delta crowd web servers fig 

paths crowd initiator web server path labeled technical reasons convenient jondo position path hold different path identifier path 
jondo receives request marked path id predecessor path replaces path id different path identifier stored translate path id forwarding request successor jondo 
enables jondo occupies multiple positions path act independently position path id remained path jondo behave identically time received message path resulting infinite loop 
path identifiers unique implementation new path id lines returns random bit value 
omitted description fact communication jondos encrypted key known 
encryption keys established jondos join crowd discussed section 
security analysis section consider question information attacker learn senders receivers web transactions mechanisms described section 
types attackers consider described section 
analysis begins attackers analysis straightforward local eavesdropper server 
followed analysis crowd security versus collaborating jondos 
local eavesdropper recall local eavesdropper attacker observe communication emanating individual user computer 
user initiates request fact exposed local eavesdropper effort hide correlations inputs outputs delta client request receive request client browser request strip cookies identifying headers path id path id initialized 
path id new path id path id jondos forward request path id client jondo path id remove path id request remove incoming path id translate path id incoming path id new coin coin flip tails probability pf coin heads translate path id submit translate path id new path id set outgoing path id translate path id jondos select jondo random translate path id submit submit request forward request translate path id subroutine forward request path id send path path id reply await reply wait reply recognizable jondo failure reply jondo failed jondo failed jondos jondos path id remove jondo path id jondos assign new random jondo path forward request path id try received reply jondo send reply client subroutine submit request send request destination request send destination web server reply await reply timeout wait reply timeout server failure send reply client send reply error message client fig 

pseudocode description jondo initiating computer 
local eavesdropper observes request output user computer result corresponding input 
offer sender anonymity local eavesdropper 
mechanisms described typically prevent local eavesdropper learning intended receiver request message forwarded path final request server encrypted 
eavesdropper able view message emanating user computer views message submitted server equivalently plaintext message containing server address user jondo ultimately submits user request 
probability user jondo ultimately submits request size crowd path created probability eavesdropper learns identity receiver decreases function crowd size 
user jondo ultimately submit request local eavesdropper sees encrypted address server suggest yields receiver anonymity informally suspicion 
suspicion gamma 
receiver anonymity 
delta servers consider security system attack server 
web server receiver obviously receiver anonymity possible attacker 
anonymity path initiator quite strong 
particular path initiator forwards jondo creating path see section server equally receive initiator requests crowd member 
server perspective crowd members equally initiated request actual initiator sender anonymity suspicion 
interesting note result opposed collaborating jondos depend probability forwarding see section 
increasing expected path length offers additional assurance anonymity server 
collaborating jondos consider set collaborating corrupted jondos crowd 
single malicious jondo simply special case attacker analysis applies case 
jondo observe plaintext traffic path routed traffic including address server exposed attacker 
question consider attacker determine initiated path 
precise consider path initiated non collaborating member collaborator occupies position 
goal collaborators determine member initiated path 
assuming contents communication suggest initiator collaborators reason suspect member immediately received member immediately preceding collaborator path 
members equally initiator obviously initiator collaborators immediate predecessor 
analyze confident collaborators immediate predecessor fact path initiator 
denote event collaborator path occupies kth position path initiator occupies th position possibly define denote event collaborator path immediately preceded path path initiator 
note converse true initiating jondo appear path multiple times 
notation collaborators hope determine collaborator path probability path initiator collaborator immediate predecessor 
refining intuition section say path initiator probable innocence probability 
definition 
path initiator probable innocence respect sender anonymity 
order yield probable innocence path initiator certain conditions met system 
particular probability forwarding system see section denote number collaborators crowd denote total number crowd members path delta formed 
theorem gives sufficient condition ensure probable innocence path initiator 
theorem 
pf pf gamma path initiator probable innocence collaborators 
proof 
want show pf pf gamma 
note gamma gamma due fact order collaborator occupy ith position path path wander gamma time probability gammac chooses forward path probability collaborator probability 
facts follow immediately 
gamma pf gammac gamma pf gammac gamma gamma gamma gamma gamma pf gammac gamma gamma probabilities need gammac follows observation collaborator path occupies second higher position immediately preceded path member equal likelihood 
captured gamma np cp gamma gamma get gamma gamma gamma pf pf gamma result theorem probable innocence guaranteed long 
generally theorem implies tradeoff length paths performance ability tolerate collaborators 
making probability forwarding high fraction collaborators tolerated approaches half crowd 
hand making probability forwarding close half decreases fraction collaborators tolerated 
value derived proof theorem shows held constant 
assuming collaborators observe path occupy positions follows absolute privacy gamma 
sender anonymity receiver anonymity 
rate growth slow large 
delta timing attacks 
far analysis security collaborating jondos taken timing attacks account 
possibility timing attacks system results structure html language web pages written 
html page include url address image page retrieved causes user browser automatically issue request 
immediate nature requests poses greatest opportunity timing attacks collaborating jondos 
specifically collaborating jondo path returning web page path containing url automatically retrieved time duration receives request url 
duration sufficiently short reveal collaborator immediate predecessor initiator request 
implementation eliminate timing attacks follows 
jondo receives html reply request received directly user browser submitted directly server jondo user path initiator jondo path parses html page identify urls user browser automatically request result receiving reply 
jondo path requests urls sends back path original request received 
user jondo receiving requests urls user browser forward requests path simply waits urls contents arrive path feeds browser 
way jondos path see requests generated browser glean timing information 
note misbehavior jondo path intermediate jondo result denial service successful timing attack 
particular attacking jondo inserts embedded url returning page user jondo identify expect url contents arrive forward request url user browser initiates 
mechanism prevents jondos user observing requests automatically generated due retrieval page 
requests observable attacking jondos generated explicit user action 
conceivable user response page clicking contained url sufficiently rapid reveal jondo position path predecessor initiator path way similar automatic request 
user response need extremely fast typically fraction second viewing page risk revealing information 
expect response times human browsing educating users risk 
presumption turns incorrect user jondo insert random delay request decreasing chances revealing information virtually zero 
primary drawback approach defending timing attacks easily compatible web technologies 
example urls contained example src attributes embed frame img input type image script 
tags background attributes body table tr 
td 
tags content attributes meta 
tags 
delta web pages contain executable scripts written javascript difficult jondo identify advance urls browser automatically request result interpreting pages 
way address user jondo delay requests received browser immediately feeding browser page containing javascript 
foolproof defense recommend user disable javascript browser browsing crowds done easily preference menu browsers 
technology presents difficulties ssl protocol web pages encrypted transport 
enable user jondo jondo path parse ssl retrieved pages ssl connection web server jondo path 
case communication protected jondos path protected eavesdroppers communication jondos encrypted 
time writing ssl supported crowds 
static paths 
early design crowds tempted paths dynamic system having jondo different path users time period user request 
advantages dynamic paths include potential better performance load balancing crowd 
section caution dynamic paths tends decrease anonymity properties provided system collaborating jondos 
reason probable innocence offered theorem vanishes collaborators able link distinct paths initiated jondo 
collaborating jondos able link paths initiated unknown jondo related path content timing communication paths 
prevent paths static attacker simply multiple paths link jondo 
see multiple linked paths initiated jondo compromise user anonymity note collaborating jondos higher probability receiving path initiation message request path initiator path individual member see proof theorem 
multiple paths initiated user jondo pinpoint jondo collaborators receive initiating messages 
put way collaborators identify paths unknown initiator expected number paths collaborator directly preceded path initiator gammap gammac gamma 
chernoff bounds probability collaborator immediately preceded initiator substantially fewer paths small collaborator immediately preceded path initiator fewer gamma ffi paths probability gammaffi see motwani raghavan theorem 
initiator identified high probability 
reason jondo sets path users communications path altered circumstances 
path altered failures detected path 
specifically paths rerouted failure jondo detected jondo executes fail failure schlichting schneider :10.1.1.20.4967
implementation failures detected tcp ip connection jondo delta breaking refused jondo reroute path simply timing subsequent jondo path see line 
increases sensitivity denial service attacks see section strengthens promise anonymity user 
reasonable question malicious jondo path failure hopes path rerouted collaborator yielding information path initiator 
fortunately answer jondo path fails appears fail path remains predecessor faulty jondo remainder path randomly line 
collaborating jondos distinguish predecessor originator random choices predecessor yield additional information collaborators 
second circumstance paths altered new jondos join crowd 
motivation rerouting paths protect anonymity joining jondo existing paths remained static joiner new path easily attributed new jondo formed 
protect jondos forget paths new jondos join re establish paths scratch 
avoid exposing path initiators attack described previously section joins grouped infrequent scheduled events called join commits see section 
join commit occurs existing paths forgotten newly joined jondos enabled participate crowd 
batching joins single join commit limits number times paths rerouted number paths vulnerable linkage collaborators 
user alerted join commit occurs cautioned continuing browse content related browsing prior commit lest collaborators attempting link paths content 

performance section describe performance crowds 
discussed section performance motivating factors design crowds believe strength approach relative mixes chaum published performance results mix implementations compare results 
crowds performance encouraging improved re implementing compiled language crowds implemented perl partially interpreted language chose rapid prototyping capabilities portability unix microsoft platforms 
results performance tests implementation shown figures 
tests source requests netscape browser configured allow maximum simultaneous network connections 
crowd consisted jondos executing separate moderately loaded mhz sparc running sunos 
web server fairly busy mhz sgi workstation running irix apache web server 
computers located labs close network proximity 
shows mean latency milliseconds retrieving web pages various sizes containing embedded urls various path lengths 
number indicates average duration user jondo receives request delta path length page size kbytes msecs path page size kbytes length fig 

response latency msecs function path length page size browser page written back browser 
path length number appearances jondos path 
jondo appears times path jondo contributes total path length 
example paths initiated jondos length paths initiated length 
observation latency sharply increases path length increases 
primary reason sharp increase path length length encryption page contents takes place 
path length employed crowd member user jondo acts simple proxy browser server strip away identifying information headers 
path length request reply passed encrypted jondos path 
slow growth latency path gets longer encryption performed path key key shared jondos path 
path key created jondo initiating path jondo path forwards jondo encrypting path key key shares jondo see section 
existence path key enables requests encrypted jondo initiating path decrypted jondo path passed intermediate jondos encrypting decrypting requests 
similarly replies encrypted delta path length kbyte images msecs path number kbyte images length fig 

response latency msecs function path length number embedded images jondo path decrypted jondo path initiated 
cryptographic operations performed efficient stream cipher allowing encrypting decrypting streams reply generated jondos waiting reply web server 
cipher implemented perl portability remains bottleneck implementation 
shows mean latency milliseconds retrieving paths various different lengths pages containing urls automatically retrieved browser see section 
tests embedded url address kilobyte image resident server page referenced 
number indicates average duration user jondo receives initial request browser jondo finishes writing page images page browser 
clear number images considerably impacts latency responses 
expected general effect particularly pronounced implementation due primarily encryption costs 
returning images path effect serializing retrieval increases latency achieved modern browsers network connections retrieve multiple images concurrently 
paths path lengths established randomly run time user choose path length predict request latency experiences 
delta expected path length influenced modifying value probability jondo forwards jondo versus submitting server jondos 
specifically expected length path gamma gamma gamma gamma gamma gamma suggests multiple types crowds exist employing small better performance resilience collaborating jondos see theorem large increase security cost performance 
performance seen practice may differ figures depending platforms running jondos speed network connectivity jondos 
particular jondo connected internet slow modem link considerably impacts latencies paths 
suggests multiple types crowds ones containing jondos connected fast links ones allowing jondos connected slower links 

scale numbers section give little insight performance affected crowd size grows 
sufficient resources measure performance crowd involving hundreds computers simultaneously issuing requests 
section simple analytic arguments show performance scale 
measure scale evaluate expected total number appearances jondo paths point time 
example jondo occupies positions path position total appearances paths 
theorem says jondo expected number appearances paths virtually constant function size crowd 
suggests crowds able grow quite large 
theorem 
crowd size expected total number appearances jondo paths gammap proof 
size crowd 
compute load jondo say computing distribution number appearances path 
denote event path reaches exactly times counting initiated path 
define follows gamma gamma gamma gamma gamma intuitively probability path reached delta reach 
gamma gamma gamma gamma gamma 
gamma gamma gamma 
gamma gamma 
gamma gamma gamma expected number appearances path formed jondo bounded gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma expected number appearances paths bounded gamma gamma gamma gamma 
crowd membership membership maintenance procedures crowd procedures determine join crowd join inform members crowd membership 
discuss mechanisms maintaining crowd membership section policies regarding join crowd section 
mechanism schemes adopted manage membership crowd 
existing group membership protocols tolerant benign cristian ricciardi birman moser malicious reiter faults maintaining consistent view membership jondos members voting determine authenticated prospective member admitted crowd 
similar approach adopted prior secure process groups reiter 
providing delta robust distributed solutions approaches disadvantages incurring significant overhead providing semantics arguably strong application hand 
particular hallmark approaches guaranteed consistent view group membership group members unclear strong guarantee required 
implementation opted simpler centralized solution 
membership crowd controlled reported crowd members server called blender 
blender crowd user establish account blender account name password blender stores 
user starts jondo jondo blender shared password authenticate communication 
result communication blender accepts jondo crowd see section blender adds new jondo ip address port number account name list members reports list back jondo 
addition blender generates reports back list shared keys authenticate member crowd 
blender sends key jondo intended share encrypted account password jondo informs jondo new member 
point members equipped data need new member participate crowd 
protect attacks described section new member refrains doing receives join commit message blender 
discussed section 
member maintains list crowd membership 
list initialized received blender jondo joins crowd updated jondo receives notices new deleted members blender 
jondo remove jondos list crowd members detects jondos failed see line 
allows jondo list diverge different jondos detected different failures crowd 
appears little qualitative effect security analysis section attackers able prevent communications correct jondos extent removes correct jondos list members 
disadvantage approach membership maintenance blender trusted third party purposes key distribution membership reporting 
techniques exist distributing trust third party third party replicas way corruption fraction replicas tolerated gong reiter 
non replicated form blender best executed secure computer login access available console 
trusted third party functions note users communication routed blender passive attack blender immediately reveal users web transactions anonymizer see section 
failure blender interfere ongoing web transactions anonymizer 
anticipate versions crowds jondos establish shared keys diffie hellman key exchange diffie hellman blender serves distribute diffie hellman public keys crowd members :10.1.1.37.9720
eliminate reliance blender key generation 
delta policy important light section degree control crowd membership maintained 
add arbitrarily jondos crowd single attacker launch collaborating jondos pf pf gamma point theorem longer offers protection 
second joins cause paths re routed see section joins allowed occur frequently controls paths may re routed sufficiently frequently allow collaborating jondos mount correlation attack described section 
implementation blender serves point joins crowd controlled 
address concern blender batches joins occur scheduled discrete event called join commit 
schedule join commits configurable parameter blender envision commit day typically suffice 
blender informs crowd members join commit point newly joined members enabled participate crowd old members reset paths described section 
need limit number collaborators join crowd suggests different types crowds exist 
type consist relatively small collection individuals personal knowledge agree form crowd 
member allowed include jondo crowd 
precisely person account jondo account allowed 
member personal knowledge members enables trust sufficiently members collaborate ensure pf pf gamma 
second type crowd larger public crowd admitting members known substantial fraction membership 
privacy offered crowd collaborating members rely size crowd large attack aimed making pf pf gamma require considerable effort go undetected 
limiting user account blender administrator sets account user receiving written request user account jondo monitoring limiting number jondos network ip address attacker forced launch jondos different identities different networks succeed 

user interface implementation ways user interacts jondo jondo serves proxy browser 
user issue crowd query appending crowd 
url requests 
returns list active jondos crowd jondo 
information includes jondo account name ip address port number 
example shown 
user browsing crowd word crowd prepended title page 
user check crowd looking title documents browser 
course web server delta fig 

crowd query crowd query shows jondos available indicates acting user proxy browser 
add word title document fool user relied 
crowds offers informational pages user browser similar 
example crowds alerts user join commit occurs 
savvy crowds user fine tune jondo behavior way configuration file defines behavior jondo 
configuration file includes example parameter settings allow disallow passage cookies data web server download user browser user browser include subsequent requests server 
default jondo strips cookies requests receives browsers order better protect users privacy jondo configured cookies pass 
configurable parameters jondo include example host port crowd blender account name password jondo requests admission crowd 
configuration options may added give user control jondo 
example parameter included define threshold number crowd members drops value user alerted fact 
parameters included specify headers allowed pass requests presently jondo delta strips away contain information characterizing user platform types content java javascript allowed pass browser 

firewalls firewalls problem crowds 
network servers jondos identified ip address port number 
corporate firewalls allow incoming connections ports known ones 
firewall generally prevent jondo outside firewall connecting firewall 
reason firewalls represent barrier wide scale inter adoption crowds 
firewalls configured allow outgoing connections port possible jondo initiate path goes outside firewall eventually web servers 
firewall gives jondo path outside domain way verify initiating computer resides domain simply tries open connection back predecessor path fails path originated predecessor domain 
crowd member firewall offered anonymity 
conceivable crowds widespread demand special reserved port firewalls open port allow jondos communicate 
crowds useful academic institutions service provided internet service providers large corporations 

novel approach protecting users privacy retrieving information world wide web system implements 
approach works grouping web users geographically diverse collection called crowd retrieves information users behalf way simple randomized routing protocol 
degrees anonymity characterized anonymity properties provided protocol classes attackers 
described crowds system implemented measures takes defend various attacks resulting way web works today performance scalability limitations system 
principles system broadly applied anonymizing forms communication 
time writing distributed copies crowds code free charge response user requests maintaining blender active crowd internet 
information obtaining crowds code www research att com projects crowds 
marc hal finney ian goldberg david goldschlag levien jim mccoy fabian michael reed paul syverson david wagner valuable suggestions regarding crowds 
delta brier 
keep privacy battle lines get clearer 
new york times january 
chaum 
untraceable electronic mail return addresses digital pseudonyms 
communications acm february 
cristian 
reaching agreement processor group membership synchronous distributed systems 
distributed computing 
fabre 
intrusion tolerance distributed computing systems 
proceedings ieee symposium research security privacy 
diffie hellman 
new directions cryptography 
ieee transactions information theory 
gabber gibbons matias mayer 
personalized web browsing simple secure anonymous 
proceedings financial cryptography gong 
increasing availability security authentication service 
ieee journal selected areas communications june 
tsudik 
mixing mail babel 
symposium network distributed system security 
elgamal 
ssl protocol 
internet draft netscape ssl txt miller 
cyberspace 
usa today june 
moser melliar smith agrawala 
membership algorithms asynchronous distributed systems 
proceedings th international conference distributed computing systems 
motwani raghavan 
randomized algorithms 
cambridge university press 
pfitzmann pfitzmann 
break direct rsa implementation mixes 
advances cryptology eurocrypt 
pfitzmann pfitzmann waidner 
isdn mixes untraceable communication small bandwidth overhead 
gi itg conference communication distributed systems 
pfitzmann waidner 
networks user observability 
computers security 
reiter 
distributing trust rampart toolkit 
communications acm april 
reiter 
secure group membership protocol 
ieee transactions software engineering january 
reiter birman van renesse 
security architecture fault tolerant systems 
acm transactions computer systems november 
ricciardi birman 
process groups implement failure detection asynchronous environments 
proceedings th acm symposium principles distributed computing 
schlichting schneider 
fail processors approach designing fault tolerant computing systems 
acm transactions computer systems august 
syverson goldschlag reed 
anonymous connections onion routing 
proceedings ieee symposium security privacy 
