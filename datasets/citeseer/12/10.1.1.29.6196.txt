reducing cost non blocking atomic commitment rachid guerraoui andr schiper epartement informatique ecole polytechnique ed erale de lausanne lausanne switzerland non blocking atomic commitment protocols enable decision commit abort reached correct participant despite failure 
cost nonblocking implies high number messages communication steps required reach commit complicated termination protocol needed case failure suspicions 
non blocking protocol called md pc modular decentralized phase commit enables trade resiliency efficiency 
conveyed performance measures md pc faster existing nonblocking protocols case broadcast network reasonable resiliency rate efficient classical blocking pc 
termination protocol md pc encapsulated inside majority consensus protocol 
modularity leads simple structure md pc enables precise characterization liveness asynchronous system unreliable failure detector 
atomic commitment failure atomicity transactions called property ensured atomic commitment protocol 
launched transaction atomic commitment protocol returns commit abort 
simplest best known atomic commitment protocol called phase commit pc protocol 
pc considered cheap protocol needs communication steps messages commit number participants protocol 
main drawback pc blocking coordinator crashes participants uncertain commit abort outcome transaction participants wait recovery coordinator 
blocking period valuable resources locked objects kept inaccessible transactions 
atomic commitment protocol said nonblocking enables decision reached correct participants despite failure 
appear ieee international conference distributed computing systems icdcs hong kong may 
cost non blocking phase commit pc protocol best known example non blocking atomic commitment protocol 
pc drawbacks making rarely practice 
reach commit pc needs communication steps messages communication steps messages pc 
consequence pc higher latency pc needs time commit 
second case failure suspicions pc complicated termination protocol 
example contains leader election subprotocol requiring check cases depending participant states 
considering issue designing non blocking efficient modular atomic commitment protocols 
discussed efficiency decentralized version pc called pc shown termination protocol encapsulated inside uniform consensus protocol defined 
needs communication steps commit pc pc lower latency pc 
pc needs messages commit messages necessary pc large number participants involved number messages leads bad performances pc 
md pc protocol protocol called md pc modular decentralized phase commit viewed optimization pc 
pc pc md pc requires communication steps reach commit 
fundamental characteristic md pc subprotocol required non blocking performed subset participants cardinality subset depends number crash failures tolerated resiliency rate 
modularity enables trade resiliency number messages needed reach commit decision 
precisely resilient participant crash failures md pc needs messages broadcast network messages 
performance measures show md pc faster pc pc 
furthermore case reasonable resiliency rate broadcast network md pc efficient pc participant number 
termination protocol md pc encapsulated inside protocol solves majority consensus problem introduce simple variation wellknown uniform consensus problem 
modular structure leads simple structure md pc enables give precise characterization liveness chandra toueg solving consensus problems unreliable failure detectors 
show crash failures md pc eventually terminates asynchronous system unreliable failure detector class 
rest organized follows 
section define system model non blocking atomic commitment problem 
define majority consensus problem characterize termination md pc 
section md pc protocol 
section compare pc pc pc md pc terms latency number messages 
performance figures 
section summarize main contributions discuss open broadcast communication broadcast network messages needed pc needed pc 
questions 
appendix contains correctness proof md pc 
model problems system model consider distributed system composed finite set processes omega fp completely connected set channels 
communication message passing asynchronous reliable 
asynchrony means bound communication delays 
reliable channel ensures message sent process process eventually received correct fail processes fail crashing consider byzantine failures 
assume asynchronous system augmented failure detector 
failure detector viewed distributed oracle 
process access local failure detector module module maintains list processes currently suspects crashed 
assumption failure detector implemented 
example simply time outs failure detector modules consult process 
failure detectors abstractly characterized completeness accuracy properties 
consider failure detectors class eventually strong 
failure detectors guarantee strong completeness eventually process crashes permanently suspected correct process eventual weak accuracy eventually correct process suspected correct process 
notice failure detectors unreliable mistakes false failure suspicions 
fundamental characteristic weakest class failure detectors allow solve consensus uniform consensus problem 
consensus uniform consensus problems process starts binary initial value processes agree binary decision value 
consensus problem defined conditions agreement correct processes decide differently uniform validity decision value initial value process termination correct process eventually decides 
uniform consensus problem defined uniform validity termination conditions consensus uniform agreement condition processes correct decide differently 
non blocking atomic commitment problem aim atomic commitment protocol bring participants transaction agree outcome transaction commit abort 
outcome transaction depends votes provided participants 
vote reflects ability participant ensure data object updates permanent 
outcome commit votes participants 
order exclude trivial situations participants decide abort generally required commit decided votes ii failure 
show non triviality condition strong requires precise knowledge failures 
knowledge provided reliable failure detectors 
consider weaker assumption exclude link failures require link failure eventually repaired 
step step step vote request commit decision vote collection pc protocol coordinator non triviality condition commit decided votes ii process suspected 
define non blocking atomic commitment problem conditions uniform agreement participants decide differently decision commit participants voted termination correct participant eventually decides non triviality participant votes participant suspected decision commit 
majority consensus problem pc protocol requires uniform consensus termination protocol protocol md pc requires variation uniform consensus call majority consensus 
majority consensus problem defined termination conditions uniform consensus validity condition decision value initial value participant ii majority initial values decision value 
validity condition problem privileged 
see section enables reduce number messages required decide commit step protocol 
show section consensus uniform consensus majority consensus problem solved failure detector class 
md pc protocol md pc protocol viewed optimization pc recall basic characteristics protocol 
give overview md pc pointing trade number messages needed commit resiliency rate 
give detailed description md pc 
correctness proofs sketched section detailed appendix 
overview pc note failure detector reliable definition turns classical definition 
step step step vote request commit decision vote collection md pc protocol coordinator set nb fp pc protocol steps 
illustrates protocol case participant votes participant suspected crashed 
set participants fp coordinator 
step coordinator asks participants vote 
participant votes sends vote participants 
step participant receives vote sends message participants 
step participant receives message decides commit 
participant votes decides abort immediately step unilateral way termination protocol invoked case failure suspicion encapsulated inside uniform consensus protocol 
overview md pc pc md pc communication steps 
illustrates md pc protocol case participant votes participant suspected 
steps structure protocols messages sent md pc 
precisely step md pc step needed ensure non blocking executed subset noted set nb participants 
step md pc pc coordinator asks participant vote 
votes sent members set nb sent pc 
resiliency rate number crash failures tolerated require set nb contain members 
example assume set nb fp nb 
step member set nb receives vote sends message 
step participant receives message majority set nb fp decides commit 
subtle difference pc participant decide commit receives message step participant suspects coordinator votes decides abort unilateral way 
handling cases remains simple reduced majority consensus commit corresponds value abort corresponds value 
majority consensus protocol launched members set nb consulting participant 
similar idea proposed pc protocol deal false failure suspicions 
pc votes sent participants subset md pc majority required participants subset md pc 
case failure suspicions 
step failure suspicion leads member set nb start majority consensus abort initial value 
step failure suspicion leads start majority consensus commit initial value 
section describe md pc protocol details 
assume majority consensus protocol discuss section 
description md pc detailed md pc protocol function 
function called correct participant majority consensus problem solved function takes argument commit abort returns values 
assume participants know coordinator know members set nb md pc protocol process informed local failure detector module crash suspicions 
example notation coord line indicates process suspects coordinator 
function triggers concurrent tasks noted task lines task lines terminates execution return statement commit abort lines 
executes return decides outcome transaction 
task decision task 
waits decision message outcome decide forwards outcome participants line 
ensures correct participant decides outcome correct participants decide outcome 
task executes main protocol step step step 
step lines line coordinator sends message 
protocol decentralized coordinator 
participant waits receives message step coordinator ii suspects coordinator line 
case ii sends message abort decide line decides abort line 
case defines vote vote line sends message abort decide line decides abort line 
votes sends message step members set nb line 
members set nb proceed step 
proceed directly step 
step lines process set nb waits receives votes participants ii suspects participant line 
case ii asks members set nb start majority consensus protocol sending message line starts majority consensus abort initial value line 
decision majority consensus protocol outcome forwarded participants line 
case sends message step participants line proceeds step 
step lines participant waits receives step message majority set nb ii receives message possibility members set nb 
case ii starts majority consensus protocol commit initial value line 
decision majority consensus protocol outcome forwarded participants line 
case sends message commit decide participants line decides commit line 
correctness md pc propositions state correctness md pc protocol 
proposition corresponds condition non blocking atomic commitment problem defined section 
sketch proofs see complete proofs 
proposition validity 
commit decided participants voted 
proof sketch 
commit decided participant decided commit lines task 
reach line line participants sent vote 
majority uniform validity condition majority consensus decide commit line participant set nb started majority consensus commit initial value implies participants sent vote 
proposition uniform agreement 
participants decide differently 
proof sketch 
proposition participant send vote set nb members participant decide commit obviously participants decide differently 
assume participants send vote members set nb consider cases participant decides commit line ii participant decides commit line 
show case participant decide abort 
case ii show participant decides decides majority consensus 
agreement condition majority consensus participants decide differently 
proposition termination 
nb failure detector correct participant eventually decides 
proof sketch 
consider cases correct participant send vote ii correct participants send vote line 
case show assumption reliable channels strong completeness property correct participant eventually decides abort 
consider case ii 
correct participant receives message majority members set nb case correct participant decides commit 
assumption reliable channels assumption majority set nb correct strong completeness property correct participant set nb eventually decides majority consensus correct participant eventually decides 
proposition non triviality 
participant votes participant suspected decision commit 
proof sketch 
abort decided participant decided abort task line 
lines participant decide abort function coord initialisation cobegin task step coord coordinator executes send step participants wait received step coord coord coord send abort decide participants return abort abort decision unable updates permanent vote send abort decide participants return abort abort decision send step members step members execute participant wait received step send members outcome abort termination send outcome decide participants return outcome send step participants step loop wait received step received outcome commit termination send outcome decide participants return outcome received step nb send commit decide participants return commit commit decision endloop task wait received outcome decide send outcome decide participants return outcome coend md pc protocol participant protocol number steps number messages number messages pc pc pc md pc point point communication broadcast communication steps messages case suspected participant voted 
participant reach line participant suspected 
important order satisfy uniform agreement properties necessary 
means properties ensured protocol block allow participants reach different decisions 
evaluation md pc section compare performances md pc protocol pc pc pc case suspicion participant votes table shows number messages communication steps needed reach commit protocol 
pointed pc pc md pc need communication steps pc needs communication steps 
establishing number messages needed distinguish cases point topoint communication broadcast communication broadcast network 
example case participants resiliency rate pc requires messages pc requires pc requires md pc requires messages 
case pc requires messages pc requires pc requires md pc requires messages 
surprising broadcast communication md pc performances pc see require steps nearly number messages 
tables compare performances protocols point point communication broadcast communication 
measures obtained fddi mb sparc machines running solaris udp transport protocol 
measures convey average time commit transaction 
different participants located different machines 
md pc protocol implemented resiliency rate nb 
performances show md pc significantly faster pc pc broadcast communication md pc efficient pc 
concluding remarks md pc modular decentralized phase commit protocol provides non blocking feature requiring number steps commit corresponds frequent case 
protocol pc pc participants participants participants participants protocol pc pc participants participants participants participants pc md pc md pc pc point point communication broadcast communication ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms 
ms ms ms ms ms ms ms ms ms ms ms ms ms ms time commit transaction nb 
classical blocking pc trading number messages required reach commit desired resiliency 
shows md pc significantly provides better performances existing non blocking pc pc protocols 
reasonable resiliency rate broadcast communication md pc efficient pc protocol 
failure scenarios handled termination protocol specified majority consensus problem variation known consensus problem 
modularity leads simple structure md pc protocol enables rigorous characterization liveness asynchronous systems unreliable failure detectors 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 

chandra toueg 
unreliable failure detectors reliable distributed systems 
appear journal acm 
preliminary version appeared proceedings th acm symposium principles distributed computing pp 
acm press 
august 
chandra hadzilacos toueg 
weakest failure detector solving consensus 
proceedings th acm symposium principles distributed computing pp 
acm press 
august 
guerraoui schiper 
decentralized non blocking atomic commitment protocol 
proceedings th ieee symposium parallel distributed processing pp 
san antonio texas october 
guerraoui 
revisiting relationship non blocking atomic commitment consensus problems 
proceedings th international workshop distributed algorithms pp 
lncs springer verlag 

guerraoui schiper 
reducing cost non blocking atomic commitment 
technical report ecole polytechnique ed erale de lausanne computer science department 
gray 
notes database operating systems 
operating systems advanced course pp 
lecture notes computer science springer verlag 

skeen 
nonblocking commit protocols 
proceedings acm sigmod international conference management data pp 
acm press 

skeen 
quorum commit protocol 
proceedings berkeley workshop distributed data management computer networks pp 
february 

