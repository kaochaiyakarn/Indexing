autonomous agents multi agent systems vol pp algorithms distributed constraint satisfaction review makoto yokoo yokoo cslab ntt jp ntt communication seika cho soraku gun kyoto japan ti ac jp kobe university marine ku kobe japan 
multiple agents shared environment usually exist constraints possible actions agents 
distributed constraint satisfaction problem distributed csp problem find consistent combination actions satisfies inter agent constraints 
various application problems multi agent systems formalized distributed csps 
gives overview existing research distributed csps 
briefly describe problem formalization algorithms normal centralized csps 
show problem formalization mas application problems distributed csps 
furthermore describe series algorithms solving distributed csps asynchronous backtracking asynchronous weak commitment search distributed breakout distributed consistency algorithms 
extensions basic problem formalization distributed csps handling multiple local variables dealing constrained problems 
keywords constraint satisfaction search distributed ai 
constraint satisfaction problem csp problem find consistent assignment values variables 
typical example csp puzzle called queens 
objective place chess queens board squares queens threaten 
problem kind called constraint satisfaction problem objective find configuration satisfies conditions constraints 
definition csp simple surprisingly wide variety ai problems formalized csps 
research csp long distinguished history ai 
distributed csp csp variables constraints distributed multiple automated agents 
various application problems multi agent systems mas concerned finding consistent combination agent actions distributed resource allocation problems distributed scheduling problems example constraint satisfaction problem queens distributed interpretation tasks multi agent truth maintenance tasks formalized distributed csps 
consider distributed algorithms solving distributed csps important infrastructure mas 
gives overview existing research distributed csps 
show problem definition normal centralized csp algorithms solving csps section 
show problem definition distributed csps section 
describe mas application problems formalized distributed csps section 
show series algorithms solving distributed csps section 
show way extending basic problem formalization distributed csps handling multiple local variables dealing constrained problems section 
compare efficiency algorithms section 

constraint satisfaction problem 
problem definition formally csp consists variables values taken finite discrete domains respectively set constraints values 
general constraint defined predicate 
constraint kj predicate defined cartesian product kj predicate true iff value assignment variables satisfies constraint 
solving csp equivalent finding variables constraints satisfied 
constraint satisfaction np complete general trial error exploration alternatives inevitable 
note restriction form predicate 
mathematical logical formula arbitrary relation yokoo tex defined tuple variable values 
particular prohibited combination variable values representing constraint 
type constraint called nogood 
example queens problem obvious queen placed column 
formalize problem csp variables corresponds position queen row 
domain variable 
solution combination values variables 
constraints queens threaten represented predicates constraint represented 
algorithms solving csps algorithms solving csps divided groups search algorithms consistency algorithms 
search algorithms solving csps divided groups backtracking algorithms iterative improvement algorithms 

backtracking backtracking algorithm basic systematic search algorithm solving csps 
algorithm value assignment subset variables satisfies constraints subset constructed 
value assignment called partial solution 
partial solution expanded adding new variables complete solution 
variable value satisfies constraints partial solution value added variable partial solution changed 
operation called backtracking 
backtracking simple depth tree search algorithm issues considered improve efficiency 
example order selecting variables values greatly affects efficiency algorithm 
various heuristics developed long history csp studies 
avalue ordering heuristic called min conflict heuristic successful heuristics 
min conflict backtracking variable tentative initial value 
tentative initial value revised variable added partial solution 
backtracking algorithm revised value satisfy constraints variables partial solution 
exist multiple values satisfy constraints partial solution choose satisfies constraints tentative initial values possible 
yokoo tex 
iterative improvement iterative improvement algorithms min conflict backtracking variables tentative initial values 
consistent partial solution constructed 
flawed solution contains variables revised hill climbing search 
min conflict heuristic guiding search process variable value changed number constraint violations minimized 
algorithms hill climbing search algorithms occasionally trapped local minima 
local minima states violate constraints number constraint violations decreased changing single variable value 
various methods proposed escaping local minima 
example breakout algorithm weight defined constraint initial weight 
summation weights violated constraints evaluation value 
trapped breakout algorithm increases weights violated constraints current state evaluation value current state larger neighboring states 
iterative improvement algorithms mistake revised conducting exhaustive search variable revised 
algorithms efficient completeness guaranteed 
exist hybrid type algorithms backtracking iterative improvement 
example weak commitment search algorithm min conflict backtracking 
algorithm variable value satisfies constraints partial solution changing variable value partial solution abandoned 
search process restarted assignments new tentative initial values 
algorithm similar iterative algorithms new tentative initial values usually better initial values previous iteration 

consistency algorithms consistency algorithms preprocessing algorithms reduce futile backtracking 
consistency algorithms classified notion consistency 
csp consistent iff instantiation variables satisfying constraints variables possible find instantiation kth variable values satisfy constraints 
variables csp csp consistent solution obtained immediately backtracking 
achieving high degree consistency requires yokoo tex computational costs find appropriate combination consistency algorithms backtracking total search costs minimized 
readings csps tsang textbook constraint satisfaction covers topics basic concepts research results 
concise overviews constraint satisfaction problems 

problem definition distributed csp distributed csp csp variables constraints distributed automated agents 
finding value assignment variables satisfies inter agent constraints viewed achieving coherence consistency agents 
achieving coherence consistency main research topics mas 
described section various application problems mas formalized distributed csps extracting essential part problems 
formalize problem distributed csp don develop algorithms solving scratch various algorithms solving distributed csps developed 
assume communication model 
agents communicate sending messages 
agent send messages agents iff agent knows addresses agents 
delay delivering message finite random 
transmission pair agents messages received order sent 
agent variables tries determine values 
exist inter agent constraints value satisfy inter agent constraints 
formally exist agents belongs agent relation represented belongs 
constraints distributed agents 
fact agent knows constraint predicate represented known 
wesay distributed csp solved iff conditions satisfied 
belongs value assigned known true assignment yokoo tex noted algorithms solving distributed csps similar parallel distributed processing methods solving csps research motivations fundamentally different primary concern parallel distributed processing efficiency choose type parallel distributed computer architecture solving problem efficiently 
contrast distributed csp exists situation knowledge problem variables constraints distributed automated agents 
example agent designed owned different person organization exist multiple agents different partial knowledge global problem 
main research issue howto reach solution situation 
knowledge problem gathered single agent agent solve problem normal centralized constraint satisfaction algorithms 
collecting information problem requires communication costs costs translating knowledge exchangeable format 
furthermore application problems gathering information agent undesirable impossible security privacy reasons 
cases multiple agents solve problem centralizing information 

application problems distributed csps various application problems mas formalized distributed csps 
example multi agent truth maintenance system distributed version truth maintenance system 
system exist multiple agents truth maintenance system 
agent uncertain data believed believed shares data agents 
agent determine label data consistently shared data label 
multi agent truth maintenance task formalized distributed csp piece uncertain data variable value dependencies constraints 
example represent dependencies nogoods fly wing mammal bird bird penguin fly course research motivations different algorithm useful 
far authors know existing parallel distributed processing methods solving csps suitable distributed csps usually require global knowledge control agents 
yokoo tex penguin fly bird mammal wing fly agent agent 
multi maintenance system class problems formalized distributed csp resource allocation problems 
problem allocating tasks resources agents exist inter agent constraints problem formalized distributed csp viewing task resource variable possible assignments values 
example multi stage negotiation protocol deals case tasks independent ways perform task plans 
goal multi stage negotiation find combination plans enables tasks executed simultaneously 
show example problem communication network multi stage negotiation protocol 
communication network consists multiple communication sites communication links 
sites geographically divided regions region controlled different agents 
agents try establish communication channels connection requests goals capacity constraints communication links 
agent recognizes part global plan establishing channel called plan fragment 
example assume goal connecting 
agent recognizes plan fragments uses uses 
problem easily formalized distributed csps agent variable represents goal possible values variable plan fragments 
multi agent model resource allocation problems developed 
formalization task agents resource agents agents cooperatively allocate shared resources limited capacity 
problems formalized distributed csps 
case task agent variable task yokoo tex 
distributed resource allocation problem knowledge constraints associated variable 
task agent communicate constraint agents find related constraints satisfied 
time tabling tasks class application problems formalized distributed csps 
example nurse timetabling task described involves assigning nurses shifts department hospital 
time table basically independent exist inter agent constraints involving transportation nurses 
real life problem departments nurses department weekly assignments solved distributed csp techniques 
application problems concerned finding consistent combination agent actions decisions distributed scheduling distributed interpretation problems formalized distributed csps 

algorithms solving distributed csps section assumptions simplicity describing algorithms 

agent exactly variable 

constraints binary 

agent knows constraint predicates relevant variable 
yokoo tex relaxing assumptions general cases relatively straightforward 
deal case agent multiple local variables section 
identifier represent agent variable 
assume agent variable unique identifier 
agent call set agents directly connected link neighbors show classification search algorithms described table 
algorithms classified basic algorithm backtracking iterative improvement hybrid type problems mainly deals distributed csps single local variable multiple local variables distributed partial csps 
algorithms described sections 
table algorithms solving distributed csps single multiple partial backtracking asynchronous bt asynchronous ir section section iterative distributed breakout improvement section section asynchronous ws agent ordering aws hybrid section variable ordering aws section 
asynchronous backtracking 
algorithm asynchronous backtracking algorithm distributed asynchronous version backtracking algorithm :10.1.1.25.6848
main message types communicated agents ok messages communicate current value nogood messages communicate new constraint 
procedures executed agent receiving ok message nogood message described ii respectively 
asynchronous backtracking algorithm priority order variables agents determined agent communicates agents ok messages 
agent maintains assignment agents viewpoint called agent view 
priority order determined yokoo tex alphabetical order variable identifiers preceding variables alphabetical order higher priority 
assignment current value assignment consistent assignments higher priority agents 
exists value consistent higher priority agents agent generates new constraint called nogood communicates nogood higher priority agent iii higher priority value 
nogood subset agent view agent able find subset 
ideally nogood generated iii minimal subset nogood 
finding minimal nogoods requires certain computation costs agent non minimal nogoods 
simplest case agent view nogood 
noted agent acts asynchronously concurrently agents communicate sending messages agent view may contain obsolete information 
agent view says current assignment may changed value 
higher priority agents agent view simple control method orders higher priority agent change value agent view may obsolete 
agent needs generate communicate new nogood receiver new nogood check nogood violated agent view 
completeness algorithm finds solution exists terminates solution exists guaranteed :10.1.1.25.6848
outline proof follows 
show agent highest priority falls infinite processing loop 
assuming agents stable state show agent falls infinite processing loop 
prove agents fall infinite processing loop mathematical induction 

example show example algorithm execution 
receiving ok messages agent view possible value consistent agent view new nogood generated 
chooses lowest priority agent nogood sends nogood message 
receiving nogood message records 
nogood contains agent neighbor new link added requests send value adds yokoo tex received ok revise agent view check agent view received nogood nogood ii record nogood new constraint nogood contains agent neighbor request add neighbor add neighbors old value current value check agent view old value current value send ok current value procedure check agent view agent view current value consistent value consistent agent view backtrack select agent view consistent current value send ok neighbors procedure backtrack generate nogood iii empty nogood broadcast agents solution terminate algorithm select lowest priority nogood send nogood tox remove agent view check agent view procedures receiving messages asynchronous backtracking agent view checks value consistent agent view 
agent view assignment violate received nogood possible value generates new nogood sends nogood message 
yokoo tex ok ok agent view nogood nogood new link agent view add neighbor request example algorithm execution asynchronous backtracking 
asynchronous weak commitment search 
algorithm limitation asynchronous backtracking algorithm agent variable ordering statically determined 
value selection higher priority agent bad lower priority agents need perform exhaustive search revise bad decision 
asynchronous weak commitment search algorithm introduces min conflict heuristic reduce risk making bad decisions 
furthermore agent ordering dynamically changed bad decision revised performing exhaustive search 
yokoo tex procedure executed agent checking agent view described procedures basically identical asynchronous backtracking algorithm 
differences procedure asynchronous backtracking algorithm follows 
priority value determined variable priority value communicated ok message 
priority order determined communicated priority values variable agent larger higher priority ties broken alphabetical order 
consistent agent view constraint variables higher priority agents satisfied agent changes value min conflict heuristic 
find consistent value agent view sends nogood messages agents increases priority value ii 
generate new nogood change priority value wait message 
procedure needed guarantee completeness algorithm 
completeness algorithm guaranteed 
overview proof follows 
changed new nogood 
number possible nogoods finite changed infinitely 
certain time point priority values stable 
stable asynchronous weak commitment search algorithm basically identical asynchronous backtracking algorithm 
asynchronous backtracking guaranteed complete asynchronous weak commitment search algorithm complete 
note completeness algorithm guaranteed fact agents record nogoods far 
practice restrict number recorded nogoods agent records fixed number nogoods 

example execution algorithm illustrated distributed queens problem 
initial values shown 
agents communicate values 
values parentheses represent priority values 
initial priority values 
equal priority order determined yokoo tex procedure check agent view agent view current value consistent value consistent agent view backtrack select agent view consistent minimizes number constraint violations lower priority agents current value send ok current priority neighbors procedure backtrack generate nogood empty nogood broadcast agents solution terminate algorithm new nogood ii send agents nogood current priority max max maximal neighbors select agent view consistent minimizes number constraint violations lower priority agents current value send ok current priority neighbors 
procedure checking agent view asynchronous weak commitment search alphabetical order identifiers 
value consistent agent view 
sends nogood messages increases 
case value minimizing number constraint violations conflicts 
selects sends ok messages agents 
tries change value 
sends nogood messages increases 
case value minimizes number constraint violations 
example selects sends ok messages agents 
changes value solution obtained 
yokoo tex example algorithm execution asynchronous weak commitment search distributed queens problem exists solution value 
see bad decision assigning value revised exhaustive search 

distributed breakout algorithm 
algorithm described section breakout algorithm weight defined constraint summation weights constraint violating pairs evaluation value 
basic ideas implementing distributed version breakout algorithm follows 
guarantee evaluation value improved neighboring agents exchange values possible improvements agent maximally improve evaluation value value 
note agents neighbors possible change values concurrently 
detecting fact agents trapped local minimum requires global communication agents agent detects fact quasi condition local minimum detected local communications 
algorithm kinds messages ok improve communicated neighbors 
procedures executed agent receiving ok improve messages shown 
agent alternates wait ok mode wait improve mode ii 
improve message communicate possible improvement evaluation value 
define fact agent quasi local minimum follows 
violating constraint possible improvement neighbors 
yokoo tex example distributed graph coloring problem obvious current situation real local minimum constraint violating agents quasi local minimum vice versa 
example shows instance distributed graph coloring problem agents exist 
agent tries determine color neighbors color possible colors white black 
quasi local minimum situation real local minimum improve evaluation value 

example show example algorithm execution 
assume initial values chosen 
agent communicates initial value ok messages 
receiving ok messages neighbors agent calculates current eval improve exchanges improve messages 
initially weights equal 
initial state improvements agents equal 
weights constraints nogoods white white black black white white increased 
improvements improvements 
agents values precedes alphabetical order neighborhood 
agents change value white black 
improvements agents 
changes value white constraints satisfied 

distributed consistency algorithm achieving consistency multiple agents relatively straightforward algorithm achieved iteration local processes 
distributed system achieves arc consistency resource allocation tasks developed 
system 
tex wait ok mode received ok add view received ok messages neighbors send improve goto wait improve mode goto wait ok mode procedure send improve current eval evaluation value current value improve possible maximal improvement new value value gives maximal improvement send improve improve current eval neighbors wait improve 
mode ii received improve improve eval record message received improve 
messages neighbors send ok clear agent view goto wait ok mode goto wait improve mode procedure send ok improvement largest neighbors current value new value quasi local minimum increase weights constraint violations send ok current value neighbors procedures receiving messages distributed breakout 
example algorithm execution distributed breakout yokoo tex tains arc consistency re achieve arc consistency dynamic changes variables values constraints small computational effort utilizing dependencies 
higher degree consistency achieved hyperresolution consistency algorithm 
distributed consistency algorithm achieves consistency described 
algorithm agents communicates nogoods generate new nogoods length hyper resolution rule 

extensions problem formalization 
handling multiple local variables far assume agent local variable 
developed algorithms applied situation agent multiple local variables methods methods efficient scalable large problems 
method agent finds solutions local problem 
finding solutions problem re formalized distributed csp agent local variable domain set obtained local solutions 
agents apply algorithms case single local variable 
drawback method local problem large complex finding solutions local problem virtually impossible 
method agent creates multiple virtual agents corresponds local variable simulates activities virtual agents 
example agent local variables assume exist virtual agents corresponds agent simulates concurrent activities virtual agents 
case agent local solutions 
communicating agents usually expensive performing local computations wasteful simulate activities multiple virtual agents distinguishing communications virtual agents single real agent communications real agents 
prioritization agents introduced handle multiple local variables call algorithm agent ordering aws 
yokoo tex algorithm agent tries find local solution consistent local solutions higher priority agents 
exists local solution backtracking modification prioritization occurs 
various heuristics determining ordering agents examined 
method described agent searches local solutions required finding solutions advance 
extension asynchronous weak commitment search algorithm handle multiple local variables variable ordering aws developed 
algorithm similar method characteristics 
agent sequentially changes values local variables 
specifically selects variable highest priority variables violating constraints higher priority variables modifies value constraints higher satisfied 
exists value satisfies constraints higher agent increases 
iterating procedures local variables satisfy constraints higher agent sends changes related agents 
satisfy constraints higher 
changing value lower priority variable value higher fixed usually wasteful 
accordingly value highest 
sending messages agents agent finds consistent local solution agents reduce 
algorithm local solution selected higher priority priority agent exhaustively search local problem 
simply increases priority values certain variables violate constraints bad local solution 

distributed partial constraint satisfaction application problems mas formalized distributed csps constrained problem instance constraints exists solution satisfies constraints completely 
case distributed constraint satisfaction algorithms described section fail provide useful information algorithm complete simply reports yokoo tex problem solution algorithm incomplete terminates 
application problems incomplete solution satisfies constraints possible 
example distributed resource allocation problem agents try find combination plans enables agents tasks executed resource constraints 
agents need perform tasks scarce resources problem instance mapped constrained distributed csp problem instance want instance modified order solvable 
furthermore distributed interpretation problem agent assigned task interpret part sensor data 
goal agents find globally consistent interpretation communicating local interpretations 
agents incorrect interpretations due noisy sensors problem instance constrained 
problem instance wewould get approximate solution 
section show general framework dealing constrained distributed csps called csps 
describe subclasses distributed partial csps distributed maximal csps agent tries find variable values minimize maximal number violated constraints agents distributed hierarchical csps agent tries find variable values minimize maximal degree importance violated constraints agents 

problem formalization intuitively distributed partial csp agents try find solvable distributed csp solution relaxing original constrained distributed csp original problem relaxed measured globally defined function global distance function 
agents prefer problem closer original problem case want relaxation minimal 
distributed partial csp formalized terms partial csp dealing constrained centralized csps 
defined components set agents mg ps agent 
yokoo tex agent original csp part original distributed csp set universes set potential values variable furthermore ps set relaxed csps including partial order ps locally defined distance function problem space 
global distance function distributed problem spaces necessary sufficient bounds global distance original distributed csp set agents solvable distributed csp set solvable csps agents comes ps 
solution distributed partial csp combination solvable distributed csp solution global distance original distributed csp solvable distributed csp solution distributed partial csp suffice global distance original distributed csp solvable distributed csp solution distributed partial csp solution global distance original distributed csp solvable distributed csp minimal 
general model specialized various ways 
going subclasses problems distributed maximal csps distributed hierarchical csps 

distributed maximal csp distributed maximal csp problem agent tries find variable values minimize maximal number violated constraints agents 
problem corresponds finding optimal solution distributed partial csp 
agent ps possible csps obtained removing constraints agent distance csp ps measured number constraints removed 
global distance measured max agent tries satisfy constraints possible solution criterion considered reasonable compromise agents number constraint violations worst agent minimized 
algorithms solving distributed maximal csps 
synchronous branch bound algorithm universe relaxing problem enlarging variable domain 
noted kinds relaxation csp expressed terms relaxing constraint enlarging permitted values variables universe 
yokoo tex iterative distributed breakout algorithm 
synchronous branch bound algorithm simple algorithm simulates branch bound operations distributed environment 
systematically searches distributed problem space sequential manner guaranteed complete 
hand obvious drawbacks algorithm agents act predefined sequential order global knowledge required determine sequential order 
iterative distributed breakout algorithm repeatedly applies distributed breakout algorithm distributed csps 
stage iteration agent sets predetermined uniform value ub target distance starts distributed breakout algorithm 
distributed breakout algorithm modified agent detect fact agents reach state number violated constraints current target distance ub 
detecting fact agent decreases current target distance propagates new target distance agents improve messages moves stage 
stage agents know new target distance distributed breakout algorithm started new target distance 
agents continue iteration value target distance zero 
iterative distributed breakout algorithm agents perform constraint checking value changing parallel 
algorithm efficient synchronous branch bound algorithm 
algorithm complete may fail find optimal solution distributed breakout algorithm certain stage may fail find solution 
multi agent model solving maximal csps developed 
model extension multi agent model resource allocation problem described section 
model variable performs simulated annealing process combined min conflict heuristic 

distributed hierarchical csp distributed hierarchical csp problem agent tries find variable values minimize maximal importance level violated constraints agents 
problem labeled positiveinteger called importance value represents importance constraint 
constraint larger importance value considered important 
distributed hierarchical csp corresponds finding optimal solution distributed partial csp 
yokoo tex agent ps fp ff csp obtained removing constraint importance value ff 
agent distance ff defined ff 
global distance measured max solution criterion considered reasonable compromise agents 
simple algorithm solving distributed hierarchical csps called asynchronous incremental relaxation algorithm 
algorithm repeatedly applies asynchronous backtracking algorithm distributed hierarchical csps way 
stage agents try solve original distributed csp agents constraints asynchronous backtracking algorithm 
problem solved overconstrained situation distributed hierarchical csp optimally solved 
problem constrained fact identified agent produces empty nogood agents need give constraints important certain threshold 
threshold efficiently calculated importance values constraints cause empty nogood 
stage agents apply asynchronous backtracking algorithm relaxed distributed csp 
solved optimal solution distributed hierarchical csp relaxation occurs way 
agents continue process solution relaxed distributed csp 
number possible importance values finite algorithm guaranteed complete asynchronous backtracking algorithm stage complete 

comparison distributed csp algorithms section compare search algorithms solving distributed csps single local variable asynchronous backtracking asynchronous weak commitment search distributed breakout algorithm 
efficiency algorithms discrete event simulation agent maintains simulated clock 
agent time incremented simulated time unit performs cycle computation 
cycle consists reading incoming messages performing local computation sending messages 
assume message issued time available yokoo tex recipient time analyze performance terms number cycles required solve problem 
cycle corresponds series agent actions agent recognizes state world decides response state communicates decisions 
show evaluation results distributed graph coloring problems number variables agents number constraints number possible colors 
generated different problems problem trials different initial values performed trials 
set limit number cycles terminated algorithm limit exceeded counted result 
show average required cycles ratio problems completed successfully total number problems table ii 
clearly asynchronous weak commitment search outperforms asynchronous backtracking asynchronous weak commitment search mistake revised conducting exhaustive search 
table ii 
comparison asynchronous backtracking asynchronous weak commitment search sparse problems algorithm asynchronous ratio backtracking cycles asynchronous ratio weak commitment search cycles compare asynchronous weak commitment search distributed breakout 
table iii shows results number variables agents number constraints number possible colors 
table iv shows results number constraints 
assume constraints agents sparse 
setting identified critical setting produces particularly difficult phase transition problems 
see distributed breakout outperforms asynchronous weak commitment search problem instances critically difficult 
distributed breakout mode wait ok wait improve requires cycle 
agent change value cycles asynchronous 
tex commitment search algorithm agent change value cycle 
problem critically difficult worthwhile introduce control agents change values cautiously 
table iii 
comparison asynchronous weak commitment search distributed breakout sparse problems algorithm distributed ratio breakout cycles asynchronous ratio weak commitment search cycles table iv 
comparison asynchronous weak commitment search distributed breakout critical problems algorithm distributed ratio breakout cycles asynchronous ratio weak commitment search cycles 
issues provided overview existing research distributed csps 
described problem definition distributed csp showed mas application problems formalized distributed csps 
furthermore described series algorithms solving distributed csps 
remaining research issues concerning distributed csps including items 
needed develop better algorithms especially multiple local variables distributed partial constraint satisfaction problems 
yokoo tex centralized csps known difficult problem instances phase transition region provability problem instance solution 
hand don clear idea kinds problem instances distributed csps difficult problem multiple local variables 
theoretical experimental needed identify ratio inter intra constraints affect problem difficulty 
expect single algorithm efficiently solve types problems 
theoretical experimental evaluations needed clarify characteristics algorithms 
mas application problems common problem setting environment changes dynamically agents decisions real time constraints 
dynamic real time aspects incorporated distributed csp formalization 

armstrong durfee dynamic prioritization complex agents distributed constraint satisfaction problems 
proceedings fifteenth international joint intelligence 
pp 


cheeseman kanefsky taylor really hard problems 
proceedings twelfth international joint conference artificial intelligence 
pp 


collin dechter katz feasibility distributed constraint satisfaction 
proceedings twelfth international joint conference artificial intelligence 
pp 


kuwabara lesser meyer multistage negotiation distributed constraint satisfaction 
ieee transactions systems man cybernetics 

de kleer comparison atms csp techniques 
proceedings eleventh international joint intelligence 
pp 


dechter constraint networks 
shapiro ed encyclopedia artificial intelligence 
new york wiley interscience publication pp 


doyle truth maintenance system 
artificial intelligence 

freuder synthesizing constraint expressions 
communications acm 

freuder wallace partial constraint satisfaction 
artificial intelligence 
yokoo tex 
distributed constraint satisfaction problems 

muller eds distributed software agents applications 
springer verlag pp 

lecture notes computer science 

verfaillie multi agent model resource allocation problem reactive approach 
proceedings tenth european conference artificial intelligence 
pp 


yokoo distributed partial constraint satisfaction problem 
proceedings third international conference principles practice constraint programming cp 
pp 

lecture notes computer science 

huhns maintenance 
ieee transactions systems man cybernetics 

liu 
sycara multiagent coordination tightly coupled task scheduling 
proceedings second international conferenceon multi agent systems 
pp 


mackworth constraint satisfaction 
shapiro ed encyclopedia artificial intelligence 
new york wiley interscience publication pp 


mason johnson framework distributed assumption reasoning 
gasser huhns eds distributed artificial intelligence vol 
ii 
morgan kaufmann pp 


minton johnston philips laird minimizing conflicts heuristic repair method constraint satisfaction scheduling problems 
artificial intelligence 

morris breakout method escaping local minima 
proceedings eleventh national intelligence 
pp 


prosser conway muller constraint maintenance system distributed allocation problem 
intelligent systems engineering 

solving real life time tabling transportation problem distributed csp techniques 
proceedings cp workshop constraint programming applications 
pp 


sycara roth sadeh fox distributed constrained heuristic search 
ieee transactions systems man cybernetics 

tsang foundations constraint satisfaction 
academic press 

yokoo constraint relaxation distributed constraint satisfaction problem 
th international artificial intelligence 
pp 


yokoo weak commitment search solving constraint satisfaction problems 
proceedings twelfth national conference artificial intelligence 
pp 


yokoo asynchronous weak commitment search solving distributed constraint satisfaction problems 
proceedings international conference principles practice constraint programming cp 
pp 

lecture notes computer science 

yokoo durfee ishida kuwabara distributed constraint satisfaction formalizing distributed problem solving 
yokoo tex proceedings twelfth ieee international conference distributed computing systems 
pp 


yokoo durfee ishida kuwabara distributed constraint satisfaction problem formalization algorithms 
ieee transactions knowledge data engineering 

yokoo distributed constraint satisfaction algorithm complex local problems 
proceedings third international conference multi agent systems 

yokoo ishida kuwabara distributed constraint satisfaction dai problems 
th international workshop distributed artificial intelligence 

zhang mackworth parallel distributed algorithms finite constraint satisfaction problems 
proceedings third ieee symposium parallel 
pp 

address makoto yokoo ntt communication science laboratories seika cho soraku gun kyoto japan mail yokoo cslab ntt jp phone fax yokoo tex 
