equational notion lifting monad anna dipartimento di matematica informatica universita di udine italy carsten fuhrmann school computer science university birmingham england alex simpson lfcs division informatics university edinburgh scotland appear theoretical computer science introduce notion equational lifting monad commutative strong monad satisfying additional equation valid monads arising partial map classifiers 
prove equational lifting monad representation partial map classifier kleisli category fully embeds partial category 
equational lifting monads precisely capture equational properties partial maps induced partial map classifiers 
representation theorem provides tool transferring non equational properties partial map classifiers equational lifting monads 
proved direct axiomatization kleisli categories equational lifting monads 
axiomatization interest right 
moggi strong monads provided structural discipline underpinning categorical approach denotational semantics :10.1.1.41.840:10.1.1.26.2787
underlying idea denotational distinction operational notions value computation modelling separate categories 
category values category total functions usual datatypes standard universal properties 
programs interpreted category computations obtained call value case kleisli category strong monad embodying suitable notion computation 
precise nature notion computation varies programming language modelled 
general cater various kinds possible computational ect nontermination nondeterminism input output 
see :10.1.1.41.840
concern solely simplest forms computational ect deterministic computation possible nontermination 
notion computation naturally modelled partial functions 
categorical setting looks monads embodying notions partiality 
research carried lfcs support cnr research eu tmr marie curie research training fuhrmann epsrc research gr simpson 
study lifting monads goes back rosolini moggi 
particular phd thesis rosolini considered general categorical approach partiality associated notions dominion see section dominance proved representation results categories partial functions presheaf toposes 
computer science categorical approach partiality proved value applications axiomatic domain theory synthetic domain theory :10.1.1.17.9542
spite reasons look general approaches partiality 
particular notion dominion requires partial map domain definition represented object category 
cases arguable domain objects assumed primitive 
example requirement existence prevents building syntactic models objects types programming language morphisms programs programs simple types complex 
argued syntactic models lie realm semantics 
elegant features category theory potentially allows syntax semantics treated par term models arising quotients free categories structure 
identify properties strong monad possess order kleisli category behave induced category partial maps 
standard examples monads determined partial map classifiers respect dominion review properties dominical lifting monads section 
motivated aim axiomatization lifting monads making notion domain 
domain free axiomatization explicitly allow class models include natural examples term models mentioned excluded 
section shall example term model call value pcf 
section contains principal definition notion equational lifting monad presents main results 
theorem shows kleisli categories equational lifting monads fully embed kleisli categories dominical lifting monads structure preserving functors 
immediate corollary corollary characterises conditions applying original category kleisli category stronger forms representation hold 
results justify definition equational lifting monad 
applications showing equational lifting monads inherit certain non equational properties dominical lifting monads corollaries 
proof theorem occupies remainder 
development directed proof independent interest 
sections provide alternative perspective equational lifting monads giving direct axiomatization categorical structure kleisli categories 
continues tradition exemplified robinson rosolini notion category providing direct domain free axiomatizations categories partial maps 
case categories axiomatized categories correspond categories partial maps suitable product structure 
structure require category addition kleisli category equational lifting monad associated total category 
axiomatization categories obtained extending notion kleisli category provides direct axiomatization categories arise kleisli categories necessary additional structure obtain notion kleisli category 
section characterise kleisli category arises kleisli category dominical lifting monad theorem 
characterisation similar theorem requires collection idempotents kleisli category split 
show structure kleisli category preserved formal idempotent splitting allowing kleisli category embedded dominical 
preservation result priori obvious kleisli category structure natural technical sense word 
section complete proof theorem making crucial results constructions previous sections 
characterise equational lifting monad dominical theorem discuss miscellaneous properties lifting monads 
preliminaries section briefly review facts require monads monoidal categories strong monads idempotent splittings :10.1.1.41.840
reader may prefer skip section refer back necessary 
general remarks policy structure preserving functors categories additional structure 
cases correct general notion functor functor specified natural transformations satisfying appropriate coherence conditions 
shall assume restrictive notion structure preserving functor natural transformations required isomorphisms 
literature special structure preserving functors identified adjective strong 
special case assumed natural isomorphisms fact identities call functors strict 
adopt policy stating results arbitrary structure preserving functors mediated natural isomorphisms give proofs just special case strict functors 
serves reduce notational clutter proofs adapt easily non strict case 
monad category write kleisli category associated left adjoint functor right adjoint 
shall refer monad just naming underlying functor 
say monad satisfies mono property components ta mono equaliser property diagrams ta 
mono property easily seen equivalent faithfulness faithfulness equaliser property trivially implies mono property fact equivalent component ta regular mono lemma 
suppose monad monad say functor monad preserving comes natural transformation ft discussed isomorphism 
monad preserving functor determines functor fk kleisli categories mapping tb ff fa fb 
say kleisli full resp 
kleisli faithful mean induced functor fk full resp 
faithful 
observe full faithful imply kleisli full kleisli faithful respectively 
converse implications closely linked properties 
proposition suppose monad monad monad preserving 

suppose kleisli faithful mono property holds faithful mono property holds 
suppose kleisli full kleisli faithful equaliser property holds full faithful equaliser property holds proof stated give proof case strict monad preserving 

functor mono property resp 
equivalent faithfulness resp 

equivalence follows equality fk 
right left implication faithfulness follows 
prove fullness take fa fb 
find consider fa fb 
fk full exists fh ft fh faithfulness fk satisfies equaliser property exists fh mono converse consider tb ff ff satisfies equaliser property exists fa fb ff full exists obtain ff 
faithful uniqueness follows fact mono mono faithful 
shall interested conditions monad preserving functors preserve existing pullbacks proposition applies equally type limit 
proposition suppose monad monad monad preserving 

fk preserve pullbacks reflects pullbacks preserves pullbacks 

preserve pullbacks fk reflects pullbacks preserves pullbacks 
proof preserves reflects limits right adjoint descent type 
kj preserves pullbacks 
similarly preserves pullbacks 

fk preserve pullbacks fk reflects pullbacks preserves 

preserve pullbacks fk fk reflects pullbacks preserves symmetric monoidal structure functor cc object unit natural isomorphisms satisfying coherence diagrams ch vii 
symmetric monoidal structure say functor monoidal comes natural transformation id id morphism subject coherence conditions ch 
xi addition discussed isomorphisms 
symmetric monoidal structure strong monad monad natural transformation tb strength satisfies equations id id id dual ta defined 
strong monad commutative case write ta tb map symmetric strength 
strong monad say strong monad preserving monad preserving monoidal id 
shall interested strong monads arising monoidal structure specified finite products case take usual natural transformations defined tuples projections 
cases monoidal functors strong monad preserving functors automatically preserve finite product structure true assuming structure preserved isomorphism 
category idempotent endomorphism idempotent said split exist maps id collection idempotents category split objects idempotents morphisms identity object 
composition inherited contains identities full faithful functor split mapping object id idempotent idempotent splits split 
functor preserves existing limits colimits yoneda dual factor 
dominical lifting monads section review standard categorical approach partiality notion lifting monad induces 
definitions results contained implicitly 
range computationally motivated examples :10.1.1.17.9542
definition dominion category collection monomorphisms closed composition contains isomorphism closed pullback arbitrary morphisms 
category dominion 
symbol represent monos partial map object object equivalence class spans form equivalence identifying exist maps 
equations involving monos imply inverse isomorphisms 
conditions imposed just needed collection partial maps form category objects 
particular composition performed closure pullbacks 
write category partial maps 
evident faithful functor identity objects 
definition say partial map classifiers object exists object lb morphism lb partial map exists unique characteristic map lb square pullback 
lb existence partial map classifiers equivalent representability functors op set turn equivalent existence functor right adjoint right adjoint exists unit provides partial map classifiers collection pullbacks components dominion 
adjunction composite kj associated monad structure 
bijective objects category partial maps isomorphic kleisli category monad 
aim analyse properties monad enjoy order kleisli category behave category partial maps 
monads derived partial map classifiers paradigmatic examples lifting monads 
purposes useful name 
definition say monad category dominical lifting monad exists dominion partial map classifiers monad determined adjunction 
instructive analyse structure dominical lifting monad directly terms associated partial map classifiers 
unit family la required definition 
multiplication la unique map making square pullback 
id la dominical lifting monads properties shared arbitrary monads 
example natural transformations cartesian naturality squares la lf lb la lf lb pullbacks 
implies satisfies equaliser property 
addition preserves existing pullbacks 
reflects pullbacks cube pullbacks walls squares 
suppose specified finite products 
strong monad unique strength lb defined characteristic map 
ab id ab lb id la defined analogously 
pasting pullback squares straightforward verify monad commutative symmetric strength obtained unique morphism making square pullback 
id ab la lb important consequence discussion partial map classifiers lb unique dominical lifting monad unit 
action morphisms determined left hand pullback 
similarly multiplication determined pullback 
specified finite products unique strength determined defining pullback 
equational lifting monads previous section investigated properties dominical lifting monads 
main definition aims precisely identify equational properties 
definition say strong monad category specified finite products equational lifting monad commutative diagram commutes la la la id la la la la diagonal product 
previous section established dominical lifting monad commutative strong monad 
diagram commutes diagrams pullbacks second cartesian 
id la id la id la la la la id la la id la uniqueness characteristic maps id 
dominical lifting monad category finite products equational lifting monad 
give example equational lifting monad dominical section 
goal twofold show equational lifting monads possess equational properties dominical lifting monads characterise precise conditions non equational properties dominical lifting monads hold equational lifting monads 
start simple proposition establishing basic equational properties 
proposition equational lifting monad diagrams commute 
la la la id la la proof equality follows equation strong monad equations expanding lt second equality naturality obtains id id 
left hand diagram expresses equational lifting monad relevant sense jacobs 
commutative relevant monad equational lifting monad 
simple counterexample monad set 
right hand diagram couple interesting consequences 
easy consequence equation id la part non equational axiomatization lifting monads 
consequence arrows 
la jointly monic split mono 
main theorem state equational lifting monad su ciently represented dominical lifting monad 
definition strong monad dominical representation category finite products dominical lifting monad preserving functor refer representation kleisli full faithful property mentioned holds representing functor commutativity equation diagram viewed equations kleisli category morphisms 
equations hold dominical lifting monad 
follows strong monad kleisli faithful dominical representation necessarily equational lifting monad 
principal theorem gives strengthened converse observation 
theorem equational lifting monad dominical representation kleisli full kleisli faithful fk preserves limits colimits existing cl proof theorem section preparatory occupying remainder 
immediate corollary obtain precise conditions strengthened forms representation possible 
corollary equational lifting monad 

faithful kleisli full dominical representation satisfies mono property 

full faithful dominical representation satisfies equaliser property 

full faithful dominical representation preserves existing finite limits satisfies equaliser property preserves existing pullbacks 
proof theorem statements immediate proposition 
statement follows proposition underlying functor dominical lifting monad preserves reflects pullbacks see section functor fk theorem preserves reflects limits reflects full faithful dominical representation assumed preserve finite products preserves existing finite limits preserves existing pullbacks 
worth explaining significance theorem corollary 
notion dominical lifting monad corresponds accepted categorical notion partiality associated category partial maps obtained kleisli category 
aim establish equational lifting monads kleisli category acts just category partial maps determined dominical lifting monad 
theorem states sense case 
corollary quantifies base category equational lifting monad related dominical lifting monad 
give applications theorem corollary illustrating establish non equational properties equational lifting monads 
recall definition cartesian natural transformation see text diagram 
corollary equational lifting monad cartesian 
proof su ces apply representing functor right hand diagram note arrows involved arrows kleisli category fullness faithfulness fk imply result 
pullback property exhibited explicitly 
consider bottom right cospan right hand square la cone diagram 
required universal map fact original proof cartesian directly verified map required properties 
shall direct proof extremely long especially verification equation 
contrast pleasing cartesian property falls easily representation theorems 
theory possible extract direct verification required map unwinding proof theorem 
theorem analogous way transfer pullback properties dominical lifting monads equational lifting monads example establish diagram pullback equational lifting monad 
pullbacks transfer automatically 
corollary equational lifting monad cartesian natural transformation equaliser property holds 
proof left right implication easily proved arbitrary monad 
right implication follows theorem corollary full faithful dominical representation reflects pullbacks 
section promised example computationally natural term category equational lifting monad dominical 
example consider call value version pcf types unit int terms example ch 
extended obvious way singleton type unit define category pcfv objects types 
define morphisms say closed term total values canonical forms terminology ch 
evaluation application term terminates notation ch 

morphisms equivalence classes total closed terms type modulo operational contextual equivalence 
composition 
identities obvious 
category pcfv finite products product operation types 
natural syntactically defined equational lifting monad 
underlying functor maps type type unit action morphisms maps unit 
unit 
unit monad unit counit unit unit unit 
strength monad unit 
unit fst snd 
bit commutativity monad corresponds operational equivalence range arbitrary terms expressions typed 
equational lifting monad equation amounts operational equivalence unit unit unit unit 
unit inclined readers may wish verify claims 
essentially tasks involved translating required structure category properties monad operational equivalences second verifying operational equivalences 
shall return example section 
kleisli categories previous sections category monad taken primitive notion equational lifting monad defined order capture idea kleisli category interesting category partial maps 
occasion arguably natural consider partial category primitive category 
example case category partial functions associated product structure approach adopted robinson rosolini categories 
sections provide direct axiomatization kleisli categories equational lifting monads partial categories interest 
axiomatization obtained extending fuhrmann kleisli categories directly axiomatize structure kleisli categories monads 
section review definitions results shall need special case commutative kleisli category relevance 
section shall extend axiomatization equation corresponding additional properties equational lifting monads give notion kleisli category 
definition kleisli category category 
functor 
transformation ga called thunk 
natural transformation ga called force natural transformation diagrams commute ga ga ga id id ga ga category monad kleisli category cl forms kleisli category 
endofunctor gl cl cl obtained composite cl cl adjunction determined monad 
objects gla la thunk morphism gla cl force map gla cl just counit adjunction explicitly identity la id la show conversely kleisli category determines category monad isomorphic kleisli category monad 
definition kleisli category morphism said diagram commutes ga gf gb collection maps forms subcategory write subcategory inclusion functor 
functor right adjoint natural isomorphism gb defined gf adjunction composite determines monad shown monad satisfies equaliser property kleisli category isomorphic kleisli category explain define functors kleisli categories 
kleisli categories functor fk said preserve kleisli structure maps morphisms morphisms addition induced natural transformation fkg fk transformation mean arbitrary family arrows indexed objects 
isomorphism 
general discussion structure preserving functors section applies definition 
functors preserving kleisli structure correspondence monad preserving functors result summarises discussion far 
proposition kleisli category inclusion functor right adjoint inducing monad strictly isomorphic kleisli category satisfies equaliser property 
constructions map category monad induced kleisli category cl gl map kleisli category induced category monad satisfying equaliser property 
suppose start category monad write cl category obtained extracting maps kleisli category construed kleisli category 
monad preserving functor cl mapping morphism morphism cl isomorphism categories satisfies equaliser property 
fact component unit adjunction exhibiting large category small kleisli categories structure preserving functors full reflective subcategory large category small categories monads monad preserving functors 
functor maps monad satisfying equaliser property 
apply construction equational lifting monads need ensure strength commutativity equation preserved 
notion kleisli category introduced extend reflection theorem strong monads 
interested commutative strong monads 
allows complications general strong monads avoided particular monoidal structure premonoidal structure 
definition commutative kleisli category kleisli category symmetric monoidal structure distinguished finite products induced symmetric monoidal structure strictly preserved inclusion functor functor fk commutative kleisli categories structure preserving preserves kleisli structure symmetric monoidal structure 
functors automatically preserve finite product structure subcategories maps 
projections finite products diagonal unique arrow 
arbitrary maps define special case unique morphism important note equalities hold arbitrary projection natural non discarded argument lemma commutative kleisli category arbitrary morphisms id id category finite products commutative strong monad induced kleisli category cl forms commutative kleisli category cl generated product strength see 
conversely commutative kleisli category inclusion right adjoint determining commutative strong monad induced commutative kleisli category isomorphism 
constructions combined obtain category commutative strong monad category cl commutative strong monad satisfying equaliser property strong functor cl note cl constructed exactly case strength proposition applies mutatis mutandis 
section returning example showing obtain arguably simpler presentation presenting kleisli category pcfv directly kleisli category 
example define category pcfv objects pcfv morphisms equivalence classes arbitrary closed terms type modulo operational contextual equivalence 
identities composition 
kleisli structure required endofunctor defined way monad functor example thunk defined way unit monad longer natural inclusion non total terms category 
force simply unit unique constant unit type 
order verify commutative structure observation crucial 
morphism operational equivalence holds unit 
unit context lemma call value pcf verifies equivalence holds total 
notation suggests pcfv subcategory maps pcfv 
kleisli categories direct axiomatization kleisli categories commutative strong monads 
remains deal extra equation equational lifting monad 
equation expressed terms structure commutative kleisli category 
definition kleisli category commutative kleisli category diagram commutes ga id id ga proposition commutative strong monad equational lifting monad cl construed commutative kleisli category kleisli category 
unsurprisingly pcfv example kleisli category 
remainder section shall investigate properties kleisli 
particular shall show kleisli categories form categories sense terminology 
useful identify classes maps enjoy properties maps respect commutative structure 
definition suppose commutative kleisli category 
morphism called copyable left hand diagram commutes 
called discardable right hand diagram commutes 
notions proposition kleisli categories contains crucial fact morphisms copyable provides useful ways proving equality morphisms joint 
proposition commutative kleisli category equivalent 
kleisli category 

morphism copyable object morphisms ga ga jointly monic 

objects jointly monic id proof observe morphism 
copyable copyable see copyable consider id id id id diagram see la jointly monic gb natural analogously 


copyable 
morphism split mono id id id id id diagram id implies 
see jointly monic suppose morphism copyable prove id jointly monic 
id penultimate step application lemma 
id id step follows lemma 
diagram follows joint id id id id shall explain kleisli category forms category 
refer axiomatization categories 
kleisli category 
provides functor transformations required category 
required naturality equivalent fact morphism copyable proposition 
equations definition category involving projections diagonal hold transformations inherited finite products associativity twist maps formed natural inclusion functor sends symmetric monoidal isomorphisms naturality projections non discarded argument lemma 
discussion sees commutative kleisli category forms category morphism copyable 
categories exactly kleisli categories commutative relevant monads sense see discussion proposition 
kleisli category monad set forms category induced commutative kleisli structure kleisli category jointly monic 
appreciate need joint see far get property 
suppose commutative kleisli category map copyable category 
associate domain map map defining id importance domain maps apparent 
fact cockett lack restriction categories provide general axiomatization categories partial maps entirely equational properties domain maps 
properties single pp 

proposition morphism follows immediately domain map idempotent 
category domain maps determine notion total morphism 
definition morphism said total id total maps form subcategory pt straightforward consequence proposition mono total 
totality corresponds notion met 
proposition morphism total discardable 
proof total id lemma id conversely discardable id id id id theorem identify property characterises kleisli categories equational lifting monad subcategory morphisms dominical 
shall obtain dominion subcategory total maps maps total maps coincide 
property hold arbitrary commutative kleisli categories morphism copyable 
example fails kleisli category monad 
obtaining coincidence classes maps crucial reason requiring joint 
proposition kleisli category morphism discardable 
proof left right implication question 
holds discardable equation gf follows immediately joint 
dominical kleisli categories notion kleisli category captures kleisli categories equational lifting monads 
section characterise kleisli categories dominical lifting monads show kleisli category fully embeds dominical kleisli category 
definition say commutative kleisli category dominical kleisli category exists category specified finite products dominion partial map classifiers isomorphic commutative kleisli categories 
theorem commutative kleisli category equivalent 
dominical kleisli category 

monad induced kleisli structure dominical 

kleisli category domain map splits 
proof implication trivial qua kleisli category induced monad isomorphic dominion inducing dominical monad isomorphism preserving commutative kleisli structure 
suppose dominical 
category partial maps dominion restriction operator sends partial map splitting mono id epi id suppose kleisli category domain map splits 
identify dominion category pt total maps see section 
dominion defined domain map splits note mono pt dominion follows 
proof uses category structure example construct required pullbacks suppose pt obtained splitting domain map obtained splitting square required pullback show pt 
partial map pt splitting witnessing associated map independent choice splitting 
conversely map split associated partial map pt hold pt 
constructions mutually inverse verified category structure isomorphism pt constructed easily shown commute inclusion functors pt pt pt complete proof propositions categories pt coincide 
hj right adjoint kh induced kleisli structure unit 
discussion section monad induced adjunction dominical 
definition adjunction monad exactly induced functor kj kleisli structure remainder section theorem show kleisli category full faithful structure preserving embedding dominical kleisli category 
theorem analogous constructions surprise obtain embedding idempotent splitting see section 
unexpected element arise verification construction 
general appears kleisli structure extend category category split 
special case kleisli category split inherit structure 
example proof joint verify split kleisli category derive structure 
proposition suppose kleisli category collection idempotents contains identities closed application split kleisli category split strictly preserves commutative kleisli category structure 
proof show split forms kleisli category 
required structure defined follows ga object part gf morphism part ga ga square definition kleisli category checked joint 
equations straightforward 
symmetric monoidal product unit define object part morphism part id structural isomorphisms defined id id coherence equations easily verified prove form finite products split projections required equation proved joint 
case needs lemma define check finite products shall repeatedly lemma lemma morphism split 
lemma holds second equation results sides equation 
uniqueness follows directly lemma equation stating split follows joint 
see forms cartesian product split morphisms split claim unique pair formed 
lemma jointly monic uniquely determined 
check split 
morphism copyable 
obviously 
see observe id lemma morphism copyable id lemma analogously get required equation proved joint sides followed straightforward 
consider lemma 
id id 
know cartesian product split check morphism part induced cartesian product functor agrees functor defined earlier 
remains prove coincide corresponding maps induced finite product structure split lemma naturality similar calculation works cases trivial 
see split kleisli category su ces verify diagram follows easily remains verify functor split strictly preserves commutative kleisli category structure 
immediate definition structure split 
completes proof proposition 
corollary suppose kleisli category 
collection idempotents split dominical kleisli category split full faithful functor preserves existing limits colimits strictly preserves commutative kleisli category structure 
proof proposition split kleisli category functor split full faithful structure preserving including limits colimits 
split dominical follows theorem idempotents split split just domain maps 
section proof 
order expand kleisli category dominical kleisli category really necessary split idempotents spite theorem su ce split domain maps satisfy closure conditions required proposition 
possible define collection maps containing identities closed rule 
follows maps idempotents 
dominical kleisli category obtained split universal property free dominical kleisli category universal property expressed terms adjunction category kleisli categories dominical subcategory lines adjunctions exhibited 
equational lifting monads revisited having taken thorough look kleisli category account lifting return initial viewpoint category monad taken primitive 
piecing various results proved kleisli categories obtain swift proof theorem 
proof theorem 
equational lifting monad proposition kleisli category cl kleisli category 
section strong monad preserving functor cl subcategory trivially kleisli full kleisli faithful isomorphism kleisli categories 
collection idempotents cl corollary split cl dominical kleisli category full faithful structure preserving functor cl split cl preserves existing limits colimits cl functor restricts strong monad preserving functor cl split cl kleisli full kleisli faithful 
theorem induced monad split cl dominical 
split cl required kleisli full kleisli faithful dominical representation worth commenting extent extensive detour kleisli categories facilitated proof theorem 
view proof dividing stages 
construction cl provides representation induced monad cl satisfying equaliser property 
representation kleisli full kleisli faithful cl defined maps original kleisli category 
construction cl kleisli categories applying reflection theorem equational lifting monads 
quite feasible reformulate part proof entirely terms equational lifting monad structure verifying directly cl carries suitable equational lifting monad entirely trivial verify cl products second stage proof constructs full faithful dominical representation monad cl theorem necessary split domain maps cl retaining property kleisli category equational lifting monad 
order verify property indispensable direct axiomatization kleisli categories structure preserved idempotent splitting identified 
notion kleisli category provides exactly 
ingredients characterise equational lifting monad dominical lifting monad 
theorem monad category finite products equivalent 

dominical lifting monad 

equational lifting monad satisfying equaliser property domain maps split kleisli category cl 
equational lifting monad satisfying equaliser property pullbacks unit exist preserves existing pullbacks 
proof section dominical lifting monad category finite products unique strength equational lifting monad satisfying properties 
implies 
immediate theorem equivalent 
complete proof showing implies 
la domain map cl 
show splits 
assumption pullback exists la show id domain map preserves pullback pullback la lm la la lm lf domain map cl idempotent lf 
lf 
obviously 
joint lf pullback gives unique la lm see provide required splitting cl lm provides equality 
show 
lm lm lm mono required equality follows 
instructive see requirement preserve pullbacks statement theorem dropped 
simple counterexample set 
define evident strong monad underlying functor lx empty equational lifting monad satisfying equaliser requirement 
obviously pullbacks unit exist 
exhibiting pullback nonempty objects easy see preserve pullbacks 
verify explicitly dominical observe pullbacks form dominion inj injective functions 
inj partial maps exactly set theoretic partial functions 
undefined partial function inj partial map represented point 
section curious fact arose discussion paul taylor 
proposition equational lifting monad equivalent 

satisfies equaliser property 

functor cl 
proof kleisli category structure cl evident full faithful functor cl coalg cl maps object comonad coalgebra ga cl comparison functor coalg cl composite cl coalg cl 
show isomorphism equaliser property holds 
remarked section functor cl isomorphism equaliser property holds 
su ces show functor cl coalg cl isomorphism 
accordingly ga comonad coalgebra show comonad coalgebra id mono propositions 
id required 
discussion grew earlier author pino rosolini 
similar motivation development di erent detail 
loc 
cit general notion lifting defined categories terminal object 
special case category finite products assume notion lifting corresponds equational lifting monad satisfying equaliser property underlying functor preserves existing pullbacks 
assuming finite products scope general notion lifting adopted strictly stronger equational lifting monad 
category finite products lifting stronger sense category constructed free category dominion cl fully embeds ptl 
functor shown preserve existing limits preserved embedding result similar spirit theorem corollary 
major di erence category lifting monad acting 
obtain stronger representation theorem weaker conditions 
separate precisely equational properties lifting monads non equational properties establish new nontrivial consequences equational properties corollary 
sight equation may curious 
intriguing connections 
example category introduced free category equational lifting monad empty set generating objects 
don precise connection worth remarking equation reminiscent euclidean principle introduced taylor part characterisation 
illuminating consider significance moggi computational lambda calculus :10.1.1.41.840:10.1.1.26.2787
appears equation corresponds body interesting see completeness formulation lead simplified meta theory partial calculus 
investigation require extending results cover partial function spaces probably straightforward programme independent interest 
applications establish properties recursion axiomatic domain theory 
general axiomatic analysis recursion carried establishing equational completeness assuming existence su ciently final coalgebras 
presence equational lifting monad kleisli exponentials parameterized natural numbers object necessary final coalgebras constructed splitting idempotents fold powers lifted objects 
constitutes equational analysis partial map classifiers 
similar projects possible worth investigating 
question equational characterisation monads kleisli categories viewed categories relations 
monads include lifting monads monads various related notions free lattice 
natural setting obtain representation theorems respect regular categories 
possible direction generalising dropping commutativity requirement equational lifting monads 
calculations commutativity apply general class strong monads satisfying equation 
reason interested generalisation class includes exception monads form :10.1.1.41.840:10.1.1.41.840
mention related robin cockett stephen lack 
building unpublished restriction categories extended axiomatization lifting monads 
nicely complements 
assume finite products underlying category emphasise equational properties representation theorems transference results 
characterise lifting monads assuming finite products provide categorical reflection theorems di erent relating classes lifting monad 
robin cockett marcelo fiore gordon plotkin pino rosolini paul taylor helpful discussions anonymous referees suggestions 
diagrams version produced paul taylor macros 
barr wells 
toposes triples theories 
springer verlag 
rosolini 
lifting 
category theory computer science proceedings ctcs 
springer lncs 
cockett lack 
restriction categories categories partial maps 
theoretical computer science appear 
cockett lack 
restriction categories ii partial map classification 
volume 
fiore :10.1.1.17.9542
axiomatic domain theory categories partial maps 
distinguished dissertation series cambridge university press 
fiore plotkin power 
complete sets axiomatic domain theory 
proceedings th annual symposium logic computer science 
fuhrmann 
direct models computational lambda calculus 
proceedings mfps xv electronic notes computer science 
hyland 
steps synthetic domain theory 
category theory proceedings como 
springer lnm 
jacobs 
semantics weakening contraction 
annals pure applied logic 
kock 
strong functors monoidal monads 
archiv der mathematik 
mac lane 
categories working mathematician 
graduate texts mathematics 
springer verlag 
second edition 
moggi 
partial lambda calculus 
ph thesis department computer science university edinburgh 
available lfcs report 
ecs lfcs 
moggi :10.1.1.41.840:10.1.1.26.2787
computational lambda calculus monads 
proceedings th annual symposium logic computer science pages 
moggi :10.1.1.41.840
notions computation monads 
information computation 

generalized banach mazur functionals topos recursive sets 
journal pure applied algebra 
robinson rosolini 
categories partial maps 
information computation 
rosolini 
continuity ectivity topoi 
phd thesis university oxford 
simpson plotkin 
complete axioms categorical fixed point operators 
proceedings th annual symposium logic computer science pages 
taylor 
geometric higher order logic stone duality 
submitted 
winskel 
formal semantics programming languages 
mit press 

