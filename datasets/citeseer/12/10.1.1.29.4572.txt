appear proc 
twelfth annual acm conference computational learning theory colt july 
theory revision queries robert sloan dept ee computer science university illinois chicago morgan st rm chicago il sloan eecs uic edu gy tur dept mathematics statistics computer science university illinois chicago research group artificial intelligence hungarian academy sciences uic edu theory revision concept revision problem correct roughly correct concept 
representation initial concept obtain representation target concept applying revisions syntactic modifications deletion variable term 
give efficient revision algorithms membership equivalence queries term monotone dnf monotone dnf formulas 
example showing monotone dnf formulas revised efficiently 
results assume revisions allowed replacements variable occurrence constant corresponds deletions variables terms 
discuss general error model deletions additions allowed 
computational learning theory community calls concept referred theory artificial intelligence logic 
machine learning problem known theory revision may viewed problem correcting roughly correct concept 
instance may acquired roughly correct theory concept desired target concept stock significantly appreciate 
theory 
amazon com attributes false true positive counterexample 
theory revised edited revising term 
partially supported nsf ccr 
partially supported nsf ccr 
aware previous uses learning theory approach theory revision problem due mooney 
results discuss bit treat problem point view sample complexity pac model 
computational efficiency posed open problem 
typical application theory revision revising theory set rules generated expert 
common assumption theory comes set labeled examples includes disagree classification provided theory 
typically ai literature supposed small revision theory classifies examples correctly 
formulate problem model learning membership equivalence queries 
equivalence queries appears reasonable scenario just discussed equivalence query simulated cycling set examples find counterexample current version theory 
counterexamples learning process terminates 
simulation require queries worst case number formal model 
addition initial theory provided expert may realistic assume expert correctly answer membership queries 
related theory revision problems including theory restructuring aimed making theory efficient transparent area theory refinement machine learning see wrobel :10.1.1.45.2389
systems theory revision propositional predicate logic 
instance system uses deductive abductive inductive components revise propositional horn theory set counterexamples 
formal theory revision includes 
considered problem fixing theory set examples gave positive result 
argamon engelson considered version revision problem called theory patching prespecified part initial theory modified 
mooney formulated approach study theory revision computational learning theory syntactic distances 
syntactic distance concept representation concept minimal number elementary operations addition deletion literal clause needed transform concept representation representation concept 
mooney proposed considering pac learnability class concepts having bounded syntactic distance concept representation 
approach provides interesting formalization availability prior knowledge learner propositional logic 
mooney observed fixed number revisions polynomial size concept classes implies logarithmic sample size needed 
problem theory revision appears guises including program debugging system diagnosis 
motivating examples angluin seminal learning queries shapiro interactive program debugging system user required provide answers queries 
reducing query complexity shapiro algorithm interest machine learning 
theories expressed propositional boolean formulas theory revision problem related fault analysis circuits switching theory see kohavi 
major problem simply fault testing determining circuit works correctly 
faulty circuits may simply thrown away 
model diagnosis similar slightly closely related field 
davis hamscher give survey field lots de kleer marcotte :10.1.1.29.4572
key concerns model diagnosis handling broad set errors typically advance 
theory revision great variety errors considered possible specify set possible errors advance 
revision theories propositional logic may assumed literals clauses superfluous missing 
view possibilities operations available edit initial formula refer revision operators 
modelbased diagnosis systems rely implicitly explicitly solving np complete inherently exponential problem enumerating minimal hitting sets set system 
areas machine learning connection theory revision 
study drifting concepts learning theory may viewed dynamic version theory revision 
written learning partial information 
examples include soar systems building machine learning case jain sharma inductive inference rivest sloan pac learning 
course theory revision viewed simply learning lot partial information 
machine learning special case learning partial information partial information empty set 
practice different techniques brought bear knows close approximation correct concept just partial information 
seek formally model phenomenon 
overview extend mooney syntactic distance approach query models particular learning equivalence membership queries 
consider complexity concept revision basic classes dnf read formulas 
revision operator equivalently error model allows replacement occurrence variable constant 
corresponds allowing deletion variable clause dnf theory revision stuck faults circuit fault analysis 
revision algorithm formula identify target concept represented formula obtained replacing certain variable occurrences constants equivalence membership queries 
revision algorithm efficient query complexity depends polynomially syntactic distance initial formula target size concept representation 
algorithms running time polynomial syntactic distance initial formula target size concept representation 
interesting feature revision complexity single formula particular dnf induces concept class single concept concept class 
revision query complexity associated individual formula standard learning complexity concept class revisions 
efficiency criterion similar notion efficiency attribute efficient learning algorithms :10.1.1.28.5776
fact interesting relationship concept revision attribute efficient learning 
informally attribute efficient learning variables irrelevant concept revision variables act known way 
obtain efficient concept revision algorithms term unate dnf unate dnf read formulas 
tractability read formulas general phenomenon areas discussed 
ptr algorithm converges closely related class read formulas called fanout free circuits switching theory provide efficiently solvable case methods fault diagnosis 
methods called path sensitization learning algorithm 
give example monotone dnf efficient concept revision algorithm 
concept classes considered small efficient learning algorithms required needs somewhat different techniques previous ones studied concept classes 
term monotone dnf simple learning equivalence membership queries difficulties revision algorithm 
query complexity revision algorithms evaluated number revisions performed 
ai typically required perform revisions possible 
general hard achieve 
ai notion theory encompasses notion single concept richer constructs multiple concepts learned time 
certainly revision propositional logic concepts falls ai notion theory revision terms theory revision concept revision interchangeably 
algorithms perform revisions possible discuss final 
organized follows 
preliminaries section give dnf revision algorithms section read formula revision algorithm section 
section contains example hard dnf 
section discusses general error model additions allowed gives examples showing positive results obtained model 
open problems mentioned section 
preliminaries standard model membership proper equivalence queries counterexamples denoted mq eq 
equivalence query learning algorithm proposes hypothesis concept concept class answer depends target concept 
answer correct learning algorithm succeeded goal exact identification target concept 
answer counterexample instance 
membership query learning algorithm gives instance answer depending mq target concept 
standard notions propositional logic variable term disjunctive normal form dnf term dnf dnf monotone unate cover formulas assume negations occur variables 
assume concepts true false included monomials sort dnf 
vector denoted vector 
boolean formula variables xn concept represented set satisfying truth assignments 
instance 
exception section revision operator fixing occurrence variable formula constant 
instance fix obtain revised formula simplified equivalent fix second occurrence obtain revised formula simplified notice dnf revision operator alternately viewed operators deleting literal term fixing occurrence variable literal true deleting term fixing variable occurrences literal false 
read formulas occurrence variable fixed write revision substitution notation oe constant 
example applying substitution oe formula gives revised formula simplifies denote set formulas obtained fixing occurrences variables constants 
corresponding concept class denoted revision distance formula concept defined minimum number applications specified set revision operators needed obtain formula noted previously specified set revision operators fixing occurrence variable constant exception section 
example showed earlier revision distance concept represented 
revision algorithm formula access membership proper equivalence oracles unknown target concept return representation target concept 
goal find revision algorithms query complexity polynomial revision distance target polylogarithmic size 
fact results provide stronger revision algorithm 
algorithms give revise class concept classes 
algorithms meta algorithms take formula specified class formulas read formulas function revision algorithm concept class notice choice revision operator plays double role 
defines concept class things reachable specified formula revision operator 
second determines revision distance gives performance metric 
general refer binary vector refer monotone term product variables corresponding likewise monotone term binary vector positions corresponding variables instance 
monotone terms term product variables example 
different product variables occurring 
vectors vector positions 
say term implicant formula symbols vectors 
fact monotone terms formula revised learning algorithm follows directly definitions occurrences variable negations exchanged revision complexity change 
algorithm monotone formula extended unate versions 
simplicity state algorithms monotone case unate case 
monotone dnf expressions simplest kinds formulas try revise monotone conjunction term monotone dnf 
usual algorithm asking membership query variable requires queries 
easy see membership queries forced gamma queries locate single variable fixed variable conjunction 
equivalence queries straightforward way 
assume initial formula delta delta delta xn negative counterexample tells variable fixed target concept false 
positive counterexample update hypothesis fix variables corresponding 
continuing way get target equivalence queries revision distance target 
notice simple problem framework theory revision obtain algorithm queries independent regular query algorithm membership equivalence queries needs queries learn monotone monomials 
omega gamma bound follows vc dimension lower bound query algorithms think precise bound known computational learning theory 
find written source give proof 
proposition algorithm membership equivalence queries learn monotone monomials variables forced queries 
proof 
give strategy adversary responding queries 
adversary initializes sets variables empty set 
sets disjoint contains variables target monomial contains variables target monomial 
consistent target concept monomial containing variables variables adversary adds variable responds query 
query bound follows 
response eq false adversary gives positive counterexample 
eq monomial adversary checks missing variable returns negative counterexample vector 
contains variable response positive counterexample vector place 
case contains proper superset variables adversary picks variable puts fvg gives positive counterexample vector place 
final case contains exactly variables adversary picks variable returns negative counterexample vector place sets fvg 
additional special case 
response eq true negative counterexample 
case adversary remember keep joj gamma 
mq missing places specified set mq 
adversary considers variables outside set mq 
set mq adversary sets fvg 
strategy forces learner queries ji joj joj gamma additional query eq true 
true considered concept class monomials gets bound gamma joj gamma remaining variable monomial 
revision algorithm monotone term dnf expressions suppose initial dnf expression xyz 
obvious strategy start query eq 
assume receive back positive counterexample 
membership query term suppose response mq mq 
revise hypothesis xyz 
constant number queries progress sense presumably reduced revision distance hypothesis target 
difficulties arise 
suppose start initial dnf expression xyz eq returns positive counterexample 
time point making membership queries term counterexample intersection term 
decide new hypothesis yz course true target terms unclear determine second term look 
potential difficulty arises initial formula delta delta delta xn gamma xn gamma xn suppose target concept xn gamma revision distance concepts delete literal xn second term fix xn 
careful adversary answering queries force approach target deleting gamma literals term omega gamma queries 
learning algorithm repeatedly uses subroutine re takes hypothesis approximates target gets positive counterexample 
succeeds acts little reduce subroutine general equivalence queries get new term membership queries reduce term strategy query learning monotone dnf 
fails need complicated arguments proceed 
repeat forever eq correct exit 
report success term mq edit return example hypothesis algorithm refine hypothesis deleting variables current terms 
describe performance guarantee algorithm need introduce definition 
say dnf mapping target dnf target dnf contains distinct terms 
observe mapping target subset target viewing subsets 
counterexample positive 
lemma hypothesis monotone dnf mq mq assume toone mapping target dnf 
claims hold 
iteration main repeat loop uses equivalence query membership queries iteration main repeat loop deletes literal term 
invariant mq maintained 

invariant mapping target dnf maintained 

returns counterexample term holds mq 
positive counterexample term target concept covers 
target concept represented terms terminates reporting success making queries revision distance target concept 
proof 
items proved induction number edits 
query usage deletions specified item obvious item ensures counterexamples positive counterexamples 
item immediately edit know mq true edited term mq vector subset vector item immediately edit know mapping target dnf 
particular term distinct target mq know implicant target dnf implicant term target dnf 
mq item mq 
implicant implicant distinct term target 
mapping target 
item fact mq guaranteed membership queries iteration repeat loop 
mapping target noted positive counterexample term target concept cover 
item target concept represented term dnf item hypothesis contains implicant term target dnf 
item guarantees terminate return statement covered term target concept term mq 
target concept correspondence mapping unique unchanged algorithm 
contradicting fact mq 
unique set deletions takes initial formula target formula deletion performed algorithm deletions 
algorithm membership queries equivalence query deletion giving query bound 
theorem monotone term dnf revision algorithm uses queries revision distance target concept 
proof 
general strategy approximate target concept 
equivalence query return positive counterexample correct 
algorithm begins membership queries return answer concept false 
query returns returns know target represented single term 
say mq mq 
call 
lemma item return correct hypothesis queries 
mq mq 
membership query mq 
returns hypothesis satisfies conditions lemma 
particular term hypothesis target concept represented term dnf 
item lemma terminates correct hypothesis queries 
mq call 
target concept represented term done lemma 
target concept represented terms form lemma eventually returns single term 
furthermore term edited amount proportional number queries 
terms set variables subset set variables write jt number variables occur notation number queries far jt hj 
membership queries mq mq 
return positive instance 
possibilities 
case exactly membership query returned say mq 
call 
observe conditions lemma apply call met 
second 

mq mq item lemma applied previous call 
target concept terms lemma item guarantees call terminate correct hypothesis jh jt queries 
total number queries jt hj jh jt counting includes additional queries asked algorithm 
notice unique correspondence initial terms final terms 
particular 
mq 
revised revised 
revision distance initial formula target jt jt jt jt jt jt hj jh query bound follows comparing equation 
case ii membership queries returned mq mq 
show case mq 
follows item lemma implicant case know false 

similarly 
implicants intersection implicant furthermore mq mq 
call 
longer unique mapping original terms final terms final terms contained revision distance correctly computed considering mappings 
observation argument similar case particular total number queries jt hj jh jt revision distance initial formula target jt jt jt jt jt jt hj jh query bound follows comparing quantities 
revision algorithm monotone dnf expressions consider problem revising dnf formula 
lemma satisfying truth assignment unknown monotone dnf identify term satisfied log membership queries proof 
give informal description procedure performs task 
initial membership query mq decides true 
assume case 
term consider sequence indices variables occurring decreasing order 
corresponding sequence delta delta delta lexicographically term covers claim term log membership queries ordering set precedes position differ smaller number 
precedes precedes 
vector obtained leaving unchanged positions setting bits 
smallest number mq 
binary search sequence delta delta delta xn holds 
ask membership query mq single component th position 
answer vector obtained keeping unchanged positions th position turning bits 
smallest number mq binary search 
continuing process identified log membership queries 
theorem dnf formula variables revision algorithm uses kd log queries revision distance target concept 
eq correct negative counterexample delete terms covering delete proper implicant revision algorithm dnf formulas proof 
query algorithm shown 
start initial hypothesis repeatedly equivalence queries current hypothesis receive negative counterexample delete hypothesis terms cover notice deleted terms deleted editing reach target get negative counterexamples spend query gain revision distance 
notice deleted terms original terms terms added terms added correct 
assume receive positive counterexample satisfies term target obtained term deleting variable 
run procedure find term add new term notice right setting ht hypothesis generally compact possible belong 
update xy xz xy xz terms original formula 
need transform semantically equivalent formula removing proper implicants argue output finish analysis query complexity begun discussion negative counterexamples 
call finds distinct new minterm target contained 
edit required obtain minterm number calls revision distance target 
total query bound follows lemma 
argue revision edits produced main loop 
introduce terminology 
form delta delta delta representation target 
assume monotone dnf form delta delta delta tm delta delta delta properties hold ffl minterm implicant ffl terms missing covers negative instance proper implicant ffl terms proper implicant claim conditions find suitable revision polynomial time queries 
follows considering bipartite graph terms left vertices terms right vertices edges corresponding implicant relation showing graph matching matches right vertex 
shown induction iteration loop satisfies conditions revision algorithm read formulas section give efficient revision algorithm read formulas 
algorithm uses technique path sensitization fault analysis switching theory see 
assume revise monotone read formula monotone read formulas disjoint sets variables 
target formula obtained replacing certain variables constants 
fix variables variables 
form vectors fixing remaining variables resp ask membership queries mq mq 
possibilities 
mq case case identically case target formula identically 
mq case case identically case identically 
fixing variables called corresponding partial truth assignment ff called truth assignment learning algorithm important notice gain information remaining third case mq mq 
case observe abnormality conclude truth assignment variables holds equal answer membership query vector consisting ff 
simulate membership queries subformula membership queries target concept enables learning algorithm proceed recursion third case 
note case possible 
detailed example showing read formula revision algorithm works 
formula revised substitution giving target formula oe target concept represented formula start asking equivalence query 
moment equivalence query serves decide target formula 
depending responses certain membership queries ask may shortly 
assume receive negative counterexample 
goal find kind binary search subformulas substitution variables occur oe equivalent effect substitutions oe 
purpose find subformula contains half variables example corresponding subformula target 
obtained applying substitution oe 
form truth assignment ff case simply sets variables ask membership queries ff ff 
answer mq ff mq ff corresponds third case discussion section 
denote part counterexample belongs denote rest write explained asking membership query mq ff determine 
knowing determine asking queries 
follows part counterexample responsible disagreement 
particular case variables happen induce subformula continue difficulties general need call point 
simply substitute negative counterexample new target obtained applying oe new initial formula new important note defined new simulate membership queries new target membership queries original target continue procedure recursively 
subsequent iterations illustrate additional cases give steps algorithm example 
half size subformula truth assignment subformula 
membership queries return indicating subformula containing turned constant 
corresponds case discussion section 
asking additional membership queries find mq mq 
shows maximal constant subformula target concept 
note case continue recursively iteration counterexample 
step compute minimal number variables need turned order subformula identically 
achieved single substitution 
completed call procedure 
current hypothesis formula obtained substitution just assume receive positive counterexample restricted variables 
continue half size subformula divides counterexample 
partial truth assignment second half 
find mq mq turned constant subformula 
notice membership oracle needs inputs fortunately may give values missing variables 
membership query mq tells half counterexample gives output corresponding subformula target 
recurse find subformula contains constant subformula variables induce subformula case need consider subformulas general omega gamma subformulas necessitating kind binary search 
definition disagrees target counterexample just concluded agrees counterexample 
subformula disagrees corresponding subformula target subformula containing constant subformula test subformula agrees target counterexample ask membership query instance formed setting values counterexample setting remaining variable value assignment query mq 
disagrees target constant subformula input subformula call 
call identify substitution equivalence query formula identify target concept 
notice revised fewer variables equation 
number variables revised small possible obtaining target concept 
theorem variable read formula revision algorithm uses log queries revision distance target concept 
proof 
may assumed monotone read formula unate noted section monotone unate cases equivalent 
subformula truth assignment written contains variables contains variables referred partition approximately half size subformula read formula contains third thirds variables 
standard fact subformula exists see 
example minimal subformula contains third variables property 
formalize definition partial truth assignment mentioned previously 
subformula 
consider binary tree representing path leading root root written delta delta delta ffi ffi gamma delta delta delta ffi ffi ffi subformulas corresponding siblings nodes ffi ffi representation commutativity general need leftmost subformula 
sets variables occurring set variables occurring sets form partition fx xn ff partial truth assignment assigns resp variable ffi resp ff called partial truth assignment substitution oe oe formula obtained replacing variable corresponding constant oe 
subformula constant computes constant function 
maximal constant subformulas pairwise disjoint 
substitutions oe oe equivalent oe oe compute boolean function 
lemma proof omitted useful learning algorithm proceeds finding maximal constant subformulas 
lemma substitutions oe oe equivalent sets maximal constant subformulas identical 
learning algorithm recursive procedure takes formula counterexample returns substitution oe 
substitution fixes subformula constant subformula compute constant representation target concept 
uses membership queries places proof say property holds representation target concept 
notice true information algorithm comes membership equivalence queries target responses queries independent particular representation 
variable return substitution oe fixing constant gamma mq mq return substitution oe fixing appropriate constant approximately half size formula ff partial truth assignment mq ff mq ff return partition mq ff delta ff look look procedure 
works follows 
succeeds finding subformula may maximal constant subformula representation target value constant reduces subformula thirds original variables evaluates differently representation procedure continues recursively log queries level 
guarantees log membership queries procedure finds subformula maximal constant subformula representation value constant 
find substitution minimal number variables forces constant value subformula 
standard recursive computation involve making queries 
detailed description consider version 
bottom recursion queries asked counterexample formula consisting single variable revision fixing variable constant different input formula variable starts making sure mq mq 
subformula identically true false 
asks membership queries mq ff mq ff ff partial truth assignment approximately half size subformula 
depending outcome queries distinguish cases 
case mq ff mq ff 
example assume final gate formula 
minimal number variables needed fix output obtained minimum minimal number variables needed fix left right subformulas 
minimal number variables needed fix output sum minimal number variables needed fix left right subformulas 
recursion course find substitution just number variables 
truth assignment variables holds mq ff monotonicity 
subformula corresponding subformula containing computes constant function representation target function 
procedure informally describe gets read formula subformula constant input mq ff mq ff log membership queries outputs maximal subformula containing corresponding subformula identical constant representation target 
assume 
ff partial truth assignment identical ff leaves variables unassigned assigns variables 
ff ff ff delta delta delta ff ff usual componentwise ordering holds mq ff mq ff 
binary search find mq ff gamma mq ff 
difference truth assignments ff gamma ff variables ff gamma may ff 
fact ff gamma ff 
follows ffi 
hand case representation target concept subformula corresponding target 
hand case input ffi path provided child path equal cases 
variables subformula set subformula compute constant function 
inputs ff gamma ff demonstrate larger subformula computes constant function 
case ii case mq ff mq ff 
truth assignment variables holds mq ff subformula corresponding representation target concept 
point start considering counterexample write corresponding partition 
equation compare known value asking membership query mq ff 
possibilities 
case ii mq ff 
counterexample hypothesis target concept continue recursively find constant substitution problem thirds original variables 
note equation original membership queries simulate membership queries new target concept 
case ii mq ff procedure find subformula processed recursively analogously previous case 
introduce additional notation writing equation 
put corresponds variables case subformula corresponding representation target 
resp value computed ffi resp input definition holds ffi ffi lemma fi partial truth assignment assigns identical ff 
mq fi 
proof 
follows properties assignments definition describe procedure 
noted performs binary search find returns search lemma evaluate membership queries 
values determined queries 
equation implies holds 
procedure continues recursive call counterexample show membership queries recursive call 
lemma proof omit shows set variables membership queries 
lemma fl partial truth assignment assigns resp ffi resp identical ff truth assignment holds mq fl claim finds maximal constant subformula 
proved induction number variables making argument fact subformulas rooted ffi constant 
log membership queries top level nonrecursive call procedure depth recursion log log membership queries asked level 
completes description analysis procedure 
learning algorithm 
eq correct oe oe return algorithm call substitution corresponding maximal constant subformula eliminated formula 
updated formula contains fewer variables 
membership queries refer truth assignments original set variables new membership queries assign values eliminated variables 
construction implies variables irrelevant values arbitrary 
correctness complexity bound algorithm follows noting call find new maximal constant subformula disjoint previous ones contains new variable fixed constant 
number calls revision distance target 
query bound follows fact uses log membership queries 
hard monotone dnf consider variables xn yn delta delta delta delta delta delta gamma delta delta delta xn theorem formula requires gamma membership equivalence queries revised known exactly literal deleted revised version may asked hypothesis 
proof 
describe adversary strategy answering queries learning algorithm 
formula obtained deleting single occurrence initially set possible target concepts psi adversary strategy described query eliminates concept psi implies claimed lower bound 
consider truth assignment truth assignment truth assignment 
membership query mq answered follows 
gamma components equal mq 
eliminate concepts psi 
gamma components equal mq eliminate concept psi 
eliminated psi 
mq 
eliminate concept psi 
consider equivalence query eq revised version may obtained deleting number literals terms 
contains term gamma return negative counterexample 
eliminate concept psi 
contains term contains variables contain return negative counterexample ith position 
eliminates psi 
return positive counterexample 
eliminate concept psi 
general error model far considered errors corresponding deletion literals terms 
practical theory revision algorithms deal types errors replacement variable addition variable term 
error types hard define general careful definition particular cases see 
replacements additions appear harder handle deletions 
variables xn 
consider monotone conjunctions parity functions 
parity function exclusive subset variables complement function 
parity function written delta phi delta denotes mod inner product vectors 
monotone conjunction parity function allow deletion variable replacement variable constant variable addition variable parity addition constant 
monotone conjunction parity function denote class monotone conjunctions resp parity functions obtained enlarged set revision operators denote corresponding concept classes 
clearly class monotone conjunctions resp parity functions variables xn cases rest concept classes depend initial formula 
role played revision operator determine performance metric target concept obtained revisions identify queries 
proposition monotone conjunction revision algorithm uses log queries revision distance target concept 
proof 
asking membership queries determined target concept identically true false 
occurs ask equivalence query 
positive counterexample returned variable occurring set variable deleted 
negative counterexample returned variable set added 
variable log membership queries follows 
switching bits get increasing sequence vectors 
binary search find point classification changes sequence bit just switched corresponds variable 
process iterated target concept 
theorem parity function revision algorithm uses log queries revision distance target concept 
proof 
delta phi parity function revised delta phi target concept 
value determined single equivalence query mq 
change complement achieve reverse labels 
may assumed 
vectors differ bits 
learning algorithm starts equivalence query 
counterexample received query 
holds 
goal find counterexample containing exactly 
resp 
obtained switching resp 
second half components notice phi phi phi phi phi exactly hold 
exactly counterexample membership query tell counterexample 
continuing process counterexample single component log membership queries 
variable corresponding component variables differ 
repeating procedure times 
concluding remarks revision algorithms sections suggest general situation monotone dnf terms small terms disjoint terms revised efficiently 
think extend term monotone dnf revision algorithm term monotone dnf accord picture 
hand lower bound section shows monotone dnf expression large terms having large overlap may hard revise 
general interesting understand relationship revision complexity monotone dnf combinatorial properties 
revision complexity general dnf open term dnf 
extending positive results addition type revision operators interesting 
step consider monotone read dnf expressions partial results 
practical applications interesting find efficient revision algorithms horn sentences conjunctions clauses unnegated literal restricted cases having small clauses small overlap 
direction relevant practice theory revision predicate logic 
initial positive results obtained 
acknowledgment moshe 
come initial discussions topic theory revision 
referees helpful remarks 
particular suggesting include proposition proposing simpler algorithm better bound theorem 
bostrom 
interactive learning tool program specialization 
intelligent data analysis 
www east elsevier com ida angluin 
queries concept learning 
machine learning apr 
angluin frazier pitt 
learning conjunctions horn clauses 
machine learning 
angluin hellerstein karpinski 
learning read formulas queries 
acm 
argamon engelson 
tractability theory patching 
journal artificial intelligence research 
blum hellerstein littlestone 
learning presence finitely infinitely irrelevant attributes 
comput 
syst 
sci 
earlier version th colt 
hellerstein 
attribute efficient learning query mistake bound models 
comput 
syst 
sci 
case kaufmann 
learning recursive functions approximations 
comput 
syst 
sci 
davis hamscher 
model reasoning troubleshooting 
shrobe american association artificial intelligence editors exploring artificial intelligence survey talks national conferences artificial intelligence chapter pages 
morgan kaufmann san mateo ca 
eiter gottlob 
complexity propositional knowledge base revision updates counterfactuals 
artificial intelligence 
gardenfors 
knowledge flux 
bradford books mit press detroit cambridge mass 
helmbold long 
tracking drifting concepts minimizing disagreements 
machine learning 
jain sharma 
learning presence partial explanations 
inform 
comput 
kohavi 
switching finite automata theory 
mcgraw hill new york ny second edition 
feldman 
bias driven revision logical domain theories 
journal artificial intelligence research 
laird newell rosenbloom 
soar architecture general intelligence 
artificial intelligence sept 
maass turan 
lower bound methods separation results line learning models 
machine learning 
marcotte piazza :10.1.1.29.4572
model diagnostic reasoning vhdl 
editor performance fault modeling vhdl chapter pages 
prentice hall englewood cliffs nj 
de kleer mackworth reiter 
characterizing diagnoses systems 
artificial intelligence 
mooney 
preliminary pac analysis theory revision 
computational learning theory natural learning systems volume iii selecting models chapter pages 
mit press 
ourston mooney 
theory refinement combining analytical empirical methods 
artificial intelligence 
reiter 
theory diagnosis principles 
artificial intelligence 
richards mooney 
automated refinement order horn clause domain theories 
machine learning 
rivest sloan 
formal model hierarchical concept learning 
inform 
comput 
shapiro 
algorithmic program debugging 
mit press cambridge ma 
towell shavlik 
extracting refined rules knowledge neural networks 
machine learning 
wegener 
complexity boolean functions 
wiley teubner 
wrobel 
concept formation interactive theory revision 
machine learning 
wrobel 
order theory refinement 
de raedt editor advances ilp pages 
ios press amsterdam 
