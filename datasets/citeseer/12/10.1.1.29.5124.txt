specification matching software components amy jeannette wing amy cs cmu edu wing cs cmu edu school computer science carnegie mellon university forbes avenue pittsburgh pennsylvania june specification matching way compare software components descriptions components behaviors 
context software reuse library retrieval help determine component substituted modified fit requirements 
context object oriented programming help determine type behavioral subtype 
formal specifications describe behavior software components determine components match 
give precise definitions just exact match various flavors relaxed match 
definitions capture notions generalization specialization substitutability software components 
formal specifications pre post conditions written predicates firstorder logic rely theorem proving determine match mismatch 
give examples implementation specification matching larch prover 
research sponsored wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
views contained document authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory government 
government authorized reproduce distribute reprints government purposes notwithstanding copyright notation thereon 
manuscript submitted publication understanding government authorized reproduce distribute reprints governmental purposes 

motivation specification matching process determining software components related 
underlies understanding seemingly diverse set questions ffl retrieval 
retrieve component software library semantics syntactic structure 
ffl reuse 
adapt component software library fit needs subsystem 
ffl substitution 
replace software component affecting observable behavior entire system 
ffl subtype 
object type subtype 
retrieval search library components satisfy query 
reuse adapt component fit environmental constraints component meets requirements 
substitution expect behavior component observably equivalent special case substitution subtype object component substituting supertype object 
common answering questions deciding component matches matches generically stands satisfies meets equivalent 
common kinds matches need characterize dynamic behavior semantics software component 
rarely case want component match exactly 
retrieval want close match information retrieval contexts sm ml willing sacrifice precision recall 
willing get false positives long true positives 
determining substitutability need substituting component exact behavior substituted behavior relative environment contains 
lay foundation different kinds semantic matches 
explore just exact match components flavors relaxed match 
concrete narrow focus match mean assumptions ffl software components interested functions routines ada procedures ml functions modules roughly speaking sets functions written programming language 
components typically stored program library shared directory files software repository 
ffl associated component signature sig specification behavior spec signatures describe component type information usually statically checkable specifications describe component dynamic behavior 
specifications precisely characterize semantics component just signature 
specifications formal written formally defined assertion language 
components hc sig spec hc sig spec define generic component match predicate match definition component match match component component bool match match sig sig sig match spec spec spec components match signatures match definition signature matching specifications match definition specification match 
define match conjunction think signature match filter eliminates obvious non matches trying expensive specification match 
possible definitions signature match predicate match sig thoroughly analyzed previous zw 
remainder match sig functions type equivalence modulo variable renaming exact match zw modules partial mapping functions modules exact signature match functions generalized module match zw 
focus specification match predicate match spec write pre postcondition specifications function assertions expressed order predicate logic 
determine match functions logical relationship implication pre post condition specifications 
modularly define match modules terms kind match corresponding functions modules 
choice formal specifications exploit state art theorem proving technology way implement specification match engine 
example matches proven lp theorem prover gg 
specification match goes step signature match 
functions signature match entirely functions types int int int behavior 
example integer addition subtraction signature completely opposite behavior library routines strcpy strcat signature users unhappy substituted 
large software library large software system functions identical signatures different behavior 
example math library nearly thirds functions signature double double signature match know large number retrieved functions want 
specification match takes consideration knowledge components allows increase precision determine components match 
kind match define match name match predicate symbol 
example strongest function specification match named exact pre post match predicate symbol match pre post match named predicate symbol components holds say equivalently ffl match ffl matches ffl matched important distinguish matches matched matches symmetric necessarily imply 
matches symmetric say satisfy match 
follows briefly describe language write formal specifications 
define exact relaxed match functions section modules section 
discuss implementation specification matcher larch prover section applications specification match software engineering context section 
close related summary 

larch ml specifications larch ml larch interface language ml programming language specify ml functions ml modules 
larch provides tiered approach specification gh 
tier specifier writes traits larch shared language lsl assert properties 
trait introduces sorts operators defines equality terms composed operators variables appropriate sorts 
appendix shows orderedcontainer trait 
ordered containers multisets maintain ordering elements time insertion notion element 
elements ordered total order values integral values 
counter larch style different traits different theories chose single trait orderedcontainer multiple ways order simplify explanations examples 
trait defines operators generate containers empty insert return container resulting deleting particular element delete return element container resulting deleting element return information container size isempty information particular element isin count maximum element container total ordering elements max 
second tier specifier writes interfaces larch interface language describe state dependent effects program see 
larch ml interface language extends ml adding specification information special comments delimited 
clauses link interfaces lsl traits specifying correspondence programming language specific types lsl sorts 
polymorphic sorts associated sort polymorphic variable ff type constructor clause 
specification function begins call pattern consisting function name followed pattern parameter optionally followed equal sign pattern result 
ml patterns binding constructs associate names parts values names pair second 
requires clause specifies function pre condition predicate terms trait operators names introduced call pattern 
similarly ensures clause specifies function post condition 
function explicit requires clause default requires true 
function specification may include modifies clause lists objects values may change result executing function 
larch ml includes rudimentary support specifying higher order functions 
simplistic exposition purposes larch ml interface specifications signature stack sig orderedcontainer type ff orderedcontainer orderedcontainer val create unit ff create ensures empty val push ff ff ff push ensures insert val pop ff ff pop requires isempty ensures val top ff ff top requires isempty ensures signature queue sig orderedcontainer type ff orderedcontainer orderedcontainer val create unit ff create ensures empty val enq ff ff ff enq ensures insert val rest ff ff rest requires isempty ensures val deq ff ff deq requires isempty ensures larch ml specifications library examples specification matching 
contains module specifications stack functions create push pop top queue functions create enq rest deq 
specify function pre post conditions terms operators orderedcontainer trait shown appendix 

function matching function specification denote pre post conditions pre post respectively 
pred defines interpretation function specification implication pred pre post interpretation means pre holds function specified called post hold function executed assuming function terminates 
pre hold guarantees behavior function 
interpretation pre post condition specification common natural functions standard programming model 
example stack top function ffl pre condition top pre isempty 
ffl post condition top post 
ffl specification predicate top pred isempty 
consistent terminology signature matching function specification matching context retrieval application 
example matches library specification query specification assume variables match predicate symbol exact pre post match pre post post plug match plug post plug post match plug post post guarded plug match guarded plug pre post guarded post match guarded post pre post dropped table instantiations generic pre post match pre pre post renamed consistently example compare stack pop function queue rest function rename 
examples section intended primarily illustrations various match definitions 
additional examples practical applications appear section 
section examine definitions specification match predicate match spec 
characterize definitions grouping pre conditions pre pre post conditions post post relating predicates pred pred kinds matches general form 
definition generic pre post match match pre post pre pre post pre post matches relate pre conditions component post conditions component 
post conditions related functions similar want compare directly 
example post conditions may specify related properties return values 
similarly pre conditions related functions may specify related bounds conditions input values 
cases may want include information pre condition post condition clause 
allow flexibility post pre post generic pre post match definition 
relations relate pre conditions post conditions respectively equivalence implication need 
matches may vary form dropping terms 
table summarizes instantiated pre post matches section 
example plug match post match plug pre pre post post 
match plug post match guarded post instantiated arguments dropped 
match guarded plug match guarded post pre post definition generic predicate match match pred pred pred renaming easily provided signature matching assuming signatures match 
predicate matches relate specification predicates pred pred entirety 
predicate matches useful cases need consider relationship specifications relationships parts example need assume pre condition order reason post conditions 
additionally definitions apply specifications forms specifications separate pre post conditions 
relation specification predicates equivalence strictest match may relaxed implication reverse implication 
table summarizes instantiated predicate matches section 
predicate match symbol exact predicate pred generalized match gen pred specialized match pred table instantiations generic predicate match pred pred important look pre post matches predicate matches 
kind match appropriate may depend context match specifications compared 
pre post matches section predicate matches section 
notion exact match relaxed matches 

pre post matches pre post matches specifications relate pre pre post post match instantiation generic pre post match definition 
consider kinds pre post matches strongest match weakening match relaxing relations adding pre dropping pre condition term 
case relaxing match allows comparisons closely related components weakens guarantees relationship components 
example dropping pre condition term allow relate components behavior subset inputs handle different assumptions inputs valid routines arrays different bounds 
comparing pre conditions guarantee components behaviorally equivalent inputs 

exact pre post match exact pre post match holds specifications components essentially equivalent completely interchangeable 
component replaced change observable behavior 
exact pre post match instantiates post generic pre post match definition function specifications satisfy exact pre post match pre conditions equivalent post conditions equivalent 
definition exact pre post match match pre post pre pre post post exact pre post match strict relation different looking specifications satisfy match 
consider example query orderedcontainer trait 
specifies function returns ordered container size zero way specifying function create new ordered container 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val unit ff ensures size exact pre post match matched stack queue create functions 
specifications stack queue create identical name return value 
look detail stack create specification matches 
specification stack create query specification renamed pre true post empty 
pre true post size 
pre pre true showing match post reduces proving post post empty size 
case empty size follows immediately axioms orderedcontainer trait size 
proving case size empty requires basic knowledge integers fact ordered container size provable orderedcontainer trait 

plug match equivalence strong requirement 
weaker match 
plug match relax generic pre post match 
plug match matched specification pre condition weaker allow conditions allows post condition stronger provide guarantee strong 
definition plug match match plug pre pre post post 
code 
code 
idea plug match plug match captures notion able plug illustrated 
specifier writes query saying essentially need function pre holds function executes post holds executes assuming function terminates 
plug match pre holds assumption specifier pre holds conjunct plug match 
interpret guarantee pre post assume post hold executing plugged post post second conjunct plug match post hold specifier desired 
say behaviorally equivalent plug observable behavior true equivalence symmetric necessarily plug get guarantees 
consider query 
fairly weak specification add function 
requires input container elements guarantees resulting container element larger input container 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff ff requires size ensures size size exact pre post match matched function library plug match matched stack push queue enq functions 
push enq identical names names variables proof match 
pre condition requirement pre pre holds pre true show post post assume post insert try show post size size 
substituting post size insert size follows immediately equations size 

plug post match concerned effects functions useful relaxation plug match consider post condition part conjunction 
pre conditions satisfied adding additional check calling function 
plug post match instance generic pre post match definition instantiated instantiated post dropping pre pre definition plug post match match plug post post post consider query 
identical stack top requires clause 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff ensures stack top match exact pre post plug match pre condition weaker stack top 
post conditions equivalent stack top match plug post match 

guarded plug match cases post condition relation post post holds values input allowed pre condition 
example clause mentioned post condition stack pop defined empty stack 
guarded plug match adds pre assumption guard post condition relation exclude cases 
instantiate generic pre post match plug match pre post post pre pre pre necessary limit conditions try prove post post definition guarded plug match guarded plug pre pre pre post post example suppose wish find function delete ordered container query signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff requires isempty ensures size size gamma describes function requires non empty container returns container size size input container 
fairly weak way describing deletion specify element removed 
weak specification match gives big gain precision signature matching 
matched functions signature ff ff example function reverses sorts elements container removes duplicates 
intuitively related stack pop queue rest pop rest match plug plug post match 
consider stack pop reasoning similar queue rest 
prove post post size size gamma case empty adding assumption pre isempty able show stack pop matches guarded plug match 
conjunct pre pre trivial pre conditions stack pop 
sketches proof second conjunct pre post post 
assume isempty assume pre assume assume post size size gamma attempt prove post size size gamma apply insert ec sc empty generated empty insert size insert ec sc size insert ec sc gamma substitute size sc size insert ec sc gamma axioms size sc size sc gamma axioms size size sc size sc axioms gamma proof sketch match guarded post pop 
guarded post match plug match define relaxed guarded match dropping pre condition relation term 
pre condition term guarantee pre holds may provide additional wrapper code establish pre call function specified definition guarded post match match guarded post pre post post example consider query requires clause 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff ensures size size gamma query stronger pre condition matched functions library plug guarded plug match 
plug post match need assume pre isempty show post post guarded post match matched stack pop queue rest 
proofs similar guarded post match 

predicate matches recall generic predicate match definition match pred pred pred relation equivalence implication reverse implication 
note general form allows alternative definitions specification predicates 
alternative pred pre post stronger pred pre post interpretation reasonable context state machines pre condition serves guard state transition occurs pre condition holds 
generic pre post match consider instantiations generic predicate match generic predicate match including exact match various relaxations 

exact predicate match exact predicate match 
function specifications match exactly predicates logically equivalent instantiated 
strict exact pre post match definition interaction pre post conditions match pre post pred 
fact cases pre pre true exact pre post exact predicate matches equivalent 
definition exact predicate match pred pred pred example matched stack queue create exact predicate match pred pred true empty true size empty size exactly proved show matched stack queue create exact pre post match 

generalized match generalized match intuitive match context queries libraries specifications library functions detailed describing behavior functions completely able write simple queries focus aspect behavior interested think differentiate functions library 
generalized match allows library specification stronger general query generic predicate match instantiated 
generalized match weaker match plug match match plug match gen pred 
definition generalized match match gen pred pred pred example consider 
exact predicate match stack pop queue rest specifications match query 
generalized match matched 
proofs similar guarded match 
consider example specifying function removes inserted element ordered container 
query require specifier knows axiomatization ordered containers query uses container constructor insert 
post condition specifies input container result inserting returned element container 
existential quantifier exists way able name 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff requires isempty ensures exists orderedcontainer insert exact plug matches retrieve functions 
generalized match query matched stack top function queue deq query specifies inserted element returned 
show match gen stack top consider cases empty insert ec cc 
case pre condition top false match predicate vacuously true 
second case pre conditions true need prove post post instantiate cc proof goes 

specialized match specialized match converse generalized match match pred match gen pred 
function specification weaker query interest base implement desired function 
specialized match allows library specification weaker query instantiate generic predicate match 
definition specialized match match pred pred pred consider query stack top pre condition 
stack top weaker show implies stack top matched stack top specialized match 

relating function matches relate function specification match definitions lattice 
arrow match match indicates stronger 
say relaxed 
table summarizes library functions match example queries matches defined 
example generalized match matched queue rest stack pop plug post match matched functions library 
parentheses function indicates match implied stronger match match plug queue enq match guarded plug queue enq 
define variety matches 
match appropriate depend particular situation 
choice match depends context match strong guarantee needed relation specifications 
want know substitute function behavior plug match exact match 
contrast interested functions effects willing check pre conditions separately guarded post match 
match appropriate depends actual form predicates 
cases pre post matches easier prove theorem prover pre post matches relate pre conditions pre conditions post conditions post conditions specifications pre pre related reason relation similarly post post 
cases necessary assumptions pre condition order prove relation post conditions 
cases predicate matches easier prove 
guarded post generalized exact predicate exact pre post plug specialized plug post true guarded plug lattice function specification matches exact exact plug guarded plug special gener guarded pre post predicate plug post ized post create create create create create create create create create create create create create create create create enq enq enq enq enq push push push push push top top top rest rest rest pop pop pop rest pop top top top table ones match queue module stack module 
module matching function matching addresses problem matching individual functions 
programmer may need compare collections functions example ones provide set operations data type 
modules ada packages classes common language feature modern programming languages typically support explicitly definition data types 
modules just group set related functions routines 
section addresses problem matching module specifications 
module specification interface pair sigma sigma sigma ffl sigma set user defined types ffl sigma set function abstracts 
sigma introduces names user defined type constructors may appear sigma function function name function specification 
include function name useful feedback user distinguish abstracts sigma set multiset 
example queue interface user defined type sigma fff tg function abstracts sigma library interface sigma sigma lt sigma lf match query interface sigma sigma qt sigma qf correspondences sigma lt sigma qt sigma lf sigma qf module match definition user defined types function abstracts query interface subset library interface 
consider module match definitions zar 
allow query interface subset library interface querier may specify exactly functions interest match module general sense set functions may properly contain query set 
definition module match match sigma sigma match fn total functions tc sigma qt sigma lt corresponding renaming tc sigma qf sigma lf tc sigma qt tc sigma qf match fn tc tc tc ensure user defined types named consistently interfaces 
set user defined types sigma sigma extracts set type constructor variables sigma sigma fff int xg sigma ft xg 
domain function tc set type constructor variables construct type constructor renaming sequence tc applied signatures function specifications sigma qf sigma renaming tc appears tc 
avoid potential naming conflicts assume sigma qt sigma lt disjoint easily 
maps query function corresponding library function 
user defined types come sigma lt apply tc ensure consistent naming type constructors 
correspondence tc satisfy function match match fn library module may contain functions query module sigma lf sigma qf sigma lf tc sigma qf tc sigma qf shorthand applying tc element sigma qf 
section contains example module match including proof match relation lp 
definition module match highly parameterized extensible 
function match relation pairs functions completely orthogonal module match definitions instantiate match fn function specification matches defined section 
fact module match definitions completely independent fact matching specifications function level 
definitions module matching instantiate match fn function signature match module signature matching zw 
generally module interface consists global information sigma set functions sigma 
framework allows potential extend module interface contain information 
example extend module specification interfaces include information shared types global invariants sigma new module match definition including global invariants similar definition tc change point definition require kind consistency invariants 

implementation lp larch prover gg attempt prove match holds specifications 
lp theorem prover subset order logic 
implemented tools translate larch ml specifications match predicates lp input 
specification match examples section entries table section specified larch ml translated automatically lp input proven lp 
specification file stack sig check syntax specification translate form acceptable lp 
generate corresponding lp file stack lp includes axioms appropriate lsl trait contains appropriate declarations variables operators assertions axioms pre post conditions function specified 
function foo generates operators axioms bodies requires ensures clauses foo 
shows stack lp lp result translating stack specification pg 
query pg 
lp format 
orderedcontainer axioms command loads state resulting executing commands orderedcontainer axioms lp 
lsl tool generate file orderedcontainer axioms lp lsl trait orderedcontainer lsl 
comment command lp assume query uses trait library specification stack 
command set name tells lp prefix names facts conjectures 
commands declare var declare op declare variables operators axioms 
particular lp declares element variable stack lp orderedcontainer orderedcontainer axioms signature stack set name stack declare var 
declare op gamma bool gamma bool gamma bool gamma bool gamma bool gamma bool gamma bool gamma bool 
assert true empty true insert isempty isempty 
lp orderedcontainer orderedcontainer axioms signature set name declare var 
declare op gamma bool gamma bool 
assert size size size 
lp input stack container variables operators 
assert clause adds axioms logical system corresponding requires ensures clauses add respectively 
names function specifications corresponding specification files match definition generate appropriate lp input initiate attempt determine match functions 
example shows lp input prove plug match stack push 
input lp proof consists simply commands load theories library query execute stack execute proof statement prove 
plugin stack lp load library query specs execute stack execute plug match 

prove 

lp input plug match stack push alternatively chosen generate lp axioms query basis generating axioms sig file particular pair functions generate necessary axioms particular pair 
assume generating lp file sig file happen may queries library specification match definitions particular query 
approach enables consider module level matches 
lp designed proof assistant automatic theorem prover proofs require user assistance 
entries table corresponds match lp prove 
characterizing assistance proofs require consider primary matches entries table parentheses proofs follow automatically entry left row 
table summarizes level user assistance required primary matches 
means proof went user assistance guidance means proof required user input apply appropriate proof strategies lemma means user prove additional lemmas complete proof 
query library match user assistance queue create exact pre post lemma stack create exact pre post lemma queue enq plug stack push plug stack top specialized stack top plug post queue rest guarded plug lemma stack pop guarded plug guidance queue rest guarded post lemma stack pop guarded post guidance stack top guarded plug guidance table level user assistance required lp proofs queries proofs needed assistance user plug match stack push queue enq plug post specialized matches stack top 
plug match exec guard stack load library query specs execute stack execute guarded plug match 

prove 

additional user input resume induction 
basis subgoal basis subgoal 
induction subgoal resume specializing cc 
specialization subgoal specialization subgoal induction subgoal conjecture input file guard stack lp 
proof script generalized match stack pop stack push example shown executing statements results response lp match conjecture proved default proof methods user assistance required 
guarded plug match stack pop example match requires user assistance lp 
user tell prover induction proof instantiate existential variables 
shows lp annotated script proof 
lines boldface user input 
proof notes lp comment character 
line conjecture indicates lp completed proof 
classify user assistance proof simply guidance telling lp proof strategy cases default strategies complete proof 
total proofs require guidance guarded plug matches stack top stack pop guarded post match stack pop 
remainder proofs exact pre post match queue create stack create guarded post match queue rest guarded post match queue rest required guidance additional lemmas order prove match 
cases additional lemmas insert empty reasonably included complete theory containers 
proofs queue rest additionally need lemma size insert size falls directly axioms stack queue 
proofs need additional lemmas sizes containers 
shows lp annotated script proof guarded post match queue rest 
exec queue load library query specs execute queue execute set name lemma prove insert empty contradiction 
contradiction subgoal critical pair hyp orderedcontainer contradiction subgoal conjecture prove size insert size induction 
basis subgoal basis subgoal 
induction subgoal induction subgoal conjecture set name query prove 
resume induction 
basis subgoal basis subgoal 
induction subgoal induction subgoal conjecture input file queue lp 
proof script guarded post match queue rest 
applications mentioned section problem involves comparing behavior software components potential candidate specification matching 
particular focus problems center substituting component 
section examine problems retrieval reuse subtyping object oriented types 

retrieval reuse library components specifications specification matching retrieve components library 
formally define retrieval problem follows definition retrieval retrieve query specification match predicate component library set components retrieve match spec fc match spec query specification specification match predicate match spec library component specifications retrieve returns set components match match predicate match spec note components functions modules provided match spec instantiated appropriate match 
parameterizing definition match spec gives user flexibility choose degree relaxation specification match 
specification match part retrieval process separately pair components gives assurances appropriate component reuse 
function level especially various specification matches give various assurances behavior component 
treat standard expect component meet library component reuse 
exact pre post match holds know behaviorally equivalent conditions transparent 
plug guarded plug match holds know substituted behavior specified hold guaranteed behavior pre false 
guarded post match holds know specified behavior holds pre satisfied 
depending context may able ensure pre holds guarantee behavior specified example suppose implementing file cache manager 
things need function replace file cache newly fetched file cache full 
want know functions library 
library functions specifications associated specification matching retrieve functions want 
match definition guarded plug match fairly weak specification query signature query sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff unit cache file requires size cache modifies cache ensures isin file cache size cache size cache specifies property hold destructive replacement function size cache remains new file cache final state 
query function takes input file system cache type ff file type ff 
requires clause indicates cache particular size assuming operating full cache 
modifies clause indicates value cache may changed signature component sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff unit cache file requires isempty cache modifies cache ensures cache insert file cache signature component sig orderedcontainer type ff orderedcontainer orderedcontainer val ff ff unit cache file requires isempty cache modifies cache ensures cache insert file delete max cache cache library file replacement functions function 
ensures clauses cache stand value cache final state unprimed cache refer value initial state 
suppose functions listed library 
require cache non empty replace current element cache new file 
function component uses fifo replacement strategy file inserted replaced file cache longest 
function component uses priority replacement strategy replaces maximum element cache unspecified total ordering elements cache 
ordering time file referenced lru replacement strategy priority elements cache hoard priorities 
guarded plug match retrieval query returns library functions replacement strategies guarantee properties specified postcondition 
proofs guarded plug match shown appendix functions experiment effects particular replacement strategy performance cache manager 
specific query library components distinguish library components 
example illustrates importance pre condition guard guarded plug match 
plug match guarded plug retrieve function necessary exclude case empty cache trying prove size cache cache equal 

subtyping second application specification matching determining object subtype 
object oriented programming languages object type defines collection objects consist data state methods act data car ame mey 
intuitively type oe subtype type object type oe substituted object type precise definitions subtyping vary strictness notion substitutability simply requiring methods signatures match signature subtyping requiring correspondence methods dynamic semantics behavioral subtyping 
order relate subtyping signature specification matching convert object types context 
base definition object type liskov wing lw differ definition include invariants constraints 
restrict focus relating methods aspect subtyping relation 
model object type module interface type declaration object type description object type value space global variable object type hold current state object element value space function signature specification method 
represent module interface supertype module interface subtype 
subtyping requires correspondence method method allows additional methods correspondence methods varies subtype definitions function match definition 
correspondence type declarations 
exactly correspondences captured module match definition definition 
define subtyping terms module match general form definition generic subtype subtype match match method subtype modules match 
particular notion subtyping depends match method match method function level 
discuss possible instantiations match method general relation signature behavioral subtyping signature specification matching detail zar 
remainder section relate behavioral subtyping specification matching illustrate specification matching show object behavioral subtype example 
shows module specifications objects example similar liskov wing lw 
mutable bag object global variable methods put get card 
second specification stack object 
trait bag stricter specification method removes object pop top usually simply called types need distinguish types objects types signatures 
signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff val put ff unit put modifies ensures insert val get unit ff get requires isempty modifies ensures delete isin val card unit int card ensures size signature sig orderedcontainer type ff orderedcontainer orderedcontainer val ff val push ff unit push modifies ensures insert val pop top unit ff pop top requires isempty modifies ensures val swap top ff unit swap top requires isempty modifies ensures insert val height unit int height ensures size larch ml specifications bag stack object types additional method swap top 
keeping liskov wing approach assume create methods defined 
appendix lists orderedcontainer trait specifications 
specification differs ways stack specification pg 

stacks mutable stack 
stack specification section specifies behavior typical implementation functional language stacks immutable 
wish model specification stack object oriented paradigm stacks mutable 
second stack separate functions pop top combines pop top 
mainly product difference functional implementation object oriented 
third specification additional functions 
consider define behavioral subtype relation objects modules 
behavioral subtyping attempts capture notion program object type able substitute object type subtype observable behavior program 
number definitions behavioral subtyping attempt capture substitutability property dl lw dl ame lw lea mey 
subtle differences subtype definitions common pre post condition specifications describe behavior types determine type subtype 
method supertype corresponding method subtype behavioral subtyping requires method supertype corresponding method subtype may additional methods rules behavioral subtyping ffl pre condition rule 
pre pre ffl post condition rule 
pre post post guarded plug match reason show substitutability making assumptions pre condition necessary 
define behavioral subtyping instantiating match method generic subtype definition definition guarded plug match definition pg 

assume signatures match 
definition behavioral subtype subtype behav match spec spec match guarded plug model versions behavioral subtyping substituting function specification definitions match method example substituting plug match match method yields america subtype definition ame methods rule liskov wing subtype definition lw 
substituting conjunction generalized match pre condition rule plug match match method pre pre pred pred yields method rule dl 
consider specifications 
expect bag object surprised behavior stack object able substitute stack bag 
stack push adds element container just bag put stack height returns size container just bag card 
bag get non deterministic deletes returns element container 
stack pop top just restrictive element deletes 
contrast expect stack object may surprised bag object remove element bag get method may remove element top 
intuitively expect stack subtype bag vice versa 
show behavioral subtype definition 
objects specified able show subtype relation plug match method match prove match plug pop top get reason case stack bag empty 
show behavioral subtype behavior subtype definition uses guarded plug match specifically allows exclude case stack bag empty 
show subtype behav equivalently match spec spec match guarded plug define mappings tc satisfy requirements module match definition 
user defined type sigma sigma 
tc identity function tc 
define follows put push get pop top card height tc satisfy requirements module match tc total functions 
need 
ff ff match guarded plug push put match guarded plug pop top get match guarded plug height card translated specifications lp input able prove guarded plug matches little user guidance 
appendix shows lp proof script guarded plug match pair methods 
proofs match guarded plug push put match guarded plug height card trivial specifications identical modulo variable names 
proof match guarded plug pop top get requires additional lemma guidance 
shown subtyping fits framework specification matching specification matching tools automate checking subtype relation 
subtype definitions liskov wing lw include additional global information invariants constraints model 
possible add framework extending sigma include constraint specifications addition user defined type declarations 

related specification matching focused particular match definitions retrieval software components usually functions 
rollins wing proposed idea function specification matching implemented prototype system prolog plug match rw 
prolog equational reasoning search may functions match query require equational reasoning determine match 
vcr retrieval system uses plug match vdm specification language 
focus efficiency proving match tool performs series filtering steps doing match 
penix alexander pa theorem proving translate automatically specifications domain specific feature sets sets attribute value pairs efficient retrieval 
approach depends formulating feature sets domain 
perry inscape system specification software development environment 
inquire tool pp provides predicate retrieval inscape 
match exact pre post form generalized match 
prototype system simplified fairly limited inference mechanism 
inscape user provide specifications component anyway query retrieval written 
cheng jc order sorted predicate logic specifications 
define matches instances generalized function match additional property generate series substitutions apply library component reuse desired context 
mili mili mmm define specification binary relation 
specification refines specification information inputs assigns fewer images argument 
plug match match terms relations predicates 
paris system maintains library partially interpreted schemas 
schema includes specification assertions input results schema parts schema instantiated 
matching corresponds determining partial library schema instantiated satisfy query 
system reasoning schemas limited logic 
katoh yoshida ordered linear resolution match english specifications translated order predicate logic formulas 
allow relaxations check equivalence verify subroutines match 
summarize specification matching general ways handle just function match module match framework extremely modular function match parameter module match specification match conjunct component match express specific matches hardwired definitions flexible prototype tool lets easily experiment different matches 
just software retrieval application apply specification match application areas 
signature matching restricted form specification matching 
area focused expressiveness theoretical properties type systems define various forms relaxed matches zw dc rit rt sc 
chen jarke describe framework signature specification matching implemented signature matching 
wileden survey specification level interoperability 
far focused signature interoperability convert types heterogeneous environment kon ys tha 
closely related relevant context software library retrieval divides categories 
text information retrieval fn pd mbk ai semantic net classifications advantage efficient tools available search match structures 
disadvantage component behavior described informally 
third class retrievals pp cmr allows queries representation component actual code syntax trees 
queries useful mainly determining structural characteristics component nested loops circular dependencies 

summary described specific contributions respect specification matching foundational definitions prototype tool descriptions applications 
providing precise definitions lay groundwork understanding different software components related particular specifications match 
consider detail functions modules exact relaxed match formal pre post condition specifications general idea specification matching exploit information associated description software components possible 
building working specification match engine demonstrated feasibility ideas 
tool explore pragmatic implications definitions apply specification matching various applications 
notion specification match originally motivated software library retrieval application generally applicable areas software engineering example determining subtyping designing class hierarchies showing component may substituted upgrading system 
heart interoperability problem interfaces systems match 
step direction detecting interoperability problem system interface specifies input output black box functional behavior 
components specifications match notion interface specification may fail interoperate 
reason may differ way choose communicate environment 
way extend add information interface specifications enable detection ways components interact 
goal allen garlan ag subset csp specify protocols way capture way component communicates environment determine components interoperate smoothly protocol specifications 
complete interface include protocol specifications kind functional specification notion specification match similarly extended include notion protocol match 
deliberately set framework allow different notions specification different notions specification match depending personal definition specification 
invert notion specification match determining components match determining mismatch 
garlan allen gao take step understanding notion mismatch system architectural level 
promising direction extend formal framework module level architectural level modeling various kinds architectural mismatch describe informally 
acknowledgments david garlan stephen garland comments earlier versions stephen garland assistance details lp 
cache replacement strategy example initially suggested maria ebling 
research sponsored wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
views contained document authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory government 
ag robert allen david garlan 
formalizing architectural connection 
proceedings th international conference software engineering pages sorrento italy may 
ame pierre america 
designing object oriented programming language behavioural subtyping 
de bakker de roever rozenberg editors foundations object oriented languages rex school workshop netherlands may june pages 
springer verlag 
lncs vol 

arnold 
reuse system cataloging retrieval reusable software 
compcon spring nd ieee computer society intl 
conf pages february 
car luca cardelli 
typeful programming 
report dec systems research center palo alto ca may 
chen jarke 
retrieval reusable software components 
proceedings nd international workshop software reusability pages 
ieee computer society press march 
cmr mariano consens alberto mendelzon arthur 
visualizing querying software structures 
proceedings th international conference software engineering pages may 
dc roberto di cosmo 
type isomorphisms type assignment framework 
proceedings th annual popl pages january 
dl krishna kishore gary leavens 
subtyping mutable types objectoriented programming languages 
technical report dept comp 
science iowa state univ november 
dl krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
proceedings th international conference software engineering march 
gerhard fischer scott henninger david redmiles 
cognitive tools locating comprehending software objects reuse 
proc 
th icse pages may 
fischer 
vcr vdm software component retrieval tool 
technical report technical university braunschweig germany november 
fn frakes 
software reuse information retrieval 
bruce shriver editor th annual hicss vol 
software pages 
western periodicals 
gao david garlan robert allen john 
architectural mismatch reuse hard 
ieee software november 
gg stephen garland john guttag 
guide lp larch prover 
report dec systems research center palo alto ca december 
gh john guttag james horning editors 
larch languages tools formal specification 
texts monographs computer science 
springer verlag 
garland jones wing 
jc 
cheng 
formal methods applied reuse 
proceedings th workshop software reuse 
kon dimitri 
object oriented interoperability 
oscar nierstrasz editor ecoop th european conference object oriented programming kaiserslautern germany july volume lncs pages 
springer verlag ny 
shmuel katz charles richter sing 
paris system reusing partially interpreted schemas 
proc 
th icse pages march 
katoh yoshida 
logic retrieval reuse software modules 
th annual intl 
phoenix conf 
computers communications pages march 
lea gary leavens 
verifying object oriented programs subtypes 
technical report mit laboratory computer science february 
ph thesis 
lw gary leavens william weihl 
reasoning object oriented programs subtypes 
ecoop oopsla proceedings 
lw barbara liskov jeannette wing 
behavioral notion subtyping 
acm toplas november 
mbk maarek daniel berry gail kaiser 
information retrieval approach automatically constructing software libraries 
ieee tse august 
mey bertrand meyer 
object oriented software construction 
prentice hall new york 
ml mauldin 
web agent related research cmt 
acm special interest group networked information discovery retrieval august 
mmm mili mili 
storing retrieving software components refinement approach 
proc 
th icse pages may 
eduardo james hendler rub en prieto christine braun 
computing similarity reuse library system ai approach 
acm july 
olsen korfhage spring williams 
visualization document collection vibe system 
information processing management 
pa john penix perry alexander 
design representation automating software component reuse 
procedings international workshop knowledgebased systems re program libraries june 
pd rub en prieto 
classification reusable modules 
ted biggerstaff alan perlis editors software reusability vol 
concepts models pages 
acm press 
perry 
inscape environment 
proc 
th icse pages 
pp perry steven 
inquire predicate reuse 
proceedings th knowledge software engineering conference pages september 
pp paul atul prakash 
framework source code search program patterns 
ieee transactions software engineering june 
rit mikael 
retrieving library identifiers equational matching types 
technical report programming methodology group dept comp 
sciences chalmers univ technology univ goteborg january reprinted corrections may 
rt colin runciman ian 
retrieving re usable software components polymorphic type 
conf 
functional programming languages computer architectures pages september 
rw eugene rollins jeannette wing 
specifications search keys software libraries 
proc 
th intl 
conference logic programming june 
sc david calvert 
signature matching ada software reuse 
master thesis university york england 
sm salton mcgill 
modern information retrieval 
mcgrawhill 
tha satish 
automated synthesis interface adapters reusable classes 
proceedings st annual symposium principles programming languages pages january 
mary vernon edward lazowska stewart editors 
nii technical challenges 
communications council 

wing rollins 
thoughts larch ml new application lp 
martin jeannette wing editors intl 
workshop larch 
springer verlag 
jack wileden alexander wolf william rosenblatt peri tarr 
specification level interoperability 
cacm may 
ys daniel yellin robert strom 
interfaces protocols semi automatic construction software adaptors 
oopsla conference proceedings acm sigplan notices october 
zar amy 
signature specification matching 
phd thesis carnegie mellon school computer science january 
technical report 
zw amy jeannette wing 
signature matching tool software libraries 
acm april 
orderedcontainer trait orderedcontainer trait includes integer introduces empty insert delete isempty bool isin bool max size int count int asserts generated empty insert partitioned count insert insert insert empty insert empty empty insert max insert empty max max insert delete max isempty empty isempty insert isin empty isin insert isin size empty size insert size size delete isin size gamma size count empty count insert count count delete max count gamma count retrieval example proofs guarded plug match execute replace fifo lp execute query lp guarded plug match pre condition prove cache newobj 
cache newobj resume induction cache additional lemmas set name lemma prove insert newobj cache empty contradiction critical pair hyp container prove size insert cache size cache induction cache guarded plug match post condition set name query prove cache newobj cache cache newobj 
cache cache newobj resume induction cache full guarded plug match prove cache newobj 
cache newobj cache newobj cache cache newobj 
cache cache newobj qed guarded plug match execute replace priority lp execute query lp guarded plug match pre condition prove cache newobj 
cache newobj resume induction cache additional lemmas set name lemma prove empty 
isempty resume induction prove isempty 
isin max resume induction resume case cc empty resume case max cc instantiate cc lemma prove isempty 
size insert delete max size resume 
instantiate cc lemma guarded plug match post condition set name query prove cache newobj cache cache newobj 
cache cache newobj full guarded plug match prove cache newobj 
cache newobj cache newobj cache cache newobj 
cache cache newobj qed script proof stack behavioral subtype bag execute lp execute lp guarded plug push put prove 

conjecture guarded plug height card prove 

conjecture additional lemma assert count prove delete insert apply orderedcontainer conjecture conjecture guarded plug pop get prove 


resume induction 
basis subgoal basis subgoal 
induction subgoal induction subgoal conjecture qed 
