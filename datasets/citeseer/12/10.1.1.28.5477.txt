architecture coralreef internet trac monitoring software suite ken keys david moore ryan koga edouard michael cla passive data collection tools traditionally designed speci tasks accounting netramet packet capture tcpdump 
coralreef suite designed provide uniform interface passive data wide range applications levels raw capture real time report generation 
coralreef provides convenient set passive data tools diverse audience network administrators researchers 
coralreef package libraries device drivers classes applications written programming languages 
highlighting design architectural decisions levels coralreef show coralreef powerful extensible cient convenient package passive data collection analysis 
keywords coralreef tcp ip passive monitoring internet trac data analysis data collection volume complexity trac internet increasing rapidly making dicult important understand 
created coralreef passive trac monitoring suite network users administrators researchers measure analyze network trac 
coralreef design philosophy architecture capabilities 
coralreef architecture organized primarily stacks software components shown plus small utility components 
raw trac stack deals directly individual pdus packets cells read network trac stream ows stack deals trac data aggregated ow intervals 
component stack builds components beneath 
level stack may serve base users may build software 
api provides features perform commonly needed operations programming hooks allow programmer customize behavior library level 
hardware speci drivers software components portable posix systems 
core raw trac stack libcoral library 
order allow programmers write single application access types data sources libcoral provides consistent api capturing trac special time coralreef authors caida san diego supercomputer center university california san diego 
authors michael caida time writing 
mail caida org 
support coralreef provided nsf ncr darpa contract caida members 
ized atm pos capture cards multiple vendors pcap interfaces hiding details hardware drivers users need want see 
api read packet capture les coral format including nlanr formats pcap dag atm pos formats 
data sources appear user read simultaneously 
libcoral api operate atm cells blocks cells link layer packets time callbacks application developer whichever convenient 
facilitate rapid prototyping development design goal provide api perl 
perl module crl pm directly calls routines perl scripts crl pm perform practical applications 
additional components included perform auxiliary tasks needed location stack structure 
example module looking ip address pre xes border gateway protocol bgp routing tables nd autonomous system numbers determining geographic locations 
ows stack includes modules storage manipulation tables frequently collected aggregate data 
measurements trac volume bytes packets ows aggregated combination source destination hosts ip protocol ports 
modules provide methods automatically aggregate data tables di erent keys allow eciently selecting entries represent trac 
example single method call convert table byte packet counts aggregated source number table aggregated source country 
higher level applications written building blocks example small perl program sucient create trac matrix ip address number larger programs realtime report generator report built complex arrangements components 
ii 
background related knowledge existing tools passive network workload characterization support features cover subset covered coralreef 
coralreef unique supports large number features layers provides apis hooks layer making easier develop new applications minimum duplicated ort 
coralreef began existence library drivers architecture coralreef talk programs perl programs crl pm unpack pm libcoral coral drivers trace files libpcap flows analysis tables flows raw traffic stack flows stack flow interval handler fig 

software components coralreef monitoring atm trac specialized hardware oc mon 
research caida needed monitor high volumes atm trac simultaneously multiple interfaces carried multiple streams trac atm virtual channels 
oc mon hardware related components served needs tools caida research demanded general software oc mon 
specialized hardware essential monitoring high volume trac 
commercial products ibi platform specialized monitoring hardware dedicated node tap network link 
hand links near edge network volume lower usually economical practical network interfaces provided operating system existing node 
tools operating system interfaces directly libpcap access interfaces 
network monitoring tools specialized hardware built network interfaces 
coralreef tools allowing deployment network 
existing tools need parse layers low layer protocols just reach higher layer protocol interested 
operating systems layer parsers built network interface code accessible programmer useless dealing layer data sources 
coralreef attempts satisfy need network analysis library parse layer protocols 
tools notably ethereal ibi platform parse layer higher protocols 
perform tcp stream reassembly 
coralreef currently provide api layer reassembly 
coralreef includes programs generating ow data apis manipulating tools ow report generation 
netramet netflow export generate ow data 
powerful feature netramet supports programming language de ning ows 
netflow export supported multiple router vendors provides convenient way obtain ow data adding additional passive monitoring equipment network 
owd combined arts library collects aggregates netflow data routers provide programming api tables ows text reporting functionality 
tools graphical web ows reporting addition coralreef include 
iii 
components raw traffic software stack input sources coralreef read trac data custom device drivers trace les libpcap 
device drivers coralreef device drivers allow passive collection data specialized collection hardware 
coralreef includes freebsd drivers point oc oc atm fore atm oc atm cards supports linux drivers wand dag oc oc atm pos cards 
supported cards write trac data blocks memory generate interrupt lling block 
coralreef drivers block size approximately megabyte 
large block size system spend undue amount time handling interrupts 
large blocks written disk ciently smaller ones 
files ability read trac data les allows coralreef applications analyze trac ine hosts data collected 
coralreef les contain version information allows software read data les written past version 
read les written nlanr mci oc mon software software 
coralreef identify nlanr mci les automatically format header explicitly told le format 
libpcap coralreef originally designed analyze traf atm devices apparent ip analysis features useful ip trac carried physical medium protocol 
supporting libpcap back coralreef library allows ip applications discontinued production point cards 
dag drivers included coralreef part dag software package 
architecture coralreef talk built large number widely available network interfaces change applications 
libcoral libcoral library bulk involved reading passive trac sources described section iii 
base coralreef applications built 
applications libcoral see uniform programming interface supported source types need rewritten input source 
libcoral supports new network card monitor systems existing application programs libcoral able new sources little change 
coralreef terminology source device network interface le data read 
concepts source interface kept separate reasons 
trace le may contain data collected multiple interfaces 
case data captured pair atm devices monitored directions trac 
second format data particular type device read directly device le created recording data device 
separation format handling handling allows format handling code device le device allows reading les platforms support devices les 
sources internally libcoral organizes source types source type switches contain information handle source including live source le live interface bu ered source bu ering coral dev source coralreef device init initialize source read min read minimum amount data speci interface source read block data source release free queued block buf see source readable bu ered data capturing source close close source coralreef device sources init function performs ioctl requests upload rmware device initialize requested parameters creates single interface structure initialized appropriate type switch settings 
function performs ioctl request get coral data block pointer driver 
coralreef device sources read min function coral blk read min calls stores coral data block pointer information interface structure 
coralreef device sources queue blocks allow reads partial blocks buf release functions 
coralreef les header describes interface produced data le including interface type con guration options 
les may contain data collected type coral device point fore dag 
init function coralreef les reads information uses create initialize interface structure interface recorded le 
function reads coral data block le allocated bu er 
read min function calls source gets block desired interface 
le may contain data multiple interfaces may return block interface requested read min 
time happens read min queues block interface structure block belongs avoiding need seek le data interface needed 
coralreef les les created software contain coralreef le headers identifying information libcoral told explicitly le le parameters record 
init function creates interface structure initializes dag values user speci ed parameters 
coral block headers boundaries absent les written software simply reads mb worth records bu er treats coral block 
le switch function coral le switch read min entry point 
init function pcap le pcap live sources calls corresponding pcap initialization function creates single interface structure initialized appropriate type switch settings 
pcap sources coral blocks function 
types pcap sources read min function coral pcap read pkt reads single packet pcap dispatch stores pointer interface structure 
interfaces libcoral organizes information handling interface types switch type 
interface type information includes description record layout functions normalize timestamps construct packets data stored interface structure source functions 
record layout interfaces coral data blocks 
describes size records locations elds records 
access elds di erent record formats abstracted macros nd elds record layout information switch hiding layout details application programmer 
interface type timestamp format 
functions switch convert timestamp canonical form struct higher level code deal di erent formats 
functions optionally automatically correct timestamp er architecture coralreef talk generated device failure fore rmware clock increment immediately hardware clock wrap 
error left uncorrected manifest higher software layers backward time jump approximately ms followed cells forward jump similar magnitude 
prep pkt function prepares possibly incomplete packet data returned source functions 
pos pcap interfaces preparation trivial interfaces return packets 
atm interfaces preparing packet means performing aal reassembly virtual channel atm cells coral data blocks returned source 
normally reassembly requires appending copy atm cell bu er associated virtual channel aal pdu protocol data unit maximum number captured cells pdu seen 
common case cell pdu captured reassembly function skip expensive copy resulting packet structure point directly original cell contents bu er full concatenated cell copies 
trac reading functions ways read trac coralreef source block cell packet 
methods read data multiple sources simultaneously 
block reading works sources operate coral data blocks 
implemented calling source select indicates source readable 
block reading primitive interface applications notably crl trace simply writes blocks coralreef trace le 
reading cells works atm sources useful applications atm layer analysis measuring trac volume virtual channel 
cell reading functions manage coral data blocks internally cells caller requested 
widely type reading packet 
libcoral packet api hides details physical layer application programmer 
context packet means layer pdu ethernet frame aal pdu 
resulting packet structure includes identi er caller distinguish separate data streams interface 
currently supported type interface atm identi er vpi vci 
result may include pointers header trailer lower layer protocols atm cell header aal trailer caller access desired 
trac analysis applications usually need raw data temporal order need perform periodic operations xed intervals processing speci duration 
application programming easier libcoral take care needs 
interface returns data temporal order low level bu ering interfaces means data read multiple network interfaces correct order 
reading multiple interfaces common atm network links separate interfaces direction trac 
libcoral cell packet reading functions option automatically merge sort records return caller 
merge sorting requires libcoral data interface read min guarantees requirement met 
programmer speci es interval libcoral trac reading functions compare data timestamps interval return control caller encounter timestamp interval 
similarly programmer specify duration reading functions return data timestamps exceed duration 
time features data timestamps generated source cpu clock ected bu ering source software le sources 
libcoral uses cpu clock test duration interfaces silent bu ering long providing timestamps comparison libcoral detect duration expiration correctly reading 
protocol parsing common feature required trac analysis applications put feature libcoral 
packets returned packet reading functions usually layer pdus may contain multiple encapsulation 
coral get payload function parses encapsulating protocol returns pointer payload 
encapsulating protocol indicates payload contains sublayer recognized libcoral function returns identity protocol 
convenience libcoral includes coral get payload layer coral get payload proto recursively call coral get payload enclosed pdu nds speci ed osi layer speci ed protocol respectively 
coral get payload proto function commonly easily nd ip layer skipping lower 
example ppp packet read interface contain bridged lan packet turn contain ieee packet nally contains ip packet programmer reach ip packet series conditions calls coral get payload single call coral get payload proto 
functions optionally print protocol information parse tcpdump understand protocols tcpdump 
major advantage libcoral tcpdump libcoral provides api access protocols layer just printing nds 
protocols recognized libcoral include atm rfc lane ieee ethernet ethernet ieee cisco ppp ethernet bridged lan ppp ip arp icmp tcp udp 
libcoral determine lowest level protocol trac device device user tell libcoral command line option con guration le 
user may con gure virtual channel atm interface having di erent protocol 
feature libcoral frequently needed trac architecture coralreef talk analysis applications trac ltering 
reading atm interfaces libcoral lter vpi vci con gured user 
filtering useful eliminating signaling channels uninteresting trac early stage 
libpcap libcoral lter packets bpf lter expressions 
lter expressions need ip transport header usually rst atm cell aal pdu ip options 
observed ip packets contain options 
rst cell usually contains sucient information lter libcoral apply bpf lter piece packet contained rst cell doing aal reassembly 
libcoral uses slightly modi ed bpf interpreter indicates just pass fail packet short tell 
case typically caused ip options pushing transport header rst cell libcoral reapply lter fully reassembled packet 
lter drops large fraction packets reassembly libcoral avoids signi cant amount unnecessary reassembly overhead 
con gurable parameters libcoral protocol speci cations interfaces interval duration length packet capture lters diagnostic verbosity libcoral functions read options command line con guration le 
functions save application programmer presents application users means con guration consistent applications 
perl api perl module crl pm provides perl interface libcoral interface generator allowing programmers call functions perl 
includes convenience functions performing common actions opening input sources setting default reading options extracting ip level data packet cell 
crl pm uses libcoral library back functionality dicult impossible implement perl implementing rest needless duplication ort 
programmers libcoral simply structures access packet headers coralreef speci structures native perl techniques access structures sucient deal large volumes data encountered trac analysis 
unpack pm perl module provides perl interface structures convenient times ef cient perl implementation 
unpack library gives programmer ability access individual elds packet data useful eld manipulations converting ip addresses binary string format 
raw trac applications raw trac applications included coralreef names crl accept common con guration options de ned libcoral 
coralreef includes applications capture raw pdus le convert trace les formats lter trac print packets analyze timestamps monitor security problems collect dns usage statistics 
applications crl flow aggregates raw trac data ow data ows software stack 
describe section iv 
iv 
components flows software stack raw trac stack provides access network data detailed manner need detail 
certain kinds data manageable coralreef ows stack aggregates data time ow belong 
coralreef ows stack container objects discussed 
shows relationships objects concepts ows stack 
ow loosely de ned set packets common values certain network related elds keys 
speci keys interest vary type analysis usually subset ip addresses port numbers ip protocol numbers network pre xes geographic locations ip protocol apply trac source destination 
speci set keys de nes speci 
information individual ow stored set values called counter 
common case values just cumulative counters number packets bytes seen ow 
counter may contain averages generalized types values 
speci set values counter add function updating values de nes speci 
ows stack stores set ows associated counters table 
generic table main data structure ows stack 
speci type table de ned contains called 
ow data management easier allow meaningful comparison aggregated data ows stack organizes groups tables intervals 
interval container ows interfaces xed time period 
interval table combination sub interface collected processed 
manner interval represents snapshot collected network trac time period 
coralreef ows stack composed programs generate intervals tables ows libraries reading writing processing 
flow generation flows created coralreef di erent ways commonly ow generation program crl flow 
program produces ows tuple source ip address destination ip address ip protocol source port destination architecture coralreef talk start tue duration min table count interface interface length tuple length tuple start tue duration min table count tuple pkts bytes src dst proto src dst pkts bytes ip ip port port interface interval table flow counter crl flow raw traffic data flow data fig 

objects concepts flows stack port 
icmp packets type code source destination ports 
additionally crl flow records source destination ports known meaningful protocol captured 
situation port information captured occurs example rst atm cell captured ip options push inner layer pdu header rst bytes 
information recording ports unde ned kept additional eld ow called ports ok leads ows referred tuples elds 
crl flow program generate ows ip packet length outputs separate table 
packet length user readily determine number packets bytes seen di erent sized packets 
crl flow uses record ow data contains normal counters number packets bytes ow elds really counters timestamps rst packet packet ow 
primary methods expiring ows xed timeout adaptive timeout protocol time bucketed 
methods may combined di ering extents 
xed timeout method ow expired xed time period elapsed packet seen matching ow waiting seconds seeing packet 
adaptive timeout xed timeout time period dynamically chosen ow previous behavior waiting times average interarrival time packets previously seen ow 
protocol expiry ow expired due observation protocol speci message tcp fin rst 
time bucketed expiry expires ows xed time interval external independent trac minutes start trace 
expiring time bucketed method useful amount trac link time window known accurately 
time bucketed expiry traf rate ow averaged entire lifetime time series plots link utilization 
average rates compute total trac values possible totals exceed link capacity produce unexpected results 
general time bucketed expiry useful studying trac characteristics link speci period non time bucketed expiry useful studying characteristics individual ows 
crl flow program currently supports xed timeout speci kinds adaptive timeout time bucketed expiry 
xed timeout expiry user speci es number seconds wait 
time bucketed expiry uses interval functionality raw trac stack periodically expire ows 
adaptive timeout mechanisms takes parameters 
rst new adaptive timeout mechanism netramet ow expired rst seconds point packet arrive times average interarrival time previously seen ow 
second adaptive timeout mechanism requires packet arrive times seen interarrival time defaults seconds packet seen 
generated ows usually analyzed tools written interval processing apis 
interval handler coralreef ows stack groups ow data xed time periods called intervals 
time period interval reporting ows need related architecture coralreef talk timeouts ow expiry 
interval contains data ows expired time period optionally ows active time period 
sets ows held table separate tables active expired ows sub interface 
example reporting active expired ows tuples ip packet lengths atm link virtual channels tables interval 
interval meta information describing interval time duration additional meta information speci sub interface contains 
meta information sub interface includes number ip packets ip bytes pdus unknown encapsulation timestamps rst ip packet seen 
improve eciency reading processing meta information interval appears followed tables ows order speci ed meta information 
sub interfaces contain tables sub interface grouped 
coralreef ows stack provides apis reading writing manipulating intervals 
operations provided interval apis include reading writing entire interval tables reading writing interval incrementally reading requested subset le automatically creating requested le table derived accessing interval meta information accessing sub interface data accessing tables interval sub interfaces moving commonly performed data manipulation operations library coralreef ows stack simpli es design ows analysis tools 
providing mechanism intervals organizing processing ow data coralreef processing analyzing storing ow data convenient ecient 
tables counters coralreef ows stack table container ows associated data values called counters 
addition simple operations table api provides functionality data aggregation report generation 
tables converted easily transformation ow keys 
associated counters combined produce aggregated result 
just involves adding respective elds combining counters 
simplest table aggregation removal key elds 
example tuple table aggregated directly ip matrix table uses source destination ip addresses keys 
complicated aggregations available coralreef include mapping ip addresses numbers routing table mapping ip addresses numbers countries 
production networks number ows seen large time period longer couple seconds making dicult pick important interesting ows 
help identify large ows table api sorting functions select ows counter elds 
example simple sums packets bytes selecting largest ows bytes single operation 
general operations supported table api include inserting new ow initial counter updating counter existing ow extracting counter associated ow walking ows table sorting ows elds counter increasing decreasing order sorting partially counter elds top bottom ows adding tables aggregating new transform ow keys accessing total counter table sum counters contained ows writing reading table directly text binary time writing table api fully available perl 
backends common basic counter counts packets bytes ows timestamps handled entirely perl 
ongoing provide stl versions tables tools 
software components coralreef includes stand library called maps ip addresses numbers network pre xes 
api perl actual search code written utilizes patricia trie fast memory ecient 
order mappings rst loaded le containing sorted list network pre xes numbers 
create input les coralreef includes scripts convert output cisco router sho ip bgp command output format uses 
included coralreef library maps numbers ip addresses geographic locations 
coralreef applications notably 
vi 
coralreef comes trac analysis applications biggest strength exibility power libraries components excellent base build new applications 
examples actual coralreef described 
published research taken advantage coralreef includes studies characteristics fragmented backends tables counters currently available caida members architecture coralreef talk ip trac trends wide area ip trac patterns 
current caida coralreef includes studies distributed denial service attacks dns root servers prevalence plaintext passwords 
existing trac analysis applications netramet vern paxson bro adapted libcoral api run specialized atm pos hardware previously support 
caida uses coralreef continuously generate realtime graphs trac loads 
coralreef teaching tool networking classes evi nemeth geo voelker caida trac analysis teaching cd 
coralreef package available download www caida org tools measurement coralreef 
vii 
acknowledgments sean university colorado boulder caida bgp table parsing help mci caida early prototypes testing tony mcgregor university waikato trac analysis teaching materials coralreef sue moon sprint advanced technology laboratories feedback coralreef shannon caida young caida judy ucsd david meyer cisco systems university oregon feedback assistance caida input support 
brownlee rfc trac ow measurement experiences netramet mar status informational 
jacobson leres mccanne tcpdump lawrence berkeley laboratory berkeley ca june available anonymous ftp ftp ee lbl gov waikato applied network dynamics group dag project dag cs waikato ac nz 
david moore ram jim kc cla world caida org inet proceedings june 
cla thompson wilder oc mon flexible high performance statistics collection inet proceedings june www isoc org isoc whatis conferences inet proceedings htm 
ibi platform www com ibi 
www com products html 
mccanne leres jacobson libpcap lawrence berkeley laboratory berkeley ca available anonymous ftp ftp ee lbl gov gerald combs ethereal network protocol analyzer www ethereal com 
network intrusion detection system box library www net projects 
cisco netflow www cisco com warp public netflow 
daniel owd trac ow analysis tool www caida org tools measurement 
daniel arts network data storage library www caida org tools utilities arts 
dave plonka network trac ow reporting visualization tool lisa winter conference proceedings 
university wisconsin madison dec usenix lisa 
simon system ow accounting www tik ee ethz ch deliv swi im pdf 
nlanr pma passive analysis nlanr net pma 
juha rfc encapsulation atm adaptation layer july 
atm forum technical committee lan emulation atm version speci cation july 
digital equipment intel xerox ethernet local area network data link layer physical layer version nov 
ieee ieee std 
carrier sense multiple access collision detection csma cd access method physical layer speci cations 
simpson rfc point point protocol ppp july 
simpson rfc ppp framing july 
simpson rfc ppp sdh june 
simone wheeler rfc method transmitting ppp ethernet feb 
baker bowen rfc ppp bridging control protocol bcp june 
postel rfc internet protocol sept 
plummer rfc ethernet address resolution protocol converting network protocol addresses bit ethernet address transmission ethernet hardware nov 
postel rfc internet control message protocol sept 
postel rfc transmission control protocol sept 
postel rfc user datagram protocol aug 
mccanne jacobson bsd packet lter new architecture user level packet capture usenix winter conference proceedings 
lawrence berkeley laboratory dec pp 

sean cla trends wide area ip trac patterns view ames internet exchange itc specialist seminar ip trac modeling measurement management sept 
david david fletcher dominique perl extension building reilly perl conference aug 
cla braun polyzos internet trac ow pro ling nov www caida org outreach papers html 
bo ryu david cheney hans werner braun internet ow characterization adaptive timeout statistical modeling pam workshop passive active measurements 
hrl nlanr apr ripe ncc 
brownlee margaret murray streams flows torrents pam workshop passive active measurements 
caida apr ripe ncc 
mrt multi threaded routing toolkit www 
net 
shannon david moore cla characteristics fragmented ip trac pam workshop passive active measurements 
caida apr ripe ncc 
vern paxson bro system detecting network intruders real time computer networks vol 
pp 
dec 
coralreef demos https caida org coralreef demos 
tony mcgregor caida trac analysis teaching cd trac caida org 
