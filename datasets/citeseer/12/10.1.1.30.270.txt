debugging globally optimized programs data flow analysis roland institut fur informatik department computer science technische universitat munchen munich university technology munchen germany tel informatik tu muenchen de advanced processor machine architectures need optimizing compilers efficiently programmed high level languages 
need source level debuggers handle optimized programs rising 
difficulty debugging optimized code arises problem determine values source code variables 
ensure correct debugger behaviour optimized programs debugger determine variable storage location associated register 
verify variable current value determined location really value variable unoptimized code 
deduce requirements algorithms determination algorithm meeting requirements general previous 
give experiences implementation 
knowledge implementation determination algorithm globally optimized code 
source level debuggers proved valuable tools program development 
current implementations rely heavily code optimized compiler 
earlier phases program development strong need optimizers stages prototype versions optimization desirable 
couple reasons debuggers usable optimized code 
optimizer correct may partly funded german science foundation contract sfb tp bugs program effects optimized version cop 
furthermore bugs may appear code production point optimized 
shows fragment program corresponding sparc assembly code example demonstrate problems symbolic debugger optimized code deal 
code location problem arises soon programmer sets breakpoint 
wants break line debugger halt optimized program 
appropriate mapping depends programmer intention setting breakpoint 
wants examine old value program stopped instruction semantic mapping 
wants determine positive breakpoint mapped instruction syntactic mapping 
interested value may best instruction register positive 
suppose program stopped instruction 
user tries inspect value debugger determine register assigned example register 
addition debugger ensure current value contained value source code 
commonly referred data value problem 
fig 
noncurrent loop iteration contain value assigned prior loop instruction assigned new value register 
value loop invariant current iterations 
information loop iteration count debugger conservatively regard noncurrent 
techniques developed avoid problems disabling code transformations hinder transparent debugging 
require specification debugging requests prior compilation gup ps restrict program points debugger invoked hcu zj 
variables assumed live loop 
mov add add fp loop ld tst ble sll add sub cmp add bl program fragment optimization methods allow optimization program development limited debugging production code bugs show fully optimized code 
cases optimization handled debugger 
additional symbol tables inform debugger effects transformations applied cmr 
different transformations require different tables updated optimization step debugger depends optimizer implementation usually handles optimizations 
furthermore tables easily support different breakpoint mappings run time information 
promising approach handle large number optimizations general flexible way data flow analysis detect effects debugging 
algorithms concept severe drawbacks 
hen atg usable exclusively local optimization atg solves restricted problem finding register assigned variable 
general algorithm far published cop 
implemented run time information supports fixed syntactic breakpoint mapping 
algorithm solving data value problem general previous fully implemented 
section specify properties met algorithm 
section gives formal definition currency basis algorithm outlined section 
section presents results obtained implementation 
requirements solutions data value problem independence optimization details 
algorithm independent optimizer internals optimization specific data structures interface compiler debugger general represent large subset common global optimizations 
suitable interface consists flow graphs source object program explicit mapping corresponding entities 
representing source object code single graph cop problematic basic block structure heavily changed optimizer 
arbitrary breakpoint mapping 
contrast previous fixed syntactic breakpoint mapping algorithm mapping 
shown section syntactic breakpoints unique necessarily best points program 
currency determination allows arbitrary breakpoint mappings freedom choose optimal mapping variables interest user current 
addition algorithm property program halted due exception allows recovery noncurrent variables hen 
cases syntactic mapping assumed 
usage run time information 
shown section run time information lead precise results analyzing currency 
order information paths program taken past algorithm information may gathered coarse grained traces invisible breakpoints 
distinguish different instances statement 
assume program fig 
halted statement instruction second loop iteration 
value computed statement value associated register stored instruction 
instruction generated statement noncurrent value computed current loop iteration store performed previous 
handling non live variables 
current techniques cmr cop rely unique mapping source object variables may depend program counter support variables changing locations due register allocation 
optimizer maintains mapping storing register memory location segment variable live range 
values non live variables determined debugger information proper location available 
algorithm atg computes proper location non live variables requires register segments variable live range case variety compilers 
algorithm section rely assumption 
handling indirect assignments 
usable real programs algorithm determining currency able handle indirect assignments pointers correctly 
section shows accomplished algorithm 
assurance currency compiler 
compilers regard assignments pointers implicit variables pointer may access 
variables current location assignment associated store instruction 
information may significantly speed analysis lead precise results 
general definition term current intuitively breakpoint variable current register memory location iff value value source program 
context means possible execution program 
concerned original source program optimized object program need definition term execution characterizes behaviour program versions definition path sequence xn statements possible successor statement execution program pair path object program takes input path source program take executed input 
value variable determined assignment current breakpoint iff execution program statement instance ff assigned value source code semantically corresponding statement instance fl object code stored value reached breakpoint general case breakpoint position identified pair statement instances fi ffi 
define currency single definitions important algorithm section 
definition definition current breakpoint fi ffi respect source variable object variable iff condition holds execution instance ff ff writes reaches fi instance fl store semantically corresponds ff writes reaches ffi note terms writes reaches definition refer actual program execution 
presence indirect pointer assignments static analysis decide definition may write variable may reach breakpoint definition directly usable paths tested contain assignments 
section efficient static analysis method case 
variable current definition may assigned variable value current 
definition rd set definitions variable reach location variable current fi ffi object variable iff rd current fi ffi respect information semantic correspondence statement instances summarizes program transformations performed optimizer 
vector iteration indices distinguish instances pw definitions hold presence loop transformations interchanging skewing 
index vectors requires program loop structure known defined 
rest assume program loop structure changed optimization 
number back edges path statement distinguish different instances statement instance occurrence statement path 
upper greek indices distinguish different instances statement 
instruction fl breakpoint stored vo structured programs back edges correspond loops 
see hec exact definition 
algorithm determine current variables program representation program represented pair flow graphs procedure source graph represents original source code object graph represents optimized code 
nodes graphs basic blocks contain sequence statements 
analysis consider operations change variables control flow operations included 
characterized information ffl statement type distinguish assignments indirect assignments procedure calls jumps 
ffl assignments field assigned var containing description destination variable variable name address register number 
offset length fields handle assignments structure array components 
ffl indirect assignments calls associated set variables may modified 
additional relation code mapping source statements semantically equivalent instructions summarizes code transformations 
assignment source code mapped instruction stores value assignment right hand side 
relation code holds corresponding edges branch join nodes order model control flow transformations 
general code total unique mapping 
shows representation program fig 
instruction corresponds statement stores value equivalent statements 
code holds execution successor statement instruction branches instruction 
order simplify analysis flow graphs single entry nodes zero degree contain initial pseudo assignments variable graph 
way reaching definition variable path 
flow graph nodes basic blocks ease explanation subsequently assume node single statement 
node consists statement additional local analysis performed 
algorithm disregarding indirect assignments moment definitions develop algorithm computing currency variable idea look nodes object graph interchanged respect assembler listing instruction delayed branch executed 
instance definition reaches breakpoint source program 
definition reaches breakpoint set paths source program 
set defines set corresponding paths object program 
likewise tested source definition leads set semantically corresponding definition instances object code 
paths definitions reaches breakpoint object code definitions write object variable current unfortunately idea converted algorithm immediately infinity possible instances infinity program executions tested 
furthermore instance breakpoint usually unknown possible breakpoint instances considered 
loop transformations applied usually reason program breakpoint fi ffi fi ffi located different iterations loop 
syntactic breakpoints located loop outside loops reached loop iterations achieve transparent debugger behaviour 
case justified require fi ffi support semantic breakpoints consider cases ahead loop contains semantic breakpoint set statement moved loop 
case ffi instance ahead loop iteration containing fi reverse situation occurs located loop containing situations occur regularly 
compiler may able move load instructions previous loop iteration statement key effect computation value determines position semantic breakpoint left iteration moved loop 
instances corresponding breakpoint locations longer independent coupled conditions 
conditions extend statement instances fl semantically corresponds ff code relation holds ff fl determine definition paths arbitrary instance breakpoint examined 
standard data flow analysis algorithms compute combined information reaching definitions paths 
shown section able different instances definition reaching path 
accomplished unrolling flow graphs way instances need distinguished represented different nodes unrolled graph 
standard data flow analysis transformed path provides information different statement instances 
parameter determines number instances prior breakpoint distinguished 
unrolled graph represents possible paths contain back edges 
shows example graph original graph object assigned variable line fig 
node source code mapping source object representation program fig 
nodes nodes nodes nodes flow graph nested loops unrolled graph contains nested loops 
roughly nodes represent current loop iteration nodes gamma represent previous iteration inner outer loop 
subgraphs gamma summarize instances need distinguished 
formally unrolled graph gm nm em graph defined follows 
nm theta gammam gamma 

hx yi forward edge em gammam gamma 
hx yi back edge gammam gamma gammam gamma em em em gammam gamma 

start node exit node nm path node gammam node contains nodes removed part path gm unrolled graphs model execution source object program currency definition tested way definition sm considered instance source breakpoint fi represented node 
instance ff definition reaches breakpoint path containing back edges node gammam reaches sm test executions instance reaches breakpoint source program semantically corresponding definition instance reaches breakpoint object program 
order test execution simultaneously restrict unrolled graph om way paths remain belong executions 
done information computed sm restricted object graph path definition corresponding ff reaches breakpoint 
data flow problem similar available expressions problem solved standard analysis algorithm 
order test possible executions steps repeated 
necessary consider paths arbitrary length 
standard scalar data flow problems possible executions examined testing paths containing back edges flow graph loop connectedness hec 
analysis proved delta legal upper bound proof fact path containing back edges cycle 
program execution definition reaching source breakpoint path delta back edges noncurrent shorter execution property 
factor shows path divided sub paths cycles may removed order remove object breakpoint instruction killing definition value execution 
back edges immediately definition immediately preceding breakpoint source program removed increasing bound 
evidence upper bound reasonably smaller proof 
practical cases usually greater structured programs target compiler creates flow graphs 
problems solved algorithm 
om restricted required way 

nodes om represent possible instances object breakpoint represent instance corresponding ff 
find object variable associated restricting unrolled object graph unrolled graph sm examine paths node gammam reaches node 
edge part path gammam reaches reach point immediately case join node reached incoming edge 
corresponding edge object graph hx code hx part path om program executions deleted likewise remove edge corresponding edge unrolled source graph part path sm containing breakpoint location 
nodes part path om deleted relevant considered program executions 
properly restricting sm om run time information taken account similar way 
ds gammam doesn reach xs killed xs 
finding possible breakpoints definitions unrolled object graph section defined instance ffi breakpoint object program correspond arbitrary instance fi source breakpoint located loops ffi fi hold 
moved front loop surrounding ffi instance prior iteration containing fi likewise ffi instance iteration moved loop 
unrolled flow graphs fi mapped sm nodes om represent corresponding instance ffi case ffi mapped ffi fi holds 
second case ffi represented node consider loop iteration node gammam gamma gamma prior current iteration 
situation current loop iteration reached back edge corresponds edge gamma unrolled object graph 
located ahead loop reverse post order hec path doesn contain back edge 
similar conditions arise located loop containing set nodes om may represent possible instance breakpoint summarized gammam gamma gamma path om starting ends back edge gamma path starting back edge example consider breakpoint line program fig 

shows unrolled object graphs program breakpoint mapped instruction node represents instance breakpoint nodes gamma gamma possible breakpoints path nodes back edge gamma node precedes node instruction located prior loop 
nodes paths gamma gamma represent instance instruction ahead current loop iteration 
considered explicitly explanation set correct nested loops 
relation code defining semantic correspondence statements extended statement instances mapping set nodes corresponding ff similar 
shift indices ff mapped gammam 
furthermore semantic correspondence hold possible paths 
called depth order 
nodes partially numbered order keep picture clear 
input flow graphs source variable breakpoint location output set current object variables current current 
noncurrent current 
algorithm determine set object vars object code variables corresponding explained nodes current object vars delta definition gammam reaches sm restrict om paths possible correspond reaching paths gammam sm see 
determine set nodes representing possible breakpoints definitions shown solve data flow equation avail om avail pred avail gamma ae var object vars represents definition representing possible breakpoint current current avail complete algorithm currency determination set results gammam gamma code paths gammam gamma back edge gammam gamma gammam gammam gamma gammam gammam code code gammam paths start back edge gammam gammam gammam finding appropriate object variables principle algorithm fig 
doesn require computation object variables corresponding prior currency determination computes set object variables current 
lot set operations efficient small sets beneficial start small set variables correspond set variables 
single definition executed value stored destination variable corresponding definition object code 
corresponding definition value stored object variable 
definition executed value stored variables contained code ds assigned var breakpoint source code value may computed definition rd 
unknown definitions assigned current value object variable eligible contained set rd 
set variables may contain value computed ds rd bs vs code ds assigned var complete algorithm resulting algorithm shown fig 

need explicitly build unrolled graph sm definitions gammam reaching sm computed slightly modified iterative algorithm reaching definitions iterative algorithm hec mj solve equation avail 
example consider variable breakpoint program shown fig 
fig 

assuming statement nodes def nodes avail nodes edges deleted due path restriction object graphs unrolled object graph unrolled object graph source graph definition breakpoint nodes brk example currency determination definition prior loop rd 
statement corresponding instruction storing set object variables may contain value evaluates assigned var assigned var assigned var fl 
instruction eliminated stored register set empty value determined associated location 
rest example assume associated 
step algorithm tests executions definition reaches breakpoint path back edges 
execution shown fig 
trace source object program 
looking execution clear noncurrent value assigned statement stored register instruction overwritten instruction 
result computed algorithm fig 

analysis unrolled source graph shows node reaches node statement definition look 
step edges nodes occur executions removed unrolled object graph 
resulting graph shown upper half fig 

edge gamma eliminated reaching path contain corresponding edge gamma likewise deleted path containing node contain elimination nodes part path removes dotted nodes edges fig 

graph roughly contains information object program trace fig 

determined node representing appropriate instance breakpoint instruction node computed representative definition semantically corresponds statement 
algorithm checks value assigned definition available breakpoint 
instruction assigns register node kills result avail current 

mov definition 
mov add kills add fp ld tst ble taken sll program trace fig occurrence breakpoint 
sethi hi st lo st mov 
example program indirect assignment iterations loop result change noncurrent 
runtime information telling debugger program stopped loop iteration better result achieved 
reflect runtime information edge deleted unrolled source graph part program execution breakpoint occurs loop iteration 
node reaches node longer definition reaching breakpoint loop iteration 
case current initialized set fl analysis repeated 
definitions gamma gamma reach breakpoint definitions situation occurs analysis gamma explained 
unrolled graph shown lower half fig 

node removed path restriction node represents current breakpoint instance 
code instruction moved front loop nodes gamma gamma represent instances instruction semantically corresponds source definition tested 
node gamma included paths node back edge gamma gamma candidate instruction preceded instruction reverse post order 
addition occurrences instruction paths gamma represents instance instruction prior loop iteration containing breakpoint 
case avail fl path possible definition reaches node 
current fl iteration 
subsequent iteration changes result current breakpoint reached loop iteration 
currency determination presence indirect assignments presence indirect assignments algorithm section conservative 
consider program fragment fig 
may point variable examined breakpoint reaching definitions tested 
definition current respect algorithm classify noncurrent instruction may kill problem assuming definition assumed access algorithm doesn take account case write semantically corresponds 
theorem allows slightly modified recursive version algorithm presence pointer assignments 
theorem id set definitions path kill id minimal subset rd path reaching definition id 
current id current respect indirect assignment current code 
justify theorem example 
id statements may write current instructions may change arbitrary execution writes current current recoverable current undefined current undefined percentage breakpoints variables indicated class current ref var 
ref var 
local var 
flow local var 
ref var 
flow ref var 
local var 
flow local var 
flow current recoverable current noncurrent recoverable undefined eliminated nonunique percentage breakpoints variables indicated class effects optimization debugging current points modified 
theorem allows reduce algorithm complexity compiler information assures currency variable 
example guaranteed current recursive analysis needed 
results algorithm developed sections implemented sun compiler sparc workstations muc 
optimizations performed compiler include global common subexpression elimination register allocation global copy constant propagation global dead store elimination loop invariant code motion composite breaking 
modified optimizer code generator generate proposed program representation addition traditional debugging information 
lines code lines changed added purpose additional code consists output routines 
overhead compile time object file size introduced debugging information measured compiling optimizer consists files 
creating traditional debugging information unoptimized code increases compile time file size increases factor 
comparison generating extended information optimized code results compile time overhead output files increase factor size 
output format redundant moment expect size program representation reduced factor resulting comparable reduction compile time file size overhead 
currency analysis performed separate program takes input breakpoint location line number object code address variable name offset length 
worst case complexity analysis quadratic number basic blocks practice response time algorithm tenths second sparcstation algorithm usable interactive debugging 
gain empirical results effects global optimization debugging analyzed programs input scripts request currency state variable possible breakpoint 
usual syntactic breakpoint mapping generated compiler current undefined noncurrent recoverable current undefined noncurrent recoverable flow average number current noncurrent variables way unoptimized programs analysis 
shows results different programs optimizer target compiler flow currency algorithm 
comprises breakpoints currency tests 
variables include locals parameters types structures arrays broken components 
order keep size input scripts manageable global variables considered picture 
columns labelled local var 
variables examined breakpoints 
fig 
shows virtually breakpoints variable current large number breakpoints noncurrent variables occur 
noncurrent variables recovered analyzed locations variables assigned occur half breakpoints 
fig 
variables labelled undefined include procedure parameters changed prior breakpoint 
parameters variable value correctly determined debugger interprocedural optimization performed case compiler 
shows view results percentage variables existing breakpoint current noncurrent undefined recoverable 
forth variables noncurrent average chance determine expected value variable 
recovery moderately successful global optimizations noncurrent variables recovered 
extent reasons variables noncurrent shown fig 
breakpoints associated object variable due code elimination cases object variable unique different registers different sections variable live range 
easily possible analyze optimization caused variable noncurrent program representation models accumulative effect optimizations 
fig 
shows relative number breakpoints full debugging possible considered variables current undefined recoverable 
variables taken account referenced breakpoint line preceding line source code results change significantly columns labelled ref var 
fig 
show 
restriction models situation user sets breakpoint see value variable point defined immediately ahead 
situation number breakpoints noncurrent undefined variables greatly reduced number breakpoints full debugging capabilities increases 
possible obtain statistical data known presence noncurrent variables affects debugging practice programmer interested value variable real debugging session 
answer question integrate algorithm source level debugger part programming environment bb 
investigate usage run time information affects results section 
done algorithms determine syntactic breakpoint mappings optimal mappings respect number current variables 
atg adl tabatabai gross 
detection recovery endangered variables caused instruction scheduling 
proceedings acm sigplan conference programming language design volume acm sigplan notices pages albuquerque new mexico june 
atg adl tabatabai gross 
evicted variables interaction global register allocation symbolic debugging 
proceedings th annual acm symposium principles programming languages pages charleston south carolina january 
acm press 
bb bode 
integrated environment programming distributed memory multiprocessors 
bode editor distributed memory computing nd european conference volume lecture notes computer science pages munchen frg april 
springer verlag 
brooks hansen simmons 
new approach debugging optimized code 
acm sigplan conference programming language design implementation volume acm sigplan notices pages san francisco california june 
acm press 
cmr coutant 
doc practical approach source level debugging globally optimized code 
proceedings sigplan conference programming language design implementation volume acm sigplan notices pages june 
cop 
debugging optimized code misled 
phd thesis univ california santa cruz may 
technical report ucsc crl 
gup gupta 
debugging code reorganized trace scheduling compiler 
structured programming 
hcu holzle chambers ungar 
debugging optimized code dynamic deoptimization 
acm sigplan conference programming language design implementation volume acm sigplan notices pages san francisco california june 
acm press 
hec hecht 
flow analysis computer programs 
computer science library 
elsevier north holland new york 
hen hennessy 
symbolic debugging optimized code 
acm transactions programming languages systems july 
mj muchnick jones 
program flow analysis theory applications 
prentice hall englewood cliffs 
muc muchnick 
compiling risc systems 
risc compilers tutorial sigplan conference programming language design implementation white plains new york june 
ps pollock soffa 
high level debugging aid incremental optimizer 
proceedings annual hawaii international conference system sciences volume ii software track pages 
pw padua wolfe 
advanced compiler optimizations supercomputers 
communications acm december 
zellweger 
interactive source level debugging optimized programs 
technical report csl xerox palo alto research center palo alto california may 
zj johnson 
debugging optimized code behaviour 
unpublished manuscript april 
