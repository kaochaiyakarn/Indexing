fvision declarative language visual tracking john peterson paul hudak alastair reid greg hager yale university peterson john cs yale edu paul hudak yale edu university utah reid cs utah edu johns hopkins university hager cs jhu edu 
functional programming languages generally associated computationally intensive tasks computer vision 
show declarative programming language haskell ective describing complex visual tracking systems 
taken existing library computer vision called xvision build fvision pronounced library haskell types functions provides high level interface lower level xvision code 
functional abstractions users fvision build test new visual tracking systems rapidly reliably 
haskell degrade system performance computations dominated low level calculations expressed haskell glue code negligible impact performance 
fvision built functional reactive programming frp express interaction purely functional manner 
resulting system demonstrates viability programming visual tracking programs continue spend time executing low level image processing code haskell advanced features allow develop test systems quickly con dence 
demonstrate haskell frp express basic abstractions visual tracking 
algorithms processing dynamic imagery video streams composed sequence images reached point usefully employed applications 
prime examples include vision driven animation human computer interfaces vision guided robotic systems 
despite rapid progress technological scienti fronts fact software systems incorporate vision algorithms quite dicult develop maintain 
lack computing power underlying algorithms 
problems scaling simple algorithms address complex problems prototyping evaluating experimental systems ective integration separate complex components working application 
attempts build general purpose image processing libraries example 
particular intel vision libraries example signi cant software ort aimed creating general purpose library computer vision algorithms 
orts taken traditional approach building object subroutine libraries languages java 
libraries designed interfaces contain large selection vision data structures algorithms tend provide language abstractions facilitate dynamic vision 
research discussed started xvision large library code visual tracking 
xvision designed traditional object oriented techniques 
computationally ecient engineered start dynamic vision abstractions xvision failed solve basic software engineering problems 
particular original xvision lacked abstraction mechanisms necessary integrate primitive vision components larger systems easy parameterize vision algorithms way promoted software reusability 
directly attacking issues world chose di erent approach declarative programming techniques 
fvision result ort haskell library provides high level abstractions building complex visual trackers ecient low level code xvision 
resulting system combines eciency software engineering advantages functional languages exibility composability modularity abstraction safety 
organized short tour problem domain punctuated short examples construct fvision abstractions 
put visual tracking realistic context examples include animation code implemented fran animation system built frp 
primary goal explore issues avoid discussion underlying primitive tracking algorithms focus methods transforming combining primitive trackers 
examples written haskell assume reader familiar basics language 
see haskell org information haskell functional programming 
frp library types functions written haskell 
frp library evolving rapidly function type names may match prior papers involving frp 
assume prior experience frp 
information regarding frp haskell org frp 
visual tracking tracking inverse animation 
animation maps scene description larger array pixels tracking maps image simpler scene description 
animation computationally ecient scene changes slightly frame re rendering entire scene clever algorithm reuse information previous frame limit amount new rendering needed 
tracking works similar way computationally ecient trackers exploit fact scene changes slightly frame 
consider animation cubes moving transformations 
transformations translate scale rotate cube location scene 
fran program plays animation scene transform transform scene cube cube cube cube rendering animation process generating video image stream composition videos cube turn constructed individual transformations 
computer vision process image stream determine location orientation cubes recovering transformation parameters 
accomplish task knowledge scene structure captured model combine visual tracking primitives motion constraints observer 
observer processes video input stream determine motion model 
assume behavior objects video smooth objects jump suddenly di erent locations scene 
number signi cant di erences vision animation tracking fundamentally uncertain feature recognized measurable error 
error values resolve con icts trackers trackers express certainty nudge certain trackers target 
ecient trackers fundamentally history sensitive carrying information frame frame 
animators generally hide sort optimization user 
animation builds scene top complex objects decomposed unambiguously simpler objects 
tracker proceed bottom basic features complex object process far open ambiguity 
entire xvision system consists approximately lines code 
includes generic interfaces hardware components video sources displays large set image processing tools generic notion trackable feature 
basis xvision de nes trackers specialized modules recognize follow speci features video image 
xvision includes trackers features edges corners images areas known color 
basic tracking algorithms re expressed haskell basic functions imported tool importing code haskell 
primitive trackers primitive trackers usually maintain underlying state 
state de nes location feature additional status information con dence measure 
form location speci sort tracker 
color blob area center line endpoints 
illustrates idea conceptually speci case ssd sum squared di erences tracking algorithm 
algorithm tracks region attempting compute image motion deformation match current appearance target xed 
steps algorithm 
acquire image region video input estimate target position con guration 
addition reverse transform warp 
acquired region interest generally smaller full video frame 
pixels possibly interpolated warping account rotation stretching 

compute di erence image image target 

determine perturbation current state parameters cause transformed current image best match 

data update running state 
process requires small part original video frame ecient compared techniques search entire image 
fact motion frame frame small computing perturbation current state 
consequence requires target move relatively consistently frames image stream abrupt movement may cause tracker lose target 
xvision trackers assembled hierarchical constraint networks de ned geometric knowledge object tracked model 
knowledge typically model inverse acquire position image image initial position fig 

xvision feedback loop 
relationship di erent points edges object image corners square 
corner missing image due occlusion positions de ne expected location missing corner 
allows disoriented tracker resynchronize target 
xvision includes object oriented abstractions construction hierarchical constraint networks abstractions proven dicult implement limited expressiveness 
remainder describe rich set abstractions tracker composition 
abstractions visual tracking camera converts continuously changing scene discrete stream images 
previous de ned trackers terms standard stream processing combinators 
combinators subsumed frp 
frp supports inter operation continuous time systems discrete time stream processing systems 
allows fvision combine animation systems fran robotics systems frob 
examining construction trackers start demonstrating tracker conjunction animation 
function processes video stream type video clk generates animation red dot drawn tracked image 
type video de ned type video clk clk image clk frp denotes stream values type synchronized clock clk 
clock type allows fvision detect unintentional clock mismatches 
code tied speci clock clk argument uninstantiated 
user rst de ne image tracked mouse select rectangular area target video image 
rectangular area marked pressing mouse indicate top left corner dragging releasing mouse bottom right corner 
mouse dragged animated rectangle drawn video image 
mouse released rectangle replaced red dot centered rectangle ssd tracker created move dot successive frames 
video clk video untilb lbp snapshot mouse corner rectangle lift corner mouse untilb lbr snapshot mouse corner image tracker image corner corner mid midpoint corner corner mid mid tracker transform tracker stepper video convert image stream behavior 
draw red dot rectangle 
draw rectangle code read behave video input left mouse button pressed time snapshot mouse position taken 
draw rectangle top left hand corner xed bottom right hand corner current mouse position left mouse button released point snapshot mouse position video taken 
tracker initialized midpoint corners initial location snapshot image 
output tracker control position red dot drawn video image 
example draw rectangle face tracker follow face moves camera eld view 
tracker robust may lose face point red dot cease move meaningfully 
functions untilb snapshot part frp 
convention types functions deal behaviors objects vary continuously time 
type synonyms abbreviate behavior picture 
functions imported xvision function extracts rectangular sub image video stream 
image serves image ssd sum squared di erence tracker 
image acquired tracker function de nes behavior follows location image video stream 
function starts tracker pointing initially selected rectangle de ning transformation animation 
types tracking goal research de ne trackers compositional style 
principals type directed design start type de nitions 
tracker composed parts observer acquires normalizes subsection video image stepper examines sub image computes motion tracker 
type observer observation image observation type stepper measure observation observation measure observer takes location tracker current frame video returns observation usually sub images frame 
location may designated single point point type color blob tracking point rotation scale represented transform type 
observers may choose sample lower resolutions dropping pixel example 
case type determined particular observer 
stepper adjusts location tracked feature current location observation returned stepper 
stepper may compute additional values measure accuracy properties tracker 
choose measure type constructor measure separate value measure overloading combine measured values 
xvision de nes variety including ssd stepper color blob edge detectors motion detectors 
measurement types de ned instances valued class 
extracts value containing measurement type class valued valueof measurement types functor class allowing modi cation contained value 
residual type ssd tracker example measurement data residual residual residual float instance valued residual valueof combining observer stepper yields tracker mapping video stream stream measured locations 
type tracker measure stepper measure image note tracker re nement stepper type 
trackers constructed combining observer stepper observer observation stepper measure observation tracker measure loc image ob loc image loc ob primitive tracker assemble primitive fvision tracker ssd tracker 
image observer pulls similar sized image video source current location 
stepper compares image current frame returning new location residual 
particular tracker uses simple location point orientation 
ssd observer xvision primitive size observer image transform size type de ning rectangular image size pixels image 
position orientation designated area de ned transform interpolate pixels video frame image correct size 
component ssd stepper function compares image observed determines new location image 
type stepper image stepper residual image transform image argument image 
detailed description particular stepper 
full ssd tracker image residual transform image sizeof image image tracker need function binds tracker video source initial location valued measure video clk tracker measure clk video tracker ma locations delay ma lift locations video tracker ma valueof delay function delays values event stream clock cycle returning initial value rst clock tick 
run tracker create continuous behavior behavior valued measure video clk measure tracker measure clk video ma trk stepper ma video valueof ma trk function need measured initial state unmeasured initial value behavior measured 
clk type small examples essential integrity multi rate systems 
example consider animation driven separate video sources scene video clk video clk type system ensures synchronous parts system trackers clocked video sources consistently synchronous operation may combine streams di erent clock rates 
converting clocked streams behaviors video sources drive resulting animation 
complex trackers consider animator switches di erent images scene transform scene place transform place ifb picture picture tracker scene recover location picture place transformation boolean selects picture 
previously inverted transformation xed picture 
invert ifb function determine state boolean 
wish retain compositional program style animator tracking function structure similar scene function 
composite tracker watch images picture picture times 
determine image examine residual produced ssd measure di erence tracked image image 
formalize notion best match ord class instance ord residual residual states smaller residuals better large ones 
function combines pair trackers tracker follows whichever produces better measure 
trackers share common location original scene description transformation pictures 
resulting values augmented boolean indicating underlying trackers best correlated image 
value corresponds animator 
projection measured values tracker output type ignored combines internal tracker states observed values seen outside 
functor measure ord measure tracker measure tracker measure tracker measure bool loc max fmap true loc fmap false loc structure simple location minus additional boolean passed tracker functions 
results combined max 
fmap functions tag locations exposing images presently target 
code trackers signature restricts trackers 
signature valid functor measure ord measure stepper measure observation stepper measure observation stepper measure observation bool composable manner trackers 
quite useful composing trackers perform observation 
user de ne ecient tracker combining trackers common observation 
higher order functions natural way express sort abstraction fvision 
sort abstraction cumbersome closures hold partially applied functions de ned built manually 
adding prediction may improve tracking accuracy incorporating better location prediction system 
tracking moving object linear approximation motion accurately predict object position frame 
prediction function general form type predictor behavior time time predictor de nes function times greater observations occurring adding predictor simple valued measure video clk tracker measure predictor clk video tracker video snapshot predictor tracker predictor frp primitive adds explicit time frame video 
snapshot frp primitive samples predictor current time adds sampled values prediction function stream 
quite di erent connection output tracker back input step 
feedback loop outside tracker expressed predictor 
prediction tracking system looks video clk image point clk point video ssd interp positions positions video ssd interp point clk point predictor point interp function implements simple linear prediction 
rst argument initial prediction seen initial interpolation point arrives 
initial value allows passed interp serve initial observed location 
generalized composite trackers demonstrated way compose trackers 
explore number general compositions 
trackers parallel object animation may contain trackable features 
features move independently locations related way 
consider function animating square scene transform scene transform polygon resulting animation trackers discern di erent line segments edge square 
positions line segments somewhat correlated opposite edges remain parallel transformation 
level redundancy trackable features 
goal exploit redundancy tracking system robust utilizing relationships tracked objects 
composite tracker combines trackers individual object features tracker object 
relationship object features represented pair functions projection embedding 
functions map model state parameters de ning object states component trackers 
projection function maps model state set component states embedding function combines component states model state 
function pair denoted type type build composite tracker combines states component trackers 
example de ne corner tracker component edge trackers 
edge trackers implemented xvision stepper stepper sharpness image location maintained tracker line segment denoted type 
tracker observes image measures quality tracking sharpness type 
sharpness type structure residual type mathematically distinct 
combine line segments corner nd intersection underlying lines possibly outside line segments nudge line segment point 
crucial edge trackers tend creep away corner 
underlying geometric types follows type point vector type corner point vector vector force length vector de ning line segment remain constant tracking allowing xed size window underlying video stream 
projection embedding functions corner corner corner corner corner seg seg seg seg need function combine trackers projection embedding pair 
join joinable measure functor measure tracker measure tracker measure tracker measure join ma mb fmap ma mb structure function function de ned earlier 
signi cant addition type class joinable 
create measured object measured sub objects 
combine measurements sub objects produce measurement 
joinable class captures idea class joinable instance joinable sharpness 
function joins measured values single combining measurements appropriate way 
joining measurements systematic manner dicult avoid addressing problem omit instances joinable 
way implement joining allow embedding function see underlying measurements return potentially di erent sort measurement join tracker measure tracker measure measure measure measure tracker measure generalized allow component trackers di erent measurements 
cases hide details joining measured values type class spare user extra complexity 
corner tracker tracker sharpness tracker sharpness tracker sharpness corner join join function part family joining functions integrating speci number underlying trackers 
corner tracker incorporates crosstalk states trackers deal redundant information 
return tracking transformed square 
corner trackers compose square tracker 
underlying datatype square similar corner type square point point point need specify points fourth functionally dependent 
type de nes image square ane transformation image reconstruct transformation location rotation scaling shear 
problem map tracked corners points de ning square type 
possibilities example throw point edges vectors associated corner point corners probably indicating corner tracker lost 
strategy sharpness measure coming underlying trackers 
signi cant di erence previous example embedding function 
need combine measured values embedding tracker de ned join 
need lift function domain measured values 
joinable class de ne joinable fmap build function generates measured square measured points sharpness point sharpness point sharpness point sharpness square generate possible squares de ned corners edge points choose best sharpness measure max sharpness point sharpness point sharpness point sharpness point sharpness square max max max summary family join functions capture basic structure parallel tracker composition 
strategy occasionally requires somewhat complex embedding functions exactly underlying domain complex 
overloading express simple embedding strategies concise readable way 
trackers series basic strategy combining trackers combine slow robust wide eld trackers fast fragile narrow eld trackers yield ecient robust tracking network 
structure type tracker correspond animator deals performance expressiveness 
switching di erent trackers governed measures determine tracker feature 
consider trackers motion detector locates areas motion full frame 
color blob tracker follows regions similarly colored pixels 
ssd tracker targeted speci image 
goal combine trackers follow speci face unknown initial location 
motion detector nds area movement 
area blob tracker nds group colored pixels 
blob matched image 
trackers suppresses immediately proceeding ssd tracker feature need trackers run 
type signatures trackers relatively simple tracker blob color tracker point ssd image tracker residual transform tracker example stateless tracker 
carry information frame frame 
looks entire frame sparse covering entire frame time step 
location feed step information coming measure 
blob tracker get size orientation axis minimizes distance points 
compose trackers series pair state projection functions 
similar embedding pairs earlier extra types type functions lead ladder trackers 
step lower state go current tracker produce acceptable state higher tracker 
higher state drop current tracker suitable situation 
tracker types re ect union underlying tracker set 
handle measures need higher order version data instance valued valued valued valueof valueof valueof valueof combine trackers series tower tracker tracker tracker tower low high case left ma low case ma fmap left ma just ma high case ma fmap right ma just fmap left ma right ma high case ma fmap right ma just fmap left low ma calls sub trackers time step 
invariants attempt climb higher lower state return value higher state function rejects 
tower function construct state projections 
showing actual code function follows move blob size area motion greater threshold normally set fairly small 
center area motion initial state blob tracker 
try move blob ssd 
blob size orientation create initial transformation ssd tracker state 
drop ssd blob residual greater threshold 
position transformation initial state blob 
drop blob group pixels small 
composite tracker structure image tracker residual point transform image tower tower blob ssd mt mt just mt mt mt mt just translate mt compose rotate mt mt residual mt just origin transform valueof mt function needed composition motion detection blob tracking yields type blob type 
function shown keeps ssd tracker pulling underlying tracker looking motion blob 
output tracker normally ltered remove states backup trackers 
ultimate result tracker probably behavior point behavior point 
composite tracker hunting face face re ected output tracker 
performance programs written fvision tend run fast native code run haskell interpreter 
attributed fact bottleneck vision processing programs high level algorithms implemented haskell low level image processing algorithms written 
result fvision realistic alternative prototyping delivering applications 
doubt situations performance haskell code may require migration eciency case declarative language express high level organization vision system appreciable impact performance 
furthermore haskell interpreter experiment hugs small footprint included application seriously increasing size vision library 
related aware orts create declarative language computer vision exist dsl writing video device drivers lower level 
tools building domain speci languages fvision scratch relevant previous orts embedded dsl existing declarative language basic framework 
general discussions advantages programming pure functions quite numerous particular relevance functional languages rapid prototyping describes power higher order functions lazy evaluation glue needed modular programming 
fvision proven powerful software engineering tool increases productivity exibility design systems visual tracking 
compared xvision original library fvision reveals essential structure tracking algorithms clearly 
lessons learned project include 
visual tracking ers fertile ground deployment declarative programming technology 
underlying problems dicult payo domain high 
fvision signi cantly better prototyping tracking applications original xvision system 

process creating fvision uncovered interesting insights previously apparent original xvision developers 
working bottom develop new language forces domain specialists examine re examine underlying domain right abstractions interfaces 

principal features haskell rich polymorphic type system higher order functions signi cant advantage fvision 

frp provides rich framework inter operation various system components 
casting trackers terms behaviors events able integrate smoothly systems 
supported nsf ccr experimental software systems 
conal elliott paul hudak 
functional reactive animation 
international conference functional programming pages june 
hager belhumeur 
ecient region tracking parametric models illumination geometry 
appear ieee pami october 
henderson 
functional programming formal cation rapid prototyping 
ieee transactions sw engineering se 
hudak 
building domain speci embedded languages 
acm computing surveys electronic december 
paul hudak 
modular domain speci languages tools 
proceedings fifth international conference software reuse pages 
ieee computer society june 
hughes 
functional programming matters 
technical report programming methodology group chalmers university technology november 
intel vision libraries 
developer intel com research mrl research 
kahn swain firby 
gesture recognition perseus architecture 
proc 
ieee conf 
comp 
vision patt 
recog pages 
mundy 
image understanding environment program 
ieee expert december 
peterson hudak elliott 
lambda motion controlling robots haskell 
proceedings padl practical aspects declarative languages pages jan 
reid peterson hudak hager 
prototyping real time vision systems 
proceedings icse intl 
conf 
software engineering may 
consel thibault marlet 
domain speci language video device drivers design implementation 
proceedings rst conference domain speci languages pages 
usenix october 
group 
users manual 
university new mexico albuquerque nm 
