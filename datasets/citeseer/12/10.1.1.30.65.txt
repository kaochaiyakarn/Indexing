operating system support fast communications network workstations disi universit di genova url www disi unige may technical report disi tr workstations connected fast local area network lan appealing idea implement low cost parallel processing platform 
asynchronous processes easily run parallel computing units hardware platform 
interprocess communication difficult feature system implement acceptable level performance 
standard software environments pvm mpi conceived implemented allow application programmer write structured parallel code high degree independence respect hardware platform 
implementations mpi primitives network workstations usually provide satisfactory performance compared program run real parallel platform 
claim inefficiency mainly due lack efficient operating system support communication lan environment 
show standard unix operating system modified order provide efficient support active message communications viewed primitive form interprocess communication distributed environment 
provide preliminary results obtained experimental implementation active message layer modifications linux kernel called gamma genoa active message machine 
old days computer science teen ager idea program called operating system os computers easier just starting develop state art completely different today hardware expensive compared software 
consequence long time priority number os kernel efficiency expensive hardware resources 
structure operating systems evolved primary goal features currently find modern operating system designed cost performance oriented perspective 
case instance processor scheduling multiprogrammed systems virtual memory file system primitives device drivers gradually state art advanced eventually reached situation software considered extremely expensive compared hardware 
simple fact determined gradual change attitude programmers respect code optimization 
sixties programmer willing devote substantial amount time modifying program order reduce memory request cpu time 
nowadays program requires twice ram available machine find convenient buy ram extension wait year hope year machines provide double ram space price spending days code data structure optimization 
presently main priorities os compatible systems allow easy re expensive code efficiency hardware resources longer priority provided sufficiently cheap fast hardware reach satisfactory levels performance 
perspective changing focus efficiency hardware resource utilization convenience interconnection standard components main os concerns local area networks lans happened crucial systems operation time second trend starting prevail initial 
lan hardware relatively fast compared processors efficiency hardware utilization case lan devices perceived relevant problem 
added value lans initially perceived terms extension functionalities respect traditional centralized timesharing systems 
consequence today operating systems support communication lan hardware level efficiency support operation older devices cpu virtual memory disks performance ethernet lan exceeded needs midrange workstations super mini computers existing fifteen years ago huge overhead inefficient communication protocol layers 
today ethernet lans bottleneck network workstations cheapest solution switch faster hardware technologies fast ethernet fddi atm try optimize os support devices 
usual protocol stack predominant unix environment inter process communication ipc remote procedure call rpc level built top bsd sockets system streams built top tcp udp protocols built top ip protocol invaluable merit largely compensates inefficiency user perspective constitute de facto standard allows interoperability different machines 
economic considerations correct applications 
noteworthy exception opinion case parallel processing 
claim diffusion parallel processing techniques real applications research academic experiments far hampered trend single processor hardware technology 
long year single processors faster cheaper ones available year interested real applications research see convenience moving parallel processing technologies involving substantially higher costs peculiar applications 
hope parallel processing techniques spread probably kind inexpensive hardware computation communication currently standard 
problem defining cheap fast parallel processing platform lies capability fast standard cheap communication devices achieve reasonably levels performance compared potentials hardware technology worse custom expensive communication networks massively parallel platforms 
portability applications different platforms crucial aspect software development today ignore requirement sake efficiency performance parallel processing applications performance hardware cost effectiveness remain important issues 
years research topic led number standard parallel programming environments pvm mpi de facto standards allow transparent porting parallel applications different platforms 
claim time come consider possibility including efficient os support inter processor communication lan environment parallel programming environments directly implemented 
os support lan interconnection non homogeneous systems standard communication protocols designed separately 
mainly interested issue believe re design protocol stack architecture improve performance second case proven 
today implementations pvm mpi environments platforms daemons inefficient unix ipc primitives implemented top huge communication protocols developed long time ago completely different goals compared actual purposes today 
wonder throughput message delay experienced applications running top pvm mpi far potential raw communication devices 
results suggest pvm mpi primitives directly system calls efficient device drivers low cost devices mb fast ethernet support reasonably fast communications environment 
believe best approach efficient communication environment offer compatibility portability higher level mpi programming primitives re design re implement primitives scratch efficient way totally independent lower level standards previous evolution computer technology years ago 
describe approach experimental implementation concept preliminary performance results able measure rough prototype system providing strong evidence feasibility approach possible performance benefits 
related admit approach new parallel processing community 
active messages originally proposed researchers university california berkeley flexible efficient low level communication mechanism aimed reducing communication overhead allowing communication overlap computation 
efficiency active messages communication mechanisms lies fact require message buffering 
known application active messages operating system support fast interconnection networks active message layer introduced thinking machines cm platform 
case minimal set communication primitives identified supported efficient way modifying kernel unix operating system 
library efficient functions called available application programmers cm environment allowing reach far level raw communication devices interrupt driven device drivers 
throughput message delay experienced applications close limit posed hardware devices 
idea followed currently followed fm project developed researchers university illinois urbana fast lan called myrinet fat tree interconnection network cm platform 
os support efficient active message layer starting point implementation higher level parallel processing primitives ones defined mpi standard 
feel modest original contribution idea os support active messages application concept standard truly cheap platform terms processing nodes communication devices 
order experiment idea chose standard operating system source code freely available linux system experimental version 
similar approach followed researchers cornell university framework net project 
net approach starting point different os kernel organization opposite net aims improving efficiency implementation communication protocols follows idea removing communication support os kernel order re implement efficiently user application level 
communication processor executes proper firmware order multiplex pre defined number virtual points physical 
point attached single user means system call 
way virtualization fast communication devices directly accessible user processes obtained invoking system calls send messages 
net provides form emulation active message layer top virtual fast communication devices directly accessible user processes multiplexed physical firmware communication processor 
atm fast ethernet physical communication 
apparently porting linux way system 
certainly interesting compare performance obtained net hardware platform similar 
gamma project genoa active message machine gamma project started december department informatics computer science disi university genoa decided renew laboratories buying personal computers intel pentium processor low cost unix workstations lan environment 
equipped linux operating system sufficient ram disk space monitor fast video card time personal computers offered cost effective alternative entry level classical unix workstations 
idea kind parallel platform parallel programming experiments mpi environment 
order improve communication knew going bottleneck system parallel processing point view decided connect subset workstations means mb fast ethernet modest cost increase compared older mb ethernet cards 
initial phases project worked cooperation department information engineering university parma independently developing project called parma coordination professor conte 
looking closer implementations mpi linux lam mpich realized low level mpi primitives implemented top unix sockets 
experiments conducted parma showed performance level application programs obtained far expect knowing hardware potential terms message exchange throughput message delay 
direction followed parma project improve mpi performance pentium fast ethernet identify tcp protocol layer implementation unix sockets main bottlenecks develop lighter version transport protocol called prp substitute tcp efficient socket implementation 
device driver fast ethernet adapter optimized 
improvement obtained way substantial yielding reduction message latency mhz pentium processors communication devices 
discussing results looking protocol optimizations considerations clearly emerged 
prp prototype implementation time consuming tasks usually inserted general purpose transport protocol useless ethernet lan fast homogeneous processors removed 
performances obtained better original ones far expect knowing performance hardware devices 
capitalizing previous experience active message layer provided cm platform started wonder feasibility direct implementation similar set active message primitives linux kernel 
came substantial revision kernel structure organization communication needed 
concluded yielded order magnitude improvement performance respect parma results 
applying university style economic principle software developed phd students cheaper sophisticated parallel platforms market started prototype implementation gamma order provide measurable example verify ideas 
hardware software platform hardware platform experiment composed set workstations connected means independent lans mb ethernet usual way provide network services nfs access file servers remote login unix environment mb isolated fast ethernet dedicated implementation fast inter processor communication primitives 
communication protocol fast ethernet implemented firmware inside pci cards run mb lan 
raw packets dimension comprised bytes sent directly ethernet standard kernel mode consequence activation system calls user process running processor 
processing nodes exactly hardware configuration run modified version linux os kernel version 
main objective active message system calls copy portions memory content user space sender process node user space receiver node 
completion memory memory data transfer user defined handlers called sender receiver processors 
handlers may instance implement sophisticated communication protocols needed application level 
form explicit polling receive supported experimental environment activation handlers 
process running node access local file system allocated gb disk associated processor shared file system allocated file servers accessible means separate mb ethernet lan 
processing node autonomous workstation screen mouse keyboard hard disk exactly hardware time regular lab avoiding student access machines computing nodes parallel platform 
parallel operating mode nodes act front parallel machine user sitting workstation running processes local node slave nodes 
particular experimental setting machine composed hardware components relevant evaluation performance fast communication primitives ffl intel pentium mhz cpu ffl pci mother board kb ns pipelined secondary cache pci intel chipset eide controller ffl mb ns ram ffl com tx fast base pci network adapter mb maximum transfer rate 
fast ethernet mb lan consists com fms hub rj ports fast adapter connected cable 
principle logical partition nodes number sub clusters envisioned 
case order avoid bandwith reduction due sharing fast ethernet branch various sub clusters fast ethernet lan partitioned inserting additional hubs 
mpi efficient high level programming interface mpi known library communication message passing paradigm 
various implementations mpi developed covering parallel computers ibm sp sp cray meiko cs ncube mention mpi efficiently implemented scratch vast number conventional unix workstations socket implementation mpi developed 
implementation mpi offers simulation parallel platform promptly installed various hardware configurations ranging single unix workstation tcp network heterogeneous workstations 
long term goals implement mpi library architecture 
main motivation doing provide users parallel programming interface abstraction level high allow easy parallel programming 
efficient exploitation hardware capabilities concern real parallel processing approaches 
viewpoint mpi porting ease operating system parallel platform providing socket support communication candidate supporting socket implementation mpi limited porting effort 
reasons parma approach worth 
hand consideration leads software layers resulting lack efficient exploitation hardware capabilities especially terms raw communication performance 
basis consideration preferred develop efficient low level active messages communication layer 
intend implement mpi scratch top low level communication layer 
require greater mpi porting effort way may expect distance raw hardware performances parallel application performances significantly reduced 
course easy porting user applications built top mpi affected approach 
contrary user applications exploit standard faster compared implementation cheaper compared real parallel platforms mpi environment 
approach believe architecture may compete cost performance terms parallel machines 
gamma system calls order discuss data structures primitives system worth briefly pointing computational model mind design phase 
consider fixed set computation nodes numbered zero correspond workstations platform 
parallel program may thought finite collection processes running parallel distinct node 
nodes may shared program node may host process 
processes forming parallel program characterized common identification number unique 
call identification number parallel pid 
parallel pid keep parallel programs distinct level 
maximum different parallel pids may activated platform 
process communication ports 
port bidirectional connected port process belonging parallel program different 
pair ports forms bidirectional process process communication channel 
order modify pre existing kernel data structures process descriptors parallel pids kept distinct unix linux pids 
requires table parallel processes process belonging parallel program registered allowing convert parallel pids standard pids locally processing node 
process parallel program associated table ports 
connected port process entry table storing node number parallel pid partner process port pointers user defined handlers run respectively sending receiving message port 
way port number fully defines partner communication place port actions performed process termination communication 
order node number message routing destination workstation fast ethernet lan convenient provide copy kernel table ethernet addresses adapters workstation 
table initialized boot time reading configuration file 
order improve performance close hardware performance possible minimized data copying 
transmission take place data copied user space network adapter directly buffering kernel space 
poses protection problems writing adapter accomplished system call memory access problems transmitting process running transmission function copies user space network adapter 
exploited kind optimization receiver case receiving process running data come receiving adapter 
order correctly deliver data avoiding buffering kernel space necessary ffl lock memory pages processes belonging parallel programs physical ram ffl reception message set data segment register receiver data segment relocation table pointers receiver tables order kernel access receiver space copy content network adapter directly user space buffer defined 
time process connect port partner port specify pointer user space buffer expects receive data partner 
pointer kept port table process entry corresponding port 
process parallel program copy data segment register pointers relocation tables kept 
message sent fast ethernet lan single ethernet frame 
byte header bytes ethernet address receiving adapter bytes respectively parallel pid port receiving process 
low level communication protocol provides message high cost terms loss bandwidth additional latency times worth communication system extremely low probability frame corruption 
experiments able exchange tens mbytes node node incurring error packet loss 
primitive form error checking handling certainly demands order provide perfectly reliable platform user applications 
moment implemented features 
instance lack mechanism negotiating parallel pid parallel program start ensure uniqueness parallel pid 
currently lack primitive launching parallel program 
order run experiments presently launch individual process different node local console 
implemented asynchronous execution user defined handlers termination communication mechanisms allowing blocking polling message reception 
implemented accomplish experiments measures results strongly encourage continue developing platform 
briefly sketch low level primitives presently implemented parallel system ffl int void function registers calling process table parallel processes assigning parallel pid 
moment parallel process run node registered parallel pid 
ffl int unsigned char port unsigned char unsigned char unsigned char void void void function activates ports calling process previously registered table parallel processes calling 
specifies port activate process node partner partner port connect user defined handlers communication implemented pointer user defined buffer incoming messages 
ffl int unsigned char port void data unsigned short len function sends message fast ethernet lan node process port designated port number specified parameter 
message specified providing pointer user space buffer message lays length bytes 
ffl int void function calling process table parallel processes 
low level primitives data structures embedded original linux kernel form additional system calls additional kernel data structures 
embedding conservative linux kernel function data structure modified scheduling memory management policy changed 
guarantees compatibility respect versions linux kernel case drastic changes data structures 
preliminary results parallel platform incomplete able perform experiments obtain measures regarding communication performances may measurable application level 
carried measures consisting com fast lan connecting pentium workstations 
workstations running linux kernel recompiled additional system calls data structures sketched section 
time measures accomplished means tsc register pentium cpu incremented clock tick 
reading tsc content execution piece code able measure execution time code accuracy microsecond mhz processors 
defined delay time interval instant sender process invokes send system call instant interrupt handler receiver node invokes user defined handler completion copy data user defined receive buffer 
course delay time depends number bytes transmitted 
extreme values allowed ethernet standard bytes packet length 
computed throughput communication maximum transfer rate perceived application dividing total number bytes sent application including packet header total interval time needed send packets 
small workstations carried kinds experiments 
repeated ping pong short bytes user message 
repeated ping pong long bytes user message 
unidirectional rapid bursts long bytes user messages flow control 
ping pong application involved running ping process processor pong process processor 
ping sends message starts busy waiting receipt answer pong 
receipt answer ping completes iteration loop goes back sending message right away predefined loop count reached terminates 
tsc register ping separately measures time interval needed complete send system call busy waiting interval 
send system call includes time copying data user space communication adapter card system call overhead 
pong process runs loop predefined number times ping 
starts loop cycle busy waiting user defined receive buffer 
receipt packet communication adapter sends interrupt served device driver 
device driver copies incoming message adapter card buffer ram user defined buffer associated port returns final implementation call receiver handler returning interrupt service 
return interrupt handler pong process scheduled carried finds incoming message receive buffer leaves busy waiting loop 
busy waiting pong sends message back ping means send system call loops back busy waiting 
busy waiting time measured ping includes round trip time message ethernet adapter memory send system call time performed pong identical measured ping 
summing times measured ping dividing obtain message delay previously defined 
experiment aimed getting measure communication delay latency case short messages 
notice data copy time memory adapter adapter time min avg 
max variance send sys 
call hot cache send sys 
call cold cache ping busy wait hot cache ping busy wait cold cache total round trip hot cache average delay hot cache total round trip cold cache average delay cold cache table delay ping pong experiments byte messages 
time min avg 
max variance send sys 
call hot cache send sys 
call cold cache ping busy wait hot cache total round trip hot cache ping busy wait cold cache total round trip cold cache average delay hot cache throughput mbit hot cache average delay cold cache throughput cold cache mbit table delay throughput ping pong experiments byte messages 
memory reduced short messages bytes user information 
exploitation cache may affect memory transfers 
data collected cases hot cache send receive buffers pre charged cache invoking communication system calls cold cache send receive buffers discharged cache invoking communication system calls 
results obtained outlined table 
experiment carried evaluate communication bandwith 
throughput obtained dividing useful packet size removing header message delay 
results obtained outlined table 
results obtained compared ones obtained parma parallel platforms 
order comparison compute latency bandwith involved message exchange identifying parameters formula delay bytes delay values measured cases byte byte packets 
estimates latency cold cache experiments hot platform latency bandwith mbyte parma mpi tcp ip parma mpi prp gamma cold cache gamma hot cache cm net uam atm pvm sp sp mpl table latency bandwith ping pong application comparison platforms 
cache experiments 
estimates bandwith mbyte mbytes respectively cold hot cache experiments 
formula tested delay measured kbyte packets resulting error rate lower 
results provided working parma project table compare estimates ping pong applications implemented mpi various platforms 
table reports results obtained parma group gamma results integrated 
notice bandwith mbyte parma prototype measured conditions similar third experimental setting result comparable bandwith listed gamma table 
expected gamma parma compete real parallel platforms terms bandwith 
terms pure message latency gamma provides dramatic improvement compared parma quite competitive compared expensive parallel platforms 
course comparing gamma performance performance platforms mpi completely fair active message layer mpi environment runs gamma moment 
expect overhead mpi implementation gamma increase message latency substantial way 
comparison net emulation active messages appears fair data cited 
case hardware platform constituted mhz workstations connected mhz atm 
notice ping pong application automatically implements control flow communication need flow control primitives lower level protocol 
ping send packet pong acknowledged previous behaving wait communication protocol 
measuring throughput way outlined obtain bandwith measure unrealistically high compared situation want implement way channels packets flow control 
trip back packet contributes increase message latency increase byte count 
modifying pong way short packet sent response byte packet coming ping able measure round trip delay yielding throughput way communication wait flow control order mbit experiment designed order evaluate maximum way bandwith hypothesis explicit flow control avoided 
hypothesis supported comparison memory adapter adapter memory data transfer times transmission time fast ethernet 
adapters implement buffering incoming outgoing messages internal fifo queues 
adapter contains kbytes internal memory implement fifo queues send queue takes fourth internal memory receive queue takes fourth internal memory 
transmission activated writing entire packet send queue 
additional packets may completion demanded packet transmissions completed entire kb send queue filled 
point send system call waits space freed adapter send queue order contain packet 
way speed sender automatically limited speed physical link slower 
organization adapters way communication may implemented explicit flow control pipelined way cpus sender receiver simultaneously ethernet perform data copy user memory space run handlers 
implemented different application called rapid bursts 
sender process sends predefined number packets progressively numbered send performed loop repeated times calling send system call time 
delay incurred send system call comprises waiting time send fifo queue drained slower communication link 
total time complete loop divided order compute average send time message perceived sender 
message length divided average send time yields way transmission throughput 
receiver process reads incoming messages checks message contains number plus number contained previous starting count 
receiver process finds incoming message satisfy condition prints error message message lost 
loop total number received lost packets printed 
ran rapid bursts maximum speed packet loss receiver point view packets received consumed throughput allowed mbit physical link means total transfer mbytes times larger receive fifo queue adapter 
measured average packet transmission time exploiting hot cache implies way throughput mbit complete saturation physical communication link 
implies avoiding explicit flow control obtain improvement oneway real communication throughput mb incurring packet loss problems 
notice fact machines involved experiment connected fast ethernet represents worst case terms possibility losing packets receiver site due lack explicit flow control 
realistic situation fast ethernet carries packets exchanged nodes available bandwith physical link reduce slowing sender 
consideration suggests flow control protocol needed order implement reliable active message exchange 
works preliminary experimental results show improvement times message delay latency compared parma prototype turn shown substantial improvement standard implementation socket inter processor communication 
results suggest proper kernel support mpi type communication primitives show order magnitude improvement respect standard implementations platforms currently provided best public domain products 
improvement may suffice inexpensive platforms feasible convenient respect expensive commercial parallel platforms large class applications fair number processors 
course proposed platform lacks main requirements massively parallel architecture consider scalability respect number processing nodes 
increase number processing nodes gamma sooner saturate lan bandwith 
doubt fast ethernet worst choice point view 
bus lan technology assume try scale number processing nodes 
started experiment fast ethernet low cost hardware hope total bandwith sufficient demonstrate principle operation small number processing units 
hope able show advantages principle interested repeating kind experiment adequate lan technologies scalability point view atm 
hand think cost scalability characteristics real parallel platforms cm fat tree interconnection network hardly justified vast majority applications parallel processing principle sense 
special applications really require really worth current cost scalability characteristics real parallel platform special purpose network provide respect shelf lan hardware technology 
consideration leaves space trade scalability parallel machine low cost reasonably performance standard lan hardware provided performance lan hardware fully wasted inefficient layers software 
especially true consider small amount scalability obtained low cost cheap standard lan support higher throughputs interconnection larger number processors experimented instance beowulf project 
think preliminary results experiment quite encouraging surely sense propose inclusion small set communication primitives implemented accurate performance oriented approach standard operating system kernel 
compatibility issues certainly considered highest level abstraction applica tion programming level considered primary goal system programming level case implementation communication primitives parallel processing 
case management lan devices performance primary os goal hardware costs old days cheap slow communication compared cheap fast processing units prevent parallel processing techniques cheap fast lan communication cheap fast processors allow actual spreading parallel processing real applications 
grateful donald becker becker gsfc nasa gov having written driver com tx fast base pci network adapter linux operating system 
driver documentation assembly level interface adapter driver developed platform slightly modified optimized version 
grateful paolo giovanni michele phd undergraduate students university parma dept information engineering invaluable practical suggestions tricks trade revealed early stages project design prototyping started 
luca landi alessandro undergraduate students disi contributed installation systems provided useful information suggestions practical implementation aspects 
hardware start implementation measurement prototypes far kindly provided department order allow project start specific financial support external research institutions 
sunderam 
pvm framework parallel distributed computing 
concurrency practice experience pages december 
message passing interface forum 
mpi message passing interface standard 
technical report university tennessee knoxville tennessee 
url ftp ftp mcs anl gov pub mpi mpi jun mpi report ps 
von eicken basu vogels 
net user level network interface parallel distributed computing 
proc 
th acm symp 
operating systems principles copper mountain colorado december 
acm press 
url www cs cornell edu info projects net sosp ps 
burns 
lam open cluster environment mpi 
technical report ohio supercomputer center columbus ohio 
url www ornl gov walker mpi papers lam mpi ps 
gropp lusk 
user guide mpich portable implementation mpi 
technical report mcs tm anl argonne national lab university chicago 
url ftp info mcs anl gov pub mpi ps 
von eicken culler goldstein schauser 
active messages mechanism integrated communication computation 
proc 
th int 
symp 
computer architecture gold coast australia may 
acm press 
connection machine cm technical summary 
technical report thinking machines cambridge massachusetts 
liu culler 
measurement active message performance cm 
technical report csd computer science dept university california berkeley may 
url ftp cs tr cs berkeley edu pub tech reports csd csd ps 
chien 
high performance messaging workstations illinois fast messages fm myrinet computation 
proc 
supercomputing san diego california 
acm press 
url www cs uiuc edu papers myrinet fm sc ps 
computer engineering group 
parma project parma parallel machine 
technical report dip 
ingegneria dell informazione university parma october 
ferscha 
performance comparable design efficient synchronization protocols distributed simulation 
proc 
mascots durham north carolina january 
ieee cs press 
url ftp ftp disi unige person mascots ps gz 
sterling becker savarese 
beowulf parallel workstation scientific computation 
proc 
th int 
conf 
parallel processing wisconsin august 
url gsfc nasa gov linux beowulf icpp html 

