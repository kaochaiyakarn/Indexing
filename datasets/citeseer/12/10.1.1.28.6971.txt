deforestation 
ferguson philip wadler compositional style programming advocated functional programmers 
certain efficiency penalty involved creating requisite intermediate structures 
deforestation program transformation technique removes structures programs 
investigation issues termination transformation process 
function composition basis style programming practiced outside normal bounds functional programming 
notion constructing programs set simple basic operations collection combining forms richer simple composition imperative language apl ive central strict applicative language fp bac successors unix shell bou languages miranda tur 
familiar example may expressed square apl similarly backus fp ffi ff square ffi upto somewhat artificially unix pipe upto squares sum prolog language syntax sight lends style example expressed sum concern presence absence composition operators se programming style treats problem collection essentially separable sub problems combined form solution monolithic entity various aspects inextricably intertwined 
lazy functional programming may seen paradigm ways particular area concerned 
semantics lazy language allow compositional programs include non terminating components terminate 
example may obtain list primes function compute primes select desired elements 
operationally desired piecewise generation linking structures maintained lazy evaluation strategy important due considerations space efficiency 
example may written style sum ffi map square ffi upto key steps generate integers square sum result captured function composition glue required 
solution satisfactory terms correct operationally reasonable clearly expressed disadvantage non compositional solution efficient due necessity having build immediately destroy intermediate lists 
program fault square semantics operational behaviour efficient 
modified solution performs exactly numerical computations eliminates list operations original 
disadvantage considerably clear 
ideal solution allow programmer write version automated assistant produce 
suitably simple characterisation set sufficient preconditions arrived details transformation hidden entirely inside compiler programmer able reason efficiency resulting code independently necessary 
done immediate ancestor wad reformulation material facilitate main result concerning termination transformation 
shall ffl section language ffl section treeless form description form program free intermediate structures ffl section restricted treeless form subset ffl section deforestation theorem condition sufficient guarantee desired behaviour algorithm ffl section deforestation algorithm algorithm produce treeless program treeless components ffl section termination proof ffl section related ffl section alternative view deforestation algorithm language consider language terms variable constructor function application function pattern match function definitions 
pm describes order language functions possibly involving matching single simple pattern constructor deep 
compilation form requires known techniques essentially equivalent compiling simple case expressions aug wad 
key step replacing pattern match constructors deep corresponding number simple pattern matches introducing appropriate new functions 
intended semantics usual normal order reduction lambda calculus 
pattern matching strict pattern matching function applied argument evaluated head normal form body entered 
shows sample definitions 
treeless form term treeless linear variable may appear conforms grammar tt tt tt constructors applied treeless variables occur arguments pattern match variable flip leaf leaf flip branch branch flip flip seconds nil nil seconds cons xs cons seconds xs seconds nil nil seconds cons xs seconds xs thirds nil nil thirds cons xs cons thirds xs thirds nil nil thirds cons xs thirds xs thirds nil nil thirds cons xs thirds xs sample definitions treeless function definition rhs definition rhs definition restricted treeless term 
linearity restriction required ensure functions may unfolded risk duplicating 
grammar requires terms single function deep constrains functions case analyses variables 
prevents previously computed value passed function possibility function examining value having effect disallowing intermediate structures 
note intensional extensional property function treeless function definition non treeless version may contrived equivalent respects save efficiency unfortunately converse true 
example flatten flatten respectively non treeless treeless definitions function 
note little difference terms actual efficiency apparent intermediate structure examined incorporated directly result 
functions treeless definitions exist include reverse need structure accumulate segment list reversed far available output flattening tree list nodes due particular nature treeless form require means definition leaf cons branch involves data structure operations input output considered treeless 
flatten nil nil flatten cons xs xss append xs flatten xss flatten nil nil flatten cons xs xss flatten xs xss flatten nil xss flatten xss flatten cons xs xss cons flatten xs xss alternative definitions flatten similarly true linearity requirement example term non treeless theta treeless equivalent 
clearly terms copy pair linear equivalents 
restricted treeless form order main result number restrictions terms consider terms suitable deforestation 
somewhat arbitrary motivated technical considerations pertaining proof fortunately involve actual loss power 
unsure restrictions important practice may necessary preconditions termination transformation may purely artifacts formalism chosen 
firstly introduce notion restricted treeless term rtt rtt rtt rtt rtt right hand sides definition restricted treeless terms 
defines subset treeless terms containing single constructor outermost required 
sense symmetrical restriction requirement original grammar patterns constructor deep respect function pattern matching nested inside pattern matching function constructors consumed slowly produced 
easy see restriction involves loss generality term may conform introducing new function definition sub term starting constructor appears disallowed terms grammar 
attempting treat general terms shall consider function terms constructors suitable input follows ft ft ft ft ft restriction clearly involves loss generality term admitted general schema converted form replacing constructor suitably defined function 
deforestation theorem theorem linear term comprised functions treeless definitions may effectively transformed equivalent term treeless form efficient 
shall prove claim efficiency appeal informal argument produce program folded original linearity condition ensures unfold worsen efficiency 
seen easily inspection transformation rules 
shall proof size terms encountered transformer argue sufficient ensure termination 
fact transformed term strictly efficient provided original required intermediate structure 
sense real intermediate structure built destroyed internally opposed constructed passed function re examine 
example flatten cited non treeless function definition efficient treeless equivalent 
theorem requires constituent functions treeless definitions precludes deforestation recursive mutually recursive function definitions 
note remove restriction linearity weaker property holds terms may effectively transformed resulting terms may efficient may course non linear 
examples flip flip seconds thirds suitable candidates transformation preconditions theorem equivalents shown 
second example illustrates questionable feature deforestation resulting program substantially larger original 
treeless program proportional size product sizes original functions including auxiliary functions 
transform similar program consisting nested applications function selecting th element list program size proportional resultant program size proportional exponential growth suggest programs unacceptably large consider practise expect modest growth program size constitute particular drawback 
aspect deforestation bears passing resemblance ml typechecking shown pspace complete time complexity practice flip flip transforms leaf leaf branch branch seconds thirds transforms nil nil cons xs cons xs nil nil cons xs xs nil nil cons xs xs nil nil cons xs xs nil nil cons xs xs nil nil cons xs xs results transforming terms inefficient 
problem course worse time complexity deforestation explicitly exponential 
open question may expect find terms suitable transformation certainly case programs significant size portions non linear recursive function defined compositional term preventing synthesising treeless definitions components 
hoped linear non recursive sub terms prove sufficiently common allow transformation significant proportion terms program 
deforestation algorithm give set transformation rules convert term treeless equivalent 
shall assume term satisfies preconditions deforestation theorem consists linear composition treeless functions 
requires practical transformer treeless definitions produced term components course term recursive possible 
delta delta delta delta delta delta delta delta delta delta delta delta defined delta delta delta delta delta delta delta delta delta um delta delta delta defining equation um delta delta delta delta delta delta delta delta delta delta delta delta 
pm delta delta delta pm delta delta delta defined 
pm vars delta delta delta delta delta delta gamma transformation rules correctness denotes semantic function terms denotes transformation transformed term original compute value 
delta delta delta delta delta delta denote context nested pattern matching functions follows delta delta delta delta delta delta delta delta delta delta delta delta pattern matching function 
example expression flip flip context term definition flip 
rules transformation shown 
transformation rules essentially case analysis leftmost syntactic construct pattern matching function cases leftmost variable depending occurs outermost level likewise constructors single case non pattern matching function required occurs leftmost 
infinite chain pattern matches possible input terms finite construct pattern matching function occur 
observe cases exhaustive outermost variable constructor covered rules variable constructor nested inside number pattern matching functions covered non pattern matching function nested covered rule 
secondly note transformation preserves equivalence rules alter basic form expression third fourth simply unfold steps performs instantiation pattern match transforming expression possible patterns turn generating new function perform case analysis instantiated variable 
possibility valid due strictness pattern matching ensures chain pattern matches necessarily require matching innermost pattern 
produced transformation treeless form rule rhs treeless assumption recursive calls result treeless terms rule result variable rule constructor applied results transformation treeless provided transformed components unfold steps give terms transformed en masse fifth rule results function call variable arguments rhs results transformation 
note inputs restricted treeless form output general treeless term 
rule dealing constructors may emit consecutively alter rules prevent unnecessary possibly undesirable result folded efficient term 
mean recursively transforming term components convert result restricted form described 
result transformation necessarily finite 
example consider transformation term flip flip shown 
transformation rules applied obtain sub problems renamings original 
fold replacing instance terms transformed call function introduced 
general necessary introduce new functions recurring term may coincide pattern matching function introduced policy introduce new function definitions terms appear fold potentially infinite term 
clearly possible transformation rules stand function fold recurring terms output computable requiring equality infinite non total objects 
problem unfolding thrown away information require effectively compare terms 
retain information labelling unfold corresponding function call shown 
introduce function shown 
note construct refer argument meta variable pattern matching 
function folds potentially infinite term output labelled transformation rules finite version noting terms encountered transformer flip flip leaf flip flip leaf branch flip flip branch flip flip leaf flip leaf leaf leaf flip flip branch flip branch flip flip branch flip flip flip flip branch flip flip flip flip flip flip leaf leaf branch branch steps transformation flip flip form set function definitions 
re encountering renaming term fold subsequent occurrence appropriate definition 
see function preserves note equation rhs general treeless term assumption recursive call yields treeless result 
corresponds reasonably closely basic notion folding outlined initially note function weak intensional equality terms strong extensional equality 
identify terms syntactically equivalent attempting see compute result 
original term satisfies preconditions deforestation theorem able produce term folded finite folding process may terminate case 
instance function flatten simple composition treeless terms deforestation algorithm terminate occurs linear programs result treeless argument 
termination occur general certainly linear program treeless equivalent transformation non terminating 
program non linear conforms grammar terms transformation terminate output may treeless possibly efficient 
test inclusion set definitions ds uses normal rules set membership equality renaming bound variables 
fg false ff false ff delta delta delta delta delta delta label delta delta delta delta delta delta defined delta delta delta delta delta delta label delta delta delta um delta delta delta defining equation um delta delta delta delta delta delta delta delta delta delta delta delta 
pm delta delta delta pm delta delta delta defined 
pm vars delta delta delta delta delta delta gamma labelled transformation rules ds ds ds ds 
pm ds ds 
pm ds label ds ds ff ds new function name vars function folding labelled terms proof termination observe course transformation number functions remains constructor stage fact true example seconds thirds shown steps interesting view exponential growth resulting program 
gives notion proceed proof 
shall show exists bound size terms produced recursive calls transformer relative original term 
measure suffice long bounds size terms way 
finite alphabet symbols terms eventually re occur folded produce finite result 
step observe composition treeless functions transformation steps increase depth functions nesting 
intuitively clear observation unfolded function bodies single function deep 
define nesting follows max max max comment strategy employed nesting measure bounds size terms measure ignores constructors counts functions measure counted clearly 
choose straightforward show bound measure directly relationship numbers constructors numbers functions clear bound may obtain quantities considered separately 
postpone treatment constructors second lemma 
lemma number transformation steps remaining terms transformed nesting original term 
proof assume lemma holds steps 
require prove step increase nesting showing lemma holds steps sufficient result number steps 
prove transformation step delta case prove case definition max fn case delta delta delta delta delta delta definition max fn treeless max fn adding context side delta delta delta delta delta delta delta delta delta delta delta delta case delta delta delta delta delta delta definition max fn treeless max fn obvious property substitution adding context delta delta delta delta delta delta delta delta delta delta delta delta case delta delta delta delta delta delta definition max fn definition patterns adding context delta delta delta delta delta delta delta delta delta delta delta delta proved nesting terms transformed increasing bounded 
number constructors terms encountered recursively transformed 
see informally observe original term simply composition non constructor functions rules increase number constructors apart 
rules applied constructors expression case subexpressions redex contain constructors 
trivially true subexpressions seen true rule constructors outside unfolded term contained redex 
define ct delta delta delta ft ft delta delta delta fct ft ct delta delta delta delta delta delta context pattern matching functions occurrences general terms replaced function terms delta delta delta delta delta delta delta delta delta delta delta delta ft ft note assumption limit applicability rules lemma restriction input terms conform grammar ft indicates remain exhaustive 
grammar fct defines terms having constructor occurring nested pattern matching functions constructor term lies position redex 
lemma number transformation steps terms remaining transformed conform grammar fct proof assume lemma holds steps prove step falsify desired property showing lemma holds steps sufficient result number steps 
prove transformation step delta fct fct case prove case fct ft ft matches ct case null context ft fct case delta delta delta delta delta delta delta delta delta delta delta delta fct delta delta delta delta delta delta ft inside context matches ft ft treeless tt fct delta delta delta delta delta delta fct ft allowed case delta delta delta delta delta delta delta delta delta delta delta delta fct ft ft treeless tt fct delta delta delta delta delta delta fct similar case delta delta delta delta delta delta delta delta delta delta delta delta fct delta delta delta delta delta delta ft delta delta delta delta delta delta ct delta delta delta delta delta delta fct having initial term fct means terms transformed subsequently fct constructor 
bound nesting result constructors means terms bounded size finite alphabet symbols finitely terms 
see finitely symbols notice equality test identifies variables new function names incorporated terms recursively transform appear directly output 
effect set symbols simply function names original program clearly bounded 
guarantees attempt collapse generated term finitely sub terms encountered remaining ones renamings folded appropriately introduced definitions 
related noted successor initial deforestation wad 
relative wad wad concerned specifically elimination intermediate lists source source transformation gives non functional result 
allow non linear functions list may traversed mean calculation sum length higher order transformation extensions envisaged 
torben mogensen suggests interesting variant deforestation removing intermediate structures prolog programs 
restrict attention subset language excluding meta logical constructs principle fold unfold transformations valid 
claim deforestation suitable candidate inclusion advanced compiler functional language fashion program transformations employed lml compiler aug joh 
order convincing assured termination means reformulation established 
reformulation may benefits tried transform terms hand old formulation case expressions realise programs size sub terms transformed large version transformation operates terms sense maximally unfolded meaning functions cases unfolded profitable may done 
unfolding appropriate version keeps term size small possible 
hand transformations painful significantly purposes somewhat wasteful space automated 
aug augustsson compiling pattern matching 
proceedings conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
aug augustsson compiling lazy functional languages part ii 
ph dissertation department computer science chalmers goteborg sweden 
bac backus programming liberated von neumann style 
functional style algebra programs 
turing award lecture communications acm volume number 
bou bourne unix time sharing system unix shell 
bell sys 
tech 

ive iverson programming language wiley new york 
joh johnsson compiling lazy functional languages 
ph dissertation department computer science chalmers goteborg sweden 
tur turner miranda non strict functional language polymorphic types 
proceedings conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
wad wadler better laziness lazy evaluation garbage collection compile time 
proceedings acm symposium lisp functional programming austin texas august 
wad wadler better laziness ii composing functions 
proceedings workshop programs data objects copenhagen october 
lncs springer verlag 
wad wadler efficient compilation pattern matching 
implementation functional programming languages prentice hall peyton jones 
wad wadler deforestation transforming programs eliminate trees 
european symposium programming esop nancy france march 

