efficient computation interprocedural control dependence james cornell university upson hall ithaca ny usa cs cornell edu bilardi universita di padova dip 
di elettronica ed informatica padova italy bilardi dei keshav pingali cornell university rhodes hall ithaca ny usa pingali cs cornell edu control dependence information useful wide range software maintenance testing tasks 
example program determine statements predicates affect value particular variable particular program location 
intraprocedural context optimal algorithm known computing control dependence unfortunately relies critically underlying intraprocedural postdominance relation tree structured 
algorithm directly applicable interprocedural case transitive reduction postdominance relation directed acyclic graph dag nodes having multiple immediate dominators 
efficient conceptually simple algorithm computing interprocedural postdominance relation compute interprocedural control dependence 
interprocedural control flow graph algorithm takes time space jv jv 
algorithms perform confluence operations bit vectors allowing scale larger programs 
keywords interprocedural analysis postdominance control dependence reachability problems software engineering testing maintenance programs require computation control dependence relation program 
intuitively statement control dependent statement multiple exits choice exit determines executed 
example construct statements sides conditional statement control dependent predicate 
common control dependence software engineering determining change semantics program statement affects execution program statement 
program analysis problems undecidable computing program dependences provides reasonable approximate approach answering question 
research community focused attention slicing tools 
example system dependence graph sdg interprocedural extension program dependence graph incorporates edges control data dependence allow programs sliced point respect variable defined restructuring optimizing compilers control dependence scheduling instructions basic block boundaries speculative predicated execution merging program versions automatic parallelization 
applications code scheduling necessary know nodes control dependences node 
information useful code scheduling basic blocks control dependences treated large basic block done region scheduling 
information decompose control flow graph program single entry single exit sese regions decomposition exploited speed dataflow analysis combining structural fixpoint induction perform dataflow analysis parallel :10.1.1.31.5126
formulating precise definition control dependence programs nested control structures multiway branches unstructured flow control procedure calls quite subtle 
commonly definition due ferrante graph theoretic concept postdominance 
extended podgurski clarke distinguished notions control dependence 
bilardi pingali proposed generalized framework unify different notions 
research area focused computing intraprocedural control dependence :10.1.1.100.6361
approach procedure treated isolation ignoring transfer control due procedure calls returns 
adequate applications instruction scheduling ignoring calls returns option applications interprocedural dataflow analysis 
popular method perform intraprocedural dataflow analysis consists building sparse dataflow representations static single assignment ssa form sparse dataflow evaluator graphs quick propagation graphs solving dataflow problems representations projecting solution original program 
construction sparse representations computing control dependence reverse control graph program 
extending method interprocedural context obviously requires computation interprocedural control dependence 
intraprocedural case key step control dependence computation construction transitive reduction postdominance relation 
reduced relation tree structured fact crucially exploited computing control dependence computations 
interprocedural case transitive reduction postdominance necessarily tree intraprocedural algorithms longer 
key point discussed closely section graph theoretic paths intraprocedural control flow graphs correspond legal program executions longer true interprocedural case 
procedure called number different program points call control return program point just point invocation 
search literature revealed handful algorithms computing interprocedural control dependence 
loyall mathisen give algorithm shown incorrect 
harrold rothermel sinha interprocedural control dependence algorithm complexity :10.1.1.114.5033
method augmenting control flow graphs handle programs arbitrary control flow 
new practical algorithm computing interprocedural postdominance relation program compute interprocedural control dependence relation 
postdominance algorithm introduced section determining reachability nodes interprocedural control flow graph socalled valid path suffixes defined section reflect constraints legal program executions 
running time algorithm jv jej jv jv jej respectively number nodes edges interprocedural control flow graph 
precomputing caching certain sets reachable nodes improves efficiency algorithm practice show section 
algorithm produces full postdominance relation transitive 
section show means single boolean matrix multiplication obtain transitive reduction postdominance turns preferable applications 
section outline compute interprocedural control dependence relation program 
give experimental results section comparing performance algorithm iterative algorithm dataflow analysis 
discuss ongoing section 
concepts definitions program formed family procedures call including distinguished procedure main procedure may call 
interprocedural control flow graph icfg program models possible transfer control statements procedure different procedures means call return mechanism 
preliminary step convenient introduce intraprocedural control flow graph icfg individual procedure 
definition intraprocedural control flow graph procedure directed graph gp ep nodes represent statements edge represents possible flow control statement statement node set vp partitioned vp node predecessors node reachable endp node successors reachable node set call nodes exactly outgoing edge set return nodes exactly incoming edge jv jv edge set partitioned ep internal edge corresponds direct transfer control internally procedure set short cut edges subset theta induces correspondence call nodes return nodes 
label identifies procedure called returning control shall convenient notations 
label shall say call node return node icfg obtained assembling procedures replacing short cut edge having label interprocedural edges start said correspond 
definition interprocedural cfg icfg program graph vp called set internal edges defined start label fg label fg called sets call edges return edges respectively 
shows interprocedural cfg simple program procedures main called places main 
icfg path corresponds possible path execution procedure invoked call sites invocation return corresponding call site 
example path correspond valid path execution call node return node intuition captured defining valid path called complete valid path sharir pnueli path subsequence call return edges proper sense 
definition set proper sequences call return edges defined context free language alphabet contains empty sequence ii closed concatenation iii contains sequence oe contains sequences form start oe short cut edge label definition path start main main icfg program viewed sequence edges valid path subsequence call return edges proper 
remainder shall restrict attention node occurs valid path 
occasion deal kind valid path segment called level valid path segments literature 
definition level valid path segment sequence edges appear consecutively valid path nodes belong procedure subsequence call return edges proper 
running example path level valid path segment 
lemma needed proof correctness algorithm computing interprocedural postdominance 
lemma oe oe level valid path segments node node oe valid path oe proof easy see path start program 
definition subsequences call return edges oe oe proper sequences 
furthermore proper sequence call return edges replace proper subsequence proper subsequence obtain proper sequence 
valid path 
define interprocedural dominance postdominance nodes icfg 
definition node said interprocedurally dominate node occurs valid path contains node said interprocedurally postdominate node occurs valid path contains easy show dominance postdominance transitive relations 
shows transitive reduction postdominance relation program 
control dependence introduced formally follows definition node said control dependent edge 
postdominates 
postdominate convention control dependent return edge procedure decision point may multiple edges emanating 
intuitively control flows node node edge eventually reach node control may reach passing decision point influences execution definition icfg control dependence relation set theta pairs node control dependent edge control dependence relation program shown 
typically software engineering compiler applications control dependence require computation sets derived definition node edge control program graph control dependence relation define control dependence sets ffl cd fw cg ffl conds fe cg ffl fv conds conds interprocedural postdominator dag main return return call call start cond interprocedural control flow graph edge control dependent nodes control dependence relation main start main main small program postdominator dag control dependence relation algorithms computing interprocedural postdominance section algorithms computing interprocedural postdominance relation 
algorithm relatively straight forward dataflow algorithm solves set monotone dataflow equations iteratively 
second algorithm computing graph reachability subgraphs interprocedural cfg 
iterative algorithm known intraprocedural postdominance relation computed solving set monotone dataflow equations 
true interprocedural postdominance relation 
lattice underlying equations powerset nodes program ordered containment element empty set 
postdominance relation described implicitly writing set equations node node expressed function successors interprocedural cfg nodes 
shows rules generating equations 
general node node postdominates control flow successors call node node postdominates corresponding return node 
obviously monotone dataflow problem solution iteratively starting initial approximation postdominator set node assumed set nodes program repeatedly refining approximation substituting right hand sides equations simplifying convergence obtained 
usual implementation maintains list nodes postdominator set recomputed sets right hand side equation changed 
list initialized main nodes enqueued dequeued till convergence occurs 
postdominator sets represented bit vectors necessary union intersection operations performed bit vector operations 
reachability algorithm observe straightforward reformulation definition node fails postdominate precisely nodes valid path suffixes main contain observation basis algorithm pseudocode shown 
algorithm determines interprocedural postdominance relation pdom initializing contain pairs line pruning node processed iteration loop line nodes reachable main reverse icfg deleted reverse valid path suffix 
actual pruning accomplished call search 
procedure line determines reachability performing search 
list reachable nodes maintained initialized contain main line nodes extracted time line 
node marked encountered line avoid processing multiple times entry deleted call nodes pdom call pdom start pdom return pdom main main nodes pdom succ pdom fng rules postdominance dataflow equations pdom line 
procedure visit invoked line add predecessors list appropriate 
reachability valid path segments introduces subtleties specifically procedure case generic predecessor call node valid path suffix main extended prepending edge path includes corresponding return node 
care taken handle correctly efficiently situation visited visit happens opposite order 
return node corresponding call node visited addition adding list line node considered visited added list line inserted line initially empty bucket associated procedure visited bucket contains call nodes corresponding return visited simply emptied list lines node return start node visit simply adds predecessors list lines 
assumed node unique number total number nodes icfg corresponding call return nodes determined constant time 
deletion node icfg performed simulated simply skipping visit line preventing search propagate analyze performance establish correctness algorithm 
theorem input icfg procedure compute pdom runs time jv jv jej sets pdom true interprocedurally postdominates proof performance bound simply follows fact jv searches executed time proportional number jv nodes jej edges 
correctness requires detailed argument 
consider separately case main added list line removed list line 
loop line executes just entry pdom main remain true correct main postdominates nodes 
main show pdom set false iff non empty valid path suffix main contain notationally respectively denote edge path non empty path nodes ffl show inductively main non empty valid path suffix length contain pdom set false 
main node added list line removed line pdom set false line 
assume inductive hypothesis holds lengths larger consider node nonempty valid path suffix main length 
inductive assumption pdom set false point 
happen line immediately followed line invokes procedure visit 
consider possible cases node 
node return node marked added worklist line 
point removed worklist pdom set false 
hand marked marked line followed line pdom set false 
case required result follows 

node start node procedure call node node occur valid path suffix main inductive assumption put list procedure visit called nodes 
processed line executed processed time put list 
hand processed added buckets line added worklist line processed 
case point extracted list pdom set false 

remaining case internal edge 
processed marked case pdom set false marked case added worklist set false processed 
ffl note elements pdom array set false loop line show inductively pdom set false th iteration valid path suffix main contain loop executes node main added worklist line 
pdom main set false 
icfg 
int number nodes 
boolean pdom true pdom false postdominate 
int number procedures 
node set list set nodes visited graph search 
procedure compute pdom 
find nodes reachable main reverse icfg 
search 

procedure search node 
node set buckets 
boolean marked false node initially visited 
list add main reverse reachability main 
list empty 
node list remove 
marked continue visited 
marked true 
continue skip conceptually removed 
pdom false reachable main 
visit buckets marked process predecessors 

procedure visit node node node set buckets boolean marked process predecessors 
return node procedure target return edge 

marked list add 

node call node corresponding 
marked start list add 
buckets add 
elseif start node procedure target call edge 

node buckets 
remove buckets 
list add 

target internal edge 
predecessor 
marked 
list add 
algorithm computing interprocedural postdominance relation iteration required result trivially obtained letting empty path obviously valid path suffix 
assume inductive assumption holds iterations loop 
node removed list iteration assume node distinct main added list node processed procedure visit 
inductive assumption valid path start main main suffix main contain consider possible cases node 
suppose return node procedure suppose icfg predecessor node valid path contain valid path suffix main contain call node corresponding valid path contains contain contains valid path suffix ae start main inductive assumption valid path suffix oe start main contain path oe level valid path segment fl start replacing level valid path segment start ae fl get valid path suffix main contain 
suppose start node procedure call node buckets 
node added buckets line return node corresponding processed procedure visit 
node processed node inductive assumption valid path start main main contain required result holds 

final case internal edge 
assumption valid path start main main procedure occurs 
assumption start occur written start main start main assumption programs level valid path segment fi start replacing segment start fi get valid path contains required furthermore suffix main contain precomputing reachability show efficiency algorithm computing interprocedural postdominance relation improved precomputing caching intraprocedural reachability information information selectively ensure graph traversals performed postdominance computation interprocedural edges 
preprocessing step procedure perform reachability computations intraprocedural control flow subgraph sp vp shortcut edges removed 
nodes call nodes endp called root nodes graph 
introduce locally reachable node set set nodes nodes endp call return nodes definition reachable root node reverse graph sp intuitively reverse icfg nodes reached traversing interprocedural edges 
build collapsed graph cp dp nodes endp call return nodes edge 
endp node call node collapsed graph store locally reachable set nodes computed corresponding node sp algorithm assumes set stored array named indexed node 
postdominator computation sp reachability computations deleted node original icfg shows collapsed graphs procedures running example 
shows modifications required algorithm preprocessing 
proof correctness algorithm preprocessing hinges fact intraprocedural reachability computation determines locally reachable sets finds level paths procedures prepended paths nodes procedure main yield valid path suffixes 
computation transitive reduction pdom reflexive anti symmetric transitively closed relation 
boolean array pdom viewed adjacency matrix graph edge graph postdominates graph self loops node reflexivity self loops acyclic anti edges graph edge transitive closure 
applications useful transitive reduction computed single boolean matrix multiplication show section 
step define irreflexive version pdom equation pdom theta identity matrix diagonal entries true false 
show transitive reduction pdom computed expression main main call call start return return start cond start main main start call call return return main main collapsed graphs running example assume cf collapsed graph procedure 

node pdom false 

procedure visit node node del node set buckets boolean marked process predecessors 
return node procedure 
graph sf graph cf 
marked graph list add graph 

node call node corresponding 
marked start graph list add 
buckets add 
postdominator computation preprocessing lemma relation transitively reduced 
proof note equation distinct equation 
suppose just shown theorem pdom 
proof ffl pdom show pdom pdom transitively closed proves required result 
definitions obtain equation pdom conjunction pdom matrices true entries pdom pdom 
ffl pdom pdom zn longest path graph pdom zn distinct nodes path exists graph self loops acyclic 
call path distinct nodes furthermore path length graph graph pdom contradicting assumption longest path graph pdom 
facts lead result 
lemma transitive reduction interprocedural postdominance relation computed time jv jej jv 
computation interprocedural control dependence section briefly outline compute control dependence relation related sets definitions 
represent jej theta jv boolean array entry set true iff node control dependent edge alternatively considered edge set bipartite graph vertex sets representations size jv worst case relation sparse size smaller 
relation easily constructed interprocedural postdominance relation simply scanning pairs checking entries pdom pdom 
takes time jv array graph representations 
graph representation set cd easily obtained time proportional size collecting neighbors similar approach obtain conds 
sets classes equivalence nodes dependences obtained approach 
partition initially consisting just set progressively refined blocks partition coincide sets 
refinement phase performed edge splitting block partition subblocks respectively containing nodes control dependent easy see entire process completed time jv 
experimental results implemented algorithm suif front control flow graph library 
top code written code bind procedure control flow graphs interprocedural control flow graph 
implementation algorithm preprocessing requires lines code supporting data structures created 
data table compares performance algorithm preprocessing aforementioned worklist iterative algorithm sample codes 
ffl mutual test program involving mutual recursion ffl postfix postfix calculator ffl llist linked list class driver ffl schedule simple priority scheduler ffl eqntott logical expression truth table translator column pdom shows number non zero entries full postdominance relation 
columns iter set iter list indicate number set worklist operations performed iterative algorithm respectively 
columns reach set reach list indicate number set worklist operations performed algorithm respectively 
algorithm local updates pdom relation node processed able greatly reduce number set update operations performed 
contrast iterative technique perform union intersection operations bit vectors length equal number nodes program update 
storing results preprocessing searches small single procedure sized bit vectors able get advantage updating word length bit vector segment single operation added expense updating entire bit vector 
algorithm relies repeated searches generally require constant time list operations 
practice operations slightly expensive set operations net result significant performance improvement 
code nodes edges procs calls pdom iter set iter list reach set reach list mutual postfix llist schedule eqntott table algorithm performance results efficient algorithm computing interprocedural control dependence computing interprocedural postdominance 
algorithm runs time quadratic size cfg requires entire postdominance relation computed 
goal develop algorithm compute postdominance dag directly manner similar lengauer tarjan directly compute postdominance tree intraprocedural case 
eliminate need compute transitive reduction ameliorate space demands algorithms infeasible large programs 
dag representation postdominance relation hope extend roman formulation control dependence queries case 
extension allow answer control dependence queries quickly need store explicitly compute entire control dependence relation 
goal incorporate program model atypical control flow effects embedded halts exception handling 
suggests effects incorporated augmenting existing program representation additional nodes edges acting appropriate way traversing additional edges preserve context 
belief core algorithm extend naturally representations 
hope integrate algorithms toolkit interprocedural control data flow analysis program slicing analysis large programs 
acknowledgments bilardi supported part murst italy ibm author visitor watson research laboratory 
allen burke cytron ferrante hsieh sarkar 
framework determining useful parallelism 
proceedings supercomputing pages st malo france july 
bernstein rodeh 
global instruction scheduling superscalar machines 
proceedings sigplan conference programming language design implementation pages toronto ontario june 
bilardi pingali 
framework generalized control dependence 
proceedings acm sigplan conference programming language design implementation pages may 
buchsbaum kaplan rogers westbrook 
linear time pointer machine algorithms common ancestors mst verification dominators 
proceedings thirtieth annual acm symposium theory computing may 

choi cytron ferrante 
automatic construction sparse data flow evaluation graphs 
proceedings th acm symposium principles programming languages pages january 
cytron ferrante rosen wegman zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems october 
cytron ferrante sarkar 
compact representations control dependence 
proceedings sigplan conference programming language design implementation pages white plains new york june 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
fisher 
trace scheduling technique global microcode compaction 
ieee transactions computers 
gupta pollock soffa 
parallelizing data flow analysis 
proceedings workshop parallel compilation kingston ontario may 
queen university 
gupta soffa 
region scheduling 
nd international conference supercomputing pages 
harrold rothermel sinha :10.1.1.114.5033
computation interprocedural control dependence 
technical report osu tr ohio state university july 
harrold rothermel sinha 
computation interprocedural control dependence 
software engineering notes proceedings international symposium software testing analysis volume pages 
acm sigsoft march 
horowitz prins reps integrating noninterfering versions programs 
conference record th annual acm symposium principles programming languages pages munich west germany jan 
horwitz reps binkley 
interprocedural slicing dependence graphs 
transactions programming languages systems january 
compiler group 
library 
documentation set 
harvard university 
johnson 
efficient program analysis dependence flow graphs 
phd thesis cornell university august 
johnson pearson pingali 
program structure tree computing control regions linear time 
proceedings sigplan conference programming language design implementation pages orlando florida june 
lengauer tarjan 
fast algorithm finding dominators flowgraph 
acm transactions programming languages systems july 
liang harrold 
slicing objects system dependence graph 
internation conference software maintenance november 
loyall mathisen 
dependence analysis support software maintenance process 
proceedings conference software maintenance pages september 
shen 
pdg tool analyzing program control dependences 
proceedings parallel architectures compilation techniques august 
ottenstein ottenstein 
program dependence graph software development environment 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments pages april 
pingali bilardi 
optimal control dependence roman problem 
acm transactions programming languages systems may 
podgurski clarke 
formal model program dependences implications software testing debugging maintenance 
ieee transactions software engineering september 
pollock soffa 
incremental version iterative dataflow analysis 
ieee transactions software engineering december 
ryder 
incremental data flow analysis algorithms 
acm transactions programming languages systems january 
sagiv reps horwitz 
precise interprocedural data flow analysis applications constant propogation 
technical report tr computer science university wisconsin madison august 
sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow analysis theory applications chapter pages 
prentice hall 
simons alpern ferrante 
foundation parallel code 
conference record spaa acm symposium parallel algorithms architecture july 
sinha harrold rothermel 
graph slicing programs arbitrary interprocedural control flow 
international conference software pages may 
stanford compiler group 
suif library 
suif compiler documentation set 
stanford university 
