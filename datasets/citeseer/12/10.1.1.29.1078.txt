arie van deursen dept software engineering cwi box gb amsterdam netherlands www cwi nl arie arie cwi nl commercial tools address various aspects year problem 
tools documented plan techniques automated concept recovery 
implies general perception plan techniques useful problem 
argues perception incorrect techniques fact mature significant contribution 
particular show representative code fragments illustrating year problems discuss problems inherent recognizing higher level concepts fragments implement pattern rule techniques demonstrate represented programming plan framework initial experimental evidence suggests current algorithms locate plans linear time 
discuss ways integrate plan techniques existing year tools 
computing reviews classification system 
keywords phrases software maintenance program understanding plan concept recovery cobol 
note appear proceedings th ieee working conference reverse engineering october note carried project sen software renovation 
year problem generally abbreviated existing software systems manipulate dates behave incorrectly turn millennium 
severe problems software industry program plan recognition year tools steve woods dept electrical engineering university hawaii honolulu hi usa spectra eng hawaii edu alex quilici dept electrical engineering university hawaii honolulu hi usa alex spectra eng hawaii edu faced 
result tools developed address problem 
tools deal system inventory impact analysis project planning code remediation testing existing technology lexical pattern matching facilities repositories parsing attribute grammars 
surprisingly tools apparent results research plan techniques concept recovery 
program plan describes common combinations lowlevel program actions implement higher level design concepts traverse list read file line line 
plan approach recovers design concepts library program plans automatically identifying pieces source code implement plans 
obvious application approach construct library consisting typical correct date manipulating plans incrementing comparing years checking leap years 
furthermore list typical encountered errors represented plans library 
library infections located classified potentially corrected automatically 
study plan techniques concept recovery offer tools 
particular examples representative related code fragments discuss existing technology notable shortcomings describe available plan technology relationship existing tools discuss scalability experiment recognizing program plans 
focus recognizing leap year computations 
incorrect leap year computations just aspect millennium problem result easily generalized related computations recognizing computations relying date windows 
addition leap year problems substantial 
programs fail recognize year leap year considering century year recognizing year divisible chapter 
example cost involved damage caused fact control computers new zealand aluminum simultaneously went deal february th 
current tool support various tools available support conversion 
existing tools focused areas locating related code identifying elements source code slicing techniques identify dependent code 
identification done examining variable declarations noting date related identifiers year related data formats cobol pictures form mm dd yy expressions statements noting expressions involving key constants 
supporting code changes identifying suspicious expressions statements code year increments comparisons involving date elements making automatic repairs widening year fields digits 
process locating code modification automated may require assistance programmer suggesting program specific candidate identifier names 
heuristic recognition code leaves open possibility false positives recognizing code potentially date related false negatives failing recognize code date related 
easy avoid recognizing false negatives simply considering date related cost having false positives 
main challenge tools avoid false positives 
leap year example example fragment taken realworld legacy cobol code correctly uses date digit date incorrectly leap years years divisible divisible leap years 
identify dependencies control input data dictionaries screen definitions 
contract info 
contract sm pic 
contract sd pic 
contract sy pic 
divide contract sy giving remainder divide contract sy giving remainder 
move ly move ly 
ly leap year related code example non compliant code 
tests variable contract sy leap year 
means processing dates february th errors may occur computations involving number days interest payments day week determining weekend days time locks 
definition leap year relatively complex programmers correct definition available programming leap year computations done incorrectly cases frequently missed 
big problem tools provides evidence sufficient carefully replace digit dates digit dates 
ideal tool identify chunk code related despite digit date identify pair divisions remainder tests incorrect check leap year automatically transform portion code correctly test leap years shown 
example illustrates problems current approaches problem 
pattern techniques approach locating relevant code write simple patterns lexically dealing directly source code entities ast dealing internal nodes syntax tree combination looking names particular place tree 
approach suffers problems 
difficult pattern techniques accurately recognize instances admitting false positives 
straightforward lexical searches standard identifiers fail flag fragment 
extending try complex example shows simple change fixes problem solely insertion new code 
contract info 
contract sm pic 
contract sd pic 
contract sy pic 
divide contract sy giving remainder divide contract sy giving remainder divide contract sy giving remainder 
move ly move ly 
ly leap year related code fixed version code example 
lexical heuristics assuming variables date related succeed example cost false positives hypothesizing date related 
obvious alternatives examining ast expressions involve dividing storing remainder sy possible year cost false positives hypothesizing computing quarterly payment payment doing date related computation 
seemingly idea checking division just bad common way handle percentages 
fact accurately identifying code date related involves looking interrelationships code fragments 
particular minimum requires noting value divided remainders computed division compared zero 
secondly difficult pattern tools accurately determine specific code heart problem 
heuristics refined slightly identify example necessary identify source problem user 
possible provide user entire data slice related code potentially problematic essentially false positive code slice 
alternatively simply tagging divisions suspicious insufficient set suspicious code include tests remainders 
fixing code necessary things ensure andr appropriate values leap year computation modify test 
difficult pattern tools verify date 
day pic 
month pic 
year pic 
redefines year cc pic 
yy pic 
leap pic 
move leap 
divide year giving remainder 
yy divide year giving remainder move leap 

move leap 

leap leap year related code leap year example particular piece code compliant 
obviously related code error 
correct leap year computation programmer conveniently written nice clear names easy flag date related 
simply providing user slice code suggesting problematic particularly useful 
tools able distinguish correct incorrect code 
rule techniques alternative pattern approach rule approach 
rule techniques examine collections program components relationships 
assumption problematic code fragments described rules operating syntax tree efficiently recognized deductive rule inference engine 
particular assumption effectively write specific rules identify known correct incorrect date examples 
example potential application rule recognizing fragment 
sight rule approach address problems simpler pattern approach 
rule antecedents take care verifying particular program entities exist certain relationships hold division equality test result division 
rule consequences responsible notifying particular correct numeric variable exists division div exists equality test test data dependency test div exists division div exists inequality test test data dependency test div data div div year recognized invalid leap year rule recognize particular invalid leap year computation 
correct date manipulation detected variables code date related possibly transformation correct code erroneous detected 
unfortunately important problem general rules combination deductive rulebased inference engine scalability 
general rule systems suffer scalability problems large fact bases complex interacting rules 
setting programs inspected large resulting large database program facts describing program components control flow data flow 
rules covering fundamentally different ways implement various related computations 
rules complex rule potentially antecedents describing pieces related computation relationships pieces 
approaches dealing scalability problems rule systems 
approach modify rules additional information exactly applied order process antecedents 
drawback approach placing control information rules complex hard maintain difficult debug 
try provide special purpose engine targeted efficiently processing particular class rules 
approach attractive require considerable effort finding appropriate engine 
taken option plan techniques overcome scalability problems 
techniques thought combining special class rules plans dedicated engine optimized recognizing applications rules class 
experiments provided initial evidence plan techniques fact scale 
source program parser ast flow generator date analyzer plan recognizer recognized plan instances canonicalized ast flow annotated ast annotated ast plan library correct plans incorrect plans straightforward architecture recognizing program plans 
plan concept recovery shows adaptation standard plan architecture address problem 
source program fed parser building syntax tree ast passed canonicalization tool handles tasks regularizing expressions ast modifying comparisons subset relational operators static analysis tools produce control flow data dependency graphs 
addition source fed static date analyzer sda 
sda contains inference technology currently available tools 
tasks find initial date seeds lexical pattern matching variable names pic clauses propagate date seeds data flow 
effectively sda phase associates date types variables 
date types plan library reduce search space looking plans 
typically sda phases marks variables date related decide correct incorrect constructs 
plan recognizer special purpose engine library plans tries locate instances canonicalized ast 
particular plan recognition engines differ details describe plans terms syntactic data control flow dependencies view plan recognition explicit process matching description 
approach plan recognition particular approach plan recognition represents plans combination combination components constraints spirit concept recognizer decode treats recognizing program plan constraint satisfaction problem 
particular plan components variables types components constraints component attribute values node constraints intercomponent constraints arc constraints 
modified version standard forward checking dynamic rearrangement constraint satisfaction engine locate instances plans code 
engine operates breadth checking possible applications rule moving properties constraints information available ast flow graph direct actual rule matching process 
example plan example plan component representation 
plan suitable recognizing code fragment similar function 
components syntax tree entities sub plans 
example specifies components remainder computations statement equality test inequality test logical 
program containing components matches plan provided meets plan constraints 
constraints restrictions particular attributes components 
example year variable numeric divisors constants values 
alternatively constraints tie components 
example constraint specifies value divided divisions 
similarly data dependencies connect results divisions tests test results combines 
algorithm underlying engine improves earlier carefully exploiting particular similarities graph structures source programs program plans 
plan incorrect leap year year isa incorrect leap year plan recognize incorrect leap year year year status components divide remain src year src rem rem divide remain src year src rem rem cond test stmt stmt eq src rem src zero dest eq src rem src zero dest src test src test dest constraints numeric field year constant value constant value constant value zero divide divide year divide rem divide rem plan recognizes earlier leap year computation 
plan library full plan library plans cover typical computations involving dates 
organized traits scheme representing years digit year digit sliding window encryption encoding 
type date representation 
purpose plan leap year detection day week determination field format determination date ordering duration computation 
library able contain correct incorrect plans 
library contain plans capture typical correct incorrect fragments grow time programs examined 
see list exposures starting point finding typical computations 
applying plan techniques key issues applying plan techniques feasibility capturing existing leap year computations plans scalability algorithm locating plan instances 
section leap year examples illustrate issues addressed 
plans capture leap year computations ideally small set plans necessary capture significant fraction actual leap year computations code 
examined large set cobol code lines determine may case 
different correct incorrect leap year computations set code appear recognizable plans depending assumptions architecture plan recognition system 
number plans needed completeness resulting plans depends recognition technology 
simply ast annotated allows ignore differences variation order divisions tests 
addition simple expression simplification reordering techniques comparisons greater treating nested ifs ands simplifying negated conditions switching branches allow ignore variations 
restructuring techniques goto elimination expansion non recursive procedures allow plans deal relatively simple control flow 
general powerful canonicalization component fewer plans need recognize higher level variations 
leap years example important issue different ways value divided cobol explicit division 
earlier example correct leap computation takes advantage implicit division results redefine clauses 
redefines date century field year field checks digit yy sub field equals zero testing remainder dividing digit zero 
implicit divisions handled postprocessing ast plan recognition phase begins 
particular assignment redefined field necessary insert appropriate divisions remainders pieces field 
assuming compute year 
compute year 
computing remainder integer division tmp pic 
compute tmp yy 
computing remainder variable store digits decimal point 
different ways compute cobol remainders 
done example plan recognize leap year computation change 
reduce number plans needed recognize high level concepts leap years providing supporting plans recognizing low level details 
example divide giving construct way compute remainder 
shows alternatives 
recognized simple plans allowing original plan recognize computations high level structure 
factor increases number plans need detect incorrect date computations locating leap year computations code correspond correct definition leap year 
appears categories incorrect computations involve forgetting divisions failing divide explicitly testing specific years explicitly checking year 
category addressed having different plans different combinations divisions similiar structure example plan 
second category addressed single general plan explicit comparison component requires constraints comparison involve year numeric value 
year constraint assumes certain variables pre labeled years human sda component 
factor increases number plans sheer volume relatively specialized uses dates 
shows example computation determines current year year leap years 
scalability experiment important factor application plan techniques technology speed plan recognition engine 
performed experiment recognizing leap year plan shown 
plan complicated version nested move leap year move leap year divide year giving remainder equal move leap year equal move leap year computation determines current previous year leap year 
plan incorrect leap year year isa incorrect leap year plan recognize incorrect leap year year year status components divide remain src year src result rem equal src rem src zero dest cond test stmt stmt equal src year src zero dest cond test stmt stmt divide number constraint checks sample variance plan average array plan leap year plan number program components results search leap year plan 
programs different sizes 
constraints checked measure effort 
shows results comparisons plans searched programs similar sizes 
takes linear effort evaluated con remain src year src result rem straints line code recognize instances plan 
took approximately seconds locate find equal src rem src zero dest constraints stances plan line program numeric field year unoptimized lisp implementation plan recognition constant value zero constant value constant value algorithm running sun workstation 
divide rem modifying tools control flow true control flow true divide divide year assuming performance results hold significantly improve environments plan techniques recognize design concepts 
control flow true divide particular recognition correct plans helps second incorrect leap year plan 
eliminate areas date related slices user consideration allows highlight areas slices recognized part plan 
nar statements clause 
current experimental testbed tied language programs precluding cobol experiments stage 
experiment translated plan lowerlevel representation tied ast representation programs 
result plan components constraints 
constructed programs varying sizes lines containing instance plan lines code 
didn just random programs wanted able control instances rows part program examined user 
lines recognizing incorrect plans helps point areas fixed indicating precisely problem code reverse true 
hooking plan recognition engine current environments offers chance heuristically improve performance 
example know particular variable year name year reduce amount effort necessary recognize date related plans 
particular plan incorrect leap year reduce sets candidates components tests remainders eliminating 
tests involve variables known years 
similarly know variable year user determined reduce candidate sets components 
incorrect leap year example reduce year eliminating rest 
obvious ways effective plan engine fits architecture 

initial empirical evidence scalability approach locating related plans planning connecting recognition engine output cobol parser flow analyzer determining performance recognizing number instances code fragments discussed collection real world cobol programs 
code fragments include number different examples leap year windowing related code fragments 
result experiment go long way validating apparent linear performance plan recognizer 
lines planning perform experiments measure performance improvements possible recognizer determined advance heuristic means particular variable particular type date related value 
assuming recognizer performance validated planning exploring plans recognize hooked slices display relevant part slice requires changes transformations automatically repair code fragments recognized 
applying technology excellent opportunity experiment building plan library 
experimenting able evaluate library completeness effectiveness detecting real world problems effort necessary maintaining plan library 
argues plan concept recovery play important role key component real world tools addressing issues 
particular discussed problems pattern rule approaches locating potentially problematic code fragments demonstrated plan approach addresses drawbacks 
addition shown represent leap year plans provided experimental evidence recognized time linear size program 
indicated ways plan concept recovery environments fit 
tool encompassing plan techniques outlined advantages 
significantly increases level automation analysis phase 
successful recognition date related design concepts potential greatly reduce number false positives examined discarded hand 
allow automatic location modification negative cases digit date 
incorrect plans augmented accurate transformation rules automatic repair 
allow validation process explicit inspection list examples 
tools hide technology fear competition 
large users may unwilling hand mission critical software tool validity assessed 
plans provide explicit list cases covered help users assess tool quality applicability 
support analyzing code compliant 
particular support regression analysis verifying software compliant early stage undergo regular maintenance compliant 
plan techniques lot help address problem 
ignored due incorrect perception don scale 
arie van deursen sponsored part bank abn software house dutch ministry economical affairs project itu sos resolver 
steve woods sponsored part natural sciences engineering research council canada nserc 
alex quilici sponsored part nsf research initiation award 
anonymous reviewers wcre helpful comments 
arnold 
software change impact analysis 
ieee computer society press 
chin quilici 
decode cooperative program understanding environment 
software maintenance research practice 
van deursen klint sellink 
validating year compliance 
technical report cwi centrum voor wiskunde en informatica department software technology 
appear 
chapter program analysis system renovation resolver release hart 
scaleable automated process year system correction 
proceedings th international conference software engineering icse pages 
ieee 
url www 
com htm 
hartman 
workshop technical 
workshop notes aaai workshop ai automated program understanding th national conference artificial intelligence 
url www cis ohio state edu hartman 
ibm 
year digit dates guide planning implementation 
url www software ibm com year 
jones 
global economic impact year software problem 
url www spr 
com library htm 
software productivity research ning 
program concept recognition transformation 
ieee transactions software engineering 
markosian newcomb brand 
enabling technology reengineer legacy systems 
communications acm 
special issue reverse engineering 
ph 
newcomb scott 
requirements advanced year maintenance tools 
ieee computer 
quilici 
memory approach recognizing programming plans 
communications acm 
quilici woods 
framework program understanding 
journal automated software engineering 
quilici woods zhang 
new program plan recognition 
proc 
th ieee working conference reverse engineering 
ieee computer society 
appear 

year problem solver step disaster prevention plan 
mcgraw hill 
rich waters 
programmer apprentice 
frontier series 
acm press addison wesley 
smith ller tilley 
year problem issues implications 
technical report cmu sei tr software engineering institute 

leap year software bug gives glitch 
risks digest 
url ncl ac uk risks html subj 
wills 
automated program recognition feasibility demonstration 
artificial intelligence september 
wills 
automated program recognition graph parsing 
phd thesis mit 
woods 
method program understanding constraint satisfaction software reverse engineering 
phd thesis university waterloo 
woods quilici yang 
constraint design recovery software reengineering theory experiments 
kluwer academic publishers 
appear 
woods yang 
program understanding problem analysis heuristic approach 
proceedings th international conference software icse pages 
ieee computer society 
woods yang 
program understanding constraint satisfaction representation reasoning techniques 
journal automated software engineering 
appear 

resource guide year tools 
ieee computer 
