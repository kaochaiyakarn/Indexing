polyp polytypic programming language extension patrik jansson johan jeuring chalmers university technology university goteborg goteborg sweden email cs chalmers se url www cs chalmers se functions written different datatypes datatypes change development programs functions similar functionality needed different datatypes 
examples functions pretty printers debuggers equality functions unifiers pattern matchers rewriting functions functions called polytypic functions 
polytypic function function defined induction structure user defined datatypes 
extends functional language subset haskell construct writing polytypic functions 
extended language type checks definitions polytypic functions infers types expressions extension jones theories qualified types higher order polymorphism 
semantics programs extended language obtained adding type arguments functions dictionary passing style 
programs extended language translated haskell 
complex software systems usually contain datatypes development system change regularly 
developing innovative complex software typically evolutionary process 
furthermore systems contain functions functionality different datatypes equality functions print functions parse functions software written impact changes software limited possible 
polytypic programs programs adapt automatically changing structure reduce impact changes 
submitted th annual sigplan sigact symposium principles programming languages paris france january 
effect achieved writing programs large classes datatypes 
consider example function length list 
int counts number values type list 
similar function length tree 
int counts number occurrences tree 
want generalise functions single function polymorphic type constructor length 
int ranges type constructors 
call functions polytypic functions 
polytypic length function function length applied values datatype 
datatype changed length behaves expected 
example datatype list constructors lists built empty list constructor cons constructor prepends element list 
add constructor append element list function length behaves expected counts number elements list 
equality function ml ada functions classes derived haskell examples widely polytypic functions 
functions automatically generated compiler definitions functions languages 
investigate language extension functions defined language 
polytypic functions useful situations examples jeuring jansson 
polytypic function applied values large class datatypes restrictions apply 
require polytypic function applied values regular datatypes 
datatype regular contains function spaces arguments datatype constructor left right hand side definition 
collection regular datatypes contains conventional recursive datatypes nat list different kinds trees 
introduce class regular regular datatypes write length regular 

int polytypic functions defined larger class datatypes including datatypes function spaces discuss extensions 
polymorphism differs parametric polymorphism ad hoc polymorphism overloading 
subsection explains 
traditional polymorphic function head 
seen family functions instance monomorphic type 
need definition head typing rules ensure values type 
polymorphic function implemented single function works boxed values 
ad hoc polymorphic function num 


family functions instance num class 
instances may completely unrelated instance defined separately 
helped type inference compiler find correct instance 
polymorphism polytypic function length regular 

int parametric ad hoc polymorphism 
single definition length suffices length different instances different contexts 
compiler generates instances definition polytypic function type context 
polytypic function may parametric polymorphic need function sum regular 
int 
int returns sum integers value arbitrary datatype polytypic parametric polymorphic 
writing polytypic programs exist various ways implement polytypic programs typed language 
possibilities ffl universal datatype ffl higher order polymorphism constructor classes ffl special syntactic construct 
polytypic functions written defining universal datatype define functions want available large classes datatypes 
polytypic functions specific datatype providing translation functions universal datatype 
universal datatypes disadvantages user write translation functions type information lost translation phase universal datatype type errors occur programs run 
furthermore different people different universal datatypes program reuse difficult 
higher order polymorphism constructor classes defining polytypic functions type information preserved current functional languages gofer haskell implementing polytypic functions 
writing programs cumbersome programs cluttered instance declarations type declarations cluttered contexts 
furthermore hard deal mutual recursive datatypes 
solutions writing polytypic functions extended subset haskell syntactic construct defining polytypic functions 
polytypic functions implemented type checked 
name polyp extension resulting language 
consult page www cs chalmers se obtain preliminary version compiler compiles polyp haskell subsequently compiled haskell compiler latest developments polyp 
polyp polyp extension functional language allows programmer define polytypic functions 
underlying language article subset haskell lazy essential polytypic extension 
extension introduces new kind top level definition polytypic construct define functions induction structure datatypes 
datatype definitions express sum product parametric recursive types polytypic construct handle cases 
polyp type checks polytypic value definitions polytypic values types automatically inferred type inference algorithm jones theories qualified types higher order polymorphism 
semantics polyp defined just haskell explicit type annotations needed resolve overloading 
adding type arguments polytypic functions dictionary passing style 
give type translation polyp haskell uses partial evaluation completely remove dictionary values compile time 
avoid run time overhead creating instances polytypic functions 
compiler polyp development number limitations 
polytypic functions applied values non mutual recursive regular datatypes type argument 
multiple type arguments encoded single sum type working elegant treatment multiple type arguments 
polyp predecessors preprocessor generated instances polytypic functions handle mutual recursive datatypes hope port part predecessor polyp near 
polyp able handle mutual recursive datatypes arbitrary number type arguments function spaces may occur 
background related polytypic functions standard community see 
generating instances specific polytypic functions map cata hylo type simple demonstrated authors 
number predefined polytypic functions defined jay type system jones type system qualified types higher order polymorphism type check expressions language predefined polytypic functions 
approach differs approaches give predefined polytypic functions supply construct define new polytypic functions induction structure datatype definitions 
difference essential polytypic programming compared difference versions ml gave number predefined datatypes versions ml provided built types construct defining user defined datatypes 
level language sheard nelson show write typed polytypic programs 
polytypic program obtained embedding second level type declarations values level computations 
level language powerful language larger extension common functional programming languages 
adaptive object oriented programming programming style similar polytypic programming 
adaptive oop methods corresponding polytypic functions attached groups classes types usually satisfy certain constraints regular 
adaptive oop abstracts constructor names datatype structure 
results programming style typing plays prominent role polytypic programming 
resulting programs similar behaviour 
haskell syntax programs types examples 
backward function arrow types kinds syntactic sugar 
section introduces polytypic programming 
section discusses type inference checking algorithms polyp 
section gives semantics polyp section shows generate code polyp programs 
section concludes 
polytypic programming section show write polytypic programs polyp 
extensive polytypic programming see jeuring jansson 
functors datatypes define polytypic function able define functions induction structure datatype 
structure datatype described means functor defining datatype 
consider datatype list defined data list nil cons list values datatype built prepending values type list 
datatype viewed fixed point respect second argument datatype flist defined data flist fnil datatype flist describes structure datatype list interested structure list names constructors flist important 
define flist conventional notation removing flist constructors writing empty space obtain removing fnil replacing replacing juxtaposition theta 
flist theta arguments flist 
constructor par returns parameter argument rec returns recursive parameter second argument 
operators theta empty product lifted 
flist par theta rec flist functor list datatype tree defined data tree leaf bin tree tree applying procedure datatype list obtain definition 
ftree par rec theta rec ftree functor tree functors describe structure datatypes list tree regular datatype exists bi functor describes structure datatype purposes functor value generated grammar 
theta par rec con functor variable generates datatype constructors con type 
alternative con grammar description structure datatype contains constant types bool char alternative describe structure types defined terms user defined types datatype rose trees data rose fork list rose functor obtain datatype par theta list rec polytypic construct introduce new construct polytypic defining polytypic functions induction structure functor polytypic case ffi 
eig name value defined type functor variable fi functor patterns ei polyp expressions 
explicit type polytypic construct needed general infer type cases 
informal meaning define function takes functor value describing structure fact flist bifunctor functor takes arguments terms functor bifunctor bifunctors 
datatype modelled initial algebra category algebras functor datatype 
datatype argument 
function selects expression branch case matching functor 
polytypic construct template constructing instances polytypic functions functor datatype 
functor argument polytypic function need supplied explicitly inserted compiler type inference 
running example take function flatten defined 
flatten flatten regular 

flatten cata fl polytypic fl 
case 
fl fl 

fl fl 

par 

rec 


concat flatten pmap fl con 

data left right 


left right definition flatten element type tree compiler performs roughly rewrite steps construct actual instance flatten tree flatten tree cata ree follows need instance cata datatype tree instance function fl functor tree instance definition ftree definition fl transform fl ftree follows 
fl ftree fl par rec fl par fl rec transform functions separately 
fl par nx 
fl rec 
fl rec 
nx 
nx 
function rewritten uncurry obtain function flattening tree cata tree nx 
uncurry expanding cata tree similar way obtain haskell function instance flatten tree 
catamorphism generalised fold datatype takes functions datatype constructors combined single argument means function recursively replaces constructor functions corresponding argument functions 
generalisation arbitrary regular datatypes function foldr defined lists 
give definition cata subsection 
basic polytypic functions definition function flatten functions cata pmap 
subsection defines basic polytypic functions 
polytypic functions refer constructor names specific datatypes introduce predefined functions inn 
function polytypic functions pattern matching constructors datatype 
example tree defined follows tree leaf left tree bin right function inn inverse function 
collects constructors datatype single constructor function 
regular 

fd inn regular 
fd fd abbreviates functorof functorof special type constructor takes datatype constructor returns functor main means expressing relation datatypes functors 
category theory functor mapping categories preserves algebraic structure category 
category consists objects types arrows functions functor consists parts definition types definition functions 
functors seen functions take types return type 
part functor takes functions returns function called fmap see 
fmap define polytypic version function map pmap follows datatypes fix points functors functorof 
polytypic fmap 





case 
fmap fmap 
fmap fmap 
id par 
rec 

pmap fmap con 
id left right definition fmap 
pmap regular 



pmap inn fmap pmap takes argument apart fmap applies parameters pmap recursively substructures inn puts parts back 
function cata defined terms function fmap cata regular 
functorof 


cata fmap id cata liner definition fmap needed obtain catamorphism regular datatype 
catamorphisms specific datatypes catamorphisms useful defining polytypic functions defining functions specific datatypes provide shorthand notation creating function argument cata fci 
eig 
example consider datatype simple expressions 
data expr const add expr expr mul expr expr function eval evaluates expression 
eval num 
expr 
eval cata const 
id add 
mul 
evaluating eval expr expr expr result replacing constructor expr corresponding function 
polytypic functions define polytypic equality function polytypic zip function regular eq 


bool false uncurry flatten regular 

bifunctor 

uncurry predefined haskell functions 
function generalisation haskell function zip 


function zip takes pair lists list pairs 
lists unequal length structures different longer list truncated replaced empty structure 
pair structures mapped just structure pairs structures equal general impossible know truncate empty structure means type function defined nonrecursive variant defined means polytypic construct 
evaluation gives false gives checks pairs structure equal 
subsection function separate separates value structure contents 
separate regular 

separate pmap const flatten function separate central function jay representation values shapely types value shapely type represented structure obtained replacing contents value contents obtained flattening value 
polytypic data compression considerable amount internet traffic consists files possess structure examples databases html files javascript programs pay compress structured files 
structure specific compression methods give better compression results conventional compression methods unix compress utility 
example unix compress typically requires bits byte pascal program code cameron reports compression results bit byte pascal program code 
basic idea structure specific compression methods simple parse input file structured value separate structure contents compress structure bit string representing constructors numbers compress resulting string contents conventional compression method 
example suppose datatype trees data tree leaf bin tree tree file containing tree bin bin leaf bar leaf car bin leaf far leaf war separating structure contents gives bin bin leaf leaf bin leaf leaf list containing words bar car far war 
assigning leaf bin structure represented 
bit string equals read binary number list represented th ascii character 
tree represented list words bar car far war 
tree stored bytes compressed counterpart requires bytes 
list compressed conventional compression method 
authors program code compression programs observe method works arbitrary structured objects results compressing pascal programs 
compress javascript programs write new compression program 
desirable polytypic data compression program 
description basic idea polytypic data compression translated polytypic program follows 
function takes argument description concrete syntax print values datatype syntax 
regular text 
syntax 
string 
string show separate parse describe new functions turn 
omit precise definitions functions 
function parse polytypic function type parse regular 
syntax 
string 
takes description concrete syntax datatype returns parser concrete syntax 
defined grammar concrete syntax satisfies certain properties 
function structure compress takes structure replaces constructors numbers turns resulting structure string 

string function show text 

string prints content list generated separate function uses conventional compression program compress pair strings 
string string 
string type inference polytypic value definitions type checked expressions type inferred 
section discusses type checking type inference algorithms 
subsection introduces core language polytypic construct qualified higher order polymorphic types 
second subsection extends core polyp steps 
third subsection discusses unification extended language fourth subsection shows type check polytypic value definition 
core language core language extension core ml qualified types higher order polymorphism see 
constructor language superscript denoting kind 
example basic type kind datatype constructor list kind 
call resulting language qml 
set constructor constants contains 
program consists list datatype declarations binding main 
typing rules type inference algorithm extensions standard rules algorithm handle qualified higher order polymorphic types see jones 
compared traditional hindley milner system type judgements extended set predicates rules involving essential changes predicate set shown 
rules algorithm omitted 
entailment relation gamma relates sets predicates reason qualified types see 
variable ee application abstraction expression variable binding constants ff variables applications types ae qualified types oe ae type schemes core language qml gamma ae gamma gamma ae gamma ae gamma ae typing rules qml polytypic language extension polytypic extension qml consists parts extension type system extension expression language 
call extended qml language 
extending type system type system extended generalising unification algorithm adding new types kinds classes initial type environment 
initial typing environment language consists components typings functions inn type classes regular bifunctor type constructors functorof mu collection functor constructors par rec con 
ffl functions inn introduced section 
regular 

fd inn regular 
fd fd abbreviates functorof note functions qualified higher order polymorphic types 
ffl class regular contains regular datatypes class bifunctor contains functors regular datatypes 
reflect entailment relation extended follows gamma regular regular datatypes regular gamma bifunctor functorof ffl functorof type constructor takes datatype constructor represents functor 
type constructor mu inverse functorof takes functor represents datatype functor structure 
may different datatypes structure add second argument mu disambiguate types 
type constructor mu useful want relate similar different types 
functorof mu kinds functorof 
mu abbreviates kind regular type constructors abbreviates kind bifunctors 
ffl functor constructors obtained nonterminal added constructor constants kinds 



par rec con constructors rule entailment relation forms bifunctor bifunctor gamma bifunctor regular bifunctor gamma bifunctor gamma bifunctor par resulting type system quite powerful type check polytypic programs context assigning types number basic polytypic functions 
combine polytypic functions define new polytypic function induction structure datatypes 
point choose add basic polytypic functions really need inductive definition typing environment 
give roughly expressive power language jay extended qualified types 
minimal example add fmap initial environment fmap bifunctor 



letting define type check polytypic functions pmap cata 
type checking algorithm example derive pmap leaf regular gamma gamma fl fl oe gamma ff 
goe gamma polytypic oe case ff fl typing rule polytypic type type type type par type rec type type con interpreting functors type synonyms tree 
tree int 
best hard write polytypic version function zip 
adding polytypic construct language writing polytypic programs simpler 
adding polytypic construct add polytypic construct production variable bindings expression extended polytypic ae case ff functor variable nonterminal describes language functors defined section 
resulting language 
able case analysis functor built operators type constants par rec con equivalent class bifunctor context bifunctor included type ae function defined polytypic construct 
need explicitly 
typing rules rules qml rule typing polytypic construct 
notation see 
note polytypic construct expression binding typing rule returns binding 
rule simple looks substitution ff 
replaces functor variable functor interpreted partially applied type synonym see 
unification omitted typing rule application uses unification algorithm unify argument type function type argument 
presence equalities concerning mu functorof complicate unification 
unification algorithm extension kind preserving unification algorithm jones turn extension robinson wellknown unification algorithm 
unify equalities mu functorof functorof mu mu mu functorof functor corresponding datatype built functor constructors 
equality represents set equalities equality generated regular datatype declared program 
example program declares datatype list equality mu par rec list mu functorof list list generated 
write oe unified equalities substitution oe 
example tree oe mu mu oe mu functorof list list ae oe ff 
functorof tree 
oe ff 

par rec 
listg unification equalities known semantic unification considerably complicated syntactic unification 
fact sets equalities impossible construct general unifier 
turn set equalities want unify complete normalising confluent set rewriting rules algorithms narrowing lazy term rewriting martelli obtain general unifier terms unifiable 
replace equality symbol equalities obtain complete set rewriting rules 
recursive path orderings technique developed dershowitz prove rules normalising knuth bendix completion procedure prove rules confluent 
proofs simple 
theorem 
unifier types oe jones kind preserving gamma gamma fl fl fg ae gamma gamma tn gamma delta delta delta ff 
fg gamma gamma polytypic ae case ff fl alternative polytypic unification martelli algorithm semantic unification oe general unifier conversely unifier exists unification algorithm fails 
type checking polytypic construct instances polytypic functions generated means function defined polytypic construct type correct 
purpose type check polytypic functions 
type checking polytypic value definition amounts checking inferred types case branches general corresponding instances explicitly type 
polytypic value definition polytypic ae case ff branch case ffl infer type ffl calculate type alternative explicit type ae ff 

ffl check ae instance calculating types alternatives functor constructors treated type synonyms defined 
complete type inference checking algorithm obtained extending jones type inference algorithm alternative polytypic construct 
example sketch definition fl type checked branch polytypic case infer type expression 
fl fl fresh instances explicit type ae 
occurrences fl get 

calculate type ae ff 



ae fx 


ag see ae instance rec branch polytypic case infer type expression rec nx 
type expression rec 
calculate type ae rec ff 
rec 


ae rec fb 
see ae rec instance rec branches handled similarly 
polytypic binding type checked typing rules algorithm manages type check binding 
conversely algorithm type check polytypic binding binding type checked typing rules 
results jones obtain theorem 
theorem 
type inference checking algorithm sound complete 
semantics meaning qml expression obtained translating expression version polymorphic calculus called qp includes constructs evidence application evidence abstraction 
evidence needed code generation process construct code functions contexts 
example function type eq 


bool integers need evidence fact eq int meaning int equality 
way give evidence case simply supply function 
results section heavily jones qualified types 
language qp expressions qml plus new constructions delta delta delta qml expressions evidence application evidence abstraction oe types oe qualified types oe polymorphic types notational convenience case state ments 
typing rules qp omitted 
translation rule polytypic construct translation rules simple omitted 
translation rule form gamma read attribute grammar 
inherited attributes input data consist type context gamma expression synthesised attributes output data evidence context substitution translated qp expression inferred type example translate function fl bifunctor 

obtain simplification code 
fl case fl fl 
fl fl nx 
par nx 
rec nx 
concat flatten pmap fl con nx 
translation function fl qp translation conversion function transforms evidence abstractions applied evidence parameters application right type 
function obtained expression oe oe expresses oe general oe witness statement conversion function oe oe inputs function type schemes oe oe output succeeds conversion function succeeds unification algorithm succeeds types substitution left type right type evidence contexts oe constructed evidence contexts oe function constructed entailment relation extended evidence values 
evidence fact functor bifunctor take symbolic representation functor element datatype described nonterminal section 
bifunctor gamma bifunctor holds 
evidence regularity datatype dictionary components definitions inn datatype evidence corresponding functor bifunctor 
theorem 
translation qp preserves typedness succeeds programs unambiguous type schemes 
code generation generate code program generate qml expression expression steps ffl expression translated qp expression explicit evidence parameters dictionaries ffl qp expression partially evaluated respect evidence parameters giving program qml 
gamma gamma fl fl fg ae gamma gamma tn gamma sn delta delta delta fg ff 
fg gamma gamma polytypic ae case ff case ff vg fl translation polytypic construct program translated qp occurrences polytypic construct classes regular bifunctor removed program contains evidence parameters 
remove evidence parameters introduced partial evaluation 
partial evaluation started main expression unambiguous type propagated program generating requests main expression subexpressions 
evidence regularity datatype entailment gamma regular dictionary containing functions inn bifunctor polyp constructs dictionaries number straightforward inductive functions syntax regular datatypes 
functions inn obtained selecting correct component dictionary 
practice polyp program program written subset haskell extended polytypic construct compiled haskell hugs 
appendix example polyp program code generated program 
size original program total number subexpressions bifunctors regular datatypes occurring program size generated code theta request instance function defined means polytypic construct datatype results functions subexpressions bifunctor datatype including bifunctors datatypes 
efficiency generated code constant factor worse hand written instances polytypic functions 
shown extend functional language polytypic construct 
polytypic construct considerably simplifies writing programs functionality large class datatypes polytypic programs 
extension small powerful extension language qualified types higher order polymorphism 
developed compiler compiles haskell polytypic construct plain haskell 
lot remains done 
compiler extended handle mutual recursive datatypes arbitrary number type arguments function spaces may occur 
example purpose multiple type arguments introduce class functor regular functor bifunctor functor 
constructors mu functorof extended similar fashion 
partial evaluation approach code generation implies compile module containing definition polytypic function separately module 
solution translate polytypic programs language intensional polymorphism translating polytypic programs qp 
discussions type systems polytypic programming graham hutton mark jones oege de moor rinus plasmeijer fritz tim sheard comments anonymous referee gratefully acknowledged 
oege de moor graham hutton van helped implementing predecessors polyp 
timothy bell john cleary ian witten 
text compression 
prentice hall 
bell jay moggi 
functorial ml 
plilp 
springer verlag 
lncs 
bohm berarducci 
automatic synthesis type programs term algebras 
theoretical computer science 
robert cameron 
source encoding syntactic information source models 
ieee transactions information theory 

compact coding syntactically correct source programs 
software practice experience 
damas milner 
principal type schemes functional programs 
th symposium programming languages popl pages 
dershowitz 
note simplification orderings 
information processing letters 
fasel hudak peyton jones wadler 
sigplan notices special issue functional programming language haskell 
acm sigplan notices 
freyd 
recursive types reduced inductive types 
proceedings logic computer science lics pages 
robert harper greg morrisett 
compiling polymorphism intensional type analysis 
nd symposium programming languages popl pages 
jansson 
polytypic unification 
master thesis chalmers university technology university goteborg 
jansson jeuring 
polytypic unification implementing polytypic functions constructor classes 
preparation see www cs chalmers se 
barry jay 
polynomial polymorphism 
proceedings eighteenth australasian computer science conference pages 
barry jay 
semantics shape 
science computer programming 
jeuring 
polytypic pattern matching 
conference record fpca sigplan 
conference functional programming languages computer architecture pages 
jeuring jansson 
polytypic programming 
launchbury meijer sheard editors proceedings second international summer school advanced functional programming techniques pages 
springer verlag 
lncs 
mark jones 
dictionary free overloading partial evaluation 
acm sigplan workshop partial evaluation semantics program manipulation orlando florida june 
mark jones 
qualified types theory practice 
cambridge university press 
mark jones 
functional programming overloading higher order polymorphism 
jeuring meijer editors advanced functional programming lncs pages 
springerverlag 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming pages 
klop 
term rewriting systems 
handbook logic computer science pages 
oxford university press 
knuth bendix 
simple word problems universal algebras 
leech editor computational problems algebra pages 
pergamon press 
lieberherr silva xiao 
adaptive object oriented programming graphbased customization 
communications acm pages 
malcolm 
data structures program transformation 
science computer programming 
martelli rossi 
algorithm unification equational theories 
proc 
symposium logic programming pages 
meertens 
paramorphisms 
formal aspects computing 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
hughes editor proceedings th acm conference functional programming languages computer architecture fpca pages 
meijer hutton 
bananas space extending fold unfold exponential types 
conference record fpca wg conference functional programming languages computer architecture pages 
palsberg xiao lieberherr 
efficient implementation adaptive software 
toplas 
sheard nelson 
type safe abstractions program generators 
unpublished manuscript 
tim sheard 
automatic generation structure operators 
acm transactions programming languages systems 
ziv lempel 
universal algorithm sequential data compression 
ieee transactions information theory 
appendix simple polyp program combining definitions flatten definition fmap code get small polytypic program testing function separate 
assume prelude containing composition definitions functions const concat 
main separate separate cons cons nil fork cons fork nil nil data list nil cons list data rose fork list rose separate pmap const flatten pmap inn fmap pmap cata fmap id cata generated code code generated polyp looks follows 
edited generated code slightly 
uncurry uncurry fst snd data list nil cons list data rose fork list rose main list rose cons cons nil fork cons fork nil nil list list const list rose rose const rose list list list list outf list rose rose rose rose outf rose list list flf list rose rose flf rose list uncurry nil uncurry cons list 
outf list case nil 
left cons 
right list list id list outf list flf list fle rose uncurry fork rose 
outf rose case fork 
rose rose id rose outf rose flf rose 
flp fla left right 
id 
fle 

flp flr 

list flp 
fla concat list 
list flr 
flr 

