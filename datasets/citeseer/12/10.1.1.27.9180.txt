australian artificial intelligence institute la street melbourne victoria australia telephone facsimile methodology modelling technique systems bdi agents january technical note david kinny michael georgeff anand rao australian artificial intelligence institute street melbourne australia georgeff oz au appears agents breaking away proceedings seventh european workshop modelling autonomous agents multi agent world maamaw published springer lecture notes artificial intelligence 
supported part australian research council 
construction large scale embedded software systems demands design methodologies modelling techniques support abstraction inheritance modularity mechanisms reducing complexity preventing error 
multi agent systems widely accepted basis large scale applications adequate agentoriented methodologies modelling techniques essential 
just ensure systems reliable maintainable conformant allow design implementation maintenance carried software analysts engineers researchers 
describe agent oriented methodology modelling technique systems agents belief desire intention bdi paradigm 
models extend existing object oriented oo models 
building adapting existing understood techniques take advantage maturity produce approach easily learnt understood familiar oo paradigm 
managing complexity challenging task facing designers large scale embedded software systems 
widely accepted construction reliable maintainable extensible systems conform specifications requires inter alia design methodologies modelling techniques support abstraction structuring inheritance modularity mechanisms managing inherent complexity 
foremost methodologies developed design specification programming conventional software systems various object oriented oo approaches central notion objects encapsulate state information collection data values provide behaviours defined interfaces operations information 
oo methodologies guide key steps object identification design refinement permitting abstraction object classes inheritance class hierarchies 
oo methodologies provide uniform paradigm useful range system scales implementation languages 
achieved considerable degree maturity widespread acceptance advantages 
large community software developers familiar exists 
oo design development environment supported diagram editors visualization tools 
convergence viewpoints major proponents different variations oo theme 
agent paradigm ai notion reactive autonomous entities embedded changing uncertain worlds perceive act 
supports research community substantial progress years providing theoretical practical understanding aspects agents multi agent systems 
currently flowers bloom multitude viewpoints exactly constitutes agent structured collections agents interacting environment implement complex systems 
despite healthy lack consensus benefits implementing agent systems little disputed agent architectures progressed useable technologies 
examples successful application agent system technologies significant scale 
part due absence mature languages software tools experience suggests absence methodologies allow system complexity effectively managed greater obstacle 
oo methodologies directly applicable agent systems agents usually significantly complex typical objects internal structure behaviours exhibit 
believe multi agent systems widely accepted basis large scale commercial industrial applications adequate design methodologies modelling techniques essential 
just guarantee systems sufficiently reliable maintainable conformant allow design implementation maintenance carried software analysts engineers ai researchers 
reached similar need familiar intuitive modelling techniques pan tenenbaum research program centred design implementation theoretical understanding particular belief desire intention bdi agent architecture georgeff lansky rao georgeff achieved considerable maturity 
applying technology basis number medium large scale software systems 
application domains systems include air traffic management ljungberg air combat simulation tidhar business process management 
realizing existing formalisms describing reasoning agents provide adequate support process agent design attempting develop suitable methodologies models 
approach pragmatically motivated explore existing oo modelling techniques extended apply bdi agent systems 
building adapting existing understood techniques take advantage maturity oo approach aim develop models methodology easily learnt understood familiar oo paradigm 
overview agent oriented methodology focussing models developed 
kinny provide detailed description methodology process multi agent system design 
sections follow outline models methodology application domain illustrates describe particular models detail compare approach area 
agent oriented methodology methodology support design specification agent systems provide clear conceptual framework enables complexity system managed decomposition abstraction 
oo methodologies booch rumbaugh advocate decomposition system identification key object classes application domain focussing behaviour relationships classes 
essential details system design captured different types models 

object model captures information objects system describing data structure relationships operations support 

dynamic model describes states transitions events actions activities interactions characterize system behaviour 

functional model describes flow data system activity system components 
dynamic functional models serve guide refinement object model particular refinement operations object provide 
fully refined object model complete specification object system 
object concept applied uniformly levels abstraction 
contrast specifying agent system highly desirable adopt specialized set models operate distinct levels abstraction 
firstly external viewpoint system decomposed agents modelled complex objects characterized purpose responsibilities services perform information require maintain external interactions 
secondly internal viewpoint elements required particular agent architecture modelled agent 
case agent beliefs goals plans 
agents external viewpoint agent oriented methodology advocates decomposition system key roles application 
identification roles relationships guides specification agent class hierarchy agents particular instances classes 
analysis responsibilities agent class leads identification services provided agent external interactions 
consideration issues creation duration roles interactions determines control relationships agent classes 
details captured models 

agent model describes hierarchical relationship different concrete agent classes identifies agent instances may exist system multiplicity come existence 

interaction model describes responsibilities agent class services provides associated interactions control relationships agent classes 
includes syntax semantics messages inter agent communication communication agents system components user interfaces 
models largely independent bdi architecture 
methodology elaboration refinement expressed major steps 

identify roles application domain 
dimensions analysis undertaken roles organizational functional directly related application required system implementation 
identify lifetime role 
elaborate agent class hierarchy 
initial definition agent classes quite assuming particular granularity agency 

role identify associated responsibilities services provided fulfill responsibilities 
services provided agents request services may include interaction external environment human users 
example responsibility may require agent monitor environment notice certain events occur respond appropriately performing actions may include notifying agents users 
conversely responsibility may induce requirement agent notified conditions detected agents users 
decompose agent classes service level 

service identify interactions associated provision service performatives speech acts required interactions information content 
identify events conditions noticed actions performed information requirements 
determine control relationships agents 
point internal modelling agent class performed 

refine agent hierarchy 
commonality information services agent classes consider introducing new agent class existing agent classes specialize encapsulate common 
compose agent classes inheritance aggregation guided commonality lifetime information interfaces similarity services 
introduce concrete agent classes account implementation dependent considerations performance communication costs latencies fault tolerance requirements refine control relationships 
considerations lifetime multiplicity introduce agent instances 
roles responsibilities services just descriptions purposeful behaviours different levels abstraction roles seen sets responsibilities responsibilities sets services 
services activities natural decompose terms identity performer 
roles initially identified serve starting point analysis front decision agents result process analysis 
roles decomposed level services internal modelling performed fine grained model agency produced 
accordance considerations mentioned concrete agents result may reflect groupings services responsibilities differ original roles 
identification agent boundaries deferred information procedures perform services elaborated 
results concrete agents internal structure inherently modular 
simple service relationships interactions agents represented associations agent model chosen describe separate model 
modelling agent interactions currently subject intensive research modelling techniques quite complex proposed developed see example fox chu carberry cohen levesque finin grosz sidner haddadi sidner 
address issues information content linguistic intent protocols coordination negotiation 
hold strong view general suitability particular techniques modelling interactions methodology modelling framework designed allow selection models appropriate application domain 
interaction model captures control relationships agents responsibilities agent creation deletion delegation team formation 
modelling techniques relationships subject ongoing research 
agents internal viewpoint bdi paradigm provides strong notion agency agents viewed having certain mental attitudes beliefs desires intentions represent respectively informational motivational deliberative states 
bdi architecture agent completely specified events perceive actions may perform beliefs may hold goals may adopt plans give rise intentions 
captured agent class models 

belief model describes information environment internal state agent class may hold actions may perform 
possible beliefs agent properties may change time described belief set 
addition belief states particular instances belief set may defined specify agent initial mental state 

goal model describes goals agent may possibly adopt events respond 
consists goal set specifies goal event domain goal states sets ground goals specify agent initial mental state 

plan model describes plans agent may possibly employ achieve goals 
consists plan set describes properties control structure individual plans 
implicit characterization execution properties architecture determine exactly events goals give rise intentions intentions lead action revision beliefs goals 
properties described detail kinny responsible ensuring beliefs goals intentions evolve rationally 
example architecture ensures events responded timely manner beliefs maintained distinguish beliefs notion knowledge defined example literature distributed computing beliefs required provide information state environment 
distinction desires goals important philosophical perspective significant context 
consistently plan selection execution proceeds manner reflects certain notions rational commitment kinny georgeff rao georgeff methodology development models begins services provided agent associated events interactions 
define purpose determine top level goals agent able achieve 
analysis goals breakdown subgoals leads naturally identification different means plans goal achieved 
appropriateness plan manner plan carried general depend agent beliefs state environment possibly information available agent agent belief context 
may include certain beliefs represent working data 
context represented terms various data entities relationships 
analysis contexts results elaboration beliefs agent 
summarize methodology internal modelling expressed steps 

analyze means achieving goals 
goal analyze different contexts goal achieved 
contexts decompose goal activities represented subgoals actions 
analyze order conditions activities actions need performed failure dealt generate plan achieve goal 
repeat analysis subgoals 

build beliefs system 
analyze various contexts conditions control execution activities actions decompose component beliefs 
analyze input output data requirements subgoal plan sure information available beliefs outputs prior subgoals plan 
steps iterated models capture results analysis progressively elaborated revised refined 
refinement internal models feeds back external models building plans beliefs agent class clarifies information requirements services particularly respect monitoring notification 
analyzing interaction scenarios derived plans may lead redefinition services 
object oriented methodologies primary emphasis methodology roles responsibilities services goals 
key abstractions allow manage complexity 
analyze application domain terms needs achieved context 
focus point reached types behaviours lead point primary emphasis oo methodologies 
small paradigm shift quite subtle leads substantially different analysis 
goals compared behaviours plans stable application domain 
correctly identifying goals leads robust system design changes behaviours accommodated new ways achieving goal 
words goal oriented analysis results stable robust modular designs 
context sensitivity plans provides modularity compositionality plans new contexts may added changing existing plans goal 
results extensible design cope frequent changes special cases permits incremental development testing 
air traffic management system section describe informally structure air traffic management atm system developed 
system responsible assisting human flow controller determine landing sequence aircraft multiple single airport maintain safety constraints minimizing delay congestion 
methodology previous section arrived system design consisting permanent agents roles coordinator sequencer variable number aircraft agents associated particular flight exists time aircraft control flow controller 
coordinator responsible creation deletion aircraft agents distribution initial flight plans 
sequencer responsible determining landing time assignments interacting aircraft agents flow controller 
maintains dimensional model past wind conditions controlled airspace 
aircraft agent consists active components predictor monitor planner 
conceptually modelled separate roles common lifetimes close interactions aggregated single concrete agent 
generic identical aircraft agents 
aircraft agents contain performance profile component specific aircraft type 
predictor responsible number services 
primary service compute expected time arrival toa waypoints specified flight plan including final landing point 
inputs computation flight plan may modified flight aircraft performance profile determined aircraft type wind conditions obtain uses services agent 
different wind conditions may apply different stages flight primarily due altitude change 
toa computation produces estimated times performance envelopes earliest latest times aircraft arrive waypoint remaining permitted operating profile 
predictor provides information monitor planner 
monitor receives dimensional location information derived radar data compares actual predicted 
significant deviations occur analyzes reason occurrence notifies predictor planner 
deviations may due aircraft planned path flying assigned altitude holding planned air speed inaccuracies wind information 
directly detectable radar data 
distinguish behaviour multiple aircraft compared monitor requests perform global analysis 
sequencer assigns revises aircraft landing time assignment planner requested construct set plans allow aircraft land time 
plan trajectory air speed altitude profile aircraft 
acceptable plans highly constrained trajectories restricted holding points limited air speeds multiples knots general issuing instructions pilot minimized 
planner uses various different strategies algorithmic heuristic produce plans choice strategy depends stage flight 
planner sends set plans flow controller 
flow controller chosen plan adopt planner responds deviations detected monitor determining aircraft meet 
current plan modified required 
planner notifies sequencer computes new cycle repeats 
modelling technique mentioned previously oo modelling techniques object model employs classes instances uniformly levels abstraction 
dynamic functional models serve description object behaviour guides refinement object model 
agent system modelling technique employs object classes instances describe different kinds entities multi agent system different levels abstraction 
standard oo approach meaning relationships association inheritance instantiation quite distinct different kinds entities 
partitioning different types entities separate models maintain important distinctions simplify process consistency checking models 
result commitment particular bdi execution architecture employ oo dynamic models augmented notion failure directly executable specifications generate agent behaviour plans 
provides considerable advantages oo approach programming object methods guided dynamic model 
plans required total specification behaviour certain elements successively trying different means achieve goal inherent architecture 
oo object dynamic model representation techniques suitably extended constrained serves basis representations 
specifications models may supplied agent designer form diagrams text files input compilation process produces executable system 
sections detail features agent belief plan models 
full description appears kinny georgeff agent models agent model components 

agent class model set class diagrams define concrete agent classes capture inheritance aggregation relationships 

agent instance model set instance diagrams identify agent instances 
systems containing small number agent classes instances may combined single diagram 
shows simplified combined agent diagram atm application domain 
note attributes agent classes appear diagram 
agent class models agent class model directed acyclic graph containing nodes denoting concrete instantiable agent classes 
agent classes represented class icons classes distinguished presence adornment fla upper section icon 
edges graph denoting inheritance distinguished triangle vertex pointing superclass edges denoting aggregation diamond adjacent aggregate class 
associations agent classes allowed 
agent classes may attributes operations 
attributes may arbitrary user named data items restricted set predefined reserved attributes 
example class may associated belief goal plan models specified attributes beliefs goals plans 
wind data profile flight plan radar data ffl ffl predictor planner monitor ffl generic aircraft ffl wind model 
coordinator oe ae oe ae ffl oe ae ffl 
oe ae ffl oe ae coordinator atm agent class instance diagram multiple inheritance permitted 
inheritance usual denotes relationship aggregation relationship context agent model relationships special semantics 
agents inherit may refine belief goal plan models superclasses 
note example set plans refined individual plans 
aggregation denotes incorporation agent access beliefs goals plans 
example monitor agent generic aircraft 
monitor radar data agent flight plan agent 
predictor generic aircraft wind data aircraft profile flight plan agent 
monitor predictor share beliefs flight plans monitor beliefs wind data aircraft profiles predictor beliefs radar data 
attributes agent class include belief state set goal state set determine possible initial mental states 
particular elements sets may specified default initial mental state agent class initial belief state initial goal state attributes 
example belief model aircraft profile agent defines belief states corresponding different aircraft types 
concrete aircraft agent inherits specify particular instance data values appropriate belief state set initial belief state 
agent classes aggregation inheritance provide powerful mechanisms enforcing modularity beliefs goals plans agents sharing agents 
related beliefs goals plans may encapsulated separate classes may aggregation inheritance grouped form concrete agent class 
decisions agent boundaries may deferred late stage design process 
ability take agent class refine addition beliefs goals plans provides compositional framework system design encourages re 
class predicate function envelope time gen time time list time list time list integer segment waypoint boolean deviated false gen time envelope time envelope time list envelope time list envelope time list segment envelope integer envelope waypoint deviated envelope time gen time envelope time list envelope time list envelope time list envelope integer segment envelope waypoint envelope boolean deviated envelope time time time eta waypoint time envelope time time eta envelope waypoint envelope envelope envelope envelope envelope envelope envelope flight plan name flight name profile name boolean verified integer priority altitude cruise alt origin waypoint list path time flight name profile name name verified priority integer cruise alt altitude origin path waypoint list time name flight name profile name boolean verified integer priority altitude cruise alt origin waypoint list path path path atm belief classes derived predicates functions agent instance models agent instance model instance diagram defines static agent set set agents instantiated compile time dynamic agent set set agents may instantiated run time 
distinguished adornment fls upper section icon 
agent instance specified instance icon linked concrete agent class instantiation edge represented dotted vector instance class 
static instances named naming dynamic instances may deferred till instantiation 
multiplicity notation instance instantiation link may indicate dynamic class may multiply instantiated 
initial mental state agent instance may specified initial belief state initial goal state attributes values particular elements belief goal state sets agent class 
specified defaults values associated agent class 
dynamic agent instances attributes may overridden time agent created 
belief models belief model consists belief set belief states 
belief set specified set object diagrams define domain beliefs agent class 
belief state set instance diagrams define particular instance belief set 
belief sets formally belief set set typed predicates arguments terms universe predefined user defined function symbols 
predicates functions directly derived class instance definitions belief set diagrams 
classes instances defined correspond cases real entities application domain oo object model definitions define behaviours entities 
implementations entities represent agent beliefs entities 
class belief set diagram serves define type signatures attributes object functions may applied object predicates apply object including actions special role plans 
attributes define binary predicates specified usual way 
attribute undefined accessor function generated 
predicates functions defined specializations operation notation 
object class operation defined implicit argument derived function predicate 
predicates may defined binary higher order associations classes 
multiplicity associations indicated usual way 
shows associated belief classes atm domain predicates functions derived 
predicates functions associated particular object implicit argument 
case specified attributes operations anonymous unnamed class 
extend standard notation attributes operations allowing optional property list specify certain properties derived predicates functions ffl stored belief database computed ffl may change time ffl predicates open closed world negation semantics 
properties may associated classes instances associations may represented property lists 
example attribute flight property static indicating value may change attribute property optional indicating value may undefined predicate path property eval indicating computed 
plan models plan model consists set plans known plan set 
individual plans specified plan diagrams denoted form class icon 
generic plan diagram appears 
lower section known plan graph state transition diagram similar oo dynamic model 
oo approaches plans just descriptions system behaviour developed analysis 
directly executable prescriptions agent behave achieve goal respond event 
plan name plan graph plan body activity formula vi event action ff event condition event condition action vi condition action activation event activation condition activation action vi pass pass action ff fail fail action ff abort condition abort action documentation generic plan diagram elements plan graph types node start states states internal states type directed edge transitions 
start states denoted small filled circle ffl 
states may pass fail states denoted respectively small target small entry sign ff 
internal states may passive active 
passive states substructure denoted small open circle fl 
active states associated activity denoted instance icons 
activities may subgoals denoted formulae agent goal set iteration constructs including loops case graph state embedded graph called subgraph 
events conditions actions may attached transitions states 
general transitions state occur associated event occurs provided associated condition true 
transition occurs associated action performed 
conditions predicates agent belief set 
actions include defined belief set built actions 
include assert retract update agent belief state 
failure conventional oo dynamic models harel statecharts harel kahana plan graphs semantics incorporates notion failure 
failure graph occur action transition fails explicit transition fail state occurs activity active state terminates failure outgoing transition enabled 
graph body graph state activity state terminates failure 
graph plan graph plan terminates failure 
plan activated perform subgoal activity plan may result activity terminating failure depending availability alternative plans perform activity 
plan execution initial transition plan graph labelled activation event activation condition determine context plan activated 
activation event may belief event occurs agent beliefs change certain external changes sensed leading event driven activation goal event occurs result execution subgoal activity plan leading goal driven activation 
multiple plans applicable event context activated parallel activation event driven sequentially successful termination activation goal driven 
optional activation action permits action taken plan activated 
transitions active states may labelled events pass fail denote success failure activity associated state 
transitions active states labelled event may occur condition true allowing activities interrupted 
special case abort transition plan 
plan activated time execution body abort condition true terminates failure 
final transitions plan graph may labelled actions taken success failure aborting plan 
comparison number agent oriented systems bdi architectures developed including prs georgeff lansky cosy burmeister grate jennings archon jennings interrap muller dmars kinny likewise agent oriented languages agent shoham shoham placa thomas proposed languages programming agents 
little analyze design agent oriented systems 
brazier brazier discuss formal specification framework multi agent system design called desire design specification interacting reasoning components 
desire emphasizes hierarchical task decomposition 
captures task structure sequences subtasks information exchange tasks knowledge decomposition role delegation 
agent model desire provides compositional framework modelling agents 
plan model discussed allows greater expressive power describing task structure 
addition methodology emphasizes importance goals services opposed tasks 
object oriented methodology proposed wirfs brock wirfs brock views subsystem set object classes collaborate fulfill set responsibilities 
notion responsibility conveys sense purpose objects subsystem characterized services provided subsystem 
notion role similar notion subsystem 
crucial difference object oriented paradigm programming construct supports realization subsystem agent oriented paradigm agents realize particular instances roles take separate identity existence 
object oriented community notion agents capture user requirements 
dubois dubois employ temporal logic specify behaviours agents called agent level modelling interactions called society level modelling 
burkhard burkhard considers number design choices agent oriented languages consequences programming open systems 
methodology agent modelling formalism provide way achieving desired features class languages 
summary primary contribution provide elements rigorous framework analyzing building complex distributed multi agent systems 
methodology modelling technique describe external internal perspective multi agent systems bdi architecture illustrated approach implemented air traffic management system 
agent oriented methodology emphasis roles responsibilities services goals permits fine grained analysis allows agent boundaries chosen flexibly results system designs robust modular extensible 
agent system modelling technique builds adapts existing understood object oriented models 
fox mihai mark fox 
cool language describing coordination multi agent systems 
proceedings international conference multi agent systems icmas san francisco ca 
booch grady booch 
object oriented analysis design applications 
benjamin cummings redwood city ca nd edition 
brazier brazier keplicz jennings treur 
formal specification multi agent systems real world case 
proceedings international conference multi agent systems icmas san francisco ca 
burkhard hans dieter burkhard 
agent oriented programming open systems 
intelligent agents proceedings ecai workshop agent theories architectures languages 
lnai 
springer verlag 
burmeister burmeister 
cooperative problem solving guided intentions perception 
werner demazeau editors decentralized amsterdam 
north holland 
chu carberry jennifer chu sandra carberry 
generating information sharing subdialogues expert user consultation 
proceedings fourteenth international joint conference artificial intelligence ijcai pages montreal 
cohen levesque philip cohen hector levesque 
communicative actions artificial agents 
proceedings international conference multi agent systems icmas san francisco ca 
dubois dubois du bois petit 
oo requirements analysis agent perspective 
ecoop object oriented programming 
lecture notes computer science lncs pages 
springer verlag 
finin tim finin specification kqml agent communication language 
technical report darpa knowledge sharing initiative external working group 
georgeff lansky michael georgeff amy lansky 
procedural knowledge 
proceedings ieee special issue knowledge representation volume 
grosz sidner barbara grosz candace sidner 
plans discourse 
cohen morgan pollack editors intentions communication 
mit press cambridge ma 
haddadi haddadi 
reasoning interactions agent systems pragmatic theory 
phd thesis university manchester institute science technology united kingdom 
harel kahana harel kahana 
statecharts overlapping 
acm transactions software engineering methodology 
jennings jennings 
developing industrial multi agent systems 
proceedings international conference multi agent systems icmas san francisco ca 
jennings jennings 
specification implementation belief desire architecture collaborative problem solving 
journal intelligent cooperative information systems 
kinny georgeff david kinny michael georgeff 
commitment effectiveness situated agents 
proceedings twelfth international joint conference artificial intelligence ijcai pages sydney 
kinny georgeff david kinny michael georgeff 
modelling techniques bdi agent systems 
technical report australian artificial intelligence institute melbourne australia 
kinny david kinny michael georgeff anand rao 
design methodology bdi agent systems 
technical report australian artificial intelligence institute melbourne australia 
kinny david kinny 
distributed multi agent reasoning system architecture language specification 
australian artificial intelligence institute melbourne australia 
ljungberg magnus ljungberg 
oasis air traffic management system 
technical report australian artificial intelligence institute melbourne australia 
muller muller thiel 
modelling reactive behaviour vertically layered agent architectures 
intelligent agents proceedings ecai workshop agent theories architectures languages 
lnai 
springer verlag 
pan tenenbaum pan tenenbaum 
intelligent agent framework enterprise integration 
ieee transactions systems man cybernetics 
rao georgeff anand rao michael georgeff 
modeling rational agents bdi architecture 
proceedings second international conference principles knowledge representation reasoning kr pages cambridge ma 
rao georgeff anand rao michael georgeff 
architecture rational agents 
proceedings third international conference principles knowledge representation reasoning kr pages boston ma 
rumbaugh james rumbaugh michael blaha william premerlani frederick eddy william lorensen 
object oriented modeling design 
prentice hall englewood nj 
shoham yoav shoham 
agent simple agent language interpreter 
proceedings ninth national conference artificial intelligence aaai pages san jose ca 
shoham yoav shoham 
agent oriented programming 
artificial intelligence 
sidner candace sidner 
artificial discourse language collaborative negotiation 
proceedings twelfth national conference artificial intelligence aaai pages seattle wa 
thomas thomas 
placa agent programming language 
intelligent agents proceedings ecai workshop agent theories architectures languages 
lnai 
springer verlag 
tidhar gil tidhar mario clinton 
modelling teams team tactics air mission modelling 
technical report australian artificial intelligence institute melbourne australia 
wirfs brock wirfs brock wilkerson wiener 
designing objectoriented software 
prentice hall englewood cliffs new jersey 

