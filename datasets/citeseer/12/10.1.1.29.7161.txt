ub tree performance multidimensional range queries rudolf bayer volker abcde tum tum info fi alle auch fl institut ur informatik der universit unchen ub tree performance multidimensional range queries rudolf bayer volker bayer informatik tu muenchen de tu muenchen de tu 

germany germany investigate usability performance ub tree universal tree multidimensional data arise relational databases particular data mining applications 
ub tree balanced guaranteed performance characteristics trees requires linear space storage logarithmic time basic operations insertion retrieval deletion 
efficiently support oltp 
addition ub tree preserves clustering objects respect cartesian distance 
shows main strengths multidimensional data 
high potential parallel processing 
single ub tree replace large number secondary indexes join indexes including foreign column join indexes 
updates means managed secondary indexes 
reduces runtime storage requirements substantially 
retrieval ub tree multiplicative complexity respect relative size ranges range queries resulting dramatic performance improvement multiple secondary indexes additive range query complexity 
furthermore tetris algorithm ub tree enables reading data arbitrary sort order necessity external sorting 
data need read perform operations relational algebra ordering grouping aggregation projection joining 
ub tree support olap efficiently 
useful geometric databases data warehousing data mining applications databases general multiple secondary indexes relation indexes join relations widespread replaced single ub tree index 
difficult index selection problem largely disappears ub tree offers potential integrate olap oltp processing environment 
commercial relational dbms variety indexing techniques today classical primary key attributes bm secondary trees bitmaps oq star indexes red indexes foreign columns pre computed joins 
inf date survey methods 
investigate usability performance ub tree bay bay complex applications datamining olap requiring complex multidimensional range queries relational data 
data consider tuple point multidimensional space consider point objects 
see bay treating extended objects 
combination multidimensional range queries advanced operations joins aggregations presently investigated results reported forthcoming 
created large databases gb compare performance ub tree indexes prevail commercial databases clustered indexes multiple attribute primary keys compound index secondary indexes require non clustered access data 
discusses extremely difficult index selection carried research development project financed sap nec 
additional information project url informatik tu muenchen de 
problem exponentially simpler ub trees classical indexes 
ub trees facilitate range max range sum queries described 
order obtain objective comparable results implemented ub trees middleware top sql interface commercial dbms compared ub tree compound secondary indexes implemented kernel underlying dbms 
presently porting oracle db 
measurements oracle show performance results qualitatively reported 
middleware approach loose performance ub tree estimate roughly factor 
implementation ub tree uses ordering combination underlying tree prefix tree 
integrates structure tree carefully relaxed ordering space filling curve tiling data space level tile technically called region corresponds precisely leaf ub tree 
concentrating region concept simplifies discovery sorted reading ub trees bay tetris method mb joining aggregation grouping explanation understanding algorithms considerably 
splitting merging leaves corresponds exactly recursive splitting merging regions 
addresses tuples need computed precision suffices determine proper region tuple 
regions storing data directly construct minimal cover query box guide search range queries 
guarantees retrieve disk exactly minimal number pages 
number multi dimensional data structures proposed past grid files nhs trees gut ordering combination arbitrary search methods om hb trees ls see gg survey 
goal compare theoretical properties ub tree data structures investigate usability ub tree combination commercial database systems application olap oltp 
performance ub tree encouraging cases far superior compound secondary indexes 
particular single ub tree replace secondary indexes 
reduces number storage requirements indexes substantially simplifies management 
concept ub tree addresses areas regions iteratively define area special subspace dimensional cube follows split cube respect dimension middle resulting subcubes numbered arbitrary fixed order implementation area level consists closed subcubes 
determines uniquely 
call address write area 
empty area address enlarge area iteratively add area address subcube number 
address enlarged area lexicographically larger address area 
may enlarge adding area brother subcube left part shows areas area area area area dimensional universe 
shaded subcubes dimensional universe belong corresponding area 
area area area area regions point data areas regions suppress trailing zeros addresses denote addresses 
call th step address 
call length address note volume subcube decreases exponentially step number 
obtain fine partitioning multidimensional space relatively short addresses 
lemma lexicographic order addresses denoted set containment areas space denoted isomorphic area area definition region difference areas define region area area means set difference 
note regions disjoint partition tile universe 
areas create regions 
region shaded different gray 
definition page fixed size byte container store objects object identifiers region successive areas 
write page page corresponding region 
count denote number objects located 
definition tuple pixel smallest possible subcube limit resolution resolution may chosen fine desired 
address tuple identical address area defined including tuple smallest subcube contained area 
terms attribute tuple dimension relation column synonymously 
lemma map cartesian coordinates dimensional tuple address implicitly defined addressing scheme 
notations maps alpha cart maps inverses get cart alpha alpha cart set areas order addresses 
region difference successive areas ordered set implies order regions corresponding pages 
assume universe values 
simplicity assume values dimension numbered 
arbitrarily shaped spaces simply considered subset suitable cube shaped universe 
possible drop assumption tailor ub tree universe 
approach described mb 
addresses linearly ordered treated keys variant tree 
new point objects lie unique region 
identifiers new objects stored inserted page region 
definition ub tree variant tree keys addresses regions ordered leaf pages hold objects regions object identifiers 
regions build ub tree point data displayed lower right corner 
regions differ size volume region stores number points storage utilization guarantees ub trees 
upper left corner lower right quarter universe contain points size volume region covering lower right quarter universe times larger 
performance comparisons need notion compound indexes multiple secondary indexes compound index called concatenated index literature primary tree index built index dimensions 
index key compound index concatenation attributes order 
multiple secondary indexes called inverted file literature mean secondary tree bitmap rid representation leaves built dimension 
index key secondary index dimension th attribute relation 
efficient address calculation bit interleaving attribute dimensional tuple consists values considered sequence bits bit interleaving see om creates dimensional tuple dimensional tuple re arranging bits tuple way interleave interleave result interleave considered binary number dimensional tuple incrementing number yields ub address tuple 
alpha interleave alpha alpha interleave inverse function interleave computed efficient way 
call function inv interleave define cart inv interleave slight modification interleave operation necessary support universe domain dimension consist number bits case number bits identical step address 
denotes number dimensions domain expressed bits step address consists bits 
values identical point address multidimensional universe 
bit interleaving non uniformly distributed data possible slight modification algorithm 
details see mb 
algorithm bit interleaving cpu complexity denotes length attribute bits 
holds inv interleave 
switching tuple cartesian representation address representation performed efficiently 
current non optimized implementation performs switching dimensional integer tuple sun ultra sparc workstation mhz region addresses calculated cpu time 
update operations insert procedure point inserted universe specified cartesian coordinates address alpha 
belongs unique region satisfying note computed precision sufficient determine proper region 
inserted leaf page corresponding region point query 
pages store maximum number ids objects pages may overflow split trees 
split introducing new area address region partitioned 
objects page distributed page page accordingly 
constructed increasing area follows add area subcubes increasing order number objects subcube process contains objects recursively subdivided condition met 
parameter get shorter split addresses favorable ub tree performance especially range query algorithm 
measurements indicate effective 
alpha find ub tree retrieve page insert page count choose count split page page page algorithm insertion algorithm point lemma cube resolution pix pixels dimension addresses length log pix steps 
universe pix pixels dimensions number bits necessary store address example square bounding map side km addresses length bits yield resolution meters pixel 
performance measurements indicate insert performance ub tree similar compound tree 
additional overhead ub tree address calculation negligible 
dimensional integer tuple uses total insertion time 
ub tree insert times faster multiple trees denotes height ub tree 
factor formula due fact database ub tree average level higher secondary indexes 
deletion merging underflow methods ub trees similar trees bm 
details see bay 
queries point queries point queries called exact match queries 
specified cartesian coordinates point olap ordinates usually called dimensions dimension attributes 
usually additional information interest temperature height time monetary value 
additional information called measures olap may stored additional attributes point simply added index structure increasing dimensionality space allowing queries additional attributes 
problem usually solved constructing new secondary index ub trees handled increasing dimensionality searchable object space 
find compute address alpha sufficient precision find unique region property fetch page achieved searching ub tree address search key 
page contain point additional information identifier id log time number objects universe ub trees balanced searched exactly variant tree underlying data structure ub tree 
point query performance ub tree similar compound tree index 
additional address calculation overhead negligible 
multiple secondary indexes finding point may expensive indexes need queried find id non unique attributes 
range query algorithm range queries fundamental problem database systems 
range query specified interval dimension 
specification dimension formally means interval 
query cartesian product intervals dimensions called query box lower upper bounds ql qh 
answer set point objects call set objects result set answer range query regions properly intersect query box fetched database disk 
initially range query algorithm calculates retrieves region overlapped query box 
intersecting region calculated retrieved 
repeated minimal cover query box constructed region contains point query box retrieved 
alpha ql alpha qh repeat find ub tree output points ql qh address point intersecting algorithm range query algorithm query box ql qh algorithm retrieving intersecting region merely requires tree search cpu operations 
disk accesses data pages need performed retrieve data query box overlapped regions 
bay gives algorithm exponential number dimensions calculating address intersecting region 
developed linear version algorithm solely ub addresses require transformation cartesian ordinates 
algorithm calculation intersecting region takes dimensions dimensions sun ultra sparc mhz intersecting regions calculated second 
number regions intersecting query box related selectivity number objects properly intersecting compared number objects universe 
covers highly populated part universe contains large number objects regions needed store objects 
hand covers sparsely populated part regions needed store objects number regions fetched disk closely related number objects cases query box degenerates hyperplane universe number regions fetch database sufficiently large databases proportional volume proportional size answer range query 
shows retrieved regions query boxes ub tree 
data distributed non uniformly 
query box result set points overlaps regions 
query box volume query box covers sparsely populated part universe points regions retrieved range query 
dense sparse query boxes sparse highly populated parts universe answering range query database organized ub tree requires time proportional size answer query 
surprising result atypical query processing databases processing time related complexity query size database size answer 
performance ub tree range queries currently widely technique commercial relational dbms handle multidimensional data secondary index dimension 
compared ub tree advantages single index structure managed updated insertion deletion objects contrast total indexes 
opposed additive behavior multiple secondary indexes ub tree multiplicative behavior assume data universe contains objects values lie query interval respect dimension total data fetched secondary index dimension adds fetching disk data object identifiers computing intersections sets 
ub tree amount data fetched proportional size query box 
precise analysis number pages retrieved range query mb 
performance multiple secondary indexes deteriorates number dimensions performance ub tree improves number dimensions 
alternatively single compound tree index may answering range query 
compound tree restriction dimension order reduce number pages need retrieved 
data retrieved 
compound index primary index data retrieved reading large clusters 
may result advantage random access multiple secondary indexes result set large 
contrast ub trees multiple secondary indexes compound indexes show symmetrical behavior respect relative size restricted dimensions dimension extremely favored 
multiple secondary indexes compound primary indexes differ ideal index retrieve pages contributing result set overhead 
ub tree gets close ideal index retrieves pages regions intersecting query box 
compound primary tree multiple secondary trees ub tree ideal case theoretical range query behavior striped query box illustrated retrieved part universe shaded 
show performance measurements multidimensional range queries dimensional test database consisting tuples pages regions 
tests performed commercial dbms mhz sun ultra sparc hard disk average positioning time ms 
order get comparable results caching eliminated 
caching allowed queries ub tree gain performance advantage 
restricted dimension ub tree compound tree compound tree scan linearly growing query box volume restriction dimensions illustrates measurement series query box selectivity dimensions 
sixth dimension varied 
causes linearly growing result set 
compound primary tree built concatenation attributes order varying show different performance results 
results obtained varied identical compound tree varying retrieves database compound tree varying constantly retrieves database corresponding restriction consumes time relation scan 
slight linear time increase compound index case stems result size increases growing necessary result set processing takes cpu time effect seen linear increase scan time 
ub tree takes advantage restriction dimension multidimensional clustering index data 
increases linearly smaller scale compound tree 
multiple trees take advantage clustering need perform expensive intersection operation 
tuples result set fetched randomly disk 
size database pages retrieved remain cache 
disk pages accessed times results time behavior times higher relation scan 
reason multiple secondary indexes included 
looking figures multiple secondary trees little multi dimensional range queries 
table gives exact times restriction attribute selectivity attributes restricted 
restriction ub tree compound tree compound tree multiple trees relation scan table linearly growing query box volume restriction dimensions shows measurement series selectivity query box dimension 
selectivity varied dimension 
result set query grows polynomially th power 
indexes show expected polynomial behavior 
polynomial behavior caused increasing times amplified polynomially growing result set size tuples result set need transferred application program 
reason polynomial behavior relation scan 
multiple secondary indexes grow high rate resulting worst performance indexes compared 
worse relation scan restriction dimension 
compound index increases smaller rate 
worse ub tree 
uses restriction dimension ub tree able restrictions dimension 
compound index ub tree point relation scan preferable indexes 
table gives exact numbers restriction attributes 
restriction dimension ub tree compound tree scan mu le trees polynomially growing query box volume restriction dimension compound tree multiple trees relation scan table polynomially growing query box volume measurements indicate range query performance ub trees symmetrical compound tree 
shows better absolute performance multiple trees sufficient number attributes specified 
dimensional test database true dimensions 
ub tree range query performance average orders magnitude faster compound trees multiple secondary trees 
measured increase speed thousands compared secondary indexes depending restriction compared compound index 
performing index scan relation results performance similar scan clustered primary compound tree 
study shows relative performance ub tree increases growing database sizes results scalability 
illustrated regions retrieved range query shaded ub tree tuples regions tuples regions 
shows query box approximated closely region partitioning database increases 
tuples tuples range queries growing database sizes impacts relational algebra tetris algorithm tables organized ub tree read sort order disk accesses number pages table minimal number regions covering query box bay 
possible modification range query algorithm caching technique called tetris algorithm mb 
algorithm performs sweep query box ub tree respect lexicographic order specified sorting dimensions spirit known sweep line algorithms ps 
works similar range query algorithm 
difference calculation intersecting region return region specified sort order initially algorithm calculates region overlapped query box retrieves caches main memory 
continues read cache regions respect sort order complete possible slice query box read 
cached tuples slice sorted main memory returned sort order caller removed cache 
algorithm proceeds reading slice regions intersect query box retrieved output 
shows vertical slices sorted reading horizontal dimension 
simplicity query box assumed universe 
cached regions shaded slices emphasized white borders 
slices ub tree sorted reading tetris algorithm disk accesses data pages need performed sort query box overlapped regions factorial sort orders definable attributes 
page needs accessed order produce sorted output combination dimensions 
generally speaking tetris algorithm allows joining grouping aggregation projection operation sorted reading relation parts involved disk accesses 
additional selection may reduce necessary disk accesses restricted attributes part ub tree 
advantage tetris algorithm needs disk space perform operation 
main memory cache required general quite small compared main memory cache required performance standard merge sort algorithm 
details see bay mb 
currently doing performance measurements tetris algorithm reported forthcoming 
shown usability ub tree insertion point queries range queries 
behavior ub tree primary index superior classical indexing methods dbms olap oltp applications 
additional secondary trees useful speed hyperplane queries queries attribute restricted 
data warehouse ub tree may replace traditional star indexes inf red shows desired symmetrical behavior multidimensional range queries 
response time ub tree multidimensional range queries depend order restricted dimensions number dimensions restricted 
organizing foreign keys fact table star schema factorial compound indexes bitmap indexes single ub tree algorithm may efficiently perform star joins tetris algorithm 
currently doing performance measurements oracle porting db 
investigate data modeling presence multidimensional indexes order find ub trees support database schema certain query profile 
implementing tetris algorithm efficiently support operations relational algebra selection sorting grouping aggregation 
implementation investigate practical data warehousing scenarios project partners 
includes development cost query optimization technique developed cost model ub trees mb investigation variable ub trees improve support attributes non uniform data distributions mb 
investigate application technique high dimensional data spaces occur instance field image processing images described list features may considered point high dimensional space 
bay bayer universal tree multidimensional indexing 
technical report tum institut fr informatik tu bay bayer universal tree multidimensional indexing general concepts 
worldwide computing applications tsukuba japan lecture notes computer science springer verlag march 
bay bayer ub trees ub cache new paradigm database systems 
technical report tum institut fr informatik tu bm bayer mccreight organization maintainance large ordered indexes 
acta informatica pp 
gut guttman dynamic index structure spatial searching 
acm sigmod intl 
conference management data pp 
gg gaede multidimensional access methods humboldt universitt berlin www hu berlin de gaede survey rev ps gupta harinarayan rajaraman ullman index selection olap 
intl 
conf 
data engineering ho agrawal megiddo srikant range queries olap data cubes 
acm sigmod intl 
conf 
management data tucson arizona pp 
inf informix software new generation decision support indexing data warehouses www informix com informix pdf ls lomet salzberg hb tree multiattribute indexing method guaranteed performance 
acm tods pp 
mb bayer cost model multidimensional queries relational database systems internal report mb bayer variable ub trees efficient indexing arbitrarily distributed multidimensional data internal report mb bayer tetris algorithm sorted reading ub trees grundlagen von th gi workshop konstanz nhs nievergelt hinterberger sevcik grid file 
acm tods march pp 
oq quass improved query performance variant indexes acm sigmod intl 
conf 
management data tucson arizona pp 
om orenstein class data structures associate searching 
proc 
acm sigmod int 
conf 
management data portland oregon pp 
ps preparata shamos computational geometry 
springer verlag new york red systems star schema processing complex queries 
www com whitepapers pdf 
