st european dependable computing conference berlin oct springer verlag lncs pp designing secure reliable applications fragmentation redundancy scattering object oriented approach jean charles fabre yves brian randell laas cnrs inria avenue du colonel roche toulouse cedex france department computing science university newcastle tyne newcastle tyne ne ru united kingdom 
security reliability issues distributed systems investigated years laas technique called fragmentation redundancy scattering frs 
aim frs tolerate accidental intentional faults core idea consists fragmenting confidential information order produce insignificant fragments scattering fragments obtained redundant fashion distributed system large network workstations servers 
workstations principle just user workstation needs regarded trusted user viewpoint workstations servers probability control untrusted devices 
describes object oriented approach frs development laas newcastle 
approach greatly eases task application programmers seek ensure reliable secure processing storage confidential information 
approach involves fragmenting confidential object composition structure terms hierarchy sub objects part relation object model course subsidiary operations methods 
fragmentation process continues resulting sub objects far possible individually non confidential 
replicas objects scattered untrusted stations 
means processing object methods storing object state information carried safely untrusted equipment 
mechanisms fault tolerance distributed systems typically designed cope just limited class faults usually just accidental physical faults occur system operation designs take account restricted subclass crash failures 
classes faults may impede correct operation distributed systems nowadays numerous class certainly intentional human interaction faults intrusions 
partially supported esprit basic research action predictably dependable computing systems deliberate attempts security policy assigned system 
originate external intruders registered users trying exceed privileges privileged users administrators operators security officers abuse privileges perform malicious actions 
intrusions accidental faults may effects improper modification destruction sensitive information disclosure confidential information 
user perceive effects system failure service delivered system user longer complies system specifications 
distributed systems composed users individual workstations shared servers users generally trust workstation providing control completely individual user usually distrusts servers workstations know directly servers workstations failing penetrated intruder 
hand server administrators users distrust workstations reasons 
trustworthiness distributed system improved faulttolerant failure server workstation perceived workstations irrespective cause failure accidental physical fault intrusion 
take intrusions account classical fault tolerance techniques data processing replication help tolerate accidental faults provide means preserving confidentiality 
intrusions taken account confidentiality sensitive information maintained simple replication decrease system trustworthiness copies confidential information targets intrusion 
motivation technique developed laas tolerating faults preserving confidentiality fragmentation redundancy scattering frs technique 
fragmentation consists breaking sensitive information fragments isolated fragment contains significant information 
fragments scattered different untrusted sites distributed system intrusion part distributed system gives access unrelated fragments 
redundancy added fragments replication error correcting code order tolerate accidental deliberate destruction alteration fragments 
complete information item re assembled trusted sites distributed system 
frs technique applied storage persistent files security management described earlier papers particular 
aim show frs particular object oriented frs design implementation application system service achieve just reliable secure storage secure processing confidential information protection eavesdropping interference 
secure processing confidential information investigated conventional approaches scheme system specifications describe system performance reliability requirements safety security requirements hazardous states catastrophe may ensue sensitive information disclosed modified unauthorized users 
processing data described 
approaches need specific ciphers privacy homomorphisms limited relatively inefficient simple attacks manage get clear information 
approach advocated quite different relies fact confidential information decomposed collection non confidential items processing done clear text 
original attempt extend frs cover information processing required significant manual redesign application programs execution protected 
discuss requirements application program redesign avoided frs technique object oriented approach system design 
addition develop scheme confidentiality constraints expressed terms order logic formulae defining confidentiality requirements imposed application provide brief description experiment frs information processing 
distributed system architecture assumptions distributed system architecture cf 
fig 
consider composed set trusted workstations exactly user workstations trusted respective users set untrusted machines basis providing set fault tolerant secure servers 
user trusted workstation responsible security workstation necessary physical security precautions ensuring sensitive actions logging required authentication observed 
session usage trusted workstation workstation resources sharable remote access workstation disallowed 
confidential information stored workstation usage session 
subsequent security precautions concerning access workstation deemed adequate information left workstation completion session 
consider network related security reliability issues merely analogous techniques frs involving spread spectrum communications exist course numerous conventional ones 
assume provision types services implemented untrusted sites provision storage authentication authorization 
conventional frs provisions successfully demonstrated see 
authentication authorization realized security server implemented set security sites different operators 
long majority security sites free faults intrusions including intrusions security administrators user authentication access control reliably achieved sensitive information disclosed 
security server implement various security policies including multi level security mls policies 
user sites storage sites security sites processing sites networks 
key shadow file fragment application fragment application windows trusted site fig 
distributed system architecture regard services fault assumptions encompass accidental faults physical faults affect untrusted sites type intrusion affect untrusted sites networks 
admit possibility intrusions untrusted sites assume intrusions particularly easy carry effort intruder provide intrude separately sites proportional number sites involved 
clearly mechanisms described intended ensure successful intrusions small number untrusted sites provide means accessing modifying data processing activities responsibility untrusted site 
frs data processing principles aim original frs technique provide general framework reliable processing confidential information assuming matters confidentiality information processed data confidentiality operations performed program 
extended provide confidentiality information processing 
application program system service frs results transformation software fragmented form basic rules 
application including code data divided application fragments way cooperation application fragments satisfies specifications initial complete application 
application fragment shall provide confidential information potential intruder site application fragment located 
application fragments shall scattered sites distributed architecture separation way groups fragments stored site provide significant information intruder 
appropriate redundancy introduced fragmentation scattering 
far possible intruder shall able identify fragments belonging application process object application fragments shall identified user site 
major problem original frs technique deal fragment code particular deal global variables problem solution frequently involved partial redesign application programs involved 
problem provides motivation object oriented techniques described 
object view frs object model specific particular object oriented programming language simply assume objects derived classes encapsulate data structures manipulated set functions methods objects decomposed sub objects identified 
inheritance discussed 
inheritance programming frs applications conjunction properties object oriented programming languages reflection see section 
main interest object model connection frs fragmentation terms objects naturally encompasses program code data 
normally applied existing application program requiring designer reprogram application done identify object classes basis data code fragmented 
identification involves deciding level object structuring case individual objects examined isolation contain confidential information 
programmer simply provide effect additional declarations invent new fragmented algorithms original method extending frs information processing required 
design approach proposed relies fact fragmentation application design time semantics information processed 
designer application find appropriate design structuring obtain non confidential objects define application fragments 
object model offers convenient design framework reasons object notion encapsulates information objects decomposed elementary objects object readily mapped autonomous runtime unit appropriate fault tolerant distributed system 
approach different ways various applications 
example transaction processing applications large amounts confidential information held persistent objects case amount processing may relatively limited 
information operations performed organised structured way individual actions transaction remotely executed non confidential objects 
applications numerical computations processing intensive objects mainly temporary little persistent state input parameters activation 
case links objects belonging application kept secured trusted user workstation application started 
object oriented approach frs attractive implementing various types applications hold process confidential information 
particular characteristic approach provides application designers single unified design scheme making applications tolerant accidental intentional faults 
notion confidential information principles notion confidential information relates interpretation intruder semantics operational context 
information semantics may confidential depending value instance string characters sufficiently meaningful isolation easily interpreted confidential information independently usage program 
case numerical value interpreted confidential information knowledge internal representation usage application context 
example bit string corresponding salary variable holds value data segment program mapped real representation machine interpreted real value 
sufficient confidential information item fact combination sets items bring information potential intruder 
intruder get meaningful salary information able associate information items person name salary amount salary period currency 
simple example shows structure confidential information item fact set data items 
notion confidential information defined set public items may appropriate applications management unstructured objects strings keys files semantics unknown 
instance file storage system described frs applied unstructured files unix files techniques scheme regular fragmentation produce fragments 
techniques threshold schemes deal non structured objects number items higher threshold gathered reconstruct secret 
technique mainly small information items cryptographic keys 
similar approach coarse granularity 
cases fragmentation provides redundancy data 
coexistence classes fragmentation techniques illustrated example fact current major experiment suppose meeting group people confidential information item 
information meeting composed list participants topic venue time date items 
participant defined personal identity may considered public information assumption items venue 
information meeting confidential topic discussed identities participants attending 
keeping meeting information secret may involve topic lack structural semantics character string scattering list participants appropriate participants need kept meeting object 
operation participant list performed meeting object site operations participant information performed sites network participant objects located 
confidentiality constraints fragmentation principle relies notion confidentiality constraints define confidential information application 
confidentiality constraints expressed informally part non functional specifications application 
non functional specifications interpreted application designer define appropriate structuring confidential information item broken non confidential items 
object design information structured terms collection subobjects representing information items 
interpretation informal confidentiality constraints formally described terms order logic formulae 
instance going back simple example section confidential meeting information structured elementary objects topic time date venue person list formula meeting topic time date venue person list indicates meeting decomposed aforementioned items second conjunction items reveals sensitive information 
example meeting topic time date venue person list combination person list topic discussed location date threshold schemes consist generating secret information shadows number shadows threshold necessary reconstruct secret information shadows reveal confidential information 
number shadows equal order tolerate faults intrusions 
meeting confidential 
specifications indicate list attendees confidential information item meeting person list person person indicates group persons person list confidential information 
clauses specify fact left hand side corresponding object confidential right hand side logical formula composed sub objects may reveal confidential information intruder 
sub object formula may confidential defined clause 
special clause needed specify set unstructured objects confidential unstructured confidential objects important mention formal definition confidentiality constraints means set clauses leads identify objects italic steps design process 
object oriented frs object model described section fragmentation design process operates strong structuring information terms hierarchy composition objects 
object confidential private information structured set elementary objects 
fragmentation appropriate structuring originally defined designer 
frs design approach involves main tasks definition basic objects classes contain confidential information confidential information object composition hierarchy fragmentation ii creation autonomous instances basic objects large set untrusted sites distributed computing system scattering 
main idea object oriented frs recursive design process operates hierarchical representation application yields application fragments recursion ends soon branch design tree object process confidential information encountered decomposition exists applied case data object confidentiality protected 
corresponding runtime fragments scattered distributed architecture communicate messages 
fragmentation introduce adequate redundancy fragments replicated scattered 
fragmentation fragmentation design process involve design iterations starting version design application object composition tree 
iteration designer performs analysis list confidentiality constraints application order identify objects containing confidential information 
new design step started confidential object decomposed defined terms elementary objects 
new design step produces refined version object composition tree 
designer goes back new analysis confidentiality constraints solved previous design see fig 

current design tree object confidential decompose object fragmentation apply technique leave trusted site allocation fig 
fragmentation principle iterative design process analysis confidentiality constraints continues non confidential objects obtained confidential leaf reached terminates confidentiality constraints solve list 
remain confidential objects structured elementary objects due granularity functionality techniques 
redundancy approaches adding redundancy fragments 
various error processing techniques may runtime units corresponding design objects created early stage design application term objects 
underlying runtime system may offer set transparent error processing protocols selected configuration time install runtime units redundant fashion delta 
relies detection mechanisms voting protocols implemented underlying multicast communication system 
checkpointing strategies passive replicas synchronisation strategies active replicas available 
approach consists defining error processing technique early stage design pre defined system classes responsible implementation solution 
idea notion inheritance object model derive fault tolerant implementation object 
solution consists fact making inheritable non functional characteristics appropriate system classes programming conventions 
type solution particular project example object declared recoverable 
declaration means object class created redundant fashion provided declarations object designer virtual function definition function overloading 
system classes provide inheritance large number error processing protocols development system classes take advantage basic system services error detection recovery atomic broadcast various voting protocols stable memory management 
object orientation connection frs assumed conventional object oriented inheritance similarly declare secured objects 
significant problems approach think reflection promising approach see section 
scattering scattering phase consists allocating object fragments replicas computing sites object instance created autonomous computing unit mapped basic runtime unit underlying operating system 
aspect discussed section 
current fragment set object fragment confidential allocate trusted site valid untrusted site allocated allocate untrusted site creation confidential group objects site valid site fig 
scattering principle scattering phase summarised fig 

main problem scattering phase avoid creating sets objects site correspond confidential information item 
confidentiality constraints fragments taken account identify groups fragments 
simple rule object fragments having parent object fragment located different sites 
rule sufficient scattering may group fragments strictly brothers hierarchical design may reveal confidential information 
careful analysis fragment groups done especially relatively sites available receive scattered fragments 
inheritance reflection object oriented programming language viewpoint frs leads scattering sub objects object 
means object created sub objects may need created remotely 
subsequently conventional scheme invoking methods remote sub objects replaced scheme remote method invocation 
provision means redefining normally basic internal operations object creation method invocation language runtime system common 
object oriented languages property provide access operations ability modify language property known reflection 
clearly possible undesirable application programmer program redefinition scheme explicitly definitions class objects confidentiality protected 
needed means indicating class scheme 
words considers class object belonging meta class requirement means providing definition meta class methods object creation method invocation class objects 
reflective facility fact great promise just object oriented frs implementing various non functional characteristics object oriented languages 
type facility provided common lisp implemented variant called method invocation access local variables captured re defined meta level 
application programmer readily redefine access behaviour meta level 
inheritance pre defined meta classes allows definition new meta classes object class application 
scheme investigated means providing frs facilities objective define meta classes confidential class application hiding object creation problems including replication scattering sub objects remote access problems including computation access control mechanisms application programmer 
summary complete design process summarised tasks represented fig 

shows major steps design implementation frs application 
iterations design application account confidentiality constraints information manipulated lead definition non confidential objects 
objects application fragments 
runtime abstractions provided runtime system application fragments mapped autonomous runtime units 
adequate error processing protocols selected object object basis leading set autonomous runtime object replicas 
selection takes account functionality object accidental fault assumptions regarding available sites distributed configuration 
phase design process consists scattering replicas 
scattering phase take care avoid gathering groups objects perceived intruder constituting confidential information item 
confidentiality constraints object replicas taken account allocation sites runtime units 
set replicas fact divided subsets object replicas contain confidential information executed untrusted stations ii set confidential objects executed trusted sites distributed system 
fragmentation redundancy scattering object oriented design composition functional specifications scattered autonomous runtime object replicas confidential objects analysis non functional specifications confidentiality constraints fragmented cipher classes replicated runtime objects design iterations basic frs techniques error processing protocols interface distributed runtime system system configuration trusted untrusted sites fig 
frs application design steps implementation issues distributed runtime environment degree difficulty involved implementing object application largely depends abstractions provided distributed runtime system 
object fragments mapped autonomous runtime units 
system current major experiment delta system provide notion object provides notion server far object notion previously defined 
corresponds private address space set operations defined interfaces 
object mapping done various ways object instance corresponds runtime server ii server responsible instance creation class 
second approaches 
delta distributed runtime layer provides server mapping top unix local executive transparent multiple remote procedure call mechanism remote method invocation object manager replicas 
set servers provides object management layer top distributed runtime layer 
implementation frs object runtime layer may involve instance managers servers class 
extreme site network may provide instance manager class application 
delta application support environment scattering algorithm may allocate object instance site 
objects created dynamically invoking appropriate create operation corresponding instance manager 
delta distributed runtime system layer includes set error processing protocols install replicated servers 
user authentication authorization indicated section user authentication authorization achieved distributed security server composed security sites 
user authenticated majority security sites agree authenticate 
authenticated user request access services 
request evaluated security site user privileges service access control list security policy 
sites decisions deny access voted security site majority reached access access key transmitted security sites user site means threshold scheme 
access control approach briefly paragraph application system server simply object files implemented frs untrusted computing resources 
key gathered user site application referencing fragments cryptographic functions see section 
management scattering objects distributed environment requires identification mechanism allow remote invocation 
fact security frs relies fact intruder able gather fragments outside trusted user site invoke objects fragments directly 
management system ensure related fragments belonging application identified just looking object 
dynamically computed trusted site secret key provided application user authorization protocol 
looking carefully fragmented application cf 
fig 
see application cases implemented star structure centre located trusted user site 
centre star root object composition tree 
ideal system ensure unique identification remote object fragment ii authentication invoking application iii verification permissions invoked object object name application name object permissions 
simple way just consider capabilities soon provided object manager known corresponding object activated 
case algorithm way function application secret key 
viewed generalisation notion pointer distributed environment 
trusted user site application workspace confidential object executed trusted site non confidential object object fragment executed untrusted site local external fig 
structure fragmented application local external sophisticated solution decipher object manager site check authenticity permissions 
case shared secret key implement solution key kept securely station local trusted sub system local tcb 
case algorithm secret key cryptosystem secret key shared user application user site untrusted sites copy invoked object located 
shared objects different applications different preventing search induction shared objects 
experimentation investigated frs design approach detailed example distributed electronic diary implemented delta system 
detailed description 
describe application small series classes leading hierarchical design diary 
simple example number confidentiality constraints processed information defined taken account 
processing facilities provided operations performed defined objects fact limited current version diary application defined objects persistent 
possible type application persistence heavy computation numerical computations sensitive information missile trajectory computation 
diary example provides convenient means illustrating object oriented frs design steps described section 
functional specifications functional specifications address definition management operations meetings day day information related meeting composed topic group people attending venue time date information 
person attending defined identification items 
information management meetings stored set meeting descriptors summarised follows topic topic discussed meeting venue time date place meeting held time date information dynamic person list list persons attending meeting 
descriptors main leaves tree sub tree diary considered object private user diary shared multiple users 
person list defined information items name firstname full address phone number 
periods days weeks months may locked reason travel abroad personal reason instance 
diary includes note pad messages may stored day day basis 
diary provides functions insert list remove defined objects 
italic words indicate objects design diary application 
confidentiality constraints description example section 
augmented informal description confidentiality constraints 
chosen 
items meeting topic time date venue person list considered constituting confidential information 

personal identification items name address phone number individually considered public information pair information items including person name confidential 

group persons attending meeting considered constituting confidential information item 

unstructured information items topic meeting message note pad locking reason day week month confidential 
interpretation informal description confidentiality constraints leads formal description confidentiality clauses unstructured confidential objects person name address phone number meeting venue topic time date person venue time date person time date person person person topic message locking reasons constraints taken account order refine design identify fragments 
scattering 
final object oriented design design steps performed obtain final design diary objects identify fragments design 
design meeting object decomposed sub objects candidate fragments 
list persons attending meeting appear meetings persons confidential objects see clauses decomposition elementary objects performed represented fig 

object classes component objects forming diary application object shown asterisk indicates possibility components object class 
month owner lock month lock week day message lock day meeting venue time topic list person address phone name diary week fig 
diary object composition hierarchy final version object hierarchies fig 
illustrate various components design diary object elementary objects combination elementary objects integers booleans strings elementary objects represented grey boxes confidential leaves tree assumptions usefully decomposed smaller objects instance owner messages locking reason meeting topic strings assumed ensure confidentiality soon entered user system 
pre defined confidentiality constraints lead separating fragments objects managed separate instance managers implementation 
topic venue time date objects assumed object fragments 
list object may kept meeting objects contains pointers persons managed instance manager class person implementation 
person object fragment 
consequence meeting object relatively empty meeting sub objects scattered separate fragments 
electronic diary system sizeable experiment undertaken implementing application object oriented fragmentation techniques 
experiment greatly assisted formulating methodical approach techniques helped motivate development scheme expressing confidentiality constraints described section 
complex processing added actual simple example introducing confidentiality problem 
granularity objects fragments obtained example solve confidentiality problem appear relatively small 
technique solve problems coarse granularity instance consider medical record system information classified parts administrative properly medical 
quite simple example need go fragmentation process soon link large fragments retained trusted site 
access parts information necessary needs appropriate user authentication medical administrative staff properly related authorization 
performance frs mainly depends granularity fragmentation 
frs need introduce significant information processing overhead reassembly negligible obviously introduces communication overhead respect pure processing replication application attempt tolerate intentional faults 
parallelism aim fragmentation process additional opportunities provides parallelism significant benefit regard application performance suitable circumstances 
particular reduce impact communication overheads 
programming viewpoint awkwardness manual translation involved final stages implementation delta platform extensive trials applications probably best await provision means automatically installing applications suitable object oriented distributed runtime layer 
just starting investigate suitability purpose cool runs chorus micro kernel operating system hope provide basis frs connection 
topics needed include naming facilities management algorithms compute access control mechanisms fine grain object invocation 
hope develop object oriented frs scheme point experiments enable realistic cost effectiveness assessment scheme variety applications 
parallel plan continue object oriented language concepts just inheritance particular delegation reflection believe facilitate structuring implementation applications various dependability related mechanisms combination including course frs 
language currently favoured candidate experimenting reflection implementation frs application 

laprie ed dependability basic concepts terminology english french german italian japanese series dependable computing fault tolerant systems avizienis kopetz laprie eds vol springer verlag isbn 


fabre intrusion tolerance distributed computing systems proc 
ieee symp 
security privacy oakland california usa pp 


neumann processing encrypted data comm 
acm vol 
sept pp 


rivest data bank privacy homomorphisms foundations secure computation academic press isbn pp 


fabre reliable processing confidential information proc 
th ifip sec brighton uk pp 


shamir share secret cacm vol 
pp 

rabin efficient dispersion information security load balancing fault tolerance journal acm vol 
april pp 


powell ed delta generic architecture dependable distributed computing series research reports esprit project delta vol 
springer verlag isbn 

shrivastava dixon overview distributed programming system ieee software vol 
pp 

fabre randell object oriented view fragmented data processing fault intrusion tolerance distributed systems proc 
esorics lncs springer verlag nov pp 


stroud transparency reflection distributed systems proc 
th 
acm sigops european workshop distributed systems le mont france sep pages 

chiba masuda designing extensible distributed language meta level architecture proceedings ecoop lncs springer verlag july pp 


ncsc tni trusted network interpretation trusted computer system evaluation criteria tech 
rept 
ncsc tg ncsc july 

lea amaral cool object oriented support platform built chorus micro kernel proc 
ieee palo alto ca usa october pp 


rozier overview chorus distributed operating system chorus technical report cs tr pages 
