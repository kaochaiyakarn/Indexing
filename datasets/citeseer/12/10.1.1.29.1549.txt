tree visualization tree maps space filling approach ben shneiderman department computer science human computer interaction laboratory university maryland college park md june appear acm transactions graphics traditional approach representing tree structures rooted directed graph root node top page children nodes parent node lines connecting 
knuth long discussion standard representation especially root top offers alternatives including brief mention space filling approach 
remainder presentation discussions trees focus various node edge representations 
contrast deals dimensional space filling approach node rectangle area proportional attribute node size 
research relationships images representation tree structures focussed node link representations images 
includes quad trees samet variants important image processing 
goal quad trees provide tree representation storage compression efficient operations bit mapped images 
xy trees nagy seth traditional tree representation dimensional layouts newspaper magazine book pages 
related concepts include trees bentley explained help rectangular drawing hb trees lomet salzberg advanced multi attribute indexing method useful representation 
projects sought provide human visualization aids viewing large tree structures 
tree maps representation designed human visualization complex traditional tree structures arbitary trees shown space filling representation 
original motivation gain better representation utilization storage space hard disk viewed perspective multiple level directory subdirectories files unix macintosh finder ms dos 
application files leaf nodes subdirectories interior nodes 
operating systems display contents node time names files subdirectories icons represent 
user traverse tree mouse click directory folder icon issuing command cd change directory 
systems attempt show node time quickly limited screen space exceeded 
clever attempts show full tree structure allow rapid page turning soon exceed practical limits 
example norton utilities symantec windows microsoft show trees side root left display indentation plus lines show tree structure 
summary elegant tree layouts hierarchical structures sun microsystem open look soon overwhelm available display space users grasp entire picture 
old problem 
designers family trees animal species trees organization charts large wall necessary give picture 
structural relationship shown additional information size importance node ignored written text form 
computer directory representation application goal show entire set files space filling visualization allow users recognize rapidly larger files consider candidates deletion hard disk filled 
large files level tree structure range file sizes orders magnitude bytes bytes 
levels thousands files 
approach problem choose representation length file coded length portion multi colored line 
knuth 
impractical line long view 
higher dimensional approach hard draw view 
space filling approach potential comprehensible 
file represented small rectangle method necessary avoid computationally intensive bin packing algorithm 
tree visualization approach called tree maps appears solve practical problem provide interesting opportunities applications 
tree map algorithm algorithm takes tree root rectangular area defined upper left lower right coordinates 
number outgoing edges root node determines number partitions region 
leftmost subtree contains fraction size child size root total number bytes root vertical partitioning line drawn size child size root algorithm recurs left tree degree rotated rectangle splits axis direction loop continues remaining subtrees making partitions remaining rectangle 
nodes partitioned vertically levels horizontally odd levels 
visual clarity different colors gray shading region 
effect seeing thousands small rectangles checkerboard varying sized spots 
color coding represent different types files text programs binary graphics spreadsheets owners programs owner different color frequency brighter colors frequent age file older files yellow 
adjacent areas color boundary line necessary 
users needs vary extensively specific solution satisfy situations users control panel parameters indicate colors assigned attribute values 
files take storage space hard disk leaf nodes ignore moment usually modest storage overhead consumed directory interior node total size subtree necessary propagate sums storage consumed file subdirectory levels tree root 
data maintained system preliminary pass tree collect data place interior node 
user desires see display percentage total disk space utilization root node additional child dummy record size entire unused portion disk 
tree map algorithm assumes tree structure node contains record directory file name name number children num children array pointers level child num children 
arguments tree map algorithm root pointer root tree subtree arrays length coordinate pairs opposite corners current rectangle assume contains higher coordinates lower coordinates affect correctness algorithm order rectangles drawn axis varies indicate cuts vertically horizontally color indicates color current rectangle 
addition need paint rectangle procedure paints rectangle color resets color variable 
size function returns number bytes node pointed argument 
alternatively size pre computed stored node 
initial call treemap root color upper right lower left corners display 
setting axis argument zero initial vertically 
assumed arguments passed value modified treemap root axis color paint rectangle color paint full area width axis axis compute location slice num children axis axis size child size root width treemap child axis color recur slice flipping axes axis axis endfor execution speed pattern algorithm runs linearly number nodes tree structure 
version paint rectangles left right top bottom deeper levels covering colored sections previously drawn depth traversal 
breadth traversals possible algorithms cover colored sections 
tried sequencing leaf nodes subtrees ordering date size ascending descending advantages 
obtaining file names directory displaying users need examine file name extension date accomplished ways 
example users move cursor candidate region click obtain relevant information bottom line screen just cursor 
allowing operations deletion copying marking way pop menus natural step 
directory names desired nested rectangles show containing frame reduce effective display space 
display resolution standard vga display resolution pixels giving total pixels quite adequate displaying files file gets average pixels 
course small files zero byte files small represent currently eliminated 
larger displays larger trees displayed 
smaller displays larger trees necessary select subdirectories get adequate detail add zooming reveal small files 
applications applications quite broad 
organization chart number employees budget division department represented gain idea relative size color indicate closeness planned levels 
library uses dewey decimal system number books topic represented see relative strengths library holdings 
stock portfolio dollar values purchase represented size profit loss color coded 
traditional tree structured data structure probability cost access coded size help find poorly balanced structures 
tree structure represents computer program size represent amount time spent segment code guiding attempt optimize performance 
summary presents novel approach representing trees weights sizes leaf nodes 
visualization space filling recursive algorithm generation runs rapidly 
depends color coding shading regions easily provides users quick overview clearly indicates relative sizes leaf nodes 
figures show examples tree maps size coding implemented brian johnson apple macintosh ii computer high resolution color display 
shows fifteen files directories levels nested boxes show levels 
represents actual disk directories encompassing files levels color coding file type text graphics applications 
continue explore refinements tree maps alternate layouts better methods coping large ranges file size color coding schemes operations applied files 
gratefully acknowledge thoughtful comments reviewers editor dan olsen constructive suggestions david mount help revising tree map algorithm 
appreciate continuing financial support human computer interaction laboratory research apple ncr sun microsystems 
bentley friedman data structures range searching acm computing surveys 
knuth donald art computer programming volume fundamental algorithms addison wesley publishing reading ma 
lomet david salzberg betty hb tree multiattribute indexing method guaranteed performance acm transactions database systems december 
nagy seth hierarchical representation optically scanned documents proc 
ieee th international pattern recognition montreal canada 
samet hanan design analysis spatial data structures addison wesley publishing reading ma 

