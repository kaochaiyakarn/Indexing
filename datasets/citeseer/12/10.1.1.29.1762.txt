third international conference multiagent systems icmas pp distributed constraint satisfaction algorithm complex local problems makoto yokoo ntt communication science laboratories seika cho soraku gun kyoto japan yokoo cslab ntt jp kobe university marine ku kobe japan ti ac jp distributed constraint satisfaction problem formalize various application problems mas algorithms solving problem developed 
limitation algorithms assume agent local variable 
simple modifications enable algorithms handle multiple local variables obtained algorithms efficient scalable larger problems 
develop new algorithm handle multiple local variables efficiently asynchronous weak commitment search algorithm 
algorithm bad local solution modified forcing agents exhaustively search local problems 
number interactions agents decreased agents communicate find local solutions satisfy local constraints 
experimental evaluations show algorithm far efficient algorithm uses prioritization agents 
constraint satisfaction problem csp general framework formalize various problems ai theoretical experimental studies performed 
distributed constraint satisfaction problem distributed csp formalized csp variables constraints distributed multiple automated agents 
various application problems multiagent systems mas concerned finding consistent combination agent actions distributed resource allocation problems distributed scheduling problems distributed interpretation tasks multi agent truth maintenance tasks formalized distributed csps 
consider distributed algorithms solving distributed csps important infrastructure mas 
noted algorithms solving distributed csps similar parallel distributed processing methods solving csps research motivations fundamentally different 
primary concern parallel distributed processing efficiency choose type parallel distributed computer architecture solving problem efficiently 
contrast distributed csp exists situation knowledge problem variables constraints distributed automated agents 
main research issue reach solution situation 
authors developed series algorithms solving distributed csps basic algorithm called asynchronous backtracking agents act asynchronously concurrently local knowledge global control efficient algorithm called asynchronous weak commitment search priority order agents changed dynamically distributed iterative improvement algorithms 
limitation algorithms assume agent local variable 
assumption satisfied local problem agent large complex 
algorithms applied situation agent multiple local variables methods methods efficient scalable large problems 
method agent finds solutions local problem 
finding solutions problem re formalized distributed csp agent local variable domain set obtained local solutions 
agents apply algorithms case single local variable 
drawback method local problem large complex finding solutions local problem virtually impossible 
method agent creates multiple virtual agents corresponds local variable simulates activities virtual agents 
example agent local variables assume exist virtual agents corresponds 
agent simulates concurrent activities virtual agents 
case agent local solutions 
communicating agents usually expensive performing local computations wasteful simulate activities multiple virtual agents distinguish communications virtual agents single real agent communications real agents 
prioritization agents introduced handling multiple local variables 
algorithm agent tries find local solution consistent local solutions higher priority agents 
exists local solution backtracking modification prioritization occurs 
various heuristics determining ordering agents examined 
limitation approach higher priority agent selects bad local solution local solution part global solution lower priority agent exhaustively search local problem order change bad decision higher priority agent 
local problem large complex conducting exhaustive search impossible 
approach similar method described agent searches local solutions required finding solutions advance 
local solution selected higher priority agent bad lower priority agent forced exhaustively search local problem 
develop new algorithm similar method algorithm agent sequentially performs computation variable communicates agents find local solution satisfies local constraints 
experimental evaluations example problems show algorithm far efficient algorithm employs prioritization agents simple extension asynchronous weak commitment search algorithm case single local variable 
briefly describe definition distributed csp asynchronous weak commitment search algorithm case single local variable section 
basic ideas details asynchronous weak commitment search algorithm case multiple local variables section 
show empirical results illustrate efficiency newly developed algorithm section 
distributed constraint satisfaction problem formalization csp consists variables iy values taken finite discrete domains respectively set constraints values 
constraint defined predicate 
constraint iy predicate defined cartesian product xxx 
predicate true iff value assignment variables satisfies constraint 
solving csp equivalent finding assignment values variables constraints satisfied 
distributed csp csp variables constraints distributed automated agents 
assume communication model 
agents communicate sending messages 
agent send messages agents iff agent knows addresses agents 
delay delivering message finite random 
transmission pair agents messages received order sent 
agent variables tries determine values 
exist inter agent constraints value assignment satisfy inter agent constraints 
formally exist agents iy 
variable belongs agent relation represented belongs 
belongs agent call local variable 
constraints distributed agents 
fact agent knows constraint predicate represented known 
call constraint defined local variables agent local constraint 
say distributed csp solved iff conditions satisfied 
belongs value assigned known true assignment 

example constraint network loss generality assumptions describing algorithm simplicity 
relaxing assumptions general cases relatively straightforward 
agent knows constraint predicates relevant variables 
constraints binary 
represent distributed csp constraints binary network variables nodes constraints links nodes 
agent represented set variables shown large circle 
asynchronous weak commitment search algorithm single local variable asynchronous weak commitment search algorithm agent exactly local variable agent concurrently assigns value variable sends value agents 
agents wait respond incoming messages 
kinds messages ok messages communicate current value nogood messages communicate information constraint violations 
overview algorithm follows 
variable agent non negative integer value representing priority order variable agent defined 
call value priority value 
order defined variable agent larger priority value higher priority 
priority values multiple agents order determined alphabetical order identifiers 
variable agent initial priority value 
receiving ok message agent records values agents agent view 
agent view represents state world recognized agent 
current value satisfies constraints higher priority agents agent view say current value consistent agent view current value consistent agent view agent selects new value consistent agent view 
exists consistent value priority value changed max largest priority value related agents 
agent sends nogood messages relevant agents nogood message contains set variable values part final solution 
algorithm solution exists agents reach stable state constraints satisfied 
exists solution empty nogood algorithm terminate asynchronous weak commitment search algorithm multiple local variables basic ideas going modify asynchronous weak commitment search algorithm case single local variable ways 
agent sequentially changes values local variables 
specifically selects variable highest priority variables violating constraints higher priority variables modifies value constraints higher priority variables satisfied 
precisely agent satisfy initially constraint predicates new constraints communicated nogood messages 
procedure necessary guarantee completeness algorithm 
omit procedure algorithm completeness required 
solving large scale problems algorithm completeness theoretical importance 
set variable values superset nogood final solution 
empty set nogood means solution set superset empty set 
exists value satisfies constraints higher priority variables agent increases priority value 
iterating procedures local variables satisfy constraints higher priority variables agent sends changes related agents 
variable satisfy constraints higher priority variables 
changing value lower priority variable value higher priority variable fixed usually wasteful 
agent changes value highest priority variable 
sending messages agents agent finds consistent local solution agents reduce number interactions agents 
algorithm local solution selected higher priority agent bad lower priority agent exhaustively search local problem 
simply increases priority values certain variables violate constraints bad local solution 
details algorithm asynchronous weak commitment search algorithm case multiple local variables agent assigns values variables sends values priority values related agents 
agents wait respond incoming messages procedures executed agent receiving ok message described order guarantee completeness algorithm agent needs record communicate nogoods 
agents try avoid situations previously nogoods 
due delay messages agent view agent occasionally superset previously nogood 
order avoid reacting unstable situations performing unnecessary changes priority values agent identifies identical nogood sent agent change priority value wait message 
procedures completeness algorithm guaranteed priority value variable changed new nogood created 
algorithm described way agent reacts messages sequentially agent handle multiple messages concurrently agent revises agent view messages performs check agent view 
mentioned way determine agents reached stable state contained algorithm 
detect stable state agents distributed termination detection algorithms 
received ok sender id variable id variable value priority add sender id variable id variable value priority agent view agent view current assignments consistent check agent view procedure check agent view agent view current assignments consistent communicate changes related agents select highest priority violating constraint higher priority variables value consistent agent view current assignments record communicate nogood subset agent view current assignments consistent value obtained nogood new set priority value highest priority value related variables select minimizes number constraint violations lower priority variables set value check agent view select consistent agent view current assignments minimizes number constraint violations lower priority variables set value check agent view 
procedure handling ok messages asynchronous weak commitment search case multiple local variables example algorithm execution show example algorithm execution 
problem instance distributed graph coloring problem goal assign color node nodes connected link different colors 
possible colors node black white gray 
agents agent agent variables 
assume initial values chosen 
agent communicates initial values ok messages 
initial state priority values variables 
agent checks current value assignments consistent higher priority variables 
priority values equal priority order determined alphabetical order variable identifiers 
variables agent ranked higher agent agent need change values variables 
hand agent highest priority agent satisfies constraints higher priority variables satisfy constraint agent changes value gray satisfies constraints change constraint violated 
agent tries change value exists value satisfies constraints colors taken higher priority variables black white gray 
agent increases priority value 
changes value satisfies constraints lower priority variables possible 
case color violates constraint agent randomly selects color black selected case 
agent records communicates nogood black white gray completeness algorithm required 
result variables agent satisfy constraints higher priority variables communicates changes agent 
agent satisfy constraints higher priority variables violates constraint priority value 
agent changes value gray globally consistent solution obtained 
exists local solution agent consistent agent initial local solution 
prioritization agents agent needs exhaustively search local problem 
conversely algorithm priority value associated variable changed dynamically bad local solution modified exhaustively searching local problem 
evaluations section evaluate efficiency distributed constraint satisfaction algorithms discrete event simulation agent maintains simulated clock 
agent time incremented simulated time unit performs cycle computation 
cycle consists reading incoming messages performing local computation sending messages 
assume message issued time available recipient time ci 
analyze performance terms number cycles required solve problem 
cycle corresponds series agent actions agent recognizes state world decides response state communicates decisions 
order compare efficiency proposed algorithm multiple local variables asynchronous search multi awc algorithm employs prioritization agents priorities changed agent finds exists consistent local solution higher priority agents asynchronous weak commitment search agent priority awc ap algorithm agent simulates activities multiple virtual agents single variable asynchronous weak commitment search single awc 
awc ap basically identical algorithm decaying nogoods heuristic described 
agents assumed act sequential order 
comparison fair agents act concurrently awc ap 
agent performs min conflict backtracking awc ap 
distributed graph coloring problem evaluations 
problem represent various application problems channel allocation problems mobile communication systems adjoining cells regions channels avoid interference 
graph coloring problem characterized parameters number nodes variables number possible colors nodes number links nodes 
parameter called link density affects difficulty problem instance aq setting identified critical setting produces particularly difficult problem instances 
table show results number agents number possible colors number links set varying number variables agent 
data point average trials randomly generated problem instances 
table show results obtained varying number agents setting number variables agent 
simply generate links random number links agent small 
example exist agents variables links local constrains 
agent exist local constraints 
local problem agent meaningful cluster variables natural assume local constraints tight inter agent constraints 
going assign half links local constraints half inter agent constraints 
randomly generate problem parameter settings method described graph connected problem solution 
initial value variable determined randomly 
conduct experiments reasonable amount time limited number cycles trial terminated algorithm limit exceeded counted result 
show ratio trials successfully completed total number trials table 
furthermore obtain idea local computation performed measure number consistency checks 
cycle select agent performs consistency checks bottleneck agent cycle show summation consistency checks bottleneck agents 
facts derived results 
parameter settings experiments multi awc outperforms single awc awc ap number required cycles number consistency checks greater size local problems number agents increases 

example algorithm execution number required cycles multi awc smaller single awc multi awc agents communicate find consistent local solutions 
hand single awc agent simply simulates activities multiple virtual agents agents communicate values virtual agents single real agent consistent 
number consistency checks cycle single awc smaller multiple awc compensates increase number required cycles 
number required cycles multi awc smaller awc ap 
glance result somewhat surprising awc ap agent diligent exhaustively searches local problem find local solution consistent higher priority agents multi awc agent lazy tries increase priority values variables trying satisfy constraints higher priority variables 
reality trying find consistent local solution higher priority agents necessarily agents 
consistent local solution satisfies constraints higher priority agents may violate constraints lower priority agents 
convergence global solution slower multi awc agent simply increases priority values table 
evaluation varying number variables agent multi awc awc ap single awc ratio cycles checks ratio cycles checks ratio cycles checks table 
evaluation varying number agents multi awc awc ap single awc ratio cycles checks ratio cycles checks ratio cycles checks variables tries minimize number constraint violations 
shows trace number constraint violations solving problem instance agents variables 
see reducing total number constraint violations difficult agents devote energy satisfying constraints higher priority agents 
agent tries find consistent local solution satisfies constraints higher priority agents minimizes number constraint violations lower priority agents convergence global solution 
requires computations agent 
note agent uses min conflict backtracking awc ap guarantee obtained local solution minimizes number constraint violations lower priority agents 
sophisticated heuristics prioritization agents 
evaluation results show speedup obtained employing heuristics drastic fold compared simple decaying nogoods heuristic awc ap 
assume awc ap outperform multi awc employing sophisticated prioritization heuristics local problems large 

traces 
constraint violations developed new algorithm efficiently solve distributed csp agent multiple local variables 
algorithm asynchronous weak commitment search algorithm case single local variable agent sequentially performs computation variable communicates agents find local solution satisfies local constraints 
algorithm bad local solution modified forcing agents exhaustively search local solutions number interactions agents decreased 
experimental evaluations showed algorithm far efficient algorithm employs prioritization agents simple extension asynchronous weak commitment search algorithm case single local variable 
acknowledgments authors wish supports 
armstrong durfee 
dynamic prioritization complex agents distributed constraint satisfaction problems 
proceedings fifteenth international joint conference artificial intelligence pages 
chandy lamport 
distributed snapshots determining global states distributed systems 
acm trans 
computer systems 
cheeseman kanefsky taylor 
really hard problems 
proceedings twelfth international joint conference artificial intelligence pages 
collin dechter katz 
feasibility distributed constraint satisfaction 
proceedings twelfth international joint conference artificial intelligence pages 
kuwabara lesser meyer 
multistage negotiation distributed constraint satisfaction 
ieee transactions systems man cybernetics 

forming coalitions breaking deadlocks 
proceedings international conference multi agent systems pages 
mit press 
huhns 
multiagent truth maintenance 
ieee transactions systems man cybernetics 
mackworth 
constraint satisfaction 
shapiro editor encyclopedia artificial intelligence pages 
wiley interscience publication new york 
mason johnson 
framework distributed assumption reasoning 
gasser huhns editors distributed artificial intelligence vol ii pages 
morgan kaufmann 
minton johnston philips laird 
minimizing conflicts heuristic repair method constraint satisfaction scheduling problems 
artificial intelligence 
sycara roth sadeh fox 
distributed constrained heuristic search 
ieee transactions systems man cybernetics 
yokoo 
asynchronous weak commitment search solving distributed constraint satisfaction problems 
proceedings international conference principles practice constraint programming cp pages 
springer verlag 
lecture notes computer science 
yokoo durfee ishida kuwabara 
distributed constraint satisfaction formalizing distributed problem solving 
proceedings twelfth ieee international conference distributed computing systems pages 
yokoo 
distributed breakout algorithm solving distributed constraint satisfaction problems 
proceedings second international conference multi agent systems pages 
mit press 
zhang mackworth 
parallel distributed algorithms finite constraint satisfaction problems 
proceedings third ieee symposium parallel distributed processing pages 
