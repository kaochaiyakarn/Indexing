rewriting cryptographic protocol verification thomas genet francis irisa universit de rennes cnet france telecom campus de beaulieu avenue pierre rennes cedex cedex genet irisa fr francis cnet fr 
case study new approach verifying cryptographic protocols rewriting tree automata techniques 
protocols operationally described term rewriting systems initial set communication requests described tree automaton 
starting representations automatically compute approximation set exchanged messages recognized tree automaton 
proving classical properties confidentiality authentication done automatically showing intersection approximation set prohibited behaviors empty set 
furthermore method enjoys simple powerful way describe intruder ability consider unbounded number parties unbounded number interleaved sessions theoretical property ensuring safeness approximation 
new way verifying cryptographic protocols 
aim discovering attacks protocol goal prove difficult problem 
practice positive proofs security properties cryptographic protocols highly desirable results give better guarantee reliability protocol amount passed tests 
decidable approximation set descendants reachable terms 
propose apply theoretical results verification cryptographic protocols 
case study needham schroeder public key protocol nspk short 
chose particular example reasons 
protocol real easily understood 
second reason spite apparent simplicity robustness spite verification attempts protocol designed proved insecure lowe meadows 
particular lowe smart attack invalidating main security properties protocol 
corrected version nspk protocol proposed lowe 
starting trs representing protocol tree automaton recognizing initial set communication requests automatically compute superset set exchanged messages approximating set reachable terms 
model tree automaton takes account unbounded number parties unbounded number interleaved sessions powerful intruder activity description 
building model needed extend approximation technique initially designed approximate functional programs encoded left linear trss general class trss possibly non left linear associative commutative symbols 
section recall basic definitions terms term rewriting systems tree automata 
section recall technique approximating set descendants left linear term rewriting systems regular set terms 
section shortly needham schroeder public key protocol comment expected properties propose encoding term rewriting system section 
term rewriting system describing nspk left linear associative commutative ac short symbols consequently scope basic approximation technique 
section show extend technique case non left linear ac trss 
describe application approximation nspk show prove confidentiality authentication properties 
section conclude compare approaches ongoing developments 
preliminaries introduce notations basic definitions 
comprehensive surveys term rewriting systems tree automata tree language theory connections regular tree languages term rewriting systems 
terms substitutions rewriting systems finite set symbols associated arity function countable set variables set terms set ground terms terms variables 
positions term represented sequences integers 
set positions term denoted pos ordered lexicographic ordering oe 
empty sequence ffl denotes top position 
pos tj denotes subterm position denotes term obtained replacement subterm tj position term term denote set functional positions fp pos ffl root sj fg root denotes symbol position ffl ground context term exactly occurrence special constant occurring term denotes term obtained replacement ground context 
set variables term denoted var 
term linear variable var exactly occurrence substitution mapping oe uniquely extended endomorphism 
domain dom oe fx xoe xg 
term rewriting system set rewrite rules var var 
rewrite rule left linear resp 
right linear left hand side resp 
right hand side rule linear 
rule linear left right linear 
trs linear resp 
right linear rewrite rule linear resp 
left linear right linear 
relation induced defined follows exist rule position pos substitution oe loe sj roe reflexive transitive closure denoted set descendants set ground terms denoted ft tg 
automata regular tree languages finite set symbols arity called states 
called set configurations 
transition rewrite rule normalized transition transition ar bottom nondeterministic finite tree automaton tree automaton short quadruple hf deltai delta set normalized transitions 
tree automaton deterministic rules right hand side 
rewriting relation induced delta denoted delta tree language recognized ft qg 
tree language recognized ft qg 
tree language set terms regular exists bottom tree automaton class regular tree languages closed boolean operations inclusion decidable 
substitution substitution oe 
sigma set substitutions 
transition exists equivalent set normalized transitions 
normalization consists decomposing transition set norm normalized transitions 
method consists abstracting subterms states define abstraction function follows definition 
set symbols set states 
configuration abstraction mapping ff ff 
mapping ff extended defining ff identity ff definition 
set symbols set states transition ff abstraction set norm ff normalized transitions inductively defined 
norm ff 
norm ff fs qg 
norm ff ff ff ff qg norm ff ff 
example 
ff ag hf deltai fq fq delta ff ffl languages recognized set terms built fg ag fg ag ff ffl ff abstraction mapping normalization transition abstraction ff norm ff ff approximation technique regular set terms exists restricted classes trss regular see case general 
tree automaton trs proposed build approximation automaton tr tr 
quality approximation highly depends approximation function called fl define folding positions subterms approximated 
briefly recall construction tr left linear term rewriting system hf deltai tree automaton 
infinitely extend set states infinite number new states initially occurring note modify delta particular remain finite language recognized 
hand possible come back finite set states restricting set accessible states states 
starting incrementally build finite number tree automata hf delta ae get automaton 
denote tr automaton construct technique consists finding term building delta ae 
differs respective transitions sets ensure ae construct delta strictly contains delta order necessary add transitions delta obtain delta viewed completion step term rewriting systems set transitions delta exists term definition exists rule ground context substitution match oe loe roe hand construction tree automata loe means exists state loe know critical pair transitions rules loe roe transition delta delta term recognized ensure roe sufficient rewrite roe get delta delta 
ensure need add transitions delta join critical pair loe roe direct solution roe transition form roe compatible standard normalized form tree automata adding roe transitions normalize norm ff function see definition 
delta delta norm ff roe 
give example completion process simple trs example 
ff ag rule trs ff hf delta fq delta ff 
transitions exists critical pair qa qa keeping tree automata standard normalized form allows particular apply usual algorithms intersection union substitution oe fx 
defined delta delta norm ff 
ff abstraction function ff new new state occurring transitions delta delta fg new new simple decidable case completion procedure guaranteed converge may infinitely add new transitions generate infinite number tree automata choosing particular values ff may force completion process converge approximating infinitely transitions finite sets general transitions 
particular abstraction functions associated approximation functions denoted fl defining folding positions positions right hand side rules subterms approximated regular languages completion step involving rewrite step loe roe folding position position assigned state ensure strict equality comes fact state recognizing different terms obtained different positions rules substitutions 
role approximation function relate state folding positions depend applied rule substitution oe 
furthermore setting rewriting step loe roe modeled completion step critical pair loe roe loe parameter approximation function 
approximation function fl maps triple oe sequence states position normalization transition roe definition 
set states set sequences delta delta delta states approximation function mapping fl theta sigma 
fl oe delta delta delta card 
fl oe delta delta delta associate positions 
done defining corresponding abstraction function ff restricted domain oe sigma ff fp oe gamma oe lexicographic ordering 
note norm fl normalization function ff value defined fl 
starting left linear trs tree automaton approximation function fl algorithm building approximation automaton tr 
set construct 
search critical pair state rewrite rule substitution oe sigma loe roe 

norm fl roe 
process iterated stops tree automaton oe sigma loe ak roe ak tr fact sigma may infinite problem practice finding critical pair restrict finite set accessible states changing 
recall theorem 
theorem 
completeness tree automaton left linear trs approximation function fl tr fl function fix quality approximation 
example approximation obtained constant fl function mapping triple oe sequences unique state oe sigma fl oe delta delta delta opposite best approximation consists mapping triple oe sequences distinct states 
rough approximation built fl guaranteed terminate necessarily case second 
practical point view fact completeness approximation construction depend chosen fl theorem interesting property 
guarantees approximation function tr safe model sense interpretation 
example 
back example adding transitions fg new new obtain brings critical pair qnew qnew previous example build delta adding norm ff new delta ff maps new state new occurring delta add new transitions get critical pair process may go 
define approximation function fl simple static way example oe sigma fl oe new singleton note fl function maps triple form oe sequences states length 
fl function defines rough approximation state new normalization values oe may 
approximation function fl completion terminates 
value delta remain completion step norm fl new fg new new new delta delta ff new new new critical pair delta rule 
tr obtained easy verify reachability properties shown example regular set terms reached terms done showing tr 
apply verification needham schroeder public key protocol section 
needham schroeder public key protocol section case study needham schroeder public key protocol nspk 
precisely fixed version protocol key server 
key servers discarded sake simplicity 
note attacks nspk key servers 
approximation technique successfully applied protocol key servers 
nspk protocol aim mutual authentication agents initiator responder separated insecure network 
mutual authentication means protocol session completed agents assured identity 
general main property expected kind protocol prevent intruder impersonating agents 
protocol exchange nonces usually fresh random numbers time stamps asymmetric encryption messages agent public key encryption private key decryption 
public key supposed known agent private key agent supposed known setting suppose messages encrypted public key decrypted read description steps fixed version protocol borrowed 

fna 

fna nb 

fnb gkb step tries initiate communication creates nonce na sends message containing na identity encrypted public key kb second step sends back message encrypted public key containing nonce na received new nonce nb identity 
step returns nonce nb received protocol completed mutual authentication agents ensured soon receives message containing nonce na sent back step believes message really built sent na encrypted public key agent able send back na similarly receives message containing nonce nb sent back step believes message really built sent property may expected kind protocol confidentiality nonces 
particular nonces remain confidential keys symmetric encryption communications confidentiality nonces may interest 
cryptographic protocol supposed resist attack intruder 
particular nspk intend show agents respecting protocol intruder may nonces private keys remain confidential confidentiality agent believes message built agent message effectively built authentication 
encoding protocol intruder section show model nspk trs 
signature terms representing agents messages keys agent labeled unique identifier agt set agent labels terms representing agent labels 
agent label agt term agt denote agent label term mesg represent message header refers agent emitter agent receiver contents term pubkey denotes public key agent encr denotes result encryption content key term flag recording performed encryption 
field protocol rules verification 
term represents nonce generated agent identifying communication ac binary symbol order represent sets 
example term equivalent modulo ac represent set fx zg 
starting set initial requests aim compute tree automaton recognizing approximation sent messages 
approximation contains terms signaling communication requests established communications 
example term form goal means expect open communication term form init means believes initiated communication reality communicates conversely term resp means believes responded communication request coming real author request 
encoding protocol ac rewrite rules straightforward step protocol described rewrite rule left hand describe encoding general way 
particular case nspk encoding done ac symbol needed sending message depends reception distinct messages rules form general rules necessary protocols case simple version nspk 
side precondition current state set received messages communication requests right hand side represents message sent established communication precondition met 
sent message added current state 
result rewrite rule cumulative rule form commodity choose short hand lhs term occurring right hand side 
instance rule mesg lhs init represent rule mesg mesg init 
step protocol give corresponding rewrite rule 
encoding trs longer initial protocol specification section complete 
instance initial specification informally define check content messages deal communication requests points formally defined specification rewrite rules 
furthermore initial specification viewed trace correct execution nspk protocol specific agents specification directly general context agents protocol 
difference specification initial specification section agents identities initial specification abstracted term variables form agt agt 
supposed variables consider unbounded number agents transactions 


fna emission message encoded rule goal lhs mesg encr pubkey jn xk meaning rule agent wants establish communication sends message contents encrypted public key contents represented list build classical operators cons null containing nonce produced identity 
commodity lists represented usual way example list form cons cons null denoted ju vk 


fna nb mesg agt encr pubkey agt jv agt lhs mesg agt agt encr pubkey agt agt jv agt agt agt second message sent agent agt receives message agent agt identity enclosed message note rules achieve kind type checking content message 
instance left hand side rule expecting protocol agent identity contained header message example may corrupted intruder 
information example extended version nspk key server involved 
message content pattern jv agt general pattern jv check element message agent identity 
role kind type checking important permits avoid attacks type confusion described 


fnb gkb step encoded rule mesg agt encr pubkey agt jn agt agt agt lhs mesg agt agt encr pubkey agt init agt agt agent agt receives agt nonce agt agt built agt performs actions 
action send protocol message agt 
second action consists reporting communication agt thinks established agt 
reality may different identity real author message filling third field init term 

step protocol message sent agent receives message protocol sent step reports communication responder role 
mesg agt encr pubkey agt jn agt lhs resp agt prove authentication property protocol need prove couple agents securely establish communication network behavior agents behavior intruder may 
assume unbounded number agent labels agt observe precisely agents agents labeled unbounded number agent labels integers built usual operators successor 
agt fa bg initial set terms set terms form goal agt agt agt words set communication requests agent agt agt agent agt agent agt note general setting take account case agent protocol authenticate 
clear agent may practical interest happens want verify intruder take advantage build attack 
set recognized tree automaton final state net set transitions int agt goal agti net int int net net net goal agti net goal net goal agti net goal net goal agti net agt int agti goal net goal agti agti net agt goal net description intruder automaton state net special state representing network fact base containing communication requests communication reports 
verification approach cryptographic protocols intruder supposed total control network 
particular intruder assumed know message sent network 
approach assumption bit stronger intruder network 
direct consequence choice knowledge intruder message intruder build supposed remain network 
furthermore suppose agents agt agent may dishonest deliberately give intruder private key content message send receive 
intruder disassemble messages build new ones knowledge 
rewrite rules simplest way describe intruder decrypt disassemble components message 
agents agt fool give private keys intruder decrypt messages encrypted public keys 
opposite assume intruder means guessing private key corresponding rules applied ac term representing network intruder knowledge cons lhs disassembling cons lhs mesg lhs encr pubkey agt lhs decrypting encr pubkey agt lhs hand intruder ability build new messages knowledge shortly defined tree automaton transitions 
net state recognizing messages network setting knowledge intruder network net state recognizing knowledge intruder 
assume intruder knows identity agent network public keys 
agt int net agt net agt net pubkey agti net pubkey net pubkey net agents agt give intruder nonces produce agents agti net agti net agti agti net starting components knows obtain terms net intruder combine lists cons operator encrypt including keys knows operator encr build messages operator mesg order enrich knowledge language recognized net 
note second field operator encr flag corrupted intruder refer agti real author encryption intruder 
cons net net net null net encr net agti net net mesg net net net net things notice 
initial description net wide loose possible roughly authorizes intruder build nearly term terms containing nonces built terms containing subterms form agt agt agt agt 
automatically obtained complement operation 
kind specification quite natural regards intruder description simpler convincing specify built intruder precisely totally define 
consequently language recognized state net loose may contain strangely formed messages effect protocol hardly predicted example mesg agt agt encr pubkey agt agt pubkey agt agt jn agt agt agt agt message form agt 
agt ffn agt gk agt agt gk agt language recognized net contains instance terms representing repeated encryption unbound number important consider cryptographic protocols verification encr pubkey agt agt encr pubkey agt agt encr thing approximation construction new messages messages components obtained rewriting added language recognized automaton new transitions net dynamically new base components intruder message constructions 
sum described model consider unbounded number agents executing unbounded number protocol sessions parallel 
particular note exists attack parallel protocol sessions say agents attack appear model represented dishonest agents say agt agt dishonest agents able respect protocol 
approximation verification extensions approximations ac non left linear trss section show extend approximation construction larger class trss 
roughly problem non left linear rules rule tree automaton set transitions contains construct valid substitution oe fx 
matching rewrite rule transition case second 
semantics completion rule transition find common language terms recognized obtained computing new tree automaton set states disjoint states 
completion step add transitions new transition adding transitions adds states add new states cases may lead non termination approximation construction 
hand non linearity problem disappear deterministic automata deterministic automaton det states det trivially 
determinization tree automaton may result exponential blowup number states 
chose locally deterministic tree automata non deterministic tree automata deterministic states states rules deterministic state 
approximation construction states matched non linear variable left hand side rule deterministic build critical pairs non linear variables left hand side mapped state 
instance example build critical pair add transition keep deterministic tr 
show completeness algorithm locally deterministic tree automata 
term non linear denote lin term linearized occurrences non linear variables replaced disjoint variables 
example lin 
definition 
states matching tree automaton set states non linear term fp pn pos set positions non linear variable say states matched iff oe sigma lin oe lin oej lin oej pn theorem 
completeness extended non left linear trs tree automaton trs tr corresponding approximation automaton set states 
non left linear rule non linear variable states matched tr tr tr proof 
sketch see detailed proof assume exists term tr 
rewrite chain terms tr tr 
show rule applied rewriting necessarily non left linear rule tr 
obtain exists subterm matched occurrences non linear variable exists distinct states tr tr tr contradicts hypothesis theorem matched tr tr fug 
framework states matched non linear variables easily kept deterministic 
example nspk specification non linear variables match terms representing agent labels initially recognized int respectively 
states initially deterministic property trivially preserved completion agent labels occur right hand side rules agent labels occur new transitions added 
necessary automatically check property tr proving tr non linear variable rule matching distinct states dealing ac symbols extension straightforward 
approximation deal non terminating trs explicitly define ac behavior symbol 
replace implicit ac symbol non ac symbol add left linear rules defining explicitly ac behavior 
approximation function respectively set rewrite rules tree automaton 
aim compute tree automaton tr recognizing superset approximate network set possible sent messages set communication reports 
give approximation function fl defining folding positions approximation choice confuse dishonest agents agt 
words approximation difference agents agt agt distinguish agt agt agent agt similar manner collapse messages sent received dishonest agents confuse messages involving agt agt 
example approximation function rule fl goal lhs mesg encr pubkey jn xk distinct values fl detail sequences new states value complete specification 
fl fl net fx 

ii fl fl net fx 

iii fl fl net fx 

iv fl fl net fx 

fl fl net fx 
agti 
vi fl fl net fx 
agti 
vii fl fl net fy 
agti case messages generated rule agent labeled agent labeled decomposed states defined sequence fl fl net fx 


similarly case vii means messages generated rule agent labeled agent decomposed states sequence fl fl net fy 
agti 
difference example messages sent agt agt messages sent agt agt messages sent agt agt fact natural messages sent dishonest agent captured factorized intruder 
verification prototype tree automata library developed elan permits automatically compute approximations approximation function fl 
approximation function obtain finite tree automaton tr states transitions recognizing regular superset 
see complete specification complete listing automaton tr 
automaton directly verify nspk confidentiality authentication property 
confidentiality verify intruder capture nonce form agt agt fa bg 
model intruder emits knowledge network explained section done checking intruder emit nonce form agt agt agt agt intersection tr automaton conf empty 
final state conf net transitions agt net net net agt net net net net intersection automatically computed obtain tree automaton set states empty recognized language empty 
term conf tr 
similarly cases authentication corrupted described automaton aut final state net transitions init init init resp qa resp init qb resp resp agt init init agt qa init resp agt qb resp init resp resp encoding cases distortion communication reports belief parties reality example terms form init agt agt agt fag meaning agt think established communication reality fooled communicates agt 
intersection tr automaton aut empty see traces execution 
shown application descendant approximation cryptographic protocols verification 
obtained positive proof authentication confidentiality nspk 
applying approximation mechanism flawed nspk specification led non empty intersections conf aut signaling violation confidentiality authentication properties 
interesting aspect method takes advantage theorem proving form interpretation called approximation 
basic deduction mechanism coming domain theorem proving provide simple efficient tools tree automata manipulate infinite objects 
hand approximation simplifies proof way automatically computed 
compared rewriting verification techniques proofs consistency proofs induction properties proved approximation technique clearly restricted qualified regular properties 
restricting attention regular properties obtain verification technique enjoys interesting practical properties termination trs needed trs may include ac symbols proofs obtained intersections tr automatically quickly computed construction tr automatic incremental guaranteed terminate choice fl approximation function nspk case fully automatic way 
constructing approximation function require particular skill formal proof consists pointing sets objects represented states recognizing regular sets terms merged order build approximated model 
nspk case fl approximation entirely hand systematic distinct value domain fl user give sequence fresh states normalizing new transitions 
historical reasons step manual prototype automated new implementation tool progress 
compare technique verification techniques verifying cryptographic protocols 
main difference pointed technique designed discovering attacks 
approximation tr derive information context attacks approximate studied theorem prover model checker re construct exact trace attack 
model checking fact particularly suited attack discovery showed flaws discovered lowe 
furthermore attacks longer model checking verify cryptographic protocols lifting properties proved finite domain unbounded 
lifting done hand lowe automatic way interpretation done 
started different formalism different technique approach close 
particular approximation functions seen particular interpretations 
approximations enjoys property interpretations general safety model approximations implicit guaranteed theorem approximation function fl 
automated theorem proving widely cryptographic protocols verification 
nrl protocol analyzer developed meadows uses narrowing 
paulson applied induction proof theorem prover isabelle hol verification cryptographic protocols 
theorem proving approaches achieve detailed verification protocols 
particular provide convincing answer problem freshness 
counterpart proofs may diverge main difficulty remain inject right lemma right moment order proof converge 
automation kind method remains partial 
furthermore proofs long complex require user strong practical experience prover 
due gave positive proof neuman stubblebine protocol theorem prover 
technique saturation sets horn clauses related descendant computation 
restricted class clauses called semi linear saturation computed exactly 
protocol specification encoded semi linear clauses saturation process may diverge 
specifications modified order ensure termination process 
framework restriction set trss defined approximation technique order tackle divergence problem 
denker meseguer talcott proposed encode nspk object oriented trss 
encoding executable detecting attacks initial version protocol testing 
objects clearly great advantage better clarity readability encoding 
rewriting remains operational model object oriented rewriting possible extend approximations objects benefit clarity object oriented specifications 
tree automata completion mechanism verifying cryptographic protocols 
regards important difference method deal bounded number agents bounded number protocol sessions 
technical point view approach rewriting estimating intruder knowledge encoding protocol 
completion mechanism limited decidable known case collapsing rules covered decidable general case right linear monadic rules 
approach interesting shows possible way combining tree automata state transition models interpretation protocols tree automata completion abstracting structures state transition models representing notion time model 
approximation model consider nspk time totally collapsed message considered permanently sent received moment 
collapsing time easily consider infinite number protocol sessions finite model 
raise problems proving confidentiality authentication properties nspk case general 
instance electronic commerce protocols set little hope prove security property model time freshness plays central role 
direct solution consider states network intruder knowledge different steps protocol collapsing states 
main goal able handle protocol complex set 
achieve goal thing consider formally define concepts cryptographic protocols keys nonces agents order get natural protocol language description automatic translator encoding 
second point hand extend conditional rules order get powerful behavior description language hand handle tree grammars get finer approximations 
think approximations verification systems different cryptographic protocols 
rewriting approximations way combine formalism automated theorem proving techniques interpretation theorem proving proving properties needing high level proof techniques induction approximations proving remaining parts proof interpretation model checking 
acknowledgments pascal discussion cryptographic protocols pierre etienne moreau technical help elan 


mechanization cryptographic protocol verification 
proc 
th cav conf haifa israel volume lncs 
springer verlag 
right hand side collapsing rule variable occurring left hand side 

borovansk kirchner kirchner 
moreau vittek 
elan logical framework computational systems 
proc 
st volume entcs asilomar california 

comon dauchet gilleron tison 
tree automata techniques applications 
ux univ lille fr tata 

dauchet gilleron 
bottom tree pushdown automata rewrite systems 
book editor proc 
th rta conf como italy volume lncs pages 
springer verlag 

dauchet tison 
theory ground rewrite systems decidable 
proc 
th lics symp philadelphia pa usa pages june 

denker meseguer talcott 
protocol specification analysis maude 
proc 
nd workshop pont france 

dershowitz 
jouannaud 
handbook theoretical computer science volume chapter rewrite systems pages 
elsevier science publishers 
north holland 
research report lri 

genet 
tree automata library 
www loria fr elan 

genet 
decidable approximations sets descendants sets normal forms 
proc 
th rta conf tsukuba japan volume lncs pages 
springer verlag 

genet 
rewriting cryptographic protocols verification extended version 
technical report inria 
www irisa fr genet publications html 

gilleron tison 
regular tree languages rewrite systems 
fundamenta informaticae 


decidable approximations term rewriting systems 
ganzinger editor proc 
th rta conf new brunswick new jersey usa pages 
springer verlag 

lowe 
attack needham schroder public key protocol 
ipl 

lowe 
breaking fixing needham schroeder public key protocol csp fdr 
proc 
nd tacas conf passau germany volume lncs pages 
springer verlag 

lowe 
new attacks security protocols 
th computer security foundations workshop 
ieee computer society press 

mastercard visa 
secure electronic transactions 
www visa com set 

meadows 
analyzing needham schroeder public key protocol comparison approaches 
proc 
th esorics symp rome italy volume lncs pages 
springer verlag 


abstracting cryptographic protocols tree automata 
proc 
th sas venezia italy 

needham schroeder 
encryption authentication large networks computers 
cacm 

paulson 
proving properties security protocols induction 
th computer security foundations workshop 
ieee computer society press 

salomaa 
deterministic tree pushdown automata monadic tree rewriting systems 
computer system sciences 


automatic analysis security protocols 
proc 
th cade conf trento italy volume lnai pages 
springerverlag 
