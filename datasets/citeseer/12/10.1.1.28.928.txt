strong typing object oriented languages revisited ole lehrmann madsen computer science department aarhus university dk aarhus denmark mail daimi aau dk boris magnusson department computer science university lund lund sweden mail boris dna lth se ller pedersen norwegian computing center box blindern oslo norway mail nr october conference object oriented programming systems languages applications european conference object oriented programming oopsla ecoop october ottawa canada concerned relation subtyping subclassing uence programming language design 
traditionally subclassing introduced simula de ning hierarchical type system 
type system language characterized strong weak type checking mechanism static dynamic 
parameterized classes combination hierarchical type system example language construct known create complicated type checking situations 
situations analyzed di erent solutions 
argued approach combination static dynamic type checking gives reasonable balance 
concluded approach possible base type system class subclass mechanism 
purpose contribute clari cation typing issues object oriented languages 
issue type checking languages classes type parameters subject papers 
proposals introducing separate type system supplementary subclass hierarchy 
investigate problems point view taken scandinavian school object oriented programming 
class concept introduced simula motivation model concepts application domain 
lead subclassing mechanisms means represent specialization generalization hierarchies 
inheritance properties hierarchies main motivation introduce subclassing 
viewed modeling mechanism subclassing taken de ne hierarchical type system 
types de ned explicitly means separate classes internal structure de ne di erent types 
approach followed smalltalk beta ei el 
apart modeling originally intended subclassing means specifying inheritance code code sharing 
type system viewed di erent ways means representing concepts application domain means detecting certain kinds program errors type errors 
rst aspect representation concepts covered mechanisms subclassing de ne hierarchical type system separate type system unnecessary 
strength type system related issue 
regard continuum weakly typed means type expression carries little information 
smalltalk example language type instance variables convey little information messages legal send denoted object 
perfectly strongly typed language exclusively expressions type carries information denoted object 
aware object oriented language languages come close 
languages hierarchical type system quali ed serve compromise necessarily operations object inferred quali cation 
strong typing implies type checking performed compilation utilization weak typing aspects checked run time 
weak typing run time type checking provides greater exibility programmer 
exibility especially appreciated developing initial prototypes system 
compile time type checking useful purposes improves readability programs possible detect certain class program errors compile time possible generate ecient code 
programming language er proper balance exibility compile time checking useful 
called strongly typed languages rely combination compiletime type checking run time type checking 
simula beta examples languages 
large class type errors caught compile time left run time checks 
example utilizing compile time type checking extent situations caught compilation cared run time 
eiffel example language designed permit high degree compile time type checking situations run time type checking 
parameterized classes combination hierarchical type system known create complicated type checking situations 
similar situations created variety language constructs object oriented languages 
type system beta extends type system simula illustrating problems 
extension allows classes parameterized classes types means called virtual classes described 
type checking problems arise situations analyzed alternative solutions described 
argued approach combination static dynamic type checking gives reasonable balance avoiding separate type system 
language constructs reduce amount run time checks certain situations discussed 
addition examples shown beta 
notions quali ed remote access assignment described section beta simula 
language notation modi ed version beta similar notation 
quali ed consider class hierarchy vehicle class owner integer integer bus class vehicle integer truck class vehicle integer car class vehicle avehicle vehicle abus bus truck classes bus truck car subclasses class vehicle 
attributes owner local integer variables avehicle abus pointers objects 
quali ed class 
quali cation restricts set objects may refer 
avehicle quali ed vehicle 
implies avehicle may denote instances class vehicle instances subclasses vehicle 
abus may denote instances class bus instances possible subclasses bus 
possible abus denote instances class vehicle truck car 
order describe type system precisely introduce formal simple notation 
class hierarchy beta object oriented languages described lattice classes partially ordered relation subclass symbol relation superclass 
pre de ned class property superclass classes explicitly available language class object smalltalk beta 
lattice class plays role top 
object vehicle bus truck car special class subclass classes 
plays role bottom lattice 
refers object value 
class 
class introduced purely technical reasons 
introduce functions de nitions object returns object denotes qual returns formal class actual class object 
declaration implies qual means qual may computed compile time 
object qual constant 
consider new action new generates object qual purpose sure qual object de ned value qual class 
function object varies run time may denote di erent objects 
role function object express dependency runtime behavior 
idea quali ed stated relation true program qual object ref qual ref example consider avehicle relation qual object avehicle qual avehicle expresses restriction objects avehicle may denote expressed english 
remote access attributes quali cation check compile time attributes legal 
remote identi ers legal avehicle owner abus owner abus owner example rst remote access legal qual avehicle vehicle class vehicle speci es attribute owner 
remote identi ers illegal avehicle abus simple examples attributes instance variables procedures may attributes rules legal attribute access 
remote access procedure attributes correspond message sending smalltalk 
smalltalk variables quali ed possible check compile time message legal 
assuming method attribute smalltalk expression avehicle give rise run time error message understood 
quali cation possible check compile time kind error occur 
possibility may gives rise error considered type checking problem 
assignment quali ed provide exibility ed may denote objects class 
cost exibility run time check message sending 
comparable cost quali ed signi cantly smaller run time check take place cases assignment 
consider example new bus abus abus avehicle avehicle abus abus new instance bus generated 
instance assigned abus 
statement trivially legal checked compilation 
qual object new bus bus qual abus bus follows qual object new bus qual abus ensures qual object abus qual abus holds true assignment 
assignment legal avehicle may denote bus objects 
legality may determined compile time run time checking take place 
legality statically checked qual object abus bus bus qual avehicle vehicle assignment legal avehicle denotes instance bus 
general may detected compile time 
implies runtime type check performed case 
seen static information qual object avehicle vehicle guarantee qual object abus bus true assignment 
compiler emit run time check ensure qual object avehicle bus assignment illegal possible denote bus object 
statically checkable qual object qual abus give rise comparison truck bus classes ordered 
general assignment statement languages checked ful ll qual object qual order ensure qual object qual holds assignment 
qual qual statically correct qual qual compiler ensure qual object qual run time 
cases assignments quali cations equal run time checking needed 
ability weaken type information object usable order write general code queue list manipulation problem managing queue vehicles described 
result queue operation returning rst object weakly quali ed 
possibility explicitly strengthen type information vital 
gives programmer possibility view object di erent levels abstraction 
example typically views element queue vehicle bus truck 
consider example registers vehicle register bus register truck register 
vehicle register may contain bus objects truck objects 
quali cation build vehicle register vehicle 
parameter insert operation vehicle register quali ed vehicle operations getting objects register deliver quali ed vehicle 
similarly bus register quali ed bus 
task extracting bus objects general vehicle register entering bus register necessarily involve assignment 
simula beta kind assignment possible 
release ei el ers new assignment operator 
assignment abus avehicle ei el 
operator assigns object abus legal rules 
execution operator gives rise implicit run rime check 
value assignment section notion value assignment handled 
rules similar assignment apply kind run time type checking apply 
value assignment meant form copying state objects 
exact way copying di ers language language 
purpose assume value assignment means copying state source object state destination object 
introduce functions copy copies contents assuming qual qual project qual selects qual part variables denote objects 
value assignment beta form abus abus assignment ect values attributes owner abus copied corresponding attributes abus copy abus abus assuming abus abus quali ed bus qual abus qual abus bus consider value assignment abus avehicle abus refers object bus object avehicle refers object vehicle 
vehicle attributes object denoted abus may copied object denoted avehicle 
stated expression copy project object abus vehicle project object avehicle vehicle picture illustrates situation 
vehicle bits object referred abus copied corresponding vehicle bits object referred avehicle 
dots indicates objects may fact larger deferred formal quali cation 
vehicle bus 
vehicle abus avehicle consider assignment form avehicle abus situation opposite previous situation 
potential smaller object copied potential larger object 
compile time known objects vehicle attributes common 
possibility require avehicle denotes object quali ed bus 
analogous situation assignments form avehicle abus 
case bus attributes copied 
semantics value assignment determinable compiletime bits copy source object destination object 
essentially semantics value assignment beta 
semantics disadvantage situations information bits may lost 
consider case avehicle refers bus object attributes bus object referred abus copied bus object referred avehicle 
general nd largest common subclass actual objects denoted copy common attributes 
languages value assignment de ned pure copying bits 
way state object may forced object 
di erent object states may denote value 
desirable de ne semantics value assignment bitwise copying 
situation worse considering equality 
bitwise comparison objects may correspond equality values represented objects 
general dicult suggest language constructs handling value assignment equality 
notice hierarchical type systems distinction semantics value semantics assignment equality explicit 
relation object oriented programming distinction crucial 
classes type parameters virtual classes beta generic classes ei el possible de ne classes parameterized classes types 
pow see precise description value assignment language mechanisms complicate rules checking legality assignments 
examples show subclassing rules assignment associated subclasses may expressing types parameters 
basis analysis 
discussion generalized section 
consider procedure entering vehicle kind register 
part entering vehicle going get license number owner vehicle supposed 
function delivers new integer value insert proc par vehicle enter par par enter par register parameter par known denote instances class vehicle safe access attribute 
abus denotes instance class bus subclass vehicle type parameter invocation insert legal abus insert type legality handled rule assignment abus par parameter insert 
consider insert part general register class parameterized type vehicles register 
intention de ne specialized registers restricted hold objects class bus subclasses similar specialized registers truck car objects 
quali cation type parameter par procedure insert declared virtual 
done order strengthen quali cation specializations register 
general register able hold vehicle objects classes bus truck car vehicle objects 
register class type virtual class vehicle insert virtual proc par type enter par par inner 
general class subclass register class registers may hold buses 
accomplished restricting virtual class type bus class register type extended class bus insert extended proc par par owner inner restricting type type bus serves purposes 
enables say parameter procedure insert bus guarantee non buses inserted internal data structures register shown example restriction apply 
problem enforce restriction topic rest section 
second purpose inside safe access attributes class bus 
expression par example 
add expressiveness language statically type checked 
quali cation virtually quali ed general known compile time quali cation extended speci class 
example par quali ed vehicle register bus 
par quali ed virtual class relation qual par type vehicle type may di erent extensions di erent subclasses register determine qual par compile time 
quali cation aregister type depends quali cation aregister 
assertions aregister type vehicle qual object aregister register aregister type bus qual object aregister general subclass register gives rise assertion kind 
notation object aregister type denote virtual quali cation 
quali cation parameter par depends quali cation aregister 
notation qual object aregister insert par denote quali cation speci par 
deduce object aregister type vehicle qual object aregister insert par vehicle relations little practical determining legality assignments par seen 
assignment avehicle aregister insert prove assignment holds qual object aregister insert par qual object aregister insert par relation states quali cation object referred par subclass quali cation par associated object referred aregister 
left hand side relation vehicle conclude demand object referred avehicle vehicle may stronger 
analyze situations assignment virtually quali ed 
case consider assignment independent context 
cases take context assignment consideration 
cases assume declarations avehicle vehicle aregister register case consider assignment avehicle aregister insert problem quali cation object aregister determined compile time 
qual object aregister register aregister type vehicle assignment legal 
hand qual object aregister aregister type bus assignment legal qual object avehicle bus implies general case assignments virtually quali ed statically checked 
information program principle possible calculate upper bound needed quali cation 
done cases 
case consider imperatives new register aregister new bus avehicle avehicle aregister insert qual object aregister register qual aregister insert par aregister type vehicle qual avehicle bus relation ful lled bus vehicle 
case consider imperatives new aregister new vehicle avehicle avehicle aregister insert qual object aregister qual insert par type bus qual avehicle vehicle relation violated case 
examples shows assignment statically type checked general case 
compiler infer type object data ow analysis statically check 
full data ow analysis possible limited form targeted recognize case guaranteed exactly declared quali cation proposed ei el 
ect achieved beta part objects statically allocated 
see 
ect achieved called homogeneous variables type exact 
type checking problem described general occurs couple di erent language constructions 
virtual quali cation chosen illustrate problem 
classes type parameters shows problem subclasses allowed strengthen quali cation type parameter 
ect achieved self relative types current 
example classes virtual procedures 
subclasses allowed restrict type parameters re implementations procedures problem occurs 
heart problem explained observing notion quali ed help case 
essence quali ed guarantee denoting object certain class 
useful safe assume object attributes class 
assigning object compiler need calculate quali cation described section legality assignment cases checked statically 
quali ed allows determine quali cation object group constructions described earlier section introduces objects demands may increase quali cation 
notion quali ed help calculate upper bound demands 
di erent ways safely handle type checking type parameterized constructions 
allowing type demands strengthen 
introducing type exact 
run time checks rst solution adopted example simula virtual procedures speci ed parameters arrays parameters conform exactly 
situations works practice due possibility dynamically strengthening quali cation object 
solution proposed suggested allowed strengthen type demands subclasses weakening 
weakening type constraints possible trellis owl limited practical value practice mean xed type 
beta virtual class xed subclass see meaning declaration strengthen subclass 
suggests technique weakening demands classes type parameters 
weakening questionable practical value 
noted beta ers alternative suggest alternative 
second solution exempli ed part objects beta suggested type enforce rule ei el 
consider introduce new kind denote objects belonging exactly declared class 
choice expressive power statically type checkable constructions 
beta choice allow constructions require run time type checking 
route followed dynamic strengthening quali cation described section 
limiting run time checks general virtual classes involve run time checking 
beta constructs possible avoid run time checks 
class virtual class type may de ned fixed extended 
implies type virtual class extended subclasses 
ect obtained declaring static part object known extension type possible quali cation par insert xed class bus 
reason virtual classes procedures may extended subclasses class object 
note fact type exact 
subclassing versus subtyping claimed need special interface inheritance hierarchy di erent class subclass hierarchy interface hierarchy type checking purposes class subclass hierarchy 
example beta version examples demonstrates possible class subclass hierarchy type checking 
previous examples introduces need run time type checking 
beta approach class subclass hierarchy type checking say want distinguish interface implementation class 
language separate mechanism covered 
example demonstrates possible colorpoint subclass point procedures local point equal objects subclass 
point class integer move virtual proc dx dy integer enter dx dy new dx dy inner exit equal virtual proc eq boolean enter eq inner exit eq way language contains special expression giving object expression evaluated pseudo name 
class class qual object order parameter equal point subclasses point quali ed 
point object quali cation point 
consider subclass colorpoint point colorpoint class point color move extended proc inner equal extended proc eq eq inner objects subclass colorpoint colorpoint 
implies quali cation parameter colorpoint equal may extended test equality attribute colorpoint objects 
expressed qual object qual object noted notion may obtained virtual class 
point de ned virtual class virtual class point colorpoint extended extended class colorpoint see discussion 
example illustrate problem discussed section 
time construction cause quali cation strengthening 
examples classes illustrate typechecking problems 
pl pr point cl cr colorpoint pl pr equal cl cr equal cl pr equal pl cr equal cases inserted run time tests analogous example section 
assuming pr pl denote points cl cr denote case fail run time 
try compare point object colorpoint object executing equal procedure colorpoint object point object parameter pointed lead evaluation expression denoting point object invalid point object attribute examples situations run time checking may avoided part objects 
suppose objects point colorpoint equal equal equal equal known compile time refer instances point refer instances colorpoint 
words constant 
ect case statically type checked 
case pass case type error 
recalling di erent solutions type checking problem nd 
allowing type demands strengthened 
adopting attitude de nition class colorpoint wrong strengthening demands parameter procedure equal move 
attitude taken 
ect programs illegal 
phrased slightly di erent classes point colorpoint type compatible 

introducing type exact 
ect possibility shown part objects 
expressions statically checkable 
alternative write general code managing possibly sub classes points great practical value 
ect suggested restriction ei el 
proposal homogeneous variables example 
type exact variables useful mechanism situations nd strong restriction general case 
conclude discussion nally show beta formulation example 
test proc point enter exit equal run time check statically known refer instances point colorpoint necessary perform run time check call equal 
refers colorpoint refer instance colorpoint qual object qual object equal procedure test may called way pl pr test cl cr test cl pr test pl cr test cases need run time check call procedure test requires arguments class point 
execution test cases perform run time test executing equal 
fourth case run time test procedure test fail class pl point relation demand colorpoint assuming pl denoting point object 
rst solution case accepted compiler colorpoint considered subclass point 
require programmer write version test procedure combination argument types 
second solution lead exactly situation pointers considered exact quali cation match 
issues regarding typing programming language design subject 
programming regarded modeling real imaginary part world 
point view conclude important feature class mechanism ability model concepts 
subclassing models specialization inheritance properties application domain 
way class hierarchy de nes type system understandable terms application domain 
type system class concept described discussion strong typing supported exible way 
strength type system regarded amount information conveyed type expression 
information compile time type checking early error reporting 
examples weakening strengthening type expression 
argued certain amount exibility needed order support di erent levels abstraction 
type strengthening expressions gives rise run time type checking 
problems arising classes parameterized types classes analyzed shown traditional approach run time checks certain situations 
discussed amount run time checks decreased completely removed introducing certain restrictions language type exact forbidding type strengthening 
argued restrictions useful situations allowing restricted cases hamper expressiveness language 

received useful comments colleagues students anonymous referees 
canning cook hill interfaces strongly typed object oriented programming oopsla object oriented programming systems languages applications sigplan notices vol 
oct cook proposal making ei el type safe ecoop european conference object oriented programming cambridge university press 

dahl nygaard simula common base language publication norwegian computing center oslo 
current version programming language simula swedish standard ss isbn 
dahl nygaard development simula languages history programming languages ed 
wexelblat academic press new york 
goldberg robson smalltalk language implementation addison wesley publishing 
kristensen madsen ller pedersen nygaard syntax directed program modularization interactive computing systems ed 
degano sandewall north holland kristensen madsen ller pedersen beta programming language shriver wegner ed research directions object oriented programming mit press 
madsen ller pedersen object oriented programming may ecoop european conference object oriented programming lecture notes computer science vol 
springer verlag 
madsen ller pedersen virtual classes powerful mechanism object oriented programming oopsla objectoriented programming systems languages applications sigplan notices vol 
oct meyer object oriented software construction prentice hall meyer static typing ei el 
interactive software engineering july nygaard basic concepts object oriented programming sigplan notices vol 
october 
palsberg 
schwartzbach substitution polymorphism object oriented programming oopsla ecoop objectoriented programming systems languages applications sigplan notices 
scha ert trellis owl oopsla object oriented programming systems languages applications sigplan notices vol 
nov 
stroustrup programming language addison wesley 
wirth programming language pascal acta informatica 

