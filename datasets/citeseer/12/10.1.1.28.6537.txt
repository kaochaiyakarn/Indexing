unu iist international institute software technology unu iist report relational model object oriented programming jifeng liu zhiming li may unu iist unu iist reports unu iist united nations university international institute software technology research training centre united nations university unu 
macau founded 
started operations july 
unu iist jointly funded governor macau governments people republic china portugal contribution unu fund 
providing thirds fund macau authorities supply unu iist office premises furniture fellow accommodation 
mission unu iist assist developing countries application development software technology 
unu iist contributes programmatic activities 
advanced development projects software techniques supported tools applied 
research projects new techniques software development investigated 
curriculum development projects courses software technology universities developing countries developed 
university development projects complement curriculum development projects aiming strengthen aspects computer science teaching universities developing countries 
courses typically teach advanced software development techniques 
events conferences workshops organised supported unu iist 
dissemination unu iist regularly distributes developing countries information international progress software technology 
fellows young scientists engineers developing countries invited actively participate projects 
doing projects trained 
technical focus unu iist formal methods software development 
unu iist internationally recognised center area formal methods 
software technique universally applicable 
prepared choose complementary techniques projects necessary 
unu iist produces report series 
reports research technical administrative records unu iist activities research development achievements 
reports published conference proceedings journals 
please write unu iist box macau visit unu iist home page www iist unu edu know unu iist report series 
zhou director unu iist international institute software technology box macau relational model object oriented programming jifeng liu zhiming li report presents semantics object oriented language classes visibility dynamic binding mutual recursive methods recursion 
semantic framework identifies class declarations commands designs 
programming constructs language assignment conditional composition recursion defined exactly way counterparts imperative programming languages 
approach accessible users familiar imperative program design enables existing tools methods verification refinement developed languages 
furthermore algebraic laws developed imperative languages remain applicable designing object oriented programs 
jifeng senior research fellow unu iist professor computer science east china normal university shanghai tong university 
research interests include mathematical theory programming refined methods design techniques mixed software hardware systems 
email iist unu edu liu zhiming visiting scientist unu iist leave department mathematics computer science university leicester england lecturer computer science 
research interests include theory computing systems formal methods specification verification refinement fault tolerant real time concurrent systems formal techniques oo development 
email liu mcs le ac uk li assistant professor university macau 
research areas interval temporal logic formal specification verification simulation computer systems formal methods system design implementation 
email mo partly supported british epsrc gr 
copyright fl unu iist jifeng liu zhiming li contents contents computation model expression commands skip 
chaos 
conditional 
non determinism 
composition 
iteration 
assignment 
simple assignment 
update attribute 
assignment type casting 
simultaneous assignment 
variable declaration 
method call 
class declarations class declaration 
composing class declarations 
definedness declaration section 
formalisation methods 
report may unu iist box macau widely recognised design development object oriented programs intricate 
need formal basis object oriented development identified researchers 
demonstrates programming theory hoare constructing reliable object oriented programs 
semantics object oriented language classes visibility dynamic binding mutually recursive methods recursion 
simplicity forbids redefinition variable scope omits types investigated separately 
language sufficiently similar java meaningful case studies capture central difficulties 
semantic framework identifies class declarations commands designs 
programming constructs language assignment conditional composition recursion defined exactly way counterparts imperative programming languages 
approach accessible users familiar imperative program design enables existing tools methods verification refinement developed languages 
furthermore algebraic laws developed imperative languages remain applicable designing object oriented programs 
approach commands denote binary relations states variables objects classes 
variables primitive data types take values corresponding type object states represented tuples attribute values recursive nesting sharing 
treat method design set parameters class tuple meanings methods 
state contains necessary environmental information support definedness check 
general program modelled design form wf predicate wf establishes definedness program design acts behavioural specification 
treatment integrates dynamic type visibility check mechanism traditional specification oriented semantics 
adopt compositional approach specify properties classes meanings methods 
commands class declarations denote binary relations states declaration provides contextual information structure class relationship 
composition class declarations simply merges components consistent behaves chaotic design 
class declaration sector gives rise design initialises state variables objects classes 
build logic object oriented programs conservative extension standard predicate logic style 
alternative approach undertaken naumann define semantics oberon programming language predicate transformer employ standard technique type theory denotational report may unu iist box macau computation model semantics semantics defined terms typing derivations 
abadi leino develop logic object oriented programs style hoare prove soundness discuss completeness issues 
defines rich object oriented programming type system subtyping predicate transformer 
uses sum type suggested back butler avoid complications typing logic reasoning record types 
rustan leino extended existing refinement calculi object oriented features restricting inheritance dealing class visibility 
works deal sharing concurrency 
organised follows 
section provides computation model object oriented programs explores structure context states 
section deals expressions examines definedness 
devote section formalisation commands 
section investigates class declarations shows parallel merge operator employed defining meaning composite declarations 
discuss algebraic laws language section 
concludes short discussion 
computation model imperative program identified binary relation ff ffl ff denotes set program variables known program 
ffl predicate relates initial values program variables final values takes form called design df ok ok pre condition true program starts 
post condition holds program terminates 
represent initial final values program variables respectively 
simplified model assumption universal data type ignores issues dynamic typing data accessibility 
clearly cope characteristic features object oriented program development 
formalising behaviour object oriented programs computation model adopt takes account features 
object oriented program operates global local variables objects 
ensure legal access variable model equipped set visible attributes addition set global local variables known program 
report may unu iist box macau computation model 
due subclass mechanism object lie subclass original declared 
result behaviour methods depend current type 
support dynamic binding mechanism method call model keeps track dynamic type object 
enables validate expressions commands framework type variable properly recorded 

imperative languages state variable simply value takes moment 
object may contain attributes object type value represented finite tuple records current type object values attributes probably recursive nesting 
model object oriented program denotes binary relation ff predicate relates state activation program state termination ff identifies environment program executes 
environment ff divided categories 
category provides contextual information classes relationships ffl cname set classes declared ffl superclass partial function maps class direct superclass superclass states direct superclass 
second category describes structure class detail class name cname includes ffl attribute set declared inherited attributes class 
am um stand type initial value attribute class referred type initial discussion 
ffl method set methods declared inherited signatures specifications fm 

indicates method value result value result parameters respectively referred 
behaviour method captured design 
third category identifies variables accessible program ffl alphabet set global variables known program fx report may unu iist box macau computation model represents type variable built data type boolean type real numbers class name referred type discussion 
notational simplicity abuse notation writing alphabet abbreviate alphabet projection maps pair element 
similar interpretation apply cases deal local variables attributes 
ffl set local variables scope fv tm ffl set attributes visible inside current class declared private declared inherited public protected attributes class 
notational convenience assume existence disjoint sets names variable names class names attribute names method names 
state model binds variables alphabet current values 
variable primitive data type take value type 
variable object value tuple values attributes current type 
mg fa 
value attribute summary state model consists values logical variables alphabet cname superclass attribute method program variables sets alphabet 
notations set variables 
design frame form denotes predicate list contains logical program variables set said superclass exists finite family fn ng class names superclass introduce binary relation types follows 
superclass 
general list types define df ffl denotes length df min report may unu iist box macau expression expression section deals expressions illustrates validate expression determine value 
expression forms null self validate expression introduce predicate true just circumstances successfully evaluated 
variable defined known program 
df alphabet notation null represents defined object 
null df true type null df null null reserved class name 
adopt convention null cname 
expression defined class declared 
df cname denotes newly created object class type new df df 
ng attribute fa 
initial type test defined boolean expression declared class defined object 
df cname type cname type df value expression determined value object class 
df null myclass type cast equal non null object subclass df null myclass df type class type df attribute selection defined non null object attribute visible inside current class 
df type cname null myclass report may unu iist box macau commands df type df type myclass attribute update defined provided visible type subtype df type type myclass type class value obtained value changing value attribute value type df type df phi fa 
fg exemplifies definedness built expressions df type type eand df type type variable self referred definition methods treated local variable model 
self df self list expressions 
define df ffl commands section deals commands 
language supports typical object oriented programming constructs skip termination chaos abort delta conditional non determinism sequence iteration var declaration le method call report may unu iist box macau commands framework command denotes design form wf predicate wf true command defined initial state design capture dynamic behaviour command 
demonstrate programming operators defined exactly way counterparts imperative languages 
approach comprehensible users familiar existing languages 
skip program skip terminates successfully 
defined 
skip df true true chaos chaos worst program behaviour unpredictable 
chaos df false true conditional designs 
notation delta describes program behaves initial value true initial value false 
delta df type conditional df skip delta represent floyd assertion fails initial value false effect 
fp ng family designs 
alternation ng fi selects execute guard true 
guards false behaves 
ng fi df report may unu iist box macau commands type chaos non determinism designs 
notation stands program executed executing indication chosen 
df composition designs 
composition describes program may executed executing terminates started 
final state passed initial state df ffl iteration design 
condition notation repeats program long true iteration 
df ffl delta skip ffl stands weakest fixed point recursive equation 
assignment assignment command form le le lies categories 
program variable 

le attribute object le 
report may unu iist box macau commands 
le object le type casting 
simple assignment execution assigns value expression variable defined defined type matches 
df type type fxg true update attribute execution assigns value attribute object df define df notice assignments defined simple assignments defined terms defining assignments respectively 
assignment type casting command behaves simple assignment subtype declared type supertype type 
df type type simultaneous assignment list variables list expressions 
execution assigns values members list corresponding members list simultaneously 
df distinct type type true predicate distinct returns value true members occurs twice 
report may unu iist box macau commands distinct df ffl indicates variable 
variable declaration introduce new program variable form declaration var permits variable type portion program follows 
complementary operation called takes form terminates region permitted portion program variable may called scope 
case called local variable 
formally declaration defined var df alphabet true fv tg df true fvg theta fvg theta represents set removal variable note constraints forbid redefinition variable scope 
convenience allow variables declared list provided distinct 
var df distinct 
fv alphabet true fv method call lists expressions 
program assigns values actual parameters formal value value result parameters method object executes body terminates values result value result parameters passed back actual parameters 
df type cname method myclass report may unu iist box macau class declarations myclass var self self self self type method fi ffl value result value result parameters method class myclass types stands design associated method class ffl self specific value result parameter refer object currently activates method object class declarations section deals class declarations definedness 
formal definition individual class declaration subsection 
second subsection discusses composition class declarations 
formalise class declaration section single semantic entity final section 
class declaration class declaration cdecl form class extends pri pro pub meth df val res ffl df val res ffl report may unu iist box macau class declarations ffl name declared class direct superclass 
ffl section pri declares variables private attributes class represent types constants initial values respectively 
section optional contained class declaration private attributes 
ffl section pro defines protected attributes section optional class protected attributes 
ffl section pub defines public attributes section optional 
ffl methods defined represent value result value result parameters body method method section optional 
class declaration cdecl defined meets conditions 
distinct 

attribute names distinct 
initial values attributes lie corresponding types accordingly 

method names distinct 

parameters method distinct 
method bodies determined individual class declaration defined declaration section program 
formally definedness class declaration defined predicate wd 
wd df distinct 
delta delta delta ffl type ffl type ffl type ffl distinct delta delta class declaration cdecl adds structural information class state followup program role captured design report may unu iist box macau class declarations cdecl df wd alphabet alphabet cname fng superclass fn 
mg pri df fn 
prot fn 
pub fn 
method fn 


logical variables pri prot pub introduced record declared attributes value attribute derived complete superclass relation declared classes defined 
similarly dynamic behaviour methods formalised dependency relation classes specified 
result logic variable method binds method body meaning calculated declaration section 
composing class declarations composing class declarations simply adds contents current environment ff generated component class declarations provided redefinition class scope 
defined parallel merge cdecl cdecl df cdecl cdecl formulated design merges outputs output parallel construct defined cname cname alphabet alphabet alphabet cname cname cname superclass superclass superclass pri pri pri prot prot prot pub pub pub method method method report may unu iist box macau class declarations definedness declaration section class declaration section composition class declarations welldefined contents ff generated meet conditions 
class names types global variables attributes parameters declared section wd df cname primitive stands set global variables attributes declared classes formal parameters declared methods df alphabet cname range method cname attr attr df fx ffl pri prot pub 
function superclass contain circularity 
wd df superclass id abuse notation treating superclass binary relation defining superclass df superclass superclass df superclass superclass df superclass superclass 
attribute class redefined subclass 
wd df cname ffl superclass attrname attrname attrname df fx ffl pri prot pub 
method allowed change signature subclass 
wd df cname dom method dom method ffl superclass method method class declaration section command meaning program ffl defined composition meaning class declarations defined section design init meaning defined section report may unu iist box macau class declarations ffl df init design init seen semantics ffl performs tasks 
check definedness declaration section 
derive values logical variables attribute pri prot pub 

define dynamic behaviour method init df wd wd wd wd alphabet alphabet superclass superclass cname cname cname fn ffl pub cname ffl attribute prot pub mg method 
ffl fm 
method mg family designs sequel 
formalisation methods family designs defined fixed point set recursive equations captures dependency relation declared classes contains class cname method mg equation described follows 
case defined superclass method mg defining equation simply superclass case method defined class case dynamic behaviour captured report may unu iist box macau class declarations body program environment executed 
design governed defining equation oe body function oe revises body program method performing tasks 
decide set attributes visible inside class 
replace attributes class body text attributes object self 
treat method calls body text similar way section passing actual parameters corresponding formal parameters function oe distributes programming operators inductively defined follows oe df oe oe oe delta df oe delta oe oe oe df oe oe oe df oe oe design generates set attributes accessible inside class df true fn ffl pri nm fm ffl prot cname fm ffl pub design delivers set attributes visible main program 
df true cname fm cffl pub effect oe expression defined follows oe self df self report may unu iist box macau oe null df null oe newm df newm oe df self attribute oe df oe oe df oe oe df oe oe df oe oe df oe oe method call mapped oe oe val res df foe myclass method fi similar form method call section formal parameters renamed resolve name conflict 
df var oe oe val oe self oe oe res oe value parameters result parameters value result parameters method class types 
presents relational semantics object oriented programming language 
treatment integrates dynamic type visibility check mechanism traditional specification oriented semantics 
treated programming operators objectoriented language exactly way counterparts imperative languages 
consequently algebraic laws developed imperative languages remain applicable designing object oriented programs 
example conditional non determinism sequence language subject basic laws designed imperative may unu iist box macau guages shown 
conditional idempotent skew symmetric associative 
cond delta provided boolean expression defined 
cond delta delta cond delta delta delta delta conditional choice operator deltab distributes conditional deltac condition cond delta delta delta delta delta law expresses criterion making choice alternatives conditional value condition 
cond delta true non deterministic choice satisfies number laws common forms choice including conditional choice choice choice conditional sequence combinators distribute choice delta delta delta choice choice distributes conditional chaos zero 
choice delta delta choice chaos chaos sequential composition obeys simple obvious laws 
associative distributes leftward conditional 
seq seq delta delta skip unit chaos left zero 
seq skip skip seq chaos chaos report may unu iist box macau assignment subject laws assign assign assign delta delta assign alphabet declaration commutative 
var var var var var var var provided distinct 
redefinition variable scope leads chaos 
var var chaos chaos declaration distribute conditional long interference occurs condition 
free var delta var delta var var delta var delta var var followed effect provided known 
var alphabet law describes similar property var free var model support useful algebraic laws class declarations 
example decls class pri meth df val res ffl report may unu iist box macau decls class pri meth df val res ffl clearly state space differs added new private attribute command ffl ffl behave external viewpoint 
model interactions classes main programs enrich state formalism identifying class communicating sequential process 
addition provide proper equivalence relation class declarations explore comprehensive set algebraic laws support normal form reduction language 
abadi cardelli 
theory objects 
springer verlag 
abadi leino 
logic object oriented programs 
lecture notes computer science springer america 
designing object oriented programming language behavioural subtyping 
lecture notes computer science 
america de boer 
reasoning dynamically evolving process structures 
formal aspect computing 
back butler 
exploring summation product operators refinement calculus 
lecture notes computer science 
naumann 
weakest precondition semantics object oriented language refinement 
lecture notes computer science dong duke rose 
object oriented approach semantics programming languages 
gupta ed th annual computer science conference 
floyd 
assigning meanings programs 
proceedings symposia applied mathematics vol hoare jifeng 
unifying theories programming 
prentice hall report may unu iist box macau hoare jifeng 
trace model pointers objects 
lecture notes international summer school 
germany lano 
reasoning refinement object oriented specification language 
lecture notes computer science springer verlag 
approach object orientation inaction systems 
lecture notes computer science 
class refinement interface refinement objectoriented programming 
proceedings fme springer 
naumann 
predicate transformer semantics oberon language 

olderog ed programming concepts methods calculi 
rustan leino 
recursive object types logic object oriented programming 
lecture notes computer science 

type theoretical basis object oriented refinement calculus 
proceedings formal methods object technology springer verlag tarski 
lattice theoretical fixpoint theorem applications 
pacific journal mathematics vol 
report may unu iist box macau 
