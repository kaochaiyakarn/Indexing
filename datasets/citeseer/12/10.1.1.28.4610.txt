body brain evolution systems generative encoding gregory hornby computer science department brandeis university waltham ma hornby cs brandeis edu jordan pollack computer science department brandeis university waltham ma pollack cs brandeis edu evolve morphology controller arti cial creatures integrated generative processes 
systems common generative encoding body brain 
combining languages single system allows linkage genotype controller parts morphology controls 
creatures evolved system complex previous having order magnitude parts higher degree regularity 
computers powerful richness virtual worlds limited designed inhabit 
construct beautiful complex designs objects creatures 
virtual creatures evolved simulation varga simple robots evolved automatic manufacture lipson pollack 
works direct encoding creature morphology controller 
return spirit sims graph structure generative encoding evolved creating body brain virtual creatures 
previously showed evolutionary algorithm ea lindenmayer system system generative encoding outperformed ea encoding automated design problem hornby pollack 
system evolve complex morphologies robots joints controlled oscillator hornby 
describe extensions creatures integration neural networks controllers 
advantages neural networks generate complex locomotion patterns unconnected oscillators allow progression evolution morphologies sensors reactive controllers 
integrating commands morphology controller genotype creates linkage encoding sims reduce disruption recombination 
systems previously development arti cial neural networks 
kitano system matrices generate connectivity matrix network 
method naturally extend evolution morphology neural controller 
compatible original system producing string build commands technique kuiper 
groupings symbols inside brackets specify connectivity network 
drawbacks system symbol neuron limits ability scale large networks 
system creates networks method similar cellular encoding gruau operators acting links nodes luke spector 
system evolve neural controllers morphologies creatures locomotion 
generative encoding sims allows repetition segments produce hierarchies regularity 
generative encoding system powerful language loops sub procedure elements parameters conditionals achieves order magnitude parts previous varga lipson pollack sims 
sections rst outline design space describe components generative design system results nally close discussion 
experimental method experiments evolve generative genotype speci es construct morphology controller creature 
lindenmayer system system generative speci cation system body brain optimized evolutionary algorithm ea 
system consists network morphology constructor system parser evolutionary algorithm physics network simulator 
morphology constructor morphology constructor simulator extension hornby 
morphology constructor builds model string build commands logo style turtle abelson command language similar system languages creating plants prusinkiewicz lindenmayer 
turtle moves bars created morphology creature 
commands instruct turtle move forward backward change orientation commands creating actuated joints 
building simulating creature commands language store retrieve current state consisting current location orientation stack block repeat enclosed block build commands times forward moves turtle forward current direction creating bar exists traversing existing bar backward goes back parent current bar revolute forward joint range current axis revolute forward joint range current axis twist forward joint range current axis twist forward joint range current xaxis rotate heading turtle axis rotate heading turtle axis left rotate heading turtle axis right rotate heading turtle axis clockwise rotate heading turtle axis counter clockwise rotate heading turtle axis 
evolving oscillating motors neural controllers oscillation function joint speci ed hornby adding parameter revolute revolute twist twist specify rate oscillation adding commands control phase increase set increase phase set decrease set decrease phase set 
example creature constructed language shown gure 
single bar gure built string left forward bar structure gure built left forward right forward 
nal creature command sequence left forward right forward revolute forward shown gure displays creature actuated joint moved half way joint range 
network constructor method constructing neural controllers arti cial creatures similar cellular encoding gruau main di erences 
rst di erence cellular encoding strings build commands trees build commands push pop operators described add branching ability strings 
di erence build commands operate links connecting nodes edge encoding luke spector nodes network 
advantages edge encoding link created build command build command specify weight attach link cellular encoding sub sequences build commands construct sub network independent build tree located 
commands constructing network operate links neurons created link current 
push pop operators store retrieve current link consisting neuron neuron index link neuron multiple links neurons stack 
stack edges allows form branching occur encoding edge pushed stack followed sequence commands pop command original edge current edge 
list commands current link connects neuron neuron decrease weight subtracts weight current link 
current link virtual link creates weight duplicate creates new link neuron neuron weight increase weight add weight current link 
current link virtual link creates weight loop creates new link neuron weight merge merges neuron neuron copying inputs inputs replacing occurrences neuron input neuron current link nth input neuron changes neuron current link nth sibling 
output creates output neuron linear transfer function current weight current link continues neuron neuron parent changes neuron current link nth input neuron current neuron 
actual link new neuron neuron case virtual link weight 
reverse deletes current link replaces link weight original 
constructing network set function changes transfer function neuron current link sigmoid linear oscillator 
split creates new neuron sigmoid transfer function moves current link creates new link connecting neuron neuron weight sequence networks gure intermediate networks parsing split duplicate reverse split duplicate reverse loop split duplicate split duplicate reverse parent merge 
networks start single neuron oscillator function single link weight feeding gure sequence intermediate networks split duplicate reverse split duplicate reverse loop split duplicate split duplicate results current link virtual link neurons merge nal network shown neurons network initialized output value updated sequentially applying transfer function weighted sum inputs outputs clipped range 
di erent transfer functions sigmoid tanh sum inputs linear oscillator 
oscillator maintains state value increases update 
output state value plus weighted sum inputs mapped triangle wave function period minimum maximum 
oscillator increases bias networks outputs cycle sigmoid networks varga lipson pollack simple model sims variety transfer functions oscillating neurons 
combining body brain simultaneously create creature neural controller morphology languages constructing neural network constructing body combined 
processing command string command ects construction neural controller morphology construction command ects construction body modi cations 
push pop operators store retrieve current construction state consists current link current location orientation body 
give neural controller control body time joint command revolute revolute twist twist executed neural command output called 
output neuron controls joint angle actuated joint 
string build commands executed resulting creature constructed behavior evaluated quasi static kinematics simulator similar lipson pollack 
neural network updated determine desired angles actuated joint 
kinematics simulated computing successive frames moving joints small angular increments update structure settled determining creature center mass falls outside footprint repeatedly rotating entire structure edge footprint nearest center mass stable 
parametric systems strings build commands generated context free parametric lindenmayer system lsystem systems grammatical rewriting system introduced model biological development multicellular organisms lindenmayer 
rules applied parallel characters string just cell divisions happen parallel multicellular organisms 
example system started symbol produces strings ab abba parametric system lindenmayer class systems production rules parameters algebraic expressions applied parameter values successors 
parameter values determining production rule apply 
example system started system produces sequence strings advantages parametric system lsystem produce family structures speci structure created determined starting parameters 
similarly parameters repeating patterns connections di erent weights 
example system network loop parent merge split duplicate reverse duplicate reverse system consists productions containing condition successor pairs started produces sequence strings split duplicate reverse split duplicate reverse split duplicate reverse loop parent merge split duplicate reverse split duplicate reverse loop duplicate reverse parent merge 
interpreted split duplicate reverse split duplicate reverse loop split duplicate split duplicate reverse parent merge network constructs shown gure evolutionary algorithm evolutionary algorithm evolve systems hornby pollack 
initial population systems created making random production rules 
evolution proceeds iteratively selecting collection individuals high tness parents create new population individual systems applying mutation recombination 
mutation creates new individual copying parent individual making small change 
changes occur replacing command perturbing parameter command adding subtracting small value changing parameter equation production adding deleting sequence commands successor changing condition equation 
recombination takes individuals parents creates child individual making copy inserting small part 
done replacing successor successor inserting sub sequence commands successor replacing sub sequence commands successor sub sequence commands successor 
experimental results section results evolving creatures oscillating joints controllers neural networks controllers 
evolve creatures set tness function distance moved creature center mass distance ground points dragged ground penalty encourages creatures evolve stepping rolling motions sliding motions 
fitness generation generative non generative generative vs non generative encodings results non generative encoding initially ran sets experiments compare generative encoding non generative encoding 
experiments added constraint creatures sequence bars row part cycle representative limit physically plausible creatures providing shaping bias evolutionary algorithm con gured run population true dynamics simulator actual torques joints calculated constraint allowable torque 
results generative encoding individuals generations morphologies upper limit bars 
non generative encoding allowed build commands generative encoding parameters production rules condition successor pairs production rule successor having maximum build commands 
trials run encoding type average ttest individual generation plotted graph gure 
individuals evolved non generative encoding shown gure individuals evolved system generative encoding shown gure 
addition producing faster creatures system encoding produced creatures greater self similarity parts average number bars ttest creatures non generative encoding system encoding 
evolutionary runs system encoding di erent tness functions higher upper limit number allowed bars 
individuals gure evolved tness function rewarded having closed loops morphology sequence rolling rectangles bars bars asymmetric rolling creature bars legged walking creature bars 
oscillator creatures ran experiments combining construction language section morphology construction language section evolve creatures neural controllers 
encourage networks complex dynamics evolve individuals rewarded average number inputs hidden units range values output units 
evolutionary algorithm con gured run population individuals maximum generations 
experiments run production rules condition successor pairs parameters production rule approximately half runs produced interesting creatures examples evolved creatures shown gure neurons moves rst stretching arms twisting body closes move sideways neurons moves falling time wraps circle neurons moves lower squares arm push forward neurons moves circle roll neurons moves tail roll wheel 
network creature gure shown gure 
addition fairly regular linear sequence outputs corresponds linear sequence joints morphology 
moves twisting roll sideways 
neural network controlled creatures discussion number parts creature increase diculty hand designing controller 
system evolving systems automatically produced creatures controllers hundreds parts varying degrees regularity 
results evolutionary run starting population run creature gure result run seeded previously evolved creature 
method multiple runs evolution way eas optimize explore design space input creature create creatures similar locomotion styles 
alternatively simple creature designed hand evolutionary system improve 
osc sig sig sig sig sig sig sig sig sig sig sig evolved neural network parametric systems way increase complexity basic systems 
types systems probabilistic systems context sensitive systems prusinkiewicz lindenmayer 
probabilistic production rules condition part multiple successors probability replace predecessor 
generating variety similar struc tures system non deterministic unsuitable developing structures need re created time 
way variation applied system addition context 
context sensitive systems examine characters left right character rewritten determine successor replace 
class systems deterministic having parameters results inability take advantage parametric terminals oscillators parameter speci es speed oscillation 
parameters advantage allowing production rule generate class objects 
way parameters analogous arguments function computer program evolution system evolution computer program genetic programming koza 
integrated encoding creating creature morphology neural controller achieved evolutionary techniques evolve systems 
system morphologies controllers evolved creatures 
creatures evolved generative encoding moved faster creatures evolved encoding 
comparison related evolved creatures consisted order magnitude parts higher degree regularity sims varga lipson pollack 
research supported part defense advanced research projects administration darpa 
authors members demo lab dejong ficici funes levy lipson melnik viswanathan watson 
abelson abelson 

turtle geometry 
press 
kuiper kuiper herman 
biological metaphors design modular arti cial neural networks 
master thesis university netherlands 
gruau gruau fr ed eric 
neural network synthesis cellular encoding genetic algorithm 
phd thesis ecole normale sup erieure de lyon 
hornby hornby lipson pollack 

evolution generative design systems modular physical robots 
intl 
conf 
robotics automation 
hornby pollack hornby gregory pollack jordan 

advantages generative grammatical encodings physical design 
congress evolutionary computation 
kitano kitano 

designing neural networks genetic algorithms graph generation system 
complex systems 
varga varga 

directed evolution complex simulation model 
bedau mccaskill packard rasmussen eds arti cial life pp 

koza koza 

genetic programming programming computers means natural selection 
mit press cambridge mass lindenmayer lindenmayer 

mathematical models cellular interaction development 
parts ii 
journal theoretical biology 
lindenmayer lindenmayer 

adding continuous components systems 
rozenberg salomaa 
eds systems lecture notes computer science pp 

springer verlag 
lipson pollack lipson pollack 

automatic design manufacture robotic 
nature 
luke spector luke sean spector lee 
evolving graphs networks edge encoding preliminary report 
koza 
ed late breaking papers genetic programming pp 

stanford bookstore 
prusinkiewicz lindenmayer prusinkiewicz lindenmayer 

algorithmic beauty plants 
springer verlag 
sims sims karl 
evolving virtual creatures 
siggraph conference proceedings annual conference series pp 

