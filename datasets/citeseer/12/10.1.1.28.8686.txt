construction deduction methods formal development software von henke dold rue strecker abt 
kunstliche intelligenz fakultat fur informatik universitat ulm ulm june approach framework type theory ecc extended calculus constructions specifications programs operators modular development stepwise refinement formally described reasoned 
show generic software development steps expressed higher order functions demonstrate proofs asserted effects carried underlying logical calculus 
transformations requiring syntactic manipulations objects level system comprising meta object level provided shown transformations formalized faithfully represent operators object level 
modern software engineering regards software development evolutionary process 
view process starting high level requirement specifications series refinement implementation steps applied successive levels specification eventually yielding program final result process 
formal context demonstrated step refined specification implementation satisfies properties postulated previous higher level specification 
final program satisfy initial requirements provided suitable properties compositionality steps hold 
past experience shown formal verification software developments requires effort higher costs justified situations making traditional post mortem verification impractical 
alternative may analyze development process identify certain steps applied repeatedly refinement patterns 
succeed formalizing patterns verifying properties may considerably reduce effort required formal verification development process 
particular desirable formalize development pattern operator transforms specifications new specifications prove result applying operator yields example refinement argument specification 
accordingly demonstration correctness development step instance formalized pattern reduced showing operator applicable 
approach framework formally describe reason specifications programs development operators apply method outlined 
approach type theory extended calculus constructions ecc unifying logical foundation :10.1.1.38.7596
building ecc define specification language qed roughly introduces syntactic constructs closer style algebraic specifications readable language raw logic semantics grounded type theory 
essence specification represents type member type realization specification 
obviously notion types specifications requires types convey semantic information consequence demonstrating object particular type type checking may involve verifying satisfies semantic properties type general requires theorem proving 
language rich expressing specifications assertions specifications relations specifications natural way 
particular generic development steps expressed higher order functions proofs asserted effect carried underlying logical calculus formalization kind sect 

cases formalization development patterns requires direct description text specification modified instance optimizing transformations patterns formalized operators syntactic representations specifications 
verification applying operator establishes asserted relationship source target typically requires relating syntactic manipulation text source specification modified yield text target semantic relationship meanings texts 
facilitate kind reasoning level formal system provided syntax object language represented data types meta level reflection principle serves link syntactic structures meaning object level 
sect 
develop level system qed show means simple example operators formalized reasoned 
remainder organized follows 
section contains brief description type theory 
sect 
introduce specification language qed 
section presents main approaches formalizing development steps higher order functions meta operators approach level formal system developed 
section discusses aspects qed implementation 
final section contains brief summary 
type theoretic foundation formal basis approach type theory extended calculus constructions ecc augmented inductive types :10.1.1.38.7596
briefly summarize features type theory needed 
ecc advanced type theories may regarded extension simply typed lambda calculus powerful type system 
context important extensions addition dependent types type universes 
sigma types strong sum types generalize cartesian products sigmax type pairs member type 
pi types abstraction types generalize function types 
intuitively pix type dependent functions domain codomain may depend element function applied 
capital letters denote terms term calculus ecc denote variables 
denotes substitution term free occurrences term type universe type types members 
ecc offers kind universes prop type natural numbers curry howard principle propositions logical formulas considered types proofs 
included universe prop data types reside universes type coquand huet demonstrate logical connectives logical quantification leibniz equality coded 
strong sums type universes ecc prove useful encoding program specifications implementations specifications modular development stepwise refinement 
treatment rules proofs notion judgement 
typing judgements form gamma express fact context gamma term type context defined finite sequence declarations depending situation may interpreted type proof formula meets specification 
term typed context gamma gamma type inhabited context gamma exists term gamma derivable 
complete presentation typing rules notion derivability judgements see :10.1.1.38.7596
ecc meta theoretic properties 
obeys church rosser property strongly normalizable type checking decidable 
specification qed extend calculus ecc constructs representing units software development process 
design constructs influenced mainly pvs specification language extended ml 
extensions ecc quite expressive sense mathematical computational concepts wish describe formulated directly naturally 
comprehensive informal qed language provides formal account rules extended calculus 
type constructors introduced form cartesian products dependent record types semantic subtypes specifications 
constructs special forms strong sum types ecc handled differently typing system require special syntax 
cartesian products record types form theta theta ae respectively elements tuples 
common dot notation denotes selection record fields 
semantic subtype fx pg comprises members type satisfy predicate elements semantic subtype denoted member type proof term type 
notation possible proofs expressed usual terms 
distinctive feature typing system conversion mechanism able convert members type members different type automatically 
example applying function requires member fx odd natural number illegal member subtype 
find term proof odd may rewrite application 
general possible find required proofs automatically proof obligations generated 
proof obligation placeholder term filled prover 
proof obligations postponed type checker requires type information 
specification consists usual signature part axiom part signature part normally corresponds dependent sigma type axiom part collection propositions elements type prop restrict set acceptable models signature 
instance specification declares type setoid consisting type binary boolean function eq restricted equivalence relation setoid spec type eq theta ax equivalence eq realizations specifications structures satisfy axioms 
example structure struc eq eq type setoid condition equivalence eq holds 
structure type checked proof terms proof obligations generated fill missing proofs 
proof obligations derived specification substituting terms structure axioms 
example obligation equivalence eq 
proof proof obligation structure converted struc eq eq setoid conversion mechanism casting construct qed 
term causes typing system check member type type check fails system tries generate term type introducing proof obligations 
feature generate proof obligations necessary establish correctness development process 
function example realizes refinement map import specifications imp imp export specification exp ae imp imp struc exp type casting function body produces proof obligations intuitively state realization fulfills axiom part specification imp ae fulfills axioms exp mechanisms form inductive datatypes follow ore extension ecc 
polymorphic lists example defined means list type datatype type nil cons theta note names constructors inductive datatypes introduced explicitly type intro list nil 
case construct allows structural induction inductively defined datatypes definition functions means higher order primitive recursion seen variant concept hom functionals exhibits natural correspondence structure program proof data structure 
example function map polymorphic lists map type list list list case nil cons theta list rec list rec notation type denote type parameters usually provided explicitly left implicit deduced type checking 
completely specified describing behavior constructors separately 
second case case construct function applied head element concatenated result rec recursive call map inductive datatypes representing booleans natural numbers polymorphic lists list appropriate operators predefined 
fix construct allows defining recursive functions restricted form mutual recursion allowed functions proven total 
consider example definition factorial function fix iszero gamma measure measure function function domain case range type definition generates termination correctness condition iszero true gamma standard ordering default 
condition discharged ensure typedness measure functions utilized obvious way prove properties recursive functions means noetherian induction 
formalizing development steps section approaches formally representing reasoning software development steps qed ffl higher order functions ffl meta functions 
representation steps higher order functions formalization transformations higher order patterns considered researchers 
example program transformations recursion removal expressed second order patterns defined simply typed calculus 
opposed treatment powerful framework qed demonstrate possible formalize verify large development step illustrated schematic algorithm global search 
due space limitations essential features sketched rigorous mathematical treatment verification 
global search generalization known search strategies backtracking depth search see details 
starting requirement specification extension specification needed defines additional datatypes operations realize global search algorithm 
extended structure combined specification called global search theory 
theory generic algorithm defined 
instantiating scheme specific problem structure proof structure fulfills axioms global search theory suffices synthesize algorithm realizing constructive solution problem 
method derive key search algorithm show verification easily obtained applying correctness proof transformation specific problem structure 
starts specification type type prop theta prop ae global search theory spec type theta prop init satisfies theta prop split 

theta prop split theta set extract 
theta prop extract theta set ax init ax split ax satisfies init definition global search theory domain type range type input condition restricting legal inputs input output relation 
problem formally described req spec set elem elem true elem req spec function takes tuple member type input provides proposition states exists set contains solutions elem elem holds 
schematic algorithm defined realizes constructive proof proposition 
global search theory parameterized specification member parameter 
basic idea global search represent manipulate sets candidate solutions 
starting initial set containing solutions global search algorithm repeatedly extracts solutions splits sets subsets sets remain split 
sets represented implicitly descriptors predicate satisfies determines candidate solution set denoted descriptor 
furthermore predicate describes legal descriptors 
process regarded tree search procedure nodes represent sets implicitly described type set descriptors arcs represent split operation 
theory briefly sketched fig 
function gs fig defines schematic algorithm realizes global search procedure 
receives input realization global search theory additional functions tcl result function implements search strategy global search theory 
function takes set provides arbitrary element remaining set 
function tcl termination 
produces set nodes search tree finite set successors respect split 
relation calculates transitive closure split specifies finite depth search tree 
implicitly yields finite width polymorphic type set finite suppose type set finite sets type suitable operations 
gs gs global search theory tcl type active set gs solution set fd invar gs active solution ae fix type set active solution type empty active solution active gs split solution gs extract measure active solution type card tcl active solution schematic algorithm global search sets split produces node finite set direct descendants 
resulting function means wellfounded recursion 
guarantee typedness gs supply measure function 
cardinality transitive closure active set nodes considered 
invariant domain type ensure basic properties 
node active set legal descriptor 
elements set solution fulfill condition 
arbitrary nodes active set successor split 
relation 
concept semantic subtypes adequate tool represent invariants functions 
establish correctness defined development step show arbitrary problem specification global search theory instantiated function constructive solution calculates set elements range type satisfy condition initial parameters init active solution soundness theorem fig 
additionally ensure type correctness type correctness conditions generated 
states measure function applied parameters recursive call yields smaller value function called actual parameters 
furthermore parameter recursive call initial parameters satisfy invariant proof obligations successfully discharged interactive higher order gentzen prover pvs specification system 
techniques outlined readily formalize generic development steps including large transformations divide conquer dynamic programming investigated munich cip group 
soundness theorem gs global search theory tcl fd inst gs gs tcl init set insert gs init gs init sol sol set inst init set init sol sol set true soundness theorem global search meta operators typical development steps representable language constructs introduced sect 

consider example simple task replacing certain axiom specification text axiom implies construct refinement map modified specification original 
precisely gamma current context abbreviate define specification sp spec pm typed gamma 
furthermore assume judgement gamma derivable 
task construct realization sp relative realization specification sp spec pm refinement map specification sp specification sp constructed ae sp struc type rule structures immediately yields gamma ae sp sp transformation kind takes specification sp formula index results new specification sp replacing th axiom sp needs access internal structure order manipulate syntactical text correctness formalization involves reasoning derivability judgements meta reasoning 
furthermore development step deals term necessarily typed current context gamma gamma describe meta architecture allows express development steps transformations means functions representations programs proofs specification texts 
functions called meta functions amenable formal treatment state prove characteristic properties 
historically meta architectures formalized investigated logicians pioneering carried godel 
application oriented note need typed context gamma occurs free view meta level architectures extensively realm mechanical theorem proving cases quite straightforward construct proof means syntactic analysis problem hand 
important issue meta programming meta reasoning represent software development steps expressing certain semantics steps 
step encodes syntactic categories proof theory qed approach godel 
encoding constitutes meta level 
encoding write arbitrary functions express relations free variable result substituting term free occurrences variable yields 
particularly important predicate derivability predicate expressing relation type context gamma 
features allow encode development steps proof steps meta functions express prove semantic relations arguments results 
adequacy faithfulness encoding yield reflection principles allow exchange results meta level object level sound way 
due lack space merely fragmentary sketch architecture 
represents syntactical categories object language syntax means inductive datatype 
elements data type seen syntax terms 
syntax necessarily represent typed terms 
representations specifications example formed means constructor type list id theta theta list id theta 
argument represents signature second represents axiom part id just type identifiers 
straightforward introduce recognizers selectors alternative datatype 
specifications recognizer selectors recognizer yields true represents specification respectively select representations signature axiom part 
utilize constructor corresponding selectors contexts represented elements type ctxt list representations type assignments judgements represented elements ctxt theta theta 
data types ctxt called representation types elements meta terms 
quoting mechanism associates syntactic categories object level terms contexts judgements meta terms example spec mapping object level constructs available discourse metalevel 
standard exercise encode term calculus 
defines functions occurs type theta var type theta var theta means higher order primitive recursion occurs reduces true occurs free reduces binary relations terms syntactic equality modulo alpha convertibility convertibility coded type theoretic setting closures appropriate binary relations 
likewise derivability judgement denoted deriv encoded set place predicate closed rules type calculus qed 
fact expresses adequacy faithfulness encoding derivability gamma derivable exists term deriv gamma obviously proof carried object level meta level accomplished informal theory allows reason levels 
result allows deduce derivability gamma object level existence term type deriv gamma 
transition object level meta level named reflection upwards corresponding change meta level object level called reflection downwards 
reflection rules admissible inferences principle 
practical point view reflection rules crucial allow exchange results object level meta level exemplified 
remaining formalize development step described section meta architecture demonstrate apply meta functions corresponding correctness results 
meta function replaces representation specification sp representation th axiom representation term replace replacement lists sp sp trueg nat sp replace sp simply replaces th element list axiom representations argument 
predicate states resulting representation specification refinement argument representation specification ctxt ctxt sp sp trueg nat deriv append ctxt sp nth sp res sp res replace deriv ctxt res sp representation term despite syntax mere formalization refinement term constructed meta exposition 
functions append nth denote concatenation lists selection th element list respectively 
proof correctness result straightforward direct formalization informal exposition call corresponding proof correct prf proof reflection principles utilized construct refinement map specification sp result transformation 
go back running example apply corresponding correctness result 
assume certain context gamma specification sp 
furthermore representation certain axiom fixed natural number 
order apply correct prf construct element deriv append gamma sp nth sp holds 
construction course completely done meta level 
situations appropriate prove corresponding problem object level find term derivable context gamma resulting judgement reflected upwards yielding proof predicate 
simple instantiation correct prf gives correct prf gamma sp res sp deriv gamma res sp judgement reflected object level order get result resulting specification res refinement argument specification 
downward reflection explicitly constructs object level refinement map 
level framework depicted utilized example formal constructions lexical scanner symbol table 
particularly interesting meta function case study involves partial implementation function 
meta function takes specification sp function declared sp realization imp means entities declared sp delivers new specification sp declaration deleted signature part formulas occurs free removed axiom part 
simplified specification sp amenable refinement 
demonstrated able formalize object calculus means meta architecture 
allows encode formal development steps applications steps instances meta level argument case pure object level reasoning kind tedious development instance problem 
software development systems incorporating meta architecture allow users systems add new development proof steps sound way 
importance features lies fact unrealistic incorporate conceivable development step general purpose development system 
note approach meta functions meta properties essentially object functions object properties differ data types operating 
encoding specification proof methods apply object meta level entities 
notes experimental qed implementation interactive support system experiments qed developed 
system implements parser type checker pretty printer qed language 
heart system type checker 
mainly built evaluation function pre terms pre term syntactically correct term may ill typed 
evaluation function takes pre term set definitions possible converts pre term typed term see sect 

ecc types belong exactly type universe 
cases specific universe term belongs irrelevant 
reason system offers possibility anonymous universe type type level system tries exactly determine universe level maintaining set inequalities checking consistency 
parametric polymorphism handled unification 
higher order unification undecidable problems arise practice type checking polymorphic functions solved correctly implemented unification algorithm 
result obtained coding universe polymorphism reductions alpha convertibility features unification algorithm 
interactive top program development process desirable type check specifications realizations development complete 
goal incomplete terms containing placeholders suitable type information may 
development process placeholders replaced members appropriate type 
feature refinement editor provides refinement process similar described extended ml 
approach formal specification software development type theory 
discussed logical basis illustrated elementary principles means simple examples 
experience gained far approach supports hypothesis specification type theory viable alternative common algebraic specifications interesting operations relationships development units dealt combination object level meta level formalization 
described part ongoing investigation formal methods software development effort develop suitable framework 
specifically plan develop basic set generic algorithms meta operators representing development steps long term goal compiling sort reusable knowledge base programming techniques test approach practical attacking non trivial software problems 
aiello weyhrauch 
meta theoretic reasoning algebra 
bibel editors th conference automated deduction pages 
springer verlag 
allen constable howe aitken 
semantics reflected proof 
proc 
th annual ieee symposium logic computer science pages 
ieee cs press 
boyer moore 
proving correct efficiently new proof procedures 
boyer moore editors correctness problem computer science chapter 
academic press 
broy pepper 
programming formal activity 
ieee transactions software engineering se 
church 
formulation simple theory types 
journal symbolic logic 
coquand huet 
constructions higher order proof system mechanizing mathematics 
buchberger editor european conference computer algebra lecture notes computer science pages 
springer verlag 
curry feys 
combinatory logic volume 
north holland publishing 
dold 
constructive program development methodology exemplified lex 
universitat ulm 
dold 
algorithmen 
technical report abt 
ki universitat ulm 
dold 
formal construction symbol table 
universitat ulm 
krieg bruckner system architecture framework 
broy editors correct software formal methods 
springer verlag lncs 
im des 
wirsing methodology development correct software 
broy editors correct software formal methods 
springer verlag lncs 
im des 
giunchiglia smaill 
reflection constructive non constructive automated reasoning 
meta programming logic programming chapter pages 
mit press 
godel 
uber formal der principia mathematica und systeme 

math 
phys 
cip system group 
munich project cip volume ii 
lecture notes computer science 
springer verlag 
harper pollack 
type checking universal polymorphism type ambiguity calculus constructions 
tapsoft volume ii lecture notes computer science pages 
springer verlag 
howard 
formulae types notion construction 
hindley seldin editors curry essays combinatory logic lambda calculus formalism 
academic press 
howe 
computational metatheory nuprl 
proc 
th international conference automated deduction pages 
springer verlag lecture notes computer science 
huet lang 
proving applying program transformations expressed second order patterns 
acta informatica 
knoblock constable 
formalized metareasoning type theory 
proceedings lics pages 
ieee 
available technical report tr department computer science cornell university 
luo :10.1.1.38.7596
extended calculus constructions 
technical report cst university edinburgh july 
luo 
higher order calculus theory abstraction 
information computation 
luo 
program specification data refinement type theory 
abramsky maibaum editors tapsoft volume lecture notes computer science pages 
springer verlag 
ch ore extended calculus constructions ecc inductive types 
information computation 
owre rushby shankar 
pvs prototype verification system 
deepak kapur editor th international conference automated deduction cade volume lecture notes artificial intelligence pages saratoga ny 
springerverlag 

specification transformation programs 
springer verlag 
rue 
report specification language qed 
working universitat ulm 
rushby owre shankar 
pvs specification language 
computer science lab sri international menlo park ca march 
sannella tarlecki 
formal development ml programs foundations methodology 
proc 
tapsoft barcelona number lncs pages 
springer 
sannella tarlecki 
formal development programs algebraic specifications model theoretic foundations 
proc 
intl 
colloq 
automata languages programming vienna number lncs pages 
springer 

type checking specification language qed 
working universit ulm 
smith 
structure design global search algorithms 
technical report kes kestrel institute palo alto ca 
von henke 
algebraic approach data types program verification program synthesis 
mathematical foundations computer science proceedings 
springer verlag lecture notes computer science 
weyhrauch 
prolegomena theory mechanized formal reasoning 
artificial intelligence 

