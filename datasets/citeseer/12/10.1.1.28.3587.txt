polylib library polytypic functions patrik jansson johan jeuring may polytypic program program behaves uniformly large class datatypes 
functional polytypic programming uniformity achieved parameterising functions type constructors obtain polytypic functions 
polytypic function dened induction structure regular type constructors terms polytypic functions 
polyp extension functional programming language haskell construct dening polytypic functions 
polyp type guided preprocessor generates instances polytypic functions inserts applications instances needed 
years polyp construct number polytypic programs example parsing rewriting pattern matching polytypic programs basic polytypic functions relatively known cata map known functions propagate thread 
collected basic polytypic functions library polyp polylib app 

describes polytypic functions polylib motivates presence library gives rationale design 
hope share experience researchers eld 
assume reader familiarity eld polytypic programming 
course library important part programming language 
languages java delphi perl haskell popular partly useful extensive libraries 
polytypic programming language important clear designed library writing polytypic programs dioecult expect programmers write polytypic programs 
hand programmers polytypic programs parser generators equality functions rst attempt describe library polyp expect form content description change time 
goals obtain feedback library design researchers working eld 
moment library contains basic type constructor regular datatype contains function spaces argument left right hand side denition 
polytypic functions 
develop special purpose sub libraries polytypic functions advanced functionality example parsing programs mentioned 
polytypic programs dioeerent versions polyp predecessors implemented number polytypic programs 
example implemented polytypic equality function polytypic show function polytypic parser 
furthermore implemented involved polytypic programs pattern matching rewriting 
brief descriptions programs section 
section introduces format describing polytypic library functions gives overview contents library 
describing polytypic functions description polytypic function consists components name type formal description function names function known known uses function background relationship polytypic functions 
refer polytypic applications section 
example pmap 


function pmap takes function value datatype applies 
known map map 
known uses 
background rst 
problem describing library polytypic functions completely clear specify polytypic functions 
basic combinators immediate category theoretic interpretations speci cation complicated combinators matter obvious 
normally provide formal specications library functions try give depth treatments 
library overview divided library parts see gure 
rst part library contains powerful recursion combinators map cata ana 
part core library sense denitions functions parts 
second part deals zips equality function 
third part consists functions manipulate monads 
fourth fth parts consist simpler useful functions summing 
section describes functions detail 
pmap fmap cata ana hylo para crush recursion operators zips param propagate cross thread monad op flatten conc flatten functions psum size prod pand por miscellaneous overview polylib polylib polytypic functions haskell counterparts prepend letter polytypic haskell name avoid name clash 
bifunctor variants 
types syntactic sugar 
polytypic function thought representation functor rst argument 
argument normally omitted written subscript clarity pmap polytypic functions dened regular datatypes type indicated adding context regular 
omit brevity 
regular type constructor xpoint bifunctor denote functorof recursion operators pmap 


fmap 




function pmap takes function value datatype applies recursively occurrences elements type functor acting types pmap corresponding functor action functions 
function fmap corresponding functor action bifunctor known map map 
charity map written 
known uses 
function fmap denition pmap cata ana hylo para polylib functions 
background map function rst combinators distinguished bird meertens 
traditional map functional languages maps function list elements 
current haskell version map overloaded map functor 


polytypic pmap instance declarations regular type constructors 
function pmap give default instances haskell map 
cata functorof 


ana functorof 
hylo 




para 
functorof 


powerful recursion operators type catamorphism cata data structure recursively replacing constructors functions 
typing cata may unfamiliar denition functorof seen equivalent cata 

mu 
anamorphism ana works opposite direction builds data structure 
hylomorphism hylo generalisation functions simultaneously builds evaluates structure 
paramorphism para generalised form cata gives parameter function access results evaluating substructures structure 
known polylib functorial ml charity cata fold jij ana functions cata para instances visitor pattern 
known uses polytypic functions dened cata pmap crush thread flatten propagate applications 
function para rewrite 
background catamorphism cata generalisation haskell function foldr anamorphism ana category theoretic dual 
catamorphisms introduced malcolm 
hylomorphism fused composition catamorphism anamorphism specied hylo cata ana paramorphism para elimination rule type type theory 
captures recursion pattern primitive recursive functions datatype crush 





function crush op takes structure inserts operator op left right pair values type level 
value empty leaves 
known uses library see section 
functions section dioeerent applications 
background denition crush 
associative operator op unit crush op dened foldr op flatten 
crush arguments fold lists seen alternative cata generalisation fold regular datatypes 
zips 



function takes structure containing pairs splits pair structures containing rst second components respectively 
function partial inverse takes pair structures zips just structure pairs structures shape 
known zip zip theta known uses function denition 
background traditional function zip zip 

combines lists need type result longer list truncated 
general truncation possible types nullary constructor regular types 
general variant transpose called zip transpose 
rst described fritz 
formal denition see hoogendijk backhouse 



functorof 






function op works uses operator op combine values structures just pairing 
zip fail give operator chance signal failure giving type result 
type constructor replaced monad zero didn want clutter complicated type contexts 
function generalisation handle structures dioeerent shape 
call ins fail op op long structures shape fail handle case structures mismatch ins combines results substructures 
type ins type rst argument cata 
known 
known uses function denition equality matching 
background function polytypic variant haskell function zipwith zipwith 


new 
function just just 
bool 


bool bool 
bool 


bool expression eq checks structures equivalent equivalence operator eq compare elements pairwise 
known uses algorithm determine terms top level equal 
background early version polytypic equality function appeared 
function instantiated give default haskell eq class regular datatypes eq 


bool haskell equality function automatically derived compiler polytypic equality attempt moving derivation compiler prelude 
monad operations monad 


monad 



monad 
functorof 


monad 

functorof 

monad 





param monad 

functorof 


function variant pmap threads monad left right structure applying function argument elements structure 
monadic map example state monad record information elements structure traversal 
recursion operators generalised way form general combinators 
known traversals 
known uses unify parser 
background monadic maps catamorphisms described 
monadic map called active traversal closely related thread called passive traversal thread pmap thread id propagate 
cross 
function propagate propagates top level 
function cross cross tensor product structure containing lists generates list structures shape 
list element combination values drawn lists functions generalised thread monad value 
known uses propagate denition 
background function propagate instance transpose propagate cross instances thread 
thread monad 

monad 

function thread tie monad computations elements left right 
known dist 
known uses function thread dene monadic map thread pmap function parser thread parsing monad dioeerent structures 
function thread instantiated haskell prelude function accumulate monad 

propagate cross 
flatten functions flatten 



function flatten traverses structure collects elements left right list 
function variants bifunctor known extract listify 
known uses algorithm nd list immediate subterms term 
function dene flatten flatten cata background relational theory membership relation mem relator type constructor mem elem flatten miscellaneous number simple polytypic functions dened terms crush pmap 
brevity part polylib providing name type denition function 
psum int 
int prod int 
int conc 
pand bool 
bool por bool 
bool psum crush prod crush conc crush pand crush true por crush false size 
int flatten 
bool 

bool bool 

bool eq 


bool size psum pmap flatten conc pmap pand pmap por pmap polytypic applications polylib section lists polytypic applications written years 
candidates inclusion versions polylib 
ffl polytypic show function simple polytypic parser 
ffl pattern matching dened regular datatypes include anonymous 
haskell class member function 
bool express restriction 
function pmatch pmatch 


bool takes pattern value tries match pattern value 
ffl generalising pattern matching symmetric arguments allows named wild cards gives 
program unify unify term subst 


takes terms gives just unifying substitution 
member functions class term generated regular datatype unify polytypic 
ffl function rewriting far away give implementation function rewrite rewrite term 


takes list rewrite rules pairs terms containing variables term rewrites term far possible rules 
ffl dioeerent application area genetic algorithms polytypic functions doing genetic recombinations elements regular datatypes :10.1.1.36.4444
recombination algorithm uses polytypic functions extracting replacing certain substructure 
description polylib library polyp 
library grown experience implementing polytypic functions 
polylib incomplete think included basic polytypic combinators 
consists construction special purpose complete description basic polytypic combinators 
implementation polylib polyp see www cs chalmers se poly polyp bell jay moggi 
functorial ml 
plilp volume lncs 
springer verlag 
bird 
theory lists 
broy editor logic programming calculi discrete design volume nato asi series pages 
springerverlag 
robin cockett tom fukushima 
charity 
yellow series report dep 
computer science univ calgary 
fokkinga 
monadic maps folds arbitrary datatypes 
memoranda informatica university twente june 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
paul hoogendijk roland backhouse 
datatypes commute 
category theory computer science lncs pages 
marieke huisman 
calculation polytypic parser 
master thesis utrecht university 
inf src 
jansson jeuring 
polyp polytypic programming language extension 
popl pages 
acm press 
jansson jeuring 
polytypic 

press 
patrik jansson 
functional polytypic programming implementation 
technical report chalmers univ tech sweden 
lic 
thesis 
available www cs chalmers se lic 
jay bell moggi 
functorial ml 
extended version press 
jeuring 
polytypic pattern matching 
fpca pages 
acm press 
jeuring jansson 
polytypic programming 
afp volume lncs pages 
springer verlag 
malcolm 
homomorphisms 
van de editor mathematics program construction pages 
springer verlag 
lncs 
malcolm 
data structures program transformation 
science computer programming 
meertens 
algorithmics programming mathematical activity 
proceedings cwi symposium mathematics computer science volume cwi monographs pages 
north holland 
meertens 
paramorphisms 
formal aspects computing 
meertens 
calculate 
plilp volume lncs pages 
springer verlag 
fritz 
analytical structural polymorphism expressed patterns types 
phd thesis university michigan 
tim sheard 
automatic generation structure operators 
acm toplas 
ns :10.1.1.36.4444
genetic algorithms haskell polytypic programming 
master thesis teborg university gothenburg sweden 
available www cs chalmers se genetic ps 

