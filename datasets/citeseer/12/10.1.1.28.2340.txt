comprehension processes large scale maintenance research von mayrhauser vans dept computer science dept computer science colorado state university colorado state university fort collins fort collins results observing professional maintenance engineers working industrial code actual maintenance tasks 
protocol analysis explore code understanding differ small versus large scale code 
experiment confirms cognition processes levels abstraction simultaneously programmers build mental model code 
cognition processes emerged levels aggregation representing lower higher level strategies understanding 
show differences triggers achieve goals 
results useful defining core competencies maintenance engineers need documentation development standards 
maintenance software evolution software engineers understand code haven written variety tasks 
existing cognition models emphasize cognition program functional approach program works controlflow approach 
unfortunately validation experiments small programs compared cognition needs industrial software 
developed integrated cognition model observing industrial programmers :10.1.1.28.3297
model basis deriving processes information needs 
table shows characteristics major experiments comprehension models 
important characteristics experiments code size number subjects level expertise experimental method type maintenance task 
listed experiments try validate component model directly indirectly 
exploratory define model 
objective determine characteristics debug processes lead debugging expertise 
table illustrates difference experiments terms code size maintenance task expertise 
observations observed experts working production code 
protocol analysis explore maintenance engineers apply cognition processes described existing models needed integrated cognition model 
integrated cognition model emphasizes understanding built levels abstraction simultaneously level level 
necessitates frequent switches code design application domain knowledge cognition process 
report results exploratory experiment identifies dynamics cognition process maintenance engineers large operational software products 
section describes integrated cognition model model components 
section explains experimental method 
includes participants study experimental procedure protocol analysis protocol analysis technique exploratory research 
classify model components identify information needs cognition processes 
section contains results study focusing emergent cognition processes 
cognition driven need building information show information needs cognition processes 
integrated model built information multiple levels abstraction construct understanding software 
results report degree cognition processes simple multi level activities triggers switches levels 
important prescribes successful maintenance guidelines tools support cognitive activities 
interestingly aggregate understanding processes levels see classes strategies emerge 
interpret results protocol analysis particularly respect maintenance guidelines preservation software product information core competencies 
integrated meta model code cognition existing program understanding models agree comprehension proceeds top bottom combination 
observations indicate program understanding involves top bottom activities led formulation model integrates existing models components 
integrated code comprehension meta model consists program model top model situation model knowledge base 
code size subjects language experimental purpose expertise method understand loc novice pascal test soloway module grad fill blank ehrlich students understand loc novice pascal cluster analysis rist module grad students understand loc experts cobol free recall pennington module professional fortran response time comprehension questions understand loc novice fortran strict recall shneiderman module 
grad students corrective loc experts cobol protocol analysis vessey modules novices enhancement loc experts fortran protocol analysis letovsky modules 
modification loc experts cobol comprehension pennington modules professional fortran questions protocol analysis understand loc experts procedural protocol analysis von mayrhauser corrective module sys professionals vans adaptation shell enhancement table comprehension experiments basis top known domain model component soloway ehrlich topdown model pennington program situation models reflected program situation model components meta model :10.1.1.28.3297
model components reflect mental representations strategies construct 
represent views code various levels abstraction 
knowledge component necessary successfully building 
complete metamodel describes program situation top model building appropriate knowledge constructing mental model code 
model component meta model builds knowledge known domain architecture environment particular program 
model component represents internal representation program understood short term memory strategy build internal representation 
knowledge base furnishes related previously acquired information 
understanding new information chunked stored knowledge base long term memory 
top model typically active code type code familiar 
top representation consists knowledge application domain 
domain model operating system contain knowledge os components memory management process management os structure interactions 
knowledge includes things design pros cons come vs round robin scheduling 
new os easier understand knowledge 
domain knowledge provides motherboard specific product knowledge integrated easily 
lead effective strategies guide understanding 
code completely new programmer pennington mental representation programmers build program model consisting control flow abstraction program 
suppose engineer os experience os maintain 
may start flow control knowledge brought task knowledge programming language standard programming constructs 
module represents scheduling algorithm may contain doubly linked list implement queue process scheduling engineer may able recognize linked list 
developed mental representation program doing statement statement control flow manner program model code 
note functional understanding program accomplished 
program model representation constructed situation model developed 
representation built bottom uses program model create data flow functional abstraction 
example engineer os experience doubly linked list recognized implementation queue process scheduling element situation model 
integrated model assumes engineers unfamiliar domain start building program model 
assume full program model built abstracting situation domain level short beacons situation model low level mappings mappings high level schema plan current mental representation program understanding process strategic plans tactical plans implementation 
control primes program text structure problem real world plan knowledge functional knowledge structures structures program model top structures situation model match documents memory documents read process rules programming plans knowledge 
algorithms 
control sequence 
data structures 
data flow slices 
syntax domain knowledge knowledge top model model code plans discourse knowledge domain program term chunking short beacons program model micro structure macro structure match documents memory read process code term chunking integrated code comprehension meta model unrealistic 
software products saw professionals lines code create tremendous cognitive overload 
knowledge base known long term memory usually organized schemas plans 
schemas knowledge structures parts slot types templates slot fillers 
slot types describe generic objects slot fillers customizations fit particular feature 
data structures lists trees examples slot types specific program fragments examples slot fillers 
structures linked kind relationship 
schemas grouped partitions specifically related comprehension processes 
example knowledge algorithms program model building process 
key feature integrated meta model model components may active time comprehension process 
example program model construction programmer may recognize beacon clue indicating common task sorting 
leads hypothesis code sorts causing jump top model 
program beacon may characteristic pattern value switches indicate sort 
may name function qsort 
mer objective mind need find sort ascending descending order searches code clues support expectations hypothesis 
search finds section unrecognized code may jump back program model building 
structures built model components accessible shows model component preferred types knowledge 
contain thorough discussions integrated meta model component models :10.1.1.28.3297
experiments experimental design purpose study find code comprehension process model integrated comprehension meta model guide large scale program understanding 
wanted high level preliminary validation observation 
may ultimately permit validation controlled experiments 
observation involved programming session participants asked think aloud working understanding code 
audio video taped thinking aloud report 
sessions typically hours long 
understand large scale software product participants varying degrees prior experience code 
gives widest degree coverage code comprehension process 
eleven subjects video transcribed analyzed 
table defines major variables study 
columns represent expertise rows represent amount accumulated knowledge subjects acquired prior start observation 
type maintenance task listed entry matrix 
square represents specific observations characterized row column maintenance task 
abbreviations example rest identify particular observations 
matrix shows table eleven subjects represent coverage terms varying degree knowledge task expertise 
similar faced issues determining validity generalizing results data maintenance situations 
issues deal maintenance task sampling participants external validity experimental situation 

task 
code participants tried understand specific assignment performed representative maintenance tasks encountered industry 
doing identical task trying understand industrial code maintain 
understand cognition differs move specialized tasks explore situation 

sampling participants 
representative participants larger population software engineers existing code 
reliable answer current maturity field 
attempted broad sampling maintenance tasks prior code programmer experience domain language 
claim protocols represent full range cognition behavior population software maintenance engineers 
description population need assembled studies similar 

external validity 
concerns degree conditions data collected representative actual maintenance occurs 
code cognition maintenance purposes takes hours 
considered including different amounts prior preparation study 
tasks represented actual assignments 
strengthen generalizability findings 
protocol analysis protocol analysis proceeded steps see table 
subsections describe criteria classify statements identify information needs analyze protocols discovery processes 
enumeration analysis protocols involved enumeration action types relate integrated cognition model 
action types classify programmer activities implicit explicit specific maintenance task 
examples action types generating hypotheses program behavior mental simulation program statement execution 
began list expected actions searched transcripts protocols 
analyzed possible new action types 
expertise language accumulated language domain domain knowledge expert expert expert seen understand bug file fix program structure reported general call graph bug understand en add function requirement fix design reported stand documents bug module worked leverage track code small bug style familiar program prior code ad add ad port enhancement function program debugging prototype adaptations assess platforms worked en add code ality table programming sessions maintenance tasks enumeration segmentation process discovery utterance 
abstraction 
episode level level processes action 
action types 
aggregate 
information level processes needs 
session level processes table protocol analysis steps segmentation information needs step analysis combines segmentation protocols identification information knowledge items 
segmentation classifies action types involving domain top situation program model thought terms different levels abstraction mental model 
information needs information knowledge items support successful completion maintenance tasks 
included identification beacons domain schemas hypotheses strategies switching domain situation program model 
detail see :10.1.1.28.3297
protocol analysis iterative problem solving process 
pass analysis results high level analysis type tag action type example protocol action type sys generate hypothesis assumption nil little nil big classification program model equivalent moment 
sys chunk store knowledge clearly just flip logical flag program model analysis type tag information need example protocol classified identifying code block okay assuming um indentation accurate information boundaries guess really um needs statement don know statement come 
don see 
data structure tied concepts looks structure domain table example protocol analysis action types information needs classification programmer actions program situation top model components integrated meta model 
necessary similar actions appear different component processes 
example hypotheses may generated constructing models 
actions associated particular model component pass identifies action types specific maintenance task 
action types identified transcripts re analyzed encoded types tags programmer utterances 
information needs determined protocols directly transcribed tapes see table inference 
information need may directly stated programmer obviously profit knew existed 
example table protocol segment associated code block boundaries information need indirectly demonstrates related domain information help programmer understand code better 
spent great deal time examining documents information 
table contains example protocols show action type classification information needs identification 
half table applies action type classification 
second half deals identifying information needs 
column provides tag action type classification 
process discovery discovered dynamic code understanding processes classifying analyzing episodes 
episodes single instances sequence action types 
episode starts goal embodies actions accomplish goal 
example determining function specific procedure routine may entail sequence steps include reading comments control flow generating questions concept understood 
processes defined different levels episodic aggregate session utterances verbalizations programmers programming sessions captured transcripts 
levels 
episodes containing common action types similar goals defined single episodic process 
likewise common sequences episodic processes defined single aggregate level process 
session level process established sequence similar aggregate level processes 
process sequence action types episodes aggregates purpose satisfy specific goal 
think levels strategies achieve goals 
specifically episode determined discovering goal sub goal cataloging subsequent action types reaching closure goal due goal satisfaction goal abandonment 
episodes identified analyze commonalities designate resulting sequence episodic process 
aggregate level process emerges similar episodic processes 
similarly sequences aggregate processes analyzed commonalities abstracted higher level processes 
common sequences aggregate level processes produce single session level process representing hour programming session 
section illustrates processes state diagrams 
study objectives 
role model components integrated meta model 
shown subjects frequently switch model components understanding built levels abstraction simultaneously 
difference working levels abstraction size code consideration 
answers question affect type knowledge cognition process expertise best suited large scale code understanding 

episodes 
seen types actions engineers execute working maintenance tasks :10.1.1.28.3297
repeated action sequences episodes representing lowest level strategies 
occur 
similar 
types episodes occur frequently 
information engineer need complete episode 
episodes represent understanding level expertise domain language component size expert domain model ttl 
num understand expert program module prg prg situation sit sit top td td program modules en prg situation en sit top en td program program prg situation sit top td program system ad prg situation ad sit top ad td table frequencies model components subjects abstraction span levels 

aggregate processes 
successfully find episodes higher level understanding strategies 
repeated episode sequences aggregate processes 
similar 
triggers episode sequence 
triggers common 

session level processes 
find aggregate processes help defining maintenance task process session level 
repeated sequences aggregate processes 
distinguishes switch aggregate process sequence 
find process type maintenance task similarities 
information needs core competencies 
find processes organize information engineers need understanding support cognition 
define core competencies reflect minimum knowledge necessary maintain large scale code 
results role model components integrated meta model table shows excerpt model component analysis subjects 
left portion table lists total number model components integrated meta model relative size code 
distinguish small scale module loc loc modules loc program size loc program loc large scale system loc 
clearly understanding differs depending size code 
difference shows level abstraction programmer tends understanding 
engineers prg prg significantly program model top model 
size component understand single code module 
contrast engineer ad porting programs operating systems platforms times top model program model 
table represents look mental model building strategies maintenance engineers understanding 
size component small understand low level detail sense spend time program model 
hand code size large ad worked system lines code understanding occurs preferably higher level abstraction 
highest level domain knowledge ideally proceed understanding level code large 
obviously sufficient knowledge domain level important large systems programmers refer level understanding 
frequencies table indicate programmers domain situation program level describe comprehension processes 
episodes episodes sequences action types carried accomplish goal 
episodes containing common actions similar goals emerge lowest level processes 
discovered episode specified action sequences 
illustrate example protocol episodic process read block sequence starts goal understanding specific block code going read description see gives clues going 
observed actions support original goal generating hypotheses reading comments chunking information making note interesting aspects postponing investigation 
table lists episodic processes occurred example transcript subject see table 
shows subject spent majority time reading code determining behavior variable incorporating knowledge mental model program module 
engineer applied systematic strategy reading line code approximate sequence 
presents process graph form state machine illustrate basic form episodes 
arcs indicate action types states represent level understanding 
table shows preferred episodic processes exist 
processes frequent 
processes preferred detailed understanding module 
table expect find processes frequently referenced understanding larger code segments 
episodic process name code number read block sequence integrate understood determine variable def incorporate acquired program knowledge identify block boundaries resolve deferred questions understand procedure call table episodic process frequency count subject individual episodes vary greatly goals different 
episode may action types occur different order 
combine commonalities different process levels processes similar 
corresponds similar higher level goals aggregate session level processes support 
different episodes low level tactics 
different action sequences characterized episodic process illustrate different traces state diagram 
examine module sequence chunk store knowledge examine module sequence generate hypothesis 

read code comments generate hypothesis chunk store note interesting identifiers determine key aspects chunk store read module sequence note interesting identifiers determine key aspects chunk store 
analysis able associate information needs frequencies action types episodic processes 
table shows information needs process subject 
frequently needed information types directly relate activities shown state diagram 
determining block condition requires code block boundary information 
interestingly find processes occurred single level abstraction classified purely top situation program model processes 
episodes contained actions associated integrated model components 
supports idea programmers constantly switch model components read code chunk store determine key aspects prioritize block chunk store start read block confirm hypothesis chunk store generate hypothesis generate hypothesis chunk store note interesting identifier episodic process read block levels abstraction 
episodic processes similar design process reported isn surprising cognition considered recreation design task 
results show cognition aids effective tools documentation support levels abstraction frequent switches 
episodic information needs number process code block boundaries data type definitions read location identifiers block call graph display history past modifications data structure definitions tied domain concepts location called procedures history browsed locations beacons tied situation model program model description system calls location documents program domain table understanding module information needs process aggregate processes aggregate processes discovered protocol illustrate form state diagram 
table shows aggregate processes consist episodic processes 
table shows frequencies aggregate level processes 
aggregate level processes pa pb pc look similar 
conjecture process pc read understand investigate variables resolve deferred beacon block block beacon sys block block block chunk store sys chunk store questions process pc aggregate level aggregate processes represent instances similar higher level strategy 
episodic process pa pb pc read block sequence integrate understood determine variable def incorporate acquired program knowledge identify block boundaries resolve deferred questions understand procedure call table aggregate processes episodic composition subject demonstrated systematic approach understanding 
common strategy code comprehension opportunistic programmer follows individually determined relevant threads code documentation 
type strategy see nicely organized processes saw systematic understanding 
may deal parallel processes 
action systematic process process switch opportunistic process 
case see interleaved pieces parallel processes 
triggers cause state changes processes 
code induced code block action type chunk store knowledge 
table lists triggers example protocol frequencies process pc total aggregate processes 
beacons block triggers frequent triggers 
product systematic strategy subject 
jump episodic process read block sequence process understand procedure call caused encounters unrecognized procedure call beacon 
decides understand procedure 
investigating reaches block triggers resumption left 
aggregate process name code number read integrate investigate variables pa read incorporate acquired program knowledge investigate variables pb identify block boundaries read understand investigate variables resolve deferred questions pc table aggregate process frequency count subject frequencies process trigger pc aggregate procs beacon chunk store knowledge block stack understanding strategy determined sys table process trigger frequencies subject session level processes session level processes highest level 
state diagram derived way aggregate level processes tracking sequences aggregate level processes 
diagram represents general understanding maintenance task 
highest level block chunk store cause switches aggregate level process 
session level process understanding single module shows aggregate level processes represent investigation building chunks 
chunking important abstraction mechanism code understanding 
session level purpose aggregate process understand block code different detail steps information chunk store learned information 
information needs analysis variety information needs useful tool capabilities 
describe evidence minimum knowledge necessary perform maintenance tasks partition knowledge groups program situation topdown related structures 
knowledge defined core competencies 
results incomplete indication types information useful maintenance engineers 
table summarizes information 
domain information necessary product specific knowledge commands vs unix operating system commands system configuration configure system test bug reproduction 
area knowledge standard product independent information operating systems principles 
prior experience formal instruction architecture structure operating system components process memory file management 
interconnections related 
cross domain including find information need expert specific text book 
key terms important guides understanding ties domain model situation program models 
process manager round robin scheduling algorithm 
situation information necessary algorithms data language independent detail design level functional sequence steps structures round robin algorithm graphical representation process queue 
detailed design close code language independent 
specific product information functional terms 
pop technology connected find design rational 
connect algorithm purpose application 
domain information conventions terms comprehension models 
key terms 
cross levels information situation model level connections models program model information necessary variable component key terms meaningful mnemonic acronyms symbols 
names pop ups connected capability follow beacon design domain information 
situation domain critical sections focus attention improve efficiency code identified formalized beacons focus attention improve efficiency cross connections back situation domain levels 
table core competencies model component process abc understand module chunk store block block pa pb pc chunk store block chunk store block chunk store block chunk store chunk store block process abc session level information may exist buried programmers benefit capabilities focused access answer specific questions 
problems today information long access times information confusion 
ability focus construct documentation cognition processes successful volumes documentation 
means reorganize information supports cognitive processes 
analyze episodic aggregate session level cognitive processes tool requirements quite obvious tools exist support part processes 
heart difficulty need programmers variety levels types information tools documentation single level entities design document user manual book operating systems concepts 
support connecting information levels understanding appears promising 
simple beginnings development standards carry key terms project 
trying find means code search term detailed design design architecture domain level documentation 
case focus may need know relates domain level knowledge 
question list variable called code useless 
program understanding key factor software maintenance evolution 
reported experiment industrial programmers discover comprehension processes supporting information programmers trying understand production code 
sample small exploratory experiment showed interesting results 
programmers multi level approach understanding frequently switching program situation domain top models 
effective understanding large scale code needs significant domain information 

maintenance activities described distinct small set cognition processes 
aggregate higher level processes goals information needs 

current practice documentation coding encourage efficient understanding knowledge type document rarely provides cross needed support programmers cognitive needs 
hope results stimulate experiments increase knowledge industry size code cognition 
base maintenance processes cognition needs people 
part funded hewlett packard brooks theory cognitive processes computer programming international journal man machine studies vol 
pp 

guindon herb krasner bill curtis breakdowns processes early activities software design professionals empirical studies programmers second workshop eds 
olson sheppard soloway ablex publishing pp 
fl 
jurgen koenemann scott robertson expert problem solving strategies program comprehension chi pp 
march 
stanley letovsky cognitive processes program comprehension empirical studies programmers workshop eds 
soloway iyengar ablex publishing pp 
fl 
nancy pennington stimulus structures mental representations expert comprehension computer programs cognitive psychology vol 
pp 
robert rist plans programming definition demonstration development empirical studies programmers st workshop eds 
soloway iyengar ablex publishing pp 
fl 
ben shneiderman exploratory experiments programmer behavior international journal computer information sciences vol 
pp 

ben shneiderman software psychology human factors computer information systems chapter publishers pp 
fl 
elliot soloway kate ehrlich empirical studies programming knowledge ieee transactions software engineering vol 
se pp 
september 
elliot soloway beth adelson kate ehrlich knowledge processes comprehension computer programs nature expertise eds 
chi glaser lawrence erlbaum associates publishers pp 
fl 
iris vessey expertise debugging computer programs process analysis international journal man machine studies vol 
pp 
von mayrhauser vans program comprehension tool requirements industrial environment proceedings nd workshop program comprehension capri italy pp 
july 
von mayrhauser vans code understanding needs reverse engineering tool capabilities proceedings th international workshop computer aided software engineering case singapore pp 
july 
