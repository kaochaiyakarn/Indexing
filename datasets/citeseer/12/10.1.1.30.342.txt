breadth numbering lessons small exercise algorithm design functional pearl chris okasaki department computer science columbia university cs columbia edu programmer blind spots 
breadth rst numbering interesting toy problem exposes blind spot common functional programmers 
categories subject descriptors programming techniques applicative functional programming general terms algorithms design keywords breadth rst numbering breadth rst traversal views 
breadth rst traversal tree easy rebuilding tree harder functional programmers 
icfp john launchbury challenged problem tree create new tree shape values nodes replaced numbers jt breadth rst order 
example breadth rst numbering tree permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp montreal canada copyright acm yield tree launchbury knew solution jones gibbons depended lazy evaluation wondered solve problem strict language standard ml 
quickly straightforward answer showed break 
year problem functional programmers continually baroque solutions received reply 
single exception came near workable answer went di erent direction solution right design process 
gradually realized witnessing sort mass mental block communal blind spot steering programmers away natural solution 
claims mine best solution nd fascinating solution dicult functional programmers conceive rst place 

reading spend fteen minutes sketching solution 
concreteness assume type labeled binary trees datatype tree tree tree produce function bfnum tree int tree 
breadth traversal attempting solve non trivial problem rst step review solutions related problems 
algorithm design programming general theft ideas 
case obvious candidate known queue algorithm breadth rst traversal producing list labels tree breadth rst order 
example breadth rst traversal tree yield list 
key step developing algorithm breadth rst traversal generalize problem illustrating paradoxical common phenomenon general problem easier solve 
particular generalize problem breadth rst traversal tree breadth rst traversal forest tree list tree seq list seq undetermined type sequences represent forests 
example breadth rst traversal forest yield list 
speci ed equation hti hti denotes singleton forest containing easy specify equations 
ts ts 
ts ts equation takes children rst tree adds sequence 
empty sequence denoted symbols 
denote cons snoc respectively 
speci cation implementation feel free 
sides equations 
nal step producing code choose implementation sequence adt 
main operations need sequences adding trees sequence removing trees sequence 
choose queues sequence representation 
gives concrete implementation standard ml 
queues adt code look ugly eye accustomed pattern matching especially case expressions 
problem pattern matching normally performed adts 
views er way problem 
breadth rst traversal cleanly syntax views proposed 
note de nition nearly identical speci cation 
signature queue sig type queue val empty queue val isempty queue bool val enq queue queue val deq queue queue signature sig val tree list functor queue struct open fun isempty case deq ts ts ts enq enq ts fun enq empty breadth rst traversal sml 
signature queue sig type queue val empty queue val queue queue queue empty functor queue struct open infix infixr fun empty ts fun empty breadth rst traversal views 
provided queue operation runs time algorithm runs time altogether 
implementation queues application usual implementation pair lists 
application require persistence kinds queues overkill 

breadth numbering attempt extend solution breadth rst traversal get solution breadth rst numbering 
breadth rst traversal generalizing problem 
breadth rst numbering tree consider breadth rst numbering forest 
words introduce helper function takes forest returns numbered forest shape 
helpful helper function take current index signature bfnum int tree seq int tree seq bfnum speci ed terms bfnum bfnum ht bfnum hti extending equations bfnum fairly straightforward remembering output forest shape input forest 
bfnum bfnum 
ts 
ts ts bfnum ts bfnum 
ts 
ts ts bfnum ts notice equation textually preserves shape forest 
speci cations need choose representation sequences 
main operations need forests adding removing trees front back 
choose double ended queues sequence representation implementation double ended queues 
closer inspection reveals treat input forest output forest di erently 
particular add trees back input forests remove front add trees front output forests remove back 
remove arti cial constraint input forests output forests represented kind sequence represent input forests ordinary queues output forests backwards queues 
want represent input forests output forests ordinary queues library doesn include backwards queues change speci cation bfnum return numbered forest reverse order 
equations bfnum bfnum 
ts ts ts bfnum ts bfnum 
ts ts ts bfnum ts simple matter turn speci cation running code views 
way assuming queue operation runs signature bfnum sig val bfnum tree int tree functor queue bfnum struct open fun bfnum isempty empty case deq ts enq bfnum ts ts val enq enq ts val bfnum val deq val ts deq enq ts fun bfnum val enq empty val bfnum val deq breadth rst numbering sml 
functor queue bfnum struct open infixr infix fun bfnum empty empty bfnum bfnum val bfnum ts ts fun bfnum val breadth rst numbering views 
time entire algorithm runs time 
usual implementation queues pair lists choice algorithm 

level oriented solutions nearly alternative solutions received functional programmers level oriented meaning explicitly process tree forest level level 
contrast queue solutions explicit transition level 
main advantage level oriented approach relies lists data structures queues double ended queues 
attempt describe possible level oriented solutions 
provide fair comparison approach describe cleanest designs 
completeness review jones gibbons algorithm appendix algorithm directly comparable mine depends lazy evaluation 
list trees roots trees form current level extract level collecting subtrees non empty nodes current level concat map children lvl fun children children recursive call numbered trees level number current level walking lists simultaneously numbered trees level non empty node current level 
fun rebuild rebuild ts cs rebuild ts cs rebuild ts cs rebuild ts cs tricky point compute starting index numbering level starting index current level 
simply add length list representing current level current index current level may contain arbitrarily empty nodes increase index 
need nd number non empty nodes current level 
de ne custom function compute value notice non empty node current level contributes nodes level merely divide length level 
complete algorithm appears 
algorithm passes level rst computing length collecting children nally rebuilding level 
price slightly code easily combine rst passes way accomplish tasks single pass lazy evaluation 

discussion comparing queue solution level oriented solution previous section see compelling reason structure bfnum struct fun children children fun rebuild rebuild ts cs rebuild ts cs rebuild ts cs rebuild ts cs fun bfnum bfnum lvl val concat map children lvl val length div val bfnum rebuild lvl fun bfnum hd bfnum level oriented breadth rst numbering 
prefer 
level oriented solution slightly easier design scratch queue algorithm modest extension queue algorithm breadth rst traversal quite known known fact algorithm breadth rst traversal 
informal timings indicate level oriented solution breadth rst numbering slightly faster queue di erence minor case priori justi cation favoring level oriented approach 
functional programmers faced problem overwhelmingly commit level oriented approach right design process 
speculate armed anecdotal responses programmers attempted exercise 
identi ed potential explanations underlying traversal algorithm 
programmer unfamiliar queue algorithm breadth rst traversal exceedingly come queue algorithm breadth rst numbering 
accounts small fraction participants exercise 
functional queues double ended queues 
programmer unfamiliar fact data structures implemented functionally design algorithm required 
category unfair advantage having invented variety new implementations functional queues double ended queues 
programmers awareness data structures available theshelf couldn say hand implementations worked 
premature commitment data structure 
functional programmers immediately reach lists try get stuck 
programmer initially chooses queues run trouble opposite orientations input output queues 
queue algorithm easiest develop notion sequences commit particular representation sequences process 
premature commitment programming language 
precise premature commitment single programming language feature pattern matching 
ties back previous reason 
functional languages standard ml haskell permit pattern matching types encouraging early commitment particular concrete type particular concrete type lists blends nicely pattern matching 
complicated internal structure queues double ended queues blend nearly pattern matching 
views er way problem standard ml haskell support views help programmer commits writing legal code right design process 
unfair advantage having earlier proposed notation adding views standard ml 
reasons true particularly 
tell students engineering bene ts adts fail 
nod program language ignore fail recognize imposed favorite language 
course generally crack walnut working toy problem permit degree tolerate large project 
furthermore level oriented solution evidence whatsoever 
accept claim solution intrinsically easier design wonder external factor causing disparity proposed solutions 
acknowledgments john launchbury originally proposing problem programmers participated experiment 

warren burton 
ecient functional implementation fifo queues 
information processing letters july 
david gries 
science programming 
texts monographs computer science 
springer verlag new york 
robert hood robert melville 
real time queue operations pure lisp 
information processing letters november 
rob 
symmetric set ecient list operations 
journal functional programming october 
geraint jones jeremy gibbons 
linear time breadth rst tree algorithms exercise arithmetic folds zips 
technical report 
threading list indices tree 
university auckland 
known ifip working group working win 
robin milner mads tofte robert harper david macqueen 
de nition standard ml revised 
mit press cambridge massachusetts 
chris okasaki 
simple ecient purely functional queues deques 
journal functional programming october 
chris okasaki 
purely functional data structures 
cambridge university press 
chris okasaki 
views standard ml 
workshop ml pages september 
philip wadler 
views way pattern matching cohabit data abstraction 
acm symposium principles programming languages pages january 
appendix breadth numbering lazy evaluation jones gibbons original solution slightly di erent problem known breadth rst labelling 
comparisons easier adapt algorithm somewhat simpler framework breadth rst numbering 
suppose magically list integers representing rst available index level 
haskell function produces tree level numbered index 
produces list containing available index level 
list indices acts state threaded tree 
int tree int tree int ks ks ks ks ks ks ks ks ect function illustrated 
create initial state 
clearly rst available index rst level levels 
essential trick jones gibbons solution realize entire tree processed available index level rst available index level 
words ks nal state construct initial state ks 
algorithm expressed bfnum ks ks trick feeding output function back input illustrated lazy evaluation required 
lazy evaluation main algorithm need calculate initial list indices separate pass 

threading output level input level 
