time vs space fault tolerant distributed systems charron bost charron lix polytechnique fr xavier ac jp andre schiper andre schiper epfl ch lix ecole polytechnique palaiseau cedex france japan advanced institute science technology ishikawa japan ecole polytechnique ed erale de lausanne epfl lausanne switzerland algorithms solving agreement problems classified categories relying failure detectors call fd rely group membership service call gms 
discusses advantages limitations approaches proposes extension gms approach combines advantages approaches drawbacks 
extension leads distinguish suspicions processes space triggered exclusions 
detection failures necessarily plays central role engineering dependable systems 
especially true context time critical applications occurrence failure masked may result long blackout periods system blocks 
legacy distributed real time systems detection failure uses time communication infrastructure fully deterministic behavior 
requires build systems dedicated ad hoc hardware significant impact cost solution 
order reduce cost possible real time distributed systems soft real time constraints implemented cheaper commodity hardware software 
result communication infrastructure predictable transmission delays guaranteed messages may lost perfect detection failures possible 
fault tolerant services distributed system usually implemented replication 
basic approaches replication active passive replication 
active replication called state machine approach requests processed server replicas 
technique requires requests processed order relies atomic broadcast 
basically atomic broadcast solved unreliable failure detectors called fd solutions group membership service called gms solution 
gms solutions force crash processes incorrectly suspected case fd solutions 
discussed difference important consequence overhead due incorrect suspicion considerably higher case 
atomic broadcast algorithm proposed chandra toueg example fd algorithms isis sequencer algorithm example gms algorithms 
survey presenting examples categories 
passive replication called replication replica primary processes request sends update messages replicas update state 
classical implementations passive replication gms 
semi passive replication defines variant passive replication implemented fd algorithm 
mentioned earlier overhead due ieee computer society press 
appeared proc 
th int workshop object oriented real time dependable systems words 
rect suspicion considerably higher gms algorithms fd ones 
allows failure detection timeout fd algorithms aggressive compared gms solutions 
lan typically means timeout fd solutions order ms compared timeout gms solutions order seconds 
difference huge real time applications timeout value direct impact fail time order ms case order seconds second case 
goal clarify advantages limitations classes approaches fd vs gms propose extension gms approach 
precisely introduces new communication primitive context view synchronous communication 
new primitive allows introduce distinction time triggered suspicions space triggered exclusions 
practical point view leads powerful paradigm combines advantages gms fd approaches having drawbacks fd approaches see section 
rest organized follows 
section presents system model 
section introduces distinction genuine provoked failures short term long term requirements context failure detection 
section explains limitations fd approaches 
section devoted gms approach discusses cost incorrect failure suspicion 
section defines new broadcast primitive context view synchronous communication 
section shows benefit new broadcast primitive 
section illustrates new broadcast primitive example 
section concludes 
fail time time elapsed crash process time system recovered crash 
interval system operational 
view synchronous communication paradigm consists group membership service view synchronous communication primitive 
system model consider asynchronous distributed system processes communicate message passing 
processes subject crash failures byzantine failures 
crashed process recovers takes new identity formally crashed process recovers 
correct process process crashes 
assume program controlled crash ability processes kill processes commit suicide 
channels fair lossy defined duplication properties fair loss property process sends infinite number messages process correct receives infinite number messages channels considered reliable quasi reliable 
reason choice real channels reliable quasi reliable 
leads consider problem implementing reliable communications unreliable channels 
consider agreement problems solvable asynchronous system extend asynchronous system model failure detectors agreement problems consensus solvable 
important dichotomies genuine vs provoked failures distinguish kinds crash failures genuine provoked failures 
genuine failures failures naturally occur system intervention process 
conversely provoked failures failures deliberately caused process murder suicide 
provoked failures considered program controlled crash reliable channel processes channel duplicates messages creates spurious ones satisfies property loss sends message correct eventually receives quasi reliable channel processes reliable channel loss property replaced weaker property quasi loss sends message correct eventually receives model 
fault tolerant algorithm typically tolerates crash bounded number processes 
provoked failure decreases number genuine failures tolerated 
words program controlled crash reduces actual faulttolerance system 
provoked failures occur gms solutions excluded fd solutions 
short term vs long term requirements fault tolerant systems failures different consequences consequences implication failure detection requirements 
cases detection failure short term requirement cases long term requirement 
say detection failure shortterm requirement crashed process blocks system crash detected 
conversely crashed process prevent system functioning failure detection long term requirement 
practice important distinguish short term long term requirements 
case failures detected timely manner may lead mistakes wrong failure detection 
conversely case long term requirements detection failures urgent 
come back issue 
limitations fd solutions fd solutions rely provoked crashes 
best knowledge fd solutions agreement problems described literature assume reliable channels 
reliable channels adequate proving impossibility results reliable quasi reliable channels inadequately model real network links 
implementing quasi reliable channels lossy channels require infinite storage perfect failure detector 
consider channel process term storage meaning act keeping place keeping 
sending message buffer receiving ack long ack received retransmits time time 
ack received buffer forever perfect failure detector notifies crash environments assumptions infinite storage perfect failure detector unrealistic 
explains systems built considered gms approaches fd approaches 
gms solutions specification contrary fd solutions gms solutions require perfect failure detector infinite storage 
view synchronous communication paradigm consists parts group membership service view synchronous communication primitive 
start specification group membership service 
group membership service group membership service provides notion views processes 
view pair members id view members set processes part view view time ideally set processes considers alive time view evolves processes crash leave system new processes join system 
literature distinguishes flavors membership service primary partition membership service partitionable membership service 
roughly speaking primary partition membership service defines totally ordered sequence views partitionable membership service views partially ordered concurrent views coexist 
concentrate primary partition membership service 
event new view provided process called install event 
primary partition membership specified agreement property agreement view history consider processes denote view view agreement view history holds installs installs property allows denote view simply mentioning process superscript 
membership service satisfies additional properties summarized follows crashed process eventually removed membership completeness property process belongs view view asked leave group correct 
second property trivially ensured model program controlled crash follows process belongs detects belong commits suicide crashes 
membership service consists join operation allowing addition process view leave operation allowing removal process view 
view synchronous communication multicast service allows processes broadcast messages members current view certain guarantees 
denote broadcast primitive broadcast process view deliver primitive delivered process view view superscript omitted relevant 
consider specification multicast service see termination correct process executes broadcast process view eventually executes deliver correct process eventually installs new view 
view synchrony process belongs consecutive views executed deliver process executes deliver delivers installing sending view delivery message broadcast view delivered view words deliver broadcast occur discussion interestingly implementation paradigm lossy channels requires perfect failure detector infinite buffer space 
explained follows 
execute broadcast process reception buffers sends ack processes long received ack process retransmits time time 
received ack processes discard assume receives ack assumption fair lossy channels crashed 
completeness property membership service eventually view contain installed point discard violating termination property 
unfortunately exclusion lead new problem exclusion correct process 
just slow exclusion correct process process excluded forced crash 
cost incorrect suspicions paradigm high 
practical point view means incorrect suspicions avoided possible considering conservative timeout value implementation failure detection mechanism 
unfortunately leads high fail time 
gms paradigm fails take account short term long term dichotomy sect 

extending terminating broadcast avoid problem high fail time propose extend paradigm new broadcast primitive denoted broadcast stands terminating 
roughly speaking contrary broadcast broadcast require delivery installation new view 
third option exists consists delivering value denoted stands suspicion keep degree replication crashed process replaced new process execute join operation 
primitive similarities terminating reliable broadcast 
primitives identical deliberately avoided name 
sender 
formally broadcast defined properties broadcast termination property replaced property termination correct process executes process view eventually execute deliver process view eventually execute deliver correct process eventually installs new view 
termination property requires processes agree delivery delivery lead exclusion broadcast primitives extended paradigm broadcast broadcast 
time triggered suspicions vs exclusions illustrating broadcast vs show section benefit broadcast broadcast 
consider awaiting message supposed broadcast 
process knows deliver installation view necessarily excluded 
exclusion view forces crash 
words events coupled decision delivery forced crash broadcast consider supposed execute broadcast await assume crashes executing 
process knows deliver delivery incorrectly suspected delivery force crash 
events decision delivery forced crash decoupled 
decoupling events big advantage 
allows decoupling corresponding policies policy related decision delivery correct executed broadcast deliver 
view synchrony property delivers processes including deliver view policy related decision exclude process 
important understand policy sender message policy destination process 
fault tolerant distributed applications policy sender process usually impact fail time policy destination process usually impact fail time 
decoupling policies totally natural 
propose policies suspicion timeouts decision delivery ii exclusion space constraints exclusion destination process 
policy standard time triggered policy timeout aggressive considering false suspicion lead exclusion 
aggressive timeout respect sender process usually important small fail time 
exclusion policy ii new policy observation 
consider executed decision deliver termination property forces buffered known processes delivered process may delivered excluded 
long buffered 
stupid discard memory space available natural policy buffer long memory resources allow 
soon runs buffer space exclusion allows regain memory resources 
call space triggered exclusion decision exclude taken process soon memory space allocated messages full 
note time elapsed execution broadcast space trigger exclusion process arbitrary long impact fail time application 
space triggered policy destination process 
contrary time elapsed execution broadcast time triggered decision deliver usually impact fail time application 
policy sender process 
broadcast allows separate policies related sender process related destination processes case broadcast primitive 
illustration broadcast illustrate section broadcast broadcast sequencer atomic broadcast algorithm 
atomic broadcast defined primitives broadcast deliver 
role sequencer attach sequence number sn message messages delivered order sequence number 
determine sequencer process run algorithm decomposed epochs 
process integer variable represents current epoch 
epoch changes current sequencer seq suspected 
epoch variable current view defines process considers sequencer process 
algorithm sketched follows execution broadcast process executes broadcast 
delivery sequencer process executes broadcast id sn id identifier sn integer sequencer number attached delivery id sn process delivers messages sn sn delivered 
delivery seq seq sequencer process changes epoch executing 
notice broadcast vs broadcast message broadcast sequence number sn broadcast 
ensure short fail time time triggered suspicion related broadcast aggressive 
space triggered suspicion related broadcast broadcast impact fail time 
extended virtually synchronous communication paradigm terminating broadcast primitive 
possible adequately decouple antagonistic aspects failure detection fast reconfiguration short failover time slow exclusion failed processes housekeeping 
reconfiguration relies terminating broadcast primitive uses aggressive time triggered mechanism suspect processes guaranteeing short fail case failure 
conversely housekeeping issues satisfied relying time critical exclusion crashed processes 
exclusion triggered timeouts lack buffer space keeping unacknowledged messages 
result important shows possible combine positive aspects gms systems order build faulttolerant distributed systems block long periods event process crash 
aguilera chen toueg 
heartbeat timeout free failure detector quiescent reliable communication 
proceedings th international workshop distributed algorithms pages saarbrucken germany september 
basu charron bost toueg 
solving problems presence process crashes lossy links 
technical report tr cornell university usa september 
birman schiper stephenson 
lightweight causal atomic group multicast 
acm trans 
computer systems august 
marzullo schneider toueg 
primary backup approach 
mullender editor distributed systems pages 
acm press 
chandra toueg 
unreliable failure detectors reliable distributed systems 
journal acm 
tushar deepak chandra hadzilacos sam toueg charron bost 
impossibility group membership 
proc 
th acm symposium principles distributed computing pages philadelphia pennsylvania usa may 

agreement related problems semi passive replication totally ordered broadcast 
phd thesis federal institute technology lausanne epfl 
schiper 

th ieee symp 
reliable distributed systems srds pages west lafayette usa october 
guerraoui schiper 
software replication fault tolerance 
ieee computer april 
hadzilacos toueg 
fault tolerant broadcasts related problems 
technical report department computer science cornell university may 
schiper 
uniform reliable multicast virtually synchronous environment 
ieee th intl 
conf 
distributed computing systems pages may 
schneider 
replication management state machine approach 
mullender editor distributed systems pages 
acm press 
keidar chockler dolev 
group communication specifications comprehensive study 
technical report dept computer science technion israel 
