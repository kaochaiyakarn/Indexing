observers linear types martin odersky yale university department computer science box yale station new haven ct odersky cs yale edu european symposium programming february linear types provide framework safe embedding mutable state functional languages enforcing principle variables linear type exactly 
potential disadvantage approach places read accesses variables restriction write accesses prevents reads proceed parallel 
extension linear types augments usual distinction linear non linear third state observers linear variables 
linear variables observers duplicated multiple concurrent reads possible 
hand observers short lived overlap mutations 
resulting type system aspects similar ml polymorphic principal types admits type reconstruction algorithm 
investigating type system addresses update problem functional languages implement updates ciently retain declarative semantics 
methods solve problem usually come name ect analysis 
ect analysis looks opportunities replace costly non destructive operations aggregates arrays hash tables cheaper destructive ones 
take place run time counting gsh reverse di erence lists coh 
performed compile time optimization techniques hud npd blo deu dp instance 
third alternative programmer perform ect analysis reduce task computer ect checking computer simply veri es transition non destructive destructive operations semantics preserving 
setting done part ibm watson research center 
natural regard ect information kind type information ect checking extension type checking 
main advantage programmer directed approach choice copying place updates visible 
programmer avoid potentially drastic ciency loss result missed optimization opportunities 
important presence separate compilation software component libraries 
users libraries access exported components risking performance degradation 
standard way communicating legal patterns type system idea augment types ect information 
ect checking type systems face double challenge avoiding restrictive complex 
automatic optimizers programmers willing digest limited amount ect information 
approach ect checking type system meets challenges 
observable linear types loosely wadler standard version linear types extend adding read terms observer accesses linear variables 
wad extension acknowledged open research problem 
linear type systems laf abr wad related curry howard isomorphism girard linear logic gir 
principle variable linear type exactly 
linear types convertible non linear types principle allows updates linear variables performed destructively obviates need garbage collecting 
terminology wad linear variables world duplicated discarded :10.1.1.31.5002:10.1.1.31.5002
duplication restriction linear variables bit awkward programming 
observation world placed precisely restrictions changes clearly intrusive 
address shortcoming wadler suggested wad construct exceeds linear logic allowing world observed local context 
written 
linear variable outer expression may read arbitrarily local expression construct safe wadler proposed measures evaluation rule speci es reduced normal form evaluation begun 
second static restriction components mutually distinct types 
static restriction may function type 
static restrictions prevent normal form sharing value linear variable evaluation rule ensures safety quite drastic cost particular mutually distinct types requirement conservative approximation actual aliasing 
construct 
approximation worse type system polymorphic wad isn :10.1.1.31.5002
case notion equality types replaced uni ability 
consequence virtually 
construct unsafe type linear bound variable polymorphic 
see linear types far better changing world observing 
look thorough solution observer problem 
concerned duplication property linear types property allows static garbage collection 
principal idea extend distinction linear nonlinear variables third state denotes observers linear variables 

construct occurrences linear variable observer 
linear types observers duplicated freely implies updates observers forbidden 
observers short lived may exported scope 
binding 
enforces observation updating linear variables occur strictly alternating fashion observer lives long observe update 
linear non linear observer constitute basic aliasing states variable 
states attributes types system 
type system useful properties polymorphic types alias states 
type polymorphism means type variable ranges types linear non linear observers 
aliasing polymorphism means aliasing attribute type may 
principal type property 
closed initial type assignment typed expression general type scheme admits type reconstruction algorithm assigns expression principal type scheme 
type reconstruction type declarations bound variables 
straightforward abbreviations function signatures written concise form comparative complexity speci ers ada 
observation somewhat surprising type system de nitely complex standard hindley milner system say 
partial explanation machinery observer types occur local context de nition show signatures de ned variables 
related schmidt sch suggested simple type system gives conditions safety inplace updates 
early done fx project lg jg area active research subject years 
observable linear types build previous approaches 
strong connection linear types connection baker free region analysis bak type reconstruction 
regions enter system explicitly notion region bak tj corresponds exactly collection types alias variable attribute 
popular approach update problem uses data types encapsulate accesses mutable data structures 
idea type state transformers type transformed data structures wad :10.1.1.33.5381
single operation block creates mutable data structure serving scratch area applies state transformer returns immutable result application discarding scratch area 
advantage extension traditional type systems needed requires programming continuation passing style 
currently clear method extended deal mutated data structures 
problem addressed non standard type system sri requires continuation passing style 
continuation passing style problematic fully lookups updates 
contrast observable linear types allow lookups proceed parallel generally impose restrictions programming style 
point important situation purely functional program transformed program transparent updates changing implementation data types 
observable linear types allow ciency improving transformations performed incrementally requiring complete rewrite 
compared analyses liabilities function ects gh ode linear types augmented observers precise cases precise 
liabilities give information variables possible aliases alias states record fact variable aliased 
liabilities verify expressions safe handled approaches 
hand current liability approaches accurate non mutable structures 
extended higher order functions admit nice principal types need disjunctive constraints see ode example 
believe approaches linear types turn practical liability approaches tend concise generalize naturally higher order case 
rest organized follows section de nes syntax types small example language 
section discusses program examples 
section presents typing rules 
section discusses type reconstruction algorithm 
section concludes 
observable linear types language essentially language wad exception 
constructs case observers linear variables need quoted 
quoting variables explicitly undesirable restricts polymorphism type reconstruction algorithm 
expressions identi ers ee application abstraction linear abstraction de nition 
sequential de nition conditional monomorphic types start type system monomorphic aliasing aspects polymorphic structural aspects 
type system called monotype consists parts describe outside aliasing internal structure respectively 
components separated dot 
monomorphic types basic type list list type function type alias state type type variable alias states observer linear non linear example language di erent forms types immutable basic types mutable lists function types 
see section mutable data structures arrays matrices constructed mutable lists 
need modeling structures type system implementation certainly treat special cases 
aliasing part monotype constants 
variables type may accessed invariant exist values types 
types correspond linear types slight misuse language call linear 
correspondence exact concerned duplication property types allow discarding value type forbidden pure linear type systems 
variables type non linear type may accessed arbitrarily may share non linear variables 
third category types observer types 
observer types allow linear variables 
don add linear uses denotation 
locally 
construct occurrences variable linear outside observer type inside 
may occurrences observer variable may form part value locally de ned expression 
put words components de ned 
type 
assuming evaluation 
de nitions ensure observation updating linear variables occur strictly alternating fashion 
composite list types aliasing attribute type attribute element type level 
combination alias attributes permissible require list formed de nition 
monotype list formed formedness condition needed ensure linear element shared observed indirectly sharing observing parent 
monomorphic observable linear types give rise type system extends types wad observers 
example consider function copies array element index position 
assume time arrays implemented lists operations 
indexing update place updates 
assign 
update type system assign type list rst local occurrence array type locally de ned variable satis es restriction local de nitions 
observer type 
occurrence type list re ecting fact variable modi ed 
type function assign int int list list expresses array argument modi ed linear elements duplicated non linear 
observer state locally allowed linear variable twice 
monomorphic type system quite exible 
instance possible formulate function head works equally linear non linear lists alias state function arguments xed 
obvious way lift restriction introduce variables range alias states sub section 
polymorphic types polymorphic observable linear type called polytype variable alias component 
variable usually ranges alias states range constrained predicates 
jon express syntax quali ed types alias parts quali ed types predicates type schemes observer tags polymorphic equivalent mapping monomorphic linear observer status monomorphic system :10.1.1.22.6725
bound variable type outside construct type oa inside 
serves reminder value assumed variable outside translated observer status inside 
type variables constrained predicates 
forms predicates 
rst form constrains range subset alias sets 
element alias sets characterized complements singleton set 
original encompasses 
variables de ned 
required originals 
aliased encompasses 
function uses argument times outside 
construct argument type falls set 
encompasses 
note combining constraints get monotype 
instance equivalent variable simultaneously bounded constraints constraint set unsatis able corresponding type empty 
second form constraint formedness criterion list types explicit 
predicate equivalent constraint set ranges alias parts 
typing rules occurrence list principal type constrained predicate list 
example type function map expressed follows map list list list list conciseness drop constraints type implied structure type type contains subtype form drop alias part type altogether trivial equal unconstrained unshared type variable 
allow multiple predicates grouped 

example shorthands type map written map list list prede ned identi ers prede ned assume xpoint operator fix set operators lists 
conventional operators nil cons hd tl destructive update operation lists 
takes arguments functions map list heads list heads list tails list tails 
third argument list xs linear type 
value xs cons hd xs tl xs side ect rst cons node xs replaced value 
types prede ned identi ers nil list cons list list hd list tl list list list list list list fix type merits consideration 
think function second argument passed linear list type really list list 
lead needless loss polymorphism 
just argument linear unshared function applied required exploit linearity argument 
correct interpretation arguments known linear safely way whatsoever 
general type tail replacing function list list 
type xpoint operator needs explanation 
fix de ned transformations non linear values result non linear value 
see xpoint transformation linear values problematic consider expression list int list int xs cons id xs predecessor function integers 
fix de ned transformations linear values fix legal type list int 
value expression 
disregard side ects look de nition result list 
take side ects account assume list evaluated head strict order get list 
violates requirement side ects typed expressions transparent 
examples section tries give feel type system means small example programs 
hope convey impression type signatures functions occurring practice quite reasonable size complexity closely correspond programmer intuition 
side ecting version append function append fix append xs ys xs nil ys id tl append tl ys xs typing rules section give append type append list list list rst list argument gets updated linear type list type curried application append xs linear append xs contains linear variable 
duplicate accesses xs expression ys zs append xs language special form abstraction denoted de ne linear functions global side ects modify variables arguments 
having forms abstraction cause loss polymorphism declare statically function going global side ect 
di cult predict higher order functions 
appears type system extended deal just kind abstraction linear non linear functions technique similar wad 
add constraints type signatures wanted avoid syntactic overhead associated 
alternative avoids isto modi ed argument come append list list list append xs ys append ys xs simplify presentation allow functions written equational style 
translation abstractions xpoint operators obvious 
append function uses heavyweight operation 
simplify specialized versions replace heads tails list list list list list list id id remember list result type abbreviation list fresh type variable 
alias part result type unconstrained 
linear equivalents higher order functions map foldl list list list xs acc xs nil acc tl xs hd xs acc maps function linear list replacing node list corresponding node result list 
restrict argument linear fact just haskell foldl second third argument swapped 
side ecting pure 
functions lists upd int list list upd upd tl swap int int list list swap xs 
xs 
xs upd upd xs function upd updates selected element list swap exchanges list elements 
lookups 
updates upd express mutable vectors terms lists 
higher dimensional mutable arrays de ned 
instance update operation matrix represented list lists type mat list list upd int int mat mat upd upd upd larger example turn topological sorting 
want nd total order nodes graph node precedes successors 
task designing cient algorithm easier assume graph convenient representation list sources list node sources graph list succs list list node contains node graph list successors 
linear list list int contains node graph number predecessors 
list serves scratch area 
assume node int index lists nodes 
graph representation formulate topological sorting function follows tsort list node list list node list int list node tsort sources succs sources nil nil src hd sources upd 
succs src 
sources filter succs src tl sources cons src tsort sources succs var taut tv tv structural rules lit obs wf list list entailment rules assume mutable lists implemented vectors lookups updates constant cost matches best known imperative algorithms 
remains true standard graph representation consisting node list edge list lists converted time representation assumed 
typing rules formulate system observable linear types system quali ed types jon :10.1.1.22.6725
sequents form type assignment set assumptions context set predicates tv tv 
nl ee sigma 
bool logical rules nl aj fv fv nl aj fv fv obs fv orig obs fv denote free type variables type scheme type assignment 
fv denote free program variables expression 
letters denote sets predicates type schemes written denotes bound variables denotes predicates analogous quali ed types quali ed type schemes form predicate constrains free variables structural rules 
rule entailment relation predicate sets predicates de ned 
rules lit de ne relationship monomorphic alias sets alias sets explained section 
rules obs determine predicates hold tagged alias parts linear type untagged alias part type 
rules wf correspond formedness criterion list types 
relation extended relation predicate sets de ning useful properties theorem monotonic implies 
transitive imply 
closed substitution implies sp sq substitution proof follows rule taut follow fact de ned sequent calculus 
de nition 
denote constraint set gg arbitrary alias part constraint set satis able quali ed type scheme isempty unsatis able 
theorem constraint set substitution unsatis able sp 
constraint set decidable satis able 
proof direct consequence theorem 

set predicates closure su ces look subset consist predicates alias parts appear predicate alias part generated application rule obs say 
way deduce rule form 
nite follows 
logical rules 
rules functions 
rule introduces linear functions global side ects 
rule 
introduces functions ects 
absence global side ects enforced 
condition identi er type assignment linear type 
rules 
impose nonlinearity constraint part type assignment 
nl yields set constraints imply contains linear types 
de ned nl jx ag conditions rule 
replace distinct types condition wad :10.1.1.31.5002
local environment global environment related constraint obs fv words observes free variables de ne relation obs type assignments type schemes types alias parts set horn clauses follows fvs obs ax obs fvs obs obs obs obs obs obs ot obs obs obs obs obs obs list list obs obs obs obs expresses local environment isomorphic global environment part aj fvs mapped observer status 
mapping observer state requirement type locally de ned value may contain observers 
construct safe 
requirement expressed orig de ned follows orig alias part var 
nl ee gen gen 
bool nl aj fv fv nl aj fv fv obs fv orig deterministic typing rules obs fv fv interpretation rules take account constraint sets may unsatis able types may empty 
primary motivation type checking detect empty types adopt de nition de nition 
expression scheme type assignment constraints written proof ofa proof step satis able 
principal typings type reconstruction section states proves principal type property observable linear types reconstruction algorithm 
simplify task rst de ne type system prove equivalence 
deterministic syntax directed structure proof trees typing isomorphic proof step determined uniquely form expression typing rules translate directly prolog cdd program type reconstruction 
de nitions theorems proofs lean heavily theory quali ed types developed jon jon 
concentrate aspects speci observable linear types referring jones aspects apply systems quali ed types general 
possible entailment relation satis es requirements set jon stated theorem :10.1.1.22.6725
de nition 
quali ed type scheme generic instance written types 

de nition 
quali ed type scheme general quali ed type scheme written quali ed types clearly preorder 
de nition 
quali ed type scheme principal expression assignment deduction continue deduction theorem soundness proof straightforward induction structure proof lemmata equivalents jon proved essentially way done 
lemma substitution lemma sa sp substitution lemma lemma gen gen 
lemma theorem completeness set predicates type gen proof induction structure proof structural rules treated exactly proof theorem jon 
cases logical rules follows case 
wehave derivation form nl induction gen de nition gen substitution free type variables sp lemma fact appear sp de ne sp nl sp construct derivation sp furthermore lemma gen case 
wehave derivation form ee lemma 
gen nl aj fv fv induction gen 
de nition gen substitution free type variables sp lemma fact appear sp 
induction hypothesis second premise 
show similar argument predicate set substitution de ne sp nl aj fv fv construct derivation sp lemma ee lemma 
construction nl aj fv fv 
furthermore lemma gen gen case 
derivation form 
induction gen gen obs fv orig loss generality assume tv tv tv achieved suitable renaming free variables construct derivation 
lemma lemma 
conditions obs fv orig satis ed 
furthermore induction hypothesis gen gen gen cases similar cases 


rules translate directly prolog program application clause determined uniquely outermost constructor expression 
program nd candidate principal type scheme proof tree 
proof tree check theorem type schemes proof steps nonempty 
principal type scheme types empty show theorem type 
follows theorem expression scheme principal type scheme 
decision procedure tp returns principal type scheme expression returns failure 
type system augments linear types observers 
claim extension linear types practical polymorphic accommodates familiar programming style allows observer accesses proceed parallel 
typing rules complex classical hindley milner system typical type signatures occurring practice quite moderate size complexity 
furthermore programmers need write types principal types reconstructed 
see type system possible candidate programming languages add state functional core 
theoretical side research needed explore connections observer types linear logic 
abr abramsky 
computational interpretations linear logic 
preprint imperial college london 
bak baker 
unify conquer garbage updating aliasing 
functional languages 
proc 
acm conf 
lisp functional programming pages june 
blo bloss 
update analysis cient implementation functional aggregates 
proc 
acm conf 
functional programming languages computer architecture august 
cdd clement despeyroux despeyroux kahn 
natural semantics computer 
technical report rr inria june 
coh cohen 
multi version structures prolog 
proc 
conf 
fifth generation computer systems pages 
deu deutsch 
determining lifetime aliasing dynamically allocated data higher order functional speci cations 
proc 
th acm symposium principles programming languages jan 
dp 
compositional analysis evaluation order application 
proc 
acm conf 
lisp functional programming june 
gh guzman hudak 
single threaded polymorphic lambda calculus 
proc 
th ieee symp 
logic computer science june 
gir 
girard 
linear logic 
theoretical computer science 
gsh gharachorloo sarkar hennessy 
simple cient approach single assignment languages 
proc 
acm conf 
lisp functional programming 
hud hudak 
semantic model counting abstraction 
abramsky hankin editors interpretation declarative languages 
ellis horwood 
jg jouvelot gi ord 
algebraic reconstruction types ects 
proc 
th acm symp 
principles programming languages pages jan 
jon mark jones :10.1.1.22.6725
theory quali ed types 
technical report prg tr oxford university computing laboratory oxford uk 
jon mark jones 
type inference quali ed types 
technical report prg tr oxford university computing laboratory oxford uk 
laf lafont 
linear machine 
theoretical computer science 
lg lucassen gi ord 
polymorphic ect systems 
proc 
th acm symp 
principles programming languages pages jan 
npd panangaden demers 
computation aliases support sets 
proc 
th acm symp 
principles programming languages pages jan 
ode odersky 
destructive updates destructive 
proc 
th acm symp 
principles programming languages pages jan 
sch schmidt 
detecting global variables denotational speci cations 
acm transactions programming languages systems 
sri swarup reddy ireland 
assignments languages 
proc 
acm conf 
functional programming languages computer architecture august 
tj 
talpin jouvelot 
type ect region reconstruction polymorphic functional languages 
workshop static analysis equational functional logic programs bordeaux oct 
wad wadler 
comprehending monads 
proc 
acm conf 
lisp functional programming pages june 
wad phil wadler 
linear types change world 
proc 
ifip tc working conference concepts methods pages april 
wad wadler 
linear logic 
proc 
acm symp 
partial evaluation semantic program manipulation pages june 

