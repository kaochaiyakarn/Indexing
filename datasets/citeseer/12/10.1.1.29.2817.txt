efficient filtering xml documents selective dissemination information mehmet alt nel department computer science university maryland cs umd edu information dissemination applications gaining increasing popularity due dramatic improvements communications bandwidth ubiquity 
sheer volume data available necessitates selective approaches dissemination order avoid overwhelming users 
existing mechanisms selective dissemination typically rely simple keyword matching bag words information retrieval techniques 
advent xml standard information development query languages xml data enables development sophisticated filtering mechanisms take structure information account 
developed index organizations search algorithms performing efficient filtering xml documents large scale information dissemination systems 
describe techniques examine performance range document workload scale scenarios 
proliferation internet intranets development wireless satellite networks availability asymmetric high bandwidth links home fueled development wide range new selective dissemination information sdi applications 
applications involve timely distribution data large set customers include stock sports traffic information systems electronic research partially supported rome labs agreement darpa order nsf iri intel microsoft nec draper laboratories 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference cairo egypt 
michael franklin eecs computer science division university california berkeley franklin cs berkeley edu personalized newspapers entertainment delivery 
execution model applications continuously collecting new data items underlying data sources filtering user profiles user interests delivering relevant data interested users 
order effectively target right information right people sdi systems rely user profiles 
current sdi systems typically simple keyword matching bag words information retrieval ir techniques represent user profiles match new data items 
techniques suffer limited ability express user interests raising potential users receive irrelevant data receiving information need 
ir models largely focused effectiveness profiles efficiency filtering 
internet environment huge volumes input data large numbers users typical efficiency scalability key concerns 
xml extensible markup language bps cov emerged standard information exchange mechanism internet 
xml allows encoding structural information documents 
information exploited create focused accurate profiles user interests 
course benefits come cost increase complexity matching documents profiles 
developed document filtering system named xfilter provides highly efficient matching xml documents large numbers user profiles 
xfilter user interests represented queries xpath language cd 
xfilter engine uses sophisticated index structure modified finite state machine fsm approach quickly locate examine relevant profiles 
describe structures event filtering algorithm enhancements 
evaluate efficiency scalability adaptability approaches detailed experimental framework allows manipulation key characteristics document user profiles 
results indicate xfilter performs highly scalable 
believe techniques represent promising technology deployment internet scale sdi systems 
remainder organized follows section give overview xml sdi system xpath language user profile model 
related discussed section 
section profile index structures eventbased xml filtering algorithm 
enhancements algorithm provided section 
discuss experimental results section 
section concludes 
background section high level architecture xml information dissemination system 
describe xpath language specify user profiles xfilter 
xml sdi architecture process filtering delivering documents user interests referred selective dissemination information sdi 
shows generic architecture xml sdi system 
main sets inputs system user profiles data items documents 
user profiles describe information preferences individual users 
systems profiles created users typically clicking items graphical user interface 
systems profiles learned automatically system application machine learning techniques user access traces 
user profiles converted format efficiently stored evaluated filter engine 
profiles standing queries conceptually applied incoming documents 
xml conversion data sources xml documents sdi filter engine user profiles filtered data users architecture xml sdi system key inputs sdi system documents filtered 
focused xml encoded documents 
xml natural fit sdi rapidly gaining popularity mechanism sharing delivering information businesses organizations users internet 
achieving importance means publishing commercial content news items financial information 
xml provides mechanism tagging document contents order better describe organization 
allows hierarchical organization document root element includes sub elements elements nested depth 
addition sub elements elements contain data text attributes 
general set rules document elements attributes defined document type definition dtd 
dtd specifies elements attributes names nature content document 
sdi system newly created modified xml documents routed filter engine 
document arrives filter engine matched user profiles determine set users sent 
sdi systems deployed internet number users systems easily grow millions 
key challenge environment efficiently quickly search potentially huge set user profiles find document relevant 
xfilter aimed solving exactly problem 
presenting solutions xfilter describe model expressing user profiles queries xml documents 
xpath profile language profile model xfilter xpath cd language addressing parts xml document designed xsl transformations xslt cla xpointer ddm languages 
xpath provides flexible way specify path expressions 
treats xml document tree nodes xpath expressions patterns matched nodes xml tree 
evaluation xpath pattern yields object type node set unordered collection nodes duplicates boolean number string 
paths specified absolute paths root document tree relative paths known location context node 
query path expression consists sequence location steps 
simplest common form location step specifies node name element name 
hierarchical relationships nodes specified query parent child operators adjacent levels ancestor descendant operators separated number levels 
example query catalog product addresses element descendants product elements direct children root element document 
xpath allows wildcard operator matches element name location step query 
location step include filters refine selected set nodes 
filter predicate applied element addressed location step 
filters location step evaluate full xpath specification cd contains options 
list due space considerations 
true order evaluation continue descendant location steps 
filter expressions enclosed symbols 
filter predicates applied text addressed elements attributes addressed elements may include path expressions 
relative paths filter expression evaluated context element nodes addressed location step appear 
example consider query product price name 
query selects name elements xml document product 
path expression price filter evaluated relative elements 
example shows element contents examined queries 
xfilter xpath select entire documents parts documents 
treat xpath expression predicate applied documents 
xpath expression matches element document say document satisfies expression 
alternative xpath query languages proposed semistructured data unql bdhs lorel aqm xml ql dff 
chose xpath reasons need full functionality query languages document filtering purposes 
particular xfilter examines document time path expressions individual documents needed 
secondly xpath specification world wide web consortium recommendation means considers appropriate widespread deployment 
contrast standardization process xml query languages progress 
may techniques described largely applicable path expressions general believe adapted suit languages need arises 
related user profile modeling matching extensively investigated information retrieval community context information filtering sdi research aab fz fd 
ir style user profiles intended unstructured text systems typically sets keywords represent user interests 
general ir profile models classified boolean similarity 
exact match semantics queries consisting keywords connected boolean operators 
fuzzy match semantics profiles documents assigned similarity value 
document similarity profile exceeds certain threshold said match profile 
vector space model cfg sal statistical approaches bc examples similarity text retrieval take structure information account text databases bn 
methods mature ones described studied context sdi 
techniques 
stanford information filtering tool sift ym ym text filtering system internet news articles keywords 
sift originally boolean profiles changed vector space approach 
profile model differs ir sdi ways application domain ir sdi systems involves text documents system application domain data tagged xml 
profile language takes advantage embedded schema information xml documents providing precise filtering available keywords 
notable exception sift project ir models largely focused effectiveness profiles efficiency filtering vh 
internet scale filtering system efficiency scalability paramount importance 
query profile models studied database community context continuous queries cq standing queries allow users get new results update interest occurs database 
early cq relational databases done terry 
lpt niagaracq proposed information delivery internet 
scalability systems fundamentally limited apply standing queries non equivalent ones delta increments updated database update arrives system 
internet scale systems potentially millions users approaches simply feasible 
niagaracq provides measure scalability grouping exactly equivalent queries little improve efficiency matching xml documents profiles optimization 
key insight building high performance scalable sdi systems systems roles queries data reversed ym 
database system large numbers data items indexed stored queries individually applied 
contrast sdi systems large numbers queries stored documents individually matched queries 
sdi system necessary index queries 
xfilter unique combines scalable sdi approach indexing queries ability document structure schema information leading scalable precise filtering documents internet scale systems 
triggers wf md systems similar cq 
triggers general mechanism involve predicates data items initiate updates data items 
trigger solutions typically optimized fast matching individual items vast numbers relatively simple queries 
addressed issue scalability simple triggers hch addressed xml related issues xfilter handles 
project related xfilter query subscription service provided subscribe changes semi structured information sources 
date focused developing semantics basic mechanisms querying changes semi structured data efficient evaluation new data items large numbers user profiles 
xfilter implementation section describe basic data structures algorithms implement xfilter 
presenting overview xfilter architecture 
architecture depicted follows basic sdi architecture earlier 
major components include event parser incoming documents xpath parser user profiles filter engine performs matching documents profiles dissemination component sends filtered data appropriate users 
path nodes element events xml document xml parser sax element events query index path nodes filter engine user profiles xpath queries xpath parser profile info data dissemination successful profiles filtered data filter engine profile info succesful queries profile base successful profiles filtered data architecture xfilter filtered data users heart system filter engine uses sophisticated index structure modified finite state machine fsm approach quickly locate check relevant profiles 
describe filter engine stores profile information receives xpath parser 
process checking profiles driven event xml parser 
xml document arrives system run parser sends events responded handlers filter engine 
process described section 
matching profiles identified document document sent appropriate users 
current implementation xfilter simply uses unicast delivery sends entire document interested user 
involves integration variety delivery mechanisms investigated previous aab aab delivery partial documents 
issues scope current addressed 
filter engine xml profile model needs efficient algorithms structure data filtering achieve high performance large scale environment internet 
result profile grouping indexing crucial largescale xml document filtering 
purpose similar traditional sdi systems filter engine component xfilter contains inverted index sal called query index see 
query index match documents individual xpath queries 
implementation allows user profiles expressed boolean combinations xpath queries restricted single xpath query 
composite profiles handled post processing matching results profile base check boolean conditions 
due space limitations focus profiles consisting single xpath query 
filtering xml documents structure oriented path language xpath opposed keyword matching introduces new problems addressed 
checking order elements profiles 

handling wildcards descendant operators path expressions 

evaluating filters applied element nodes 
order handle problems efficiently xfilter converts xpath query finite state machine fsm 
events drive execution filter engine generated xml parser described 
xfilter execution model profile considered match document final state fsm reached 
query index built states xpath queries 
ease exposition initially describe solution addresses problems order checking wildcard descendant operators partially addresses third problem element node filters 
described section node filters contain path expressions resulting queries nested path expressions 
element node filters contain path expressions incurs significant additional complexity 
describe solution works filters contain path expressions predicates node contents postpone discussion solution handle nested path expressions section 
main structures filter engine depicted 
xpath query decomposed query id position relative pos level example queries corresponding path nodes query index element hash table cl wl cl wl cl wl cl wl cl wl cl candidate list wl wait list path node decomposition content query index set path nodes xpath parser 
path nodes represent element nodes query serve states fsm query 
path nodes generated wildcard nodes 
path node contains information unique identifier path expression path node belongs generated xpath parser 
position sequence number determines location path node order path nodes query 
node path position nodes numbered sequentially 
integer describes distance document levels path node previous terms position path node 
value set node contain descendant operator 
node separated previous descendant operator flagged special value 
value node set plus number wildcard nodes predecessor node 
level integer represents level xml document path node checked 
xml restrict element types appearing multiple levels document xpath allows queries specified relative addressing possible assign value query parsing 
previous items information updated evaluation query 
level value initialized follows node node query specifies absolute distance root applied root node fixed number wildcard nodes away root node level node set plus distance root 
value node level value initialized 
level value set 
filters node contains filters stored expression trees pointed path node 
path node contains pointer path node query evaluated 
restricted case filters include path expressions pointer 
nested path expressions may raise need pointers additional nodes 
shows example xpath expressions converted path nodes xpath parser 
nodes added query index 
shown query index organized hash table element names appear xpath expressions 
associated unique element name lists path nodes candidate list wait list 
query single state fsm time query single path node represents current state 
refer node current node 
current node query placed candidate list index entry respective element name 
path nodes representing states stored wait lists respective element names 
state transition fsm query represented promoting path node wait list candidate list 
initial distribution path nodes lists node xpath query initially placed candidate list important contributor performance xfilter system 
developed placement techniques described section 
shows straightforward case path nodes initial states placed candidate lists 
xml parsing filtering document arrives filter engine run xml parser drives process checking matching profiles index 
xml parser sax interface standard interface event xml parsing meg 
developed parser toolkit cla non validating xml processor 
sax event interface reports parsing events encountering start tag element directly application callbacks usually build internal tree 
sax interface application implement handlers deal different events handling events graphical user interface 
application events drive profile matching process 
shows example sax event interface breaks structure xml document linear sequence events 
xfilter implemented callback functions parsing events encountering element tag element tag data internal element 
handlers passed name document level element parsing event occurred 
ad xml document sax api events xml version doc para hello world 
para doc start document start element doc start element para characters hello world 
element para element doc document sax api example ditional handler specific information passed described 
start element handler element tag encountered parser calls handler passing name level element encountered xml attributes values appear element tag 
handler looks element name query index examines nodes candidate list entry 
node performs checks level check attribute filter check 
purpose level check sure element appears document level matches level expected query 
path node contains nonnegative level value levels identical order check succeed 
level node unrestricted check succeeds regardless element level 
attribute filter check applies simple predicates attributes element 
checks succeed filters checked node passes 
final path node query final state document deemed match query 
final node query moved state 
done copying node query wait list corresponding candidate list note copy promoted node remains wait list 
value copied node level value updated current level values level checks correctly 
element handler element tag encountered corresponding path node deleted candidate list order restore list state corresponding start element tag encountered 
backtracking necessary handle case multiple elements name appear different level document 
element characters handler handler called data associated element encountered 
data passed handler parameter 
works similarly start element handler performs content filter check attribute filter check 
evaluates filters element content 
start element handler handler cause query move state 
handling nested path expressions recall description simplified excluding processing element node filters contain path expressions 
nested path expressions complicate filtering process introduce non linearity paths 
implementation xfilter fully supports nested path expressions 
due space limitations outline basic approach expressions handled 
xpath parser encounters element node filter query converts expression tree stores current path node 
filter contains xpath query nested query treated separate query embedded 
xpath parser decomposes series path nodes assigns query id leaf node nested query created expression tree filter result evaluate filter expression 
filter query starts absolute path needs done 
path node inserted current path node provide relative execution 
doing filter query examined relative current node path node copied candidate list current path node processed 
evaluating filter result nested path expression filter known allow execution current path node continue filter succeeded 
time filter marked reevaluated xml document parsing finished results queries available point 
query contains nested path expressions evaluated manner considered successful marked filters determined successful 
likewise query fails marking filter filter mark cleared system filter need reevaluated 
enhanced filtering algorithms section describe enhancements basic filtering algorithm described section 
described section xfilter basic approach far basic incorporates sophisticated indexing evaluation mechanisms 
mechanisms strictly necessary perform sdi filtering developed solely enhance performance scalability 
extending basic approach important highlight potential benefits simpler approaches 
fairly obvious brute force strategies employed performing sdi filtering xml documents 
strategy similar method database oriented cq systems store profile query unindexed fashion 
xml document arrives filter engine document parsed indexed 
cq tool iterates profiles matching document document index 
approach easy implement benefit existing xml search tools system users profiles examined new document 
second brute force strategy applies previous keyword filtering ym ym indexes profiles text element names attribute names appear keywords 
new document arrives index locate candidate profiles may possibly satisfied document 
profiles checked document ordering constraints sequentially second pass 
approach perform better brute force approach suffers need perform expensive checks document candidate profiles 
main drawback brute force methods input document invoke profiles individually 
xfilter avoids pitfalls brute force approaches careful identification candidate profiles specialized indexing structures efficiently evaluating candidate profiles 
describe enhancements basic xfilter approach list balancing prefiltering 
performance xfilter enhancements examined section 
list balancing basic approach query index constructed simply placing path node xpath query candidate list corresponding element name placing remaining path nodes wait lists shown 
situations approach inefficient elements queries poorer selectivity due fact address elements higher levels documents sets possible element names smaller 
index lengths candidate lists highly skewed small number long candidate lists provide selectivity 
skew hurts performance done long lists may adequately reduce number queries considered 
observation developed list balance method choosing path node initially place candidate list query 
simple method attempts balance initial lengths candidate lists 
adding new query index element node query entry index shortest candidate list chosen pivot node query 
pivot node placed corresponding candidate list making node checked query document 
approach effect modifies fsm query initial state pivot node 
accomplish representing portion fsm precedes pivot node prefix attached node 
activated prefix query checked precondition evaluation path node 
precondition fails execution stops path node 
order handle prefix evaluation list balance uses stack keeps track traversed element nodes document 
stack fast forward execution portion fsm corresponding prefix 
shows example path nodes modified query index list balance algorithm 
notice lengths candidate lists entry query index 
tradeoff approach additional checking prefixes pivot nodes activated 
see experiments follow additional cost far outweighed benefits list balancing 
query id position relative pos level example queries corresponding path nodes prefix query index element hash table cl wl cl wl cl wl cl wl cl wl cl candidate list wl wait list path nodes content query index list balance prefiltering potential problem basic approach proceeds path expression level time 
considerable amount unnecessary may done queries fail due missing elements late evaluation path 
idea prefiltering eliminate consideration query contains element name input document 
prefiltering implemented initial pass performed order filter checking 
technique incoming document parsed twice 
fortunately previous algorithms developed filtering plain text documents purpose 
employed yan garcia molina key algorithm ym shown efficient fits existing structures xfilter 
method query assigned key element name chosen element names contains 
xfilter key element chosen algorithm described choosing initial nodes list balancing 
document arrives occurrence table constructed hash table containing entry element name appears document 
entry element name occurrence table contains list queries key element name 
table constructed queries referenced table checked see element names contain document 
successful queries checked normal basic list balance algorithm 
document parsed second time queries passed prefiltering step considered 
prefiltering pass introduces additional cost query processing reduce number profiles checked basic list balancing algorithms 
benefits prefiltering method depend selectivity step 
step discards small number profiles advantage having prefiltering turn disadvantage 
examine performance prefiltering section 
performance analysis section evaluate performance basic filtering algorithm enhancements 
examine algorithms basic list balance basic prefiltering list balance prefiltering 
experimental environment implemented xfilter gnu version 
experiments conducted sun ultra workstation mb memory 
structures kept memory experiments 
created benchmark nitf news industry text format dtd cov 
nitf dtd intended news copy production press releases wire services newspapers web news organizations 
developed joint standard news organizations vendors worldwide supported world major news agencies 
commercial applications 
example product new delivers real time news information internet xml format nitf 
nitf dtd contains elements organized levels attributes 
generated xml documents experiments ibm xml generator tool ibm java program designed automate creating test cases xml applications 
tool generates random instances valid xml documents single input dtd user provided constraints 
order create user profiles implemented query generator takes dtd input creates set xpath queries input parameters similar ibm xml generator 
describe tools workload generation section 
experiments user profile contains single xpath query 
created different workloads changing parameters document query generators 
experiment generated set profiles created query index structures 
ran xml generator produce random xml document submitted document system 
measured filter time total time find matching profiles costs creating document profiles sending document users included metric 
experimental setting generated filtered xml documents confidence intervals measured filter times plus minus mean 
workload parameters descriptions parameters experiments value ranges shown table 
denotes number profiles query index measure scalability system terms number users 
maximum depth level number lowest level xml document xpath queries denoted experiment set value documents queries 
due differences way generators actual number levels documents queries tends different 
document generator starts root dtd query generator may start level depending element node initially chooses 
document generator includes elements identified required dtd generates documents deeper maximum depth 
value average depths documents tend larger average depths queries 
table shows mean depth values documents queries various values 
note average depth document input level due presence required elements level nitf dtd 
parameter range description number profiles maximum depth xml document queries probability wildcard element nodes queries level element node filter queries 
means element node filter 
selectivity element node filter element names query generation table workload parameters input max depth avg doc depth avg query depth uniform avg query depth skewed table mean depth workload document queries additional parameters help shape query workload 
probability element node query wildcard operator 
control presence characteristics filters queries 
determines level query contain filter specifies selectivity filter exist 
parameter zipf distribution zip determine choice element names level query generation 
element name query selected randomly set element names allowed level uniform distribution setting choice highly skewed 
note documents generated uniform distribution element names provided ibm xml generator 
analysis experimental results describe results experiments investigate performance filtering algorithms varying number profiles depth queries documents probability wildcards filter placement selectivity 
experiment varying set experiments measure filter time algorithms number profiles system increased 
results shown fixed maximum depth input xml documents queries 
shows results element names queries chosen uniform distribution 
expected basic method lowest performance 
list balance provides improvement prefiltering dramatically improves performance algorithms profiles filtered prefiltering step 
experiment average profiles matched document 
basic algorithm examined profiles order find 
contrast prefiltering applied profiles examined second phase 
case virtually studied combination list balance prefiltering provided best performance 
profiles system combination times faster basic approach 
note able run experiments modest hardware configuration queries increasing point led swapping distorted results 
results running experiment skewed selection elements shown 
case execution times higher algorithms profiles examined match document due element skew 
case benefits prefiltering dramatic uniform case fact list balance performs substantially better combination prefiltering basic 
element selection skew profiles tend similar selectivity prefiltering lower 
contrast list balance enhancement highly effective evens distribution profiles candidate lists 
case combination list balance prefiltering performs best slight advantage list balance 
experiment varying depth xml documents queries user profiles varies application characteristics 
experiment evaluated performance algorithms maximum depth varied 
fixed number profiles varied maximum depth xml document queries 
step depth value generating document queries 
shows filter time increased case element names queries selected uniformly 
filter time increases algorithms input document contains elements additional level resulting checking path nodes queries larger 
basic performs worst combination list balance prefiltering performs best 
interesting aspect graph depth list balance basic prefiltering lines cross 
happens increase levels decreases effectiveness prefiltering opportunities element names appear queries list balancing benefits slightly having choices pivot elements 
skewed case sharp increase filtering time basic number levels increases popular elements appear document boosting filtering time 
list balance smaller increase compared basic presence popular elements queries pivot nodes 
level presence element names queries change skewed distribution workload characteristics remain similar 
result filtering times algorithms increase just slightly 
level prefiltering discards virtually profiles prefiltering algorithms worse performance points 
starting level prefiltering effective due presence popular elements queries resulting better filter time 
experiments indicate combination list balance prefiltering adapt different workload characteristics 
filter time msec filter time msec basic prefilter basic list balance prefilter list balance uniform dist number profiles uniform dist varying basic prefilter basic list balance prefilter list balance uniform dist maximum depth uniform dist varying experiment varying experiment evaluate effect number wildcards occur queries 
performed experiment profiles set maximum depth queries documents 
step experiment varied probability element node may wildcard 
shows filtering times algorithms probability wildcards increased 
important result experiment prefiltering algorithms relatively insensitive wildcards prefiltering quite sensitive 
wildcards introduced selectivity prefiltering drops done second step decreases 
list balance slightly better performance list balance prefiltering wildcard probability high profiles high proportion wildcards 
experiment varying performed experiments find effect element node filters queries 
particular examined effect level filter selectivity filter time 
purpose modified nitf dtd added fixed attribute named dummy element 
filter time msec filter time msec filter time msec basic prefilter basic list balance prefilter list balance skewed dist number profiles skewed dist varying basic prefilter basic list balance prefilter list balance skewed dist maximum depth skewed dist varying basic prefilter basic list balance prefilter list balance wildcard probability varying wildcard probability queries created simple element node filter containing fixed attribute 
adjusted element node filters changing appearance probability dummy input document parameter called xml document generator 
experiment placed single element node filter different levels query fixed query selectivity 
performed experiment profiles maximum depth wildcards queries 
results experiment shown fig ure 
algorithms benefit element node filter upper levels queries cases queries filtered early level checks 
move element node filter deeper levels effect diminishes path length queries filter level filter 
filter time msec basic prefilter basic list balance prefilter list balance element node filter level varying filter level second experiment fixed element node filter level varied selectivity 
assigned selectivity values logarithmic scale focus behavior algorithms filter highly selective 
shown selectivity element node filter relatively small effect algorithms affects degree 
slope basic algorithm bit sharper worse performance effect filter diminishes 
filter time msec basic prefilter basic list balance prefilter list balance element node filter selectivity varying filter selectivity summary results experiments demonstrate scalability xfilter approach show extensions proposed basic provide substantial improvements performance different document workload scale scenarios 
particular list balance prefiltering best filtering performance virtually cases 
list balance effective distribution elements queries highly skewed 
sdi applications exhibit skew list balance simpler requires space list balance prefiltering may preferable practical cases 
proposed xml document filtering system called xfilter selective dissemination information sdi 
xfilter allows users define interests xpath query language 
approach enables construction expressive profiles current ir profile models exploiting structural information available xml documents 
developed indexing mechanisms matching algorithms modified finite state machine fsm approach quickly locate evaluate relevant profiles 
converting xpath queries finite state machine representation xfilter able handle arbitrary regular expressions queries efficiently check element ordering evaluate filters queries cope semi structured nature xml documents 
described detailed set experiments examined performance basic xfilter approach extensions 
experiments showed xfilter effective different document workload scale scenarios suitable internet scale sdi systems 
xfilter implemented context dissemination information systems dbis project aab 
project developing toolkit constructing adaptable application specific middleware incorporates multiple data delivery mechanisms complex networked environments 
intend integrate xfilter primary filtering mechanism toolkit 
acknowledgments 
useful comments earlier drafts 
aab bose cetintemel franklin wang zdonik research data broadcast dissemination proc 
st intl 
conf 
advanced multimedia content processing osaka japan november 
aab baby franklin shapiro zdonik dbis toolkit adaptable middleware large scale data delivery demo description proc 
acm sigmod conf philadelphia pa june 
aqm abiteboul quass mchugh widom wiener lorel query language semistructured data international journal digital libraries april 
bc belkin croft information filtering information retrieval sides coin cacm december 
bdhs buneman davidson hillebrand suciu query language optimization techniques unstructured data proc 
acm sigmod conf montreal canada june 
bn baeza yates navarro integrating contents structure text retrieval acm sigmod record 
bps bray paoli sperberg mcqueen extensible markup language xml www org tr rec xml february 
chawathe abiteboul widom representing querying changes semistructured data proc 
th icde orlando florida february 
cd clark derose xml path language xpath version recommendation www org tr xpath november 
chen dewitt tian wang niagaracq scalable continuous query system internet databases proc 
acm sigmod conf dallas tx may 
cfg cetintemel franklin giles self adaptive user profiles large scale data delivery proc 
th icde san diego february 
cla clark xml parser toolkit www com xml html 
cla clark xsl transformations xslt version www org tr xslt november 
cov cover sgml xml web page www oasis open org cover sgml xml html december 
ddm derose daniel jr maler xml pointer language xpointer www org tr december 
dff fernandez florescu levy suciu xml ql query language xml www org tr note xml ql august 
fz franklin zdonik data face push technology perspective proc 
acm sigmod conf seattle wa june 
fd foltz dumais personalized information delivery analysis information filtering methods cacm december 
hch hanson huang parthasarathy park vernon scalable trigger processing proc 
th icde pp 
sydney australia 
ibm diaz lovell xml generator www alphaworks ibm com tech september 
lpt liu pu tang continual queries internet scale event driven information delivery special issue web technologies ieee tkde january 
md mccarthy dayal architecture active database management system proc 
acm sigmod conf pp 
may 
meg technologies sax free api event xml parsing www com sax index html may 
new www com 
sal salton automatic text processing addison wesley 
stonebraker goh potamianos rules procedures caching views data base systems proc 
acm sigmod conf pp 

terry goldberg nichols oki continuous queries append databases proc 
acm sigmod conf pp 
june 
vh voorhees harman overview seventh text retrieval conference trec nist gaithersburg maryland november 
ym yan garcia molina index structures selective dissemination information boolean model acm tods 
ym yan garcia molina 
sift tool widearea information dissemination 
proc 
usenix tech 
conf pp 

wf widom set oriented production rules relational database systems proc 
acm sigmod conf pp 

zip zipf human behavior principle effort addison wesley cambridge massachusetts 
