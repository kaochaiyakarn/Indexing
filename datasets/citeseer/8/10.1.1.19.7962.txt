natural language generation system xml java technologies holger technologies gmbh saarbrucken germany holger com xml software system flexible real time generation natural language easily integrated real world applications 
describe grammar formalism implementation detail depict context system evaluated provide outlook system 
developed software system flexible real time generation natural language easily integrated real world industrial application environments open xml java implementation interfaces 
motivation developing completely new generation system started observation stated quote thousands millions application programs everyday automatically generate texts probably fewer programs linguistic knowledge techniques studied natural language generation community 
reiter goal develop state ofthe art software wanted change portrayed situation environment applications create 
started experiment xsl world wide web consortium generate natural language suggested cawsey 
figured fairly soon xsl satisfy needs desires mechanism able appropriately handle issue morphology parameterize generation process desired level possibility generate alternatives recover dead ends generation xsl lacking backtracking mechanism 
decided develop natural language generation system incorporates hand ideas xsl hand tries give solution described problems 
generation grammars formalism grammar formalism conceived system developed point view 
means standpoint real world applications hardly require full complete linguistic coverage linguistically motivated generation systems 
formalism extended templates allow inclusion predefined dynamically retrieved text constraintbased inflection context free selection mechanism 
development formalism strongly influenced ideas formalism tg system wein system 
template form depicted backus naur form 
part template elaborated 
conditions conditions describe exact circumstances certain template applied actions executed 
distinct basic types id string category string condition parameter action constraint overview template backus naur form conditions simple conditions 
turn supertypes specific conditions simple condition form actual tests applied input structure 
set commonly conditions predefined ones test equality test certain information existent input structure 
need specific conditional testing realized existing means developer free implement add conditional types 
complex condition type condition possible combine conditions complex 
predefined complex conditions exist condition 
additional complex conditions added providing implementation 
parameterization parameterization easy flexible means guide control generation process regard different linguistic preferences matters style rhetorical structures 
parameterization works introducing preference mechanism provides possibility dynamically sorting application templates set parameters 
example complex interleaved conditions way parametrization works system step process adding parameters templates design generation grammar writer adds parameters templates example 
upper template intended generation text targeted experts lower case text produced novices level expert template novice 
templates preferably low verbosity level desired verbosity low cases 
setting parameters runtime runtime parameters corresponding ones defined grammar set desired values 
continue example set value parameter level expert see template upper box selected 
particularity system parameters assigned weight priority 
example want give higher priority parameter level parameter verbosity shown sorts application templates way sorted level verbosity result sorted level expertise 
category explain value expert value low category explain value novice value low 
example parameters level generation grammars generator level expert example parameters level programming code generator level novice generator verbosity low example parameters weight specified level programming code actions case conditions template tested successfully see section actions contained actions part template executed 
different types actions appear string action getter action selection action 
actual purpose quite different return result string executed successfully 
string action type action simply returns statically specified string result socalled canned text 
getter action getter action possible directly access retrieve data entered input structure 
syntax specifying path data conforms syntax xpath world wide web consortium 
additional processing done returned data 
inflection action action stem defined morphological constraints returns result 
stem stated statically grammar case dynamically retrieved input structure case 
needed morphological constraints furnished constraints part template label provides link confer section details 
label label selection action selection action seen important actions accounts context free backbone system 
allows select template directly specified identifier case category case 
second case templates category backtracking invoked point 
see section optional true selections declared optional means case selection template fails backtracking invoked simply empty string returned 
constraints morphology treatment morphology naturally major issues context complete natural language generation especially working morphologically rich languages german russian finnish 
took great care design develop morphological subsystem powerful flexible easy understand 
actual realization component constraint inheritance algorithm follows example patr ii shieber 
overly simplified example get glimpse morphology works selection actions labelled second labelled 
constraint tells attribute number attribute number sets dynamically value retrieved 
label label attribute number attribute number example constraints compilation order able generation grammar generation engine requires grammar templates exist form java object 
original format grammar plain xml format transformed compilation process internally needed representation 
system capable perform compilation different ways just time compilation technique required templates compiled xml source corresponding java objects runtime generation engine actual generation process 
type compilation advised smaller grammars development testing new grammar constant interleaving compilation hand actual generation process leads quite noticeable overhead 
overhead naturally acceptable real time applications 
pre compilation type compilation allows compile grammar actual deployment generation process 
pre compilation grammars improve performance generator engine tremendously preferred situations 
pre compilation generation grammars similar approach xsl apache xml project xsl stylesheets compiled advance java objects 
input contrast generation systems require input adhere particular time proprietary encoding format core engine system demands input valid xml structure 
actual restrictions input imposed level generation grammars terms access input see section getter actions inflection actions 
obviously lead severe drawback case generation grammar input structure changes heavily emerge complete mismatch xpath specified actions actual structure input 
circumstances feasible change input structure grammar propose introduce additional mapping layer input generator xsl stylesheet dynamically maps input way needed grammar 
editor stressed sections believe formalism powerful straightforward implement 
developing larger grammars real world applications quite demanding non trivial task keep track templates especially relations relations level morphological constraints common xml editors help point show relations 
development graphical editor generation grammars way site cooperation partner dfki german research center artificial intelligence completion development tool allow comfortably edit aspects generation grammars templates 
things editor able depict generation grammar process graphical tree format dependencies templates shown intuitive way 
implementation realization implementation system entirely cornerstones java xml 
xml chosen defacto standard language scenarios information transfer takes place 
turn caused unique capabilities encode information way easy read process generate human beings case formalism 
java chosen provides mechanism productivity programmer development new software things extensive programming interface automatic memory management example 
additional advantage java availability free readily usable open source packages provide host diverse functionalities 
important ones project different xml packages particular xml parser xerces xslt engine xalan apache xml project 
backtracking generation process possible different templates applicable time category conditions satisfied 
templates selected leads different results application template successful means actions successfully executed result returned 
application template failed execution actions successful 
failure template described mean exist solution 
backtrack point unsuccessful template selected apply template 
procedure repeated templates backtrack point 
underlying implementation backtracking mechanism quite elaborated take important issues account important ones performance issues implemented different mechanisms help tremendously enhance performance backtracking phase memorization partial solution 
constraint issues take great care constraint inheritance mechanism backtracking implementation invocation backtracking lead misguided percolation constraints corrupted morphology 
programming interface far talked deployment level generation grammars xml formalism 
turn description tasks undertaken level programming code system run 
shows individual steps taken generate output creating new generator engine thing order get system running create new generator object represents core generation engine generator generator new generator doing implicitly creates objects internal subcomponents mentioned morphological component puts control generation engine 
setting start category id generation engine needs know template start 
done specifying start category case start identifier case 
generator string category generator string id setting grammar generation grammar naturally impossible generate output 
different possibilities pass grammar generation engine generator document grammar generator grammar grammar case document object world wide web consortium contains grammar parsed xml format passed second case pre compiled grammar object passed 
see section setting input addition grammar generation engine needs input structure generate 
set follows generator document input parameter passed document object contains input parsed xml format 
input reassigned calls generation engine 
setting parameters subsection talked parameters control guide generation process 
way parameterization works explained detail 
set parameters runtime add methods generator string name string value generator string name string value double weight step needed parameterization desired 
methods omitted parameterization turned automatically 
run generation process start generation process get output calls string result generator generate document result generator difference calls case simple string containing result returned case document object passed back 
evaluation software development phase newly created system proof evaluation phase reaches predefined goals 
mellish dale especially true industrial context commercial applications case 
context evaluation provided booster project site concurrently developed system 
system optimized implementation slipper cohen singer binary classifier induces rules boosting combines set classifiers solve multi class problems 
goal successfully integrate system 
motivation fact common classification systems quite regard inner workings 
difficult understand certain classification decisions systems 
departed exactly point automatically generate texts explain learning phase booster classification transparent 
additional gadget wanted create explanations languages spoken site english german french italian russian bulgarian turkish 
integration tasks task integration procedure needed answer question output user exact format output 
decided producing description complete learning phase kinds output texts targeted experts novice users 
format chosen final output html 
needed adapt code booster slightly meta data learning phase accessible outside 
wrote small methods simply returned xml format meta data stored internal variables point 
step add booster code code calling generation engine transforming result final output format 
done described section 
importantly generation grammars different languages developed 
happened way set prototypical grammar english tested extensively 
second step grammars languages modelled exemplary 
worked different native speaking colleagues translated original english grammar language 
sample template output shows small portion output returned running booster integrated training set 
result produced english generation grammar parameters set producing texts targeted novice users 
number documents divided different categories 
results produced fold cross validation means data set divided test set training set 
learner trained training data evaluated test set 
repeat process times non intersecting 
result computed average performed tests 
average accuracy reaches achieved applying rules 
sample output booster shows parts template produced second paragraph sample output 
template complete sense different aspects template exposed simplified respect similar parts template left 
category value novice 
repeat process label attribute number 
sample template booster outlook described evaluation quite successful decided deploy site integrate new products projects 
projects ii multilingual information environment travel tourism applications european commission funded industrial project goal developing comprehensive web search information portal specializes tourism sector 
additional application scenarios envisaged possible stage project 
environment apply natural language generation produce texts messages various types media dynamically generated web pages leaflets hand held devices particular cellular phones 
media exploring possibility producing voice enabled output dedicated voice server world wide web consortium sun microsystems 
experimenting moment different possible outputs outputs encoded generation grammar enriched tags 
contribution realtime template natural language generation system designed real world applications standard xml java technologies 
described detail different aspects generation grammars emphasis formalism 
covered architectural implementational issues system 
depicting evaluation done concluded presenting new project system new ideas experimented 
grateful sven huang oliver collaboration ii project especially stephan fruitful discussions tg 
carried ii project funded european commission fifth framework programme ist 
apache xml project 

apache xml project website 
xml apache org june 
stephane huang karsten konrad sven 

text classifiers 
proceedings fifth international conference business information systems bis poznan poland 
stephan 

best surface realization 
proceedings th 
international workshop natural language generation inlg pages england june 
alison cawsey 

presenting tailored resource descriptions xslt job 
proceedings ninth world wide web conference www 


natural language generator real time systems 
master thesis department electrical engineering computer science university december 
william cohen yoram singer 

simple fast effective rule learner 
proceedings annual conference american association artificial intelligence aaai pages 
chris mellish robert dale 

evaluation context natural language generation 
computer speech language 
ehud reiter 

nlg vs templates 
proceedings fifth european workshop natural language generation pages leiden netherlands may faculty social behavioural sciences university leiden 
stuart shieber van noord robert moore fernando pereira 

semantic head driven generation algorithm unification formalisms 
meeting association computational linguistics pages 
sun microsystems 

java speech api markup language specification java 
sun com products java media speech october 
michael wein 

eine mit backtracking 
diploma thesis department computer science university saarland saarbrucken 
graham 

pipelines templates transformations xml natural language generation 
proceedings nlp workshop session th natural language processing pacific rim symposium tokyo november 
world wide web consortium 

xml path language xpath version 
www 
org tr xpath november 
world wide web consortium 

document object model dom level core specification version 
www org tr dom level core november 
world wide web consortium 

extensible stylesheet language xsl version 
www org tr xsl october 
world wide web consortium 

voice extensible markup language version 
www org tr april 
