implementing qos management workflow systems jorge cardoso amit sheth kochut large scale distributed information systems lsdis lab department computer science university georgia athens ga usa workflow management systems wfmss support various types business processes 
organizations adopt new working models commerce new challenges arise workflow systems 
challenge quality service qos management 
qos management includes mechanisms specify compute monitor control quality service products services delivered 
management qos directly impacts success organizations participating commerce activities better fulfilling customer expectations achieving customer satisfaction 
implementation comprehensive qos model workflows specified earlier 
implementation carried meteor workflow management system ideas applied workflow systems 
describe components changed added discuss interact enable specification computation monitoring qos 
technical report lsdis lab computer science university georgia july 
organizations constantly seeking new innovative information systems better fulfill missions strategic goals 
workflow management systems wfmss allows organizations streamline automate business processes reengineer structure increase efficiency reduce costs 
workflow systems valuable asset managing commerce applications span multiple organizations sheth aalst 
number online services increases workflow systems needed coordinate manage interaction web services berners lee fensel bussler 
organizations operating modern markets commerce require systematic design planning control management business processes 
particular important aspect quality service qos management 
products services defined specifications available customers 
especially important internet trade goods customers tangible access products delivered 
management quality leads creation quality products services turn fulfill customer expectations achieve customer satisfaction 
customer expectations satisfaction translated quality service rendered 
equally importantly qos needed basis contracts govern commerce activities trading partners 
workflow systems viewed just automating mechanizing tools 
analyze reshape reengineer way business done 
way achieve objectives qos analysis involving qos metrics time cost reliability fidelity 
runtime monitoring workflow indicates presence unsatisfactory qos metrics strategies employed redesign reengineer dynamically adapt workflow 
organizations able characterize workflows qos direct advantages 
allows organizations translate vision business processes efficiently workflow designed qos metrics 
second allows selection execution workflows qos order better fulfill customers expectations 
third possible monitoring control workflows qos setting compensation strategies undesired metrics identified tool manage contract commitments 
requirement process qos management new challenge workflow systems 
qos major concern networking real time applications middleware research groups concentrated efforts enhancing workflow systems support workflow quality service qos capabilities subset 
research carried extend functionality workflow systems qos done time dimension dimensions qos umbrella 
furthermore solutions technologies preliminary limited eder panagos 
area started definition qos model workflows cardoso sheth 
model includes dimensions time cost reliability fidelity 
dimensions allow specification non functional qos metrics computation workflow qos individual task qos 
enumerates describes enhancements need workflow systems support processes constrained qos requirements ecommerce workflows 
enhancements include development support comprehensive qos model implementation methodologies mathematical model simulation compute predict workflow qos 
developed stochastic workflow reduction algorithm swr step step computation qos metrics 
carried meteor system allow specification computation management qos 
support qos requires modification extension workflow system components development additional modules 
implementation meteor system development specific conceptual model main ideas study applied vast majority workflow systems available aalst barros 
structured follows 
section related done context qos management 
section briefly describe qos model dimensions 
descriptions allow better understanding qos implementation 
section extensive describes modification existing workflow system components creation new modules developed support workflow qos concept 
workflow components new modules analyzed individually 
section explains qos computed qos tasks 
briefly idea algorithm developed describe simulation techniques compute workflow qos 
section explain describe role workflow adaptation dynamic changes support successful qos management 
section presents 
related qos major concern networking cruz georgiadis guerin real time applications clark shenker middleware zinky bakken schlichting research groups concentrated efforts enhancing workflow systems support workflow quality service qos specifications management 
literature quality service wfms limited 
crossflow project sch damen grefen aberer early contribution considering time cost 
approach continuous time markov chain ctmc calculate time cost associated workflow executions 
research qos wfms limited research time management component workflow qos active productive 
eder extend cmp pert annotating workflow graphs time 
process build time instantiation time runtime annotations check validity time constraints 
significant limitation approach direct acyclic graphs dag modeled especially real world workflows cyclic graphs 
cycles general represent re actions repetitive activities workflow 
reichert dadam recognize time important aspect workflow execution 
approach possible specify deadline involving minimal maximal durations execution task 
runtime workflow system monitors specified deadlines notifies users deadlines missed 
system checks minimal maximal time distances tasks followed initial specifications 
marjanovic orlowska describe workflow model enriched modeling constructs algorithms check consistency workflow temporal constraints 
mainly focuses manage workflow changes time accounting temporal constraints 
son kim solution deadline allocation problem queuing networks 
uses graph reduction techniques applied queuing networks 
researchers interested qos area web services 
daml daml specification ontology allows facilitates process interoperability trading partners involved commerce activities 
specification includes tags specify quality service parameters quality guarantees quality rating degree quality 
daml identified specifications web service business processes key specification component qos model adopted needs significantly improved supply realistic solution users 
current limitation daml qos model provide detailed set classes properties represent qos metrics 
qos model needs extended allow precise characterization dimension 
furthermore model compute qos process specified composition web services provided 
addition concepts represent minimum average maximum distribution functions associated dimension cost duration allow implementation algorithms automatic computation qos metrics processes sub processes qos metrics 
workflow quality service workflow qos represents quantitative qualitative characteristics workflow application necessary achieve set initial requirements 
workflow qos addresses non functional issues workflows workflow process operations 
quantitative characteristics evaluated terms concrete measures workflow execution time cost suggests dimensions time cost quality criteria workflow systems include benefit 
qualitative characteristics specify expected services offered system security fault tolerance mechanisms 
qos seen integral aspect workflows embedded workflow specifications wfmss 
quality service characterized various dimensions 
investigated related decide dimensions relevant composing qos model 
research targeted distinct areas operations management organizations stalk hout quality service software systems include networking cruz georgiadis guerin nahrstedt smith middleware areas zinky bakken schlichting real time applications clark shenker 
study areas important workflow systems widely model organizational business processes workflow systems software systems 
qos model weikum divided information services qos categories system centric process centric information centric 
previous studies experience workflow domain constructed qos model includes system process categories 
model composed dimensions time cost fidelity reliability 
time common universal measure performance 
workflow systems defined total time needed instance order transform set inputs outputs 
task response time corresponds time instance takes processed task 
task response time broken major components include process time queuing delay setup delay synchronization delay 
cost represents cost associated execution workflow tasks 
workflow design prior workflow instantiation workflow execution necessary estimate cost execution guarantee financial plans followed 
task cost cost incurred task executed broken major components include realization cost enactment cost 
view fidelity function effective design refers intrinsic property characteristic produced service rendered 
fidelity reflects product produced service rendered 
fidelity difficult define measure subjective 
fidelity workflows predicted possible carefully controlled needed 
workflow tasks fidelity vector dimension composed set fidelity attributes ai reflect qualify quantify task operations 
fidelity attribute refers property characteristic product created transformed analyzed 
fidelity attributes workflow system compute workflows instances tasks meeting user specifications 
automatic tasks kochut sheth fidelity set automatically 
human task really person charge task realization set fidelity attributes 
task reliability corresponds likelihood components perform user demands function failure rate 
depending workflow system task conceptual model tasks instances placed different states typically described state transition diagram task structure execution 
final states exist 
represents success task realization represents failure task realization 
reliability dimension function number times success state reached number times failure state reached 
workflow qos implementation qos model developed implemented meteor workflow management system 
meteor project represented research system meteor suite commercial systems provide open system high workflow management solution enterprise application integration infrastructure 
discussed part research system part commercial product 
meteor architecture includes services enactment manager builder repository 
enactment service includes systems orbwork kochut sheth miller 
task enactment service provide execution environment processing workflow instances 
orbwork fully distributed implementations 
entirely web enactment service comparatively light weight implementation suited complex applications involve limited data exchange need dynamically changed 
orbwork targeted demanding mission critical enterprise applications requiring high robustness dynamic adaptation 
current version orbwork designed address variety shortcomings today workflow systems 
supports interoperability standards jflow omg swap 
started open standards java corba candidate interoperating existing systems variety distributed heterogeneous computing environments java version replacing corba rmi completed 
added modules includes repository reuse song dynamic changes chen instance level exception handling mechanism luo 
orbwork prototyping deploying workflow applications various domains bio informatics hall miller healthcare sheth telecommunications luo defense kang university administration capa 
section describe components meteor system components modified extended created enable qos management 
changes services enactment manager builder repository 
components relationship workflow system illustrated 
builder uses uses repository enactment service instance level control flow data flow qos metrics schema level workflow level infrastructure level workflow schema wfms components simulation system task qos estimator corba server communications os hardware qos management architecture section describe modifications orbwork enactment system 
components analyzed include task schedulers task managers monitors 
load uses enactment manager monitor service create manage workflow instances monitor qos workflow instance qos data qos model cost fidelity time reliability application dimensions system dimensions workflow tasks transitions qos instances uses orbwork enactment service task schedulers task managers tasks responsible managing runtime qos metrics 
implementation point view divide management qos dimensions classes system application dimensions 
system dimensions time reliability responsibility task schedulers application dimensions cost fidelity responsibility task managers tasks 
task schedulers decide starting time task execution notified tasks complete set time dimension qos 
additionally supervision tasks completion puts charge managing reliability dimension 
dimensions called system dimensions system component enactment system responsible registering time reliability metrics runtime 
cost fidelity dimensions task managers candidate components include necessary functions initialize tasks estimated qos metrics 
cost fidelity dimensions called application dimensions manipulated modified task realization 
task schedulers orbwork follows fully distributed scheduling strategy 
scheduling responsibilities shared number participating task schedulers workflow definitions 
distributed schedulers maintain workflow data specification received workflow installation 
task scheduler provides subset protocol implements lightweight local web server 
scheduler accesses workflow specifications protocol directly specification files repository 
set task specifications includes input dependency input transitions output transitions associated conditions date objects sent task 
discussed previously task schedulers responsible managing time reliability dimensions 
discuss separately sections 
managing time section classified task response time time instance takes processed task 
task response time composed major components delay time dt process time pt 
delay time broken queuing delay qd setup delay sd 
response time task represented followed dt pt qd sd pt important time metric synchronization delay 
measure corresponds time join tasks spend waiting incoming transitions enabled 
task difference time tb registered incoming transitions task enabled time ta registered incoming transition enabled tb ta 
measure gives valuable information re engineer business processes increase time efficiency 
efficiently manage time dimension workflow systems register values functions involved calculation task response time 
currently register values functions setup delay 
time dimension values set task structure illustrated 
state mapped functions compose time dimension 
orbwork system follows task structure represent workflow task execution behavior krishnakumar sheth 
effectively support qos management original structure extended inclusion pre init shown 
pre init synchronization delay initial executing queuing delay task response time processing time done commit failed aborted task reliability revised task structure extended krishnakumar sheth synchronization delay time calculated difference time registered task leaves pre init state time registered enters state 
task remains pre init state long task scheduler waiting transition enabled order place task initial state 
happens synchronization tasks join tasks kochut need wait incoming transitions enabled continuing state 
types input output logic xor split xor join split synchronization delay time set zero 
synchronization delay time queuing time difference time task leaves enters initial state 
task initial state indicates task queue waiting scheduled task scheduler 
orbwork task schedulers treat queues fifo policy 
interesting queuing policy variation associated scheduling human tasks 
human task instance initial state means task placed worklist human processing 
user select human task worklist long user role matches task role 
case queuing policy serve random order 
depending workflow system useful queuing policies priority queues 
task instance enters queue time stamp attached 
task removed queue scheduling time stamp attached total queuing time calculated 
task ready executed transits executing state 
previous calculations time task remains state corresponds processing time 
managing reliability task realization number undesirable events may occur 
depending successful unsuccessful execution task placed done fail state non transactional tasks commit abort transactional tasks 
state indicates task execution unsuccessful state indicates task executed successfully krishnakumar sheth 
undesirable event occurs exception generated 
exception viewed occurrence abnormal event underlying workflow management system detect react 
exception occurs invocation task realization task enters fail abort state 
implementation responsibility task schedulers identify final state task execution order subsequently set reliability dimension 
information compute failure rate ratio number times failed aborted state reached number times state done committed reached 
describe task reliability follow discrete time modeling approach 
discrete time models adequate systems respond occasional demands database systems 
stable reliability model proposed nelson reliability task failure rate 
task managers tasks task ready execute task scheduler activates associated task manager 
task manager execution task 
task managers implemented object classified transactional non transactional depending task managed 
human tasks associated task manager 
activated task manager stays active task completes 
task completed terminated prematurely fault task manager notifies task scheduler 
task manager responsible creating initializing qos data structure qos specifications cost fidelity dimensions task 
supervised task starts execution data structure transferred 
task non transactional typically performed computer program set methods available programmatically change initial qos estimates 
methods supplied change time reliability dimensions task schedulers responsible controlling dimensions 
transactional tasks database operation time reliability dimensions dynamically set runtime 
cost fidelity dimensions initialized qos specifications changed 
database systems available information evaluating cost fidelity operations executed 
task completes execution qos data structure transferred back task manager task manager task scheduler 
responsibility task scheduler incorporate metrics registered time reliability dimensions see section qos data structure send monitor processed see section 
case human tasks performed directly users qos specifications cost fidelity dimensions included interface page html templates user 
executing human task user directly set cost fidelity dimensions values reflecting task carried 
mentioned previously human tasks task manager associated specific task scheduler responsible task supervision 
task completes realization task scheduler parses interface page retrieves new qos metrics user may modified 
monitor workflows installed instances executed enactment system generates information messages events describing activities carried 
monitor independent component represented object records events workflows processed enactment service 
depending system setup parameters orbwork monitor display events receives console store readable log file 
extend functionality usability monitor distinct apis developed 
uses protocol send status information orbwork monitor remote clients 
information viewed remotely monitor client 
particularly suitable administrators need periodically check status running instances 
second api developed store status qos events generated relational database 
workflow installed executed task qos estimates runtime qos metrics transition frequencies stored database 
stored information utilized create qos profile tasks enable computation workflow qos 
suitable interface monitor uses store workflow runtime data database 
runtime data generated workflow installations instances execution propagated charge storing information specified database 
shows database schema store workflow related data tasks qos metrics designer runtime metrics 
database schema qos support data model includes metadata describing workflows workflow versions tasks instances transitions runtime qos metrics 
addition storing runtime qos store designer defined qos estimates 
data model captures information necessary subsequently run suitable tools analyze workflow qos 
primary goals database system loosely coupled workflow system enable different tools analyze qos project management statistical tools 
populated workflows installed instances executed 
schema designed store distinct categories information reflecting workflow systems operations qos management 
category corresponds data events generated workflows installed 
installation information describing workflow structure includes tasks transitions stored 
second category information stored corresponds qos estimates tasks transitions specified workflow design phase 
third category corresponds information describes instances behaving runtime 
includes data indicating tasks processing time cost enabling transitions 
monitoring transitions important build functions probabilistically describe enabled rate 
computation workflow qos metrics stochastic structure 
database stores real time runtime information tasks qos metrics investigating implementation mechanisms automatically notify alert operators supervisors qos metrics reach threshold values corrective actions taken immediately 
manager manager install administer workflow definitions schema start workflow instances 
workflow installed manager activates necessary task schedulers carry execution instances 
manager implemented object interface allows clients interact 
manager participate task scheduling activities 
necessary time new workflow installed modified 
workflow installed trace messages send monitor indicating workflow installed associated tasks 
information send monitor includes initial qos estimates user set workflow design 
monitor receives information workflow topology tasks qos estimates uses interface store database qos processing 
workflow builder workflow builder tool graphically design specify workflow 
cases workflow design extra necessary converted automatically application code generator 
builder specify workflow topology tasks transitions control flow data flow data objects task invocation roles security domains kang park 
design phase designer shielded underlying details runtime environment infrastructure separating workflow definition enactment service installed executed 
support workflow qos management designer able set estimates transition probabilities qos estimates tasks 
information combined historical data plays larger role instances executed create runtime qos model tasks probability model transitions 
workflow model task model extended support specification qos metrics 
support extensions builder enhanced allow designers associate probabilities transitions possible specification initial qos metrics tasks see section 
previously workflow model included data flow mappings associated transitions 
association probabilities transitions transforms workflow stochastic workflow 
stochastic information indicates probability transition fired runtime 
qos model specified task transitions probabilities embedded workflow definition stored xml format 
setting initial task qos estimates design time task receives information includes type input output parameters input output logic realization exceptions generated information task model 
task model extended accommodate qos model 
task qos initialized design time re computed runtime tasks executed 
graphical construction workflow process task receives information estimating quality service behavior runtime 
includes information cost time duration reliability fidelity 
task qos estimates composed classes information basic distributional 
basic class associates task qos dimension estimates minimum average maximum values dimension take 
example cost dimension corresponds minimum average maximum costs associated execution task 
second class distributional class corresponds specification distribution function exponential normal gamma weibull uniform statistically describes tasks behavior runtime 
example time qos dimension task describe normal uniform distribution function 
illustrates graphical interface specify basic distributional information setup initial qos metrics 
task qos basic distributional class values specified basic class typically mathematical methods compute predict workflow qos metrics see swr algorithm section appendix distributional class information simulation systems compute workflow qos see section 
devise values classes user typically applies qos models cardoso miller 

recognize specification cost time fidelity reliability complex operation carried properly lead specification incorrect values 
design workflow completed compiled 
compilation generates set specification files realization files task 
specification files spec files include information describing control data flow task 
realization files include operations instructions task executed runtime 
human tasks html files generated carried web browser 
non transactional tasks java code files generated compiled 
runtime executables executed automatically enactment system 
non transactional tasks file containing necessary data connect databases generated 
enable enactment service acquire manipulate qos information builder extended generate qos specification files task 
human tasks decided embed qos metrics directly html forms generated 
re computing qos estimates initial qos specifications may valid time 
overcome difficulty re compute task qos values basic class previous executions 
applies transitions 
distributional class needs distribution recomputed 
involves analysis runtime qos metrics sure qos distribution functions associated task remain valid need modified 
re computation qos estimates tasks transition probabilities done runtime data generated past workflow executions stored database log section 
developed qos estimator module lies builder database log 
qos estimator creates qos model tasks information stored 
calculates transition probability functions transitions enabled runtime 
illustrate architecture qos estimator module 
workflow designed tasks selected compose workflow previously executed qos metrics re computed automatically qos estimator module 
db connector qos estimator module db connector responsible establishment connection database 
currently support relational databases implement jdbc protocol 
data selection qos model construction transition probability statistical computation data conversion data selection db connector database data selection component allows selection task qos metrics defined designer tasks previously executed 
distinct selection modes exist specific selection function constructed 
functions shown table 
component select tasks qos metrics information introduced user design time tasks executed context workflow tasks executed context specific workflow tasks executed particular instance workflow data conversion selection function description ud select selects designer defined qos metrics task specified designer basic class 
rt select selects runtime qos metrics executions task rt select selects runtime qos metrics executions task instance workflow rt select selects runtime qos metrics executions task instance workflow table select functions data selection component subset tasks database log selected data describing qos may need converted suitable format order processed statistical computation component 
data conversion component responsible conversion 
example processing time task stored start execution date execution date data conversion component applies function execution date start execution date compute processing time pt 
example assume reliability task stored database keywords done fail commit abort orbwork 
case data conversion component converts keywords done commit value indicating success task converts keywords fail abort value indicating failure task 
abstraction allows statistical component independent particular choice storing runtime information 
statistical computation appropriate set tasks retrieved database qos data converted suitable format transferred statistical computation component estimate qos metrics 
currently module computes minimum average maximum qos dimensions additional statistical functions easily included standard deviations average deviation variance 
distinct functions developed compute estimates tasks selected previous step shown table 
function computing qos dimensions corresponds scenarios occur 
function utilized retrieve specific task particular dimension dim average specified designer 
function qos estimates needed runtime qos information available 
second function calculates average dimension dim metrics task task executions independently workflow executed 
third function calculates average task dimension dim times task executed instance workflow function calculates average dimension dim task executions instance workflow scenario occur loops exist workflow 
function description designer averagedim average specified designer basic class dimension dim 
multi workflow averagedim computes average dimension dim executions task workflow averagedim computes average dimension dim executions task instance workflow instance averagedim computes average dimension dim executions task instances workflow table designer multi workflow workflow instance average similar functions compute averages shown table support functions compute minimum maximum qos dimensions 
qos model construction qos model construction component uses information computed statistical computation component applies functions table order recompute qos model tasks 
weights wij set manually reflect degree correlation workflow analysis workflows set common tasks shared 
designer averagedim wi designer averagedim wi multi workflow averagedim wi designer averagedim wi multi workflow averagedim wi workflow averagedim wi designer averagedim wi multi workflow averagedim wi workflow averagedim wi instance workflow averagedim table qos dimensions re computed runtime assume instance workflow running desire predict qos task rules choose formula apply predicting qos 
task executed formula chosen predict task qos data available 
task executed previously context workflow wn wn formula chosen 
case assume execution workflow wn give indication behavior workflow task previously executed context workflow instance formula chosen 
task previously executed context workflow instance meaning loop executed formula 
method re compute transitions probability follows lines method re compute tasks qos 
workflow executed values transitions obviously taken initial designer specifications information available 
instances workflow executed data re compute probabilities come initial designer specifications workflow executed instances 
shows graphical user interface available set qos functions associated weights visualize qos estimates automatically computed workflows instances tasks transitions 
qos computation carried swr algorithm see section 
workflow repository service gui calculate qos estimates workflow builder coupled repository 
repository responsible maintaining information workflow definitions associated workflow applications 
repository tool allows users retrieve update store workflow definitions song 
user browse contents repository find existing workflow definitions fragments sub workflows individual tasks incorporated workflow created 
repository service available enactment service provides necessary information workflow application started 
repository supplies practical efficient access workflow definitions queries 
order query search repository qos requirements repository needs extended 
functionality useful allows users find tasks specific qos metrics composing workflows initial qos requirements low cost high availability 
implemented feature consider indispensable qos workflow composition support version system 
workflow qos analysis simulation having graphical representation organizational process model workflow contains information basis analysis 
analysis focuses workflow topology tasks transitions qos metrics 
analyzing workflows allows gather information workflow qos metrics include processing time delay time cost fidelity reliability 
qos information workflow structures transparent quantifiable allowing inefficiencies performance problems bottlenecks 
describe methods builder compute qos metrics workflow process mathematical modeling simulation modeling 
selection method tradeoff time accuracy results 
mathematical method computationally faster yields results may accurate ones obtained simulation 
workflow modeling continuous activity processes continuously improved increase efficiency meet organizational goals strategies 
mathematical modeling comprehensive solutions challenges encountered synthesizing qos composite services discussed detail cardoso sheth 
developed stochastic workflow reduction algorithm swr step step computation aggregate qos properties 
code examples documentation algorithm cardoso 
step reduction rule applied shrink workflow 
step response time cost fidelity reliability tasks involved computed 
additional task metrics individually computed task queuing time setup time 
reduction process continued atomic task kochut sheth left workflow 
state reached remaining task contains qos metrics corresponding workflow analysis 
set reduction rules applied composite service workflow corresponds set inverse operations construct workflow services 
decided allow construction workflows set predefined construction rules protect users designing invalid workflows 
invalid workflows contain design errors non termination deadlocks split instances aalst 
compute qos metrics set distinct reduction rules sequential parallel conditional fault tolerant loop network 
illustration show reduction works parallel system tasks 
reduction parallel system 
illustrates system parallel tasks tn split task ta join task tb reduced sequence tasks ta tb 
reduction incoming transitions ta outgoing transitions tasks tb remain 
outgoing transitions task ta incoming transitions task tb ones shown 
parallel system probabilities pa pa pnb equal 
parallel system reduction applying reduction qos tasks ta tb remain unchanged pb 
compute qos reduction formula applied maxi ti ti ti ar tn workflow needs analyzed builder converts workflow data structure supported builder supported swr algorithm 
workflow suitable data format task qos metrics transition probabilities computed transferred swr algorithm 
algorithm outputs single atomic task contains qos metrics corresponding input workflow 
simulation models pa pb nb mathematical methods effectively alternative utilize simulation analysis miller cardoso 
simulation play important role fine tuning tuning quality service metrics workflows exploring questions 
need adapt change workflow detected deciding changes carry difficult 
change possible effects explored simulation 
facilitate rapid feedback workflow system simulation system need interoperate 
particular workflow specification documents need translated simulation model specification documents new model executed animated fly 
project capabilities involve loosely coupled integration meteor wfms simulation system nair miller miller nair miller 
workflow concerned scheduling transformations take place tasks simulation mainly concerned system performance 
modeling purposes workflow abstractly represented directed graphs control flow data flow 
models represented directed graphs interoperation facilitated 
order carry simulation appropriate workflow model retrieved repository distribution functions defined qos distributional class see section create simulation model specification 
simulation model displayed graphically executed animated 
statistical results collected displayed indicating workflows qos 
qos modeling adaptation order complete workflow initial qos requirements necessary expect adapt workflow response unexpected delays technical conditions changes environment 
long running workflow applications require support dynamic reconfiguration machines fail services moved withdrawn user requirements change 
understandable unpredictable nature surrounding environment important impact qos business processes 
environment characterized heterogeneous affected global perspective events changes global markets new policies new laws regulations 
workflow adaptation necessary set potential alternatives generated objective dynamically changing process continue meet initial qos requirements 
alternative prior carrying adaptation running workflow necessary estimate impact workflow qos 
evaluation set different adaptive procedures carried methods described previously 
system administrator rely solely designer tool builder compose evaluate adaptive strategies 
case mathematical model swr algorithm introduced section 
decide simulation system see section calculate estimate qos metrics 
example workflow unavailable due malfunction components qos constraints time violated intervention carried adapt workflow 
course adaptation strategy may exist 
indispensable evaluate alternatives applied correct process continues exhibit required qos 
charles darwin mentioned strongest species survive intelligent responsive change 
adaptation characterizes ability system adjust environmental conditions 
importance adaptation recognized areas include software margaret database systems mobile systems fault tolerant systems schlichting 
domain workflow management systems important develop mechanisms carry adaptation driven qos requirements 
permits workflow systems prepared adapt range different business organization settings changing context han sheth 
having requirements mind developed module allows orbwork system adaptable system 
implemented interface permits realization dynamic change instances consistent manner chen 
implementation guarantees consistency constraints ensured prior dynamic changes ensured workflow instances modified reichert dadam 
interface provides indispensable functions support adaptation workflow instances 
administrator application access interface necessary change workflow adjust qos metrics 
supporting dynamic changes significantly increases ability wfms follow qos constraints user requirements allowing system cope kind unplanned events execution business process 
organizations operating global competitive markets require high level quality service management 
workflow systems automate support coordinate manage business processes enables organizations reduce costs increase efficiency 
workflow systems viewed just automating mechanizing driving forces 
reshape re engineer way business done 
way achieve continuous process improvement view analyze processes qos perspective 
allows workflows designed adapted quality service constraints drawn organizational goals strategies 
management qos leads creation quality products services turn fulfills customer expectations achieves customer satisfaction 
increasingly important workflow systems new organizational trading models virtual organizations commerce activities span organizational boundaries 
qos management high importance organizations current wfmss workflow applications provide full solutions support qos 
research areas need explored 
hand theoretical qos model necessary formally specify represent calculate qos metrics 
hand experimental workflow systems need developed identify challenges difficulties implementation qos management faces 
developed qos theoretical model explain model implemented meteor system 
support qos management requires modification extension workflow system components 
includes enactment system workflow builder designer monitor code generator repository workflow model task model 
additionally new components need implemented qos estimator module create qos estimates tasks probabilities transitions 
monitor needs additional interface runtime tasks qos metrics propagated logged database data processing purposes 
algorithms methods necessary predict workflow qos metrics 
purpose mathematical model explain simulation calculate predict workflow qos 
approaches enable predictive computation workflows qos tasks qos estimates 
mathematical method computationally faster yields results may precise ones obtained simulation 
choice method tradeoff time accuracy results 
aalst 

generic workflow models handle dynamic change capture management information 
proceedings fourth ifcis international conference cooperative information systems coopis edinburgh scotland ieee computer society press 
pp 

aalst barros hofstede 
workflow patterns homepage 
tm tue nl research patterns 
sheth miller kochut 
healthcare enterprise process development integration lsdis lab department computer science university georgia athens ga technical report 
berners lee 

keynote presentation web services web 
software development expo visionary keynote www com play stream html stream id 
capa 
course approval process automation capa lsdis lab department computer science university georgia athens ga july june 
cardoso 

stochastic workflow reduction algorithm 
lsdis lab department computer science university georgia lsdis cs uga edu proj meteor qos swr algorithm htm 
cardoso sheth miller 
workflow quality service 
international conference enterprise integration modeling technology international enterprise modeling conference valencia spain kluwer publishers 
chen 

design implementation dynamic process definition modifications orbwork enactment system 
sc 
thesis 
department computer science university georgia athens ga clark shenker zhang 
supporting real time applications integrated services packet network architecture mechanism 
proceedings acm sigcomm 
pp 

cruz 

quality service guarantees virtual circuit switched networks 
ieee select 
areas commun 

dadam reichert kuhn 
clinical workflows killer application process oriented information systems 
th international conference business information systems bis poznan poland 
pp 

damen 
business business commerce logistics domain 
caise workshop infrastructures dynamic business service outsourcing stockholm sweden 
daml 
technical overview white describing key elements daml 
eder panagos rabinovich 
time management workflow systems 
bis rd international conference business information systems poznan poland springer verlag 
pp 

fensel bussler 
web service modeling framework 
vrije universiteit amsterdam vu oracle www cs vu nl dieter ftp wsmf pdf 

quality service specification distributed object systems 
distributed systems engineering journal 


managing quality strategic competitive edge 
new york free press 
georgiadis guerin peris 
efficient network qos provisioning node traffic shaping 
ieee acm transactions networking 
grefen aberer ludwig 
crossflow cross organizational workflow management dynamic virtual enterprises 
international journal computer systems science engineering 
hall miller arnold kochut sheth weise 
workflow build information management system geographically distributed genome sequence initiative lsdis lab department computer science university georgia athens ga technical report 
han sheth bussler 
taxonomy adaptive workflow management 
workshop acm conference computer supported cooperative seattle wa 


adaptation software architecture 
third annual international workshop software architecture orlando florida 
pp 

schlichting 
adaptive distributed fault tolerant systems 
international journal computer systems science engineering 
schlichting wong 

survivability customization adaptability cactus approach 
darpa information survivability conference exposition discex 
pp 

kang sheth kochut miller 
multilevel secure workflow management system 
proceedings th conference advanced information systems engineering heidelberg germany springer 
pp 

kang park 
access control mechanisms interorganizational workflows 
proceedings th acm symposium access control models technologies va sch aberer 
deriving service models cross organizational workflows 
proceedings ride information technology virtual enterprises ride sydney australia 
pp 



workflow strategies idg books worldwide 
kochut 

meteor model version large scale distributed information systems lab department computer science university georgia athens ga kochut sheth miller 
orbwork corba fully distributed scalable dynamic workflow enactment service meteor large scale distributed information systems lab department computer science university georgia athens ga krishnakumar sheth 
managing heterogeneous multi system tasks support enterprise wide operations 
distributed parallel databases journal 
luo 

knowledge sharing coordinated exception handling intelligent problem solving support cross organizational business processes 
ph dissertation 
department computer science university georgia athens ga margaret 

adaptable reusable code 
proceedings th international conference software engineering symposium software reusability seattle wa 
pp 

marjanovic orlowska 
modeling verification temporal constraints production workflows 
knowledge information systems 
meteor 
meteor managing operations project home page 
lsdis lab lsdis cs uga edu proj meteor meteor html 
miller cardoso silver 
simulation facilitate effective workflow adaptation 
proceedings th annual simulation symposium san diego california 
pp 

miller nair zhang zhao 
java simulation animation environment 
proceedings th annual simulation symposium atlanta ga pp 

miller sheth kochut singh 
meteor web workflow management system 
journal intelligence information management systems integrating artificial intelligence database technologies 
miller xiang 
web simulation environment 
generation computer systems special issue web modeling simulation 
nahrstedt smith 
design implementation experiences omega point architecture 
ieee jsac 
nair miller zhang 
java query driven simulation environment 
proceedings winter simulation conference colorado ca 
pp 

nelson 

statistical basis software reliability trw software series march 
omg 
rfp submission workflow management facility revised submission ftp ftp omg org pub docs bom pdf 
eder liebhart 
extending pert workflow management systems 
european symposium advances databases information systems adbis st petersburg russia 
pp 

reichert dadam 
supporting dynamic changes workflows losing control 
journal intelligent information systems special issue workflow 


simplicity wins germany mid sized industrial companies succeed 
boston mass harvard business school press 
sheth aalst arpinar 
processes driving networked economy 
ieee concurrency 
son kim kim 
deadline allocation time constrained workflow 
international journal cooperative information systems 
song 

repository workflow designs specifications 
sc 
department computer science university georgia athens 
stalk hout 
competing time competition reshaping global markets 
new york free press 


swap simple workflow access protocol 


design rmi implementation workflow transport protocol orbwork 
sc 
thesis 
department computer science university georgia athens ga weikum 

guaranteed quality dependability information service 
proceedings conference buro technik und wissenschaft freiburg germany springer verlag 
pp 

zinky bakken schantz 
architectural support quality service corba objects 
theory practice object systems 


rule adaptation mobile database systems 
proceedings acm symposium applied computing san jose california 
pp 

appendix swr stochastic workflow reduction algorithm uses set reduction rules cardoso sheth compute workflow qos metrics 
algorithm iteratively applies reduction rules workflow atomic task remains 
iteration response time cost reliability fidelity tasks involved computed 
additional task metrics computed task queue time setup time 
point reduction rules applied size workflow greater initial workflow design incorrect 
outline algorithm listing 
qos swr workflow wf boolean changes true changes changes false forall task wf changes forall changes wf task changes continue changes wf task changes continue changes wf task changes continue change wf task changes continue change wf task changes continue change wf task changes continue workflow size wf error invalid workflow schema atomic task wf return atomic task qos function listing swr algorithm check reduction rule applied set conditions tested 
listing illustrate function 
line line conditions tested ensure conditional rule applied 
done qos system reduced calculated line workflow transformed line 
transformation involves substituting system reduced sequential parallel conditional basic loop dual loop network system new task qos corresponding reduction 
boolean workflow wf task tk check task tk xor split network task tk tk get tasks involved xor split xor join system task tasks wf tk check tasks involved xor split xor join system input output tks return false get task xor split xor join task task tk tks get xor join task task xor join wf tk check xor join task xor join xor join network task tasks involved xor split xor join system network tasks xor join xor join tks return false check tasks xor split connected xor join tks xor join return false check xor split degree equal xor join degree wf tk size wf xor join size return false compute qos conditional system qos qos wf tk change workflow structure set qos new task created 
return true return false function listing function 
