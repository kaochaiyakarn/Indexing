dynamic schema hierarchies autonomous robot jos ca vicente universidad rey juan carlos spain es 
proposes behavior architecture robot control uses dynamic hierarchies small schemas generate autonomous behavior 
schema flow execution target turned parameters tune behavior 
low level schemas woken modulated upper level schemas forming hierarchy behavior 
time awake schemas level running concurrently activated environment perception 
schema wants activated upper level schema called arbitration describes implementation architecture real robot 
science fiction see mobile robot guiding museum navigating office environment serving pet playing soccer today got best sensors actuators 
combined generate behaviors 
hardware improvements clear importance control architecture making critical factor obtain goal autonomous behavior 
robot control architecture defined organization robot sensory actuation computing capabilities order generate wide set intelligent behaviors certain environment 
architectures answer main question 
action selection questions interesting environment 
attention advances architecture lead complex behaviors increasing reliable autonomy 
section main proposals robot control architectures reviewed 
section presents approach dynamic schema hierarchies including action selection mechanism reconfiguration abilities perception organized proposal 
software architecture developed implement commented section 
lines 
minerva www cs cmu edu minerva aibo www aibo com robocup www robocup org jos ca robot control architectures deliberative architectures symbolic ai influenced mobile robotics beginnings resulting deliberative approach 
emphasis world modeling planning deliberation robot action 
mid eighties main paradigm behavior generation 
control architecture seen infinite information loop sense model plan act smpa 
modeling step sensor data fused central world representation stores data environment symbolic form 
robot intelligence lie planning step planner searched state space sequence operators reach target state current 
act seen mere plan execution 
single execution flow functional decomposition problem modules called functions modules vision module path planning module 
behavior architectures rooted connectionist theories mid eighties new approaches exhibited impressive demos real robots proposed 
common factor works distribution control basic behavior units called levels competence schemas agents behavior unit fast loop sensor action partial target 
central representation behavior processes sensory information 
additionally explicit symbols environment 
emphasis put real world robots embodiment interaction environment situated 
distribution control poses additional problem behavior coordination 
behavior goal usually enters contradiction 
final actuation calculated action selection 
major paradigms arbitration command fusion 
arbitration establishes competition control behaviors winning determines final actuation 
priorities activation networks pattie maes state arbitration fall category 
command fusion techniques merge relevant outputs global take account behavior preferences 
relevant approaches command fusion include superposition fuzzy blending voting 
coordination difficult issue 
detail foundational works leaving apart extensions refinements 
contain main relevant ideas approach 
brook subsumption rodney brooks proposed layered decomposition behavior competence levels 
robots developed paradigm herbert toto showing great proficiency low level tasks trash cans collecting local navigation competence level informal specification desired class behaviors robot 
dynamic schema hierarchies autonomous robot level implemented net finite state machines fsm low bandwidth communication channels exchange signals small variables 
low levels provide basic behaviors avoid obstacles wander 
refined behaviors generated building additional levels existing ones 
levels run concurrently upper levels suppress lower level outputs replace inputs 
called subsumption gives name architecture 
action selection mechanism uses fixed priorities hardwired fsm net 
arkin schemas arbib ideas ronald arkin proposed decomposition behavior schemas 
architecture named aura contains types units motor schemas perceptive ones 
motor schema embedded perceptual schema provide necessary sensor information 
instance output navigation motor schema vector desired velocity orientation advance 
navigation behavior obtained combination avoid moving obstacles avoid static obstacles stay move goal schemas 
schema implemented potential field delivering force vector location environment 
commanded movement superposition fields 
extensions arkin approach include sequencing complex behaviors 
finite state acceptor arbitration state means concurrent activation certain schemas triggering events defined jump states 
hybrid approaches trend years evolution hybrid architectures combine strengths paradigms 
instance planning capabilities fast reactivity important complex tasks real reliable robots 
successful approach layered architecture firby rap 
control distributed fixed hierarchy abstraction levels run concurrently asynchronously 
upper layer includes deliberation symbolic representations plans composed tasks 
intermediate level called sequencer receives tasks library task recipes describing achieve 
activates deactivates sets skills accomplish tasks 
skills compose reactive layer 
continuous routine achieve maintain certain goal context situated 
dynamic schema hierarchies propose approach named dynamic schema hierarchies strongly rooted arbib arkin ideas 
basic unit behavior called schema 
control distributed hierarchy schemas 
jos ca schema flow execution target 
turned accepts input parameters tune behavior 
perceptual schemas motor schemas 
perceptual ones produce pieces information read schemas 
data usually sensor observations relevant stimuli current environment input motor schemas 
motor schemas access data generate outputs activation signal low level schemas perceptual motor modulation parameters 
schemas iterative processes perform mission iterations executed periodically 
period iterations main modulation parameter schema 
digital controllers example paradigm deliver corrective action control cycle 
schemas deactivated iteration produce output resumed 
perceptual schema states active 
active schema updating stimuli variables charge 
variables exist outdated 
change active vice versa determined upper level schemas 
motor schemas things little bit tricky states checking ready active 
motor schema preconditions satisfied order active 
checking means schema awake actively checking preconditions don match current situation 
schema passes ready tries win action selection competition ready motor schemas level active 
active schemas deliver activation signals modulation parameters lower level schemas 
schemas implemented different techniques simple rules sensor data fuzzy controllers planners finite state machines requirement iterative 
case planner plan enforced considered resource internalized plan symbolic 
schema deliver action proposal iteration 
hierarchy schemas organized hierarchies 
hierarchies dynamically built 
instance active motor schema needs information accomplish target activates relevant perceptual schemas square boxes order collect search build update information 
may awake set low level motor schemas circles useful purpose implement right reactions stimuli environment 
modulates behave target put checking state 
convenient current situation lower motor schemas deal plausible situations 
way low level schemas recursively woken modulated upper level schemas forming unique hierarchy global behavior 
dynamic schema hierarchies autonomous robot time checking motor schemas running concurrently level displayed solid circles schemas 
level activated environment perception explicit parent arbitration see 
active schemas shown filled circles 
instance motor schema winner control competition level 
perceptual schemas motor schemas sets modulation parameters 
fig 

schema hierarchy pool schemas schemas unused current task rest pool schemas suspended state ready activation time 
appear dashed squares circles schemas 
schemas step away activation awaken schema passed active level 
sequence behaviors implemented motor schema coded finite state machine 
state corresponds step sequence different set lower schemas awaken 
activates perceptual schemas needed detect triggering events change internal state 
action selection time active perceptual schemas draw perceptual subspace attention subspace corresponds plausible values relevant stimuli level displayed white areas 
subset possible stimuli doesn include stimuli produced perceptual schemas shadowed area 
subspace partitioned activation regions defined areas preconditions motor schema satisfied 
parent schema sets child motor schemas activation regions non overlapping 
situation corresponds point subspace may lie activation region motor schema 
corresponding motor schema activated situation activates schema level checking ones 
coarse grained arbitration activation regions 
jos ca fig 

perceptual space attention subspace activation regions despite coarse grained arbitration may appear situations motor schema level satisfy preconditions activation regions overlap 
situations ready activation covered activation region absence control 
child schemas detect control failures checking brothers state parent called fine grained arbitration 
parent change children parameters just select winner control competition level 
similar context dependent blending parent schema knows context arbitration behavior specific 
action selection mechanism distributed nature 
central arbiter just parent children 
competition level occurs child iteration 
allows fast reconfiguration situation changed 
commitment top reactive motivations 
schemas awaken upper level allowed gain control perceived situation chooses winner level 
winner schema double motivation task oriented 
schemas don add motivation activation remain silent checking 
activation flows top hierarchy similar architecture proposed tinbergen lorenz instinctive behavior animals 
addition motivation lateral inhibition level nodes appear ethological architectures 
perception motor schemas decisions information produced perceptual schemas 
perception distributed perceptual schemas may produce pieces information 
exist motor schema eventually needs information produce 
sensor data schema collects complex stimuli environment robot built schema instance map door 
events stimuli want take account behavior require computational effort detect perceive 
includes architecture perceptual schemas searches describes stimulus updating internal variables 
dynamic schema hierarchies autonomous robot due hierarchical activation perception situated context dependent 
perceptual schemas activated 
active ones focus stimuli relevant current situation global behavior attention 
filters huge amounts useless data sensors shadowed area 
system efficient computational resource devoted stimuli interesting current context 
symbolic stimuli convenient behavior hand 
stimuli grounded clear building updating algorithms sensor data lower level stimuli 
different levels perceptual schemas allow abstraction compounded stimuli perceptual schemas input output perceptual schemas 
reconfiguration task certain hierarchy generates right robot behavior 
net schemas builds relevant stimuli sensor data reacts accordingly environment state 
situation changes slightly currently active schemas deal generate slightly different motor commands 
situation changes little bit active schema appropriate anymore environment activates checking motor schema ready react change 
case bigger changes cause control conflict certain level 
case parent called arbitration may decide sleep useless schemas wake relevant ones change children modulation propagate conflict upwards forcing hierarchy reconfiguration upper level 
mechanism solve conflicts may vary schema fuzzy logic simple rules 
reconfiguration may add new levels reduce number 
seen dynamic controller composed controllers running parallel triggering events change completely controllers net 
event requires corresponding perceptual schema detect 
similar discrete state arbitration accounts hierarchy schemas single level 
levels static task dependent tca task trees 
changes designed properly 
schemas don belong level particular 
located different level probably parameters global behavior 
way schemas reused different levels depending desired final behavior 
implementation issues small indoor robot composed pioneer platform offthe shelf laptop linux os 
robot endowed sonar belt bumpers wheel encoders position estimation 
added cheap connected usb computer 
dc motors allow robot movements 
jos ca fig 

robot simulator software architecture developed test cognitive architecture proposed 
code written ansi 
developed socket servers available camera images motor commands raw sonar bumper encoder data client programs message protocol 
servers connected robot simulator environment real platform control program run seamlessly real robot simulator vision 
simulator convenient debugging 
additionally laptop wireless connected control program real robot run board computer 
control program single client process kernel threads inside 
schema implemented thread standard posix threads linux periodically executes iteration function 
communication different threads done regular variables threads share virtual memory space 
motor schemas read variables updated perceptual schemas low level schemas read parameters set higher level schema 
implement state pthread condition variables 
schema associated condition variable sleep needed consuming cpu cycles 
schema may ask halted writing shared variable 
time recipient schema executes iteration suspended condition variable 
schema resumed thread signal condition variable 
typically parent schema sets child parameters wakes signalling condition variable 
activation regions arbitration implemented callback functions 
iteration motor schema calls activation region function check current situation matches preconditions 
parent schema defines activation region functions children 
additionally iteration motor schema checks state brothers level detect control overlaps control 
case arbitration functions invoked solve conflict 
example dynamic schema hierarchies autonomous robot example describe behavior developed robot reaches destination point local environment detours obstacles needed 
implemented parent motor schema activates perceptual schemas motor ones advance 
schema stops robot obstacles close 
default schema case control absence 
schema accepts sonar data moves robot parallel closest obstacle 
advance schema moves certain orientation faster obstacle angle turning get needed 
activation regions set parent schema obstacle closer cm goal angle schema activated advance schema sends motor commands 
sudden obstacle gets closer cm schema wins control competition 
perceptual schema collects sonar encoder data second calculates distance closest obstacle goal angle 
calculate distance orientation parent schema modulates goal 
parent schema read encoder data computes relative distance orientation destination current robot location 
detects robot target point suspends child schemas 
schema robot follow walls 
example schema reusing 
different activation region schemas help achieve global behavior 
new architecture named dynamic hierarchies schemas 
perception control distributed schemas grouped abstraction levels 
levels general task dependent allow greater flexibility fixed hierarchies 
perceptual schemas build relevant information pieces motor schemas take actuation decisions continuous loops 
shares features deliberative behavior approaches 
may symbolic stimuli needed directly grounded sensor data stimuli growing abstraction 
absence central world model overcomes smpa bottleneck avoids need complete model starting act 
perception task oriented avoid useless computation non interesting data 
timely reactions environment changes favored low level loops fast arbitration reconfiguration capabilities 
deliberative schemas enforced deliver action recommendation iteration 
prevents plans programs enforces resources action 
distributed arbitration schema coordination 
schema arbiter children defining non overlapping activation regions 
jos ca combines top target oriented bottom environment oriented motivations action selection 
architecture extensible 
adding new schema quite easy requires define schema parameters iteration arbitration functions 
previous schemas reused building blocks new behaviors 
working perceive stimuli specially vision particular doors extend schema repertoire ones narrow door traversal 

arbib sensorimotor transformations worlds frogs robots 
artificial intelligence 
arkin motor schema mobile robot navigation 
international journal robotics research 
arkin balch aura principles practice review 
journal experimental theoretical artificial intelligence 
ali arkin implementing schema theoretic models animal behavior robotic systems 
proceedings th international workshop advanced motion control amc 
ieee coimbra portugal 
bonasso firby gat kortenkamp miller slack experiences architecture intelligent reactive agents 
journal experimental theoretical artificial intelligence 
brooks robust layered control system mobile robot 
ieee journal robotics automation 
arbib learning detour 
adaptive behavior 
firby building symbolic primitives continuous control routines 
proceedings st international conference ai planning systems aips 

firby task networks controlling continuous processes 
proceedings nd international conference ai planning systems aips 
aaai 
konolige kurt software manual 
sri international 
langer rosenblatt hebert behavior system road navigation 
ieee journal robotics automation 
lorenz foundations ethology 
springer verlag 
maes right thing 
connection science journal special issue hybrid systems 
payton rosenblatt plan guided reaction 
ieee transactions systems man cybernetics 
uses fuzzy logic autonomous robot navigation 
soft computing 
simmons structured control autonomous robots 
ieee transactions robotics automation 
tyrrell hierarchies action selection 
journal adaptive behavior 
