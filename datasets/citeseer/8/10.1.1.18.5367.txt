modeling mobile agent systems high level petri nets presents petri nets approach architectural modeling mobile agent systems 
agent template net proposed model changing number autonomous communicative software agents 
agent space explicitly abstracted component consisting mobility environment system net agent templates agent nets internal connector net 
agent transfer naturally captured transition firing 
assure strong mobility agent state delivered migration 
agent mobility omg examined formalizing interoperable agent system architecture 

mobile agents autonomous objects migrate computer network execute different locations life spans 
concept location treated key feature characterize mobility theoretical models mobile agents 
reason code mobility location change mobile unity provides programming notation captures notion mobility transient interactions mobile nodes 
lime proposed tuple spaces support rapid development dependable mobile applications wired ad hoc networks 
underlying computations decoupled migration captured augmenting program state location attribute change value represent motion 
models location changes described atomic changes location attributes 
argue way model mobile agents adequate address issues related agent migration transfer essential differences logical mobility software agents physical mobility mobile nodes networked environment 
matter fact agent migration comprises sequence activities issuing request migration suspending agent execution transmitting agent resuming agent execution 
impact execution status agents 
case strong mobility agents inactive preserve states migration components system ieee xu yi deng school computer science florida international university miami fl remain active 
migration procedure taken account system composed number concurrent agents 
location change atomic action leaves little room design security policies agent transfer resource access interoperability agent systems 
address problem existing formal models mobile agents presents approach modeling software agents mobility mam high level petri nets underlying formalism 
uniformly realistically model agent mobility introduce notion agent space abstraction encapsulate agents execution migration context agent systems 
model agent space composed mobility environment describes context mobile agents number mobile agents connector binds agents environment 
elements encapsulated structure called component 
concept component naturally corresponds concept location practical setting 
predicate transition prt nets model behavior environments mobile agents internal connectors 
introduce notion agent template represent changing number autonomous communicative agents type bound agent environment 
agent migrates environment state preserved transfer 
show model provides realistic way describe agent mobility 
model omg mobile agent system interoperability facility example illustrate modeling approach 
rest organized follows 
section discusses model software agents 
section describes model agent mobility 
section illustrates specify interoperable mobile agent systems 
section reviews related perspective agent mobility 
summarize contributions discuss section 
modeling software agents viewpoint agent interactive object capable receiving messages sending messages objects 
agent state number methods process messages change state 
simplicity assume mobile agent interacts environment agents solely message passing 
incurs loss generality complex mechanisms remote procedure call method invocation built top message passing 
hand autonomous agent active object usually task 
task may composed kinds concurrent sequential subtasks invoking method sending message object 
despite different functions agents share common structure behavior 
abstracting away application specific elements build generic architectural model autonomous agents petri net model shown fig 
agent task decomposed subtasks method invocation message passing tl migration request sequential operations 
synchronization method invocation modeled place 
agent wants migrate component wants download agent certain component issue migration request 
input output ports consistent internal connectors token types arc inscriptions depending specific agent described 
fig 
agent net unmarked prt net structure places predicates transitions flow relations token types transition selectors arc inscriptions respectively 
simplicity various nets mobile agent system assumed structure pep 
qp 
formally agent net defined prt net incoming message port np outgoing message port np initial marking 
agent net template describe common structure behavior agents belonging type 
simulation point view agent net shared changing number agents type designating argument token net agent identifier 
net ports marking denote behaviors interfaces initial states agents respectively 
agent type easy take state marking marking template net agent going mobile assign state marking component receiving transferred agent 

modeling agent mobility abstraction mobile agent space natural represent agent space component 
different component identifiers indicate different locations mobile agents 
mam model consists set components set connectors 
connectors prt nets specify interactions components previous sam 
arcs connector nets properly inscribed migrating agent transferred single destination 
concerned agent cloning broadcast agent transfer 
individual agents modeled tokens migrate component transition firing runtime 
number agents component changes time 
agent types predefined 
reasonable agent system component accommodate agents certain predefined types 
component mobility environment internal connector group agent templates ff component contains template supports mobility agents type mobility environment represented system net provides facilities agent mobility agent execution activation deactivation 
interface system net mobile agents residing component modeled internal ports internal connector interface system net components modeled external ports connectors 
formally system net pi po si defined prt net set external input ports pi set external output ports po internal input port si internal output port initial marking pi pi np pi po po connected components connectors si np si np connected mobile agents internal connector 
suppose cm ag st msg set components locations set agent templates set agent identifiers structure agent state type messages goto move 
respectively 
basic system net agent mobility shown fig external ports pi po compressed singleton place respectively 
transition activate received agent component put state st agent sa agent template move agent current component get state st agent sa agent template 
predicate pl sa means agent sa type located active current component 
global viewpoint agent way migration contained place component 
case identifier type state agent packed token 
obviously agent state preserved long modified transition migration 
fig styles migration autonomous passive modeled model 
autonomous migration mean agent decide go sending environment migration message goto si 
passive migration mean agent downloaded moved environment request agent environment move pi ti 
message agent si may forwarded agent component outside component po message requesting download agent may request environment move away may processed mobility environment 
message component pi transferred agent pi data object initial request reply message sent message downloading agent ti 
mobile agent system interoperability facility called maf corba architecture interoperability mobile agent systems adopted omg standard 
agent system platform create interpret execute transfer terminate agents 
number agent places different concept place petri nets 
place context agent execute 
agent globally unique name consists authority agent system type identity 
communication agent systems communication infrastructure 
interoperable architecture mobile agent systems includes parts corba service maf orb object request broker 
define common actions agent systems 
model mobile agent systems essentially addressed component represent mobile agent system connector represent communication agent systems 
agent transfer location changes directly supported mam approach 
major task sl sa da ms ims goto sl sa da ms sl sa da ms ms move sl sa da ms sa st da gotol sl move 
sa pl sa cl sa da ms 
ill sa sl goto sl source location cm dl dest location cm sa source agent ag da dest agent ag ms message msg cl current location cm agent template st dl da goto sa dl da goto da ms st agent state st mentioned identifier type state migrating agent packed token 
words net structure migrating agent modeling behavior program code agent need transferred model 
mam model agent templates specific component defined component supports mobility agents specified templates types 
abstraction provides convenient accurate way model agent mobility 

modeling agent systems fig basic system net model standardized functions interactions defined component 
simplicity omit non essential details 
example kind interaction remote agent creation agent transfer class transfer agent method invocation agent systems request firstly issued reply expected 
course easy model petri nets needs message flows interaction agent system incoming request incoming reply outgoing request outgoing reply 
reduce net structure terms reduction rules 
example trivial sequential operations combined transition 
fig specification system refer information 
places transitions described table 
agent system functions interactions related interoperability mobility remote local agent creation agent transfer class transfer agent method invocation agent finder explicitly represented 
fig transition tl check authority incoming messages agents classes 
legal authority component sends response source system discards information 
transitions tl respectively receive sl 
sa 
dl 
ty 
ms sl 
dl da dl da 
da 
ms dl 
da 
ty sa 
dl da sl sa da 
ms sl sa 
da ms sl 
sa 
ty 
ms el 
dl 
da ty 
ms sl 
sa da ras sl sa fig 
essence interoperability depends compatibility arrangement agent execution space activation received agent code state deactivation agent execution collection state 
simplified compatibility requiring agent systems written language agent types information contained agent profiles 
communications rely corba infrastructure orb high level communication facilities reflecting social ability agents remain open 
accordingly structure communication architectural model depend specific mobile agent systems 
advances mobile traditional data objects rmi messages agents classes class agent moving request agent creation request 
mobile agent accepted decoded profile information system type agent language operating system checked 
profile information consistent local system resumed put component rejects execution 
soon resumed agent communicate local environment agents request group classes needs 
agent creation request may cause construction activation agent type 
sa el sl sl 
sa 
da sl 
sa tl ty ms sl 
da 
ms sl 
da 
ms sl 
sa sa 
da 
da 
ms da ty dl 
da ty rns dl da 
agent technology developed address issues semantics level heterogeneity interoperability 
table legend place description pl place indicating active mobile agents messages remote components checked authority agent name authority identity type agent profile language id system type version serialization properties compatibility info 
consistency inconsistency agent name profile stream place name class name list code base agent sender agent class classes agent state information agent agent creation request agent type authority info 
info 
finding list classes agent group classes pl agent state information pll pl pl agent creation request group classes group classes messages sent remote components transition tl description check authority incoming msgs agents classes send data message agent send rmi message agent decode agent get profile information check agent profile decide compatibility consistent inconsistent agent systems deserialize agent class state restore agent state register agent check inconsistency destination source agent systems decode deserialize classes send agent accept migrating request agent group classes destination environment tl accept request creating agent tl call get unique name get classes assign authority create agent call register agent 
find existing agent put agent start thread agent instantiate agent class execute agent thread request classes necessary send messages agents put agent find agents requested classes request transfer mobile agent collect agent states serialize code mobile agent register agent tl request create agent request create agent local environment request create agent remote environment send request transferring agent group classes remote environment local component request transfer classes remote agent find group classes code group classes request send data destination environment assign authority message agent classes sent 
related modeling mobility physical logical active subject ongoing research 
representative works mobile unity lime 
mobile unity extension unity provides programming notation capturing mobility assertion style proof logic 
constructs introduced express transitive forms transient data sharing transient synchronization 
paralleling mobile unity lime adapts linda model communication mobility introducing notions transiently shared tuple spaces tuple location reactive statement 
underlying works computations mobile environment decoupled opportunistic 
location represented attribute change value means motion 
having tackled key problems physical mobility reason logical code mobility provide partial solution logical agent mobility 
knowledge agent transfer critical mobile agents considered strong mobility sense 
computations decoupled 
concerns mam addressed 
specification language coordination model hierarchical tuple spaces multiset rewriting 
nested spaces representing software components move change position tree 
concept connector implicit component interaction defined coordination model communication specified synchronous mechanism multiset rewriting 
tuple spaces approaches suitable fine grained model code mobility 
perspective architectural modeling mobility movement tree intuitive efficient 
location considered key concept characterizing mobility researchers building variants extensions process algebras 
distributed join calculus asynchronous variant re calculus reflexive extension chemical machine cham 
treats channel names location names class values lexical scopes 
possible explicitly describe location change mobile agents 
hand considerable power cham basis specifying software architectures shown cham approaches require description systems reconfigurations encoded reaction rules may far intuitive description system designers 
mobile dynamic petri nets integrate petri nets process algebra 
expressive power increased cognitive simplicity important advantage petri nets decreased 
badouel oliver argued model leaves little hope obtain significant mathematical results automated verification tools close 

model mobile agent systems high level petri nets 
modeling migration procedure led examinations logical mobility software agents differences physical mobility ad hoc networks 
terms migration request styles migration autonomous passive identified 
dynamic connection agents environments computations ad hoc networks decoupled 
agents disabled deactivated migration disconnected environment 
location critical concept managing locations environments agents helpful addressing issues agent transfer strong mobility 
demonstrated previous java tool developing mobile agent systems 
abstracting agent environments components facilitates study interoperability 
assumed class components logical mobility physical mobility 
way modify identifiers imply locations mobile agents 
interesting concern treat mam components abstractions mobile nodes ad hoc networks supporting logical mobility software agents 
issues physical mobility examined carefully 
represent location location change components 
model transient interactions connectors 
third deal relationship physical mobility logical mobility ad hoc network 
example physical mobility affect logical mobility performed simultaneously 
issues trivial net formalism 
order simulate analyze mam models planning adapt sam petri nets software architecture methodology distributed systems demonstrate presence logical mobility software agents 
acknowledgment supported part nsf 
hdr air force office scientific research 
army research office 
daag office naval research 


asperti busi 
mobile petri nets 
report ublcs 
may 

badouel oliver 
reconfigurable nets class high level petri nets supporting dynamic changes workflow systems 
inria research report pi 

ding xu deng 
formalizing maf agent system architecture mam 
internal report fiu school computer science dec 

fournet gonthier levy remy 
calculus mobile agents proc 
conf 
concurrency theory 
concur lncs 


predicate transition nets 
petri nets central models properties 
brauer rozenberg eds lncs 


inverardi wolf 
formal specification analysis software architectures chemical machine model 
ieee trans software engineering 

mascolo 
specification language mobile systems 
proc 
third int 
conf 
coordination models languages 
netherlands lncs april 

murata 
petri nets properties analysis applications 
prof ieee 
vol april 

moldt 
multi agent systems colored petri nets application theory petri nets balbo eds lncs 

omg mobile agent system interoperability facilities 
www omg org cgi bin doc 
orbos 

picco murphy 
roman 
lime linda meets mobility 
proc 
th int 
conf 
software engineering icse 


roman mccann 
mobile unity reasoning specification mobile computing 
acm trans software engineering methodology 


di tschudin 
survey theories mobile agents 
world wide web 

wang deng 
software architecture specification analysis sam case study information software technology 

xu zheng fan 
logic language networked agents 
information software technology 
