proceedings acl conference learning surface text patterns question answering system explore power surface text patterns open domain question answering systems 
order obtain optimal set patterns developed method learning patterns automatically 
tagged corpus built internet bootstrapping process providing hand crafted examples question type altavista 
patterns automatically extracted returned documents standardized 
calculate precision pattern average precision question type 
patterns applied find answers new questions 
trec question set report results cases answers determined trec corpus web 
open domain systems external knowledge tools answer pinpointing 
may include named entity taggers wordnet parsers hand tagged corpora ontology lists srihari li harabagiu hovy prager 
trec qa evaluation voorhees winning system just deepak ravichandran eduard hovy information sciences institute university southern california admiralty way marina del rey ca usa hovy isi edu resource fairly extensive list surface patterns 
apparent power patterns surprised 
decided investigate potential acquiring patterns automatically measure accuracy 
noted qa systems certain types answer expressed characteristic phrases lee wang 
example questions born typical answers mozart born gandhi examples suggest phrases name born birthdate name birthdate formulated regular expressions locate correct answer 
approach automatically learning regular expressions determining precision web types questions 
method uses machine learning technique bootstrapping build large tagged corpus starting examples qa pairs 
similar techniques investigated extensively field information extraction riloff 
techniques greatly aided fact need hand tag corpus abundance data web easier determine reliable statistical estimates 
system assumes sentence simple sequence words searches repeated word orderings evidence useful answer phrases 
suffix trees extracting substrings optimal length 
borrow idea suffix trees computational biology gusfield primarily detecting dna sequences 
suffix trees processed time linear size corpus importantly restrict length substrings 
test patterns learned system new unseen questions trec set evaluate results determine precision patterns 
learning patterns describe pattern learning algorithm example 
table patterns constructed individual question type procedure algorithm 

select example question type 
questions select mozart refer mozart question term answer term 

submit question answer term queries search engine 
give query mozart altavista www altavista com 

download top web documents provided search engine 

apply sentence breaker documents 

retain sentences contain question answer term 
tokenize input text smooth variations white space characters remove html extraneous tags allow simple regular expression matching tools egrep 

pass retained sentence suffix tree constructor 
finds substrings lengths counts 
example consider sentences great composer mozart achieved fame young age mozart genius world indebted great music mozart 
longest matching substring sentences mozart suffix tree extract outputs score 
pass phrase suffix tree filter retain phrases contain question answer term 
example extract phrases suffix tree contain words mozart 

replace word question term tag name word answer term term answer 
procedure repeated different examples question type 
birthdate gandhi newton birthdate steps produce output born answer name name born answer name answer name answer 
common substrings extracted sentences contain name answer 
suffix tree records substrings partly overlapping strings separately saved allows obtain separate counts occurrence frequencies 
seen allows differentiate patterns records living person quite precise general substring precise 
algorithm calculating precision pattern 

query search engine question term example mozart 

download top web documents provided search engine 

segment documents individual sentences 

retain sentences contain question term 

pattern obtained algorithm check presence pattern sentence obtained instances presence pattern answer tag matched word 
ii presence pattern sentence answer tag matched correct answer term 
example pattern name born answer check presence strings answer sentence mozart born word ii mozart born calculate precision pattern formula total number patterns answer term total number patterns answer term replaced word 
retain patterns matching sufficient number examples choose number examples 
obtain table regular expression patterns question type precision pattern 
precision probability pattern containing answer follows directly principle maximum likelihood estimation 
birthdate table obtained name answer name born answer name born answer name born answer answer name born name answer name answer question type range patterns obtained giving system examples 
long list patterns obtained difficult human come manually 
question term appear documents obtained web various ways 
mozart written wolfgang amadeus mozart mozart wolfgang amadeus amadeus mozart mozart 
learn variations step algorithm specify various ways question term specified text 
presence names cause tagged original question term mozart 
arrangement done answer term presence variant answer term cause treated exactly original answer term 
easy birthdate step problematic question types definition may contain various acceptable answers 
general input example terms carefully selected questions represent long list possible answers affect confidence precision scores pattern 
answers need ensure high confidence precision score pattern framework 
precision patterns obtained qa pair example algorithm calculated documents obtained algorithm examples question type 
words precision scores calculated cross checking patterns various examples type 
step proves significant helps eliminate dubious patterns may appear contents websites may web document reappears search engine output algorithms 
algorithm explicitly specify particular question type 
judicious choice qa example pair allows question types change 
finding answers patterns answer new question employ algorithm 
determine question type new question 
existing qa system hovy 

question term question identified existing system 

create query question term perform ir answer document corpus trec collection web search 

segment documents obtained sentences smooth white space variations html tags 

replace question term sentence question tag name case 

pattern table developed particular question type search presence pattern 
select words matching tag answer answer 

sort answers pattern precision scores 
discard duplicates elementary string comparisons 
return top answers 
experiments qa typology hovy selected different question types birthdate location inventor discoverer definition famous 
pattern table question types constructed algorithm 
patterns obtained precision follows name answer name born answer name born answer name born answer answer name born name answer name answer name answer born answer name name answer inventor answer invents name name invented answer answer answer invented name answer invention name answer invents name answer name name invented answer answer name answer name name invented answer discoverer answer discovered name answer discovery name answer discoverer name answer discovers name answer discover name answer discovered name discovery name answer 
name discovered answer answer name name discovered answer definition name related answer answer name answer name name answer name answer form answer name name answer cell answer name answer answer name name answer famous answer name called answer name answer name name answer name answer answer name famous answer name famous answer name answer name name answer location answer name regional answer name answer name answer name answer name answer name name answer name answer answer name near name answer question type extracted corresponding questions trec set 
questions run testing phase algorithm 
sets experiments performed 
case trec corpus input source ir performed ir component qa system lin 
second case web input source ir performed altavista search engine 
results experiments measured mean reciprocal rank mrr score voorhees trec corpus question type number questions mrr trec docs inventor discoverer definition famous location web question type number questions mrr web inventor discoverer definition famous location results indicate system performs better web data trec corpus 
abundance data web easier system locate answers high precision scores system finds examples correct answers top web input source 
similar result qa obtained brill 

trec corpus candidate answers high precision score settle answers extracted sentences matched low precision patterns 
famous question type exception may due fact system tested small number questions 
shortcoming extensions external knowledge added patterns 
frequently observe need matching part speech semantic types 
example question rocky mountains located answered denver new airport white cones imitation rocky mountains background continues lie empty system picked answer background pattern name answer 
named entity tagger ontology enable system knowledge background location 
definition questions pose related problem 
frequently system patterns match term general correct technically 
pattern answer name matches form widespread bureaucratic abuses graft sonar pattern name related answer matches sonar related systems built 
patterns handle long distance dependencies 
example london system locate answer london busiest airports world lies banks river due explosive danger unrestricted wildcard matching required pattern question word lies answer 
reasons system performs certain types questions web performs poorly documents obtained trec corpus 
abundance variation data internet allows system find instance patterns losing answers longterm dependencies 
trec corpus hand typically contains fewer candidate answers question answers may match long term dependency patterns 
information needs added text patterns regarding length answer phrase expected 
system searches range bytes answer phrase capture pattern 
fails perform certain conditions exemplified question lyndon johnson born 
system selects sentence tower gained national attention lost democratic sen lyndon johnson ran vice pattern name answer 
system lacks information answer tag replaced exactly word 
simple extensions system searching range bytes answer phrase search answer range chunks basic phrases english simple np vp pp 
serious limitation framework handle anchor point question term candidate answer sentence 
types question require multiple words question answer sentence possibly apart 
example county city long beach lie answer long beach situated los angeles county requires pattern 
question term situated answer question term question term question term represent terms long beach county respectively 
performance system depends significantly anchor word allows single word match question candidate answer sentence 
presence multiple anchor words help eliminate candidate answers simply condition anchor words question candidate answer sentence 
system classify distinction upper lower case letters 
example micron answered idaho spokesman micron maker semiconductors said high volume product 
answer returned system perfect word micron capitalized question 
canonicalization words issue 
giving examples bootstrapping procedure say birthdate questions answer term written ways example gandhi birth date written oct nd october october 
possibilities date tagger cluster variations tag term 
idea extended smoothing variations question term names persons gandhi written gandhi gandhi 
web results easily outperform trec results 
suggests need integrate outputs web trec corpus 
output web contains correct answers top ones simple word count help eliminating answers 
question types birthdate location clear question types definition 
simplicity method perfect multilingual qa 
tools required sophisticated qa systems named entity taggers parsers ontologies language specific require significant effort adapt new language 
answer patterns method learned small number manual training terms rapidly learn patterns new languages assuming web search engine appropriately switched 
brill lin banko dumais ng 

data intensive question answering 
proceedings trec conference 
nist gaithersburg md 
gusfield 
algorithms strings trees sequences computer science computational biology 
chapter linear time construction suffix trees 
harabagiu moldovan pasca mihalcea rus 

falcon boosting knowledge answer engines 
proceedings th text retrieval conference trec nist 
hovy 
lin 

external knowledge qa 
proceedings trec conference 
nist gaithersburg md 
hovy ravichandran 

question answer typology surface text patterns 
proceedings human language technology hlt conference 
san diego ca 
hovy 
lin ravichandran 

knowledge facilitate pinpointing answers 
proceedings coling conference 
taipei taiwan 
lee seo lee jung 
cho lee 
cha kim 
kim kim 

engineering high performance qa system lexico semantic pattern matching shallow nlp 
proceedings trec conference 
nist gaithersburg md 
lin 

effectiveness dictionary web answer reranking 
proceedings coling conference 
taipei taiwan 
prager chu carroll 

wordnet hypernyms answering questions 
proceedings trec conference 
nist gaithersburg md 
riloff 
automatically generating extraction patterns untagged text 
proceedings thirteenth national conference artificial intelligence aaai 


patterns potential answer expressions clues right answer 
proceedings trec conference 
nist gaithersburg md 
srihari li 

question answering system supported information extraction 
proceedings st meeting north american chapter association computational linguistics anlp naacl seattle wa 
voorhees 
overview question answering track 
proceedings trec conference 
nist gaithersburg md 
wang xu yang liu cheng bu bai 

trec experiments cas ict filtering web qa 
proceedings trec conference 
nist gaithersburg md 
