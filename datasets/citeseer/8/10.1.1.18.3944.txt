aspect architectures remodularization mika department computer science technion haifa israel cs technion ac il shmuel katz department computer science technion haifa israel katz cs technion ac il separation concerns key elements design complex systems software plays major role 
cope complexity large complicated system divided smaller units modularized different concerns localized 
examples units modules include classes components processes 
way divide system total separation concerns satisfied 
possible find concern cuts structure imposed division 
conventional design notations programming languages instance concerns emerging requirements features visible users usually scattered units tangled features inside units 
speculated kind misalignment requirements design code resulting scattering tangling causes problems concerning traceability comprehensibility evolvability low reuse high impacts changes reduced con currency development 
practice addition new features changing features requires invasive treatment affecting modules existing design 
effect maintenance requires vast amount resources notably time money software life cycle 
conventional notations languages allow separation concerns domi nant dimension decomposition 
instance object oriented methods units decomposition objects functional languages functions 
missing capability decompose simultaneously dimensions 
leave institute software systems tampere university technology finland furthermore pointed ossher tarr set relevant concerns context sensitive changes course software life cycle 
suggest possible software demand 
number new design approaches programming languages introduced alleviate problems 
support advanced separation concerns aspect orientation enabling designers address cross cutting concerns modular fashion additive invasive changes existing designs 
offering considerable advantage conventional notations languages current aspect oriented approaches leave relationships different aspects implicit 
consider having aspects describing different cross cutting concerns system 
questions immediately arise primarily aspects orthogonal 
related related common sub aspects interesting right 
effects aspect caused changes raise questions 
questions call making dependencies aspects explicit 
aspect architecture defining dependencies enabling focus subset aspects mutual relationships 
architecture define space 
obtain architecture propose lifting augmentations existing designs class entities 
encapsulate design augmentations introduce new details existing design incrementally 
naturally augmentations cut existing module division 
concerns cut module division think useful concerns rarely cut design augmentations 
describe view aspect architecture outline extract existing system 
aspect orientation adapt view emphasize dis concerns software arti facts 
concerns conceptual matters interest 
term aspect mean software artifact addresses embodies exhibits manifestations cross cutting concern modular way 
scattering tangling il case concerns corresponding software artifacts overlap 
design code treating concern cross cuts modules modules 
modules overlap meaning example pieces code part address concerns 
software system cross cutting concern cross cutting concern module overlapping cross cutting concerns 
general case impossible modularize system disjoint modules addressing separate concern 
possible concerns localized 
trivial cases exists concern deals artifacts treatment scattered modules addressing leads contradiction 
example consider mutual exclusion clearly crosscutting concern processes trying enter critical section 
alleviate problems caused cross cutting concerns number new programming languages design approaches introduced 
support advanced separation concerns enabling designers address crosscutting concerns modular fashion additive invasive changes existing designs 
hand avoid scattering module contains parts system address concern question 
hand avoid tangling module contains parts 
example enables separation con scattered classes java language 
tart laid foundations called multi dimensional separation concerns 
introduced hyperspaces model enables addressing overlapping concerns modular fashion independently notation language 
basic idea capture aspect separate module called hyperslice 
artifact described slice need defined complete notation 
slices need respect module division dominant notation 
slices partly overlapping describing units different perspectives different units describe concepts 
slices grouped define incorporated slices composed form defined complete artifacts 
produce valid slices nested 
aspect architecture opinion certain weaknesses hyperspaces model 
hand cause relationships different aspects implicitly overlapping parts slices composition hard automatically 
fact complex reconciliation may needed slices composed 
hand common interesting right 
candidates generic aspects building aspect library 
mean possible define explicitly 
alleviate problems call making dependencies aspects explicit 
aspect architecture defining dependencies enabling focus concern concern augmentation steps addressing concerns subset aspects mutual relationships 
naturally duplication information avoided 
overlapping parts non orthogonal aspects interesting sub aspects particular described explicitly 
suggest encapsulating design augmentations introduce new details existing design 
augmentations applied incremental additive fashion 
naturally augmentations cut existing mod ule division 
augmentation consists uses defines parts 
hand augmentation uses parts original design adds new details 
hand augmentation defines new details added original parts 
concern addressed collection augmentations 
augmentations composed compose collection augmentation 
operations introduced composing superimposition steps sequential composition parallel composition 
basic operations needed build complex augmentations existing ones 
sequential composition augmentation applied uses part satisfied partly uses defines parts 
parallel composition steps considered applied independently meaning uses defines parts result union uses defines parts components respectively 
aspect architecture depicted 
consists augmentations 
artifact addressing concern built sequential composition augmentations 
similarly addressing concern sequentially composed 
uses parts augmentations dashed lines defines parts solid lines 
architecture different artifacts corresponding concerns relations explicit 
hand replace concern instance feature new concern feature architecture guide doing 
particular leave augmentation possibly common sub aspect untouched addresses concern hand build artifact addressing composite concern ab ones addressing done applying parallel composition augmentations 
result sequentially composed aug mentation 
remodularization pointed ossher tarr set relevant concerns context sensitive changes course software life cycle 
suggest possible software demand 
demand remodularization means designer stake holder able view artifact reflects con cern system interests needed 
calls ability reorganize aspect architecture including creating new augmentations aspects 
principle possible decom pose existing system augmentations define exactly detail 
augmentations correspond lego bricks compose sequential parallel composition build complete system 
uses defines parts augmentations define interfaces bricks respected 
example consider system unrelated objects methods update local values 
system designed concern fault tolerance developing aspect duplicates instances objects different processors guarantees consistency concern security key variables aspect encrypting de sensitive points messages activate methods 
developers guaranteed variable lead overflow checking advance method needed data ma stay fixed range values 
overflow addressed separate concern design phase interest turns isolate treatment creating aspect analyzed allow potential changes implementation 
extracting treatment overflow underlying data manipulation showing interactions aspects 
remodularization clear treatment overflow independent fault tolerance interact security encryption assume values provided code implementing overflow concern needs provide encrypted values limits 
overflow security closely intertwined 
common augmentation possibly common sub aspect 
discussion close relationship aspects superimposition techniques described 
similarly hyperspaces aspect architecture approach needs artifact development formalism applicable 
disco method seen restricted instantiation approach focus capturing joint behavior objects multi object actions 
described weaknesses cur rent aspect oriented approaches software development 
aspect architecture proposed making explicit relationships different aspects lifting augmentations existing designs class entities emphasizing overlapping parts 
overlapping help identify useful sub aspects 
outlined system augmentations 
augmentations composed sequential parallel composition match different concerns system 
clarke harrison ossher 
subject oriented design improved alignment requirements design code 
acm sigplan notices oct 
katz gil 
aspects sitions 
position aspect oriented programming workshop ecoop lisbon portugal june 
ossher tart 
need demand remodularization 
position ecoop workshop aspects dimensions concerns sophia cannes france june 
katz 
calculus distributed systems 
proc 
st international conference aspect oriented software development enschede netherlands apr 
sutton jr tart 
aspect oriented design needs concern modeling 
position aosd workshop aspect oriented design enschede netherlands apr 
tart ossher harrison sutton jr degrees separation multidimensional separation concerns 
proc 
st international conference software engineering pages los angeles ca usa may 
acm press 
aspectj www site 
aspectj 
org world wide web 
disco www site 
disco cs 
tut fi world wide web 

