proceedings th goddard conference mass storage systems technologies cooperation th ieee symposium mass storage systems college park md april pages 
intra file security distributed file system scott zachary peterson ethan miller scott brandt storage systems research center jack school engineering university california santa cruz ca zachary elm scott cs ucsc edu telephone fax cryptographic file systems typically provide security encrypting entire files directories 
advantage simplicity allow fine grained protection data large files 
issue general purpose systems important scientific applications output data sensitive classified 
flexible approach uses common cryptographic techniques secure arbitrary sized region data file region logically non contiguous 
approach called intra file encryption allows mixing data different sensitivity single file 
benefits users permitting related data belonging single file kept separating data different security needs 
supporting intra file encryption requires additional file metadata key management services 
file systems store metadata files server management extra metadata poses little problem storage overhead 
high performance network attached file systems additional metadata poses greater challenges related data placement security 
describes intra file security encryption technique discussion including support distributed file system 
traditionally file system security uses approach file encrypted identically 
approach sufficient situations file accessed supported doe fellowship 
supported lawrence livermore national laboratory 
supported part lawrence livermore national laboratory contract 
entirety sense user application 
cases user access data file 
large file scientific modeling contain unclassified information sections classified data 
examples include satellite map region containing military zones specification vehicle sensitive information recipe secret ingredient 
current techniques users desire different levels security different files complicating access users 
introduce intra file security flexible approach providing encryption file system 
allows users encrypt extents files independently extents single file may contain secure regions 
file system incorporating intra file security transparently handles operations automatic decryption key management 
result file system little extra programming runtime overhead added functionality 
reads entirely managed file system writes occur separate nearly identical function calls unencrypted encrypted data 
flexible encryption technology increasingly important systems distributed storage architectures 
high performance computer systems deal data sets tremendous size files scientific computing data mining applications commonly extend capabilities single storage devices 
distributed storage architectures provide solution demands increased storage needs 
spreading file system data multiple network nodes distributed storage provides high data rates parallelism large scalable storage capacity capability fault tolerance redundancy 
distributing storage increases number potential points network intrusion making data susceptible security breaches 
secure sensitive data networked file servers store transmit encrypted data decoded clients cryptographic keys 
encryption tools exist cumbersome users built file system 
file systems transparently decode encrypted data users proper permission rights 
existing cryptographic file systems secure data directory file basis 
level granularity flexible support applications benefit encrypting smaller regions files 
information encrypted file basis set data containing mix sensitive unclassified data stored files security level 
cases beneficial keep data single file users tools manage data single entity file system applications may secure insecure data sets 
encrypt files file systems existing cryptographic file system techniques address problem 
intra file security offers additional security allowing fine grained control file access breaking file regions differing security compromising single file semantics 
allows system transparently handle security operations making security invisible authorized users 
order implement intra file security introduce security related metadata provide key management solution allows flexibility security access policy 
section introduces intra file security ifs encryption algorithm 
algorithm known cryptographic techniques may implemented stand part larger system file system 
section describes integrate ifs distributed object file system 
sections discuss possible ifs applications related 
intra file security intra file security ifs allows encryption applied segments small byte large entire file multiple encrypted segments need logically contiguous file 
ifs file encrypted data stored logically place occupies physical file blocks contained unencrypted data 
support efficient random file access independently encrypt data logical file block dependence information blocks 
consider file shown contains non contiguous region kept secure 
region spans entire logical block partial blocks 
mentioned region independently standard techniques 
ifs non contiguous region file encrypted independently available appropriate users 
furthermore encrypted data left place programs written full data set including legacy applications function properly 
regions data encrypted unencrypted alike readable encrypted regions contain secured data values contain apparently random values 
insecure region secure region single logical file address space broken secure insecure regions 
encryption technique may block stream cryptographic algorithm 
size encrypted data file block may match cipher block sizes algorithm suited stream ciphers block ciphers little additional effort 
flexibility choosing cryptographic algorithm allows system builders vary encryption strength conform specific standards integrate theshelf hardware chips system 
choice block stream cipher presents slight variation technique methods 
block cipher technique ifs file secure segments may reside block may physically contiguous block 
causes problem block encryption algorithms expect receive contiguous blocks data encryption 
system combines segments block temporary buffer encryption encrypts buffer redistributes cipher back positions original plain text segments 
process uses scatter gather minimizing actual copies bytes start region necessary pad encryption block bits uses pointer manipulation rest encryption place 
output block algorithm fixed size data may necessarily match size employ cipher text stealing match encrypted data sizes unencrypted sizes 
cipher text stealing allows output ciphers size input match cipher block size 
encrypted data redistributed back file block area originally occupied plain text counterpart 
initialization vectors ivs cipher block chaining cbc obscure data containing repeated patterns headers iv unique block storage device need secret 
stream cipher technique stream cipher rc seal ifs need assemble data temporary buffers pointer manipulation collect bytes encryption data may encrypted place 
stream ciphers rc claim speed improvement times des improving performance 
applying feedback chaining stream hides data patterns iv initialize feedback chain metadata structure differ block mode encryption 
encryption metadata default data file assumed unencrypted 
order locate secure data file find encryption parameters encrypted block requires description location secure segments initialization vector information 
ifs structure holding data security node node shown 
size node depends number layout secure regions 
secure region defined extent consisting start length start relative start previous secure region start block region 
secure regions formed repeating patterns data varying levels security shorthand way representing simple patterns secure regions fixed length fixed distance apart 
accomplished specifying repetition count associated offset length specified secure region specification 
addition information location secure regions nodes store unencrypted encrypted access group encrypted access group start length count group kb block encrypted intra file security associated security node node 
note entry node repeat count representing repeated secure regions near file 
regions represented separately distance previous region larger regions 
formation necessary encrypt decrypt secured data 
includes key information region initialization vector iv number seed encryption algorithm operates encrypted data block 
iv necessary ensure encrypted regions data result ciphertext providing insight file structure contents prove useful intruder 
iv differ file block function logical block number file values file identifier 
iv block determined solely logical block number file constants need stored node calculated runtime 
pointers keys hand stored nodes 
possible avoid storing key information node simply referring key information file approach permit encrypting portions file different keys 
store group identifier secure region identifier translated system key approach discussed section 
node structure logical file block contains encrypted segments 
note possible group file system blocks reduce amount storage required nodes technique particularly effective files require large numbers identically sized regions constant spacing 
files secure region descriptors suffice large number secure regions reducing file system overhead ifs 
nodes allocated file system pool blocks regular files reducing size security information allows data stored file system 
noted adequate intended purpose node structure described section improved ways 
node depicted simple implement uses space inefficiently 
nodes compressed gamma compression techniques compressing small numbers 
additionally ifs system attempt recognize represent complex encryption patterns albeit cost added complexity 
integration obsd file system ifs may type file system design implement intra file security file system object storage devices 
proposing high performance network attached storage devices approach similarities network attached secure disks nasd 
file system designed high performance computing workloads precisely kinds applications benefit intra file security 
require strong security order keep data safe storage transit expand encryption capabilities incorporating ifs 
obsd storage systems potential improve file system performance functionality building high performance storage system inexpensive storage components connected high speed networks 
main hardware component storage system object storage device disks storage devices managed single cpu seen file system single device 
data distributed high bandwidth coming large numbers concurrently operating 
obsd responsible managing allocating storage requests obsd form write read range bytes file low level placement data free space management left obsd 
high level information striping pattern translation names file identifiers left metadata server ms accessed user file opened closed 
file system design shown 
key advantage high performance environment ability delegate low level block allocation synchronization segment data device stored leaving file system decide obsd particular segment placed 
distributed file system nodes stored physically near blocks describe avoiding extra traffic central servers distributed storage systems amortizing usage devices 
allocation policies manage local data including file node data placing efficiency high performance backbone gb sec aggregate bandwidth multiple access paths redundant backbone 
metadata server cluster obsd obsd obsd obsd tera scale computers obsd visualization systems obsd storage system architecture 
client systems storage server components wide area clients physical storage devices 
nodes contain secrets encryption provided users extra involvement obsd obsd sends file data nodes clear insecure networks 
security encrypted data lies key management policy 
authentication key management authentication system required file system security regardless encryption capabilities 
focusing support intra file encryption full development authentication system scope 
rely authentication system distribution encryption keys briefly describe system may implemented 
major role metadata server ms control access file system 
users wish open file ms checks file permissions granting access 
step client software authenticates user identity standard authentication techniques kerberos cryptographic hashes 
ms proceeds check permission requested file operation file system access control mechanism 
handle read write requests directly order enforce access rights check identities permissions 
overhead maintaining checking access permissions obsd defeats high performance requirement obsd uses efficient method check validity client request 
ms generates tokens containing encoded access rights open requests sends clients file metadata 
clients tokens requests 
checking permissions encoded token obsd determines validity request 
tokens equivalent capabilities nasd purpose 
ifs security information included forwarded tokens 
access encrypted segments ifs group permissions call groups 
group contains list users groups may key encrypted segment creator encrypted segment specifies group members initial write 
key server ks manages groups separately file access group permissions normally associated file services goal remove management encryption traditional file system administration 
ks responsible checking group permissions generating storing keys 
user viewpoint calls ms involve ms ks reside single concurrent machines 
file interface ifs uses standard posix file semantics instrumenting interface libraries handle security operations transparently 
supporting encryption requires new functions allow writing encrypted segments 
applications writing unencrypted data reading data normal write read function interfaces 
reading encrypted data transparent user 
reading data users key see decrypted data read data applications reading data stored ifs need modifications capable dealing garbage data data file reads encrypted segments file appear random bits user lacks proper key 
user necessary key file system client transparently decrypts file keys supplied authentication tokens 
users proper key may decrypt secure segments view contents encoding token tells obsd send nodes data extra traffic avoided possible 
ifs interface file system extended support encrypted writes 
encrypted segments remain read user encrypted write access granted ifs group permissions 
users permission encrypted writes explicit 
new system calls support encrypted writes 
function translates specification integer identifier 
identifier subsequent calls write function identical standard write function additional argument 
writing encrypted segments file system client creates nodes corresponding blocks sends nodes obsd blocks 
writing data blocks allocated file client fetch update existing node read modify write operation 
unencrypted write requests file blocks containing encryption carefully controlled users encryption rights overwrite encrypted region block 
protect integrity encrypted data impossible users write en segments traditional write function call 
order minimize latency unencrypted writes obsd quickly caches data writes periods inactivity discards changes encrypted segments committing write 
essentially encrypted segments read invoking secure write function 
policy impact blocks encrypted segments effects coherency blocks write fully committed multiple copies block reside file system 
trade performance safety prefer writes encrypted segments occur explicit users key 
ifs applications support encryption data existing unencrypted files migrated ifs file system written non ifs legacy applications ifs capable copy program provided encrypt appropriate portions file 
program take input unencrypted file specification regions encrypted 
databases single large flat file easily benefit ifs encrypting fields database kept secret maintaining single file semantics database 
databases support encrypted fields simply supplying keys particular fields approach requires reasonable amount support database system database queries remain transparent users 
ifs process transparent particularly databases exchanged information file system 
large files military government scientific benefit ifs 
removing need fragment files naturally require multiple levels security simplify applications data management longer users need create files different encryption levels keep track ones related 
eliminating fragmentation ensures high performance sequential random access 
importantly legacy applications transparently ifs capable data formats locations files remain unchanged portions data encrypted 
ifs may transfer partial files distributed file system suggested muthitacharoen 
integrating ifs low bandwidth distributed file system users gain secure access files slow clients 
related file systems storage systems provide higher security encrypting files metadata 
reidel provide framework evaluating secure file systems discusses file systems security provides 
intra file security criteria discuss granularity key protection minimum protection unit single file 
file systems cfs cryptfs require users manage keys 
approach simple suitable ifs sheer number keys required 
systems sfs nasd automatically manage encryption keys permit partial file encryption 
systems including nasd sfs store data disk unencrypted form encryption authentication 
techniques described provides strong protection encrypting data leaving clear client 
intra file security particularly important large distributed file systems enabled nasd object storage devices 
reed provide method strong authentication environment scared providing excellent platform standard security intra file security proposed 
secure file systems distributed storage networks currently permit encryption file directory basis 
applications benefit ability encrypt data smaller pieces different keys permit parts file read written different groups users 
presents solution problem introducing concept called intra file security provides high level design implementing distributed file system individual servers file system 
intra file security uses additional metadata maintain information secure segments allowing blocks file encrypted decrypted individually client 
key management system provides group management facilities adapted hierarchical nature access classified materials organizations requiring security 
acknowledgments randal burns feedback advice ahmed amer proof reading 
shepherd jack cole helpful suggestions patience 
blaze 
cryptographic file system unix 
proceedings acm conference computer communication security pages nov 

cipher hash function design 
phd thesis katholieke universiteit leuven mar 
gibson nagle amiri butler chang gobioff hardin riedel zelenka 
cost effective high bandwidth storage architecture 
proceedings th conference architectural support programming languages operating systems asplos pages san jose ca oct 
gobioff gibson tygar 
security network attached storage devices 
technical report tr cmu cs mellon oct 
mazi res kaminsky kaashoek witchel 
separating key management file system security 
proceedings th acm symposium operating systems principles sosp pages dec 
mazi res shasha 
don trust file server 
proceedings th ieee workshop hot topics operating systems hotos viii pages schloss germany may 
miller long freeman reed 
strong security network attached storage 
proceedings fast conference file storage technologies monterey ca jan 
muthitacharoen chen mazi res 
low bandwidth network file system 
proceedings th acm symposium operating systems principles sosp oct 
neumann steiner schiller 
kerberos authentication service open network systems 
proceedings winter usenix technical conference pages dallas tx 
reed burns long 
authenticating network attached storage 
ieee micro jan 
reidel swaminathan 
framework evaluating storage system security 
proceedings fast conference file storage technologies monterey ca jan 
reiher page popek cook crocker 
secure file sharing minimal system administrator intervention 
procedings world conference system administration networking security apr 
schneier 
applied cryptography 
wiley new york ny nd edition 
witten moffat bell 
managing gigabytes 
morgan kaufmann publishers 
zadok 
cryptfs stackable vnode level encryption file system 
technical report cucs columbia university 

