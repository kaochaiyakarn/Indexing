efficient dynamic distributed cryptographic accumulator michael goodrich roberto tamassia dept information computer science dept computer science university california irvine brown university goodrich cs jhu edu rt jh cs brown edu november show rsa way accumulator realize efficient dynamic authenticated dictionary untrusted directories provide cryptographically verifiable answers membership queries set maintained trusted source 
accumulator scheme authenticated dictionaries supports efficient incremental updates underlying set insertions deletions elements 
user optimally verify constant time authenticity answer provided directory simple practical algorithm 
applications certificate management public key infrastructure integrity data collections published third parties internet 
keywords authenticated dictionary way accumulator certificate revocation third party data publication authentication cached data dynamic data structure modern commerce transactions operate asymmetric computational environment 
typically commerce client applications deployed small devices laptop computers palm devices server side applications deployed large scale multiprocessors 
client applications communicate powerful server farms wireless connections slow modem speed connections 
commerce applications facilitated solutions involve small amounts computing communication client side overly burdening powerful server side applications 
challenge address incorporate added levels information assurance security commerce applications significantly increasing amount computation communication needed client time keeping computations servers reasonable 
major aspect approach challenge replicate computations servers mirror sites network reduce network latency experienced users client applications 
user general closer mirror sites source service experience faster response time mirror communicating directly source 
addition loading user servicing source distributed scheme protects source denial service attacks allows load balancing mirror sites improves performance 
information security problem arising replication data mirror sites authentication information provided sites 
applications user may require data coming mirror site cryptographically validated genuine response come directly source 
example financial speculator receives nasdaq stock quotes yahoo 
finance web site advised get proof authenticity data making large trade 
data replication applications particularly commerce applications wireless computing desire solutions involve short responses mirror site quickly verified low computational overhead 
problem definition formally problem address involves parties trusted source untrusted directory user 
source defines finite set elements evolves time insertions deletions items 
directory maintains copy set receives time stamped updates source update authentication information signed statements update current elements set 
user performs membership queries set type element set contacting source directly queries directory 
directory provides user answer query query authentication information yields proof answer assembled combining statements signed source 
user verifies proof relying solely trust source availability public information source allows check source signature 
data structures source directory maintain set protocol queries updates called authenticated dictionary :10.1.1.109.5235
shows schematic view authenticated dictionary 
query source directory user update auth 
info answer auth 
info authenticated dictionary 
design authenticated dictionary address goals 
goals include low computational cost computations performed internally entity source directory user simple fast low communication overhead bandwidth utilization minimized 
goals particularly important user say authenticated dictionary query authentication information size verification time depend way number items dictionary 
size oblivious solutions authenticated dictionary problem ideally suited wireless commerce applications user devices low computational power low bandwidth 
addition size oblivious solutions add extra level security size dictionary revealed users 
applications authenticated dictionaries number commerce applications 
application third party data publication internet third parties publish financial information stock quotes catalog entries design specifications content providers wish outsource business publishing information processing transactions involving :10.1.1.16.2936
case players framework follows source trusted organization stock exchange produces maintains integrity critical content stock prices allows third parties web portals publish content internet widely disseminated 
publishers store copies content produced source process queries content users 
addition returning result query publisher returns proof authenticity result providing validation service 
publishers perform content updates originating source 
publishers provide added value able charge added cost deploying mirror sites high security environments 
publishers assumed trustworthy publisher may processing updates source incorrectly may victim system break 
financial application authenticated dictionary certificate revocation source certification authority ca digitally signs certificates binding entities public keys guaranteeing validity :10.1.1.109.5235
certificates authorize secure socket layer ssl connections stores business business exchanges 
certificates revoked private key lost compromised loses authority particular private key 
user certificate able verify certificate revoked 
facilitate queries set revoked certificates distributed certificate revocation directories process revocation status queries behalf users 
results queries need trustworthy form basis electronic commerce transactions 
highlight authenticated dictionaries high technology research development efforts querying scientific databases genomic databases astrophysical databases object catalog sloan digital sky survey 
significant scientific economic benefits result querying users need certain results queries accurate current 
organization rest organized follows 
section review previous authenticated dictionaries especially context certificate revocation 
section review exponential accumulator concepts approach 
basic tools rest 
approach realization accumulator authenticated dictionary sections successive refinements simple scheme 
section shows straightforward application exponential accumulator yields simple authenticated dictionary constant verification time linear update query time 
improvement scheme gives constant query verification times linear update time described section 
improvement called precomputed accumulations consists efficient precomputation source auxiliary data directories speed query processing 
section complete technique uses second improvement called parameterized accumulations achieve variety tradeoffs query update times preserving constant verification time user 
example balance times achieve query update time verification time 
section discusses security scheme 
concluding remarks section 
rest denote current number elements set stored authenticated dictionary 
describe validation positive answers membership queries validating 
validation negative answers validating handled standard method discussed section 
previous authenticated dictionaries related research distributed computing data replication network data structure design program checking memory checking cryptography incremental cryptography :10.1.1.43.8746
previous additional authenticated dictionaries conducted primarily context certificate revocation 
traditional method certificate revocation see ca source sign statement consisting timestamp plus hash set revoked certificates called certificate revocation list crl periodically send signed crl directories 
directory just forwards entire signed crl user requests revocation status certificate 
approach secure inefficient requires transmission entire set revoked certificates source directory directory user communication 
scheme corresponds authenticated dictionary update authentication information query authentication information size 
solution clearly size oblivious modifications solution delta size oblivious 
inefficiency underlying authenticated dictionary scalable solution certificate revocation 
micali proposes alternate approach source periodically sends directory list issued certificates tagged signed timestamped value way hash function see indicates certificate revoked 
approach allows system reduce size query authentication information words just certificate identifier hash value indicating status 
unfortunately scheme requires size update authentication information increase wheren number certificates issued certifying authority typically larger number revoked certificates 
size oblivious immediate queries time stamping archiving purposes digest collection 
hash tree scheme introduced merkle implement static authenticated dictionary supports initial construction data structure followed query operations update operations 
hash tree set stores elements leaves hash value node combines hash children 
authenticated dictionary consists hash tree plus signature statement consisting timestamp value stored root proven belong reporting values stored nodes path node storing root values nodes siblings path 
solution size oblivious length path depends kocher advocates static hash tree approach realizing authenticated dictionary simplifies somewhat processing done user validate item set storing intervals individual elements 
note section interval approach applied exponential accumulator 
certificate revocation schemes variations cryptographic hashing proposed static hash tree schemes logarithmic verification time 
techniques incremental cryptography naor nissim hash trees support insertion deletion elements 
scheme source directory maintain trees 
leaf tree stores element set internal node stores way hash children values 
source directory communication reduced items directory user communication remains log 
solution size oblivious 
goodrich tamassia devised data structure authenticated dictionary skip lists 
introduce notion commutative hashing show embed nodes skip list computational dag directed acyclic graph cryptographic computations commutative hashing 
data structure matches asymptotic performance naor nissim approach simplifying details actual implementation dynamic authenticated dictionary 
goodrich tamassia software architecture implementation authenticated dictionary approach goodrich tamassia introduce notion persistent authenticated dictionaries user issue historical queries type element set time :10.1.1.43.4889
martel introduced general approach design authenticated data structures 
consider class data structures links structure form directed acyclic graph bounded degree single source node ii queries data structure correspond traversal starting source 
show data structures authenticated means hashing scheme digests entire digraph hash value source 
scheme sizes answer authentication information verification time proportional size traversed 
show general technique applied design efficient authenticated data structures pattern matching tries orthogonal range searching multidimensional set points 
show build authenticated data structures large fit internal memory way optimizes transfer data memory disk 
cohen goodrich tamassia show efficiently authenticate data structures fundamental problems networks path connectivity queries geometric objects intersection containment queries :10.1.1.18.4864
preliminaries section discuss important cryptographic concepts approach 
way accumulators important tool scheme way accumulator functions :10.1.1.118.1111:10.1.1.43.4889
function allows source digitally sign collection objects opposed single object 
way accumulators originates benaloh de mare 
show utilize exponential way accumulator known rsa accumulator summarize collection data user verification responses constant size 
refinements rsa accumulator construction pfitzmann gennaro halevi rabin sander ta yung :10.1.1.43.4889
show section rsa accumulator implement static authenticated dictionary set element fixed 
dynamic setting items inserted deleted standard way utilizing rsa accumulator inefficient 
researchers noted inefficiency implementation dynamic setting see 
solution viewed refuting previous intuition show sophisticated utilization exponential accumulator efficient dynamic setting 
common form way accumulator defined starting seed value signifies empty set defining accumulation value incrementally set values xn yi xi way function final value depend order xi see :10.1.1.118.1111
addition desires yi larger represent yi final accumulation value yn large 
commutative nature source digitally sign value yn enable third party produce short proof element xi belonging swap xi xn recompute yn scratch pair xi yn cryptographically secure assertion membership xi set known example way accumulator function exponential accumulator exp mod suitably chosen values seed modulus 
particular choosing pq strong primes function difficult break rsa cryptography 
difficulty function context authenticated dictionaries associative updates set require significant recomputations 
implications euler theorem important technicality involved function choice seed particular choose base exponent relatively prime choice dictated euler theorem states theorem euler theorem mod ifa relatively prime 
relatively prime accumulator function exp known corollary euler theorem prove useful 
corollary relatively prime mod mod mod 
implication corollary authenticated dictionary problem source reveal values prime numbers revelation allow directory compute turn result false validation compromised directory 
approach takes care keep values source 
universal hash functions rsa accumulator conjunction universal hash functions 
functions introduced 
family functions universal randomly chosen function scheme set consists bit vectors set consists bit vectors interested finding random elements preimage universal function mapping universal function ux binary matrix 
get representations solutions need solve linear system 
done picking random solution done multiplying bit matrix random bit vector takes bit operations 
choosing suitable prime interested obtaining prime solution linear system represents universal hash function 
lemma stated lemma universal family fraction functions fraction ck elements primes small constant due nature proof show section accept prime inverse greater domain prime results prime number theory density big prime numbers fraction functions family expected number steps find suitable prime 
order find suitable prime high probability need sample times 
recall section picking random solution takes bit operations 
total running time finding suitable prime equal running primality tests 
needs careful choice primality test happen cost prime generation verification dominates cost signing 
miller rabin test 
reduce probability composite number prime perform number additional miller rabin tests 
performing test costly 
fast primality testing algorithm 
additional tests runs miller rabin algorithm reduce primality checking time 
state empirical runs algorithm indicate running times suitable signing schemes 
strong rsa assumption proof security scheme uses strong rsa assumption defined :10.1.1.43.4889
strong rsa problem consists finding integers difference problem standard rsa problem adversary freedom choose base exponent strong rsa assumption exists probabilistic algorithm input outputs rsa modulus probabilistic polynomial time algorithms sufficiently large probability algorithm random input zn outputs mod words randomly chosen element infeasible find mod straightforward scheme en set elements stored source 
element represented bits 
source chooses strong primes suitably large chooses suitably large base relatively prime pq 
note chooses random hash function universal family discussed section 
source broadcasts directories users keeps secret 
element ei source computes representative ei denoted xi prime chosen described section 
source combines representatives elements computing rsa accumulation xn mod broadcasts directories signed message wheret current timestamp 
query asking proof membership ei user submits ei directory 
prove query item ei directory computes value ai xi xi xn mod 
ai accumulation representatives elements xi said witness ei 
computing ai directory returns user representative xi witness ai pair signed source 
computing witness ai trivial task directory perform exponentiations answer query 
making simplifying assumption number bits needed represent independent computation performed answer single query takes time 
note message sent user constant size scheme size oblivious 
validation user checks timestamp current signed source 
checks xi valid representative ei xi ei 
computes xi mod compares ifa xi mod user validity answer strong rsa assumption 
validation time 
updates updates simple approach asymmetric performance insertions easier deletions 
insert new element en set source simply recomputes accumulation follows xn mod xn representative en 
computation xn done time independent see section time 
updated signed pair sent directories time interval 
insertion takes time 
deletion element ei hand general require source recompute new value performing exponentiations 
deletion takes time 
performance straightforward exponential accumulator summarized table 
space insertion time deletion time update info query time query info verify time table straightforward implementation authenticated dictionary exponential accumulator 
linear query time generally considered slow efficient processing large numbers queries 
describe section alternative approach answer queries faster 
precomputed accumulations improvement allows fast query processing 
require directory store precomputed witnesses ai element ei defined 
answer query directory looks ai value computing scratch completes transaction described previous section 
directory precomputed accumulations scheme process query time computation user remaining unchanged 
unfortunately standard way implementing approach inefficient processing updates 
particular directory takes time process single insertion needs update witnesses nlog time process single deletion deletion directory recompute witnesses done algorithm 
glance precomputed accumulations approach appears quite inefficient updates set required 
process updates faster nlog time help source 
method fact implemented time simple phase approach 
details phases follows 
phase set items stored source performing insertions deletions required previous time interval 
build complete binary tree top representative values elements leaf associated representative xi element ei phase perform post order traversal node visited children visited 
main computation performed visit node compute value 
leaf storing representative xi compute xi mod 
internal node children assume proper internal node children compute mod 
computed denotes root done phase 
post order traversal takes time visit computation traversals takes time entire phase runs time 
second phase second phase perform pre order traversal visit node involves computation value 
node defined accumulation values stored nodes descendents including leaf 
leaf associated representative value xi element thena ai 
recall pre order traversal perform visit action node perform respective visit actions children 
root oft non root node letz denote parent denote sibling note proper node root sibling 
compute value follows mod corollary inductively prove equals accumulation values stored non descendents pre order traversal takes time visit action performed time compute ai witnesses time 
note implementing algorithm requires knowledge value presumably source knows 
computation performed source transmit updated ai values directory 
performance precomputed accumulation scheme summarized table 
space insertion time deletion time update info query time query info verify time table precomputed accumulation scheme implementing authenticated dictionary exponential accumulator 
precomputed accumulations approach supports constant time queries linear time updates 
large updates occur frequently linear time computations source take 
section describe combine approaches design scheme efficient updates queries 
parameterized accumulations consider problem designing accumulator authenticated dictionary set en 
section show balance processing source directory depending relative computational power 
main idea choose integer parameter partition set groups roughly elements performing straightforward approach inside group precomputed accumulations approach groups 
details follows 
subdividing dictionary divide set groups yp roughly elements balancing size groups possible 
group yj denote product representatives elements yj modulo 
yp mod accumulation representatives elements set yj 
insertion deletion set yj source compute new value time show section effort bound improved logn time 
source knows value update values update time 
source process update operation time assuming update require adjusting boundaries yj sets 
fortunately maintaining size set yj major overhead 
need keep invariant yj elements elements 
yj set small merge adjacent sets yj yj merging yj sets cause overflow borrow elements adjacent set bring size yj 
likewise yj set grows large simply split 
simple adjustments take time maintain invariant yj size 
course assumes value change significantly insert remove elements 
condition easily handled 
specifically maintain sizes yj priority queue keeps track smallest largest yj sets 
increase insertion check priority queue see smallest set merging borrowing keep growing small 
likewise decrease deletion check priority queue see largest set split 
straightforward inductive argument shows approach keeps size yj 
keeping yj exactly size admittedly extra overhead 
practice overhead probably ignored yj grow shrink rate 
updates non uniform afford completely redistribute elements yj min updates amortizing cost redistribution previous set updates occurred redistribution 
turning task directory recall directory receives values update occurs 
directory perform part update computation time 
validates ei determining group yj ei corresponding xi belongs done table look 
computes ai ai em xm mod xm representative em 
directory answer query time 
performance parameterized accumulation algorithm summarized table 
space insertion time deletion time update info query time query info verify time table parameterized scheme implementing authenticated dictionary exponential accumulator 
denote integer parameter allows balance performance source directories cost update cost performing queries 
example balance performance equally setting implies queries updates scheme take time 
note reasonable values say 
cases reduction dynamic exponential accumulator practical source directories keeping user computation exponentiation signature verification 
user computations simple embedded smart card pda mobile phone 
improving update time source describe section source improve performance update operation parameterized scheme 
recall scheme set partitioned subsets yp source maintains yj behalf directories accumulation values yj 
recall group yj product items yj modulo 
algorithm description source recomputes scratch update occurs takes time 
section describe done log time 
method source store elements yj balanced binary search tree 
internal node tj source maintains value product items stored descendents modulo 
tj tj denotes root tj 
insertion deletion affect log nodes tj recompute values log total time 
update source recompute value log time assuming size yj violate size invariant 
size yj update violates size invariant easily adjust performing appropriate splits joins trees representing yj yj yj 
rebuild entire set trees updates keep sizes yj sets cost periodic adjustment probably necessary practice applications amortized previous updates 
performance resulting scheme summarized table 
space insertion time deletion time update info query time query info verify time log log table enhanced parameterized scheme implementing authenticated dictionary exponential accumulator 
denote integer version scheme achieve complete tradeoff cost updates source queries directories 
tuning parameter time yield optimal balance relative computational powers source directories 
balance number queries updates time intervals 
theorem accumulator authenticated dictionary scheme set size uses space performance parameter insertion deletion times log update authentication information size query time query authentication information size verification time 
balance insertion time deletion time update authentication information size query time achieve bound keeping query authentication information verification time constant 
security show adversarial directory forge proof membership element proof follows closely related constructions 
important property scheme comes representing elements set prime numbers accumulator scheme stage scheme insecure 
adversarial directory forge proof membership divisors elements proofs seen 
theorem scheme defined section strong rsa assumption directory resources polynomially bounded produce proof membership elements proof proof related proofs 
assume adversarial directory seen proofs membership elements en trusted source computed representatives xn suitable primes defined section 
witnesses computed solely trusted source balancing trusted source directories 
trusted source distributed signed pair 
definition scheme xi prime representative ei xi conditions section xi mod need show directory come triplet en xn proving membership element en set 
proof contradiction 
suppose triplet en xn 
hold checked user necessary xn prime xn xn en xn mod gcd xn xn 
xn xn 
define xn integers xn uf holds integers 
directory find polynomial time extended euclid algorithm 
set av au vf auf xn auf uf xn uf polynomial time find value th root strong rsa assumption section 
xn xn divides xn 
xi implies xn xi forsome element en set contradiction 
adversarial directory find membership proofs elements discussion shown exponential accumulator function basis practical efficient scheme authenticated dictionaries relies reasonable cryptographic assumptions similar justify rsa encryption 
distinctive advantage approach validation query result performed user takes constant time requires computations single exponentiation digital signature verification simple performed devices limited computing power smart card mobile phone 
important aspect scheme dynamic distributed supporting efficient updates balancing source directories 
scheme achieves complete tradeoff cost updates source queries directories updates log time queries time fixed integer parameter example achieve time updates queries 
scheme easily adapted contexts certificate revocation queries needs validate item set case standard method storing dictionary items ranges ri ei ei sorted list elements see kocher 
query element returns range ri ei ei ei ei plus cryptographic validation range ri 
ife endpoints ri ei ei note approach requires way representing notion 
overhead adds constant factor running times updates queries validations 
acknowledgments andrew giuseppe ateniese douglas helpful discussions mail exchanges relating topics 
aiello ostrovsky 
fast digital identity revocation 
advances cryptology crypto lecture notes computer science 
springer verlag 
goodrich tamassia :10.1.1.43.4889
persistent authenticated dictionaries applications 
proc 
information security conference isc volume lecture notes computer science pages 
pfitzmann :10.1.1.43.4889
collision free accumulators fail signature schemes trees 
advances cryptology proc 
eurocrypt volume lecture notes computer science pages 
bellare goldreich goldwasser :10.1.1.118.1111
incremental cryptography case hashing signing 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 
bellare goldreich goldwasser 
incremental cryptography application virus protection 
proceedings seventh annual acm symposium theory computing pages 
benaloh de mare 
way accumulators decentralized alternative digital signatures 
advances cryptology eurocrypt volume lecture notes computer science pages 
bloch daniels spector 
weighted voting algorithm replicated directories 
journal acm 
blum 
program result checking new approach making programs reliable 
andrzej lingas rolf karlsson editor automata languages programming th international colloquium volume lecture notes computer science pages 
springer verlag 
blum evans gemmell kannan naor :10.1.1.20.1625
checking correctness memories 
algorithmica 
blum kannan 
designing programs check 
acm jan 
blum wasserman 
program result checking theory testing meets test theory 
proceedings th annual symposium foundations computer science pages 
brunner szalay connolly 
science archive sloan digital sky survey 
proceedings astronomical data analysis software systems conference 
laud lipmaa 
accountable certificate management undeniable attestations 
acm conference computer communications security 
acm press 
carter wegman 
universal classes hash functions 
proc 
acm symp 
theory computing pages ny 
association computing machinery 
cohen goodrich tamassia :10.1.1.18.4864
authenticated data structures graph geometric searching 
technical report center geometric computing brown university 
www cs brown edu stms papers pdf 
cooper 
efficient delta 
proceedings ieee symposium security privacy pages 
cramer shoup 
signature schemes strong rsa assumption 
acm conference computer communications security pages 
devanbu gertz martel stubblebine :10.1.1.16.2936
authentic third party data publication 
fourteenth ifip conference database security 
fischlin 
incremental cryptography memory checkers 
eurocrypt advances cryptology proceedings eurocrypt lncs pages 
fischlin 
lower bounds signature size incremental schemes 
th annual symposium foundations computer science pages 
gemmell mackenzie 
efficient fresh certification 
international workshop practice theory public key cryptography pkc lecture notes computer science pages melbourne australia 
springer verlag berlin germany 
gennaro halevi rabin 
secure hash sign signatures random oracle 
advances cryptology proc 
eurocrypt volume lecture notes computer science pages 
springer verlag 
goodrich tamassia 
efficient authenticated dictionaries skip lists commutative hashing 
technical report johns hopkins information security institute 
www cs brown edu stms papers pdf 
goodrich tamassia 
implementation authenticated dictionary skip lists commutative hashing 
proc 
darpa information survivability conference exposition volume pages 
gunter jim 
generalized certificate revocation 
proc 
th acm symp 
principles programming languages pages 
karp 
mapping genome combinatorial problems arising molecular biology 
proceedings fifth annual acm symposium theory computing pages 
kaufman perlman 
network security private communication public world 
prentice hall englewood cliffs nj 
kocher 
certificate revocation validation 
proc 
international conference financial cryptography volume lecture notes computer science 
widmayer 
distributing search tree growing number processors 
sigmod record acm special interest group management data 
young 
sloan digital sky survey 
www sdss org sdss html 
young 
data collection sloan digital sky survey heuristic 
journal algorithms 
martel devanbu gertz kwong stubblebine 
general model authentic data publication 
www cs ucdavis edu devanbu files model pdf 
merkle 
protocols public key cryptosystems 
proc 
symp 
security privacy 
ieee computer society press 
merkle 
certified digital signature 
brassard editor advances cryptology crypto volume lecture notes computer science pages 
springer verlag 
micali 
efficient certificate revocation 
technical report tm mit laboratory computer science 
naor nissim 
certificate revocation certificate update 
proceedings th usenix security symposium security pages berkeley 
pugh 
skip lists probabilistic alternative balanced trees 
commun 
acm 
sander ta yung 
blind membership proofs 
proc 
financial cryptography lecture notes computer science 
schneier 
applied cryptography protocols algorithms sourcecode john wiley sons new york 
sullivan wilson masson 
certification computational results 
ieee trans 
comput 

