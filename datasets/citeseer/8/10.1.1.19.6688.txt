framework developing embeddable customized logics olivier irisa campus universitaire de beaulieu rennes cedex irisa fr logic applications customized logics composed logics 
customized logics embedded black box application 
implementation requires specification defined interface common operations parser printer theorem prover 
order able compose logics define composition laws prove properties 
principles logic functors compositions constructing customized logics 
important issue operations different inter operate 
propose formalization logic functors semantics implementations composition 
framework building embeddable automatic theorem provers customized logics 
framework defines logic functors logic components instance component may propositional logic component may interval logic called intervals 
logic functors composed form new logics instance propositional logic intervals 
logic functor proof theory implemented theorem prover 
desire proof theory theorem prover composition logic functors result composition theorem provers component logic functors 
logic functors compositions implement common interface 
possible construct generic applications instantiated logic component 
conversely customized logics built logic functors embedded application comply interface 
logic functors specify shelf software components validation composition reduces form type composition automatically results automatic theorem prover 
logic functors assembled routinely system level programming compilers operating systems file systems information systems 
article organized follows 
section presents motivations section introduces notions logics logic functors logic author supported scholarship cnrs functor properties completeness correctness 
section introduces simple nullary logic functor example sophisticated unary logic functor raises important questions properties logics result composition logic functors 
section answers questions introducing new property called 
section compare literature 
appendix presents nullary logic functors appendix presents ary logic functors 
motivations logic information processing systems fr fr proposed logical information system built variant formal concept analysis gw fr 
framework generic sense logic deduction relation forms lattice plugged 
leaves logic totally undefined puts responsibility users knowledge base administrator 
design logical component 
framework developed article design toolbox logical components user responsibility composing components 
design logical information system main motivation research 
believe application scope research goes logical information system 
information processing domains logicbased components logic plays crucial role logic information retrieval sm logic diagnosis poo logic programming llo ms logic program analysis css 
components model information processing domain logic bring front solutions logic main engine 
illustrated difference logic programs programming logic 
logic system defined single pure deduction system combines logics 
designer application ad hoc proof consistency ad hoc implementation theorem prover time designs new ad hoc logic 
logics variants standard logic call customized logics 
order favour separation concerns important application logic engine logic engine designed separately 
implies interface logic engine depend logic 
call embeddability logical component 
need separately design application logical components develop embedded logic components 
actors development information processing system section views actors development information processing system 
note actors necessarily person actor may gather persons possibly living time 
short actors roles persons 
actors may computer programs 
actor theorist invents framework instance relational algebra lattice theory logic 
framework applications second actor system programmer implements part theory generic system applications 
results systems data bases static analysers logic programming systems 
third actor application designer applies framework concrete objective instantiating generic system 
done composing data base schema program property logic program 
user fourth actor maintains uses application 
queries data base analyses programs runs logic programs 
relation system programmer application designer interests 
genericity instantiation genericity achieved designing language data base schema language lattice operation language programming language 
correspondingly instantiation done programming composing drawing data base schema composing domain static analysis composing logic program 
propose logic tools 
hand system programmer competent building logic subsystem know application knows range applications 
hand application designer knows application generally competent building logic subsystem 
article act system programmers providing elementary components safely building logic subsystem theorists giving formal results composition laws components 
explore systematically build logics basic components call logic functors 
construction logic mean definition syntax semantics implementation deduction system 
logic functors describe article concrete implementation actual program 
implemented logic composer takes description customized logic builds concrete logic component 
customized logics range logic functors large 
article consider sums logics propositions arbitrary formulas intervals valued attributes abstracted values strings contains onl modal epistemic logic functor lev 
framework geared manipulating logics lattices interpretation 
deduction considered relation formulas study conditions relation partial order 
excludes non monotonic logics nullary logic functors 
note non monotonicity seldom goal notoriously nonmonotonic features monotonic rendering closed world assumption reflected monotonic modal logic onl 
note framework logics lattices deduction relation partial order interesting ones completed lattice 
consider motivating example application dealing bibliographic entries 
entry description author name title type cover publisher date 
user navigates set entries comparing descriptions queries written language 
instance assume entry set descr entry author title jungle book back publisher penguin year descr entry author title jungle book hard cover publisher century year descr entry author title just stories hard cover publisher year 
answer query title contains jungle hard cover publisher century year back publisher penguin year entries entry entry description entails query possible answers application asks user query specific suggesting relevant refinements 
note author relevant refinement true matching entries 
possible answer entry descr entry query relevant refinement holds 
exists possible answer descr 
exists possible answer descr go description application see fr fr 
simply note 
descriptions queries answers belong logical language combines logical symbols expressions strings numbers intervals 
design similar application different logic manipulating software components 
important different logics share common interface able separately write programs navigation system logic subsystem uses 
summary define tools building automatic theorem provers customized logics allowing users sophisticated logic actors 
note user may program mobile agent running host system ib 
rules interactive theorem provers 
validating theorem prover built tools simple possible 
want application designer may sophisticated user logic actor 
resulting theorem provers common interface embedded generic applications 
deduction decidable logic components define 
logic components safely embedded applications black boxes 
logics logic functors application designer define customized logic means composing primitive components components high level resulting logic subsystem proven correct 
primitive components low level proving correctness result similar proving correctness program 
decided define logical components close logics 
idea consider logic interprets formulas functions atoms 
abstracting atomic formulas language logic obtain call logic functor 
logic functor applied logic generate new logic 
instance propositional logic abstracted atomic formulas obtain logic functor called prop apply say logic intervals called form propositional logic intervals prop 
logics formally define class logics structures axioms merely type axioms 
section appendix examples logics 
proofs omitted 
companion research report fr 
definition syntax syntax denumerable set syntax tree formulas 
semantics associates formula subset interpretation domain formula true elements 
way treating formulas unary predicate akin description logics 
definition semantics syntax semantics pair interpretation domain theta denotes power set set satisfaction relation interpretations formulas 
reads model 
formula fi fg denotes set models formula formulas entailment relation defined entails iff 
entailment relation formally believe provides intuition frequent usage proofs inclusion sets models 
formulas define language logic semantics defines interpretation implementation defines logic implements interface common logics 
common interface includes deduction relation conjunction disjunction tautology contradiction 
definition implementation syntax symbol undef implementation tuple theta deduction relation theta conjunction disjunction tautology contradiction 
operations defined syntax logic necessarily connectives logic simply connectives logic may different operations 
similarly syntax semantics may define quantifiers absent interface 
note common interface implemented partially undef convenient 
interface logic generic logic systems designed easily 
definition logic logic triple asl sl pl asl syntax set formulas sl semantics asl pl implementation asl necessary satisfaction relation logic written interpretation domain written models written ml operation op written op object oriented terms forms class comprises slot type internal representation methods deduction relation conjunction disjunction tautology contradiction 
logic simply instance class 
definition shows operations partially defined operations undefined 
definition total partial bounded unbounded logic partial operations partially defined 
unbounded operations undefined 
opposite case logic respectively called total bounded 
necessary precise operation logic total partial 
total logics usually preferred applications simpler 
test undef section shows propositional logic functor applied partial logic constructs total logic 
constraint types 
define notion consistency completeness relates semantics implementation logic 
notions defined respectively operation implementation defined part 
definition completeness consistency logic 
implementation pl consistent resp 
complete operation op fv tg semantics sl iff asl op ml ml resp 
ml ml op 
defined consistent resp 
ml 
op 
defined ml 
resp 
complete op defined ml ml ml resp 
defined ml ml ml op defined ml ml ml resp 
defined ml ml ml 
say implementation consistent resp 
complete iff consistent resp 
complete operations 
abbreviate complete consistent op sl op complete consistent 
note easy implementation consistent complete operations keeping undefined implementation little 
note consistent extended partial order contained 
general consistent complete logics preferred ensure matching expected answers specified semantics actual answers specified implementation 
preferred logics deduction extended partial order 
logics defined concrete domains complete 
important issue build complete logics components complete 
add operations implementation parser printer handling concrete syntax formulas 
application input output formulas readable format 
consider determine logical problem 
contrary logical operations deduction conjunction disjunction tautology contradiction core logics consider 
logic functors logic functors syntax semantics implementation abstracted logics considered formal parameters 
formally define class logic functors structures 
section appendix presents examples logic functors 
class logics logic functors functions type object oriented terms defines template reasons uniformity logics considered logic functors arity atomic functors nullary logic functors 
class syntaxes class semantics class implementations 
syntax logic functor simply function syntaxes logics arguments syntax resulting logic 
definition logic functor logic functor triple asf sf pf syntax asf function type asf asl semantics sf function type sf sl implementation pf function type pf pl 
logic functor partial total unbounded bounded complete consistent inconsistent 
logics built logic functor qualified way 
possible state logic property property 
definition new logic functor accompanied theorems stating conditions resulting logic total consistent complete 
theorems form hypothesis 
consider type assignments hypothesis similarly totality consistency completeness properties logics considered type assignments properties proving property regarding totality consistency completeness simply type check 
composition logic functors define nullary logic functor propositional unary logic functor observe completeness may propagate compose 
introduce new property called helps completeness propagate composition logic functors 
definitions definitions instances atoms simple logic imagine logic unrelated atoms atom atoms usually play role atomic formulas known logics propositional order description definition syntax atom set atom names 
definition semantics atom atom iff implementation reflects fact atoms unrelated form anti chain deduction relation set pair elements ordered 
definition implementation atom atom iff ae undef undefined 
theorem completeness consistency atom consistent complete atom summary atom bounded partial conjunction disjunction consistent complete atom propositional logic abstracted atoms assume logic description querying language 
case want express conjunction disjunction negation choice propositional logic natural 
instance separate description fields bibliographical application see section interpreted conjunction 
similarly disjunction negation especially express information published 
propositional logic prop defined set atoms forming set propositional formulas prop closure boolean connectives boolean closure 
prop usually considered free boolean algebra relation atoms pairwise incomparable deduction order 
applications atoms comparable 
instance boolean queries string matching atoms meaning contains begins ends character string 
example atom jungle book implies ends jungle book implies contains jungle 
leads considering boolean closure logic functor prop 
doing atoms come logic endowed deduction order 
definition syntax syntax prop logic functor prop maps syntax asa logic atoms syntactic closure operators operator 
interpretation operators connectives names 
defined induction structure formulas 
atomic formulas prop asa semantics logic definition semantics prop 
iff asa definition implementation prop va ua ta 
true iff exists proof sequent sequent calculus table inspired bp fit 
rules delta set literals atomic formulas negations atomic formulas gamma sequence propositions literal proposition fi disjunction fi fi ff conjunction ff ff denotes negation 
asa asa rules axiom axiom axiom rule rule play role ordinary axiom rule 
axioms variants third missing 
rules rule rule interpret propositional connectives logic atoms 
note logic connective implementation corresponding operation 
deduction relation takes care 
example connectives quantifiers defined logic axiom delta gamma defined va axiom delta gamma defined va axiom delta gamma va rule ua delta gamma delta gamma ua defined rule ta delta gamma delta gamma ta defined rule delta gamma delta gamma literal rule delta gamma delta gamma fi rule delta fi fi gamma delta fi gamma ff rule delta ff gamma delta ff gamma delta ff gamma table 
sequent calculus deduction propositional logic 
logic functor interface refer 
logic functor predicate calculus defined way theory decidable resulting logic functor little form embeddable logic components 
full predicate calculus better define logic functor decidable fragment fragments family description logics 
definition validity sequent delta gamma called valid prop iff true interpretation 
true interpretation iff element delta false element gamma true lemma sequent delta gamma valid prop iff ffi delta ffi fl gamma fl 
properties prop properties prop properties theorem consistency prop consistent prop pa consistent complete sa lemma completeness 
fact logic atoms necessarily total sequent delta gamma interpreted ua delta gamma risk incompleteness 
instance imagine atoms 
implementation complete sequent provable 
logic atoms partial conjunction ua may defined rule rule apply 
case sequent provable 
build similar example disjunction 
formal presentation define property atomic logic distinct completeness relative definedness logic operations helps ensuring completeness prop 
definition openness sequent delta gamma called open prop iff deduction rule axiom 
called closed 
open sequent node proof tree developed axiom 
short failure branch proof search 
lemma sequent delta gamma open implementation pa iff gamma empty delta defined delta defined delta delta ua undefined delta ta undefined 
open sequent delta gamma characterized pair asa set positive literals delta asa set negative literals delta recall gamma empty 
advantage noting open sequents pair properly expressed terms logic atoms 
incompleteness arises open sequent valid proof developed semantics tells sequent true 
lemma open sequent valid atom semantics sa iff ma ma 
definition validity family open sequents valid atom semantics sa iff open sequent valid sa definition implementation pa reduced set open sequent families semantics sa iff non empty family valid 
theorem completeness prop complete subset pairs formulas pi prop theta prop prop ua consistent ta complete pa reduced open sequent families formula proof trees pi sa complete prop theorem somewhat complicated allow proof completeness subset prop 
logics possible show open sequent valid 
non empty open sequent family valid atom implementation pa reduced set open sequent families 
case merely say pa reduced sa application prop atom lemma shows nullary logic functor atom reduced 
implementation logic prop atom complete 
lemma atom reduced atom corollary prop atom totally defined complete consistent prop atom discussion leads methodology 
nullary logic functors defined tackling concrete domains intervals strings 
designed carefully consistent complete reduced 
sophisticated logics built non nullary logic functors see appendix 
composed logic functor prop order form total consistent complete logic 
resulting logic reduced total consistent complete logic trivially reduced 
furthermore implementation forms lattice totality consistency completeness operations implementation isomorphic set operations models 
formalizes informal notion implementation defined 
useful define coherence relation semantics implementation notion defined implementation 
definition maximal definedness implementation maximally defined semantics iff implementation obeying definition consistent complete reduced 
subtle 
property semantics 
build atomic logic functors semantics definition implementation reduced 
fact problem comes intersection models empty formula empty model 
note logic atom intersection models empty 
describe nullary reduced logic functors appendix ary logic functors appendix propose logic functors construct logics concretely logic applications 
development logic systems safer efficient constructed logic compiled produce fully automatic theorem prover 
listed number logic functors built 
related works word functor similar ml designating parameterized modules mac 
logic functors specialized contrary functors ml general purpose short fixed signature carry semantic component 
specialization semantic component allow express composition conditions scope ml functors 
implemented logic functors programming language offers ml functors mainly sake compatibility rest application written prolog 
theory institutions gb shares concern customized logics uses word functor 
focus theoretical ground different 
institutions focus relation notations semantics focus relation semantics implementations 
fact implementation class necessary enforce embeddability 
consider notation problem printing parsing operations implementation 
theory institutions developed category theory theory functors signatures formulas signatures models institutions institutions 
logic functors correspond parameterized institutions 
important shares motivations bp bp 
authors recognized need embedding customized logics applications need offering application designer means design correct logic subsystem 
propose concise style theorem proving call lean theorem proving claim theorem prover written style concise easy modify order accomodate different logic 
proposed theorem prover order logic variants modal logic note order theorem prover clauses prolog 
think claim take account fact system programmer application designer really different actors 
doubt modifying order theorem prover easy authors think undertaken 
hint takes full journal article revisit justify order lean theorem prover fit 
think lean theorem proving interesting technology define logic functor prop permit application designer build customized logic 
main concern sure logic functors composed way preserves logical properties 
led define technical properties simply tell logic functors behave total partial consistent complete reduced unreduced 
concern complementary concern implementing customized logics logical frameworks isabelle pau edinburgh lf hhp open mechanized reasoning systems gpt programming language 
frameworks allow users implement customized logic help users proving completeness consistency resulting theorem prover 
note left impression frameworks help 
instance axiomatic types classes introduced isabelle wen order permit automatic admissibility check 
observation frameworks offer environments interactive theorem proving incompatible objective building fully automatic embeddable logic components 
note implementation written prolog considered logical framework 
essence similar works static program analysis toolbox pag am authors assemble known results lattice theory combine domain operators product sets lists order build domains derive automatically fixed point solver domains 
fact favourable cases prop deduction relations form partial lattices connection works 
framework flexible permits build lattices domains lattices 
particular logic functor prop acts lattice completion operator reduced logic 
believe non lattice logics see appendix interest program analysis 
summaries analysis related works 
dark shade system programmer task essentially implement turing complete programming language recall actors roles single persons 
light shade system programmer task implement specific programming language application designer task 
respect studies domain specific languages dsl related works know example dsl similar aims 
note remains task application designer rightly called gluing programming system programmer gone far application designer direction 
summary results works logic functors specify logical components shelf cots 
way behave composition defined logic functor 
principle composing logic functors implemented prototype 
includes logic composer reads logic specifications sum prop atom prop sums propositions atoms propositions intervals automatically produces printer parser theorem prolog application programmer system meta programming programming language programming pag lattice operations prolog functors programming logic functors programmer machine logic level customized logic frameworks gluing gluing 
related works respective tasks system programmer application designer prover 
theorem prover built instantiating theorem prover associated logic functor occurrence 
logic composer logic functor implementation resulting implementations written prolog 
suggests software architecture logic systems system generic logic logic component separately defined plugged needed 
realized prototype logical information system lines fr 
coming back bibliography example construct dedicated logic logic functors defined article prop aik prop sum atom sum string 
results article composition logic functors generated implementation total bounded consistent complete operations implementation 
allows build descriptions queries descr entry author title jungle book back publisher penguin year query title contains jungle year 
back hard cover 
note entry possible answer query descr entry prop aik prop sum atom sum string query automatically proved generated implementation 
plan validate logic functors logical information system 
application motivate study logic functors modalities taxonomies useful making queries answers compact 
possible extension vary type logic functors composition 
situation logic functors type means possibility choose atomic formulas logic 
may wish act interpretation domain quantification domain 
may want class domains logic functors take domain argument similar level may wish act interface pass new operations negation quantification pass new structures specific sets models 
extension higher order logic functors possible define fixed point logic functor construct logic unary logic functor 
plan develop new logic functors purpose program analysis 
instance rbm rb proposed combine domain boolean values domain types form logic positive functions extends known domain pos css 
called typed analysis 
neat result compute time properties groundness 
project define logic functors type constructors combine types inferred checked programs list list bool bool simply ftrue falseg 
possible redo done typed analysis explore new static analysis domains combining logic functors types nullary logic functors bool pleased acknowledge careful reading article alberto 
remaining mistakes 
am alt martin 
generation efficient interprocedural analyzers pag 
static analysis symp lncs pages 
armstrong marriott sndergaard 
classes boolean functions dependency analysis 
science computer programming 
bp beckert posegga 
lean tableau deduction 
automated reasoning 
bp beckert posegga 
logic programming basis lean automated deduction 
logic programming 
css codish sndergaard stuckey 
sharing groundness dependencies logic programs 
acm toplas 
donini lenzerini nardi schaerf 
reasoning description logics 
brewka editor principles knowledge representation reasoning studies logic language information pages 
publications 
fit fitting 
revisited 
journal logic computation february 
fr 
file system concept analysis 
sagiv editor int 
conf 
rules objects databases lncs pages 
springer 
fr 
logical generalization formal concept analysis 
mineau ganter editors int 
conf 
conceptual structures lncs pages 
springer 
fr 
searching objects properties logical concept analysis 
stumme editors int 
conf 
conceptual structures lncs pages 
springer 
fr 
logic functors framework developing embeddable customized logics 
rapport de recherche inria 
gb goguen burstall 
institutions model theory specification programming 
acm 
gpt giunchiglia talcott 
reasoning theories architecture open mechanized reasoning systems 
baader schulz editors st int 
workshop frontiers combining systems pages 
kluwer academic publishers march 
gw ganter wille 
formal concept analysis mathematical foundations 
springer 
hhp harper honsell plotkin 
framework defining logics 
jacm january 
ib ch 

framework sound customization distributed runtime systems 
th int 
conf 
distributed computing systems 
lev levesque 
know study autoepistemic logic 
artificial intelligence march 
llo lloyd 
foundations logic programming 
symbolic computation artificial intelligence 
springer berlin 
mac macqueen 
implementation standard ml modules 
lisp functional programming pages 
ms marriott stuckey 
programming constraints 
mit press 
keefe 
craft prolog 
mit press 
pau paulson 
isabelle generic theorem prover 
lncs 
springer new york ny usa 
poo poole 
representing knowledge logic diagnosis 
int 
conf 
fifth generation computer systems pages 
springer 
rb boizumault 
typed static analysis application groundness analysis typed prolog 
journal functional logic programming 
rbm boizumault mal 
typed static analysis application groundness analysis prolog prolog 
fuji int 
symp 
functional logic programming pages 
sagiv francez rodeh wilhelm 
logic approach program flow analysis 
acta informatica june 
sm salton mcgill 
modern information retrieval 
mcgraw hill 
van rijsbergen crestani lalmas editors 
information retrieval uncertainty logics 
advanced models representation retrieval information 
kluwer academic publishing dordrecht nl 
wen wenzel 
type classes overloading higher order logic 
gunter felty editors theorem proving higher order logics lncs pages 
springer verlag 
nullary reduced logic functors ad hoc logics designed representing concrete observations domain 
serve language write atomic formulas 
bibliographical application atomic formulas contains 
order serve arguments logic functor prop similar boolean logic functors available equipped natural conjunction natural disjunction consistent complete cf 
definition 
operations usually partially defined 
instance natural disjunction intervals defined intervals overlap 
definition applying logic functor prop atomic logic produces logic total bounded definition 
provides consistent complete implementation atom logic consistent complete reduced implementation lemmas 
nullary logic functor section prove implementation consistent complete reduced semantics 
intervals intervals express incomplete knowledge database queries 
instance bibliographical application year may express interval dates 
express open intervals year means 
definition syntax gamma gg 
symbol gamma denotes negative infinity smaller real number symbol denotes positive infinity greater real number 
gamma totally ordered set bounded gamma 
definition semantics simplifying proofs noted models interval formulas intervals real numbers 
particular gamma 
property interval recall formulas syntax interval interval ordinarily written 
definition implementation iff max min ae min max undef gamma gamma 
note conjunction defined pair intervals disjunction defined pairs overlapping intervals 
theorem completeness consistency consistent complete partial disjunction consistent complete 
furthermore lemma shows reduced serve argument logic functor prop lemma reduced strings descriptions queries contain string specifications start contains 
specification ordered entailment relation 
instance atom jungle book entails ends jungle book entails contains jungle 
definition syntax string sigma sigma infinite signature sigma 
optional symbol denotes string left bound string 
optional symbol denotes string right bound string 
contains written starts written written 
symbol denotes empty language matched string 
definition semantics string sigma fff fi 
models complete strings 
precisely property string sigma sigma bounded sigma left bounded sigma right bounded bounded 
note formula empty model 
definition implementation string string iff fug left bounded right bounded bounded undef undefined ffl 
theorem completeness consistency string consistent complete string string partial consistent complete 
furthermore lemma shows reduced composition prop string consistent complete 
lemma string reduced string ary logic functors appendix ary logic functors 
produce reduced logics necessarily total 
case partiality problem wrap logic functor prop 
functors produce logics reduced total logics applied total 
useful outermost logic functor composition 
say logic functor prop produce incomplete logic seldom desired 
case syntax semantics implementation results consistency completeness 
complete knowledge logic know lev represents knowledge judgements modal way extra logical rule closed world assumption 
note monotonous logic 
definition syntax aik optional wrapping syntax logic know modality 
square brackets concrete syntax 
syntax aik operates descriptions expressed logical formulas 
description represents closure complete description true represents positive fact aik composed prop represents negative fact 
definition semantics aik 
ae iff iff definition implementation aik 
deduction defined table undef gd fd fd vd gd fd vd fd vd gd fd jd gd fd vd table 
definition logical deduction logic functor aik theorem completeness consistency aik completeness properties tautology defined resp 
complete description tautology defined resp 
complete 
case contradiction similar consistency 
conjunction consistent complete description conjunction consistent complete 
disjunction consistent complete undefined 
deduction consistent complete description deduction consistent complete formula model usually case 
lemma aik ld reduced open sequent families included aik ld consistent complete defined complete defined consistent totally defined 
summarize logic functor prop applied logic aik defined complete defined consistent consistent complete total case prop aik ld consistent complete right argument closed formula atoms 
satisfying logical information system closed formulas appear object descriptions left argument deduction valued attributes valued attributes useful attaching properties objects 
instance bibliographical attributes author year title value 
want express conditions values consider logic semantics fact domain values attributes 
attributes taken infinite set attr distinct symbols 
logic valued attributes built logic functor argument logic values defined follows definition syntax set attr attribute name product attr syntax logic fa definition semantics 
iff undef definition implementation 
iff undef undef undefined 
theorem completeness consistency consistent complete consistent complete partially defined conjunction disjunction consistent complete provided implementation argument furthermore lemma shows reduced provided argument logic functor prop applied logic functor form complete consistent logic 
lemma reduced reduced sums logics sum logics allows form descriptions queries objects belong different domains 
objects domain described formulas logic objects logic special element represents absence information element represents contradiction 
instance bibliographical application may part larger knowledge base parts described completely different formulas 
inside bibliographical part journal articles facets relevant conference article vice versa 
write sum logic functor constructing sum logics 
note sum easily generalized arbitrary arities 
definition syntax forms disjoint union logics plus formulas 
definition semantics 
asl asl true 
false prove sum reduced sum pl pl reduced sl sl making logic functor sum usable inside logic functor prop 
development logic functor complex find simpler reduced definitions sum 
definition implementation psum vl ul tl vl ul tl 
vl asl vl asl true vl vl 
false ul asl ul asl 

tl asl tl asl vl vl vl vl 

asl asl vl vl asl asl vl vl undef theorem completeness consistency sum consistent complete sum pl pl consistent complete sl sl lemma sum reduced sum pl pl reduced consistent sl sl sets models logic functor set useful describe instance sets authors keywords 
item specified formula logic argument set models sets subformulas sets models subformulas 
definition syntax set set finite subsets formulas logic 
definition semantics set 
definition implementation set 
set ff 
defined theorem completeness consistency deduction consistent resp 
complete deduction elements consistent resp 
complete 
tautology defined complete 
contradiction defined resp 
consistent element contradiction defined resp 
consistent conjunction totally defined consistent complete 
totally defined complete element disjunction complete consistent general 
logic functor set reduced useful outermost functor composition 
