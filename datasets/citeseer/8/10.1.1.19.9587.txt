peer peer approach resource discovery grid environments adriana iamnitchi ian foster daniel department computer science university chicago mathematics computer science division argonne national laboratory march resource sharing environments polarized distributed systems research years computational grids peer peer communities 
converge large scale decentralized self configuring environment provides complex functionalities 
resource discovery discussed context propose framework axes guides design resource discovery architecture 
emulated environment resource discovery preliminary performance evaluations simple resource discovery mechanism request propagation 
large sets shared resources basic problem locating resources absence naming scheme resource described set desired attributes linux machine mb available memory globally unique identifier cs uchicago edu 
absence global fixed naming scheme resource discovery problem challenging vari ations resource attributes cpu load available bandwidth software versions potentially large variable number resources resources join leave fail resource heterogeneity resources may computers data storage space services previously scientific instrument connected internet 
document proposes study resource discovery problem resource sharing environment combines complexity computational grids scale dynamism peer peer communities 
environments final objective pool large sets resources initially emerged different communities current design approaches highlight different requirements 
belief design objectives environments eventually converge consequently analyzing requirements characteristics important long term 
resource discovery problem section context resource sharing environments 
comparing grid peer peer environments infer set design decisions resource discovery mechanism 
section proposes components describe decentralized resource discovery mechanism 
emulated large scale resource sharing environment section preliminary performance evaluations simple resource discovery solution request propagation 
resource discovery large scale resource sharing environ ments years significant interest focused resource sharing environments computational grids peer peer systems 
environments final objective pool large sets resources initially emerged different communities current design approaches highlight different requirements 
current grids characterized large variety services provided traditionally scientific communities hundreds users 
peer peer environments larger community users hundreds thousands simultaneous users offer limited specialized services 
belief design objectives environments eventually converge consequently analyzing requirements characteristics important long term 
grid vs peer peer environments computational grids sharing environments collections geographically distributed hardware software resources available groups remote users 
resources computers storage space sensors telescopes software applications data connected internet middleware software layer provides basic services security monitoring resource management resources owned various administrative organizations shared locally defined policies specify shared allowed share conditions 
set individuals institutions defined sharing rules called virtual organization vo 
grids emerged scientific communities spanning multiple institutions usually research labs universities 
primary objectives building grids providing functionality scientists complex set orthogonal services resource management security information services achieved scale grids order tens institutions thousands pooled computers 
referring strictly deployed grids objectives resource sharing environments currently characterized 
scale order thousands pooled computers hundreds simultaneous users 

level centralization centralized repositories shared data 

support complex operations program execution read write access data resource monitoring security mechanisms accountability 
stability resource participation exception occasional failures administrative interventions resources grid available community long predefined periods time 
level homogeneity usage behavior due incentives policies encourage enforce fair sharing 
addition trust enforcing mechanisms authorization authentication ensure selected homogeneous group users 

homogeneity resources resources powerful traditional grids concentrated sharing supercomputers large clusters network connectivity 
existence technical support personnel capable fixing things willing paid adapt system new requirements install new software versions ensure seamless collaboration human communication means announce new usage policies couple years new term fashionable peer peer systems 
systems emerge novel conceptual idea emphasize specific attributes resource sharing communities scale dynamism 
compared grid environments deployed provide limited specialized functionality file sharing embarrassingly parallel computation larger homogeneous communities half simultaneous gnutella nodes reported march limewire millions participants seti home project far 
characteristics systems 
large scale order hundreds thousands simultaneous computers users 

centralization gnutella fully decentralized 
seti home centralized 

specialized file sharing embarrassingly parallel computations absence trust enforcing mechanisms 
functionalities environment complex grids conflicting required grids example anonymity vs accountability 

unpredictable resource participation subject influences social economical political nature 

lack implicit incentives behavior may lead uneven user behavior free riding 

highly heterogeneous resources old home computers connected modem powerful computers connected high bandwidth links 

lack technical expertise administrative authority coordinate efforts specified direction 
natural tendency grids expand size larger communities 
natural tendency systems increase service complexity example combining computation data sharing providing level trust 
environments converge large scale dynamic sets resources exploited variety ways 
resource sharing environment systems converge focus study 
environment may properties 
large scale millions resources shared hundreds thousands participants institutions individuals 

lack global centralized authority 

highly variable participation patterns larger number stable nodes today gnutella resources join leave network frequently 

strong diversity shared resources resources different types computers data services instruments storage space 
resources type highly heterogeneous computers different operating systems number cpus speed data various sizes services various sorts 
sharing characteristics resources defined public sharing policies available pm am 
resources participate idle 

lack homogeneous administrative support participants benefit technical support rely basic tools provided community today gnutella nodes run various implementations protocol particularities 
requirements resource discovery mechanism large scale resource sharing environments basic service large scale resource sharing environments resource discovery description resources desired resource discovery mechanism returns set contact addresses resources match description 
resource discovery challenging potentially large number resources users millions considerable heterogeneity resource types user requests 
resource discovery complicated natural tendency environment evolve time example institutions joining leaving resources users resource characteristics availability cpu load changing 
characteristics create significant difficulties traditional resource discovery services 
largescale dynamic heterogeneous environment principles guide design resource discovery mechanism lack centralized control 
multiple arguments sustain assumption 
possible incentives exist participant institution individual support significant administrative costs inherent systems aggregate huge numbers resources unpredictable behavior 
second central architecture challenged scale dynamism 
solution adopt self configuring distributed architecture 
highly heterogeneous nature environments organizing resources structures distributed hash tables dhts may ineffective dhts nodes equal responsibilities assumes homogeneous capabilities trust :10.1.1.111.1818:10.1.1.140.3129:10.1.1.142.752:10.1.1.105.3673
challenge structured networks cost maintaining structure despite potentially frequent nodes departures 
arguments organization nodes unstructured networks 
environment multiple types resources possibly undefined resource descriptions difficult impose global naming scheme 
file sharing systems naming scheme implicit resource file uniquely identified file name 
system shares computing resources name computer say ip address reflect dynamic characteristics example cpu load 
assume global naming scheme describing resources 
discovering generic resources unstructured networks context decentralized resource discovery large scale distributed heterogeneous systems assume loss generality participant virtual organization institution individual servers store provide access resource information 
call servers nodes peers 
node may provide information small set resources locally stored files node computing power traditional scenario large set resources resources shared institution typical grid scenario 
perspective resource discovery grid collection geographically distributed nodes may join leave time notice example result system communication failures 
assume sets resources published nodes disjoint may multiple resources identical descriptions example multiple copies data identical machines 
users send requests known typically local node 
typically node responds matching resource descriptions locally processes request possibly forwarding node 
axes solution space components define general resource discovery solution 
membership protocol refers new nodes join network nodes learn refer part membership problem peer discovery aware multiple names literature 

overlay construction function selects set active collaborators local membership list 
practice set limited available bandwidth message processing load security administrative policies topology specifications may case called overlay network contains subset edges membership network 
example gnutella node maintains relatively small number open connections average measured may compared number gnutella nodes knows time hundreds 

preprocessing refers line preparations better search performance independent requests caching preprocessing technique prefetching example preprocessing techniques dissemination resource descriptions advertise descriptions local resources areas network better search performance reliability 
rewiring overlay network performed overlay network protocol overlay construction function better performance may considered preprocessing technique 

request processing local remote component local processing includes looking requested resource local information processing aggregated resources request broken distinct requests treated separately policy dependent processing drop requests exceeded local ttl limit requests acceptable local administration alter requests relaxing constraints significant portion ttl 
remote processing refers request propagation rule sending potentially locally processed requests peers various mechanisms flooding forwarding epidemic communication various strategies employed neighbors send request select 
study resource discovery problem axes membership protocol responsible collecting updating information currently participating nodes overlay function selects best metrics set members known ones influences topology overlay network preprocessing necessary preparations efficient search request processing strategy performs search 
discussion general objective study characterize synergies components generic resource discovery solution regard environment characteristics 
section discusses open research questions relevant results context design axis 
overlay topology significant impact performance upper level applications shows strong correlation robustness power law topology underlying network gives search algorithm exploits power law topology cost efficient way presents optimal algorithm search small world graphs particular topology dimensional lattice knowledge global properties distance nodes 
hand large number dynamic real networks ranging internet social biological networks exhibit recurrent patterns power law small world surveyed discussed detail 
interesting questions overlay network topology influence performance resource location mechanisms build overlay topology improves resource location performance 
attempt answer question article finds search replication efficient uniform random topologies 
practical relevance result clear uniform random graph ideal model natural self configuring dynamic networks 
attempt answer second question analysis file sharing patterns scientific collaboration shows small world characteristics suggests ways exploit pattern performance 
membership protocol influences overlay network collects information current participating peers enriches local view system ideally date global information 
different design objectives membership protocol 
example gnutella aggressive membership protocol maintains highly dynamic nodes connected significant communication cost 
membership protocols epidemic communication mechanisms scalable number participants tolerant inaccuracies inherent asynchronous distributed systems 
preprocessing efficient resource discovery take forms rewiring overlay adapt changes usage characteristics replicating resource information multiple remote places increased availability 
obvious ideas dynamic environment consider resources leave pool characteristics change rapidly user behavior suddenly changes 
important question preprocessing strategies effective dynamic system shows optimum replication item search unstructured networks proportional square root popularity item 
result considered static environment 
different context replication achieving availability file sharing networks study problem replicating read information 
question answer partially relevant context infer number replicas needs create order achieve certain level availability highly dynamic system 
local request processing concerned multiple issues 
deals aggregated requests requests multiple resources 
second encapsulate local policies drop requests inappropriate content 
third may alter additional information associated requests time live local information 
idea raises important security issues 
addition may lead highly behavior 
request propagation currently hot research topics area 
cases request propagation rules dictated components resource discovery mechanism case dhts overlay propagation rules strongly related :10.1.1.111.1818:10.1.1.140.3129:10.1.1.142.752:10.1.1.105.3673
unstructured network degrees freedom choosing propagation rule 
random walks inexpensive terms implementation costs may inappropriate lack guarantees 
question despite significant effort remains answered request propagation rules suitable context generic resource discovery unstructured overlays 
resource discovery emulated grid objective observe quantify understand control synergies emerging interaction components context resource discovery flat unstructured networks 
study interactions simulations 
section presents current status regard simulations modeling grid resource discovery perspective section 
section describe simulator 
section presents simplifying assumptions obtain preliminary results section 
various stages progress results published 
modeling grid environment environment parameters influence performance design resource discovery mechanism 
resource information distribution density refers fairness sharing organizations share large number resources share just example home computers 
resources common pcs running linux rare unique particular services powerful supercomputers 

resource information dynamism context computer sharing resource attributes highly variable cpu load bandwidth nodes vary slowly considered static operating system version number type cpus computer 

requests distribution refers pattern users requests resources 
example multiple studies shown requests follow zipf distributions coefficients intervals 

peer participation varies time significantly systems current grids 
influenced incentives nodes activate network longer intervals 
failure rate large scale system inevitably high necessary model 
parameters easily take account 
effects failures visible levels resource level node level 
resources fail nodes publish descriptions may need update local information reflect change 
resource failure seen differs resource information dynamism way resource information dynamism affects informa tion maintained nodes peer participation refers nodes joining leaving network 
variation resource attributes treated part resource information dynamism parameter 
nodes fail resources advertise may unknown nodes seize participate maintaining overlay processing remote requests 
failures nodes incorporated peer participation parameter departure distinctions failures departures 
failures may perceived peers example case network partitioning node may failed peers alive 
study failure rate incorporated environment parameters 
emulated grid resource discovery implementation details focus large scale simulations tens thousands nodes built specialized emulated grid experiment various design solutions resource discovery 
convenience large linux cluster test strategies controlled environment 
minimal modifications framework real deployments 
framework nodes form overlay network 
node implemented python process communicates nodes tcp 
node maintains types information information set resources information nodes overlay network including restricted membership information 
large number processes needed large scale simulation raises multiple problems ranging individual machine resource starvation library limitations 
preliminary experiments section simulated virtual nodes systems processors communicating fast ethernet chiba city cluster argonne national laboratory 
large scale simulation challenging problem node startup essentially needed start process nodes controlled central node 
naive approach persistent rsh processes start remote processes inadequate system limitations long startup time 
implemented startup manager handle simulated node startup process mpi program written starts node manager process cluster node 
cluster node manager manager processes communicate central source obtain specific simulated node process startup information 
compute node simulated node run manager processes starts simulated node processes 
preliminary experimental setup order isolate correlations parameters study started simplified basic framework 
considered optimistic model grid static resource attributes constant peer participation failures modeling resource request distributions 
secondly considered trivial resource discovery mechanism design 
considered passive membership protocol 
consider simple join mechanism common peer peer systems node joins grid contacting member node 
contact addresses member nodes learned band information 
node contacted joining members responds membership information 
membership information passively enriched time receipt message previously unknown node node adds new address membership list 

overlay function accepts unlimited number neighbors 
experiments allow overlay connectivity grow membership information grows 
way component aiming understand correlations graph topology discovery performance 
starting overlay generated hierarchy internet graph generator tiers 
starting topology realistic choice shows presence increasing number peers preferential attachment topology tends quite different power law graph 
clear significant difference measurements 

assume preprocessing 

request processing mechanism basic assume simple requests satisfiable perfect matches 
reduced local processing minimum node matching resource responds requester decrements request ttl forwards ttl node 
request propagation strategy decides node locally known ones request forwarded 
addition contact addresses nodes store information peers information requests previously answered 
tradeoff amount information neighbors search performance generates large set alternatives random forwarding information resources provided nodes hop forwarding nodes know exactly node requested resource 
evaluated request propagation strategies random walks node request forwarded chosen randomly 
extra information stored nodes 
learning nodes learn experience recording requests answered nodes 
request forwarded peer answered similar requests previously 
relevant experience exists request forwarded randomly chosen node 
best neighbor rule records number answers received peer recording type request answered 
request forwarded peer answered largest number requests 
learning best neighbor identical learning strategy relevant experience exists request forwarded best neighbor 
remaining section presents modeled environment simulations 
resource distributions order reduce parameter space study select subset resources focus requests match resources subset 
approach allows obtain results valid number shared resources system 
may nodes resources subset interest 
discussion relative subset selected resources 
realistic setup notice number nodes increases 
total number resources increases 
consider average number resources node remains constant increase network size 
experiments arbitrarily chose constant equal 
total number resources network nodes experiments considered 

assumptions obtain significant increase resource frequency number resources match particular request increases number nodes 
believe unrealistic scenario new nodes bring new types resources unique line instruments new data new possibly locally developed software applications 
testbed allowed set resource types increase slowly number nodes system 
arbitrary increase number new resource types chosen experiments node 
context experimented resource distributions different degrees fairness fair distribution nodes providing number resources highly unbalanced generated geometric distribution resources provided small number nodes 
details distinct resource types identical resources modeled network size 
loo uniform condor request rank distribution user requests lo unbalanced balanced node distribution resources nodes bal nodes equal number resources highly unbalanced significant part nodes resources set considered 
user requests usage patterns decisive making design decisions tackle problem having real user request logs problem inherent systems design phase 
logged processed week requests computers submitted condor pool university wisconsin 
condor pool university wisconsin consists mainly linux workstations homogeneous set resources pool intensively various types computations requests specify various attribute values example minimum amount available memory required disk space 
processed requests capture variety 
despite authenticity traces may accurately represent request patterns sharing environment usually comprises data services addition computers example distribution file requests experiment january june looks different 
experimented synthetic user request distribution modeled uniform distribution 
highlights differences request distributions condor traces exhibit zipf distribution small number distinct requests appear frequently set requests considered case uniform distribution requests repeated number times 
evaluated mentioned request propagation strategies set overlay networks sizes nodes 
experiments randomly chose fixed percentage nodes sent independently generated sets requests 
sets requests sent nodes respectively repeated compare various request forwarding algorithms 
preliminary experimental results objectives preliminary study threefold 
estimate quantitatively cost simple resource discovery techniques request forwarding preprocessing 

understand effects resource request distributions resource discovery performance 

understand correlation performance various design decisions realistic grid envi ronment 
section discusses current results problems 
process collecting data answer third question 
quantitative estimation resource location costs question answer study search costs unstructured static network absence preprocessing 
answer figures learning strategies best performing various sharing characteristics hops response time request largest network experiment 
network thousands nodes possibly thousands participants institutions individuals average response time hops 
assuming travel consecutive nodes path msec 
latency metropolitan area network msec 
necessary request processing path hops takes half second 
course best performing algorithm set tested takes advantage similarity requests uses possibly large storage cached requests 
starts low performance builds cache 
emphasis results presenting advocate strategy give numerical estimate costs response time involved 
oo condor uniform condor uniform number nodes performance average number hops learning forwarding strategy request distributions environments different resource sharing characteristics 
condor uniform condor uniform number nodes performance average number hops best neighbor request forwarding strategy different user request sharing characteristics 
oo oo random learning best neighbor learning bn number nodes performance request forwarding strategies condor request load unbalanced resource sharing environments 
random forwarding algorithm advantage additional storage space required nodes record history expected efficient intuition confirmed results shown condor user requests unbalanced resource distribution 
network sizes experiments learning algorithm performs constantly expensive version learning best neighbor proves unpredictable terms performance see example large standard error deviation simulated nodes 
effects environment highlights influence user requests performance learning request forwarding strategy 
strategies considered sensitive user request patterns 
slightly better performance fair sharing environment due random component strategy employed relevant previous information specific request exists random forward better chance reach useful node information distributed fairly nodes 
learning strategy takes advantage zipf request distribution significant part requests repeated benefit previous experience 
best neighbor forwarding strategy influenced strongly sharing patterns compared balanced environment highly unbalanced environment node answered request answers requests 
shows response latency unbalanced balanced environments request patterns considered response latency doubles balanced sharing environment compared unbalanced 
note performance best neighbor strategy influenced past requests algorithm records number requests answered regardless type distinguish nodes answered request times nodes proved distinct resources 
explanation algorithm performing better uniform user distribution load condor traces number distinct requests uniform distribution larger best neighbor identified strategy larger number distinct resources 
related solutions related problems classes related relevant study resource discovery dynamic self organizing networks resource discovery wide area systems 
category benefited huge attention due popularity peer peer file sharing systems 
systems identify resources files names variety strategies locate specified file including aggressive flooding gnutella centralized index servers napster combination informed request forwarding automatic file replication freenet tt intelligent positioning data search optimized reliable flexible structures efficient scalable name retrieval chord tapestry pastry 
basic mechanism gnutella flooding manages highly dynamic set members median lifetime node session minutes periodic ping pong messages 
requests resources propagated way flood network time live expires 
answers come back trajectory node node node initiated request 
relatively search performance measured number hops achieved intensive network usage 
napster uses centralized approach file index maintained central location real data files widely distributed 
provide files napster community node registers filenames location central index 
user queries central index specific file retrieves set locations user access download file 
chord tapestry pastry build search efficient indexing structures provide scalability search performance increased cost file node insertion removal 
implicit assumption systems nodes homogeneity nodes expected capabilities 
freenet tt file sharing system includes replica management replica location mecha nisms popular files replicated closer users popular files eventually disappear 
freenet file location mechanism usage patterns dynamic routing tables 
freenet approach assumes non popular data unimportant data valid assumption 
tt domain name service largest system provides name location infor mation 
performance explained intense usage cached static information 
solutions concerned locating resources inherently named 
solutions create artificial name proposed cases resources named easily 
ninja project uses solution locating services service identified set attributes 
lossy aggregations bloom filters local services disseminated hierarchy 
requests services guided service summaries hierarchy tree search fashion 
proposes resource discovery mechanism request propagation nodes called traders ward unsolved requests nodes 
gnutella interconnection topology flat dynamic network 
gnutella nodes choose collaborators expertise preference traders explore network demand serving request demand necessary 
changes trader state services provided collaboration policies propagated flooding network 
globe project proposes naming service transforms url location independent unique identifier 
way location service deals object migration 
distributed resource sharing systems global names resource discovery condor matchmaker resource descriptions requests sent central authority performs matching 
centralized architecture efficient local area network condor initially designed assumes willingness organization operate central server 
relevant experience provided globus mds initially centralized service moved decentralized structure pool resources users grew 
mds grid consists multiple information sources register index servers registration protocol 
index servers users enquiry protocol query directory servers discover entities obtain detailed descriptions resources information sources 
left unspecified techniques associate entities directories construct efficient scalable network directory servers 
research complementary mds proposing evaluating mechanisms organize directories equivalent call nodes peers flat dynamic networks 
summary speculate continue serve different communities characteristics design objectives grid environments converge grids increase scale inherently deal dynamism today systems start provide complex functionalities integrating data computation sharing various security requirements 
study resource discovery problem resource sharing environment combines characteristics environments complexity grids share large diversity resources data applications computers online instruments storage scale dynamism heterogeneity today systems 
propose components claim define decentralized resource discovery design membership protocol overlay function preprocessing request processing 
describe emulator evaluating resource discovery techniques 
order isolate components evaluated simple resource discovery mechanism request propagation 
results give quantitative measure influence sharing environment fairness sharing resource discovery 
adamic huberman lukose search power law networks 
physical review 

adar huberman free riding gnutella 
monday 
albert 
statistical mechanics complex networks 
reviews modern physics january 
albert jeong 
diameter world wide web 
nature 
van steen tanenbaum scalable naming global middleware 
th int conf 
parallel distributed computing systems pp 


linked new science networks 
perseus publishing 
albert emergence scaling random networks 
science 
bloom space time trade offs hash coding allowable errors 
communications acm 
breslau cao fan phillips shenker web caching zipf distributions evidence implications 
proceedings ieee infocom conference new york ny ieee press 
chandra hadzilacos toueg charron bost impossibility group membership 
proceedings th annual acm symposium principles distributed computing podc new york usa pp 

clarke sandberg wiley hong freenet distributed anonymous information storage retrieval system 
icsi workshop design issues anonymity unobservability berkeley california 
clip 
gnutella protocol specifications www clip com 
cohen shenker replication strategies unstructured peer peer networks 
proceedings acm sigcomm conference 
czajkowski fitzgerald foster kesselman grid information services distributed resource sharing 
loth ieee symposium high performance distributed computing 
doar better model generating test networks 
ieee global internet pp 

foster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal supercomputing applications 
golding taylor group membership epidemic style 
technical report ucsc crl university california santa cruz jack school engineering mar 
gribble brewer hellerstein culler scalable distributed data structures internet service construction 
proceedings fourth symposium operating systems design implementation osdi san diego ca 
gribble welsh behren brewer culler gummadi hill joseph katz mao ross zhao ninja architecture robust internet scale systems services 
special issue computer networks pervasive computing 
iamnitchi foster fully decentralized resource discovery grid environments 
international workshop grid computing denver colorado november ieee 
iamnitchi foster peer peer approach resource discovery grid environments 
high performance distributed computing uk july ieee 
iamnitchi ripeanu foster locating data small world 
peer peer scientific collaborations 
st international workshop peer peer systems lncs hot topics series springer verlag 
kleinberg small worlds phenomenon algorithmic perspective 
tech 
rep cornell univer sity 
kutten peleg deterministic distributed resource discovery 
nineteenth annual acm sigact sigops symposium principles distributed computing portland oregon 
lee benford explorative approach federated trading 
computer communications 
www limewire com 
litzkow livny mutka condor hunter idle workstations 
proc 
th intl 
conf 
distributed computing systems san jose calif june pp 

lv cao cohen li shenker search replication unstructured peer peer networks 
proceedings th annual cm international conference supercomputing ics 
mockapetris domain names concepts facilities 
rfc 
peleg distributed computing 
society industrial applied mathematics siam pa 
locality sensitive approach 
raman livny solomon matchmaking distributed resource management high throughput computing 
th ieee international symposium high performance distributed computing 
ranganathan iamnitchi foster improving data availability dynamic model driven replication large peer peer communities 
global peer peer computing large scale distributed systems workshop may 
ratnasamy francis handley karp shenker scalable network 
sigcomm san diego usa 
ripeanu iamnitchi foster mapping gnutella network properties largescale peer peer systems implications system design 
ieee internet computing journal 
rowstron druschel pastry scalable decentralized object location routing large scale peer peer systems 
middleware pp 

saroiu gummadi gribble measurement study peer peer file sharing systems 
tech 
rep uw cse university washington 
seti home 
ssl 
berkeley 
edu 
stoica morris kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
sigcomm san diego usa 
van steen hauck tanenbaum locating objects wide area systems 
ieee communications magazine 
van steen tanenbaum globe area distributed system 
ieee concurrency 
watts small worlds dynamics networks order randomness 
princeton university press 
zhao joseph tapestry infrastructure fault tolerant wide area location routing 
tech 
rep csd berkeley 
appendix january june oo oo fi requests experiment january june period 
number nodes number nodes number nodes lo dat loo highly unbalanced distribution resources nodes networks sizes left center right nodes 
left distinct types total resources number identical resources varies mean 
center distinct types total resources number identical resources varies mean right distinct types total resources number identical resources varies mean 
