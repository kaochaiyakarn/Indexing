improving knowledge transfer architectural level concepts notations frank keller peter bernhard gr ne andreas kn rudolf oliver schmidt plattner institute software systems engineering box potsdam germany keller schmidt hpi uni potsdam de presents vocabulary concepts corresponding graphical notation called fundamental modeling concepts fmc describe conceptual architecture large complex software systems 
main objective approach improve knowledge exchange architectural level participants software development projects semiformal graphical notation 
focus fmc represent code structures describe system concepts architectural rationale 
fmc bound specific programming paradigm enables communication type software systems 
metamodel graphical notation suitable intended 
furthermore summarize results achieved applying fmc software projects different sizes scopes 
keywords software architecture conceptual view architecture description system modeling 
development large software systems requires collaborative effort people 
today commonly case multiple distributed groups common system 
persons need understand communicate technical issues different levels abstraction 
participants software development share similar understanding system software developed efficient manner 
communication humans represents crucial aspect success large software development projects 
communication level detailed software design understood 
level abstraction unified modeling language uml widely accepted de facto standard research industry 
higher levels abstraction communication concerning generally known architecture system remains difficult uncertain 
commonly object oriented approach reflects conceptual problems level abstraction 
research practice shown architecture complex system includes different high level structures spanning conceptual structures source code structures 
representation system architectures evolved known architectural views :10.1.1.43.661
focus conceptual architecture view plays key role attaining common understanding system planned built evolutionary purposes 
embodies structures minds system designers planning constructing system contrast source structures implemented system 
explains requirements application domain map transferred technical structure system 
enables discuss system aspects compliance nonfunctional requirements general concepts system components interaction getting lost details 

requirements conceptual architecture descriptions pointed transferring knowledge conceptual system architecture plays key role large scale software development 
worthwhile comprehensive means kind communication provide uniform set concepts corresponding notations sole purpose deal knowledge related conceptual system architecture 
represents guiding idea approach 
uml purpose rejected share opinion uml ultimately designed support object oriented view software design uml currently provide satisfactory solution modeling architectures notation uml describe software architecture run risk blurring distinction architecture implementation :10.1.1.43.661
technique describing conceptual software architectures meet certain requirements order facilitate interpersonal communication level abstraction ability describe conceptual architecture different levels abstraction major importance 
addition possible describe different conceptual aspects abstraction level separately 
lead system representation reducing complexity embodied technical details system implementation 
simplicity notation underlying concepts highly complex easily adopted means daily communication software developers 
easy learn easy apply majority software developers 
reason description technique reduced elementary concepts notational elements 
universality sound trade simplicity conceptual richness order explain desired architectural concepts system 
result description technique simple offers expressive power cover wide range system types 
implies notation conceptual basis bound specific implementation paradigm 
furthermore modeling embedding environment system possible 
separation concerns description complex systems include different conceptual aspects 
important architectural description technique support separation aspects offering comprehensive means illustration 
separation concerns fostered conceptual basis 
coherent set structures common types systems build core technique 
choice notation support distinction different views responsibilities system development 
aesthetics secondary notation descriptions conceptual architectures human reader informal criteria diagram quality ignored 
valuable layout cues called secondary notation crucial comprehensibility 
architectural diagrams studied persons making clear appealing layout worth effort 
notational elements architectural description technique support proper layout including easy formation graphical patterns 

fmc approach fmc fundamental modeling concepts approach describing conceptual architecture software systems semiformal graphical notation 
refined 
fmc developed meet requirements listed section 
primary problems encountered dealing descriptions large systems complexity embodied technical details 
strategy fmc reducing complexity distinguish clearly types structures fundamental aspects system architecture separation concerns static structures compositional structures value structures dynamic structures relationships different fmc models fmc uses bipartite graphs depict structures 
corresponding conceptual notational elements fmc discussed 
complete system model representation system certain level abstraction 
restrict interest structures appearing certain point time types structures distinguished compositional structures value structures 
hand observe system behavior time 
compositional structures system seen composition collaborating components called agents 
agent serves defined purpose communicates channels shared storages agents 
agent needs keep information time access storage information stored 
channels storages virtual locations information observed 
agents drawn rectangular nodes locations symbolized rounded nodes particular channels depicted small circles storages illustrated larger circles rounded nodes see 
possibility read information write information location indicated arrows 
agents locations identified descriptive textual labels 
example shows useful stretch agent location nodes order achieve cleaner layout facilitating secondary notation 
agent write access shared storage channel order able 
notation originates simple channel fmc compositional structure diagram system 
location accessible reading writing agent 
arbitrary complex structures described restrictions regarding number connections locations agents 
example possible describe simple channels connecting agents broadcast channels connecting agents see 
storages agents allowing description shared non shared storages 
general agents locations related system physical structure 
compositional structure facilitates understanding system imagine physical structure team cooperating persons 
lower levels abstraction direct mapping physical parts system possible 
value structures location compositional structure holds unit information called value 
value simple unstructured value integer structured value tree content database 
fmc offers dedicated diagram type description value structure types 
entity relationship diagrams modifications additions 
primary symbols simple circles rounded nodes entity sets rectangular nodes relations 
entity nodes relation nodes connected undirected edges see 
choice symbols rounded nodes resemble elliptic nodes symbolize sets venn diagrams rectangular node interpreted simplified relational matrix 
diagram elements frequently fmc diagrams see relation names entity names role names placed near corresponding graphical element 
entity attributes listed entity name smaller see upper left 
agent broadcast channel non shared storage shared storage man weight age registrar couple husband wife marriage woman weight age wedding day partitioning entity set entity sets function mapping notational elements fmc value structure diagrams cardinalities specified placing textual constraints near respective edges connecting entity nodes relation node 
constraint text placed near entity node specifies element participates relation 
relation participating relation forming entity set surrounded rounded node see couple 
functions mappings identified simple arrows bidirectional arrows respectively see 
entity set partitioned disjunctive subsets see bottom 
usually shown placing subset nodes entity set partitioned 
independent partitioning entity set depicted triangular partitioning symbol connecting partitions 
dynamic structures look system period time dynamic behavior observed 
fundamental concept event instantaneous value change occurring certain location certain point time 
events elementary respect observability operations elementary respect activity operation smallest activity agent perform 
performing operation agent reads values locations writes derived value operation result certain location 
operations triggered events turn produce events 
leads causal dependencies events 
notion operation covers variety operation types 
example state change operation agent reads value certain storage independent partitioning entity set entity sets web browser send request render page static page requested look static page web server receive request return page dynamic page requested send request generate page handle request return result writes new value storage 
agent performs output operation operation result written channel 
agent reads value location writes copy location pure transport operation fmc diagrams dynamic structures petri nets place transition nets enhancements 
transitions symbolize event types operation types complex activities places symbolize control states 
text label transition node briefly describes semantics corresponding operation activity 
transition belongs agent associated compositional structure 
diagram covers behavior different agents additional places edges introduced describe causal dependencies resulting communication see 
transition belongs agent associated compositional structure 
show responsibilities agents possible partition set transitions place distinct areas swim lanes 
areas separated dashed lines domains corresponding agents see 
control states symbolized places data states handled differently reduce complexity operation activity descriptions identify data state changes occurring corresponding storages compositional structure 
addition branch conditions expressed data state predicates placed edges leading conflicting transitions see receive request 
petri nets easily describe concurrency choice description complex system behavior 
fmc offers improvement conventional place transition nets describes recursion 
extension 
extended firing rule applied transitions ready firing correct control state correct data state 
data base server places introduced modeling communication fmc dynamic structure diagram agent managing structure variance agent dynamically created destroyed fmc dynamic compositional structure suggested discussed 
concurrency described cases multiple sequential agents working independently single agent showing concurrent behavior 
dynamic compositional structures 
complex systems frequently show compositional structure changes time 
changes usually caused activities certain system agents 
example dispatcher agent server system creates removes agents processing incoming requests 
fmc facilitates modeling systems allowing part compositional structure appear structured value storage 
changing value storage agent alter system compositional structure 
storages symbolized dashed border see 
dynamic compositional structures outcome special types operations creating destroying agents 
fmc conceptual metamodel fmc diagram presents overview terms relationships previous sections 
elements fmc structures interdependencies covered metamodel 
concept ports omitted simplicity 
described detail 
relationships fmc models level abstraction conceptual architecture system modeled different fmc structure diagram types 
compositional structure diagram connects fmc diagram types abstraction level 
complex systems usually essential provide system models different levels abstraction 
case multiple models hierarchically ordered refinement relationship model refined model derived applying refinement decision means iteratively replacing certain model elements elements lower level abstraction 
idea imply top development 
refinement decisions affect fmc model structures 
structure variance storage point time observability dynamic structure interval start value pre post interval observability unstructured location value structure event channel storage shared nonshared structured compositional structure consists read access write access fmc conceptual metamodel operation triggers simplest type refinement decision data type higher level model refined data types lower level model 
example real number unstructured value refined pair mantissa exponent integers structured value 
operation dynamic structure refined complex activity lower level 
fmc allows activity sequence operations set concurrent operations mixture 
transition representing single operation diagram described refined diagram complex dynamic structure 
refining operations corresponding events read write accesses mapped respective lower level elements 
case complex systems interesting refinement decisions affect compositional structures system 
example data replication means storage refined set storages contain connected connected connected performs outcome causal ordering agent ing usually identical values 
general location refined locations agent refined agent compositional structure 
simple case agent refinement functional decomposition agents agent replaced corresponding compositional structure 
fmc limited simple case allows description sophisticated designs 
example refinement set agents identical type single multiplexed agent 
interesting types refinement relationships refined structure agent changes time example case load balancing 
refining elements compositional structure implies need refining corresponding dynamic structure elements 
example agent replaced cooperating agents necessary split operations original agent operations performed multiple refined agents 

application fmc fmc approach applied facilitate analysis synthesis software systems different sizes different application domains 
fmc useful providing quick overview planned conceptual architecture core concepts design development smaller objectoriented system loc 
fmc models place implementation straight forward 
fmc models helpful evolution system architecture easy understand students developed system release left project time 
fmc applied successfully evolutionary development large embedded system telecommunications sector 
entire system developed engineers hardware software years loc current release 
fmc case study took place developers different locations 
developing new functionality system loc year 
capturing conceptual architecture ad hoc fashion explicit part group development process years 
straightforward process apply fmc case 
architecture documentation consists fmc diagrams supplemented sequence diagrams commonly telecommunications sector 
furthermore required detailed design documentation done uml class sequence diagrams 
fmc introduced project system architects 
short time individual developers responsible detailed design implementation familiar notation 
ability show different levels abstraction notation related code structures pointed major advantage fmc 
clear distinction conceptual architecture objectoriented design usage different modeling notations mentioned strength developers 
distinction gave developers freedom carry creative design activities restrictions conceptual architecture demoted programmers responsible tasks concerning preconceived design 
success fmc approach case reflected fact fmc currently applied development projects group 
furthermore fmc analyze document core large scale business application sap system 
project took place years industry environment 
architecture system basis loc analyzed get overview system illuminate single concepts 
result analysis set architectural description manuals written serving conceptual sap developers delivering foundation internal external training system core technology 
main challenge project extract core architectural elements large system appropriate level abstraction 
fmc applied recover architecture medium scale open source application apache web server 
architecture analysis fmc modeling carried context student course 
results academia industry 
presentations shown possible explain architecture technical concepts efficient manner 
brief fmc audience able follow presentations grasp understanding system conceptual architecture 

discussion fmc approach application fmc shown fmc suited capture conceptual architecture large complex software systems 
fmc facilitate communication project members conceptual level 
experiences suggest explicit architecture phase dealing conceptual issues introduced software development processes 
helps define robust stable architec tures applying detailed design 
stage fmc able provide high level abstractions describe software systems order get common understanding project members 
fmc compositional structure diagrams seen mental maps assist getting quick overview system structure 
point reader may explore associated behavioral aspects value structures refinements agents detailed diagrams 
leads ability vary level detail desired needs lost mass description detail 
consider clear distinction notations describing conceptual architecture lowlevel design crucial development system 
experiences show approach worked fmc represent conceptual architecture uml object oriented design 
cases difficult identify level detail covered architecture description move design 
case study telecommunications description architectural level stopped package single developer defined 
uml idl descriptions define common interfaces guiding transition low level design 
bipartite graphs fundamental fmc notation 
simplicity notational elements advantage easy draw distinguish white board 
important computer tool diagram editor usually software developers architecture design sessions 
fmc provides freedom stretch bend defined notational elements order improve layout quality enhance expressiveness supporting secondary notation 
recognized readers interpret bipartite graph petri net confused applications kind graphical pattern 
simplicity fmc notation means little effort required learning read draw diagrams 
possible terminology conceptual basis restricted coherent concepts shown 
modeling techniques fmc approach offer multiple alternatives express aspect 
fundamental structure types compositional structure value structure dynamic structure exactly comprehensive type diagram providing strict separation 
fmc bound implementation paradigm enables conceptual modeling kind sys tem 
moving implementation specific design appropriate notation selected uml 
problem fmc models possible automatically keep source code models synchronous state 
ensured appropriate software development process 
high level abstractions system place usually change drastically time 

fmc provides notation conceptual basis describing conceptual architecture software systems enhance human comprehension 
furthermore fmc successfully applied facilitate architecture recovery development software systems different sizes scopes 
fmc primarily focused human comprehension complex conceptual architectures 
advocate fmc explicit conceptual architecture phase applying low level design uml 
results mentioned address issues architectural patterns typical large architectural patterns observed systems 
fmc diagrams visualize patterns help model systems efficient way 
enhance system synthesis diagram comprehension due advantages secondary notation 
fmc methodology order fmc efficiently industry environment necessary provide development methodology supported tools guidance deploy fmc large scale development 
important clarify coupling fmc architectural level uml fine design 

booch rumbaugh jacobson unified modeling language user guide addison wesley 
object management group omg unified modeling language specification version object management group document formal 
reed need different view software architecture proceedings working ieee ifip conference software architecture 
laine role sw architecture solving fundamental problems object oriented development large embedded sw systems proceedings working ieee ifip conference software architecture 
architectural blueprints view model software architecture ieee software vol 
november pp 

nord describing software architecture uml proceedings working ifip conference software architecture :10.1.1.43.661
garlan selic modeling architectures uml uml lncs springer 
petre looking isn seeing readership skills graphical programming communications acm vol 
june pp 

wendt programmed action module element system modelling digital processes vol 
pp 
wendt einf hrung die vol 

wendt der der software technik data report vol 

zuck ein zur von auf der basis von nen dissertation universit kaiserslautern 
beschreibung systeme mittels shaker aachen 
der zur beschreibung nebenl und systeme shaker aachen 
wendt grundlagen der nd ed 
springer heidelberg 
deutsches institut von din berlin 
chen entity relationship model unified view data acm transaction database systems vol 
pp 

reisig nd ed 
springer heidelberg 
wendt modified petri nets flowcharts recursive programs software practice experience vol pp 

ein zur beschreibung systeme proceedings modellierung gi lecture notes informatics 
kappel entwurf und implementierung eines simulators register transfer diplomarbeit universit kaiserslautern 
entwurf und implementierung eines zur integration einen rtn simulator universit kaiserslautern 
kappel tnd architecture documentation segment project documentation sel ag stuttgart 
sap ag reports sap basis modeling group sap ag 
gr ne kn apache modeling project www hpi uni potsdam de apache 
gr ne kn 
design recovery apache case study international conference software engineering research practice appear las vegas 
