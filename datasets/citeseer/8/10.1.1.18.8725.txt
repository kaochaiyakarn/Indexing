feature declarative opponent modelling multi agent systems im und intelligenz zur des im fachbereich und der universit von timo ste ens geb 

juli feature declarative opponent modelling multi agent systems contents opponent models game theoretic approaches 
classical game theory 
opponent models search 
learning opponent models 
abductive approaches 
intelligent tutoring 
image recognition 
plan recognition 
opponent modelling mas 

opponent modelling robocup environment robocup simulation league 
general remarks 
coaching 
standard coach language 
opponent modeling approaches robocup 
coaching problem 
external opponent modelling 
ideal opponent models 
formation recognition 
methods rst coach competition 
probabilistic positional opponent models 
feature declarative opponent modelling multi agent systems feature opponent modelling features feature declarative opponent models 
architecture fbdom system 
demands opponent model representation 
building models 
selecting model :10.1.1.112.9012
bene tting knowledge opponent 
applying feature declarative opponent modelling robocup representing features robocup 
building models 
situation matching 
action detection 
determining best matching opponent model 
bene tting classi cation 
experiments 
experiment design 
experimental results 
appendix list gures 
list tables 
example model 
example model 

index 

chapter basic factors ects behavior agents mas knowledge 
david carmel multi agent systems mas grow importance applied di erent domains diversity types agents systems grows 
agent designers longer hard code possible interaction situations software types agents encountered 
bring diversity behaviors tactics foreseen programmer 
demands agent ability exibility interact agents rise especially agents adversarial goals 
order act optimally reasonable try predicting behavior 
new theories human brain claim high percentage capacity deals predicting including behavior humans 
similarly experiments game theory showed anticipating opponent moves leads better results just reacting move 
lot mas concentrates nding opponent plans 
predict opponent behavior kind model opponent needed 
additionally models collaborating agents fact turn useful order increase team cooperation saving communication bandwidth 
cases models referred opponent models thesis meaning model refers agents 
feature declarative opponent modelling multi agent systems way con icts notion multi agent modelling avoided describe implementation process agents 
lot research opponent modelling general gametheoretic approaches plan recognition domain dependent operator hierarchies 
approaches applied dynamic non discrete multi agent systems 
thesis method representing opponent models introduced feature works wide range domains accurate evaluation functions exist 
describing complete opponent behavior approaches feature declarative opponent modelling fbdom focusses typical identifying tactical moves opponent 
just humans compare ones typical striking properties observed agent behavior matched appropriate opponent model 
classi cation corresponding counter strategy selected 
thesis introduces feature opponent modelling general framework di erent mas method implemented empirically evaluated robocup domain 
apart proof concept evaluation points parameters matching classi cation process uence results 
experiments run measure method performance 
chapter overview game theoretic approaches order show information opponent behavior useful trivially spending consideration 
chapter describes instances abductive approach acquiring models opponent 
shown feature approaches succesfully employed areas image recognition intelligent tutoring 
shortcomings plan recognition methods discussed 
robocup selected testbed introduced framework chapter motivates robocup appropriate domain gives short overview domain characteristics copes applications automated analysis modelling opponent behavior robocup domain 
chapter feature declarative opponent modelling introduced chapter implementation robocup domain evaluated series experiments 
chapter concludes 
chapter opponent models game theoretic approaches interesting game winning move play 
joshua movie war games game theory basis opponent modelling 
worked question play optimally opponent 
approaches focussed game mechanics considering player 
realized knowledge opponent strategy enhance game results 
due realization opponent modelling investigated 
applications successful classical games chess domains economy negotiations warfare 
aspects transferred mas 
chapter focusses game theoretic approaches form origins opponent models relevant 
describing approaches aws discussed pointed complex dynamic mas 
chapter starts algorithm model opponent assumes acts optimally 
aws disadvantages pointed 
approach described introduces feature declarative opponent modelling multi agent systems concept opponent classes models opponent 
idea opponent classes heavily uenced fbdom 
technique acquire opponent models outlined 
shown applicable certain domains order motivate fbdom 
classical game theory nite game number players available set discreet actions moves 
play game players simultaneously select action sets 
classical game theory assumed player knows set actions opponent 
true evaluation functions return payo play player 
assumed players rational agents try maximize expected utility 
rules player uses choose available actions form player strategy 
round games minimax algorithm method perfect play deterministic perfect information games provided opponent plays optimally 
complex games opponent plays hard impossible nd optimal strategy 
result called trap situations opponent overestimates move respectively 
hand aws opponent play exploited actively creating situations suboptimal decisions 
hand assumption opponent plays optimally lead results 
example gure player max assumes min play optimally 
game ends negative score max top node decides execute left action promises score 
known min overestimate rightmost action max chosen right action yielding score 
reveals knowledge opponent useful necessary order get best results 
knowledge acquired rst observing number games 
observing approach described section assumptions opponent membership certain opponent classes 
max max max max min min max max max max max min min erroneous move max top tree describes play minimax algorithm assuming opponent plays optimally 
bottom tree describes game turned player max known min real suboptimal strategy 
evaluation values leaf nodes depict utility perfect evaluation function return 
min calculated values di er perfect values shown 
values parent nodes describe action player chooses 
feature declarative opponent modelling multi agent systems opponent models search minimax algorithm uses knowledge opponent decision procedure extensions 
algorithm described section 
carmel markovitch introduce generalization uses model opponent bene aws 
opponent modelling introduces classes opponents 
models rebuilt new game 
assumed xed set models models possible opponents 
classi cation player able select appropriate action 
basic idea similar feature opponent modelling 
models quite di erent 
carmel markovitch de ne recursive opponent model consists evaluation function player model opponent holds 
way possible reason opponent reasons players including oneself 
set possible game states 
successor function returns set successor states 
opponent model speci es successor function opponent uses 
note return set evaluation function determines opponent optimal move 
function takes position depth limit static evaluation function arbitrary opponent model 
de ned return value best applicable move move max max selects best move player generating successors current state 
applying opponent model obtains opponent moves actions evaluates recursively reducing depth limit plies half rounds 
speci reduction depth limit due fact algorithm returns values player ply depth opponent move depth directly 
player move plies away round 
depth limit zero recursion static evaluation function 
note classic minimax algorithm depth limit uses negated evaluation function player assumes opponent searches 
just special case player evaluation function minimax algorithm written special form illustrate opponent modelling works assume player uses evaluation function knows opponent uses allows de ne special case algorithm simulates opponent reasoning depth nd opponent selected move evaluates calling recursively depth 
note depth counted terms plies rounds 
way de ne algorithm assumes opponent uses algorithm correct model opponent player bene knowledge 
problems inherent algorithms 
algorithms round games clear generalized parallel multi agent domains 
domains allow actions real numbers parameters sequential checking possible successor states infeasible 
hard create ecient accurate evaluation function 
aim thesis develop framework handle opponent models mas noisy non discrete actions evaluation function 
opponent model needs acquired 
point dealt section 
learning opponent models chapters di erent methods learn infer opponent models mentioned 
chapter game theoretic approach described forms basis area 
feature declarative opponent modelling multi agent systems carmel markovitch suggest method nd opponent model consistent observed input ouput opponent 
consider repeated player games strategies modeled nite dfa 
dfa opponent model exists best response dfa polynomial time 
learning dfa opponent model leads play 
nding minimal dfa proved np complete carmel markovitch show poly nomial method nding dfa consistent observed data 
model learned unsupervised way teacher available experiments opponent costly impossible 
algorithm works holding consistent model encounters opponent 
observation inconsistent model modi ed 
case observation table dfa entries equivalence class outputs 
entries extended equivalent anymore keeping table consistent closed 
idea maintaining consistent models optimal model feature declarative opponent modelling 
carmel applied dfa learning algorithm repeated player games 
observation table restricted discrete domains approach sensitive noise 
output observation blurred noise belong equivalence class observation describes situation 
remains unclear algorithm scaled multi agent systems 
games considered carmel action round completely described action player 
extended complex situations complex input alphabets tackled papers 
creating opponent models automatically scope thesis 
fbdom uses models agents general ideas acquiring outlined 
models able express interactions multiple agents noisy dynamic environments 
order evaluate fbdom opponent models created manually 
chapter abductive approaches builds basically concerned nding best explanation observed data just form abduction 
classic form lead idea agent employing certain model show certain 
observations model inferred 
common method chapter gives overview di erent approaches plan recognition intelligent tutoring image recognition multi agent modelling methods built 
approaches chapter basically mapping observations kind model 
shown intelligent tutoring successfully models students means called features 
notion feature fbdom 
image recognition overview contributes fbdom introducing certain properties features model satisfy 
standard methods nding plans actions agents examined applicability general multi agent systems 
intelligent tutoring interestingly intelligent tutoring related opponent modeling 
basic idea area research infer model cognitive abilities student input output cognitive system feature declarative opponent modelling multi agent systems 
models predict answers students questions making possible support learning providing appropriate problem tasks 
explain mistakes 
trying model internal processes cognitive system fail face diculties problems related introspection deriving internal mechanisms external observations 
webb introduces feature modeling paradigm avoids assumptions cognitive processes 
uses attribute value machine learning techniques attributes features actions context tasks 
features observable externally try model internal processes 
model learned contains associations form set context features single action feature applies student action context example student supposed learn association look result equals associations generalized achieve compact models 
example association derived zero result equals zero result equals static nite nature domain possible learn models student 
noted learned associations expressiveness propositional logic 
just section methods transferred dynamic domains multiple agents act modelled 
idea features build model agent important fbdom 
image recognition image recognition concerned determining object generated image 
general insight images modeled conjunctions local features 
observation features image needs mapped models objects 
implementations features simple edges supposed capture important characteristics image independent lighting hue variations 
models image compact just list features positions image 
idea important feature opponent modelling 
features describe image identifying pieces 
problem emerges image recognition called correspondence problem 
prede ned features identi ed image 
features simple tend di erent images 
example vertical edge certain length nearly images 
identifying simple feature carry class information expressive identi cation 
complex feature recognition prede ned features learns complex features contain class information :10.1.1.112.9012
bitmaps single features vertical horizontal edges complex feature represented series templates 
templates show part object nose face di erent poses 
order increase independence lightning conditions templates contain explicit color values intensity values relative neighbors 
complex features need distinct appear class images supposed code stable appear constant di erent poses lighting conditions 
terms crucial selecting appropriate features feature declarative opponent models 
large set complex features maintained image recognition system object modeled handful complex features 
facilitates correspondence problem yields computationally effective recognizing algorithms 
hoped success transferred feature opponent modelling 
plan recognition plan recognition developed parallel research planning way reversed process plan execution 
planning deals nding sequence actions ful ll goal plan execution sequential handling planned actions plan recognition tries infer feature declarative opponent modelling multi agent systems read book walk library search book pen get exercise correct exercise research thesis background spare time read start comp search library online papers correct exercises due date correct task start comp load start comp load error report check plan library containing plans 
plan agent executes observing actions 
owing focussed deliberative agent architectures 
speci cally kautz allen de ned problem plan recognition problem identifying minimal set top level actions sucient explain observed actions 
basis plan recognition approaches :10.1.1.21.4744
representation plans graphs top level actions root nodes 
actions decompositions specializations depend nodes top level actions 
plan recognition form graph covering 
agents try recognize plans agents rst need plan library contains plans observed agent execute 
uses hierarchical plans plans decompose tasks di erent levels :10.1.1.21.4744
plan library look gure 
note depicted plan library plan recognizing plan executing agent 
plan triggered event depicted dashed line 
observable recognizing agent 
example plans goals correct exercises research thesis background check 
goal sev eral methods achieve 
example research thesis background achieved methods library online papers 
methods decomposed steps 
library requires agent sequentially execute steps walk library search book read book 
temporal orderings depicted arrows 
method step graph viewed graph methods connected steps 
view plan recognition 
suppose recognizing agent observes action start comp 
infer correct exercises research thesis background online papers check order disambiguate plans needs observations 
load observed minimal explanation covers actions correct exercises check interestingly plan recognition systems represent fact event observed 
suppose load action observed 
intuitively check plan probable plan recognition systems fail information observed actions 

viewing problem di erent perspective tambe kaminka proposed knowledge social roles detect missions aborted due failures 
mentioned plan recognition focusses deliberative agent architectures 
deals quite temporal ordering actions hierarchical plans 
reactive behaviors plans change rapidly dynamic domains modelled 
opponent modelling mas opponent modelling mas builds described cope diculties encountered game theory classic plan recognition 
example mas models feature declarative opponent modelling multi agent systems able express mutual goals actions agents 
domains important reason reactive deliberative agents act simultaneously opponent time modeling 
attention plan recognition shifted dynamic realtime environments modeling multi agent teamwork 
approaches described section 
information economy domain vidal durfee show cases advantageous model agents 
suggest nested agent models similar algorithm mentioned section example level modeler model agents 
level modeler assumes agents level modelers tries learn decision functions 
vidal durfee run tests level modelers assume agents level modelers 
experiments show higher level modelers exploit lower level modelers 
stated brie cases assumption wrong leads suboptimal behavior 
intuitively sense observations need systematic evaluations 
vidal durfee approach needs utility function assumes agent interaction cycle bidding buying selling 
world ers perfect information bidding actual price available 
domains market simulations approaches 
recursive modelling interesting subject tackled thesis 
domains partially accessible agents need infer unobserved actions observations able order reason successfully plans goals agents 
tambe provide framework event tracking proves successful military simulations 
environments important infer unobservable actions remote launching missile observable events turning radar guidance maneuvers 
tambe uses operator hierarchy implemented speci soar architecture 
operator hierarchy similar hierarchical plans decomposes goals step step actions 
matching observed events hierarchy infer goals higher levels 
domains require ability model reactive rapidly changing deliberative behaviors 
achieve recursive agent tracking technique proposed uses agent decision architecture model opponent decision process 
agent assumes opponent uses similar operator hierarchy just executes hierarchy opponent view 
course may include modeling agent opponent perspective recursively ad 
tambe reason done computationally called model sharing 
model agent opponent chain recursion don executed 
tambe relies heavily assumptions modelling modelled agent operators problem spaces 
case military scenarios standard maneuvers exist opponent knows 
order track opponent tambe simplifying assumption modeller knows opponent exact state 
general case impossible estimate infer exact state agent observation especially actions impossible detect 
particularly recursive agent tracking appear tambe papers agent modelling 
intille bobick framework recognizing multi agent actions visual evidence evaluate analyzing taped games american football 
similar image recognition section models consist local events 
additionally de ne temporal relationships events example 
example run ball action prerequisite catch action occurs 
inspired plan recognition works american football lot typical plays constant tactical moves 
primitive action encoded belief network method shown able represent agent goals plans suitable plan recognition 
actions detected networks temporal relationships tested 
networks consist kinds nodes see rst called unobservable belief nodes true false contain internal states modeled agent observed 
observable evidence nodes represent observed actions 
example observed directly player 
unobservable event inferred observable facts facing object close 
unobservable internal states source ambiguity 
described fbdom handles unobservable states 
observable events ary example result distant detector near far 
belief nodes lled networks 
violates assumption dependencies feature declarative opponent modelling multi agent systems obj obj obj typeof obj intercept obj ball ready obj obj obj open obj velocity ball distance ball qb facing obj qb obj obj belief network representing agent plans american football 
nodes marked unobservable states nodes observable events 
represented network intille bobick argue approximation works network just approximation agent goals 
shows aspect intille bobick approach fuzzy descriptions 
probabilistic nature bayesian networks 
networks combined multi agent networks multi agent action play decomposed actions individual agents 
actions exist fuzzy temporal relationships 
recognizer checks predicted events observed happen correct temporal order 
extension belief networks basis gmytrasiewicz 
intille bobick approach focussed matching observations prede ned networks learning networks 
correct model usually known certainty probability distribution di erent models kept 
observed behavior agent match models modi ed better account observations 
described previous abductive approaches map observations models span variety applications domains 
ideas features prove useful opponent modelling framework mas mentioned approaches suited applied general mas 
totally di erent domains image recognition single agent domains 
mas approaches restricting assumptions internal states constant moves plays suited noisy non discrete applications 
issues tackled described chapter 
seen methods domain speci 
great deal attention currently focussed opponent modelling robocup 
unfortunately doubtful transferred mas domains 
aim thesis provide framework represent handle opponent models general mas 
incorporate ideas raised outlined approaches distinct stable features focussing externally observable events avoiding assumptions internal processes 
feature declarative opponent modelling multi agent systems chapter opponent modelling robocup came purpose simulation league come coaching 
gal kaminka robot world cup initiative robocup attempt encourage ai intelligent robotics research providing standard problem large variety technologies integrated examined 
robot team fare game soccer needs employ intelligent techniques robocup suited evaluate di erent approaches measure progress technology 
just computer chess standard challenge problem ai deep blue beat human world champion robocup proposed new standard challenge problem goal beat human soccer world champion team robots year 
challenges near include opponent modelling key technology robocup general multiagent interaction 
robotic soccer complex domain realtime non deterministic dynamic opponent modelling techniques previous chapters shelf solutions 
basis build research needed applying similar domains 
chapter give overview domain feature declarative opponent modelling multi agent systems document state art opponent modelling robocup 
environment robocup simulation league robocup di erent leagues di erent sizes robots di erent key challenges 
humanoid middle size sony legged simulation league 
research focus rst leagues hardware issues vision mechanics particularly simulation league prone opponent modeling 
evaluation experiments simulation league fundamental techniques developed described section 
general remarks robocup simulation league uses soccer server system simulate eld objects see gure 
player unique process connects standard network protocol server 
players receive visual audio information msec network issue primitive actions kick dash turn turn neck say msec 
server processes actions players generates new visual information 
consists basically distances angles players ball landmarks 
players perceive objects eld vision visual information execution actions noisy 
additionally accuracy amount sensory information decreases distance object 
communication clients allowed passes server bandwidth hear range limited 
coaching addition players team may connect client server called online coach 
resembles human trainer coach real soccer may execute actions eld 
receives visual information global noisy 
time step coach receives correct absolute positions velocities players playing eld simulated 
feature declarative opponent modelling multi agent systems ball 
allowed communicate arbitrary messages players game stopped messages standard language certain intervals 
coach valuable tool tactical analysis opponent modelling 
information sent coach game recorded log le time consuming analysis methods executed ine 
standard coach language standard language coach communicate players certain intervals clang 
basically production system maps situations actions 
depending type speech act rules interpreted di erently 
uttered assertive rules express belief describe behavior player set players 
directive rules advice coach act certain way speci ed condition 
language possible opponent modelling compare di erent approaches testing di erent teams 
opponent modeling approaches robocup promote research opponent modelling uence online coach fostered coach competition established 
section outlines complexity coaching problem gives overview approaches 
coaching problem riley de ne coaching problem task provide advice number distributed agents 
coaching problem subsumes opponent modelling issues arise coaching opponent modelling complex domains robocup 
section thesis identi es new issues dealt 
rst representation reasoning strategies 
major issue modularity strategies meaning strategies composed di erent tactics refer di erent situations game 
ball sports domains complete team strategy comprise tactics defensive situations 
components refer di erent situations interact 
defensive behavior results spatial distribution players suboptimal actions acquisition ball leads time consuming repositioning 
means coach arbitrarily change parts strategy considering ects parts 
mas coordination cooperative players addressed coaching opponent modeling 
representation strategies example consider execution pass requires shoot ball teammate receive 
automated analysis keep track intentions players needs disambiguate events player movements part goal mark attack opponent occupy defensive position run free potential pass receiver 
issue changing observed tactics 
similar problem user modeling faces trying adapt shift drift users interests 
analysis methods user opponent modelling require observations certain time span 
behavior changes time result inaccurate biased 
hard specify thresholds determine changes due change behavior due natural uctuations noise 
mentioned section possible calculate best response opponent move strategies modeled nite 
author knowledge complex domains robocup lack general evaluation functions states general approaches deriving counter strategies 
response opponent tactic hard coded obtained time consuming experiments 
model predict behavior opponent lack evaluation function successor states hard select best action 
agent acquired accurate model opponent long way go playing optimally 
sections describe di erent approaches opponent modeling feature declarative opponent modelling multi agent systems coaching robocup domain 
external opponent modelling mas possible agents deployed act autonomously long time interference designers robocup execution agent teams limited game 
leaves designers possibility change behavior games manually changing parameters pieces code 
adapt team opponent watching log les previous games 
leads results approach satisfy robocup challenge human interference minimized 
automated opponent modelling preferred 
ideal opponent models rst step automated opponent modelling assume opponent plays optimally 
example player wants intercept ball certain opponent player assumes opponent correct world model runs ball optimal interception route server cycles 
way agent reason needed speed power spend order get ball rst 
needed power available give trying 
resembles approach classic minimax algorithm described section knowledge opponent 
just argumentation idealized opponent models lead overestimating opponent missing chances generating wrong predictions 
theoretic general view situations described important consider opponent strategy 
called position player reason assume opponent underestimate best move execute poorer move 
situation called trap position player expects opponent overestimate execute bad move 
building player opponent models losing position moves lead worse situations 
opponent model player favor move leads situation opponent situation 
concrete examples situations robocup 
teams observed players shoot goal goalie defenders ball 
clear happens 
case agents assume world model incorrect turn endlessly order update visual information 
argumentation players reason believe lose ball choose steer ball opponent described situation 
requires realistic optimal opponent model 
formation recognition early online coach includes recognition formations 
formations deemed important part team strategy adapting opponent formation promises better scores 
approach feeds observed player positions neural network tries classify prede ned set formations 
classi cation done appropriate counter formation looked communicated players 
recognition formation classic abductive approach nding best explanation observed events 
appropriate inferred automatically evaluated empirically testing hand 
formations important part soccer tactics concepts team strategy represented di erent way 
methods rst coach competition techniques opponent modelling rst coach competition robocup 
method model opponent send hard coded advice deemed helpful 
approach statistically identify dangerous zones advice players avoid 
similarly statistical observations advice marking assignments depended modeled opponent team formation order match defenders close forwards 
experimental results provide information impact team performance 
feature declarative opponent modelling multi agent systems learning approach demonstrated recognized formations observed player positions 
formation consists rectangle player learning algorithm returns smallest rectangle covers majority player positions removing bias ball oriented shifting 
ect teams small 
owl coach learnt rules previous games described passing behavior di erent teams 
coordinates receiver shooter clustered 
rules learnt include name receiver shooter cluster distances angles players ball 
pass rules mimic passing behavior teams improving passing quality coached team predict passes opponents analysed 
experiments revealed rules improve performance team 
important observation players team processed called info messages identi cation player types 
essential part clang provide opponent modelling information players 
contain descriptions behavior opponent 
players process advice messages contain explicit directives act certain situations sent info messages 
gives rise hypothesis easy coach come descriptions opponent behavior hard players infer appropriate actions knowledge 
implementation bugs lacking autonomy player clients clients coach advice follow erroneous advice consideration 
coach competition evaluate compare di erent approaches 
probably advanced approach demonstrated coach competition builds described subsection 
probabilistic positional opponent models assumption riley important fbdom human players observe opponent behavior game compare previously played opponents 
observations try identify style strategy adopt strategy ective previous adversary 
assumption shared approach thesis 
reasonable imagine advantage experienced players apart physical training partly due fact knowledge certain situations 
knowledge acquired playing games tactical training 
cases experienced player compare actual situation broader range previous experiences 
recognises situation know actions execute 
riley looked detail 
decomposes process steps 
abstracting features extracting 
building called adversary classes extracted features 
matching observed events adversary classes 
changing behavior selected classi cation abstracting features mentioned coach receives positions velocities moveable objects time step 
raw visual information features extracted positions ball opponent players opponent pass lanes position pass goes counted opponent dribbling opponent shooting 
obviously possible deduce opponent strategy timestep features cumulated 
eld discretized small squares form data structure called 
feature observed position counted corresponding small square 
lead characteristic distribution 
note example temporal information lost counting pass impossible decide directions went starting point treated identically 
shortcomings representation opponent models 
di erentiate tactic uses passes middle wings tactic passes wings middle 
disadvantage opponent model holds positional information 
way explicitly represent pass chains feature declarative opponent modelling multi agent systems mutual interaction team mates 
coordination players essential part strategies way represent 
building adversary classes riley duration game short create model opponent 
promising create adversary classes just match observation 
claim small set models sucient represent wide range opponent strategies decision mechanisms accurately 
think major insight approach dependent question models generalize new teams 
thesis relies claim tries classify opponents pre de ned adversary classes 
evaluated empirically models cover new teams 
adversary class riley uses set called target con guration set contains opponent passing positions denote opponent passes center wings 
classes constructed manually 
selecting adversary class rst approach build target con gurations game measuring similarity appropriate target con gurations opponent models 
unfortunately experiments revealed identi cation correct model little random guessing 
suggested due fact similarities di erent models small example opponent player positions depend highly ball movement marked players vary di erent games 
technique decision trees target con gurations speci adversary class 
idea distinguishing classes best feature similarity target con guration class distinguishing 
feature selection done decision trees 
approach performed accuracy useful incorporating team performed order magnitude better guessing due large number adversary classes 
approach naive bayesian classi er 
initially probabilistic distribution models 
observation recalculate distribution jm models observation 
think decision trees order target con gurations real innovation 
unfortunately performance accuracy low application compared ort learning building decision trees 
approach described traditional bayesian classi er 
adapting behavior rst riley works skipped part totally 
research opponent models predict probabilities player positions 
predictions plan standard situations created probability opponent player intercepting pass chain minimized 
pointed team bene tted adaptive way knowledge exist signi cant experiments show bene ts terms score di erences 
feature declarative opponent modelling multi agent systems chapter feature opponent modelling commander approaches battle picture ght went occasion nd minutes forces joined gone 
picture destroyed 
reserve individual picture serve long 
may rst pictured forecast inapplicable pressing collection pictures equally loss practical adjustment 
great individuality past may nearly individuality past 
serve adequately demands constantly changing environment pick items general setting know parts may ow alter disturbing general cance functions 
bartlett remembering feature declarative opponent modelling multi agent systems chapter introduces representation opponent models called declarative opponent modelling fbdom 
general approach possible methods discussed build models select appropriate observations 
additionally methods discussed bene classifying opponent behavior 
discussed methods evaluated compared chapter 
pointed demands opponent model representation complex domains robocup satisfy fbdom handles demands 
features feature declarative opponent models section introduces technique feature declarative opponent modelling 
general idea riley described section humans try match playing style opponent previously encountered ones select strategy performed best previous opponent 
considering riley approach surely cognitively inadequate assume human players store single observation compare cumulated observations previously acquired models contain observations exemplar theory think di erently 
riley abstracts features removes temporal ordering target con guration player positions humans consider position observed apart fact real world discretized time steps 
method proposed relies assumption humans identify certain properties opponent 
properties forth called features 
conceptually features describe typical parts behavior 
example robocup simulated soccer domain feature forwards pass front goal goalie mistake leaves free space forwards score 
behavior formalized mapping situations actions just clang mentioned section 
rough example aforementioned passing behavior imagined mapping situations actions way 
note features needed di erent situations consider 
blocks space ball goal pass forward 
goalie far away shoot ball goal 
domain modsaf military air combat simulator feature look aircraft comes radar range turns collision course 
features compared concrete observations 
rst example player ball passing way goal blocked behavior covered features 
analogously observation modsaf simulator shows aircraft goes collision course circling matches described feature 
aspects features need satis ed order human deem typical strategy 
distinctness cf 
section 
regarding distinctness features encountered particular strategy strategies 
regarding appear high probability particular strategy 
order clarify notion feature distinction general day language de nition follows de nition set eventually incomplete situation descriptions 
set possible actions 
powerset feature externally observable mapping situation description set actions incomplete situation description focusses part situation example position ball 
helps keep features concise re ects fact ignore position defenders stands front opponent goal 
actions assumed carry information agents executes 
pass player player di erent feature declarative opponent modelling multi agent systems pass player 
note riley approach actions identical players region 
de nition feature declarative opponent model straightforward de nition feature declarative opponent model unordered declarative set features denotes probability feature occur strategy speci ed model 
constraint satis ed 
constraint guarantees features equal di erent probabilities 
noted need satisfy constraint reasonable enter multiple features share situation contain di erent actions 
re ects fact agents di erent options execute situation 
architecture fbdom system section outlines architecture agent applying fbdom 
shown gure basis opponent models 
contain descriptions di erent levels 
example specify complete strategy certain team specify left wing defender 
order detect features opponent models observations come raw sensor data processed action 
try match observations features models 
information observations match passed counting component 
handles example partial mismatches implements possible counting methods bayesian classi er 
opponent model best value chosen knowledge base decide counter strategy applicable 
just opponent models counter strategies vary size 
contain full team strategies just speci cations forward shoot 
architectures allows usage online ine method 
depends domain method needs data provided counter strategies sensory data action detector situation detector component counting assigning strategies models opponent models components fbdom system 
feature declarative opponent modelling multi agent systems encounter agents histories log les previous encounters analyzed order select counter strategy 
demands opponent model representation methods represent opponent models 
method domain speci ad hoc model 
approaches derived general representation techniques bayesian networks steam see section outline approaches 
knowledge systematic framework evaluating representation ts speci needs 
section general demands proposed representation mechanism opponent models satisfy order useful complex domains robocup 
focus opponent models classify strategies predict opponent behavior 
kinds usage demand aspects 
pointed demands employed scienti seen ideal goals satis ed general 
demands proposed interactions looked 
granularity possible express opponent models di erent levels granularity 
way hierarchy classes speci ed toplevel classes denoting broad ranges strategies leaves denoting speci strategies 
building models facilitated rst step create general classes need arises re ned decomposing 
concrete example soccer general class consist teams play forwards 
teams partitioned detailed models 
teams position forwards center eld wings 
di erentiated describing ball goal passed forward 
modularity mentioned realistic domains strategies cumulation di erent tactics 
example sports di erent forms strategies coupled di erent forms defensive strategies 
strategy denote situations tactic applied 
representation mechanism provide ability specify modules separately facilitating combinations 
provide means specify interactions modules example module mid elders forwards exists way describe ball transferred mid elders forwards 
dividing opponent models modules identi cation done separately 
robocup example helpful period game team forced defense provides observations 
monolithic models fail recognize complete strategy wait observations gathered 
concrete example soccer module describe behavior opponent kick speci ying player positions pass chains 
module model tactics front goal 
modules minimum interaction modules goalie defenders interact 
need data scalability opponent model easy recognize sparse data 
shortens identi cation time maximizes time team try bene classi cation 
time method optimal method rely xed amount data xed observation window return preliminary classi cations point observation process high con dence 
externalization section models little assumptions internal decision processes modelled agents possible 
due fact way observe internal processes internal states 
example model relies assumption feature declarative opponent modelling multi agent systems modelled agent uses deterministic nite automaton uses expressive method model predict agent behavior 
way guarantee assumption free models externally accessible observations recognizing parts 
redundancy redundancy opponent models little possible stored compactly modi ed easily risk causing inconsistencies 
apart representation allow infer observable events represented actions need specify explicitly 
example fact player receives pass certain position implicates player run rst place 
completeness notion completeness relevant aspects kinds strategy model 
modsaf domain representation formalism misses maneuver collision course certain classes opponents modelled modelling agent able take appropriate actions encounters maneuver 
interpretation completeness complete behavior described model 
argument put forward evaluated thesis sucient focus typical behavior parts order identify strategy 
consistency representation permit existence inconsistencies 
avoiding possible representation provide means identify inconsistencies 
example inconsistency prediction different positions agent inherently unsatis able preconditions action 
demands interact 
example granularity needs ne grained order focus details need data higher 
leads idea observation session opponent classi ed general class 
data acquired classi cation detailed 
modularity form granularity large granularity opponent model contain complete strategy 
smaller granularity strategies splitted detailed modules opponent model describes certain parts behavior 
completeness uenced granularity 
ne grained model details need expressed puts higher demands representation formalism 
worst case lead con icts demanded granularity satis ed representation mechanism 
granularity needs model skill pilot modsaf representation mechanism provide concepts impossible satisfy granularity completeness 
trade thoughts obvious need data rises degree modularity identi cation works separately module data needed 
note modularity help reduce need data 
example opponent chance need gather data moves agent need choose defensive strategy 
interaction demands need data redundancy 
representation need explicitly express action need data reduced 
sports domain illustrated model contains feature describes agent shoot goal certain position suces observe agent waiting ball dribbling 
necessary gather data movement position 
low redundancy reduces need data 
obviously impossible satisfy demands 
nd trade examining concrete requirements domain application 
examined fbdom handles demands 
granularity demand satis ed degree underlying language speci es situation action mapping provides di erent levels granularity 
language described section 
feature declarative opponent modelling multi agent systems modularity feature contains situation applicable features put form module 
example possible create module speci es defenders mark forwards combining features describe marking assignment di erent defenders di erent situations 
situation descriptions crisp fuzzy modules di erentiated clearly 
certain extent depends expressivity underlying language 
provide sucient means order create modular features 
need data scalability observation adds information available selecting proper class 
xed observation windows xed amounts data needed 
claim feature recognition anytime method 
experimentally evaluated section 
externalization depends underlying language 
demand satis ed degree contains externally observable concepts 
redundancy redundancy problem coped approach 
basically possible include highly redundant features set 
taken care constructing models 
completeness underlying language keypoint completeness 
provide concepts necessary actions situations 
consistency feature declarative opponent model inconsistencies arise type di erent actions mapped situation 
di erent mappings exist re ects fact opponent uses variety tactical moves 
example soccer opponent uses right wing left wing features model situation ball middle eld :10.1.1.112.9012
features maps right sweep situation left sweep 
regarding externalization obviously uncertainty intille unobservable internal states avoided feature declarative opponent modelling assumption internal state agents 
interestingly uncertainty remains shifted ambiguity actions 
intille belief network example uncertain speci player ready catch ball fbdom uncertainty shot pass goal shot 
problems equivalent de nes choice action pass goal shot dependent player internal state 
approaches plan recognition see section intille framework section focus hierarchical temporal structure actions respectively 
plan recognition restricted dynamic fast changing environment plans aborted changed rapidly 
plans plan cycles author knowledge restricted standard situations breaks free corner kicks 
focus feature declarative opponent modelling di erent hierarchical temporal 
uses similar techniques infer actions copes question situations actions executed actions opponent 
observations opponent classi ed opponent class 
temporal structures certain amount constant moves plays exist american football 
domains robocup dynamic tactics represented constant plays may aborted changed rapidly 
general framework feature opponent modelling temporal structuring 
needed domain incorporated underlying language 
building models having accurate models di erent opponent classes crucial 
models feature declarative opponent modelling complicated build riley approach 
riley models built feature declarative opponent modelling multi agent systems just counting positional observations modelled teams models need distinct stable features 
building model basically nding features describe behavior opponents belong class 
methods achieving applied described generally 
building models done shown chapter 
done domain experts understanding di erent strategies 
descriptions plays intille framework example entered domain experts 
plan libraries plan recognition created manually 
method lead models di erent granularity speci city levels 
domain expert want create general models rst describe di erent strategies 
soccer strategy books general strategies english playing style compared 
want construct speci models order di erentiate teams adopted english playing style 
approach acquire features automatic clustering observations opponents 
general case kinds clustering 
di erent opponent classes need clustered 
case opponent classes identi ed need lled features example models shall created single teams 
cases remains task clustering observations 
soccer domain clustering done self organizing maps 
class observations processed 
input samples vectors components components player specifying coordinates components coordinates ball series components actions opponent player 
player action segment active lled zeros 
pass player take component pass point components marking player component dribbling point component 
repeated situations similar actions executed form cluster 
vector representation feature representation extracted 
stable frequent form cluster 
order guarantee distinctness cross tests run classes order check features exist particular class 
features distinct removed 
shown self organizing maps learn clusters agent behavior 
example clusters di erentiated regions passing dribbling 
second clustering task replaced concept learning methods 
rules predict players pass learned 
rules features additional cross tests order estimate probability 
similar methods promising learn rules goal shots marking behavior 
idea collect observations action executed avoided 
observations form positive negative samples needed 
learning algorithm outputs generalizations situation component features action 
genetic algorithms applied nd appropriate features 
population consist features tness function combination distinctness feature 
selecting model abductive approach model provides best explanation observed events 
words model match observations appropriate opponent class 
noted selecting model best describes opponent challenge 
plan recognition appropriate plan follows logically action hierarchy cf 
section model selection numerical logical 
riley approach auxiliary model built observations similarity metric necessary 
observations matched features number matches determines appropriate opponent model 
way matches counted straight forward 
intille straight forward classic inference techniques belief networks 
feature approaches bayesian theorem classic approach 
image recognition model probability updated feature declarative opponent modelling multi agent systems observation bayes theorem :10.1.1.112.9012
evaluated leads results feature declarative opponent modelling 
methods counting calculating observations possible experiments showed parameters counting carefully chosen heavily uence accuracy 
feature models explain observation just subset 
taken account determining best model 
methods possible need evaluated 
noted mas exist pairs actions mutually exclusive mutex 
depends domain example robocup agent turn kick time 
simple agent domains pairs action may mutex mas action pairs involve distinct agents mutex 
de nition actions mutually exclusive short mutex executed simultaneously 
mutex actions write de nition action mutex set actions write de nition situation subsumed situation true true 
write de nition set situation descriptions 
set possible actions 
powerset consisting possible subsets observation denotation observed situation set observed actions agents situation 
observation evaluated primitive results wrt 
model 
simplicity sake list match types probability parameter features model abandoned uence matching process 
actions mutex list complete match situation feature model matches observation 
partial match feature model matches situation action observation 
full match features model match situation observation observed actions action sets features 
partial mismatch feature model matches observed situation includes action mutex observed action 
full mismatch observed action feature model predicts mutex action 
primitive results combined 
example partial match encountered simultaneously kind mismatch features exist share situation contradictory actions 
taken account number matches compared opponent models 
simplest way select model observations just count observations result full matches 
method misses feature declarative opponent modelling multi agent systems south american style european style style 
team team english style german style 
team team team team portuguese style root 
tree models 
things 
xed number features model selection biased models large sets features probability matching higher 
overcome bias consider fraction full matches full mismatches 
observations full matches full mismatches 
consider example 
suppose model features ball controlled opponent left half player attacks player marks opponent 
opponent half player returns home position 
observation ball controlled opponent left half opponent half player attacks player marks opponent 
full match rst feature full mismatch second 
intuitive way overcome problem observation tested explained model 
full match eventual full mismatches ignored 
features full matches observation counted 
analogously features full mismatches 
lot models checking prove infeasible 
cases proposes hierarchical models 
models nodes tree di erent granularity levels 
way models checked 
matching top level nodes subtrees checked 
rst glance look models arranged tree share features 
result cross inheritances 
feature declarative opponent models contain features describe complete behavior 
features contained distinctive identify model 
sharing features subtrees avoided tree structure guaranteed optimal circumstances 
evaluated applied worst case realistic applications 
main question thresholds distinctness value reality 
course bayesian approach applicable 
feature model assigned prior probability 
set manually domain expert empirically acquired automated observation sessions part building model 
prior probability distribution models needed 
done domain expert building model 
assign uniform distribution features models 
observation changes probability distribution models bayes theorem jm new posterior model jm probability matching feature model part feature assigned probability model 
leaves probability observation 
discrete domains set domain experts empirically acquired running experiments 
non discrete domains feasible 
case procedure applied depend model constant need computed explicitly 
ignored calculated normalized probability distribution 
bene tting knowledge opponent basically opponent models predict opponent behavior 
mentioned earlier obvious compute best feature declarative opponent modelling multi agent systems response opponent actions 
predicting mean uence 
example robocup prediction opponent execute successful shot goal provides advantage player able opponent doing 
way opponent models classify opponent change strategy classi cation 
agents need entry model contains appropriate counter strategy 
entries may acquired previous encounters opponent proposed riley 
feature declarative opponent modelling ers opportunity decompose opponent model modules easier agent designer domain expert set entries manually 
say module recognized states opponent scores center penalty area appropriate counter strategy position defenders 
level predicting opponent action calculating best response uses larger chunks strategies 
chapter evaluates techniques proposed chapter 
chapter applying feature declarative opponent modelling robocup strongest arguments prove long veri ed experience 
experimental science queen sciences goal speculation 
roger bacon philosopher scientist 
chapter provides proof concept feature declarative opponent modelling implementing robocup domain particularly simulation league see section description 
advantages shortcomings approach highlighted 
additionally possible methods discussed previous chapter compared running experiments 
chapter organized follows section introduces language representing features section describes opponent models built 
section outline situations actions respectively matched observations 
section methods selecting opponent model described section results experiments reported 
feature declarative opponent modelling multi agent systems representing features robocup shown section language mapping situations actions important 
proposed demands depend heavily language 
section describes domain speci language robocup called sfl 
standard coach language see extended facilitating speci cation team behavior 
di erences clang complete grammar 
sfl preferred clang expressive 
illustrate languages examples 
rst speci es game opened pass player player advice ko bto line denotes rule meant directive info message describes behavior cf 
section 
line states rule valid cycles 
period executed anymore 
line contains condition rule stating 
line speci es action taken condition true 
player passes player 
bto ball directive contains parameters ball handled 
parameter region set contains directive pass contain directives dribble shoot clear ball 
sfl rules look similar extended allow exible concise speci cations team behavior 
clang possible denote closest player ball explicitly 
situation speci symbols introduced sfl 
important wants describe opponent models teams exchange player positions roles order save stamina 
constant player denotations capable describe tactics independent exchanges 
rule advises player intercept ball closest looks advice opp play closestplayertoball line states condition player opponent team controls ball 
line situation speci symbol demonstrated stating closest player ball intercept maximal speed 
building models obvious sfl better suited building opponent models implementing team behavior possibility express general rules fact situation action concepts sfl externally observable 
order describe behavior observable events described 
speci decision process team implementation ignored 
sfl model details low level individual skills kicking dribbling detailed distinction teams tactical level 
regarding abstractness general rules speci ed fact team intents get ball opponent goal 
general rule soccer formalized sfl case identical clang 
granularity externalization demands satis ed large degree 
advice true bto rec pt pt rule says situations team trying get ball feature declarative opponent modelling multi agent systems passing dribbling clearing shooting rectangle speci es opponent goal 
sfl expressive regarding situations 
situations described di erent granularity levels score di erences time ball positions player positions ball ownership possible create di erent modules defense player roles forwards mid elders game game tactics opponent half 
ful lls modularity demand satisfying degree 
sfl contain primitive actions turning complex skills passing scoring required specify agent actions explicitly 
example passing concept sfl covers agent need approach ball turn correct direction kick ball appropriate speed 
need explicitness demand satis ed 
fact primitive actions contained means sfl just clang complete 
possess interference methods iteration recursion 
focus languages describe strategies complete behaviors 
example rule speci es ball passed teammate describe speed ball accelerated pass avoided opponent player close 
due fact clang created coaching language cope possibilities coach send messages certain 
sfl created tool specify tactics team 
low level skills assumed hard coded agent 
demands rely language satis ed sfl representing opponent models chapter 
building models opponent models experiments created manually 
focus strategies situation deemed opponent team half possession ball 
large part team strategy focussing part behavior facilitated building models 
models built teams binaries publicly available 
chosen log les competitions ensure teams strategy di erent games 
con guration les games exactly provided research groups 
noted opponent models intended model di erent teams di erent strategies 
assumption set models describe wide range teams 
assumption riley states team bene tted approach 
comment measurable quantitative values 
experiments course thesis evaluate assumption 
models created single teams hoped general describe new teams 
trade team speci general descriptions 
watching team play games cases games sucient striking behaviors happened times described sfl 
sfl rules formed features opponent model 
order sure features stable speci reactions teams games played changing teams 
models built teams virtual yow ai 
number features models varies refer appendix example models 
means models complete speci cation behavior re ect typical tactics 
observations matched features models 
consistent idea human players identify opponent tactic arbitrary situations 
situations contain information underlying tactic 
situations ignored fbdom compared approach see section single position counted 
additionally variation number features considered selection process 
ensure distinctness mentioned script written ran features cross tests modelled teams 
feature tested teams team speci number matches determined 
cases possible feature matches team average teams 
case feature removed 
feature matches team small number teams 
models teams extended feature declarative opponent modelling multi agent systems feature 
rst glance violates distinctness aspect increases distinctness models include feature include 
remembered models share features see granularity high 
cases feature left unchanged model 
manually created models form leaves afore mentioned tree section 
trivial task build tree models 
general ways creating parent nodes exist 
complete features shared models features models combined create super model 
unfortunately general case lead cross inheritances 
model share certain set features model share set features disjunct tree structure violated 
general avoided models share features just distinctness factor demands anyway 
way create super nodes infer completely new features existing ones 
features cases new feature formed general features formed original features replaced general model created subsumes models 
example robocup domain 
features generalized feature 
ball metres front center line pass ball left forward 
ball metres center line pass ball right forward 
ball metres center line pass ball forwards 
features models describe totally di erent situations guaranteed parent node tree structure general case 
tree structure nice eciency aspects classi cation 
simplicity sake assumed features contain single actions sets 
features sets actions easily transferred list features contain single actions 
situation matching part matching observations features model match situations 
condition part features true observation 
implementation matcher module dirty dozen team speci player rewritten completely online coach log le analyser 
condition concepts sfl fuzzy strict boolean evaluation combined conditions applicable 
detailed description matching process see 
action detection part matching observations features analyse actions players 
algorithm built scratch dirty dozen team 
rst step operationalize actions expressed sfl positioning region positioning clang sfl means player moves region positions region 
velocity players observed vector positioning action checked easily 
vector observed player points target region player target region feature counted match 
real target position player vector movement ambiguous certain degree 
course disambiguated tracking player certain time interval misses point player change intentions mean time 
illustrate assume observer tries match action agent time features 
assume agent left wing direction center 
ambiguous target region just bit center exactly center right wing 
observer able detect target region waiting feature declarative opponent modelling multi agent systems cycles dribbling nished 
remains uncertain detected target region agent selected information time changed target region new information 
experiments action dribbling matches feature target region feature direction dribbling action 
marking player mark player means position oneself line ball player 
detecting action requires check player aims position line remains line moves ball marked opponent 
movement angle di ers line angle certain threshold deemed leaving marking position 
marking detection ambiguous player movement crosses particular line chance 
marking region marking region general marking opponent requires player position opponent region 
detected analogously player marking action 
dribbling region dribbling series dashes kicks 
recognition algorithms check vector player vector ball parallel aimed region 
distinguish case dribbling case passing ball 
checked power accelerate ball 
dribbling uses small amounts power kicking 
passing player identifying pass check vector moving ball points teammate 
additionally pass aimed ahead receiver movement checked receiver ball vectors intersect intersection point time 
passing region passing region generalization passing player 
checked pass targeted players region 
teammates region testing algorithm applied 
clearing ball clearing ball means shoot ball free area 
implemented algorithm checks kick harder dribbling kick interpreted pass 
scoring scoring identi cation test checks ball moves direction goal power reach 
de nitions detecting complex actions proposed 
dribbling passing de ned called genuine kick sequences 
dribbling series kicks player seconds meters apart 
case passing players involved 
dribbling de ned continuous possession ball moving 
passing operationalized players having control ball time window cycles 
de nitions ne wants count number passes sucient interested tactics belong 
reason thesis actions separated passes players regions 
additionally target players target regions considered tactical aspects 
feature opponent modelling important discriminate passes back defenders passes forwards 
words observation intervals needed passing dribbling example di er time span player executes 
dribbling involves series consequent dashes kicks passing extreme view kick 
feature describes dribbling action match observations pass feature 
hand observations match pass feature weighted higher observations ball movement counted 
hand passing player chance change decision kick point view correct pass feature matched 
clear view correct point needs experimental evaluation 
feature declarative opponent modelling multi agent systems general observed action ambiguous interpretations matched feature counted match 
justi ed features de ned observable external behavior 
player intention ect observation 
analogy human players obvious humans explicitly observe internal states opponent judgement ected observations 
determining best matching opponent model mentioned section methods exist select model observations 
implemented evaluated 
apart bayes method counting methods speci ed binary parameters rst parameter vs determines matches counted situation 
case matching process aborts rst successful match 
case features may matched situation 
means match mismatch feature 
second parameter vs ratio triggers model highest number matches best ratio selected 
third parameter increasing vs normalized speci es number matches mismatches divided number features model 
way normalization done overcome variability number features cf 
section 
combining parameters results di erent selection methods evaluated 
additionally bayes classi er implemented tested 
classic bayesian update function jm models observation 
order calculate correctly values jm estimated 
done empirically analysing log les 
number matches various log les divided number time steps games 
jm estimated analogously exception value games model employed 
jm third component feature obtained 
bene tting classi cation course classi cation opponent improve team performance 
knowledge opponent behavior 
model counter strategy created manually 
built depending characteristics model 
illustrate examples listed model speci ed xed formation counter formation 
defense players pool forwards mid elders forwards located free spaces opponent defenders 
positions forwards variable forwards kept role game defenders assigned marking assignments 
model xed positions pass chains incorporates marking assignments positions kick rst series experiments evaluate counter strategies signi cantly better unadapted baseline strategy 
needs done order ensure manually created counter strategies fact appropriate counter measures 
table shows goal means counter baseline strategies 
table shows counter strategy means signi cantly higher baseline games 
signi cance determined tailed test 
value strict suce experiments supposed basis theory 
number games run teams varies 
games necessary achieve signi cance run 
noted counter strategy slightly better baseline 
feature declarative opponent modelling multi agent systems team strat 
mean basel strat 
mean virtual yow ai fc portugal table goal mean baseline counter strategy modelled teams 
denote number games 
due fact dirty dozen team run di erent strategies weak low level skills 
changes lesser impact teams weak low level skills adapted pass rules fail matter tactic experiment shows counter strategies play better opponent model baseline 
cover question counter strategies play better opponent models intended 
easily tested running cross tests number games necessary signi cant results large feasible team paired opponent model games recycled experiments 
random tests suce counter strategy intended humboldt play 
performed worse goal mean counter strategy performed better baseline 
case pairings 
taken account examines experiments 
avoided building strategy performs model bad models hard degrees freedom 
special care designing subsequent experiments 
important point evaluate classi cation new teams teams model created 
experiments new teams run 
evaluated classi cation new teams stable yields better counter strategies random selection counter strategies 
experiments experiment design section outline hypotheses tested questions answered experiments 
considerations result experiment designs 
conceptually rst experiments show matching behavior opponent team opponent models selecting corresponding counter strategy increases performance team 
di erent counting methods mentioned section compared 
rst step test selection methods determine identi cation process better selecting randomly 
test games run modelled teams correctly classi ed 
experiment called experiment 
experiment useful nd points mentioned models built watching games 
possible features model describe particular games singular events tactics 
sfl clang expressive describe single time steps game representing single situations occur games 
experiments show models general identi cation works di erent games 
possible behavior highly dependent speci opponent certain behaviors occur playing speci opponent 
experiments test identi cation constant di erent opponents 
practical reasons number necessary games low possible 
points design experiment follows opponent models om om built observing games team team plays games teams including 
log les analyzed counting method 
counting methods bayesian classi er combinations parameters described section 
classi cation om team identi cation counted correct 
feature declarative opponent modelling multi agent systems fare better random identi cations correct 
order test team bene models plays totally new opponent experiment executed 
tested classifying new opponent playing appropriate counter strategy yields better goal di erences playing baseline strategy 
baseline team dirty dozen dd binaries behavior speci cation competed robocup 
aspects considered avoided eventual performance boosts due fact counter strategies better baseline strategy 
possible mentioned section counter strategies play opponent models built 
counter strategies better baseline classifying opponent useless randomly selecting strategies fare better baseline 
additionally assumed created opponent models cover possible strategies new teams employ 
depending new teams selected results bad 
accomplish valid results new counter strategies compared baseline randomly selected counter strategies 
interesting point worth observing selection constancy new teams 
new teams classi ed opponent model classi cation vary 
especially interesting experimentally evaluated hints similar opponent models 
design experiment follows new teams baseline team dd opponent models counter strategies cs cs new team baseline goal di erence running games dd 
order log les ectively games classify new teams 
subsequently single classi cation om new teams play counter strategy cs result sets games new team exactly number instances baseline games set counter strategy games set 
set games created new team play randomly selected counter strategies 
assumed counter strategies equally probable new teams play number games counter strategies 
games form set 
team bene ts classifying opponents goal di erences set better set 
order test time performance fbdom experiment evaluate identi cation accuracy di erent 
best selection parameter combination norm tested games modelled teams yielding test instances 
window observations vary 
experimental results experiment games run recorded experiment 
games teams competed opponent model existed 
way test instances created teams game 
team pairings assigned randomly 
aforementioned counting methods tested test cases 
apart bayes classi er counting method speci ed boolean parameters see tables 
experiments revealed important parameter normalization ag 
methods positive normalization ag fared better negative ag 
obvious normalizing matches depending number features model advisable 
identi cation process models choose classi ying randomly perform correctly 
pointed counting methods performed better random 
bayesian classi er performed worse expect reading literature 
insigni cantly better doing random classi cation 
possible independence assumption different features bayes classi er violated 
certain features follow 
example feature speci es forward moves right wing followed feature describes forward shoots goal right side 
correlations explain bad performance 
unfortunately determining correlation features scope 
feature declarative opponent modelling multi agent systems count matches count matches win value win value ratio table parameters counting methods identi cation success 
normalization turned 
count matches count matches win value win value ratio table parameters counting methods identi cation success 
normalization turned 
bayes table identi cation accuracy bayes classi er 
hand con guration correct test cases methods correct respectively 
methods perform signi cantly better random 
obviously proper counting methods important feature declarative opponent modelling 
range accuracy huge determines mechanism succesful 
experiment shows opponent models general created observing games 
features obviously generalize di erent occasions 
possible extract represent features describe strategy constant di erent games 
additionally proven behavior depend heavily opponent 
identi cation accuracy constant di erent opponents 
observation important comes creating opponent models 
necessary base features games di erent opponents 
obviously strategies reveal independent opponent 
features proper way represent strategies 
experiment executing experiment planned realization counting methods performance lead idea combine top methods 
counting method costs little additional computation time 
intention deciding majority vote improve excellent accuracy 
turned combination norm norm ratio norm perform better norm 
due fact methods failed test cases selecting wrong model 
possible teams opponent models created similar 
case obvious counting methods problems di erentiating similar pairs 
cations top methods examined misclassi cations done methods altogether 
cases model selected team 
rst assumption rules model distinctive 
experiments tests distinctness run rules removed model common team 
remaining features indistinct 
majority features tendency teams 
consistent intuitive observation human teams similar modelled teams 
result possible create super class mentioned section collecting features team behaviors 
looks tactics similarities 
remains evaluated misclassi cations cases lead performance 
counter strategies lead better results baseline strategy 
experiment experiment new team played games baseline strategy dirty dozen team 
new teams successors feature declarative opponent modelling multi agent systems team exp mean basel 
mean fc virtual mainz rolling brains fc portugal table goal mean number games new teams baseline classi cation 
di erences signi cant tailed test depicted 
teams opponent models created virtual fc portugal 
examination statistics revealed teams general changed behavior playing style 
unfortunately experiments gathered global data evaluate teams research group changed years 
unclear successor teams classi ed opponent model predecessor 
teams selected experiments completely new 
table shows mean baseline games new teams vs baseline strategy means games selected counter strategy 
note cases number games di er sets 
due fact counter strategy games taken consideration crashing clients 
classi cation opponent counter strategy yields signi cantly better goal di erences new teams 
assumed suitable opponent model case considering opponent models expected handle possible new teams 
natural variance goal di erence certain teams great games run order get signi cant results 
variance outcome typical noisy domains 
interestingly cases deviation reduced counter strategy games see table 
obviously outcome stable easier predict games 
classi cation stable 
table shows team classi ed opponent model 
clear small num team var 
counter strat 
games var 
basel games fc virtual mainz rolling brains fc portugal table continuation previous table 
variances erences sets games 
team vw ath fcp fc virtual mainz rolling brains fc portugal table classi cation results 
ber classi cations di erent majority counted misclassi cations signal similarity strategies 
interesting hear domain expert opinion strategic similarity teams 
rows opponent model clear majority classi cations 
number di erent classi cations cases insigni cant bounds classi cations accuracy 
obviously opponent models selected 
experiment tendency team misclassi cations reasonable assume unbalanced classi cations artifact method re ect frequency strategies 
interestingly models built world champions fcp models selected frequently 
hint teams imitate behaviours successful teams 
signi cant better goal di erences classi ed counter feature declarative opponent modelling multi agent systems team random classif 
fc virtual mainz rolling brains fc portugal table erence mean games strategy selected randomly games classi ed strategy :10.1.1.112.9012
means classi ed strategies di er previous tables games run order get signi cant results 
strategies necessary condition proving method successful sucient condition 
case better general baseline strategy results section suggest 
case classi cation obsolete choice counter strategies yield better results baseline strategy 
test needed games run new teams strategy randomly selected 
means games means classi ed counter strategy optimal strategy classi cation selection runs 
outcome experiment non uniform see table 
cases signi cant di erence random selection selection classi cation 
teams yielded signi cant better results baseline vs counter strategy experiments result surprising 
cases selection classi cation performed signi cantly better random selection 
means cases suitable opponent model corresponding counter strategies selected 
means opponent models counter strategies generalize new teams making fbdom approach successful 
cases approach better random selection discussed 
possible explanation strategies involved teams similar related counter strategies perform similarly 
interestingly cases classi ed times see table length accuracy table accuracy selection mechanism di erent lengths observation window 
similar anyway human observers 
concluded counter strategies perform similarly contribute lack signi cant difference 
reason outcome counter strategies performed similar di erent defensive parts opponent models focussed behaviors 
team defense situation di erence counter strategies 
anyway cases achieve signi cant improvements counter strategy selected classi cation better 
due fact created opponent model counter strategy pairs assumed cover existing teams 
evidence new teams covered opponent models 
thought strong evidence quality fbdom cases signi cantly better baselines 
experiment order test time behaviour classi cation observation lengths tested 
complete robocup match lasts cycles 
order illustrate short observation window cycles noted teams wait cycles free kicks kick classi cation performs short observation windows 
cycles classi cation better random selection 
cycles classi cation correct cases 
accuracy gets better data feature declarative opponent modelling multi agent systems acquired 
means classi cation done ine analysing log les online 
renders idea applicable select general models game select detailed models data acquired 
chapter method representing opponent models multi agent systems introduced performance experimentally evaluated robocup domain 
claimed classifying opponent sucient focus distinct stable features processing complete behavior situations 
assumption set opponent models covers great amount existing opponent behaviors 
experiments showed identi cation accuracy high modelled teams claim supported features suited method describe opponent behaviors 
regarding coverage new teams experiments non uniform hint promising direction 
methodological diculties measure impact counter strategies 
perfect experimentation setting counter strategy perform opponent model bad models 
achieved restricted toy domains manually created opponents realistic conditions real teams 
obviously experiments created opponent models cover new teams 
cases selected counter strategy performed better baseline cases better random selection 
needed verify cause unsuccessful cases similarity opponent models small number models expected generalize new teams 
creating elaborate models contain information defensive situations depth analysis existing behaviors helpful 
feature declarative opponent modelling multi agent systems features form compact opponent models successfully generalized new teams related counter strategies ective previously unknown opponents 
revealed tactics identi ed certain typical features independent opponent 
opponent models easily created observing arbitrary agent opponent pairs 
identi ed features encountered di erent opponents 
fbdom restricted speci domain 
mas time new agents entered fbdom may help prepare agents handle new opponents base behaviour previously encountered ones 
performance agents expected appear fast experiments revealed results achieved short observation windows 
fbdom time method 
interesting matter contemplate risk misclassi cations short observation windows 
switching counter strategy low probability dangerous keeping baseline 
mentioned experiments counter strategies perform related opponent model bad 
case misclassi cation dangerous costly 
experiments showed opponent models covered new teams question opponent models necessary cover majority existing teams remains open 
potential aspects fbdom examine question 
aspects need implemented evaluated 
automatic extraction features clustering inductive learning outlined help create models knowledge cope majority new teams 
time certainly necessary create mentioned model hierarchy trees order handle large amount opponent models eciently 
modularization tactics promises interesting results improving separability opponent models help handling large amounts opponent models observations need matched certain modules existing features 
performance approach dependent quality manually created opponent models counter strategies 
order increase system autonomy creation automated 
step extract features games clustering inductive logic programming approaches arrange opponent models calculating frequencies di erent teams 
automatic creation opponent modules leaves assigning domain expert 
facilitate modularization strategies enforced counter strategies may combined existing modules 
aimed 
feature declarative opponent modelling multi agent systems list figures top tree describes play minimax algorithm assuming opponent plays optimally 
bottom tree describes game turned player max known min real suboptimal strategy 
evaluation values leaf nodes depict utility perfect evaluation function return 
min calculated values di er perfect values shown 
values parent nodes describe action player chooses 
plan library containing plans 
belief network representing agent plans american football 
nodes marked unobservable states nodes observable events 
playing eld simulated 
components fbdom system 
tree models 
feature declarative opponent modelling multi agent systems list tables goal mean baseline counter strategy modelled teams 
denote number games 
parameters counting methods identi cation success 
normalization turned 
parameters counting methods identi cation success 
normalization turned 
identi cation accuracy bayes classi er 
goal mean number games new teams baseline classi cation 
di erences signi cant tailed test depicted 
continuation previous table 
variances erences sets games 
classi cation results 
erence mean games strategy selected randomly games classi ed strategy 
means classi ed strategies di er previous tables games run order get signi cant results 
accuracy selection mechanism di erent lengths observation window 
feature declarative opponent modelling multi agent systems example model comments lines numbers feature models bayesian classi er 
am rand bis den advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt dc am rand bis den advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt dc der zum nach oder advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt pc der zum nach oder advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt pc am nach und sich mit anderen feature declarative opponent modelling multi agent systems advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt dc am nach und sich mit anderen advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt dc example model der oder mate nach sehr als das vor dem und und ist advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball ppos quad plus pt closestplayertoball pt pt pt plus pt closestplayertoball pt ppos opp quad plus pt closestplayertoball pt pt pt plus pt closestplayertoball pt feature declarative opponent modelling multi agent systems closestplayertoball bto quad pt pt pt pt wenn im dann auch durch mismatch advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt links vor dem tor zwei nach und nach advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball ppos opp arc pt ball closestplayertoball bto quad plus pt ball pt pt plus pt ball pt plus pt ball pt vor dem tor zwei nach links und nach advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball ppos opp arc pt ball closestplayertoball bto quad plus pt ball pt plus pt ball pt pt plus pt ball pt noch vor der vor ihm dann clear feature declarative opponent modelling multi agent systems links zur advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball ppos opp quad plus pt ball pt plus pt ball pt plus pt ball pt plus pt ball pt closestplayertoball bto quad pt pt pt pt noch vor der vor ihm dann clear zur advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball ppos opp quad plus pt ball pt plus pt ball pt plus pt ball pt plus pt ball pt closestplayertoball bto quad pt pt pt pt ball im der pass der nach feature declarative opponent modelling multi agent systems advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt ball im der pass der nach links advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt im zwischen den mate ab zwischen ball und tor advice bpos quad pt pt pt pt ppos quad plus mult pt ball pt pt pt pt plus mult pt ball pt pt ppos opp quad plus pt ball pt plus mult pt ball pt pt plus mult pt ball pt pt plus pt ball pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt der :10.1.1.112.9012
dann zu advice feature declarative opponent modelling multi agent systems bpos quad pt pt pt pt ppos quad plus pt ball pt plus pt ball pt plus pt ball pt plus pt ball pt ppos closestplayertoball arc pt ball closestplayertoball bto am mate die region dem advice bpos quad pt pt pt pt ppos quad plus mult pt ball pt pt pt pt plus mult pt ball pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt am mate die region dem advice bpos quad pt pt pt pt ppos quad plus mult pt ball pt pt pt pt plus mult pt ball pt pt ppos closestplayertoball arc pt ball closestplayertoball bto quad pt pt pt pt wenn der seite des oder dann zu mate im bereich des feature declarative opponent modelling multi agent systems advice bpos quad pt pt pt pt ppos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto wenn der seite des oder dann zu mate im bereich des advice bpos quad pt pt pt pt ppos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto von sfl advice bpos quad pt pt pt pt ppos closestplayertoball arc pt ball closestplayertoball bto reg quad pt pt pt pt zum ball quad plus pt ball pt plus pt ball pt plus pt ball pt plus pt ball pt quad plus pt ball pt plus pt ball pt plus pt ball pt plus pt ball pt quad pt pt pt pt feature declarative opponent modelling multi agent systems bibliography :10.1.1.112.9012
team coach description 
andreas birk silvia coradeschi satoshi editors robocup robot soccer world cup springer berlin 
appear 
anderson boyle corbett lewis 
cognitive modeling intelligent tutoring 
proceedings international conference arti cial intelligence law pages 
austin 
things words 
clarendon press oxford uk 
berliner 
search knowledge 
proceedings international joint conference arti cial intelligence pages 
christoph biermann ulrich fuchs 
der ball ist damit das die kann wie 

bolles cain 
recognizing locating partially visible objects local feature focus method 
international journal robotic research 
sean marco angelika philipp andreas nie andres collin claus timo ste ens 
dirty dozen team coach description 
andreas birk silvia coradeschi satoshi editors robocup robot soccer world cup springer berlin 
appear 
feature declarative opponent modelling multi agent systems calder smith mar 
modsaf behavior simulation control 
proceedings second conference computer generated forces behavioral representation july 
david carmel shaul markovitch 
incorporating opponent models adversary search 
proceedings thirteenth national conference arti cial intelligence aaai portland oregon 
aaai press 
david carmel shaul markovitch 
learning models intelligent agents 
proceedings thirteenth national conference arti cial intelligence aaai portland oregon 
aaai press 
charniak mcdermott 
articial intelligence 
addison wesley menlo park california 
mao chen fredrik heintz huang kostas johan noda oliver patrick riley timo ste ens yi wang xiang yin 
manual 
robocup federation 
sf net projects 
christian christian sebastian holger neumann schmidt visser hans georg 
virtual online coach change team formations 
technical report tzi center computing technologies university bremen 
editor gerhard weiss 
multiagent systems modern approach distributed arti cial intelligence 
mit press cambridge massachusetts 
robert goldman christopher geib christopher miller :10.1.1.21.4744
new model plan recognition 
proceedings conference uncertainty arti cial intelligence pages :10.1.1.112.9012
marcus huber edmund durfee michael wellman 
automated mapping plans plan recognition 
ramon lopez de mantaras david poole editors proceedings th conference uncertainty arti cial intelligence pages san francisco ca usa 
morgan kaufmann publishers 
stephen intille aaron bobick 
framework recognizing multi agent action visual evidence 
proceedings national conference arti cial intelligence aaai pages orlando florida 
aaai press 
jansen 
problematic positions speculative play 
marsland er editors computers chess cognition pages 
springer new york 
gal kaminka pynadath milind tambe 
monitoring deployed agent teams 
proceedings fifth international conference autonomous agents agents montreal canada 
kautz allen 
generalized plan recognition 
proceedings national conference arti cial intelligence aaai pages menlo park ca 
aaai press 
kitano tambe stone veloso coradeschi osawa matsubara noda asada 
robocup synthetic agent challenge 
international joint conference arti cial intelligence ijcai 
hiroaki kitano minoru asada kuniyoshi noda osawa 
robocup robot world cup initiative 
lewis johnson barbara hayes roth editors proceedings international conference autonomous agents agents pages new york 
acm press 
klinkenberg renz 
adaptive information ltering learning presence concept drifts 
learning text categorization pages 
aaai press menlo park california 
teuvo kohonen 
self organizing maps 
springer new york 
john laird allen newell paul rosenbloom 
soar architecture general intelligence 
arti cial intelligence 
feature declarative opponent modelling multi agent systems medin murphy 
versus induced category representations prototype exemplar information classi cation 
journal experimental psychology learning memory cognition 
andreas nie angelika andres collin marco philipp sean timo ste ens 
robocup agents project 
technical report institute cognitive science 
christos papadimitriou john tsitsiklis 
complexity markov decision processes 
mathematics operations research :10.1.1.112.9012
alex quilici qiang yang steven woods 
applying plan recognition algorithms program understanding 
automated software engineering international journal july 
anand rao 
means plan recognition theory reactive recognition 
pietro torasso jon doyle erik sandewall editors proceedings th international conference principles knowledge representation reasoning pages bonn germany 
luis paulo reis nuno lau 
fc portugal team description robocup simulation league champion 
peter stone tucker balch gerhard editors robocup robot soccer world cup iv 
springer berlin 
luis paulo reis nuno lau 
coach standard language coaching soccer team 
andreas birk silvia satoshi editors robocup robot soccer world cup springer berlin 
appear 
patrick riley 
classifying adversarial behaviors dynamic inaccessible multi agent environment 
technical report cmu cs carnegie mellon university 
patrick riley manuela veloso 
behavior classi cation adversarial environments 
lynne parker george bekey jacob editors distributed autonomous robotic systems pages 
springer verlag 
patrick riley manuela veloso 
planning distributed execution probabilistic opponent models 
proceedings ijcai workshop pro planning uncertainty incomplete information 
patrick riley manuela veloso 
recognizing probabilistic opponent movement models 
birk coradeschi editors robocup fifth robocup competitions conferences 
springer verlag berlin 
extended 
patrick riley manuela veloso gal kaminka 
team coaching adversarial domains 
onn shehory thomas vassileva john yen editors proceedings international joint conference autonomous agents multi agent aamas bologna italy 
appear 
claude shannon 
programming computer playing chess 
philosophical magazine 
peter stone patrick riley manuela veloso 
de ning ideal teammate opponent agent models 
proceedings seventeenth national conference arti cial intelligence aaai pages :10.1.1.112.9012
aaai press mit press 
gmytrasiewicz 
learning models agents uence diagrams 
proceedings internationale conference user modeling pages california 
tambe rosenbloom 
event tracking dynamic multiagent environment 
computational intelligence 
milind tambe paul rosenbloom 
architectures agents track agents multi agent worlds 
michael wooldridge org uller milind tambe editors proceedings ijcai workshop intelligent agents ii agent theories architectures languages pages heidelberg germany 
springer 
feature declarative opponent modelling multi agent systems tanaka ishii ian frank noda hitoshi matsubara 
statistical perspective robocup simulator league progress prospects 
robocup robot soccer world cup iii pages berlin 
springer verlag 
jose vidal edmund durfee 
learning nested agent models information economy 
journal experimental theoretical arti cial intelligence 
paul viola :10.1.1.112.9012
complex feature recognition bayesian approach learning recognize objects 
technical report aim ai lab massachusetts institute technology 
visser hans georg 
online learning analyze opponents behavior 
gal kaminka pedro lima rojas editors robocup robot soccer world cup vi 
springer berlin 
appear 
geo rey webb mark 
feature modelling methodology producing coherent consistent dynamically changing models agent competencies 
user modeling user adapted interaction 
perl 
behavior classi cation self organizing maps 
fourth international workshop robocup pages 
index abduction bayes belief networks clang clustering concept learning correspondence problem dfa distinctness dribbling evaluation function event tracking exemplar theory fbdom features complex feature modelling local formations game theory genetic algorithms hierarchical plans image recognition intelligent tutoring algorithm marking minimax algorithm model sharing modsaf mutex nested agent models online coach passing plan recognition player model rational agent self organizing maps sfl soar soccer server standard coach language steam strategy position trap position utility feature declarative opponent modelling multi agent systems ich dass ich die arbeit und keine anderen als die verwendet habe :10.1.1.112.9012
timo ste ens 
