src technical note december houdini annotation assistant esc java cormac flanagan rustan leino systems research center lytton avenue palo alto california www research compaq com src copyright compaq computer 
rights reserved static program checker performs modular checking check program module errors needing analyze entire program 
modular checking requires module accompanied annotations specify module 
help reduce cost writing specifications presents houdini annotation assistant modular checker esc java 
infer suitable esc java annotations program houdini generates large number candidate annotations uses esc java verify refute annotations 
describes design implementation preliminary evaluation houdini 
version appear proceedings formal methods europe fme 
compaq extended static checker java esc java tool finding defects java programs 
relies programmer supply annotations describing program properties method preconditions postconditions object invariants 
annotations allow esc java catch software defects method local analysis 
analysis esc java verifies annotations consistent program uses annotations verify primitive operation dereference operation raise run time exception happen example dereferenced pointer null 
static checkers follow modular approach include conventional type checkers rely type annotations guide type checking process rccjava static race condition checker relies annotations describing locking discipline 
limitation modular checking approach burden programmer supply annotations 
programmers grown accustomed writing type annotations reluctant provide additional annotations 
experience reluctance major obstacle adoption esc java 
annotation burden appears particularly pronounced faced daunting task applying esc java existing unannotated code base 
esc java useful catching defects legacy code developed houdini annotation assistant infers suitable esc java annotations unannotated program 
houdini reuses esc java subroutine inferring annotation 
essentially houdini conjectures large number possible candidate annotations uses esc java verify refute annotations 
describes design implementation preliminary evaluation houdini 
experience indicates approach capable inferring useful annotations 
annotations significantly reduce number false alarms produced esc java compared checking original unannotated program houdini reduces programmer time required statically catch defects unannotated programs 
presentation results proceeds follows 
section starts reviewing esc java 
section introduces basic architecture houdini 
section describes heuristics generating candidate annotations 
section describes houdini handles libraries 
section describes houdini user interface 
section describes experience houdini catch defects test programs totaling lines code 
houdini third generation annotation assistant section outlines prior approaches tried 
section describes related conclude section 
review esc java esc java tool finding common programming errors java programs 
takes input java program possibly annotated esc java light weight specifications produces output list warnings possible errors program 
static automatic nature reminiscent type checker 
hood esc java powered precise semantics engine automatic theorem prover 
esc java performs modular checking routine method constructor specification 
esc java checks implementation routine meets specification assuming routines called meet specifications 
specification comes user supplied annotations 
note esc java trace code callee callee code tool checked 
performing modular checking esc java applied class routine time needing entire program 
shows simple java class demonstrates typical esc java annotations 
class implements tuple non null values type object changed lifetime object 
constructor creates empty tuple put method sets element tuple value extending tuple size returning previous value tuple element 
esc java annotations specially formatted java comments 
character java comment sign esc java parses comment expects find legal annotations 
expressions occurring esc java annotations just side effect free java expression additions including quantified expressions special keywords functions 
example shows put method pre postconditions 
requires keyword declares precondition ensures keyword declares postcondition 
occurrences annotations refer method parameters refers field declared class 
postcondition uses special keyword result refer value returned method 
light weight specification specify aspects method behavior 
example shows declarations object invariants 
esc java checks established constructor maintained routines 
details described esc java user manual 
class tuple int invariant tuple 
constructor requires requires requires null ensures result null object put int object 
object invariant null invariant forall int null invariant examples typical esc java annotations invariant declarations uses universal quantification esc java implication operator 
esc java simpler contains degree unsoundness design 
fails detect genuine errors 
practice limitation negatively affect usefulness esc java 
properties attempts check undecidable worst case esc java incomplete may produce spurious warnings 
houdini architecture esc java works annotated programs catching defects legacy unannotated programs esc java arduous process 
possible run esc java unannotated program produces excessively large number false alarms 
alternatively manually insert appropriate annotations program time consuming task large programs 
preliminary experience esc java indicates programmer annotate existing unannotated program rate lines hour lower rate programmer unfamiliar code 
automate annotation process developing annotation assistant infers suitable esc java annotations legacy unannotated program 
houdini algorithm implements annotation assistant 
algorithm leverages esc java ability perform precise method local analysis 
input unannotated program output esc java warnings annotated version algorithm generate set candidate annotations insert repeat invoke esc java check remove refuted candidate annotations quiescence invoke esc java identify possible defects step algorithm generate finite set candidate annotations 
set generated program text heuristics annotations useful reasoning program behavior 
example common precondition manually annotated programs argument type non null candidate annotation set includes preconditions form 
useful heuristics guessing candidate annotations described section 
candidate annotations course incorrect 
identify incorrect annotations houdini algorithm invokes esc java annotated program 
invocation esc java invocation may produce kinds warnings 
kind concerns potential run time errors dereferencing null pointer 
warnings ignored houdini algorithm 
second kind warning concerns invalid annotations 
checking process esc java may discover property expressed annotation may hold particular program point example method precondition may hold call site method 
annotation assistant interprets warnings refuting incorrect guesses candidate annotation set removes refuted annotations program text 
removing annotation may cause subsequent annotations invalid check refute cycle iterates fixpoint reached 
process terminates fixpoint reached number remaining candidate annotations strictly decreased iteration 
resulting annotation set clearly subset candidate set valid respect esc java esc java refute annotations 
inferred annotation set fact maximal valid subset candidate set 
furthermore maximal subset unique 
proof properties efficient version basic algorithm refer interested reader companion 
note houdini algorithm works recursive methods 
candidate preconditions recursive method refined removing refuted preconditions resulting set preconditions holds call sites method recursive non recursive call sites 
check refute loop terminates final step houdini algorithm run esc java time identify potential run time errors annotated program 
warnings user starting point identifying defects program 
generating candidate annotation set usefulness inferred annotations depends crucially initial candidate annotation set 
ideally candidate set include annotations useful reasoning program behavior 
candidate set large increase running time algorithm 
inspection variety hand annotated programs experience esc java houdini developed heuristics generating candidate annotations 
field declared program guess candidate invariants type candidate invariants integral type invariant cmp expr type invariant null array type invariant null invariant invariant forall int expr null invariant length cmp expr boolean invariant false invariant true candidate invariants intended help verify absence bounds errors 
integral field guess inequalities relating integral fields constants 
comparison operator cmp ranges operators expr integral field declared earlier class interesting constant 
interesting constants include numbers constant dimensions array allocation expressions new int 
field array type guess number inequalities regarding length 
inequalities useful include completeness 
guessed invariants mutually inconsistent 
example class declares integral field guess invariants including invariant invariant inconsistent guesses cause problem 
checking constructor class esc java refute invariants constructed instance simultaneously satisfy invariants 
guess candidates invariants help verify absence null dereference errors 
field type guess null 
field array type addition guessing invariant null guess invariant states entry array null guess invariant entries expr field interesting constant null 
property useful reasoning behavior stack data structures implemented arrays 
generate candidate preconditions postconditions similar manner routine declared program 
candidate preconditions may include inequalities relating argument variables relating argument variable field declared class 
candidate postconditions may relate result variable result argument variables fields 
addition generate candidate postcondition ensures fresh result states result method newly allocated object alias previously existing object 
aid identifying dead code generate candidate annotation requires false routine program 
requires false annotation indicates corresponding routine called 
correctness reasons require applicable candidate annotations hold program initial state 
program entry point public static void main string args generate precondition ensured java run time system requires args dealing libraries far described houdini system infers annotations analysis entire program 
program may linked library libraries analyze source code library size library analysis impractical 
library question includes esc java annotations specify interface willing write interface specification straightforward adapt houdini algorithm analyze annotate remainder program respect specification 
cases size complexity library writing interface specification quite tedious 
able infer annotations program absence esc java specifications libraries program 
extend houdini analyze program respect guessed specifications libraries 
main strategies guessing library specifications 
strategy pessimistic assumptions example pointers returned library methods may null 
pointers null pessimistic specifications cause houdini produce large number false alarms rest program approach cost effective static debugging 
esc java provides pessimistic assumptions default absence library annotations 
alternative strategy optimistic assumptions behavior libraries example pointers returned library methods non null 
pointers may null assumption unsound may cause houdini certain run time errors 
library clients houdini detect run time errors optimistic specifications lead fewer false alarms appears cost effective strategy guessing library specifications 
libraries need careful guess contradictory annotations 
illustrate idea suppose generated contradictory postconditions ensures result ensures result library method program override 
implementation library method checked guessed annotations refuted 
esc java infer method returns check code call method 
guess consistent postconditions library method result type optimistic postconditions integral type ensures result type ensures result null array type ensures result null ensures result guess optimistic preconditions invariants similar manner 
modified houdini algorithm dealing libraries follows input unannotated program set libraries specifications set libraries specifications output esc java warnings annotated version algorithm generate insert candidate annotations generate insert optimistic annotations repeat invoke esc java check respect remove refuted candidate annotations remove refuted optimistic annotations quiescence invoke esc java identify possible defects respect user interface catch defects houdini user starts inspecting houdini output includes set warnings esc java produces annotated version program 
esc java warning routine points problem routine implementation specification warnings produced houdini caused part program 
example suppose warnings points possible null dereference method char string return user reaction intend called non null arguments 
esc java user add precondition null suppresses spurious warning 
precondition checked call sites 
houdini user ask didn houdini infer precondition 
experience looking houdini output constantly asked questions 
developed simple user interface help answer questions 
user interface generates collection html pages 
root page collection presents summary kinds warnings final call esc java produces followed actual list warning messages 
warning message contains hyperlink source view code location offending program line 
source code view shown user interface displays candidate annotations guessed houdini 
refuted annotation grayed screen shot showing source view houdini user interface 
declaring parameter parent esc java modifier non null serves alternate way writing precondition requires parent null 
hyperlinks source line esc java issued warning refuted annotation 
insert warning messages code source view 
example houdini user look preconditions houdini guessed initially 
include precondition null clicking refuted annotation bring user call site far esc java tell actual parameter may null 
may lead user understand null dereference warning real problem program spurious warning may just number similar steps required get source problem 
surprisingly experience indicates presenting refuted annotations causes thereof important aspect user interface 
warning java html exception type checks warnings checks warnings checks warnings nullpointerexception 

library annotations table breakdown checks performed esc java warnings produced esc java applying houdini 
experience applied houdini tens thousands lines unannotated program code 
report programs subjected test runs various versions tool 
java html line program turns java programs html pages line program performs statistical samplings trace files generated web crawler mercator line graphical user interface web email program proprietary line program 
programs tested cases extensively houdini applied 
table shows statistics programs 
program table shows columns 
columns indicates number checks performed esc java verify various correctness properties 
correctness properties include proving various run time exceptions occur libraries manner consistent manually written specifications 
checking nullpointerexception raised far common check 
row counts array dereference separate checks lower bound upper bound 
checks arise type cast expressions commonly container classes 
raised case integer division zero 
raised attempt allocate array negative size 
need checks comes java variant array subtyping rule 
libraries checking programs contained manually inserted light weight esc java specifications 
library annotations row shows number checks program arising specifications 
second third columns program table show number checks esc java able statically verify 
check corresponds warning produced esc java 
second column number warnings produced unannotated program third column number warnings produced running houdini infer annotations program 
java html lucky draw non cast warnings reported indicate real errors source code 
example program crash line input exceeds characters system call file list returns null see 
houdini currently support guessing annotations needed verify cast checks 
reason houdini uses command line option esc java suppress cast warnings cost effective users investigate warnings kinds 
warnings produced led find real errors 
part class borrowed web crawler mercator method int read byte java io inputstream supposed read characters array returning input stream file returning number characters read 
mercator subclass inputstream erroneously returned length stream file 
houdini issued warnings pointing places assumed input particular format 
example situations assumed line input characters long consist characters interpreted decimal number 
warnings pointing considered spurious intended formed input 
inspected dozen warnings 
pointed compelled author code code changes 
technically argue warning lib 
anns 
optimistic lib 
anns 
exception type checks warnings checks warnings nullpointerexception 

library annotations table breakdown checks performed esc java program warnings produced esc java applying houdini pessimistic optimistic library annotations 
errors code overly brittle 
author changed code guard possible failures 
table shows statistics program 
libraries analyzed program strategies pessimistic optimistic library assumptions 
strategies table shows number checks esc java performs verify various correctness properties number checks esc java able statically verify running houdini 
table shows optimistic library annotations significantly reduce number null dereference bounds warnings houdini produces 
non cast warnings inspected revealed real errors code 
programs measure user time required inspect warnings case time measured hours inspect warnings 
time inspection proceeded higher pace partly getting familiar tool output partly repeated spurious warnings 
experience suggests houdini user inspect program errors rate upwards lines hour 
despite precision esc java houdini produces false alarms 
major cause false alarms houdini may fail guess right annotations program 
particular houdini guess disjunctions postcondition method put ensures result null cause false alarms houdini incompleteness esc java comprising incompleteness underlying theorem prover incompleteness esc java axiomatization java operators example semantics bitwise completely axiomatized incompleteness esc java light weight annotation language 
esc java user know insert nowarn assume axiom annotations incompleteness see esc java user manual houdini infer annotations 
inspecting serious warning user normally fix error program 
user determines warning spurious prudent course action convey houdini missing pieces information 
example cause spurious warning houdini didn guess annotation possibly disjunction shown user manually insert missing annotation program 
experienced houdini users manually insert esc java annotations program just esc java users 
houdini users insert fewer annotations 
predict leaving small number annotations code acceptable programmers 
manually inserted annotations give runs houdini information program may cause houdini generate fewer spurious warnings 
experienced users rerun houdini adding manual annotations 
iterative process quite cost effective small manual interventions prevent resulted cascade spurious refutations 
consequence iterative process houdini running time long 
houdini static debuggers competes practice software testing reasonable dozen iterations may done course couple weeks 
means run houdini fast complete overnight say finishing hours 
version houdini reported meet overnight challenge running time line program hours 
remain optimistic reasons 
preliminary experiments algorithmic improvements promising 
second measurements performed houdini iterations suggest operations houdini parallelizable 
third built prototype dynamic creates instrumented version program run records candidate annotations violated refuted execution 
significantly reduces number candidate annotations left refuted esc java 
type preconditions postconditions invariants total annotation guessed valid guessed valid guessed valid guessed valid expr expr expr expr expr expr null forall 
false true fresh result false exact type total table numbers candidate annotations generated program heuristics section percentages annotations valid 
run houdini may take hours important aspect houdini usability restartable 
system periodically writes snapshot current state disk particular run abruptly terminated example power failure restarted snapshot 
give measurements provide preliminary idea effectiveness various heuristics described section generating candidate annotations 
table shows number candidate annotations generated program heuristics percentage annotations valid 
table count valid annotations includes annotations hold java programs example length annotations subsumed annotations example subsumed remains avoid valid redundant annotations 
annotation assistants design houdini inspired experience esc java annotation assistants developed 
annotations inferred houdini significantly useful annotations inferred earlier annotation assistants 
annotation assistant starts unannotated program iteratively added annotations 
support annotation assistant esc java modified output suggestion warning possible 
example warning points dereference formal parameter changed routine body checked suggestion add precondition null 
suggestion property suggestion rerunning esc java warning suppressed new warnings may generated 
annotation assistant iteratively runs esc java follows suggestions esc java produces suggestions 
suggestions annotation assistant severe limitations 
hard produce suggestions 
new heuristics increasingly complicated requirement suggesting measures sure suppress warning heuristics suggestion frequently side conditions met 
formal parameter assigned body 
second suggested annotations correct 
cascading effects incorrect annotations limit effectiveness annotation assistant 
second annotation assistant uses program set analysis identify variables fields null inserts corresponding annotations program 
annotations useful verifying dereference operations 
inferred annotations include numeric inequalities necessary verifying absence array bounds errors include properties invariant forall int expr null necessary checking stack data structures implemented arrays 
annotation assistant houdini uses esc java powerful subroutine 
second annotation assistant houdini infers valid annotations 
furthermore houdini iterative check refute machinery depend particular annotations contained candidate set houdini provides flexible architecture inferring kinds annotations 
advantage houdini algorithm generality closely dependent underlying checker infer annotations variety modular static checkers 
successfully ported houdini second checker race condition checker java 
checker extends java type system additional checks verify absence race conditions 
checker relies additional type annotations describe aspects locking discipline example protecting lock field 
adapting houdini algorithm guess type annotations straightforward esc java annotations inferred system useful 
related predicate abstraction technique analyzing infinite state system set predicates state space system 
technique finds boolean combination predicates holds reachable states holds minimum unreachable states 
houdini algorithm viewed variant predicate abstraction candidate annotation corresponds predicate 
interestingly houdini algorithm consider arbitrary boolean formulae predicates considers conjunctions predicates 
restriction means houdini infer disjunctions implications candidate predicates 
example predicates result null houdini infer property result null restriction reduces maximum number iterations algorithm exponential linear number predicates increases number false alarms produced system 
interpretation standard framework developing describing program analyses 
view houdini algorithm interpretation state space power set lattice candidate annotations checker compute transition relation 
usual choice state space controls conservative approximations performed analysis 
approach easy tune approximations choosing set candidate annotations appropriately provided set remains finite annotations understood checker 
interesting aspect approach checker arbitrary techniques example weakest preconditions case esc java performing method local analysis 
local analysis techniques allow checker reason sets intermediate states precisely characterized state space houdini algorithm may yield precise results conventional interpretation exclusively uses states represent sets concrete states 
prefix static programming tool warns possible errors code 
annotations involved prefix advantage 
find presence annotations houdini output including refuted annotations helpful inspecting tool output 
annotations provide general convenient way users supply tool missing facts 
technology underlying prefix different precise semantics engine automatic theorem prover underly esc java differences bigger need 
daikon system uses empirical approach find probable invariants 
invariants creating instrumented version program records trace intermediate program states running instrumented program test suite analyzing generated traces line determine properties hold runs 
suitably complete test suite inferred properties true program invariants 
describes technique building annotation assistant modular static checker 
annotation assistant reuses checker subroutine works guessing large number candidate annotations checker verify refute candidate annotation 
technique develop annotation assistant called houdini modular program checker esc java 
houdini capable inferring large number useful annotations significantly reduce number false alarms produced esc java compared checking unannotated program 
inferred annotations reduce programmer time required check existing unannotated program defects 
experience natural strategy houdini maintain code base manually inserted annotations houdini infer rely houdini infer additional annotations code needs checked 
expect houdini considered users static checker just annotation assistant underlying checker esc java 
number issues remain including refining heuristics generation candidate annotations improving performance houdini significant progress direction enhancing user interface 
system developed date proven capable catching defects real world programs 
grateful colleagues contributed various ways houdini project yuan yu suggested helped develop dynamic 
helped inspect houdini output 
steve freund ported houdini rccjava 
raymie stata helped create earlier annotation assistant set analysis 
jim saxe helped think get underlying theorem prover houdini demands 
lawrence markosian dr johnson reasoning mountain view ca inspected houdini output 
roy levin suggested houdini name great esc wizard 
william bush jonathan pincus david 
static analyzer finding dynamic programming errors 
software practice experience 
patrick cousot radhia cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
conference record fourth annual acm symposium principles programming languages pages january 
michael ernst adam william griswold david notkin 
quickly detecting relevant program invariants 
proceedings nd international conference software engineering icse limerick ireland june 
extended static checking home page compaq systems research center 
web research compaq com src esc 
cormac flanagan 
effective static debugging componential set analysis 
phd thesis rice university houston texas may 
cormac flanagan steven freund 
type race detection java 
proceedings acm sigplan conference programming design implementation pldi pages 
cormac flanagan rajeev joshi rustan leino 
annotation inference modular checkers 
information processing letters 
appear 
cormac flanagan james saxe 
avoiding exponential explosion generating compact verification conditions 
conference record th annual acm symposium principles programming languages 
acm january 
appear 
graf saidi 
construction state graphs pvs 
grumberg editor cav computer aided verification lecture notes computer science pages 
springer verlag 
nevin heintze 
set analysis ml programs 
proceedings acm conference lisp functional programming pages 
allan heydon marc najork 
mercator scalable extensible web crawler 
world wide web december 
java html compaq systems research center 
web research 
compaq com src software 
rustan leino greg nelson james saxe 
esc java user manual 
technical note compaq systems research center october 
rustan leino james saxe raymie stata 
checking java programs guarded commands 
bart jacobs gary leavens peter muller arnd poetzsch heffter editors formal techniques java programs technical report 
hagen may 
available technical note compaq systems research center research 
compaq com src publications 
email system compaq systems research center 
web research compaq com src 

