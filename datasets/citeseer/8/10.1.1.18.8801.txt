prometheus methodology developing intelligent agents lin padgham cs rmit edu au michael cs rmit edu au rmit university melbourne australia categories subject descriptors software engineering design tools techniques software engineering requirements specifications method artificial intelligence distributed artificial intelligence intelligent agents multiagent systems 
agents gaining acceptance technology growing need practical methods developing agent applications 
presents prometheus methodology developing intelligent agent systems 
methodology developed years collaboration agent oriented software 
goal develop design process associated deliverables taught industry practitioners undergraduate students background agents develop intelligent agent systems 
claim prometheus developed sufficient detail non expert 
evidence stage anecdotal indications prometheus usable non experts find useful 
prometheus taught undergraduate class third year students successfully designed implemented agent systems jack 
second year student summer vacation description methodology description agent application area holonic manufacturing 
intentionally limited support student able design implement agent system perform holonic manufacturing simulator manufacturing cell 
student projects clear existence methodology enormous help thinking deciding design issues conveying design decisions 
unfortunately space limitations preclude detailed comparison existing methodologies 
simply note prometheus differs existing methodologies focuses development intelligent agents black boxes supports software engineering activities requirements specification detailed design implementation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
aamas july bologna italy 
copyright acm 
provides detailed processes just artifacts notations evolved practical industrial pedagogical experience people developers methodology supports automatable cross checking hierarchical structuring mechanisms iterative process 
properties unique isolation combination best knowledge unique 
believe properties essential practical methodology usable non experts build real systems accordingly design prometheus guided properties 
prometheus methodology consists phases see diagram 
system specification phase focuses identifying basic functionalities system inputs percepts outputs actions important shared data sources 
architectural design phase uses outputs previous phase determine agents system contain interact 
detailed design phase looks internals agent accomplish tasks system 
attempting cover activities artifacts methodology shall focus part architectural design phase agents system identified 

identifying agents major decision architectural design agents exist 
preceding phase system specification functionalities system identified 
agent viewed combination functionalities determine functionalities called roles methodologies things agents exist looking combinations functionalities 
combinations evaluated traditional software engineering criteria coherence coupling 
assess coupling derive possible groupings data coupling diagram 
data coupling diagram see example shows functionalities rounded boxes data ovals links 
arrow functionality data indicates functionality produces data diagram assists identifying functionalities interact functionalities share data suggest possible groupings functionalities agents 
identify reasons grouping functionalities 
example functionalities data indication grouping significant interaction 
reasons groupings may clearly unrelated functionality existence different hardware platforms 
diagram see stock manager functionality price functionality strongly coupled group single agent type 
hand book finder functionality uses stock price databases related user interface functionalities sales transaction grouped 
group user information functionality want sales assistant agent sales transaction book finder functionalities active user single agent system stores user bank information order evaluate potential grouping coupling agent acquaintance diagram 
diagram simply links agent agent interacts 
design fewer linkages highly coupled preferable 

discussion briefly described step prometheus methodology 
methodology years taught industry workshops australian ai conference students rmit university 
system needs able 
specified natural language description interface actions percepts interactions functionalities data produced 
example taken online book store application note include data transient information passed messages events persistent data stored 
furthermore single agent probably security reasons different hardware platform 
feedback received indicates provides substantial guidance process developing design communicating design group 
advantages methodology number places automated tools consistency checking various artifacts design process 
example input output events agent system overview diagram agent overview diagram 
agent oriented software pty 
constructed support tool methodology allows design diagrams drawn generates corresponding skeleton code jack 
includes clearer integration goals extension social agent concepts teams roles investigating design artifacts debugging 
process writing book design intelligent agent systems 
practical design agent systems aimed industrial practitioners undergraduate students 
acknowledge support agent oriented software pty 
australian research council arc 
james harland jamie comments drafts 

hodgson lucas 
jack intelligent agents components intelligent agents java 
technical report agent oriented software pty 
melbourne australia 
wood 
multiagent systems engineering 
international journal software engineering knowledge engineering 
garijo gonzalez 
survey agent oriented methodologies 
muller singh rao editors proceedings th international workshop intelligent agents agent theories architectures languages atal volume pages 
springer verlag heidelberg germany 
kinny georgeff rao 
methodology modelling technique systems bdi agents 
van hoe editor seventh european workshop modelling autonomous agents multi agent world 
lind 
development method multiagent systems 
cybernetics systems proceedings th european meeting cybernetics systems research symposium agent theory agent implementation 
mylopoulos castro 
tropos agent oriented information systems engineering 
second international bi conference workshop agent oriented information systems june 
odell parunak bauer 
extending uml agents 
proceedings agent oriented information systems workshop th national conference artificial intelligence 
padgham 
debugging multi agent systems design artifacts case interaction protocols 
proceedings autonomous agents multi agent systems aamas 
wooldridge jennings kinny 
gaia methodology agent oriented analysis design 
autonomous agents multi agent systems 
