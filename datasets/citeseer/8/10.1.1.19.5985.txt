hardness uniform hypergraph coloring irit oded regev cli ord smyth april prove coloring uniform colorable hypergraph constant number colors np hard 
best known algorithm colors graph colors 
result immediately implies constants coloring uniform colorable hypergraph colors np hard leaving completely open graph case 
rst obtain hardness result approximately coloring uniform hypergraph colorable constant number colors 
result shown discussed inherent di erence case 
proof presents new connection long code kneser graph relies high chromatic numbers kneser graph schrijver graph 
prove certain maximization variant kneser conjecture coloring kneser graph fewer colors chromatic number non monochromatic edges 
background hypergraph vertices edges uniform edge exactly vertices 
legal coloring hypergraph function edge monochromatic 
chromatic number minimal coloring exists 
past decade signi cant progress pcp theorem understanding complexity combinatorial optimization problems 
known example hard approximate chromatic number graph factor holds hypergraphs see 
numerous cases hardness lower bound matches algorithmic upper bound constant gap separates 
contrast problem approximate coloring input hypergraph graph known colorable colors target color colors possible retains largest gap lower upper bounds 
institute advanced study princeton nj 
mail ias edu 
research supported nsf ccr 
best algorithms problems require polynomial number colors example best approximate coloring algorithm colorable uniform hypergraphs requires colors best coloring algorithm colorable graphs requires colors 
lower bound side known 
graphs best hardness result states colors color colorable graph np hard 
signi cant step prove coloring colorable graph colors np hard 
property colorable studied combinatorics referred property see 
prior hardness approximation result known uniform hypergraphs fact wasn known np hard color uniform colorable hypergraph colors 
uniform hypergraphs upwards guruswami astad sudan able show separation showed np hard color colorable uniform hypergraph constant number colors result immediately extends 
inherent di erence raised considered evidence case harder understand 
di erence corresponding maximization problem called set splitting problem coloring uniform hypergraph maximizing number non monochromatic hyperedges 
problem exhibits di erent behavior 
tight hardness result astad trivially matched random assignment 
best approximation algorithms semi de nite programming constant gap best gadget constructed hardness results see 
guruswami astad sudan showed np dt ime log log polynomial time algorithm coloring colorable uniform hypergraph log log log log log colors constant 
show np dt ime poly log polynomial time algorithm coloring colorable uniform hypergraph log log colors 
results extend 
result able prove di erent techniques relying similar layered pcp np hard color colorable uniform hypergraph constant number colors 
result contained construction extra nice property bad instances contain small independent set hypergraph construction case 
technique general structure hardness results main components 
takes version pcp theorem usually application parallel repetition theorem applies transformations construct pcp system certain desired properties 
applies version long code tailored speci problem hardness studied 
trick obtain correct interplay speci pcp properties long code variant capture hardness problem 
proof correctness divides parts completeness soundness 
proves completeness initial pcp system instance resulting construction instance case colorable uniform hypergraph generally follows construction straightforward manner 
proves soundness initial instance instance resulting construction instance case resulting graph high chromatic number 
proof soundness heart proof really lies integrates components construction 
applies sort list decoding long code case means translate arbitrary coloring long code colors short list possible decoded values 
exploits special pcp properties ensure global consistency decoded values 
follows describe components construction combined 
layered pcp 
focus pcp systems tests look variables corresponding prover interactive proofs 
general pcp systems divided type variables types variables pcp systems rst kind tests look variables value allows values phenomenon go application long code encodings variables appear falsely consistent 
pcp systems second kind parallel repetition theorem test look large variable value completely determines small variable tests essentially projection tests 
tests su er false consistency problem inherent bipartite ness problem coloring setting coloring variables red variables orange legal coloring regardless initial pcp system satis able 
take second approach overcome bipartite ness problem utilizing layered pcp constructed 
essentially extends bipartite nature raz pcp types variables 
number parts increases number colors required color unsatis able instance increases 
long code kneser graph 
long code domain powerful tool numerous hardness approximation results 
adopt completely combinatorial viewpoint discover new connection long code known combinatorial object called kneser graph 
long code domain consists possible subsets long code graph explicitly de ned graph jrj vertices subsets edges connect disjoint subsets 
consider encoding element color subsets containing red rest orange 
coloring corresponds legal encoding long code 
easy check long code graph coloring red monochromatic edges orange ones particular coloring 
hypergraph coloring corresponds legal coloring 
prove interesting property long code graph 
coloring vertices constant number colors contains special color non negligible fraction vertices colors large disjoint subsets 
property enables list decoding coloring manner ensures global consistency 
established proving maximization variant kneser conjecture showing chromatic number colors color original standard de nition long code subset viewed boolean function long code collection possible boolean functions name 
kneser graph leaves monochromatic edges 
properties kneser graph schrijver graph appear subgraphs long code graph 
combining components 
vertices constructed uniform hypergraph partitioned blocks vertices roughly vertices long code graph 
hyperedge contain ends edge long code graph 
guarantees global coloring block legal encoding contain red monochromatic hyperedges 
hyperedge contain additional vertex block ensure inter block consistency intuitively requirement having non red monochromatic hyperedges 
soundness proof need translate legal coloring colors hypergraph block short list elements supposedly encoded coloring 
main diculty arises need ensuring consistency decoded values distinct blocks 
diculty resolved maximization variant kneser conjecture mentioned 
long code kneser graph long code graph domain explicitly de ned graph jrj vertices subsets edges connect disjoint subsets 
analyze colorings graph constant number colors 
discover induced subgraph long code graph obtained vertices correspond subsets size jrj constant kneser graph chromatic number studied 
section de ne kneser graph describe important properties 
kneser graph kg set 
def fs jsj sg vertex set vertices adjacent 
words vertex corresponds set vertices adjacent corresponding sets disjoint 
mainly interested case smaller constant 
graphs important property chromatic number high large independent sets exist 
discussion kneser graphs combinatorial problems see excellent book matou sek 
exists simple way color graph coloring 
kneser conjectured way color graph colors kg 
rst prove conjecture lov asz 
proofs extension known see latest simplest greene 
de ne schrijver graph sg permutation say subset stable contain adjacent elements modulo denote number stable sets stab notice independent 
graph sg contains vertex stable subset vertices adjacent corresponding sets disjoint 
clearly sg induced subgraph kg interestingly chromatic schrijver graph sg 
simple bound number vertices schrijver graph claim stab proof consider stable set permutation notice set uniquely de nes claim follows fact set elements 
main lemma section lemma coloring kg colors exists monochromatic edge color stab fraction vertices 
proof fix coloring kg colors 
permutation induced subgraph sg contains monochromatic edge sg 
exists color say red schrijver graphs contain red monochromatic edge 
consider distribution vertices kg choose random permutation random vertex sg probability choosing red vertex 
stab rst choose schrijver graph contains red monochromatic edge points monochromatic edge 
sg contains number vertices vertex kg contained number sg distribution equivalent uniform distribution vertices kg fraction red vertices stab corollary coloring kg colors exists color say red 
subset red vertices contains fraction vertices graph 

red vertices 
layered pcp layered pcp construction 
completeness describe construction sketch proof np hardness 
layered pcp sets variables call layers denote range variables denoted set tests ij test ij depends exactly variables denote test test exists 
tests ij projections assignment exactly assignment test accepts 
theorem parameters exists reduction np hard problem size problem distinguishing cases layered pcp ul variables range size ul exists assignment satis es tests tests ij satis ed assignment 
constant layers sets jx nd sets number tests tests layers proof sketch parallel repetition lemma applied parameter sat 
provides reduction np hard problem size pcp sets variables range size range rz size number variables tests variable variable projections rz assignment exists exactly consistent assignment problem decide exists assignment satis es tests assignment satis es fraction tests 
property resulting pcp uniformity distribution created uniformly variable uniformly choosing variables test uniform distribution construct follows 
variables layer elements set tuples rst elements variables elements variables 
variables layer assignments set corresponding assignment variable tuple 
easy see jr ul total number variables ul de ne tests ij follows 
test exists variable variable contain variables rst elements tuples 
test formally ij fi jg fi jg promised tests projections 
assignment de ne consistent assignment fi jg 
completeness follows easily completeness assume assignment rz satis es tests 
assignment de ned satisfying assignment 
soundness part assume exist layers assignment satis es tests ij partition classes variables class identical possibly coordinate variables partitioned coordinate tests ij satis ed case exist class partition class partition exist tests fraction satis ed tests de ne assignment notice correspondence tests tests chosen classes 
test satis ed test satis ed 
assignment satis es tests 
prove second part theorem take layers sets jx consider random walk uniformly chosen variable proceeding variable chosen uniformly variables test 
random walk continues similar way variable chosen uniformly variables test variable denote indicator variable event random walk hits variable layer uniformity follows inclusion exclusion principle get max implies max fix consider shorter random walk random variable proceeding layer hitting layer uniform probability taken random walks notice mapping set random walks set tests hypergraph construction theorem main theorem constant np hard color colorable uniform hypergraph colors 
proof pcp instance layers described theorem parameters chosen 
construction uniform hypergraph 
vertices 
variable layer construct block vertices essentially variant long code range block contains vertex subset size def jr altogether section slightly abuse notation writing vertex subset represents 
hyperedges 
construct hyperedges blocks exists test 
put hyperedge summation ffv ug ug condition terms section hyperedge contain ends edge long code graph guarantees coloring legal encoding assignment colors subsets containing red rest orange automatically contains red monochromatic hyperedges 
second condition guarantees consistency encodings blocks way 
intuitively colored orange assuming adversary colors block legal encoding encoded assignment lie outside 
set containing image set colored red 
accurate analysis soundness proof 
note hyperedges layers pcp directed sense vertices block bigger variable vertex block smaller variable 
interestingly easy see construction large independent sets matter underlying pcp example choose block vertices contain certain assignment say rst 
possible construct independent sets colors cover hypergraph leaving sub constant part 
brie sketch example originally appeared 
consider subset size jr rst independent set contains vertices intersection size jt similarly second independent set contains vertices intersection jt independent sets vertices rst independent set intersect similarly second independent set 
vertices independent sets 
informally true size intersection vertex standard deviation jr 
lemma completeness satis able colorable 
proof satisfying assignment maps variable assignment tests satis ed 
block color vertices contain assignment red rest orange 
red monochromatic edges red vertices inside block non empty intersection 
fv ug hyperedge choose 
assume orange 
exists hyperedge disjoint 
implies containment fv ug hyperedge 
satisfying assignment red 
lemma soundness colorable satis able 
proof fix coloring graph rst step proof list decode coloring nd list candidate assignments variable 
variable consider vertices inside block 
map vertices kneser graph kg jr jr corollary nd color double property 
subset vertices colored contains jr fraction vertices 

vertices 
set 
list decoded values 
notice contains assignments 
say variable colored denote set vertices colored step proof establish consistency 
de ne color layer color variables colored 
notice variables layer colored color layer 
nd layers colored color say red 
properties pcp set red layers red variables layer conclude exist layers tests tests red variables 
denote red variables red variables de ne assignment variables tests satis ed 
variable choose random assignment set 
variable choose assignment jfx gj assignment contained largest number projections 
order prove assignment satis es fraction tests need simple claim claim collection sets size element contained sets 
km disjoint sets collection 
proof prove induction disjoint sets collection 
claim holds trivially consider sets intersect element contained sets number sets including removing sets get induction hypothesis collection contains disjoint sets 
conclude proof adding disjoint sets 
consider variable variable test exists 
vertices vertices colored red hyperedges 
vertices contain 
consider family projections variables test exists 
denote number disjoint sets family 
claim provides upper bound claim disjoint 
ff log log jf absolute constant 
proof consider probability distribution element chosen set probability probability jf de ne 
sets appear equal probability jf stirling formula get 
equals 
exp jf exp 
logarithms get log log jf constant 
implies claim 
claim family log ju jv log jr 
get log jr log jr log jr ul 
claim implies exists assignment contained fraction ul projections 
randomly choose possible assignments expected fraction tests satis ed ul 
recalling tests represent tests layers get ul tests layers satis ed 
choosing big constant satis able 
theorem assuming np dt ime poly log polynomial time algorithm colors colorable uniform hypergraph log log colors number vertices hypergraph 
proof note previous proof take log log constant size sat instance reduction begins 
parameters chose 
size hypergraph construct ul ul poly log proof completed noting log log log poly log log log 
discussion construction relies properties kneser graph strong way 
knowledge rst time hardness coloring shown directly size maximal independent set 
believe kneser graph useful understanding hardness approximate coloring graphs problem notoriously dicult 
benny introducing kneser graph benny noga alon insightful discussions 
sanjeev arora carsten lund rajeev motwani madhu sudan mario szegedy 
proof veri cation hardness approximation problems 
journal acm may 
sanjeev arora shmuel safra 
probabilistic checking proofs new characterization np 
journal acm january 
ar 
short proof kneser conjecture 
combin 
theory ser 

mihir bellare oded goldreich madhu sudan 
free bits tight results 
siam journal computing june 
blum karger 
coloring algorithm colorable graphs 
ipl information processing letters 
guruswami regev 
vertex cover uniform hypergraphs np hard approximate 
manuscript 
safra 
importance biased 
proc 
th acm symp 
theory computing 
dol 
transversals families sets 
studies theory functions real variables russian pages 

gos 
univ 
feige kilian 
zero knowledge chromatic number 
proceedings th annual ieee conference computational complexity ccc pages los alamitos may 
ieee computer society 
frankl 
extremal problems concerning kneser graphs 
combin 
theory ser 

michel goemans david williamson 
improved approximation algorithms maximum cut satis ability problems semide nite programming 
assoc 
comput 
mach 
greene 
new short proof kneser conjecture 
manuscript appear amer 
math 
monthly 
guruswami khanna 
hardness coloring colorable graph 
proceedings th annual ieee conference computational coco pages los alamitos ca july 
ieee press 
guruswami astad sudan 
hardness approximate hypergraph coloring 
proc 
st ieee symp 
foundations computer science pages 
ieee computer society press 
venkatesan guruswami 
inapproximability results set splitting satis ability problems mixed clauses 
approx pages 
johan astad 
optimal inapproximability results 
proceedings ninth annual acm symposium theory computing pages el paso texas may 
sanjeev khanna nathan linial shmuel safra 
hardness approximating chromatic number 
combinatorica 
subhash 
colorable uniform hypergraphs hard color constantly colors 

kneser 

der deutschen abteilung 
nathaniel 
approximating coloring maximum independent sets uniform hypergraphs 
algorithms journal algorithms 

approximate coloring uniform hypergraphs 
esa annual european symposium algorithms 
lov asz 
kneser conjecture chromatic number homotopy 
combin 
theory ser 

matou sek 
combinatorial proof kneser conjecture 
combinatorica appear 
matou sek 
topological methods combinatorics geometry 
book preparation 
ran raz 
parallel repetition theorem 
siam journal computing june 
schrijver 
vertex critical subgraphs kneser graphs 
arch 


uri zwick 
outward rotations tool rounding solutions semide nite programming relaxations applications max cut problems 
proceedings annual acm symposium theory computing stoc pages new york may 
association computing machinery 

