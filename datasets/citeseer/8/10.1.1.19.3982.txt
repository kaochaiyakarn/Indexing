meeting computational needs intelligent environments metaglue system michael coen phillips nimrod luke stephen peters peter finin 
mit artificial intelligence lab technology square cambridge ma ai mit edu 
intelligent environments ies specific computational properties generally distinguish computational systems 
large numbers hardware software components need interconnected 
infrastructures tend highly distributed reflecting distributed nature real world ies need large amounts computational power 
tend highly dynamic require reconfiguration resource management fly components inhabitants change adjust operation suit learned preferences users 
ies generally multimodal interfaces usually high degrees parallelism resolving multiple simultaneous events 
debugging ies unique challenges creators distributed parallelism difficulty pinning state formal computational sense 
describes metaglue extension java programming language building software agent systems controlling intelligent environments specifically designed address needs 
metaglue developed part mit artificial intelligence lab intelligent room project spent past years designing intelligent environments research human computer interaction 
research highly interactive spaces generally known intelligent environments quite popular 
precise applications perceptual technologies control architectures vary great deal project project tre systems generally quite similar 
aimed allowing computational systems understand people terms frequently busy activities involved computation 
ies material supported advanced research projects agency department defense contract number monitored rome laboratory 
seek connect computational systems real world people inhabit 
presents believe general computational properties requirements ies experience past years intelligent room project mit artificial intelligence lab 
published descriptions ies differ particulars clear confronting frustrating aspects engineering complex systems 
experience developed metaglue specialized language building systems interactive distributed computations heart ies 
metaglue extension java programming language provides linguistic primitives address specific computational requirements intelligent environments 
include need interconnect manage large numbers disparate hardware software components control assemblies interacting software agents en masse operate real time dynamically add subtract components running system interrupting operation change upgrade components system control allocation resources provide means capture persistent state information 
metaglue necessary traditional programming languages java lisp provide support coping issues 
currently research systems creating assemblies software agents provide low level functionality support mobile agents directory services 
features necessary sufficient 
metaglue provides high level tools specifically relevant creating software controllers ies hope available widespread community 
discussion focus hal constructed intelligent room approximately metaglue agents control hal interconnect components 
believe issues raised extend particulars hal important wide range intelligent environments 
hal small room lab equipped microphones video cameras variety audio visual output devices directly control 
hal designed explore wide range interactions involving futuristic residential spaces stressing quality life commercial spaces stressing information management 
created applications hal support entertainment teleconferencing business meetings military command post scenarios information retrieval 
expand list computational properties ies examine reasons 
discuss design considerations metaglue system specifically addresses perceived needs ies 
directly trace issues raised section satisfied capabilities incorporated metaglue 
close evaluation metaglue system directions research 
computational properties intelligent environments intelligent environments large share number computational properties due internally function externally interact users 
course identically share characteristics believe examining briefly concrete issues designers faced address directly 
hope discussion issues community motivate development general purpose tools metaglue 
note multiple people allowed interact simultaneously single issues discussed greatly exacerbated 
space limitations preclude addressing issue detail 
distributed modular systems need computational glue intelligent environments contain multitude subsystems comprising perceptual interfaces software applications hardware device connections mechanisms internal control 
created way purpose ies generally built similar components 
ies require way glue components coordinate interactions 
components generally exist single computer due hardware constraints need environments respond real time users 
uncommon individual computer vision speech understanding applications consume resources entire workstation reason believe exclusivity diminished processor speeds increase 
systems perform progressive real time searches naturally generalize consume increases available computational power 
frequently components shelf research programs right designed connected needs way expressing logic interconnection 
words inter component connections merely protocols contain explicit knowledge protocols 
viewing connections simply application programming interfaces apis insufficient 
example consider connecting speech recognition system web browser users navigate links speaking text contained 
computational glue include mechanism dynamically updates recognition grammar link text user goes new web page simply having apis applications necessary sufficient 
generally enormous amounts control code go building ies dealing connections pieces managed 
see 
resource management essential interactions system components exceedingly complex 
resources video displays computational power scarce need shared different applications 
example hal multiple computer vision systems share individual video cameras relatively expensive resource 
conflicts occur multiple applications want display information single video display speak user simultaneously 
largest surprises developing hal seemingly simple issues displaying video wide spread repercussions parts running system resources pulled 
discuss greater length section 
environment ample resources single user conflicts arise multiple people attempt interact simultaneously 
ies need sophisticated resource management capabilities particularly scale properly new applications capabilities added 
configurations change dynamically ies highly dynamic systems 
words weiser referring ubiquitous computing equally relevant ies new software may needed time ll able shut room functionality may shrink grow fit dynamically changing needs 
people may come go bringing devices pdas temporarily connect ies existing computational infrastructure 
developing system hal new hardware software components incorporated regular basis 
possible add running system restarting unrelated components 
fact circumstances new permanent components dynamically integrate interrupting operation 
confines static users may readily switch different aspects functionality 
example hal supports teleconferencing information management applications users readily switching quite natural meetings need arises get information 
context changes far reaching effects 
example may need simultaneously start new underlying applications activate different speech recognition grammars modify configurations perceptual systems 
state precious may new components need incorporated running pieces running system may need reloaded 
software engineering effort creating ies require iterative edit recompile run process testing new features eliminating bugs 
entire system restarted time components changed development prohibitively time consuming 
hal environment literally dozens hardware software components connected approximately metaglue agents 
having bring system completely modify long ago development cause endless frustration 
furthermore ies acquire state interactions users 
attempting trace bug forcing person repeat sequence interactions may spanned hours 
exacerbate problem state acquired human interactions activities hal engaged information retrieval 
weather report cnn headline caused hal take action may long changed recoverable 
critical part hal state comes information learns observing users 
hal machine learning systems learning users preferences activities 
systems straightforward way return previous coherent state 
checkpointing style reliable transaction systems partially ameliorate problems respect local state individual components 
ies asynchronous distributed repeating particular global state practically speaking impossible achieve 
technique investigating allowing essentially simulate replaying previously observed recorded events 
clear need software architecture permit kind dynamism rare conventional computational systems 
modify reload components running system computation state intact possible 
ies model parallelism real world supporting natural human computer interaction requires ies handle multiple ways user may interact 
people speak gesture move emote simultaneously ies need capacity cope part single user 
say need understand full range human discourse useful 
far ies consistently importantly predictably understand small subset interactions far preferable hci perspective ones leave users guessing particular input understood 
ies generally multimodal interfaces requires sufficient parallelism resolving multiple simultaneous events 
example user walks displayed map points says weather today immediately walks away system able discover pointing said word dealing multiple users simultaneously simply exacerbates problem 
ies need parallelism phenomena trying understand 
fact may need great deal background processing leads item 
real time response goes saying ies need responsive users 
particularly due fact ies traditional computer monitors users get handle system inner activity frustrating respond quickly user input 
point supporting basic need parallel architectures 
parts system acknowledge react users immediately responsive parts system example midst processing information retrieval query require time respond 
requires mechanism interconnecting components processing data able keep underlying external systems 
example hal language computer vision systems producing dimensional data vectors rate second connect metaglue visual event classification system process data real time 
debugging difficult independently ies debugging distributed asynchronous systems nightmare 
high level system event fails occur determining component blame usually long involved process 
furthermore understanding operation distributed loosely coupled components running parallel controller different serializations different system wide effects best rarely successfully avoided 
problem worse presence exotic hardware components video multiplexers internal state may imperfectly modeled software drivers 
software engineering practices go long way dealing problem comprehensive solution require development new types debugging strategies 
section see metaglue preliminary efforts direction 
metaglue discuss design metaglue programming language perspective give potential users sense 
proceed illustrate particular features metaglue address computational requirements ies discussed previous section 
necessity section intended sketch motivate capabilities metaglue system viewed complete description language 
detail metaglue internals 
examples section require cursory knowledge java programming language 
design metaglue extension java programming language introduces new agent class 
extending class user written agents access special metaglue methods discussed 
metaglue post compiler run java compiled class files generate new metaglue agents 
metaglue includes runtime platform called metaglue virtual machine agents run 
overhead added infrastructure standard java programs turned metaglue agents negligible 
goal metaglue add small number primitives java language easy write agents 
method invocations agents different workstations look exactly local method calls java 
metaglue agents minus metaglue specific primitives look exactly ordinary java programs 
easy transform regular java source files metaglue agents enormously adds metaglue value computational glue 
call process transforming previously existing programs agents wrapping 
time gone formulating metaglue semantics programming system 
sought provide focused set primitives managing systems distributed interacting agents avoid temptation 
stressing simplicity proficient java pick metaglue quickly small number new primitives easy learn remember system 
remainder discussion helpful keep mind running metaglue system involves starting metaglue virtual machines computers involved 
machines generally configured start booted 
capabilities metaglue offers capabilities address turn 
configuration management 
establish maintain configuration agent specifies 
establish communication channels agents 
maintain agent state 
introduce modify agents running system 
manage shared resources 
event broadcasting 
support debugging metaglue powerful naming scheme agents scope document 
simplest form name interface file agent java class package format agent controlling television referenced device television 

configuration management metaglue internal sql database managing information agent modifiable parameters called attributes storing internal persistent state giving agents fast powerful database access 
attributes contain information hardcoded inside agents difficult modify example workstation agent needs run parameters affect operation 
metaglue web interface modifying attributes changed agent running 
metaglue mechanisms configuring system agents interacting operational 
computational overhead running java virtual machine close unnoticeable modern pentium systems 
internal database helps enormously dealing java poor file access capabilities 
agents database store information files particularly important agents move different machines running 
code agent get location attribute metaglue built database attribute location new attribute location system println run location getvalue 
agent configurations metaglue agents specify particular requirements system insure satisfied willing run 
include name particular computer run specifications particular types hardware require access capabilities available whichever metaglue virtual machine mvm run 
expressed primitive location getvalue capability device television agent started mvm meet stated requirements metaglue move 
metaglue needs restart agent due localized hardware software failure attempt find alternative mvm run agent satisfies requirements 
see item 

agent connections metaglue intended computational glue needs establish paths communication agents regardless running 
primitive connects agent capabilities request services 
example hal speech synthesizer agent contain agent speech synthesizer say hello 
speech synthesizer refers capability particular agent 
agents refer capabilities directly name new agents easily added system implement preexisting capabilities modifying agents 
sophisticated way obtaining capabilities described metaglue resource manager 
metaglue try locate agent provides requested capability system computers return caller 
metaglue internal directory called catalog uses find agents started 
metaglue agents automatically register capabilities catalog run 
agent offering capability metaglue automatically starts invisibly insure continues running long 
primitive easy interconnect agents single line code 
reliance transitive operation 
example starting single hal demo agent results entire hal system loaded chain 
formally relied metaglue attempt insure continue running indefinitely discussed 

agent state agents metaglue freeze defrost primitives store subsequently retrieve fields metaglue internal sql database 
standard way doing having agent directly freeze state shutting appropriate time subsequently defrost constructor time started 
aspects agent state connections agents internally maintained metaglue generally need specifically managed agents 
defined schema capturing global state agents running metaglue system 

modifying running system metaglue attempt keep running system agents alive 
agent manually stopped example debugging agents rely default simply wait return event need access 
user restarts agent reload frozen state simply pick left dealing pending requests agents 
possible programmatically specify actions simply waiting agent relies stopped 
example temporarily switch active agent offers capabilities 
metaglue resource management help system event capabilities shared due part system unavailable 
agent dies unanticipated hardware software failure metaglue try restart automatically switching mvm necessary meeting agent required configuration possible 
important note unanticipated crashes may cause state information lost agents sensitive refuse automatically restarted 
example agent controls hal lighting systems may know lights restarted crash state information may inaccurate 
case simply ask hal vision agents see determine state lights room 
agent running part application started sync rest system manual intervention may required correct problem 
interestingly metaglue system recursively constructed special set metaglue agents 
agents full functionality system available example hal speech synthesizer users know internal problems system ask help resolving 

managing shared resources largest complex systems metaglue resource manager 
existed agents hal simply grabbed resources needed configured 
resource management system necessary apparent hal developed point multiple applications conflicted longer run simultaneously 
additionally agent simply rely resources wants know resources exist available 
devices agents dynamically come go system means agent need keep track different resources offer sets capabilities needs 
discussed agents may temporarily substitutes agents generally rely unavailable 
knowledge possible alternatives come 
resource system metaglue allows agents request functionality high level concerned provided resolving resource conflicts 
metaglue hierarchical set dealer agents responsible distributing resources rest system 
wide assortment different prototype dealer agents available specified internal logic performing allocation substitution dealers directly metaglue programmers extended customize operation 
dealers give resources withdraw previously allocated ones redistribute priority fairness schemes 
example dealers hal allocating televisions video projectors displays general 
agent dealers gain access 
higher priority agent needs access particular display temporarily withdrawn agent allocated available point back 

event broadcasting addition agents making direct requests method calls metaglue agents pass messages 
agents register agents including metaglue system agents find events going system 
example agent hal interested greeting people name walk inside room simply registers vision entry agent request messages entrance events identity person determined 
events occur receives message uses agent offering speech synthesis capability say hello 
event broadcasts notify groups agents context shifts room applications dynamically uniformly modify hal behavior 

debugging metaglue graphical interface examining running system agents called catalog monitor 
displays running agents reliance interconnections 
clicking agent brings window read eval print loop users interactively call agent methods 
metaglue logging facility manage centralize agents textual output 
useful programmers watch output particular agents worrying running output streams printed 
capabilities quite useful prefer source level debugging remote agents dynamic object browser ways set breakpoints groups agents simultaneously 
capabilities promise available shortly commercial java products hope hal continued development 
discussion evaluating merits programming language defy objectivity 
metaglue extraordinarily useful building hal highly doubtful hal reached level development 
metaglue stable system left large assemblies agents running week difficulties 
systems eventually stopped development purposes 
reexamine previously mentioned properties ies context metaglue 
distributed modular systems need computational glue metaglue provides channel interconnect hal components provides means build applications hal 
special communication mechanism corba kqml separate system internal controller metaglue allows reduce amount infrastructure providing communication control lighter weight system 
resource management essential resource management system metaglue offers wide range default behaviors easily customizable java class extension mechanism 
metaglue developed systems process incorporating applications 
configurations change dynamically metaglue offers mechanisms coping dynamically changing systems 
configuration manager attribute system allows users reconfigure agents running 
fact agents refer capabilities means new agents incorporated running system modifying agents rely 
metaglue ability start agents leaving rest system running allows dynamically components running computation 
substituting new resource managers running system new functionality added previously agents aware 
state precious metaglue offers support persistent local state agents freeze defrost mechanisms 
notions global state remain concepts 
ies model parallelism real world java inherently multithreaded metaglue inherits 
metaglue resource management allows agents running parallel avoid conflicting 
event broadcast mechanism simplifies communication interacting groups software agents running simultaneously 
real time response amount overhead metaglue adds java minimal 
avoidance heavyweight specialized communication packages allows metaglue agents essentially run quickly java remote method invocation system 
metaglue incorporated tight loops code processor intensive critical paths computer vision systems 
development jit compilers java enormously reduced need place components system external language libraries 
debugging difficult metaglue certainly possible debug distributed agents systems hope 
reason believe java community shares interest takes steps direction 
directions presently incorporating expert system metaglue allow sophisticated reasoning system configuration resource management 
creating machine learning extension metaglue incorporate pieces system described 

bobick intille davis baird pinhanez campbell ivanov sch tte wilson design decisions interactive environments evaluating 
proceedings aaai spring symposium intelligent environments 
aaai tr ss 


coen building brains rooms designing distributed software agents 
proceedings ninth conference innovative applications artificial intelligence 
iaai 
providence 

coen design principles intelligent environments 
proceedings fifteenth national conference artificial intelligence 
aaai 
madison wisconsin 


coen 
ed 
proceedings aaai spring symposium intelligent environments 
aaai tr ss 


coen human computer interaction learned worrying love intelligent room 
ieee intelligent systems 
march april 


coen wilson learning spatial event models multiple camera perspectives intelligent room 
submission 

general magic 
odyssey beta agent system documentation 
www com agents 

lange oshima programming deploying java mobile agents aglets 
addison wesley 


objectspace objectspace voyager core package technical overview version 
december 
www objectspace com voyager whitepapers 

phillips metaglue programming language multi agent systems 
eng 
thesis 
massachusetts institute technology 


extending metaglue multi agent system 
eng 
thesis 
massachusetts institute technology 


weiser computer st century 
scientific american 
pp 
september 
