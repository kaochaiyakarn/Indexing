full completeness linear logic chu spaces vaughan pratt dept computer science stanford university stanford ca pratt cs stanford edu april prove full completeness fragment linear logic self dual monoidal category chu spaces proofs semisimple conjunctive normal form formulas multiplicative linear logic constants having occurrences variable bijection dinatural transformations corresponding functors 
proof assigns variables domains having elements demonstrating uniform finite model property fragment 
define notion proof function analogous notion truth function determining transformation functors show transformation denoted proof net dinatural proof net sound acyclic connected 
proof functions independent interest valued model mll mix 
ordinary logic theorems linear logic proofs 
semantic criterion theoremhood validity truth function denoted formula required universally true 
semantic criterion naturality transformation denoted proof required commute morphisms objects variables 
proof sequent transformation denotes functors denoted 
variables may appear positively negatively naturality generalized dinaturality accommodate resulting reversal arrows commuting diagrams witnessing naturality 
ordinary logic axiom system generates valid formulas called complete 
linear logic axiom system generates proofs denoting dinatural transformation called fully complete abramsky jagadeesan interpret multiplicative linear logic mll category games objects history free uniform strategies morphisms show full completeness mll mix 
mix rule gamma delta infer gamma delta validated naturally arising models linear logic omitted pure linear logic 
seeking real mccoy hyland ong modify aj model refute mix disallowing certain plays characterize unfair 
supported onr number proves full completeness modest fragment mll mix interpreted chu spaces 
static object chu space merely binary relation theta interest chu spaces dynamics chu spaces transform pair functions acting covariantly contravariantly topological spaces having set points set open subsets membership relation points open sets 
requirement open sets closed arbitrary union finite intersection making category chu chu spaces continuous functions full category top topological spaces 
top chu closed category admitting functors perp gamma chu op chu tensor omega chu chu interpret corresponding basic operations mll 
interest chu spaces model linear logic fold model concurrency linear logic serving process algebra universal topology generalization simplification universal algebra operations linear logic constitute pure versions counterparts application specific categories direct sum phi tensor product omega dual vector spaces 
proofs mll terms gammaffiq omega gammaffi omega interpretations dinatural transformations showing soundness mll chu spaces 
prove converse fragment mll dinatural transformation interpretations terms fragment interprets proof 
modest fragment mll restricts conjunctive normal form cnf formulas called semisimple hyland ong expressible tensor product omega omega clauses formed par 
pm literals atoms negated atoms serious restriction permit formulas contain occurrence sign variable 
syntactic side restrictions linear logic point proof just undirected tree vertices clauses edges connect clauses sharing variable occurrences respective clauses opposite signs 
edges constitute axiom links thought specifying steps resolution proof 
linear logic theorem fragment unique proof simply locating complementary pair variables verified proof checking resulting graph connected acyclic danos regnier condition special case 
semantic side interesting limited fragment 
show dinatural transformations terms fragment bijection proof nets corresponding linear logic theorems 
aspects proof particular interest 
able show completeness assigning variables chu spaces points 
completeness results finite objects assigned variables objects assigned variables uniformly bounded finite size 
expect property survives lifting cnf restriction expectations way restriction occurrences variable lifted 
second introduce notion proof function analogous truth function 
semantic theoremhood formula property truth function denotes constantly true valid 
semantic soundness proof property proof function denotes represent dinatural transformation 
boolean theoremhood set central 
counterpart proofs played quad extract notion proof function 
truth proof functions ary operations boolean operations 
value truth function determined independent assignments variables proof function determined independent assignments variable occurrences 
evaluation truth function proceeds formula leaves root proof function propagates directions axiom links proof net 
regard meaning truth functions absolute proof functions relative truth neighboring clauses calling relativization correction phase evaluation process 
currently see extend result binary case 
theorems occurrences variable elements invariant respect automorphisms quad proliferate exponentially number occurrences 
presently know endemic chu just limitation proof functions path definition chu spaces mll operations characterization dinatural transformations mll functors quite tedious 
start path simple idea chu space just binary relation transforming topological space main chu space need quad consisting integers mod consecutive pair topology 
dinatural transformations arrive described elementary terms proof functions chu spaces functors dinatural transformations 
reverse natural order development treating proof functions 
way dinaturality proves heavy going fault bad exposition complexity material relatively straightforward notion proof function interest giving insight structure chu 
proof functions constitute valued model mll mix cnf semisimple fragment mll treat independent interest right 
proof functions just syntactic formulation dinatural transformations limitations including restriction occurrences variable 
alternative drop restriction replace idea proof function semantic object denoted formula proof form linking opposite variables 
truth function denoted formula proof function denoted proof 
proof sound just proof function exists 
truth functions proof function ary boolean operation denoted formula 
restrict attention cnf formulas kind resolution theorem provers test unsatisfiability decide negation theorem 
truth functions predict outcome resolution proof proof functions viewed valued semantics resolution process recognizes explicitly truth functions concerns locally sound argument globally unsound due cycle proof structure 
differences truth functions follows 
evaluating proof function truth assignments variables occurrences variables 
occurrences may assigned contradictory values literals may value 
second singleton clauses evaluated specially 
single literal clause evaluates clause 
literal new variable positive literal assigning values occurrences receives value intended receives 
third evaluation proof function entails systematic lying formalized spuriously negating changing sign certain literals clauses 
ones lie way depends assignment subject constraints 

conjunction undefined diagonal consensus required 
omega omega usual omega omega undefined 
follows proof function exist clauses may need lie order reach consensus 
consensus taken value proof function assignment 

arbitrary choice 
condition propagates value zeros assignment assignments 
constraints serve restrict changing assignment occurrences clause literals outside clause changed 
constraint proof functions takes account formula accompanying proof 
possible proof function meet conditions cnf formula question theorem mll 
condition depends notions 
proof functions take additional parameter formula mating defined perfect matching complementary pairs links variable occurrences 
folk theorem theorems mll exactly mll sequents derivable omega gammaffiq omega weak distributivity rule replace positive occurrence gammaffiq omega gammaffi omega 
links originate understood preserved weak distributivity 
variable fragment restrict dinaturality quad mating uniquely determined formula redundant required proof functions right restriction dropped 
mate relation determines relation 
literal possibly negated variable occurring clause mate called mate mate clause 
singleton clause split 
keeps mate mate mate 
note mate 

literals lie just including spurious negation evaluates true assignment 
proof acyclic transitive closure relation irreflexive determination literals lie propagated starting new literals singleton clauses 
conversely failure reflexivity cycle condition impossible particular assignment sets literal cycle rest 
honest induction cycle lie forcing lie contradiction 
conversely lie induction cycle honest forcing honest contradiction 
presence cycle choice lying literals meet condition 
significance proof proof function 
cnf mll mating cycle includes mating perfect matching opposite literals 
add condition 

changing value assigned occurrence change clause containing lying 
invariance applied literals clause lie depend changes assignments variables clause consequence condition 
proof function transitive closure relation contain cycles changes occurrences clause propagate clause immediately unable return 
conditions proof function denoted proof mating variables 
illustrate conditions proof function theorem evident mating 
moving consequent left hand side yields omega cnf formula consisting singleton clauses expanding clause dummy variable yields 
omega 

consider assignments turn 
receive respective values assignment occurrences receive independently assignment 
receive affect occurrences literals 
clauses evaluate 


force consensus complementing second clause give 
omega 
change occurrence complement clauses evaluate 


changed variable clause take 
consensus change clause signs needed formula 
omega 
assignment 
change second occurrence complement evaluate 


tracking second clause take 
consensus move 
omega 
change back 
complement second evaluation yields 


formula giving 
omega 
summary proof function evaluated order 
note final formula arrived assignment property agrees assignment 
note moved directly arrived formula 
instance central consistency property model ways starting arbitrarily chosen value assignment arriving assignment yield modified formula assignment 
bigger example take mll theorem omega gammaffiq evident mating 
corresponding cnf formula refuted omega omega 
variables reordered convenience 
expanding singletons gives 
omega 
omega 

assignments 
assignment complement clauses evaluate 



pick bring third clause line complementing give 
omega 
omega 
false restore old sign give 
omega 
omega 
clauses evaluate 



changed variable third clause value get complement middle clause bring line giving 
omega 
omega 
jumping ahead second true complement clauses 



changes go back assignment take middle clause 
evaluate get take behaves middle clause passage occurrence changed middle clause 
details remaining assignments reader may ftp compile run program ftp boole stanford edu pub continuing way obtain proof function respective bits values 
return example 
note proof net acyclic removing axiom link partitions net 
sign changes applied link seen computed respective nets obtained removing link getting information net attached 
sense data flows directions link 
chu spaces proof functions express operational essence dinatural transformations mll functors category chu spaces treat 
chu space set consists sets binary relation theta interpret carrier consisting respectively points states 
write fx fa called respectively row column rows columns understood representations points states respectively 
chu space states respectively points representation called extensional respectively separated properties called 
extensional chu space columns closed arbitrary union finite intersection constitutes topological space open sets columns 
shall mainly spaces 
chu space called discrete extensional subset carrier appears column coherent separated subset appears row 
examples chu spaces give spaces shall assigning values variables proof main theorem 
smaller discrete space denotes power set membership relation 
larger relation fx 
discrete lacking states coherent lacking points 
dual denoted converse defined 
duality interchanges points states rows columns separation extensionality discreteness coherence 
clearly statically chu space just binary relation 
intrinsic interest chu spaces emerges transformational structure adequate reflection thereof included picture follows 
chu transform just map adjoint pair functions defined satisfying composite gamma 
gamma 
defined gf chu transform gf chu spaces maps composed form category chu 
domain map extensional may seen determined case may abbreviated ambiguity dually target separated determines discrete maps exactly functions evident dual coherent 
duality defines contravariant functor chu evident way turning map case topological spaces represented adjointness condition readily seen equivalent continuity determines extensionality 
sense chu space generalized topological space 
examples chu transforms enumerate morphisms involving spaces discrete maps may identified usual elements particular endomorphism maps maps empty column inverse image reasoning topologically empty empty columns 
leaves just endomorphisms consider 
state contains exactly complement mod 
endomorphism preserve complements appear state state contain state 
diameters sent diameters 
diameters mapped diameter ways total ways endomorphisms half bijections constituting automorphism group quad seen form dihedral group rotations inversions square 
summary cardinalities 
hom bf bf tensor product 
tensor product chu spaces denoted omega defined theta ja ja denotes set maps relation defined 
case set category chu enriched chu spaces object symmetric closed category defined barr studied chu 
general setting objects omega morphism column omega subset theta binary relation equivalently theta matrix 
define th row matrix denoted fb subset similarly th column fa subset condition rephrased condition similarly expressed 
columns respectively yields relatively uncluttered reformulation condition column omega organized theta matrix columns columns rows columns roles specify respectively column provides row column provides column column omega uniquely determines extensional extensional 
tensor product preserves extensionality 
functoriality 
far defined object part functors perp tensor 
describe maps omega induced maps perp easy map induces dual map evidently chu transform symmetry definition chu transform 
tensor maps 

induce map omega omega omega covariant function simply function sending 
contravariant function function ja gammaffib ja gammaffib sending hf need verify composite belongs ja gammaffib chu transform suffices produce adjoint claim adjoint follows hf hf dinaturality dinaturality extends naturality accommodate variables variances pair functors 
achieved straightforwardly treating positive covariant negative contravariant variables independent 
variables appear covariantly write appear variances write separate respectively negative positive occurrences 
convention accommodating variances arrows form gamma 
naturality diagram kind shown left split gamma gamma 
yield hexagonal diagram right 
gamma 
yg gamma 
gamma 
yg gamma 
linear logic permits dinaturality understood elementary terms permits antecedent assumed vacuous sequent equivalently shall find convenient 
secondly simplify language assume case chu functors valued concrete category 
combining just functor right say dinatural transformation just distinguished element concrete object image tuple morphisms determining function required preserve distinguished point 
alternative simplification possible find morphisms witnessing isomorphisms 
isomorphisms advantage understood running direction arrows hexagon reversed ordinary square 
situations possible restrict automorphisms reason keep multiple copies isomorphic objects 
simplifications difference validity order logic dinaturality categorical logic described follows 
validity assigns single point space variable evaluates formula tests single output value true varies input values ensure output value changes 
dinaturality assigns space variable formula evaluates space functor interpreting formula 
collection automorphisms applied input spaces induces automorphism 
contravariant variables accommodated inverse contravariant variable value validity requires single output value invariant dinaturality requires output space contain invariant point common fixpoint induced transformations 
cnf evaluation quad illustrated basic operations mll gammaffib 
describe values larger formulas variables set confining semisimple dnf formulas sense hyland ong 
assume negations pushed literals leaving just omega 
operators higher formula 
self dual assume literals evaluated quad 
positive negative literals distinguishable spaces evaluate transform 
write fold tensor product omega omega proposition denotes copies copy contains elements second consists graphs characteristic functions subsets representing subset jxj jdj exactly subset 
gamma power set gamma convenient consists corresponding respectively subsets corresponding states consists corresponding points ways choosing complementary pairs corresponding states proof proceed induction case appears example 
consider gammaffi points functions sending states respective complements 
pairs gamma yg states 
transposing yields wish characterize chu spaces formed par tensor powers 

natural dual omega omega omega chu space quotient cartesian product set subsets identify characteristic functions ranges points appear domain quotient thereof 
treatment commutes quotienting assume postponed long done 
consequence definition omega state values value function characteristic function state point boolean algebra maximal ideal complement boolean algebra 
case set subsets containing complement set 
finite 
may visualize dimensional brick th side length state color painting brick line parallel th axis painted maximal ideal sides length pretty big brick 
proposition shows shrink exponentially smaller brick dimensions 
crucial observation replaced subspace consisting subsets having element usual subspace topology intersect original open sets subspace states omega omega bijection omega omega correspondence making states unique extension 
example states points omega points states 
take point subspace consisting empty singleton subsets having states intersected carrier omega points states 
states little brick characterized having line parallel th axis painted singleton line painted big brick previously maximal ideal 
furthermore element singleton missing element atom singleton subset construction element subset lemma applications verification 
lemma dimensional little brick omega types states st type th row th column intersection 
second type th row th column including exceptions 
discussion may clarify situation 
theta rectangle states matrices row column indexed gamma constant denoting singleton 
exceptional entry th position row column th position relied specify row column singleton shall view th bit sign bit row column 
entry serves sign bit easily seen counting rows noting exactly row row exactly entries differ 
note rows complementary columns proof assume loss generality 
determined position exception respectively th column th row 
column fully determined st state 
state 
exactly row take 
fully determined 
values giving combinations 
combination just state type 
second type remaining values giving combinations 
plus single type state add giving total states states signs promised earlier 
verify correspondence states big little bricks 
proposition constructed tensor products 
set states functions jp set states functions bijective correspondence restriction corresponding jp extends uniquely proof restriction state state subspace topology 
remains show restriction bijection 
function representing state extend forming subset inductively follows 
initially singleton empty domain 
suppose extended arguments know subsets 
claim exactly singleton nonempty choice arguments positions held fixed 
proving claim apply construction element singleton claim 
define xj 
construction evidently corresponding line parallel th axis maximal ideal 
furthermore choice maximal ideal uniquely determined singleton choice agrees defined empty singleton values remains extension continue way produce remains prove claim 
proceed induction observed earlier lines reduced brick singletons element singleton missing element singleton empty subset chose 
assume verified claim gamma 
extend claim gamma value follows 
consider dimensional little rectangle obtained varying empty complements oriented convenience ranges rows columns 
lemma exceptional element column row type state case column row consider gamma corresponding expansion twodimensional little rectangle rows subsets mj just empty singleton rows st state cases depending state cases depending case state row equals rows little rectangle 
exist contain row equals row row depending respectively row equals complement row row depending respectively cases row meeting condition claim 
role case producing essential proof 
proposition falsified replacing singleton empty singleton construction omega acquires spurious states including theta identity matrix 
omega theta brick get correct count states 
foregoing describes chu spaces denoted semisimple mll gamma formulas variables assigned quad 
points states chu spaces come complementary pairs 
focus single axiom link proof net 
link associated clauses dimensions brick 
automorphism object assigned variable induces automorphism brick moves points parallel rectangles axes correspond respective clauses containing variable 
complement state obtained complementing bits loss generality assume giving representative complementary pair states 
evidently state invariant complement invariant invariants functors evaluated quad come complementary pairs 
may eliminate member pair permitting discrete singleton bf power set assigned variables arbitrarily chosen morphism bf setup similar subobject classifier omega topos accompanied final object morphism omega element 
indicate briefly example method works 
example theorem omega gammaffiq gammaffiq relevant diagram omega gammaffi gammaffi gamma 
omega gammaffi gammaffiq gamma omega gammaffiq gammaffiq gamma 
omega gammaffiq gammaffiq gamma omega gammaffiq gammaffiq 
arrows evident maps omega gammaffi omega gammaffiq evaluating functors diagram yields respectively bf gammaffiq gammaffiq gammaffiq omega gammaffiq gammaffiq 
reader may verify dinaturality condition maps diagram preserve invariant element domain constrains element unique objects 
starting bf trivial zig zag 
arrows forward direction depends bf images functors injective 
running backwards idea functor composes elements gammaffiq effect mark element dinaturality holding element fixed 
prevents ffi rotation element gammaffiq invariant dinatural 
uses bf show dinatural transformations denoted proof peculiar quad rejected bf arrow bf quad added 
bf serves purpose rejecting mix 
lafont streicher observed bf omega bf bf 
bf morphism chu left hand side states right hand side state 
induced automorphisms describe outline automorphisms big brick induced automorphism variable clause deferring details full 
orbits induced automorphism parallel axis associated clause remain line axis length state big brick lines painted maximal ideal represent elements indicates copy element belongs 
associate point subset contains 
idea associates generators variable clause 
bits distinguish variable xor global sign bit clause bits information associated line just behavior consequence definition omega resulting repeated applications identification 
automorphism variable clause maps line painted follows 
write binary sb automorphism carry induced automorphism big brick line differ element example rotated changes line complemented 
understood automorphism just boolean complement boolean algebra 
changes replaces ideal 
described permutation transposition axes behavior automorphism big brick little brick orbits need confined 
deal extending state little brick big necessary effect state little brick described straightforwardly follows 
purposes convenient brick smaller little brick 
th row column required avoid spurious states redundant regard specifying state th row reconstructed column column vote column 
case remaining rows columns vote 
hand case rows necessarily complement rows redundant regard specifying states 
state specified dimensional brick th side length albeit different codings 
distinguish free brick little brick name tiny brick 
tiny brick line painted singleton fdg represents complementary line 
change complement line interchanging singletons 
change bit change membership produce replaces fdg fd likewise 
example singleton painted length line depending variable representing units position variable position clause 
induced automorphism big brick appears seen limited aperture little brick 
case requires special treatment 
lines length consist bits 
define membership respective open sets respectively picture bit pattern seen bit aperture moving right 
low order bit sign bit agreement sign bit high order bit mod need sign bit order tell high order bit exceptional bit 
invariants combine previous sections deduce states invariant automorphisms 
state big brick invariant fg automorphisms induced automorphisms copies automorphisms instantiating variable 
states paintings visualization invariant state painting point remains color induced automorphisms states tiny brick uniquely determine states big brick follows state tiny brick invariant automorphism variable corresponding state big brick invariant 
speak automorphism tiny brick speak restriction fg predicates big brick automorphism big brick tiny brick 
invariance state tiny brick automorphism variable stated equality restrictions 
visual effect invariance painting change big tiny bricks 
dihedral group generated elements constituting sufficient test set automorphisms generators select rotation defined successor mod flip defined interchanging leaving fixed 
identify fourth root unity rotation multiplication flip complex conjugate 
state invariant automorphisms applied variables simultaneously choice single variable state invariant automorphisms variable 
distinct variables need consider induced automorphisms big brick 
automorphisms variable occurring clauses induces automorphism big brick orbits confined dimensional planes containing lines parallel th th axes 
formulas dnf negations occur literals 
far rotation concerned indistinguishable objects isomorphic possible ways automorphisms inverse image map gamma think rotates backwards map target source 
map source target gamma gamma gamma gamma means inverse image second gamma gamma means inverse bijection rotates direction related isomorphisms 
definiteness take isomorphism pairs state fi point mod 
rotation cycles 
described uniformly replacing es se 
switch binary rotation cycles 
translates cycling 
corresponding rotations 

note cases rotations variable ffi rotation complements state brick 
distinguished flip leaves points invariant leaves states invariant swaps open set 
flipping interchanges leaving fixed 
described replacing es se 
basic interchange binary binary replace ab mod 
translates interchanging remaining invariant 
interchange fixed 
flipping switches 
replaces es es 
translates switching likewise complements 
apply rules determination invariant points formula 
equivalently invariant states omega big brick theta tiny brick theta 
states legal write binary digits abcd ab cd lines parallel occurrence axis respective low order sign bits ac bd parallel axis respective sign bits 
rotation sends abcd rotation sends abcd cda composing sends abcd dc ba 
rotational invariance requires flipping positive occurrence sends abcd 
flipping second negative occurrence sends abcd bcd 
composing sends abcd 
invariance flipping requires invariance rotation flipping automorphisms requires satisfied abcd complement 
obtained proof nets order changing faster 
constitute single invariant pair 
elements gammaffiq correspond identity map ffi rotation 
formula 


denotes point brick 
associating variables axes stride respectively bits invariant pair may written 
group bits invariant state omega group seen correspond bit invariant state omega example consistent mix rule 
note complementary pair invariants half provided bits complementary pair second half 
note constrained invariant pair 
consider axiom link general semisimple formula variables clauses respectively call ij link 
proposition ij link formula invariant state ij plane tiny brick second type 
furthermore correspond subsets differing just aligned axis dimension viewed hypercube similarly correspond subsets differing just alignment axis axis 
proof sketch shown unique pair invariants satisfy proposition 
larger invariant structure obtain gamma room axis 
narrows choices gamma possibilities gamma complementary pairs determined choice gamma fkg likewise gamma choices 
axiom link incident clause narrows choices 
axiom links constrained clause left gammaw choices associated clause 
particular axiom links accounted choices remain forming complementary pair unique invariant pair 
choices altogether choices clause clauses interlocked similar interlocking saw 


example earlier 
summarize main theorem 
theorem semisimple formula binary mll gamma proofs correspondence invariant pairs 
illustrate example illustrate proof functions omega gammaffiq proof function obtained laid visibly purposes vertical direction indexed occurrence major horizontal direction consider axiom links turn 
link variable 
clause test invariance rotation rotating occurrence rotation rules transform rows give rotate columns recover demonstrating invariance rotation 
invariance flipping flip rules negative flipping gives flip simply exchanges top bottom rows restoring 
completes link link transpose theta matrix rows indexed vertically 
groups bits 
variable 
clause test invariance rotation transforming rows rules positive flip 
rotate recover 
variable 
test invariance rotation rotating occurrence rotation rules transform rows give rotate columns recover demonstrating invariance rotation 
invariance flipping flip rules negative flipping gives flip simply exchanges top bottom rows restoring 
link reorganize rows indexed 
variable 
clause test invariance rotation transforming rows rules positive flip 
rotate recover 
flipping positive gives flip simply complement top row restores 
remarks questions validity naturality dual certain respects complexity 
boolean logic naive test validity formula entails evaluating exponentially combinations inputs 
naturality consequence functoriality output point invariant possible combinations transformations input variables invariant transformations individual variables 
transformation variables expressible composition transformations applied individual variables leave point fixed composites 
look invariants suffices try generating set endomorphisms space 
spaces need just generators variable calling linear number transformations input spaces performed 
hand output space ordinary boolean evaluation single bit easily monitored 
semantics chu spaces domain interest searching invariants output space size search space exponential number variables 
gained swings lost go round 
conclude questions 

explain exponentially arise multiple occurrences literal 
peculiar quad endemic linear logic chu 

small brick special quad analogous exponential reduction obtain evaluating cnf formula arbitrary chu spaces 

chu set inherits set additive connectives linear logic defined coproduct phi product full completeness mall mll additives obvious problem pursue full completeness multiplicatives understood 
acknowledgments 
grew summer collaboration problem gordon plotkin suggested quad richard blute 
samson abramsky radha jagadeesan 
games full completeness multiplicative linear logic 
journal symbolic logic 
barr 
autonomous categories volume lecture notes mathematics 
springerverlag 
blute 
hopf algebras linear logic appendix barr 
mathematical structures computer science april 
gupta 
chu spaces model concurrency 
phd thesis stanford university september 
tech 
report available ftp boole stanford edu pub ps gupta pratt 
gates accept concurrent behavior 
proc 
th ann 
ieee symp 
foundations comp 
sci pages november 
hyland ong 
fair games full completeness multiplicative linear logic mix rule 
available ftp ftp comlab ox ac uk ps gz pub documents luke ong 
lafont 
finite model property various fragments linear logic 
available dcs qmw ac uk authors papers model ps 
pratt 
chu spaces interpretation concurrent objects 
van leeuwen editor computer science today trends developments volume lecture notes computer science pages 
springer verlag 
pratt 
stone gamut mathematics 
logic computer science pages 
ieee computer society june 
pratt 
broadening denotational semantics linear logic 
special issue linear logic volume entcs electronic notes theoretical computer science tokyo 

