appear electronic notes theoretical computer science url www elsevier nl locate entcs volume html scoped dynamic rewrite rules eelco visser institute information computing sciences universiteit utrecht box tb utrecht netherlands 
www cs uu nl people visser visser acm org applicability term rewriting program transformation limited lack control rule application context free nature rewrite rules 
problem addressed languages supporting user definable rewriting strategies 
addresses second problem extending rewriting strategies scoped dynamic rewrite rules 
dynamic rules generated run time access variables available definition context 
rules generated rule scope automatically retracted scope 
technique illustrated means program bound variable renaming function inlining dead function elimination 
rewrite rules provide formalism expressing program transformations 
rewrite rule defines local transformation derived algebraic equality programs 
problems associated application standard term rewriting techniques program transformation need rules strategies order control application rewrite rules context free nature rewrite rules 
exhaustive application rules exhaustive application rules entire syntax tree program adequate transformation problems 
system rewrite rules expressing basic transformations non confluent non terminating 
ad hoc solution encode control application rules rules introducing additional function symbols 
intertwining rules strategy obscures underlying program equalities incurs programming penalty form rules define traversal syntax tree disables reuse rules different transformations 
visser paradigm programmable rewriting strategies solves problem control application rules maintaining separation rules strategies 
strategy little program selection available rules defines order position tree applying rules 
rules remain pure intertwined strategy reused multiple transformations 
support strategies provided number transformation systems various forms 
transformation organized sequence canonical forms 
canonical form tree normalized respect subset rules specification 
elan provides non deterministic sequential strategies 
stratego provides generic primitive traversal operators compose generic tree traversal schemas :10.1.1.35.1581
see survey strategies program transformation 
context free nature rewrite rules second problem rewriting context free nature rewrite rules 
rule knowledge construct transforming 
transformation problems context sensitive 
example inlining function call site call replaced body function actual parameters substituted formal parameters 
requires formal parameters body function known call site available higher syntax tree 
similar problems program transformation including bound variable renaming typechecking constant copy propagation dead code elimination 
basic transformations applications expressed means rewrite rules need contextual information 
usual solution problem extend traversal tree hand written generic distributes data needed transformation rules 
example traversal functions asf sdf declared accumulation parameter data collected 
language independent definitions operations bound variable renaming stratego capture generic tree traversal schema takes care distributing environment tree 
disadvantage solutions traversal strategy data heavy just handling control flow 
traversal functions infected additional parameters carrying context information 
generic solutions break multiple environments needed handle multiple name spaces instance 
solution contextual rules :10.1.1.35.1581
contextual rules combine context local transformation rule local traversal applies rule reuses information context 
problem approach performs extra traversal visser syntax tree leading quadratic complexity case contextual rule applied part traversal tree context accesses 
dynamic rules introduces extension rewriting strategies scoped dynamic rules 
dynamic rule normal rewrite rule generated run time access information generation context 
example define inliner rule inlines function calls specific function generated point function declared call sites function 
dynamic rules class 
application control normal strategy 
dynamic rules applied part global tree traversal 
rules overrule definition previously generated rules 
restrict application dynamic rule certain part tree live range rule determined rule scopes section 
rule temporarily overruled scope visible scope 
hide rules generated outer scopes rules undefined section 
rules outer scopes permanently overridden section 
mechanism dynamic rules described reflects implementation dynamic rules stratego version available www 
stratego language org 
outline section reviews basics rewriting strategies stratego 
sections introduce dynamic rules means number transformations tiger programs bound variable renaming section function inlining section dead function elimination section 
examples motivates illustrates aspect dynamic rules 
section discusses applications related 
section concludes 
rewriting strategies section reviews basics rewriting strategies stratego far needed 
see details operational semantics underlying language 
tiger example language compiler construction textbook appel illustrate application dynamic rules 
program representation stratego programs transformed expressed order terms 
signatures describe structure terms 
term signature visser function fact int int fact fact fact farg tid int tid int relop lt var int int binop mul var call var fact binop minus var int call var fact int fig 

concrete syntax small tiger program 
nullary constructor application tn ary constructor terms ti list notation tn abbreviation terms constructed constructors cons nil 
shows signature syntax tiger programs 
tiger imperative order language nested functions 
data composed arrays records integers strings 
control flow determined 
examples terms tiger signature var variable call var var call function argument int var declaration local variable initialized integer constant 
gives small example program corresponding syntax representation 
rewrite rules rewrite rules express basic transformations terms 
rewrite rule form label rule term patterns left hand side right hand side respectively 
term pattern variable nullary constructor application pn ary constructor term patterns pi 
example fold binop plus int simple constant folding rule tiger expressions 
rule applies term pattern matches top level structure applying effect transforming term obtained replacing variables subterms correspond 
basic actions underlying rules class operations stratego 
operation denotes matching term pattern denotes building visser module tiger core signature sorts exp lvalue dec farg type field typeid constructors var string var lvalue string lvalue subscript lvalue exp lvalue int string exp string string exp exp call var list exp exp record typeid list exp string exp array typeid exp exp exp binop binop exp exp exp relop relop exp exp exp seq list exp exp assign lvalue exp exp exp exp exp exp ifthen exp exp exp exp exp exp var exp exp exp exp break exp list dec list exp exp string type list dec string option typeid exp dec list dec farg string typeid farg string list farg option typeid exp typeid type list field type field string typeid field typeid type tid string typeid fig 

signature syntax tiger visser tion term pattern rule just syntactic sugar xn xn delimits scope pattern variables xn 
construct implicitly free variables local 
rewriting strategies programmable rewriting strategies provide mechanism achieving control application rewrite rules avoiding new constructors rules 
rewriting strategy program transforms terms fails doing 
case success result transformed term 
case failure result 
rewrite rules just strategies apply transformations roots terms 
strategies combined complex strategies means stratego strategy operators 
identity strategy id succeeds leaves subject term unchanged 
failure strategy fail fails 
sequential composition strategies attempts apply subject term 
succeeds applies result fails 
non deterministic choice strategies attempts apply subject term unspecified order 
succeeds succeeds fails 
deterministic choice strategies attempts apply subject term 
fails attempts apply subject term 
fail choice fails 
recursive closure rec strategy attempts apply subject term strategy obtained replacing occurrence variable strategy rec 
strategy definition xn introduces new strategy operator parameterized strategies xn applies body generic term traversal strategy combinators just described combine strategies apply transformation rules roots subject terms 
order apply rule internal site term subterm necessary traverse term 
stratego defines primitive operators expose direct subterms constructor application 
combined operators described define wide variety complete term traversals 
purposes restrict discussion traversal operators congruence operators operator 
congruence operators provide mechanism term traversal stratego 
ary constructor congruence sn strategy applies terms form tn works applying strategies si terms ti 
example congruence transforms terms form result applying similarly 
visser application si ti fails application sn tn fails 
operator applies direct subterms ti constructor application tn 
succeeds applications direct subterms succeed 
resulting term constructor application tn ti results obtained applying terms ti 
note identity constants constructor applications children 
example strategy topdown defined topdown rec strategy expression rec specifies parameter transformation applied root current subject term 
succeeds strategy applied recursively direct subterms term subterms 
definition topdown captures generic notion pre order traversal term 
bound variable renaming bound variable renaming transformation replaces bound variables corresponding occurrences new unique names 
result transformation name binding 
transformation necessary prevent free variable capture substituting expressions bindings example performing function inlining 
transformation illustrates renaming variable declarations tiger programs 
var var var var note initialization second declaration bound outer declaration inner refers outer declaration 
inside inner refers inner declaration 
issues clarified renamed version right 
syntax representation expression left term int binop plus binop plus var int var var visser rn rn rn new var rn var lookup rn binop op rn binop op rn rn fig 

definition renaming function 
box contains essential rules 
second box shows example rules definition consists 
functional definition renaming conventional bound variable renaming defines function recursively visits nodes syntax tree carrying renaming table rn extended binding sites consulted variable occurrences 
note renaming initializer declaration renaming environment 
new function generates new string unique sense occur current syntax tree 
disadvantage implementation function explicitly visit tree nodes binop variables bind variables 
definition renaming function rule constructor schema en rn rn en rn full definition renaming tiger programs essential renaming rules additional rules required 
real languages ratio essential rules additional rules decrease 
renaming rewrite rules generic traversals possible avoid overhead defining traversals constructs involved transformation hand 
recursive rename function expressed essentially topdown traversal topdown try strategy traverses syntax tree subtree tries apply rules 
operator try defined try id tries apply transformation fails returns original term 
rules constructs changed need provided 
rule renames binding variable variable declaration generating new name visser new second rule renames occurrence var var var var catch rule intention rename just variable variable rename occurrence bound variable new name generated binding site rule 
generating renaming rules rule renaming variable depends renaming corresponding binding construct 
dependency expressed dynamic rules 
reformulated generates renaming rule variable bound declaration construct new rules var var dynamic rule declaration rules var var condition generates instance rule inherits values meta variables context 
example operation dynamic rule generation consider application term int 
matching left hand side rule term variable bound string 
subsequently new unique string say generated new bound variable context bindings dynamic rule created resulting generation rule var var renamed variable declaration produced int 
traversing tree occurrence var dynamically generated rule applied replaced var free variables affected 
visser limiting scope generated rules topdown renaming strategy defined quite right 
apply example expression get var var var var renaming rule generated inner declaration overrides rule outer declaration 
correct occurrences inside inner rule applies inner 
problem suggests possible retract generated rules scope valid ends 
exactly rule scope lab achieves 
rule label lab generated executing automatically removed scope 
rule overridden rules generated inside scope visible scope 
recall defined topdown try definition topdown topdown rec redefining renaming strategy rec try rule generated variable declaration automatically removed exiting scope 
necessary inline definition topdown scope generated renaming rules include traversal subterms 
consider effect new strategy example note inner correctly renamed var var var var renaming correct initializer renamed correctly 
visser correctly treat initializers variable declarations traversal adapted variables initializers renamed generating new renaming rule 
strategy achieves 
congruence id id id visits initializer variable declaration congruence id id id visits body rec try id id id try id id id choice id id id adapts generic traversal just case variable declaration 
abstracting rule generation constructs bind variables tiger unattractive repeat code generating renaming rules binding construct 
avoided creating rule transforms name fresh name time generates renaming rule 
defines full fledged renaming strategy tiger programs covering binding constructs renaming type identifiers dealing name spaces simultaneously 
renaming rules binding constructs call rule newvar generate new name corresponding variable renaming rule 
rule defined follows newvar new rules var var renamer defined rule renames variables variable name unique 
applications useful rename variables possible instance result readable programmer 
approach rename variables clash outer bindings 
running example approach effect var var var var achieved generating new name variables exist outer scope 
rule tries apply variable succeeds variable declared outer scope 
case new variable generated 
original variable name visser module tiger rename imports tiger dynamic rules lib strategies rec try id id id try id id id map map id newvar xs xs newvar xs ys map farg newvar id xs ys var var newvar 
fig 

renaming bound variables type names newvar var new rules var var summary section seen context dependent rewrite rules generated rules 
construct information context visser defined 
subsequent generation rules overrides previously generated rules 
rule scope lab limits live range rule generated scope 
dynamic rules name spaces variables types generated time 
dynamic rules static rules generic traversal tree structure 
relevant tree nodes visited explicitly nodes traversed implicitly 
function inlining function inlining transformation replaces function call body function actual parameters substituted formal parameters 
example consider simple example call sqr function replaced body 
function sqr int sqr function sqr int var int note replacement introduces local variables bind actual parameters renamed formal parameters 
necessary tiger imperative language 
simply substituting actual parameters formal parameters lead duplication errors intervening assignments 
optimizations constant copy propagation get rid local declarations possible 
function inlining transformation expressed rule defined follows call var es ds fdec xs zip xs es ds function call replaced expression body function declaration body 
furthermore introduces list variable declarations corresponding formal parameters xs function declaration renaming declaration 
local variables xs bound actual parameters es zipping lists formals actuals building variable declaration rule farg variable fdec rule bound original function declaration information normally available call site function 
generating rule dynamically encountering visser module tiger inline imports tiger tiger rename strategies inline rec try id id id declare id id id id declare id declare map id fdec rules call var es ds fdec xs zip xs es ds farg rules call var undefined var rules call var undefined fig 

simple inlining strategy function declaration necessary information passed 
strategy generates inlining rule function declaration 
defines simple inlining strategy inline parameterized transformation strategies 
transformations apply way tree way 
example instantiation visser inline repeat simplify repeat simplify inlines functions way simplifies expressions constant folding way 
strategy basically comes inline rec try declare transformation applied 
entering scope rule declare generates inline rules local function declarations 
subsequently subtrees visited recursively 
transformation applied 
strategy deals scope rule variable declarations inline rules optimizing bodies optimized functions inlined 
rules strategy generates rules function declaration deemed 
exact definition matter defined various heuristics static dynamic program analyses 
matter fact non functions rule generated 
functions name exist shadowing outer inner lead replacing call wrong function body 
necessary prevent inlining rules outer scopes creep trough 
dynamic rules declared undefined 
strategy generates rule undefined fdec rules call var undefined rule fails called 
effect hide rules outer scopes function name 
done variable declarations loop counter variables may shadow function definitions 
alternative functions inlined compute condition clause generated rule computing generation time 
expensive entail recomputing condition rule called 
dead function elimination purpose dead code elimination remove code fragments program run time 
dead function elimination special case dead code elimination function declarations removed visser function defined called 
example dead function elimination transformation takes result inlining previous section removes unused sqr function function sqr int var int var int elimination dead functions requires traversal program establish calls function 
gives definition dead function elimination dynamic rules 
strategy declare function dead default 
strategy defines rule function declaration scope 
traversal syntax tree call function encountered rule undefined 
way functions rule succeeds eliminated strategy eliminate filters functions eliminated 
note strategy refined order eliminate dead mutually recursive functions 
overriding rules strategy requires new kind dynamic rule 
consider definition regular dynamic rules call var rules undefined entail new rule added function called position 
new rule removed soon transformation exits surrounding scope function declaration eliminated 
want intention change original rule defined scope function declaration local purposes 
achieved declaring dynamic rules override rules 
generation overriding dynamic rule succeeds prior definition dynamic rule left hand side 
discussion applications dynamic rules applied succesfully number transformations 
visser module tiger imports tiger tiger rename strategies eliminate dead functions rec try id id id try id id id try eliminate try map id fdec rules call var override rules undefined eliminate filter id fig 

strategy eliminating dead functions interpretation style typechecker tiger dynamic rules generate typechecking rules variables functions 
need threading type environments traversals type rules expressed directly rewrite rules 
interpreter tiger dynamic rules represent mappings variables values stack heap 
variable bindings dealt scoped traversal similar renamer 
globally visible heap objects represented dynamic rule maps values pointers values 
evaluation individual constructs expressed constant folding rules 
optimizations tiger programs including constant propagation copy propagation dead code elimination expressed elegantly dynamic rules 
forward transformation problems dynamic rules rewrite visser variables constant copy expressions 
backward problems dynamic rules keep track def information 
tiger programs tracing profiling dynamic rules selectively extend functions extra functionality 
program transformations benefit dynamic rules 
data flow transformations easily extended inter procedural transformations generating appropriate rules function calls function declarations 
warm fusion algorithm deforestation uses dynamically generated rewrite rules derivation catamorphisms recursive function definitions 
implementation warm fusion stratego simplified dynamic rules 
dynamic rules memoization 
def analysis mentioned uses memoization scheme incrementally recompute analyses expression 
application area run time configuration transformation components 
options passed command line generate rules transformation 
range simple information optimization level user defined optimization rules instantiation analysis set initial variables 
related language independent traversals shown generic traversal strategies define generic language independent algorithms language processing problems free variable extraction bound variable renaming substitution unification 
generic algorithms parameterized strategies recognizing various aspects object language representation variables variable binding constructs binding positions binding constructs 
dynamic rules orthogonal generic traversals implementation easier environment threading delegated dynamic rules 
assert prolog dynamic rules closely related extra logical operators assert retract prolog 
goal assert adds rule database 
free logic variables universally quantified 
similar variables dynamic rules occur context 
goal retract retracts rule database rules unify dynamic rule mechanism provide retract 
live range rule controlled means rule scope automatically retracts rules scope 
provides cleaner way retract rules rules generated retracted 
rules declared outside scope visible 
modeled retract 
visser declarative formulation assert described 
reflection dynamic rules considered restricted form computational reflection 
nearly general general reflection rewriting logic provided maude supports arbitrary manipulation specifications meta level run time 
reflective extension elan proposed 
restricted form reflection effectively implemented compiler require interpretation 
dynamic variables dynamic rules related dynamically scoped variables programming languages 
lisp dynamic scope considered bug implementation 
domain specific languages tex dynamically scoped variables allows easy redefinition behaviour configuration document style influenced redefining macros representing parameters style 
papers reintroduced dynamic scope feature general purpose languages :10.1.1.156.5131
lewis introduce implicit parameters functional languages haskell 
implicit parameters deeply embedded functional definition bound outer level having pass value explicitly intermediate function calls 
hansson introduce dynamic variables imperative setting 
dynamic variable created initialized initial value 
dynamic variable refers setting dynamic variable name 
main difference approaches fact value implicit parameter changed dynamic variable passed site updated 
updating corresponds notion overriding rules generation 
contrast approaches dynamic rules define mappings tuples terms tuples terms bindings context variables left hand side right hand side respectively 
introducing new rule points mapping overlap left hand side variables shadowed rule instances remain visible 
furthermore approaches implicit parameters dynamic variables dynamic rule scope construct separated generation dynamic rules 
entails greater flexibility strategies introduce dynamic rules put different manipulating range scope 
illustrated example various strategies variable renaming reflect different object language scope rules re renaming rules 
visser wadler deforestation algorithm expressed rewrite rules simple strategy 
dynamic rules implement folding recursive occurrences function composition 
requires abstracting object variables supported dynamic rules discussed papers 
currently dynamic rules inherit ground terms definition context 
application need abstraction object variables rule pragmas glasgow haskell compiler allow user state rewrite rules applied compilation addition normal optimizations 
scheme described dynamic rule defines namespace 
order achieve shadowing effects namespaces rules rules undefined 
mixing rules unattractive 
means declaring namespace dependencies rules useful 
tiger transformations defines traversal syntax trees deal peculiarities scope rules variable declarations 
better schema scope rules language captured generic strategy 
requires abstraction dynamic rule names transformations limiting scope dynamic variables 
possible underlying implementation attractive express level language extension 
interesting investigate interaction various optimizations dynamic rules combined single traversal 
dynamic scoping may give rise unexpected behaviour dynamically generated rule calls dynamic rule intended generation time instance rule call time instance change generation call solved invoking generation context general may require closures dynamic rules 
extension term rewriting run time generation context dependent rewrite rules 
generated rules part global tree traversal increasing complexity performing additional traversals 
extension limited specific form program representation control flow graphs applied transformation arbitrary syntax trees 
scoped dynamic rewrite rules solve limitations caused context free nature rewrite rules strengthening separation rules strategies supporting concise elegant specification program visser transformations 
illustrated specification transformations bound variable renaming function inlining dead function elimination 
acknowledgments patricia johann comments previous version 
appel 
modern compiler implementation ml 
cambridge university press 
appel jim 
shrinking lambda expressions linear time 
journal functional programming september 
borovansk kirchner kirchner 
controlling rewriting rewriting 
meseguer editor proceedings international workshop rewriting logic applications volume electronic notes theoretical computer science asilomar pacific grove ca september 
elsevier 
boyle winter 
program transforming system simplifying development numerical software 
arge editors modern software tools scientific computing pages 
birkh user 
van den brand klint 
term rewriting traversal functions 
technical report sen centrum voor wiskunde en informatica 
clavel meseguer 
reflection strategies rewriting logic 
meseguer editor electronic notes theoretical computer science volume 
elsevier science publishers 
proceedings international workshop rewriting logic applications 
pfenning 
declarative alternative assert logic programming 
saraswat ueda editors logic programming proceedings international symposium pages san diego usa 
mit press 
hanson proebsting 
dynamic variables 
programming language design implementation pldi snowbird ut usa june 
acm 
johann visser 
warm fusion stratego case study generation program transformation systems 
annals mathematics artificial intelligence 
visser kirchner 
moreau 
reflective extension elan 
meseguer editor electronic notes theoretical computer science volume 
elsevier science publishers 
proceedings international workshop rewriting logic applications 
launchbury sheard 
warm fusion deriving build recursive definitions 
jones editor functional programming languages computer architecture fpca pages 
acm press june 
lewis launchbury meijer shields 
implicit parameters dynamic scoping static types 
symposium principles programming languages popl pages 
acm january 
maes 
concepts experiments computational reflection 
sigplan notices 
proceedings oopsla 
peyton jones tolmach hoare 
playing rules rewriting practical optimisation technique ghc 
hinze editor haskell workshop firenze italy september 
acm sigplan 
visser 
language independent traversals program transformation 
jeuring editor workshop generic programming ponte de lima portugal july 
technical report uu cs department information computing sciences universiteit utrecht 
visser 
survey strategies program transformation systems 
gramlich lucas editors workshop reduction strategies rewriting programming wrs volume electronic notes theoretical computer science utrecht netherlands may 
elsevier science publishers 
visser 
benaissa tolmach 
building program optimizers rewriting strategies 
acm sigplan notices january 
proceedings international conference functional programming icfp wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 

