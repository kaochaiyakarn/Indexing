evolving neural networks augmenting topologies kenneth stanley cs utexas edu department computer sciences university texas austin austin tx usa risto miikkulainen risto cs utexas edu department computer sciences university texas austin austin tx usa important question neuroevolution gain advantage evolving neural network topologies weights 
method neuroevolution augmenting topologies neat outperforms best fixed topology method challenging benchmark reinforcement learning task 
claim increased efficiency due employing principled method crossover different topologies protecting structural innovation speciation incrementally growing minimal structure 
test claim series ablation studies demonstrate component necessary system 
results significantly faster learning 
neat important contribution gas shows possible evolution optimize solutions simultaneously offering possibility evolving increasingly complex solutions generations strengthening analogy biological evolution 
keywords genetic algorithms neural networks neuroevolution network topologies speciation competing conventions 
neuroevolution ne artificial evolution neural networks genetic algorithms shown great promise complex reinforcement learning tasks gomez miikkulainen gruau moriarty miikkulainen potter whitley :10.1.1.40.6026:10.1.1.40.6026:10.1.1.40.6026
neuroevolution searches space behaviors network performs task 
approach solving complex control problems represents alternative statistical techniques attempt estimate utility particular actions particular states world kaelbling :10.1.1.134.2462
ne promising approach solving reinforcement learning problems reasons 
past studies shown ne faster efficient reinforcement learning methods adaptive heuristic critic learning single pole balancing robot arm control moriarty miikkulainen moriarty 
ne searches behavior value function effective problems continuous high dimensional state spaces 
addition memory easily represented recurrent connections neural networks making ne natural choice learning non markovian tasks gomez miikkulainen 
massachusetts institute technology evolutionary computation stanley miikkulainen traditional ne approaches topology chosen evolving networks experiment begins 
usually network topology single hidden layer neurons hidden neuron connected network input network output 
evolution searches space connection weights topology allowing high performing networks reproduce 
weight space explored crossover network weight vectors mutation single networks weights 
goal fixed topology ne optimize connection weights determine functionality network 
connection weights aspect neural networks contribute behavior 
topology structure neural networks affects functionality 
modifying network structure shown effective part supervised training chen 
great deal interest evolving network topologies weights decade angeline gruau yao :10.1.1.40.6026:10.1.1.40.6026:10.1.1.40.6026
basic question remains evolving topologies weights provide advantage evolving weights fixed topology 
fully connected network principle approximate continuous function cybenko 
waste valuable effort permuting different topologies 
answers provided far inconclusive 
argued network complexity affect speed accuracy learning zhang hlenbein 
assertion true backpropagation algorithm clear applies weights optimized evolution backpropagation 
persuasive argument evolution topology weights put forward gruau 
claimed evolving structure saves time wasted humans trying decide topology networks particular ne problem 
fixed topology ne systems fully connected hidden layer deciding hidden nodes needed trial error process 
gruau supported argument evolving topology weights artificial neural network solved hardest pole balancing benchmark problem date 
results suggested structure necessary solve difficult problem 
fixed topology method called enforced subpopulations esp gomez miikkulainen able solve problem times faster simply restarting random number hidden neurons stuck article aims demonstrate opposite done right evolving structure connection weights significantly enhance performance ne 
novel ne method called neuroevolution augmenting topologies neat designed take advantage structure way minimizing dimensionality search space connection weights 
structure evolved topologies minimized grown incrementally significant gains learning speed result 
improved efficiency results topologies minimized evolution 
evolving structure incrementally presents technical challenges genetic representation allows disparate topologies cross meaningful way 
topological innovation needs generations optimized protected disappear population prematurely 
topologies minimized evolution need specially contrived fitness function measures complexity 
evolutionary computation volume number evolving nn augmenting topologies neat method consists solutions problems described 
method validated pole balancing tasks neat performs times faster cellular encoding times faster esp results show structure powerful resource ne appropriately utilized 
neat unique structures increasingly complex optimal strengthening analogy gas natural evolution 
background systems developed decade evolve neural network topologies weights angeline braun dasgupta mcgregor fullmer miikkulainen gruau krishnan lee kim maniezzo opitz shavlik poli yao liu zhang hlenbein :10.1.1.12.4114:10.1.1.40.6026:10.1.1.40.6026:10.1.1.40.6026:10.1.1.121.3039:10.1.1.17.9553:10.1.1.17.9553
methods encompass range ideas topology weight evolving artificial neural networks implemented 
section address ideas assumptions design offer solutions unsolved problems 
goal find neuroevolution method evolution topology increase efficiency 
encoding question encode networks efficient genetic representation addressed 
discuss prototypical representational schemes 
divided direct encoding indirect 
direct encoding schemes employed specify genome connection node appear phenotype angeline braun dasgupta mcgregor fullmer miikkulainen krishnan lee kim maniezzo opitz shavlik poli yao liu zhang hlenbein :10.1.1.12.4114:10.1.1.121.3039
contrast indirect encodings usually specify rules constructing phenotype gruau :10.1.1.17.9553
rules layer specifications growth rules cell division 
indirect encoding allows compact representation direct encoding connection node specified genome derived 
binary encoding direct encodings usually require simpler implementations indirect encodings 
simplest implementation traditional bit string representation gas 
example dasgupta mcgregor encoding method called structured genetic algorithm sga bit string represents connection matrix network 
sga notable simplicity allowing operate standard ga limitations 
size connectivity matrix square number nodes 
representation blows large number nodes 
second size bit string organisms maximum number nodes connections chosen human running system maximum sufficient experiment repeated 
third linear string bits represent graph structure difficult ensure crossover yield useful combinations 
evolutionary computation volume number stanley miikkulainen graph encoding bit strings natural representation networks encodings represent graph structures explicitly 
poli dual representation scheme allow different kinds crossover parallel distributed genetic programming system 
representation graph structure 
second linear genome node definitions specifying incoming outgoing connections 
idea different representations appropriate different kinds operators 
subgraph swapping crossovers topological mutations grid point crossovers connection parameter mutations linear representation 
sga finite limit number nodes network corresponding number nodes dimensional grid represents graph version genome 
uses graph encoding subgraphs swapped crossover 
subgraph swapping representative prevailing philosophy subgraphs functional units swapping sense preserves structure functional components 
sure particular subgraphs combined right ones create functional offspring 
crossover networks different topologies frequently lead loss functionality researchers crossover altogether called evolutionary programming yao liu :10.1.1.12.4114
angeline 
implemented system called generalized acquisition recurrent links commenting prospect evolving connectionist networks crossover appears limited general uses graph encoding fundamentally different issue crossover entirely 
demonstrates need crossover leaving problem demonstrating advantages crossover methods 
indirect encoding gruau cellular encoding ce method example system utilizes indirect encoding network structures 
ce genomes programs written specialized graph transformation language 
transformations motivated nature specify cell divisions 
different kinds connectivities result division kinds cell divisions possible 
major advantage ce genetic representations compact 
genes ce reused multiple times development network time requesting cell division different location 
ce shows cell divisions encode development networks single cell organisms nature single cell differentiates splits cells 
ce demonstrates possible evolve developmental systems chose direct encoding neat braun argue indirect encoding requires detailed knowledge genetic neural mechanisms words indirect encodings map directly phenotypes bias search unpredictable ways 
indirect encodings need understand sure focus search suboptimal class topologies 
experimental results suggest ce necessarily efficient direct encoding methods section 
evolutionary computation volume number crossovers missing information evolving nn augmenting topologies competing conventions problem 
networks compute exact function hidden units appear different order represented different chromosomes making incompatible crossover 
shows single point recombinations missing main components solution 
depicted networks possible permutations hidden unit orderings 
turn specific problems address turn 
competing conventions main problems ne competing conventions problem montana davis schaffer known permutations problem radcliffe 
competing conventions means having way express solution weight optimization problem neural network 
genomes representing solution encoding crossover produce damaged offspring 
depicts problem simple hidden unit network 
hidden neurons represent general solution 
different permutations 
permutations crosses critical information lost 
example crossing result representation lost third information parents 
general hidden units 
functionally equivalent solutions 
problem complicated differing conventions share functional interdependence difficult form competing conventions networks represent similar solutions entirely different topologies genomes different sizes 
satisfy strict constraints kinds topologies produce proposed solutions competing conventions problem fixed constrained topology networks nonredundant genetic encoding thierens apply 
radcliffe goes far calling integrated scheme combining connectivity weights holy grail evolutionary computation volume number stanley miikkulainen area attempted address problem assuming subnetworks represent functional units recombined different topologies may subnetworks case meaningful combination substructures exists 
main intuition neat originates fundamental problem representing different structures representations necessarily match 
genomes different sizes 
times genes exact position different chromosomes may expressing completely different traits 
addition genes expressing trait may appear different positions different chromosomes 
complications resolved 
nature faces similar problem gene alignment sexual reproduction 
genomes nature fixed length 
evolution single cells complex organisms new genes added genomes process called gene amplification watson 
new genes just randomly insert positions genome indication gene life probably succeeded competing conventions problem huge chunk offspring 
needed way keep crossover orderly right genes crossed right genes 
nature solution utilizes homology genes homologous alleles trait 
example coli process called special protein called goes lines homologous genes genomes crossover occurs sigal alberts 
actual homology neural networks easily ascertained direct structural analysis competing conventions problem 
main insight neat historical origin genes direct evidence homology genes share origin 
neat performs artificial historical markings allowing add new structure losing track gene course simulation 
protecting innovation speciation innovation takes place adding new structure networks mutation 
frequently adding new structure initially causes fitness network decrease 
example adding new node introduces nonlinearity adding new connection reduce fitness weight chance optimize 
new node connection just happens express useful function soon introduced 
generations required optimize new structure 
unfortunately initial loss fitness caused new structure innovation survive population long optimized 
necessary protect networks structural innovations chance new structure 
system addresses problem protecting innovation adding nonfunctional structure 
node added genome connections hopes useful connections develop 
nonfunctional structures may connecting functional network adding extraneous parameters search 
nature different structures tend different species compete different niches 
innovation implicitly protected niche 
similarly networks innovative structures isolated species evolutionary computation volume number evolving nn augmenting topologies chance optimize structures having compete population large 
speciation known niching studied gas usually applied neuroevolution 
speciation commonly applied multimodal function optimization mahfoud function multiple optima ga species find optima 
speciation applied cooperative coevolution modular systems multiple solutions darwen yao potter de jong 
speciation requires compatibility function tell genomes species 
difficult formulate compatibility function networks different topologies may reason speciation brought 
competing conventions problem measuring compatibility particularly problematic networks compute function appear different 
neat solution competing conventions problem historical information genes population neat easily 
explicit fitness sharing forces individuals similar genomes share fitness payoff goldberg richardson 
original implicit version fitness sharing introduced holland grouped individuals performance similarity genetic similarity 
explicit version appropriate allows grouping networks topology weight configurations 
result sharing fitness number networks exist population single fitness peak limited size peak 
population divides number species different peak threat species 
explicit fitness sharing suited neat similarity easily measured historical information genes 
innovations neat protected species 
initial populations topological innovation systems initial population collection random topologies 
population ensures topological diversity start 
random initial populations turn produce problems 
example direct encoding schemes chance network path inputs outputs 
infeasible networks take time weed population 
subtle serious problem starting randomly 
experiments confirm section desirable evolve minimal solutions way number parameters searched reduced 
starting random topologies lead finding minimal solutions population starts unnecessary nodes connections 
nodes connections withstand single evaluation meaning justification configuration 
minimization networks spent getting rid apparatus place process recombining different topologies pushes minimization 
fitness cost creating larger networks dominate long high fitness 
way force minimal topologies incorporate network size fitness function zhang hlenbein 
methods larger networks fitnesses penalized 
altering evolutionary computation volume number stanley miikkulainen genome genotype node genes connect 
genes node sensor node sensor weight enabled node sensor weight disabled network phenotype node output node hidden weight enabled weight enabled genotype phenotype mapping example 
genotype depicted produces shown phenotype 
input nodes hidden output node connection definitions recurrent 
second gene disabled connection specifies nodes expressed phenotype 
fitness function way encourage smaller networks difficult know large penalty particular network size particularly different problems may significantly different topological requirements 
altering fitness function ad hoc may cause evolution perform differently designer original unmodified fitness function intended 
alternative solution neuroevolution method tend minimality 
population begins hidden nodes grows structure benefits solution need ad hoc fitness modification minimize networks 
starting minimal population growing structure design principle neat 
starting minimally neat ensures system searches solution lowest dimensional weight space possible course generations 
goal minimize final product intermediate networks way 
idea key gaining advantage evolution topology allows minimize search space resulting dramatic performance gains 
reason current start minimally topological diversity initial population topological innovations survive 
problem protecting innovation addressed methods networks major structural additions reproduce 
population enables starting minimally neat 
neuroevolution augmenting topologies neat weight weight weight enabled enabled enabled neat method described detail section consists putting ideas developed previous section system 
explaining evolutionary computation volume number dis mutate add connection evolving nn augmenting topologies dis dis dis dis mutate add node types structural mutation neat 
types adding connection adding node illustrated connection genes network shown phenotypes 
top number genome innovation number gene 
innovation numbers historical markers identify original historical ancestor gene 
new genes assigned new increasingly higher numbers 
adding connection single new connection gene added genome available innovation number 
adding new node connection gene split disabled new connection genes added genome 
new node new connections 
new node gene depicted representing new node added genome 
genetic encoding neat continue describing components specifically address problems 
genetic encoding neat genetic encoding scheme designed allow corresponding genes easily lined genomes cross mating 
genomes linear representations network connectivity 
genome includes list connection genes refers node genes connected 
node genes provide list inputs hidden nodes outputs connected 
connection gene specifies node node weight connection connection gene expressed enable bit innovation number allows finding corresponding genes explained 
mutation neat change connection weights network structures 
connection weights mutate ne system connection perturbed generation 
structural mutations occur ways 
mutation expands size genome adding gene 
add connection mutation single new connection gene random weight added connecting previously unconnected nodes 
add node mutation existing connection evolutionary computation volume number stanley miikkulainen split new node placed old connection 
old connection disabled new connections added genome 
new connection leading new node receives weight new connection leading receives weight old connection 
method adding nodes chosen order minimize initial effect mutation 
new nonlinearity connection changes function slightly new nodes immediately integrated network opposed adding extraneous structure evolved network 
way speciation network time optimize new structure 
mutation genomes neat gradually get larger 
genomes varying sizes result different connections positions 
complex form competing conventions problem numerous differing topologies weight combinations inevitable result allowing genomes grow unbounded 
ne cross differently sized genomes sensible way 
section explains neat addresses problem 
tracking genes historical markings information evolution tells exactly genes match genes individuals topologically diverse population 
information historical origin gene 
genes historical origin represent structure possibly different weights derived ancestral gene point past 
system needs know genes line keep track historical origin gene system 
tracking historical origins requires little computation 
new gene appears structural mutation global innovation number incremented assigned gene 
innovation numbers represent chronology appearance gene system 
example say mutations occurred system 
new connection gene created mutation assigned number new connection genes added new node mutation assigned numbers 
genomes mate offspring inherit innovation numbers gene innovation numbers changed 
historical origin gene system known evolution 
possible problem structural innovation receive different innovation numbers generation occurs chance 
keeping list innovations occurred current generation possible ensure structure arises independent mutations generation identical mutation assigned innovation number 
resultant explosion innovation numbers 
historical markings give neat powerful new capability 
system knows exactly genes match 
crossing genes genomes innovation numbers lined 
genes called matching genes 
genes match disjoint excess depending occur outside range parent innovation numbers 
represent structure genome 
composing offspring genes randomly chosen parent matching genes excess disjoint genes included fit parent 
way historical markings allow neat perform crossover linear genomes evolutionary computation volume number evolving nn augmenting topologies parent parent parent disjoint disjoint disjoint parent excess excess offspring matching genomes different network topologies innovation numbers 
parent parent look different innovation numbers shown top gene tell genes match 
topological analysis new structure combines overlapping parts parents different parts created 
matching genes inherited randomly disjoint genes match middle excess genes match inherited fit parent 
case equal fitnesses assumed disjoint excess genes inherited randomly 
disabled genes may enabled generations preset chance inherited gene disabled disabled parent 
need expensive topological analysis 
adding new genes population sensibly mating genomes representing different structures system form population diverse topologies 
turns population maintain topological innovations 
smaller structures optimize faster larger structures adding nodes connections usually initially decreases fitness network augmented structures little hope surviving generation innovations represent crucial solving task long run 
solution protect innovation population explained section 
protecting innovation speciation population allows organisms compete primarily niches population large 
way topological innovations evolutionary computation volume number stanley miikkulainen protected new niche time optimize structure competition niche 
idea divide population species similar topologies species 
task appears topology matching problem 
turns historical markings offer efficient solution 
number excess disjoint genes pair genomes natural measure compatibility distance 
disjoint genomes evolutionary history share compatible 
measure compatibility distance different structures neat simple linear combination number excess disjoint genes average weight differences matching genes including disabled genes 
coefficients allow adjust importance factors factor number genes larger genome normalizes genome size set genomes small consist fewer genes 
distance measure allows compatibility threshold ordered list species maintained 
generation genomes sequentially placed species 
existing species represented random genome inside species previous generation 
genome current generation placed species compatible representative genome species 
way species overlap 
compatible existing species new species created representative 
reproduction mechanism neat explicit fitness sharing goldberg richardson organisms species share fitness niche 
species afford big organisms perform 
species take entire population crucial evolution 
adjusted fitness organism calculated distance organism population fi sh 
sharing function sh set distance threshold sh set spears 
sh reduces number organisms species organism reduction natural species clustered compatibility threshold species assigned potentially different number offspring proportion sum ad fitnesses member organisms 
species reproduce eliminating lowest performing members population 
entire population replaced offspring remaining organisms species 
net desired effect population protect topological innovation 
final goal system perform search solution efficiently possible 
goal achieved minimizing dimensionality search space 
possible determine compatibility genome species average compatibility genome species practice comparing genome sufficient takes constant time 
rare cases fitness entire population improve generations top species allowed reproduce search promising spaces 
evolutionary computation volume number evolving nn augmenting topologies minimizing dimensionality incremental growth minimal structure discussed section typically start initial population random topologies order introduce diversity outset 
contrast neat biases search minimal dimensional spaces starting uniform population networks zero hidden nodes inputs connect directly outputs 
new structure introduced incrementally structural mutations occur structures survive useful fitness evaluations 
words structural elaborations occur neat justified 
population starts minimally dimensionality search space minimized neat searching fewer dimensions fixed topology ne systems 
minimizing dimensionality gives neat performance advantage compared approaches discussed 
performance evaluations evaluate system performance order answer questions neat evolve necessary structures 
neat find solutions efficiently neuroevolution systems 
question establishes topology building happens neat reliable way meaning neat grow new structure cope problems require 
reason neat applied problem building xor network 
task simple requires growing hidden units serves simple test method 
second question answered course successively difficult pole balancing tasks objective balance poles attached cart moving cart appropriate directions keep pole falling 
pole balancing benchmark task different systems available comparison 
difficult problem balancing poles velocity information non markovian task provides strong evidence evolving augmenting topologies interesting capacity find structures efficient difficult control tasks 
parameter settings experimental settings experiments tuned specifically particular problem 
exception hardest pole balancing problem double pole velocities larger population size match systems task 
neat system parameters sensitive population size altered accordingly 
experiments population population neat networks 
coefficients measuring compatibility 
increased order allow finer distinctions species weight differences larger population room species 
experiments room larger weight significance coefficient 
maximum fitness species improve generations networks species allowed reproduce 
champion species networks copied generation unchanged 
chance genome having connection weights mutated case weight chance uniformly perturbed chance assigned new random value 
system tolerant frequent mutations protection speciation pro evolutionary computation volume number stanley miikkulainen vides 
chance inherited gene disabled disabled parent 
generation offspring resulted mutation crossover 
mating rate 
smaller populations probability adding new node probability new link mutation 
larger population probability adding new link larger population tolerate larger number prospective species greater topo logical diversity 
modified sigmoidal transfer function nodes 
sigmoid allows fine tuning extreme activations 
optimized close linear steepest ascent activations 
parameter values experimentally links need added significantly nodes average weight difference significant disjoint excess gene 
performance robust moderate variations values 
verification evolving xors xor linearly separable neural network requires hidden units solve 
inputs combined hidden unit opposed output node function linear combination inputs separate inputs proper classes 
structural requirements xor suitable testing neat ability evolve structure 
example neat method adding new nodes destructive allow new nodes get population 
find local champion wrong kind connectivity dominates population systems fails evolve proper connectivity 
third changing structure renders past connection weight values obsolete 
algorithm trouble enlarging topologies largely specialized 
experiment meant show neat impeded potential obstacles grow structure efficiently consistently needed 
compute fitness distance output correct answer summed input patterns 
result error subtracted higher fitness reflect better network structure 
resulting number squared give proportionally fitness closer network solution 
initial generation consisted networks hidden units 
networks inputs bias unit output 
bias unit input set 
connection genes genome initial population 
genes connected inputs output connected bias output 
connection gene received random connection weight 
runs experiment shows neat system finds structure xor average generations networks evaluated std 
average solution network hidden nodes connection genes 
number nodes connections close optimal considering smallest possible network single hidden unit 
neat consistent finding solution 
fail simulations 
worst performance took evaluations generations compared generations average 
standard deviation number nodes solution meaning neat consistently hidden nodes build xor network 
neat solves xor problem trouble doing keeps topology small 
xor problem demonstrate performance prior algorithms 
unfortunately quantitative performance comparisons dif evolutionary computation volume number evolving nn augmenting topologies bias bias initial phenotype optimal xor 
shows phenotype entire initial population 
notice hidden nodes 
neat bias node connect node inputs 
shows optimal solution hidden node 
network hidden nodes compute xor 
bias connections needed depending solution connections necessary 
optimal hidden node solution runs 
average solution hidden nodes standard deviation nodes 
domain methodologies vary widely experiments dasgupta mcgregor poli yao shi zhang hlenbein 
xor simple artificial challenge modern methods way real world problems 
turn benchmark problems substantial performance comparisons possible 
pole balancing benchmark task control learning tasks techniques employed neat difference 
potential applications robot navigation game playing problems known solutions 
pole balancing domain comparison known benchmark literature possible demonstrate effectiveness neat compared 
surrogate real problems part pole balancing fact real task difficulty adjusted 
earlier comparisons done single pole moriarty miikkulainen version task easy modern methods 
balancing poles simultaneously hand challenging current methods 
demonstrate advantage evolving structure double pole balancing experiments 
poles connected moving cart hinge neural network apply force cart keep poles balanced long possible going boundaries track 
system state defined cart position velocity pole position angular velocity second pole position angular velocity 
control possible poles different lengths respond differently control inputs 
standard reinforcement learning methods applied task anderson 
limit comparisons evolutionary computation volume number phenotype genomes initial population phenotype smallest possible solution hidden nodes stanley miikkulainen ne methods reasons focus developing demonstrating better performance evolving neural networks ne methods comparison outperformed reinforcement learning methods prior comparisons pole balancing task moriarty miikkulainen 
question evolving structure lead greater ne performance 
pole balancing comparisons set pole balancing experiments described wieland gomez miikkulainen 
runge kutta fourth order method implement dynamics system step size 
state variables scaled fed network 
networks output force seconds poles long 
initial position long pole short pole upright track meters long 
versions double pole balancing task velocity inputs included velocity information 
task markovian allows comparing different systems 
away velocity information task difficult network estimate internal state lieu velocity requires recurrent connections 
double pole balancing velocity problem neat compared published results ne systems 
represent standard population approaches 
saravanan fogel evolutionary programming relies entirely mutation connection weights wieland mating mutation 
second systems sane moriarty miikkulainen esp gomez miikkulainen evolved populations neurons population network blueprints specifies build networks neurons assembled fixed topology networks evaluation 
topologies fixed individual neurons placed slots neural networks compose 
sane maintains single population neurons 
esp improves sane maintaining separate population hidden neuron position complete network 
knowledge results esp best achieved far task 
double pole balancing velocity problem neat compared systems demonstrated able solve task ce esp success ce attributed ability evolve structures 
esp fixed topology ne system able complete task times faster simply restarting random number hidden nodes got stuck 
experiments attempt show evolution structure lead better performance done right 
double pole balancing velocities criteria success task keeping poles balanced time steps minutes simulated time 
pole considered balanced degrees vertical 
fitness task measured number time steps poles remained balanced 
table shows neat takes fewest evaluations complete task difference neat esp statistically significant 
ne systems evolved networks hidden nodes neat solutions hidden nodes 
clear neat minimization evolutionary computation volume number evolving nn augmenting topologies table double pole balancing velocity information 
evolutionary programming results obtained saravanan fogel 
conventional neuroevolution data reported wieland 
sane esp results reported gomez miikkulainen 
addition gruau 
reported evaluations task results directly comparable different fitness function equations 
neat results averaged experiments 
results averages runs 
standard deviation neat evaluations evaluations 
standard deviations methods reported assume similar variances differences statistically significant neat esp method evaluations generations 
nets ev 
programming conventional ne sane esp neat dimensionality working problem 
result important shows neat performs esp finding minimal solutions 
double pole balancing velocities gruau 
introduced special fitness function problem prevent system solving task simply moving cart back forth quickly keep poles air 
solution require computing missing velocities 
ce esp evaluated special fitness function neat uses task 
fitness penalizes oscillations 
sum fitness component functions 
functions defined time steps 
xi number time steps poles remain balanced total time steps 
denominator represents sum offsets center rest cart long pole 
computed summing absolute value state variables representing cart long pole positions velocities 
minimizing offsets damping oscillations system maximize fitness 
fitness function swinging poles penalized forcing system internally compute hidden state variables 
gruau criteria solution champion generation tested generalization sure robust 
test takes lot time fitness test applied champion 
addition balancing poles time steps winning controller balance poles different initial states times steps 
number successes called generalization performance solution 
order count solution network needs generalize initial states 
start state chosen evolutionary computation volume number stanley miikkulainen table double pole balancing velocity information 
ce cellular encoding gruau 

esp enforced subpopulations gomez miikkulainen 
results averages simulations 
standard deviation neat evaluations 
assuming similar variances ce esp differences number evaluations significant 
generalization results cases simulation significantly different 
method evaluations generalization 
nets ce esp neat giving state variable values scaled range input variable 
generation neat performs generalization test champion highest performing species improved generation 
table shows neat fastest system challenging task 
neat takes times fewer evaluations gruau original benchmark showing way structure evolved significant impact performance 
neat times faster esp showing structure evolution perform better evolution fixed topologies 
significant difference ability methods generalize 
neat faster esp difficult task difference easier task 
reason task velocities esp needed restart average times solution neat needed restart 
restarts factored systems perform similar rates 
best characterization difference neat reliable avoiding deception 
neat evolves different structures simultaneously different species representing space different dimensionality 
neat trying different ways solve problem get stuck 
experimental results demonstrate neat evolve structure necessary neat gains significant performance advantage doing 
turn understanding system works solves problems evolving population diverse topologies raised 
analysis neat argued neat performance due historical markings speciation incremental growth minimal structure 
order verify contribution component performed series 
addition introduce new species visualization technique order better understand dynamics system 
meant establish component neat necessary performance 
example possible growth minimal structure really important rest system speciation historical markings sufficient neat optimal performance 
hypothesis checked growth starting minimal structure system 
evolutionary computation volume number evolving nn augmenting topologies table neat summary 
table compares average number evaluations solution double pole balancing velocities task 
ablation leads weaker algorithm showing component necessary 
method evaluations failure rate growth neat fixed topologies neat initial random neat neat full neat hand situation opposite speciation buys protecting innovation important argued 
hypothesis checked speciation system 
claimed neat able crossover genomes neat different sizes 
point controversial 
example angeline 
claimed crossover harm 
check hypothesis crossover system 
reason historical markings directly historical markings system conventional ne system 
historical markings basis function neat speciation uses compatibility operator historical markings crossover possible 
system components systematically 
setup significant detrimental effect performance potentially point system solve task 
double pole balancing velocities task ablation studies 
task complex interesting hard systems 
possible compare versions system system 
settings double pole balancing velocities experiment 
results averages runs full neat averages runs neat fast allow runs 
results table shows results terms average evaluations required find solution 
averages table exclude trials failed find solution generations 
failure rate denotes failures occurred ablation 
main result system performs significantly worse ablation 
explain ablation performed interpret results 
growth ablation populations neat start hidden nodes simply removing growth system disable neat barring hidden nodes networks 
ne systems structures fixed start fully connected hidden layer neurons wieland 
experiment fair growth ablation allowed start fully connected hidden layer 
genome specified evolutionary computation volume number stanley miikkulainen growth starting minimally historical marking speciation dependencies neat components 
strong interdependencies identified different components neat 
hidden units fixed topology methods task saravanan fogel wieland 
growth neat able weight differences 
generations find solution system find solution time 
find solution took times evaluations full neat 
clearly speciation historical markings account full neat performance 
initial random ablation neat typically start random population angeline gruau yao :10.1.1.40.6026:10.1.1.40.6026:10.1.1.40.6026
structures systems grow cases bound 
possible growth necessary starting minimally 
examined question starting evolution random topologies 
network initial population received hidden neurons random connectivity implemented poli 
result random starting neat times slower full neat average 
random starting system failed find solution generations time 
result suggests starting randomly forces ne search higherdimensional spaces necessary wasting time 
topologies grow start small possible 
ablation argued speciation important protects innovation allows search proceed different spaces simultaneously 
test claim speciation system 
done changed system structural innovations survive causing networks stuck minimal form 
speciation ablation meaningful neat started initial random population 
way variety structures exist population speciation necessary attain structural diversity 
resulting neat able find solutions failed attempts 
solution times slower average full neat 
reason dramatic slowdown speciation population quickly converges topology happens initially perform best 
lot diversity drained immediately generations 
average initially evolutionary computation volume number evolving nn augmenting topologies best performing topology hidden nodes 
population tends converge relatively high dimensional search space smaller networks initial population optimized faster 
smaller networks just get chance small offers immediate advantage initially random weight space 
course small networks perform allowing solution quickly 
networks early accounts large standard deviation evaluations 
result shows growth speciation sufficient account neat performance 
growth succeed requires speciation speciation gives different structures chance optimize niches 
neat ablation removed mating neat 
ablation tests claim crossover useful technique 
neat method crossover works neat perform significantly better mating mutation mutation 
total simulations run crossover disabled settings 
took average evaluations find solution mating compared mating enabled 
difference statistically significant 
clear mating contribute done right 
version neat significantly faster 
ablation important parts neat 
system historical markings neat functions utilize historical markings 
growth minimal structure removed speciation longer help neat find spaces minimal dimensionality 
speciation removed growth minimal structures proceed structural innovations survive 
system starts population random topologies speciation system quickly converges topology just happens best networks initial population 
component necessary neat 
visualizing speciation ablation studies demonstrate speciation necessary part system 
understand innovation takes place neat important understand dynamics speciation 
species form course run 
new species arise 
species die 
large species get 
answer questions depicting speciation visually time 
depicts typical run double pole balancing velocities task 
run task took generations complete slightly average 
visualization successive generations shown top bottom 
species depicted horizontally generation width species proportional size corresponding generation 
species divided white lines new species arrive right hand side 
species bright fitness fit member standard deviation mean fitness run indicating species highly promising 
species bright standard deviations mean suggesting species close solution 
possible follow species evolutionary computation volume number stanley miikkulainen visualizing speciation run double pole balancing velocity information task 
species close solution soon th generation 
time oldest species extinct 
inception run 
shows initial minimal topology species species population th generation 
recall species computed system compatibility distance metric indicating generation organisms sufficiently compatible grouped single species 
visualization shows initial species shrinks dramatically order room new species 
species observed extinct run 
species extinct see white triangle generation expired generation 
run initial species extinct st generation shrinking long time 
unable compete newer innovative species 
second species appear population met similar fate th generation 
st generation structural mutation second oldest surviving species connected long pole angle sensor hidden node previously connected cart position sensor 
gave networks species new capability combine observations leading significant boost fitness brightening species 
innovative species subsequently expanded take population 
nearly simultaneously nd generation younger species useful connection time short pole velocity sensor long pole angle sensor leading subsequent expansion 
th generation species pivotal connection cart evolutionary computation volume number evolving nn augmenting topologies position established method comparing short pole velocity long pole angle 
innovation solve problem generation additional weight mutations 
final generation winning species generations old included neural networks population 
species come close solution survived run fell significantly st generation 
observation important visually demonstrates innovation protected 
winning species take entire population 
ablation studies confirm interdependence neat components speciation visualization offers means visualizing dynamics system 
turn discussion advantages shortcomings method potential 
discussion neat presents advances evolution neural networks 
historical markings neat offers solution problem competing conventions population diverse topologies 
neat demonstrates meaningful metric comparing clustering similar networks easily derives availability historical information population costly topological analysis necessary mate networks 
ablation studies confirm hypothesis starting population minimal topologies advantageous 
performance comparisons suggest evolution structure gain efficiency evolution fixed topologies 
parallel drawn structure evolution neat incremental evolution gomez miikkulainen wieland :10.1.1.12.6377
incremental evolution method train system solve harder tasks normally training incrementally challenging tasks 
ne get stuck local optimum attempting solve harder task directly 
solving easier version task population part fitness space closer solution harder task allowing avoid local optima 
adding structure solution analogous solution easy task starting point evolving solution harder task 
network structure addition optimized lower dimensional space 
structure added network increments complex space close solution 
difference incrementality adding structure general incremental evolution adding structure automatic neat sequence progressively harder tasks requires human design 
key insight neat ultimate structure solution really matters structure intermediate solutions way finding solution 
connectivity intermediate solution represents parameter space evolution optimize connections parameters need optimized 
amount structure minimized evolution dimensionality spaces explored leading significant performance gains 
illustrates advantage evolving minimal structures picture elegant solution task 
evolved solutions displayed pattern weights direct connections input nodes output nodes 
connections nodes inhibitory nodes excitatory 
neat evolved recurrent loop single evolutionary computation volume number stanley miikkulainen neat solution problem 
clever solution works derivative difference pole angles 
recurrent connection single hidden node determines poles falling away 
solution allows controlling system computing velocities pole separately 
evolving structure difficult discover subtle compact solutions 
starting minimally discovering compact solutions 
output node solution networks 
solutions recurrent connection excitatory served maintain continuity actions 
general theme solutions included varying degrees structural elaborations utilizing zero hidden nodes 
example solution shown uses hidden node determine poles moving away 
basic underlying structure solutions suggests proper minimal foundation discovered variety paths open solution 
order minimize structure evolution neat incrementally elaborates structure stochastic manner minimal starting point 
speciation useful elaborations survive initially detrimental 
neat strengthens analogy gas natural evolution performing optimizing function evolution complexifying function allowing solutions incrementally complex time optimal 
complexifying function neat unique gas 
gas proposed bit string chromosomes increase length indefinitely harvey neat goes gradual uniform growth genome size 
harvey method increases size chromosome incrementally entire population neat simultaneously searches different landscapes complexifying different ways 
search incrementally increasing complexity offers possibly powerful new approach problem competitive coevolution 
competitive coevolution increasingly sophisticated strategies evolved allowing networks evolutionary computation volume number evolving nn augmenting topologies population compete 
hope arms race force opponents continually evolve strategies better strategies networks population 
method useful produce high level strategies tactics need expert player teach system 
ideally strategies sophisticated evolution progresses 
evolution tends find simplest solutions win meaning strategies oscillate different idiosyncratic uninteresting variations darwen rosin belew 
hypothesize competitive coevolution converges dominant strategy improved takes entire set connection weight values represent strategy 
altering weights means altering strategy building complexifying strategy 
new strategy take hold win different previous dominant strategy sophisticated 
contrast neat evolve increasingly sophisticated strategies continually soon population converges new dominant strategy new connections new nodes added current strategy 
new structure means new expressive space elaborating existing strategy replacing 
approach allows continual coevolution innovation dominant strategies 
addition different strategies different species protected multiple dominant continually complex strategies 
addition continual coevolution evolution structure allow integration separate expert neural networks 
example suppose neural network kick ball goal position field network dribble ball field losing control 
networks play soccer 
combine expertise get soccer player 
combining controllers simple matter processing outputs 
just robot dribble shoot mean knows dribble shoot 
shooting dribbling affect 
dribble affects easy shot shooting forces robot dribbling 
order optimally combine skills hidden nodes networks share information new combined expert intelligent decisions combine skills effectively 
hypothesize neat capability searching right interconnections distinct networks create integrated takes advantage expertise component networks 
establish characterization neat best suited 
experimental results show difference esp neat significantly higher hardest pole balancing task 
result implies evolving diverse topologies particularly suited problems methods get stuck 
problems may deceptive meaning local optima large basins attraction compared global optima global optima significantly different local optima goldberg 
neat add structure necessarily trapped current weights networks represent local optimum fitness space 
adding additional structure neat adds new dimensions weight space opening potential new avenues escape 
plan test neat problems varying fitness landscapes get better idea kinds problems method tackles best 
evolutionary computation volume number stanley miikkulainen main neat powerful method artificially evolving neural networks 
neat demonstrates evolving topology weights major advantage 
experimental comparisons verify evolution times efficient neuroevolution methods far 
ablation studies show historical markings protection innovation speciation incremental growth minimal structure produce system capable evolving solutions minimal complexity 
neat strengthens analogy gas natural evolution optimizing complexifying solutions simultaneously 
believe capacity solutions course evolution offers possibility continual competitive coevolution evolution combinations experts 
acknowledgments research supported part national science foundation iis texas higher education coordinating board arp 
gomez providing pole balancing code michael shao pointers biology literature 
anderson 

learning control inverted pendulum neural networks 
ieee control systems magazine 
angeline saunders pollack 

evolutionary algorithm constructs recurrent neural networks 
ieee transactions neural networks 


evolutionary algorithms neural network design training 
editor proceedings nordic workshop genetic algorithms applications pages university press finland 
braun 

evolving feedforward neural networks 
albrecht reeves steele editors proceedings international conference artificial neural networks genetic algorithms pages springer verlag innsbruck 
chen 

constructive learning recurrent neural networks 
petsche judd hanson editors computational learning theory natural learning systems iii 
mit press cambridge massachusetts 
cybenko 

approximation superpositions sigmoidal function 
mathematics control signals systems 


speculations early course evolution 
proceedings national academy sciences usa 
darwen 

evolutionary learning automatic modularisation speciation 
ph thesis school computer science university college university new south wales sydney australia 
darwen yao 

automatic modularization speciation 
proceedings ieee international conference evolutionary computation icec pages nagoya ieee press piscataway new jersey 
dasgupta mcgregor 

designing application specific neural networks structured genetic algorithm 
whitley schaffer editors proceedings international conference combinations genetic algorithms neural networks pages ieee press piscataway new jersey 
evolutionary computation volume number evolving nn augmenting topologies fullmer miikkulainen 

marker genetic encoding neural networks evolve finite state behaviour 
varela bourgine editors practice autonomous systems proceedings european conference artificial life pages mit press cambridge massachusetts 
goldberg 

genetic algorithms search optimization machine learning 
addison wesley reading massachusetts 
goldberg richardson 

genetic algorithms sharing multimodal function optimization 
grefenstette editor proceedings second international conference genetic algorithms pages morgan kaufmann san francisco california 
gomez miikkulainen 

incremental evolution complex general behavior 
adaptive behavior 
gomez miikkulainen 

solving non markovian control tasks neuroevolution 
dean editor proceedings sixteenth international joint conference artificial intelligence pages morgan kaufmann san francisco california 
gomez miikkulainen 

learning robust nonlinear control neuroevolution 
technical report ai department computer sciences university texas austin austin texas 
gruau 

genetic synthesis modular neural networks 
forrest editor proceedings fifth international conference genetic algorithms pages morgan kaufmann san francisco california 
gruau whitley 

comparison cellular encoding direct encoding genetic neural networks 
koza editors genetic programming proceedings annual conference pages mit press cambridge massachusetts 
harvey 

artificial evolution adaptive behavior ph thesis school cognitive computing sciences university sussex sussex uk 
holland 

adaptation natural artificial systems introductory analysis applications biology control artificial intelligence 
university michigan press ann arbor michigan 
kaelbling littman moore 

reinforcement learning survey 
journal artificial intelligence 
krishnan 

delta new approach training neural networks genetic algorithms 
tsoi downs editors proceedings australian conference neural networks pages university queensland brisbane australia 
lee 
kim 

evolutionary ordered neural network linked list encoding scheme 
proceedings ieee international conference evolutionary computation pages ieee press piscataway new jersey 
mahfoud 

niching methods genetic algorithms ph thesis department general engineering illigal report university illinois urbana champaign urbana illinois 


representation evolution neural networks 
albrecht reeves steele editors artificial neural nets genetic algorithms pages springer verlag new york new york 
maniezzo 

genetic evolution topology weight distribution neural networks 
ieee transactions neural networks 
evolutionary computation volume number stanley miikkulainen montana davis 

training feedforward neural networks genetic algorithms 
sridharan editor proceedings eleventh international joint conference artificial intelligence pages morgan kaufmann san francisco california 
moriarty 

symbiotic evolution neural networks sequential decision tasks 
ph thesis department computer sciences university texas austin 
technical report ut ai 
moriarty miikkulainen 

efficient reinforcement learning symbiotic evolution 
machine learning 
moriarty miikkulainen 

forming neural networks efficient adaptive evolution evolutionary computation 
opitz shavlik 

connectionist theory refinement genetically searching space network topologies 
journal artificial intelligence research 


reinforcement learning control actions noisy non markovian domains 
technical report unsw cse tr school computer science engineering university new south wales sydney australia 
potter de jong 

evolving neural networks collaborative species 
oren editors proceedings summer computer simulation conference pages society computer simulation san diego california 
potter de jong grefenstette 

coevolutionary approach learning sequential decision rules 
eshelman editor proceedings sixth international conference genetic algorithms pages morgan kaufmann san francisco california 
poli 

evolving topology weights neural networks dual representation 
special issue evolutionary learning applied intelligence journal 
radcliffe 

genetic set recombination application neural network topology optimisation 
neural computing applications 


homologous pairing strand exchange genetic recombination 
annual review genetics 
rosin belew 

new methods competitive evolution 
evolutionary computation 
saravanan fogel 

evolving neural control systems 
ieee expert 
schaffer whitley eshelman 

combinations genetic algorithms neural networks survey state art 
whitley schaffer editors proceedings international workshop combinations genetic algorithms neural networks pages ieee press piscataway new jersey 
sigal alberts 

genetic recombination nature crossed strand exchange homologous dna molecules 
journal molecular biology 
spears 

speciation tag bits 
handbook evolutionary computation 
iop publishing oxford university press oxford uk 
thierens 

non redundant genetic coding neural networks 
proceedings ieee international conference evolutionary computation pages ieee press piscataway new jersey 
watson 

molecular biology gene fourth edition 
benjamin cummings publishing menlo park california 
evolutionary computation volume number evolving nn augmenting topologies whitley 

genetic reinforcement learning problems 
machine learning 
wieland 

evolving neural network controllers unstable systems 
proceedings international joint conference neural networks pages ieee press piscataway new jersey 
yao 

evolving artificial neural networks 
proceedings ieee 
yao liu 

designing artificial neural networks evolution 
applied mathematics computation 
yao shi 

preliminary study designing artificial neural networks coevolution 
proceedings ieee singapore international conference intelligent control instrumentation pages ieee singapore section 
zhang 
hlenbein 

evolving optimal neural networks genetic algorithms occam razor 
complex systems 
evolutionary computation volume number 
