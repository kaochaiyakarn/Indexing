streaming queries streaming data querying data streams focused systems newly arriving data processed continuously streamed user real time 
emerging applications ad hoc queries intermittent connectivity require processing data arrives prior query submission period disconnection 
applications developed psoup system combines processing ad hoc continuous queries treating data queries symmetrically allowing new queries applied old data new data applied old queries 
psoup supports intermittent connectivity separating computation query results delivery results 
psoup builds adaptive query processing techniques developed telegraph project uc berkeley 
describe psoup experiments demonstrate effectiveness approach 
proliferation internet web sensor networks fueled development applications treat data continuous stream fixed set 
telephone call records stock sports data feeds sensors examples streaming data 
number systems proposed address mismatch traditional database technology needs query processing streaming data af bw cccc 
supported part national science foundation itr iis si ibm microsoft siemens uc micro program 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference hong kong china chandrasekaran michael franklin university california berkeley franklin cs berkeley edu contrast traditional dbmss answer streams queries non streaming database continuous query cq systems treat queries fixed entities stream data 
previous systems allow queries data streamed 
result support queries require access data arrived previously data arrive 
furthermore existing cq systems continuously deliver results computed 
situations continuous delivery may infeasible inefficient 
scenarios data recharging data recharging process personal devices pdas periodically connect network refresh data contents 
example consider business traveler wishes stay information ranging movements financial markets latest football scores certain historical window 
interests encoded queries executed remote server results downloaded user pda connected network infrastructure 
monitoring consider user wants track interesting pieces information number music downloads subnet hour postings slashdot www slashdot org score greater certain threshold 
online user periodically wish see summaries activity interrupted update 
aggregated users bandwidth server load wasted transmitting data accessed significant 
efficient approach return current results standing query demand 
support applications propose psoup query processor telegraph query processing framework 
core insight psoup allows support applications data queries streaming importantly duals processing viewed join query data streams 
addition psoup partially materializes results support disconnected operation improve data throughput query response times 
overview system user interacts psoup initially registering query specification system 
system returns handle user repeatedly invoke results query times 
user explicitly unregister previously specified query 
example query specification shown select data stream psoup supports select queries con predicates junctive queries contain clause specifies input window query results computed 
assume system clock time define ends input window time window applies streams clause 
ideas adapted allow logical windows number tuples system clock time application different windows stream 
arguments clause constants absolute values specified relative current system clock keyword 
clause allows specification snapshot constant time constant time landmark constant time variable time sliding window variable gin time variable time semantics gks queries 
psoup currently implemented main memory engine acceptable windows limited size memory 
internally psoup views execution stream queries stream data join streams illustrated 
refer process query data join 
streaming data sources data stem query stem build data probe probe symmetric join psoup build queries clients outline solution system maintains structures called state modules stems ram queries data 
query stem query specifications system data stem data stream 
shows example data stream 
client registers query inserted query stem probe data stem 
application new queries old data psoup executes queries historical data 
similarly new data element arrives inserted data stem probe query stem 
act applying new data old system currently allow nested subqueries 
con straint inherent treatment queries data 
implementation subqueries subject 
queries psoup supports continuous queries 
cases results probes materialized results structure shown 
query invoked current input window computed clause current value 
window applied materialized values retrieve current results 
materialization key efficient support set semantics continuous queries 
contributions propose scheme efficiently solves problem intermittently repeated snapshot landmark sliding window queries streaming data historical window 
explore tradeoff computation required materialize maintain results query response time invocation queries 
demonstrate advantages treating data queries streams duals 
idea key solving problem processing queries access data arrived query registration data arrive 
second evaluation optimized appropriate algorithms join data query streams 
third leverage eddies ah adaptively respond changing characteristics data query specification streams :10.1.1.34.8546
develop techniques share computation storage different query results 
index predicates share computation incremental maintenance standing queries 
storage results query data join computation key psoup ability support intermittently connected operation 
share storage base data results standing queries avoiding copies 
remainder structured follows 
section discusses related 
sections describe psoup executes selection join queries 
results experiments section 
section discusses issues involving aggregation queries specific interest psoup 
section directions 
related psoup part telegraph project uc berkeley 
spans continuous queries triggers materialized views 
terry studied continuous queries filter documents sql language allows monotonic queries 
seshadri slr discuss problem defining executing database style queries sequenced data 
consider queries produce singleton tuple output input window 
sadri propose language sql ts express sequence sensitive operations windows stream 
key feature sql ts ability define windows repeating patterns stream 
various cq engines proposed literature 
psoup builds ideas developed cacq mshr earlier cq extension tele graph engine exploits adaptivity offered eddy operator ah efficiently handle skews data distribution arrival rates :10.1.1.12.4794:10.1.1.34.8546:10.1.1.34.8546
cacq introduced notion tuple lineage allow sharing queries just common subtrees plans 
systems yg af explored adaptive techniques support continuous queries 
systems focus filter operators accept long sequence tuples input produce monotonically growing sequence output 
offer support queries historical data 
compared systems consider comprehensive workload allowing queries non monotonic sets inputs output allowing snapshot landmark sliding window queries 
techniques developed psoup query arrived data support disconnected operation integrated earlier cq systems 
ways psoup seen logical extension cq techniques handle intermittent queries data 
fabret observe publish subscribe systems apply newly published events existing subscriptions match new subscriptions existing valid events 
focus grouping subscriptions optimizing matching process arrival new data 
suggest standard query processing techniques process new subscriptions 
bonnet bgs bs describe different kinds queries streaming data 
mf architecture querying streaming sensor data 
database querying moving objects considers semantic issues time specification queries 
stream bw considers relation materialized views continuous queries context 
concerned tradeoff computation scratch storage sharing storage different queries 
research lsm gks sh focused developing algorithms perform specific functions sequenced data 
focus general select project join spj views simple classes aggregates 
computation standing queries similar trigger processing incremental maintenance materialized views 
triggerman scalable trigger system uses discrimination network hbc statically compute optimal strategies processing trigger 
generalization rete treat algorithms 
chronicle data model jms defines algebra materialized view problem append data 
wave indices sg solution designed append data data warehousing scenario 
set indices maintained different time intervals data allow queries windowed input 
ensure high harvest fraction data answer query data old data expired new data arrives 
technique works hourly daily bulk data updates scale higher data arrival expiration rates 
query processing techniques section describe psoup processes stream queries having clause examples 
section extend solution handle queries different clauses describe implementation detail 
overview described section client begins registering query specification system 
query specifications form select select list list conjoined boolean factors time time psoup assigns query unique id called returns user handle invocations 
client go away disconnect return intermittently invoke query retrieve current results 
invocations query client psoup continuously matches data query predicates background materializes results matches results structure 
invocation query psoup computes current input window query clause applies results structure return current results query 
entry new query specifications new data describe background query data join processing greater detail 
defer discussion query invocation results structure section 
psoup receives query specification splits query specification parts 
part consists select clauses specification refer standing query clause sqc 
second part consists clause stored separate structure called invocations query 
sqc inserted data structure called query stem 
sqc probe data stems corresponding tables clause 
data stems contain data tuples system 
results probe indicate data tuples satisfied sqc 
identities tuples stored results structure 
new data tuple enters psoup assigned globally unique tupleid physical timestamp called corresponding system clock 
data tuple inserted appropriate data stem data stem stream 
data tuple probe query stem determine satisfies 
describe section data tuple probe data stems evaluate join queries 
results probe stored results structure 
query stem id predicate psoup initial state data stem id query stem data stem id predicate id psoup initial state query stem id predicate select new query build building query stem psoup probe psoup probing data stem data stem id match match selection query processing entry new query psoup build new data data stem id building data stem describe process detail examples 
selection queries single stream considering simple queries involve single data stream 
illustrates actions performed psoup new sqc enters system 
shows state query stem data stem system processed queries including data tuples including consider entry new sqc system shown omit clause 
standing query assigned inserted query stem adding entry stem 
time augment results structure new column store results query 
standing query sent probe data stem matched data tuple 
tuples satisfy query data tuples appropriate entries results structure marked true 
analogously shown new data tuple arrives added data stem sent query stem matched standing queries system 
lastly results structure updated 
join queries multiple streams queries multiple data streams join queries approach treat processing multiple join queries join query stream data streams enumerated list queries 
generalize symmetric join match match query stem id predicate psoup probing query stem probe selection query processing entry new data data data queries results structure inserting results queries results structure inserting results accept input streams 
demonstrate solution example 
simplicity consider queries data streams shows actions performed psoup new query enters system 
system processed data tuples including queries ids including data stems data stream 
single query stem query stream 
stems populated data queries 
consider arrival new standing query id step 
predicate factors involving 
query inserted query stem step 
query probe data stem 
loss generality assume query probes data stem 
match tuple data stem query tuple step 
query depends fully evaluated stage 
boolean factors completely evaluated filter tuples final result 
tuples satisfy boolean factors query values substituted join boolean factors relate streams substitution remain set boolean factors depends solely output hybrid struct matching tuple contents tuple augmented partially evaluated predicate query step 
hybrid structs produced probe data stem step 
tuple satisfies remaining boolean factors query results structure updated follows entry pair tupleid tupleid created inserted results structure pair exist 
new query psoup psoup new data build build id data stem id predicates query stem probe data stem id join processing entry new join query probe entry marked reflect pair satisfied specific step 
consider entry new data tuple system 
inserted data stem probes query stem 
rest processing closely parallels description entry new query 
observe redundancy hybrid structs shaded parts structs figures 
new sqc tuple repeated hybrid structs similarly new data tuple repeated hybrid structs 
results repeated computation probes step 
redundancy techniques remove described detail section 
query invocation result construction section describe results structure processing performed psoup return query results previously specified query invoked 
results structure maintains information tuples data stem satisfied query stem 
result tuple query stores constituent base tuples result tuple 
results structure updated continuously query data join described sections 
results query accessed 
addition results ordered indexed tuple timestamp efficient retrieval results time window 
id predicates query stem matches join processing entry new tuple matches probe id data stem probe data stem id hybrid structs results set result union results set result hybrid structs results structure results structure consider user request current result previously specified query 
recall section clauses query specifications stored 
clause retrieved table current values endpoints input window determined 
virtue background symmetric join processing psoup data system joined sqc query specification results query data join results structure 
psoup engine directly access structure apply current input window query contents retrieve base tuples current result tuples 
actual tuples retrieved data stems returned client 
single stream queries retrieval current window timestamp result tuples straightforward 
join queries process difficult results composed multiple base tuples timestamp 
describe section 
projections performed just time query invoked concurrent result construction 
duplicate elimination required done point 
implementation section stepped basic framework solution simple examples 
describe implementation psoup telegraph system 
principal components solution relation symmetric join operator results structure 
heart relation symmetric join oper ator inserts new data queries appropriate storage structures uses probe storage structures 
storage structures provide insert probe methods data queries 
eddy stem mechanisms ah ram provide framework adaptive relation symmetric joins 
designed different context 
eddies originally conceived tuple router traditional join operators 
stems proposed data structures shared different join operations 
effect stems eliminate join modules leaving eddy active agent effecting join 
stems designed store queries eddies designed route 
addition simultaneous evaluation multiple standing queries storage results requires tracking state 
changes needed telegraph support additional functionality psoup described 
eddy eddy performs picking data tuple route queue called tuple pool sending join operators routing policy 
allow eddy route hybrid structs addition data entities encoded tuples 
done creating predicate attribute represent possibly partially evaluated queries having tuples contain data predicate attributes 
addition data predicate attributes tuple contains todo list called interest list enumerates stems remains routed tuple considered completely processed 
list interface tuple eddy 
eddy oblivious underlying types tuples routes 
picks destination tuple information tuple interest list 
subtle difference flavors eddy described avnur hellerstein ah madden mshr psoup eddy :10.1.1.12.4794:10.1.1.34.8546:10.1.1.34.8546
leads different semantics results output systems query 
say query processor produces stream prefix consistent results atomically materializes entire effects processing older tuple data query output materializes effects processing newer tuple 
times complete set results materialized system identical results completely executing prefix query stream prefix data stream 
property serializes effects new tuples query data order enter system 
stream prefix consistency basis ability support windowed queries data streams 
psoup eddy provides stream prefix consistency storing new temporary tuples separately new tuple pool ntp temporary tuple pool ttp re spectively 
psoup eddy begins picking tuple ntp processing temporary tuples ttp picks new tuple ntp 
higher priority tuple pool store flight tuples serializes effects new tuples results structure order enter system maintaining stream prefix consistent state times 
previous versions eddy guarantee stream prefix consistency property 
due single tuple pool store new tuples temporary hybrid structs tuples flight join query 
stems stems data structures provide insert probe methods contents 
psoup implements stems interface store data queries performance stems highly inefficient data queries probed sequentially boolean factors tested individually manner described section 
indexes speed operations data queries 
data stem data stems store index base data stream 
data stem stream enters system 
psoup supports range queries need tree index data provide efficient access probing queries 
tree attribute stream 
main memory implementation red black trees chosen efficient low maintenance cost 
query probes data stem different single relation boolean factors query probe corresponding indexes results probes intersected yield final result 
technique intersect individual probe results similar query stems described section 
data stem maintains hash index fast access result construction 
query stem query stems store index queries 
query stem entire system allowing sharing queries different overlapping clauses 
data desirable index queries quick shared evaluation probes 
numerous predicate indexes proposed literature yg ssh 
index similar proposed cacq mshr red black trees index single attribute boolean factors query 
relation tree boolean factors attribute appears sqc 
trees indexed constant psoup currently implemented main memory system restrict data stems keep data certain maximum window specified system parameter 
supporting queries data streams archived disk subject 
appears expression support range predicates nodes red black tree enhanced shown 
node contains arrays store boolean factors map node 
array relational operator 
query query 
query query 
predicate index probe query index data tuple equality search performed query index data value search key 
equality boolean factors match data quickly identified node search key maps 
index scan solve inequality queries 
expression boolean factors captures single attribute boolean factors 
queries multi attribute selection join boolean factors form boolean factors indexed stored single linked list called 
query split different predicate indexes need technique anding results probes different structures 
query stem contains array cell corresponds query specification 
probe data tuple value cell reset number boolean factors corresponding query 
course various probes time data tuple satisfies boolean factor value corresponding cell array decremented 
cell value zero probe indicates data tuple satisfied query 
results structure major component solution results structure accessed user invokes query retrieve current results query 
results structure stores metadata indicates tuples satisfied 
current mainmemory implementation psoup stores data certain maximum window results corresponding expired data queries removed system dropped 
different implementations results 
implementation described section dimensional bitmap 
separate bitmap list appears 
rows bitmap ordered timestamp data 
columns ordered id query 
indexes provided 
second implementation results structure associates query linked list containing data tuples satisfied 
decision alternate structures tradeoff storage requirements possibly sparse bitmap dense linked list 
mentioned results sorted indexed tuple timestamp speed application input window query invocation 
straightforward single table queries result tuples single timestamp 
results join queries hand composed multiple base tuples having timestamp 
timestamps significant earliest latest serve bound age result tuples 
results structure associates timestamps result tuple 
question arises timestamps earliest latest sort index results 
expect queries typically landmark sliding queries clause edge window defined 
data tuples system older 
result edge window common case filter results 
older timestamp significant efficient result retrieval order results 
described psoup implements duality queries data apply new queries old data new data old queries 
describe performance 
performance section investigate performance psoup focusing query invocation data arrival rates supported system different query workloads input window sizes 
mentioned earlier psoup part telegraph project uses extends concept eddies stems 
need encode queries tuples difference mechanisms anding boolean factors psoup cacq tuple format psoup differs formats non cq version telegraph cacq mshr 
implemented new versions eddy stems 
rest telegraph system psoup implemented java 
section examine performance different implementations system psoup partial psoup psoup complete psoup 
psoup implementation described earlier sections results corresponding maintained results structure clauses applied retrieve current results query invocation 
psoup hand continuously maintains results corresponding current input window query linked lists 
comparison purposes include measurements system nomat materialize results executes query scratch invoked 
nomat uses indices data queries psoup systems 
query contains boolean factor fix order probes data nomat selective boolean factors applied 
storage requirements turning experiments useful examine storage requirements system 
nomat storage cost equal space taken store base data streams maximum window queries supported plus size structures store queries 
psoup partial addition costs incurred nomat psoup pays cost results structure uses bitarray linked list store results depending whichever takes storage 
cost option depends number standing queries stored system maximum window queries asked 
cost approach depends result sizes imposition time window 
set experiments described chose bitarray implementation psoup results structure 
psoup complete psoup psoup pays cost storing results addition costs paid nomat systems 
psoup stores current results standing queries time 
normal loads expect psoup substantially higher storage requirements psoup uses dense bitarray 
computational performance environment targeted psoup new query specifications arrive frequently rate existing query specifications invoked 
primarily concerned query invocation rate supported system 
determine rate measuring response time query invocation varying input window size query complexity 
wish measure maximum data arrival rate supported system 
maximum rate depends relative costs computation devoted processing entry new data tuples computation spent maintaining windows results generated 
server saturated costs maximum data arrival rate support 
inherent tradeoff result invocation data arrival rates 
lazy evaluation nomat suffers poor response time having maintenance costs 
eager evaluation done psoup offers excellent response time increased maintenance costs 
psoup eagerly evaluates clause query specifications adopts lazy approach respect imposition time windows specified clause 
performance lies tween approaches 
experimental setup mentioned section implemented psoup java 
order evaluate performance ran number experiments varied window sizes number type boolean factors equality inequality single relation relation queries measured response time query invocations different conditions 
addition response time query invocations looked maximum data arrival rate supported system 
compared maximum data arrival rates supported implementations psoup psoup predicate indexes 
studied scheme remove type redundancy arises join processing described section measured performance different workloads 
experiments run unloaded server intel mhz kb chip cache processors 
mb ram 
psoup run completely main memory concerned disk space 
sun java hotspot tm client vm version linux kernel 
synthetically generated query data streams compare approaches range application scenarios 
data values uniformly distributed interval order stress system tuples stream available instantaneously variable delay consecutive tuples stream 
madden mshr demonstrated advantages adaptive query processing gained applying eddies framework cq processing :10.1.1.12.4794
results apply setting 
parameters range values input window size tuples query specifications boolean factors table independent parameters experiments single relation boolean factors form relop value constant chosen uniformly multiple interval probability uniformly entire range probability 
multimodal distribution approximate query workload items interesting 
join queries exactly multiple relation boolean factor 
done isolate effects join 
multiple relation boolean factors form relop distribution selection queries 
response time vs window size set experiments describe measures time taken respond select join query invocations increasing input window sizes 
shows response time query selection queries equality predicates shows metric selec tion queries interval predicates 
interval predicates formed combining single relation inequality boolean factors attribute size interval uniformly distributed range 
note axes plots logscale values axes multiplicative factor 
workloads queries predicates 
response time query msec response time query msec nomat psoup psoup window size tuples equality predicates nomat psoup psoup window size tuples interval predicates response time select queries response times increase systems increasing window sizes 
nomat increased query execution time 
psoup caused increase length bitarray results structure 
psoup increase cardinality results 
expected response time workloads nomat worse 
psoup performs worse psoup orders magnitude equality queries need traverse entire bitarray size maximum input window query irrespective size result 
reason performance psoup change equality inequality queries response time nomat psoup solutions higher inequality queries equality queries greater data index traversal larger result sets 
performance psoup psoup comparable inequality queries 
shows response time table inequality join queries varying input window size 
case axis uses linear scale 
axis shows window size table join 
result size aggregated queries proportional square window size 
range window size smaller selection queries 
response time nomat orders magnitude worse psoup systems 
psoup order magnitude worse psoup 
example window size response time psoup msec psoup msec 
conclude experiment expected systems materialize results queries scale increasing input window size 
response time query msec nomat psoup psoup window size tuples response time join queries response time vs interval predicates experiment describe measures response time inequality selection queries vary number conjoined interval predicates query 
queries contain interval predicate attribute appeared sqc 
input window size fixed second largest window size shown selection queries queries 
results shown table 
expected psoup solutions outperform nomat orders magnitude number interval predicates query 
interesting point note response time nomat increases number conjoined interval predicates due greater amount computation required response times psoup psoup decrease significantly 
behavior nomat explained increasing complexity queries executed invocation user 
relative performance psoup implementations explained cost result construction systems 
psoup constructs results dereferencing pointers data tuples stored linked list copying tuples psoup pay extra cost retrieving data tuples data stem index 
fact response times reduce increasing number anded interval predicates higher selectivity resulting queries correspondingly smaller result sizes 
interesting point switch relative performance psoup psoup go response time msec interval predicates nomat psoup psoup table response time selection interval predicates interval predicates 
explained follows 
queries interval predicate selectivity query poor relative inefficiency linkedlist traversal psoup compared bitarray traversal psoup outweighs fact fewer elements traversed 
increasing number interval predicates selectivity increases difference average size result sets input window pronounced dominate relative costs 
experiment shows nomat scale increasing query complexity 
psoup implementations comparable performance fewer boolean factors psoup performance improves dramatically due reduction result sizes selective queries 
data arrival rate vs turn attention maximum data arrival rates supported psoup varying number inequality selection query specifications system 
consider nomat experiment 
consider possible implementations psoup psoup predicate indexes referred respectively 
comparison psoup psoup highlights effect lazy vs active maintenance results data arrival rates 
difference performance versions psoup predicate indexes highlights savings computation achieved predicate indexes 
fully loaded server keeps query results current accepts new data 
relative costs activities help determine maximum data rate supported system number stored query specifications 
window size query specifications experiment fixed tuples 
results experiment shown 
axis uses logscale 
psoup solution performs best beats psoup system order magnitude psoup solutions orders magnitude 
interesting note cost maintaining results dominates cost incremental computation entry new data extent matter share computation indexing queries psoup implementations 
indicates wish support high data arrival rates psoup implementation choice 
interesting result experiment speedup achieved psoup psoup query indexes increases increasing number query specifications 
happens boolean factors new query specifications increasingly fall old nodes predicate index keeping computation amount roughly 
maximum data arrival rate sec psoup psoup psoup psoup query specifications data arrival rate selection queries experiment confirms expectation decision index queries maintain query results date adversely affect data arrival rate supported system 
summary results experiments demonstrate materializing results queries allows support higher query invocation rates 
third experiment shows indexing queries lazily applying windows improves maximum data throughput supported system 
choice psoup psoup implementations depends amount memory system psoup requires wish optimize query invocation rate psoup data arrival rate psoup 
removing redundancy join processing mentioned section join processing discussed far perform redundant 
section describe redundancy show overcome 
entry query specification new data recall section production hybrid structs processing new query specifications 
relevant part detailed processing new join query streams reproduced convenience 
hybrid structs produced query specification probes data stem share component original query 
boolean factor repeatedly probes data stem hybrid struct 
eliminate redundancy combining hybrid tuples produced probe rs query data stem single single query multiple data composite tuple 
shared component applied exactly 
interestingly sort merge join approach join set predicates set tuples data stem 
similar situation arises data added system 
hybrid structs produced processing composite tuple data single query multiple data composite tuple data single data multiple query predicates predicate index join redundancy composite tuples new data share boolean factors 
relevant part reproduced 
identical boolean factors executed repeatedly data set data stem 
single data multiple query composite tuple conjunction sort merge join approach apply composite tuple data stem 
composite tuples joins experiment compares costs incremental computation arrival new join query specification streams composite tuples 
execution path new query specification shown 
join queries form relop relop relop 
isolate effect composite tuple steps involved join processing measure cost step join processing shown 
executing steps query predicates form value relop relop 
boolean factor shared hybrid structs 
compare cost probing data stem composite tuples cost probing individual hybrid tuples 
varying relop relop create different workloads 
set relop equals eq relop inequalities ineq 
second workload reverse 
final workload set inequalities 
results shown 
legend plot reflects choices relop relop equality inequality composite tuples composite separate 
note axis uses time sec eq ineq separate eq ineq composite ineq eq separate ineq eq composite ineq ineq separate ineq ineq composite number hybrid structs probe times composite tuples logscale 
eq ineq workload shared boolean factor equality highly selective uniform distribution data 
approaches applied boolean factors probe data 
solution composite tuple probes data factor exactly effectively halving total number boolean factors eventually probe data 
approximately twice efficient approach 
ineq eq workload help apply shared inequality factor 
composite tuple approach sort merge join boolean factors data outperforms approach nested loops boolean factors equality factors sort merge efficient algorithm nested loops 
ineq ineq workload shared individual boolean factors inequalities 
sort merge algorithm inequality joins nested loops index join solution preferred 
note aggregation queries point discussed spj queries psoup supports aggregates count sum average min max 
ideally share data structures computing aggregates repeated invocations select project join aggregate queries streams just case select project join queries 
possible share data structures queries select project join clause 
demonstrate claim example queries compute max results select query 
explain basic approach computing max different windows data structure 
consider shows ranked ary tree data stem 
leaves tree cp ti query select max root cq interval query max query max tl query select max ranked tree max ordered time insertion stem insertions occur rightmost node tree 
node annotated max elements subtree rooted node 
invoke query system current window 
common ancestor points window root children need followed reach rightmost leaf subtree rooted leftmost leaf subtree rooted recursive expression computed time nodes tree thick edges show paths traversed recursion specific case maximum consider query different select clause query values considered computing query tree directly compute query problem leaves tree match results select clause query query maintain separate structure query stem 
sharing occurs different invocations query 
described design implementation novel query engine treats data query streams analogously performs evaluation joining 
allows psoup support queries require access data arrived prior query specification data appears 
psoup separates computation results delivery materializing results allows psoup support disconnected operation 
features enable data recharging monitoring applications intermittently connect server retrieve results query 
describe techniques sharing computation storage different queries 
terms done 
psoup currently implemented main memory system 
able archive data streams disk support queries 
disk stores raise possibility swapping data queries disk main memory 
swapping queries main memory effectively scheduling mechanism queries invoked frequently 
briefly touched relation registered queries psoup materialized views 
intend explore space materialized views infinite streams especially resource constraints 
current implementation psoup allows client retrieve answers corresponding current window 
intend relax restriction allow clients treat psoup generally query browser temporal data 
af franklin efficient filtering xml documents selective dissemination information 
vldb pp 

franklin zdonik data staging demand broadcast 
vldb pp 

ah avnur hellerstein eddies continuously adaptive query processing :10.1.1.34.8546
sigmod pp 

bgs bonnet gehrke seshadri sensor database systems 
pp 

bs bonnet seshadri device database systems 
icde pp 

bw babu widom continuous queries data streams 
sig mod record september 
cccc carney cetintemel cherniack convey lee stonebraker tatbul zdonik monitoring streams new class data management applications 
vldb 
chen dewitt tian wang niagaracq scalable continuous query system internet databases 
sigmod pp 

cherniack franklin zdonik expressing user profiles data recharging 
ieee personal communications august pp 

datar gionis indyk motwani maintaining stream statistics sliding windows 
acm siam soda 
forgy rete fast algorithm patterns objects match problem 
artifical intelligence pp 

fabret jacobsen pereira ross shasha filtering algorithms implementation fast publish subscribe systems 
sigmod pp 
fox gribble chawathe brewer gau cluster scalable network services 
sosp pp 

gks gehrke korn srivastava computing correlated aggregates continual data streams 
sigmod pp 

hbc hanson optimized trigger condition testing ariel networks 
university florida cise department tech 
report tr nov 
hanson huang parthasarathy park vernon scalable trigger processing 
icde pp 

hellerstein franklin chandrasekaran pande hildrum madden raman shah adaptive query processing technology evolution 
ieee data engg 
bulletin 
march 
pp 

jms jagadish mumick silberschatz view maintenance issues chronicle data model 
pods pp 

kreutz kemper kossmann publish subscribe architecture distributed metadata management 
icde pp 

lsm lee stolfo mok mining data flow environment experience network intrusion detection 
sigkdd pp 

miranker treat better match algorithm ai production system matching 
pp 

mf madden franklin stream architecture queries streaming sensor data 
icde mshr madden shah hellerstein raman continuously adaptive continuous queries streams 
sigmod 
oq neil quass improved query performance variant indexes 
sigmod pp 

ram raman interactive query processing 
phd thesis uc berkeley 
sg shivakumar garcia molina wave indices indexing evolving databases 
sigmod pp 

sh sullivan tribeca system managing large databases network traffic 
usenix 
slr seshadri livny ramakrishnan sequence query processing 
sigmod pp 

ssh stonebraker sellis hanson analysis rule indexing implementations data base systems expert database conf 
pp 
sistla wolfson chamberlain dao modeling querying moving objects 
icde pp 

sadri zaniolo optimization sequence queries database systems 
pods pp 

terry goldberg nichols oki continuous queries append databases 
sigmod pp 

ufa urhan franklin cost query scrambling initial delays 
sigmod pp 

uf urhan franklin xjoin reactively scheduled pipelined join operator 
ieee data engineering bulletin pp 

wa wilschut apers dataflow query execution parallel main memory environment 
pdis pp 

yg yan garcia molina sift information dissemination system 
tods pp 

