printer philip wadler bell labs lucent technologies wadler research bell labs com april revised march john hughes pretty printers prime demonstrations combinators develop library algebra implement 
note presents new design pretty printers improves hughes classic design 
new design single concatenation operator associative left right unit 
hughes design requires separate operators concatenation horizontal concatenation right unit left unit vertical concatenation unit 
joyce computer scientists agree poem lovely tree 
love affair tree parsed pattern matched pruned printed 
pretty printer tool library routines aids converting tree text 
text occupy minimal number lines retaining indentation reflects underlying tree 
pretty printer strike balance ease flexibility format optimality output 
years john hughes refined design pretty printers fine art 
hughes describes evolution pretty printer library design implementation appealing application algebra 
library standard package widely field 
variant implemented glasgow haskell compiler simon peyton jones 
note presents new pretty printer library believe improvement designed hughes 
new library single way concatenate documents associative left right unit 
may obvious design obvious retrospect 
hughes library distinct ways concatenate documents horizontal vertical horizontal composition possessing right unit left unit vertical composition possessing unit 
new library uniform slightly easier implement hughes final version efficient hughes long 
come bury hughes praise 
new library inspired hughes previous designed algebraic approach 
readers familiar hughes spot similarities 
note assumes previous familiarity pretty printers 
detailed comparison hughes reserved 
simple pretty printer consider simple case document possible layout attempt compress structure single line 
primitives purpose 
doc 
doc 
doc nil doc text string 
doc line doc nest int 
doc 
doc layout doc 
string 
associative operation concatenates documents empty document nil left right unit 
function text converts string corresponding document document line denotes line break adopt convention string passed text contain newline characters line purpose 
function nest adds indentation document 
function layout converts document string 
practice choose text behave line string consisting single newline 
simple implementation simple documents strings 
string concatenation nil empty string text identity function line string consisting single newline nest function adds spaces newline increase indentation layout identity function 
implementation simple especially efficient nesting examines character nested document generalise easily 
consider algebraic implementation shortly 
occasionally utility operators 


text 


line 
concatenation added space second concatenation added newline 
example simple tree data type functions convert tree document 
data tree node string tree node ts text 
nest length ts nil ts text 
nest ts 
text ts 
text 
line 
ts produces output style 
aaa ccc dd eee ffff gg hhh ii alternatively variant function 
node ts text 
ts nil ts text 
nest line 
ts 
line 
text ts 
text 
line 
ts produces output style 
aaa ccc dd eee ffff gg hhh ii easy formulate variants generate styles 
document reduced normal form text alternating line breaks nested indentation 
text 
nest line 
text 
delta delta delta 
nest line 
text laws adequate reduce document normal form taken fact 
associative unit nil 
text text 
text text nil nest nest nest nest nest 
nest 
nest nest nil nil nest text text law come pairs law binary operator paired corresponding law unit 
pair laws state text homomorphism string concatenation document 
pair laws state nest homomorphism addition composition 
pair state nest distributes concatenation 
law states nesting absorbed text 
reducing term normal form laws applied left right applied right left 
give laws relate document layout 
layout 
layout layout layout nil layout text layout nest line copy pair laws state layout homomorphism document string 
sense layout inverse text precisely law states 
final law states layout nested line newline followed space level indentation 
simple adequate implementation derived directly algebra documents 
represent document concatenation items item text line break indented amount 
data doc nil nil string text doc text 
int line doc nest line 
nil represents nil text represents text 
line represents nest line 

easy derive representations function equations 
nil nil text text nil line line nil text 
text 
line 
line 
nil 
nest text text nest nest line line nest nest nil nil layout text layout layout line copy layout layout nil instance derivation line concatenation 
text 
definition text text 

associative 
text 

definition text text 
remaining derivations equally trivial 
pretty printer alternative layouts consider documents multiple possible layouts 
naively view document equivalent string view equivalent set strings corresponding different layout document 
extension achieved adding single function 
group doc 
doc document representing set layouts group returns set new element added representing set layout added compressed line 
achieved replacing newline corresponding indentation text consisting single space 
variants considered newline carries alternate text replaced 
instance newlines replaced empty text single space 
function layout replaced chooses set layouts 
takes additional parameter preferred maximum line width chosen layout 
pretty int 
doc 
string variants considered additional parameters instance ribbon width indicating maximum number non indentation characters appear line 
example revision form function convert tree document differs addition call group 
node ts group text 
nest length ts previous document printed layout definition produces output 
aaa ccc dd eee ffff gg hhh ii fits trees line possible introduces sufficient line breaks keep total width characters 
give formal semantics new operations add auxiliary operators 
doc 
doc 
doc flatten doc 
doc 
operator forms union sets documents 
flatten operator replaces line break associated indentation single space note sets created way documents set flatten document 
laws extend operator simple documents pointwise union 










nest 
nest 
nest flattening gives result element set distribution law flatten bit simpler 
flatten 
flatten laws explain flatten interacts document constructors interesting case happens line 
flatten 
flatten 
flatten flatten nil nil flatten text text flatten line text flatten nest flatten define group terms flatten 
group flatten 
laws adequate reduce document normal form 
delta delta delta 
normal form simple document 
alternative formulation possible 
turns union introduced grouping left argument flattened 
replace law 
flatten 
precludes flexible union describe alternative layouts measurements show improves efficiency forego trick 
need specify choose best layout set 
hughes specifying ordering relation lines extending lexically ordering documents 
ordering relation depends available width 
lines shorter available width longer better 
line fits available width fits better 
lines longer available width shorter better 
note ordering relation means may pick layout line exceeds width unavoidable 
key difference hughes discuss 
possible implementation consider sets layouts sets represented lists layouts represented strings algebraic representation preceding section 
implementation hopelessly inefficient choices produce possible documents 
fortunately algebraic specification leads straightforwardly tractable implementation 
new representation similar old add construct representing union documents 
data doc nil nil string text doc text 
int line doc nest line 
doc union doc 
invariant require union lines longer lines achieve acceptable performance aim exploit distributive law representation text union preference equivalent text union text 
instance consider document group group group group text hello 
line 
text 
line 
text 
line 
text 
line 
text possible layouts hello hello hello hello lay field width pick eliminate fell 
best bet achieving pick representation brings front common string 
instance aim represent document form hello text text union line suitable documents hello factored layouts factored layouts hello followed occupies characters line width may immediately choose right operand union examination desired 
definitions nil text line nest remain exactly save 
nest extended specify interact union 
union 

union 
nest union nest union nest lines follow immediately distributive laws 
definitions group flatten easily derived 
group nil nil group line text flatten union line group text text group group union group union flatten nil nil flatten line text flatten flatten text text flatten flatten union flatten instance derivation second line group 
group line definition line group nest line 
definition group flatten nest line 

nest line 
definition flatten text 
flatten 
nest line 
definition text union line text flatten union line union document left begins space document right begins newline maintained invariant lines longer left operand union 
derivation third line group reveals key point 
group text definition text group text 
definition group flatten text 

text 
definition flatten text 
flatten 
text 

distributes 
text 
flatten 
definition group text 
group definition text text group distribution bring instances text generated definition group 
saw factoring crucial efficiently choosing representation 
lines group flatten easily derived 
line follows invariant operands union flatten document 
necessary choose best set possible layouts 
done function best takes document may contain unions returns document containing unions 
moment thought reveals operation requires additional parameters specifies available width second specifies number characters placed current line including indentation 
code fairly straightforward 
best nil nil best line line best best text text best length best union better best best better fits middle cases adjust current position newline set indentation text incremented string length 
union better best options selected 
essential efficiency inner computation best performed lazily 
invariant unions line left operand longer line right operand 
criterion previously operand preferred fits second operand 
left determine document line fits spaces 
straightforward 
fits false fits nil true fits text fits length fits line true available width zero document fit 
document empty begins newline fits trivially document begins text fits remaining document fits remaining space 
case negative widths merely esoteric code text may yield negative width 
case required unions function applied best layout set 
pretty print document selects best layout converts string 
pretty layout best code layout unchanged 
improving efficiency implementation efficient better 
reasonable expect pretty printing document achievable time size document count number nil text nest group operations plus length string arguments text 
space proportional max width available printing depth document depth calls nest group 
sources inefficiency 
concatenation documents pile left 
delta delta delta text 
text 
delta delta delta 
text assuming string length may require time process hope take time 
second concatenation associates right nesting documents adds layer processing increment indentation inner document 
nest text 
nest text 
delta delta delta 
nest text delta delta delta assuming string length may require time process hope take time 
possible fix problem add explicit representation concatenation generalise operation act list concatenated documents 
possible fix second problem add explicit representation nesting maintain current indentation incremented nesting operators processed 
combining fixes suggests generalising operation list indentation document pairs 
fix acts simple documents single possible layout section 
representation changed constructor corresponding operator builds document 
names caps distinguish previous representation 
data doc nil doc 
doc nest int doc text string line operators build document defined trivially 
nil nil 

nest nest text text line line operators act list indentation document pairs 
representation function maps corresponding document 
rep fold 
nil nest generalised layout operation lay defined terms old layout operation representation function 
lay layout rep hypothesis possible compute new layout function old 
result follows 
layout lay lay lay nil lay lay lay lay nest lay lay text lay lay line copy lay line follows straightforward computation 
derivation line 
lay hypothesis definition rep layout nest 
nil nil unit 
layout nest nest homomorphism addition composition layout case 
lay hypothesis definition rep definition 
layout nest 

rep nest distributes 
layout nest 
nest 
rep 
associative layout nest 
nest 
rep definition rep hypothesis lay case nest 
lay nest hypothesis definition rep definition nest layout nest nest 
rep nest homomorphism addition composition layout nest 
rep definition rep hypothesis lay case text 
lay text hypothesis definition rep definition text layout nest text 
rep text absorbs nest layout text 
rep definition layout layout rep hypothesis lay remaining cases similar 
fix acts documents alternative layouts 
code collected figures 
function requires generalisation best 
best processes document chooses best layout result argument layout fits represented exactly section 
comparison hughes algebra hughes fundamentally different concatenation operators 
horizontal concatenation operator written 
complex nesting line second operand cancelled succeeding lines second operand indented far text line operand 
vertical concatenation operator written simpler adds newline documents 
detailed description operators see hughes 
hughes operators associative associate way 
equations 



holds second 
horizontal concatenation left unit horizontal composition cancels nesting second argument inherently right unit 
vertical concatenation adds newline unit 
infixr 
infixr 
infixr 
data doc nil doc 
doc nest int doc text string line doc 
doc data doc nil string text doc int line doc nil nil 

nest nest text text line line group flatten 
flatten nil nil flatten 
flatten 
flatten flatten nest nest flatten flatten text text flatten line text flatten 
flatten layout nil layout text layout layout line copy layout copy pretty printer best nil nil 
nest text text length line line 
better better fits fits false fits nil true fits text fits length fits line true pretty layout best pretty printer continued comparison single concatenation operator associative left right unit 
define analogue vertical concatenation 


line 
follows immediately 
associative 

associate 
unit 
expressiveness hughes sep operator takes list documents concatenates horizontally spaces result fits line vertically 
contrast group operator fits document line possible 
hughes pretty printers return documents return lists concatenated lists processed sep pretty printers return documents 
approaches encourage different styles 
hughes layout typically specified sep operator appropriate nesting added line 
typical entry look 
cond sep text 
pp nest text 
pp nest text 
pp layout typically delimited single nested group 
cond group nest text 
pp 
line 
text 
pp 
line 
text 
pp styles slightly different equally easy format 
layouts easy hughes hard impossible vice versa 
instance form gave easier hughes horizontal concatenation compute amount nest second form harder hughes requires restructuring program combine return list documents combined sep combinator 
layouts hughes express 
clear layouts useful practice clear impose difficulties hughes choosing place line breaks discussed 
optimality say pretty printing algorithm optimal chooses line breaks avoid overflow possible say bounded choice looking characters line width 
hughes notes algorithm choose line breaks combinators optimal bounded 
example 
sep text text 
text text text text text text possible layouts 
bc bc print line width twelve second layout chosen 
vertical segment arbitrarily long optimality requires unbounded lookahead 
avoid arbitrary lookahead hughes uses heuristic algorithm occasionally overruns line avoided 
contrast pretty printing algorithm optimal bounded 
possible combinators expressive indentation line depend layout chosen previous lines 
derivation hughes derives pretty printer application algebra inspired approach taken 
hughes derivations complex 
hughes document set contains flat alternative newline sep offers flat alternative component documents flat alternative 
result hughes treat empty document sets specially 
hughes requires code sequences apply negative nesting code scope nesting introduced horizontal concatenation exited 
empty document sets negative indentations required 
final code efficient hughes long 
oppen describes pretty printer similar capabilities described 
algorithm optimal bounded line breaks chosen avoid overflow possible lookahead limited width line 
oppen algorithm buffer fairly tricky implement 
attempt implementing combinators described buffer similar way oppen quite complex 
presents second attempt uses algebra inspired hughes simpler 
hughes 
algebraic approach works 
john hughes simon peyton jones jeffrey lewis daniel leijen comments earlier versions note 
hug hughes 
design pretty printer library 
jeuring meijer editors advanced functional programming springer verlag lncs 
opp oppen 
pretty printing 
acm transactions programming languages systems 
pey peyton jones 
haskell pretty printer library 
available www cse ogi edu simonpj 

