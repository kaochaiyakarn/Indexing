tractable multiagent planning epistemic goals wiebe van der hoek department computer science utrecht university university liverpool netherlands wiebe cs uu nl michael wooldridge department computer science university liverpool liverpool zf wooldridge csc liv ac uk epistemic goal goal knowledge possessed agent group agents 
address problem plans developed group agents cooperate bring goal 
novel approach problem problem formulated model checking alternating temporal epistemic logic atel 
introducing logic model checking algorithm show model checking problem logic tractable 
show multiagent planning treated model checking problem atel discuss related issue checking knowledge preconditions multiagent plans 
illustrate approach example 
describe example implemented mocha model checking system conclude discussing relationship planning speech acts communities 
categories subject descriptors artificial intelligence knowledge representation formalisms models modal logic temporal logic model checking general terms theory verification keywords epistemic temporal logic model checking planning 
epistemic goal goal knowledge possessed agent group agents 
example alice may goal making bob know combination safe alice may goal making common knowledge bob chris raining london 
epistemic goal relates knowledge generally beliefs possessed agent group agents 
address problem plans developed group agents cooperate permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
aamas july bologna italy 
copyright acm bring goals 
simplest case agent isolation bring epistemic state agent slightly complex case agent cause group agents collectively know 
alternatively group agents attempt bring particular epistemic state individual agent general case group agents 
possibilities covered 
approach problem paradigm planning model checking pioneered giunchiglia colleagues 
approach planning domain encoded semantic structure model particular logic goal expressed formula asserting desired state affairs possible achieve 
planning viewed process checking formula representing goal satisfied model representing domain 
area computation tree logic ctl 
approach temporal logic incorporates knowledge operators 
logic called alternating temporal epistemic logic atel extension alternating temporal logic atl alur henzinger kupferman 
atl novel generalisation ctl path quantifiers ctl replaced cooperation modalities atl formula hh ii group agents expresses fact cooperate eventually bring 
ctl path quantifiers paths 
paths 
expressed atl cooperation modalities hh ii emptyset agents cooperate 
hh ii grand coalition agents cooperate 
atel extends atl addition operators representing knowledge 
operators representing knowledge individual agents atel includes modalities representing knows common knowledge 
remainder structured follows 
presenting alternating epistemic transition systems semantic structures represent domains 
introduce logic atel giving semantics terms 
model checking algorithm atel section show complexity atel model checking problem ptime complete 
section introduce multiagent planning problem show problem reduced atel model checking problem 
section introduce example scenario describe scenario implemented freely available atl model checking system called mocha show system able check various atel properties particular show able check existence multiagent plans epistemic goals scenario 
conclude comments short discussion related 

alternating epistemic transition systems introducing semantic structures represent domains 
structures straightforward extension alternating transition systems alur colleagues give semantics atl 
formally alternating epistemic transition system tuple finite non empty set atomic propositions fa finite non empty set agents finite non empty set states epistemic accessibility relation agent require equivalence relation gives set primitive propositions satisfied state system transition function maps states agents choices available agents 
set choices available agent system state require function satisfy requirement system completely controlled component agents state set choices intersection 
singleton 
means agent choice system completely determined 
epistemic relations 
denote union accessibility relations 
denote transitive closure give semantics common knowledge knows modalities logic 
computations 
states agent say state successor exists set intuitively successor possible outcome choices available system state denote succ set successors state say simply successor agents succ intuitively successor system state agents cooperate ensure state system enters 
computation infinite sequence states state successor computation starting state referred computation denote th state similarly denote finite prefix infinite suffix respectively 
strategies outcomes 
intuitively strategy model agents decision making process strategy may thought kind plan agent 
strategy agent bring certain states affairs 
formally strategy agent total function satisfy constraint 
set agents indexed set strategies ff agent define set possible outcomes may occur agent follows corresponding strategy starting system state set contain possible computations agents enforce cooperating strategies note grand coalition agents system cooperate uniquely determine state system singleton 
similarly set set possible computations system 

alternating temporal epistemic logic alternating epistemic transition systems structures model systems interest 
introduce language represent reason structures 
language alternating temporal epistemic logic atel extension alternating temporal logic atl alur ganzinger kupferman turn takes inspiration branching temporal logics ctl ctl 
just formulae alternating temporal logic interpreted respect alternating transition systems formulae atel interpreted respect alternating epistemic transition systems introduced 
presenting detailed syntax atel give overview intuition key constructs 
atel extension classical propositional logic contains conventional connectives expect find 
implies 
addition atel contains temporal cooperation modalities atl follows 
formula hh ii group agents formula atel means agents cooperate ensure true 
similarly hh ii means cooperate ensure true state 
formula hh ii means cooperate ensure remains true time true true time 
atel formula formed respect alternating epistemic transition system primitive proposition formulae atel hh ii hh ii hh ii set agents formulae atel agent formula atel set agents formula atel 
interpret formulae atel respect introduced preceding section 
formally state formula write mean satisfied equivalently true state system rules defining satisfaction relation follows iff iff iff hh ii iff exists set strategies hh ii iff exists set strategies hh ii iff exists set strategies exists iff iff iff 
proceeding introduce derived connectives include remaining connectives classical propositional logic 
useful connectives temporal logic 
hh ii hh ii hh ii hh ii hh ii hh ii hh ii hh ii asserting collection agents able bring state affairs dual express fact group agents avoid state affairs 
expresses fact group cooperate ensure true remaining agents system collection strategies follow eventually achieved 
formally defined abbreviation hh ii defined abbreviation hh ii 
generally omit set brackets inside cooperation modalities writing hha bii usually write hhii hh ii 
applications atel hope clear atel succinct expressive language expressing complex properties multiagent systems 
primarily concerned applications atel attempt give flavour kind properties may expressed 
atel suitable language cope dynamics appropriate analyse communication issues 
consider system containing sender receiver environment env messages sent 
certain fairness conditions environment get rid messages forever express fact environment prevent sender sending message received 
env send speech acts modeled atel 
question state simply corresponds constraint opens alternatives fq fq similar agent knows knows cf 

answer provided agent selects appropriate choice 
easy add distributed knowledge operator atel 
expresses cooperative property group guarantee implicit knowledge eventually known hh ii ignorance may important pre postcondition 
security protocols agents share common secret key instance typically want expressing send private information revealing message agent hhi jii common knowledge group important 
particular interested conditions ensure hh iit temporal operator schema expresses common knowledge group bring 
clear negative result obtaining common knowledge model actions stronger communication 
instance may knowledge producing actions common knowledge producing actions making announcement 
announcement choose set worlds transitive closure accessibility relations leads worlds 
simple example suppose agent knows common knowledge common knowledge tells truth 
knows model tell truth separately announce public hh ii knowledge games investigated particular way learning multiagent systems 
epistemic updates interpreted simple card game aim players find deal cards 
having winning strategy easily translates applicability atel goes epistemic updates epistemic post conditions rule knowledge plays important role pre conditions expressing knowledge dependent abilities hhi jii model checking algorithm property generate calls knowledge program 
example ability expressing bob knows combination safe able open long combination remains unchanged 
course agents strategic choices epistemic pre post conditions stake rational agent bases choices knowledge typically try maximize knowledge time minimize competitors 
epistemic conditions needed security communication protocols agent needs know secret key order read message obtain new knowledge 

model checking atel known branching temporal logic ctl lacks expressive power fairness example expressed vanilla ctl see discussion relative merits ctl versus temporal logics 
ctl attractive point view formal methods model checking problem ctl computationally cheap ctl model size ctl formula size problem checking valid solved time 
possible implement efficient industrial strength formal verification tools checking finite state systems satisfy ctl specification :10.1.1.111.7245
attractive computational properties ctl known carry alternating temporal logic alur 
fact model checking alternating temporal logic tractable particularly intriguing problem generalises interesting problems interest 
example realizability problem showing possible implement system sys satisfies particular specification simply involves model checking formula maximal model encodes possible input output relations environment system sys operate 
section show tractability model checking alternating temporal logic carries atel deterministic symbolic model algorithm atel runs time polynomial size formula size system checked 
core algorithm function eval takes input formula atel alternating epistemic transition system returns output set states formula satisfied 
eval function recursive subsidiary definitions function pre takes input set agents set states returns output set states system states agents cooperate force state function img takes input state binary relation returns set states accessible img fq rg 
notice inputs functions may easily computed time polynomial size inputs structure computed pre function immediately derived function 
prove key properties lemma 
algorithm correct 
proof 
need show passed formula structure algorithm returns set states fq ignoring obvious cases consider input formula form hh ii algorithm return set states cooperate ensure true 
hh ii fixpoint character axiom atel hh ii hh ii hh ii follows hh ii understood maximal solution fixpoint equation hh ii function maps formulae atel formulae atel 
loop lines relatively standard algorithm computing greatest fixpoints 
similarly hh ii fixpoint axiom atel hh ii hh ii hh ii algorithm lines conventional algorithm computing fixpoints 
cases simply involve computation img function jqj times described 
lemma 
algorithm terminates 
proof 
simply note recursive analytic recursive calls sub formulae original input formula primitive propositions recursive base 
show proposition 
atel model checking ptime complete 
proof 
ptime hardness follows fact atel subsumes atl model checking problem known ptime complete 
membership ptime examination model checking algorithm atel 
note fixpoint computations require time linear size set states pp 
computation common knowledge worst case knowledge operators requires computation transitive closure done time warshall algorithm 
recursive call analytic subformula input formula clear computation requires polynomial time size inputs 

multiagent planning important development ai planning community idea planning model checking 
idea follows 
classical planning problem viewed tuple consisting domain goal achieved 
domain encodes state transition properties environment goal achieved 
intuitively domain corresponds encodes actions performed perform performance actions change state 
goal simply viewed formula denotes set states true 
giunchiglia colleagues insight domain plan required encoded model md branching temporal logic ctl goal plan may encoded state formula ctl 
checking exists plan achieve goal domain treated model checking problem check md true formula asserts path model eventually leads state true 
md path witness truth formula model encodes plan achieves goal 
efficient contemporary ctl model checkers leveraged build planning systems 

function eval returns subset 

return fq 
elsif 
return eval 
elsif 
return eval eval 
elsif hh ii 
return pre eval 
elsif hh ii 

eval 


pre 

return 
elsif hh ii 

eval 
eval 


pre 

return 
elsif 
eval 
return fq img 
elsif 
eval 
return fq img 
elsif 
eval 
return fq img 

function model checking algorithm atel 
tractability atel model checking suggests exploited form potentially powerful approach multiagent planning 
idea somewhat similar ctl planning approach 
suppose wish develop agent guaranteed achieve goal environment env 
proceed encode possible interactions agent environment initial knowledge assumptions encoded accessibility relations env initial state check env hhaii answer problem positive witness truth strategy guaranteed eventually achieve 
strategies atl atel defined section essentially strong plans 
define agent circumstance combination events date 
obvious advantage atel atl ctl planning approach easily extends multiagent planning generate joint plan group achieve simply check hh ii answer questions positive collection strategies member jointly strategies ensure eventually true 
additional expressive power atel atl means planning problems involving epistemic goals easily expressed 
example hh ii expresses requirement cooperate ensure knows 
express fact group cooperate common knowledge 
hh ii shown multiagent planning epistemic goals reduced model checking problem atel 
know discussion model checking atel ptime complete tractable 
techniques developed symbolic model checking binary decision diagrams algorithms efficiently implemented extremely large state spaces :10.1.1.111.7245

case study experiments short case study illustrating ideas 
discuss experiments conducted mocha model checking system evaluate ideas 
train controller system consider train controller adapted 
system contains agents trains controller see 
trains occupy circular track 
point tracks pass narrow tunnel room trains tunnel time 
traffic lights sides tunnel red green 
trains equipped signaller send signals controller idea send signal approach tunnel 
controller receive signals trains controls color traffic lights 
task controller foremost ensure trains tunnel time secondary task ensure smooth running system trains move tunnel forced tunnel 
mocha system train controller system modelled alur colleagues prototype model checking system atl called mocha 
mocha takes input alternating transition system described relatively high level language called loosely resembles high level programming languages system capable randomly simulating execution system formulae atl automatically checking truth falsity transition system 
atl formulae mocha capable invariant checking checking property true reachable states system 
current implementation mocha capable model checking arbitrary atl formulae determining exists collective strategy achieve multiagent goal exhibit strategy merely announces exists 
model developed alur colleagues train modelled automaton states see away state initial state train wait state waiting green light enter tunnel tunnel state train tunnel 
transitions states may guarded example order train go condition signal green true 
state transition labelled condition condition assumed true 
addition agent transit state may send signal indicated dashed lines 
example train entering tunnel sends signal controller effect 
note just train state transition necessarily mean may lazy terminology mocha staying state 
train controller starts setting traffic lights red 
train approaches tunnel indicated entering tunnel signal controller checks opposing light red light approaching train set green allowing access 
train moves tunnel indicated signal controller controller sets light associated train red 
checking epistemic properties mocha various possible atl properties system discussed may automatically checked mocha 
currently mocha support knowledge modalities atel 
discuss preliminary approach developed check knowledge properties mocha involves translating knowledge formulae atl 
idea inspired theorem proving methods modal logics exploit fact formulae modal logic automatically translated order logic 
main component atel missing mocha accessibility relations give semantics knowledge 
relations come 
interpreted systems approach 
state agent write state denote local state agent system state agent local state includes program counter local variables 
define accessibility relation follows iff state state emphasise approach known widely distributed systems epistemic logic communities 
suppose want check system state agent knows 
amounts showing state state represent properties directly formulae atl automatically checked mocha 
order need additional notation express value state constant logical variable state denotes state value state 
express atl invariant formula hhii state note saying invariant stating hold reachable states system 
way reading agent state carries information 
formulae directly written properties checked mocha phi mocha text form operator 
turning back train example show number knowledge properties system proven 
consider property train tunnel knows train tunnel state tunnel state tunnel fe wg translating mocha text form atl schema gives formulae structure train controller sytem train states transitions signals away wait light green left tunnel tunnel 
arrived tunnel tunnel controller train train train controller system 
tunnel tunnel tunnel tunnel successfully model checked 
show train away tunnel know train tunnel 
hhii state tunnel state tunnel state tunnel fe wg train checking formulae fail 
tunnel tunnel tunnel tunnel conclude way train knows train tunnel tunnel case knows 
hhii state tunnel state tunnel fe wg 
check properties relating knowledge ability 
example prove agent knows system cooperate allow eventual access 
hhii hh ii state tunnel fe wg wish show agent knows quantification agent knowledge accessible states states system 
write train controller mocha form tunnel fact quantifying states system gives common knowledge grand coalition agents cooperate eventually get train tunnel hhii hh ii state tunnel fe wg planning epistemic goals recall discussion preceding chapters general structure formulae need check order generate plans epistemic goals hh ii means cooperate know 
quantification mocha property expressed easily possible 
see assume agent distinct states saying bring knowledge agent saying agent state carries information ensure enters agent state carries information ensure enters 
agent state carries information ensure enters observation allows rewrite hh ii atl hhii state hh ii state atl formulae directly coded checked mocha 
property prove relates train knowledge train tunnel 
consider possible cause train know tunnel 
saw train tunnel knows train away tunnel definite knowledge position train 
train know train tunnel tunnel 
property check grand coalition agents cooperate train know tunnel hhii hh ii state tunnel fe wg train property translated slightly simplified property readily checked mocha 
tunnel interestingly subset agents bring knowledge subset agents guaranteed get train tunnel 
example property hold 
hhii hhaii state tunnel fe wg know common knowledge entire system cooperate get train tunnel 
conclude common knowledge entire system cooperate eventually cause train know train tunnel hhii hh ii state tunnel fe wg 
concluding remarks introduced natural extension alternating temporal logic alur colleagues includes modalities representing knowledge common knowledge 
simple example illustrated existing model checker put verify formulas atel particular determine existence collective plans bringing epistemic goals 
witness existence proof strategy multi agent case set strategies plans 
think approach extended deal complex examples including theoretical ones muddy children multi agent systems information hiding enclosing may options agents cf 
benefit keeping tasks secret 
know fragment atel easily translated atl local propositions may substantially broaden fragment see propositions translate epistemic goals linear temporal logic 
lot emphasis modelling knowledge dynamics framework turn generalises mas approaches belief revision 
clear atel offers framework facilitate 
impressive platforms emerged integrate dynamics rationality decision making 
enhancement begun computational relevance integrated theories 
especially focus mentioned platforms far formalising epistemic notions game theoretic settings 
question formalisations finding winning strategies games imperfect information example asked cf 

social choice community discovered atl :10.1.1.111.7245
firmly believe epistemic operators provide valuable tool allowing agents reason coalition need join 

alur de alfaro henzinger krishnan mang qadeer rajamani 
mocha user manual 
university berkeley report 
alur henzinger mang qadeer rajamani 
mocha modularity model checking 
cav tenth international conference computer aided verification lncs volume pages 
springer verlag berlin germany 
alur henzinger kupferman 
alternating time temporal logic 
proceedings th ieee symposium foundations computer science pages florida october 
baltag 
logic players 
bulletin economic research 
clarke grumberg peled :10.1.1.111.7245
model checking 
mit press cambridge ma 
van 
knowledge games 
phd thesis university groningen groningen 

opponent modeling dynamic epistemic logic games imperfect information 
sc 
thesis preparation 
emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume formal models semantics pages 
elsevier science publishers amsterdam netherlands 
engelhardt van der meyden moses 
knowledge logic local propositions 
proceedings conference theoretical aspects reasoning knowledge tark pages evanston il july 
fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge ma 
giunchiglia traverso 
planning model checking 
fox editors advances ai planning lnai volume pages 
springer verlag berlin germany 
van der hoek wooldridge 
model checking knowledge time 
editors model checking software proceedings spin lncs volume pages 
springer verlag berlin germany 
van linder van der hoek 
ch 
meyer 
actions change mind 
wansing editors knowledge belief philosophy ai pages 
akademie verlag 

ch 
meyer van der hoek 
epistemic logic ai computer science 
cambridge university press cambridge england 
pauly :10.1.1.111.7245
logical framework coalitional effectivity dynamic procedures 
bulletin economic research 
pnueli rosner 
synthesis asynchronous reactive module 
proceedings sixteenth international colloquium automata languages programs 
rosenschein zlotkin 
rules encounter designing conventions automated negotiation computers 
mit press cambridge ma 
vardi 
branching vs linear time final showdown 
margaria yi editors proceedings conference tools algorithms construction analysis systems tacas lncs volume pages 
springer verlag berlin germany april 
wooldridge dixon fisher 
tableau proof method temporal logics knowledge belief 
journal applied non classical logics 
