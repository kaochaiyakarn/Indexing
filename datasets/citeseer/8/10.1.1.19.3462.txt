probabilistic roadmaps path planning high dimensional configuration spaces kavraki petr jean claude latombe mark overmars uu cs august delta utrecht university department computer science box tb utrecht netherlands tel 
robotics laboratory department computer science stanford university stanford ca usa 
department computer science utrecht university box tb utrecht netherlands 
probabilistic roadmaps path planning high dimensional configuration spaces kavraki petr jean claude latombe mark overmars technical report uu cs august department computer science utrecht university box tb utrecht netherlands issn probabilistic roadmaps path planning high dimensional configuration spaces kavraki petr jean claude latombe mark overmars new motion planning method robots static workspaces 
method proceeds phases learning phase query phase 
learning phase probabilistic roadmap constructed stored graph nodes correspond collision free configurations edges feasible paths configurations 
paths computed simple fast local planner 
query phase start goal configurations robot connected nodes roadmap roadmap searched path joining nodes 
method general easy implement 
applied virtually type holonomic robot 
requires selecting certain parameters duration learning phase values depend considered scenes robots workspaces 
values turn relatively easy choose 
increased efficiency achieved tailoring components method local planner considered robots 
method applied planar articulated robots degrees freedom 
experimental results show path planning done fraction second contemporary workstation mips learning relatively short periods time dozen seconds 
acknowledgments kavraki latombe partially supported arpa onr 
kavraki acknowledges support rockwell foundation 
overmars partially supported esprit iii bra project promotion dutch organization scientific research nwo 
new planning method computes collision free paths robots virtually type moving stationary obstacles static workspaces 
method particularly interesting robots degrees freedom dof say 
increasing number practical problems involve robots effective motion planning methods available solve 
method proceeds phases learning phase query phase 
learning phase probabilistic roadmap constructed repeatedly generating random free configurations robot trying connect configurations simple fast motion planner 
call planner local planner 
roadmap formed free configuration space space lp robot stored undirected graph configurations nodes paths computed local planner edges learning phase concluded postprocessing improve connectivity 
learning phase multiple queries answered 
query asks path free configurations robot 
process query method attempts connect start goal configurations nodes roadmap paths feasible robot 
graph search done find sequence edges connecting nodes roadmap 
concatenation successive path segments transforms sequence feasible path robot 
notice learning query phases executed sequentially 
interwoven adapt size roadmap difficulties encountered query phase increasing learning flavor method 
instance small roadmap constructed roadmap augmented reduced intermediate data generated queries processed 
interesting possibility explored particularly useful conduct trial error experiments order decide computation time spent learning phase 
run planning method values parameters selected time spent learning phase 
values depend considered scene robot workspace experience results obtained values spanning large intervals 
difficult choose set satisfactory values scene family scenes preliminary experiments 
increased efficiency achieved tailoring components planning method particular local planner considered robots 
method quite easy implement run 
details engineered way fit better characteristics application domain 
demonstrated power method applying number difficult motion planning problems involving variety robots 
report detail experiments planar articulated robots linkages dofs moving constrained workspaces 
method directly applicable kinds holonomic robots spatial articulated robots workspaces kl 
additionally version method described successfully applied nonholonomic car robots 
cases experimental results show learning times required construction adequate roadmaps roadmaps capture connectivity free space low 
range seconds relatively easy problems minutes difficult problems dealt 
roadmap constructed path planning queries processed fraction second 
small query times planning method particularly suitable dof robots performing point point motions known static workspaces 
examples tasks meeting conditions include maintenance cooling pipes nuclear plant point point welding car assembly cleaning airplane 
tasks dofs needed achieve successive desired configurations effector avoiding collisions rest arm complicated workspace 
explicit programming robots tedious time consuming 
efficient reliable planner considerably reduce programming burden 
organized follows section gives overview previous research relates research 
section describes motion planning method general terms focusing specific type holonomic robot 
learning phase query phase discussed detail 
sections apply method planar articulated robots 
section describe specific techniques substituted general ones planner handle robots efficiently especially dofs 
sections describe number experiments results analyze variations parameter values affect planning results 
section presents results obtained customized implementation method embedding specific techniques section 
section discusses experimental results obtained general implementation method 
section concludes 
running times reported obtained dec alpha workstation section obtained silicon graphics indigo workstation 
relation previous path planning robots known static workspaces studied extensively decades lat 
renewed interest developing heuristic practical path planners 
dof robots planners designed extremely fast bll 
considerable attention directed creation efficient heuristic planners dof robots 
robots increasingly useful industrial applications complete methods case overwhelming complexity 
new emerging applications motivate trend computer graphic animation motion planning drastically reduce amount data input human animators molecular biology motion planning compute motions molecules modeled spatial linkages dofs docking molecules 
complexity complete path planning methods high dimensional configuration spaces led researchers seek heuristic methods embed weaker notions completeness probabilistic completeness partially adapted specific problem domains order boost performance domains 
years impressive results obtained potential field planning methods 
methods attractive main heuristic function guide search path potential field easily adapted specific problem solved particular scene goal configuration 
main lines research particularly noteworthy method dynamic potential field proposed ft planning paths robots dofs 
potential function depends distance robot obstacles rate variation distance current direction motion robot 
method fast simple examples may get stuck local minima potential function difficult ones 
compute paths dof manipulator vertical pipes nuclear plant interactive human assistance escape local minima 
ft authors learning scheme avoid falling local minima 
learning phase probabilities moving neighboring configurations falling local minimum accumulated array number dofs number intervals discretizing range dof 
planning phase probabilities heuristic function addition potential function guide robot away local minima 
learning scheme applied success robots dofs 
size array impractical grows larger 
techniques computing potential functions escaping local minima high dimensional spaces bl bll 
randomized path planner rpp described bl escapes local minima executing random walks 
successfully experimented difficult problems involving robots dofs 
practice results plan motions performing operations plane 
rpp embedded larger manipulation planner automatically animate graphic scenes involving human figures modeled dofs 
examples identified rpp behaves poorly cg zg 
examples rpp falls local minima basins attraction bounded obstacles narrow passages escape 
probability random walk finds way passage zero 
fact knows rpp computes potential field difficult create examples 
way prevent happening rpp randomly potential functions solution time consuming 
bf promising method variational dynamic programming method tackle problems similar complexity problems solved rpp 
interesting lines include gg gz sequential framework backtracking proposed serial manipulators ch motion planner performance proportional task difficulty developed arbitrary dof robots operating cluttered environments 
planner kon finds paths dof manipulators heuristic search techniques limit part space explored planner utilizes genetic algorithms help search path high dimensional spaces 
parallel processing techniques investigated cg lpo 
planning method differs significantly methods referenced part potential field cell decomposition approaches 
method applies roadmap approach lat constructs network paths free space 
previous roadmap methods include visibility graph voronoi diagram oy silhouette methods 
methods compute single shot roadmap completely represents connectivity free space 
visibility graph voronoi diagram methods limited low dimensional spaces 
theory silhouette method applies spaces dimension complexity little practical 
contrast method builds roadmap incrementally probabilistic techniques 
techniques apply spaces dimension produce roadmap amount time allocated 
course time short computed roadmap may represent connectivity free space 
planner roadmap guaranteed fully represent free space connectivity techniques run long eventually don know long 
building roadmap method heuristically identifies difficult regions free space generates additional configurations regions increase network connectivity 
final distribution configurations roadmap uniform free space denser regions considered difficult heuristic function 
feature helps construct roadmaps reasonable size represent free space connectivity 
particular allows implemented planner efficiently solve tricky problems requiring choices narrow passages kind problems rpp tackles poorly 
note practical methods dof robots exception method ft rpp shot method precompute knowledge free space transferred run 
consequently problems rpp method solve usually faster constructed roadmap 
learning time included duration path planning process case planning done workspace problems rpp faster 
authors different teams builds previous separately 
single shot random planner described ove subsequently expanded learning approach 
papers emphasis robots low number dofs 
similar techniques applied car robots move forward backward symmetrical nonholonomic robots car robots move forward sve 
independently preprocessing scheme similar learning phase introduced kl planning paths dof robots 
scheme builds probabilistic roadmap free space focuses case dof robots 
need expand roadmap difficult regions space noted addressed simple techniques 
better expansion techniques introduced kl kl 
combines ideas previous papers extends powerful faster planner 
presents limited subset experimental results obtained method interested reader encouraged look previous papers additional results particular results involving types robots 
computation times reported papers obtained previous versions method orders magnitude remain meaningful 
noted planner bares similarities approach developed independently teams proposed hst 
general method describe path planning method general terms holonomic robot focusing specific type robot 
learning phase data structure called roadmap constructed probabilistic way scene robot workspace 
query phase roadmap solve individual path planning problems scene 
problem specified start configuration goal configuration robot 
roadmap constructed undirected graph 
nodes randomly generated free configurations robot edges correspond simple paths edge corresponds feasible path connecting configurations paths refer local paths computed extremely fast powerful planner called local planner 
local paths explicitly stored roadmap recomputing cheap 
saves considerable space requires local planner succeed fail deterministically 
assume learning phase entirely performed path planning query processed 
noted learning query phases interwoven 
query phase start configuration goal configuration method tries connect nodes successful searches sequence edges connecting transforms sequence feasible path robot recomputing corresponding local paths concatenating 
denote robot space free subset called free space 
learning phase learning phase consists successive steps refer construction expansion step 
objective obtain reasonably connected graph vertices provide uniform covering free space sure difficult regions space contain learning phase nodes 
second step aimed improving connectivity graph 
selects nodes heuristic evaluator lie difficult regions space expand graph nodes generating additional nodes neighborhoods 
covering free space final roadmap uniform depends local space 
construction step initially graph empty 
repeatedly random free configuration generated added new node select number nodes current try connect local planner 
planner succeeds compute feasible path selected node edge added actual local path memorized 
selection nodes try connect done follows set candidate neighbors chosen set nodes certain distance metric pick nodes order increasing distance try connect selected nodes graph connected cycles created resulting graph forest collection trees 
query succeed edge part cycle sensible consume time space computing storing edge 
cases absence cycles may lead query phase construct unnecessary long paths 
drawback easily eliminated applying smoothing techniques roadmap learning phase particular paths constructed query phase 
roadmap contained cycles smoothing operations eventually produce better paths 
local planner succeeds find path nodes connected components dynamically updated 
graph search required deciding node picked connected 
presentation precise ffl delta symmetrical function theta returns local planner compute feasible path free configurations arguments ffl function theta called distance function defining learning phase pseudo metric 
require symmetrical nondegenerate 
construction step algorithm outlined follows loop randomly chosen free configuration set candidate neighbors chosen fcg forall order increasing connected component delta update connected components outline leaves number components unspecified 
define random configurations created propose local planner clarify notion candidate neighbor choose distance function 
creation random configurations 
nodes constitute uniform random sampling configuration obtained drawing coordinates interval values corresponding dof uniform probability distribution interval 
obtained configuration checked collision 
collision free added discarded 
collision checking requires testing part robot intersects obstacle distinct bodies robot intersect 
done variety existing general techniques 
general implementation considered section test performed analytically optimized routines library gie 
alternatively iterative collision checker described qui automatically generates successive approximations objects involved collision test :10.1.1.52.9953
workspaces may faster specific collision checker see section 
local planner 
local planner deterministic fast 
requirements strict 
learning phase non deterministic planner local paths simply stored roadmap 
roadmap require space major problem 
concerning fast local planner clearly tradeoff time spent individual call planner number calls 
powerful local planner succeed finding path exists 
relatively nodes required build roadmap capturing connectivity free space sufficiently reliably answer path planning queries 
local planner probably slow somewhat compensated small number calls needed 
hand fast planner successful 
require configurations included roadmap called call cheaper 
choice local planner affects query phase 
purpose having learning phase possible answer path planning queries 
important able connect start goal configurations roadmap detect connection possible quickly 
requires roadmap dense contains nodes easy connect start goal configurations 
preferable fast local planner powerful build large roadmaps configurations widely distributed free space 
tried local planners fast slower powerful experimental observations clearly confirmed see mas sve 
choosing fast local planner learning phase advantages 
local planner query phase connect start goal configurations roadmap 
second local paths memorized roadmap 
quite general local planner applicable holonomic robots connects configurations straight line segment configuration space checks line segment collision joint limits 
verifying straight line segment remains joint limits straightforward 
hand collision checking done follows bl discretize line segment generally path generated local planner number configurations pair consecutive configurations point robot positioned configuration lies eps away position robot configuration eps input positive learning phase constant 
configuration test robot positioned grown eps collision free collision checker discussed 
configurations yield collision conclude path collision free 
eps constant computation robot bodies grown eps done 
refer local planner general local planner 
node neighbors 
important choice candidate neighbors node definition set considerably affects performance construction step executions local planner form single time consuming operation step 
prevent executions local planner lead effectively extending knowledge stored roadmap 
mentioned try connect configurations connected component roadmap 
second try avoid calls local planner return failure submitting pairs configurations relative distance distance function smaller constant threshold maxdist 
jd leaves possibilities actual definition done experiments different definitions gives results wide range problems 
consider candidate neighbors nodes distance maxdist algorithm outline try connect nodes neighborhood defined maxdist order increasing distance skip nodes connected component time connection tried 
considering elements order expect maximize chances quickly connecting configurations consequently reduce number calls local planner successful connection results merging connected components 
experiments useful bound size set constant typically order 
additional criterion guarantees worst case running time iteration main loop construction step algorithm independent current size construction step takes linear time size graph constructs 
symbols characters denote parameters planning method 
learning phase distance function 
function construct sort set candidate neighbors new node defined pair configurations reflects chance local planner fail compute feasible path configurations 
possibility define measure area volume workspace region swept robot moves path computed local planner absence obstacles 
local planner automatically induce specific distance function 
general exact computation swept areas volumes tends time consuming 
rough inexpensive toevaluate approximations swept region measure functions vary approximately measure give better practical results 
example general local planner described connect may defined longest euclidean distance point robot travels workspace robot moves line segment joining configuration space max robot kx gamma denotes point robot position workspace robot configuration kx gamma euclidean distance 
expansion step number nodes generated construction step large set gives fairly uniform covering free space 
easy scenes connected 
constrained ones free space connected consists large components small ones 
effectively capture connectivity generally number large components usually exceeds number connected components contains larger number small components 
frequently observed situation experiments 
expansion step intended improve connectivity graph generated construction step 
typically graph disconnected place place corresponds narrow difficult region free space 
idea underlying expansion step select number nodes lie regions expand 
expanding configuration mean selecting new free configuration neighborhood adding configuration trying connect nodes way construction step 
expansion step increases density learning phase roadmap configurations regions believed difficult 
gaps components graph typically located regions connectivity increase 
propose probabilistic scheme expansion step 
node associate positive weight heuristic measure difficulty region large considered difficult region 
normalize weights nodes add 
repeatedly select node probability selected expand node 
remains define heuristic weight 
possibility count number nodes lying predefined distance number low obstacle region probably occupies large subset neighborhood 
suggests defined inversely proportional number nodes distance possibility look distance nearest connected component containing distance small lies region components failed connect indicates region difficult may obstructed 
idea leads defining inversely proportional alternatively structure identify difficult regions define behavior local planner 
example local planner failed connect nodes indication lies difficult region 
particular heuristic function depends extent input scene 
function idea produced results tried ffl construction step new node compute failure ratio defined total number times local planner tried connect node number times failed 
note local planner fails connect nodes failure counted failure ratios way configurations included construction step get meaningful failure ratios 
ffl expansion step node compute proportional failure ratio scaled appropriately weights learning phase add decided nodes expand choose perform expansion 
done experiments different techniques selected technique call random bounce walks 
holonomic robots consists repeatedly picking random direction motion space moving direction obstacle hit 
collision occurs new random direction chosen 

expand node compute starting limit computation time duration short amount say seconds 
final configuration reached edge included path computed explicitly stored generated nondeterministic technique 
record fact belongs connected component try connect connected components network way construction step 
expansion step creates new components worst fails reducing number components 
weights computed expansion step modified new nodes added nodes expand selected set nodes generated construction step 
alternatively update weights expansion step inserts new node believe potential gain recomputing weights largely offset time requires 
expansion step remaining small components discarded 
component considered small number nodes percent typically total number nodes graph discarding small components represents roadmap query phase 
may contain components 
time allocated learning phase computation roadmap 
clearly range adequate values depends considered scene adequate value determined experimentally new scene 
important parameter divided construction step time expansion step time 
experience ratio gives results large range problems 
query phase query phase query phase paths arbitrary input start goal configurations roadmap constructed learning phase 
assume moment free space connected roadmap consists single connected component query consists start configuration goal configuration try connect nodes respectively feasible paths fails query fails 
compute path connecting feasible path eventually constructed concatenating local paths recomputed local planner applied pairs consecutive nodes reversed 
wishes path may improved running smoothing algorithm 
main question compute paths queries preferably terminate quasi instantaneously expensive algorithm desired 
strategy connecting consider nodes order increasing distance try connect local planner connection succeeds 
ignore nodes located maxdist away consider chance success local planner low 
connection attempts fail perform random bounce walks described subsection 
adding node roadmap try connect local planner 
soon successfully connected apply procedure connect general roadmap may consist connected components usually case free space connected 
may happen free space connected instance roadmap dense 
roadmap contains components try connect start goal configurations nodes component 
consider components roadmap order increasing distance fs gg component proceed single component define distance fs gg component follows distance configuration minimum distance fs gg maximum 
connection component succeeds path constructed single component case 
method returns failure fails connect roadmap component 
examples roadmap consists components failure rapidly detected 
note certain kinds local planners render unnecessary recomputation collisions network edges corresponding paths reconstructed 
planning stage faster 
example general local planner subsection aborts collision detected 
planning time intermediate configurations path induced planner recomputed stored need check collision 
situation different local planner abort collision detected performs certain action 
planning stage collision checked recomputed path action repeated just collision detected 
path planning queries fail frequently indication roadmap may adequately capture connectivity free space 
time spent learning phase increased 
necessary construct new roadmap scratch 
learning phase incremental simply extend current roadmap resuming construction step algorithm expansion step algorithm starting current roadmap graph learning query phases 
application planar articulated robots section describe application planning method planar articulated robots fixed free bases 
section techniques specific robots substituted general techniques planning method order increase efficiency 
purpose presentation illustrate easiness general method holonomic robots engineered better suit needs particular application 
specific discussed possible 
section discuss experiments implementation method embeds specific techniques described section experimental results general implementation method demonstrate method remains quite powerful specific components 
rest refer implementations customized implementation general implementation respectively 
presentation shorter consider planar articulated robots revolute joints arbitrary number 
illustrates robot links line segments 
links may polygons denoted 
points designate revolute joints 
point denotes base robot may may fixed relative workspace 
fixed revolute joint 
planar articulated robot 
translate freely plane robot said free base 
point called endpoint robot point link preferably located furthest away similarly robot base free point preferably located furthest away revolute joint defined certain internal joint limits denoted low low constrain range possible orientations take relative gamma robot base free translation bounded axes cartesian coordinate system embedded workspace low low respectively 
represent space link planar articulated robot low theta low theta theta low base fixed low theta low theta theta low theta low theta theta low base free 
call self collision configuration configuration non adjacent links robot intersect 
may may allow configurations 
allow case examples considered free space constrained obstacles set self collision configurations 
assume joint limits prevent self collisions adjacent links 
discuss specific techniques local path planning distance computation collision checking apply family robots defined 
techniques applied possibly minor adaptations types articulated robots robots prismatic joints multiple kinematic chains see kl articulated robots workspace see kl 
local path planning 
configurations wish connect local planner 
local planner constructs path follows translates constant relative velocity joints index straight lines workspace connect positions configuration positions configuration motion planner adjusts position joint straightforward inverse kinematic equations point relative follow motion led 
odd position determined rule computed rotating joint constant revolute velocity relative linear velocity point recall subsection local path discretized sequence configurations collision checking 
specific technique verify coordinates configuration joint limits 
motion aborted collision occurs joint moves limits point follow motion led 
observed cases motion manage connect configurations brings robot configuration close pays try connect straight line space fails declare failure local planner connect refer planner specific local planner 
workspace region swept robot local path computed specific local planner configurations typically smaller path joining straight line segment configuration space computed general local planner described subsection 
local paths generated specific planner collision free generated general planner 
collision checking expensive eps discretization local path yields configurations 
hand specific planner fast fast general planner 
checking dofs remain joint limits local path requires inverse kinematic computation determine configuration coordinates path 
furthermore check rigorous performed finite number configurations 
experience planning method performs significantly better examples involving planar articulated robots specific local planner general 
distance computation 
association local planning technique propose distance function configuration space denote position point workspace robot configuration define theta 
kj gamma kj gamma euclidean distance 
robot fixed base term sum zero 
function better approximation area swept robot local paths computed specific local planner general distance function defined equ 

collision checking 
workspace allows fast collision checking technique 
technique link robot regarded distinct robot dofs translation dof rotation 
bitmap representing configuration space robot precomputed describing free subset space describing subset link collides obstacle 
configuration checked collision configuration link computed tested space bitmap operation 
configuration link particularly fast compute specific local planner planner directly provides coordinates points link 
note need create bitmap link robot 
example links line segments single bitmap computed shortest link modeling longer links short line segments 
collision checking long link requires multiple access bitmap 
bitmap link computed collection bitmaps corresponding fixed orientation link 
link obstacles modeled collections possibly overlapping convex polygons construction bitmap done follows algorithm lp produce vertices obstacles link space 
algorithm takes linear time number vertices objects 
draw fill obstacles bitmap 
workstations second operation done quickly raster scan hardware originally designed efficiently display filled polygons graphic terminals 
bitmap may computed fft method described kav complexity depends size bitmap 
fft method advantageous obstacles originally input bitmaps 
case experiments show computing bitmap size order theta theta takes seconds 
computation bitmap needed collision checking performed prior learning phase 
clearly technique practical workspaces requires generation bitmaps 
mentioned ways adjusting general path planning method specific robot 
example placed cluttered workspaces robots type considered section yield spaces collision free configurations form tiny portion typically fraction total space 
small ratio configurations randomly generated learning phase collision free 
generated configurations rejected collision checking test 
optimizations applied step 
example draw configuration coordinates sequence base endpoint robot check link collision soon location gets determined order discard configurations outside free space early possible 
specific tuning may desirable ultimately requires frequent changes implemented planner 
point gains efficiency small longer worth burden making specific changes keeping track 
results customized implementation section consider implementation general method section local planner collision checker distance function replaced specific ones described section 
precise collision checking obstacles done bitmap technique self collisions detected analytically 
planner implemented experiments reported dec alpha workstation model 
machine rated benchmark specfp specint running dec osf 
tested planner number test scenes 
scene consists workspace containing polygonal obstacles planar articulated robot links line segments see figures 
means reflect limitation method 
particular specific local planner collision checker section apply robots polygonal links bitmaps may required 
modeling links line segments facilitates quick changes description robot graphic display paths easy 
parameters planner consider section ffl time spent construction step ffl time spent expansion step ffl maxdist maximal distance nodes local planner may try connect ffl eps constant discretize local paths collision checking ffl maximum number calls local planner node ffl rb expand duration computation random bounce walk performed expansion step learning phase ffl rb query maximum number allowed connecting start goal configuration roadmap query phase ffl rb query duration computation query phase 
notice parameters determines upper bound time takes answer query 
test scene input set configurations hand refer test set 
fixed independently create different roadmaps starting different values random value generator 
examples discussed keep largest connected component roadmap components simply discarded 
try connect configuration roadmaps record percentage times planner succeeds connection prespecified amount time seconds 
way believe quite realistic characterization performance planner 
particular ensure results reflect just lucky run bad 
independently repeat experiment number different times parameters described choose fixed values experiments preliminary experimental results 
notice important choose configurations test set manually 
obvious reasons random generation similar learning phase tends produce configurations easily connected roadmap 
proceeding manually allows select interesting configurations example configurations robot lies narrow passages workspace obstacles 
random generator learning phase produced configurations 
results obtained representative scenes shown figures fixed base robot free base robot fixed base articulated robot 
shows configurations forming test set fixed base articulated robot scene narrow gates 
column table shows total time spent learning phase 
time broken columns 
values parameters planner maxdist eps interpretation values note workspace described unit square rb expand sec rb query sec rb query 
row table separately generated roadmaps indicated learning time 
roadmaps generated different rows computed independently roadmap row reused construct larger row 
column gives average number nodes runs largest roadmap component learning phase 
columns labeled configurations 
report success rate trying connect seconds corresponding configuration produced roadmaps 
trial defined parameters maxdist rb query rb query roadmap 
table shows learning time seconds rows configurations successfully connected generated roadmaps exceptions 
located row configurations connected produced roadmap trials row 
exceptions expected randomized technique 
note actual timings connections roadmaps small fraction second 
shown report time takes connect configurations roadmaps produced learning times seconds 
failure connect largest component produced seconds denoted 
table report column size components produced nodes 
easy see preprocessing time seconds clear difference size major component smaller ones 
contain small percentage total nodes presence affect path planning times 
path planning succeed configurations connected scene revolute joint fixed base robot 
avg 
success rate sec sec sec nodes results customized planner scene fig 
expansion 
avg 
success rate sec sec sec nodes results customized planner scene fig 
expansion 
size connection roadmap time sec sec sec sec components timings connecting configurations roadmap 
roadmaps produced 
simple breadth search algorithm typically takes second find path nodes roadmaps examples 
path planning takes fraction second 
case configurations tried scene configurations considered 
shows percentage successful connections roadmaps created expansion 
corresponding rows tables figures report results obtained learning time 
generated independent roadmaps row 
show average number nodes largest component column success rate trying connect roadmaps 
general percentages successful connections lower table 
difference shows clearly learning time small 
interested obtaining solution path planning problem fast possible better spend part time allocated learning phase expansion step spend completely construction step 
mentioned ratio gives results wide range problems 
free base articulated robot 
performed experiments free base articulated robot see 
robot total dof free base revolute joints 
parameter values previous experiments 
figures show results obtained expansion respectively 
cases percentage successful connections roadmaps greater expansion total learning time 
learning phase seconds configurations connected scene revolute joint free base robot 
avg 
success rate sec sec sec nodes results customized planner scene fig 
expansion 
avg 
success rate sec sec sec nodes results customized planner scene fig 
expansion 
roadmaps produced 
actual timings connecting roadmaps order fraction second path planning shown configurations takes fraction second 
results general implementation customized implementation previous section solves efficiently path planning problems involving planar articulated robots 
section wish demonstrate general implementation planner gives results variety examples 
planner considered essentially implementation method described section 
customized implementation implementation specific techniques local path planning collision checking distance computation 
described section local path constructed configurations straight line segment joining space distance function defined equ 
collision checking done analytically routines library gie 
report experimentation conducted articulated robots joints connected polygonal links 
noted implementation directly applicable holonomic robots robots polyhedral links moving workspaces 
experiments conducted silicon graphics indigo workstation processor running mhz 
machine rated benchmark specfp specint 
comparable machine results previous section 
results obtained representative examples 
scene shown dof robot revolute joints prismatic joint indicated double arrow 
scene shown slightly difficult revolute joint robot narrow areas workspace 
existing planners motion planning problems scenes challenging ones 
considerably easier scenes section due relatively low number dofs robots presence tight areas workspaces robots 
experiments conducted test scenes similar somewhat simpler section 
scene consider difficult scene dof robot 
scene dof robot 
success rate scene success rate scene sec sec sec results general planner scenes fig 

configurations fixed construction time expansion time fixed learning time independently create roadmaps 
roadmaps consider main connected component test query configurations succeeds seconds 
words test quickly connected main connected component roadmap method described section 
repeat experiment number different construction times expansion times 
pair times report success rate percent query phase 
parameters fixed values experimentation reported previous section maxdist eps rb expand rb query sec rb query 
interpretation values maxdist eps note scaled scenes way workspace obstacles just fit unit square 
figures start configuration shown dark grey goal configuration white 
robot configurations path solving query displayed various grey levels 
results experiments described 
see query scene solved cases having learned seconds 
learning seconds suffices successfully answer query cases 
scene observe similar behavior 
results show general implementation able efficiently solve complicated planning problems 
applied problems involving dofs previous section learning times required build roadmaps longer 
example experiments indicated minutes learning required order obtain roadmaps capture free space connectivity scene shown 
reports experimental results 
section show percentage times success rate min min min results general planner scene fig 
expansion 
planner succeeds connect specified configurations roadmap independently constructed roadmaps different learning times 
difficult cases clearly customization desirable necessary 
described phase method solve robot motion planning problems static workspaces 
learning phase method constructs probabilistic roadmap collection configurations randomly selected free space 
query phase uses roadmap quickly process path planning queries specified pair configurations 
learning phase includes heuristic evaluator identify difficult regions free space increase density roadmap regions 
feature key solving difficult queries 
method general applied virtually type holonomic robot 
furthermore easily customized run efficiently family problems 
customization consists replacing general components method local planner specific ones fitting better characteristics considered scenes 
reported application method planar articulated robots 
described techniques customize method robots experimental results general customized implementation method 
customized implementation solve difficult path planning queries involving dof robots fraction second learning time dozen seconds 
general implementation efficiently solves difficult challenging problems demonstrating power method 
kl kl prior versions method applied great variety holonomic robots including planar spatial articulated robots revolute prismatic spherical joints fixed free base single multiple kinematic chains 
sve variation method essentially different general local planner run successfully examples involving nonholonomic car robots 
experimental results show method efficiently solve problems capabilities existing methods 
example planar articulated robots dofs customized implementation section consistent randomized path planner rpp bl 
fast difficult problems may take prohibitive time 
observed disparity roadmap method 
sufficient learning usually order dozen seconds probabilistic roadmap method answers queries considerably faster rpp 
learning time included planning time rpp faster problems perform substantial precomputation 
important question method scales consider scenes complicated geometry cost collision checking expected increase 
note workspaces effect limited bitmap collision checking technique section 
bitmaps precomputed collision checking constant time operation cost computing bitmaps fft technique described kav depends resolution size bitmaps 
complicated geometry may require increasing bitmap resolution order represent geometric details desired accuracy 
workspaces situation completely different longer bitmap technique 
experiments workspaces reported kl show higher cost collision checking mainly increases duration learning phase 
query phase collision checking needed connect start goal configurations roadmap 
results kl show duration learning phase remains quite reasonable order minutes obtained simple geometry example robot links line segments 
complicated geometries iterative collision checker qui advantageous :10.1.1.52.9953
collision checker qui considers approximations objects running time average depend geometric complexity scenes :10.1.1.52.9953
rpp planner heavily relies collision checking 
long ran rpp geometrically simple problems automatically animate graphic scenes complex geometry iterative collision checker 
observed dramatic slowdown planner 
challenging research goal extend method dynamic scenes 
question roadmap computed workspace updated obstacles removed added 
answering question useful apply method scenes subject small incremental changes 
changes occur manufacturing assembly cells geometry cell permanent stationary objects fixtures added removed consecutive manufacturing operations 
similar incremental changes occur automatic graphic animation 
second question learning query phase modified obstacles moving known trajectories 
answer question consist applying roadmap method configuration space robot lat 
roadmap built directed graph local paths nodes monotonically progress time axis possibly additional constraints slope curvature reflect bounds robot velocity acceleration 

talbi bessi ere mazer 
genetic algorithms robot motion planning 
th europ 
conf 

intell 
pages 
john wiley sons london england 
bf 
path planning variational dynamic programming 
proc 
ieee int 
conf 
robotics automation pages san diego ca may 
bll 
latombe 
numerical potential field techniques robot path planning 
ieee tr 
syst man cybern 
bl 
latombe 
robot motion planning distributed representation approach 
int 
robotics research 
canny 
complexity robot motion planning 
mit press cambridge ma 
ch chen hwang 
motion planner performance proportional task difficulty 
proc 
ieee int 
conf 
robotics automation pages nice france 
cg gini 
parallel robot motion planning 
proc 
ieee int 
conf 
robotics automation pages atlanta ga 
ft 
local approach path planning manipulators high number degrees freedom 
proc 
ieee int 
conf 
robotics automation pages raleigh nc 
ft 
practical approach motion planning manipulators degrees freedom 
robotics research miura eds pages mit press cambridge ma 
gg gupta gou 
sequential search backtracking 
proc 
ieee int 
conf 
robotics automation pages nice france 
gie 
giezeman 
library planar geometry 
tech 
rep dept comput 
sci utrecht univ utrecht netherlands august 

integration path generation algorithm line programming airbus panels 
aerospace automated conf 
exp sae tech 
october 
gz gupta zhu 
practical motion planning degrees freedom novel approach sequential framework 
proc 
ieee int 
conf 
robotics automation pages san diego ca 
hst th 
schwarz tolle 
motion planning degrees freedom random reflections space obstacles 
proc 
ieee int 
conf 
robotics automation pages san diego ca 
kav kavraki 
computation configuration space obstacles fast fourier transform 
proc 
ieee int 
conf 
robotics automation pages atlanta ga 
appear ieee tr 
robotics automation 
kl kavraki 
latombe 
randomized preprocessing configuration space fast path planning 
tech 
rep stan cs dept comput 
sci stanford univ stanford ca september 
kl kavraki 
latombe 
randomized preprocessing configuration space fast path planning 
proc 
ieee int 
conf 
robotics automation pages san diego ca 
kl kavraki 
latombe 
randomized preprocessing configuration space path planning articulated robots 
proc 
ieee rsj gi int 
conf 
intelligent robots systems munchen germany 
koga kondo 
latombe 
planning motions intentions 
proc 
siggraph 
kon kondo 
motion planning degrees freedom bidirectional heuristic free space enumeration 
ieee tr 
robotics automation 
lat 
latombe 
robot motion planning 
kluwer academic publishers boston ma 
reichert donald greenberg 
real time robot motion planning computer graphics hardware 
proc 
siggraph pages dallas tx 
lp lozano erez 
spatial planning configuration space approach 
ieee tr 
computers 
lpo lozano erez 
parallel robot motion planning 
proc 
ieee int 
conf 
robotics automation pages sacramento ca 
lozano erez wesley 
algorithm planning paths polyhedral obstacles 
comm 
acm 
mas 
motion planning potential field methods 
master thesis dept comput 
sci utrecht univ utrecht netherlands august 
oy yap 
retraction method planning motion disc 
algorithms 
overmars 
probabilistic learning approach motion planning 
proc 
workshop algorithmic foundations robotics san francisco ca appear 
ove overmars 
random approach motion planning 
tech 
rep dept comput 
sci utrecht univ utrecht netherlands october 
qui quinlan :10.1.1.52.9953
efficient distance computation non convex objects 
proc 
ieee int 
conf 
robotics automation pages san diego ca 
overmars 
motion planning car robots probabilistic learning approach 
tech 
rep ruu cs dept comput 
sci utrecht univ utrecht netherlands august 
sve 
probabilistic approach motion planning car robots 
tech 
rep ruu cs dept comput 
sci utrecht univ utrecht netherlands april 
zg zhu gupta 
local minima random search robot motion planning 
tech 
rep simon fraser univ bc canada 
