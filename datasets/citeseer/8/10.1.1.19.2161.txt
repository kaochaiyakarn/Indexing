power pebble exploring mapping directed graphs michael bender antonio fernandez dana ron amit sahai 
exploring mapping unknown environment fundamental problem studied various contexts 
works focused finding efficient solutions restricted versions problem 
consider model limited assumptions environment solve mapping problem general setting 
model environment unknown directed graph consider problem robot exploring mapping assume vertices labeled robot hope succeeding means distinguishing vertices 
reason provide robot pebble pebbles drop mark vertex identify vertex 
show 
robot knows upper bound number graph vertices learn graph efficiently pebble 
robot know upper bound theta log log pebbles necessary sufficient 
cases algorithms deterministic 
aiken harvard university oxford street 
email bender deas harvard edu 
supported nsf ccr ccr 
laboratory computer science mit 
current address de de universidad de madrid 
email upm es 
supported spanish ministry education army daah arpa contract 
laboratory computer science mit technology square cambridge ma 
email theory lcs mit edu 
supported nsf postdoctoral fellowship 
laboratory computer science mit technology square cambridge ma 
email theory lcs mit edu 
supported dod doctoral fellowship 
laboratory computer science mit technology square cambridge ma 
email math mit edu 
supported dod doctoral fellowship 

problem exploring mapping unknown environment fundamental problem applications ranging robot navigation searching world wide web 
large body focused finding efficient solutions variants problem restrictive assumptions form environment cf 

consider model limited assumptions environment give efficient algorithms solve mapping problem general setting 
natural way model problem robot exploring graph 
case graph undirected edges labeled vertices solved time linear number edges depth search 
search techniques improve bound constant factor 
unfortunately exploration mapping problems satisfy constraints 
instance graph represents city having way streets internet contain directed edges 
problem substantially difficult problem directed edges labeled vertices solved greedy search algorithm running time delta number vertices graph number edges 
sophisticated techniques yield improved running times 
regardless directed edges arises vertices uniquely labeled necessarily distinguishable 
situation result limited sensory capabilities robot changing appearance vertices 
assumptions labeling vertices vertices may appear need way mark vertices order hope mapping environment 
model marking device pebble dropped vertex identified retrieved 
notion marking basic simulated situations 
shown robot provided pebble map undirected graph unlabeled vertices time delta repeatedly marking nodes backtracking 
remove assumption graph undirected vertices labeled clear problem solved polynomial time 
main contribution general mapping algorithm 
algorithm efficiently solves mapping problem assuming unique labelings vertices allowing edges directed 
problem 
strongly connected directed graph vertices outdegree vertex vertices labels outgoing edges vertex labeled 
vertices indegrees assumed seen 
robot placed arbitrary starting vertex step traverses edges emitting current vertex 
robot task explore map efficiently 
walking polynomial number steps size graph output graph isomorphic mentioned robot tool help distinguish vertices failure 
example robot traveling decide consists single vertex vertices 
basic tool robot pebble 
robot explores mark vertex dropping pebble identify vertex finds pebble 
finding pebble robot pick 
graph directed robot retrace steps retrieve pebble 
addition undirected edges labeled vertices simplifying assumptions environment include geometric structure planarity random access world wide web 
strongly connected robot necessarily reach fact identical outdegrees worst case minor modifications algorithms graphs having arbitrary degrees 
local weak assumption edges emanating vertex labeled opposed global assumption vertices labeled 
way distinguishing edges clear reach vertex map graph 
bender slonim show robot pebble explore map graph exponential time 
prove robot map graphs polynomial time constant number pebbles know bound lower bound motivates questions pebbles needed learn graphs efficiently known 
pebbles needed unknown demonstrate surprisingly pebbles needed cases 
show ffl robot knows upper bound learn graph pebble time polynomial respectively 
ffl robot know theta log log pebbles sufficient necessary 
cases algorithms deterministic 
lower bound omega gamma log case unknown holds probabilistic algorithms 
intuition 
understand difficulties facing exploring robot consider problem traversing graph visiting vertices edges 
certainly order map graph robot visit vertices edges 
natural technique comes mind random walks 
unfortunately undirected graphs expected time random walk visits vertices polynomial directed graphs time may exponential random walks relatively ineffective 
consider example graph 
figures appear appendix 
graph called combination lock graph order reach rightmost node robot discover unique sequence edge labels combination extending notice polynomial time overwhelming probability random walk visits logarithmic number vertices combination lock 
generally polynomial time randomized algorithm mark vertices exists combination lock graph fully explored algorithm 
return problem learning pebble 
robot traverse combination locks efficiently robot pebble learn random walks 
consider graph shown 
graph consists combination locks combination lock leads 
robot drops pebble top lock travels bottom lock doomed 
robot stuck bottom combination lock pebble traverse lock learn 
notice robot lost pebble knowing size graph trapping helpful 
example illustrates dilemma facing robot explores unknown graph robot drop pebble order learn new terrain robot drops pebble runs risk losing 
closed paths 
avoid losing pebble robot know return 
dropping pebble vertex robot know closed path containing vertex 
path may difficult obtain 
unknown robot identify closed path dropping pebble finding 
encounter chicken egg situation 
order drop pebble robot find closed path 
order find closed path robot drop pebble 
recognize tangible benefit knowing repeating pattern edges times robot enter closed path dropping pebble 
example robot repeatedly follows edges labeled enters cycle moves 
robot knows closed path map subgraph visited path pebble 
clear harness additional power 
repeating pattern edges robot enters closed path map subgraph 
robot may repeat different pattern edges enter closed path map second subgraph 
robot map subgraphs obvious piece maps 
robot little information subgraphs overlap interconnect 
result finding closed generally graphs having high conductance learned efficiently 
paths permits robot drop pebble map small portion graph retrieve pebble solve mapping problem 
order solve mapping problem algorithmic tool call orienting procedure 
orienting procedure allows algorithms construct limited number maps 
trying piece maps algorithm expands separately maps expansion possible executing orienting procedure robot recognize particular vertices graph associated maps 
orienting procedures 
intuitively orienting procedure graph leads robot graph ultimately leaves robot vertex recognizes 
robot recognizes vertex observing output produced procedure 
precisely robot sees output different executions procedure times ends vertex 
notion orienting procedures analogous notion adaptive homing sequences automata theory 
closely related notion robot homing sequences introduced bender slonim 
context learning homing sequences applied rivest schapire learning environments modeled finite automata 
show orienting procedure robot build maps subgraphs containing vertices procedure 
robot provided orienting procedure builds maps partially constructed orienting procedure gradually improves 
map associated different output procedure 
difficulty partial orienting procedure 
underlying graph may look different map associated procedure output suggests 
result robot disoriented lose pebble 
central idea algorithms avoid losing pebble misleading information graph 
algorithms employ tiered structure cycling technique mentioned 
lower level robot uses cycling technique verify safely underlying graph consistent map 
verification fails robot able improve partial orienting procedure 
higher level robot uses generalization cycling technique arbitrary deterministic procedures edge label patterns 
generalized cycling technique allows robot find closed paths visit increasingly large portions visited mapped 
extensions 
results generalize case observed labeling edges robot current vertex function robot previous vertex 
models situation arises navigating city relative location streets exiting intersection determined direction intersection entered 
related 
directly related bender slonim 
bender slonim show cooperating robots explore map unknown directed graphs unlabeled vertices polynomial time 
robots require prior knowledge size graph 
bender slonim demonstrate robots strictly powerful robot pebbles 
prove robot constant number pebbles efficiently learn arbitrary directed graphs knowing upper bound number vertices 
conjecture holds known results disprove conjecture 
log log pebble algorithm unknown simulated robots 
yields deterministic alternative bender slonim randomized robot algorithm 
light results bender slonim see friend worth log log pebbles 
early graph exploration assumed robot finite automaton 
rabin proposed idea providing automaton pebbles help explore 
led body examining number pebbles needed explore various environments 
deng papadimitriou propose study problem exploring unknown directed graph having labeled vertices 
robot may vertices equivalent automorphism avoid issue 
albers henzinger give improved algorithms problem 
works study exploration perspective competitive analysis 
results stated terms deficiency graph minimum number edges added graph eulerian 
rivest singh awerbuch study problem piecemeal learning undirected labeled graphs 
piecemeal learning problem robot required return starting position periodically 
rivest schapire study problem learning environments modeled finite automata 
environment represented directed graph vertex constant possible labelings 
robot learned environment automaton predict label vertex state reached arbitrary walk 
automaton irreducible robot learns topology underlying graph 
algorithms exception permutation automata rely teacher 
teacher supplies counterexamples robot hypotheses 
variants problem rely teacher studied works 
note dean apply cycling technique related different purposes 
exploring navigating geometric environments studied extensively 
sample papers includes 
preliminaries unknown directed graph robot explores maps 
suppose graph strongly connected vertices unlabeled outdegree edges emanating vertex labeled distinct indices dg denote edge label oe hu oe vi 
jvj upper bound exploring robot starts arbitrary vertex robot single pebble 
time step robot may traverse outgoing edge vertex 
addition robot may drop pebble vertex 
pick pebble previously dropped vertex 
say graph vm em isomorphic denoted exists isomorphism graphs preserves edge labels 
exists mapping vm holds vertices vm edge labeled oe edge labeled oe distinguished vertices respectively 
notation say exists isomorphism say consistent exists subgraph containing 
say robot vertex learned graph outputs graph vertex 
time step robot traverses single edge running time algorithm number moves robot 
computation time ignored definition note total computation time algorithms polynomial size graph 
learning single pebble section algorithm learning efficiently graph single pebble knowledge start section describing important subroutine algorithm call path compression 
robot executes subroutine pebble map subgraphs visited closed paths known robot 
section show robot learn assume robot access return path oracle robot query oracle vertex graph receive sequence edges leads back start vertex 
sections progressively weaken assumption 
section formally define orienting procedure describe devise procedure procedures distinguishing vertices 
section section consider robot having source pebbles 
replace assumption robot access return path oracle assumption knows orienting procedure section show robot knowledge explore learn graph building orienting procedure 
compressing closed paths essential building block algorithms 
robot vertex assume robot knows closed path starts ends path visits subgraph consists vertices edges traversed path 
path may visit vertices times necessarily simple cycle 
path compression procedure robot uses pebble identify repeating vertices path construct graph isomorphic precisely path oe oe sequence edge labels corresponding closed path starting vertices visited path robot maintains list length ultimately th entry list identifies th vertex occurring path initially list means unidentified 
goal robot replace unidentified entries vertex names 
algorithm proceeds stages starting robot pebble stage robot drops pebble vertex follows entire closed path robot observes pebble steps vertex reached traversing oe oe robot replaces th entry list th stage smallest index th entry list robot traverses oe oe th step drops pebble vertex reached 
replaces th entry gamma new vertex name 
stage traverses rest closed path returns 
robot observes pebble steps robot replaces th entry list gamma returning robot follows path pick pebble 
algorithm maintains property label appears places list th th vertices closed path 
list completed robot constructs map accordance list edge labels path 
vertices vertices list appear places list edge hw oe lemma vertex path sequence edge labels corresponds closed path starting path subgraph visited path 
path compression procedure runs time delta outputs graph path 
learning return path oracle section assume robot access return path oracle 
time step query oracle receive sequence edge labels returns robot particular vertex show robot learn querying oracle repeated applications path compression procedure 
return path algorithm proceeds delta jej stages 
stage robot learns new edge th stage robot constructs strongly connected map having designated vertex initial map consists vertex edges 
final map output algorithm 
algorithm maintains invariant consistent consistency defined section 
algorithm associates closed path path map path starts ends passes vertices edges strongly connected robot easily compute path length 
say vertex map finished unfinished 
th stage algorithm augments map new edge emanating unfinished vertex vertices edges 
done follows 
unfinished vertex oe label missing edge explore sequence edge labels connecting concatenated oe 
robot performs walk corresponding explore starting queries return path oracle 
return path oracle provides called ret robot returns path ret compresses closed path path path ffi explore ffi ret algorithm lets resulting map 
lemma know path 
path contains path contains subgraph choice oe contains new edge edge labeled oe going 
note time complexity algorithm improved 
formulation serves basis rely return path oracle 
obtain lemma 
lemma length longest return path provided oracle 
return path algorithm runs time delta outputs map isomorphic orienting procedures intuitively orienting procedure graph guides robot graph ultimately leaves robot vertex recognizes 
note orienting procedure lead robot back particular vertex 
assuming orienting procedure weaker assuming return path oracle 
define orienting procedure formally explain notion equivalence vertices 
say vertices equivalent denoted exists automorphism mapping definition orienting procedure op graph properties 

determines robot actions edge labels traverses drops picks pebble 

robots starts ends pebble regardless starting vertex 

procedure deterministic 

procedure returns output 
output function robot sees pebble 
notice procedure deterministic time robot executes orienting procedure starting fixed vertex returns output finishes final vertex 
orienting procedure outputs 

output op output procedure op started vertex final op final vertex reached 
orienting procedure guarantees output op output op final op final op note converse guaranteed 
procedure may vertex different outputs 
show build orienting procedure distinguishing procedures inequivalent vertices definition inequivalent vertices distinguishing procedure dp properties 

definition 
output dp output dp 
notice distinguishing procedure differentiates starting vertices orienting procedure differentiates vertices 
addition distinguishing procedure differentiates single pair starting vertices orienting procedure differentiates possible vertices 
orienting procedure op consider viewed tree top sense leaf top corresponds different output op 
internal nodes top distinguishing procedures 
branches emitting node labeled possible outputs distinguishing procedure 
leaves labeled sequence outputs branches leading root leaf 
consider vertices robot may op terminates output leaf denote set vertices reach 
property dictates vertices reach equivalent 
build orienting procedure type stages extending tree stage 
initially candidate orienting procedure cop empty procedure robot actions tree cop single leaf 
assume inductively cop preserves properties possible outputs cop leaves 
cop complete orienting procedure output corresponding leaf exist inequivalent vertices reach 
dp distinguishing procedure replace leaf dp output dp output dp new tree leaves 
modified cop outputs 
orienting procedure different outputs obtain orienting procedure gamma stages 
shown pair inequivalent vertices exists distinguishing procedure running time 
graph orienting procedure running time 
section exhibit algorithm robot distinguishing procedures builds orienting procedure exploring graph 
learning orienting procedure section assume robot prespecified orienting procedure op graph ease presentation assume section graph automorphisms vertices equivalent 
assumption easily removed sections 
assumption possible output set reach defined section contains single vertex denote output algorithm associates map constructed algorithm proceeds 
map contains designated vertex 
algorithm ensures strongly connected maintains invariant invariant orienting procedure output op consistent 
learning proceeds phases 
phase map augmented new edge 
say map finished vertices finished 
algorithm terminates map finished case outputs 
shorthand path represent path explore represent explore path delta explore delta defined section 
path subgraph visited path starting phase algorithm uses orienting procedure find closed path satisfying 
output path starts ends 
path visits path additional edge 
robot compresses closed path lets resulting map 
find closed path satisfying properties robot 
starting current vertex executes orienting procedure observes output follows path ffi explore 
purposes construction suffices relax definition distinguishing procedure allow output dp output dp final dp final dp 
algorithm may terminate correctly orienting procedure complete 
executes orienting procedure observes output follows path 
robot repeats observes output previously seen 
note output reappear repetitions robot need know 
point robot discovered closed path starts ends furthermore closed path starts path ffi explore visits path additional edge 
informally robot know vertex return prepares vertices possibility 
path ffi explore op running time op 
map gamma length closed path delta op 
lemma closed path compressed time delta op 
obtain lemma 
lemma robot single pebble learn strongly connected graph orienting procedure op time delta op 
learning graph building orienting procedure section show robot having single pebble efficiently explore map directed graph knows upper bound size graph 
recall robot know task impossible 
structure algorithm similar structure algorithm described section 
robot real orienting procedure uses candidate orienting procedure cop 
phase output cop algorithm replaces new larger discovers distinguishing procedure dp reach 
case improves cop dp described section 
improved cop output algorithm discards 
algorithm terminates finished case outputs 
show algorithm maintains invariant relaxation invariant 
invariant candidate orienting procedure output cop exists vertex reach consistent 
particular invariant ensures finished map isomorphic section property reach consisted single vertex provided method robot identify closed paths start method reach may contain vertices equivalent equivalent 
robot observe output twice closed path 
robot knowledge combined observation suggests remedy problem find closed path starts ends vertex reach 
observation deterministic function 
vertex sequence cyclic applications suppose robot repeats executes cop observes output follows path ffi explore 
repetitions entered cycle 
show repetitions find closed path starts ends vertex reach output suppose robot runs algorithm previous section enhancement 
robot find closed paths algorithm serious flaw 
consider map results compressing closed path starts ends reach 
assume subsequent stage algorithm robot obtains new compressing closed path starts ends reach 
argument new larger old holds 
claim size structure new 
old may consistent 
argument new bigger old longer valid 
motivates need map verification procedure 

suppose robot vertex reach 
procedure verify consistent 
difficult allow robot lose pebble 
particular robot hypothesizes path corresponds closed path starting robot attempts compress path 
path closed path starting robot loses pebble clearly consistent 
robot compares map resulting compressing closed path 
allow robot lose pebble able learn graph modify procedure 
new procedure described performs weaker form verification 
show meets needs algorithm 

robot starts follows path times 
clearly consistent robot ends consistent observation know robot entered cycle 

robot drops pebble current vertex follows path 
ffl pebble vertex reached verification fails 
retrieve pebble robot continues repeating path finds pebble 
ffl robot compresses path identified closed path starting resulting map differs verification fails 
verification passes 
refer procedure ver 
note situations ver passes 
consistent 
consistent consistent 
verification fails invariant ver distinguishing procedure 
procedure distinguishes vertex reach consistent 
map length path running time ver delta 
ready describe algorithm 
algorithm 
algorithm proceeds phases 
initially candidate orienting procedure cop empty procedure described section 
phase 
enter closed path robot repeats times 
robot executes cop obtains output appearance output algorithm creates new map consisting single vertex 
robot executes ver verify map 
ffl ver fails ver distinguishing procedure pair vertices reach 
robot uses distinguishing procedure outputs pass fail improve cop described section 
output cop extension cop cop output robot discards 
robot stops repeating skips stages goes phase improved cop 
ffl ver passes robot follows explore 
note definition ver robot follows explore starting vertex consistent 
subroutine viewed function vertex robot starts vertex finishes 
observation know repetitions robot enters closed path consisting number executions 

aim stage determine closed path robot entered 
determine closed path robot repeats times 
sequence outputs observed robot finds smallest composed entirely periodic repetitions outputs precisely gammai gamma seq sequence edge labels traversed cop ffi ver gammap ffi explore gammap ffi ffi ffi explore minimality closed path consists repetitions seq 
determine closed path robot drops pebble repeatedly traverses seq finds pebble traversals seq 
retrieves pebble 

robot proceeds closed path reaches execution cop say output robot compresses closed path replaces resulting map 

new finished algorithm outputs new terminates 
noted ver fails stage robot improve cop 
verifications pass lemma know phase new consistent reach invariant preserved 
ver part closed path note new contains old subgraph 
explore part closed path followed new contains new edge 
algorithm terminates phases phase algorithm improve candidate orienting procedure enlarge map 
precisely candidate orienting procedure improved gamma times gamma maps discarded 
time algorithm maintains maps algorithm builds gamma maps 
map contains delta edges bound number phases follows 
note algorithm may terminate completing orienting procedure 
running time phase sum time find closed path running time compression procedure 
item times sum running time candidate orienting procedure running time verification procedure length exploration sequence 
recall running time verification procedures delta 
recall verification procedures fail distinguishing procedures improving candidate orienting procedure 
bound running time candidate orienting procedure delta 
item amounts 
lemma item bounded 
phases obtain theorem 
theorem robot having single pebble learn strongly connected graph upper bound size graph time 
learning upper bound section state results concerning number pebbles needed learn graphs efficiently graph size unknown 
algorithm section subroutine show dc log log ne pebbles sufficient 
resulting algorithm deterministic 
addition prove matching lower bound demonstrating omega log pebbles necessary 
lower bound applies randomized algorithm uses expected polynomial number moves 
note upper bound total computation time decide moves polynomial lower bound applies note robot simply drop pebble repeat sees pebble robot needs pebble execute 
fact algorithm viewed orienting procedure outputs completed map designated vertex 
robot computationally unbounded 
furthermore upper bound holds pebbles robot indistinguishable lower bound holds distinguishable pebbles 
want study number pebbles needed grows size unknown graph 
denote expected number pebbles probabilistic robot uses graphs size 
def max gn pebbles uses set graphs vertices 
expected running time defined analogously 
recall time step robot single move running time algorithm number moves robot 
theorem constant exists deterministic algorithm learns graphs size polynomial time dc log log ne pebbles knowledge theorem consider algorithm probability greater learns graph expected polynomial time knowing size graph 
omega gamma log 
proofs theorems provided appendix 
albers henzinger 
exploring unknown environments 
proceedings ninth annual acm symposium theory computing 
angluin westbrook zhu 
robot navigation range queries 
proceedings eighth annual acm symposium theory computing pages 

doctoral thesis 
phd thesis mathematical institute academy sciences 
awerbuch rivest singh 
piecemeal graph exploration mobile robot 
proceedings eighth annual acm conference theory pages 
baeza yates culberson rawlins 
searching plane 
information computation pages 
bar eli berman fiat yan 
line navigation room 
proceedings third annual acm siam symposium discrete algorithms pages 
bender slonim 
power team exploration robots learn unlabeled directed graphs 
proceedings fifth annual symposium foundations computer science pages 
berman blum fiat karloff rosen saks 
randomized robot navigation algorithms 
proceedings seventh annual acm siam symposium discrete algorithms pages 
rivest singh 
piecemeal learning unknown environment 
proceedings sixth annual acm conference computational learning theory pages 
easy see proof success probability arbitrary replaced constant 
blum chalasani 
line algorithm improving performance navigation 
proceedings fourth annual symposium foundations computer science pages 
blum raghavan schieber 
navigating unfamiliar geometric terrain 
proceedings third annual acm symposium theory computing pages may 
blum kozen 
power compass mazes easier search graphs 
proceedings nineteenth annual symposium foundations computer science pages october 
blum 
capability finite automata dimensional space 
proceedings eighteenth annual symposium foundations computer science pages 
dean angluin engelson kaelbling maron 
inferring finite automata stochastic output functions application map learning 
machine learning january 
deng kameda 
learn unknown environment 
proceedings second annual symposium foundations computer science pages 
deng 
exploring unknown graph 
proceedings annual symposium foundations computer science pages 
freund kearns mansour ron rubinfeld schapire 
efficient algorithms learning play repeated games computationally bounded adversaries 
proceedings sixth annual symposium foundations computer science pages 
freund kearns ron rubinfeld schapire sellie 
efficient learning typical finite automata random walks 
proceedings th annual acm symposium theory computing pages 
hoffman klein kriegel 
competitive strategy learning polygon 
proceedings eighth annual acm siam symposium discrete algorithms pages 
kohavi 
switching finite automata theory 
mcgraw hill second edition 
andrzej 
exploring unknown undirected graphs 
proceedings ninth annual acm siam symposium discrete algorithms 
papadimitriou yannakakis 
shortest paths map 
theoretical computer science 
rabin 
maze threading automata 
seminar talk university california berkeley october 

traversal problems certain types deterministic non deterministic automata 
unpublished manuscript 
rivest schapire 
inference finite automata homing sequences 
information computation 
rivest schapire 
diversity inference finite automata 
journal association computing machinery 
ron rubinfeld 
exactly learning automata small cover time 
machine learning 
shah 
pebble automata arrays 
computer graphics image processing pages 
zhang 
survey problem learning unknown environment 
unpublished manuscript 
appendix proof theorem algorithm section combined variant standard guess double technique doubling algorithm takes th power suitably chosen precise pebble learning algorithm section takes bound number vertices input suppose polynomial bound running time 
assume pebbles robot distinguishable 
new algorithm works follows graph outdegree guess number vertices graph run steps pebble 
algorithm outputs finished graph vertex edges coming output graph halt 
hand algorithm fails produce finished graph robot loses pebble execution algorithm entire process repeated pebble 
pebble seen execution ignored 
execution fails continue repeat gamma th stage execution successful 
easy see algorithm outputs complete graph output correct number vertices incorrect 
alternatively simply add extra map verification procedure section guarantee output correct fail 
theorem algorithm guaranteed give correct output time long bound larger number vertices graph 
graph graph vertices algorithm succeed stage integer log log log dc log log ne 
gamma running time algorithm nq polynomial lastly algorithm uses dc log log ne pebbles 
deal indistinguishable pebbles add modification 
algorithm assumes robot cycle drop pebble robot walk cycle picking pebbles proceeding 
consider stage parent algorithm integer guaranteed properties algorithm robot fact cycle drop pebble 
picks pebbles left cycle dropping current pebble mistake pebble previously dropped pebbles consequently succeed learning graph 
ensure parent algorithm halt prematurely output incorrect graph stage 
halting graph robot walk entire supposed view graph collecting pebbles sees 
number pebbles finds number pebbles dropped picked runs map verification procedure halts passes 
continues stage 
proof theorem order prove theorem analyze behavior algorithm types graphs outdegree cycles combination locks tails 
formally cycle nodes labeled directed graph vertex set fw delta delta delta gamma directed edges labeled going modn combination lock tail structure see 
ff ff ff delta delta delta ff string integer 
combination lock combination ff tail graph ff vertex set fu um edges gamma edges labeled edges labeled um edge labeled ff edge labeled ff edges labeled important note robot starting vertex start combination lock reach vertex executes consecutive sequence moves ff delta delta delta ff point 
start giving intuition proof 
analyze algorithm times drops pebbles case see pebbles 
show huge gaps pebble dropping times algorithm uses omega log pebbles sufficiently large cycles length quantity omega log exactly threshold gaps pebble drops superpolynomial 
polynomial infinitely time steps pebble dropped time time high probability 
big gaps construct combination lock tail holds 
high probability algorithm drops pebble combination lock fails reach vertices lock allotted running time 
robot fails learn graph 
idea combination locks tails foil robot comes bender slonim argument constant number pebbles insufficient 
novel aspect proof analysis times determine size combination locks algorithm fail 
turn details proof 
suppose contradiction claim theorem expected polynomial time algorithm succeeds learning graphs probability greater omega gammae log pebbles 
polynomial bound expected running time algorithm 
proof standard technique treating randomized algorithm distribution deterministic algorithms infinite string deterministic algorithm random coins probabilities expectations proof taken choice wish study robot behaves doesn see pebbles dropped previously 
formalize look infinite graph vertex set fw edges labeled 
consider behavior robot placed vertex notice robot drops pebble vertex moves sees pebble 
probability robot drops pebble vertices gamma inclusive expected number pebbles dropped robot vertices gamma 
notice lower bound expected number pebbles robot uses cycle vertices behavior gamma moves show superpolynomial gaps pebble dropping times 
claim fixed infinitely 
proof claim suppose 
gamma gamma smallest value log log log log log omega gamma log 
gamma gamma omega gamma log lower bound expected number pebbles robot uses cycle length contradiction 
recall expected running time 
claim find properties ffl ffl ffl 
consider random variable string consisting robot moves contiguous subsequences length string ff occurs probability 
words sequence moves ff length robot performs probability steps fi binary string length consider behavior robot placed vertex combination lock fi tail gamma combination fffi vertex set fu gamma 
runs expected time vertices probability moves fi 
set random coins drop pebble vertex gamma set random coins executes sequence moves ff point moves set random coins moves fi shown pr 
notice output fi output fl string fl length robot sees pebble dropped reaches vertex fl set outputs fl placed fl equivalently fi 
success probability succeed pr fl 
fl disjoint 
figures 
vn gamma vn combination lock graph 


vm gamma vm vm vn gamma vn graph consisting combination locks 

um ff ff ff ff gamma ff ff ff combination lock tail 

