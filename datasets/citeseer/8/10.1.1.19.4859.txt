need replica placement algorithms content delivery networks 
magnus karlsson mahalingam hp laboratories page mill road palo alto ca mail karlsson hpl hp com numerous replica placement algorithms proposed literature content delivery networks 
little done compare various placement algorithms caching 
debates need replica placement algorithms content delivery networks 
uses extensive evaluation algorithms systems web workloads answer question 
conclude simple delayed lru caching scheme outperforms performs best replica placement algorithms 
lru caching complex replica placement algorithms caching clearly preferred option 
believe replica placement algorithms necessary properties availability reliability performance bounded update propagation guaranteed content delivery networks 
content delivery networks cdn akamai digital island nowadays web sites effectively reduce latency balance load 
accomplish serving content dedicated distributed infrastructure located world close clients 
foremost problems cdns decide place site contents cdn infrastructure 
algorithms far categorized high level groups caching algorithms replica placement algorithms rpa 
caching generally completely distributed algorithm evaluates placement single access rpa evaluated frequency hours days elaborate centralized 
replica placement problem instance classical file allocation problem fap algorithms allow replicas created considered 
plethora proposed rpas see extensive analysis possible cdns direct comparison caching performed :10.1.1.129.1970
questions answer various rpas compare better simple caching 
quantitatively study previously proposed rpas discover system conditions performance metrics rpas outperform caching 
algorithms considered previously proposed algorithms specifically targeting cdns algorithms systems believe useful context 
order describe algorithms concisely replica placement framework show local caching algorithms map framework rpa decentralized evaluated single access 
evaluate performance algorithms simulating produced placements impact system client perceived latency average accesses threshold metric 
performed internet network topology trace taken large web server 
find number accesses account making decision rpa improves performance substantially greedy heuristic provides best results system capacity constraints :10.1.1.129.1970
rpas storage constraints consideration outperform rpas questioning usefulness rpas storage constraints cdns 
find fast decentralized popularity algorithm greedy ranking algorithm storage consideration produce best placements 
comparing best rpas caching location network find rpas outperform simple lru caching algorithm 
reason assumption rpas know closest object replica located 
assumption system scale algorithms evaluated infrequently day 
propose evaluate caching algorithm low frequency order caching benefit perfect closest replica knowledge 
evaluating simple lru caching algorithm infrequently rpas caching outperforms performs best rpas 
experimental results conclude rpas needed systems considered simple caching algorithm perform better best rpas 
believe rpas useful availability reliability update propagation latency guarantees provided cdn 
open question results extend bandwidth load constrained systems 
rest organized follows 
section describe system model placement algorithms examine 
section describes experimental methodology 
core section reports experimental results 
discuss possible fruitful directions rpa research section section concluded 
assumptions algorithms start providing system model assumptions section 
section define replica placement problem algorithms choose compare caching viewed rpa 
system model system considered data repository consisting set storage nodes just called nodes interconnected network 
nodes replicas objects stored representing data aggregates entire web sites directories single documents 
system clients generate read accesses objects located servers 
goal replica placement problem study decide location object replicas system minimize client perceived latency existing infrastructure 
examine average latency metrics qos metrics 
replica placement algorithms classification framework introduced describe rpas concisely pin point differences 
framework summarized section rpas consider mapped 
algorithm consists problem definition heuristic 
problem definition consists cost function minimized maximized constraints 
problem definitions interested cdns divided main categories depending consider accesses objects 
problem definitions categories classified groups consider single object multiple objects time 
single object problem definition places objects independently 
table lists problem definitions considered study 
problem definitions cdn literature 
full list replica placement problem definitions possible cdns refer 
variables defined follows reads reads ik number read accesses client object time unit 
distance dist ij distance client node represented metric network latency number network hops total link cost 
object size size size object bytes 
access time jk time stamp time object accessed node placement matrix jk indicates node stores object unknown contain result placement 
routing matrix ijk indicates client sends requests object node unknown contain result optimization 
algorithms find deduced 
constraints considered cdn literature number replica constraint jk limits number replicas placed storage capacity constraint size 
jk places upper bound storage capacity node 
heuristics achieve goal set problem definition described primitives metric scope approximation method cost function simplification 
metric scope set clients nodes objects considered making placement decision 
heuristic specify scope considering zero 
example node considered heuristic decentralized run nodes considered centralized 
object scope local objects stored locally accessed locally considered 
approximation method technique placement decision 
ones considered ranking improvement lagrangian relaxation 
ranking starts computation cost impact possible combinations metric scope placing extra object node sorts costs selects best violate constraints 
constraint violated tries placement list 
repeated objects placed 
greedy ranking heuristic recomputes cost function object placed 
specific improvement heuristic distance improvement heuristic 
starts initial placement 
placement random seeded heuristic 
randomly picks object puts node making sure constraints satisfied 
placement better cost keeps reverts back previous 
process repeated predefined number times 
lagrangian relaxation method relaxes constraints original problem moving cost function new problem easier solve 
top algorithm modify usually simplify cost function original problem definition specified 
example problem definition specify cost function reads ik 
dist ij 
ijk heuristic disregard distance just reads ik 
ijk anyway 
table lists heuristics examine 
short description follows 
greedy global centralized heuristic uses greedy ranking global data system :10.1.1.129.1970:10.1.1.129.1970
ranking local decentralized ranking heuristics just uses data available node 
popularity ranking local exception considers number accesses ranking criteria 
rank id cost function group consider object accesses 
single object maxdist max dist ij 
ijk dist dist ij 
ijk group considers read accesses objects 
single object reads ik 
dist ij 
ijk multiple objects mo reads ik :10.1.1.129.1970
dist ij 
ijk table problem definitions proposed cdn literature investigated 
ing dist popularity uses distance cost function 
hotspot centralized ranking heuristic considers accesses clients located specified radius node :10.1.1.129.1970
fan places objects nodes highest fan irrespective actual cost function 
swap centralized dist improvement heuristic described previously 
greedy called greedy seeds swap heuristic result greedy global heuristic 
lagrangian relaxation technique described previously lagrangian swap heuristic seeded result 
plain lru caching representative caching domain 
caching maps nicely framework seen table 
key difference missing table caching evaluated single access rpa usually evaluated frequently 
possible constraints column table lists constraints possible heuristic 
note dictated cost function problem definition 
ones consider object accesses problem definition heuristic place single object nodes placement independent object property 
single object problem definitions take storage constraint consideration intra object dependent local heuristics guarantee number replica constraint intra node dependency 
experimental methodology compare rpas evaluate trace driven simulations 
measure performance impact placements real internet topology web server workload explained section 
describe system performance metrics compare algorithms section tool generate placements algorithms section 
web workloads topology web logs day 
reduce client population tractable size clustered encountered client ip addresses autonomous system belong bgp prefixes 
clustering preserves topological locality reduces number clients 
clusters represent clients system nodes objects may placed 
generate systems nodes number log choose desired number nodes way preserves original access distribution 
url treated separate object 
objects log reduced random selection 
assume objects uniform size evaluate algorithms effectiveness variable size objects 
metric scope cost function possible heuristic approximation method client node object simplification constraints greedy global greedy ranking sc ranking local ranking local local sc popularity ranking local local reads ik sc ranking dist ranking local local dist ij sc hotspot ranking vicinity reads ik sc fan ranking indep indep fanout swap improvement sc greedy greedy ranking improvement sc lagrangian lagrangian sc lagrangian lagrangian improvement sc lru caching ranking local local jk sc table heuristics examined :10.1.1.129.1970:10.1.1.129.1970:10.1.1.129.1970
vicinity means number clients radius node 
possible constraints column lists constraints heuristic consider 
derive distance matrix dist ij level topology generate processing bgp reports 
ideal world dist ij represent average latency nodes impossible measure happens specific routing path 
obtain latency approximations measuring number level hops nodes constructing graph dijkstra shortest path algorithm pairs graph 
shown level hops fair approximation actual latencies internet 
turn hop numbers latencies variation actual latencies undoubtedly formula latency 
hops 
ms 
random value 
performance metrics compare algorithms different cost functions constraints comparison minimized cost function values meaningful 
compare rpas impact perceived performance cdn system 
system performance metrics average client perceived latency client perceived latency threshold 
metric useful due fact example service level agreements sla cdns form xth percentile requests response latency msec 
performance threshold unacceptable users 
study fixing threshold number display graphs result threshold determined 
way reader choose threshold deemed interesting 
evaluation section refers cumulative distribution function cdf client perceived latency produced placements 
larger percentile threshold better algorithm system workload 
algorithm implementations placements algorithms study produced 
tool takes problem definitions heuristic primitives section produces placement algorithm 
way run previously published cdn algorithm variations thereof 
decided run new algorithms believe point diminishing returns reached rpas context today cdns 
uses existing algorithms implementations available 
placements produced validated existing implementations algorithms possible 
algorithms decisions placements pre heuristic computation 
messages message size greedy global nk ck ranking local ck popularity ck ranking dist cn cn hotspot ck fan swap nk ck lagrangian nk ck lru caching table various decision costs algorithms evaluated 
number clients number nodes number objects number object replicas allocated time algorithm executed 
swap number iterations swap lagrangian relaxation run 
observed data know 
rpas run day specified assume produce placements instantaneously 
assumption little impact results workload study quite stable 
details specific parameters algorithms 
vicinity hotspot algorithm defined client ms swap iterates iterations generates feasible solutions 
lagrangian relaxation iterates iterations 
decision costs algorithms shown table 
cost function dist maxdist objects placed way placement object calculated 
assume distance matrix fan vector change infrequently 
information needs fetched 
seen table ranking dist fan 
computation cost lagrangian relaxation valid problem formulation 
get decision cost combined heuristic greedy add computation costs heuristics form union number messages cost union message sizes 
experimental results section show results workload 
start identifying best rpa infrastructure constraints section 
section examine rpas storage constraints identify best ones 
best algorithms compared caching section 
section show simply evaluating caching algorithm frequently caching outperforms best rpas cdns 
infinite capacity section study performance rpas system infinite capacity 
algorithms case allocate objects node want constrained number replica constraint 
report results replicas object results similar values replicas 
examine heuristics table take constraint applied problem formulations dist maxdist table 
reason mo included produces placement identical constraint constraints dependencies objects 
lists average client perceived latencies various heuristics applied latency ms cost function reads distance nodes objects greedy hotspot fanout swap lagrangian random greedy swap lagrangian swap client perceived latency cdf latency ms cost function distance nodes objects greedy hotspot fanout swap lagrangian random greedy swap lagrangian swap client perceived latency cdf latency ms cost function max distance nodes objects greedy hotspot fanout swap random greedy swap heuristic dist maxdist greedy global hotspot fan swap lagrangian random greedy lagrangian graphs show client perceived latencies various algorithms system infrastructure constraints 
table shows average client perceived latencies ms system 
implementation lagrangian relaxation maxdist 
dist maxdist problem definitions results threshold qos metric 
start comparing problem definitions see provides better results dist better maxdist average latency threshold metric 
clients generate far accesses 
threshold approximately ms cost function matter 
thresholds ms average latency values preferred cost function 
rest show results dist maxdist 
focusing know heuristic provides best results 
observation adding swap heuristic greedy lagrangian improves results marginally plain greedy lagrangian 
note hard see graph results greedy greedy lagrangian lagrangian nearly completely overlap 
table average latencies shows small differences clearly 
single heuristics greedy lagrangian produce best placements performance metrics 
greedy preferred lowest decision cost table 
finite storage capacity section compare rpas storage constraints 
corresponds latency ms storage capacity nodes objects greedy hotspot fanout swap lagrangian random greedy mo swap mo popularity client perceived latency cdf latency ms storage capacity nodes objects greedy hotspot fanout swap lagrangian random greedy mo swap mo popularity client perceived latency cdf latency ms storage capacity nodes objects greedy hotspot fanout swap lagrangian random greedy mo swap mo popularity heuristic greedy global hotspot fan swap lagrangian random greedy mo swap mo popularity client perceived latencies various algorithms system storage constraints 
table shows average client perceived latencies ms number replica constraint mo storage capacity constraint respectively 
algorithm system storage constraints assume 
object algorithm replication factor equal dn 
ke storage capacity node 
assures rpas allocate roughly amount object replicas 
algorithm decided placement objects allocated node storage capacity frequently accessed objects node allocated storage capacity constraint 
rest dropped 
shows average client perceived latency threshold results nodes storage capacities objects system 
greedy mo swap mo greedy swap heuristics mo take storage constraints consideration 
popularity local algorithm takes storage constraints consideration 
show results ranking local provides similar results popularity 
starting system store objects see decentralized popularity algorithm performs best followed greedy mo true average metric threshold 
popularity number algorithms threshold ms ms popularity optimizes accesses hit locally step ms algorithms greedy hotspot fanout swap lagrangian perform significantly worse popularity get approximately shown matter algorithm choose node store objects 
placements swap mo significantly improved executing iterations 
decision cost far higher greedy mo summary reason best algorithms outperformed popularity plenty storage space 
popularity best algorithm considering average latencies thresholds approximately ms better fastest exclude fan perform 
section best rpas popularity greedy mo compared caching 
comparison caching generally assumed rpa evaluated infrequently day node knows closest replica object storing located 
information probably dispersed system little cost done infrequently 
section assume information dispersed cost 
hand local caching potentially changes placement single access prohibitively expensive 
assume node caching algorithm know closest copy object storing located 
go origin node fetch object 
assume origin node located ms away network 
ms latency seen knee results origin node latency easily estimated moving knee 
comparison reasons show results cooperative caching scheme plain local lru knows cost closest replica object scheme denoted optimal lru cooperative caching 
shows results caching popularity 
point graphs regular local caching perform looking averages shown latency thresholds ms caching pay heavy penalty going origin server knowledge closest replica thresholds ms produces placements nearly best rpa popularity 
expected storage capacity increases difference caching rpas disappears 
means believe storage going ample caching just best rpas 
caching perform low storage constraints 
examine section 
impact evaluation interval lot research gone cooperative caching field point diminishing returns quite 
schemes tried reach performance optimal lru cooperative caching curve evaluating caching algorithm single access regular time intervals communicating information regarding location nearest replicas 
take regular lru caching algorithm run infrequently communicate closest replica information evaluation points 
evaluation points changes cached contents 
section identified lru caching essence completely decentralized rpa run access uses ranking access times approximation method storage constraint 
take rpa run single access called lru caching run day possible communicate locations closest copy object nodes just possible rpas 
overhead amount information sent going rpa 
gain information closest replica object located cost able latency ms storage capacity nodes objects greedy mo popularity optimal lru cooperative caching caching client perceived latency cdf latency ms storage capacity nodes objects greedy mo popularity optimal lru cooperative caching caching comparison caching greedy mo popularity optimal lru cooperative caching various storage constraints 
evaluate change contents node infrequently 
going refer algorithm delayed caching 
shows results popularity lru caching evaluation interval varied access caching seconds roughly hours 
seen delayed caching better popularity looking averages shown 
threshold metric delayed caching worse threshold lower ms better threshold 
reason delayed caching stores infrequently accessed objects looks access time 
bad local perspective global perspective infrequently accessed objects spread system 
expect greater storage capacity difference schemes 
comparing caching popularity knowledge closest replica caching popularity graph popularity performs better 
conclude section simple caching achieve average better placement best rpas just increase evaluation interval usual access hours days 
doing possible mechanisms rpas infrequently disseminate information location objects 
need rpa conditions system considered delayed caching just 
discussion open questions showed little current rpas today cdns caching better believe need rpas cdns 
cdn provide level performance reliability availability guarantees need rpas achieve goal regular caching provide useful guarantees metrics 
far know little field cdns 
rpas useful cdns allow users content providers write objects 
algorithms limiting performance penalty writes caches write update 
unclear cdn 
cdns start provide update guarantees form replicas object consistent seconds write rpas useful caching able provide guarantees 
best knowledge cdn rpas provide guarantees 
latency ms storage capacity nodes objects popularity popularity popularity caching delayed caching delayed caching caching client perceived latency cdf latency ms storage capacity nodes objects popularity popularity popularity caching delayed caching delayed caching caching comparison caching popularity various evaluation intervals seconds 
caching number regular caching evaluated single access 
popularity popularity algorithm knowledge location closest replicas 
final open question results valid system nodal bandwidth load constraints system network link capacity constraints 
algorithms consider unclear performance benefit compared caching provide 
compare benefits caching replica placement algorithms rpa content delivery networks cdn 
identify rpas provide best latency improvements 
find object accesses account usually big difference 
find decentralized popularity algorithm storage constrained greedy algorithm best number performance metrics 
popularity generally preferable computationally expensive 
compare caching popularity greedy algorithm find plenty storage caching better best rpa 
caching performs worse rpas limited amount storage 
mainly due fact rpas evaluated infrequently day possible communicate information node fetch closest replica object 
caching changes stored content frequently possible local cache go origin server usually located quite distance 
evaluating caching algorithm infrequently rpas communicate knowledge closest copy object way rpa 
way simple caching generally performs better rpa storage constrained systems 
conclude stating need rpas cdn studied believe useful cdns start provide consistency performance availability reliability guarantees 
cdns little research done space 
open question results extends bandwidth load constrained cdns 
acknowledgments authors christos yasushi saito anonymous reviewers greatly improving quality 
akamai 
cambridge ma usa 
www akamai com 
arlitt jin 
workload characterization world cup web site 
technical report hpl hp laboratories 
current schilling 
discrete network location models 
editors facility location theory applications methods 
forthcoming 
digital island 
www com 
foster 
comparative models file assignment problem 
acm computer surveys 

optimum location switching centers absolute centers medians graph 
operations research 
jamin jin jin raz shavitt zhang 
placement internet instrumentation 
proceedings ieee infocom pages march 
jamin raz shavitt 
constrained mirror placement internet 
proceedings ieee infocom pages april 
roberts ross 
object replication strategies content distribution networks 
computer communications march 
karlsson mahalingam 
framework evaluating replica placement algorithms 
technical report hpl hp laboratories july 
www hpl hp com personal magnus karlsson 
plaxton rajaraman 
placement algorithms hierarchical cooperative caching 
journal algorithms january 
leff wolf yu 
replication algorithms remote caching architecture 
ieee transactions parallel distributed systems november 
li golin italiano deng 
optimal placement web proxies internet 
proceedings ieee infocom pages march 

optimal allocation resources distributed information networks 
acm transactions database systems march 
obraczka silvia 
network latency metrics server proximity 
proceedings ieee globecom november 
qiu padmanabhan voelker :10.1.1.129.1970
placement web server replicas 
proceedings ieee infocom pages april 
govindan estrin 
topology informed internet replica placement 
computer communications march 
net 
www net 
vazirani 
approximation algorithms 
isbn 
springer verlag 
dahlin 
bandwidth constrained placement wan 
acm symposium principles distributed computing podc august 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
proceedings symposium operating systems principles sosp pages december 
