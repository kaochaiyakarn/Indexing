discovering temporal patterns multiple granularities li sean wang sushil jajodia center secure information systems george mason university fairfax va usa aj grau 
edu 
events repeat time goes 
example institute pays employees day month 
events may repeat constant span time 
example span time consecutive ranges days 
result regularity temporal pattern captured granularities day week month year oftentimes multiple granularities 
pa defines patterns proposes number pattern discovery algorithms 
focus basics assumes list events timestamps algorithms try find patterns events 
algorithms repeat possibly interleaving steps step generating possible called candidate patterns second step verifying candidate patterns satisfy user requirements 
algorithms pruning techniques reduce number candidate patterns adopt data structure efficiently implement second step 
experiments show pruning techniques data structure quite effective 
important aspect knowledge discovery regards efficient methods find events repeat time goes 
research area fruitful resulting algorithms discover frequent episodes cyclic associations interesting phenomena :10.1.1.41.5540
unfortunately ing research reported literature multiple time granularities years months days repeating patterns 
human activities closely related time granularities 
events repeat may repeat constant span time 
may repeat particular pattern terms multiple granularities 
furthermore event repeat constant span time granularity represent repetition pattern may easier understand human springer verlag part supported nsf aro contract number 
wang partially supported nsf career award 
user 
question ask set events quickly discover repetition pattern terms multiple granularities 
consider employee institute 
suppose st th days month 
example differences consecutive range days 
days considered appear strong regularity 
months considered days event repeats clear regularity 
consider example office hours professor smith monday 
days considered may able say professor smith office hours happen th day 
granularity week considered able say office hours happen monday day week conveys meaningful information human user 
starts observations defines concept simple calendar pattern 
example year month day simple calendar pattern intuitively represents day month year 
intuitive wildcard symbol denote 
complex patterns defined simple ones 
general calendar pattern defines set time points 
calendar pattern discovery problem find user set granularities calendar patterns match set events respect minimum support confidence rates 
support rate pattern percentage events events fall time points calendar pattern confidence rate percentage time points time points pattern contain events 
roughly speaking rates signify tight pattern fits events 
obviously naive algorithm discovery problem generate possible patterns check see required support confidence rates satisfied 
method 
cases due large number possible patterns clearly inefficient method 
optimization necessary 
studies algorithms different optimization methods 
algorithms repeat possibly interleaving steps 
step generates possible patterns called candidate patterns second step checks support confidence rates candidate patterns 
different algorithms different methods generate candidate patterns different ways take advantage previously checked patterns prune batch candidate patterns 
major performance indicator number candidate patterns generated checked 
addition algorithms efficient data structure support checking step 
order validate algorithms study efficiency scalability performed series experiments synthesized data set 
results indicate situations particular algorithms 
summary contribution fold 
identified importance granularities knowledge discovery especially repeating temporal pattern discovery 
second designed algorithms especially pruning techniques efficiently perform discovery task 
third performed experiments study algorithms 
rest organized follows section concept simple calendar pattern defined problem calendar pattern discovery formulated 
section algorithms discovering simple patterns 
section experimental results analyzed 
section discusses related 
section concludes 
problem formulation section formulate calendar pattern discovery problem 
start defining calendar schemata simple calendar patterns 
calendar schema relation schema sense relational database model fields fi corresponding domains di fn dn field time granularity domain union wild card symbol subset integers 
domain di may omitted calendar schema obvious 
tuple dn dn 
calendar schema di wildcard symbol integer di called calendar expression 
calendar expression dn dn defines time periods intuitively described dth granule granules covered th granule granules covered granule granules fn 
description di wild card integer phrase granule need replaced phrase granules granule 
example calendar schema week day hour calendar expression means th hour am day monday week 
similarly represents time periods th hour am day week 
call calendar expression wildcards basic time unit 
basic time unit represents specific granule example schema week day hour represents granule hour th hour day week 
commonly time granularities axe century year month week day hour minute second 
abstractly time granularity countable set nonoverlapping granules granule subset time domain 
users may refer formal treatment 
granule covered granule means time domain subset time domain 
example day covered month day falls 
simplicity require granule fi calendar schema covered unique granule fi granule fi union granules fi 
example month day allowed day covered unique month month union days 
schema year month week allowed week covered unique month 
convenient necessary users define granularities calendar schemata 
example hours day partitioned parts representing early morning morning hour night late night respectively part granule new granularity 
readers referred defining granularities 
notions calendar schema calendar expression defined define simple calendar patterns pattern discovery 
simple calendar pattern sp calendar schema fn fn pair calendar expression constraint set granules fl 
sp defines time periods calendar expression phrase granule granule replaced granule granule respectively 
example calendar expression year month day constraint years months business days sp semantics th days month year days business days 
calendar schema constraint input multiset granules formulate calendar pattern discovery finding sps calendar expression sup port sp greater user minimum support threshold confidence greater user minimum confidence threshold 
sp support input granules fall time periods sp 
sp confidence granules time periods sp contain granule 
roughly speaking rates signify tight sp fits input events 
example pattern schema month day months days set input support rate percentage fall th days month confidence percentage th days month 
reality lot events datasets audit trail data stored gether timestamps 
timestamps usually represented terms multiple granularities terms time granularities month day year hour minute second 
intuitively easy convert input timestamps granules omit details 
input considered multiset timestamps interesting events 
multiset unordered collection elements set may copies element multiset number copies important 
note sets contain duplicate elements 
algorithms section discuss algorithms solving calendar discovery problem 
algorithms interleaving steps 
step generates possible called candidate patterns second checks see candidate pattern satisfies pattern requirements 
algorithms different methods generate candidate patterns step method pattern checking second 
step algorithms interleaves second step 
simplify discussion initially assume input multiset basic time units calendar schema input wn wn 
wi integer basic time unit wn 
represents granule example calendar schema month day assume input january february 
ff input forms need convert 
example timestamp am monday week converted early morning monday week stipulate granularity early morning am am day 
research calendar algebra proposed realize conversions 
due space limitation address issue 
enumeration algorithm ea input form basic time units 
di denote union set set oi elements input 
words di oil 
oi 

note di di di domain definition calendar schema 
natural idea generating candidate sps possible combination dn di taken di calendar expression form candidate sp example input calendar schema year month day di totally idl id candidate patterns 
note possible candidate patterns calendar expression example contain granule input 
note need check sps set 
sp calendar expression din zero support confidence rates di di corresponding time periods intersect input data 
call algorithm generates candidate patterns enumeration way enumeration algorithm ea 
enumeration algorithm intra level pruning eap optimize process generation candidate sps ea proposition initiate initialize sets calendar expressions calendar expressions corresponding sps don satisfy support requirement calendar expressions corresponding sps satisfy support confidence requirements 
read input construct data structure cs 
see section detail 
candidate sp calendar expression generated ea covered skip check pattern requirements cs see section sp sp satisfy support requirement insert sp satisfies support confidence requirement insert output set calendar expressions corresponding sps satisfy pattern requirements fig 

algorithm eap 
proposition 
intra level pruning calendar expression covered calendar expression satisfy support rate requirement satisfy support rate requirement 
see proposition holds need observe set basic time units covered subset basic time units covered support rate sp smaller equal support rate sp sp satisfy support rate requirement sp 
example sp calendar expression month day satisfy support rate requirement sps calendar expressions need verified pattern requirement 
proposition prune sp know sp satisfy support rate requirement covered gives rise algorithm call algorithm eap 
intra level pruning applied line 
calendar expression covered calendar expression time periods represented covered represented syntactically covered di di di 
example covered 
initiate initialize sets calendar expressions calendar expressions corresponding sps don satisfy support requirement calendar expressions corresponding sps satisfy support confidence requirements calendar expressions corresponding sps satisfy support confidence requirement 
read input construct data structure cs 
see section detail 
candidate sp calendar expression generated source point covered skip check pattern requirements cs see section sp sp satisfy support requirement insert sp satisfies support confidence requirement insert insert output set calendar expressions corresponding sps satisfy pattern requirements fig 

algorithm spa 
source point algorithm spa natural idea generating candidate patterns generate possible calendar expressions elements input 
call element pattern source point 
pattern source point 
possible combination calendar expression form candidate sp di wi 
example candidate patterns pattern source point ones calendar expressions 
note candidate pattern contains granule pattern source point input may better ea cases compare experiment section 
clearly pattern contain elements input having zero support confidence candidate pattern element input contained candidate pattern generated element pattern source point 
optimize process generating candidate sps duplicate calendar expressions generated source points eliminated testing 
exam ple calendar expression generated pattern source point sp calendar expression checked time 
furthermore apply intra level pruning proposition eap 
gives rise algorithm call algorithm source point algorithm spa 
line applies intra level pruning ql eliminates duplicate patterns 
granularity algorithm gba pattern discovery problem discuss calendar schema fn fl constraint fin 
decompose problem series discovery problems 
define discovery problem way section calendar schema fn 
fi constraint fin 

input element 
get element input problem 
note problem problem formulated 
clearly calendar expression dn dn dil candidate sp problem pi viewed concatenation calendar expression dn dn 
di candidate sp problem di di see section definition di 
calendar expression problem generated calendar expression problem calendar expression problem generated calendar expression prob lem 
proposition inter level pruning 
proposition 
inter level pruning support rate sp calendar expression dn dn di fin 
ffi sup port threshold problem support sp calendar expression dn dn 
di di fin ffi ffi support thresh old problem di 
reason proposition holds intuitively set basic time units covered calendar expression dn dn 
di di subset basic time units covered calendar expression dn dn proposition may apply algorithm discussed earlier problem applying algorithm directly 
problem check calendar expressions concatenation di di calendar expression sp satisfies support re problem 
example support sp calendar expression problem sps calendar expressions need checked problem 
call method granularity algorithm gba 
sim ea problem 
pattern checking far discussed algorithms generate candidate patterns 
algorithm need check candidate pattern satisfies confidence requirements 
naive method compute support confidence rates sp scan entire input may large time check sp 
need small part input check sp calendar expression sp consists symbol 
order quickly locate part input candidate sp scanning entire input data structure called calendar structure check pattern requirements efficiently 
calendar structure allows single pass input data sufficient 
exchange speed method takes extra memory store calendar structure 
calendar structure cs calendar schema fn fn fl rooted tree having components structural properties arrays levels cells cell associated node 
root node represents granularity fn child nodes root cells represent fn leaf nodes represent fl 
node associated interval cells level 
cell certain level represents granule level granularity 
cell child node holds exactly cells corresponding granules covered granule represented cell 
leaf nodes level 
leaf node cell representing granule input 
cell inner node child node 
inner node child node 
root node leaf nodes fig 

calendar structure example cs 
shows calendar structure example cs calendar schema year month day input falls 
cs easy map basic time unit leaf cell cs 
scan entire input time mapping element basic time unit leaf cell cs maintaining counter leaf cell record number elements fall cell 
time get di see section different algorithms 
definition sp see section easy map sp set leaf cells cs 
example shown map sp years months business days set leaf cells select root cell labeled select cells child node root cell 
select cells represent business days child note selected cells middle layer 
support sp simply sum counts mapped leaf cells sp divided total elements input 
confidence number mapped leaf cells sp counts greater zero divided number mapped leaf cells 
clearly support rate confidence rate computed way consistent defined section 
experiments study performance algorithms algorithms discussed ea eap spa gba implemented programming language java tested sun ultrasparc mhz workstation mb memory 
basic parameters experiments summarized follows different calendar schemata year month year month day rs year month day hour 
constraint months 
constraint months business days constraint rs months business days hours 
different inputs input synthetic multiset basic time units calendar schema wi random integer independently generated uniformly distributed meaningful domain di 
different puts sizes event events tested 
time inputs spans years different calendar schemata 
maximum input megabytes 
different support confidence thresholds different thresholds 
shows execution time different algorithms pattern gen eration check relevance input size 
calendar schema set threshold support confidence 
shows gba maintain counter cell higher levels just leaf level 
fig 

test result different size input calendar schema threshold support confidence 
execution time different algorithms pattern generation check 
time reading input cs 
time reading input cs time different algorithms 
curve shows scalability algorithm reading input cs linear 
curves show scalability algorithm pattern generation check better linear input size 
find algorithms insensitive input size threshold 
reason follows 
input large threshold leaf cell cs mapped input points number candidate patterns generated algorithm stable insensitive input size 
eap performs best spa better small inputs 
reason intra level pruning works eap 
apply intra level pruning spa duplicate removal pruning benefits large size inputs 
spa performs best small inputs duplicate removal main factor cases 
know inter level pruning gba overhead benefits 
shows influence threshold support confidence performance different algorithms input size calendar schema 
clearly eap works best cases 
algorithms spa gba better ea small size inputs order reverse large size inputs 
shows number candidate patterns generated different algorithms versus number patterns denoted suc satisfy support confidence requirement 
see intra level pruning effect eap spa eap saves process elimination duplicate fig 

test result various levels threshold support confidence calendar schema input size events 
execution time different algorithms pattern generation check 
time reading input cs 
number candidate patterns different algorithms number successful patterns suc 
note curves eap spa coincide 
patterns inter level pruning gba works better small inputs large inputs 
note threshold relationship time reading input constructing cs cs curve flat 
test influence calendar schemata performance different algorithms input size threshold support confidence 
note logarithmic scale run time axis 
consider pattern space number possible calendar patterns rs formance different algorithms linear scalability pattern space point view pattern space axis logarithmic scale 
note large pattern space rs gba performs better eap cases eap best 
effect intra level pruning gba distinct calendar schema rs 
input size calendar schema rs gba fig 

test result different calendar schemata input size events threshold support confidence 
execution time different algorithms pattern generation check 
time reading input cs 
best thresholds 
performance eap closed gba 
summary methods generate candidate patterns enumeration method di ea eap gba pattern source point method spa 
problem pattern source point method generate duplicate patterns need eliminated pattern checking process 
time consuming process duplicate removal undermines pruning benefits cases small inputs 
pruning techniques intra level pruning inter level pruning 
intra level pruning technique duplicate removal eap works best cases inter level pruning better calendar schemata larger pattern space 
interesting know benefits overhead intra level pruning inter level pruning way 
address issue 
related general basic research time granularities manipulation time granularities see 
general data mining knowledge discovery research appeared literature 
specifically related temporal data mining 
temporal data mining basic directions 
direction temporal information filter irrelevant events concentrate events happen specific times 
example deal aspect knowledge discovery 
direction ability generate interesting patterns time points important 
user needs provide fig 

test result various levels threshold support confidence calendar schema rs input size events 
execution time different algorithms pattern generation check 
time reading input cs 
patterns 
temporal patterns generally discovered data 
direction find temporal patterns events 
belongs direction 
unique geared discovery temporal patterns multiple granularities 
believe multiple granularities give rise interesting patterns 
similar concepts support confidence issue addressed different discovery frequent itemsets sequential patterns possibly regular expression constraints 
dealing multiset time points multiset itemsets 
relationship time points different itemsets relationship plays important role developing algorithms 
broad sense discovery frequent itemsets sequential patterns complementary 
interesting question combine 
research exists deals general discovery problem looks interesting events temporal patterns events time 
examples general discovery problem include papers provide methods find frequent episodes cyclic association rules respectively 
papers deal multiple granularities 
regarding address particular issue discovering temporal association rules multiple time granularities forthcoming 
discussed ideas believe attempt date accommodate multiple granularities temporal patterns 
introduced notions calendar schemata calendar expressions simple calendar patterns formulated calendar pattern discovery problem 
developed group algorithms efficient pruning techniques solve problem 
reported experiment results shed lights different performance characteristics different algorithms 
mentioned related section algorithms discovers temporal patterns assumption events 
direction extend methods look inter events patterns time 
events may depend temporal patterns 

mannila toivonen verkamo discovering frequent episodes sequences extended 
st conference knowledge discovery data 

ramaswamy cyclic association rules 
proceedings th international conference data engineering 
ramakrishnan database management systems 
mcgraw hill 


bettini jajodia wang time granularities databases data mining temporal reasoning 
springer verlag berlin 
peng wang jajodia algebraic representation calendars extended 
aaai workshop spatial temporal granularity 
austin texas 
ramaswamy mahajan silberschatz discovery interesting patterns association rules 
proceedings th vldb conference 

allen maintaining knowledge temporal intervals 
readings knowledge representation 
morgan kaufman publishers 

bettini wang jajodia general framework time granularity application temporal reasoning 
annals mathematics artificial intelligence 

chandra segev stonebraker implementing calendars temporal rules generation databases 
proceedings international conference data engineering 

ramaswamy mahajan silberschatz discovery interesting patterns association rules 
proceedings th vldb conference 

bettini wang jajodia temporal semantic assumptions databases 
ieee transactions knowledge data engineering 

agrawal imielinski swami mining association rules sets items large databases 
proceedings acm sigmod conference 

agrawal srikant fast algorithms mining association rules 
proceedings th vldb conference 

garofalakis rastogi shim mining sequential patterns regular expression constraints 
proceedings th vldb conference 

