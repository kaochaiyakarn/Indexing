implementing extensible compilers matthias zenger martin odersky swiss federal institute technology inr lausanne switzerland 
new extensions programming languages constantly proposed 
implementing extensions usually turns difficult expensive task conventional compilers lack extensibility reusability 
fundamental techniques implement extensible compilers object oriented language 
able implement extensible compiler passes introduce extensible form algebraic datatypes 
extensible algebraic datatypes defaults yield simple programming protocol implementing extensible reusable compiler passes functional style 
propose architectural design pattern context component specifically targeted building extensible hierarchically composed systems 
software architecture extensible compilers combines algebraic types known functional languages object oriented design pattern 
show approach enables extend existing compilers flexibly modifying source code 
techniques successfully applied implementation extensible java compiler jaco 
traditionally compilers developed fixed programming language 
consequence extensibility reusability considered unimportant properties 
practice assumption hold 
people constantly experiment new language features 
extend programming languages build compilers 
writing compiler extended language usually done ad hoc fashion new language features copy existing compiler 
doing implementation new features original implementation get mixed 
extended compiler evolves independent system maintained separately 
avoid destructive reuse source code propose technique extended compilers reuse components predecessors define new extended components touching predecessor code 
extended compilers derived existing base compiler share components base compiler 
approach basis maintaining systems 
discussing details extensible compiler architecture look traditional organization compilers 
syntax tree recursive data structure different compilation passes operate 
extending source language normally involves extensions syntax tree representation compilation passes operations syntax tree 
section discusses shortcomings existing approaches issue 
extensible algebraic types defaults proposed section solve problem extending representation syntax tree simultaneously extending operations tree 
extensible algebraic datatypes defaults enable reuse existing compiler passes extended compilers 
section discusses extensible algebraic datatypes detail 
general architectural design pattern context component section 
pattern build extensible component systems flexible way 
section define extensible batch sequential compiler architecture 
implemented extensible java compiler architecture 
compiler projects basis implementing language extensions java 
conclude summary experience gained compiler 
extensibility problem traditionally compilation process decomposed number subsequent passes pass transforming program internal representation 
internal representations implemented syntax trees 
compiler passes operations traverse trees 
extension modification compilers source language requires extensibility datatype modelling syntax set passes operating type 
furthermore necessary adapt existing passes 
flatt calls known problem extending data operations simultaneously extensibility problem :10.1.1.100.5370:10.1.1.123.4403
unfortunately functional object oriented approach solves problem satisfactory way 
object oriented language datatype implemented set classes sharing common interface 
call classes variants datatype 
extending datatype simply done creating new variant classes supporting common interface adding new operations tedious 
new operations require extensions modifications existing variants 
functional language variants datatype typically implemented algebraic type 
ordinary algebraic datatypes extended possible add new variants 
hand writing new operations simple operations simply functions type 
object oriented languages functional approach modelled visitor design pattern 
related attempts solve problem published 
open classes tackle shortcomings object oriented approach pragmatic way 
allow user add new methods existing classes modifying existing code breaking encapsulation properties 
open classes provide clean solution extensibility problem practice suffer drawbacks 
new operation typically defined single compilation unit modifying operation done subclassing affected variants overriding corresponding methods 
leads inconsistent distribution code making impossible group related operations separate unrelated ones 
furthermore extending modifying operation entails extensions datatype 
restricts complicates reuse 
instance accessing extended operation context original operation implemented straightforward way 
functional programming languages various proposals support extensibility algebraic datatypes 
prominent ones polymorphic variants extensible types ml proposal 
compares approaches 
papers discuss extensibility algebraic types context building extensible interpreters functional languages 
due lack space refer short discussion 
literature provides modifications visitor design pattern targeted extensibility 
krishnamurthi felleisen friedman introduce composite design pattern extensible visitor 
programming protocol keeps visitors open extensions 
drawback solution new variant added existing visitors subclassed order support new variant 
runtime error appear soon old visitor applied new variant 
palsberg jay generic visitors flexible extend respect problem 
generic visitors rely reflective capabilities underlying system causing severe runtime penalties 
hne translator pattern relies generic functions performing double dispatch operation datatype variant 
solution krishnamurthi felleisen friedman datatype extensions entail existing operations accordingly 
hne proposes translator pattern cases datatypes extended frequently 
extensibility defaults fact extra code necessary adapt operation new variants annoying practice 
observation operation defines specific behaviour variants variants subsumed default treatment 
operation reused modifications extended type new variants properly treated existing default behaviour 
experience extensible java compiler showed extended compilers majority existing operations reused extended types need adapting new variants :10.1.1.18.8540
possible specify default case function operating extensible type function adapted situations new variants require specific treatment 
technique improve code reuse significantly 
solution extensibility problem new notion extensible algebraic types defaults 
describe extensible algebraic datatypes context object oriented language similar pizza algebraic datatypes 
extensible algebraic type derive extended types defining additional variants 
solve extensibility problem functional fashion definition datatype operations type strictly separated 
extensions operation side completely orthogonal extensions datatype 
possible apply existing operations new variants operations extensible algebraic types define default case 
addition adding new variants operations support extending existing variants datatype modifying existing operations subclassing 
extensibility achieved need modifying recompiling original program code existing clients 
extensible compiler passes algebraic datatypes section explain implement extensible compiler passes algebraic datatypes object oriented language looking small example language 
language simply consists variables lambda abstractions lambda applications 
syntax introduced pizza implement syntax trees algebraic type definition class tree case variable string name case lambda variable tree body case apply tree fn tree arg define type checking pass small language 
pattern matching distinguish different variants tree type process method 
class typechecker type process tree tree env env switch tree case variable string return env lookup type case lambda variable tree body case apply tree fn tree arg type process fn env default throw new error 
approach straightforward add new operations passes compiler simply defining new methods 
easy modify existing operation overriding corresponding method subclass 
class extends typechecker type process tree tree env env switch tree case lambda variable tree body default return super process tree env class modifies treatment lambda variant reuses definition variants tree type delegating call super method 
saw extending set operations modifying existing operations cause problems 
extending datatype 
pizza translates variant algebraic datatype nested class extending variants simply done subclassing variant class class extends tree lambda tree variable tree tree body super body missing piece solving extensibility problem consists extension tree datatype new variants 
pizza algebraic types extended way 
overcome problem propose extensible algebraic datatypes defaults 
allow define new algebraic datatype adding additional variants existing type 
definition extended tree datatype adds new variants zero succ class extends tree case zero case succ tree expr think extensible algebraic datatype algebraic type implicit default case 
extending extensible algebraic type means refining default case new variants 
example new type inherits variants tree defines additional cases 
refinement notion new variants subsumed implicit default case tree 
section shows exactly notion turns subtype tree 
able reuse existing operations tree essential subtype tree 
allows apply original type checking pass extended tree 
original type checker performs pattern matching original variants extended variant handled default clause switch statement throws error exception example 
handle new variants correctly adapt type checking pass accordingly overriding process method class extends typechecker type process tree tree env env switch tree case zero return case succ tree expr process expr env return default return super process tree env code fragments demonstrate expressiveness extensible algebraic datatypes context object oriented language java 
opposed approaches section extend datatypes operations completely independent way 
extension dimension enforce adaptations 
pattern matching statement new variants simply subsumed default clause existing operations reused extended datatypes 
approach supports modular organization datatypes operations orthogonal extensibility mechanism 
extended compiler passes derived existing ones simply subclassing 
differences implemented subclasses 
rest reused original system touched 
refer form software development programming difference 
advantage operation algebraic datatype defined locally single place 
conventional object oriented approach distribute function definition classes making difficult understand operation 
principles extensible algebraic datatypes section briefly review type theoretic intuitions extensible algebraic datatypes defaults 
detailed discussion extensible algebraic datatypes defaults 
model algebraic datatypes sums variants 
variant constitutes new type tag tuple component types 
instance consider declaration class case 
case 
defines sum type consisting variant types fields 

respectively 
algebraic type characterized set variants 
want types extensible keep set variants open 
achieve assuming default variant subsumes variants defined extensions formalize notion 
definition algebraic type extends type defining new variant class extends case 
new algebraic type inherits variants defines additional variant 
extensible assume default variant keep variant set open 
extensible algebraic datatype defaults described variant sets set inherited variants set variants default variants capturing variant extensions 
formalize notion introduce partial order algebraic types 
holds equals extends defining additional variants 
setting defined explicitly type declarations 
algebraic type formally described union disjoint variant sets inherited default 
inherited default yi inherited default inherited includes variants get inherited type extending denotes new cases default subsumes variants extensions 
definition variant sets types look default default 
standard typing rules sum types turn subtype variants variants 
example original type supertype extended type tempted believe 
identify types closer look definition default reveals default subsumes variants extensions variants extension contained default covered default 
illustrated algebraic class declaration class extends case 
extension algebraic type completely orthogonal case included default element default 
consequence default real subset default extended type real subtype real subtype reasons 
subtype relationships example illustrated 
algebraic datatypes depicted boxes variants displayed round boxes 
arrows highlight subtype relationships 
specifically outlined arrows represent algebraic type extensions arrows connect variants algebraic types belong 
dashed arrows connect inherited variants algebraic types get inherited 
fig 

subtyping extensions algebraic types approach extended algebraic types subtypes types extend 
existing functions applied values extended types 
new variants simply subsumed default clause pattern matching construct 
interesting observation looking different extensions single algebraic type example 
incompatible supertype 
separation different extensions direct consequence single inheritance extensible algebraic type extend single algebraic datatype 
architectural pattern context component technique described section enables implement extensible datatypes extensible components offering functions operating datatypes 
general mechanism glue certain combination components datatypes build extensible subsystems combined concrete compiler 
configuring program linking corresponding components normally done module system 
unfortunately object oriented languages provide separate module system 
require user class system purpose 
class considered bad substitute module general design patterns help model missing module system functionality specific applications 
design patterns structuring system described literature 
pattern part builds complex systems combining subsystems simpler functionality 
object aggregates number simpler objects called parts uses functionality provide service 
composite variant part emphasis uniform interfaces simple compound objects 
facade helps provide unified interface subsystem consisting interfaces subsystem easily 
design patterns target structural decomposition system 
consider fact designs require implementation component subsystem known clients compile time 
reason design patterns builder addition 
allow configure instantiations runtime 
suitable configuring system dynamically supporting extensibility flexible way 
section describe architectural design pattern context component helps implement extensible hierarchically composed systems 
separates composition system subsystems implementation components 
principle allows freely extend reuse subsystems 
design patterns mentioned context component pattern offers uniform way compose extend modify reuse components subsystems easy implement 
idea suppose implement hierarchically structured component system 
shows system consisting components component represents complex subsystem referring local subcomponents component system component component component expression system implicitly assume systems seen components 
main idea context component pattern separate configuration system implementation components 
call configuration systems contexts 
formally context aggregates components system 
component embedded exactly context 
refers context order access components system 
purpose context object offers factory method components 
methods specify instantiation protocol different components 
typically new instance component created factory method call component singleton respect context 
case component instantiated call factory method 
components represent complex subsystems component example local configuration 
words embedded context specifying local subcomponents 
shows contexts nested structure 
context subcontexts complex subsystems 
context embedded subcontext nested called enclosing context 
components defined nested context access components context components defined enclosing contexts 
hand possible component access components defined subcontexts directly 
introduce graphical notation illustrate structure 
scenario mentioned section get picture component system component component component system context context contexts represented lines 
singleton components embedded context correspond boxes located directly beneath line 
contexts nonsingleton components depicted lifted boxes arrow pointing 
complex components refer subcomponents defined local contexts drawn lines directly beneath components box 
structure structure architectural pattern shown 
pattern different participants context context superclass contexts 
simply defines generic enclosing context 
component superclass components defines method init called immediately component creation initialize component 
context component embedded passed argument init 
init typically gathers components accessed component 
concretecontext concrete context defines particular context system 
provides factory methods embedded components 
methods specify component singleton relative context component initialized nested context defining local subcomponents 
furthermore concretecontext provides factory methods creating local subcontexts 
implements specific component system 
defines customized init method called corresponding context immediately object creation 
context passed argument enabling init method import components accessed component 
possible import components enclosing context 
overloading init method allows flexible embedding components different concretecontext classes 
init methods act adaptors different contexts component embedded 
concretecontext compa context context parent concretecontext concretecontext concretecontext compa compa null compa new compa init return compa new init concretecontext return return new concretecontext void init concretecontext void init concretecontext component context context void init context void init concretecontext void init concretecontext fig 

structure architectural pattern context component important design decision pattern separation component creation component initialization 
separation important break cycles dependency graph components 
look scenario 
symbolic notation get diagram concretecontext concretecontext shows implementations factory methods context concretecontext 
singletons important object created initialized second step 
instantiation mutually dependent components cause endless loop alternately new components created permanently 
consequences context component pattern composite architectural design pattern 
contexts combination 
support hierarchical organizations complex systems 
contexts offer uniform extensible way configure systems 
components system defined explicitly centrally context class context hierarchy seen formal specification system architecture 
context component pattern decouples system composition implementation components 
enables flexible reuse components different contexts 
adaptor form new init method necessary embed component different context 
furthermore context component pattern possible exchange add new components system need source code modifications existing components contexts 
extended systems evolve existing ones simply subclassing 
shows principle extending system 
system gets extended new top level component 
done extending top level context concretecontext 
addition component gets replaced new component local context concretecontext component concrete 
highlights new classes gray background 
symbolic notation scenario looks concretecontext concretecontext concretecontext concretecontext new components contexts displayed gray 
components gray shadow extended subclassed 
example shows extending modifying system entail source code modifications existing classes 
extending system destroy original version 
systems separately 
see component component different contexts 
concretecontext compa context context parent concretecontext concretecontext concretecontext concretecontext concretecontext concretecontext compa concretecontext extensible compilers void init concretecontext void init concretecontext void init concretecontext component context context void init context void init concretecontext fig 

extending system subclassing void init concretecontext void init concretecontext techniques developed section able build extensible compilers 
base software architecture extensible compilers classical design multi pass compiler 
multi pass compiler decomposes compilation number subsequent phases 
conceptually transforming program representation target code emitted 
today compilers central data structure syntax tree internal program representation 
syntax tree initially generated parser modified continuously passes 
software architecture point view design classified repository 
apply context component design pattern 
shows structure simple compiler 
compiler modelled component top level tools context 
compiler composite component consisting subcomponents defined local 
component subcomponents model different compilation passes 
defining singleton component respect context compiler pass accesses object 
implementation structure context component pattern straightforward 
show interesting code fragments starting tools class compiler fig 

simple compiler architecture class tools extends context compiler compiler compiler new compiler init return return new tools tools class defines factory method compiler component nested 
class contains actual configuration compiler 
defines different compiler passes global component 
class extends context tools super new init return 

null null new init return compiler represent data syntax trees extensible algebraic types 
compiler pass implementations similar follow naming convention giving factory methods name type return 

define method operating syntax tree performing actual compiler pass 
pattern matching distinguish different tree nodes 
class extends component void init cc cc void analyze tree tree switch tree case variable string name 
implementation main compiler component 
accesses compiler passes executes sequentially 
class compiler extends component syntactic semantic codegen void init cc syntactic cc semantic cc codegen cc void compile string file tree tree syntactic parse file semantic analyze tree codegen generate tree depicts possible extension compiler 
assume source language extended 
need new syntactical semantical analysis 
furthermore introduce new compilation pass translate transforms syntax trees extended language trees original source language 
able original semantical analysis check translated program applying code generator adopt old compiler 
second semantical analysis imposed translator preserve attributes typings determined semantical analysis 
code generator typically relies proper attribution structure tree requires second semantical analysis syntax tree transformation 
extensions java programming language usually implemented way 
implementation new compiler context hierarchy translator compiler fig 

extended compiler architecture class extends tools new init return return new tools context override existing compiler factory method 
able call new old compiler context 
class provides extended syntactical analysis includes new compiler passes 
class extends super new init return new init return translator translator 
new passes extends existing component 
extended compiler uses semantic analyzer gets inherited new extended pass 
possible implementation new semantic analyzer 
refines analyze function overriding existing analyze method 
class extends void analyze tree tree switch tree case zero case succ tree tree default super analyze tree implement new main compiler component accordingly 
class extends compiler translator trans void init cc super init cc cc trans cc translator void compile string file tree tree syntactic parse file analyze tree tree trans translate tree semantic analyze tree codegen generate tree example shows flexible components configurations contexts extended reused framework 
due strict separation datatype definitions component implementations configuration systems 
extensible algebraic datatypes defaults provide mechanism separating datatype definitions components context component pattern yields separation components system configurations 
experience implemented full java compiler techniques introduced 
years non trivial compiler extensions built various people part different projects 
implementations compiler java synchronous active objects proposed 
extension introduces chi compound types type aliases 
added operator overloading java programming language style gosling proposes 
furthermore domain specific extension java providing publish subscribe primitives implemented 
extensible java compiler jaco turned valuable tool rapidly implement prototype compilers language extensions java 
people proposing extended java dialects refrain implementing ideas crafting full compiler scratch time consuming task 
existing compiler basis implementation maintenance poses additional challenges 
language java subject constant changes requiring regular modifications compiler 
keeping extended compiler synchronized base compiler usually done comparing source code hand error prone time consuming 
extensible compiler help quickly implement language extensions java 
provides infrastructure maintaining compiler extensions 
implementation extensions mentioned modify base compiler single time 
architecture open support extensions needed far 
changes base compiler related minor modifications specification java programming language bugs compiler 
changes usually elaborated way binary compatibility java classfiles broken 
consequence compilers derived base compiler benefit immediately changes inherit 
recompilation compiler extension necessary java late binding 
experimenting programming language extensions extensible compilers essential rapidly implement extended languages 
fundamental techniques develop extensible compilers 
showed extensible algebraic datatypes defaults object oriented language implement extensible syntax trees compiler passes 
types enable freely extend datatypes operations simultaneously independently 
extensible algebraic types allow write extensible syntax trees compiler passes compiler architecture determines flexible system extended reused 
proposed general architectural design pattern context component build extensible hierarchically structured component systems 
pattern strictly separates composition systems definition components 
showed object oriented pattern conjunction extensible algebraic types build compilers extended modified reused flexible manner 
extending compiler require source code modifications base system 
extended compilers evolve existing ones simply subclassing 
share components system configurations predecessors technique provides basis maintaining systems 
implemented full java compiler technique 
years compiler various projects quickly implement new language extensions java 
acknowledgments special christoph zenger michel oliver numerous helpful discussions 
furthermore stewart david stephane christian damm 
implemented extensions extensible java compiler provided helpful feedback implementation 
appel cardelli crary fisher gunter harper leroy lillibridge macqueen mitchell morrisett reppy riecke shao stone 
principles preliminary design ml march 
chi 
compound types java 
proceedings oopsla pages october 
buschmann meunier rohnert stal 
pattern oriented software architecture system patterns 
john wiley sons 
cardelli wegner 
understanding types data abstraction polymorphism 
computing surveys december 

synchronous java compiler 
projet de 
cole polytechnique rale de lausanne switzerland february 
clifton leavens chambers millstein 
multijava modular open classes symmetric multiple dispatch java 
technical report iowa state university department computer science july 
appear oopsla 
cook 
object oriented programming versus data types 
de bakker de roever rozenberg editors foundations object oriented languages rex school workshop noordwijkerhout netherlands may june volume pages 
springer verlag new york ny 
duggan 
mixin modules 
proceedings acm sigplan international conference functional programming pages philadelphia pennsylvania may 
eugster guerraoui damm 
objects events 
proceedings oopsla tampa bay florida october 
findler 
modular interpreters 
unpublished manuscript carnegie mellon university june 
findler flatt 
modular object oriented programming units mixins 
proceedings acm sigplan international conference functional programming icfp volume pages 
flatt 
programming languages reusable software components 
phd thesis rice university department computer science june 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

programming polymorphic variants 
ml workshop september 

code reuse polymorphic variants 
workshop foundations software engineering japan november 
gosling 
evolution numerical computing java 
sun microsystems laboratories 
java sun com people jag fp html 
krishnamurthi felleisen friedman 
synthesizing object oriented functional design promote re 
european conference object oriented programming pages 
hne 
translator pattern external functionality homomorphic mappings 
ege singh meyer editors rd tools conference usa pages 
ieee computer society july 
santa barbara california 
liang hudak jones 
monad transformers modular interpreters 
symposium principles programming languages pages january 
odersky wadler 
pizza java translating theory practice 
proc 
th acm symposium principles programming languages pages january 
palsberg jay 
essence visitor pattern 
technical report university technology sydney 
perry wolf 
foundations study software architecture 

case synchronous objects compound bound architectures 
unpublished 
cole polytechnique rale de lausanne 

mixin composition strategies modular implementation aspect weaving epp preprocessor module description language 
aspect oriented programming workshop icse april 

operator overloading java 
projet de 
cole polytechnique rale de lausanne switzerland june 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall 
szyperski 
import inheritance 
need modules classes 
krieg br editor esop th european symposium programming rennes france proceedings lecture notes computer science 
springer verlag february 
wadler expression problem 
discussion java genericity mailing list december 
zenger 
jaco distribution 
epfl ch jaco 
university south australia adelaide november 
zenger 

master thesis university karlsruhe august 
zenger odersky 
extensible algebraic datatypes defaults 
proc 
international conference functional programming icfp firenze italy september 

compound types java 
projet de 
cole polytechnique rale de lausanne switzerland 
epfl ch jaco html june 
