emulation multi hop wireless ad hoc networks ke david maltz david johnson school computer science carnegie mellon university pittsburgh pa mail ke edu department computer science rice university houston tx mail rice 
edu usual methods evaluate software system multi hop wireless ad hoc networks simu lation real test bed 
test bed method ex non repeatable 
simulation method usually requires re implementing real software system inside simulator infeasible large scale software systems 
emulation system capable evaluating unmodified real software systems simulated environments repeatable detailed realistic 
experimental results show system able emulate large scale ad hoc networks 
system greatly improve performance coda file system ad hoc networks 
ad hoc network collection wireless mobile nodes dynamically forms temporary network existing network infrastructure centralized administration 
due dynamic topology limited resource new network protocols applications developed specifically ad hoc networks 
important nontrivial evaluate network protocols applications ad hoc network environments 
usually methods method construct real ad hoc network test bed desired scenarios run applications protocols testbed 
scenario realistic method expensive non repeatable 
second method network simulator 
offers ability repeat control network conditions user requirement 
example network simula tor ns 
pure network simula tion requires re implementing network pro applications inside ns 
systems may complicated re implemented coda file system 
traf fic simulator generated traffic model 
traffic modeling 
test bed simulator pros cons network emulation proposed combine advantages 
network emulator tradeoff real es bed pure simulation 
typical emulation experiment network traffic generated real systems injected simulator experience simulated network environments 
allowing real world traffic interact simulator network emulator avoids traffic modeling problem problem re implementing real systems inside simulator 
time achieves repeatability simulating network environments inside emulator 
emulator developed kevin fall mainly wired networks 
contain layers tcp 
lower layers important constructing realistic ad hoc network environments 
cmu wireless extension ns implemented detailed realistic emulation system contains necessary network layers 
implementing real system ns deploying operating physical machines field able evaluate unmodified real systems realistic repeatable ad hoc network conditions 
order correctly measure real system performance emulator needs run real time requires virtual clock simulator synchronized wall clock 
validity emulation experiments depends emulator ability keep real time 
developed re ordering algorithm improve ability 
improved emulation system able emulate ad hoc networks containing mobile nodes heavy background traffic 
apply emulator analyze improve coda file system ad hoc networks achieve substantial improvements 
logical view emulation setup 
real ma chine generate real traffic 
traffic directed corresponding emulated node inside ns server part adhoc network scenario 
structure emulator ad hoc networks section briefly review existing emulator ns emulator ad hoc networks 
emulator ns network emulator ns real time simu ability interact real world traffic 
achieve function ma jor components added ns real time scheduler synchronize simula tor virtual clock wall clock 
network objects access live traffic 
types network objects implemented 
udp ip raw ip frame level net objects 
tap agents tunnel live network traffic inside simulator 
emulator ad hoc networks network emulator ns mainly wired network protocol layers tcp emulated 
lower layers important constructing realistic ad hoc network environments 
new elements added cmu wireless extensions designed emulator multi hop wireless ad hoc networks real world traffic experience realistic ad hoc network environment 
shows logical view set emulation ad hoc networks ns server single central machine running ns simulator machines mn real machines running real network protocols applications 
ns server users create ad hoc network scenarios desired ad hoc network environments emulation system design types mobile nodes ns server lad hoc key convenient tool create scenarios wireless networks 
ns server tap na packet flow emulation system real computers real applications protocols running 
simulated mobile node usual mobile node ns 
contains protocol stack physical layer application layer 
emulated mobile node simulated mobile node augmented tap agent network object 
emulated node tightly bound real machine real protocols applications investigation running 
traffic generated real machine directly captured corresponding emulated node inside part ad hoc network sce 
traffic generated directed corresponding emulated node 
real machine stays static corresponding emulated node mobile nodes simulated ad hoc network 
traffic generated sunk relayed corresponding emulated node 
achieve effect real machine mobile node ad hoc network real traffic undergoing protocol stack experiencing ad hoc network environments created user 
new real time scheduler reordering algorithm section new real time scheduler reordering algorithm reduces time lag event scheduled time tl processed time time lag tl visible events improves accuracy scalability emulation 
visible event invisible event difference events classif categories visible event invisible event 
data packet take path 
generated real system running real machine sent destination 
tapped ns server injected simulator tap agent emulated node representing el simulator clock wall clock invisible time lag 
thick line axis wall clock indicates processing time event 
el simulator clock el wall clock visible time lag 
thick line axis wall clock indicates processing time event 

experiences ad hoc network environments simulated ns 
sent real destination tap agent emulated node representing 
received real destination extra overhead caused emulation comes step step time transmitting packet real machines ns server 
events happen step step visible events happen emulated nodes 
events visible real machines called invisible events 
visible events processed delay real systems running experience delay behaviors preserved emulator 
give examples show different effects time lag visible invisible events 
ei event event queue scheduled time indicated po sition axis simulator clock 
actual dispatching time ei indicated position axis real time clock thick lines indicate processing time event 
assume visible event events invisible events simulated nodes 
ea time lag due process time 
visible event dispatched time 
real machine aware time lag ea 
behavior application running real machine changed due time lag invisible event ea 
ignored takes ts transmit kb packet mbps switcher test bed 
ab bc example scenario reordering algorithm take advantages dispatching visible events advance scheduled times 
scenario emulated node simulated nodes 
nearest neighbor 
sends packet arrives processed simulator 
reordering algorithm emulated node ea time lag 
time lags affect behaviors real application 
effect application determined amount time lag visible event 
time lag ea invisible real application 
see time lags visible events affect real applications leads develop new real time scheduler re ordering algorithm 
reordering algorithm time lags visible events affect real applications improve emulator dispatching visible event ahead scheduled time allowed may result dispatching events schedule time orders 
dispatching events schedule time orders may cause causality error 
example dispatch event etl scheduled time tl changes state variables eta effect event affects past event etl called causality error 
events causality relationship dispatching time stamp orders preserve correctness simulated model 
proved algorithm reordering algorithm multi hop wireless ad hoc network event node scheduled time dispatched time max denotes latest dispatching time node possible maximum time event advanced determined distance neighbor speed light nodes nodes amount cbr background traffic packets second round trip time icmp echo request dashed lines results reordering algorithm solid lines results non reordering algorithm 
intuitively upper limit derived fact neighbor node takes put wireless energy machine event scheduled time safely dispatched time max 
apply reordering gorithms events belonging emulated nodes process visible events higher priority 
small bursts simulated events happen wireless network shared channel especially lower level layers physical layer mac layer routing layer 
example node sends packet schedules packet arrive event node sharing channel 
shows example reordering algorithm take advantages 
illustrate improvement achieved reordering algorithm measure average round rip time icmp echo requests emulated nodes cloud mobile nodes 
shows results dashed lines result reordering algorithm solid lines result non reordering algorithm 
see reordering algorithm smaller rtt reducing time lags visible events 
improvement typical scenarios ranges 
scenario larger number nodes chances reordering algorithm take advantages 
scalability emulator ad hoc networks large scale complex simulation scenarios emulator may able keep real time turn change behaviors real system evaluation invalidate emulation experiment 
section examines emulator 
evaluate emulator vary histogram visible time lags 
numbers plot maximum time lag ms total number events real ftp throughput mb second respectively load ns server changing complexity simulation scenarios determined number nodes amount background traffic 
real application ftp 
experiments number mobile nodes varies rate background traffic packets second packets second packet size bytes 
shows experimental results 
plot shows histogram visible corresponding scenario 
horizontal axis represents amount time lags ms vertical axis shows number time lags 
numbers plot represents respec tively maximum time lag ms total number events throughput mb second real ftp 
scenario increases number amount time lags increase ftp throughput decreases eventually results invalidated emulation experiment large scale scenario nodes background traffic packets second 
large scale scenario large visible time lags ftp put mb small compared mb throughput simulated ftp scenario 
ftp tcp modeled ns judge validity emulation experiments ftp tcp 
cases real system modeled simulator time lags visible events determine validity emulation experiments 
experiments bottom right corner invalidated questionable 
experiments small time lags throughput closed mb valid 
see emulation sys tem works ad hoc networks sufficient size enable studying evaluating real system interesting scenarios ad hoc net scenario testing coda file system node fetches data node 
node stationary node move circle constant speed 
scenario interesting topology keeps changing node point view route node keeps changing 
works 
improve coda file sys tem ad hoc networks coda file system descendant andrew file system afs 
distributed file system con file servers clients 
evaluating coda file system ad hoc network environments interesting done due difficulty constructing real repeatable ad hoc network environments 
difficult model coda file system simulator coda contains lines code tuned years 
section apply emulation system analysis improve coda ad hoc networks 
give brief review file transfer protocol coda essentially cyclic blast transfer protocol 
cycle source sends block data packets packet block ack flag waits 
lost packets need retransmitted 
cycle repeats 
note coda client server peers 
server handle coda flow control regardless source sink server handle larger number file transfer requests clients 
words source server retransmit block data arrive predetermined time retransmission timer timeout 
source client client wait passively arrive server 
timeout scheme built client 
server retransmit receive data packets client predetermined period time 
retransmission timer set rtt estimation 
ad hoc networks provide new environments dynamical network topologies error prone wireless channels original coda file transfer protocol perform types networks probably due fact weakness coda may exhibit scenarios ad hoc networks 
emulator create rich accurate realistic ad hoc network scenarios quite problems coda identified fixed 
example coda packet transfer window ack flag receiving side send ack packet receives packet 
ad hoc networks packet packet get lost due congestion route error 
observed packets transfer window usually transferred successfully route source node destination established 
route error may happen due mobility reasons packets transfer window loss 
fix problem receiving side sends gratuitous ack seen nearly full window data packets passively waiting packet window 
sending side time waiting coda starts retransmitting unacknowledged packets 
ad hoc networks difficult choose timeout value 
ack packet higher lost rate type networks 
time value ack lost retransmitting unacknowledged packets wastes bandwidth increases congestion unacknowledged packets may successfully received receiver 
fix retransmit unacknowledged packet ack flag plus sequence data packets allowed send current send window 
retransmit packet usually triggers ack packet receiving side specifies packets missed 
coda transfer begins rtt estimated retransmit interval time value set estimated rtt 
retransmit interval fixed spe cific file transfer 
fixed retransmit may networks ad hoc networks exhibit larger rtt variance means fixed retransmit interval may result unnecessary retransmit worse putting link idle state long time initial rtt estimated large 
fix jn seconds sequence plot 
throughput improved coda file transfer protocol twice original throughput 
problem retransmit interval adjusted estimated rtt 
illustrates improvements coda ad hoc networks 
scenario shown node fetches byte data node cbr background traffic packets second node 
em ulation experiment visible time lags ms emulation experimental results validated 
see throughput improved version twice original version throughput 
related basis emulation kevin fall works emulation include 
systems implemented extending kernel intercept drop packets ip layer 
kernel implementation limits usage systems especially case ad hoc networks simple packet manipulations inside kernel difficult model ad hoc networks 
closely related trace net emulation re creates observed characteristics real network trace probing traffic 
created trace replayed easily evaluating real systems 
network emulation successfully analyzing system coda wired wireless networks infrastructure trace relatively easy collected 
difficult collect trace large scale ad hoc networks 
emulator ad hoc networks combines strengths test beds pure simulation 
differentiating visible events invisible events introduce reordering algorithm processes visible events ahead scheduled time 
real systems affected visible events reordering algorithm reduces time lags visible events reduce bad effects caused time lags 
scalability test shown em works ad hoc networks sufficient size complexity 
improvement coda ad hoc networks demonstrated emulation system new powerful tool analyzing evaluation real systems ad hoc networks 
advantages emulator ad hoc networks need real systems model simulator 
ad hoc network environments user control 
repeatable detailed realistic 
need drive mobile nodes construct realistic test bed 
validity emulation experiments determined time lags visible events easily collected 
jan help testing evaluating coda 
cmu monarch project ad hockey visualization tool ns scenario trace piles november 
available www monarch cs cmu edu cmu ns html 
ahn liu yam evaluation tcp vegas emulation experiment 
proceedings acm sigcomm pages aug 
josh broch david maltz david johnson yih chun hu jetcheva 
performance comparison multi hop wireless ad hoc network routing protocols 
proceedings cm ieee mobicom pages oct 
kevin fall 
network emulation vint ns simulator 
proceedings fourth ieee symposium computers communications iscc july 
kevin fall kannan varadhan editors 
ns notes documentation 
vint project uc berkeley lbl usc isi xerox parc january 
available www mash cs berkeley 
edu ns 
ke 
proof algorithm emulator ad hoc networks 
www cs cmu edu prove ps gz 
national institute standards technology 

ncsl nist gov itg 
brian noble satyanarayanan nguyen randy katz 
trace mobile network emulation 
proceedings acm sigcomm 

dummynet simple approach evaluation network protocols 
cm computer communication review jan 
satyanarayanan 
coda highly available file system distributed workstation environment 
proceedings second ieee workshop workstation systems pacific grove ca september 
