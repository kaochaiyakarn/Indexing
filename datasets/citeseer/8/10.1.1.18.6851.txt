concern graphs finding describing concerns structural program dependencies maintenance tasks address concerns features modularized source code comprising system 
existing approaches available help software developers locate manage scattered concerns representation lines source code complicating analysis concerns 
introduce concern graph representation abstracts implementation details concern explicit relationships different parts concern 
abstraction concern graph designed allow obvious inexpensive mapping back corresponding source code 
investigate practical tradeoffs related approach built feature exploration analysis tool feat allows developer manipulate concern representation extracted java system analyze relationships concern code base 
tool find describe concerns related software change tasks 
performed case studies evaluate feasibility usability scalability approach 
results indicate concern graphs document concern change developers unfamiliar concern graphs effectively underlying technology scales industrial sized programs 

achieving suitable design software system involves part choosing modules localize concerns anticipated change system lifetime 
software developer asked modify system anticipated path benefits modularity developer easily identify code related change usually change localized way respects existing interfaces 
unfortunately software developers faced modification tasks involve localized code 
consider icse orlando usa permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm 
martin gail murphy department computer science university british columbia main mall vancouver bc canada murphy cs ubc ca instance developer asked modify conditions logging occurs server jakarta tomcat 
change require developer consider java source files comprising core tomcat 
concern code result inadequate design 
result unanticipated modifications lack expressibility technology available original designer express interacting overlapping concerns 
result software developers handle concern code scattered system source modifying concern implementing new feature interacts concern evaluating cost planned change tasks 
approaches available help software developers locate manage scattered concern code 
lexical searching tools grep code browsers smalltalk integrated development environment cross databases cia help developer identify relevant points code help elicit relationships different parts program 
alternatively developer may able leverage identification change previous modification version differencing source code repository 
tools produce similar result developer lines source code contributing concern system 
ad hoc source code intensive representation concerns difficult basis reasoning analyzing concerns purpose software evolution 
introduce concern graphs representation concerns argue effective lines source code purpose documenting analyzing concerns 
concern graph abstracts implementation details concern storing key structure implementing concern 
storing structure concern graph documents explicitly relationships different elements concern 
relationship information provide partial explanation inclusion specific code elements concern 
concern graph program model extracted automatically source code intermediate representation program 
result developer able manipulate navigate concern representation level source code investing effort create representation 
properties allow concern graph augmented incrementally related elements code base collapsed form 
implementation java servlets pages release 
protected void log string name null string cname getclass getname name cname substring cname name name cm null cm log name system println name log string method class org apache tomcat core goal creating concern graphs representation concerns requires low moderate amount effort create small amount effort manipulate analyze conceptually obvious computationally inexpensive mapping back corresponding source code 
investigate tradeoffs possible built feat tool iteratively creating visualizing analyzing concern graphs java programs 
initial validation tool investigate concern graphs help developers evolving system find scattered concern code 
results indicate concern graphs document concern change developers unfamiliar concern graphs concept identify concern effectively underlying technology scales medium sized industrial program 
rest organized follows 
section motivates need concern graphs 
section describes concern graphs underlying program model 
section describes feat tool 
section describes cases studies feat concern graphs section discusses outstanding issues section presents related section summarizes 

motivation demonstrate shortcomings source code represent concern return tomcat code base 
scenario consider asked modification logging functionality 
quick perusal package organization code base find logging package classes logger 
modification need determine classes 
lexical search keyword log returns class 
class declares method calls method log 
declaration method class look parent class 
class find declaration method reproduced 
see local operations strings message logged cm object 
browsing required determine field 
knowledge points step declaration method log superclasses 
time find method declaration directly 
need repeat steps similar determine log method uses value field type determine log message 
looking unravel dependencies involving classes logging package 
behavior small fraction logging concern simple 
needed browse classes source files call log string method log string field cm method log string field class class logger class description logging concern track 
needed lexical searching tool introduced uncertainty result 
flat low level description concern 
trivial flat representation analyze dependencies concern rest code base 
analysis needed determine full extent logging concern 
difficult representation determine interactions different elements concern 
furthermore description basis understanding concern implementing change requires reasoning described performed 
provides alternative view concern consisting structural elements contributing concern code 
relationships elements extracted program model 
source corresponding elements located developer tool accuracy 
rest describes developer create structural representations ease software evolution tasks 

describing concerns capture code implementing concern clear convenient way propose description relevant program elements classes methods fields relationships 
call structure oriented representation similar concern graph 
developer creates concern graph iteratively querying model program determining elements relationships returned part queries contribute implementation concern 
program model abstracts augments source code 
model abstracts code eliding implementation details 
model augments code making dependencies different elements explicit 
section describe program model section subset model constitutes concern graph section 
process create concern graph program model described section 
structural program model program model represents declaration uses various program elements class object oriented languages 
formally program expressed graph set vertices set labeled directed edges vertex types 
class vertex represents global class considered members 
field vertex represents field member class 
method vertex represents method member class 
edge types depending type vertices connects 
edges labeled semantic relationships represent 
declares multiplier product sum int int calls product int int reads writes representation multiplier class calls body method contains call bind statically dynamically 
reads body method contains instruction reads uses value field 
writes body method contains instruction writes defines value field 
checks body method checks class object casts object 
creates body method ject class creates ob 
declares class declares method declares field 
superclass class superclass model concrete represents program model simple multiplier class 
graph specifies class multiplier declares field product declares methods sum product 
furthermore method product reads writes calls method sum 
concern graphs define concern graph program compacted subset documenting implementation concern created selection vertices edges set vertices distinguish part vertices detailed 
defining concern graph consists defining sets elements sets set set vertices representing program elements classes methods fields partly implement concern set set vertices representing program elements entirely devoted implementation concern classes methods 
example developer building concern graph realizes code method implement concern method put hand statements method implement behavior concern method put convention field vertices placed additionally condition hold 
set represents edges involved implementing concern 
call definition compacted subset constitute complete subgraph describing concern 
information extracted unambiguously left 
particular vertex corresponding edges representing fields methods declared class vertex need added information declares multiplier sum int int calls product int int summing concern multiplier class automatically derived expanding class 
similarly edge representing code method need added complete expanded subset program corresponding concern defined set part vertices members classes target elements methods including methods expanded classes 
set edges concern graph plus edges leaving expanded vertices 
formally set elements plus members classes set class vertices continuing simple multiplier example shows concern graph summing concern multiplier 
see elements relevant concern sum methods fact product 
sum labeled indicate entire body method contributes summing concern 
precise sum member expressiveness concern graphs tradeoff simplicity abstraction concern graphs loss expressiveness 
loss expressiveness stems principal characteristics 
program model include intra method program elements local control flow uses local variables 
chose include information reasons 
capturing local control data flow increase size program model dramatically 
larger program model require storage processing power manage concern graphs 
jackson rollins noted problem chopping graphs smallest chops tend huge 
second concern graphs intended capture scattered concern code local information relevant nonlocal information 
designers cia tool noted details interactions local objects ignored interesting small context 
second characteristic model distinguish different instances edges 
example method body model distinguish different call sites method 
chose approach simplify concern graph representation 
believe reasonable choice observed call non library method contributes implementation concern calls method usually related 
situations case small number false positives easy manage 
third characteristic model currently support exception handling 
exception handling introduces particular type control flow difficult 
chose leave exception handling aside experience concern graphs 
section discusses design choices play practice addressed 

finding concerns practice concern graphs practical possible create manipulate easily low cost 
support tasks finding concerns source code representing concerns concern graphs built feature exploration analysis tool feat 
feat allows software engineer navigate extracted model java program build subset model corresponds concern interest 
section describe feat tool rationale guiding requirements implementation 
feat concepts feat support main functions 

display concern graph convenient manageable form software developer 

access vertices edges structural program model related vertices concern graph support iterative construction modification concern graph 

mapping vertices concern graph source code 
displaying concern graph provide software engineers clear uncluttered unambiguous view potentially large concern graphs feat displays concern graph forest trees 
root tree forest class contributes implementation concern 
front class indication part class included concern see section 
classes preceded filled rectangle part classes preceded striped rectangle 
default classes displayed part 
advantages displaying concern graph collection trees 
trees easier lay graphs 
second tree nodes collapsed information 
trees result loss information vertices globally identifiable 
expanding part class displays members class pertain concern described 
level parent child relationship represents declares edge concern graph 
fields preceded circle methods preceded filled rectangle part methods shown striped rectangle 
expanding part method displays code elements method body pertain concern 
precisely elements shown outgoing edges program model 
point parent child representation expanded represents types edges see section feat window ca cs ubc part ca ubc cs ca ubc cs reads concern graph viewed edge label target vertex encoded tree node 
superclass edges available directly view produced simple command 
shows concern graph feat 
represents feat concern view main window holding representation concern graph 
shows corresponding concern graph 
declares edges dashed arrows abstracted tree structure members naturally displayed children declaring class 
reads edge represented child node method node labeled reads field ca ubc cs 
feat provides additional structural information form tool tip pop ups 
flying part class name cursor shows fraction elements involved concern 
flying field shows type field access modifier 
flying method shows return type method access modifier 
accessing program model feat provides set queries enable users access vertices program model related vertices concern graph 
user navigate program model direct reverse directions edges emanating vertices 
user triggers query right clicking node view choosing appropriate query pop pup menu 
result query window similar main concern view 
feat supports queries 
get superclass returns superclass selected class 
expand class returns members declared se lected class 
view methods displayed form 
grab class returns class declaring element target node edge 
example performing query node field return 
fan returns vertices program model de pend class field method node selected 
semantics query depend type node selected 
field result includes methods access selected field 
method result includes possible calling methods including potential virtual calls 
class result extensive 
includes declarations fields type methods return type parameter type includes methods access field declared type methods call method declared return type parameter type result includes methods checking type keyword instanceof casting type creating object type fan returns outgoing edges selected method 
fields outgoing edges 
transitive fan returns vertices selected method transitively depends including fields methods classes 
mapping source code concern graph sufficient perform maintenance task system 
source contains useful information names comments intra method structure source modified 
help developer access information feat permits developer view source code corresponding concern graph element 
access source developer selects element tree view uses pop menu request view source 
methods code viewing option brings code viewer positioned line method 
part methods viewer highlights lines correspond outgoing edges method node 
example method contains single writes edge field lines code field defined highlighted 
similarly request view code single edge writes field highlight lines method defined 
manipulating program model feat allows developer manipulate elements concern graph query results 
example user remove element view move element query result window main concern window highlight element instance remember considered convert method class part 
user may compare results query window main concern window determine elements returned query part concern 
issues program model available feat depends configuration information provided tool 
configuration information consists list packages considered analyzing targets virtual method calls list packages considered doing fan queries list packages elide query result windows 
configuration information specified point feat session feat queries defined configuration information 
implementation details feat version supports java language 
comparison traditional source code analyzers cross tools cia framework canfora colleagues feat rely program database 
uses compiled representation bytecode program directly similar browsers languages smalltalk trellis 
feat implemented java 
uses ibm jikes bytecode toolkit represent manipulate java classes run time 
section discusses memory consumption issues related approach 
resolve targets virtual method calls feat uses simplified class hierarchy analysis algorithm executes classes set packages specified user 
mapping edge source code performed extracting line numbers bytecode instructions corresponding edge investigation 
user starts finding concern feat providing seed usually single class 
seed browsing code system documentation lexical searches means 
version feat described seed expressed text file small declarative language similar description 
latest version feat provides fully integrated support specifying seed browsing lexical searches 

case studies investigate concern graphs useful represent concerns performing maintenance tasks undertook set case studies 
case study focused concern graphs feat support effectively complete change task involving scattered concern section 
second case study focused concern graph approach incorporated feat non inventors approach strengthen question observations case study section 
third case study investigated approach scales section 
summarization case study case study author took role maintenance programmer perform modification java visualization software system developed university british columbia 
comprises non comment lines code organized classes packages 
participant case study previous exposure code 
task visualize execution java programs requires inputs file containing summarized information events generated execution java program 
summary file generated summarizing program 
program takes input event trace file produces summary file contains information number calls number objects allocated deallocated certain point trace file determined user defined checkpoint frequency 
summary files contain information age objects allocation deallocation time 
object age information voluminous experience visualizer showed information 
able generate read summary files include object age information desirable change chose case study 
indication scale participant involved project user technology 
task graph representing model summarization program application specific vertices 
finding concern code performing task participant feat discover concern code modified save representation code memory aid performing change 
discovery process carried participant divided slightly overlapping phases 
preparatory phase consisted understanding application domain seeding concern 
phase involve concern graphs feat 
second phase consisted discovering part code writing summary files triggered 
third phase involved understanding describing reading writing mechanism summary files 
fourth phase consisted discovery finer implementation detail concern graph created making change 
understand application domain participant spoke briefly original developer system 
developer explained level functioning visualizer summary files 
discussion involve viewing source code explicitly mentioning actual data structures 
exception original developer mentioned entry point summarizing program 
class seed concern participant started feat concern graph consisted solely class name 
second phase participant looked major program elements involved reading writing summary files means gaining understanding format files 
feat loaded single entry point class primary summarization participant expanded class added main method concern description 
fan query main method revealed elements main 
elements consisted objects created call method summarize class 
element added concern graph non library method call 
participant analyzed summarize method closely result feat fan query source code viewer 
information participant determined points involve writing summary file calls write summary write store methods 
participant added elements concern graph 
shows concern graph point 
produce concern graph participant needed find select main summarize write store method vertices 
dependent vertices edges declares relationships automatically included feat 
furthermore necessary view source code method summarize 
phase participant discovered details reading writing protocol summary files 
specifically participant explored outgoing edges program model methods discovered previous phase determine elements performed reading writing operations explored incoming edges analyze context operations performed 
phase iterative included alternation viewing source code automatic highlighting feature feat include vertices corresponding java library code automatically filtered feat 
results include filtered elements case study included classes packages java lang java io java util 
main 
summarize 
info summary write 
write 
store info store summary store info finding important parts declares calls store summary ing dependencies query capabilities feat 
process participant discovered code pertaining reading writing summary files located read summary category info handful helper methods classes 
complete mechanism discovered possible determine looking corresponding source code subset methods identified dealt reading writing object age information 
methods added concern graph 
second third phases required approximately minutes complete 
concern graph produced included fields methods scattered classes 
making change implement change participant visited source file corresponding class concern graph implemented changes needed class 
methods concern graph modified implement required change 
remaining methods object age related code need changed due specific implementation details 
methods left concern graph structural bridges different parts code 
example method summarize see left concern graph pointer read write methods code summarize changed 
methods omitted obtained easily feat queries 
test change modified summarization program generate new summary files object age information files visualizing event traces 
allowed participant discover assumptions behavior concern wrong 
assumption read operation summary file done method read 
execution program revealed read operation fact performed method 
remedy situation participant concern graph final phase find site read operation summary file 
participant iteratively performed fan queries investigating resulting call sites code browser context calls determined 
subsequent testing participant successfully visualized event traces new format summary files 
making change testing required approximately minutes 
results draw observations concern graphs feat change task 
observations point view case study participant experienced software developer 
observation 
granularity concern graph sufficient describe concern purpose software change task 
participant need consult documentation prior implementing change 
general behavior code learned part creating concern graph fresh memory behavior understood time performing change discovered minimal time queries 
concern graph pointed target source code sufficient accuracy 
section discusses accuracy mapping source details 
observation 
source code viewed finding concern relevant concern 
explanation observation details code related concern investigation usually discarded level concern graph model 
observation 
number false positives low 
context case study false positive code element included concern graph implement object age feature 
case study methods identified concern graph directly related concern 
posit low false positive rate result queries returning elements structurally dependent compared text searching tools return unrelated items 
study false positives occur methods implementing parts object age concern directly impacted change 
observation 
number false negatives low 
participant single pass source files implement change 
method added concern description performing change 
explanation observation concern code interacts structurally cross referencing capabilities feat allowed participant identify extent concern 
observation 
program model useful helping understand highly algorithmic code 
participant determined reading writing protocol summary files reading source code comments specific files 
concern graph helpful understanding behavior capture information behavior concern 
chose include information concern graph minimize effort required create graph 
section discusses tradeoff details 
usage case study performed second case study explore developers unfamiliar concern graphs feat able effectively identify concern related program change task approach tool 
describe study results compare observations arose case study 
study setup case study participants asked identify code contributing specified concern context program change task 
participants asked perform change 
target task system version 
static analysis tool produces view exception flow java program 
written java consists non blank lines code organized classes packages 
participants asked identify code handles java anonymous classes 
context identifying code change support version java language include anonymous classes 
feat concern graph concern produced developer 
elements concern graph span classes different packages 
subset concern graph consisting class method provided seed participants case study 
participants study diverse backgrounds senior undergraduate student worked different companies part operative program graduate student previous experience software developer developer telecommunication 
participants experience java actively involved development java time case study 
participants previous exposure source code feat tool 
prior performing task participants completed minute training session tool assistance developer feat 
participants asked produce description anonymous class handling concern complete precise possible 
participants instructed perform task feat 
particular code viewing done feat code highlighting function 
participants asked report time required perform task final concern graph usage log automatically generated feat confidence quality result terms estimated percentage concern missed 
additional participants involved prototyping study 
experiences participants caused adjust content training session ensure participants understood tool 
results prototype participants included results reported 
results analyzed types data study completeness concern graph produced quantitative usage patterns participants qualitative 
concern graph produced author benchmark 
classes graph marked 
remaining part classes concern graph includes field methods methods labeled code elements field specified part concern remaining methods 
shows view concern graph 
level indentation represents classes 
second level indentation represents class members third level indentation represents uses class members method bodies 
table shows elements identified study participants 
participant concern observation study 
elements missed participant result minor inconsistencies building concern graph 
example participant included call method method failed include declaration method concern graph 
situation avoided automatically class method class workspace method class class method method class method main calls method class method dump calls method checks class method calls method calls method class field method writes method creates calls init reads writes method init writes method reads anonymous class handling concern table concern completeness results participant classes field methods code elements false positives feat included targets edges concern graph 
participants missed higher number elements 
majority false negatives resulted failure see field class involved implementing concern 
field expert participant 
expert field source code field referenced close call creation object method 
field visible results fan query 
field discovered fan query field returns elements class related concern 
number false positives concern graphs produced participants low 
participants produced concern graph false positives graph false positives clients functionality described concern elements concern 
data corroborates observation study 
participants produced concern graph minutes 
find quantitative results case study encouraging participants minimal training concept concern graphs feat tool able narrow short amount time unfamiliar code base kloc concern graph captured pertinent parts concern 
analysis usage logs collected feat participants show approximately source code viewed finding concern relevant concern observation 
measure approximative viewing element opens entire source file 
result possible view different elements file 
similar case study participants study unable concern graphs capture system behavior 
unable approach represent subtle aspects structure observation 
example participants viewed code related method participants incorporated method concern graph 
method belonged concern graph private method performing specific services loading anonymous files 
discover information participants observe caller method part concern caller method 
evaluate observation context study participants perform change 
scalability case study evaluate technology supporting concern graphs scales medium sized industrial systems applied feat nsc release large network provisioning code base developed networks canada nsc code base comprises packages classes 
depends approximately mb third party libraries 
approach taken feat tool load entire program model memory 
approach allows users quickly perform dependency analyses parts program dynamically reconfigure environment evaluate queries 
case nsc code base possible load application classes dependent classes memory available analysis machine 
necessary selectively restrict dynamic model program 
accomplished restriction configuring feat fully load user defined set classes 
classes loaded stubs included information class members include entire bytecode model 
consequence tradeoff class loaded stub queried dependencies program element dependencies detected bytecode field types method parameter types 
practice approach influence results queries classes loaded stubs transitively depend application classes interest generally case library code low level application code 
loading classes stubs influence completeness class hierarchy analysis performed determine potential targets virtual calls analysis requires method signatures 
verify feat operating correctly optimizations identify code corresponding port new error handling framework added previous version nsc 
differencing code versions recorded change able determine code identified feat corresponded change 
machine mb memory 

discussion concern graph representation trades simplicity creation understanding precision 
discuss rationale choices choosing concern graphs representation developing technology support 
discuss representation apply programs implemented non object oriented languages 
properties concern graphs concern graphs intended provide convenient abstraction purposes reasoning concern analyzing concern 
concern graphs important properties 
concern graphs compact 
concern graphs support compact local view concern eliding irrelevant non concern code 
developer see program elements implementing concern location 
locality helpful organizing change task 
developer access related code simple queries program model 
concern graphs simple 
concern graphs details class implementation distilling syntactically rich statements simple keywords calls reads target code element 
abstraction captures essence relationships different code elements making easier developer focus concern 
necessary elements mapped source code access details 
concern graphs descriptive 
explicit documentation relationships different program elements belonging concern removes need developer mentally perform steps program text compilation derive information 
price pay convenience abstraction mapping concern graphs source code 
practice imprecise mapping results false positives mapping significant edge concern graph source code false negatives unimportant code filtered 
experience making change concern graph limitations impeded task 
example case study mapping field source code indicated lines code part concern 
number false positives contend range zero instances 
minimal understanding concern easy filter false positives preferable spend time doing filtering having spend front time dealing larger precise program model 
typically false negatives result concern code involves basic programming language constructs integer arithmetic libraries elements modeled concern graph 
straightforward find code usually located close modeled code elements 
investigation needed determine current granularity concern graphs sufficient general 
extension currently considering distinguish identical edges having different projection source code 
structural focus mentioned earlier concern graphs support behavioral aspects implementation concern object protocols pre post conditions 
definition concern graphs decided capture structure expense behavior 
rationale decision concern graphs inexpensive possible create maintain 
compensate lack behavior information feat tool provides developer direct access source code implementing concern element 
observed developers feature case studies 
alternatively provide support developer describe behavior instance developer specify object protocol 
plan investigate annotation concern graphs additional behavioral information obtained user input instrumented executions programs complement current structural description concerns 
annotations help improve usefulness concern graphs change task reminding developer behavior learned concern uncovered providing documentation behavior different developer 
automatic analysis case studies apparent situations concern description building process automated 
searching code concern observed certain elements occur pairs 
example method declared concern usually call sites part concern 
similarly constructor call added concern usually creates edge added 
automating portions concern building task help user eliminate false negatives concern description 
data flow oriented queries may helpful trying identify code related concern 
example query may useful discover value supplied argument method call originates objects types interact program 
localized data flow analyses help answer kind question 
value point relation basis ajax tool help answer second kind question 
approaches integrated suitable performance feat tool 
tool support languages believe concern graphs extended programming languages including procedural languages unifying framework concern graphs idea global program elements relationships 
port concern graphs language mean defining global program elements representing vertices corresponding edges defining abstractions representing edges label 
language abstraction described chen starting point 
feat limitations issues arose concern graphs related feat tool 
issue quality program model provided feat 
feat extracts program model directly bytecode result exact complete 
dynamic binding method calls java feat provide conservative estimate explicit calls edges linking method vertices 
second feat elicit calls edges implemented reflection calls detected statically 
feat detect relationships elements expressed source code lost compiler optimizations accesses final fields inlined bytecode calls inlined methods 
second issue relates feat elicit concern descriptions 
users reported got lost navigation remembering elements ones untouched 
provided marking functionality feat allow users highlight concern nodes provide tracking support feature sufficient 
participants case studies suggested visual support graph navigation process address issue 
approach imply representing program graphs visually challenging large programs 
considering visualizing iterative process 

related program understanding reverse engineering approaches developed help developer discover code related maintenance task 
slicing chopping extensions objectoriented programming slicing class hierarchies objects compute code related task input relevant program points developer 
tools determine code interest detailed program model typically includes intra inter procedural control data flow 
opposed concern graphs result slicing abstracted terms program code 
applications slicing program maintenance provide strategies deal resultant size information details includes 
example strategy system rules proposed gallagher lyle 
source code browsers provided smalltalk trellis program databases cia enable developer access cross information source code elements methods 
context collecting information tools limited possible accumulate results cross referencing queries network program elements 
result developer manually build list program elements pertaining concern manage context elements queried 
conceptual modules help alleviate problem capturing segments program code related concern providing support querying entity 
opposed concern graphs conceptual modules provide abstraction lines source code 
number approaches developed specifically address problem finding concerns source code 
aspect browser helps developers finds concerns lexical searches program text 
uses seesoft concept map metaphor graphically represent location code implementing concerns 
comparison feat supports structural queries discover concerns believe structural querying may allow developer discover concern faster 
lexical searching plays role approach instance lexical searches define seed see section latest version feat supports integrated lexical searches 
chen rajlich proposed technique finding features concerns source code user systematically traverses program dependency graph 
dependency graph technique similar program model considers global program elements 
addition forcing user particular consideration program elements approach limited allow users find concern elements related non concern element 
approaches finding concerns static program information 
approaches information program execution 
wilde carefully designed test cases locate user functionality legacy fortran code 
eisen barth propose dynamic information derive mappings features components concept analysis 
currently concern graphs program model concern graph extracted contain information program execution 
dynamic program information help produce complete program model java introducing calls edges result introspection 
generally dynamic program information annotate concern graph profile behavioral information 

summary maintenance tasks involve non localized changes system code base 
non localized changes correspond single conceptual feature concern modularized 
observed existing techniques sufficiently expressive documenting concern prior making change basis analysis 
proposed concern graphs representation concerns intended overcome limitations 
concern graphs localize abstracted representation program elements contributing implementation concern 
representation dependencies contributing program elements explicit 
straightforward mapping abstracted program elements source allows developer recover needed implementation details 
argued concern graphs appropriate expressing concerns program change task basis manipulation analysis 
explored specific concern analysis task concern code identification 
feat tool uses concern graphs support analysis dependencies concern rest program 
case studies demonstrated usefulness concern graphs maintenance tasks 
case study demonstrated concern graph sufficiently precise describe program points change allowing focus critical parts program 
second case study showed developers unfamiliar concern graph representation representation supporting technology find concern scattered source code 
third case study showed technology underlying concern graphs scales industrial sized systems 
plan investigate concern graphs analysis tasks concern overlap analysis 
availability feat tool obtained free evaluation contacting authors 
acknowledgments ron shan ian forster networks canada making industrial case study possible 
original evaluators feat case study participants useful comments andrew brian de st phane eric dyke reid holmes 
additional go albert lai helping fine tune performance feat st phane help formalization concern graphs thad help summarization case study brian de anonymous icse reviewers useful comments 
jikes bytecode toolkit provided freely ibm alphaworks project 
funded nserc graduate fellowship research 
aho 
pattern matching strings 
book editor formal language theory perspectives open problems pages new york 
academic press 
arnold 
software change impact analysis 
ieee computer society 
murphy 
conceptual module querying software reengineering 
proceedings th international conference software engineering pages 
acm may 
baumgartner young 
compiler tool support debugging object protocols 
proceedings th international symposium foundations software engineering pages 
acm november 
canfora cimitile de de lucia 
extensible system source code analysis 
ieee transactions software engineering september 
chen rajlich 
case study feature location dependence graph 
proceedings th international workshop program comprehension pages 
ieee computer society 

chen ramamoorthy 
information abstraction system 
ieee transactions software engineering march 

choi grove hind sarkar 
efficient precise modeling exceptions analysis java programs 
proceedings acm sigplan sigsoft workshop program analysis software tools engineering pages 
acm september 
dean grove chambers 
optimization object oriented programs static class hierarchy analysis 
proceedings european conference object oriented programming volume lncs 
springer verlag august 
eick steffen summer jr seesoft tool visualizing line oriented software statistics 
ieee transactions software engineering november 
eisenbarth koschke simon 
derivation feature component maps means concept analysis 
proceedings fifth european conference software maintenance reengineering pages 
ieee computer society march 
gallagher lyle 
program slicing software maintenance 
ieee transactions software engineering august 
goldberg 
smalltalk interactive programming environment 
addison wesley 
griswold yuan kato 
exploiting map metaphor tool software evolution 
proceedings rd international conference software engineering pages 
acm may 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
jackson rollins 
new model program dependence reverse engineering 
proceedings rd acm sigsoft symposium foundations software engineering pages 
acm december 
jikes bytecode toolkit 
ibm march 
www alphaworks ibm com tech 
liang harrold 
slicing objects system dependence graphs 
proceedings international conference software maintenance pages 
ieee computer society november 
brien kilian 
trellis programming environment 
proceedings conference object oriented programming systems applications pages 
acm october 
callahan 
generalized aliasing basis program analysis tools 
phd thesis school computer science carnegie mellon university pittsburgh pa usa november 
parnas 
criteria decomposing systems modules 
communications acm december 

home page 
www cs ubc ca 
sinha harrold 
analysis programs exception handling constructs 
proceedings international conference software maintenance pages 
ieee computer society november 
tip 
choi field ramalingam 
slicing class hierarchies 
proceedings conference object oriented programming systems applications pages 
acm october 
walker murphy 
efficient mapping software system traces architectural views 
proceedings cascon pages 
weiser 
program slicing 
ieee transactions software engineering july 
wilde gomez 
locating user functionality old code 
proceedings conference software maintenance pages 
ieee computer society november 
