viatra visual automated transformations formal verification validation uml models gy bor pap andr budapest university technology economics department measurement information systems mit bme hu viatra visual automated model transformations framework core transformation verification validation environment improving quality systems designed unified modeling language automatically checking consistency completeness dependability requirements 
current overview major design goals decisions ii underlying formal methodology metamodeling graph transformation iii software architecture xmi standard iv benchmark applications viatra framework 

advent visual design languages promises better requirement capture easier software architecture process radical increase software productivity 
rapid spread uml unified modeling language dominant object oriented case technology clearly indicates market need effective visual design technologies 
visual case methodologies assure correctness design dependability target application 
designer construct syntactically correct semantically incorrect models 
assurance qualitative correctness design necessitates checking completeness consistency system specification ii global correctness attributes deadlock freedom design iii application specific requirements safety requirements 
dependability target application necessitates fulfillment quantitative requirements 
instance timeliness application major criteria real time system design ii reliability availability measures crucial system design phase 
decades computer science successfully attacked majority problems providing mathematic methods tools modeling analysis dependability attributes 
methods widely industry primarily due high level abstractness mathematical modeling analysis techniques 
esprit project acronym hide carried erlangen cnuce pisa industrial partners shown feasibility automated multi aspect dependability evaluation uml designs 
hide uml model target design enriched dependability requirements local dependability attributes associated individual components 
mathematical models timed petri nets quantitative evaluation dependability derived model automatically custom built model transformations 
results mathematical analysis back annotated uml model presentation designer 

design guidelines important experience gained hide ad hoc implementation transformations lacks necessary preciseness implementation errors transformations weakest point chain tools serving dependability evaluation 
way mathematically precise paradigm searched leading general purpose framework definition implementation transformations 
argument framework need high degree flexibility due changing extensible uml standard problems revealed uml implementation related aspects target application included transformation 
turned open flexible transformation framework necessitates general purpose mathematically solid paradigm user friendly methodology definition uml notations dialects transformations variety mathematical analysis tools ii efficient mechanized methodology derive model transformation back annotation programs definitions 
new framework called viatra visual automated model transformations depicted fig 
system verification main attributes uml profile standard uml uml profile modeling language system model analysis transformation rules viatra code generator transformation program viatra transformation core transformation designer view transformation program viatra transformation core metamodel mathematical paradigm mathematical modeling language analysis tool mathematical modeling language analysis tool 
architecture viatra uml dialect modeler input notation target mathematical analysis tool defined respective metamodels 
offers flexibility 
transformations defined form set simple transformation rules correlating individual uml notational elements target mathematical notation 
transformation rules designed visually uml 
transformers automatically derived rules mathematically defined widely principle graph transformations 
back annotation engine directly automatically generated transformer provides user analysis results integrated original uml model 
entire transformation framework hidden user 

modeling concepts viatra model transformation verification approach uml models requires precise definition models various application domains specified uniformly visual metamodeling techniques viatra 
precise metamodeling method includes formal definition syntax static dynamic semantics language 
viatra static syntax modeling language specified form uml class diagrams basically concepts mof metamodeling formalized typed attributed directed graphs 
metamodels interpreted type graphs models valid instances type graphs 
experiments showed mathematical notations described corresponding metamodel expressive engineers pure mathematical formulae 
sample metamodel finite automata taken mathematical domain depicted fig 

automata current states transitions state name string transition char char 
metamodel finite automaton viatra uses declarative pattern description technique static semantics majority formedness constraints provided graph patterns preserve 
graph patterns play major role definition dynamic semantics model evolution model described graph transformation rules 
graph transformation rule tuple left hand side graph righthand side graph optional negative application condition graph 
application rule model graph uml model user rewrites user model replacing pattern defined pattern 
sample graph transformation rule depicted 
rule describes dynamic operational semantics finite automata transition fired 
lhs state rhs state current states states automata transitions transition automata transitions transition states states state current state 
sample transformation rule transformations models uniformly specified corresponding graph transformation rules providing easy understand visual way semantic definitions 
main goal model transformation derive target model source model source target objects linked form single graph 
reason concepts graphs introduced 
structure graph constrained corresponding metamodel contains existing source target metamodel nodes ii novel nodes provide typed coupling source target objects iii edges nodes 
graphs provide primary basis back annotation analysis results 
entire operational semantics viatra model transformation defined model transition system graph transformation rule applied specific mode constrained control flow graph 
majority rules perform local modifications models executed parallel occurrences forall mode 
alternatively rule applied nondeterministically chosen single matching try mode applied long possible loop mode 

technological overview viatra general technological concept viatra framework xmi standard arbitrary mof metamodel simultaneously including uml mathematical models petri nets dataflow networks hierarchical automata order obtain open architecture 
typical scenario model transformations uml environment follows design phase 
interaction viatra commences design phase performed traditional uml case tool xmi export facilities mof 
create mof metamodels source target modeling language 
relate source target objects constructing metamodel 
export metamodels xmi format conforms mof model 
files serve primary inputs viatra 
step transformation rules control structures created special uml profile tailored graph transformation systems exported uml xmi format 
automated program generation 
phase prolog implementation transformation program generated automatically 
automated program generation method semantic core vi framework designed implemented consecutive model transformations reflective way 
automated transformations 
previously generated transformation programs applied transformation various source models 
typical case uml model created software engineer serve input transformation exported xmi format 
outputs transformation target models exported xmi format 
concrete input language specific analysis tool typically generated format simple prolog programs ii xslt transformations iii java programs 
verification transformations 
ongoing activity aim formal verification model transformations order provide higher level quality faithfulness transformations 
syntactic correctness completeness verified planner algorithms 
semantic correctness transformations verified projecting model transformation rules sal intermediate language provides access automated combination symbolic analysis tools model checkers theorem provers 

pilot transformations formal verification 
formal verification logic correctness concurrent object systems designed uml necessitates transformation statechart diagrams describing behavior objects mathematical models amenable formal verification 
transformation subset uml statecharts covering aspects concurrent behavior promela input language model checker spin 
extended approach multiple statecharts objects communicating event queues implemented transformation viatra framework 
uml model transformed graph transformation rules semantically equivalent formal model called extended hierarchical automata eha 
eha format advantage compound transitions resolved state refinement expressed strict tree structure 
single eha composed simple sequential automata related state refinement function individual objects specified uml model represented set communicating 
resulting xml representation java application generate corresponding promela code 
results verification counterexamples available form message sequence charts execution traces back annotated uml case environment 
checking general safety criteria 
accidents caused computer programs occur due flaws specification mainly incompleteness inconsistency non determinism 
reason leveson specified general criteria specification safety critical software 
uml specification language software majority criteria verified statecharts 
standard metamodel statecharts directly appropriate automated analysis due complex state hierarchy composite concurrent states 
order automate verification process introduced reduced form statecharts flat model having basic elements states events transitions actions 
transformation process reduced form statecharts implemented relatively simple rules viatra 
main safety criteria static formedness constraints stated form graph patterns required introduce additional rules having criterion left hand side error message object right 
user informed results analysis xml file generated viatra 
benchmark applications 
uml models industrial dependability critical applications order validate approach 
pilot design safety critical part artificial kidney machine 
second application core part railway supervisory traffic control optimization system provides real time global view traffic delivers information operator decisions 
example systems necessitate analysis models correctness completeness consistency 

experiences viatra includes complex model transformations manipulating source models having graph objects promising 
generation time new transformation program lies range minutes usual desktop pc 
generation mathematical model takes typically tens seconds models small medium size evaluated far 
combination visual design transformation rules definition language graph transformation generation transformers effective way conquer problems related implementation complex mathematical software 
bensalem ganesh lakhnech munoz owre rue rushby sa di shankar tiwari 
overview sal 
holloway editor fifth nasa langley formal methods workshop pages 
dal cin 
dependability analysis early phases uml system design 
international journal computer systems science engineering 
holzmann 
model checker spin 
ieee transactions software engineering 

automatic verification uml statechart diagrams spin 
formal aspects computing 
leveson 
system safety computers 
addison wesley 
object management group 
meta object facility version september 
pap 
checking general safety criteria uml statecharts 
editor computer safety reliability security proc 
th int 
conf volume lncs pages 
springer 
rozenberg editor 
handbook graph grammars computing graph transformations volume foundations 
world scientific 
rumbaugh jacobson booch 
unified modeling language manual 
addison wesley 

automatic program generation model transformation systems 

kreowski editor proc 
agt workshop applied graph transformation 

designing automatic transformation visual languages 
science computer programming 
