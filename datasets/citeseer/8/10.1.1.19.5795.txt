monadic datalog expressive power languages web information extraction georg gottlob database artificial intelligence group technische universit wien vienna austria gottlob dbai tuwien ac research information extraction web pages wrapping seen activity times particularly systems implementations little done formally studying expressiveness formalisms proposed theoretical foundations wrapping 
study monadic datalog wrapping language ranked unranked tree structures 
previous neven schwentick show simple language equivalent full monadic second order logic mso ability specify wrappers 
believe mso right expressiveness required web information extraction propose mso yardstick evaluating comparing wrappers 
result study kernel fragment elog elog wrapping language lixto system visual wrapper generator 
striking fact elog exactly captures mso easier 
programs language entirely visually specified 
formally compare elog wrapping languages proposed literature 

web wrapping problem problem extracting structured information html documents high practical importance spurred great amount including theoretical research systems 
previous classified categories depending html input regarded sequential character string tsimmis editor florid debye pre parsed document tree instance xwrap lixto 
category assumes systems may supported austrian science fund fwf project 
inf 
see www lixto com 
christoph koch database artificial intelligence group technische universit wien vienna austria koch dbai tuwien ac existing html parser front 
practical perspective robust wrappers easier build pre parsed documents handling intricacies html left parser need programmed scratch wrapper created 
allows wrapper implementor focus essentials wrapping task 
standpoint theory practical problems presumably simpler solve parse trees documents documents strings 
understood literature scope wrapping conceptually limited 
wrapper assumed extract relevant data possibly poorly structured source put desired representation formalism applying number transformational changes close minimum possible 
wrapping language permits arbitrary data transformations may considered overkill 
may want look wrapping language document trees solid understood theoretical foundation ii provides trade complexity number practical wrappers expressed iii easy wrapper programming language iv suitable incorporated visual tools ideally constructs wrapping language realized corresponding visual primitives 
exhibits studies languages 
core notion base wrapping approach information extraction function 
information extraction function takes labeled unranked tree representing web document returns subset nodes viewed differently subtrees rooted nodes 
context wrapper program implements functions 
way take tree re label nodes declare irrelevant significantly transform original structure 
coincides intuition wrapper may change presentation relevant information packaging data model apply case web wrapping handle substantial data transformation tasks 
believe captures exactly essence wrapping 
propose unary queries monadic second order logic mso expressiveness yardstick information ex fact known word language context free iff yield regular tree language yield tree sequence labels leaf nodes extracted depth left right 
traction functions 
mso trees understood see quite expressive 
unary mso queries evaluated linear time sizes input trees 
unfortunately mso satisfy requirements iii iv easy wrapping language lend visual specification 
main contributions 
study monadic datalog labeled trees show equivalent monadic second order logic mso ability express unary queries tree nodes 
true ranked unranked trees 
proofs partially results query automata neven schwentick 
monadic datalog simple programming language better suited wrapping language mso 
consequently satisfies requirements 
go simple web wrapping language equivalent mso call elog obtained slightly restricting syntax monadic datalog simplified version core wrapping language lixto system elog 
rules language completely visually specified requiring wrapper implementor deal elog programs directly know datalog 
give brief overview visual specification process 
language satisfies desiderata tree wrapping languages 
elog wrapper function assigns unary predicates document tree nodes 
predicate assignments structure input tree new tree computed result information extraction process natural way lines input trees new labels omitting nodes relabeled 
capability produce hierarchically structured result essential tree wrapping 
define language elog order able creation complex nested structures explicit improve ity 
elog obtained enhancing elog binary predicates restricted form allow represent hierarchical dependencies selected nodes fixpoint computation elog program 
note binary dependency relation quadratic size input tree 
notwithstanding able show expressiveness elog elog respect unary queries edge relation defined binary predicates mso definable 
elog actual fragment wrapping language elog internally lixto system commercial visual wrapper generator 
take closer look tree approaches wrapping html documents 
language regular path queries nesting 
regular path queries considered essential web query languages extending language regular path queries capabilities producing nested output restricting queries additional condi tions obtains useful wrapping language 
show formalism strictly expressive elog second formalism hel wrapping language commercially available framework tree wrapping formalism elog formal specification published 
able show hel strictly expressive elog best knowledge providing theoretical study advanced tree wrapping tools languages 
summary thorough theoretical analysis expressiveness aspects tree information extraction expressiveness mso intuitively justifiable yardstick languages attacking problem 
structured follows 
start preliminaries regarding tree languages mso section introduce monadic datalog trees section 
section presents equivalence results mso monadic datalog 
section proceed wrapping problem show elog captures mso section 
modification elog elog studied section 
compare family wrapping languages languages section 
preliminaries finite trees considered 
trees defined normal way node 
assume children node fixed order 
node label taken finite nonempty set symbols alphabet 
consider ranked unranked trees 
ranked trees ranked alphabet symbol fixed arity rank constant integer 
ranked trees node label rank exactly children 
nodes labels rank leaves 
may partition sets 
symbols equal rank 
ranked tree considered relational structure tr dom root leaf unranked tree structure tu dom root leaf nextsibling dom set nodes tree relations defined intuitive meanings 
instance binary denotes th direct child relation nextsibling true iff th th children common parent node respectively 
true iff labeled tree 
monadic second order logic mso trees secondorder logical language consisting variables lowercase names 
ranging nodes set variables written upper case names 
ranging sets nodes parentheses boolean connectives quantifiers node set variables relation symbols model theoretic tree structure consideration equality node variables syntactic sugaring possibly boolean operations relation symbols sets 
course equally suited structures obtained adding predicates definable structure formalism removing redundant definability 
mso refers mso sentences form 
pn 
pn pi set variables order formula 
easy define natural total ordering dom mso obtained depth left right traversal tree say parents precede children called document order context wrapping html documents see 
unary mso query unary predicate definable mso formula free order variable 
tree language definable mso iff closed mso formula tree structures mso 
regular tree languages precisely recognizable number finite automata nondeterministic descending top tree automata nondeterministic deterministic data ascending bottom tree automata deterministic dta nondeterministic nta way tree automata 
true ranked unranked alphabets 
provide definitions deterministic bottom automata ranked unranked case 
definition 
deterministic bottom ranked tree automaton tuple 
finite set states ranked alphabet partial transition function set final states 
semantics notion run tree defined inductively follows consists leaf node labeled defined 
labeled children 
tm 
tm defined 
run called successful tree tree accepted iff set trees accepted denoted 
definition 
deterministic bottom unranked tree automaton tuple finite set states unranked alphabet partial transition function regular language states set final states 
semantics tree defined inductively follows consists leaf node labeled labeled children 
tm 
tm qm qm run called successful tree tree accepted iff set trees accepted denoted 
definition 
ranked resp unranked tree language regular iff accepted deterministic bottom ranked resp unranked tree automaton 
classical result ranked trees shown hold unranked trees see 
proposition 
tree language regular iff definable mso 

context wrapping html documents consider infinite alphabet allows merge html tags attribute assignments labels 
requires generalized notion relational structures dom 
consisting domain dom countable possibly infinite set relations finite number nonempty 
results cited shown proposition proven finite alphabets trivial see hold infinite alphabets case symbols alphabet node labels part domain labels domain elements expressed predicates 
requirements impossible quantify symbols query language refer finite number symbols 
see related discussion preliminaries 
avoid problem assuming finite set 
attribute assignments encoded instance lists character symbols modeled subtrees document tree 

monadic datalog trees sections syntactically restricted fragment standard datalog 
adhere usual minimal model fixpoint semantics defined say immediate consequence operator tp 
signature denote finite set built predicates 
definition 
signature denote tree structure 
monadic datalog program set datalog rules extensional predicates intensional predicates unary 
default signature root leaf ranked trees root leaf nextsibling unranked trees 
tr tu denote extensions respectively 
order able compare mso monadic datalog assumptions 
unary query monadic datalog mso denote function assigns predicate nodes tree words selects subset dom 
result part database folklore proposition 
arbitrary finite structures monadic datalog query mso definable 
say monadic datalog program dedicated intensional predicate say accept accepts tree iff accept root node inferred extension accept 
monadic datalog program recognizes tree language accepts 
result similar folklore result monadic fixpoint logic trees expresses mso tree language acceptance shown straightforward simulation bottom tree automata proof long version 
theorem 
tree language regular iff definable monadic datalog 
conclude section providing new complexity result characterizes hardness executing monadic datalog programs 
theorem 
ranked unranked trees monadic datalog dom combined complexity size input program dom size tree linear time data complexity program complexity complete linear time 
proof sketch assume signature ranked trees unranked trees 
observe binary predicates nextsibling functional dependency column second second column 
monadic datalog program apply transformation 
rule split connected parts contain head variable create rule propositional head predicate add propositional predicates original rule replacements removed parts 
instance 
rewritten 
easy see transformation linear size program 
rule transformed program variable functionally determines variables connected binary predicates 
graph functional dependencies variable reachable variable 
consequently linear number relevant ground instances size data computed linear time 
known see fixpoint ground program computed time linear size program 
composition steps requires dom time 
upper bound combined complexity problem linear time data program complexities 
problem hard combined resp 
program complexity generalizes propositional horn sat problem complete 
data complexity results theorem follow fact data complexity mso queries finite structures bounded tree width linear time facts ranked labeled trees size labeling alphabet tree width unranked labeled trees tree width 
results theorem new 

monadic datalog queries section show mso monadic datalog equivalent power define unary queries 
direction stated proposition 
proof need additional machinery 
definition 
ranked query automaton qa way deterministic ranked tree automaton selection function tuple root leaf finite set states nonempty set final states start state ranked alphabet transition functions socalled selection function 
partition disjoint sets 
transition function transitions 

transition function transitions 
string states length 
root transition function root transitions 
leaf transition function leaf transitions 
ranked tree 
cut subset dom contains exactly node path root leaf 
configuration mapping cut set states automaton transition configurations denoted root leaf transition 
transition node 
children say 
nm 
nm label 
nm label nm identical 

transition node 

nm 
nm set children nm label arity identical 

root transition root root denotes root node root root root label root 

leaf transition leaf node 
leaf label identical 
start configuration root node configuration root accepting configuration 
dta starts root terminates 
run sequence configurations 
cm cm start configuration 
run accepting cm accepting configuration exist cm cm cm 
number transitions parallel usually different sequences transitions possible 
disjointness node label current state kind transition involving possible point time nodes sequence states visited runs 
consider type automaton deterministic refer run run automaton kind specified run forever input tree restrict automata terminate 
decidable property 
selection function defined follows 
query automaton selects node configuration label 
selects run 
cm accepting selected ci 
query automaton computes set nodes selected time run just terminating configuration definition contains root node cut 
proposition 
unary query ranked trees mso definable iff ranked query automaton computes 
lemma qn label ci lemma 
ranked query automaton ranked tree dom pair nodes th child define partial function fn qn qn ci ci cj cj ci qn cj qn cj fn ci 
state node uniquely determines states child nodes directly transition back 
define function fn state transition th child depends state configuration state assignment belongs 
proof sketch lemma easily shown simple induction trees bottom 
induction necessary fact cj functionally depends ci ci ci cj cj direct consequence determinism required definition 
furthermore ci cj 
definition particular transitions overwrite child states reading configurations ci 
cj transitions occur tree depend tree 
configuration contains state label subsequent configurations lead state assignment label 
state result ranked queries 
theorem 
unary mso definable query exists monadic datalog query queries return result ranked trees 
proof virtue proposition proposition need show encoding maps ranked query automaton monadic datalog program compute query 
encoding predicate names pairs state names intuitively means state parent state 
dummy state assign imaginary parent root node 
see correctly handle transitions parent states need managed predicates 
encoding set rules 

qm 
am 
start state add single rule root 
start state 
transition 
qm am add rules child 
nm 
qm nm 
nm 

transition qm add qi ni ni 

root transition root add root 

leaf transition leaf add leaf 
note datalog variables ni encoding range nodes dom 
encoding aims computing exactly state assignments run formalized dom ci history try model configurations 
abbreviate set 
easy see definition state assignments fixpoint certain subsume direction soundness shown induction computation initially obtain root applying start state rule 
clearly 
set facts obtained far fixpoint computation 
rules correspond root leaf transitions single state assignment premise bodies 
premise true state assignment inferred rule configuration run sound 
set facts obtained far fixpoint computation transition rule infer 
qm nm nodes 
nm children node label 
qm label nm 
lemma know node nk qk qk qk label nk qk nk qk depends qk nk computed independently transition nk state assignments form remain current configuration common transition occurs 
qm nm assumed configuration point 
consequently new state assignment inferred sound 

definition selection function query automaton nicely coincides monotonic semantics monadic datalog 
obtain program adding rule query 

query label query 
characterize queries monadic datalog unranked trees 
analogously query automata ranked trees define class strong query automata unranked trees tool proving theorem 
way deterministic finite string automata dfa defined normal way 
definition 
strong unranked query automaton sqa tuple root leaf leaf root definition 
disjoint regular subsets transition function transitions form transition function transitions form set natural numbers 
regular string length language regular 
assure determinism require transition function called stay transitions 
require function computed dfa fb string label 
nm label nm selection function anytime run maps nodes states termination node assigned exactly state stay transition node children 
nm configuration 
nm label 
nm label nm nm identical 
nm 
require node stay transition decidable property sqa 
definitions configurations leaf root transitions run accepting run carry definition 
query computed tree language defined defined analogously definition 
proposition 
unary query unranked trees mso definable iff sqa computes 
show theorem proof similar theorem 
theorem 
unary mso definable query monadic datalog query unranked trees queries return result 
proof sketch proof works analogously case ranked queries changes encoding automaton sqa monadic datalog 

transitions clear definition regular language density 
special case interesting result regular languages polynomial density regular language constant density denoted finite union regular expressions form uv words 
uiv wi union expression ui vi wi words alphabet consisting states query automaton 
intuitively proceed follows parallel 
temporary predicates match word ui ui child nodes respect nextsibling relation starting left rules encoding provided 
match wi wi rightmost children rules 
furthermore mark nodes wi rules needed monadic datalog stratified negation 
match ui th node rightmost node marked wi rules length sequence nodes 
matching exact vi mod vi create state assignments temporary facts computed far rules 
uiv wi density assignments monadic datalog encoding transitions follows 
tmp ui 
tmp ui nk tmp ui nk nextsibling nk nk 
tmp wi 
tmp wi tmp wi nextsibling 
tmp wi tmp wi nextsibling 
tmp wi tmp wi nextsibling 
clearly analogous result lemma stated unranked trees 
tmp vi tmp ui tmp vi tmp vi tmp vi tmp vi tmp ui tmp vi nextsibling tmp wi 
nextsibling tmp wi 
nextsibling tmp wi 
nextsibling tmp wi 
nextsibling tmp wi 
nextsibling 
nextsibling 
tmp 
ui wi vi ui vi wi th symbol 
transitions deterministic finite automaton alphabet 
create rules follows 
tmp 
tmp tmp nextsibling 
tmp 
traverse siblings left right check state label pairs constitute word language transition 

stay transitions tree node may involved stay transition may consider simulation dfa taken context proof 
encoding dfa selection function straightforward 
transition depends single state assignment 
discussed case query automata ranked trees earlier condition entails computation union configurations run dfa fixpoint monadic datalog program application selection function set sound 

tree wrapping section bridging step topic previous sections monadic datalog trees extracting information parse trees html documents 
definition 
document node labeled unranked tree root node special label document node 
assume html attributes simply represented nodes parse tree accessed child relation document tree 
definition 
information extraction function function maps unranked labeled tree subset dom nodes 
clearly unary predicate monadic datalog program considered define information extraction function 
consider method wrapping web document information extraction functions 
tree number information extraction functions 
fm natural way extracting wrapped tree 
fm 
fi fi node dom compute label function computes label set predicate assignments node tree obtained follows dom node iff root root 
label dom tree compute label 
dom 
child iff ancestor node dom ancestor ancestor ordering siblings coherent document order elog section introduce elog simplified fragment wrapping language elog 
subsequently refer monadic intensional predicates pattern predicates 
definition 
language elog fragment monadic datalog signature elog contains set star free disjunction free regular paths rules restricted form pattern predicate called parent pattern pattern predicate root pattern set atoms pattern predicates set condition atoms predicates contains 
predicate defined inductively terms predicate child easily definable see 
note method central may replaced different 
note definition nonrecursive path defined fixed conjunction child label atoms 
mso path child 
path child 
wild card matching symbol remaining condition predicates defined 
nextsibling 
nextsibling 


paths condition atoms 
may write rules form call rules specialization rules 
visual wrapper specification main strength elog elog programs completely visually specified see 
mentioned patterns useful metaphor building blocks wrappers 
example document wrapped user may guided graphical specification elog rule follows destination pattern named may new parent pattern selected patterns defined far 
initially pattern available root pattern matches entire document 
system display document highlight regions correspond nodes parse tree classified wrapper program specified far 
new rule defined selecting mouse clicks example document subregion highlighted 
system automatically decide path relative highlighted region best describes region selected user 
basic rule 
refined generalizing path adding conditions patterns 
conditions involve path contains defined similarly process just described 
easy imagine appropriate graphical user interface manipulations 
process outlined lixto system described detail 
example documents needed defining wrapper program required rule specified exists document instance parent pattern recognized instance destination pattern relates desired manner 
elog captures mso stated elog surrogate completely visual wrapper specification process exactly wrapping power mso equally monadic datalog unranked trees 
theorem 
wrapper documents definable monadic datalog iff definable elog proof sketch full proof theorem quite easy obtain appear long version give rough sketch 
fact query elog expressed monadic datalog follows directly definition elog consequence query elog expressed mso 
direction basically observe proof theorem limited fragment monadic datalog required simulate strong query automata 
programs form decomposed small number rule templates instance template nextsibling 
predicates 
rules simplified program easily simulated elog example template rewrites dom 
note point full elog language strictly expressive mso 
example elog supports called distance tolerances predicates 
elog new language obtained elog extending predicate distance tolerance pair percentage values refers node children requires children theorem 
elog language strictly expressive unary mso queries unranked trees 
proof elog program parent 
parent 
parent 
classifies node list children form 
tree language root regular 
binary pattern predicates section step framework information extraction functions address limited form binary pattern predicates elog language supports 
enhance elog predicates obtain new language call elog long version discuss generalization predicate support paths kleene star ranges 
extended predicate remains mso definable size binary pattern relations quadratic size input tree 
binary intensional predicates allow explicitly represent parent child relationship tree computed result wrapping process extend expressiveness wrapping formalism paths kleene star 
definition 
elog language elog pattern predicates binary rules form set condition atoms elog set pattern atoms form pi xi 
accordance elog predicate root pro forma binary substituted pattern predicate built 
close correspondence semantics elog elog lemma 
elog program elog program obtained rewriting th rule 
pn xn 
number condition atoms ri 
ri 
pn xn 
ri new predicate 

iff node 
iff rule head predicate parent predicate say index ri 
lemma introduced intermediate step ri predicates order mapping rules atoms head predicates unique 
immediately follows lemma previous elog elog characterize tree languages define monadic queries data complexity 
theorem 
monadic query resp 
tree language documents definable elog iff definable mso data complexity elog linear time 
note elog equally suited visual specifi cation elog rationale supporting binary pattern predicates elog build child relation output xml graph wrapping process 
definition 
output language elog defined follows 
elog program function mapping document node labeled directed graph dom pi qp qp set pattern predicate names occurring edge relation constitutes partial order nodes 
graph acyclic reflexive loops form theorem 
relations mso definable 
proof elog program 
case qp relations covered proposition need show mso definability defined def 
pn sat 
pn sat version columns idb predicates projected disjunction formulae rule variable appearing replaced variable appearing parent pattern atom replaced 
assume new variables appear 

wrapping languages section compare expressiveness wrapping languages regular path queries nesting hel wrapping language framework elog space reasons extremely brief section 
previously proposed wrapping languages evaluated 
majority previous string tsimmis editor florid debye stalker artificially restricting way trees true motivation 
decided include discussion 
systems xwrap essentially tree lixto formal specifications published subject expressiveness evaluations 
web query languages evaluated websql weblog unsuited wrapping access structure web documents weboql survey web query languages see highly expressive query languages permit data transformations spirit wrapping 
regular path queries nesting language compare elog obtained combining regular path queries nesting create complex structures 
new language call rpn regular path queries nesting hand simple appropriate defining practical wrappers hand serves prepare machinery comparing wrapping languages 
creation complex objects characteristic common wrapping approaches insufficiently shed light point 
definition 
syntax rpn defined grammar rpn path txt path rpn rpn path conds regexp regexp range range conds cond cond cond path txt string range integers regexp denotes regular expressions html tag names string set strings 
definition 
denotational semantics rpn 
denotes regular expression html tags range string denote tree nodes 
loss generality assume range 
xn 
txt txt denotes tree nodes reachable path satisfy range depth left traversal nodes marked going depth traversal document order 
furthermore 
yn yn txt txt true conditions 
intuitively rpn entries tuples set valued may remain empty 
condition path txt tested node node reachable path path txt example 
note semantics paths conditions rpn similar fragment obtained xpath removing functional aspect language 
syntax definition xpath query written html body table tr td item td html body table tr td txt item td path form xpath corresponds rpn 
apart nesting general class path expressions rpn difference 
xpath selects nodes document tree html tree document usually irrelevant wrapping result se rpn extracts text nodes selecting nodes 
theorem 
wrapper expressible rpn equivalent wrapper elog add range range changing semantics 
proof sketch elog predicates path range extended follows 
contains path range allow arbitrary numbers binary predicates monadic datalog 
easy verify language expressive elog ranges rpn regular encoded path range contains path range predicates 
shortcut assume range rpn directly understood elog predicates 
rpn wrapper range 
create elog program root root query tree function defined follows 

contains 

txt txt nil 

xn pn xn pi 

xn xn new predicates regular expressions html tags ranges string string represented path character labels string 
fixpoint interpreted follows obtain semantics rpn remove atoms auxiliary predicates prime predicates verify conditions sequence predicates 
pn 
pn cover exactly path left right compute pn pn eliminate atoms predicates 
pn interpret complex objects assuming nested atom ordering tuple elements implicit naming predicates chosen 
note lixto system convention computed edges ordered xml output way rules elog program 
theorem 
elog equivalent rpn wrapper exists 
wrapper proof trees depth rpn queries firstorder 
check say root node number children easily 
mso elog invented computing 
hel section compare expressive power hel wrapping language world wide web wrapper factory expressiveness elog formal specification hel please refer 
consider fragment hel called hel obtained hel string extraction match split expressions support strings conditions essential philosophy hel getattr functions 
note done compare language framework built languages elog elog full elog supports string extraction way hel 
function may require number nodes document tree reachable path starting node equal constant number easy define mso 
getattr function hel extracts html attributes manage tree nodes 
assumptions function redundant accessing nodes 
definition 
syntax language hel defined grammar 
hel cc cc conds cc path txt path cc cc path tag tag ranges var ranges var ranges range range conds cond cond var set index variable names int set integers tag set html tag names string set strings range cond defined rpn 
index variable wrapper occurs exactly cc construct 
cond construct clause wrapper constrained way smallest prefix contains ranges index variables match prefix path terms tags index variables appearing ranges constructed concatenating path cc construct starting left choosing element record going right 
defining semantics hel hel tedious task 
define alternative variable free lan described guage called hel vf desirable property semantics hel hel vf entail relationship wrappers languages 
variable free syntax possible special restricted way index variables may hel 
definition 
language hel vf hel mainly inherits syntax rpn restricted form conditions may marked prolog cut conditions may nested inside conditions 
differs rpn follows 
semantics hel vf denotes reachability nodes tree 
condition paths single valued 
ranges cut apply relative document order traversal nodes conditions hold intuitively conditions evaluated 
cut causes evaluation path condition marked cut false 
formally denote txt sk tag paths conditions largest set txt sk stated relative ri yi 
yi yk yk yk yk condition cut 
lemma 
wrapper expressible hel iff expressible hel vf proof sketch hel wrapper easily transformed hel vf simply removing conditions merging construction part wrapper clause 
starting left condition deleted rightmost variables remaining condition nested construction part wrapper position variable 
example hel wrapper html body table tr td txt tr td txt html body table tr td txt item written html body table tr td txt tr td txt item td txt hel vf theorem 
wrapper expressible hel vf language equivalent wrapper elog proof sketch definition essentially stated mso 
theorem justified argument previously showing theorem 
theorem 
elog equivalent hel wrapper exists 
acknowledgments wrapper fabien martin frank neven thomas schwentick insightful discussions 

abiteboul buneman suciu 
data web 
morgan kaufmann publishers 
abiteboul vianu 
regular path queries constraints 
proceedings acm sigact sigmod sigart symposium principles database systems may tucson az usa 
arocena mendelzon 
weboql restructuring documents databases webs 
proc 
icde orlando florida feb 
arocena mendelzon mihaila 
applications web query language 
proceedings th international www conference santa clara california apr 
atzeni mecca 
cut paste 
proceedings acm sigact sigmod sigart symposium principles database systems may tucson az usa 

personal communication oct 
baumgartner flesca gottlob 
declarative information extraction web crawling recursive wrapping lixto 
proc 
lpnmr vienna austria 
baumgartner flesca gottlob 
visual web information extraction lixto 
proc 
vldb 
br klein wood 
regular tree languages non ranked alphabets 
unpublished manuscript 
ceri gottlob tanca 
logic programming databases 
springer verlag berlin 
courcelle 
graph rewriting algebraic logic approach 
van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier science publishers 
eiter gottlob voronkov 
complexity expressive power logic programming 
appear acm computing surveys 
dowling gallier 
linear time algorithms testing satisfiability propositional horn formulae 
journal logic programming 
fernandez sim wadler eds cluet deutsch levy maier robie suciu widom 
xml query languages experiences exemplars 
research bell labs com user simeon xquery html 
flum frick 
query evaluation tree decompositions 
proc 
international conference database theory 

tree languages 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer verlag 
hopcroft ullman 
automata theory languages computation 
addison wesley publishing reading ma usa 
laender ribeiro neto da silva 
debye data extraction example 
data knowledge engineering feb 
lakshmanan sadri subramanian 
declarative language querying restructuring world wide web 
workshop research issues data engineering ride nds new orleans feb 
liu pu han 
xwrap xml enabled wrapper construction system web information sources 
proceedings th international conference data engineering 
lud scher der lausen may 
managing semistructured data florid deductive object oriented perspective 
information systems 
minoux 
simplified linear time unit resolution algorithm horn formulae computer implementation 
information processing letters 
muslea minton knoblock 
stalker learning extraction rules semistructured web information sources 
neven schwentick 
expressive efficient pattern languages tree structured data 
proceedings acm sigact sigmod sigart symposium principles database systems pods 
neven schwentick 
query automata finite trees 
theoretical computer science appear 
papadimitriou 
computational complexity 
addison wesley 
papakonstantinou gupta garcia molina ullman 
query translation scheme rapid implementation wrappers 
proc 
international conference deductive object oriented databases dood pages aug 
sahuguet 
building intelligent web applications lightweight wrappers 
data knowledge engineering 
yu zhang 
characterizing regular languages polynomial densities 
proceedings th international symposium mathematical foundations computer science lncs pages 
springer verlag berlin 
thomas 
languages automata logic 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer verlag 
ullman 
principles database knowledge base systems vol 

computer science press dec 
world wide web consortium 
www org tr xpath 
yu 
regular languages 
rozenberg salomaa editors handbook formal languages volume chapter 
springer verlag 
