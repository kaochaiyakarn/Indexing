operational interpretations linear logic david turner teallach limited teallach com philip wadler bell labs lucent technologies wadler research bell labs com different operational interpretations intuitionistic linear logic proposed literature 
simplest interpretation recomputes non linear values time required 
memory management properties dismissed inefficient 
alternatively results evaluating non linear values 
avoids recomputation weaker memory management properties 
novel combination type theoretic operational techniques give concise formal comparison interpretations 
show subset linear logic operational interpretations coincide 
subset sufficiently expressive encode call value lambda calculus best worlds simple efficient implementation properties 
keywords linear logic operational semantics call byvalue lambda calculus memory management 
different operational interpretations linear logic proposed literature 
interpretations differ primarily treatment non linear values 
simplest interpretation recomputes non linear values time required 
strategy easy implement preserves single pointer property values linear type guaranteed exactly pointer 
inefficient purposes costs recomputing non linear values 
alternative strategy share results evaluating non linear values way call need languages share results evaluating closures 
avoids copying recomputation unfortunately loses single pointer property values linear type longer guaranteed exactly pointer 
uses novel combination type theoretic operational techniques concise formal comparison memory management properties operational interpretations intuitionistic linear logic 
appear theoretical computer science special issue linear logic 
performed glasgow university 
show subset linear logic operational interpretations coincide 
subset sufficiently expressive encode call byvalue lambda calculus best worlds simple efficient implementation properties 
operational models memory management properties linear logic sufficiently subtle worth writing formal semantics linear logic level detail sufficient describe storage allocation deallocation 
chirimar gunter riecke cgr cgr formal semantics uses counting implementation linear logic 
prove implementation values linear type exactly pointer 
identify weaker property particular subset values linear type exactly pointer 
formalism similar morrisett felleisen harper model garbage collection algorithms 
extends chirimar gunter riecke respects compare different operational interpretations linear logic 
particular consider interpretation linear logic recomputes nonlinear values prove strictly stronger properties interpretation considered chirimar gunter riecke 
formalise operational model higher level abstraction keep explicit counts 
significantly simplifies semantics subsequent formalisations memory management properties interpreter requires fifteen rules largest fifteen lines long section chirimar gunter riecke cgr reduction rules longest lines definition 
type theoretic techniques formalise memory management properties yields concise statements properties interested lets reuse standard proof techniques type theory 
allows relate memory management properties directly linear logic 
overview section presents syntax typing rules simple operational semantics intuitionistic linear logic 
section refine operational semantics capture storage allocation properties programs 
section modify operational semantics results evaluating non linear values shared compare storage allocation properties resulting interpretation linear logic 
section describes related 
section offers ideas 
intuitionistic linear logic slight variant plotkin formulation intuitionistic linear logic plo formulations linear logic explicit syntax duplicating discarding values 
term constructs important models counting implementations unnecessary operational semantics formulated slightly higher level abstraction keep explicit counts 
closely related formulations linear logic wad 
syntax definition describes syntax terms 
differ plotkin distinguish kinds variables non linear variables ranged may freely duplicated discarded linear variables ranged exactly 
useful distinction syntactically semantically need treat linear non linear variables differently operational model 
definition term syntax terms omega omega values omega simplicity include recursion sum types calculus absence effect operational interpretation non linear values key feature intend model 
operational semantics definition presents simple operational semantics closed terms evaluation judgments form meaning terminates returning value 
note distinction linear non linear variables apparent operational semantics 
section refine rules capture storage allocation properties programs distinction clear 
expression denotes linear unit value 
term eliminates unit value evaluates unit value evaluates expression omega constructs linear pair components evaluated strictly 
expression omega linear pair computed binding resulting values linear variables expression constructs linear function 
function application written ef evaluates linear function evaluates argument expression substituting resulting value lambda bound variable function body note bound variable linear function linear variable exactly sense evaluate function arguments strictly 
definition operational semantics omega omega omega gammaffi omega omega omega gammaffi replicated expression represents non linear value 
simplest interpretation suspended computation forced return value reason refer expressions form closures 
closures may freely duplicated discarded 
expression einf evaluates get closure substitutes expression variable typing rules syntax types standard linear unit type omega type linear pairs gammaffi type linear functions type non linear values 
definition type syntax types omega gammaffi linear contexts gamma delta non linear contexts theta xn presents typing rules 
control duplication discard maintaining separate type contexts typing judgment theta gamma context theta contains bindings non linearly bindings may duplicated discarded context gamma contains bindings exactly 
variables bound kind context pairwise distinct 
write empty context 
var rule looks type non linear context 
linear context forced empty term consume linear capabilities 
lvar rule looks type linear context ensures linear bindings 
constraint theta allow non linear bindings freely discarded 
unit value consumes linear resources force linear part context empty rule 
eliminate expression unit type rule check linear bindings expected consume partitioned parts part var theta lvar theta theta theta gamma theta delta theta gamma delta omega theta gamma theta delta theta gamma delta omega omega omega theta gamma omega theta delta theta gamma delta omega gammaffi theta gamma theta gamma gammaffi gammaffi theta gamma gammaffi theta delta theta gamma delta theta theta theta gamma theta delta theta gamma delta intuitionistic linear logic consumed part non linear bindings available omega omega rules partition linear context parts similar way rule 
function arguments bound linear variables gammaffi rule checks variable guaranteed linearly body lambda abstraction gammaffi rule behaves similar way omega rule splitting linear capabilities function argument expressions 
expressions form may freely duplicated discarded 
rule ensures expression refer linear bindings discarding duplicating effect discarding duplicating linear bindings 
expression evaluates gets closure 
rule places binding non linear part context sure safe duplicate discard type soundness typing rules operational semantics related type soundness theorem theorem type soundness proof simple induction derivation storage model closures recompute operational semantics gave definition serves description behaviour programs gives insight storage allocation properties 
section refine semantics store values explicit heap 
refined semantics formalise single pointer property mentioned 
interested formalising properties lazy evaluation surprising operational semantics closely related launchbury natural semantics lazy evaluation lau morrisett felleisen harper models memory management 
heaps heaps associate non linear variables expressions thought suspended computations linear variables stored values 
note particular format tensor pair values sub terms forced linear variables addresses linear values 
value represents indirect linear address non linear address 
ignore order entries heap 
definition heaps values heaps bn heap bindings sv stored values sv omega evaluation rules presents heap operational semantics 
evaluation judgments take form fhge fh ga meaning initial heap expression terminates returning new heap result address value stored 
lvar rule evaluates linear variables encounter linear variable value stored heap address simply return evaluation 
var rule crucial rule note recomputes non linear values 
require value look closure associated evaluate result return result 
subsequent uses benefit fact evaluated closure updated way 
rule allocates fresh unit value heap 
rule evaluates address address unit value heap 
continue evaluate deallocating heap binding 
shall prove safe deallocate part program requires 
note strictly necessary heap allocate unit values simpler wish keep convention result evaluating expression linear variable pointer heap allocated linear value 
lvar var fh ege fh ga fh fh ga fresh fhg 
fh ga fhge fh ga fh gf fh gb fh gb omega fhge fh ga fh ge fh ga fresh fhge omega fh omega gb omega fhge fh omega gc fh fh gd omega fh gd gammaffi fresh fh gammaffi fh gc fh gg fh fh fh gd fh gd fresh fhg fh fhge fh fh fh gb fh gb evaluation rules omega rule creates omega pair 
evaluate subterms yielding pointers pick fresh address store pair omega address return omega rules decomposes omega pairs 
evaluate yielding pointer pair 
extract pointers stored substitute bound variables continue executing note binding omega deallocated result executing omega rule 
gammaffi rule evaluates lambda abstractions term value simply store fresh address heap 
gammaffi rule evaluates function application left right evaluating yields pointer function evaluating yields pointer argument value substitute bound variable executing function body 
note binding deallocated result executing gammaffi rule 
rule interprets replication closure building operation 
expression fully evaluated simply store fresh non linear address heap 
returning address directly create indirection node fresh linear address return result 
maintains invariant result evaluating term linear variable 
rule evaluates bound expression indirection node points non linear address substitute enabling unlimited note indirection node deallocated result evaluating rule 
reduction rules wish ensure memory management invariants preserved execution 
transform operational semantics equivalent set reduction rules definition observe intermediate states computation 
simplify reduction rules introducing new syntactic category evaluation contexts describes contexts may evaluate sub terms 
easy check reduction rules adequate model operational semantics operational semantics evaluate term reduction rules simulate evaluation proposition adequacy fhge fh ga fhge fh ga proof simple induction depth derivation fhge fh ga definition reduction rules omega omega omega context fhge fh ge fhge fh ge var fh fh ege fhg 
fh ga fresh fh fhge gammaffi fh fresh gammaffi fh fhg fhg fh fresh fh fhg omega omega fh omega gb fresh omega fh omega omega fhg proving soundness reduction rules prove executing single reduction step affects behaviour term original semantics lemma single step reduction fhge fh ge fh ge fh ga fhge fh ga proof simple induction depth inference fhge fh ge proposition soundness fhge fh ga fhge fh ga proof prove result induction length reduction sequence fhge fh ga case reduction steps lvar rule lets infer required 
case fhge fh ge fh ga induction prove fh ge fh ga result follows lemma 
single pointer property position formalise single pointer property prove preserved evaluation 
rules generalise typing rules terms applied heaps 
judgment theta gamma states heap provides non linear bindings theta linear bindings gamma 
definition heap typing rules empty closure theta gamma theta theta gamma value theta gamma delta theta delta theta gamma closure rule determines theta gamma non linear linear bindings provided checks closure typed non linear environment theta empty linear environment 
ensures refer non linear variables provided rule similar typing rule terms 
add type theta 
value rule checks heap provides nonlinear bindings theta linear bindings gamma delta 
partition linear bindings parts linear capabilities consumed linear capabilities provided gamma remainder linear bindings plus binding type soundness lemmas prove rearrange heap typing derivation derivation types bindings proved 
required proof lemma 
lemma heap typing linear theta gamma exists delta theta gamma delta theta delta proof uses induction depth inference theta gamma 
lemma heap typing non linear theta gamma theta proof uses induction depth inference theta gamma 
lemma states provides superset linear capabilities required configuration fhge reduces fh ge heap continues provide capabilities leaves additional capabilities delta untouched 
lemma invariance theta gamma delta theta gamma fhge fh ge exist theta gamma theta theta gamma delta theta theta gamma proof uses induction depth inference fhge fh ge uses lemmas 
base case case analysis basic reduction rules 
note lemma clear non linear bindings removed heap linear bindings consumed evaluation 
theorem type soundness theta gamma theta gamma fhge fh ge exist theta gamma theta gamma theta gamma proof type soundness immediate consequence lemma 
type soundness theorem proves linear data correctly deallocated evaluation dangling pointers space leaks reduction step fhge fh ge linear heap bindings provided exactly required means example garbage collection scheme manage storage allocated non linear values model explicitly deallocated rely program explicitly deallocate linear values 
storage model closures update describes changes operational semantics closures updated evaluated 
key change var rule just evaluating update result returns 
subsequent uses return result recomputing unfortunately changing var rule means modification 
reader suspicious linear variable clearly duplicated update fact precisely reason interpretation linear logic fails single pointer property result evaluating closure linear value pointed value separate purposes updating binding returning result 
recall original evaluation rules consume linear value explicitly remove heap 
calculus fails property longer safe guarantee remaining linear value consuming 
modification var rule forces modify evaluation rules value linear type longer explicitly remove heap binding value just consumed 
var fhge fh ga fh fh aga omega fhge fh omega gc fh omega fh gd omega fh gd gammaffi fh gc fh gg fh fh fh gd fh gd fhge fh fh yg fh gb fh gb closures update reduction rules just transform operational semantics equivalent set reduction rules observe intermediate states computation 
syntax evaluation contexts remains unchanged definition definition reduction rules context fhge fh ge fhge fh ge binding fhge fh ge fh fh gx lookup fh fh aga gammaffi fh fresh gammaffi fh fh fhg fh fresh fh fh yg fhg 
fh ga fresh fh fh ge omega omega fh omega gb fresh omega fh omega omega fh omega single pointer property easy check new interpretation closures fails preserve single pointer property 
lost identify subset values linear type pointed exactly cgr cgr 
capture fact linear values pointed exactly refine heap expression typing rules 
judgement theta phi gamma indicates type theta contains type bindings non linear variables phi contains type bindings linear variables badly inside closure gamma contains type bindings linear variables exactly 
domains type contexts phi gamma distinct 
heap typing rules weakened similar way expression typing rules contain extra component delta records variables 
note particular bad rule forces free linear variables bad heap binding marked bad 
definition heap typing rules empty closure theta phi gamma delta theta phi theta phi gamma delta unused theta phi gamma delta theta phi gamma delta linear theta phi gamma gamma delta theta phi gamma theta phi gamma delta bad theta phi gamma delta theta phi theta phi gamma delta need extra component delta heap typing rules need explicitly detect linear heap binding unused recall longer explicitly deallocate linear bindings guarantee pointed exactly 
mark unused linear heap bindings bad bad bindings allowed discarded 
able distinguish case linear binding consumed happy allow case linear binding changes bad heap binding certainly don want allow 
simple check strong single pointer property section implies weaker property proposition strong weak properties 
theta gamma theta gamma 
theta gamma theta gamma 
proof cases simple induction depth typing derivation 
var theta phi lvar theta phi theta phi theta phi theta phi gamma theta phi gamma theta phi gamma gamma omega theta phi gamma theta phi gamma theta phi gamma gamma omega omega omega theta phi gamma omega theta phi gamma theta phi gamma gamma omega gammaffi theta phi gamma theta phi gamma gammaffi gammaffi theta phi gamma gammaffi theta phi gamma theta phi gamma gamma theta phi theta phi theta phi gamma theta phi gamma theta phi gamma gamma weakened linear logic type soundness refined typing rules prove chirimar gunter riecke weakened single pointer property linear heap binding pointed exactly long pointed closure continue property execution program value consumed guaranteed remaining value 
property clearly weaker single pointer property gave earlier 
particular requires information outside type system determine heap binding initially pointed exactly 
weak single pointer property sufficient enable update place optimisations arrays possible design array primitives way arrays start life exactly pointer linear type system ensures array subsequently duplicated safe update array place 
lemma proves linear bindings gamma required reduction step split parts gamma bindings required reduction step delta bindings consumed reduction step 
bindings start linear need subsequently marked bad 
gamma set linear bindings enclosing program left untouched 
gamma set new linear bindings created reduction 
lemma invariance theta phi gamma gamma delta theta phi gamma fhge fh ge exist theta phi gamma gamma delta theta theta phi phi gamma gamma gamma delta delta theta theta phi phi gamma gamma gamma delta gamma proof induction depth inference fhge fh ge theorem type soundness theta phi gamma delta theta phi gamma fhge fh ge exist theta phi gamma gamma delta theta theta phi phi gamma gamma delta delta theta theta phi phi gamma gamma gamma delta gamma 
proof corollary lemma 
encoding call value lambda calculus think updating closures necessarily efficient recomputing closures computation shared 
applications benefit gained updating closures 
particular consider encoding call value lambda calculus linear logic find reasonable recompute closures especially recomputing closures simpler implement guarantees stronger single pointer property 
recall encoding call value lambdacalculus intuitionistic linear logic definition encoding call value calculus omega omega note encoding builds closures kinds expression omega expression forms encode non linear function pair values fully evaluated 
closed program non linear variable bound contents closure closures contain function pair values implies function pair value 
expression form ine effect forcing evaluate value closures encodings values 
example encoding pair forces encodings sub expressions evaluated values building pair 
subset linear logic includes just image call value encoding lambda calculus significant benefit gained interpretation linear logic updates closures closure fully evaluated 
related chirimar gunter riecke cgr cgr provided inspiration counting model linear logic described extends theirs 
prove evaluation strategy guarantee single pointer property values linear type values linear type single pointer property continue evaluation 
careful design enables example write array primitives place update array entries 
believe lack strong single pointer property complicates counting interpretation linear logic proofs memory management invariants 
instance compiler optimisations solely basis linear type information extra information required ensure value single pointer property 
lincoln mitchell lm describe implementation linear language allocates non linear values garbage collected heap linear values separate area garbage collected 
specify exactly evaluate non linear values unclear avoid garbage collection linear values 
give formal proof case operational interpretation linear logic satisfies strong single pointer property possible allocate linear values separate area need garbage collected 
lafont laf abramsky abr describe machines intuitionistic linear logic 
machine recompute non linear values preserve strong single pointer property 
machines formulated slightly abstractly capture memory management properties 
wakeling runciman wr briefly mention variant machine aug joh implement linear language wadler wad wad 
prove properties machine ideal purpose represents linear non linear storage graphs explicitly 
wakeling runciman implement call need language updates closures language preserves strong single pointer property include non linear values primitives closures define nonlinear values terms linear values 
baker bak bak developed simple untyped language exactly pointer storage cell demonstrated language substantially improved performance traditional languages small algorithms quicksort 
barendsen smetsers bs developed complex type system type reconstruction algorithm socalled uniqueness types possess exactly pointer type system applied structure io operations lazy functional language clean plasmeijer ap 
benton mixed linear non linear logic ben linear logic incorporates primitive linear non linear term constructs interpreting non linear values terms closures 
means issue interpret replicated linear values critical just primitive non linear term constructs 
turns significant number values need move interface classical linear parts calculus problems described arise 
conjecture just case linear logic single pointer property benton calculus depends crucially recomputation willing 
benton wadler bw benton model relate standard mappings lambda calculus direct call name call value benton linear calculus moggi monadic metalanguage 
morrisett felleisen harper models memory management allow formulate prove properties garbage collection models high level abstraction 
formulated independently models strikingly similar offering hope techniques applied framework 
highlights tradeoff interpretation linear logic recomputes closures interpretation updates closures 
case update closures believe lack strong single pointer property poses significant problem linear type information longer agree happens execution 
difficult base optimisations linear type information fact value linear type longer means guaranteed exactly 
remains seen implementation linear logic sufficiently linear type information worth treating linear values specially 
instance linear values explicitly deallocated execution linear program overheads taken account 
cost allocating storage garbage collected language usually low better sure allocate linear values efficiently rule techniques free lists 
ensure deallocation linear values extremely cheap deallocation cost garbage collected storage management scheme 
reason linear type information implement update place allow explicit deallocation 
unfortunately hard predict opportunities update place arise real programs storage updated usually deallocated close new piece memory required interesting area investigate linear type information allows efficient garbage collection algorithms 
example copying garbage collectors take care copy object twice problem usually handled overwriting copied object forwarding pointer points new copy allocated 
unnecessary value single pointer property definition pointers value garbage collector visit 
able linear type information help garbage collection 
update added revision june keith wansbrough glasgow university collaboration simon peyton david turner currently experimenting determine linear logic applied improve im plementation lazy functional language haskell 
theories look useful tradeoffs unclear experiments essential determine value practice 
abr samson abramsky 
computational interpretations linear logic 
theoretical computer science 
ap peter rinus plasmeijer 
ins outs clean journal functional programming january 
aug lennart augustsson 
compiling lazy functional part ii 
phd thesis chalmers university technology 
bak henry baker 
lively linear lisp look ma garbage 
acm sigplan notices august 
bak henry baker 
linear logic quicksort 
acm sigplan notices february 
nick benton gavin bierman valeria de paiva martin hyland 
term calculus linear logic 
typed lambda calculi applications number lecture notes computer science 
springer verlag 
ben nick benton 
mixed linear non linear logic proofs terms models 
proceeding computer science logic volume lecture notes computer science 
springerverlag 
bs erik barendsen smetsers 
conventional uniqueness typing graph rewrite systems 
proceedings th conference foundations software theoretical computer science number lncs 
springer verlag 
technical report version 
bw nick benton philip wadler 
linear logic monads lambda calculus 
symposium logic computer science 
ieee computer society 
cgr chirimar carl gunter jon riecke 
proving memory management invariants language linear logic 
acm conference lisp functional programming 
acm press april 
cgr chirimar carl gunter jon riecke 
counting computational interpretation linear logic 
journal functional programming march 
joh thomas johnsson 
compiling lazy functional languages 
phd thesis chalmers university technology 
laf yves lafont 
linear machine 
theoretical computer science 
lau john launchbury 
natural semantics lazy evaluation 
acm symposium principles programming languages 
lm patrick lincoln john mitchell 
operational aspects linear lambda calculus 
ieee symposium logic computer science 
ieee computer society 
greg morrisett matthias felleisen robert harper 
models memory management 
functional programming languages computer architecture 
john martin odersky david turner philip wadler 
call name callby value call need linear lambdacalculus 
eleventh conference mathematical foundations programming semantics number electronic notes theoretical computer science 
elsevier 
plo gordon plotkin 
type theory recursion 
logic computer science 
ieee press 
wad philip wadler 
linear types change world 
broy jones editors programming concepts methods 
north holland 
wad philip wadler 
linear logic 
acm ifip symposium partial evaluation semantics program manipulation june 
wad philip wadler 
taste linear logic 
mathematic foundations computing science number lncs 
springer verlag august 
wr david wakeling colin runciman 
linearity laziness 
functional programming languages computer architecture 

