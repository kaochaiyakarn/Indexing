developing reusable robust language processing components information systems gate bontcheva hamish cunningham diana maynard valentin tablan horacio saggion department computer science university sheffield regent court portobello street sheffield dp uk hamish diana dcs shef ac uk gate architecture graphical development environment enables users develop deploy hlt applications robust fashion 
gate provides reusable extendable customisable language processing modules part speech tagger named entity recognition grammars combined extensive document format support xml html form useful toolset building hlt augmented information systems 
information systems benefit fully human language technology hlt offers robust scalable easy integrate solutions 
producing robust components requires attention engineering aspects construction 
instance information systems need deal large amounts data multiple media languages formats locations distributed network language processing components need able handle data adequately 
addition components need store results easily retrieved visualised 
example named entity recognition module working part news web portal able process quickly minimum overhead constant stream news come xml html pdf formats located servers 
names identified persons locations dates need stored indexed retrieval visualisation users ask sentences today news president bush middle east mentioned 
argued tasks addressed successfully framework language processing software development hlt component built framework benefit facilities having re implement application domain language 
demonstrate gate version supports development deployment reusable robust language processing components 
gate available freely open source system gnu library licence gate ac uk including extensive documentation research papers tutorials demos 
framework building robust tools applications gate architecture development environment framework building systems components process human language 
section discuss enables low cost creation robust reusable language processing components providing necessary engineering support efficiency data storage format handling retrieval visualisation 
shows diagram gate internal architecture way addresses issues 
core common data model annotation associates linguistic formatting data document content 
annotations consist type set features represented attribute value pairs 
powerful representation model independent particular linguistic theory represent linguistic document formatting data regardless complexity 
gate annotation model modified version tipster format largely compatible atlas format 
gate extendable set document format handlers xml html rtf email translate document content formatting information gate shared data model handlers new formats media easily added user 
example new audio video format handler contain ocr module 
data storage format handling modules applications gate create textual content document 
information correspondence text media time url multimedia source stored gate data model 
automatic translation multimedia source textual document content allows applications reuse language processing modules originally created textual documents 
alternatively modules modified new ones created specifically targeted processing ocr output multimedia content 
separation format media handling language processing components enables run document content regardless origin support new format added processing modules need changed 
gate offers comprehensive module independent multilingual support unicode 
information gate data model stored different ways supported transparently processing modules see 
particular application choose persistence mechanism best suited purpose 
changes required processing modules input output abstracted away storage retrieval technicalities 
ways storing data relational databases oracle postgresql ii storage java serialisation mechanism iii markup xml format 
relational database storage allows efficient execution queries find sentences documents mention president bush israel 
data stored database accessed applications sql 
markup storage allows non gate applications access directly language processing results inserted markup documents tony blair 

application editor building hlt components applications gate shown gate applications modular structure consist number language processing components called processing resources prs 
module included application pos tagger module existing modules customised new applications named entity module annie frequently customised new applications new application specific modules created module 
order lower application building overheads gate provides number useful easy customise components grouped form annie information extraction system prs eliminate need users keep reimplementing frequently needed components provide starting point new applications 
majority prs gate finite state techniques implement various tasks tokenisation semantic tagging coreference 
emphasis efficiency robustness low overhead portability full parsing deep semantic analysis 
customisation modules creation new ones typically requires knowledge gate pattern action rule language called jape basic understanding annotation data model 
visual development environment provides tools support process number ways data visualisation debugging demonstration components highlight information web pages available gate ac uk annie index jsp 
measurement component development alternative configurations compared straightforwardly automated performance evaluation details see 
jape language allows users customise create language processing components creating editing linguistic data grammars rule sets efficient execution automatically provided gate 
familiar gate data model users find difficult write jape pattern matching rules effectively regular expressions 
example rule shows typical jape rule 
left hand side describes patterns annotations need matched right hand side specifies annotations created result rule priority token orthography lookup kind kind rule rule matches pattern consisting kind word expressed token annotation created previous text tokenisation module starts upper case letter followed word typically indicates companies gmbh lookup annotation 
entire match annotated entity type feature kind value feature rule value 
rule feature simply debugging purposes clear particular rule fired create annotation 
example rule applied document containing hewlett packard left hand side match tokens starting capital letter followed designator 
due space limitations provide details annie modules tokenisation gazetteer lookup part speech tagging create annotations jape grammars see 
shown processing components structured create modular application 
gate graphical environment process easier allowing users construct applications visually 
user chooses prs included pos tagger order executed data 
shows annie application built freely provided set components 
execution order manipulated arrow buttons 
execution parameters resource set loaded document parameter pr 
application run modules executed specified order data 
substantial part component application development debugging performance measurement 
gate comes number tools facilitate process see figures 
new components applications require visualisation tool gate allows users extend current tool set simple manner similar adding new processing resource 
applications gate strengths flexible robust enable development wide range applications framework 
section describe briefly nlp applications developed gate architecture 
depth discussion effort involved developing processing components gate see 
applications developed date gate proved reduce development effort required low level technical tasks data storage catered 
application development cases requires implementation new grammar rules modifications existing components creation new ones 
effort tasks reduced due support gate development environment 
feedback gate users learn system prior developing applications shown substantial documentation tutorials examples helped complete projects successfully 
usefulness provided set customisable modules development environment pointed major advantage 
gate unique features particularly relevant information systems relational databases efficient storage retrieval language processing results 
multimedia indexing searching environment system uses information extraction components developed gate produce formal annotations essential events football video programme material 
system comprises customised versions freely available gate modules set new modules event extraction 
effort involved existing modules lower effort needed development scratch 
application needs handle wide range formats media including ocr content audio video documents 
gate comprehensive format support required person months develop 
summarisation adapted annie form system aims extracting relevant information annual reports companies performance health safety issues 
extracted information allows automated production statistical metrics describing level compliance health safety recommendations relevant legislation may implemented 
application required substantial changes entity types recognised default annie system simple adapt grammar new domain application entire project specification completion required person months 
described gate infrastructure aims assist development robust scalable reusable hlt modules integrated information systems applications 
benefits hlt infrastructure discussed thoroughly exemplified experience working number projects including multimedia indexing search 
just completed provision information retrieval support gate allow construction information systems ir hlt capabilities 
acknowledgments gate supported engineering physical sciences research council epsrc gr gr smaller 
project nl funded ec th framework hlt programme number ist 
project partners universities twente nijmegen sheffield ab dfki 
bird day garofolo henderson liberman 
atlas flexible extensible architecture linguistic annotation 
proceedings second international conference language resources evaluation athens 

gate application development environment bontcheva brugman russel wittenburg cunningham 
experiment unifying audio visual textual infrastructures language processing proceedings workshop toolsets architectures build nlp systems coling luxembourg 
gate ac uk 
cunningham bontcheva tablan wilks 
software infrastructure language resources taxonomy previous requirements analysis 
proceedings nd international conference language resources evaluation lrec athens 
gate ac uk 
cunningham maynard bontcheva tablan 
gate framework graphical development environment robust nlp tools applications 
proceedings th anniversary meeting association computational linguistics 
cunningham maynard bontcheva tablan 
gate user guide 
gate ac uk 
grishman 
tipster architecture design document version 
technical report darpa 
www itl nist gov div related projects tipster 
maynard cunningham bontcheva tablan dimitrov 
adapting information extraction system different domains languages applications 
lrec workshop knowledge nlp applications 
maynard tablan cunningham saggion bontcheva wilks 
architectural elements language engineering robustness 
journal natural language engineering special issue robust methods analysis natural language data 
forthcoming 
tablan bontcheva cunningham maynard baker 
unicode environment creation language resources 
proceedings rd language resources evaluation conference 
forthcoming 
