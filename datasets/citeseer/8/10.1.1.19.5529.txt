javanaise distributed shared objects internet cooperative applications contact person daniel postal address inria alpes avenue de europe montbonnot saint martin france mail daniel inrialpes fr phone fax category full technical implemented service development distributed cooperative applications internet 
service provides abstraction distributed shared object space 
objects managed applications transparently shared client nodes application developer program centralized setting 
consists set system classes proxy generator implemented java environment 
service applications dynamically deployed client nodes run time java mobile code 
system support relies object replication client nodes 
logically related objects grouped clusters cluster unit sharing replication coherence 
main advantages proposal object clustering policy tightly coupled application code ensuring locality keeping clustering transparent application programmer 
service prototyped validated simple distributed applications 
javanaise distributed shared objects internet cooperative applications project inria av 
de europe montbonnot saint martin france implemented service development distributed cooperative applications internet 
service provides abstraction distributed shared object space 
objects managed applications transparently shared client nodes application developer program centralized setting 
consists set system classes proxy generator implemented java environment 
service applications dynamically deployed client nodes run time java mobile code 
system support relies object replication client nodes 
logically related objects grouped clusters cluster unit sharing replication coherence 
main advantages proposal object clustering policy tightly coupled application code ensuring locality keeping clustering transparent application programmer 
service prototyped validated simple distributed applications 
support cooperative distributed applications important direction computer systems research involving developments operating systems programming languages 
os model emerged support cooperative distributed applications distributed shared universe organized set objects 
distributed object oriented systems emerald black clouds dasgupta guide belong class systems 
growth internet daily cooperation support logically leads consider deployment distributed cooperative applications internet 
today distributing applications internet closely linked web essentially urls java 
attempt provide distributed shared objects internet java rmi wollrath provides remote method invocation java objects 
remote objects may exchanged mechanism called object serialization allows distributed programs exchange copies objects sun rpc 
rmi facilities distributed applications client server architecture allow objects cached accessed locally 
possible manage object replicas object serialization facility coherence replicas explicitly managed application programmer 
believe object caching key features required cooperative applications especially internet latency bandwidth highly variable 
order assist programmer propose new system service called javanaise implements abstraction distributed shared java object space 
objects brought demand requesting nodes inria institut national de recherche en informatique automatique universit joseph fourier grenoble cached invalidated coherence protocol 
system support programmer develop application executed centralized configuration 
application configured distributed setting modification application source code 
configuration performed annotating interfaces objects distributed specifying synchronization consistency protocols apply objects 
prototype service implemented top java consists generate indirection objects proxies support dynamic binding system classes implement consistency protocols synchronization functions 
main advantages javanaise service dynamic deployment 
applications dynamically deployed client nodes node hosts application don require applications statically installed prior execution 
transparency 
distributed cooperative application developed run centralized 
distribution synchronization programmed separately application code 
caching 
system support allows shared java objects cached cooperating nodes enabling local invocation distributed objects reducing latency 
clustering 
grouping objects clusters key techniques achieving performance factorizing system costs 
propose base clustering data structures defined application 
claim applications manage object groups internal structure clustering mapped application grouping 
rest structured follows 
section provide overview java environment introduces java features rest 
section general motivations javanaise environment 
section presents design choices system support 
section describes implementation principles prototype top java described section 
discussion related section conclude section 
java environment section recall aspects java environment arnold sun relevant experiment 
java object oriented programming language generate programs executed portable runtime environment runs machine type 
java popular known describe features experiment 
code mobility key feature java code mobility 
java allows classes dynamically loaded remote nodes 
mobility code requires code portability security enforcement order confine error propagation 
code portability provided interpretation byte code 
javac compiler generate machine code code common independent type hardware interpreted runtime language execution 
security mainly enforced safety java language 
java language allow direct access address space program 
objects manipulated pointers language level forged 
program obtain java return object creation parameter object invocation 
java code mobility widely web 
web browsers includes java virtual machine html page include java programs called applets 
html page downloaded browser java program executed java machine embedded web browser 
polymorphism dynamic binding important aspect java polymorphism 
polymorphism refers ability define interfaces types classes separately 
interface definition signatures methods class independent implementation 
interface implemented classes possible declare variable type interface objects different classes implement interface 
java implements dynamic binding crucial mobile code 
dynamic binding means ability determine run time code executed method invocation 
java allows classes dynamically loaded variable interface type assigned points object class loaded dynamically 
java binding code variable invocation time allowing dynamically loaded classes executed 
object serialization java provides release object serialization feature allows instances exchanged different runtimes 
feature provides means translating graph objects stream bytes sent message network written file disk 
receiver message reader file deserialize byte stream rebuild graph objects 
java graph changed structure graph preserved 
instance class implements serializable interface serialized 
inherited methods define respectively default behavior serializing object 
default objects referenced serialized object serialized implement serializable interface 
order control serialization process possible override methods specifying fields object transferred reassigned object rebuilt 
possible instance serialization recursion 
garbage collection java runtime environment includes garbage collector implements persistence reachability 
object preserved java runtime long reachable execution thread virtual machine 
object reachable anymore resources mainly memory allocated object collected runtime may reused objects 
garbage collection transparent user programs deal object 
java keeps track java point object object garbage collected object reassigned 
access system level resources java provides access resources managed operating system level files network connections 
particular java allows program open read write files store result serialization file managing persistent java objects disk 
classes binding remote machine port provided socket interface protocol order query web server 
remote method invocation java provides service called rmi allows objects invoked remote java virtual machine 
class may defined remote class means instances class may invoked remotely 
rmi provides stub compiler generates stubs skeletons remote classes definitions 
name server called registry allows remote object exported site 
client java program machine fetch remotely invoke method object 
subsequently remote may returned client parameter invocation 
important characteristic rmi interface remote class restricted include java parameters remote object serializable objects 
passing remote object ensures object invoked machine object passed 
passing serializable object allows rmi provide copy object object passed value 
motivation main motivation javanaise provide adequate support developing executing cooperative applications internet 
cooperative applications aim assisting cooperation set users involved common task 
example cooperative application structured editor allows documents shared concurrently remote users 
implemented distributed editor project 
applications characterized large amount shared data structures browsed edited cooperating users connected remote workstations 
data structures brought accessing nodes displayed modified caching strategy 
defining unit sharing consistency key issue efficiency 
important motivation javanaise facilitate installation administration software 
intranet application installation managed system administrators responsible installing applications properly ensuring act trojan horses intranet 
requiring cooperative application officially installed administrators constraining addition difficult issue administrators decide application trusted 
alternative allow cooperative applications freely downloaded java virtual machine just applets benefiting dynamic deployment applications guarantee application corrupt local host java type safety 
want allow programmers develop application run centralized 
programmer debug test application single machine simple configuration step run distributed system support 
motivations described efficiency easy administration easy development constitute guideline leads design javanaise 
basic design choices section presents design choices javanaise system support 
translation implementation principles section follows 
managing clusters main problem solve efficiently manage distributed replicas java objects keeping distribution transparent application programmer managing object replicas requires mechanisms faulting objects invalidating updating objects order ensure consistency 
mechanisms hidden application programmer manipulate java object local 
previous experiments management distributed fine grained objects shown efficiency closely linked object clustering 
cluster objects group objects supposed coarser grain single object 
system mechanisms generally applied coarse grained resources ios applied clusters factorizing costs mechanisms objects cluster 
clustering works objects colocated cluster effectively closely related 
mechanisms want factorize naming binding consistency mechanisms 
order able dynamically bind remote object need associate unique name object allowing object located brought requesting node 
order implement object binding need manage indirection objects allow object faults triggered bound 
order modification java virtual machine manage objects consistency need exchange messages cooperating nodes invalidate update copies consistency model 
managing clusters objects means amortizing costs indirection objects messages group objects inter dependent 
inter dependence means object group accessed objects included group near 
application dependent clustering previous experiments object clustering guide system relied system support allows object stored cluster 
system exports applications cluster management interface allowing objects stored migrated cluster 
programmer point view managing clustering complex time leads default policy inefficient doesn flexibility clustering interface 
javanaise propose implement call application dependent clustering 
approach inspired observation cooperative applications tend manage logical graphs objects data structures 
example cooperative structured editor manages chapters composed sections composed subsections paragraphs 
claim graphs managed clusters system correspond closely related objects application semantics 
javanaise cluster application defined graph java objects 
cluster identified java object called cluster object graph defines cluster composed java objects accessible cluster object transitive closure 
boundaries graph defined leaves graph cluster objects 
cluster object called inter cluster 
java objects cluster called local objects 
cluster cluster inter cluster 
management clusters cluster object instance class defined programmer defined application configured run distributed cluster class 
interfaces cluster objects exported cluster objects means interface cluster object may include methods parameters cluster objects 
local objects cluster accessible objects cluster 
assumption experience cooperative applications development guide project cooperative applications tend implicitly manage clusters data structures 
section consider extensions model allow entry points cluster dynamic object migration clusters reclustering 
application programming programmer develops applications java language language extension system support classes libraries 
application debugged tested locally machine 
configuring application distribution consists specifying classes cluster classes 
configurator take account data structures managed application links classes compose application 
separation configuration application code possible experiment different configurations application modification application 
claim logical groupings exist cooperative applications 
application developed centralized deals synchronization consistency problems 
second step configuration associate synchronization consistency protocol cluster 
done level interfaces cluster classes 
interfaces cluster classes annotated keywords define consistency synchronization protocols associated clusters 
moment implemented single reader multiple writers protocol 
interface cluster possible associate mode reader writer method 
method invoked cluster instance lock mode taken consistent copy cluster brought local host 
experiment different consistency synchronization protocols near 
comparison rmi step important notice rmi implicitly enforces application dependent clustering 
rmi imposes parameter interface remote class remote object remote object completely equivalent cluster object 
remote object create local non remote objects export local objects 
rmi javanaise configuring application distribution consists specifying classes remote resp 
cluster 
remote objects globally visible applications pay objects declared remote 
basic difference javanaise rmi javanaise provides cluster caching 
means cluster loaded client node time accessed locally 
furthermore javanaise enforces objects consistency objects cached different machines shown section 
implementation principles describe implementation principles manage distributed shared clusters java objects 
managing cluster binding cluster graph java objects clusters may brought dynamically requesting node java serialization mechanism 
problem manage dynamic binding objects may brought dynamically remote nodes 
unit naming caching cluster provide mechanism dynamic binding inter cluster 
cluster cluster proxy cluster object 
binding inter cluster implementation relies intermediate objects called proxies shapiro transparently inserted referenced cluster cluster contains 
proxy contains java points referenced cluster object null 
contains unique name associated cluster allowing cluster located copy brought local host 
class proxy object generated interface cluster class points 
proxy implements interface cluster object 
method invocation forwarded actual cluster object bound java proxy null 
java null function runtime system invoked order check cluster cached subsequently binding inter cluster 
copy cluster fetched required java proxy object updated 
call proxy proxy object 
proxy objects stored cluster contains cluster 
managing cluster consistency synchronization problem manage invalidates updates clusters consistency protocol 
section describe mechanism independently consistency protocol applied 
cluster invalidated node java virtual machine simply assigning null java proxy objects cluster 
java objects included invalidated cluster automatically garbage collected java runtime 
dynamically looking objects point invalidated cluster complex inefficient decided manage type proxy called proxy object inserted proxy object cluster points 
proxy object stored cluster referenced 
similarly proxy objects object forwards method invocations referenced cluster internal java null 
java null function runtime system invoked order fetch consistent copy cluster java proxy object updated 
cluster cluster proxy proxy 
consistency cluster objects cluster invalidation node simply consists assigning null java associated proxy object 
deal kinds cluster faults proxy faults 
java proxy object null copy referenced cluster fetched 
copy cluster includes proxy object pointing cluster object 
proxy faults 
java proxy object null copy referenced cluster fetched 
copy cluster include copy proxy object 
cases consistency protocol may require cluster invalidated nodes proxy object node 
point able invalidate update clusters consistency management 
mechanisms described manage strong consistency cluster ensuring copy cluster accessible node 
cases synchronization scheme associated consistency protocol 
example case entry consistency protocol bershad allows applications lock objects guarantees objects coherence lock taken 
synchronization scheme implemented proxy object 
prototype allow access mode reader writer associated method cluster interface means lock cluster taken entering method 
locking strategy managed proxy object knows lock held current node 
invalidation node case lock request proxy object may block locks released object 
managing parameter passing interface cluster object methods may parameters cluster objects 
passed execution time system ensure enters cluster point proxy object 
ensured proxy objects onward parameters proxy objects backward parameters 
cluster cluster cluster meth 
parameter passing local object cluster performs invocation meth cluster 
invoked method returns java stored cluster cluster 
order able store cluster cluster system create proxy points cluster 
proxy object created proxy cluster associated cluster 
onward parameter managed similarly proxy object cluster 
managing proxy objects entering parameters cluster need guarantee cluster cluster point proxy object 
especially important comparing variables contain cluster cluster 
manage cluster table registers proxy objects exist cluster 
enters cluster associated proxy object exists cluster proxy object additional proxy object created 
avoid having proxy objects associated external cluster 
clustering issues section consider variants clustering model plan investigate clusters entry points reclustering 
variants preserve model sense don require clustering policy application code 
clustering policy remains data structures interfaces managed application 
consider management entry points clusters 
imposed restriction interaction cluster take form method invocation cluster object unique entry point cluster 
implies parameters interface cluster cluster objects 
allow cluster interfaces include local object parameters 
require ability dynamically install proxy proxy objects managing entry points clusters 
difficult extend prototype order implement variant model 
plan experiment order evaluate interest 
second variant provide support reclustering 
reclustering means ability move local object cluster 
propose allow local object migrated passed parameter inter cluster invocation 
interface cluster may include move statement associated parameter meaning local object moved destination cluster similarly call move feature emerald jul 
local object source cluster transformed proxy object proxy object associated local object destination cluster changed migrated local object 
variants constitute interesting perspectives preserve spirit clustering model 
javanaise client javanaise server code clusters javanaise client java runtime java runtime java runtime home site mobile code clusters 
architecture prototype java implemented prototype system support describe section 
architecture architecture illustrated 
prototype assume code javanaise code application persistent clusters stored node called home site application 
code javanaise code application dynamically deployed client nodes application invoked 
application available home site web server identified located url 
application launched applet viewer code application javanaise downloaded client nodes just applet 
clusters fetched demand requesting nodes shared consistency protocol 
javanaise system support consists proxy generator generates proxy proxy classes interface cluster 
proxy classes provide mechanisms binding consistency management 
system primitives javanaise client available client nodes proxies nodes 
javanaise client maintains table clusters proxy objects local host 
system code javanaise server participates binding consistency protocols home site 
javanaise server maintains table registers locations locks held clusters 
generation proxies proxies generated interface cluster class proxy generator 
see java code skeleton proxy proxy classes generated cluster interface 
public class cluster implements cluster public void method cluster obj read public cluster method write definition describes interface cluster class cluster implements cluster interface 
methods defined onward parameter second returning parameter 
method requires read lock execution second write lock 
proxy class generated interface definition 
name class cluster program manipulate cluster instance fact object implements interface 
public class cluster implements cluster int object id proxy cluster proxy public cluster proxy new proxy cluster object id proxy id public void method cluster obj proxy null proxy proxy cluster javanaise client get proxy object id read proxy method obj public cluster method proxy null proxy proxy cluster javanaise client get proxy object id write cluster proxy method clone proxy clone proxy backward parameter return class defines instance variables object id unique identifier object proxy refers proxy points proxy object 
identifier unique context application prototype currently manages distributed shared objects applications stored single home site extended manage different home sites simply urls 
method constructor 
user program invokes creation cluster object creates proxy object turns creates proxy object creates real instance cluster see proxy class 
constructor parameters defined constructor generated accordingly proxy proxy classes implements interface 
methods check binding cluster 
bound javanaise client invoked order get copy cluster including proxy object lock corresponding mode invocation forwarded proxy object 
notice method method returns cluster instance 
returned method proxy object invoked cluster 
create clone proxy object stored cluster receiving 
clone gets created proxy object received doesn exist receiving cluster 
table registers existing proxy objects cluster stored cluster 
code skeleton omitted code related management table keep readable 
generated proxy class 
proxy class defines variable object id unique identifier object variable object points real cluster instance 
contains variable lock indicates lock held local host cluster read write 
public class proxy cluster implements cluster int object id real cluster object int lock int num readers locking mode specified order get copy cluster lock cluster single request 
public proxy cluster object new real cluster object id javanaise client register id num readers public void method cluster obj object null lock object real cluster javanaise client get object object id read lock read cluster clone proxy obj clone proxy onward parameter num readers object method effective call num readers lock read num readers javanaise client release lock object id read lock public cluster method object null lock write object real cluster javanaise client get object object id write lock write object method obj effective call javanaise client release lock object id write constructor proxy class creates real instance cluster renamed real cluster proxy generator proxy class renamed cluster 
javanaise client invoked order allocate unique object identifier proxy object passed order initialize javanaise internal tables detailed 
methods checks copy cluster requested lock 
copy lock requested javanaise client 
locking policy currently implemented allows multiple readers writer time 
lock held cluster managed proxy object cluster 
proxy object invokes javanaise client order request lock 
proxy object includes primitives upcalls skeleton may invoked javanaise client order check status lock cluster current prototype allocation forwarded javanaise server ensure identifier uniqueness 
block lock request remote node lock explicitly released 
methods proxy object manipulate lock variable synchronized 
management consistency synchronization order manage consistency synchronization tables maintained javanaise client javanaise server 
javanaise server need able locate cluster lock 
table keeps track clusters image memory see section clusters stored disk 
table associates cluster known object id locations node addresses images cluster memory 
cluster read mode table gives list nodes obtained read lock cluster 
cluster write mode table gives address node hosts unique copy 
table order locate copy read mode copy cluster 
collision lock occurs cluster locked write mode request sent writer node javanaise client responds lock released 
second table managed javanaise client 
table records clusters cached local host 
table associates cluster object id java proxy object represents cluster 
javanaise client check status cluster node wait lock released proxy object release lock primitive 
interactions javanaise clients javanaise server message passing socket interface 
message includes header object describes message type 
header may followed point cluster object graph java objects 
objects header cluster serialized order obtain flat string bytes sent socket 
order serializable object application implement serializable java interface means inherits default methods invoked serialize object 
default serialization behavior flatten object state recursively java object state 
recursion redefined serialization methods proxy objects save object id field object reset null java object 
management persistence javanaise clusters persistent means survive application created 
clusters stored disk home site application file cluster 
recall cluster identified object id integer unique identifier 
javanaise server keeps track clusters image memory client hosts 
cluster requested cluster represented memory cluster read storage file 
byte stream read file sent requesting client updated 
application terminates client node modified clusters longer cached node serialized copied back storage files home site 
deployment application applications javanaise deployed dynamically client nodes just applets 
javanaise application available applet web server client typically starts application applet viewer 
applet contains main entry point program 
initialization primitive provided initializes javanaise environment returns java name server object 
name server allows symbolic names associated cluster objects 
register method registers cluster symbolic name lookup method returns cluster associated symbolic name 
implementation passing cluster register method passing proxy object name server registers copy proxy object 
getting cluster name server getting proxy object 
described prototype javanaise runtime implemented top java 
rest relate previous experiments conclude continuation perspectives 
related attempt provide distributed shared objects internet java rmi wollrath provides remote method invocation java objects 
java program query web server url order obtain java 
stub dynamically loaded bound application allowing remote invocation referenced object 
additional object may returned similarly dynamically bound remote instances 
mechanism called object serialization allows distributed programs exchange copies objects 
rmi facilities distributed applications client server architecture allow objects cached accessed locally 
possible manage object replicas object serialization facility coherence replicas explicitly managed application programmer 
emerging paradigm structuring applications internet agent programming maf 
agent roughly process context including code data may travel sites order perform task 
generally agent invoke objects exported servers visits agents running servers 
paradigm adequate information search engines electronic commerce provide support information sharing remote machines 
mobile agents relevant javanaise javanaise applications dynamically deployed remote nodes just agents 
approach sharing java objects internet management distributed shared tuple spaces 
projects javaspaces sun jada ciancarini proposed java toolkits implement abstraction inspired linda language 
cooperation distributed applications achieved tuple spaces 
exchanging tuples tuple spaces applications exchange data synchronize 
access tuple space performed set operations allow tuples inserted extracted read tuple space 
drawback approach cooperation remote application explicitely implemented set tuple management primitives 
believe application level objects implicitely shared applications corba rmi 
objects ingham project aims defining object oriented framework developing distributed application internet 
propose extend web object orientation techniques order integration complex resources services feasible 
proposals mainly rely extensions order provide remote object invocation heterogeneous resources 
idea open integration wide range existing applications address issue caching difficult web 
described influenced ideas developed guide project project proposing team 
guide system aimed providing distributed shared object space development cooperative applications local area network 
memory management guide system structured layers storage memory composed permanent objects stored clusters distributed disks execution memory composed clusters mapped running applications 
guide cluster mapped accessing node object stored cluster 
subsequent accesses nodes cluster objects forwarded performed mapping node traditional remote invocation scheme 
object clustering managed applications interface exported runtime environment 
compared javanaise runtime guide managing distributed replicas clusters applications manage clustering policies led inefficient default clustering policies 
javanaise targets distributed applications internet relies clusters caching client nodes clustering policy implicitly derived applications structures 
javanaise related object system clouds system dasgupta 
clouds provides essentially paradigm guide distributed shared object space differs management object granularities 
clouds objects coarse grained object implemented virtual address space 
clouds objects developed cc clouds language clouds allows management finer grained objects objects clouds object dasgupta 
clouds objects compared javanaise clusters contain finer grained java objects 
javanaise seen child systems 
main contribution study application similar paradigm distributed shared object space cooperative applications internet 
paradigm integrated java world order allow dynamic deployment shared applications client hosts 
perspectives experience providing runtime environment development cooperative application internet 
environment applications developed java language available internet web server just applet 
applications dynamically deployed client nodes java mobile code java objects managed applications transparently shared application instances 
order allow efficient object caching client nodes runtime manages clusters java objects cluster unit sharing caching consistency 
clusters persistent stored disk home site application 
clusters brought demand client nodes shared specified consistency synchronization protocol 
claim object grouping clusters derived application structure specifying classes correspond clusters classes defining local objects clusters 
implemented prototype javanaise runtime composed preprocessor generates required proxy classes interfaces cluster classes system classes manage consistency cluster replicas cached client nodes 
prototype validated simple applications currently porting structured cooperative editor top runtime 
perspectives validate evaluate system support full scale cooperative applications editor mentioned 
preliminary experiment opens challenging issues 
experiment model extensions proposed section managing cluster entry points dealing reclustering issues 
second investigate combination invoking cluster replica locally invoking cluster remotely rmi mechanism 
choice mechanisms semantic cluster objects amount write sharing 
bibliography arnold arnold gosling 
java programming language addison wesley 
bershad bershad midway distributed shared memory system proc 
th ieee computer society international conference compcon pp 
february 
black black hutchinson jul levy carter distribution types emerald ieee transactions software engineering january 
ciancarini ciancarini rossi jada coordination toolkit java technical report department computer science university bologna italy 
dasgupta dasgupta chen menon pearson ramachandran ahamad leblanc khalidi design implementation clouds distributed operating system computing systems pp 
winter 
dasgupta dasgupta menon pearson language operating system support distributed programming clouds proceedings nd symposium experiences distributed multiprocessor systems march 
cooperative structured distributed document editor bull imag may 
imag fr papers rt ps gz chevalier rousset de persistent shared object support guide system evaluation related ninth conference object oriented programming systems languages applications oopsla portland october 
ingham ingham little shrivastava objects bringing object oriented technology web th international world wide web conference boston december 
jul jul levy hutchinson black fine grained mobility emerald system acm transactions computer systems february 
maf mobile agent facility specification omg tc document orbos september 
waldo wollrath bharat pickling state java system computing systems pp 
fall 
rpc protocol compiler sun microsystem 
java code mobility applications case study workshop persistence distribution java european project lisbon october 
url www esprit ec org events java wkshp html shapiro shapiro 
structure encapsulation distributed systems proxy principle proc 
th international conference distributed computing systems pp 

sun sun microsystems jdk documentation sun microsystems url www javasoft com products jdk docs index html sun sun microsystems specification sun microsystems url javasoft com javaspaces index html wollrath wollrath waldo distributed object model java system computing systems pp 
fall 
