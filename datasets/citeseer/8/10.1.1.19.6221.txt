grid self organizing access structure information systems karl aberer department communication systems swiss federal institute technology epfl lausanne switzerland karl aberer epfl ch peer peer systems driving major paradigm shift era genuinely distributed computing 
gnutella example peer peer success story simple software enables internet users fi exchange files mp music files 
shows limitations current information systems respect ability manage data efficiently 
introduce grid scalable access structure specifically designed peer peer information systems 
grids constructed maintained randomized algorithms strictly local interactions provide reliable data access unreliable peers scale gracefully storage communication cost 
keywords 
peer peer computing distributed indexing distributed databases randomized algo rithms 
peer peer systems driving major paradigm shift era genuinely distributed computing 
major industrial players believe reflects society better types computer architectures 
similar pc gave better reflection user www infoworld com 
infrastructure traditional distinction clients back middle tier application servers simply disappearing 
node system plays role client server 
node pays participation global exchange community providing access computing resources 
gnutella example success story simple software enables internet users freely exchange files mp music files 
current file sharing systems gnutella indexing mechanisms supported :10.1.1.12.6173
search requests broadcasted network node receiving search request scans local database file system possible answers 
approach extremely costly terms communication leads high search costs response times 
supporting efficient search appropriate access structures prerequisite 
access structures distributed information systems addressed area distributed parallel databases 
different approaches data access distributed environments taken 
mention principal approaches 
distribution copy search tree multiple distributed nodes technique investigated 
authors shown certain assumptions approach balanced search trees exist 
replication complete search structure approach underlies rp trees proposed 
mechanisms proposed leads eventually replication search structures 
scalable replication search tree precisely tree proposed db tree scalable replication node stores single leaf node search tree root node search tree replicated node intermediate nodes replicated node maintains path root leaf 
search structures approaches operation messages broadcasted participating nodes 
rpv data range partitioned trees index exists multicast mechanism 
current file sharing systems gnutella network search requests reachable peers 
approaches assume reliable execution environment require centralized services designed fairly small numbers nodes hundreds focus deterministic execution guarantees 
take different approach investigate question access structure built community consisting large number unreliable peers central authority provide certain level reliability search scales number peers storage communication cost 
order obtain scalability approach scalable replication tree structures proposed 
build search structures randomized algorithms exclusively local interactions peers 
idea randomly meeting peers successively partition search space retain information order able contact peers efficiently answering search requests 
resulting distributed access structure call grid peer grid 
investigation intended clarify approach principally feasible simplifying assumption data distribution skewed 
binary search trees totally order domain keys sufficient 
similarly analysis simulation grids uniformity assumptions behavior peers 
definitely step skewed data distributions extended methods balancing search trees known tree structures required basic methods proposed extremely beneficial improve efficiency current file sharing applications 
main characteristics grids completely decentralized exists central infrastructure peers serve entry point network interactions strictly local 
randomized algorithms constructing access structure updating data performing search probabilistic estimates success search requests search robust failures nodes 
scale gracefully total number nodes total number data items network equally nodes respect storage communication cost 
section introduce system model structure grids 
section describe distributed randomized algorithm construct grids 
section give analysis basic properties grids 
section contains extensive simulation results demonstrate feasibility grid algorithms exhibit important scalability properties grids 
system model access structure assume community peers addressed unique address addr addr 
address addr define peer iff addr peers online probability online 
peers online reached reliably underlying communication infrastructure means address 
peer stores information items set di characterized index term set set index terms totally ordered search tree constructed usual way 
assume index terms binary strings built key pl pn pi corresponds value val ip interval val val hi define access structure 
goal construct access structure search space subsequently partitioned intervals form peer takes interval 
key corresponds path binary search tree say peer responsible path responsibility interval means peer provide addresses peers information item key value belongs val 
prefix kl length length peer maintains peers prefix length different value position key responsible 
call peers level 
route search requests keys prefix kl continuation match key agents 
search started peer 
giving formal definition access structure show simple example illustrate idea 
different levels relate different levels binary search tree 
intervals relate nodes search tree 
indicate key values correspond intervals level level 
lowest level entered peers indicated black circles leaf nodes corresponding keys responsible 
see multiple peers responsible key 
call replicas 
entered agents intervals path root leaf node 
leaf nodes show pointers specific data items key key related leaf node prefix 
see level zero peer associated interval words stores root node search tree 
level peer associated exactly intervals 
level peer associated exactly interval 
connectors level peer maintains cover side search tree 
example level peer peer level peer peer 
search request issued routed responsible peers 
level peer responsible process request request needs forwarded peer 
illustration included processing queries 
example query submitted peer 
peer process complete query 
second example query submitted peer 
level contacts peer turn contacts level peer responsible key corresponding query 
define formally data structure peers allows represent grid 
peer maintains sequence pl 
pn pi ri addr 
define path pl pn prefix pl pi refs ri 
addition number ri limited value 
sets queries key intervals level key intervals level key intervals level data items example grid refs prefix peer prefix path pl pn defined mod 
addition peer maintains set addr peers store data items indexed keywords path prefix 
words lem level peer knows peers data items corresponding search keys responsible 
gives rise straightforward depth search algorithm access structure query false sub path path common prefix length length result length path length sub path length length refs refs length random select refs online peer query peer length return comment sub path pl pn pl pk common prefix pl pk pk pn pl pk qk ql pl pk random select refs returns random element refs removes refs grid query issued peer call query 
grid construction having introduced access structure search algorithm main question constructed 
exists global control done exclusively local interactions 
idea peers meet opportunity create refinement access structure 
care point peers meet 
may meet randomly involved operations systematically want build access structure 
assuming mechanisms meet frequently procedure works follows 
initially peers responsible search space search keys 
stage peers meet initially decide split search space parts take responsibility half 
store peer order cover part search space 
happens peers meet responsible interval level 
soon grid develops cases occur 
peers meet 
keys share common prefix 
keys prefix relationship 
case peers initiate new exchanges forwarding peers referencing 
case peer shorter key specialize extending key 
order obtain balanced grid specialize opposite way peer done level 
peer remains unchanged 
considerations give rise algorithm peers execute meet 
exchange common prefix path path lc length lc exchange level paths agree union refs lc refs lc refs lc random select refs lc random select length sub path path lc length path length sub path path lc length path case remaining paths empty introduce new level case length path append path path append path refs lc refs lc case remaining path empty split shorter path case length path append path value lc path refs lc refs lc random select union refs lc case analogous case case length path append path value lc path refs lc refs lc random select union refs lc case recursively perform exchange referenced peers case refs lc refs refs lc rl online peer exchange peer refs online peer exchange peer comment random select refs returns set append pl pn pl pn value pn pk mod random elements refs remarks place 
measure prevent peers bound maximal length paths constructed 
simulations show results uniform distribution path lengths peers better convergence grid 
bound needed certain degree replication lowest grid level achieved 
disadvantage global knowledge maximal path length locally available easily derivable 
practical applications possible indication path reached number data items belonging key falling certain threshold 
alternative avoid approach case case path subpath peer shorter path chooses specialize differently peer 
shorten longer path difference length greater resulting paths length 
require additional means maintain consistency peers give responsibility keys generalizing possibly specialize stage differently slows convergence 
possibility 
recursire executions exchange function locally available important influence performance method 
executions promising successful specialization targetted specific set candidates 
hand recursire executions lead quick grid subparts 
bound recursion depth exchange function called value cz 
value strong influence global performance algorithm see 
far considered construction process access structure 
leaf level peers need know data items respectively peers storing data items correspond responsibility 
peers responsible key general problem find peers case update 
different strategies possible randomly performing depth searches peers responsible key multiple times propagating update performing breadth searches peers responsible key propagating update creating list buddies peer peers share key propagate update buddies 
give detailed algorithms quite obvious 
section identify simulations efficient method 
analysis search performance want analyze question probable find peer responsible specific search key starting search arbitrary peer 
analysis allows give rough estimates sizing grid parameters required achieve desired search reliability setting 
perform analysis idealized situation peers parameters grid number peers responsible key uniformly distributed 
distribution occur practice gives estimation quantitative nature grid 
parameters determine problem 
number peers number data objects peer store determine total number data objects stored network 
size amount space peer willing available indexing purposes determines possible number stored peer determine number entries required certain grid organisation 
length key required differentiate data items located different peers log global leaf number data items peer stores leaf level 
total number index entries stored peer multiplicity build grid structure 
obtain constraint determines value 
order allow lowest level grid support alternative peers data items need replicated factor 
possible sufficiently high numbers peers available interval lowest grid level supported peers 
constant probability peer online interested question probability performing successful search peer responsible query key 
worst case level grid new peer needs contacted selected available 
level grid probability reaching peer level minus probability referenced peers offline 
search tree depth probability performing successful search key give example illustrate grid cost terms space practical setting 
example 
consider setting file sharing currently gnutella 
rough estimates actual parameters observed application 
assume data objects files exist costs bytes storage path plus ip address peer willing provide bytes storage indexing fact far size average media file 
furthermore assume peers online probability 
analyze large community supporting files order ensure search requests files answered probability 
peer store 
guess value see inequality satisfied value 
value probability finding peer key larger 
storage required due initial guess exactly 
number peers required support grid inequality larger 
reasonable number compared size actual gnutella user community 
simulation performing simulations implemented algorithm constructing grids mathematical computing package mathematica www wolfram com 
simulations intend obtain results questions 
communications terms executing exchange algorithm required building grid influence recursion factor exchange algorithm efficiency grid construction resulting structure reasonably balanced respect distribution path lengths number replicas path reliable data grid analyze convergence speed grid constructed 
simulation varied number peers 
peers meet randomly pairwise execute exchange function 
path length bounded 
criterion grid built assumed average length keys peers responsible reaches certain threshhold acp length path counted till average path length reached 
simulation performed recursion depth 
value set peer ist stored 
influences performance case results indicate linear relationship exists number peers total number communications needed building grid 
consequence peer perform average constant number exchanges reach maximal path length independent total number peers involved 
simulation shows choice maximal path length influences number exchanges required 
simulation done peers 
results indicate number communication grows exponentially path length basis recursion 
recursion bound convergence speeds substantially 
qth table shows recursion depth substantial influence convergence speed 
recursive calls exchange function probability random meeting leads successful exchange grid increases 
recursion constrained lead negative effects peers tend quickly 
result shows peers maximal path length optimal recursion depth limit 
max peers maintain peers level exist possibilities recursive calls 
influence number exchanges performed constructing grid 
note additional effort rewarded higher density grid 
analyzed simulation peers recursion depth limit maximal path length 
re see number exchanges grows exponentially undesirable 
fact turned weakness algorithm proposed 
exists simple way fix 
limits number referenced peers exchanges recursion low number 
results stable simulation modified algorithm shows recursive calls randomly selected referenced peers 
re simulations configuration similar resulting analysis section 
confirms algorithms scale realistic parameter settings 
peers build grid binary keys maximal length 
maximal number level limited 
online probability peers 
building grid size simulation environment starting consume considerable resources 
approximately hours running time pentium iii processor grid built average depth 
time exchanges peers place peer 
grid constructed way analyses 
question interest balanced grid respect distribution keys peers responsible keys 
call peers replicas 
simple intuitive argument shows exchange function inherently tends balance distribution keys 
look top level decision key peer starts 
peer decide meets time peer taken decision needs decide top level decide opposite value 
exists imbalance values dominates leads immediately compensation effect values occuring frequency chosen 
way algorithm self stabilizing 
shows distribution number peers responsible key 
axis indicates replication factor axis number peers replication factor 
average number replicas peer 
replica distribution experimentally confirm analysis probability finding peer responsible key 
simulation searched times random key length 
remember peers online 
cases search successful search required average messages peers 
counting messages successful calls query operation peer 
shows searches performed reliably 
turn question reliably updates performed 
problem update contrast search find replicas path just 
analyze efficiently large fraction replicas 
compare approaches 

repeated depth searches 
repeated depth searches including buddies identified index con struction 
repeated breadth searches repeatedly searched random key length computed fraction replicas identified actual number existing replicas 
shows result 
axis shows number messages insertion process axis percentage successfully identified replicas 
giving detailed simulation setup see clearly strategy breadth searches far superior methods perform comparably 
see simulations achieving high update reliability fairly large number messages required order hundreds replica updated 
approach acceptable breadth search search buddies depth search ooo finding case updates rare compared queries 
relevant problem achieve high reliability keeping replicas consistent high reliability obtaining correct query results 
follow different approach 
update sufficiently high number replicas fewer messages repeated query operations till query result multiply confirmed 
obviously half replicas correct repeating queries arbitrarily high reliability achieved 
proceeding manner increase slightly query cost turn reduce drastically update cost 
factor helpful context 
replicas 
implies replicas updates queries 
simulations illustrate tradeoff update query cost indicate combinations update query strategies exist 
updates performed updated data item searched times queries performed configuration 
update performed breadth search level followed 
breadth search repeated update repetition times 
fraction successfully answered queries update 
cost terms number messages 
repetitive search repetition query cost insertion cost repetitive search main result approach repeated searches achieve query reliability pays dramatically 
configuration repetition repeated search achieves reliability require ratio queries update order reach break point configuration repetition repeated search offers practically reliability 
discussion introduced grid step developing scalable robust self organizing access structure peer peer information systems 
order better understand effectiveness grid compare centralized replicated servers 
assume number data items number peers 
storage consider number need stored nodes ignoring cost local indexing 
querying consider number messages exchanged nodes assuming node creates constant number queries time unit 
solution centralized possibly replicated servers compares grid follows 
grid central server storage peers log server client constant query peers logn server client constant see storage communication cost scale grid 
server solution particular linear growth communication cost terms number clients considered servers tend bottlenecks 
shows considerations motivating grids decentralization robustness scalability benefits 
emphasis distributed randomized algorithms allow peers cooperatively partition search space efficient way 
approach limited uniform data distributions 
uniformly distributed key values grid immediately applied 
prefix search text algorithm adapted extending alphabet 
allow support trie search structures 
worthwhile investigation extend method adapting sophisticated text search structures 
obvious continuation research develop grids adapt skewed data distributions 
extent construction process actual data distribution needs taken account structures continuously adapt updates 
see principal difficulties implementing approach 
natural extension approach take known parameters known reliability peers knowledge network topology knowledge query distribution account grid construction updates 
achieve load balancing computational economy imposed investigated distributed data 
see grid representative access structures peerto peer information systems expect see variations adapted specific requirements various peer peer application domains 
manfred hauswirth carefully reading commenting manuscript 
rachid guerraoui helpful discussions 
greatly benefited inspiring working environment provided newly founded communication systems department 
adar huberman free riding gnutella technical report xerox parc aug :10.1.1.12.6173
clark 
face face peer peer networking 
ieee computer january 
chen aberer layered index structures document database systems proceedings acm cikm international conference information knowledge management bethesda maryland usa november acm press 
chen aberer combining pat trees signature files query evaluation document databases dexa florence italy 
ferguson nikolaou yemini economy managing replicated data autonomous decentralized systems proc 
int 
syrup 
autonomous decentralized sys 
kawasaki japan 
johnson krishna lazy updates distributed search structure sigmod conference widmayer distributing search tree growing number processors 
acm sigmod conference widmayer balanced distributed search trees exist wads litwin neimat schneider rp family order preserving scalable distributed data structures 
vldb stonebraker aoki litwin pfeifer sah jef carl staelin ew yu mariposa wide area distributed database system vldb journal 
tt breitbart weikum snowball scalable storage networks workstations balanced load distributed parallel databases vol kluwer academic publishers miyazaki fat btree update conscious parallel directory structure icde 
