protocol stack protocol heap role architecture robert braden usc information sciences institute admiralty way marina del rey ca braden isi edu ted faber usc information sciences institute admiralty way marina del rey ca faber isi edu mark handley international computer science institute center st suite berkeley ca icir org questioning layering adequate foundation networking architectures investigates non layered approaches design implementation network protocols 
goals greater exibility control fewer feature interaction problems 
proposes speci non layered paradigm called role architecture 
categories subject descriptors computer communication networks network protocols protocol architecture keywords non layered architecture role modularity metadata signaling processing rules 
traditional packet network architecture assumes communication functions organized nested levels abstraction called protocol layers metadata controls packet delivery organized protocol headers protocol layer 
protocol layering served organizing principle worked better strict model original internet architecture today 
see constant pressure layer violations assumption violations unexpected feature interactions emerge 
part due rapid proliferation middle boxes nat boxes proxies explicit implicit caches multi way interactions qos multicast overlay routing tunneling guilty 
complex interactions result dicult describe strict layering implicit rst assumption layering new service poorly existing layer structure 
result inability reason feature interaction network 
reluctance change working implementations longstanding inter layer interfaces lead designers insert new functionality existing layers mod hotnets princeton nj usa october 
research sponsored part darpa contract research 
ify existing layers 
addition hard evolve network protocols especially network level 
partly performance reasons partly layering tends lead relatively coarse granularity protocol functionality 
limits layering clear simple examples 
currently way tcp syn packet port signal want redirected application layer web cache 
network congestion signaled router network layer rate control occurs ow level transport layer signaling ow network dicult 
cases layering important part problem 
considerations suggest layering may suciently exible abstraction network software modularity 
exibility considered desirable forces compliance existing standards practice results short sighted solutions may violate assumptions protocols 
protocol layering inadequate abstraction need alternative organizational principle protocol functionality 
task allow exible relationships communication abstractions aim providing greater clarity generality extensibility traditional approach allows 
proposes non stack approach network architecture call role architecture rba 
role architecture protocol layers rba organizes communication functional units called roles 
roles generally organized hierarchically may richly interconnected traditional protocol layers 
inputs outputs role application data payloads controlling metadata addressed speci roles 
non layered approach layer violations replaced explicit architected role interactions 
course role violations possible generality mechanism typically unnecessary suitable access controls metadata dicult 
example label switching inserted layer ipsec layer transport layer security layer 
example ipv options rarely 
intent roles building blocks de ned known 
enable interoperability real network rba need relatively tens hundreds known roles de ned standardized 
number special purpose experimental locally de ned roles greater 
important attribute role architecture provide explicit signaling functionality 
lack architected signaling main reasons middleboxes current layered architecture 
example de ned way signal system packet really traverse rewall protecting site signal system want request redirected web cache 
rba designed perform signaling robust extensible manner 
role architecture allows components comprising network explicitly identi ed addressed communicated 
rba allow allow re modularization current large protocols ip tcp somewhat smaller units addressed speci tasks 
examples tasks packet forwarding fragmentation ow rate control byte stream packetization request web page suppress caching 
comprise separable functionality performed speci role role architecture 
purpose examine general properties role architecture describe detail particular instance rba 
intended suggest fruitful research direction holds promise improving clarity generality network protocol design 
moving non layered architecture requires distinct shift thinking section examines implications removing layering constraints 
section outlines role architecture look principle gives simple examples rba 
section describes range approaches applying rba ideas real world networking discusses implementation issues 
non layered architecture implications concept non layered protocol architecture immediate implications 
layering provides modularity structure ordering processing metadata encapsulation 
modularity opportunity information hiding independence indispensable tool system design 
alternative proposal provide modularity adequately address aspects layering metadata structure layering structure metadata carried packet header longer logically forms stack forms logical heap protocol headers 
packet header replaced container hold variable sized blocks metadata blocks may inserted accessed modi ed removed order modular protocol units 
processing rules non layered architecture requires new rules control processing order control access metadata replace rules implicit layering 
consider ordering rst 
simplest case roles note role architecture remove need standardization 
completely independent non layered architecture speci es processing order protocol modules may operate order simultaneously various subsets metadata 
commonly appropriate partial ordering required speci roles 
rules specify access metadata controlled 
controlling association program meta data architecture explicitly control interactions di erent protocol modules enhancing security extensibility 
encapsulation layered architecture layer encapsulated layer 
non layered architectures di erent organizational principle needed data metadata packet 
encapsulation disappear role reduced 
encapsulation longer main enforcer processing order 
reserved cases functionality container adaptor encapsulation reliable byte stream ow packets 
cases metadata data encapsulated need encapsulated layered architecture 
prior papers di erent ways generalize protocol design processing ease limitations strictly layered stacks complex protocols monolithic implementations 
early emphasized modular construction protocol processing stacks exibility extensibility 
papers discussed decomposition complex protocols micro protocols reusability customization ease programming improve protocol processing performance parallelism 
micro protocols roughly correspond roles abstractions actors protocol processing modules see example 
papers suggest generalizations strict layering primary emphasis protocol implementations protocols 
focuses protocols distributed algorithms bits wire means completely give layering 
aimed new architectural issues raised middleboxes 
rba general proposal achieving modularity non layered protocol paradigm non layered protocol headers processing modules 
order realize rba necessary specify ways de ne structure roles design machinery instantiating executing roles 
prior research highly relevant may provide important answers 
believe complementary earlier generalized protocol processing 

idealized rba light discussion propose role architecture rba particular non layered architecture modular protocol unit called role 
role functional description communication building block list papers particularly relevant rba 
role speci header processing node performs speci function relevant forwarding processing packets 
roles entities possible reason somewhat formally 
roles instantiated nodes code called actors 
purposes distinction role actors matter simply speak roles having particular properties 
role may logically span multiple nodes may distributed sense actor executes particular node 
metadata packet called role data divided chunks called role speci headers rshs 
illustrated shows node containing roles read write speci rshs packet header 
roles principal form addressing role architecture rshs addressed roles 
rsh speci es actor instantiate role optional 
typically role name modular functionality mechanism 
network functionality distributed actors forming closely coupled system role name distributed mechanism name components mechanism 
deployment experience determine exact functional breakdown roles 
system necessarily know packet sends encounter node cares particular role 
example may web cache redirector role particular path including signaling rsh addressed role ensure cache receives metadata 
node path add rsh passing packet 
example suppose rewall lightweight way signing packet examined conform site security policy include signature rsh attached data packet addressed host rewall role 
rba objectives rba designed achieve objectives 
extensibility rba inherently extensible mechanically conceptually 
mechanically rba uses type length value mechanism encode role data 
conceptually exible modularity rba enhance extensibility networked systems 
portability role abstraction designed independent particular choice nodes role performed 
portability roles enables exible network engineering functions grouped boxes appropriate 
role portability may won generally imply role mobility role migrate nodes 
explicit architectural basis middle boxes rba intended allow endpoints communicate explicitly middle boxes middle boxes communicate 
controlled access metadata rba includes general scheme controlling access metadata allowing control nodes read modify speci subsets metadata application data 
access control implies control services requested control operations performed packet 
endpoint may wish audit received data packets ascertain subjected requested processing example validator encrypted rewall 
generally feasible current layered architecture relevant metadata processed removed data reaches receiver 
rba role data indicate requested service provided 
general properties roles role de ned inputs outputs form rshs syntax semantics tightly speci ed 
may speci ed apis software components local node 
role identi ed unique name called 
re ects functionality provided 
full may multicomponent structure le name hierarchy re ect derivation speci role generic section 
ecient transport matching corresponding short form xed length integer normally 
addresses meta data provider type functionality indicate node perform functionality 
rshs packets addressed speci actor instantiates role rba requires node interfaces unique addresses called nodeids correspond network addresses traditional layered architecture 
symbolically denote role address form nodeid nodeid left unspeci ed 
perform tasks role actors may contain internal role state 
establishing modifying deleting role state generally requires signaling done exchange rshs 
roles operate pair nodes enforce condition intervening data path simple examples pairs fragment reassemble compress expand encrypt decrypt 
call re ective roles 
possible consider re ective role pair distinct sub roles single distributed role 
special role categories may emerge role model developed 
sort categories speak address role meaning address actors 
useful bounding exibility rba provides reason interaction roles 
families related roles di er detail perform generic function 
generic function may abstractly represented generic role 
speci roles may derived generic role stages speci cation see section 
example corresponding generic role speci roles reliable ordered byte streams reliable datagrams 
role data idealized rba model data packet including payload role data divided rshs 
set rshs particular header may vary widely depending services requested client vary dynamically packet transits network 
relationship roles rshs generally particular rsh may addressed multiple roles single role may receive send multiple rshs 
just roles modularize communication algorithms state nodes rshs modularize metadata carried packets 
rshs divide metadata role boundaries rsh forms natural unit ordering access control metadata encrypted authenticated unit 
granularity rshs signi cant design parameter role data shared roles smaller granularity complete rshs 
nest granularity header eld distinct rsh avoid replication data elements required multiple roles 
overhead packet space processing requirements increases number rshs packet ne granularity rshs generally feasible 
modularity issues optimal division rshs engineering trade role modify activity depending particular set rshs packet 
furthermore presence particular rsh may constitute request service subsequent nodes 
rshs provide form signaling may piggy back packet 
format rsh role speci xed eld format conventional protocol header type length value format example 
rsh contains list role addresses rsh directed body containing role data items 
denote symbolically rsh example rsh expand decrypt 
represents rsh addressed role named expand node role named decrypt node 
rba provides model packet header processing mechanism routing packets 
rba incorporates forwarding mechanism generic forward role may depend global local state node 
mechanism create state distributed spf routing calculation simply application viewpoint rba 
forwarding rules determine actual route taken packet rba sequence scheduling rules come play determine sequence operations 
technical issues de nition rba requires speci solutions number technical problems 
role matching rules speci ed matching role addresses rshs actors account access control rules 
actor may access rsh rsh explicitly addressed actor actor listening particular rshs subject access control rules 
actor may read write add modify delete rsh see arrows 
actor execution scheduling matching actors selected node determine order executed 
scheduling problem consider ordering requirements imposed roles requirements called sequencing rules 
example rules prevent undesirable sequences encrypt compress compression useful encryption expand compress wrong order compress encrypt expand decrypt re ective pairs improperly nested 
rules consider dynamic precedence information carried packets static precedence associated actors nodes 
rsh access control controlling access rshs rba allows nodes including systems control network services applied speci packets 
rba provides levels access control de absolute 
de access control provided bits rsh speci roles read write permission rsh 
write access provide ability modify delete rsh packet 
de access control sucient long nodes follow rba rules 
nodes absolutely control access rshs encrypting rshs course greater certainty greater cost 
role de nition fully de ne speci role necessary de ne internal state algorithms rshs sent received 
addition roles interfaces de ned 
remains seen rba amenable formal protocol speci cation techniques 
possible direction exploit analogy object oriented programming derivation speci roles generic roles 
roles correspond classes actors instantiations classes rba communication modeled actors communicating message passing 
role composition roles ra communicate directly rshs may originate terminate roles may passing composable larger role rc binds ra node allows inter role communication replaced internal communication shared data 
conversely complex role may decomposed component roles replacing shared data explicit role data communication rshs 
rba examples simple datagram delivery simple rba example rba equivalent simple ip datagram packet containing rshs rsh rsh rsh rsh payload role presents link layer protocol rsh addressed hop node 
role generic destination application role delivers payload role data application level protocol speci ed 
role represents hop forwarding function invoked node path destination address role data 
speci rule derived generic forward role fundamental action router middle boxes 
uses role data determine outgoing interfaces hops 
indicates node id return response hop hop forwarding 
network address translators regardless architectural merit network address translators nats rba example layered architecture 
nat essentially packet relay separates di erent addressing realms 
complication added application level protocols unaware nat existence need communicate addresses ports 
essentially types nat 
pure nats perform dynamic mapping small pool external addresses larger number internal addresses 
perform mapping single external address internal addresses overloading tcp udp port elds 
pure nats simple accommodate rba 
nat simply inserts rsh addressed role called giving original address software downstream nodes listen nat receiver role see translation occurred act accordingly 
rba equivalent little complex 
behave exactly pure nat insertion nat receiver rsh needs way demultiplex incoming packets correct internal address 
way general purpose echo role 
outgoing packets inserts rsh addressed echo role giving token unique internal address 
rba systems aware echo role 
rba node generates response packet containing rsh addressed echo role echo token including rsh response packet addressed echo sender role 
token mechanism form useful building block new mechanisms 
nat example raises interesting issue regard role naming 
traditional manner named rshs roles called rshs token token echo 
rba philosophy role played recipient named rsh 
distinction important subtle signi cantly ects extensions may deployed 

realization rba role architecture approach described earlier sections may applied network protocol design variety ways 
research required determine directions fruitful 
extreme build architecture entirely role protocol functions link layer application layer functions replaced roles sets roles 
yield completely layer free architecture 
possible directions extreme ways rba approach 
apply rba particular layer stack retaining layering point 
partial stack implementations rba trade generality exibility eciency reality 
example may consider link layer protocols immutable designed industry groups match particular technological constraints 
practical rba subset retain link layer distinct layer rba 
furthermore retaining ip layer highly optimized common packet transport service signi cantly help solve eciency issues rba rba processing needed systems middleboxes 
strong argument retain transport layer apply rba application layer architecture note help immensely problem 
possible direction rba provide network control signaling mechanism essentially current general modularity 
viewpoint network functionality divided major protocol entities assume particular roles 
viewpoint emphasizes role rshs generally created protocol entities addressed received roles assumed entities 
idealized rba may useful simply abstraction reasoning protocols functions interactions 
critical design decision instantiating role architecture designing packet format 
clear tradeo making rsh header format quite powerful general versus wasting bytes role addressing relative size information carried rsh 
earliest sketch rba imagined small number de ned roles eld small bits address rsh 
realized rba powerful address rshs generally addressing information grew include nodeids larger 
direct effect probably cost ective split simple low level functionality separate roles 
advantage higher levels powerful mechanism expressing complex interactions 
furthermore forwarding performance important realworld issue 
large network internet nodeid zero flags stack chain byte offset access bits element rsh index vector ip hdr index vector heap area payload packet layout length bytes flags rsh body possible rba packet layout strong reasons keep basic packet forwarding machinery simple ecient possible 
practical rba retain ip layer internet high speed forwarding machinery ecient packet header 
rba applied internet layer replace transport application layers 
result rba implemented systems middle boxes performance requirements severe core network 
assumptions incorporated rba declaring generic forwarding role re ective pair fragment reassemble built 
simpli cations interfere major rationale rba providing consistent architectural basis middle boxes rba approach realistic proposition real networks 
packet structure suggests possible packet format practical rba 
gure shows encapsulating ip header assuming rba going applied ip layer assumption necessary 
network layer brought rba ip header replaced actual hbh rsh placed xed location packet allow ecient hardware forwarding network core 
role address lists see section rshs packet gathered index vector entries 
allow ecient processing packets rba 
entry includes pointer byte set corresponding rsh body heap area 
globally unique bit short name role rsh speci ed index element addressed 
suggested earlier generated hash long name 
shown bit ipv address node index element addressed nodeid zero indicate wildcard packet traverses network rshs may added deleted header 
engineering strategies help keep reasonably simple ecient 
speci ed maximum size rsh space index vector heap area generally source guess space reserve ip header payload rshs 
boundary index vector heap exible segments grow 
series deletions additions rshs force garbage collection heap movement payload expand heap size intermediate node 
relatively complex expensive seldom necessary 
case node unable add new rsh packet send rsh ow rba control message back sender node requesting larger rsh space succeeding packets 

document proposed role architecture simplify design deployment communication protocols today world complex interactions networking elements follow strict layering model 
rba provides uniform way structure protocols protocol processing con nes strict layering 
generality rba come cost course 
layered network model powerful tool conceptualizing designing protocols 
need satisfy roles provide tool better layers developing protocols 
furthermore rba requires general data structuring packet headers cost implementation packet size execution performance 
show costs 

acknowledgments grateful members project encouragement developing rba concepts 
especially dave clark john wroclawski karen sollins noel aaron falk 

bhatti schlichting 
system constructing con gurable high level protocols 
proc 
acm sigcomm 
haas 
protocol structure high speed communication broadband isdn 
ieee network january 
hutchinson peterson 
kernel architecture implementing network protocols 
ieee trans software eng 
iso 
information processing systems open systems interconnection basic model 
iso 
kohler kaashoek montgomery 
readable tcp protocol language 
proc sigcomm 
kohler morris chen jannotti kaashoek 
click modular router 
acm trans computer sys 
meyer 
arpa network protocol notes 
rfc network working group april 
malley peterson 
dynamic network architecture 
acm trans 
comp 
sys may 
tschudin 
flexible protocol stacks proc 
acm sigcomm 
stiller 
model flexible high performance communication subsystems ieee jsac may 
