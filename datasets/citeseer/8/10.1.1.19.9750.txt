signs revolution computer science software engineering franco zambonelli van dyke parunak dip 
di scienze dell ingegneria univ di reggio franco zambonelli green ct suite ann arbor mi usa van parunak org 
characteristics distinguish today complex software systems traditional ones 
examples different areas show characteristics focus agent oriented software engineering research influence application domains 
characteristics impact software systems modeled engineered 
edge revolutionary shift paradigm pioneered multi agent systems community change attitudes software systems modeling engineering 
computer science software engineering going change dramatically 
scientists engineers spending great deal effort attempting adapt improve established models methodologies software development 
complexity introduced software systems emerging computing scenarios goes capabilities traditional computer science software engineering abstractions object oriented component methodologies 
scenario initiating software crisis rapidly emerging computing systems connected active 
computer systems embedded object physical environments clothes furniture bodies 
wireless technologies network connectivity pervasive computing device connected network traditional internet ad hoc local networks 
computing systems active perform activity behalf improve comfort home control automate manufacturing processes 
scenario simply affect design development software systems quantitatively terms number components effort required 
qualitative change characteristics software systems methodologies adopted develop 
particular main characteristics addition quantitative increase interconnected computing systems distinguish software systems traditional ones situatedness software components execute context environment influence influenced openness software systems subject decentralized management dynamically change structure locality control components software systems represents autonomous proactive loci control locality interactions despite living fully connected world software components interact accordingly local geographical logical patterns 
characteristics commonly characterize multi agent systems mas jen 
section discusses characteristics detail shows different extents different terminology various research communities manufacturing control systems bus mobile pervasive computing wei sensor networks est groupware enterprise infrastructures tol inter net computing recognize importance adapting models technologies 
contribution synthesize single conceptual framework novel concepts abstractions emerging different areas recognition basic lack interaction common terminology 
synthesis may suggest new applications broadly applicable mas concepts 
synthesis section argues integration concepts abstractions software modeling design incremental evolution current models methodologies revolution radical change paradigm kuh pioneered mas community 
revolution impact research communities dramatically change conceive model build software components software systems 
generation software systems longer modeled designed mechanical architectural systems physical intentional systems 
try identify impact change paradigm computer science software engineering practices 
new 
characteristics identified situatedness openness local control local interactions affect today software systems 
situatedness today computing systems situated explicit notion environment components exist execute environmental characteristics affect execution components explicitly interact environment 
software systems immersed sort environment 
instance execution process multi threaded machine intrinsically affected dynamics multiprocessing system 
traditional modeling engineering tries mask presence environment 
cases specific objects components wrap environment model terms normal component environment exist primary abstraction 
unfortunately environment components live interact exist may impact execution modeling entities software components may need interact complex structure behavior enable trivial wrapping 
system goal monitor sense control affect physical logical computational environment masking environment natural 
providing explicit consciousness may primary application goal 
environment dynamics independent software system intrinsic dynamics 
wrapping environment introduce unpredictable nondeterminism behavior parts applications 
reasons computer science software engineering tend define system execution environment primary abstraction explicitly defining boundaries separating software system environment reciprocal influences systems 
approach avoids odd wrapping activities needed model component external world internal application entity allows software system deal naturally activities real world environment devoted monitor control 
addition explicit modeling environment activities possible identify confine clearly sources dynamics unpredictability non weg concentrate software components deterministic entities deal dynamic possibly unpredictable environment 
examples 
control systems physical domains manufacturing traffic control home care health care built explicitly account unpredictable envi dynamics specific event handling similar policies 
similar problems arise sensor robot networks components spread unknown environment explore monitor 
mobile pervasive computing recognizes importance context awareness applications need model environmental characteristics related sensed physical environment locations specific components pri environmental data provided embedded infrastructure explicitly implicitly terms internal object attributes 
applications intended immersed intrinsically dynamic internet environment typically engineered defining boundaries system terms application including new application components developed middleware environmental substrate components embedded 
clearly identifying defining boundaries key point web application engineering 
systems workflow management computer supported collaborative built shared data space abstractions common execution environment workflow processes agents tol 
promising proposals distributed problem solving optimization works ant colonies exploit dynamic virtual environment influencing activities distributed problem solver processes 
openness living environment perceiving affected intrinsically imply openness 
software system longer isolated subsystem boundaries permit reciprocal side effects 
reciprocal influence system environment extreme complex making difficult identify boundaries clearly system environment 
cases achieve objectives software systems interact external software components provide services data acquire 
generally different software systems independently designed modeled live environment explicitly interact 
open interactions call common ontologies communication protocols suitable broker infrastructures enable interoperability 
small part problem 
simply enabling interoperability software systems may come life die environment independently software system components explicitly move different environments life 
characteristics introduce additional problems 
component different software systems interact components move different environment may hard impossible identify clearly system component belongs 
words difficult understand clearly boundaries software systems 
component comes life environment moved specific environment aware environment components interaction interact newly entering systems safely systems 
enabling components enter leave environment fully free way interact may hard understand control behavior software systems single software system 
due problems computer science software engineering starting consider problem modeling environment systems execute understanding modeling dynamic changes system structure 
need preserve coherency system despite openness may require identifying enacting specific policies intended support re organization software system response changes structure enact contextual laws activ ity components entering system 
general aim increase ability control system execution despite dynamic structural changes 
examples 
control systems critical environments traffic control systems public telephony services health care systems manufacturing systems sensor monitoring run continuously stopped removed environment embedded 
systems need updated environment change frequently addition new physical components consequently new software components software systems 
systems managing openness system ability re organize automatically establishing new effective interactions new components changing structure interaction graph dramatic importance ability component enter new execution contexts safety effectively 
mobility users software devices moves concept openness extreme making components move context execution changing structure software system executing context whi 
requires ability components learn new context ability organize control component interactions context 
concepts exacerbated mobile ad hoc networking interactions fruitful controllable despite lack intrinsic structure dynamics connectivity bro similar considerations apply internet open distributed computing 
software services survive dynamics uncertainty internet able serve client component able enact security resource control policy local context administrative domain 
marketplaces typical examples class open internet applications 
systems stands internet applications ad hoc networking stands mobile computing system components allowed fruitfully properly interact pre determined interaction structure surviving dynamics services data availability 
local control flow control concept key aspects computer science software engineering levels hardware level highlevel design applications 
software systems components live interact open world concept flow control meaningless 
independent software systems autonomous flows control mutual interactions imply join flows 
modeling designing open software concept software system vague discussed subsection concept global execution control disappear 
trend exacerbated fact independent systems flow control different components system may autonomous control 
fact components today software systems active entities active objects internal threads control processes daemons passive ones normal objects functions 
having multiple threads control system novel concurrent parallel programming established paradigms 
main motives multiple threads traditional concurrent parallel programming efficiency performance 
approaches try limit independence multiple threads possible strict synchronization coordination mechanisms preserve determinism high level control applications 
today autonomy application components different motives handled differently 
open world autonomy execution enables component move systems environments having report back wait ack original application 
components systems immersed highly dynamic environment evolution monitored controlled autonomous component effectively delegated take care portion environment independently global flow control 
software systems software components integrate computer systems nature autonomous systems modeled accordingly 
size software system increases performance conceptual simplicity require delegating control components 
coordinating global flow control large number components may unfeasible 
autonomy additional dimension modularity par 
concept autonomy refers software components designed autonomous perceived autonomous 
examples 
modern software systems integrate autonomous components 
weak autonomy ability component react handle events graphical interfaces embedded sensors 
strong autonomy implies component integrates autonomous thread execution execute proactively 
modern control systems control simply reactive proactive realized set cooperative autonomous processes embedded complete computer systems interacting distributed sensor nets 
integration complex distributed applications systems software running mobile devices type tackled modeling terms autonomous software components 
internet distributed applications typically autonomous processes possibly executing different nodes cooperating choice driven conceptual simplicity decentralized management actual need autonomous concurrent activities 
local interactions directly deriving issues concept local interactions global world today software systems 
delineated scenario software systems components immersed specific environment execute context specific sub system delegated perform task autonomy 
taken aspects naturally lead strict enforcement locality interactions 
fact autonomous components interact environment immersed sensing affecting 
environment physical amount physical world single component sense affect locally bounded physical laws 
environment logical minimization conceptual management complexity favor modeling local terms limiting effect single component environment 
components normally interact context software system belong locally system 
open component system interact components systems 
cases minimization conceptual complexity suggests modeling component terms component temporarily moved context interacts locally new context 
open world components need form context awareness execute interact effectively 
component aware context effectively efficiently context necessarily locally confined 
locality interactions strong requirement number components system increases dimension distribution scale increases 
case tracking controlling concurrent autonomous autonomously initiated interactions difficult object component applications interactions strictly local 
examples 
control manufacturing systems tend naturally enforce local interactions 
control component delegated control portion environment interactions components usually limited control neighboring portions environment typically strictly coordinated 
mobile computing including applications wearable systems sensor networks nature wireless connections forces locality interactions 
wireless communication limited range mobile computing component directly interact time limited portion world 
applications distributed internet take account specific characteristics local administrative domain components execute interact components usually allocated internet nodes enforce possible locality interactions whi 
general model sum software systems increasingly follow scheme 
software systems dashed ellipses autonomous components black circles interacting locally possibly components systems 
components may belong systems different times 
systems components immersed environment typically modeled set environment partitions 
components system sense affect local portion environment 
portions environment components may access may overlap components may interact indirectly environment 
scenario different component object programming matches prevailing model agent computing jen 
agents situated software entities live environment execute autonomously local control actions interact agents 
local interactions promoted may explicitly mentioned part model 
despite fact scientists working agent computing focus ai aspects discipline noticing simply deliberately ignoring agents agent computing potential general model today computing systems different research communities face similar problems starting adopting similar modeling techniques 
similarly outside ai community computer scientists fail recognize doing systems assimilated modeled agent systems 
issues discussed help clarify relationships need interaction different research communities due strong similarities tempted say isomorphism addressed problems 
changing attitudes traditionally software systems modeled mechanical stance engineered design stance 
computer scientists burdened fig 

scenario modern software systems nated urge define suitable formal theories computation prove properties software systems provide formal framework engineering 
software engineers analyzing functionality system exhibit topdown way designing software architectures reliable multi component machines capable providing required functionality efficiently predictably 
scientists engineers design software systems execute world innumerable autonomous embedded mobile software components executing locally interacting environment 
scenario may require models methodologies 
computer science change 
modeling handling systems components feasible components autonomous subject single flow control 
activities components autonomous hard conceptually computationally infeasible track describe precisely behavior system terms behavior components 
addition software systems distributed subject decentralized control possibly embedded unreachable environment tracking components controlling behavior simply impossible 
systems described modeled terms macro level observable characteristics just chemist describes gas terms macro properties pressure temperature 
problem exacerbated fact components interact 
accordingly behavior system emerge sum behavior components result interactions 
may argue interactions tend local subsection represent big problem quite easy control effect interactions 
unfortunately effect local interactions propagate globally difficult predict pris 
knows initial status system accurately nonlinearities amplify small deviations arbitrarily great 
additional problem software systems execute open dynamic scenario new components added removed time components autonomously move part system 
difficult predict control precisely global dynamic behavior system behavior influenced openness 
fact shown effects interactions autonomous active components strongly depends structure interaction graph wat strictly local interactions produce dynamic behavior completely different emerging soon form non locality interactions introduced changing structure interaction graph 
problems emerge open systems possibility components join leave system time dynamically changes interaction graph possibly dynamic behavior 
situatedness causes similar problem 
modern thermodynamic social sciences show environmental forces produce strange large scale dynamic behaviors situated physical biological social systems pris 
expect similar effects situated software systems dynamics environment 
problems force computer scientists change attitudes dramatically modeling complex software systems 
concurrency interactivity challenge dream dealing traditionally formalizable systems weg impractical 
traditional formalisms deal effectively small portions large systems 
challenge find alternative models radically adopt new scientific background study software systems enabling study predict control properties system dynamic behavior despite inability control individual components 
signals 
signals trend appearing research community 
study monitoring activities web networks show unpredictable large scale behaviors requiring new models tools description 
instance traditional web caching policies longer effective peculiar dynamic web access patterns emerge traditional reliability models fall short due specific emergent characteristics web networks 
approaches model describe software systems terms thermodynamic systems proposed 
ideas research twofold provide synthetic indicators capable measuring closely system approaching desired behavior provide tools measure influence environmental dynamics system 
extent similar approach adopted area massively parallel computing need measure specific global systems properties dynamically requires synthetic indicators 
similarly recognized modeling large dynamic overlay networks faced introducing macro properties direct representation network 
area clearly shows trend modern artificial intelligence 
concept rational intelligence emerged complex machine capable manipulating facts logic theories abandoned 
abstractions promoted agent computing matching characteristics today software systems subsection shifted emphasis concept intentional intelligence capability component system behave autonomously achieve goal 
organizational social science starting influence research recognized behavior large scale software system assimilated appropriately human organization aimed reaching global organizational goal society global behavior derives self interested intentional behavior individual members logical mechanical system 
similarly inspiration computer scientists comes increasingly complex mechanisms biological ecosystems biological sciences 
expect theories models complex dynamical systems modern thermodynamics biology social science organizational science sine qua non cultural background computer scientist 
software engineering change 
change modeling understanding complex software systems impact systems designed maintained tested 
today software systems designed exhibit specific predictable deterministic behavior level single units system 
presence autonomous components situated open dynamic environment obtaining predictable behavior multi component system mechanical deterministic terms feasible 
challenge effective construction large software systems overcoming impossibility controlling behavior single components interactions build guarantee system behave reasonably close ideal desired behavior despite lack exact knowledge micro behavior 
instance adopting physical attitude software design possible approach build system despite uncertainty initial conditions able reach stable basin attraction 
adopting teleological attitude build ecosystem society components able behave intentional way robust direct global activities achievement required goal 
design system explicitly take account fact system immersed open dynamic environment behavior system designed isolation 
environment dynamics software components enter leave systems come primary components design abstractions 
defensive design treats factors sources uncertainty damaging global behavior system system prepared face 
offensive design considers openness environmental dynamics additional design dimensions exploited possibility improving behavior system 
signals 
exemplars adopt novel engineering perspective 
area distributed operating systems management policies management distributed resources designed terms autonomous components able guarantee global goal local actions local interactions despite dynamics environment cyb 
design policies cases inspired physical phenomena diffusion re establish global equilibrium dynamic situations despite fact equilibrium perfect locally perturbed 
systems ant colonies designed bottom solve complex problems resist traditional approaches simple autonomous components interacting dynamic environment par 
idea mimic software behavior insect colonies living dynamic world able solve group sacrifice large number worker insects translates computational sacrifice paid problems interesting computational counterpart sorting routing 
case environmental dynamics plays primary role design emergence specific useful behaviors 
social phenomena epidemics inspired distributed information dynamic networks components mobile ad hoc networks despite inability exactly controlling information paths structure network 
dynamics network source uncertainty useful property guarantee message propagates network reasonable time 
information dissemination systems similarly exploit dynamic properties spontaneously generated community network 
dimension intrinsic dynamics network impossible detect structure network components challenging concepts information routing information retrieval 
different areas pervasive mobile computing internet computing sto middleware sensor networks general understanding dynamics networks require novel approaches information retrieval routing focused content paths 
words basic idea path information sources destinations dynamically relying overlay networks dynamically automatically reshaping response system dynamics 
data queries follow shape overlay network just ball rolls surface 
final destination paths emerge proceed direction eventually reach point nodes network routed message mutually appropriate 
despite intrinsic uncertainty biological evolution useful tool software engineers 
instance cellular automata perform complex computations impossible understand rules imposed cells interaction produce system required properties 
approach successfully experienced cellular automata rules evolve genetic algorithms eventually come specific rules leading desired global behavior automata having directly designed behaviors sip 
addition change way software designed new scenario dramatically impact way software tested maintained evaluated 
software systems conceived mechanically testing mainly amounts analyzing system state transitions see correspond designed components exhibit bad state transitions bugs 
hard large non concurrent systems may impossible autonomy environmental dynamics produce practically uncountable number states 
testing criterion large software system longer absence errors ability behave needed independently exact behavior components initial conditions huh 
existing dynamic environment systems executing stopped software simply tested evaluated terms capability achieve required goal 
test evaluate effect environment software system effects software system environment 
better robust system reliably advance goals independently dynamics environment lower impact surrounding environment software systems 
notable example approaches content routing tend evaluate proposals terms system tolerate network dynamics exhibiting reasonably behaviors fast overlay network re organize response dynamic changes addition removal components impact network behavior 
software maintenance change 
autonomy openness mean software system stable extent needs maintenance continually due changed conditions 
large software system longer behaves needed external conditions require changes update longer imply stopping system rebuilding retesting 
imply intervening externally adding new components different attitudes removing existing components change needed behavior system 
openness situatedness system autonomy components maintenance updating smoother expensive system designed tolerate support dynamic changes structure 
discussion humans increasingly rely software systems everyday activities control critical situations 
possible criticism approach applications engineered way envisioned 
insist software system exhibit predictable fully controllable behavior parts duty software engineer produce reliable systems 
mas researchers pioneering new perspective 
aware emergent behavior appear open systems autonomous components consider behavior undesirable 
instance foresee death approaches unreliability impossibility proper modeling 
opinion correct approach 
constraining behavior highly interactive system may sacrifice computational power may require waste resources obtain functionalities 
engineering needed system fully controllable may greater needed produce emergent behavior useful reliable stable 
constraining design software system may simply lose properties needed support openness tolerate environmental dynamics 
case aware vision software engineering practical theoretical methodological experimental required paving way suitable set conceptual tools frameworks exploited engineers generation software systems 
modern software systems different application areas exhibit characteristics different software systems scientists engineers accustomed 
characteristics impact dramatically way software systems modeled engineered leading true tion computer science software engineering kuh 
fact required change traditional design attitude implying mechanical perspective intentional attitude requiring physical biological teleological perspectives 
despite opposing forces difficulties inherent revolutionary phase including need restructuring cultural background revolution open door new interesting research engineering challenges hopefully multi agent research community hold leading position 
abe abelson allen hanson knight rauch sussman weiss amorphous computing communications acm may 
abowd mynatt charting past research ubiquitous computing acm transactions computer human interaction march 
adjie winoto schwartz lilley design implementation intentional naming systems th acm symposium operating systems principles sosp acm 
albert jeong barabasi diameter world wide web nature sept 
albert jeong barabasi error attack tolerance complex networks nature july 
bro broch maltz johnson hu jetcheva performance comparison multi hop wireless ad hoc network routing protocols rd acm ieee conference mobile computing networking october 
bus bussmann self organizing manufacturing control industrial application agent technology th ieee international conference multiagent systems boston ma july pp 

leonardi zambonelli engineering mobile agent applications context dependent coordination ieee transactions software engineering appear 
cap capra web life new understanding living systems doubleday oct 
carzaniga rosenblum wolf design evaluation wide area event notification service acm transactions computer systems aug 
leonardi zambonelli diffusive load balancing policies dynamic applications ieee concurrency 
crovella bestavros self similarity world wide web traffic evidence causes acm sigmetrics pp 

cyb cybenko dynamic load balancing distributed memory multiprocessors journal parallel distributed computing feb 
est estrin connecting physical world pervasive networks ieee pervasive computing january 
gustavsson coordination control computational ecosystems vision coordination internet agents omicini eds springer verlag pp 

howard mataric cover self deployment algorithm mobile sensor networks international conference robotics automation appear 
huberman hogg emergence computational ecologies lectures complex systems addison wesley 
huh huhns interaction oriented programming st international workshop agent oriented software engineering lncs jan 
estrin directed diffusion scalable robust communication paradigm sensor networks th acm ieee conference mobile computing networking boston ma aug pp 

jen jennings agent approach building complex software system communications acm 
kuh kuhn structure scientific revolutions university chicago press rd edition nov 
leonardi zambonelli physically grounded approach coordinate movements team st international workshop mobile teamwork icdcs ieee cs press july 
vahdat epidemic routing partially connected ad hoc networks duke technical report 
cs july 
moses artificial social systems computers artificial intelligence 
noriega sierra rodriguez project 
reflections agent mediated institutions trustworthy commerce st workshop agent mediated electronic commerce 
par parunak go ant engineering principles natural agent systems annals operations research 
parunak entropy self organization agent systems th international conference autonomous agents acm press may 
parunak sauter erim approach fine grained agents nasa jpl workshop radical agent concepts md jan 
picco murphy 
roman software engineering mobility roadmap software engineering finkelstein ed acm press pp 

pri priyantha miu balakrishnan teller cricket compass context aware mobile applications th acm ieee conference mobile computing networking rome july 
pris prigogine certainty time chaos new laws nature free press 
iamnitchi foster mapping gnutella network ieee internet computing jan feb 
rowstron druschel pastry scalable decentralized object location routing large scale peer peer systems th ifip acm conference distributed systems platforms middleware heidelberg germany nov 
sip sipper 
emergence cellular computing ieee computer july 
sto stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications acm sigcomm conference san diego ca aug 
tol tolksdorf coordinating web workspaces th ieee workshops enabling technologies infrastructures collaborative enterprises gaithersburg ma ieee cs press june 
tennenhouse proactive computing communications acm may 
wat watts small worlds dynamics networks order randomness princeton university press princeton nj 
weg wegner 
interaction powerful algorithms communications acm 
wei weiser hot topics ubiquitous computing ieee computer october 
whi white mobile agents software agents bradshaw ed aaai press menlo park ca pp 

zambonelli jennings wooldridge organizational rules abstractions analysis design multi agent systems international journal knowledge software engineering april 

vahdat epidemic routing partially connected ad hoc networks duke technical report 
cs july 

