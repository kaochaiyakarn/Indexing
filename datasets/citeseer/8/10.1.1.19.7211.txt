adenine metadata programming language dennis quan mit edu david huynh ai mit edu vineet sinha vineet ai mit edu david karger karger theory lcs mit edu mit artificial intelligence laboratory technology square cambridge ma usa 
haystack huynh personal information repository uses shared metadata store system agents helping user manage information 
agents shared metadata store storing user information state interface endpoint information contact 
metadata haystack environment expressed resource description framework rdf rdf 
essence rdf format describing semantic networks directed graphs labeled edges 
nodes edges named uniform resource identifiers uris making globally unique useful distributed environment 
node uris represent objects web pages people agents documents 
directed edge connecting nodes expresses relationship uri edge 
system haystack sizeable amount code devoted creation manipulation rdf encoded metadata 
observed early development language facilitated types operations frequently perform rdf greatly increase productivity 
result created adenine 
example snippet adenine code 
prefixes simplifying input uris prefix urn test namespace rdf type rdfs class method rdf type rdfs comment rdf type rdfs subclassof rdf type perform query parameter query specification second list variables return order data query rdf type rdfs subclassof list assert base class types data refers refers add rdf type 
sample adenine code 

syntactic support rdf motivation creating language twofold 
key feature making language syntax support data model 
introducing rdf data model standard object oriented language fairly straightforward object oriented languages designed specifically extensible fashion 
normally creates class library support required objects 
advanced manipulation paradigms specific object model tax syntax language 
languages python operator overloading allows programmers reuse built operators manipulating objects restricted existing syntax language easily construct new syntactic structures 
java operator overloading supported resulting verbose apis created object oriented system 
arguably verbosity said improve readability code 
hand lack syntactic support specific object model hindrance rapid development 
programs times long necessary verbose syntactic structures 
reason popularity domain specific programming languages matlab macromedia director adenine language 
includes native support rdf data types easy interact rdf containers graphs rdf services 

portable representation key feature adenine ability compiled rdf 
benefits capability classified portability extensibility 
bytecode virtual machine execution models result java popularity 
key benefit portability enabling interpretation software written platforms vastly different computing environments 
essence bytecode set instructions written portable predetermined byte encoded ontology 
adenine takes bytecode concept step making ontology explicit extensible replacing byte codes rdf 
dealing syntactic issue introducing byte codes new instructions semantics adenine takes advantage rdf ability extend object code graph new instructions 
example system uses metadata extensible languages microsoft common language runtime clr 
language developer defined attributes placed methods classes fields declare metadata ranging thread safety serializability 
compare java support serializability required creation new keyword called transient 
keyword approach requires knowledge extensions compiler attributes approach delegates knowledge runtime language truly extensible 
adenine rdf assertions applied instruction 

comparison lisp features adenine similar lisp support open ended data models blur distinction data code 
significant differences 
superficial difference adenine syntax semantics especially wellsuited manipulating rdf data 
adenine statically scoped dynamic variables address current rdf containers existing statements queried new statements written 
adenine runtime model better adapted run rdf container 
modern languages adenine supports types program state memory programming languages rdf container 
adenine effect supports kinds closures memory closure lisp persistent rdf container 
affords developer explicit control persistence model possible agents written adenine distributed 

syntax syntax adenine resembles combination python lisp data types resemble notation 
python tabs denote lexical block structure 
adenine imperative language contains standard constructs functions loops arrays objects 
function calls resemble lisp syntax enclosed parentheses commas separate parameters 
arrays indexed square brackets python java 
adenine interpreter written java adenine code call methods access fields java objects dot operator done java python 
execution model quite similar java python memory environment store variables particular execution state represented rdf 
values adenine represented java objects underlying system 
adenine methods functions named uri compiled rdf 
execute functions adenine interpreter passed uri method run parameters pass 
interpreter constructs initial memory environment binding standard names built functions executes code instruction time 
methods simply resources type adenine method specify metadata methods 
example rdfs comment declared method additional type assertions entered directly rdf container receives compiled adenine code 
top level adenine file data method declarations contain executable code 
adenine essence alternate syntax rdf xml 
method declarations code compiled rdf methods syntactic sugar equivalent adenine rdf bytecode 

applications quarter haystack source base written adenine 
significant portion source user interface code screen layouts completely described rdf 
adenine generate screen layouts dynamically event handlers responding user input writing agents process information information haystack described rdf 
development adenine ongoing adenine platform testing new ideas writing rdf manipulating agents 
huynh karger quan 

haystack platform creating organizing visualizing information rdf 
semantic web workshop eleventh world wide web conference www 
honolulu hi 
haystack lcs mit edu papers pdf 
resource description framework rdf model syntax specification 

www org tr syntax 
supported mit ntt collaboration mit oxygen project packard foundation fellowship ibm 
