compositional logic proving security properties protocols nancy john mitchell pavlovic computer science dept kestrel institute stanford university palo alto ca stanford ca cs stanford edu kestrel edu september logic proving security properties protocols nonces randomly generated numbers uniquely identify protocol session public key cryptography 
logic designed process calculus actions possible protocol step consists axioms protocol actions inference rules yield assertions protocols composed multiple steps 
assertions written steps protocol logic sound stronger sense provable assertion action sequence actions holds run protocol contains actions arbitrary additional actions malicious attacker 
approach lets prove security properties protocols attack reasoning sequence actions taken honest parties protocol 
main security specific parts proof system rules reasoning set messages reveal secret data invariant rule called honesty rule 
considerable research formal analysis security protocols ranging ban logic related approaches finite state analy partially supported kestrel institute onr muri semantic consistency information exchange onr games security systems autonomous agents :10.1.1.50.4190:10.1.1.115.3569
sis proof methods higher order logic 
approaches current enumeration reasoning set protocol traces trace obtained combining protocol actions actions malicious intruder 
automated trace tools find protocol errors weeks human effort remains significantly time consuming prove protocols correct logics reason traces 
difficult give specific numbers efforts depend complexity protocol experience involved formal proofs require months effort assistance powerful automated tools 
developed formal logic capable relatively reasoning protocol traces 
logic able prove properties common authentication secrecy protocols derivations lines proof 
reason succinctness proof rules logic state general properties protocol traces reused different protocols 
logic includes modal operators naming sequences actions process calculus 
logic provides method attaching assertions protocol actions manner resembling dynamic logic sequential imperative programs applying floyd hoare style annotations composition assertions associated action provide basis protocol correctness proof :10.1.1.116.2392
underlying logic different previous belief logics ban descendants explicit reasoning protocol intruder paulson inductive method :10.1.1.50.4190:10.1.1.115.3569
central idea assertions associated action hold protocol execution contains action 
gives power reason possible runs protocol explicitly reasoning steps carried attacker 
time semantics logic sets traces protocol execution possibly including attacker kind idealization previous logics 
logic uses predicates sent decrypts knows source honest 
relatively simple statements happened 
example sent holds state execution protocol principal sent message interpretation knows mechanical elementary logics knowledge 
specifically principal knows datum principal generated datum received message form encrypted key known principal 
predicates novel 
central predicate reasoning secrecy authentication secrecy source 
intuitively source identify source datum way principal come know contents message 
predicate honest primarily assume party follows prescribed steps protocol correctly 
example alice initiates transaction bob wishes conclude bob knows data sends explicitly assume bob honest 
bob honest meaning bob follow protocol equivalently bob key known attacker data alice sends bob read attacker attacker forge messages alice receives bob 
correctness assertions involve assumption principals honest 
axioms inference rules logic ways attaching assertions actions rules combining assertions actions combined role protocol 
main inference rule form rule refer honesty rule 
form invariance rule reason possible actions honest principals 
suppose protocol principal receives message form fja meaning encryption pair key principal responds assume situation protocol specifies message consisting single encrypted datum sent 
honesty rule possible prove principal honest sends message form previously received message form fja certain authentication protocols form reasoning allows prove protocol participant completes prescribed sequence actions principal named messages honest secret shared principals 
section describes process calculus section shows process calculus express steps protocol 
section describes formulas semantics logic 
proof system section 
sample proof section discussion related appearing section concluding remarks section 
example derivation section shows prove significant property lowe variant needham schroeder public key protocol :10.1.1.1.5724:10.1.1.27.6385
brief discussion section shows attempt prove property original needham schroeder protocol fails insightful way 
specifically main axioms inference rules logic tied specific action outline possible proof determined steps protocol 
reduce problem proving protocol property problem finding instances axioms rules match specific ways 
studied needham schroeder protocol model attacker capabilities proof authentication property fails precisely initiator alice correctly establish identity responder data receives 
effect protocol logic leads directly rediscovery lowe observation :10.1.1.1.5724:10.1.1.27.6385
process calculus logic support public key encryption reason source encrypted nonce principal generated sends message containing nonce 
believe approach extended fairly easily handle symmetric key encryption general patterns messages containing encrypted nonces restricted form logic simpler easier understand 
hope explore extensions system 
communicating cords cords formalism represent protocols parts 
form action calculus calculus related spi calculus :10.1.1.36.865:10.1.1.1.5724
cords formalism similar approach chemical machine formalism communication actions viewed reactions molecules 
basic idea calculus represent communication term reduction communication links created dynamically :10.1.1.1.5724
idea spi add suitable constructors encryption decryption analyze secure communication process equivalence similar ideas appear :10.1.1.1.5724
treat encryption manner similar spi calculus decryption reduced term reduction 
idea cord calculus capture security meta theory processes serve simple protocol programming language intuitive support floyd hoare style logical annotations verifications axiomatic semantics 
formalism designed support protocol composition synthesis addition reasoning protocol correctness 
explore protocol composition static interfaces associated composition operators suggest certain forms protocol composition preserve logical reasoning sequences actions 
fact cords informal language arrows messages widely security community 
instance arrows picture lowe variant needham schroeder public key protocol refer nsl look :10.1.1.1.5724:10.1.1.27.6385
strand spaces developed effort formalizing language 
messages captured term calculus decorated respectively denoting send receive actions 
roles sequences actions called strands 
viewed strand space protocol run shown 
fact agent sees actions viz sending re fja fjnjg oo fjm njg nsl arrows messages fja mjg fjm fjnjg fja fjm njg oo nsl strand space messages reflected strand formalism 
communication fact receiving message agent may learn new reflected 
example strand contains term fja mjg appears know exact form message receive including fresh nonce communication initiated 
formalism set particles fja mjg fja react terms involved exactly coincide 
strand spaces provide basis series interesting results applications roles treated families strands parameterized possible values received 
approach somewhat artificial technically insufficient form reasoning secure communication 
instance difficult identify data known strand agent protocol parameterized values unknown 
parameters come role sent term encrypted key forward attempt decrypt 
generally formal occurrence subterm strand unrelated knowledge agent strand belongs 
cord spaces result effort overcome shortcomings 
com mjg fjm fjy zjg njg oo fjnjg nsl cord space parison strands add variables term calculus 
course just parameter variable just placeholder family values variables come formal binding substitution mechanism 
action receiving value variable expressed operator binds occurrences right 
action sending term written hti term closed reducible value particles hti react eliminated substituted occurrences bound 
value propagation resulting communication modelled substitution 
cord space corresponding protocol shown 
introduce notation binding operation denoting generation new nonce generates sends term fja mjg receives variable substitutes right 
particular pattern matching operator fjy zjg represents asymmetric public key encryption instantiated fja mjg fjy zjg matching succeeds values get substituted term njg instantiated fjm njg contains variables sent 
receives term variable substitutes fjm encryption matched expected encryption encrypted components nonce name third component nonce substituted variable term value sent received pattern matched viz decrypted tested equal nonce formal definition cords requires syntactical steps 
terms actions terms built starting variables constants set basic terms contains names variables constants keys variables constants basic sets term language generated constructors include tupling public key encryption fjtjg term key language actions built terms constructors 
include sending term hti receiving variable matching term pattern creating new value 
extensions may allow actions reading time point point communication 
summary names variable name constant name basic keys variable key constant key name keys basic key inverse key terms variable term constant term name key tuple terms fjtjg term encrypted key actions null action hti send term receive term variable generate new term match term pattern define patterns follows basic terms basic terms allowed patterns basic patterns tuple pattern patterns basic pattern decryption pattern patterns act terms holes substitute terms 
write list contains variables pattern term term obtained substituting examples patterns fjp jg fjx jg fjp jg fjx jg patterns basic tuple patterns arguments containing constant patterns decryption patterns arguments containing value key 
introduce decryption patterns order characterize asymmetric decryption 
decryption key required decrypt message fjmjg notation fj jg represents asymmetric encryption encryption key different decryption key 
shall see section action matching pattern binds strand right decrypting message reveal plaintext strands defined grammar lists actions 
strands strands include operations efficiently computable 
example strand receives message encryption key decrypts decryption key associated known way compute efficiently wish give principal access key pair ka ka write notational convenience useful syntax inverse keys 
section section additional restrictions imposed strands represent roles protocol attacks protocol actions performed protocol run efficiently computable 
strand order cords strand lists actions specific order order may distinguishable 
occurs variable bound action occur free 
example consider strand hx yi receives inputs sends pair comprised inputs 
choose assume network communication preserves message order strand equivalent hx yi see equivalent imagine running parallel strand outputs numbers 
outputs received order strand strand output clearly set possible outputs second strand 
general strands considered independent values passed 
formally capture defining equivalence relation includes relation defined st ts fv bv fv bv operators fv bv giving sets free bound variables respectively inductively defined follows fv fv fv fv fv fxg fv fv fv fxg fv fv fxg bv bv bv bv fxg bv bv fxg bv bv fxg set fv free variables occurring term defined usual variable formation term added fv 
actions receive match test new bind variable scope right name clashes avoided renaming bound variables 
value propagated strand substituting scope binding operator 
way condition fv bv ensures depend equivalence relation relation containing transitive reflexive closure closed conversion renaming bound variables 
strands equivalent obtained renaming bound variables permuting actions scopes bound variables way free variable bound vice versa 
note preserves free variables strand 
calligraphic set possible strands cords equivalence classes strands modulo relation indicate specific cord enclose strand brackets serves indicate scope binding cord encompasses equivalent strands modulo 
fs sg omit relation rest 
equivalence relation allows renaming bound variables reordering non conflicting actions 
example identifies strands hci hci independent actions permuted 
contrast actions independent value received sent message 
sending pair ha bi preserves order terms sending values time 
cord spaces runs cord space multiset cords may interact communication 
multiset union empty multiset 
terminology associated chemical machine cord space soup particles cords may react 
cord space consisting set protocol roles represented cord represent state set remaining actions protocol 
instance possible run nsl protocol alice initiating conversation bob protocol roles intruder cords involved arises cord space xjg fjy zjg mathematically speaking cord spaces form free commutative monoid generated cords binary operation unit 
write ellipses inside cord indicate presence arbitrary additional actions 
reactions basic reactions cord space shown table required side conditions reaction shown 
substitution assumed 
ss 
ss fjp jg fjp jg 
ss 
ss conditions satisfied fv fv fv bound fv fv fv fv table basic reaction steps act strand left viz usual assumed free variable bound substitution achieved renaming bound variables 
reaction send receive interaction showing simultaneous sending term cord receiving variable second cord 
call external action involves interaction cords 
reactions take place single cord 
call internal actions 
reaction basic pattern match action cord matches pattern expected pattern substitutes note mentioned section pattern contain multiple holes case term contain multiple sub terms 
reaction decryption pattern match action cord matches pattern fjp jg decryption pattern fjp jg substitutes pattern contain multiple holes 
reaction shows binding action cord creates new value doesn appear substitutes value cord right 
intuitive motive condition fv clear term sent tested free variables instantiated 
addition decryption action key pattern bound 
words variables public names passed strictly private stores 
security specific feature distinguishes cord calculus closely related general purpose process action calculi xjg fjy zjg 
mjg fjy zjg yjg 
fja mjg fjy zjg yjg 
fjm yjg 
fjm njg 
fjm njg fjm 
fjnjg 
fjnjg fjnjg 
table nsl example reaction owes basic ideas notations 
runs runs protocol arise reaction sequences cord spaces 
run nsl protocol displayed figures completely formalized sequence syntactic reaction steps shown table 
steps table rule steps rule steps rule 
sense reduction steps correspond arrows figures plus explicit actions create new value final test performs omitted diagrams 
hand arrows appear correspond applications rule 
actions rules represented arrows displaying corresponding actions 
static binding cord category protocols interest consist set roles 
example public key protocol mentioned earlier initiator role responder role 
initiator starts exchange sending message responder 
local area network example principals users machines named alice bob protocol simultaneously succession principals purposes 
alice may initiate exchange bob completing messages associated exchange respond exchange initiated charlie 
concurrently charlie may initiate exchange bob respond request 
consider set messages exchanged parties actions performed attacker possible run protocol 
run may consist instances protocol roles executed concurrently useful notation role assigned specific principal 
section summarize basic idea 
mechanisms described play central role presentation informal proceeding example focussing general definitions 
main concepts needed remainder roles contain variables indicating principals variables bound static interface role variables replaced specific principals constructing run protocol 
cords nsl protocol xjg fjx fjy zjg yjg initiator responder roles nsl protocol assigned principals respectively 
replacing names variables listing instantiable variables outside square brackets cord init xjg fjx hi resp fjy jg yjg hi consider lists binding operators principal variables bound cords 
list called static interfaces cords model replacing alice bob static operation occurs dynamic execution run protocol 
cords init resp empty angle brackets hi appear cord 
generally angle brackets may contain export list compose cords 
composition written achieved substitution 
example hxi hxi hi hxi hi note performing composition exported cord substituted imported second 
composition provides substitution introduce abbreviation init ha bi init indicate cord static interface instantiated values gives init resp 
reader familiar action calculus observe cords taken particles generate action category :10.1.1.1.5724
source equivalence relation 
idea cord space displayed form cht viewed arrow arities objects category 
variables assumed mutually different form input interface operator binds occurrences right 
terms output interface may mutually different different course expressions variable renaming conversion 
morphism form composite cord morphism cd hv assumed names interfaces chosen clashes occur substituted idea dynamic binding captures value propagation communication static binding input interface compose agents design time 
static interfaces passing actual messages propagating public keys connecting various roles principal static links general independent prior execution 
cord init designed composite init xjg hx xi hi constant values passed design time morphism ha bi ha bi init 
cord morphisms represent processes processes xi cord space interfaces processes combine natural way ch ti dh vi dh vi disjoint variables disjoint variables avoid naming conflicts 
disjointness conditions may satisfied suitable renaming possible move static interfaces outside cord space carry reactions scope 
returning example nsl cords define substitution process init resp static binding plays limited role 
display interface relevant cases assume variables bound 
protocols protocol roles protocol defined finite set roles initiator responder server carried participants protocol execution 
representing protocol roles cords useful identify principal carries role writing name principal subscript square brackets 
formally distinguish roles cords calling cord identified principal subject key condition role 
variables static interface initiator responder roles written precisely init xjg fjx resp fjy zjg yjg static output interfaces omitted empty 
formally define nsl protocol set members precisely roles nsl roles composed substitution exactly way cords composed substitution performed subscript indicating acting principal variable static interface 
technical reason identifying principal carrying role specify correct private keys 
private key key form represents decryption key public key cryptosystem 
protocol role place allowed occur decryption position decryption pattern role belonging principal example cord formed role role allows principal decrypt message private key 
syntactic key restriction roles prevents role computing value private key public key 
cord applies key receives formed protocol role private key role private key acting principal 
private keys occur decryption key position decryption pattern match key restriction prevents private keys sent message 
useful protocols send private keys prevent roles sending private keys allows take secrecy private keys axiom shortening proofs protocol properties 
prove protocol interest role maintains secrecy private key 
key restriction prevent decryption key received dynamically decryption action 
example cord violate syntactic key restriction 
expect consider roles may generate key pairs send decryption keys versions protocol logic 
intruder role protocol intruder capable possible actions including receiving message decomposing parts decrypting parts key known remembering parts messages generating sending new messages 
standard dolev yao model appears developed positions taken needham schroeder model dolev yao see 
cords represent actions protocol intruder intruder may private keys available referring intruder mean suggest attack carried single principal 
run protocol intruder represented cord arbitrary collection cord calculus actions section subject restriction decryption keys defined section 
specify set decryption actions available intruder subsidiary definition set decryption keys cord 
cord set names appear private keys cord fx appears cg formally intruder role keys multiset cords contains private key function occurs decryption position decryption pattern match action 
restriction prevent intruder key corrupted prevents intruder computing private key public key 
protocol configurations runs run protocol sequence reaction steps initial configuration 
initial configuration determined set principals subset designated honest cord space constructed assigning roles honest principal intruder cord may secret keys dishonest principals 
give example intruder cord complicated example intruder cord 
assign protocol roles corrupted keys need 
reason simply key available intruder intruder simulate number protocol roles key 
example initial configuration allowing initiate conversation conversation allowing respond responder role init init resp resp xjg xjg fjy zjg fjy zjg substitution cord ha bi initial configuration written composition cords init init resp resp generally initial configuration expressed selection protocol roles intruder role substitution cord morphism connects interfaces roles 
initial configuration intruder role role may selected arbitrarily possible intruder roles 
example pc fu set principals subset honest fu set honest principals 
intruder role decryption keys define initial configuration init roles resp roles intruder define substitution hx ym initial configuration nsl protocol cord space init init init resp resp resp ym honest keys pc intruder role may encryption keys decryption keys honest 
example lowe run original needham schroeder protocol example consider lowe anomaly original needham schroeder protocol :10.1.1.1.5724
original needham schroeder protocol represented cords init ns xjg fjx fjy jg yjg differs nsl second message identity responder omitted 
initial configuration exhibit lowe anomaly shown table 
principals honest private key known intruder intruder 
possible principal choose different entities emphasize intruder unknown honest participants able masquerade corrupted principal particular mistakenly believes honest 
cord space contains initiator cord chooses talk responder cord belonging intruder cord contains actions necessary intercept messages look intended note configuration legal intruder cord contain decryption actions require private keys honest principals ic feg 
pc fa ig honest fa bg fjx jg zjg ha ei init ns init ns xjg fjx fjy zjg yjg fja zjg zjg table initial configuration needham schroeder protocol events traces particular initial configuration may give rise possible runs 
possible run needham schroeder configuration table shown table 
run actions shown cord take place 
possible run configuration message sent decrypt reactions possible 
complex configuration possible runs 
protocol logic introduce section reasons protocol runs need introduce additional notation 
event ground substitution instance action action variables replaced terms containing constants 
event represents result reaction step viewed perspective single cord participated 
example sends message event hmi send event receive event initial cord may contained send action hmi may contained send event hxi action send replacing initial cord contained receive action reaction step replacing receive actions contain variables formed action consider expression event 
trace list events principal occur run 
events bookkeeping mechanism syntax writing traces 
rjx denote events occurred principal run example run shown table write rjx trace init ns xjg fja zjg 
mjg fja zjg 
fja mjg fja zjg zjg 
fjy zjg mjg 
fja mjg fjy zjg njg 
fjm yjg 
fjm njg 
fjm njg fjm 

fjnjg 
fjnjg 
fjnjg fjnjg 
table run showing lowe anomaly needham schroeder showing actions taken run follows rja mjg fjm njg fjm njg fjm fja mjg fja mjg fjy zjg njg fjnjg fjnjg fjnjg rj fja mjg fja mjg fja zjg mjg fjnjg fjnjg note simple example list actions performed principal corresponds exactly traces run 
complex example principal acted role actions multiple roles occur run interleaved arbitrary fashion 
actions protocol run principal say matches rjx precisely rjx interleaving set initial segments traces roles carried segments roles ends exactly substitution values variables 
matches rjx substitution called matching substitution 
lemma configuration protocol run principal honest rjx interleaving traces roles executed proof follows definition initial configuration constructed assigning roles honest principal 
succinct notation talking specific events occurring run event sps ss words event means run principal executes actions receiving data variables length 
predicate true non empty vectors receive pattern match action 
example event mjg event event fja mjg fjy zjg fa mg fy zg event examples true facts run protocol properties section collect properties class protocols reason rest 
straightforward check role sends message subterms message values created role received role known role static parameters 
lemma protocol arbitrary run principal rjx consist initial segments traces role message sent part role symbol term generated received static interface proof follows definition cords represent roles 
role closed cord values bound 
symbols bound static interface receive pattern match actions 
asynchronous communication cord reactions defined require synchronous communication 
message send action happen cord message receive action occurs simultaneously cord 
real network communication asynchronous network effectively provides buffer messages stored somebody ready receive 
order model cords pad intruder cord arbitrary number hxi actions call forwarding actions 
call buffering intruder cord 
forwarding actions model message received eventually sent 
forwarding actions independent share variables actions cord occur order effectively models asynchronous nature network 
define adequate buffering intruder cord respect configuration buffering intruder cord forwarding actions guarantee send action configuration taken immediately 
configuration construct adequate buffering intruder cord counting send actions occurring configuration including forwarding actions intruder cord 
lemma asynchronous communication configuration adequate buffering intruder cord role wishes send message send 
proof buffered intruder cord provides corresponding receive action send configuration action available reaction send action 
lemma allows schedule reactions runs place protocol roles required pause receive action 
intermediate actions receives new pattern match send actions assumed occur run 
standard form traces useful way reasoning protocols kinds computational systems establishing invariance properties 
simplest form invariance property holds possible state protocol execution 
useful properties hold certain states 
example property says message form received sent depends ability protocol agent progress 
property true look certain states may fail intermediate states protocol agent process responding message 
purpose strengthening invariance rule section define set preferred states standard form traces progress preferred state 
say protocol role hung unable complete internal action 
internal action hang pattern match action 
example role fjy hung data received action njg doesn match pattern fjy say protocol configuration cord space resulting initial configuration sequence reaction steps state internal actions pending protocol role hung 
recall reaction steps divided communication steps internal actions 
internal action pending state role able execute internal reaction 
standard trace internal actions occur early possible 
starting initial configuration role takes available internal actions bringing configuration state ready perform external action 
consider traces equivalent external actions order trace equivalent standard trace 
trace contains hung protocol role equivalent trace message received hung role received intruder 
consider standard traces analysis 
keeping write protocol role may write standard order internal actions listed early possible 
example resp role may written resp fjy zjg yjg action moved way left 
secrecy restrictions simplicity model places secrecy restriction runs 
design impossible message encrypted public key honest principal decrypted anybody principal 
follows allow intruder cord contain static actions decrypt honest principal key model way intruder guess secret key reason protocols private keys appear decrypt pattern match action meaning roles send private keys message 
leads lemma lemma secrecy configuration protocol run event fjtjg honest proof role event occured run substitution configuration suppose fv 
intruder role contain action honest 
protocol role fxg restriction decryption keys formed protocol roles suppose fv 
decryption key received message 
restriction private keys appearing decryption actions means formed protocol role contain actions send private keys message possible 
direct consequence axiom sec table 
lemma holds system believe possible relax secrecy assumptions add explicit rules logic allow prove property appropriate protocols 
example restriction private keys removed possible prove certain protocol private keys sent message 
axiom sec proven hold specific protocol 
protocol logic protocol logic lets reason properties guaranteed hold principal performed certain sequence actions 
syntax formulas logic grammar may role written notation cord calculus section predicate formulas sent knows source decrypts honest modal forms terms names defined section 
indicate predicate formulas indicate generic term call message 
protocol proofs formulas form means executes actions formula true resulting state informal interpretations predicates precise semantics section formula knows means principal knows information knows limited sense having generated data received clear received encryption decryption key known 
knows fjmjg know know message 
formula sent means principal sent message implies knows message formula decrypts means principal received message role expected message able decrypt 
note decrypts true form fjmjg implies knows message fjmjg decrypted text formula honest means actions principal current run precisely interleaving initial segments traces set roles protocol 
words assumes set roles exactly actions prescribed 
principal may considered honest run key corrupted key corrupted intruder behaves key roles protocol 
source predicate reason source piece information nonce 
intuitively formula source means way principal different know learned message fjtjg possibly indirect path 
note source true term generated action sent unencrypted semantics formula may true false run protocol 
precisely main semantic relation may read formula holds run protocol 
relation may complete run roles started run completed incomplete run principals waiting additional messages complete roles 
preliminaries inductive definition definitions regarding runs intruder 
protocol set initial configurations protocol including possible intruder cord 
runs set runs protocol intruder described section sequence reaction steps cord space 
indicate subterm define satisfaction free variables induction follows sent event hmi 
knows exists know know defined induction follows know fv rj event event know know fjp jg event fjp jg event know know know know fjm jg intuitively know holds terms known directly free variable role direct result receiving generating term 
know holds terms known applying operations decomposing pattern matching composing encryption tupling terms known directly 
decrypts fjmjg knows fjmjg event fjmjg note decrypts false fjmjg source event knows decrypts fjtjg decrypts fjtjg sent honest honest initial configuration match rja matches rja substitution matching rja free variables substitutions eliminate free variables 
write runs 
note source predicate mentions single message contains nonce created principal investigated extensions support reasoning situation principal may sent message containing nonce created semantics 
proof system axioms rules protocol actions axioms inference rules protocol actions listed table 
part relatively simple translations actions atomic formulas logic 
intuitively axiom says generates principal knows axiom says principal generates new value actions role knows axiom somewhat vacuous statement needed provide base case axiom states principal generates new value actions knows knows source hmi sent ar sent ar knows ad fjmjg decrypts fjmjg am knows knows source source table axioms rules protocol actions role encrypted message possible source principal learned axioms ar ar receiving messages 
receives message knows somebody sent knows message axiom ad says principal performs pattern match action containing decryption pattern principal decrypted message 
axiom am binding static variables protocol role 
case value determined roles participant assigned 
typically identity participant possibly identity participants initiator try talk shared keys subtle inference rule says sends message containing nonce message possible source principal learn sample soundness proof axiom 
important part soundness argument matches run action role carried detail knows knows matches rjx matching substitution 
definition matches matches rjx action roles action role sent principal side conditions reaction table know occur cord space 
events form event hm occurred know lemma events event 
semantics knows knows true principal semantics knows knows shows axiom sound 
axioms relating atomic predicates table lists axioms relating various properties follow naturally semantics propositional formulas 
example decrypts fjmjg knows result decryption principal knows tuple knows src axiom important reasoning source secret values 
value created sent message fjtjg dec decrypts fjmjg knows fjmjg dec decrypts fjmjg knows knows knows knows src source knows decrypts fjtjg sec honest decrypts fjmjg fjmjg knows knows sent fjmjg table relationships properties somebody learned somebody decrypted message fjtjg axiom sec follows immediately lemma 
axiom says decryption keys honest principals secret 
note abbreviation useful proofs 
thought meaning created sent 
preservation rules predicates preserved additional actions 
example knows action know action regardless action reason define knowledge include data available step protocol execution 
inference rules showing preservation properties shown table 
exception preservation source 
source means way principal know message fjtjg atomic formula may false sends message containing formulas principal referred single principal may participating multiple roles 
consequence formulation protocols principal alice may participate instances roles time communication message sends receives various instances alice honest 
lemma lemma 
generic rules preservation rules persist sent hmi source ht source source source source source source source table inference rules nsl xjg nsl xjg fjx yjg nsl nsl fjy xjg yjg nsl fjy xjg yjg hon nsl honest table honesty rule nsl honesty rule intuitively honesty rule combine facts role inferred actions roles 
example suppose alice receives response message sent bob 
alice may wish properties bob role reason bob generated reply example 
order alice may assume bob honest derive consequences assumption 
analogy help 
game bridge player may call series bids 
player partner may draw cards player hand 
formalize partner reasoning implications player bidding convention 
intuition bid provides signal player exact meaning signal determined bidding conventions partners established 
way message may imply specific principal sending message protocol 
principal revealed private key attacker example receipt message provide information principal 
honesty rule essentially invariance rule proving properties roles protocol 
honesty definition framework means roles protocol honest principals satisfy property provable invariant protocol roles 
notion honesty generalization notion faithfulness 
participant faithful proceed receive message expecting receive start protocol role faithful participant respond message protocol received responded messages 
recall protocol set roles role protocol write initial segment actions role action receive complete execution role 
reason considering initial segments reads know asynchronous communication lemma lemma role contains send send may done asynchronously waiting role receive 
assume loss generality pausing states principal role waiting input 
role calls message sent dictate principal role complete send pausing 
honesty rule depends protocol write provable honesty rule axioms proof rules 
notation just introduced honesty rule may written hon honest free variable bound initial steps role static variables free variable bound words role run completion receiving state satisfies honest principal executing protocol satisfy 
side condition prevents free variables honest bound hypothesis 
concretely honesty rule nsl protocol defined equation shown table 
antecedents rule enumerate intermediate waiting input states final completed states roles protocol 
formula expressible logic holds local traces hold honest principal executing protocol 
honesty rule proof correctness nsl full section 
place honesty rule prove completes responder role principal sending final message honest sent initial message key part deduction prove formula decrypts fjm njg fja mjg fjnjg holds honest participant formula proved honesty rule line deduction table 
give feel honesty rule works case give informal intuitive explanation rule yields 
referring rule instantiated nsl see antecedent decrypts fjm njg true responder role trivially holds cases 
prove initiator role cases 
case initiator receives reply message decrypts fjm njg true holds 
case initiator receives reply look init deduction shown table shows decrypts fjm njg fja mjg fjnjg true holds 
holds valid sequence steps honest participant honest 
soundness theorem soundness 
proof induction structure proofs 
cases sketched section 
details included appendix sample proof constructed proofs different protocols including public key private key protocols appropriate modification decryption action 
addition attempt prove important property holds lowe protocol fails original needham schroeder protocol insightful way due inability responder identify principal decrypted second message principal sent third 
tables contain formal proof property nsl protocol 
informal sense table shows initiator understanding happened successful run protocol 
final formula table formula trace actions initiator role protocol formula collecting set initiator observations 
informal sense table shows responder observe run responder role protocol 
informally table shows specific run bob thinks talked alice bob combine reasoning protocol roles observations conclude alice honest decryption key known attacker alice followed role nsl communicated alice 
property important correspondence property prove full correctness nsl goal demonstrate simple proof property provable system nsl provable ns failure original needham schroeder protocol note proof fails original needham schroeder protocol omitted principal name second message 
original ns need prove decrypts fjm njg fja mjg fjnjg try apply trying honesty rule case decrypts fjm njg true come counterexample example fja mjg fjnjg 
possible prove decrypts fjm njg fja mjg fjnjg messages sent somebody necessarily 
exactly lowe observation ns principal private key known intruder :10.1.1.1.5724
thinks talking thinks talking related cord notation proof system strongly related style logic making assertions imperative programs 
floyd hoare logic axioms correspond action calculus post conditions pre conditions 
explained section process calculus developed effort refine strand space formalism variables substitution 
strand spaces attractive variant natural language arrows messages unfortunately support logical annotations wanted add protocols 
concrete analyses strand represent family strands parameterized possible values data occurred 
communicating value agent modelled spontaneous instantiation parameters corresponding strands value 
started replacing parameter receiving strand variable modelling communication substitution sent value am knows knows knows mjg sent fjx mjg ad fjm njg fjm xjg decrypts fjm njg sent fjnjg knows knows knows mjg knows knows knows sent fjx mjg mjg fjm njg fjx mjg mjg fjm njg fjm njg fjm xjg fjx mjg decrypts fjm njg dec mjg fjm njg fjm njg fjm xjg fjx mjg decrypts fjm njg knows mjg fjm njg fjm njg fjm xjg fjx mjg decrypts fjm njg knows sent fjnjg mjg fjm njg fjm njg fjm xjg fjx mjg decrypts fjm njg fjnjg table init deductions init role ar fjy mjg sent fjy mjg source ar fjnjg sent fjnjg fjy mjg source sent fjy mjg fjy mjg fjy mjg fjy xjg source sent fjy mjg fjy mjg fjy mjg fjy xjg njg source sent fjy mjg fjy mjg fjy mjg fjy xjg njg fjnjg source sent fjy mjg sent fjnjg fjy mjg fjy mjg fjy xjg njg fjnjg fjnjg fjnjg source sent fjy mjg sent fjnjg table resp deductions resp role resp fja mjg fja mjg fjy xjg njg fjnjg fjnjg fjnjg source sent fjnjg resp fja mjg honest sent fjnjg fja mjg source sent fjnjg init hon honest sent fjnjg knows knows fja mjg source honest sent fjnjg knows src source knows decrypts fjm njg sec honest decrypts fjm njg honest source knows decrypts fjm njg fja mjg honest decrypts fjm njg init hon honest decrypts fjm njg fja mjg fjnjg fja mjg honest fja mjg fjnjg table completed deduction honesty rule variable 
allowed capture syntactically data known agent 
course brought ground process calculi 
representing communication reaction send action receive action substitution effect reaction clearly spirit calculus chemical machines :10.1.1.36.865:10.1.1.1.5724
substantial amount developing process calculi kind specific applications security 
particular spi calculus developed extension calculus specifically designed analyzing security coinductive methods process calculus terms bisimilarity processes :10.1.1.1.5724
idea proceed different direction logical semantics protocols 
needed process calculus rudimentary programming language support logical annotations directly analyze protocols processes 
result cord calculus 
core simplified possible dropped channels reducing communication broadcasting pattern matching elevated generic destructor operator capturing value comparison decryption 
main purpose reductions resulting simplifications clearly display essential logical issues 
straightforward extensions cord calculus allow representing point point communication various cryptographic concepts considered concepts appeared security protocols 
operator represent new data borrowed process calculus reminiscent existential quantifier purpose multiset rewriting 
events common idea process calculus hoare logic 
protocol analysis nrl protocol analyzer notion event basic corresponds exactly actions cord calculus :10.1.1.1.5724
source predicate capture notion data origination 
similar notions originating uniquely originating data strands 
faithfulness assumption causality criterion protocols shown protocols failing satisfy flawed 
honesty rule generalization formalization faithfulness assumption 
combining honesty rule proof system reason protocol assumptions honesty participants 
parameter mechanism strand spaces allow formal distinction values message sent bob visible contained token encrypted alice key forward 
propose specialized protocol logic built process language communicating cords describing actions protocol 
logic contains axioms inference rules main protocol actions proofs protocol directed meaning outline proof correctness follows sequence actions protocol 
central idea assertions associated action hold protocol execution contains action 
gives power reason possible runs protocol explicitly reasoning steps carried attacker 
time semantics logic sets traces protocol execution possibly including attacker kind idealization previous logics 
approach lets prove properties protocols hold runs explicit reasoning potential actions intruder 
anonymous referees helpful comments 
abadi gordon :10.1.1.1.5724
calculus cryptographic protocols spi calculus 
information computation 
expanded version available src research report january 
berry boudol 
chemical machine 
theoretical computer science 
burrows abadi needham 
logic authentication 
proceedings royal society series 
appeared src research report shortened form acm transactions computer systems february 
cervesato lincoln mitchell scedrov 
meta notation protocol analysis 
syverson editor th ieee computer security foundations workshop 
ieee computer society press 
dolev yao 
security public key protocols 
ieee transactions information theory 
herzog guttman 
strand spaces security protocol correct 
proceedings ieee symposium security privacy pages oakland ca may 
ieee computer society press 
floyd 
assigning meaning programs 
schwartz editor mathematical aspects computer science proc 
american mathematics soc 
symposia volume pages providence ri 
american mathematical society 
gong needham yahalom 
reasoning belief cryptographic protocols 
cooper lunt editors proceedings ieee symposium research security privacy pages 
ieee computer society 
hoare 
axiomatic basis computer programming 
communications acm 
larsen milner :10.1.1.1.5724
compositional protocol verification relativized bisimulation 
information computation 
lowe :10.1.1.1.5724
attack needham schroeder public key protocol 
info 
proc 
letters 
lowe :10.1.1.1.5724:10.1.1.27.6385
breaking fixing needham schroeder public key protocol csp fdr 
nd international workshop tools algorithms construction analysis systems 
springer verlag 
meadows :10.1.1.1.5724
nrl protocol analyzer overview 
logic programming 
milner :10.1.1.1.5724
action structures 
lfcs report ecs lfcs department computer science university edinburgh kings buildings mayfield road edinburgh december 
milner :10.1.1.1.5724
action calculi pi calculus 
nato summer school logic computation marktoberdorf november 
milner :10.1.1.1.5724
action calculi syntactic action structures 
mathematical foundations computer science th international symposium mfcs pages 
springer 
milner :10.1.1.1.5724
communicating mobile systems calculus 
cambridge university press cambridge 
milner parrow walker :10.1.1.36.865:10.1.1.1.5724
calculus mobile processes part information computation 
mitchell mitchell stern :10.1.1.1.5724
automated analysis cryptographic protocols mur 
proc 
ieee symp 
security privacy pages 
needham schroeder 
encryption authentication large networks computers 
communications acm 
paulson 
proving properties security protocols induction 
th ieee computer security foundations workshop pages 
pavlovic 
categorical logic names abstraction action calculi 
math 
structures comp 
sci 
roscoe 
modelling verifying key exchange protocols csp fdr 
th ieee computer security foundations workshop pages 
ieee computer soc press 
syverson 
adding time logic authentication 
acm conference computer communications security pages 
syverson van oorschot 
unifying cryptographic protocol logics 
proc 
ieee computer security foundations workshop vii pages 
thayer herzog guttman 
strand spaces proving security protocols correct 
journal computer security 

names variable name constant name basic keys constant key variable key name keys basic key inv inverse key terms variable term constant term name key tuple terms fjtjg term encrypted key actions null action hti send term receive term variable generate new term match term pattern basic terms basic terms allowed patterns basic patterns tuple pattern patterns basic pattern decryption pattern strands processes xi formulas sent knows source decrypts honest modal forms table summary syntax summary syntax convenience summary table bnf syntax cords protocol logic 
soundness axioms proof rules prove theorem soundness axioms proof rules 
section proves soundness axioms section proves soundness relationships predicates section proves soundness proof rules 
prove lemmas useful proofs follow 
lemmas indicates run protocol 
lemma event hmi event event event hmi proof follows definitions basic cord calculus reactions 
run arbitrary actions recall event hmi means reduction 
ss occurs run refering list basic reaction steps table see reaction type 
plugging rule get 
ss side condition fv 
note reduction ss reduction written 
definition event means event 
similarly direction 
lemma event protocol knows knows 
proof follows definitions cord calculus term containing free variable sent 
run containing events run including event 
run arbitrary actions recall event means reduction 
ss occurs run refering list basic reaction steps table see reaction type 
plugging rule get 
ss fjmjg side condition fv fjmjg 
order reaction occur condition fjmjg contain free variables time reaction 
means true run 
event 
event 
fv appears static interface role 
rjx event 
fjp jg fjp jg rjx event fjp jg fjp jg cases semantics knows gives know knows 
fourth case occurred pattern match action means know know knows 
case occurred decryption action means know fjp jg know knows 
atomic contains subterms argument holds atomic built constructors cord calculus 
possibilities follows 

fjm jg cases contain free variables atomic know know argument 
atomic constructed contain free variables repeat argument component components atomic 
knows knows lemma proved 
axioms subsections prove soundness axioms table 
section starts informal statement axiom proves soundness 
knows informally axiom says principal generates new value takes actions principal knows definition knows knows matches rjx matching substitution 
definition matches matches rjx action roles action role sent principal side conditions reaction table know occur 
events form event hm occurred know lemma events event 
semantics knows knows true principal semantics knows knows shows axiom sound 
knows informally axiom says principal generates new value takes actions action principal knows definition knows knows matches rjx matching substitution 
definition matches matches rjx action roles case event semantics knows means know 
source informally axiom says principal generates new value takes actions action encrypted message source principal learned vacuous statement axiom tells know point anyway 
definition source source matches rjx matching substitution 
definition matches matches rjx action roles case event know axiom knows semantics source false antecedent prove source term key hmi sent informally axiom says principal sends message principal sent definition hmi sent sent hmi matches rjx matching substitution 
definition matches hmi matches rjx hxi action roles case event hxi event hmi 
semantics sent means sent 
ar sent informally axiom ar says principal receives message message sent principal definition sent sent matches rjx matching substitution 
definition matches matches rjx action roles case event 
lemma know event event hmi 
semantics sent means sent 
ar knows informally axiom ar says principal receives message principal knows definition knows knows matches rjx matching substitution 
definition matches matches rjx action roles case event semantics knows means know 
am knows knows informally axiom am says principal knows static parameters 
definition knows knows knows fv rj matching substitution 
static parameters cord substitution substitution cord initial configuration run 
knows 
semantics knows means know 
ad fjmjg decrypts fjmjg informally axiom ad says principal decrypted message fjmjg knows message fjmjg successfully pattern matched definition fjmjg decrypts fjmjg decrypts fjmjg fjmjg matches rjx matching substitution 
definition matches fjmjg matches rjx action roles case event fjmjg order pattern match action take place fv fjmjg means knows fjmjg 
semantics decrypts means decrypts fjmjg 
relationships predicates dec decrypts fjmjg knows fjmjg informally dec says principal decrypts message fjmjg knows message fjmjg semantics decrypts event fjmjg knows fjmjg follows trivially 
dec decrypts fjmjg knows informally dec says principal decrypts message fjmjg knows message semantics decrypts event fjmjg knows fjmjg 
decryption pattern match case semantics knows means knows 
sec honest decrypts informally sec says principal honest principal decrypted message fjmjg message encrypted public key words honest knows private key 
axiom follows lemma says configuration protocol run event fjtjg honest honest means honest event fjtjg means decrypts fjtjg follows directly 
src source knows decrypts fjtjg informally src says source message message fjtjg anybody principal created knows somebody decrypted message fjtjg semantics source knows decrypts fjtjg decrypts fjtjg sent knows means antecedent decrypts fjtjg 
knows knows knows informally says principal knows tuple principal knows follows semantics knows 
knows know know know 
proof rules source rule source source informally axiom says principal sends message containing message possible source principal obtain run premise continuation 
note premise semantics source give event matching know event matching rjx assume knows know semantics knows knows true run circumstances 
rjx event 
fv rj appears static interface role 
rjx event 
rjx event 
fjp jg fjp jg rjx event fjp jg fjp jg assume possibility ruled know event means reaction rule couldn appear time action 
event occured run event occur vice versa 
similarly second possibility ruled know event means reaction rule couldn appear particular static interface roles 
case decrypts fjtjg done 
received directly pattern containing order event know lemma event ht know lemma values term particular known 
order knows decrypts fjtjg event repeat argument find decrypted fjtjg event knows decrypts fjtjg decrypts fjtjg sent semantics source means source 
hon honesty rule protocol honesty rule hon honest free variable bound initial steps role static variables free variable bound assume soundness shorter proofs assume runs protocol show honest run substitution honest free variables 
show honest 
assume honest 
semantics honest lemma rja interleaving traces roles carried consider standard trace rja definition honesty trace matched prefix role matching substitution 
matches rja conclude 
bind variables just 
generic rules follows semantics matches rjx implies 
similarly follows meaning logical connectives 
valid true run true specific run contains actions preservation rules semantics knows sent decrypts existence certain event run adding additional events run predicates false preserved 
source preserved additional messages fjtjg sent contain nonce possible knows true message fjtjg decrypted 
source false additional messages sent contain 
