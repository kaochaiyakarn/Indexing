hypercup hypercubes ontologies efficient search networks mario schlosser michael sintek stefan decker wolfgang nejdl computer science department stanford university schloss sintek stefan nejdl db stanford edu 
peer peer networks envisioned deployed wide range applications 
networks evolving unorganized manner suffer serious scalability problems limiting number nodes network creating network overload pushing search times unacceptable limits 
address problems imposing deterministic shape networks propose graph topology allows efficient broadcast search describe broadcast algorithm exploits topology reach nodes network minimum number messages possible 
provide efficient topology construction maintenance algorithm crucial symmetric peer peer networks require central server super nodes network 
nodes join leave self organizing network time network resilient failure 
show scheme efficient global ontology determine organization peers graph topology allowing efficient concept search 
peer peer networks envisioned find broad range applications moving way current applications infrastructure file sharing exchange napster morpheus 
example networks semantic web services provide distributed access services requiring central service directory 
uses global service ontology enables efficient service discovery composition web services :10.1.1.21.61
fundamental building block large scale networks missing scalability 
networks requests services flooding algorithms inefficient broadcast mechanisms 
achieve efficiency organizing peers network graph structure hypercubes system hypercup hypercube describe 
section describes graph topology suitability efficient broadcast search 
section presents distributed algorithm capable maintaining graph structure efficiently elaborates algorithm detailed example 
section leave university hannover germany 
extend infrastructure sketching ontologies partitioning network 
hypercube topology peer peer networks consist nodes connected 
state requirements deterministic organization networks 
network model graph topology network essentially established peers able communicate neighbors peer nodes network peer directly send messages 
assuming existence transport network top network evolves refers peers knowledge transport network address 
tcp connections computers internet possible manifestation link peers network 
shaping networks means control way peers connect network arrive topology properties inherently known peers efficient routing search algorithms 
aims requirements network symmetric node network identical capabilities duties network 
excludes existence central servers involved organizing network 
network diameter defined shortest path distant nodes terms node hops reasonable order crucial property search broadcast 
clearly want beat worst case 
node degree limited limiting essentially amount tcp links node maintain 
network traffic search broadcast distributed evenly nodes network assuming distribution broadcast search origins network hotspots network avoided 
topology provide redundancy 
node failures lead graph disconnecting severely hampering broadcast search properties 
organizing peers hypercube graph essentially requirements state node able root tree spanning nodes network 
arrive efficient version aim organizing nodes depicted base turns hypercube topology nodes dimension topology studied area multiprocessor machines different assumptions 
complete hypercube graph consists lmax nodes defined fact nodes lmax neighbors dimension lmax essentially number dimensions spanned cube cube dimensions lmax 
network diameter 
visible structure symmetric node incorporates prominent position 
crucial load balancing network node source broadcast load shared equally 
hypercube base chosen adjust network diameter node degree 
note point construction algorithm described section works node numbers equal complete hypercubes allowing number peers network 

hypercube graph serialized notation links incomplete describe topology graph state definitions 
deal hypercubes binary base brevity 
refer extension bases 
edges graph labeled node dubbed neighbor node iff node neighbor dimension example node neighbor node 
node dubbed neighbor neighbor level 
edges graph undirected node neighbor 
node extended neighbors termed neighbor link set denotes sequence neighbors follow complete hypercube graph reach node node vice versa 
example neighbor link set leads node node back 
links graph undirected order steps path described link set carried important 
edge labels start 
maximum neighbor level node termed lmax 
node network maintains sets determine location graph topology set neighbor link sets associated set node addresses localhost addr addr addr neighbor identified link set reached sending message address addr 
broadcast search algorithm terminology define broadcast scheme guarantees set nodes traversed strictly increases forwarding process nodes receive message exactly 
guaranteed exactly messages required reach nodes topology 
furthermore nodes reached forwarding steps 
node origin broadcast network satisfying crucial requirement 
algorithm works follows node invoking broadcast sends broadcast message neighbors tagging edge label message sent 
nodes receiving message restrict forwarding message links tagged higher edge labels 
example refer serialized notation network graph clarity links example depicted just copy links notation arrive full picture node sends broadcast neighbors viz 
nodes 
node receives message link tagged level link forwards message neighbors 
time node received message level link forwards neighbor node 
third forwarding step node relays message node neighbor 
characteristic path length scheme calculated log logb log log 
search hypercube essentially broadcast time live broadcast limited scope 
monotonically increasing neighbor set means maximum number nodes reached number messages 
building maintaining hypercube graphs outline distributed algorithm allows nodes build hypercube topology 
major challenges networks follows maintain network symmetry crucial networks node network allowed accept integrate new nodes network 
furthermore joining leaving network consume reasonable amount message transmission limit traffic imposed transport network 
clearly joining node register nodes network protocol beat message number node joins removals 
topology construction maintenance algorithm describe construction maintenance hypercube topology 
formal description algorithm proof completeness 
walk example having peers joining network peer leaving process elaborate basic idea construction maintenance algorithm 
construction maintenance algorithm notion nodes evolving hypercube graph take responsibility position hypercube 
idea hypercube topology biggest complete hypercube graph implicitly current topology state sets participating nodes 
arrival new nodes complete hypercube topology unfolds needed 
removal nodes nodes jump cover positions previously covered node left topology prepared give positions new nodes join 
complete hypercube topology implicitly preserved broadcast search algorithms change peer receives broadcast message exactly 

network topology construction start 
peer active 
step peer contacted node wants join network 
peer integrates peer neighbor currently neighbor peers establish link tagged neighbor set 
generally peer integrates joining peer vacant neighbor level neighbor levels ordered lower neighbor levels come 
step peer contacts peers assume contacts peer join network 
vacant neighbor level peer maintains neighbor peer 
essentially peer opens new dimension hypercube depicted 
peer called integration control node complete integration peer network responsible providing peer necessary links integration process peer neighbor links connecting currently existing neighbor levels order able carry complete broadcasts 
peer currently neighbors neighbor knows provide peer neighbor 
peer peer neighbor 
currently alternative peer selects peer new neighbor peer 
peer temporary neighbor peer neighbor peer said peer neighbor neighbor level 
essentially peer covers vacant position hypercube acts occupies positions hypercube depicted thin copy peer 
mark link peers temporary relationship tagged link set link set denotes path peer position link set originally aiming peer peer currently covers position 
path visible 
temporary link sets constructed rule 
step peer wants join network 
compare cases viz 
peer contacting peer join network 
case peer contacts peer join peer follows general rule integrate peer vacant neighbor level peer neighbor neighbor 
new neighbor peer cover temporary position peer maintain hypercube peer pass links associated position peer 
due construction rule edge labels temporary link sets peer able determine link peer link passed peer 
peer establishes link tagged link set peer depicted 
case peer contacts peer join peer decides integrate peer new non temporary neighbor 
carry integration peer currently covers position soon occupied peer integration control responsibility forwarded peer 
peer peer 
note possible peers network reach node forward control integration necessary hop 
prove 
peer carries integration just described arriving 
case peer contacts peer peer integrate peer neighbor level opens new dimension hypercube 
leads momentary hypercube peers maintaining links 
hypercube long run joining hotspots network 
burst joins peers problem structure balance long run 
information vacant position structure spread network joining peer contact network peer vacant position fill inherently balancing graph 
extreme cases carry active balancing example sending joining nodes random walk network 
defer 
having compared joining scenarios step explore specific joining scheme brevity steps 

network topology construction continued step peer arrives contacts peer 
network crosses threshold hypercube dimensions accommodate peers third dimension opened 
peer integrates peer vacant neighbor level new neighbor 
peer needs neighbors neighbor level peer neighbor peer peer neighbor peer linked neighbor provide new neighbor peer 
peer acts temporary neighbor peer peer acts temporary neighbor peer indicated link sets peers see 
shows existing peers network bold style positions additionally covered thin style 
note positions additionally covered peers determine temporary connections peers maintain plus edge labels 
demonstrates basic rule peers closest vacant position hypercube structure chosen cover 
closest means peer highest neighbor level vacant position covers 
complicated case peer cover positions peer covers power set vacant neighbor levels refer find detailed discussion 
peers network adding dimension graph means multiplication existing links example peers integrate neighbors linked neighbor level 
tag existing link additionally link 
peers existing link 
step peer contacted integrate newly arriving peer 
peer lacking neighbor peer integrated position 
peer get rid link peer moved peer 
peer final neighbor link stays temporary peers maintain link 
peer takes peer temporary link peer lacks final neighbor 
peer 

network topology construction continued step assume peer suddenly leaves network 
maintenance protocol obliged carry peer removal process basically decides existing peers knows chosen take responsibility positions gives 
example peer leaves position vacant original position graph node covers multiple positions find successors positions graph 
peer takes peer position establishing temporary links neighbors peer peers 
shows new distribution covering responsibilities depicts link structure arises network state 
step peer contacted peer decides integrate new neighbor 
position currently covered peer peer forwards integration control peer just described step example temporary links currently owned peer originally belong new position peer restored passed peer 
additionally peer integrates peer new neighbor arriving 
note step joining peer contacted peer network graph structure peers maintain temporary links 

network topology construction continued step peer contacted peer leading peer integration peer new neighbor 
depict state network positions complete hypercube graph dimensions held active peers peer covers positions hypercube 
peers want join network simultaneously 
currently working turning protocol real time protocol dealing simultaneous node joins departures 
example parallel joins executed easily join actions time stamped 
studying behavior protocol jxta infrastructure 
step integrating peer peer pushes links new neighbor arriving complete hypercube topology 
link failures 
link failure network leads node immediate departure topology able send departing messages 
happens topology able recover head back normal state 
hypercube graph recover sudden node loss 
procedure axiom jn jn detail node closest vanished node terms metric call graph hop distance uses dimension order compute distance value positions hypercube contacts vanishing node neighbors asking neighbors 
node carries node departure routine behalf vanished node 
procedure change message complexity described section 
complexity assuming relatively balanced graph structure algorithm described yields complexity terms messages sent order join leave network 
precisely holds nodes graph logb log neighbor levels 
note allows number nodes graph 
arrive complexity order algorithm uses optimizations explained detail walk section 
example exact edge labels temporary links stored reconstructed missing neighbor levels peer necessary peer leaves networks integrates peer 
new hypercube dimension opened integrating additional peer happened step information broadcasted peers network propagated necessary nodes communicate issue removing integrating peer 
networks reach large number nodes scale small number nodes long takes place relatively balanced see section higher neighbor levels added construction process removed peer network neighbor level 
information broadcasted network locally inferred peer observing set neighbor link sets maintains 
extending topology ontology routing hypercup empowered network features scalability search times 
additional knowledge available improve network performance information peers able provide categorized belonging general concept 
concepts turn organized global ontology defines relationships existing concepts 
case hypercube network construct hypercube concept allows reach peers providing information services concept efficiently 
furthermore internal peer organization hypercube structured network support logical combinations ontology concepts queries 

ontology structured network topology concept hypercubes inter cluster routing concept ontology construct exactly hypercube contains precisely peers directly support concept peers appear specific concept hypercubes 
peer supports ontology concepts member hypercube associated supported concepts 
network consists hypercubes ontology concept 
hypercubes linked wiring mimics links global ontology 
connected hypercubes number links equals number peers smaller hypercube links equally deterministically distributed nodes larger hypercube 
route concept queries peer picks non negated concepts single query attempts route query hypercube associated concept 
routing destination hypercube associated concept carried inter hypercube links 
prevent traffic hotspots inter cluster routing concept hypercubes level global ontology hypercubes linked 
avoids routing queries root concept ontology 
internal hypercube organization intra cluster routing hypercube internally consists groups peers peers common neighbor level 
answer queries consisting logical combinations ontology concepts internal structure hypercube reflects concepts supported member peers 
done partitions hypercube group peers supporting specific logical combinations concepts 
queries forwarded partition closest logical concept combination query 
peer hypercube knows internal organization hypercube reach group inside hypercube logarithmic size hypercube amount hops 
soon query reached destination group broadcasted peers partition 
internal concept assignment hypercube depicted 
related making networks scalable received attention 
network structure content distribution network ignored search algorithms proposed alternatives pure broadcast 
network topology ignored attempt map content distribution peers network 
techniques fine topology 
distributed hash table approaches chord aim enforcing deterministic content distribution routing point queries :10.1.1.140.3129:10.1.1.16.6554
similar terms message complexity joining departing nodes approach specifically performs optimizing network load broadcast multipoint search requiring hash functions 
topology efficiently cluster peers network enables efficient broadcast search algorithms message overhead broadcast logarithmic network diameter resiliency node failure 
super peers central servers required 
global ontology categorize peers providers particular information associated ontology concepts efficiently route queries 
organizing peers manner especially useful domains data specific topic query collected numerous peers network example domain semantic web services 
crespo garcia molina 
routing indices peer peer systems 
proc 
th conference distributed computing systems july 

fast gossiping hypercube 
siam journal computing april 
morpheus website 
www com martin daml semantic markup web services 
white www daml org services daml 
raghavan upfal 
building low diameter networks 
proc 
nd annual ieee symposium foundations computer science 
nejdl wolf qu decker sintek naeve nilsson palm risch 

edutella networking infrastructure rdf 
proceedings th international www conference may hawaii usa 
ratnasamy francis handley karp shenker :10.1.1.140.3129
scalable network 
proc 
acm sigcomm august 
mcilraith son zeng semantic web services :10.1.1.21.61
ieee intelligent systems 
special issue semantic web 
march april 
schlosser sintek decker nejdl 
shaping peer peer networks 
technical report stanford university april 
ratnasamy shenker stoica :10.1.1.16.6554
routing algorithms dhts open questions 
proc 
st international workshop peer peer systems march 
stoica morris karger kaashoek balakrishnan 
chord scalable lookup service internet applications 
proc 
acm sigcomm august 
yang garcia molina 
improving efficiency peer peer search 
proc 
th conference distributed computing systems july 
project jxta open innovative collaboration 
white available www jxta org 
uddi technical white 
available www uddi org september 
