massachusetts institute technology intelligence memo june syntactic closures alan jonathan rees describe syntactic closures 
syntactic closures address scoping problems arise writing macros 
discuss issues raised introducing syntactic closures macro expansion interface compare syntactic closures approaches 
included complete implementation 
report describes research done artificial intelligence laboratory massachusetts institute technology 
support laboratory artificial intelligence research provided part advanced research projects agency department defense office naval research contracts 
revision appear proceedings acm conference lisp functional programming 
association computing machinery 
trouble macros macros essential programming tool 
programming languages support including virtually dialects lisp 
macros programs easier understand maintain allowing programmer extend language new constructs suit application 
macros traditionally implemented simple textual manipulations 
examples familiar macros hypothetical dialect scheme define macro push obj exp list var set 
list var cons obj exp list var define macro exp exp temp exp temp temp exp define macro catch body exp current cont ion lambda throw body exp examples formal parameters macro bound source text represented expressions body macro computes replacement text represented expression 
style macro facility simple general prone various kinds scoping errors 
variable introduced macro inadvertently captured lexical bindings client code 
example cons push foo stack expand cons set 
stack cons foo stack probably intended 
client push shouldn know push implemented cons 

client lexical conflict binding introduced macro 
example temp expand temp temp temp temp intended 
client shouldn aware detail implementation 

assuming hypothetical scheme dialect supports kind macro construct defining local macros syntactic keywords introduced macro inadvertently captured 
example macro set 
flag set flag 
flag push foo stack expand macro set 
flag set flag 
flag set 
stack cons foo stack 
analogous case 
case binding identifiers case binding syntactic keywords 

example similar case involving keywords possible happen practice example hard provide 
best attempt follows define macro test macro test client shouldn aware subexpressions named test scope auxiliary keyword 
problems consequences fact macros ious lexical scoping program text constructing 
macro facility proposes address shortcoming take account macro writer needs explicit control scoping 
example catch throw expands call current continuation lambda throw throw client throw refer binding throw introduced macro 
contrasts case capture undesirable 
analogous case binding syntactic keywords 
solution scoping problems 
examine related design issues discuss re difficulties 
appendix complete implementation solution 
terminology need precisely distinguish various different kinds names environments 
terminology name token name 
traditionally lisp uses symbols quote car purpose 
keyword syntactic keyword introduce special syntactic construct 
lambda set 
familiar examples 
identifier name denote variable 
familiar examples foo 
variable particular binding identifier 
example lambda lambda variables named identifier maps identifiers variables contains interpretation number syntactic keywords 
syntactic environments contain contextual information necessary interpreting meaning particular expression 
value maps variables values precisely locations hold values 
value environments contain additional information necessary execute expression 
solution way closures lambda expressions solve scoping problems run time propose introduce closures way solve scoping problems macro expansion tinhe 
syntactic closures closure returned lambda expression syntactic closure consists environment kind list names expression 
kinds closures names occurring expression taken relative environment list 
names list meanings determined 
cases closure way parameterizing expression 
difference lambda expression closure invoked positional arguments syntactic closure invoked call context fashion 
call context natural situation expressions constructed expressions context dependence normal way expressions combined 
syntactic closures created procedure 
takes arguments syntactic environment list names expression 
returns closure expression environment leaving names free 
expressions represented usual way expressions 
syntactic closure thought new kind printed representation 
syntactic closure appear subexpression expression 
appear left hand side assignment statement 
ordinarily expression inherits meaning keywords identifiers contains context appears syntactic closure carries context 
enables tools manipulate expressions avoid identifier keyword scoping problems retaining ability construct expressions familiar way 
writing expanders programmer defines macros writing procedures called expanders 
expander applied syntactic environment expression returns syntactic closure 
expression piece program text expanded syntactic environment derived context expression occurred 
resulting syntactic closure place original expression 
example expander push macro define push expander syntactic env exp obj exp syntactic closure syntactic env cadr exp list vat synt closure syntactic env caddr exp synt act ic closure scheme syntactic environment set 
list vat cons obj exp list vat production implementation unnecessary write expander hand 
expanders follow common pattern user interface hide calls syntactic closure cases programmer needs precise control syntactic environments 
front designed allows programmers define push macro familiar readable way 
advocating user interface set tools suitable constructing user interfaces 
say design user interfaces section 
pattern followed expanders follows subexpressions input expression closed syntactic environment occurred syntactic environment argument expander 
note subexpressions syntactic closures passed syntactic 
isn problem expression syntactically closed syntactic closure context insensitive 
expression created typically backquote expansion original expression 
expansion include subexpressions syntactic closures created step 
expansion closed syntactic environment known expander 
example standard scheme syntactic environment 
avoids capture carefully closing expression syntactic environment appropriate names contains 
subexpressions input closed environment input new names introduced expander resolved environment known expander 
push example programmer need concerned definition keyword set 
locally redefined location push expression occurred uses known syntactic environment close set 
expression constructs 
needn worry local cons mapping identifier named cons scheme syntactic environment global variable named cons local variables happen name 
illustrate kind capture avoided definition simple version define expander syntactic env exp exp syntactic closure syntactic env cadr exp exp syntactic closure syntactic env caddr exp syntactic closure scheme syntactic environment lambda temp temp temp exp programmer doesn need worry local redefinitions keywords lambda notice doesn worry variable named temp accidentally capture variables name second operand 
second operand closed syntactic environment current expression occurred identifiers may contained named temp resolved correct variable named emp 
second argument syntactic closure situations programmer capture occur 
list names eft syntactically free resulting expression 
illustrate expander catch define catch expander syntactic env exp body exp syntactic closure syntactic env throw cadr exp syntactic closure scheme syntactic environment call current continuation lambda throw body exp expression body catch closed syntactic environment current catch expression occurred name throw 
meaning names expression correctly determined name throw left free captured lambda expression embedded 
pragmatics process macro expansion preprocessor nature specified simple rewrite phase precedes interleaved interpretation integral front compiler 
preprocessor starts input expression read file terminal known syntactic environment 
envi ronment gives meaning top level identifiers car keywords 
identifier bindings added syntactic environment preprocessor descends lambda expressions 
keyword bindings added constructs macro 
traditional interface expanders preprocessor de fined terms program text 
augmented interface introducing syntactic environments closures 
raises number design questions answered practical implementation 
example programmers create new syntactic environments add new keywords existing syntactic environments 
operations syntactic closures extracting original expression detecting represents call car procedure 
previous section describes general low level mechanism expanders communicate preprocessor 
section suggests rudimentary framework help support practical implementation syntactic closures 
give implementation framework appendix 
ext synt act ic environment useful procedure extends syntactic environment associating expander keyword 
example ext synt act ic environment scheme synt act ic environment push push expander returns new syntactic environment expressions form push 
expanded expander push expander 
expression interpreted scheme syntactic environment 
advertised syntactic environments seen examples known syntactic environment needed 
particular expander introduces name expansion needs certain name intended meaning 
example expander push requires cons set 
meanings documented scheme manual 
expander interrupts macro wish employ names defined internal system syntactic environment 
scheme common lisp draw distinction primitive keywords quote derived keywords case expressed terms primitive ones 
syntactic environment constructed adding macro bindings core syntactic environment keyword bindings primitive keywords 
scheme syntactic environment function core tic environment 
function useful abstraction available procedure 
call functions syntactic environments syntactic environments mac 
abstraction captures process defining language terms 
syntactic environment assigns meanings primitive keywords assigns meanings derived keywords 
programmer wanted experiment alternate def write define new ic environment scheme ext synt act ic environment core synt act ic environment new expander obtain syntactic environment derived keywords cond defined terms new version primitive key word 
common design facility introduces collection related syntactic extensions 
facility conveniently implemented 
example stack written extends syntactic environment adding push pop macros 
locally defined macros designing user interface macro facility uses syntactic closures environments raises number questions 
don intend advocate particular front issues addressed interface 
keywords subject scoping rules identifiers natural construct introducing local macro definition 
example programmer write macro push frob stack set 
stack cons frob stack introduce local push macro 
convenience variables frob stack bound syntactic closures argument expressions 
syntactic environment arguments closed force push expression occurred 
general interface serve illustrate environment issues 
replacement expression computed closed relevant syntactic environment 
known syntactic environment syntactic environment 
example standard definitions set cons obtained 
convincing case adjoin cons macro push frob stack set 
stack adjoin frob stack adjoin push adjoin sum stack behave sol 
sum stack cons sum stack 
replacement closed syntactic environment force expression occurred 
definition appendix works way 
alternatively replacement closed syntactic environment effect inside body macro expression 
permit definition recursive macros expand expressions employ macro 
appropriate name variant macro macro rec bears relation macro 
macro rec exp exps null 
exps temp exp temp temp exps needs introduce macros simultaneously especially mutually recursire 
macro macro rec useful followed syntax letrec 
expression computes replacement raises different environment issue obtain syntactic value environments evaluate 
syntactic environment macro occurred environment maps identifiers variables exist run time 
implementation appendix simply uses fixed syntactic value environments 
bodies macros written standard scheme program written different language 
pattern matching macro limited pattern matching ability remedied real implementation 
stands assumes expression expanded consists keyword followed sequence subexpressions assumes correct close subexpressions environment expression occurred 
general solution capabilities checking input expression properly formed 
selecting alternatives form input expres sion 
ll destructuring input expression arbitrary depth binding variables component parts 
declaring components expressions syntactically closed case names left free 
time flexibility provided way common cases concise 
usual approach design pattern matching language 
experience dicult kinds language design 
pattern language may resemble lisp employing constructors cons indicate destructuring lead confusion pattern operations obvious analogues lisp lisp constructs sense patterns 
alternatively pattern language may resemble lisp data structures pair match pair leaves room express additional pattern operations introducing special keywords 
languages quickly verbose baroque 
regard area suitable research choose address time 
previous users conventional macro systems sensitive scoping problems 
techniques ameliorate situations discovered rediscovered years way avoid capture problems problem names obscure macro client discover accidentally 
improvement obscure names utility generates unlimited supply names guaranteed conflict names 
way come obscure names directly manipulate mapping character strings names 
common lisp packages manner macro defined package client macro resides different package character string macro definition effectively different name string occurring client 
steele advocates thunks avoid capture problems 
define follows define macro exp exp temp exp thunk lambda exp temp temp thunk lisp dialects provide enables macro writer insert absolute re fences replacement expression 
cons exp exp macro writer write absolute cons standard scheme environment exp exp 
solutions incomplete 
clients may unwittingly stumble obscure names packages integrated lexical scoping thunks deal scoping keywords absolute clumsy error prone 
scheme dialects provide interfaces similar spirit syntactic closures environments 
syntax tables mit scheme contain bindings keywords contain corresponding identifier variable mapping 
syntactic environments bear strong resemblance expansion functions dybvig expanders follow general protocol processing expressions solve scoping problems lack generality provided syntactic closures 
mit scheme parsed expressions called code resemble syntactic closures contain free keyword 
syntactic closures may additionally leave keywords free deter mined 
suggested macros written restricted pattern language implementor pattern language solve scoping problems 
believe convenient notation defining common kinds macros believe occasions full power lisp 
hygienic macro expansion complete solution macro scoping problems aware 
hygienic expansion works painting entire input expression distinctive color passing expander 
returned replacement expression examined find parts originated input expression identified color 
names text protected capture painted text vice versa 
painting done understanding syntax input expression paint applied expressions quoted constants bound variable lists lambda expressions 
strikes 
prefer scheme sensitive underlying syntactic semantic structure language 
addition difficult comprehend hygienic expansion operates correct 
feel syntactic closures solve scoping problems natural straightforward way 
implementation appendix written expository purposes 
gain practical experience syntactic closures written complete scheme system macros including scheme built special forms defined tools described 
additional control provided syntactic closures proved quite beneficial practice 
syntactic closures allowed solve scoping problems plagued lisp implementations years 
areas deserve exploration sonhe versions scheme allow write definitions define forms body various constructs convenient way writing 
definitions syntactically resemble expressions suggests macros able expand 
suggests form permitted contexts 
extensions intuitively appealing difficult give precise meaning 
noted expressive language constructs defining macros remain designed including possibly perspicuous pattern matching language 
want things syntactic closures just insert ing expressions 
example common lisp sel macro needs examine expression accesses value order determine transform corresponding assignment expression 
macros may need sophisticated kinds analysis 
investigate application syntactic closures environments problems programming large 
system composed modules consisting number procedure variable macro definitions necessary language describing interactions modules 
believe syntactic environments play important role language 
syntactic closures powerful convenient tool solving macro scoping problems 
experienced pleasure 
enable write correct macros ease confidence 
acknowledgments david moon kent pitman useful comments drafts 
wish participants informal workshop macros held mit may chris hanson eugene kohlbecker richard jim philbin kent pitman bill gerald jay sussman mitch wand 
kent dybvig daniel friedman christopher haynes 
expansion passing style conventional macros 
acm conference lisp functional programming pp 

eugene kohlbecker daniel friedman matthias felleisen bruce duba 
hygienic macro expansion 
acm conference lisp functional programming pp 

kent pitman 
special forms lisp 
conference record lisp conference pp 

reprinted acm 
guy lewis steele jr common lisp language 
digital press burlington ma 
guy lewis steele jr rabbit compiler scheme 
mit artificial intelligence laboratory technical report may 
appendix implementation implementation consists parts compiler definition scheme 
compiler extremely simple generates expression written subset scheme 
reader misled thinking proposing standardize macro expansion procedure practical system compiler generate pdp instructions 
compiler consists implementations syntactic environments syntactic closures core syntactic environment 
implementation scheme self contained depend details compiler 
illustrates standard macros written syntactic closures includes implementation macro keyword 
user visible entry points xt synt act ic environment synt act ic clo sure core synt act ic environment scheme synt act ic environment described 
utilities define unique symbol counter define unique symbol symbol set 
unique symbol counter unique symbol counter string symbol string append symbol string symbol number string unique symbol counter heur simple little run time system object code represented ordinary scheme expressions combinations introduced call keyword 
run time system extremely simple 
define execute code eval code user initial environment define call proc args apply proc args compiler syntactic environment implemented procedure applied second syntactic environment expression 
expected return compiled form expression 
second syntactic environment compile subexpressions expression 
define compile syntactic env exp syntactic env syntactic env exp define compile list syntactic env exps map lambda exp syntactic env syntactic env exp exps syntactic environments define extend syntactic environment outer syntactic env keyword expander lambda syntactic env exp pair 
exp eq 
car exp keyword compile null syntactic environment expander syntactic env exp outer syntactic env syntactic env exp add identifier list internally lambda introduce new identifiers syntactic environment 
define add identifier list syntactic env identifiers null 
identifiers syntactic env add identifier add identifier list syntactic env cdr identifiers car identifiers define add identifier outer syntactic env identifier variable unique symbol identifier lambda syntactic env exp eq 
exp identifier variable outer syntactic env syntactic env exp filter syntactic env creates new syntactic environment list names take meaning syntactic environment names take meaning 
define filter syntactic env names names syntactic env syntactic env lambda syntactic env exp pair 
exp car exp exp names names syntactic env syntactic env syntactic env exp null syntactic environment ensure expressions returned expanders syntactic thunks free names 
define null syntactic environment syntactic env exp syntactic closure 
exp compile syntactic closure syntactic env exp error expression exp core syntactic environment part compiler determines code generated primitive constructs 
define core syntactic environment syntactic env exp cond syntactic closure 
exp compile syntactic closure symbol 
exp compile free variable pair 
exp compile constant case car exp quote compile constant set 
compile simple lambda compile lambda compile combination syntactic env exp define compile constant syntactic env exp exp define compile free variable syntactic env exp exp define compile combination syntactic env exp call compile list syntactic env exp define compile simple syntactic env exp car exp compile list syntactic env cdr exp define compile lambda syntactic env exp syntactic env add identifier list syntactic env cadr exp lambda compile list syntactic env cadr exp compile list syntactic env exp syntactic closures syntactic closure implemented procedure marked recognized expression 
procedure applied syntactic environment closure free names resolved 
procedure returns compiled form expression 
define syntactic closure syntactic env free names exp vector syntactic closure lambda free names syntactic env compile filter syntactic env free names free names syntactic env syntactic env exp define closure list env free names exps map lambda exp closure syntactic env free names exp exps define closure 
vector 
vector length eq 
syntactic closure vector tel define compile syntactic closure env closure vector tel syntactic closure syntactic env ends compiler 
scheme scheme assumes applied syntactic environment names lambda quote set promise defined 
define scheme base syntactic env define expander syntactic env exp identifiers map car cadr exp syntactic closure final syntactic env lambda identifiers syntactic closure list syntactic env identifiers exp syntactic closure list env map cadr cadr exp define delay expander syntactic env exp delayed syntactic closure env cadr exp closure final env promise lambda delayed define expander syntactic env exp operands syntactic closure list syntactic env cdr exp cond null 
operands syntactic closure final syntactic env null 
cdr operands car operands syntactic closure final syntactic env temp car operands temp cdr operands temp define expander syntactic env exp operands syntactic closure list syntactic env cdr exp cond null 
operands syntactic closure final syntactic env null 
cdr operands car operands syntactic closure final syntactic env temp car operands temp temp cdr operands define cond expander syntactic env exp syntactic closure final syntactic env process cond clauses syntactic env cdr exp define process cond clauses syntactic env clauses body syntactic closure lis env cdar clauses cond null 
cdr clauses test syntactic closure syntactic env clauses rest process cond clauses syntactic env cdr clauses null 
body test rest test body rest eq 
clauses body le est syntactic closure syntactic env clauses null 
body test test body define case expander syntactic env exp syntactic closure final syntactic env temp syntactic closure syntactic env cadr exp process case clauses syntactic env exp define process case clauses env clauses data clauses body syntactic closure list syntactic env cdar clauses cond null 
cdr clauses res process case clauses syntactic env cdr clauses temp data body rest eq 
data body temp data body define macro expander macro syntactic env exp le keyword exp transformer execute compile scheme environment lambda exp caddr exp expander lambda env exp syntactic closure macro syntactic env apply transformer syntactic closure list syntactic env cdr syntactic closure final syntactic env syntactic closure list extend syntactic environment macro syntactic env keyword expander exp define macro rec expander macro syntactic env exp keyword exp transformer execute compile scheme syntactic environment lambda exp caddr exp extended syntactic env expander lambda syntactic env exp syntactic closure extended syntactic env apply transformer syntactic closure list syntactic env cdr exp set 
extended syntactic env extend syntactic environment macro syntactic env keyword expander syntactic closure final syntactic env syntactic closure list extended ic env exp define final syntactic env careful reading scheme report reveals put inside previous define 
syntactic env base syntactic env extend environment syntactic env pairs pairs pairs list list delay delay expander lis expander lis expander list expander list cond cond expander list case case expander list macro macro expander list macro rec macro rec expander cdr pairs null 
pairs set 
final syntactic env syntactic env final syntactic env define scheme 
define scheme syntactic scheme core syntactic environment cs tr document control form report identified checkmark originating department artificial laboratory ai laboratory computer science lcs document type technical report tr document information originals single sided double sided technical memo rm number pages 
include dod forms printer pages 
intended printed single sided double sided print type pr check included document dod form spine page data funding agent form printers notes cover page photo negatives blank photographs tonal material description page number 
scanning agent signoff date received date scanned date returned unclassified title syntactic closures report documentation page instructions completing fore report number jj 
accession recipient catalog num ai memo report period covered 
author alan bawden pe artificial laboratory technology square cambridge ma 
office name address advanced research projects agency wilson blvd arlington va 
monitoring agency name hlm office naval research information systems arlington va performing org 
report number contract number 
program element 
project 
task area unit numbers 
report date june security class 
el 
decl downgrading schedule distribution unlimited 

distribution statement el ball eel newell fl 
supplementary notes key words en lime ii ni lisp extensible syntax scheme referential transparency macros lexical scoping describe syntactic closures 
syntactic address scoping problems arise writing macros 
discuss issues raised introducing syntactic closures macro expansion compare syntactic closures approaches 
included complete implementation 
dd edition obsolete unc fi el security classification hm dill jaime scanning agent identification target scanning document supported part national research initiatives funds advanced research projects agency united states government mda 
scanning agent project document services department libraries 
technical support project provided laboratory computer sciences 
rev 
