shooting stars sky online algorithm skyline queries donald kossmann frank steffen rost skyline queries ask set interesting points potentially large set data points 
traveling instance restaurant interesting restaurant nearer cheaper better food 
skyline queries retrieve interesting restaurants user choose promising 
new online algorithm computes skyline 
existing algorithms compute skyline batch algorithm returns results immediately produces results continuously allows user give preferences running time algorithm user control kind results produced cheap near restaurants 
skyline queries growing interest socalled skyline queries bks teo 
skyline set points defined points dominated point 
point dominates point better dimensions better dimension 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference hong kong china technische universit nchen 
munich germany kossmann rost tum de frank de skyline hotels classic example shown 
shows skyline hotels supposed cheap close beach 
bold points connected graph represent hotels part skyline 
hotels part skyline dominated terms price distance beach hotel part skyline 
skyline useful instance travel agency helps users get big picture interesting options 
skyline hotels user choose promising hotels inquiries 
skyline queries involve dimensions depend current position user 
instance mobile users interested restaurants near cheap food rating system 
distance current location user 
idea give user big picture interesting options user decision 
user moves skyline re computed continuously order give user choice interesting restaurants user new location 
customer information systems travel agencies mobile city guides application area skyline queries useful 
decision support business intelligence area 
instance skyline query order determine customers buy complain little 
furthermore skyline operation useful data visualization 
help skyline outline geometric object determined words points geometric object visible certain perspective determined skyline query bks :10.1.1.21.2504
application distributed query optimization set interesting sites potentially useful carry distributed query determined skyline query interesting sites high computing power close data needed execute query 
related problems top ck nearest neighbor search convex hull ps contour problem mcl multiobjective optimization ste py 
depending context skyline referred pareto curve py maximum vector 
discussion related problems relationship skyline queries bks :10.1.1.21.2504
online skyline computation clear skyline queries interactive applications 
applications important skyline algorithm produces results quickly 
hand important points possibly thousands skyline produced sufficient give user big picture 
mobile environment big picture interesting points restaurants recomputed continuously making important compute big picture fast complete result 
observations motivate need online algorithm compute skyline 
unfortunately existing algorithms compute skyline batch oriented way 
algorithms involve reading data set return results running time 
addition running time algorithms high little hope find better batch oriented algorithms shown best algorithm compute full skyline worst case complexity log number points data set number dimensions higher complexity sorting 
online algorithm probably take longer batch oriented algorithm produce full skyline online algorithm produce subset skyline quickly 
adopting criteria set control project hac demand properties online algorithm 
results returned instantaneously 
possible give guarantees constrain running time produce say results 

algorithm produce results longer algorithm runs 
eventually time algorithm produce full skyline 

algorithm return points part skyline 
words algorithm return points restaurants replace restaurants better restaurants 

algorithm fair 
words algorithm favor points particularly dimension continuously compute skyline points range 

user control process 
words possible preferences algorithm running 
graphical user interface user able click screen algorithm return points skyline near point user clicked 

algorithm universal respect type skyline queries data sets 
standard technology indexes easy integrate algorithm existing database system 
data set hotels restaurants index consider dimensions user find interesting 
related kung proposed skyline algorithm referred maximum vector problem 
kung algorithm quite complex divide conquer principle 
eighties nineties variety different algorithms proposed specific situations algorithms compute high dimensional mat parallel skyline algorithms sm 
algorithms applicable situations data set fit main memory 
furthermore algorithms way 
nyi extended kung divide conquer algorithm works large databases bks :10.1.1.21.2504
proposed evaluated new skyline algorithms 
showed depending query characteristics database availability mainmemory bandwidth loops algorithm extension kung divide conquer algorithm best 
considered batch oriented skyline algorithms 
words focus find algorithms compute full skyline finding algorithms give big picture quickly 
tan proposed progressive skyline algorithms teo 
algorithm bitmaps second algorithm extension trees 
algorithms meet requirements online skyline algorithm return skyline points quickly produce results longer run 
meet requirements 
result possible fact 
algorithms return cheap hotels interesting hotels near beach returned significant amount time 
bitmap algorithm order skyline points returned depends clustering data tree algorithm order points returned depends value distribution data 
assess aspect experiments section 
furthermore algorithm allows user give preferences order results produced 
result algorithms advantageous interactive environment 
addition applicability tree algorithm limited 
algorithm requires tree index structure constructed combination dimensions user interested 
instance data set dimensions frequently criteria skyline queries price distance beach rating rooms ratings associated restaurants capacity indexes need constructed 
dimensions potentially interesting indexes required clearly feasible 
ways extend algorithm single dimensional index sufficient tan 
applying extensions involves scanning large portions database query returning query results extended algorithm violates requirement 
furthermore bitmap tree algorithm applicable mobile environment properties distance functions take current position user parameter algorithms require interesting properties materialized database 
overview remainder organized follows 
section presents basic idea new online algorithm shows works order compute dimensional 
section generalizes idea shows higher dimensional computed 
section describes results performance experiments 
section contains suggestions 
online algorithm twodimensional section describe new online algorithm works dimensional skyline queries skyline hotels shown 
section generalize algorithm higher dimensional 
ease presentation simplifying assumptions 
assume values positive real numbers distance price 
second assume duplicates data set hotels price distance beach 
third assume try find minimal points words try find interesting points close origin 
techniques applied naturally ordered domains including full range real numbers data sets duplicates queries ask maxima certain dimensions quality food 
order deal maxima negative numbers simply need find upper lower bounds dimension data set 
techniques applied skyline queries diff annotations proposed bks dealing diff annotations scope :10.1.1.21.2504
basic observations relationship nn skyline algorithm fundamental observations show nearest neighbor search applied order compute skyline 
observation arbitrary monotonic distance function euclidean distance 
dimensional data set point field positive real numbers 
nearest neighbor skyline observation easily proven contradiction 
xn yn 
furthermore assume part skyline 
result point xb yb dominates words xb xn yb yn xb xn yb yn 
circumstances smaller monotonic distance function 
contradiction nearest neighbor result part skyline 
going back quite easy see observation holds 
euclidean distance hotel costs euros distance beach km nearest neighbor 
hotel clearly part skyline 
obviously observation holds higher dimensional data sets higher dimensional skyline queries 
second observation extension observation 
states nearest neighbor search constrained region containing continue conclude nearest neighbors region skyline data set 
region coordinates diagonal points bottom left point top right point 
simplifying assumption bottom left point represent region coordinates top right point 
observation arbitrary monotonic distance function 
dimensional data set point field positive real numbers 
xm ym region dm subset dm contains points xm ym 
dm nearest neighbor point skyline 
naturally skyline dm observation 
proof observation identical observation 
additional step prove imaginary point region trivial transitivity relation 
essentially second observation means partition data set sufficient look skyline points nearest neighbor search region separately 
observation gives rise divide conquer algorithm nearest neighbor search 
nn algorithm dimensional call online algorithm nn algorithm nearest neighbor search 
dwelling details algorithm illustrate works example 
example consider hotel example 
algorithm starts searching nearest neighbor point data set monotonic distance function 
observation nearest neighbor guaranteed part skyline output user immediately 
shows nearest neighbor asterisk hotel database 
shows divide data space regions point region depicted square corner contains points data set smaller value nearest neighbor 
nx ny coordinates nearest neighbor region constrained region ny 
region depicted quarter circle corner contains points data set smaller value nearest neighbor 
region constrained region nx 
region depicted triangle corner contains points data set greater value greater value nearest neighbor 
step algorithm clearly points region dominated nearest neighbor need investigate region 
compute skyline points need investigate regions 
order find skyline point regions observation simply look nearest neighbors regions 
shows done region 
region find second point skyline simply looking nearest neighbor region constrain search looking points data set nx 
note nearest neighbor region distance beach km region region nn nn region region price second step algorithm nearest neighbor considered 
observation conclude second nearest neighbor definitely part skyline immediately output 
shown second nearest neighbor subdivides region new regions region region region 
principle need investigate region continue investigating regions looking nearest neighbors regions 
region empty nearest neighbor region subdivided instance region empty region subdivided 
way algorithm continues skyline points retrieved regions left processed 
algorithm description ready nn algorithm dimensional 
algorithm shown 
algorithm gets input data set monotonic distance function algorithm maintains list regions simplifying assumptions values positive real numbers region defined dimensional vector 
list contains region data space 
time new nearest neighbor entry list corresponding region subdivided smaller regions added list 
way partitioning goes new smaller regions empty 
algorithm terminates list empty 
list grows large parts demoted secondary memory disk expect cases extremely rare typically skyline points sufficient order get big picture algorithm stopped list floods main memory 
heart algorithm function 
function takes input point case data set region mx distance function computes input data set distance function euclidean distance initialization data space needs inspected loop iterate regions investigated mx mx nx ny mx nx mx ny output nn algorithm skyline queries nearest neighbor nx ny additional constraint nearest neighbor region 
fortunately function computed efficiently data set indexed multi dimensional index tree bkss modern data structures 
instance branch bound algorithm nearest neighbor search proposed purpose 
multi dimensional index evaluate predicates skyline query city multi dimensional index applied mobile environment distance user points data set materialized data set 
discussion explaining algorithm works higher dimensional skyline queries evaluate requirements stated 

help multi dimensional index structure tree nearest neighbor search cheap operation nn algorithm returns results instantaneously 
performance experiments produced results seconds complex skyline queries involve dimensions 
queries involve dimensions results produced fractions second 
due curse dimensionality nearest neighbor search expensive operation high dimensional data 
practice expect users specify say dimensions part skyline queries particular interactive environments 
fact believe skyline queries involve dimensions common case 

ultimately algorithm explore regions find points skyline 

considering observations mentioned section nearest neighbors nn algorithm part skyline 

fairness nn algorithm produces results range results quickly 
demonstrate property section 
control ways nn algorithm react preferences specified user change order query results returned 
user clicks particular point graphical user interface running time algorithm algorithm adjust process regions list contain point user clicked 
second distance function parameter nn algorithm changed time execution algorithm 
property exploited way 
algorithm starts default distance function price distance 
user clicks point price distance user puts emphasis short distance beach distance function adjusted price distance 
interaction user distance function adjusted accordingly 
skyline points returned changing distance function remain valid list 
result nn algorithm continue produce skyline points new distance function 

nn algorithm universal 
see section extended works skyline queries involve dimensions 
applied query involves additional predicates indexed indexed applied mobile application 
multi dimensional index structures support nearest neighbor search trees index structures provide large extent scalability dynamic updates independence data distribution 
data set involves say dimensions potential criteria skyline queries single dimensional tree sufficient execute skyline queries 
mentioned earlier interactive applications mind ordering criteria known advance limited number criteria typical application 
dimensions data set part skyline query need indexed 
summary nn algorithm fulfills requirements 
situations nn algorithm applicable skyline query involves dimension indexed second skyline query involves large joins group bys pipeline carried skyline operation 
situations little hope find effective online algorithm 
progressive algorithms proposed teo applicable situations 
situations batch oriented algorithm proposed bks :10.1.1.21.2504
nn algorithm ddimensional section show nn algorithm applied skyline queries involve dimensions 
shows threedimensional data space nearest neighbor data space xn yn zn 
idea previous section data space partitioned regions regions need investigated steps algorithm region need considered contains points dominated regions need considered steps algorithm defined follows region xn region yn region zn 
regions depicted individually figures 
regions region region region skyline computation observations section generalized dimensions proofs section just dimensional points regions 
part skyline output immediately 
furthermore regions investigated separately skyline points nearest neighbor region part skyline output soon 
result algorithm applied dimensional skyline queries adjusted dimensional points regions added list new nearest neighbor 
small subtlety needs addressed 
regions dimensional data space overlap way point skyline twice duplicates occur nn algorithm dimensional skyline queries 
order see duplicates produced go back example look point assume part skyline dominated better dimensions 
shown figures contained region region 
result produced nn algorithm twice processing region processing region 
duplicates subtlety alternative ways carry duplicate elimination bd lar 
duplicates impact performance nn algorithm severely 
section alternative ways extend nn algorithm order deal duplicates 
study tradeoffs alternatives section 
faire simplest approach deal duplicates eliminate part post processing step 
duplicate elimination step best implemented main memory hash table 
nn algorithm produces nearest neighbor nearest neighbor probed hash table 
nearest neighbor hash table duplicate output 
region subdivided inspected skyline points 
nearest neighbor hash table nearest neighbor duplicate consequence recorded hash table output user application 
refer approach faire 
clearly faire approach simple implement relies standard ways hashing eliminate duplicates lar 
believe main memory hash table sufficient purpose produce skyline points quickly 
alternatively course index secondary storage tree order carry duplicate elimination 
big disadvantage algorithm results great deal wasted 
approach possible nn algorithm little progress finds skyline point times worst case point times 
potential disadvantage approach real duplicates duplicates input data set filtered duplicate elimination step original definition skyline queries bks identical points input data set part skyline :10.1.1.21.2504
order remedy situation need give point unique identifier take identifier account duplicate elimination 
propagate alternative eliminating duplicates occur prevent duplicates occur 
technique called propagation 
propagation works follows nn algorithm finds skyline point scans list order find regions todo list contain point 
remove regions list partition skyline point 
correct points dominated skyline point discarded operation 
main memory multi dimensional index structure available index structure scan order find regions list contain point 
big advantage technique completely avoids wasted find duplicates 
negative side overhead search list regions time new nearest neighbor 
merge turn technique improve faire propagate approaches 
idea merge eliminate regions list certain circumstances 
basic idea merging quite simple 
assume regions 
ad 
bd list 
essentially means need look areas skyline points 
merge regions single region max max 
max ad bd 
region supersedes regions sure points investigate 
particular situation arises supersedes 
ad bd 
particular situation simply discarded list 
situation discarded list processed part list 
merging reduces size list 
negative side merging increases size regions 
furthermore finding candidates merge expensive 
addition eliminating regions superseded regions involves remembering regions processed 
merging employed care 
propose heuristics merging propagate approaches propagate propagate approach propose merging consider special case region list discarded superseded region 
faire faire approach propose merging duplicate detected 
merge regions derived skyline points 
time careful merge region ancestor regions restriction necessary order guarantee termination algorithm 
brevity discuss restriction heuristics full detail refer forth coming technical report 
fine grained partitioning option avoid duplicates partition regions way overlap 
instance partition nonoverlapping regions regions relevant processing 
implementing approach results sharp growth number regions list 
furthermore approach involves complex post filtering step order determine points region dominated points region 
pursue approach 
hybrid approaches obviously possible combine different approaches 
mentioned merge combined faire propagate approach 
option start propagate duplicates list reached certain size regions 
algorithm switches faire propagation expensive large list 
study hybrid approach section 
performance experiments section study performance tradeoffs nn algorithm compared existing algorithms compute skyline 
different kinds synthetic databases varying size database number points value distribution number dimensions points database 
study running times algorithms compute full skyline running times compute results 
experimental environment experiments carried sun ultra mhz processor mb main memory 
operating system solaris 
benchmark database intermediate query results software stored gb ibm disk drive 
programming language implement algorithms 
experiments size main memory buffer pool constrained percent size database benchmark databases databases proposed bks :10.1.1.21.2504
words study databases points varying number dimensions 
point bytes long composed doubles varchar field padding number dimensions 
study databases points points 
points generated value distributions corr correlated database points dimension tend dimensions 
result fairly points dominate points skyline correlated database fairly small 
example consider database students students philosophy areas 
anti anti correlated database points dimension bad dimension 
result skyline anti correlated database typically quite large 
example consider database hotels hotels close beach tend expensive 
indep independent database points generated uniform distribution 
size skyline independent data set correlated anti correlated database 
details distributions bks :10.1.1.21.2504
studied benchmark databases experiments teo 
databases distributions different observed bks size main memory buffer pool impacts performance skyline algorithms marginally :10.1.1.21.2504
domains 
brevity discuss results experiments qualitatively 
addition nn algorithm study performance algorithms proposed bks teo baselines :10.1.1.21.2504
specifically study algorithm variants nn tree bkss order carry nearest neighbor search 
stated propagate variant 
study tradeoffs alternative nn variants separate set experiments section 
kung divide conquer algorithm extended way partitioning early skyline shown best variant algorithm bks :10.1.1.21.2504
bnl block nested loops algorithm self organizing list proposed bks :10.1.1.21.2504
best variant family algorithms 
bitmap bitmap algorithm proposed teo 
algorithm scans database uses bitmaps order detect point part skyline 
unfortunately algorithm benchmark databases experiments size bitmaps hundreds gigabytes large 
approach viable dimensions small domain integers range experiments teo 
chose construct approximate bitmaps implement original bitmap algorithm top approximate bitmaps 
approximate bitmaps constructed mapping double integer range 
result approximate bitmaps couple kilobytes large algorithm runs faster experiments practice 
due approximation algorithm returns false positives points part skyline 
measure running time eliminate false positives experiments 
tree second algorithm proposed teo 
light weight implementation algorithm require extended trees 
light weight implementation avoids overheads traversing tree runs slightly faster original algorithm 
original proposal teo special tree variants required carry updates efficiently calculating skyline tan 
reiterate points points anti corr indep anti corr indep skyline nn bnl bitmap tree table size skyline running times secs points tree algorithm universal requires specific index kind skyline query 
carry full set experiments dimensional data construct different indexes order study tree algorithm 
hand tree sufficient nn algorithm 
dimensional skyline queries table shows running times compute skyline alternative algorithms dimensional skyline query databases points 
skyline small measure running times retrieving complete skyline 
skyline contains points small anti correlated database point small correlated database points small independent database 
large databases sizes skyline follows anti corr indep 
note size skyline necessarily grow size database 
observe nn algorithm winner experiment 
mentioned section dimensional particularly case nn algorithm 
bnl algorithms show relatively poor performance algorithms involve reading database nn algorithm tree order quickly retrieve skyline points 
likewise bitmap algorithm consider points database order compute full skyline 
due particular logic test point part skyline bitmap algorithm performs better worse bnl algorithms 
tree algorithm performs correlated independent databases 
shows poor performance anti correlated databases 
case tree algorithm read database order compute full skyline termination condition special trick algorithm apply particular data distribution 
furthermore tree algorithm fairly high overheads point compare point skyline points far 
comparing running times small large databases seen nn algorithm scales best 
running time stays constant running times algorithms increase sharply 
large database execution tree algorithm anti correlated database seconds produced points points total 
carried experiments databases performance experiments teo 
experiments nn bitmap tree algorithms ran faster 
general trends nn algorithm clear winner 
bitmap algorithm ball park bnl algorithms 
tree algorithm showed performance correlated independent databases terrible performance anti correlated database 
quality results mentioned earlier quality results important response time online algorithm 
user wants big picture 
shows full skyline database 
shows points returned nn algorithm user interaction shows points returned tree algorithm 
seen nn algorithm gives big picture skyline 
returns points fairly dimensions 
mentioned section nn algorithm adjust produce extreme points certain dimensions user wishes 
shows tree algorithm help produce big picture quickly 
btree algorithm returns extreme points dimension 
adapting experiment hotel example tree algorithm returns hotels cheap hotels close beach 
fails give user picture price distance tradeoffs 
addition user control 
bitmap algorithm scans database uses bitmaps order detect point part skyline 
clustering database determines points returned 
user control 
high dimensional skyline queries turn experiment studies behavior alternative algorithms dimensional skyline anti correlated data set points 
size skyline large points 
computing full skyline takes nn tree bitmap time points secs response user interaction secs skyline points returned user point table anti correlated large database long time regardless algorithm 
result online algorithm particularly important interactive applications scenario select relevant points skyline flooding user results give answers quickly 
table shows running times alternative algorithms produce skyline points 
addition shows quickly algorithms return points user preferences 
experiment tree algorithm produces results quickly takes second produce skyline points 
surprising algorithm simply needs scan extended tree specifically generated skyline query fixed dimensionality fixed origin return points extremely dimension nn bitmap algorithms need perform significantly logic 
tree algorithm order return results 
user gives preferences tree algorithm adapt right index created 
experiment simulated user interested point dimensions tree algorithm takes seconds find point points need inspected point returned 
user gives weight certain dimensions interactivity slightly improved 
terms interactivity nn algorithm clear winner 
user gives preference nn algorithm adjusts distance function returns point matches preferences immediately takes seconds nn algorithm adapt 
sense tree algorithm blindly scans skyline nn algorithm able selectively pick points skyline user preferences 
naturally blindly scanning overhead point selectively picking points 
bitmap algorithm competitive aspect 
produces skyline points approximately rate nn algorithm 
match nn algorithm terms interactivity produces skyline points somewhat random order clustering data 
particular experiment happened take seconds able return full skyline points nn alg 
points tree alg 
full partial anti correlated points point met user preferences 
interactivity bitmap algorithm improved multi dimensional indexes addition bitmaps best way extension implement nn algorithm 
carried experiments databases skyline queries dimensions distributions small large databases 
results nn algorithm typically winner respects regardless data distribution 
higherdimensional skyline queries tree algorithm produces results higher rate produces extreme points takes long produce points dimension 
rate bitmap algorithm produces results ball park nn algorithm bitmap algorithm lacks inter activeness nn algorithm provides 
high dimensional skyline queries bnl algorithms best choices order compute full skyline appropriate interactive environments 
instance takes algorithm seconds bnl algorithm seconds returning results scenario table 
comparing algorithm variants turn discussion performance tradeoffs variants nn algorithm skyline queries dimensions 
variants described section 
shows performance variants dimensional skyline anti correlated database points 
measured variants faire see section propagate see section merge faire merge regions duplicate see section hybrid propagate entries list 
duplicates prevented reduced propagation handled faire approach 
index list find entries list propagate hybrid variants 
variants clearly outperform variants 
merge faire variants spend time duplicates 
average nearest neighbor searches need carried order find new result 
clearly propagate hybrid variants benefit greatly index list experiments shown indicate trees common multi dimensional index structure purpose 
furthermore performance hybrid variant improved tuning 
experiments hybrid variant performed better list scanned fixed number entries list considered 
tuning approaches scope 
time secs nn prop nn faire nn merge nn hybrid points running times secs nn variants anti correlated points skyline queries important database applications including customer information systems decision support data visualization 
studied new online algorithm compute skyline queries 
algorithm called nn algorithm nearest neighbor search studied database operation 
compared new algorithm existing algorithms compute skyline batch existing algorithms progressively 
performance experiments identify clear winner 
algorithms particular virtues 
new algorithm nn algorithm gives big picture skyline quickly situations 
best choice full skyline needs computed 
addition raw performance algorithms differ significantly criteria 
nn algorithm algorithm gives user control process allows user give preferences 
tree algorithm gives extreme points preference points dimension returns points dimensions late 
bitmap algorithm scans database uses bitmaps order detect point part skyline 
result order points skyline returned determined clustering database 
furthermore applicability tree bitmap algorithms limited 
strongly believe nn algorithm skyline algorithm choice interactive environments 
main avenues 
plan improve performance nn algorithm exploiting new techniques nearest neighbor search 
second investigate special purpose main memory index structures order manage list nn algorithm initial experiments indicate existing techniques appropriate purposes 
third investigate nn algorithm combined algorithms 
instance possible nearest neighbor search order partition data space block nested loops algorithm order process region 
combined approach give big picture quickly continue compute full skyline efficiently 
acknowledgments christian hm helpful discussions tree implementation 
research partially supported german national research foundation dfg contract ko 
bd bitton dewitt 
duplicate record elimination large data files 
acm trans 
database systems 
bks nyi kossmann :10.1.1.21.2504
skyline operator 
proc 
ieee conf 
data engineering heidelberg germany 
bkss beckmann 
kriegel schneider seeger tree efficient robust access method points rectangles proc 
acm sigmod conference atlantic city nj may kung thompson number maxima set vectors applications 
jacm ck carey kossmann 
saying sql 
proc 
acm sigmod conference tucson az may 
hac hellerstein avnur chou olston raman roth haas 
interactive data analysis control project 
ieee computer september 
kung preparata 
finding maxima set vectors 
journal acm 
lar larson 
grouping duplicate elimination benefits early aggregation 
microsoft technical report january 
www research 
microsoft com 
mat matou sek 
computing information processing letters june 
mcl 
drawing contours arbitrary data points 
computer journal november 
ps preparata shamos 
computational geometry 
springer verlag new york berlin 
py papadimitriou yannakakis 
multiobjective query optimization 
proc 
acm sig mod sigact conf 
princ 
database syst 
pods santa barbara ca usa may 
roussopoulos kelley vincent 
nearest neighbor queries 
proc 
acm sig mod conference san jose ca may 
sm stojmenovic 
optimal parallel algorithm solving maximal elements problem plane 
parallel computing june 
ste steuer 
multiple criteria optimization 
wiley new york 
tan 
tan 
personal communication sept 
teo 
tan 
eng ooi 
efficient progressive skyline computation 
proc 
conf 
large data bases rome italy sept 
