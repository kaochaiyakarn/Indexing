centrum voor wiskunde en informatica just time strategy annotations van de pol software engineering sen sen march report sen issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax just time strategy annotations jaco van de pol jaco van de pol cwi nl cwi box gb amsterdam netherlands simple kind strategy annotations investigated giving rise class strategies including 
shown certain restrictions interpreter written computes normal form term bottom traversal 
main contribution correctness proof interpreter 
furthermore default strategy provided called just time satisfies criteria interpreter 
just time strategy better termination behaviour innermost rewriting interesting examples 
mathematics subject classification keywords phrases term rewrite systems trs strategy annotations interpreter normalization note research carried sen specification analysis embedded systems 

term rewrite system trs set directed equations 
term evaluated repeatedly replacing subterm instance left hand side equation redex corresponding instance right hand side reduct term reached contains redex normal form 
term redexes implementation follow certain strategy tells moment redex chosen 
strategy chosen ciency strategy results short rewrite sequences 
smart strategy may avoid infinite computations 
actual interpreter take account costs finding redex 
reason systems implement leftmost innermost rewriting may produce relatively long reduction sequences bad termination behaviour 
annotations simple way specify strategies 
contribution show class strategies includes leftmost innermost easy find redex 
strategy annotations 
consider term rewrite system trs function symbols variables rules named natural way normalizing term normalize try rule 
procedure avoids unnecessary reductions inside cases prevent non terminating computations 
argument doesn reduce instance open term term rewrite system incomplete second third argument normalized rule tried 
sketched procedure concisely represented strategy annotation strat 
say rule need argument match 
rule needs second third arguments compares 
say annotation time arguments evaluated rules need tried 
say annotation full argument positions rules occur 
full time annotation denoting left innermost strategy 
define default strategy evaluates arguments left right tries apply rule soon needed arguments evaluated 
call default strategy just time strategy 
note strat just time strategy 
contribution 
define normalizing function norm normalizes term strategy annotation function symbols 
traverses term computes normal form bottom fashion 
redex certain position replaced search proceeds position 
function design build actual interpreter programming language prove strategy annotation full time norm normal form proof yields extra information norm continues position previous redex equivalent particular memory strategy 
means chosen redex depends term previous reduction steps 
norm follows strategy infinite reduction sequences 
default strategy annotation called just time full time computed automatically satisfactory function definitions including boolean connectives conjunction disjunction 
results apply trs restrictions 
course non terminating trss interpreter need terminate non confluent trss normal form need unique interpreter find 
related 
survey strategies term rewriting 
focus normalizing strategies orthogonal systems 
strategy normalizing finds normal form exists 
orthogonality syntactic criterion ensures confluence 
non orthogonal systems theory normalizing strategies doesn exist 
theory independent strategies normalizing general theory applies non orthogonal term rewriting systems 
rewrite logic implementations allow user specify strategy 
elan rewrite implementation users define strategies :10.1.1.34.1184
rewrite rules viewed basic strategies composed sequential alternative conditional composition 
mechanisms control non determinism 
maude strategies defined inside logic reflection principle rewrite logic 
stratego incorporates recursive strategies general traversal patterns 
shown defined inside asf sdf :10.1.1.104.2067
mentioned strategy languages far richer annotations studied 
strategies complete sense strategy terminate reaching normal form trs 
systems advocate separation computations rules control strategies 
writing strategies user freely choose rules applied 
important applications specification program transformations 
far know analysis exists subclasses strategies complete important issue interested normal forms 
members obj family strategy annotations similar ones discussed 
obj annotation list integers 
similar denotes normalization 
basic definitions result th argument 
di erences 
mentioning rules individually obj uses denote reduction top level rule 
consequence obj complete annotation rules mentioned strategy corresponds innermost rewriting :10.1.1.34.1184
second di erence obj allows denoting argument normalized demand needed matching rule 
annotations specify lazy rewriting studied 
default strategy cafeobj similar just time annotation 
cite argument evaluate argument term rewrite rule defines operator place argument non variable term appears 
added place argument non left linear variable occurs 
extra condition necessary obtaining completeness result 
clear obj systems check completeness user provided annotation 
conditions completeness obj annotations studied 
non lazy annotations compared 
separate correction authors indicate result doesn hold non left linear trss 
results hold trss 
conditions strategy annotations weaker conditions annotations symbol depend rules left hand sides head symbol annotation allowed presence left hand side constant 
furthermore correctness proof provides extra information interpreter follows certain memory strategy case divergence 

strategy annotations date back ideas jasper pum walters 
time tried correctness proof lines failed 
implementation strategy tried new proof correctness 
stefan blom mark van den brand jozef bas vincent van hans zantema inspiring discussions helpful hints 

basic definitions result preliminaries take standard definitions term rewriting 
presuppose set variables function symbols expecting fixed number arguments denoted arity 
terms variables function symbol applied terms denoted 
arity head denote topmost function symbol positions string integers 
denote empty string 
denote subterm position defined position see formal definition 
case 
denote term replaced write prefix 
rewrite rule pair terms variable variables occurring occur 
term rewrite system trs set rewrite rules 
substitution mapping variables terms denote term variables replaced 
trs induces rewrite relation terms follows rule note identify step taken 
called redex normal form term contains redex 
strategy annotations strategies strategy annotation function symbol trs list elements number arity rule head loss generality assume annotation duplicates occurs 
write empty annotation annotation head tail sequel range argument positions rewrite rules 
starts natural number rewrite rule 
index needed left hand side 
variable variable occurs strategy annotation full arity rule head strategy annotation time il needed 
full time annotation needed positions occur 
distinguishing feature notion needed follows lemma 
argument needed 
proof 

needed variable 

needed doesn occur define strategy associated strategy annotation 
strategy viewed partial function term yields redex pair rule substitution 
case alternatively function may yield undefined redex 
complete strategy yields normal form 
sequel fixed trs supposed fixed strategy annotation strat write strat abbreviation strat head strategy annotation head symbol strat variables say strat full time strat full time symbols define redex computes redex contracted strat definition redex redex strat redex redex redex redex redex redex definition proceeds induction strategy annotation recursive call term gets smaller remains equal list gets smaller 
function terminates 
show full annotations associated strategy complete proposition strat full redex normal form proof proof induction assume normal form 
contains redex top level proper subterm 
distinguish cases covers deterministic step memory strategies 

basic definitions result assume rule induction show redex defined 
fullness strat redex redex strat defined 
assume contains redex 
induction hypothesis show induction redex defined 
fullness strat redex redex strat defined 
problem statement strategy associated reduction sequence defined follows seq redex seq previous proposition normal form obtained seq infinite sequences undefined 
computational drawback step term traversed find redex 
repeats lot previous step 
nice search continued position propose partial function norm tries find normal form fixed strategy annotation strat view function design interpreter 
definition norm norm strat norm norm norm norm norm norm norm avoiding position notation clause written alternatively norm 

norm 
norm 

non terminating term norm diverge case undefined 
section devoted technical core viz 
correctness norm 
prove theorem strat time norm seq 
follows immediately propositions 
combination propositions obtain full time strategies norm normal form 
counter examples may illustrative show conditions annotations needed 
consider system rules additional rule strategy annotation time matches argument 
consider term 
rule immediately applicable 
reduction tried 
annotation norm normal 
similarly time non linear second third argument 
annotation norm 
normal due fact tried early 
full argument position missing 
annotation norm normal 
examples show conditions dropped general 
certain cases weakened 
instance annotation full harmless applies term head symbol weakening inessential behaviour interpreter exactly full strategy 

correctness proof proof distinct parts 
identify series redexes contracted norm straightforward due doubly recursive definition 
program transformation find equivalent function norm double recursion eliminated favour stack containing return points 
definition series redexes easily extracted section 
sight norm doesn follow memory strategy finding redex position continues search onwards 
redex function depends state redex function form redex redex denotes state 
second step proof section shows annotation time state doesn influence redex 
redex equivalent ways redex redex 
proof finished observation initial state redex redex 
making recursion explicit section eliminates double recursion norm 
transformation replace recursion subterms recursion positions 
possible return previous stage 
specify norm norm definition defining equations norm calculate section recursive definition norm norm norm norm strat norm norm norm norm strat eliminate double recursion favour stack list pairs previous positions strategies executed 
introduce recursive specification norm norm norm norm norm specification recursive equations derived norm derive section recursive equations norm norm norm norm norm norm strat norm norm norm strat explicit definition easy guess redex norm take current state stack 
gives rise definition redex 
result 
correctness proof triple denotes redex previously stack replacing redex redex redex redex strat redex redex redex strat function redex define second rewrite sequence 
time sequence memory step changes state stack system 
seq redex seq order check redex yields redex contracted norm state take specification norm seq definitions seq redex derive recursive equations norm section appear exactly norm summarize result section proposition norm strat seq strat 
proof norm norm norm norm 
norm norm norm 
result follows norm seq previous 
connecting memory state strategies su cient prove seq strat seq 
case redex yields redex redex reachable states show stack formed defined 
show fact redex independent current state redex redex strat stacks encountered lemma 
show redex strat redex lemma 
define set formed stacks intuitively positions stack form proper path annotations stack time nodes visited 
definition set formed stacks defined inductively follows formed 
formed time strategy annotation head 
formed formed position time strategy annotation head lemma strat time invariant redex norm seq stack formed 
proof strat formed initial condition property preserved recursive calls 
relies assumption strategy annotations contain duplicates 
finding redex finding redex lemma lemma lemma search mimicked technical lemma core proof 
shows searching state yields redex search mimicked lead state see 
key proof rule applicable reduction inside occur argument needed rule applicable 
lemma strat time 
formed stack 
redex 
redex redex 

strat 

redex redex 
proof 
induction structure equal structure proof proceeds case distinction 
induction case 

starting stack term redex reduces number steps 
proof proceeds mimicking reduction starting stack term proof induction number recursive calls redex 
lemma strat time 
redex strat redex redex strat 
proof follows previous lemma 
follows previous lemma 
prove relationship redex redex 
implementation applications lemma 
redex redex strat 
redex redex strat proof proof follows propositions proved simultaneous induction structure equal 
redex redex 

redex redex redex 
proposition strat time seq strat seq 
proof lemma lemma definition seq strat transformed definition seq see appendix 

implementation applications constructed implementation function norm acts interpreter trs annotated strategy 
default system computes just time strategy initialization 
implementation issues dealt 
rule annotation copy redexes times 
implementation maximally shared terms dags occurs 
implementation uses cient annotated term library providing maximally shared terms garbage collection term tables memoization free 
issue rule annotation normalized called 
doesn know normal traverse avoid subterms known normal marked 
get marked argument doesn traverse 
annotation just time strategy get unmarked 
consider rule 
innermost rewriting normalized passing result function calls function respectively 
functions expect normal forms arguments 
note term built annotation possible 
build term passed normalization 
point face penalty compared innermost rewriting term formation relatively expensive especially maximally shared terms 
just time strategy defined follows 
function symbol arity take list 

insert rule directly argument position needs due matching non linearity 
rules placed textual order original specification maintained 
applied interpreter specifications satisfactory results 
application domain verification distributed systems system specification process part algebraic data specification part 
theorem prover implemented solve boolean combinations equalities algebraic data specification combination bdds term rewriting lines 
cases innermost rewriting didn lead normal form 
list number rules order illustrate point count empty count tail div div rem rem closed lists count terminates just time annotation assuming standard definitions empty tail diverges innermost rewriting 
solved pattern matching 
solution easily available div rem division remainder 
assuming standard definitions positive just time annotation diverge innermost rewriting 
just time annotation 
annotation eq div terminates numerals provided eq just time strategy works left right 
cient start argument 
devise algorithm transform trs reordering arguments function symbols 
general study full time annotations yields cient strategy trs 

open problems mentioned examples just time strategy better termination behaviour innermost rewriting 
generalize conjecture trs strat full time strategy annotation 
strongly leftmost innermost normalizing strategy strat terminates 
rules non root overlapping strongly dropped 
important result rewrite implementation transition leftmost innermost just time rewriting repercussions users 
improvement conservative sense previous examples terminate 
restricted attention deterministic strategies 
dividing annotations groups denote non deterministic strategies 
denote innermost strategy just left innermost 
proof machinery redexes replaced sets redexes deterministic sequences transition systems 
fact proof bisimulation proof sequences technique carries transition systems straightforward way straightforward implementation annotation choose normalize argument completely second memory 
memory strategy allow alternations steps second argument 
indication non deterministic case di erent trs toyama counter example conjecture innermost reduction terminates 
non deterministic strategy indicated allows infinite reduction 
history sensitive non deterministic strategies form coalgebra state state erm memory 
strategy memory state erm deterministic set right singleton 

baader nipkow 
term rewriting 
cambridge university press 

dubois kirchner kirchner 
moreau ringeissen vittek 
elan user manual 
available elan loria fr 

kirchner kirchner ringeissen 
rewriting strategies elan functional semantics 
international journal foundations computer science march 
appear 

van den brand de jong klint olivier 
cient annotated terms 
software practice experience 

van den brand klint olivier 
compilation memory management asf sdf 
editor th int 
conf 
compiler construction cc volume lncs pages 
springer 

clavel duran eker lincoln mart oliet meseguer quesada 
maude manual specification programming rewriting logic 
available maude csl 
sri com 

clavel duran eker lincoln mart oliet meseguer quesada 
maude system 
narendran rusinowitch editors proceedings th international conference rewriting techniques applications rta pages 
springer verlag lncs 

fokkink walters 
arm reach compilation left linear rewrite systems minimal rewrite systems 
acm transactions programming languages systems 

fokkink walters 
lazy rewriting eager machinery 
acm transactions programming languages systems january 

fokkink van de pol 
simulation correct transformation rewrite systems 
editors th int 
symp 
mathematical foundations computer science mfcs lncs pages bratislava 
springer 

goguen winkler meseguer futatsugi 
jouannaud 
introducing obj 
goguen malcolm editors software engineering obj algebraic specification action 
kluwer 

groote van de pol 
equational binary decision diagrams 
parigot voronkov editors logic programming reasoning lpar volume lecture notes artificial intelligence pages 
springer 

klop 
term rewriting systems 
gabbay maibaum editors handbook logic computer science volume 
oxford university press 

visser 
specification rewriting strategies 
sellink editor second international conference theory practice algebraic specification asf sdf electronic workshops computing 
springer verlag 

nakagawa sawada futatsugi 
cafeobj user manual version 
available www ipa go jp stc index html 

nakamura ogata 
evaluation strategy head normal form demand flags 
futatsugi editor rd int 
rewriting logic applications volume electronic notes theoretical computer science 
elsevier 

visser 
stratego tutorial manual 
available www 
stratego language org 
laws positions laws hold terms positions cf 
lemma 
silently sequel 
program transformations norm norm take definition norm norm calculate norm norm norm norm norm strat norm strat norm strat norm norm norm norm norm norm norm norm strat norm norm strat introduce abbreviation norm norm norm norm norm norm strat norm norm strat program transformations norm norm take definition norm norm norm norm calculate norm norm norm norm norm norm norm norm norm strat norm strat norm norm norm norm norm norm norm norm norm norm norm norm strat norm norm strat norm strat seq norm take definition norm seq times redex redex seq seq 
calculate norm seq redex norm seq redex redex seq norm norm seq redex strat seq strat seq strat norm strat norm seq redex redex seq norm norm seq redex redex strat seq strat norm strat full proofs lemma proof lemma 
strat time formed stack assume redex prove redex redex 
induction proceed case distinction case redex redex definition 
contradiction assumption 
redex redex induction hypothesis redex note redex redex strat induction hypothesis redex induction hypothesis redex proof lemma 
strat time formed stack assume redex 
prove strat 
induction impossible revisited stack formedness 
full proofs lemma redex redex strat lemma redex induction hypothesis strat 
strat definition redex redex redex induction hypothesis strat 
proof lemma 
strat time formed stack assume redex prove redex redex 
starting stack term redex reduces number steps 
proof proceeds mimicking reduction starting stack term see 
proof induction number recursive calls redex 
distinguish cases 
note redex redex similarly redex redex 
result 
formedness note induction hypothesis redex redex 

redex redex strat 
distinguish cases lemma strat 
redex redex strat redex strat redex note new stack formed assumption annotations duplicates 
induction hypothesis 
redex redex strat head head redex strat induction hypothesis redex 
note redex strat contradicts fact case dealt part 

prove 
done distinguishing cases 
case revisited formedness time argument needed rule lemma 
redex redex 
similarly redex redex 
induction hypothesis equals redex 
proof lemma 
strat time redex strat 
prove redex redex strat 
redex lemma redex strat redex strat 
redex lemma redex strat head head redex strat proof lemma 
prove 
redex redex 

redex redex redex 
proof simultaneous induction proof proceeds case distinction 
redex impossible 
redex definition redex redex 

redex distinguish cases redex strat redex redex redex redex strat induction hypothesis redex induction hypothesis redex strat redex redex strat induction hypothesis full proofs lemma 
redex redex strat redex 
redex redex strat induction hypothesis redex induction hypothesis redex 
redex distinguish cases 
redex redex strat redex redex redex redex induction hypothesis 
redex 
redex redex redex redex induction hypothesis redex proof proposition 
prove seq strat seq 
order program transformation introduce specification definition seq seq strat calculate seq seq strat redex strat seq lemma redex strat seq strat redex strat seq lemma redex seq exactly defining equation seq 
