specifications code casl david aspinall donald sannella laboratory foundations computer science division informatics university edinburgh 
status common framework initiative cofi common algebraic specification language casl briefly 
important outstanding point concerns relationship casl programming languages making proper connection obviously central casl specifications software specification development 
issues involved making connection discussed 
common framework initiative abbreviated cofi open international collaboration aims provide common framework algebraic specification development software consolidating results past research area 
cofi initiated response proliferation algebraic specification languages 
time despite extensive past collaboration main research groups involved high degree agreement concerning basic concepts field gave appearance extremely fragmented seen serious obstacle dissemination algebraic development techniques 
tools supporting algebraic techniques developed academic community gained wide acceptance partly isolated usability tool di erent specification language 
main activity cofi design specification language called casl common algebraic specification language intended formal specification functional requirements modular software design subsuming previous specification languages 
development prototyping verification tools casl leads interoperable capable combination isolation 
design casl proceeded hand hand semantics methodology tool support provided vital feedback regarding language design proposals 
detailed description casl see cof tutorial bm formal semantics cof 
section provides brief taste main features 
casl design documents available main cofi web site cof 
main activity cofi inception design casl including semantics documentation tool support 
essentially finished 
language design complete approved ifip wg rounds reviewing 
formal semantics casl complete documentation including book containing user guide documents nearing completion 
selection tools supporting casl available prominent casl tool set cats mos combines parser static checker pretty printer facilities printing signatures specifications structure graphs casl specifications encoding casl specifications second order logic mos providing links various verification development systems including isabelle 
focussed collaborative activity nowadays tool development see www tzi de cofi tools 
various topics algebraic specification casl context examples see ms bst 
completion design activity encouraging level casl actual applications 
contrast previous algebraic specification languages inventors students collaborators casl users connection design 
casl begun industry applications software specification include tentative role omdoc project communication storage mathematical knowledge koh 
casl appears recognized de facto standard language algebraic specification 
important aspect specification language way specifications relate programs 
di cult issue see ks discussion serious problems specification program interface encountered extended ml 
approach taken casl outlined section involves abstracting away details programming language 
works point leaves certain questions unanswered 
section briefly outline number issues relationship casl specifications programs deserve attention 
aim raise questions answer 
discussion tentative gloss technical details 
taste casl casl basic specification denotes class sorted partial order structures algebras functions partial total predicates allowed 
classified signatures list sort names partial total function names predicate names profiles functions predicates 
sorts partially ordered subsort inclusion relation 
apart introducing components signatures casl basic specification includes axioms giving properties structures considered models specification 
axioms order logic built atomic formulae include strong existential equalities definedness formulae predicate applications generation constraints added special non order sentences 
concise syntax provided specifications datatypes constructor selector functions 
example basic specification free types nat sort pos pos suc pre nat op pre nat nat axioms def pre nat pre suc pred nat var nat suc remaining features casl depend details features basic specifications part design orthogonal rest 
reflected semantics variant notion institution gb called institution symbols mos 
readers unfamiliar notion institution corresponds roughly logical system appropriate writing specifications 
semantics basic specifications regarded defining particular institution symbols rest semantics arbitrary institution symbols 
important consequence sub languages extensions casl defined restricting extending language basic specifications need reconsider change rest language 
casl provides ways building complex specifications simpler ones simplest ones basic specifications means various operations 
include translation hiding union free loose forms extension 
structured specification denotes class sorted partial order structures basic specifications 
structure specification reflected models specification modular style 
structured specifications may named named specification may generic meaning declares parameters need instantiated 
instantiation matter providing appropriate argument specification fitting morphism parameter argument specification 
generic specifications correspond known specification languages pushout style parametrized specifications 
example generic specification referring specification named partial order assumed declare sort elem predicate spec list order partial order free type list elem nil cons hd elem tl list elem local op insert elem list elem list elem vars elem list elem axioms insert nil cons nil insert cons cons insert insert cons cons insert op order list elem list elem vars elem list elem axioms order nil nil order cons insert order architectural specifications casl describing modular structure software constrast structured specifications structure presentation purposes 
architectural specification consists list unit declarations indicating component modules required specifications unit term describes way modules combined 
units normally functions map structures structures specification unit specifies properties argument structure required satisfy properties guaranteed result 
functions required persistent meaning argument structure preserved intact result structure 
corresponds fact software module imports supplied altering 
simple example architectural specification referring ordinary specifications named list char nat assumed declare sorts elem list elem char nat respectively arch spec cn list units char nat elem list elem result fit elem char fit elem nat architectural specifications including examples may bst 
specifications programs primary specifications describe programs casl abstracts away details programming languages programming paradigms common algebraic specification 
connection programs indirect partial order structures similar mathematical models program behaviour 
assume program determines casl signature sig programming language hand comes equipped semantics assigns program denotation partial order structure alg sig 
regarded satisfying specification sp sig sig sp sp sig sp sp alg sig sp semantics casl 
type systems programming languages match casl partial order structures suitable capturing program behaviour 
case may simply replace institution basic specifications casl tailored programming language hand 
example 
suitable institution standard ml sml consist components 
signatures sml signatures precisely environments defined static semantics sml semantic counterparts 
components signatures type constructors typed function symbols including value constructors exception constructors substructures having signatures 
type system sml functions may higher order polymorphic 
models style model suitable capturing behaviour sml programs 
example take environments defined dynamic semantics sml closures represent functions 
sentences choice syntax axioms extended ml kst extension syntax sml boolean expressions quantifiers extensional equality termination predicate 
satisfaction sentences models dynamic semantics sml satisfaction sentence model defined verification semantics kst 
variant sorting specification shown earlier sml instantiation casl adjusting syntax basic specifications 
spec list local val insert bool list list vars list axioms insert leq nil cons nil leq insert leq cons cons insert leq leq insert leq cons cons insert leq op order bool list list vars list axioms order leq nil nil order leq cons insert leq order leq example 
institution simplified version java defined combining recasting ideas java nop jml lbr 
signatures signature represent type information collection classes including class names types names fields methods class subclass relationship classes 
models natural choice models execution traces version java virtual machine nop 
trace sequence states including representation heap current collection objects program counter indicating method executed stack containing actual arguments invoked 
sentences appropriate choice sorted order logic non side ecting java expressions terms 
specifying object oriented systems desirable allow class invariants express properties values fields objects method pre post conditions express behaviour methods 
post conditions need way refer previous state possibilities auxiliary variables hoare logic nop old function jml lbr result value method non void returning methods 
possible add constructs specifying exceptional behaviour termination conditions 
satisfaction roughly class invariant satisfied model satisfied state execution trace method pre post condition satisfied pre condition implies post condition pairs states corresponding particular method call return points 
practice need careful certain intermediate states class invariants may temporarily violated see lbr ways describing ways specifying frame conditions restrict part state method allowed alter 
example 
institution haskell casl described sm 
relates closely normal order casl institution studied detail sketches java sml 
overview signatures consist haskell style type classes including type constructors type aliases type schemes operators 
way reduce rich signatures simpler ones close ordinary casl higherorder functions 
models models basic signatures intensional henkin models 
institutions outlined choice reflects computationally oriented viewpoint allowing particular models capture operational interpretations 
sentences satisfaction full formulae similar order casl reduced restricted internal logic satisfaction defined 
institutional approach takes model theoretic view says sentences proved hold 
require associated entailment system see mes 
unresolved issues defining institution specifying programs programming language examples provides link casl programming language hand 
gives adequate framework analysis process developing programs specifications stepwise refinement casl architectural specifications see bst bst 
part bigger detailed story 
notice syntax programs appear institutions outlined examples 
expect full account take consideration structure programming language regarding monolithic set notations describing model 
combining specifications programs point specification structure general unrelated program structure sense completely di erent structure initial requirements specification eventual implementation 
connect formally useful path 
architectural specifications casl intended provide mechanism specifying implementation structure 
architectural specifications casl certain model building operators defining units 
defined analogously specification building operators available structured specifications 
including renaming hiding amalgamation definition generic units 
semantics model building operators defined arbitrary institution symbols specific programming language chosen remains decide model building operators realised bst 
may defined directly programming language 
example 
continuing example sml architectural unit structure possibly containing substructures generic unit corresponds functor 
ways units combined casl correspond ways structures functors combined sml possible define renaming hiding amalgamation language 
example 
continuing example java architectural unit best identified set related classes belonging package 
java visibility modifiers interfaces control access units dedicated program level syntax combining pieces higher level organization 
operations constructing architectural units casl simulated meta operations java program syntax 
corresponding generic unit treat generic units meta level macros expanded instantiation 
casl model building operators definable programming language may preferable source level transformations realise 
choice part explaining instantiate casl particular programming language 
casl provides model building operations combining units built syntax constructing basic units 
way link specific programming language add syntax programming language basic units syntax combining units sml functors 
simple example unit definition sml syntax assuming partial order slightly adapted sml syntax unit partial order struct type elem int int fun leq orelse andalso mechanism gives casl language writing specifications pieces programs inside specifications induce proof obligations 
conversely explain called wide spectrum approaches specification pieces specification written inside programs exemplified extended ml jml 
adopting wide spectrum approach formal development may risk early commitment particular program structure appealing programmers introduced specification annotations gradually needing learn new language 
institution ipl programming language pl imagine crude way adding assertions language attaching sentences ipl programs reality want attach sentences closely area program refer depends specific language considered 
scenarios discussed visualized wide spectrum pl casl ipl pl pl ipl wide spectrum pl programming language pl extended specification annotations casl ipl casl extension institution ipl side need consider combine static semantics languages interpret pieces programs specifications surrounding context 
frameworks specifying boundary programming specification quite 
models programs vs models specifications activities specification programming quite di erent 
specification languages put premium ability express properties functions data convenient concise way programming languages concern expressing algorithms data structures 
vs distinction leads obvious di erences language constructs 
subtle di erences arise level models 
explained section casl approach kind models programs specifications 
example st shows lead problems 
example 
equiv sentence asserts equiv true turing machines godel numbers compute partial function expressible order logic equality 
consider specification local op equiv nat nat bool axioms equiv op opt nat nat vars nat axioms equiv opt true specifies optimizing function opt transforming tms equivalent tms 
axioms added require output opt cient input 
models require functions computable examples specification models computable function equiv satisfying equiv computable functions opt having required property instance identity function nat 
specification disallows programs provide exactly required functionality 
example demonstrates potential problem concrete models operational semantics standard ml 
problem disappear uses models denotational semantics example 
models impose restrictions function spaces order interpret fixed point equations 
restrictions imposed desire reflect accurately constraints programming way predicate equiv function extending models interpret predicates way predicates required undecidable 
language imposes example functions polymorphic language sml required parametric behave uniformly type instances 
imposing restrictions gives rise examples 
example illustrates problem needs solved di erent question 
ect meaning quantification hold quantifier ranges parametric functions wad pa 
di erent problem arises signatures programs specifications 
specification purposes want richer signatures auxiliary components meant implemented specifying main components meant implemented 
example predicates specifying class invariants jml lbr 
addition auxiliary components substantive problems catered simple view relationship specifications programs section 
relationships levels languages classical topic semantics compiler correctness see bl mor diagram plays central role pl pl pl source language pl target language compiler semantics pl pl respectively kind encoding simulation relating results delivered compiler said correct diagram commutes pl result interpreting properly related result interpreting pl institutions pl pl may recast require compilation preserve satisfaction properties 
formulation require programs pl sentences sig result compiling translation property terms set sentences sig closed negation equivalent obtained replace called institution encoding tar cf 
gr name forward institution morphism concept 
issue great practical importance interlanguage working programs programming language directly libraries components written 
way achieve low level intermediate language common target compilers programming languages question 
microsoft net platform example cil common intermediate language mg 
framework faced architectural specification form arch spec asp units sp sp result 


consider implementing language di erent language 
satisfies sp satisfies sp possible combine indicated asp obtain program common intermediate language appropriate conditions satisfying sp satisfying sp 
considered various issues connecting programming languages casl including possibility connecting languages allow inter language implementations 
characterised setting working specifications programs framework formal development 
important question want specifications 
various possibilities 
specifications basis testing gau generate code run time error checking llp may basis additional static analysis 
traditional hope able prove properties specifications prove implementations satisfy specifications 
common approach connect specification language existing theorem prover 
range strategies 
extremes represented shallow embedding formalizes just semantics represented language directly theorem prover logic deep embedding formalizes syntax language represented meaning function describes semantics theorem prover logic ram 
shallow embeddings advantage direct reasoning theorem prover logic require degree compatibility logic language formalized 
deep embedding contrast flexible typically di cult proof principles represented language may derived 
deep embeddings may allow formalization meta properties language represented useful depends application 
existing connecting theorem provers languages cats mos hascasl sm shallow embeddings java nop asl fpc asp deep embeddings case java object formalization prove meta properties java reason java programs 
astesiano bidoit kirchner krieg bruckner mosses sannella tarlecki 
casl common algebraic specification language 
theoretical computer science 
appear 
hutter mantel 
system description logic voyager 
proc 
th intl 
conf 
automated deduction 
springer lnai 
astesiano krieg bruckner 
kreowski editors 
algebraic foundations systems specification 
springer 
asp aspinall 
type systems modular programming specification 
phd thesis university edinburgh 
bainbridge freyd scedrov scott 
functorial polymorphism 
theoretical computer science 
bl burstall landin 
programs proofs algebraic approach 
meltzer michie editors machine intelligence 
edinburgh university press 
bm bidoit mosses 
gentle casl 
tutorial wadt cofi workshop etaps genova 
available www lsv ens cachan fr bidoit casl 
bst bidoit sannella tarlecki 
architectural specifications casl 
formal aspects computing 
appear 
bst bidoit sannella tarlecki 
global development local observational construction steps 
proc 
th intl 
symp 
mathematical foundations computer science warsaw 
springer lncs 
appear 
cof cofi 
common framework initiative algebraic specification development electronic archives 
notes documents accessible www brics dk projects cofi 
cof cofi language design task group 
casl cofi algebraic specification language summary version 
documents casl summary cof 
cof cofi semantics task group 
casl cofi algebraic specification language semantics version 
documents casl semantics cof 
detlefs leino nelson saxe 
extended static checking 
technical report compaq src palo alto usa 
gau 
gaudel 
testing formal 
intl 
joint conf 
theory practice software development tapsoft aarhus 
springer lncs 
gb goguen burstall 
institutions model theory specification programming 
journal assoc 
computing machinery 
gr goguen rosu 
institution morphisms 
formal aspects computing 
appear 
koh 
omdoc open markup format mathematical documents version 
available www org omdoc index html 
ks sannella 
reflections design specification language 
proc 
intl 
colloq 
fundamental approaches software engineering 
european joint conferences theory practice software etaps lisbon 
springer lncs 
kst sannella tarlecki 
definition extended ml gentle 
theoretical computer science 
lbr leavens baker ruby 
preliminary design jml 
technical report tr department computer science iowa state university 
llp leavens leino poll ruby jacobs 
jml notations tools supporting detailed design java 
oopsla companion minneapolis 
mes meseguer 
general logics 
logic colloquium 
north holland 
mg meijer gough 
technical overview language infrastructure 
available research microsoft com papers clr pdf 
mor morris 
advice structuring compilers proving correct 
proc 
rd acm symp 
principles programming languages 
acm press 
mos mossakowski 
casl semantics tools 
tools algorithms construction analysis systems tacas european joint conferences theory practice software berlin 
springer lncs 
mos mossakowski 
specification arbitrary institution symbols 
trends algebraic development techniques selected papers wadt bonas 
springer lncs 
mos mossakowski 
relating casl specification languages institution level 
theoretical computer science 
appear 
ms machado sannella 
unit testing casl architectural specifications 
proc 
th intl 
symp 
mathematical foundations computer science warsaw 
springer lncs 
appear 
milner tofte harper macqueen 
definition standard ml revised 
mit press 
nop nipkow von oheimb 
java embedding programming language theorem prover 
bauer editors foundations secure computation 
proc 
intl 
summer school marktoberdorf 
ios press 
pa plotkin abadi 
logic parametric polymorphism 
proc 
intl 
conf 
typed lambda calculi applications amsterdam 
springer lncs 
ram boulton gordon gordon herbert van 
experience embedding hardware description languages hol 
proc 
international conference theorem provers circuit design theory practice experience nijmegen 
north holland 
sm schroder mossakowski 
hascasl integrated specification development haskell programs 
proc 
th intl 
conf 
algebraic methodology software technology 
springer lncs volume 
st sannella tarlecki 
mind gap 
versus concrete models specifications 
proc 
st intl 
symp 
mathematical foundations computer science 
springer lncs 
tar tarlecki 
heterogeneous specifications 
gabbay van rijke editors proc 
intl 
conf 
frontiers combining systems 
research studies press 
wad wadler 
theorems free 
proc 
th intl 
conf 
functional programming computer architecture 
acm press 
wahbe lucco anderson graham 
cient software fault isolation 
acm sigops operating systems review december 
