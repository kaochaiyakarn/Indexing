industrial take formal methods safety critical areas perspective jonathan bowen victoria oxford university computing laboratory programming research group road oxford ox qd uk 
email jonathan bowen comlab ox ac uk department computer science royal holloway university london egham surrey tw ex uk 
email victoria dcs rhbnc ac uk 
formal methods may crossroads acceptance wider industrial community 
order techniques widely gap theorists practitioners bridged ectively 
particular safety critical systems er application area formal methods may engaged usefully bene 
discusses issues concerned general acceptance formal methods concludes summary current position formal methods community proceed improve matters 
err human really foul things requires computer 
farmers capsules wisdom software computers progressively complex size computers increased price decreased 
unfortunately software development techniques kept pace rate software production improvements hardware 
errors software renowned software manufacturers general issued products acceptable established industrial engineering sector 
suggested formal methods possible solution help reduce errors software 
claim methods infeasible realistically sized problem 
sensible proponents recommend applied selectively advantage 
claimed formal methods despite apparent added complexity design process reduce cost software 
reasoning cost speci cation design software increased small part total cost time spent testing maintenance may considerably reduced 
formal methods errors eliminated earlier design process subsequent changes easier software better documented understood 
technology transfer problems extract bbc television program arena broadcast uk october graphically illustrates publicly demonstrated gap computing electronics industry formal methods community safety critical systems arguably potential bene gain formal methods 
narrator formal methods immature science criticized impractical 
phil bennett iee face problem today putting increasing numbers systems need assess 
engineers tools available today tools understand 
unfortunately mathematical base formal methods engineers safety critical systems familiarity full bene 
thomas chairman praxis plc write mathematical description behaviour system designing don understand 
mathematics advanced support ability write means mechanism write precisely behaviour 
case doing people lives system de nition don understand going behave circumstances 
build complex safety critical systems excuse doing 
typical substantial technology transfer problems debate pro real world radical pro formal methods camps software engineering 
misconceptions barriers unfortunately formal methods misunderstood relevant terms misused industry eyes formal methods community 
example alternative de nitions formal specication taken glossary issued ieee 
speci cation written approved accordance established standards 

speci cation written formal notation proof correctness 
meaning formal notation elaborated glossary proof correctness de ned general terms 
confuse formal methods structured methods 
research underway link formal basis structured methods see communities sharply divided apart notable exceptions 
called formal methods concentrated notations tools addressed slotted existing industrial best practice 
hand structured methods provide techniques developing software requirements code normally diagrams document design 
data structures de ned easily formalized relationships structures left de ned informal text natural language 
industry understandably reluctant formal methods largely untried practice 
methods touted market place formal methods just form 
trying new techniques rst time cost failure prohibitive initial cost training high 
formal methods particular engineers programmers managers currently skills apply techniques bene cially ability 
unfortunately software adds complexity system today formal techniques mechanical tools intractable analyze simplest systems exhaustively 
addition normal concept tolerance engineering applied software 
merely changing bit object code program may catastrophic unpredictable ect 
software provides versatility viable means developing products 
formal methods topic research theoretical computer science community 
relatively novel concept people computing industry 
industrial research laboratories investigating formal methods examples formal methods real commercial projects 
companies formal methods normally limited extent resisted initially engineers programmers managers 
isan excellent article helps unfounded notions beliefs formal methods 
quite widely considered infeasible formal techniques verify software industrial setting 
number case studies examples real available formal methods acceptable industrial circles 
notable mentioned particularly quantitative indication bene ts gained published 
modes formal methods may number levels usage provide di erent levels assurance resulting software developed 
misunderstood assume formal methods means proved correct 
fact current industrial formal methods involves minimal proofs 
basic level formal methods may simply high level speci cation system designed notation 
level usage apply formal methods development process vdm set rules design calculus allows stepwise re nement operations data structures speci cation ciently executable program 
rigorous level process proof may 
hand proofs design inevitably lead human errors occurring simplest systems 
mechanical theorem provers hol boyer moore system verify signi cant implementations need operated people skills engineers possess today 
tools di cult experts great improvements need usability tools widely accepted computing industry 
tools commercially available tool lambda little interest industry large 
eventually commercial pressures improve similar tools mainly research environments 
particular user interface control proofs strategies tactics whilst improving areas require considerable research development ort 
cost considerations prerequisite industrial uptake formal techniques formalism adequately deal pertinent aspects computer systems 
existence formalism su cient relevant technology able address problems industry integrating currently techniques commercially advantageous 
noted despite mathematical basis formal methods errors possible mechanical veri cation computers 
formal methods demonstrated reduce errors costs time market appropriately 
general formal development increase costs 
example users meeting andrew bradley british aerospace reported typical productivity gures di erent development approaches terms lines code loc man year non safety critical code loc normal safety critical code loc full formal development loc formal methods incurs higher development costs predominant factor 
critical considerations greater lesser extent depending market growth rates development speed nal product cost 
evident formal methods deliver cheaper products rapidly 
current technology formal methods easily slow speed process reverse possible formal methods selectively 
case specialized markets high integrity sector factors product quality concern 
consideration formal methods enhance product quality prestige 
industrial scale usage previously mentioned take formal methods great industry normally successful applied appropriately 
companies managed specialize providing formal methods expertise ora canada praxis uk examples exceptional 
international investigation formal methods industry provides view current situation comparing signi cant projects serious techniques 
provides survey selected projects companies methods design safety critical systems gives view industrial sector uk 
critical systems reliability safety paramount 
extra cost involved formal methods acceptable mechanization formal proofs may critical sections software 
cases total cost time market highest importance 
projects formal methods selectively rigorous proofs just speci cation 
formal documentation key components may provide signi cant bene ts development industrial software systems excessive demonstrably decreased cost see 
application areas techniques formal methods applicable wide variety software hardware 
useful abstraction development process requirements capture speci cation design coding compilation underlying digital hardware 
research projects speci cation investigating formal relationships di erent levels important toavoid errors 
example suggested approach project organization formal methods provided 
cleanroom approach technique easily incorporate existing formal notations produce highly reliable software means non execution program development 
technique applied successfully rigorous software development techniques proven track record reducing errors signi cant factor safety critical non critical applications 
programs developed separately informal just mental proofs certi ed tested 
errors process program changed 
pragmatic view real programs large formally proved correct written correctly rst place 
possibility combining cleanroom techniques formal methods investigated 
considerable research object oriented extensions existing formal notations subject active discussion communities 
object oriented techniques considerable success take industry research lead practical method combining techniques 
currently large number di erent dialects needs occur industry embrace notations large degree 
important neglected part designed system documentation particularly subsequent changes 
formalizing documentation leads ambiguity errors 
formal speci cation proved bene cial practice cases 
allows possibility formal development subsequently experience gained 
human computer interface hci increasingly important component software systems 
errors occur due misunderstandings caused poorly constructed interfaces 
formalizing hci realistic useful manner di cult task progress categorizing features interfaces may help ensure reliability 
considerable scope research spans disparate disciplines particularly application safety critical systems human errors easily cause death injury 
motivation formal methods standards relatively standards concerned specifically formal notations methods 
formal notations software related standards describing semantics bnf style descriptions universally accepted describing syntax 
case formal notations standards mounting formalisms increasingly understood accepted relevant readership 
hopefully produce precise ambiguous standards considerable debate subject widely di ering views different countries 
formal notations reached level maturity standardized lotos vdm 
important trigger exploitation research formal methods interest regulatory bodies standardization committees international electrotechnical commission 
emerging safety related standards discussion stage 
major impetus provided uk mod interim standard mandates formal methods languages sound formal semantics 
important standards prescriptive parts clearly separated marked 
goals set onus software supplier methods achieve required level con dence 
particular methods recommended mandated possible supplier assume method produce desired results blame standards body 
reduces responsibility accountability supplier 
guidance worthwhile date quickly 
result may best include separate document appendix updated frequently re ect latest available techniques best practice 
example includes separate guidance section 
legislation governmental legislation provide increasing motivation apply appropriate techniques development safety critical systems 
example new piece european commission legislation machine safety directive ective st january 
encompasses software error machine logic results injury claim civil law supplier 
proved product design manufacture criminal proceedings may taken director manager charge 
maximum penalty months jail large ne possible 
suppliers demonstrate best working practice include example formal methods 
care taken ectiveness formal methods 
particular term formal proof quite loosely led law courts viper microprocessor case ended court ruling pronounced 
claims quite possible similar case occur 
di formal proof rigorous argument preferring accepting correspondingly lower level design assurance 
de nitions standards ect court 
education certi cation modern comprehensive standard text books software engineering include section formal methods 
computing science courses especially europe including signi cant portion basic relevant mathematical training discrete mathematics set theory predicate logic 
respect education lagging 
discusses software engineers profession institutions 
suggested training important experience necessary 
addition software engineers responsible mistakes occur genuine error 
safety critical software identi ed area utmost importance ideas applied rst possible gravity errors occur 
currently major barrier acceptance formal methods engineers programmers appropriate training managers know applied 
gradually alleviated necessary mathematics taught increasingly computing science curricula 
past necessary companies provide training seek specialist help formal methods courses quite widely available industry academia countries uk see 
appears europe leading rest world particular battle formal methods general may sign long term development reliability emanating europe 
standards draft standards recognizing problems recommending appropriate personnel especially projects 
suggestions sort certi cation developers introduced 
active topic discussion possible drawbacks bene ts introducing closed shop suitably able quali ed engineers may inappropriately excluded vice versa 
bridging gap technology transfer fraught di culties inevitably rightly lengthy process 
problems stage lead failure 
technology formal methods established applied especially critical applications safety paramount 
awareness bene ts formal methods publicized wide selection technical non technical people especially outside formal methods community possibilities limitations techniques available understood relevant personnel avoid costly mistakes 
unfortunately rapid advances reduction cost computers years meant time side 
formal techniques su ciently advanced considered selective software development provided problems education overcome 
skills shortage area foreseeable signi cant di culties remain overcome 
software standards especially concerning safety provide motivating force formal methods vital sensible realistic approaches suggested emerging standards 
provide example recommended guidance proposed standards area 
conclude subjective account state art current issues formal speci cation veri cation computer systems software hardware 
today speci cation notations models scope improvement especially area requirements capture 
words hoare models seeds scattered wind 
perish root 
seeds better 
question asked best notation system 
choice notation specifying systems containing hardware software similar 
trends come go answer relate characteristics speci product developed background individuals involved 
developed theorem proving tools 
di erences quality tools produced mid counterparts developed today marked particularly provision improved user interfaces 
improvements need widespread acceptance mainstream industry today research prototypes take signi cant time resources importantly appropriate marketing tomorrow industrial strength tools 
cation results 
proving correctness simple realistic systems small microprocessors longer issue example illustrates 
notable size involving man years ort system designed actual 
impressive considers linked veri cation various levels abstraction system software hardware veri ed microprocessor fabricated 
systems widely programming languages microprocessors problematic deal aspects 
despite achievements real problems hindering widespread formal methods 
articulated summarize issues pointing formal methods deployment large remains esoteric risky potentially costly activity impact processes products computer industry properly evaluated 
scienti cally sound objective study issues missing 
issues distinguish issues relating technology relating research 
technological issues mean problems concerned transition research results methods tools purpose regard needs industry 
understanding di erence technology research results crucial go way explaining reluctance industry adopt formal methods 
fact highly trained expert proves correctness simple microprocessor system formal methods laboratory imply multi dollar manufacturer designers theorem prover 
suitable technology produced process enabled endeavour user research driving force 
technology issues industrial quality engineered suitable user interfaces 
mentioned earlier user interface issue prime bene theorem proving developments form onwards 
remains done improving cacy theorem proving tools instance incorporating fast decision procedures bdds graph reduction packages appropriate 
producing industrial kind requires levels funding normally available research workers 
hand industry convinced sponsor development tools persuaded consider tools useful engineered chicken egg situation 
answer level synergy camps 
interface best existing practice 
formal methods supplemental replacement technology 
harmony existing methods tools purpose integration strengthen replace existing technology 
happily de nite trend direction cation workers 
happening complementary ways 
firstly ther ole formal methods supplemental technology explored anumber researchers 
secondly orts interface current technology exempli ed investigations semantics notations subsequent provision formal reasoning frameworks 
veri cation community past years gone way producing results enable transformation research technology remains done terms technology transfer 
meetings mix industry academia encouraged organized uk safety critical systems club 
research issues concern separate ways transforming research results technology purpose direction research cation 
believe remains done terms notations models 
research projects european esprit project uk project attempting address issues 
pressing question shape theorem proving activity relates software hardware 
strongly believe theorem proving methods great deal common software engineering breakthroughs area originate recognizing exploiting fact 
view proofs programs evolution theorem proving closely resembles evolution programming practice 
currently complete low level proofs look read machine code programs consequences process producing proofs 
proof tactics largely characterize writing execution proofs closely resemble assembler macros 
theorem proving di cult transition activity select engineering discipline way software engineering evolved days machine assembly coding 
crucial prerequisite evolution software engineering concept abstraction 
abstraction provided operating systems high level programming languages compilers speci cation languages associated machinery editors debuggers con guration managers 
believe discovering ways harnessing abstraction theorem proving exciting empowering 
liskov guttag argue abstraction dimensional 
firstly obtained parameterization procedure parameters piece code usable large polymorphic data sets 
secondly abstraction speci cation hide details concentrating needs achieved piece code describing ways achieving required 
abstraction parameterization degree exploited theorem proving logical framework ideas including object logic parameter theorem prover hard wiring system 
abstraction speci cation largely 
believe abstraction urgently need research holds great promise experience software engineering 
proof speci cation languages proof re nement automatic aims worth striving 
methods understood developed theorem provers today proof compilers tomorrow 
jonathan bowen funded collaborative uk information engineering directorate project ied 

safety related computer controlled systems market study 
review department industry association srd aea technology benchmark research london 
procurement safety critical software defence equipment part requirements part guidance 
interim defence standard issue ministry defence directorate standardization house brown street glasgow ex uk april 
cooper 
ed user workshop york springer verlag workshops computing pp 

mcdermid formal methods relevance development safety critical systems 
computer journal december 
bj rner trusted computing systems experience 
proc 
th international conference software engineering icse melbourne australia may 
case formal methods standards 
ieee software september 
bowen formal speci cation design documentation tool 
second iee bcs conference software engineering conference publication july pp 

bowen veri ed systems elsevier real time safety critical systems series preparation 
bowen safety critical systems formal methods standards 
technical report prg tr programming research group oxford university computing laboratory uk revised version appear software engineering journal 
bowen formal methods software safety 
pp 

buxton malcolm software technology transfer 
software engineering journal january 
coleman technology transfer formal methods going wrong 
proc 
th icse workshop industrial formal methods nice france march 
craigen gerhart ralston international survey industrial applications formal methods 
atomic energy control board canada national institute standards technology naval research laboratories appear 
craigen gerhart ralston formal methods reality check industrial usage 
formal methods europe symposium fme springer verlag lncs volume 
prolog standardisation usefulness formal speci cation comp lang prolog comp specification comp software eng electronic usenet newsgroups october 
dyer cleanroom approach software development wiley series software engineering practice 
frey 
ed safety computer control systems 
computer systems safety critical applications proc 
ifac symposium zurich switzerland october pergamon press 
young mathematical methods digital system development 

eds vdm formal software development methods volume tutorials springer verlag lncs pp 

software validation 
proc 
th international conference software engineering icse ieee computer society press march pp 

hall myths formal methods 
ieee software september 
harrison engineering human error tolerant software 

ed york springer verlag workshops computing pp 

hill software development methods practice 
proc 
compass th annual conference computer assurance 
hoare models 
baeten klop 
eds proc 
concur springer verlag lncs 
houston king cics project report experiences results ibm 

eds vdm formal software development methods springer verlag lncs pp 

ieee standard glossary software engineering terminology 
ieee software engineering standards collection elsevier applied science 
entity relationship models expressed synthesis structured formal methods technical report prg tr programming research group oxford university computing laboratory uk july 
airline safety review human factors 
flight international july 
liskov guttag abstraction speci cation program development mit press 
mackenzie computers formal proof law courts 
notices american mathematical society november 
may barrett shepherd designing chips 
hoare gordon 
eds mechanized reasoning hardware design prentice hall international series computer science pp 

moore special issue system veri cation 
journal automated reasoning 
safe conduct 
computing november 
survey courses uk 

ed user workshop oxford springer verlag workshops computing pp 

cleanroom bowen 
eds workshop london springer verlag workshops computing appear 
software engineers iee 
software engineering journal march 
de computer software civil aircraft 
microprocessors microsystems 

ed special issue safety critical systems appear 
ravn project organisation 
bj rner langmaack hoare provably correct systems chapter part esprit bra technical report available department computer science dth lyngby denmark 
anderson safety critical systems current issues techniques standards chapman hall 
stein safety formal design 
byte august 
cooper 
eds object orientation springer verlag workshops computing 
thomas industrial formal methods 
microprocessors microsystems 

ed special issue safety critical systems appear 
tierney evolution def stan cation formal methods debate uk 
proc 
workshop policy issues systems software development science policy research unit brighton uk july 
wallace kuhn analysis selected software safety standards 
ieee aes magazine august 
wing ways integrate formal speci cations practice 

eds vdm formal software development methods springer verlag lncs pp 
article processed lat macro package llncs style 
