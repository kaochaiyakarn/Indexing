authenticated data structures graph geometric searching michael goodrich roberto tamassia nikos robert cohen spirit data structure algorithm correctness checking authenticated data structures provide cryptographic proofs answers accurate author intended data structure maintained remote host 
techniques authenticating data structures represent graphs collection geometric objects 
model data structure maintained trusted source mirrored distributed directories directories answering queries users 
user queries directory receives cryptographic proof addition answer proof contains statements signed source 
user verifies proof trusting statements signed source 
show efficiently authenticate data structures fundamental problems networks path connectivity queries geometric objects intersection containment queries 
verifying information appears authentic neglected task data structure algorithm usage 
fortunately growing literature correctness checking aims rectify omission 
early program checking certification researchers developed efficient schemes checking results various data structures graph algorithms geometric algorithms 
schemes directed mainly defending user inadvertent error implementation 
addition previous approaches primarily assumed usage limited single user individual machine 
advent web services internet computing data structures algorithms longer just single user individual machine 
development content distribution services akamai spreading content internet machine responding user query unknown data structure author user 
bringing lessons world events domain algorithmics recognize benefit efficiency scenarios open possibility agent hosting data structure algorithm deliberately falsify query responses users 
information represented response security financial implications falsification cause significant adverse consequences 
interested studying new dimension data structure algorithm checking design data structures algorithms responses verified accurately coming author response coming untrusted host 
examples kind information want authenticate include dynamic documents online catalog entries responses queries geographic information systems financial databases medical information systems scientific databases 
digital signatures verify simple static documents inefficient dynamic data structures 
need new techniques authenticating data structures 
model authenticated data structures data structure authentication model involves parties trusted source untrusted directory user 
source holds structured collection objects assume set query operations defined fixed time say static 
say dynamic assume set update operations defined modify directory maintains copy collection structure authentication information consists statements research supported part darpa 
university california irvine goodrich acm org brown university rt nikos cs brown edu technologies rfc com signed source 
user performs queries contacting source directly queries directory 
directory provides user answer query answer authentication information yields cryptographic proof answer 
answer authentication information include time stamp information derived signed statements structure authentication information 
user verifies proof relying solely time stamp information derived statements signed source subject standard cryptographic assumptions 
data structures source directory store collection protocols algorithms queries updates verifications executed various parties form call authenticated data structure :10.1.1.109.5235
practical deployment authenticated data structure various instances geographically distributed directories 
distribution scheme reduces latency allows load balancing reduces risk denial service attacks 
previous previous related authenticated dictionaries concerned authenticated dictionaries authenticated structures sets membership queries performed 
hash tree scheme introduced merkle implement static authenticated dictionary 
hash tree hashes elements leaves value internal node result computing way hash function values children 
authenticated dictionary consists hash tree plus signature value stored root element proven belong reporting values stored nodes path node storing root values nodes siblings path 
approach space linear query authentication information query verification time logarithmic size set kocher advocates static hash tree approach realizing authenticated dictionary simplifies somewhat processing done user verify item set storing intervals individual elements 
techniques incremental cryptography naor nissim hash trees support insertion deletion elements logarithmic time implementing dynamic authenticated dictionary :10.1.1.109.5235
scheme source directory maintain identically implemented trees 
update authentication information size query authentication information logarithmic size 
goodrich tamassia data structure authenticated dictionary skip lists 
introduce notion commutative hashing show embed nodes skip list computational dag directed acyclic graph cryptographic computations commutative hashing 
data structure matches asymptotic performance naor nissim approach simplifying details actual implementation dynamic authenticated dictionary :10.1.1.109.5235
related works goodrich tamassia software architecture implementation authenticated dictionary approach goodrich tamassia introduce notion persistent authenticated dictionaries user issue historical queries type element set time 
goodrich tamassia show rsa way accumulator realize dynamic authenticated dictionary set elements query authentication information size verification time 
scheme allows tradeoff query update times 
example balance times achieve query update time update authentication information 
step design general authenticated data structures dictionaries devanbu :10.1.1.16.2936
extension hash trees show authenticate operations select project join relational database 
authenticated data structure set multidimensional points supports orthogonal range queries 
result goes simple authenticated dictionaries restricted hashing range trees 
martel initiated begins study authenticated queries tree structures skip lists 
consider class data structures links structure form directed acyclic graph bounded degree single source node ii queries data structure correspond traversal starting source 
show data structures authenticated means hashing scheme digests entire digraph hash value source 
scheme size answer authentication information verification time proportional size traversed 
show general technique applied design static authenticated data structures pattern matching tries orthogonal range searching multidimensional set points 
initial treatment authenticating fractional cascading structures range tree data structures catalogues arranged unions tree 
related authentication xml documents devanbu appears 
results general techniques building authenticated data structures number non trivial query problems general graph including connected component 
biconnected component 
component 
path return path pathlength return length path support efficient update operations involve inserting vertices edges data structure uses linear space supports connectivity queries update operations log time path queries log time length path reported 
update authentication information size 
size answer authentication information verification time log connectivity queries log path queries 
addition address geometric search problems showing authenticate full general version powerful fractional cascading technique 
authenticate query efficiently answered fractional cascading structure iterative search collection dictionaries total size stored nodes graph want search element dictionary path graph 
number fundamental dimensional geometric searching problems arising implementation geographic information systems solved data structures iterative search approach 
problems include line intersection queries polygon report edges intersected query line ray shooting queries polygon report edge intersected query ray point location planar subdivision report region containing query point orthogonal range search set points report points inside query rectangle orthogonal point enclosure set rectangles report rectangles contain query point orthogonal intersection queries set rectangles report rectangles intersected query rectangle 
show authenticated fractional cascading data structure extended yield efficient authenticated data structures problems 
unaware previously known authenticated data structures problems exception orthogonal range search authenticated data structure 
security scheme standard cryptographic primitives way hashing digital signatures practical need new cryptographic assumptions 
leave open problem authenticated geometric search structures fractional cascading 
cryptographic preliminaries section general cryptographic technique authenticated data structures 
basis trust authentication model assumption user trusts source 
expressed means digital signature scheme 
desired security results achieved means cryptographic hash function 
cryptographic hash function typically operates variable length message producing fixed length hash value 
assume defined binary representation data element operate assume rules defined operate number elements 
cryptographic hash function hash function value computationally intractable find computationally intractable find 
collision resistance property security results 
data set owned source 
authentication schemes collision resistant hash function produce digest cryptographic hash value data elements digest computed systematic way expressed means directed acyclic graph dag defined similar technique 
define single sink dag associated follows 
node stores label source thenl em em elements source en zk zk edges en elements view label sink digest computed dag call scheme hashing scheme answer query usually involves elements 
proof typically consists signed digest information labels necessary recomputation user digest 
authentication techniques general scheme 
source directory store identical copies data structure representing maintain hashing scheme source periodically signs digest timestamp sends signed timestamped digest directory 
user poses query directory returns user signed timestamped digest answer query proof consisting small collection labels hashing scheme allows recomputation digest 
user validates answer recomputing digest checking equal signed verifying signature digest 
path properties section authenticated scheme various types queries sequence 
path hash accumulator notion path represent extend notation 
path ordered sequence nodes 
head denote nodes path ifp paths concatenation path formed adding directed edge tail 
subpath path path consisting collection nodes pv wl tail path stores data set node attributes values stored nodes node properties collections node attributes 
node attribute assume arbitrary values occupies storage 
node property sequence nr node attributes constant 
similarly path attribute path property defined extended notion node attribute node property 
path attribute occupies storage depends values node order nodes ps path property sequence path attributes ps wheres constant 
require includes path attributes head tail 
definition path attribute path property naturally extended subpaths paths considered 
path concatenation paths path property satisfies concatenation criterion function computed time called concatenation function path query argument anode selection query qn maps qn ofp 
node selection query associated path selection function 
apath selection function determines time values 
path selection query extends node selection query path advance function 
path query argument apath selection query qp maps subpath qp ofp 
path selection query characterized path advance function 
apath advance function returns time subpath possibly query argument holds values andp path advance function 
path 
interested authenticating operations property subpath report value path property subpath ofp may 
path property satisfies concatenation criterion 
property node report value node property node locate path path selection function argument find node returned node selection query corresponds path selection function 
subpath path path advance function argument find subpath returned path selection query expressed path advance function 
represent path balanced binary tree follows 
leaf represents node internal node represents subpath leaves subtree leaf stores corresponding node property non leaf node stores corresponding path property 
resistant hash function 
path hash accumulator path hashing scheme node path properties defined follows 
consider data set consisting leaf node node property internal node path property 
dag obtained directing edge parent node 
node respectively denote predecessor successor particular pred head succ tail special nil values 
compute label node follows source vertex leaf pred succ non source vertex edges thenl 
digest data set label ofthe sink root 
digest called path hash accumulation path lemma 
exists authenticated data structure path hash accumulator scheme performance query operations property property locate subpath take log time update authentication information size answer authentication information size answer verification time log 
authenticated graph searching section consider authenticated data structures graph searching problems 
develop generic authenticated data structure forest trees consider general graphs 
tree paths develop efficient fully dynamic authenticated data structure supports path property queries forest trees 
data structure fast update query validation times 
path hash accumulator authentication scheme collection paths maintained update operations paths split concatenate 
high level point view organized means rooted tree paths meaning node corresponds path 
neighboring paths generally interconnected share information 
achieved definition suitable node attributes properties 
tree paths considered directed direction edge child parent 
node children path corresponds 
node attribute node extended depends possibly path properties paths correspond nodes say path parent path paths paths children paths clearly extension path property correspond node include information paths subtree having root node 
consider path properties satisfy concatenation criterion 
idea generally extended directed acyclic graph high level graph organization path collection 
graph introduce hierarchy paths 
path properties extended include information paths underlying hierarchy 
path properties forest construction data structure supports path property queries forest 
forest trees 
associated data set storing tree node node attribute 
framework section path associated path property assume satisfies concatenation criterion 
study implementation authenticated query operation property return path property path path exists update operations trees performed destroys tree root creates new tree consists new single node link merge trees adding edge root tree leaf tree cut separate tree removing edge non root node parent 
note tree assembled disassembled operations 
data structure dynamic trees 
dynamic tree rooted tree edges classified solid dashed property internal node child connected solid edge 
edge classification partitions nodes tree solid paths connected dashed edges see 
view solid path directed root dashed partition trees solid paths 
trees paths final tree non leaf node child solid edge connects 
assume children 
consider children say nodes uk connected dashed edges 
dashed path path length correspondence edges ui int nodes tm trees ti collection solid dashed paths defined tree ti explained 
hierarchical path scheme discussed section associate ti directed tree paths 
performed follows path solid dashed ti corresponds vertex solid node child ti node path connected dashed edge directed edge dashed length thatis corresponds dashed edges node ti solid path belongs uk corresponding children andp pk solid paths containing children 
directed edges pi edges 
directed trees add new root node connects roots trees obtaining new tree consider root path corresponds nodes path correspond trees tis node ordering 
consider collection paths associated nodes tree children root path solid paths 
children solid path solid dashed paths 
children dashed path solid paths 
shows tree path tree implement data structure follows 
path root solid dashed implemented path hash accumulator authentication scheme 
individual data structure implements path chosen biased binary tree 
path property collection path attributes satisfies concatenation criterion defined 
implicit path interconnection idea setting path properties node attributes able include information children paths include path attributes node properties follows 
node path denote path hash accumulation path root solid 
root path dashed path tail included child solid path corresponding node 
solid path tail included corresponds solid child path orl included corresponds dashed child path scheme yields digest forest consisting path hash accumulation root path 
prove theorem theorem forest nodes exists fully dynamic authenticated data structure supports path property queries performance operations take time operations link cut take log time operation property takes log time ii query authentication information operation property size log iii update authentication information iv query verification time operation property log total space 
theorem gives authenticated data structure answer path reports path connecting nodes answers question path nodes pathlength reports length path nodes answers question node specific type path nodes queries dynamic forest trees 
theorem forest nodes exists fully dynamic authenticated data structure supports path connectivity queries performance length path returned operation path operations take time operations link cut take log time operations pathlength take log time operation path takes log time ii query authentication information operations pathlength size log operation path size log iii update authentication information iv query verification time operations pathlength type log operation path log 
subsections show result extended give authenticated schemes advanced graph queries 
authenticated path connectivity queries apply theorem design authenticated data structure path connectivity queries graph evolves vertex edge insertions similar performance bounds 
main idea maintain spanning forest graph 
embedded planar graphs support deletions data structure described 
theorem exists authenticated data structure connectivity path queries graph vertices uses space 
connectivity query takes log time path query takes log time length path returned 
answer verification information size proportional query time 
general graph insertions supported log time 
embedded planar graph insertions deletions supported log time 
authenticated queries graph maintained operations create new vertex vertices 
interested authenticating query operation determines biconnected component 
extend data structure 
maintain block forest tree corresponds connected component types nodes block nodes correspond blocks biconnected components vertex nodes correspond vertices edge connects vertex node block node 
block node associated block adjacent vertex nodes associated vertices biconnected component path vertex nodes associated path length 
operation reduced operation pathlength theorem graph vertices exists dynamic authenticated data structure queries performance query operation takes log time update operation takes time update operation takes log amortized time ii query authentication information size log iii update authentication information size iv query verification time log 
authenticated queries show authenticate operation reports component containing vertices extend data structure biconnected graph component associated tree represents recursive decomposition means separation pairs vertices 
node associated component stores separation pair vertices called poles node associated edge vertex allocated nodes unique proper allocation node authenticated data structure augments tree nodes associated vertices connects node vertex proper allocation node uses node attributes store type node poles 
show operation reduced small number pathlength queries augmented tree 
theorem graph nodes exists dynamic authenticated data structure supports queries performance query operation takes log time update operation takes log time update operation takes log amortized time ii query authentication information size log iii update authentication information size iv query verification time log 
geometric search section consider authenticated data structures geometric searching problems 
data structures applications authentication geographic information systems 
fractional cascading fractional cascading general algorithmic technique broad class geometric retrieval problems 
solves iterative search problem briefly discuss 
ordered universe ck collection catalogs catalog ci ordered collection ni elements chosen element ci defined smallest element ci equal greater say locate ci find successor ci 
iterative search problem element locate catalog ifn ni total number stored elements fractional cascading technique succeeds achieving logn time complexity solve problem keeping storage linear 
idea consider catalogs nodes connected graph simplest case graph path preprocess pairs neighboring catalogs correlated 
perform binary search locate catalog underlying graph locate catalogs moving neighboring ones spending time node transition 
associated graph follows 
single source directed acyclic graph bounded degree node degree degree bounded constant node associated catalog cv 
called catalog graph 
define family connected subgraphs ofg contain contain node having zero degree iterative search problem catalog graph restated element member ofq locate cv refer query graph 
catalog cv augmented catalog av storing extra elements 
av called proper extra elements called non proper 
augmented catalogs correspond adjacent nodes connected bridges 

bridge connecting au av pair associating non proper elements au av elements 
non proper element belongs exactly bridge 
neighboring catalogs au av connected extreme bridges correspond non proper elements respectively 
non proper proper au av proper bs fractional cascading data structure path 
squares dots represent non proper proper elements respectively 
edge blocks 
inter block hashing dag defines second level hashing 
query element traversal target blocks define tree pair neighboring bridges defines block contains elements au av lying bridges 
bridges respectively called higher lower bridge block number elements proper non proper contains 
block sizes constitute crucial parameter performance data structure 
total size original catalogs total number proper elements shown total number non proper elements block sizes proportional bounded degree fractional cascading blocks chosen bounded size block constants proportional non proper element av associated storing proper element proper successor original catalog cv 
describes data structure built path suppose know successor say ofx augmented catalog au 
ino time locate cu starting traverse au moving higher elements bridge say reached connects av follow bridge traverse av moving smaller elements located 
bridge called entrance bridge catalog au 
query value query graph initially perform binary search locate augmented catalog wheres root log 
recall query graph contains root starting node traverse visit nodes 
traversal performed considering topological order move node adjacent corresponds procedure described having located cu cv constant time 
traversing query graph way solve iterative search problem kd logn number vertices total number proper elements catalogs hashing data structure commutative cryptographic collision resistant hash function 
assume set rules defined operate elements catalogs nodes graph previously computed hash values 
hashing scheme viewed level hashing structure built path hash accumulator scheme intra block hashing performed block defined data structure inter block hashing performed blocks data structure 
sequel describe hashing structure 
intra block hashing consider edge ofg parents consider neighboring bridges define block assume av 
define sequence elements exist av plus non proper elements corresponding bridges lie av 
pt sequence increasing order pt refer hash side path hash accumulator scheme compute bw bu bv digest sequence element pi pi proper pi hash accumulator support authenticated membership queries authenticated path property queries 
property corresponding node iterate process blocks defined data structure block data structure having hash side av hb hash digest 
define bs fictitious block augmented catalog 
hash side bs block way hash value defined computed 
path hash accumulator schemes define level hashing structure 
inter block hashing second level hashing structure defined directed acyclic graph defined blocks 
nodes blocks data structure 
suppose parent parent block edge add set edges directed edges block edge shares elements au additionally child root blocks edge add set edges directed edges bs 
construction complete 
bs unique root shows graph corresponds path 
block node associated label 
leaf sink hb 
parent blocks bt listed arbitrary order equals path hash accumulation bt bi bi hbi 
hashing corresponds second level hashing structure 
set bs digest data structure signed source 
answer authentication information hash scheme developed catalog graph query graph query element describe authentication information user 
query element node query graph sv successor cv 
location process locating catalog av find consecutive elements av may proper non proper 
elements block entrance bridge av higher bridge successor av sv ify proper sv proper non proper 
call respectively target element target block av 
useful observations location process traversal query graph chosen node visited blocks visited location process target blocks correspond incident edges share elements common augmented catalog adjacent graph follows target blocks define subgraph consists target blocks edges connect neighboring target blocks 
lemma query graph graph tree 
node target element av bv target block av 
answer authentication information consist 
intra block node target element yv av verification sequence pv yv path hash accumulation hash side bv 
inter block node target block bv leaf verification sequences child bv hash accumulation bv 
lemma total number proper elements catalogs bounded degree query graph nodes size answer authentication information log log log 
verification answer assume answer user set av node supposed successor cv 
answer authentication information consists verification sequences node target block intra block inter block 
sequences form hash tree level hashing scheme 
verification process basically defined hash tree 
intuitively intra block verification sequence target block bv provides local proof av successor cv local proofs accumulated inter block verification sequences signed digest 
particular elements predicates consecutive elements av non proper proper proper element av hold simultaneously constitute proof successor cv element proper 
proof answer authentication information user checks see values av yv av yv proper av proper yv 
user rejects answer 
needed verify signed digest data structure 
observe user possesses data needed computation signed digest 
lemma total number proper elements catalogs query graph nodes answer verification time log log log bounded degree digest verified collision resistance property hash function user proof answer correct user verify conditions previously discussed 
faulty answer lead forged proof collisions 
security scheme reduced collision resistance property lemma catalog graph nodes total size intra block inter block hashing schemes computed time storage 
theorem catalog graph bounded degree total size authenticated fractional cascading data structure solves authenticated iterative search problem performance constructed time uses storage element graph query vertices located catalog log time answer authentication information size log answer verification time log 
applications authenticated fractional cascading scheme design authenticated data structures various fundamental dimensional geometric search problems iterative search implicitly performed see 
problems underlying catalog graph degree bounded small constant 
denotes problem size 
theorem authenticated data structure answering line intersection queries polygon constructed log time uses log storage 
denoting output size queries answered log time answer authentication information size log answer verification time log 
theorem authenticated data structures answering ray shooting point location queries constructed log time log storage 
queries answered log time answer authentication information size log answer verification time log 
theorem authenticated data structures answering orthogonal range search orthogonal point enclosure orthogonal intersection queries constructed log time log storage 
denoting output size queries answered log time answer authentication information size log answer verification time log 
goodrich tamassia 
persistent authenticated dictionaries applications 
proc 
information security conference isc volume lecture notes computer science pages 
blum kannan 
designing programs check 
acm jan 
bright sullivan 
checking mergeable priority queues 
digest th symposium fault tolerant computing pages 
ieee computer society press 
bright sullivan 
line error monitoring data structures 
digest th symposium fault tolerant computing pages 
ieee computer society press 
bright sullivan masson 
checking integrity trees 
digest th symposium fault tolerant computing pages 
ieee computer society press 
chazelle guibas 
fractional cascading data structuring technique 
algorithmica 
chazelle guibas 
fractional cascading ii 
applications 
algorithmica 
cohen tamassia 
combine conquer 
algorithmica 
devanbu gertz kwong martel stubblebine 
flexible authentication xml documents 
proc 
acm conference computer communications security 
devanbu gertz martel stubblebine 
authentic third party data publication 
fourteenth ifip conference database security 
devillers preparata tamassia 
checking convexity polytopes planarity subdivisions 
comput 
geom 
theory appl 
di battista tamassia 
line maintenance components trees 
algorithmica 
eppstein italiano tamassia tarjan westbrook yung 
maintenance minimum spanning forest dynamic plane graph 
algorithms 
mehlhorn 
checking priority queues 
proc 
th acm siam symp 
discrete algorithms pages 
goodrich tamassia 
efficient authenticated dictionaries skip lists commutative hashing 
technical report johns hopkins information security institute 
www cs brown edu stms papers pdf 
goodrich tamassia 
efficient dynamic distributed cryptographic accumulator 
technical report center geometric computing brown university 
www cs brown edu stms papers accumulators pdf 
goodrich tamassia 
implementation authenticated dictionary skip lists commutative hashing 
proc 
darpa information survivability conference exposition volume pages 
king 
simpler minimum spanning tree verification algorithm 
workshop algorithms data structures pages 
kocher 
certificate revocation validation 
proc 
international conference financial cryptography volume lecture notes computer science 

low degree algorithms computing checking gabriel graphs 
technical report cs center geometric computing dept computer science brown univ 
martel devanbu gertz kwong stubblebine 
general model authentic data publication 
www cs ucdavis edu devanbu files model pdf 
mehlhorn 
leda platform combinatorial geometric computing 
cambridge university press cambridge uk 
mehlhorn seidel schirra uhrig 
checking geometric programs verification geometric structures 
comput 
geom 
theory appl 
merkle 
protocols public key cryptosystems 
proc 
symp 
security privacy 
ieee computer society press 
merkle 
certified digital signature 
brassard editor advances cryptology crypto volume lecture notes computer science pages 
springer verlag 
naor nissim :10.1.1.109.5235
certificate revocation certificate update 
proceedings th usenix security symposium security pages berkeley 
pugh 
skip lists probabilistic alternative balanced trees 
commun 
acm 
sleator tarjan 
data structure dynamic trees 
comput 
syst 
sci 
sullivan masson 
certification trails data structures 
digest st symposium fault tolerant computing pages 
ieee computer society press 
sullivan wilson masson 
certification computational results 
ieee trans 
comput 
westbrook tarjan 
maintaining bridge connected biconnected components line 
algorithmica 
appendix suppose set possible queries property property consider set nodes subpath 
tree node leaves subtree defined nodes case parent 
observe corresponds subpath path allocation nodes subpath ht time tracing leaf root tree paths path property satisfies concatenation criterion path property computed tree structure applying ht times concatenation function clearly answer user property 
node uk node root tree path connecting root 
define verification sequence sequence st sj label sibling node uj 
answer authentication information consists parts allocation node subpath property properties sequence set leaf nodes allocation nodes forms subpath labels children exit label siblings left right allocation nodes 
common ancestor verification path answer authentication information user able proof validity answer 
particular user uses sequence recompute repeatedly applications concatenation function confirmed user rejects answer 
user completes verification process recomputed path hash accumulation 
head achieve desired security result 
property query proceed just observe property corresponds property 
locate query locate target node performing top search tp starting root node children path selection function select path corresponds path 
answer located node proof proof corresponds property operation 
proof theorem size denotes number nodes subtree defined parent node called heavy size size 
edge labeling dynamic tree nodes root nodes edge labeled solid heavy important property node log dashed edges path edge labeling partition solid paths 
consider collection path correspond final tree edge paths root path added 
path implemented biased binary tree tp node weights defined function size 
consider weight node path property depending leaf node tp 
path having child path leaf size 
leaf internal node tp children 
head andp solid children dashed edges 
head andp solid unique dashed child child exists 
dashed node connected corresponding dashed edge 
root path root corresponding tree root 
biasing shown leaf root path performed individual biased trees tps length log 
proof analysis 
observe operations correspond accessing modifying paths kind 
particular updates operations link cut implemented log time modifying log path hash accumulators examining modifying restructuring log nodes total 
restructuring means connecting node new children 
observe path property satisfies concatenation criterion 
scheme works time node restructured recalculating time values children neighbors known 
consequently update operations performed log time 
queries determine nodes forest authenticated data structure supports containment queries log time responses length log 
nodes path property query performed accessing multipaths paths concatenation subpaths paths hierarchy induced consider common ancestor tree may overlap actual common ancestor considering individual trees 
multipaths multipath root tree implementing 
compute answer considering allocation nodes path hash accumulator visited 
similarly provide property subproofs proof proof path hash accumulator visited 
signed root compute multipath verification sequence allows user recalculate signed hash value proof proof 
biased scheme set allocation nodes log size answer proof proof proof log 
verification time log 
security hashing scheme path hash accumulation scheme 
allowing neighboring paths share information properties achieve desired security results 
proof sketch theorem operations correspond authenticating path property 
corresponds existence node root path path connecting path 
easily expressed assigning unique id value path 
idea applied operation 
pathlength achieved including path attribute number leaves subtree defined path property 
path queries answered performing query 
path including leaf nodes subtree defined node path property answering path property query 
size introduced complexity log length path consider topological order define traversal query graph topological order defines directed subtree tq correspondence edges tq target blocks edges tq nodes proof lemma hash side bs size hash side target block size 
intra block answer authentication information consists verification sequences log length log size log log size 
inter block answer authentication information recall tq degree bounded target block share elements target blocks 
degree bounded 
bs second level path hash accumulations built sequences length 
bs built dn blocks share elements 
observe correspondence inter block verification sequence edge follows inter part answer authentication information consists verification sequences size log size log log log size 
total constant answer authentication information size log 
recall verification time path hash accumulator proportional size verification sequence 
bounded degree target block share elements blocks 
path hash accumulation sequence length computed time space 

