high assurance requires goal orientation emmanuel letier axel van lamsweerde informatique universit catholique de louvain louvain la neuve belgium avl info ucl ac high assurance systems guarantee safety security fault tolerance survivability objectives essential objectives explicit refined specified precisely completely application specific terms interrelated analyzed thoroughly 
argues goals essential abstraction eliciting elaborating modeling specifying analyzing verifying negotiating documenting robust conflict free requirements high assurance systems 
safety injection system nuclear power plant running example illustrate key role goals engineering requirements 
keywords goal oriented requirements engineering high assurance systems safety specification building process lightweight formal methods 

high assurance systems computer systems compelling evidence required system delivers services manner satisfies certain critical properties safety security fault tolerance survivability lea 
specifying precisely software system supposed order satisfy critical properties essential step system development process 
biggest difficulties specifying software requirements correctly widely recognized serious software failures traced back defective specification requirements lut lev 
formal specification techniques proposed tackle problem 
techniques complemented wide variety analysis tools algorithmic model checking deductive verification specification animation specification testing specification reuse specification refinement result number success stories formal specification technology real systems steadily growing year year lam 
spite news today software specification techniques suffer number weaknesses explain form fully adequate upstream critical phase requirements elaboration analysis 
limited scope 
vast majority techniques focus specification software system 
lack support modeling specifying reasoning global composite system human agents external devices components existing software software 
inadequate assumptions environment software operate known responsible errors requirements specifications jac lev 
non functional requirements generally left outside kind formal treatment 
requirements form important part specification known play prominent role evaluation alternatives manage ment conflicts derivation architecture management evolution 
lack rationale capture 
detailed requirements speci difficult understand 
efforts formal notations readable har heim heit zim 
efforts address problem understanding requirements terms rationale respect higher level concerns application domain 
poor guidance 
main emphasis formal specifica tion suitable sets notations tools posteriori analysis 
constructive methods building correct specifications complex systems systematic incremental way large non existent 
problem merely translating natural language statements formal language 
specification inthe large general requires complex requirements elaborated structured interrelated negotiated 
lack support exploration alternatives 
requirements engineering concerned exploring alternative system proposals functionality automated interaction automated system environment may quite different assignment responsibilities agents software environment 
requirement specification techniques allow alternatives represented explored compared selection 
argue goals offer right kind abstraction address inadequacies specific context high assurance systems 
goals intentional properties achieved system consideration dar lam 
word system refers software environment fen fic 
goals formulated terms pre mitigate 
ies preliminary goals identified description safety injection system cou statements opposed descriptive ones may refer functional non functional properties range high level concerns safe nuclear power plant lower level ones safety tion overridden block switch pressure permit 
modeling reasoning goals essential high assurance systems system goals correspond application specific safety security fault tolerance survivability properties need achieved high assurance 
positive negative interactions system goals captured goal models managed appropriately lain exceptional conditions environment may prevent critical goals achieved identified resolved produce robust requirements lam goals specified precisely refined incrementally operational software specifications provably assure higher level goals dar 
describe new research results se 
aim illustrate relevance benefits explicitly modeling reasoning multiple goals various levels abstraction specific context high assurance systems 
show goal oriented techniques constructively elaborate analyze requirements safety injection control system cou 
fairly small case study comes real application raises issues high assurance systems frequently illustrate methods scr method heit analysis techniques jef gar 
illustrations larger complex systems las ambulance system bart train control system lam lam 

goal oriented analysis require ments safety injection system follow kaos method lam gradually derive operational requirements safety injection software underlying system goals 
goal refinement graph elaborated identifying relevant goals preliminary system description cou typically looking intentional keywords natural language statements asking questions statements oal elaboration step objects attributes relationships derived goal specification object modeling step agents identified potential monitoring control capabilities alternative assignments goals agents explored agent modeling step operations domain pre postconditions identified goal specifications strengthened pre post trigger conditions derived ensure corresponding goals operationalization step 
parallel steps method handle conflicts goals obstacles may obstruct goal satisfaction respectively 
suggested ordering steps corresponds idealized process practice significant intertwining backtracking 
presentation succinct fragmentary interested reader may refer full treatment case study 

goal identification source document fig 
shows preliminary goals directly identified paragraphs preliminary description safety injection system cou 
read follows 
goal nuclear power plant maintain effective system goal obstructed obstacle 
obstacles may seen highlevel faults derived goal negation techniques systematically identifying ways system may fail discussed precisely 
goal introduced mitigate obstacle 
goal refined accuracy property environment re 

formalizing goals modeling objects identifying state variables formal analysis techniques may complement informal semi formal ones order provide higher assurance correctness completeness system requirements 
goals need formalized enable 
see goal formalization allows systematic guidance requirements elaboration process 
addition usual logical connectives linear temporal operators ac ac ep holds state holds states state implies state equivalent holds previous state just true example goal maintain may defined follows goal maintain safety injection signal water pressure low set point 
goal refers state variables declared attributes corresponding objects preliminary object model see fig 

regulated goal driven object modeling attributes receive physical tion actual pressure water system signal sent engineered safety feature actuation system safety features components command actual safety injection mechanisms objects attributes relationships incrementally identified defined requirements model elaborated 
goals provide precise criterion identifying elements object model 

detecting resolving goal level conflicts goal appearing available source document avoid actuation safety injection system normal start cool phases goal avoid safety injection signals sent normal start cool 
new goal introduces conflict goal maintain previously identified 
conflict detected formally predefined conflict pattern lam 
goals fact logically inconsistent inconsistent plant start cool phase water pressure low 
condition called boundary condition conflict lam formal definition generated formally instantiation formal conflict pattern yields conflict resolution tactics lam may propose alternative resolutions case conflict resolved weakening goal maintain predicate appearing boundary condition 
obtain goal maintain du safety injection signal loss normal start cool 
goal refined sections 

refining goals identifying agent ities goals refined assigned responsibilities single agents 
goal assigned agent agent sufficient monitoring control capabilities realize goal 
terminology variable model par notion shared phenomena jac 
example goal maintain unrealizable engineered safety feature actuation system agent monitor plant normal startup phase 
catalog agent refinement tactics defined guide process refining unrealizable goals realizable subgoals reached 
tactic suggests application formal refinement pattern see fig 

im im im accuracy goal variable accuracy goal predicate introduce accuracy goal tactics tactic fig 
may resolve lack monitorability state variables 
applying corresponding pattern yields new monitorable state variable overridden say refinement unrealizable goal maintain subgoals subgoal formally defined overridden companion accuracy goal formally defined block reset components system derived agent interface model safety injection system overridden formal definitions generated instantiation formal refinement pattern associated selected tactic 
goal refinement patterns proved correct dar step verification system man may check conjunction leaf nodes entails parent node 
pattern application user gets instantiated proof correctness refinement free 
subgoal realizable software agent entirely defined terms variables turn monitorable controllable agent subgoal requirement agent 
accuracy subgoal js realizable agent agent lacks monitorability state variables 
agent refinement tactics may guide generation alternative refinements goal 
alternative consists introducing new variables block reset represent manual block reset buttons controlled human operator agent assigning operator agent responsibility pushing block button plant enters normal startup responsibility pushing reset button plant leaves normal startup subgoals turn realizable operator agent environment assigning agent responsibility overriding safety injection block pushed responsibility enabling safety injection reset pushed subgoals turn realizable software agent software requirements 
details generated goal graph responsibility assignments may 
note software requirements environmental assumptions general needed prove high assurance goals 

deriving agent interfaces capturing agents monitoring control capabilities important aspect requirements elaboration process fea par jac 
capabilities gradually identified previous goal refinement step 
resulting agent interface model safety injection system shown fig 

note alternative goal refinements alternative rel assignments general lead alternative software environment boundaries alternative system proposals agent interfaces automated 

generating resolving obstacles goal achievement far fairly idealistic specifying goals refinements realizable requirements assumptions 
example previous goal refinement process idealized assumption behavior operator agent assumption avoid informaldef mock button pushed ant entering norma startup coo 
formaldef block operator obstacle analysis consists pessimistic view goals requirements assumptions previously elaborated 
idea identify ways breaking properties possible order resolve produce complete requirements robust systems lam 
obstacle assertion composite system satisfaction may obstruct satisfaction goals requirements assumptions recursively satisfaction higher level goals obstructed properties refine 
example just negation assumption identify obstacle obstacle block pushed plant entering normal startup cool 
block similarly assumption achieve assigned operator agent identify obstacle 
potential obstacles assumptions operator agent requirements agent identi fied 
formal techniques obstacle generation refinement detailed lam 
basic technique amounts precondition calculus regresses goal negations backwards known properties domain formal obstruction patterns may alternative shortcut formal derivations 
formal completeness criterion lam completeness bound set properties known domain 
techniques allow analyst incrementally elicit new domain proper ties 
obstacles resolved 
obstacle resolution involves assessing criticality obstacle investigating alternative ways resolving choosing resolution alternative various criteria cost risks performance obstacle resolution tactics may generate alternative resolutions lam 
example tactics yields resolution obstacle alternative refinement higher level goal js considered alternative responsibility operator agent weakened partially cover obstacle responsibility agent strengthened 
alternative design identified observing pushing block button water pressure specified value permit necessarily operator error domain property stating plant normal startup high pressure 
accordingly requirement agent strengthened safety injection overridden block button pushed water pressure permit goal maintain safety injection overridden block switch set water pressure permit 
overridden block overridden obstacle js resolved jn similar way weakening responsibility operator agent strengthening responsibility agent 
case requirement agent strengthened safety injection automatically enabled water pressure raises permit 
resolution tactics far include goal substitution agent substitution goal weakening goal restoration obstacle prevention obstacle mitigation lam 
general generated resolutions applicable best alternative needs selected non functional goals goal graph come back 
selection application resolution may carried specification time produce robust requirements specifications run time requirements monitor detects obstacle occurs occur fea 
note obstacle analysis iterative process may produce new goals new obstacles may need identified 
resulting software specification obstacles may totally partially resolved obstacles remain unchanged highly matter deferred run time new obstacles having appeared result previous 
mentioned selection alternative resolutions decision iterate obstacle analysis cycles trade assessment various non functional application specific goals safety security cost performance area remains done 
qualitative techniques help exposing competing influences various alternatives respect non functional goals 
preliminary proposal chu procedure proposed propagating positive negative influences alternative paths goal graph 
high assurance systems accurate quantitative techniques required 
example probabilistic risk assessment techniques provide precise input decision making process 
techniques rely availability accurate estimates probabilities failure events 
obtaining data may problematic quantitative techniques controversial lev 
real challenge probably define decision process combines qualitative reasoning non functional aspects system accurate quantitative weighting quantitative reasoning non functional aspects meaningful weighting obtained 
obstacle analysis may seen goal oriented formal constructive method building fault trees recovery actions 
particularly relevant high assurance systems problems failures systems known caused poor designs unable cope errors caused humans devices software lev 

deriving operational requirements system goals step requirements elaboration process consists deriving operational software specifications terminal goals assigned software agents 
result operation model specifies various services provided software pre postcondition describing services domain strengthened conditions ensuring underlying goals goal model met services 
catalog formal operationalization patterns available support operationalization step 
example immediate achieve pattern shown fig 

cot 

op tt dmp tmt immediate achieve pattern consider example goal maintain ess assigned agent right left implication formal definition goal section 
immediate achieve operationalization pattern derive operational require ments operation input block output overridden dompre overridden overridden permit block note distinction domain pre postconditions capture application operation means application domain required pre trigger postconditions capture requirements operations necessary achieve goals 
operation trigger keyword syntactic shortcut express condition required pre required trigger condition satisfaction corresponding goal operation allowed condition true applied condition true domain precondition true 
similarly goal maintain systematically derive need operation strengthened conditions operation guarantee satisfaction goal 
specifications operations similarly derived specification goal maintain overridden see details 
goal oriented elaboration process ends traditional specification techniques start 
example operational specifications obtained mapped scr tables system fairly easily case de 
general mapping may straightforward needs analyst assistance mapping achieved series transformation steps resolves semantic structural syntactic difference source kaos specification target scr de :10.1.1.11.1843

safety injection system running example illustrate benefits constructive goal oriented approach requirements elaboration analysis 
key points illustrated elaboration process goal oriented specification takes wider system engineering perspective goals properties hold system software environment domain properties expectations environment explicitly captured requirements elaboration process addition usual software requirements specifications operational requirements derived incrementally higher level system goals goals provide rationale requirements operationalize correctness criterion requirements completeness pertinence obstacle analysis helps producing higher assurance systems systematically identifying potential ways system may fail exploring alternative ways resolve problems early requirements elaboration negotiation phase alternative system proposals explored alternative goal refinements responsibility assignments obstacle resolutions conflict resolutions goal refinement structure provides rich way structuring entire requirements document multiparadigm multi button framework allows combine different levels expression reasoning semi formal modeling structuring qualitative selection alternatives formal needed accurate reasoning goal formalization allows re specific types analysis carried guiding goal refinement process systematic identification objects agents checking correctness goal refinements detecting missing goals implicit assumptions dar guiding identification obstacles resolutions lam guiding identification conflicts resolutions lam guiding identification specification operational requirements satisfy goals dar 
important topics sufficiently addressed current goal oriented techniques 
current support evaluation selection multiple alternatives explored requirements elaboration process highly limited 
discussed blend qualitative quantitative reasoning techniques devised accurate evalua tion alternatives terms measurable quantities 
techniques probably specific models specific types non functional goals risk models safety goals cost models cost related goals performance models performance related goals remains done provide techniques goal refinement obstacle conflict analysis targeted goal categories relevant high assurance systems safety security specific domains air traffic control medical applications 
means characterizing refining goal categories thoroughly domain specific terms point defining suitable notations techniques modeling specifying properties category finding systematic ways reasoning positive negative interactions goal level 
needed integrate methodological support provided goal oriented requirements elaboration methods existing specification analysis tools 
integration may occur levels 
existing tools automate re specific formal reasoning described 
example currently building tool early model checking detect incomplete goal refinements 
second able map result goal oriented requirements elaboration process specialized formal operational specification analysis tools 
example working tool semi automatic translation kaos models scr tables de :10.1.1.11.1843
mappings smv way 
emmanuel letier supported fonds national de la recherche scientifique 
grateful kaos gra crew techniques industrial projects members faust project developing needed formal analysis toolkit 
bharadwaj heitmeyer model checking complete requirements specifications abstraction automated software engineering vol january 
chu chung nixon yu mylopoulos non functional requirements software engineering 
kluwer aca 
cou courtois parnas documentation safety critical software proc 
cse th international conference software engineering acm press 
dar dardenne van lamsweerde fickas goaldirected requirements acquisition science computer programming vol 

dar darimont van lamsweerde formal refinement patterns goal driven requirements elaboration proc 
fse fourth acm symp 
foundations software engineering san francisco october 
de de deriving tabular event specifications goal oriented requirements models :10.1.1.11.1843
ms thesis university louvain june 
fea feather language support specification development composite systems acm trans 
programming languages systems april 
fea feather fickas van lamsweerde reconciling system requirements runtime behaviour proc 
th international workshop software specification design ieee cs press april 
fic fickas helm knowledge representation reasoning design composite systems eee trans 
software engineering june 
gar heitmeyer model checking generate tests requirements specifications proc esec th acm intern 
symp 
foundations software eng 
esec fse toulouse september 
har harel statecharts visual formalism complex systems science computer programming vol 

heim heimdahl leveson consistency checking hierarchical state requirements eee transactions software engineering vol 
june 
heim heimdahl heitmeyer formal methods developing high assurance computer systems working group report 
proc 
nd eee workshop formal techniques ft boca raton 
heitmeyer jeffords labaw automated consistency checking requirements specifications acm transactions software engineering methodology vol 
july 
jac jackson software requirements specifications lexicon practice principles prejudices 
acm press addison wesley 
jef jeffords heitmeyer automatic generation state invariants requirements specifications th international symposium foundations software engineering fse orlando fl november 
knight safety critical systems challenges directions invited mini tutorial proc 
cse th international conference software engineering acm press 
lam van lamsweerde darimont letier managing conflicts goal driven requirements engineering eee transactions software special issue inconsistency management software development vol 
november 
lam van lamsweerde letier handling obstacles goal oriented requirements engineering eee transactions software engineering special issue exception handling vol 
october 
lam van lamsweerde requirements engineering year research perspective 
invited keynote proc 
cse nd international conference software engineering acm press 
lam van lamsweerde formal specification roadmap software engineering finkelstein ed acm press 
lea mclean heitmeyer high assurance computer systems research agenda america age information national science technology council committee information communications forum bethesda 
letier reasoning agents goal oriented requirements engineering 
phd thesis universit catholique de louvain dpt 
informatique louvain la neuve belgium may 
www info ucl ac people thesis html letier van lamsweerde agent tactics goal oriented requirements elaboration proc 
cse th intl 
conf software engineering orlando eee computer society press may 
letier van lamsweerde deriving operational software specifications system goals proc 
fse th acm symp 
foundations software engineering charleston november 
letier goal oriented elaboration requirements safety injection control system 
research report informatique ucl june 
lev leveson system safety computers 
addison wesley 
lut lutz analyzing software requirements errors safety critical embedded systems proc 
re eee international symposium requirements engineering january 
man manna step group step deductive algorithmic verification reactive real time systems proc 
ca th intl 
conf computer aided verification lncs springer verlag july pp 

zave jackson dark corners requirements engineering cm trans 
software engineering methodology vol 
january 
zim zimmerman leveson investigating readability state formal requirements specification languages proc 
icse th intl 
conf software engineering orlando eee computer society press may 
