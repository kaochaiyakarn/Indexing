prototyping real time vision systems experiment dsl design alastair reid john peterson greg hager paul hudak yale university box new haven ct alastair peterson john hager greg hudak cs yale edu describe transformation xvision large library code real time vision processing fvision pronounced fission fully featured domain specific language embedded haskell 
resulting prototype system claims increased modularity effective code reuse rapid prototyping characterize dsl approach system design 
illustrates need judicious interface design computationally expensive tasks xvision pre existing components leaving modular compositional tasks fvision haskell 
time experience demonstrates haskell advanced language features specifically parametric polymorphism lazy evaluation higher order functions automatic storage reclamation permit rapid dsl design highly modular easily modified 
resulting hybrid system exceeded expectations visual tracking programs continue spend time executing low level code haskell advanced features allow quickly develop test small prototype systems matter days develop realistic applications weeks 
keywords domain specific languages functional programming modularity code reuse computer vision haskell interoperability 
real time computer vision area critical juncture 
inexpensive cameras highperformance video devices plentiful processing power pc workstations reached point perform image processing functions historically required specialized hardware 
software exploiting vision advanced comparable rate 
assert due lack algorithms computing power little known effective software abstractions tools domain 
attempts build generalpurpose image processing libraries 
taken traditional approach system design language java build suitable libraries designed interfaces capture system functionality modular way 
xvision library designed specialized subset real time computer vision tasks particular real time tracking 
interfaces designed usual trade offs performance functionality successful vision applications built 
xvision building application easy 
need better composition abstraction facilities exist current version 
furthermore programmer productivity particular problem best way constructing particular vision system extensive prototyping combining elements variety techniques 
traditional programming debugging testing cycle quite long 
hampered fact difficult determine system malfunction due programming error conceptual problem underlying vision methodology 
led investigate domain specific languages dsls way augmenting existing libraries composition abstraction mechanisms needed field give stronger guarantees program correctness 
dsl approach special purpose language developed provide just right glue abstraction mechanisms composition parameterization easy natural domain interest 
describe experiences designing implementing dsl called fvision xvision information xvision www cs yale edu users hager 
date downloaded sites 
source primitive operations 
designing implementing dsl difficult task language design difficult avoided problem building fvision embedded dsl functional language haskell 
fvision programs perfectly valid haskell programs certain syntactic static dynamic language features haskell give fvision look feel entirely new language 
just process designing fvision clarified primitive operations resulted stream lining xvision libraries yield essence 
addition system offers practical advantages including ffl flexibility 
ability quickly experiment evaluate large variety solutions necessary process building complex vision systems 
ffl modularity abstraction 
programming abstractions designed natural domain feasible current technology java programming 
resulting clarity compactness explicit various ideas left implicit vision systems facilitates description underlying algorithms concise semantically clear fashion 
ffl efficiency 
low level operations dominate execution time remain domain 
fvision glue significant part execution time 
ffl safety 
fvision type system ensures modules composed reliably avoid dynamic typing techniques may fail execution time 
provides overview fvision approach computer vision compares xvision 
address techniques embed dsl haskell including transforming monolithic components highly parameterized purely functional haskell objects 
achieve rely critically haskell parametric polymorphism lazy evaluation higher order functions type classes garbage collection 
evaluate approach comparing program development fvision xvision 
shows constructing effective dsl existing library matter simply turning crank requires significant re engineering effort achieve effective domain specific language 
proven benefits dsl effort worthwhile 
domain real time vision xvision application hardware independent set tools visual feature tracking 
conceptually xvision viewed inverse animation system 
animation goal quickly combine set graphics primitives animator produces desired video output stream xvision goal combine visual tracking primitives motion constraints observer video input stream 
existing xvision system libraries consist approximately lines code organized shown 
particular xvision defines generic interfaces hardware components video sources displays contains large set image processing tools defines generic notion trackable feature 
basis xvision defines trackers specialized modules recognize follow specific features video image 
xvision includes trackers follow position line corner area color variety similar image artifacts 
existing xvision system organized programming abstractions 
abstraction view feature state object define tracking feedback process state feature 
state usually consists location feature plus additional status information defines information content feature single consistent entity 
notion feedback loop important captures idea state feature current time fact small perturbation previous frame 
illustrates idea conceptually specific case ssd sum squared difference tracking algorithm :10.1.1.147.629
algorithm tracks region attempting compute image motion deformation match current appearance target fixed 
steps algorithm acquire deform image previous state compute difference image image target perform arithmetic determine perturbation current state parameters cause deformed current image best match 
second major abstraction xvision combining simple features form complex tracking systems result hierarchical constraint networks 
shows feature network face animation ssd trackers input 
image level ssd tracking primitives operating images localize eyes mouth 
eye mouth fact trackers open eye mouth closed 
status informa point type line type blob ssd target realizations tools typing line tee cross corner matrix image galileo video interfaces scalable tracking software layout 
model inverse acquire position image image initial position xvision feedback loop 
tion essentially image matches current image determine status open closed respective targets 
subsequent levels system combine information consistent representation pose status face 
animation frames shown right results graphics drawing primitives state tracking primitive 
xvision fvision despite success xvision substrate application development clear existing design inflexible type experimental programming involved developing vision systems 
initial plan simply import xvision tracking primitives dsl components capture xvision abstractions hierarchical composition dsl 
stage started replicate xvision object hierarchy haskell 
fell short number ways ffl subclassing extend existing classes difficult replicate outside type system 
ffl original code extensive implicit object state 
led code take advantage haskell purely functional nature 
ffl classes course grained structure underlying algorithms hidden inside classes 
prevented experimentation structure algorithms 
region region region region eye region region eye eyes mouth face left tracking network face tracking defined xvision 
right output face tracker 
upper row images shows raw video lower row images shows graphics produced tracker overlaid live video 
ffl objects take advantage haskell polymorphic type system 
quickly clear recreate basic structure xvision trackers directly haskell importing entire tracker highly complex indivisible black box 
second attempt imported non tracking specific core components xvision interfaces outside world image processing tools recreated haskell completely encapsulated monolithic object definitions 
particular easily capture core abstraction tracking cycle dsl experiment new tracking algorithms programming abstractions level 
improvement second effort replace feedback loops previously hidden trackers abstraction defining sequential set values pipeline 
pipeline abstraction served basis translation idiomatic useful dsl version trackers 
illustrate flavor approach describe key parts fvision system detail pipelines ssd stepper ssd tracker face demo described previous section 
space limitations preclude explanation syntactic detail feel examples cases self explanatory indication naturalness dsl design 
pipelines pipelines provide declarative view iterative loops xvision 
specifically allow definition iterative networks computation pure functions operate pipelines 
functions mathematical sense word state result function application depend function past 
pure functions essential feature fvision offer advantages dsl framework ffl system specifications including computer vision described mathematical terms 
translating specifications dsl resembles domain specific mathematics relatively easy 
ffl equally important specification method flow diagrams signal processing stateless 
flow diagram ones loops converted easily set mutually recursive fvision equations isomorphic 
ffl reasoning analyzing transforming programs generally easier programs rely global state 
ffl understanding components pure functions easier interface rest program explicit implicit 
furthermore case pipelines conceptually infinite length haskell substrate fvision built easily supports lazy evaluation 
infinite pipelines quite common fvision programming user need worry problems termination 
fvision type pipeline containing values type written pipe example type pipe float denotes pipeline floating point numbers pipe image denotes pipeline images 
note type constructor pipe polymorphic pipeline contain different type value 
simple pipeline written pipe elements pipeline 
elements type may images floating point numbers 
fvision supplies rich set functions construction combination de structuring pipelines 
case function operates images floating point numbers say wish lift operate pipelines images floating point numbers 
place polymorphic higher order functions really shine redefining functions operate pipelines simply provide family polymorphic lifting operators pipe 
pipe pipe 

pipe 
pipe pipe 


pipe 
pipe 
pipe pipe takes function arguments aka constant turns constant pipeline contains value pipe takes function argument turns function takes pipeline arguments returns pipeline results pipe takes function arguments turns function takes pipelines arguments returns pipeline results example pipe creates version multiplication function written fvision operates pipelines numbers yielding pipeline products 
pipe pipe pipe :10.1.1.100.9674:10.1.1.17.7696
pipe pipe pipe pipe :10.1.1.100.8004
pipe pipelines may split joined functions pipe :10.1.1.37.5006
pipe 
pipe pipe 
pipe pipe example pipe pipe 
pipe pipe 
pipe pipe way combine pipelines multiplex multiplex function merges pipes third pipe switch essence just conditional function lifted pipeline domain multiplex pipe bool 
pipe 
pipe 
pipe multiplex pipe cond cond pipelines may include interactions outside world 
io actions fvision type io type family functions io 
pipe 
io 
pipe 
pipe yield pipelines execute io action iteration pipeline 
example acquire sz pos io action acquires image size sz position pos video device acquire sz function acquires sequence images fixed size sequence different positions video frame 
feedback loops require delay hold value time step 
delay function delays values pipeline step initial value element pipe delay 
pipe 
pipe feedback state expressed control loops delay function express stateful trackers 
example tracker applies function step generate new state old iteration function yields iterated tracker iterate 



pipe 
pipe iterate combine xs delay pipe combine xs note pipeline defined recursively example infinite pipe 
particularly useful function built iterate integral computes running total values input pipe integral num 

pipe 
pipe integral xs iterate xs summary pipeline abstraction takes advantage haskell features polymorphic typing pipe type pipe functions higher order functions pipe functions iterate function lazy evaluation multiplex iterate integral functions 
ssd stepper ssd tracker follows image moves video stream 
xvision tracker defined complex object structure containing different methods internal state 
inner structure ssd contains loop acquires region image compares image adjusts apparent location image account movement taken place previous frame 
fvision ssd tracker broken parts stepper tracker 
stepper pure function fvision code 
code direct transcription ssd algorithm fvision readable familiar underlying algorithm unimportant 
important type signature declares takes inputs images image parameter returns delta direction move camera adjust current image match image residual estimate closeness match area camera 
component ssd tracker 
implemented pipeline abstraction proved trivial implement ssd tracker shown 
translate flow diagram graphical syntax textual syntax pipeline abstraction represent lines diagram 
type signature reveals basic operation video stream initial position tracked feature image tracked feature function returns pipelines sequence points sequence residuals 
cyclic dependencies tracking algorithm expressed flow diagram directly reflected dependencies variables expression fvision definitions introduced expression mutually recursive 
lazy evaluation ensures step evaluation occur proper order demand image acquired video device current position ssd stepper computes delta current position delta added current position 
integral function serves essential role delaying computation step 
uses delta computed previous iteration compute value integral 
complex trackers show compositional nature fvision ability scale complex tracker ssd shown 
tracker part face program mentioned earlier 
tracks eye position different images open eye closed eye 
tracker compares current image images open closed eye choosing move tracker delta associated image smallest residual error value associated 
tracker fuses results ssd sub trackers image 
trackers share common state current position image continuously compared images image closely matching current image guide tracker 
result includes pipeline booleans indicating images currently tracked 
fusion replacing image parameters arbitrary trackers 
tracker returning delta residual combined similar tracker yield composite tracker 
higher order functions natural way express sort abstraction fvision 
sort abstraction cumbersome closures hold partially applied functions defined built manually 
implementation issues hope previous section provides convincing evidence fvision valuable dsl computer vision 
section address practical issues involved designing implementing fvision embedded dsl haskell connecting large library xvision 
domain vocabulary key part building domain specific language vision processing providing basic vocabulary necessary express operations domain efficiently 
consists primitive data types domain experts want principally case images matrices useful set operations create manipulate output values types 
essential tool task foreign function interface generator easy values operations look haskell values operations fvision programmer 
partly habit partly image 
image 
delta double mt transpose inverse mt mt error delta error residual norm error delta delta residual ssd stepper video 
pos 
image 
pipe pos pipe double video image acquire video sizeof delta residual pipe image position integral delta position residual ssd tracker eye video 
pos 
image 
image 
pipe pos pipe bool eye video image acquire video sizeof pipe image pipe image pipe 
delta multiplex integral delta eye tracker pipeline abstraction wanted domainspecific operations pure free unaffected side effects lazy performed required 
making xvision library look way required little ffl operations pure programmers rarely document facts 
necessary familiar implementation interfaces underlying image processing library 
ffl easy pure operations lazy impossible reason lifetime objects created lazy operations manual storage management new delete infeasible 
fortunately provides mechanisms haskell garbage collector take task managing objects programmer object returned haskell function added list objects managed haskell haskell longer requires object managing calls delete release object 
try operations pure operations acquiring image drawing image screen necessarily impure purity laziness merely design guidelines helpful dogmatic 
discovered need standard im age matrix operations programmers just code inline 
example trackers needs compute image mask applying threshold image 
common general purpose operation xvision applications xvision provide function directly 
way add function add operations manipulating individual pixels image code function haskell way add function code add xvision 
chose second way reasons 
crossing boundary haskell relatively expensive cost function calls efficiency reasons wanted avoid boundary crossing overhead tight loops 

new image processing functions wanted add general purpose functions thought xvision ought provide 
best way avoid reinventing wheel sure knew wheels stored xvision library 
way rigid separation domainspecific language domain specific operations helped clarify operations needed 
final factor influenced design process grew dynamics project collaboration vision researchers functional programming researchers 
naive users functional programmers try things didn sense computer vision world complained vision researchers obtained strange results 
example adding color images doesn sense pixels represented bit numbers overflow color field spills color field resulting strangely colored images 
problems prompted development precise type system images keeps color images separate gray scale images 
type system quickly prototyped haskell giving functions types restrictive 
having type system catches trivial errors doesn interfere programmer plan express type system directly class hierarchy 
failed attempt importing xvision haskell thing try import xvision high level abstractions haskell 
reasons include ffl goal redesign xvision high level abstractions want buy existing abstractions fear hard invent appropriate abstractions harder prototype new ideas 
ffl low level objects operations simple understood obvious interfaces high level objects operations complex interfaces 
just wasn obvious essence high level objects 
ffl high level objects class hierarchy 
probably mimicked haskell wasn obvious 
obvious existing class hierarchy right design just convenient code 
far missed xvision high level abstractions 
virtual cameras displays reason provide functions pipeline library acquire images video devices 
functions relatively late addition library earlier versions fvision opening video device returned pipe images subimage operation acquire small part image 
version simpler reason forced abandon severe performance problems 
video device drivers run operating system kernel capture images small number memory buffers shared user mode program 
shared memory buffers copy image unshared memory putting pipe 
video device generates frames second mbytes early applications spent time copying memory 
particularly typical image processing application examines regions kbyte 
solution add functions acquire functions view single physical camera represented pointer object number separate virtual cameras providing pipe subimages full camera image 
similarly plan add support view physical window desktop collection virtual windows displaying relevant images data inside fvision pipeline 
easy standard functional programming technology solve problem observed fvision xvision complex application starts typically opens dozen small windows screen window randomly positioned screen window manager 
assessment ways development fvision experiment software engineering dsl design exceeded expectations terms scope performance simplicity usability 
remainder section discuss issues turn 
performance reasons initially chosen interface xvision high level belief haskell force pay high performance cost 
turns supposition unfounded 
fact programs written fvision run fast native code currently run interpreted 
surprising 
discovery attributed fact bottleneck vision processing programs high level algorithms prototyped haskell low level image processing algorithms imported 
result fvision fact realistic alternative prototyping delivering applications 
doubt situations performance haskell code may require migration efficiency case haskell express high level organization vision system appreciable impact performance 
furthermore haskell interpreter experiment hugs small footprint included application seriously increasing size vision library 
choice scope noted original goals incorporate high level xvision code black box 
retrospect initial attempts doing required effort moving level developing complete xvision system dsl 
largely attributed fact lower level operations xvision fit haskell programming paradigm simpler interfaces straightforward incorporate 
programmer productivity enlarging scope dsl additional advantage allowing quickly explore design space visual tracking implications design far faster prototype 
pipe library example 
simplistic prototype pipes developed xvision 
consisted lines code written months 
code designed add existing xvision hoped data flow processing eventually impact development aspects system 
designing pipe library fvision took days programmer time consists just lines fvision code excluding comments blank lines 
attributed largely ability describe pipes lazy lists polymorphism import basic image operations pipes 
furthermore explore implications pipes remainder system particular ssd completely dsl 
result concrete notion redesigned xvision pipe abstraction look 
flexibility problems xvision past years software abstractions reasonably domain real time vision resists simple encapsulation 
tracking methods fact tuned modified large variety ways 
making possibilities available generic interface various modalities proven cumbersome reason initial prototype difficult construct 
dsl particular development pipes clarified design system easier expose inner workings individual algorithms 
result composition new tracking systems simpler 
pipeline model basis parallel execution shared memory multiprocessors loosely coupled collection processors 
related aware efforts create specialpurpose language computer vision exist dsl writing video device drivers 
level quite bit lower working conceivable substrate 
papers numerous mention tools building dsl scratch relevant previous efforts embedded dsl 
previous examples dsl embedded haskell include fran language functional reactive animations dsl scripting com components 
share fvision haskell vehicle expressing abstraction modularity 
general discussions advantages programming pure functions quite numerous particular relevance describes functional languages rapid prototyping describes power higher order functions lazy evaluation glue needed modular programming 
pipelines similar notion streams functional programming community textbook haskell address :10.1.1.100.9674
streams signal processing operating systems contexts dates back years 
streams proposed basis functional animation 
domain specific language powerful software engineering tool increases productivity flexibility complex applications ordinary program libraries effective 
creating full fledged dsl library difficult expected results worth investment 
lessons learned dsl design project include 
level interface native code dsl crucial choice developing effective system 
involves going deeper domain expect 

process dsl design uncover interesting insights may apparent domain specialists 
working bottom develop language forces domain specialists dsl specialists examine re examine underlying domain right abstractions interfaces 

performance soft real time applications acceptable provided care taken interfaces 

haskell served basis embedded dsl 
principal features haskell rich polymorphic type system higher order functions significant advantage dsl 
adding small haskell interpreter system significantly increase size degrade performance 
supported nsf ccr experimental software systems 
arya 
functional animation starter kit 
journal functional programming january 
bird wadler 
functional programming 
prentice hall new york 
conal elliott 
modeling interactive multimedia animation embedded language 
proceedings conference domainspecific languages 
usenix october 
conal elliott paul hudak 
functional reactive animation 
international conference functional programming pages june 
finne simon peyton jones 
pictures simple structured graphics model 
glasgow functional programming workshop july 
hager belhumeur :10.1.1.147.629
efficient region tracking parametric models illumination geometry 
appear ieee pami october 
hager toyama 
xvision system general purpose substrate real time vision applications 
comp 
vision image understanding 
january 
henderson 
purely functional operating systems 
functional programming applications advanced course pages 
cambridge university press 
henderson 
functional programming formal rapid prototyping 
ieee transactions sw engineering se 
hudak 
building domain specific embedded languages 
acm computing surveys electronic december 
paul hudak 
modular domain specific languages tools 
proceedings fifth international conference software reuse pages 
ieee computer society june 
kahn swain firby 
gesture recognition perseus architecture 
proc 
ieee conf 
comp 
vision patt 
recog pages 
mundy 
image understanding environment program 
ieee expert december 
simon peyton jones erik meijer dan leijen 
scripting com components haskell 
proceedings th international conference software reuse pages 
ieee acm 
sl 
peyton jones nordin reid 
foreign language interface haskell 
proc haskell workshop amsterdam june 
consel thibault marlet 
domainspecific language video device drivers design implementation 
proceedings conference domain specific languages pages 
usenix october 
group 
users manual 
university new mexico albuquerque nm 

