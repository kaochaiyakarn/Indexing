vispro visual language generation toolset da qian zhang kang zhang department computing macquarie university nsw australia kang mq edu au implementation visual programming languages vpls supporting environments time consuming tedious 
ease implementation researchers developed high level tools greatly reduce effort developing vpls 
easily create complete visual language seamless way lex yacc tools textual language constructions 
presents vispro toolset developing diagrammatic vpls way similar lex yacc 
vispro consists set visual programming tools 
divides process vpl construction steps lexicon definition grammar specification 
lexicon definition defines visual objects visual editor language grammar specified graph rewriting rules associated actions written java 
compiler vpl automatically created grammar specification 
target vpl visual programming environment contains compiler visual editor 

implementation visual programming languages vpls supporting environments usually time consuming tedious 
task harder implementing textual languages 
researchers developed high level tools ease implementation visual languages 
example supports construction applications visual languages object relationship abstractions 
provides mechanisms iterative design rapid prototyping generation visual language applications integrated environment 
diagen tool producing diagram editors construct visual programs 
tools greatly reduce effort developing visual languages focus mainly construction user interface aspects vpls 
visual language compiler generator 
generated parser supports additional action routines written 
allows specify complicated actions form rules 
support generation visual programming environment 
progres generate programming environments parsing algorithms 
existing programming languages java specify actions rules directly 
uses simple textual language part system 
limits functionality target vpls 
limited visual object construction ability produce syntax directed editors difficult 
progres uses layered graph grammar specify vpls 
results complicated parsing algorithm performance reaches exponential time 
tools sil icon frameworks support vpl generation 
easy generating target vpls simply done predefined frameworks domain specifications 
sil icon compiler generalised icon theory limited iconic vpls 
positional grammars underlying theory pure images single level visual objects limitations visual representations 
lex yacc tool divides process language creation steps lexicon definition grammar specification 
created lexicon grammar analyzers combined serve language parser 
particular rules grammar actions written allows lex yacc specify wide range textual languages 
presents toolset called vispro provides similar mechanism lex yacc process constructing vpls 
easy tools vispro meta visual languages 
formally represent vpls vispro uses reserved graph grammars express wide range diagrammatic vpls 
graph grammar vispro set graph rewriting rules associated ac tions written java 
target language compilers large class diagrams automatically generated polynomial time vispro grammar specifications 
set language components visual objects created direct manipulation visual editor produced control specifications 
visual programming environment integrating visual editor compiler created 
vispro provides high level support vl developers rapidly construct wide variety domain oriented diagrammatic vpls 
easily create user interface underlying language specific visual language 

vispro toolset vispro complete vpl specified lexicon definition grammar specification 
lexicon definition describes vpl visual objects editor visual objects create program 
grammar specification syntax semantics defines program valid means 
visual programming environment created automatically definition specification 

tools vpl lexicon means classes visual objects vos 
specific vpl lexicon 
vispro lexicon definition independent design vpl syntax semantics general lexicon library predefined 
avoid repetitive number vpls need designed common vos 
tool vispro framework customized domain oriented functional module domain specifications provided 
vispro framework specification tools called vispro system provide complete effective support vpl generation 
specification tools developed vispro framework architecture 
visual object generator vo generator control specification generator cs generator rule specification generator rs generator generate view specifications control specifications parsing specifications respectively shown 
vo generator graph editor constructing visual objects direct manipulation 
constructed visual object just image 
may composite graph components manipulated independently 
cs generator specify control visual objects constructed vo generator 
rs generator specifies domain knowledge graph rewriting rule formalism 
consequently domain specifications produced automatically specification tools format framework recognize 
vispro object oriented language java serves low level specification tool specify details desirable specified visual specification tools 
arrangement allows precisely construct simple effective visual tools maintaining completeness 
illustrates vispro system constructing vispro control specification generator visual object generator rule specification generator 
java control specification visual object specification graph rewriting rules vispro frame generation 
user creates desired visual objects vo generator 
uses cs generator choose pre defined construct sophisticated editing commands created visual object rs generator specify grammar rules actions 
construction process low level details actions may specified java provided text editor 
necessary specifications provided fed vispro framework generates customized target 

case study sections explain functions specification tool demonstrating construction simple visual programming environment called summation 
sophisticated similarly built process interactions 
snapshot generated summation 
summation sum integers visualize results 
visual classes numbers pluses 
number stores integer entered keyboard 
plus receives integers numbers produces summation integer stored number sent plus snapshot summation scaler number plus pointer sent scaler visualization 
scaler visualizes integer vertical bar pointer little horizontal mark indicates integer value height vertical bar 
maximal minimal values scaler respectively changed entering new values keyboard 
pointer scaler position representing execution result simple visual program shown 
program execution displays numbers changed values sent 
sections introduce specification tools explain summation created tools 

visual object generator vispro framework vo generator generates set visual classes suit special purpose visual languages editing predefined visual objects called vo prototypes 
call process customisation 
vo prototype customisable 
shows visual classes customised vo prototype black box original form 
edit vo prototype triggering editing commands attached box clicking right mouse button mouse box 
shows menu commands box 
example selecting command create vertex menu items vertex created box 
subgraph vertex commands popped menu editing subgraph obtain desired shape color 
construct scaler example command called triggered pop menu 
command opens dialog box contains set graph patterns 
scaler selected black box reshaped scaler shown 
dimension color scaler edited labelled necessary 
shows nodes created number plus scaler 
may notice scaler fixed pointer 
semantics pointer created dynamically mouse program editing scaler pointer time 
done vo generator specifying construction style dynamic selecting menu item named construction command menu popped vertex 
attributes parameterise node classes summation 
domain attribute scaler pointer integer number value integer plus integer integer sum integer example need set value number object called num simply write num put value put method number class 
scaler class method attributes called put rewritten value number connected pointer scaler changes position pointer adjusted accordingly 
modification done java 
modules need know modification scaler put method automatically call put method 
method call scaler put pointer put integer attributes associated scaler adjust position pointer geometrically 
edge class created vo generator 
edge named flow summation defined shown little filled rectangles supposed replaced vertices application edge 
vo prototype edge customized changing shape color label menu items respectively 
diagram workbench prototype customized workbench specific vpl set node classes snapshots visual object construction generating edge class vo generator edge classes 
specified control specification 
vo prototype edited graph representing icon workbench 
workbench accessed opened icon 
shows icon summation workbench 
summation workbench created diagram workbench special icon 

control specification generator 
object oriented editing commands process editing diagram seen number steps execution command set graphs 
usually visual editor commands visual objects independent 
execution command selection command target graph 
object oriented formalism graph object encapsulates set related commands 
problem command knows targets arises command target 
solve problem designed set operations series interactions user editor 
operation provide certain information command command executed correctly combined proper operation 
cs generator visually generate control specification understood object oriented controller 
controller allows basic commands triggered canvas user defined commands triggered created visual objects 
cs generator assigns set editing commands relationships visual class 
visual objects instantiated visual class trigger assigned commands 
basic editing commands include cut copy paste create link open property properties pre defined vispro framework 
user wishes define additional commands specify java 

command specification visual objects handled cs generator include edge objects node objects command objects 
edge object ellipse instance edge class defined target vpl 
value label type edge class flow entered modified keyboard 
node object drawn unfilled rectangle instance node class 
edited icon summation examples command specification form super vertex embedded vertices 
example node labelled plus represents plus class summation 
command object gray box represents editing command value delete link entered keyboard 
shows visual sentence specifies part summation control 
node object labelled workbench represents visual editor summation 
workbench label reserved word cs generator 
workbench node object links command list includes create commands 
create specification generated interpreting link command object node 
create command node linking plus node example interpreted produce command specification create create plus plus create plus name command menu item 
number node object super vertex labelled number vertices labelled 
vertex vertex labelled command link links edge object labelled flow 
flow edge object links vertices labelled pointer 
indicates link pointer summation 
control specification diagram produce list control specifications follows workbench create create plus plus create create number number create create scaler scaler indicates create commands triggered visual editor canvas 
specification number link connect flow indicates number link command named connect linked vertices edge object instantiated flow edge class 
specifications number flow plus number flow plus number flow number number flow scaler point 
describe number may linked visual objects instantiated plus plus number scaler 
point visual classes number means vertex labeled super vertex labeled number 
number 
link vertex classes indicated specifications 
control specification diagram extended specify complete behaviour summation 
cs generator provides intuitive easy way produce control specification visual editor 

rule specification generator 
graph grammar grammar vpl collection graph rewriting rules 
visual sentence interpreted rules graph transformations 
graph grammar handle wide range visual languages effectively efficiently 
example grammar expressive represent various types vpls parsing algorithm usually reaches exponential time 
proposed new type graph grammar known reserved graph grammar effectively represent existing types diagrams parsing algorithm polynomial time complexity 
shows reserved graph grammar summation 
grammar completely describes syntax valid summation diagram 
example plus plus number connect plus number connect destination 
plus number link tions include number plus plus scaler pointer 
graph grammar specifies semantic aspects 
shows valid summation diagram 
semantics graph applied grammar rule graph applied followed graph 
wrong result appear 
example graph applied numbers correct values graph result graph incorrect 
order applications allowed graph rewriting system dictates rule applied unmarked visual object object edges matched rule 

parsing parsing diagram takes phases syntax parsing semantics parsing 
syntax parsing check diagram valid 
diagram eventually transformed initial graph graph rewriting rules valid 
semantics parsing produce result diagram 
result meaningful diagram valid 
translation process say diagram textual specification syntax semantics usually specified set graph rewriting rules 
case graph transformation process checks syntax translates graph textual specification time 
executable diagram case 
syntax semantics specifications petri net visual language example specified separately 
petri net executed repeatedly syntax checking done finite steps 
summation syntax semantics speci sum numbers reserved graph grammar summation plus number number number number number transfer datum number scaler pointer scaler number remove scaler remove number transfer datum number number number number number number number number pointer scaler pointer scaler action action action attributes attributes int sum int property attributes get value int property attributes get value property attributes put sum sum action attributes attributes vertex pointer pointer attributes put vertex attributes get value action attributes attributes attributes put value attributes get value fied set graph rewriting rules shown 
create parser vpl write piece code action graph rewriting rule 
action performs computation attributes redex subgraph program productions redex applied 
actions graph rewriting rules summation listed 
actions desired results produced graph transformation 
example action production follows 
action attributes attributes int sum int property attributes get value application grammar int property attributes get value property attributes put sum sum action takes graph input 
graph matching redex isomorphic right graph production facilitate access attributes redex array referring required attributes produced method 
array member attributes example refers attribute super vertex ref number 
sum calculated summing values matched numbers 
stored attributes result 

rule specification rs generator facilitates rule specification 
snapshot rs generator kinds nodes left graph node right graph node represent left graph right graph production 
example node labeled left graph node production node labeled duplex head rule list 
indicates rules applied duplex mode 
production created linking left graph node right graph node 
graph node defining graph 
addition textual editor workbench triggered right graph writing action code 
shows snapshot creating production rule summation graph grammar windows opened editing left graph right graph production respectively 
textual window editing action 
rs generator provides visual editors specifying snapshot rule editor graph rewriting rules textual editor specifying actions 
rs generator produce graph rewriting rules automatically interpreting connected editors 

implementation vispro implemented java object oriented language 
advantage java platform independent system ported different platforms 
advantage java developed network programming 
characteristic support construction vpls allow visual programming internet distributed applications 
implementation vispro includes functional modules shown configuration interpreter receives configuration specification transfers lexicon definition specification user interface grammar specification parsing module 
user interface controls interaction users vispro tools 
underlying structure manages diagrams edited 
configuration interpreter documentation user interface logical structure parsing underlying structure 
modules actions parsing logical structure module creates manages logical graph converted underlying structure diagram 
parsing module designed parse logical structure diagram reserved graph grammar formalism 
documentation module automatically records edited diagrams parsing results 
actions module collects actions vpl grammar specifications 
collected actions represented java program dynamically linked parsing module execution 

described vispro generate diagrammatic vpls 
vispro consists tools facilitates aspect construction vpls 
vpl construction process vispro similar textual language construction process lex yacc 
vispro framework customized target visual language set domain specifications 
ease visual language generation tools domain specifications developed 
specification tools visual languages graph properties domain specifications easily described direct manipulation 
vispro framework specification tools provide complete support vpl generation 
generate wide range visual programming environments easily 
current implementation vispro suitable constructing kinds vpls lacks flexible support layout target visual editor 
framework vispro difficult add mechanism 
kinds layout diagram local layout global layout 
local layout related operated objects 
example relation created objects geometrical relationships may need changed 
geometrical change object may result changes objects called global layout 
vispro grammar system extended solve problem 
local layout concerned single command graph rule attached command perform layout 
global layout layout grammar similar language grammar specified layout parser produced 
approach general solve complicated layout problem 
myers taxonomies visual programming program visualisation journal visual language computing pp 
nutt environment rapid construction visual language applications proceedings th ieee symposium visual languages oct pp 
minas diagen generator diagram editors providing direct diagrams proceedings th ieee symposium visual languages darmstadt germany sep pp 
golin compiler generator visual languages proceedings th ieee symposium visual languages bergen norway august pp 
rekers anda implementation visual environments proceedings th ieee symposium visual languages boulder colorado usa sep 
winter visual programming graph rewriting systems proceedings th ieee symposium visual languages darmstadt germany sep pp 
rekers defining parsing visual languages layered graph grammar journal visual languages computing feb 
chang tauber yu yu language compiler software engineering may pp 

lucia automatic visual programming environments ieee computer march pp 

zhang zhang reserved graph grammar specification tool proceedings th ieee symposium visual languages capri italy sep ieee cs press 
