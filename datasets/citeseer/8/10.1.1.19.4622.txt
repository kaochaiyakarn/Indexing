linear logic monads lambda calculus nick benton university cambridge computer laboratory new museums site pembroke street cambridge cb qg uk nick benton cl cam ac uk philip wadler university glasgow department computing science gardens glasgow qq uk wadler dcs glasgow ac uk models intuitionistic linear logic provide models moggi computational metalanguage 
adjoint presentation models associated adjoint calculus show translations due mainly moggi lambda calculus computational metalanguage direct call name call value correspond exactly translations due mainly girard intuitionistic logic intuitionistic linear logic 
consider extending results languages recursion 

significant developments semantics decade girard linear logic moggi computational metalanguage :10.1.1.41.840
student formalisms suspect significant connections despite apparent differences 
intuitionistic fragment linear logic ill may modelled linear model symmetric monoidal closed category comonad satisfies extra conditions relating monoidal structure 
moggi computational metalanguage may modelled monad model cartesian closed category monad satisfying different conditions relating cartesian structure 
situations close dual quite entirely benton alternative presentation models ill adjoint models cartesian closed category symmetric monoidal closed th ieee symposium logic computer science new brunswick new jersey july 
category connected functors left adjoint additional structure easy describe adjunction symmetric monoidal :10.1.1.13.7158
fg linear model gf monad model 
linear model arises way members significant class monad models 
models corresponds logic associated term calculus 
logic associated monad models computational metalanguage intuitionistic modal logic dubbed cl logic 
associated linear models ill proposals linear term calculi 
choose calculus 
corresponding adjoint models lnl term calculus referred adjoint calculus lnl logic :10.1.1.13.7158
girard proposed mappings intuitionistic logic equivalently simply typed lambda calculus ill equivalently linear term calculus labelled ffi 
connection ffi translation call name cbn lambda calculus translation call value cbv lambda calculus previously noted :10.1.1.29.6130
moggi proposed translations clearly labelled call value call name lambda calculus computational metalanguage wadler discusses :10.1.1.33.5381:10.1.1.41.840
start source calculi identical syntax different semantics direct calculus usual simply typed lambda calculus lifted calculus typed version abramsky ong lazy lambda calculus call value calculus typed version plotkin calculus name 
calculi interpretations adjoint model translations monadic calculus yielding semantics linear calculus yielding semantics trivial mapping monadic calculus girard ffi translation linear calculus 
moggi cbn translation slight variant girard ffi translation 
moggi cbv translation girard translation 
central result calculi interpretations essentially mates adjunction instance girard translation published corresponds exactly moggi call value translation published see case 

categorical models section recall central semantic definitions results shall need :10.1.1.13.7158:10.1.1.41.840
definition adjoint model specified 
cartesian closed category theta 
symmetric monoidal closed category omega gammaffi 
symmetric monoidal adjunction ffl range objects arrows range objects arrows particularly important examples adjoint models arise operation lifting categories complete partial orders 
category pointed cpos domains strict continuous maps 
smcc tensor product smash product internal hom strict continuous function space 
take category cpos continuous maps predomains category pointed cpos continuous maps 
cases obtain adjoint model inclusion functor lifting functor 
monoidal structure isomorphism omega 
theta 
exploit isomorphisms lemma adjoint model 
theta fx omega fy 
gb fx gammaffi 
definition monad model specified 
cartesian closed category theta 
strong monad relation adjoint models monad models propositions proposition ffl adjoint model gf monad model commutative monad 
proposition monad model commutative monad addition eilenberg moore category reflexive pairs symmetric monoidal closed ffl adjoint model forgetful free functors respectively 
definition linear model specified 
symmetric monoidal closed category omega gammaffi 
symmetric monoidal comonad ffl ffi 
monoidal natural transformations components disc dupl omega disc dupl commutative comonoid disc dupl coalgebra maps coalgebra maps free coalgebras preserve comonoid structure 
relation adjoint models linear models propositions proposition ffl adjoint model fg ffl fjg linear model 
proposition linear model gives rise adjoint model full subcategory eilenberg moore category coalgebras general unique 
adjoint linear model may finite products essential direct translation call name call value translations 
correspondence adjoint linear models maintained presence products 

term calculi syntax type rules source calculi just usual simply typed lambda calculus pairing unit type 
briefly difference calculi different equational theories satisfies usual fi rules just satisfies fi rules satisfies restricted fi laws 
computational metalanguage extends simply typed calculus new unary type constructor theta tx adds elimination forms syntax theta theta tx theta tx theta ty theta ty types linear term calculus omega gammaffi syntax shown 
adopt conventions distinct linear contexts mention disjoint sets variable names variable name occuring rhs definition inference rule chosen fresh 
constructs bind variables capture avoiding substitution defined obvious typing rules 
syntax fairly standard known terms associated translations large unwieldy 
alternative dill dual intuitionistic linear logic syntax due wadler independently plotkin barber 
dill term translations appear elegant connection commonest presentations ill little indirect 
stressed works equally syntax 
omit standard details interpretation linear monadic calculi respective models 

translations presenting translations monadic linear calculi note giving details natural erasures map monadic linear calculi source calculi 
translations shall translation appropriate erasure identity source calculus typing judgements show translation preserves reflects typing judgements 
assume working adjoint model linear calculus interpreted monadic calculus 
direct translations direct translation ffl just trivial inclusion simply typed lambda calculus computational metalanguage computation type constructor 
corresponding translation ffi linear calculus usually known girard translation shown 
translations ffi ffl give equivalent semantics hardly surprising motivations girard original formulation linear logic subsequently touchstone formulation various categorical models 
details glossed notable exception 
firstly observe gx ffi ffl source type unit type follows preserves limits whilst compound types follows little inductive calculation theta ffi def ffi ffi ffi limits gx ffi theta gy ffi induction ffl theta ffl def ffl theta ffl ffi def ffi ffi gammaffi ffi lemma gx ffi gy ffi induction ffl ffl def ffl ffl write top bottom composite chain natural bijections hom ffl theta delta delta delta theta ffl ffl relation ffl ffi hom gx ffi theta delta delta delta theta gx ffi gx ffi adjunction gx ffi theta delta delta delta theta gx ffi ffi lemma ffi omega delta delta delta omega ffi ffi relation translations proposition theta theta ffl ffl ffl theta ffi ffi ffi id gamma delta gamma delta omega gamma delta gamma delta omega omega omega gamma omega delta gamma delta omega gamma gamma gamma gamma gamma fst gamma gamma snd gamma gammaffi gamma gamma gammaffi gammaffi gamma gammaffi delta gamma delta der gamma gamma derelict weak gamma delta gamma delta discard contr gamma delta gamma delta copy promote delta delta delta delta delta delta delta promote 
linear lambda calculus translation ffi ffi theta ffi ffi ffi ffi ffi gammaffi ffi theta ffi theta ffi ffi ffi theta ffi theta ffi ffi discard derelict ffi theta ffi theta ffi theta theta ffi theta ffi ffi ffi ffi ffi theta fst ffi theta ffi fst ffi ffi theta snd ffi theta ffi snd ffi ffi theta ffi theta ffi ffi ffi ffi gammaffi ffi theta ffi theta ffi copy ffi promote ffi ffi 
direct translation ffi proof 
induction categorical semantics perform calculations directly convenient adjoint calculus internal language adjoint models 
describe adjoint calculus section 

lifted translations translations associated lifted call byname calculus shown 
moggi cbn translation 
slight variant girard translation appears new 
translation adds extra translations products function spaces compared ffi translation note seely isomorphisms omega hold linear category products 
similar reasoning direct translation calculate gx gfx type natural bijection oe hom gfx theta delta delta delta theta gfx gfx omega delta delta delta omega induction show proposition theta oe theta tx theta 
call value translations call value translations moggi cbv translation translation due girard :10.1.1.41.840:10.1.1.41.840
interestingly cbv translation central moggi girard thought translation interest 
translations shown 
terms translation family auxiliary macros px delta indexed types correspond admissible rules ill complexity arises uses dill syntax caused fact types translated free variables explicitly ed translation directly weakened contracted 
type define macro px delta px enable values type copied discarded 
need derelict px equation px delta coalgebra structure map necessary 
promote gamma gamma px thetay omega promote px py derelict omega derelict px promote simple inductive calculation shows type fx natural bijection hom theta delta delta delta theta gfx omega delta delta delta omega relation translations proposition theta theta tx theta worth remarking wished extend translation incorporate base types source language base type linear type define appropriate pb delta 
easiest way ensure take lb free coalgebra structure 
general may definitions pb delta possibly involving extralogical constants 
course wished proposition remain true check linear monadic translations base type constant symbol appropriately related necessary translation pairs 

adjoint calculus section sketch adjoint calculus describe translations prove main results :10.1.1.13.7158
adjoint calculus includes linear types terms corresponding objects arrows non linear types terms corresponding objects arrows syntax adjoint calculus shown 
note non linear terms non linear free variables linear terms may linear non linear free variables 
corresponding judgement xm xm arrow theta delta delta delta theta xm gamma 
corresponding judgement xm xm arrow theta delta delta delta theta xm omega omega delta delta delta omega gamma 
details semantics proof theory may :10.1.1.13.7158
translation 
theta theta ty tx ty theta theta tx theta theta tx tx theta theta theta theta theta tx theta ty theta fst theta fst tx theta snd theta snd ty theta theta tx tx ty theta theta ty translation 
theta omega gammaffi theta theta theta theta discard derelict theta theta discard theta theta theta copy promote omega promote omega theta fst theta omega discard derelict theta snd theta omega discard derelict theta theta promote gammaffi theta theta copy derelict promote 
lifted call name translations linear monadic calculi may translated adjoint calculus 
translations shown omitted entirely obvious clauses states omega translated omega translations preserve semantics sense linear term interpretation adjoint model equal step interpretation qua linear model similarly monad calculus terms 
equational axioms adjoint calculus shown 
example proof proposition may obtained showing theta oe rules plus usual rules equality including congruence oe macro corresponding bijection 

coproducts linear category binary coproducts models extension includes additive sum phi 
similarly monad model binary coproducts models extension binary sums 
led consider adjoint models binary coproducts correspondence proposition quite maintained add coproducts adjoint model derived linear category coproducts general weak coproducts happens concrete domain theoretic case category domains continuous maps kleisli category lift comonad 
weak coproducts choose assume working adjoint model coproducts translation theta theta ty theta theta tx theta theta tx theta theta theta theta theta theta theta fst theta fst tx theta snd theta snd ty theta theta ty theta theta ty translation theta omega gammaffi theta theta discard discard theta copy derelict omega derelict omega fst omega discard snd omega discard px promote derelict gammaffi copy derelict derelict derelict 
call value translations categories motivating concrete example category predomains continuous maps 
model fx phi fy right adjoint 
add sums source calculi usual syntax injections case analysis 
extend lifted call name translations take tx ty phi isomorphism gx gfx holds definition term translations shown 
call value translations take phi isomorphism fx holds terms shown 
case define px px case inl promote px inl derelict inr promote py inr derelict extension direct translations slightly subtle 
girard translation defines ffi ffi phi ffi keep gx ffi ffl take ffl ffl ffl ffl translation longer trivial inclusion 
cf 
fact naive domain theoretic semantics language interprets sum types separated sum domains 
extended ffl translation uses macro dx delta tx ffl dx ffl ffl dx equation dx delta algebra structure map necessary 
variables intuitionistic variables linear types intuitionistic theta ga types linear omega gammaffi fx contexts intuitionistic theta xn xn contexts linear gamma delta id theta id theta theta gamma theta theta theta theta theta theta theta theta theta theta fst theta theta theta snd theta gamma theta gamma theta gamma theta gamma theta gamma fst theta gamma theta gamma snd theta theta gamma theta delta theta gamma delta omega theta gamma theta delta theta gamma delta omega omega omega theta gamma omega theta delta theta gamma delta omega theta theta theta theta theta gammaffi theta gamma theta gamma gammaffi gammaffi theta gamma gammaffi theta delta theta gamma delta theta theta gf ga theta ga theta gamma theta theta fx theta gamma fx theta delta theta gamma delta fx 
adjoint lambda calculus dx thetay dx fst dy snd dx ffl dy dx extended term translations shown 
extension ffl translation sums depends dx delta add base types ffl type equipped appropriate db delta 
cf 
earlier translation reason demand free algebra structure type form proposition propositions remains true languages translations extended coproducts described 

recursion results extend languages recursion choice exactly recursion treated 
extension proposition linear model parameterised fixpoints kleisli category 
bearing case predomains mind stronger version due freyd crole pitts notion fixpoint object require certain fixpoints translation extract 
theta theta tx gfx theta theta theta tx theta gf gfx theta ty theta fx gamma gamma translation extract 
omega omega gammaffi gammaffi fga gamma gamma gamma promote gamma fgf gamma derelict gamma fx gamma gamma discard gamma fx gamma copy gamma fx fx 
translation monadic linear calculi adjoint calculus definition monad model freyd fixpoint object initial algebra oe omega omega oe gamma omega omega terminal coalgebra 
intend algebra coalgebra understood sense algebra functor algebra monad 
similarly say linear model linear initial algebra oe omega omega oe gamma omega omega terminal coalgebra 
monad model model extension adds syntax theta tx theta mfix theta theta tx gamma 
theta hi gamma gamma gamma gamma gamma gamma gamma gamma 
unique map oe gamma 
unique map theta theta omega theta theta omega theta theta tx ti theta oe commutes 
note requires oe omega omega initial parameterised sense consequence closed structure linear model linear model extension adds syntax delta 
delta delta delta box delta gamma gamma omega gamma gamma 
delta omega gamma gamma gamma gamma 
omega gamma gamma gamma gamma gamma 
omega omega gamma gamma 
fi rules theta gamma theta gamma theta gamma fst theta theta theta fst theta gamma theta gamma theta gamma snd theta theta theta snd theta gamma theta gamma theta delta theta gamma gamma delta omega omega theta gamma theta gamma theta gamma theta delta theta gamma delta theta theta theta theta theta gamma theta gamma theta theta gamma rules theta gamma theta gamma theta theta theta gamma theta gamma fst snd theta theta theta fst snd theta theta gamma fx theta delta fx theta gamma delta theta theta theta gamma theta delta theta gamma delta theta gamma gammaffi theta gamma gammaffi theta gamma omega theta delta omega theta gamma delta omega omega theta theta gamma 
equational axioms unique map oe gamma 
unique map omega omega omega omega omega omega omega gamma omega omega oe omega commutes omitted details context manipulation 
existence depends suitably parameterised initiality consequence ordinary initiality presence closed structure lemma adjoint model linear 
assume working adjoint model 
add recursion theta theta rec direct translations theta inl ffl theta ffl inl ffl ffl ffl theta case inl inr ffl theta ffl dz ffl case inl ffl inr ffl ffl inl ffi inl promote ffi ffi phi ffi case inl inr ffi ffi copy case ffi inl ffi inr ffi ffi lifted translations theta inl theta inl tx ty theta case inl inr theta case inl inr tz inl inl promote phi case inl inr copy case inl inr call value translations theta inl theta inl theta case inl inr theta case inl inr tz theta inl theta inl phi case inl inr copy case derelict inl derelict inr derelict 
translations coproducts extend lifted translations ffl theta rec theta mfix tx ffl theta rec theta box call value calculus add recursion just function types theta theta rec extend call value translations follows ffl theta rec theta mfix ty ffl rec promote box derelict gammaffi double variable rebinding caused fact promote box build substitution unfortunate easily avoided incorporating promotion rule 
extending correspondence direct translations language recursion involves dx delta macro introduced considering coproducts 
add recursion theta theta rec extend direct translations ffl theta rec ffl theta ffl mfix ffl dx ffl ffl rec ffi ffi box ffi ffi proposition proposition remains true languages translations extended recursion described 
proof proposition may obtained extending adjoint calculus terms equations corresponding fixpoint objects model 
lemma suffices add syntax nonlinear part calculus linear versions arise derived rules 
omit messy details 

linear monadic calculi sides coin 
precisely equivalent calculi viewed different sides adjunction 
straightforward answer certainly adjoint models give rise linear models commutative monad models 
know possible define non commutative linear calculus corresponds wider class monad models 
extent calculi give equivalent interpretations source calculi answer 
results formally similar obtained intuitionistic modal logics 
may relationship translations consequence character restrictions weakening contraction significance results extends treatment partiality lifting suggestive similarities remain 
example linear monadic types add updateable state functional languages controlled way 
hope may serve starting point formal comparison approaches 

gavin bierman martin hyland eugenio moggi valeria de paiva andy pitts gordon plotkin robert seely attendees workshop syntactic control interference linear logic held glasgow august fruitful discussions advice inspiration 
abramsky 
lazy lambda calculus 
turner editor research directions functional programming chapter pages 
addison wesley 
plasmeijer 
ins outs clean journal functional programming jan 
barber 
dual intuitionistic linear logic 
draft university edinburgh apr 
benton :10.1.1.13.7158
mixed linear non linear logic proofs terms models 
proceedings computer science logic poland volume lecture notes computer science 
springer verlag 
full version available technical report computer laboratory university cambridge october 
benton bierman de paiva 
computational types logical perspective technical report computer laboratory university cambridge may 
benton bierman hyland de paiva 
term assignment intuitionistic linear logic 
technical report computer laboratory university cambridge aug 
bierman de paiva 
intuitionistic necessity revisited 
proceedings logic conference amsterdam dec 

girard translation extended recursion 
proceedings computer science logic poland volume lecture notes computer science 
springer verlag 
crole pitts 
new foundations fixpoint computations fix 
information computation june 

girard 
linear logic 
theoretical computer science 
lincoln mitchell 
operational aspects linear lambda calculus 
proceedings seventh symposium logic computer science santa cruz 
ieee press june 
mackie 
geometry implementation 
phd thesis imperial college london 
odersky turner wadler 
call name call value call need linear lambda calculus 
technical report fakultat fur informatik universitat karlsruhe department computing science university glasgow mar 
moggi :10.1.1.41.840
notions computation monads 
information computation 
peyton jones launchbury 
state haskell 
lisp symbolic computation dec 
plotkin 
call name call value lambda calculus 
theoretical computer science 
wadler :10.1.1.33.5381
comprehending monads 
mathematical structures computer science 
special issue selected papers th conference lisp functional programming 
wadler 
syntax linear logic 
proceedings ninth international conference mathematical foundations programming semantics new orleans louisiana volume lecture notes computer science 
springer verlag apr 
