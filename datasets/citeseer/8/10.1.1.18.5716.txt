language high level efficient machine independent dynamic code generation dawson engler wilson hsieh frans kaashoek dynamic code generation allows specialized code sequences crafted runtime information 
information definition available statically dynamic code generation achieve performance inherently static code generation 
previous attempts support dynamic code generation low level expensive machine dependent 
despite growing dynamic code generation mainstream language provides flexible portable efficient support 
describe tick superset ansi allows high level efficient machine independent specification dynamically generated code 
provides performance benefits pure partial evaluation context complex statically typed widely language 
experiments prototype compiler show enables excellent performance improvement cases order magnitude easy specification dynamically generated code 
keywords dynamic code generation dynamic code generation generation executable code runtime allows runtime information improve code generation 
instance propagation runtime constants may feed optimizations strength reduction dead code elimination constant folding 
example interpreters compile frequently code execute directly technique improve performance order magnitude compared heavily tuned interpreters 
unfortunately current dynamic code generation systems satisfactory 
programmers choose portability ease programming including debugging efficiency efficiency sacrificing portability ease programming case fastest dynamic code generators :10.1.1.100.6047
attack problems adding support dynamic code generation directly ansi portability ease programming achieved high level machine independent specifications efficiency achieved static typing allows bulk dynamic code generation costs paid compile time 
call language tick 
inherits performance advantages partial evaluation 
differs languages partial ways 
language extensions prototype implementation done context ansi complex statically typed widely language 
second source source translation gives programmer powerful flexible mechanisms construction dynamically generated code 
control allows programmers dynamic code generation improved efficiency situations lcs mit edu mit laboratory computer science technology square cambridge ma 
supported part advanced research projects agency contract author partially supported nsf national young investigator award 
views contained document authors interpreted representing official policies expressed implied government 
normally applicable context aliased pointers simplicity act dynamic code generation simplify application implementation 
fact excellent substrate implement partial evaluators modern advanced languages 
describes superset ansi provides support specifying dynamically generated code addition type constructors unary operators 
contributions twofold designed efficient flexible high level means specifying dynamically generated code ansi statically typed language 
language design challenging static type system runtime specification arbitrary code difficult expressing functions number type arguments known compile time 
language design taken place context ansi believe mechanisms specify dynamically generated code mapped statically typed languages 
second contribution prototype compiler 
compiler allows demonstrate simplifies dynamic code generation improves application performance upto order magnitude 
structured follows describe language section 
give examples programs section show prototype implementation performs examples section 
outline efficient implementation section discuss related section summarize results section 
grammar appendix language conflicting goals driven design 
clean extension ansi syntactically semantically 
extensions affect syntax semantics ansi spirit ansi language 

allow flexible specification dynamically generated code 
instance allow construction functions parameters unknown number type static compile time 

allow efficient implementation 
important effect goal majority code generation costs paid compile time 
designing language satisfy goals difficult problem 
example achieving goal difficult may apparent 
responsible abandonment functional composition methodology specifying dynamically generated code 
functional composition conceptually elegant clumsy mechanics practice 
issue faced deciding dynamic static type system dynamically generated code 
dynamic type system aids flexible specification dynamically generated code adds form polymorphism language 
static type system efficient allows bulk instruction selection optimization occur compile time addition spirit ansi chose static type system resulting loss flexibility minor especially ansi provide mechanisms polymorphism 
gain performance large information provided static type system allows push dynamic code generation costs compile time 
result believe aggressive compiler achieve performance close hand crafted dynamic code generators 
language modifications term dynamic code mean dynamically generated code static code mean code 
dynamic code specified runtime specifications composed build larger specifications instantiated compiled runtime produce executable code 
term compile time mean static compiletime specification time mean code specified composed instantiation mean dynamic compiled runtime mean dynamic code executed 
dynamic code constructed function time invocation library ends function definition 
restriction reduces bookkeeping complications necessary language 
added type constructors unary operators ansi new type constructors cspec postfix declared types similar pointers 
associated evaluation type analogous type pointer points evaluation type allows dynamic code statically typed turn allows select instructions compile time 
new unary operators precedence standard unary prefix operators 
operator dynamically generated code specified backquote operator 
applied expression compound statement 
backquote expressions may nest allow specification dynamic code turn may specify dynamic code 
simple usages backquote specification dynamic code integer specification dynamic code call printf declared enclosing scope printf specification dynamic code compound statement int printf dnn dynamic code lexically scoped variables enclosing static code captured free variables dynamic code 
variable scope exited leads undefined behavior words downward legal 
lexical scoping allows type checking instruction selection occur compile time 
constructs restricted backquote expressions 
particular break continue case transfer control outside expression 
example destination label goto statement contained backquote expression 
restriction compiler statically determine control flow change legal 
similarly restricted dynamic code associated function 
cspec types type dynamic code specification type code specification evaluation type type dynamic value code 
example type expression isint cspec 
statically typing dynamic code specifications type check code composition described section statically 
usage lisp usage specifying list templates 
applying compound statement yields result cspec 
cspec type analogous generic pointer 
code generated may include implicit casts reconcile result type standard promotion rules ansi apply 
compiled function 
compile returns avoid function pointer cast appropriate type 
code fragment dynamically constructs instantiates traditional greeting void cspec printf hello compile call result indicates return type void 
compile operator operator allows dynamic code specifications combined larger specifications 
applied inside backquote legal operands cspec described section evaluated specification time 
dereferences cspec returns object type evaluation type operand 
returned object incorporated cspec occurs 
example fragment cis additive composition compose evaluation yields 
int cspec statements composed concatenation types concatenate null statements 
void cspec fg fg object variable specification represents dynamically generated lvalue evaluation type type lvalue 
allow lvalues statically typed perform instruction selection compile time 
objects may initialized calling library 
param create parameter function construction local reserve space activation record allocate register possible 
operator variable ansi lvalue rvalue inside backquote expression 
function returns code takes single integer argument adds returns result void cspec plus void arguments param argument index type 
int int param return return allow construct functions take runtime determined number arguments power necessary applications compiling interpreter described section 
consider takes runtime determined number integer arguments sums returns result 
possible construct function variable argument facilities requiring arguments marshaled integer vector solutions clumsy inefficient 
easily construct desired function construct function sum integer arguments 
void cspec construct sum int int cspec int int param create parameter add param current sum 
return return operator operator specialize dynamic code 
may applied expressions dynamic code 
operand evaluated specification time resulting value incorporated runtime constant 
illustrated code fragment 
demonstrate 
int cspec void cspec int bind runtime constant value point 
bind runtime value code run 
printf dnn compile run print 
compile standard library provide small library order minimize changes ansi example want change ansi allow construction function calls runtime 
appendix describes library detail 
discussion strict superset ansi necessary departures spirit points 
example memory required represent responsibility runtime system 
cspec objects allocation manipulation controlled programmer 
marked departure ansi dynamic allocation objects controlled programmer 
written function implementation due limitations dcg compiler target parameter allocation factored separate loop 
construct code scale matrix size constant 
void cspec int int int return int encoded directly loop termination check int multiplication strength reduced code scaling matrix runtime constant addition runtime checking ansi example compiler guard conflicting parameter definitions 
currently return type dynamically constructed functions specified dynamically way statically requires checking promotion return types done runtime 
inconvenient localized 
examples illustrate dynamic code generation easy examples 
matrix scaling scaling matrix runtime constant allows ample speedup dynamic code generation 
instance multiplication strength reduced shifts adds division strength reduced multiplication shifts adds 
additionally loop bounds encoded branch checks constants alleviate register pressure 
code expressing matrix scaling runtime constant shown 
example viewed programmer expressed partial evaluation 
compiling interpreter interpreters dynamic code generation technology improve performance compiling directly executing frequently interpreted pieces code 
show easily efficiently recursive descent compiling interpreter accepts subset call tiny 
tiny integer type supports relational arithmetic operations statements loops function calls control constructs 
subset parser shown 
noted degree flexibility exercised functions having arbitrary number parameters local variables created code specified composed diffuse fashion 
flexibility afforded example difficult write inefficient generated code 
addition experience specifying dynamically generated code easier constructing efficient interpreter 
implementation prototype compiler emits ansi code augmented calls dynamic code generation primitives 
compiler parses semantically checks generates code generates code correctly examples due artifact 
prototype allows demonstrate ease specify dynamic code generation 
addition despite lack optimization rudimentary optimization perform instruction scheduling peephole optimization achieve performance 
section describe implementation give better performance prototype 
rest section performance results code generated prototype compiler 
ran compiler examples section 
experiments conducted sparc system integer divide multiply software 
times measured unix system include user system time 
times median time trials 
static compilation done gcc versions 
matrix scaling compare static matrix scaling routine routine 
run experiments division multiplication 
multiplication done matrix division matrix type short 
experimental times measure summation time required scale matrix integers implementation include time generate code runtime 
performance multiplying integer matrix runtime constant improved factor 
performance dividing matrix runtime constant improved factor 
dramatic improvements possible sophisticated factorization scheme strength reducing division 
compiling interpreter recursive fibonacci program measure performance implementations tiny 
tree interpreter wrote simple interpreter translates tiny syntax trees recursively evaluates 
gcc compile tiny gcc optimization level 
gives upper bound quality local code 
run compiling interpreter described section 
test computes th fibonacci number summarizes results 
code generated simple backend fairly efficient performance gcc performance 
numbers include cost dynamic code generation numbers lower bounds performance code 
comparing results interpreter see dynamic code generation times faster evaluator 
matrix scaling code approximately factor slower hand 
emit ir global optimization 
global perspective technique give order magnitude improvements performance operating system extension languages packet filters 
developing compiler generate code templates implementation take full advantage static type system allows instruction selection occur compile time :10.1.1.100.6047
templates highly specialized code emitters chosen statically holes instructions runtime constants addresses variables filled runtime 
templates allow bulk code generation analysis done compile time emit code quickly 
example register allocation done statically symbolic register specifications software register renaming runtime select actual registers 
implement template driven code generation compiler capture closure cspec 
closure consists pointer template collection values determined compiletime operands addresses free variables code specification 
closure specification time create specified code 
expect templates improve speed dynamic code generation order magnitude :10.1.1.100.6047
related dynamic code generation long history 
increase performance operating systems windowing operations dynamically typed languages simulators matrix manipulations :10.1.1.38.5072
systems typically low level non portable dynamic code generation techniques 
applications specify code simple portable efficient manner 
grew previous efficient retargetable dynamic code generation system 
offers improvements dcg portability flexibility 
provides high level interface code specification dcg interface intermediate representation lcc 
second provides static analysis reduces cost dynamic compilation compiler support dcg runtime analysis 
making dynamic code generation class capability high level language profiling debugging facilities added 
languages lisp dialects perl provide eval operation allows code generated dynamically 
approach extremely flexible unfortunately comes high price languages dynamically typed little code generation cost pushed compile time 
language design issues involved appear designing macro languages weise crew :10.1.1.22.5371
difference macro languages allow programmers specify code templates compiled statically dynamic code templates compiled runtime 
interestingly surprisingly syntax chose turned similar weise crew 
massalin briefly note designing language code synthesis lambda :10.1.1.38.5072
discuss design implementation issues note type checking synthesized code non trivial 
leone lee describe programmer supplied hints perform compile time specialization primitive functional language data structures mutable heap allocated data structures pointers integers :10.1.1.35.6058:10.1.1.35.6058
achieve low code generation costs templates 
contrast rudimentary set helper parsing functions remove token input stream returns type 
int void put token back input stream 
void void result compare tok input symbol 
int look int tok consumes expected token gives parse error 
void expect int tok pointer current token 
char cur tok symbol table functions associate name error insert duplicate 
void insert sym char name int return associated name 
int lookup char name return function pointer associated name 
int lookup char name parse unary expressions expr int cspec expr void switch case return expr atoi cur tok case return expr case return expr case return expr case int cspec expr expect return case id id function call 
look return expr lookup cur tok return expr default parse err bogus expr name arg arg 
void cspec void int ip lookup cur tok void cspec args fg consume epsilon look consume return ip arg arg get argument list args push args void cspec expr look look break parse err malformed arg list consume return ip args consume zero declarations int idf idg void declare void declarations 
look int return id insert cur tok switch case break declaration case declare return start decl seq default parse err malformed declaration parse err expecting id binary expressions int cspec expr int cspec switch case return expr case return expr case return expr case return expr case return expr case le return expr case return expr case ge return expr case ne return expr case eq return expr case case return default parse err bogus expr simple iteration control ow statements void cspec stmt void int cspec void cspec switch case return return expr return expr expect return case expr stmt expect expr expect stmt return case expr stmt stmt 
expect expr expect stmt look return stmt return case stmt push scope declare fg 
look stmt expect pop scope return case return fg case id id expr int lvalue lookup cur tok expect expr expect return lvalue default expression statements allowed parse err expecting statement subset tiny recursive descent parser description statically compiled code multiplication division matrix scaling routines times seconds 
gcc tree interpreter calculation th fibonacci number times seconds 
control provided hints gives programmer powerful flexible mechanisms construction dynamically generated code difficult see compiler section easily efficiently realized system 
additionally language extensions prototype implementation done context ansi complex non functional language 
keppel addressed issues relevant retargeting dynamic code generation 
developed portable system modifying instruction spaces variety machines 
system dealt difficulties caches operating system restrictions address select emit actual binary instructions 
unix systems provide utilities dynamically link object files executing process 
retargetable dynamic code generation system emit code file spawn process compile assemble code dynamically link result 
preliminary tests gcc indicate compile assembly phases require approximately cycles instruction generated 
current implementation orders magnitude faster 
dynamic code generation efficient portable specifying dynamically generated code flexible simple 
described superset ansi satisfies constraints paid close attention preserving semantics spirit ansi examples programs demonstrate expressiveness language prototype compiler demonstrates achieve excellent performance dynamic code generation improve performance order magnitude low level optimization 
reliance static type checking reduces cost runtime compilation code generation operations instruction selection performed compile time 
furthermore types known statically compiler optimize dynamic code static code 
bershad chambers eggers maeda mcnamee pardyak savage sirer 
spin extensible microkernel application specific operating system services 
tr univ washington february 
chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
proceedings pldi pages portland june 
consel danvy 
tutorial notes partial evaluation 
proceedings th popl pages charleston sc january 
deutsch schiffman 
efficient implementation smalltalk system 
proceedings th popl pages salt lake city ut january 
engler proebsting 
dcg efficient retargetable dynamic code generation system 
proceedings asplos vi pages october 
fraser hanson 
code generation interface ansi technical report cs tr princeton university dept computer science princeton new jersey july 
harbison steele jr manual 
prentice hall englewood cliffs nj third edition 
urs lzle david ungar 
optimizing dynamically dispatched calls run time type feedback 
proceedings pldi pages orlando florida june 
jones sestoft 
mix self applicable partial evaluator experiments compiler generation 
lisp symbolic computation 
david keppel 
portable interface fly instruction space modification 
fourth international conference architectural support programming languages operating systems pages april 
leone lee 
lightweight run time code generation 
proceedings workshop partial evaluation semantics program manipulation pages copenhagen denmark june 
massalin :10.1.1.100.6047
synthesis efficient implementation fundamental operating system services 
phd thesis columbia university 
mogul rashid accetta 
packet filter efficient mechanism user level network code 
proceedings th sosp pages austin tx november 
pike reiser 
hardware software trade offs bitmap graphics 
software practice experience february 
pu massalin ioannidis :10.1.1.38.5072
synthesis kernel 
computing systems 
rees clinger editors revised report algorithmic language scheme 
aim mit ai lab november 
steele jr common lisp 
digital press second edition 
veenstra fowler 
mint front efficient simulation shared memory multiprocessors 
modeling simulation computers telecommunications systems 
wall 
perl programming language 
prentice hall software series 
weise crew 
programmable syntax macros 
proceedings pldi pages albuquerque nm june 
grammar grammar consists grammar specified harbison steele manual additions unary expression backquote expression expression dollar expression backquote expression unary expression compound statement expression unary expression dollar expression pointer unary expression cspec type qualifier type qualifier cspec type qualifier pointer type qualifier pointer standard library appendix describes standard library 
type specifications number functions standard library expect types local param push compile 
type information specified rudimentary string specification similar 
built types specified letter type 
example unsigned short specified 
pointers represented operationally treated pointers purposes storage register allocation 
aggregates arrays structures specified single size additional argument 
character appended type strings indicate allocated object address taken 
information addressing derived runtime doing quickly add complexity code generator 
library description void compile void cspec code char type spec int type size void compile generates machine code 
type spec gives return type generated function type size optional argument give size aggregate types 
compile take number flags relating optimization debugging profiling 
void local char type spec int type size local returns access local variable type type spec reserves space activation record function currently specified 
void param int param num char type spec int type size param returns access parameter spec num 
void cspec push void cspec args char type spec void cspec code spec int type size push returns spec call stack argument 
void cspec jump void cspec target jump returns cspec jump 
useful constructing hard coded finite state machines 
void self void void self returns pointer function invocation return 
allows construction recursive calls 
runtime constructed function calls function calls constructed fly library takes argument list constructed far type argument argument possibly size argument 
consider function sum sums runtime determined number integer arguments 
call sum construct argument list runtime push 
addition allow void cspec assume represents argument list incorporated single argument call sum args specifies code calls sum argument list specified int cspec construct call int nargs int arg vec void cspec args fg initialization int argument arg vec nargs create cspec pushes call stack 
args push args arg vec return sum args 
