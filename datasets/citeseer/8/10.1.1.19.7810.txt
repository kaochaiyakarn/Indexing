embedded language framework hardware compilation koen claessen gordon pace chalmers university gothenburg sweden inria alpes grenoble france 
various languages proposed describe synchronous hardware level 
propose uniform framework languages developed combined simulation synthesis verification 
embedding languages lava hardware description language hdl embedded functional programming language haskell 
approach allows easily experiment new formal languages language features provides easy access formal verification tools aiding program verification 
essentially di erent ways describing hardware 
way structural description designer indicates components connected 
designing hardware structural level tedious time consuming 
ords exchange speed size circuit ability design circuit describing behaviour higher level abstraction automatically compiled structural hardware 
way describing circuit usually called behavioural description behavioural descriptions describe specification circuit 
exist number languages structurally describe hardware 
example synchronous language lustre compiled hardware structurally 
languages behavioural description example esterel occam :10.1.1.144.4878
popular industrial description languages vhdl verilog allow kinds descriptions 
partially supported european research consortium informatics mathematics ercim 
distinguished behavioural descriptions industrial hdls verilog vhdl describe functionality circuit necessarily hardware counterpart 
deal synchronous hardware latches circuit listen omnipresent global clock 
clock cycle input circuit defined point circuit stabilises exactly voltage low high 
require feedback loop circuit contains latch 
main classes languages ones description determines timing behaviour cycle cycle resultant circuit ones explicit timing control compilation guarantees output algorithm designated points algorithm matches circuit 
languages strict timing necessary describe circuits protocol implementations reactive systems circuit continuously runs sampling inputs behaving accordingly 
practice compilation schemata fall classes 
particular commercial synthesis tools verilog vhdl usually provide user option choosing strictly timing behaviour specified adhered 
rest talking exclusively strict timing compilation approach equally applicable languages loose timing 
embedded description languages technique programming language community called embedded languages framework merge structural behavioural hardware descriptions 
embedded description language realised means library existing programming language called host language 
library provides syntax semantics embedded language exporting function names implementations 
basic embedded language lava 
lava structural hardware description language embedded functional programming language haskell 
hardware descriptions lava netlist descriptions automatically generated example implement described circuit field programmable gate array fpga 
previously led highly cient implementations complicated circuits 
embedding language powerful concept descriptions embedded language class objects host language 
case lava means hardware descriptions generated analysed transformed full blown programming language 
idea build layer top lava embeds behavioural description language 
order specify syntax behavioural language way compiled structural hardware description 
possible describe lava framework syntax described haskell datatype compilation process described lava circuit description 

possible embed di erent behavioural description languages features advantages disadvantages 
way describe hardware system di erent languages different parts single framework 
examples uses embedding way behavioural structural behavioural language describe parts plug parts structural language multiple behavioural structural having di erent behavioural languages structural behavioural describe sub procedure behavioural algorithm structurally behavioural behavioural describe sub procedures behavioural language behavioural language 
examples useful describing circuits specifications 
examples non trivial achieve claim generic solution 
contribution proposes common framework quickly experiment di erent approaches new behavioural languages 
framework propose lava powerful describing new languages giving semantics implementing combining 
context developing behavioural description languages convenient circuit descriptions analyses transformations implementation verification methods backed full blown programming language 
section briefly introduce lava show simple high level language regular expressions embedded lava instances language manipulated syntactically compiled circuits 
section illustrate embedded language approach extends easily complex languages presenting small imperative style language flash 
section discusses advanced issues various ways combining di erent high level languages verification compiled programs exploring potentially dangerous combinational loops 
embedding hardware description languages circuit descriptions lava circuit descriptions lava correspond function definitions haskell 
lava library provides primitive hardware components gates multiplexers delay components 
give short lava example 
example description register 
contains multiplexer mux delay component delay 
delay component holds state register initialised low 
set new old delay low mux set old new new old set mux note declared circuit inputs output 
note definitions outputs possible local wires old part declaration 
circuit description simulate circuit lava normal haskell function 
generate vhdl describing circuit 
possible apply circuit transformations retiming perform circuit analyses performance timing analysis 
lava connected number formal verification tools automatically prove properties circuits 
generic parametrized circuit definitions bit register create bit register array putting registers 
lava inputs arbitrarily wide represented means lists 
generic circuit working number inputs defined recursion structure list 
set set new news val vals val set new vals set news note pattern matching distinguish cases list empty non empty xs element list xs rest 
circuit descriptions parametrized 
example create circuit delay components series introduce parameter description 
delayn inp inp delayn inp inp delay low inp delayn inp pattern matching recursion define circuit 
note parameter static meaning known want synthesise circuit 
parameter circuit number 
example express circuit descriptions take circuits parameters 
call parametrized circuits connection patterns 
examples parameters include truth tables decision trees state machine descriptions 
talk circuit descriptions take behavioural hardware descriptions programs parameters 
behavioural descriptions objects order parametrize circuit definitions behavioural descriptions embed behavioural description language lava 
declaring haskell datatype representing syntax behavioural language 
illustrate concepts small language regular expressions 
syntax regular expressions expressed haskell datatype data regexp input sig star regexp regexp regexp regexp regexp data objects belonging type interpreted regular expressions example expressed input star input input note variables type sig signals provided programmer regular expression 
outputs existing circuit taken extra parameters definition particular regular expression 
interpret signal high character input 
regular expressions simply data objects generate expressions haskell programs 
example define power function regular expressions power power power similarly regular expressions manipulated modified 
example simple rewriting simplification defined follows simplify simplify simplify simplify simplify simplify star star simplify star 
useful algorithm expressed reduces linear time regular expression empty string occur language assume body star produce empty string 
compiling regular expressions circuits circuits generate regular expressions input start outputs match prefix 
start set high circuit start sampling signals 
output match set high resulting sequence signals included language represented expression 
output prefix corresponds wire indicates compiled circuit active parsing regular expression failed respect received inputs 
note circuit get extra inputs correspond parsed symbols 
part regular expression means input construct 
prefix start match type resulting circuit type circuit regexp sig sig sig resulting circuit input outputs 
express compilation process circuit definition parametrized regular expression regexp regexp circuit regexp prefix start match low empty string compilation empty string straightforward usage prefix match wires regexp start prefix match prefix low match start start match prefix signal input regular expression input matched signal high circuit started 
regexp input start prefix match prefix start match delay low prefix start match prefix sequential composition regular expression start accepting expression matching start trying match expression regexp rexp rexp start prefix match prefix match regexp rexp start prefix match regexp rexp match prefix prefix prefix prefix start match loops circuit accepting regular expression star similar accepting restarted time inputs match regexp star rexp start prefix match prefix match regexp rexp match match start match start match prefix non deterministic choice inputs match regular expression exactly match expression regexp rexp rexp start prefix match prefix match regexp rexp start prefix match regexp rexp start prefix prefix prefix match match match circuit resulting compilation scheme necessarily cient 
optimisations constant folding input gate low high sharing identical gates identical inputs tree changing linear chain associative gates balanced tree constant circuit point provably value 
rigorous optimisation methods necessary case external circuit optimisation tools sis 
compiling flash section show slightly bigger example language call flash 
quite basic language illustrates issues encounters dealing hardware compilation 
meant just example deal quite informally semantics flash 
formal treatment semantics similar languages :10.1.1.144.4878
flash syntax declare haskell datatype embeds syntax flash 
data flash skip delay shout ifthenelse sig flash flash sig flash flash flash flash flash flash simple imperative programming language containing usual statements skip sequential composition 
simplicity language expressions 
lava gates directly create signal representing condition loop 
create interesting output added shout statement 
statement spirit esterel emit statement 
special output circuit called shout high shout executed 
parallel composition fork join semantics 
lastly delay statement statement takes time 
executed blocks process clock cycle 
note shout takes time execute 
example flash program output clock output alternating high low written alternate high shout delay delay compiling flash finish start shout circuits compile flash programs input start set high start program 
outputs shout high program shouts finish high program done 
see compilation schemata various language constructs flash 
show lava code constructs 
case loop looks follows flash cond prog start shout finish shout finish flash prog start restart start finish start restart cond finish restart inv cond re start body loop loop started body just finished 
case depending condition restart body finish 
note created loop finish depends start depends restart depends finish 
fact loop combinational loop say section 
translate parallel composition flash prog prog start shout finish start finish low shout start finish shout low start finish shout start finish shout skip shout delay sequential composition shout start finish cond finish synchroniser shout start shout start finish cond conditional parallel composition loops fig 

compiling flash shout finish flash prog start shout finish flash prog start shout shout shout finish synchroniser finish finish start processes soon parallel composition started 
shout processes shouts 
finish 
little circuit called synchroniser keeps track processes generates high finish signal exactly processes finished 
synchroniser finish finish finish finish finish xor finish finish wait delay low xor wait finish wait wire high processes finishing time 
wire high exactly process finishing 
wire wait high process finished 
advantages embedding section discuss advantages embedding behavioral languages general hardware description framework lava 
combining languages choice right language solve problem crucial simplify algorithm generate cient circuits 
example regular expressions useful generate circuits validate input outputting mechanism di cult impossible perform calculations output results 
consider problem designing circuit accepts input sequences behave clock half period circuit useful monitoring real input expressing properties formal verification 
easy write generic regular expression specified behaviour star power input power input inv consider regular expression design circuit monitors inputs accepting behave clocks half periods size smallest regular expression capable doing size order magnitude common denominator big practice 
solutions 
design new language easy describe circuits mentioned 
fact su ce add conjunction regular expression operator require extra compile time ort 
combine solutions subproblems recognising clock structural level lava ok ok regexp start ok regexp start start delay high low ok ok ok obviously subprograms need language 
example want run flash program prg abort soon input match regular expression rexp parameterised circuit abort rexp prg start shout finish shout finish flash prg start prefix regexp rexp start shout shout prefix nesting languages problem approach mentioned deal input output produced circuits low level 
quite error prone di cult change shape produced circuits 
cleaner approach express combination programs structural level behavioural 
example allow adding flash subprograms regular expressions augmenting syntax regular expressions data regexp 
flash consider problem generating circuit recognises input order 
required sub expression regular expression result expanding expression lead blow circuit size 
flash program simple write wait inv delay perm wait wait wait delay required regular expression easily example star perm perm interfaces match done compilation regular expression form defined 
approach undesirable ect new language uses compilers languages need modified able import programs new languages old ones 
extendable approach add import construct language data regexp 
circuit regexp data flash 
circuit flash order import flash programs regular expressions provide parameterised circuit flash regexp converts format 
flash regexp start prefix match shout finish start prefix shout match finish needless say ways flash circuit transformed regular expressions 
example generate calculate active wire flash circuits corresponds regular expression prefix wire 
defining conversion circuits careful invalidate invariants languages involved assume obey 
technique mentioned section help 
calling language simply matter import construct right conversion circuits 
error wires go wrong execution program 
exactly go wrong depends semantics language 
standard example language arithmetic expressions division zero 
clear corresponding compiled circuit case want circuit simply abort 
language parallel composition things go wrong due parts circuit requiring single access processes trying send message channel time processes updating shared variable time semantics language disallows situations sure programs compile hardware behaved 
solution propose extra output circuit goes high soon goes wrong program execution error wire 
wire logic generating appear final implementation circuit verify means model checking methods program question error free 
consider change semantics flash requiring process shout time 
warned compile time program violates property 
add error wire output flash circuits adapt compilation scheme accordingly 
interesting case parallel composition flash prog prog start shout error finish shout error finish flash prog start shout error finish flash prog start shout shout shout shout shout error orl error error finish synchroniser finish finish error parallel composition programs error processes processes shout time 
declare property circuit outputs high certain property holds 
prop prog start inv error error flash prog start output ok high error program prog 
check property lava command verify 
lava verify prop alternate delay alternate verify 
valid 
lava verify prop shout delay shout verify 
falsifiable 
error wire technique find bugs compilation scheme 
languages certain invariants hold program 
raising signal error wire invariant violated verifying absence error random programs technique similar developed find bugs increase confidence compilation scheme 
combinational loops looking compilation scheme construct see possible introduce combinational loops cycles circuit delay component 
usual solution case require body loop takes time execution path goes delay statement 
restriction resulting circuit contain combinational loops 
combinational loops bad sense actual circuit produces undefined outputs 
case combinational loops called constructive 
combinational loops circuit constructive external formal verification tools lava connected able deal loops 
fortunately method temporal induction naturally verify properties cyclic circuit definitions 
method sound loops circuit constructive loops 
implement formally verify actual circuits containing possible bad loops prove loops constructive 
lava provides circuit analysis called constructive exactly 
lava verify constructive flash high delay verify 
valid 
lava verify constructive flash high skip verify 
falsifiable 
parallel composition 
acceptable body loop contain parallel composition 
take example flash program inp high ifthenelse inp skip delay delay principle able execute programs program delay takes time execute 
analyse resulting circuit inp flash inp lava verify constructive verify 
falsifiable 
shows simple compilation scheme illustrate examples su ciently robust handle example 
obviously require sides parallel composition take time appearing immediately inside body loop 
stringent unsatisfactory restriction 
better solution complex compilation loops example 
related hardware compilation high level languages quite 
approach considered potentially practical mainly programmable circuits 
compilation various languages appeared literature see 
introductory overview methodology appears 
widely recognised di erent styles synchronous languages lend easily di erent applications 
mode automata combination state diagram descriptions argos dataflow language lustre 
semantics resulting language defined translation plain lustre 
approach similar external programs read mode automata translate lustre 
embedded language approach allows translate reason new language level base hdl lava 
allows versatile approach language combination 
theoretical framework combining synchronous languages synchronous automata common semantic level 
ideas implemented synchrony workbench programs written number languages esterel lustre argos synchronous eifel combined 
main di erence embed languages intermediate language lava embedded language 
gives certain advantages easier add new languages framework language combination easily adapted depending requirements 
discussion uniform framework easy implement experiment behavioural languages 
embedding languages lava able define compilation natural easy way time benefit verification tools connected lava improve compilation verify programs 
benefit fact directly generate vhdl circuits generated embedded compilers 
approach shown formally reason programs number levels 
advantage fact programs just data objects haskell apply syntactic reasoning defining functions modify program 
second verification tools linked lava define observers languages verify properties hardware described structural lava language 
third compilation process verification tools check dynamic properties may needed guarantee correct compilation 
framework implemented various languages subsets esterel handel occam fragments process calculi csp cbs restricted temporal logics 
embedded state machine descriptions specification languages framework 
included di erent control data features including updatable variables bu ered ered channels exceptions broadcast communication 
describing compilation language straightforward fact successfully framework teaching graduate course hardware description languages 
definition compilation function language usually di erent denotational semantics language terms dataflow network 
important issues discussed question correctness compilation procedure 
number approaches proposed applicable compilation scheme 
currently exploring proofs uniformly framework 
preliminary encouraging di cult prove instance compilation regular expressions satisfies regular expression equational axioms 

gerard berry 
constructive semantics pure esterel 
unfinished draft available www esterel org 

gerard berry 
esterel primer 
available www esterel org 

claessen 
safety property verification cyclic circuits 
preparation 

claessen hughes 
quickcheck light weight tool random testing haskell programs 
conference functional programming 

claessen sheeran 
tutorial lava hardware description verification system 
available www cs chalmers se koen lava 

koen claessen mary sheeran singh 
design verification sorter core 

springer 

singh sis system sequential circuit synthesis 
technical report berkeley ucb erl 

halbwachs 
tutorial lustre 
available www verimag imag fr 

halbwachs caspi raymond pilaud 
synchronous dataflow programming language lustre 
proceedings ieee 

jifeng ian page jonathan bowen 
provably correct hardware implementation occam 
milne pierre editors correct hardware design verification methods number lncs 
springer 

paul hudak 
building domain specific embedded languages 
acm computing surveys 


operational compositional semantics synchronous automaton compositions 
concur number lncs 
springer 


compositionality criteria defining mixed styles synchronous languages 
international symposium compositionality significant di erence number lncs 
springer 

florence yann 
mode automata modes states reactive systems 
european symposium programming 
springer 

david may compiling occam silicon 
hoare editor developments concurrency communication university texas austin year programming series chapter pages 
addison wesley 

ian page 
constructing hardware software systems single description 
journal vlsi signal processing 

ian page wayne luk 
compiling occam field programmable gate arrays 
wayne luk moore editors fpgas pages 
ee cs books 

simon peyton jones john hughes report programming language haskell non strict purely functional language 
available haskell org 


combination synchronous languages 
international symposium compositionality significant di erence number lncs pages 
springer 

pascal raymond 
recognizing regular expressions means dataflow networks 
rd international colloquium automata languages programming icalp number lncs 
springer 

halbwachs 
lustre hardware design environment 
robert editors conference algorithms parallel vlsi architectures ii chateau de bonas 


provably correct hardware compilation timing diagrams 
available semantik informatik uni oldenburg de persons michael 

mary sheeran singh gunnar stalmarck 
checking safety properties induction sat solver 
fmcad lncs 
springer 

berry touati 
constructive analysis cyclic circuits 
european design test conference 

singh phil james 
lava hdl bitstream seconds 
pocek arnold editors ieee symposium fpgas custom computing machines 
ieee computer society press 

niklaus wirth 
hardware compilation translating programs circuits 
computer 
