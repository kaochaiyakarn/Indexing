metrics suite aspect oriented software zhao department computer science engineering fukuoka institute technology ku fukuoka japan zhao cs fit ac jp large body research software metrics focused procedural object oriented software software metric aspect oriented software 
propose metrics aspect oriented software speci cally designed quantify information ows aspect oriented program 
de ne metrics dependence model aspect oriented software consists group dependence graphs explicitly represent various dependence relations di erent levels aspect oriented program 
proposed metrics measure complexity aspect oriented program various di erent 
software metrics aim measure inherent complexity software systems view predicting project cost evaluating quality ectiveness design 
software metrics applications software engineering tasks program understanding testing refactoring maintenance project management 
research software measurement adapt emergence new software development methods metrics new languages design paradigms de ned models relevant new paradigms 
aspect oriented programming proposed technique improving separation concerns software design implementation 
aspect oriented programming works providing explicit mechanisms capturing structure crosscutting concerns software systems 
aspect oriented programming languages cleanly modularize crosscutting structure concerns exception handling synchronization performance optimizations resource sharing usually dicult express cleanly source code existing programming techniques 
aspect oriented programming languages control code tangling report se information processing society japan ipsj march 
lying concerns apparent making programs easier develop maintain 
research aspect oriented programming reaching maturity number active research products software metrics researchers need focus new paradigm order eciently evaluate rigorous quantitative fashion 
aspect oriented system basic program unit aspect procedure class 
aspect encapsulation state associated advice operations signi cantly di erent abstraction procedure units procedural programs class units objectoriented programs 
inclusion join points aspect complicates static relations aspects classes 
order de ne metrics estimating complexity aspect oriented software models appropriate representing aspect oriented systems needed 
large body research software metrics focused procedural object oriented software software architectures software metric aspectoriented software 
due speci features aspect oriented software existing models abstractions procedural object oriented software applied aspect oriented software straightforwardly 
propose metrics assessing complexity aspect oriented software speci cally designed quantify information ows aspectoriented program 
metrics de ned dependence model aspect oriented software consists group dependence graphs de ned levels aspect oriented program explicitly represent various dependence relations program 
proposed metrics measure complexity aspect oriented software various di erent viewpoints 
rest organized follows 
section gives background information related research 
section presents dependence graphs aspect oriented software levels abstraction 
section de nes set complexity metrics aspect oriented programs dependence graphs concluding remarks section 
ce public class point protected int public point int int public int getx return public int gety return public void setx int public void sety int public void system println point public static void main string args point new point setx sety ase aspect private int public static int return 
private shadow point shadow public static void associate point shadow shadow public static shadow point return shadow pe pointcut setting int int point args call point new int int pe pointcut point target call void point setx int pe pointcut point target call void point sety int ae int int point returning setting shadow new shadow associate ae point shadow new getx shadow offset ae point shadow gety shadow offset ce class shadow public static final int offset public int shadow int int public void system shadow sample aspectj program 

aspect oriented programming aspectj assume readers familiar basic concepts aspect oriented programming aspectj target language show basic idea metrics aspect oriented software 
selection aspectj popular aspectoriented language community 
sample program taken brie introduce aspectj 
program shown associates shadow points point object contains aspect stores shadow object point classes point shadow 
aspectj seamless aspect oriented extension java 
aspectj adds new concepts associated constructs java 
concepts associated constructs called join points pointcut advice aspect 
join point essential element design aspect oriented programming language join points common frame de nes structure crosscutting concerns 
join points aspectj de ned points execution program 
join points aspectj method constructor call method constructor execution class object initialization eld assignment handler execution 
pointcut set join points optionally exposes values execution join points 
aspectj de nes primitive pointcut designators identify types join points 
pointcuts aspectj composed new pointcut designators de ned combinations 
example aspect pointcuts declared names setting 
advice de ne code executed pointcut reached 
aspectj provides types advice 
addition special cases advice called returning throwing 
example aspect pieces advice setting 
advice declarations change behavior classes crosscut change static type structure 
crosscutting concerns operate static structure type hierarchies aspectj provides forms 
aspectj aspect add new elds constructors methods bodies interfaces classes 
public private private means code aspect declared refer access introduced elds constructors methods 
example aspect declaration private shadow point shadow privately introduces eld named shadow type shadow point 
means code aspect refer point shadow eld 
aspects modular units crosscutting implementation 
aspects de ned aspect declarations similar form class declarations 
aspect declarations may include advice pointcut declarations declarations method declarations permitted class declarations 
example program de nes aspect named 
aspectj program divided parts code includes classes interfaces language constructs java aspect code includes aspects modeling crosscutting concerns program 
example sample program divided non aspect code containing classes point shadow aspect code aspect 
implementation aspectj ensure aspect non aspect code run properly coordinated fashion 
process called aspect weaving involves making sure applicable advice runs appropriate join points 
detailed information aspectj refer 

software intend measure attributes entity build model entity attributes explicitly described model 
aspect oriented programming languages di er procedural objectoriented programming languages ways 
di erences example concepts joint points advice aspects associated constructs 
aspectoriented features may impact development model aspect oriented software 
section dependence model aspectoriented software capture attributes concerning information ow aspect oriented program 
model consists dependence graphs representing aspect oriented system levels module level aspect level system level 
level dependence graph support develop dependence metrics di erent levels 
module level dependence graphs subsection describe represent module piece advice method aspect dependence graph 
method dependence graph mdg represent method aspect 
mdg digraph vertices represent statements predicate expressions method arcs represent types dependence relationships control dependence data dependence 
control dependence represents control conditions execution statement expression depends method 
data dependence represents data ows statements method 
mdg unique vertex called method start vertex represent entry method 
advice dependence graph adg represent piece advice aspect 
adg similar mdg method vertices represent statements predicate expressions advice arcs represent control data dependencies vertices 
piece advice unique vertex called advice start vertex represent entry advice 
dependence graph idg represent aspect 
idg similar mdg method vertices represent statement predicate expressions arcs represent control data dependencies statements 
unique vertex called start vertex idg represent entry 
aspect level dependence graphs aspect interprocedural dependence graph represent single aspect aspect oriented program 
aspect digraph consists number representing piece advice method aspect special kinds dependence arcs represent direct indirect dependencies call called advice method transitive interprocedural data dependencies aspect 
unique vertex called aspect start vertex represent entry aspect 
aspect start vertex connected start vertex adg idg mdg aspect aspect membership arcs represent membership relations 
order model parameter passing aspect 
formal formal vertices associated advice method start vertex actual vertices associated call vertex representing call site aspect 
formal parameter vertex ase aspect membership arc control dependence arc parameter parameter call arc ae data dependence arc ae pe pe pe ae aspect program 
control dependent start vertex actual parameter vertex control dependent call vertex 
instance variables declared aspect accessible advice introductions methods aspect create formal formal vertices instance variables referenced advice introductions methods 
pointcut connect aspect start vertex pointcut start vertex aspect membership arcs connect pointcut start vertex corresponding advice start vertex call dependence arcs represent relationships 
example 
shows aspect 
example gure ase aspect start vertex ae pe advice pointcut method start vertices respectively 
ase ae ase pe ase ase aspect membership arcs 
advice method start vertex root sub graph adg idg mdg 
system level dependence graph system level dependence graph called aspectoriented system dependence graph asdg represent complete aspect oriented program 
asdg aspectoriented program collection dependence graphs representing piece advice method aspect program additional arcs represent direct indirect dependencies call called module transitive interprocedural data dependencies 
rst introduce represent interactions aspects classes construct complete asdg 
representing interactive aspects classes aspect interact class ways creating object class aspect call method piece advice aspect method class declaring public aspect add eld method constructor class weaving code declared advice aspect class code join points 
rst second ways similar class interactions objectoriented program third fourth ways unique aspect oriented programs 
describe interactions 
creating objects aspectj aspect may create object class declaration operator new similar java class 
aspect creates object class implicit call constructor 
represent implicit constructor call add call vertex place object creation 
call dependence arc connects call vertex start vertex constructor mdg 
actual actual vertices added call vertex match formal formal vertices constructor mdg 
making calls call site method advice aspect method public interface connect call vertex method start vertex form call dependence arc connect actual formal vertices form parameter dependence arcs ae ae ae control dependence arc parameter parameter call arc data dependence arc coordination arc asdg program 
actual formal vertices form parameter dependence arcs 
introductions aspectj aspect interact class declaring public adding additional eld method constructor represent interaction connect class start vertex class dependence graph start vertex idg class membership arc join points aspectj join points de ned aspect pointcut designator 
pointcuts de nition advice 
carefully examining join points declared pointcuts associated advice determine weaving points statically non aspect code facilitate connection non aspect code aspect code 
weaving vertices sdg represent weaving points non aspect code connect sdg non aspect code aspect code 
example order determine weaving point weaving code declared advice method class point 
pointcut declaration knew code advice inserted method sety class point 
know exact place insert code 
examining advice declaration know advice advice 
aspectj programming guide advice runs computation join point nishes method body run just control returned caller know code declared advice inserted place statement method sety 
similarly determine weaving points non aspect code 
aspect oriented system dependence graph generally aspectj program consists classes interfaces aspects 
order execute program program include special class called main class 
program rst starts main class transfers execution classes 
construct asdg complete aspectj program rst construct sdg non aspect code existing techniques proposed object oriented programs insert weaving vertices sdg 
coordination dependence arc connect weaving vertex advice start vertex corresponding adg 
call dependence arc added call vertex start vertex adg idg mdg called advice method 
actual formal parameter vertices connected parameter dependence arcs 
example 
shows complete asdg sample aspectj program 
metrics aspect oriented software program dependencies dependence relationships holding program elements program determined control ows data ows program regarded intrinsic attributes programs 
reasonable take program dependencies objects measuring program complexity 
section de ne set complexity metrics terms program dependence relations measure complexity aspect oriented program various viewpoints 
dependence graphs aspect oriented program constructed metrics easily computed terms dependence graphs 
module level metrics rst de ne metrics module level adg idg mdg 
metrics measure various complexities piece advice method general viewpoint 
module piece advice method aspect dependence graph metrics 
number control dependence arcs measure complexity module special viewpoint control structure 
number data dependence arcs measure complexity module special viewpoint information ow 
number program dependence arcs measure total complexity module general viewpoint 
maintenance phases modify statement usually intend know information modi ed statement intersect statements program 
kind information useful tell modi ed statement special point connects environment closely statements 
means dicult implement changes statement due large number potential ects statements 
call statement easily ected statement program 
capture attribute de ne metric maximal number vertices vertex dependent determine easily ected statement module 
metrics de ned absolute metrics property general larger value metric complex aspect level metrics de ne aspect level metrics individual aspect 
metrics measure various complexities aspect di erent viewpoints 
aspect metrics 
number control dependence arcs measure complexity aspect special viewpoint intraprocedural control structure 
number data dependence arcs measure complexity aspect special viewpoint intraprocedural information ow 
number call dependence arcs measure complexity aspect special viewpoint interprocedural control structure 
number parameter dependence arcs measure complexity aspect special viewpoint interprocedural information ow 
number call parameter dependence arcs measure complexity aspect special viewpoint interprocedural control structure information ow 
number control data call parameter dependence arcs measure total complexity aspect general viewpoint 
maximal number vertices vertex dependent determine easily ected statement aspect 
note de nitions get metrics de ned absolute metrics property general larger value metric complex system level metrics de ne metrics system level asdg 
metrics measure various total complexities aspect oriented program various viewpoints 
aspect oriented program asdg metrics number control call coordination dependence arcs measure total complexity aspect oriented program special viewpoint control structure 
number data parameter dependence arcs measure total complexity aspect oriented program special viewpoint information ow 
number dependence arcs measure total complexity aspectoriented program general viewpoint 
maximal number vertices vertex dependent determine easily ected statement aspect oriented program 
note de nitions get metrics de ned absolute metrics property general larger value metric complex 

concluding remarks proposed metrics aspect oriented software speci cally designed quantify information ows aspect oriented programs 
metrics de ned dependence model aspectoriented software consists dependence graphs de ned levels explicitly represent various dependencies aspect oriented program 
proposed metrics measure complexity aspect oriented software various di erent viewpoints 
initial exploration aspectj target language concept approach language independent 
implementation dependence analysis tool may di er language language structure syntax handled appropriately 
plan develop dependence analysis tool aspectj includes generator automatically constructing di erent levels dependence graphs aspectj programs metrics collection tool collecting evaluation metrics aspectj program dependence graphs 

aspectj team aspectj programming guide 
bieman ott measuring functional cohesion ieee transaction software engineering vol pp 
bieman metrics development object oriented software software measurement understanding software engineering melton editor international thomson publishing pp 
chidamber kemerer metrics suite object oriented design ieee transaction software engineering vol pp 
cheng complexity metrics distributed programs proc 
th ieee international symposium software reliability pp denver november 
fenton software metrics rigorous practical approach second edition international thomson computer press 
halstead elements software science elsevier north holland 
henry kafura software structure measures information flow ieee transactions software engineering vol pp 
kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming proc 
th european conference object oriented programming pp lncs vol springer verlag june 
larsen harrold slicing object oriented software proceeding th international conference software engineering german march 
mccabe software complexity measure ieee transaction software engineering vol pp 
tarr ossher harrison sutton degrees separation multi dimensional separation concerns proc 
th international conference software engineering pp 
yin establishment measures evaluate quality software designs proceedings software quality assurance workshop pp 
zhao assessing complexity software architectures proc 
rd international software architecture workshop pp acm sigsoft november 
zhao slicing concurrent java programs proc 
seventh ieee international workshop program comprehension pp may 
zuse framework software measurement walter de gruyter 
