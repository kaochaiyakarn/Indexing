maintenance transitive closures transitive reductions graphs la ad van leeuwen ruu cs november rijksuniversiteit utrecht informatica ch utrecht corr 

tb utrecht maintenance transitive closures transitive reductions graphs technical report ruu cs november department computer science university utrecht box tb utrecht netherlands extended appeared proceedings th lat 
workshop graph theoretic concepts computer science wg june july fig published lecture notes computer science vol 
springer verlag berlin pp 

full manuscript completed november 
technical completed july 
contents definitions maintaining transitive closures transitive reductions basic solu tions edge insertions 
edge deletions algorithm acyclic case 
transitive reduction component input matrix transitive reductions acyclic graphs 
general graphs 
transitive reductions general graphs 
general problem edge insertions procedure insert 
correctness proof 
complexity 
analysis procedure insert 
analysis procedure adapt 
analysis procedure 
complexity insertions 
edge deletions procedure delete 
comment correctness proof 
complexity 
analysis procedure delete 
analysis analysis analysis analysis analysis procedure adjust 
procedure 
procedure 
procedure 
procedure disconnect 
analysis procedure 
analysis procedure 
complexity deletions 
remarks maintenance transitive closures transitive reductions graphs la van leeuwen directed graph transitive closure transitive reduction cf 

represented incidence matrices 
suppose edges inserted deleted time 
consider problem efficiently updating time edge inserted deleted 
ibaraki katoh algorithms update edge insertions deletions considered separately 
insertion algorithm takes ivi time consecutive insertions deletion algorithm takes iw time consecutive deletions subscript old refers original graph deletions 
careful analysis algorithms yields ee ivi time bound consecutive insertions subscript new refers result graph insertions iet ldl time bound consecutive deletions 
efficient algorithms problems transitive reduction 
algorithm updating case edge insertions requires ier ivi time consecutive insertions 
algorithm employs efficient search strategy depth search determining entities updated approach related algorithm updating cost paths graphs 
new algorithm updating case edge deletions requires iv eon cyc time consecutive deletions cyc denotes maximum number interior edges contained strongly connected component gold denotes total number edges interior strongly connected component gol old old acyclic 
algorithm uses efficient search cold cold strategy comparable rohnert combination auxiliary information number ways arrive nodes coming nodes 
information updated insertion deletion algorithm 
algorithms especially yield better time complexities compared graphs eol planar graphs graphs relatively small components graphs 
example planar graphs algorithms take time consecutive applications algorithm take ivi time case 
acyclic graphs deletion algorithm takes ivi ivi time consecutive deletions deletion algorithm takes iv ivi time consecutive deletions 
organized follows 
section define notions section restricted algorithms ultimate algorithms 
section notions respect strongly connected components introduced transitive reduction graph defined 
section gives precise description problems solve 
section section procedures edge insertions edge deletions including correctness proofs complexity considerations 
section results condensed theorems concluding remarks stated 
definitions directed graph adjacency matrix matrix entries write array predecessor sets defined array successor sets defined vl nodes write iff possibly empty path node called reachable write non empty path path edge 
graph sid acyclic 
transitive closure graph denoted vl 
adjacency matrix denoted clearly 
danger ambiguity omit subscript definition graph input ng rn number edges incoming reachable 
say edge rn reachable starting node reachable 
stated differently number edges arrive rn coming properties hold evidently 
lemma graph 

lemma input matrix na gph holds rn ya maintaining transitive closures transitive reductions basic solutions arbitrary directed graph 
gil la transitive closure 
suppose gil represented matrices arrays sets corresponding mold respectively 
suppose edge inserted deleted gold resulting new graph 
problem update way correspond sne respectively 
subsections give algorithms insertion deletion single edge 
henceforth assume alternation results alternation time 
algorithms order develop basic ideas solutions update problem sections 
assume reader familiar hoare style program specification 
pre postconditions labeled pre post respectively 
write oa denote reachable gold likewise denote reachable 
edge insertions suppose inserted 

new lemma gold ne 
ia new old old old new old proof trivial 
procedure insert satisfies specification mol insert mn procedure 
predicates po occuring subsequent procedures stated 
procedure uses colours red blue colour nodes 
initially nodes assumed neutral coloured 
argue procedure insert satisfies specifications 
procedure insert operates way 
adjusted record inserted edge 
lemma easily seen needs updated old 
case updated row handling line 
lemma follows row needs updated 
procedure insert performs old old update colouring red line 
moment line condition po holds po 
denotes predicate 
gg 
nw holds line procedure red node moment blue nodes 
lemma po adapt po red nodes 
proof 
readily seen po invariant loop procedure adapt 
loop terminates pass loop red node coloured blue 
note node rn red entry changed blue nodes turn red call adapt 
lemma red nodes 
procedure insert 
lo procedure insert pre mol mld post colour red adapt axe red nodes coloured nodes fi holds rof holds axe red nodes red node red colour blue fi colour red fi rof od procedure adapt local procedure insert condition 
po nodes rn conditions hold 
node rn red blue neutral node red blue rn red old new rn blue old new rn neutral old blue node ene blue red old 
node rn blue neutral node blue 
rn blue ak rn rn neutral rn rn 
old blue node rn 
blue old proof 
suppose red nodes holds 
nodes assertion cf 
fig 

prove need show nodes new node 
suppose 
prop new old new erty 
suppose way contradiction 
follows new neutral lemma yields old old path gol consider path 
path blue node blue node path 
neutral successor path neutral 
yields old implies 
contradiction 
old old observe procedure adapt fact employs kind search strategy graph starting finding nodes needs updated 
theorem procedure insert satisfies specification mol mi insert 
example gol including edge suppose edge inserted procedure insert 
algorithm searches node pairs increased 
adapt starts search node node red node node 
note outgoing edges node traversed red changed 
edge deletions algorithm acyclic case suppose eol suppose deleted 

convenience state converse lemma 
lemma gol ol 
old new new new old new old new henceforth section assume gol acyclic 
procedure delete satisfying specification mol ml nol delete nn procedure 
predicates stated 
procedure uses colour red colour nodes 
initially nodes assumed neutral coloured 
discuss algorithm argue support correctness 
old invocation procedure delete holds 
algorithm adjusted record deletion edge 
affect old 
procedure insert update row separately edge removed edge contribute anymore old need updated 
hand lemma seen rows need updated 
gives rise guard statement line statements line line 
distinguish cases inner statement line 
holds cf 
line decreased coloured red line 
lemma gol acyclic easily follows lew qo holds line qo 
procedures edge deletion 
procedure delete pre holds colour red go adjust ga red fi rof ii 
fi procedure adjust loca procedure delete go axe red nodes mo red node mo red mo mo ifn rof od axe red nodes condition 
qo qo qo nodes rn holds 
new red new wlm red old point line procedure adapt called 
lemma shown adjust qo red nodes holds 
seen qo red nodes 
holds line 
holds cf 
line gol edges incoming reachable node eol gol acyclic cycle old new exist implies ene lemma 
rn 
yields new old condition holds 
established result 
theorem procedure delete satisfies specification mol nol delete left prove lemma 
lemma qo adjust qo red nodes proof 
suppose qo holds line 
prove qo invariant loop line 
line qo holds mo red 
qo holds line qo 
note holds line line qo mo holds path mo path predecessor 
nodes mo conditions hold 
mv qo 
mo 
nw qo qo qo mo mo old new red easily seen holds line 
directly follows qo qo qo follow qo qo qo means statements line gold 
nodes mo conditions hold 
ii ma ln wm new jnew new qo qo qo 
qo 
ene red 
prove qo follows qo qo qo acyclic ene red new red new erie wam mam mi 
new ene 
new red new see defined ml mo new definition mea new new finite implies holds 
qo qo qo follows qo holds line 
yields qo invariant loop 
furthermore pass loop red node mo set implies qo set mo red 
loop terminates 
yields line qo red nodes left 
example illustrate procedure delete 
gol 
nora nora nora 
suppose edge deleted means procedure delete 
algorithm searches node pairs decreased zero adjusts matrix correspondingly time 
procedure delete decreases yielding 
follows alternative way procedure adjust 
sets decreases edges contribute respectively longer 
gives alternative paths set zero 
decreased respectively yielding 
algorithm stops setting zero leaving unchanged implies alternative path 

remain unchanged 
example illustrate procedure delete works graphs 
gol suppose edge deleted 
note 
procedure delete decreases yielding 
stops changing node node strongly connected gold means old old alternative path deleting 
obviously case 
ultimate algorithms sections information number edges incoming entire strongly connected component cf 
del reachable strongly connected component 
eliminate interior edges strongly connected component calculations 
transitive reduction component input matrix employ notion transitive reduction graph aho garey ullman 
state appropriate definitions 
thorough treatment transitive reductions refer 
give definition transitive reductions acyclic graphs state properties 
transitive reductions acyclic graphs definition acyclic graph 
transitive reduction graph minimal number edges satisfying 
follows lemma transitive reduction graph unique 
lemma acyclic graph transitive reduction proof 
suppose 
deleting result smaller graph transitive closure violates condition 
definition node prove 
suppose 
acyclic acyclic yields path contain edge rn 
similarly path rn contain 
exists path rn edge rn 
deleting affect transitive closure contradicts minimality condition 
rn exists yields suppose rn rn 
suppose rn prove contradiction 
acyclic exists node rn 
acyclic implies holds node contradicts assumption 
corollary graph 
graph transitive reduction corollary henceforth speak transitive closure acyclic graph denoted 
lemma graph 
eln proof lemma definition assertion easily follows 
general graphs introduce notions graphs 
definition graph 
strongly connected component 

leader component minc 
generalize obvious way node pairs 
property trivial 
property assertions hold 

eve 

definition graph 
condensed graph weighted adjacency matrix condensed graph vcl vcl matrix mc sets successor sets am lvl defined vq rq pc sc empty 
note fact set leaders edge leader edge component component convenience state property 
property graph condensed graph 
properties hold acyclic acyclic 
introduce component input matrix definition graph condensed graph 
component input matrix integer matrix ell consider number edges incoming component outside reachable component 
note consider example 
example fig 

edges contribute 
note 
property graph condensed graph 
holds nc av proof 
definition property property want express terms introduce simple notion 
definition graph 
array array ec eil 
number edges incoming component properties refer arbitrary graph property 
property holds ec 
property holds 
ne ee rn proof proof claim generally valid equality proved 
refer proof 
property equivalence holds 
transitive reductions general graphs general graph transitive reduction defined transitive reduction condensed graph representing connection structure components means special graph representing reachability structure components 
definition component representation graph cr graph consists obtained way 
hk strongly connected component hj hj hj hk hl hl strongly connected component contains edges component representation graph graph strongly connected components represented single cycles 
notice convenience introduce notation 
notation graph cr graph values 
write iff equivalence 
holds 
prop 
condensed graph graph acyclic able define notion transitive reduction way 
definition 
condensed component representation respectively 
reduction 
condensed 
transitive eduction defined 
denoted 
easily verified property definition extension definition example transitive reduction graph drawn drawn 
state properties lemma extension lemma 
lemma property corollary follows easily 
corollary graph 
transitive reduction condensed graph 

lemma graph 
transitive reduction condensed graph equality holds re 
proof 
av corollary property equality easily follows 
definition notation lemma corollary holds 
corollary graph 
satisfies condi tions 



vc 
matrix entries satisfies conditions equal 
general problem gol directed graph 
ld transitive closure transitive reduction gol respectively 
suppose gold gil gd represented matrices corresponding mold mo ld md arrays sets corresponding sold 
additional subset related set successors component 
sold 
manipulations set explicit 
assume presence information 
matrix corresponding nol representing condensed graph gi sets arrays pc corresponding void cold solid el respectively ordered list defined pc sets cf 
definition 
matrix corresponding matrix 
assume sets implemented lists arrays appropriate cross pointers needed stated 
convenience need auxiliary sets empty outside procedure array nc associated list recording entries nc equal nc outside procedures insert delete nc 
assume alteration results corresponding alteration ad similarly pc successors component 
explicitly state alteration conditions pc ad 
exception procedures 
easily seen space complexity quantities 
suppose edge inserted deleted gold resulting new graph problem update notions correspond new graph section procedure insert updates case edge insertions section procedure delete updates case edge deletions 
edge insertions suppose eol inserted gol procedure insert performing task described section insertion 
comments correctness proof subsection complexity computed subsection 
procedure insert procedures insert adapt figures 
operation procedure insert acyclic graph gl compared operation procedure insert acyclic graph handles components component leaders insert handles nodes 
addition handles nodes component cf 
property property 
insert complicated possibility components joined heavy changing condensed graph 
correctness proof argue procedure insert performs task described section inserting new edge 
suppose state described section 
procedure insert operates way 
adjusted li old lj old 
ol belong component 
inserting cause changes condensed graph 
ge gl need changed 
lemma old ge gil need changed 
case line executed 
adjusted line adjusted line definition 
entities refer line rr holds rr 
rr loa line executed 
case new component may arise 
case lola old implies old old insertion yields lemma 
recorded variable new new line 
edge inserted number edges col increased 
saw new component may arise may introduce intermediate generalized adjacency matrix ri rj sto ri 
mt ene lk cold holds line void 
conjunction clauses 
vo vo cold loid el gold procedure insert li lj lj adjust ifm ti tj li lj li lj vc li lj lj fi ll li li lj fi colour lj red px adapt red coloured nodes fi rr fi procedure adapt local procedure insert red leaders red leader red leader colour blue rof rn rof rof rof ao tql colour red rof od red leaders procedure ao rain set av enumerating edges set pc se ee enumerating edges 
set kl kl traversing ordered list rof rof adjust pc cf 
section enumerating edges adjust adjust traversing ordered list adjust ao follows apply breadth search gc ew means starting ao detect reachable ao direct edge ao ew leaders set ao adjust follows apply backward breadth search means detect reachable direct edge ao leaders set ao old vo holds adjusted loop line performed row vo separately 
refer old graph 
distinguish cases statement line 
case ian od od lemma easily seen yields need updated 
insertion new edge holds needs increased cord definition old property 
adaptations 
cf 
corr 

case line executed updates performed seen line condition holds 
conjunction clauses 
ro vod vod cold rl cn gold vt nnew god gv agv case 
old lemma ew 
ew holds 
condition holds 
particular ra holds oth ers mld fnt holds consequence 
case line old executed holds line 
old ts ce ne executed 
ne holds rj 
old old old holds ne stated 
ced red blue 
mk holds lj gl 
holds old old new old deflation mt lj holds ne 
fin holds mes property lemma state specification holds 
ne red leaders holds 
consider respectively 
correspond po cf 
section fibre condensed graph substituted 
lemma red leaders 
pi ts 
ts holds 
combin thr ces holds ne 
chute ps ts loop cf 
procedure adapt 
ne holds 
ne ces 
new cycle insertion components se 
find new subscripts old int replaced new adjusted property rr holds 
new true procedure ced adapt apt ches 
consider ts ven fibre 
ne 
nw nw property 
cd conjunction clauses 
vo red blue vo cold am gold leaders clauses hold 
red old new blue old new neutral old vo blue leader mt blue red old 
cola rn cola rn cw cd vo proof lemma vo vl new new prove cad vin 
suppose cad new new vo new new 
mo 
mo 
new new old old lemma yields old new old old new old mo mo tms establishes cord re new new 

deflation ao deflation new new deflation reminder 
ne nonzero entries node reset zero sn 
va holds oy edge cd cd 
edges ke ne yields reset vi nonzero entries nodes rated gore entries set zero old structure ol cf 
deflation 
ne ec 
ey sn lw cw ene ew new 
ne updated new cw concerned 
procedure oy prop 
ge holds 
coronary ne adjusted hold considerations ter ecution ne procedure insert holds 
firstly lw cw new ew ld ne 
ttd ov holds new leader prove fo 
prop 
th aa 

note procedure 
prop 
mt mnew 

hdd holds vd combin previous resets find 
rr holds hue 
thr ce follows rr holds hne 
ts proves theorem 
theorem updates section cor ctl new edge ph go left emma 
emma 
speciation holds adapt red leaders 
proof show invariant loop hne 
fine red leader chosen coloured blue 
notice old invariant repaired line follows 
fact pl possibly axe violated moment change red blue 
line pl repaired possibly causes violation ple pls 
line pls re established 
pl need repaired 
conditions pl violated ao changes far relevant pl change colour ao change 
pi pl re established line considering st distinguishing cases 
ao 
follows holds ao 
ao ao xcv mt yo 
setting ple holds tt ao 
pl 
old ao mt ao colouring red ne hold aop vd 
hat hold po hold old find mi 
agn ces 
mid 
holds ne 
holds ne 
mld mt 
show ts ce cnot occur deriving contraction 

ao holds prop 
yields jo new old old st ao ao find ao 
ao ao old old ao ea gl 
contraction 
ces ysis holds follows holds line 
invariant loop line 
loop terminates pass loop red leader coloured blue blue leader coloured red 
holds line red leaders 
complexity consider time complexity number consecutive insertions edges graph gol resulting graph 
procedure insert performed times 
eol ene ene refer result graph gt 
go gol gq compute cost insertions considering total net costs insertions procedures separately insert adapt 
invocation procedure adapt charged procedure insert amount 
costs exceeding amount execution procedure adapt charged procedures 
compute cost starting assumption nodes recorded sets represent colours cf 
section implementation sets 
analysis procedure insert line coloured nodes 
charge cost coloured node cost colouring node 
cost colouring node increased 
obviously way execution procedure insert charged time 
procedure insert called ene times 
total net costs insertions charged procedure insert analysis procedure adapt consider processing red leader pass loop line procedure adapt 
pass contains execution simple statements line time 
coloured nodes recorded sets 
contains execution loops line 
ao costs simple statements exceed costs loop line order 
definitions follows cost third loop line exceed costs second loop line suffices consider complexity second loop 
suppose red leader processed call adapt th insertion edge line 
pass loop line value increased 
procedure decreases value value increased loop line executions procedure adapt 
loop costs number increases executions procedure adapt 

consider second loop processing adapt 
ao ct ct find apart amount cost charged loop costs loop bounded number executions statement rn line 
rn nq rn eq definition values decreased procedures follows total costs second loop executions procedure adapt 
conclude total net costs insertions charged procedure adapt eq 
analysis procedure derive bound costs single execution procedure say th insertion 
statements line performed time 
line performed time ordered lists disjoint 
implemented set means ordered list index array time 
statements line performed time 
statements line performed breadth searches start 
execution procedure takes time 
property nw number nodes contained non trivial com ponents component nodes 
procedure called times insertions col 
proof graph contains possibly trivial components containing node nodes contained non trivial components form component nodes form components 
time procedure called starting gold number possibly trivial components decreases 
old components joined new component 
procedure called nt times 
total net costs insertions charged procedure nc 
complexity insertions combining results subsections proved theorem 
theorem number consecutive edge insertions procedure insert takes ene time ene number edges result graph 
entities gol just starting empty graph ad building gol edge insertions 
takes time entities initial values zero 
initialization cost incorporated complexity considerations procedure insert imagining gol space complexity information proved theorem 
theorem initialization information summarized section takes col time col number edges initial graph 
edge deletions consider problem description section 
suppose eol deleted go ca 
procedure delete performing task described section deletion 
comments correctness proof subsection complexity computed subsection 
procedure delete procedure delete 
procedures colours white grey black purple nodes side marking nodes side distinguished 
symbols denote conditional cand conditional cor operator respectively 
comment correctness proof operation procedure delete acyclic graph compared operation procedure delete acyclic graph handles components delete handles nodes 
delete complicated possibility components fall apart cf 
line line need limiting number calculations procedure adjust particular case tackled set new records leaders newly formed components 
transitive reduction leaders adjusted procedure 
case tackled computing values needed applying kind backward search strategy procedure delete white grey black purple leaders 
generally speaking black leaders leaders processed grey leaders processed white leaders processed purple leaders need processed 
enables array black successor leader means number calculations values reduced 
record computed values temporary recording computed values decrease order time complexity causes convenience considerations 
prove procedure delete performs task described section deleting old edge prove rr holds line tt holds line tt 
note rr denotes condition want establish procedure delete 
rr stated subsection procedure delete li lj rof li lj continue li lj continue li lj fi continue li lj mc li lj mc li lj li lj continue lj li lj li lj new tt li lj tt fi tt grey leaders grey leader mark tt adjust tt marked leaders fi ee ee fi pc white colour grey rof fi colour black tt od tt grey leaders new new skip leaders rr procedure adjust tt marked leaders marked leader li sp tt vo new ag new new new nc rof rof rof mk go rof go rof fi fi tt od tt marked leaders lz skip function detects deletion edge causes burst component 
apply depth search component starting detect component falls apart new components true false false 
procedure ifm li fi rof colour li grey colour purple colour white procedure holds set traversing ordered list set set removing elements enumerating edges apply depth search determine new components arisen breakage adjust new components chew cf 
new av im li lj new set leaders newly formed components set mc ec ands enumerating edges adjust gn traversing ordered lists new colour lj black lo la procedure new apply breadth search starting detect reachable direct condensed edge en set vw rof new apply backwards breadth search gw starting detect reachable direct condensed edge set rof procedure disconnect rof rof function nc eo fl nc skip fi va nc procedure nc skip nc nc nc fi lemma condition rr holds line condition tt holds line 
proof suppose information related gol line cf 
section consider procedure delete including line 
input cases need distinguished 
shall show cases line reached rr holds line reached tt holds 
case edge interior component 
lad lad 
ew ew lo 
eol 
case write lad 

mga 

zo lo 
distinguish cases 
zl zl 
prop 
gives 
consider cop 
md mace 
cad 
find cop 
md need updated cf 
lemma case 
easily seen case update properly performed algorithm executing line 
case line reached rr holds 

apart may need updated 
case algorithm performs line 
condition tt holds line 
procedure neutral nc nc tt conjunction clauses 


cw 
en 
am mac leaders ta li li black grey lj 
li lj black new il 
li clauses hold 
black grey 
li 
black ey white black purple new grey white black pew black grey grey 
li black rn 
rn im black purple 
new new grey white new new consider line 
show tt holds 
line line conjunct hold 
notice ce holds mid cold chew cor 

lemma find mv old new execution procedure line causes second conjunct true procedure 
ml line changed line 
eol old new find means line yielding new tz holds entirely 
conditions ts follow means ta mo ld 
conditions tv ts hold trivially holds line lemma 
cot 
mld 
mid 
rd purple leaders yield 
give holds mid holds line li purple line black nodes 
white grey leaders ts yield 
means line yielding new seen tn holds 
may conclude tt holds line 
case line reached tt holds 
case edge interior component cold 

deletion edge may cause may cause component cold falls apart 
cn ln coad lad 
line procedure cf 
computes case returns value true false respectively 
path iff path component 
distinguish cases 
gol deletion break component 
col mn lemma find mn mo holds 
col gol def 
yields mid holds 
need updated 
algorithm performs task line terminates line 
case li lj false 
case line reached rr holds 
deletion breaks component col pieces 

write new case algorithm performs line yielding continue true executing procedure 
claim stated tt holds line postcondition call procedure 
procedure 
may conclude case line reached tt holds 
claim case tt holds postcondition call line 
proof situation case illustrated fig 

derive properties situation 
define 
old old property holds 
property 
new new zola en cold lod 
cnew cold new 
reversed version prop 
new new property cod loa com holds 
cr proof ts follows mes prop 
del 
lemma 
old new 
old coa loa combing ts deflation new find new write new new state property new 
property fo ew proof prop 
ma ne 
ave new prop 
ma 

ma ma anew 
easily seen lo ad new hold cf 
prop 
respectively 
show tt holds line considering ecution ne ecution procedure ne 
ne ne holds dae dam 

consider execution procedure hne 
procedure fibre 
holds hne ts procedure 
prove tt holds hne 
hne established hne cn ln dd yield information 
note set new procedure correspond set new defined 
ne node cold set zero 
structure ga 
cf 
del del 
ta ift coa oa ma oa holds line 
prop 
cn oa 
fore seen prop 
def 
statements line establish cs gn new new ma line 
line nd line ene established line 
follows holds line effected line 
follows holds line 
line find holds line 
line mo la cf 
yield 
line lj black leader mo la yield black leaders 
conditions mi line yield ts line 
furthermore ts hold trivially follows 
note new 
new new prop 
mi yield conditions tl 
tt holds line procedure called line proce dure delete 
shown case tt holds line procedure delete 
lemma line condition holds tta grey leaders 
proof lemma tt holds line 
prove tt invariant loop line 
suppose line tt grey leaders 
seen marked leaders line 
leaders marked line line proved marked leaders line 
fact part invariant loop 
line grey leader taken lj marked nc set procedure call neutral nc cf 

follows tt holds tt 
note tt equals tt ts including tll 
lj follows grey lj black purple cf 
ts 
follows 
conditions ql obtained means tt ts ts respectively 
lemma stated specification holds tt adjust tt marked leaders tt marked leaders holds line 
line white predecessor leaders coloured grey values adapted 
line coloured black 
conjunction clauses 
ql lia marked lj new new ar grey ql li black clauses hold leaders 
nw ev marked new qi ko tt conjunction clauses holds leaders clauses including hold 
holds line line follows tt holds line seen way 
firstly colour changes white grey line affect tt ro 
readily verified tt holds line 
coloured black line ts tu hold note ce purple holds imply 
ts hold marked leaders holds line conditions obtained means respectively 
tt holds line 
yields tt invariant loop line 
time line executed grey leader coloured black black leader changes colour loop terminates 
conclude condition tt grey leaders holds line 
lemma condition rr holds line 
proof lemma tt grey leaders holds line 
prove implies newl 
new suppose holds 
follows holds black purple 
suppose 
ves li 
consider path li vj black leader path 
ests li black cf 


predecessor leader path black follows lj lj 
lj 
combination yields new new 


hol ts ts yields find tat tat new 
cot 
black purple 
tu cot 
yield holds 
suppose tu 
ests black new satisfies purple cf 

ests ao satisfies ao ao htd predecessor path satisfy te 
cor 
yields tat ee 
holds ts yields 

new 
imply new new 
holds line 
conditional call procedure line pro cedure cot 
follows line holds 
satisfying new vt new 
line effects values holds line yields rr holds line 
el lemma specification holds 
tt adjust tt marked leaders proof consider procedure adjust precondition tt cf 

prove tt invariant loop line 
readily seen tt holds line procedure concern suppose holds line marked leader 
establishes line 
consists clauses tt ql ql 
mnc marked ff new show tt holds line 
distinguish cases statement line 
suppose 
shown 
prove ql vn 
black leader ql yields 
implies ql 
fore 

ql follows ql holds cw new 
need prove case new holds 

rom consideration 

black 
prove 
suppose 
black 
li 
find lj 
lj li contradicts new 



acyclic implies exists ao 
ao ao vo ce ao 
find ao 

vo 
follows ql holds vo 
case tt holds line line 
suppose po 
case line performed calling function 
claim function calls line yield nc mc vo 
proof recall holds moment calling nc 
qls follows function ae prove right hand values axe equal ql uo 
ql gives cn vo 
combination def 
gives im combining nd find ece concludes proof 
distinguish cases guards statement line 
case vai 
vo ce vo ae case line executed claim nc holds line 
prove holds line 
line effect show hold line 
show holds line 
ao vnc ao ence find av new yo ao 
ao yo en wand new new acyclic ao vo implies po new marked new yields new holds line 
line effect holds st ne 
holds ne statement ne follows holds ne 
holds ne ne tms ce 
case ii yo yo ce ne clam follows nc yo holds ne 
sn st holds ne 
ne involves ql ne 
follows holds ne 
statement procedure ne cf 
fig 

seen preserves 
holds ne 
ne adjusted ne nc adjusted ne procedure yo cf 

andq hold ne follows ne ne nd hold ne 
condition inspected 
consider nc yo hol ng ne 
yields ao xo xo new new yo marked 
new new furthermore vo 
new ew new holds follows procedure ne ng holds ne write sl ql holds line 
holds line line effect follows line ql holds line holds entirely line 
show holds line 
consider line 
holds obtain vo ew respectively equivalences hold cw line ce ae marked new mg mg ff new ml ff ff new ff ff new holds line changed po line means line holds line hold line ro holds line 
ro changed vo ce line ce follows holds line 
holds line 
holds line line 
case holds 
case analysis tt holds line 
tt invariant loop line 
loop terminates 
seen follows 
line unmarked leaders may marked 
case line executed just marking process 
line values changed ao values changed marking process executed finitely times 
pass loop marked leader yields loop terminate 
tt marked leaders holds line 
proved specification holds 
complexity consider time complexity number consecutive edge deletions graph gol resulting graph new 
take eol ene refer result graph deletions gt subsection compute cost deletions considering total net costs deletions procedures delete including procedure adjust including procedure duction disconnect 
procedures called procedure cost changed cost charged amount exceeding 
analysis procedure delete split procedure delete parts 
line line 
obviously execution procedure delete takes time part 
total net costs deletions changed parts 
ii line loop 
distinguish wish parts part part part statement line line part contains statement line 
pass loop execution part takes time 
pass grey leader processed coloured black 
charge time cost colouring leader grey 
yields part cost augmented time execution procedure delete 
obviously affect cost part 
pass loop line charged extra time 
included cost part 
consider th deletion edge edge 
note vf statement part executed execution procedure delete executed vf grey coloured black grey 
statement predecessor leaders vf processed time 
predecessor leader edge lt charge cost processing predecessor leader edge 
cost execution statement vf elf ct 
hand line seen statement executed vt lj 
find 
edge just deleted yields 
ct combining yields total cost statement th deletion gk 
mt eo yields total cost statement deletions ro 
ii follows total net costs deletions charged procedure delete 
analysis procedure adjust consider procedure adjust 
loops line pass loop costs time 
pass loop marked leader processed 
charge time cost marking leader 
compute cost statements line line marking needs charged extra time 
vo ee exists edge ew costs executing loops line charged loop augmenting cost statement time 
compute cost statement line 
consider loop line 
step execution loop value decreased kev mev eol value increased considered procedures considerations yield cost loop 
conclude total net costs deletions charged procedure adjust 
analysis procedure depth search procedure performed tm time kl cots number interior edges strongly connected component 
perform depth search la necessary set successors node component cf 
section 
procedure called procedure delete edges times interior component 
called eot ots ots total number edges interior strongly connected component 
total net cost deletions charged procedure old analysis procedure consider cost execution procedure 
statements line performed time 
ordered lists line disjoint 
statements line performed eom time 
line strongly connected components determined time computed time 
adjusted traversing array time 
cost execution procedure costs time 
need property 
property number nodes contained non trivial component gol component nodes 
procedure called times new components may arise edge deletions 
proof time procedure called number possibly trivial components increases 
go contains components possibly trivial procedure performed cc times 
cc nodes contained non trivial component gol may concerned new arising components 
nodes give rise new components cyc compared gold 
components gi yield finer partition components gi 
newly arisen components graphs gi property fo total net cost deletions charged procedure na kl 
analysis procedure consider cost execution procedure note new holds procedure called line procedure delete 
easily seen executing procedure costs eod time new 
new contains leaders newly arisen components write execution costs time newly arisen component 
prop 
find total net cost deletions charged procedure noc 

analysis procedure disconnect procedure disconnect called procedure adjust viz line 
hold line follows procedure disconnect values decreased 
values increased procedure yields time procedure disconnect costs eol ene el en analysis procedure procedure called procedure adjust viz 
line 
consider th deletion edge say 
call costs time nc costs ct time nc 
definition net cost charge cost procedure adjust procedure value nc 
may say net cost calls fixed vf th deletion ct time 
ct ct pl vf net cost number calls procedure fixed vf vp vf distinguish cases second guard statement line procedure adjust 
ldi 
net cost calling procedure number times th deletion time 

case claim holds 
claim case called vf edge ct ct proof note called line procedure adjust holds time calling 
yields black leader 
line procedure adjust yields 
find 

th edge deleted follows prop 
holds 
edge satisfying 
completes proof 
clam conclude net cost number cs procedure ed number ed satisfying consider cs dung th deletion number number tot net cost number cs procedure th deletion bounded compute cost deletions 
case analysis argument similar may write total net cost bounded 
ro total net cost deletions charged procedure 
analysis procedure consider th deletion 
procedure called procedure delete viz 
line procedure 
call procedure costs time 
subsequent call nc holds processed cf 
section viz 
cost time consider time cost altering nc value 
obviously effect cost analysis procedures 
total costs charged procedure neutral nc th deletion 
total net cost deletions charged procedure 
complexity deletions combining results including theorem 
proved theorem number edge deletions procedure delete takes eol total number eol time number edges cyc edges interior anal component number interior edges component easily seen holds 
lemma values computed time edge deletions procedure delete takes time edge deletions 
remarks results sections theorem obtained 
theorem transitive closure transitive reduction graph maintained edge insertion edge deletions information 
number ofq consecutive edge insertions takes time ene number edges resulting graph number consecutive edge deletions performed eol old old time number edges original graph old number edges interior original components original component contains oot interior edges 
information old maintained takes space initialized time graph edges 
stated subsection nc values computed maintained needed 
matrix available entirely achieved means modifications procedures sections yielding extra cost term eo ld time complexity procedure delete 
note matrix recomputed completely newly arisen components 
arrays pc really necessary algorithms pc obtained increasing total time complexity 
similarly omitted global information prop 
computed procedure delete means means procedure depending arises increasing time complexity 
algorithms transformed algorithms traversing reduction edges yielding better time bounds 
aho garey ullman transitive reduction directed graph siam journal computing vol june 
ibaraki katoh line computation transitive closures graphs infor mation processing letters 
ation pairs cost path problem mehlhorn ed stacs lecture notes computer vol springer verlag hei pp 

tarjan depth search linear graph algorithms siam journal com puting vol june 

