colored petri net multi agent application danny weyns tom holvoet computer science department katholieke universiteit leuven celestijnenlaan leuven belgium www cs kuleuven ac danny home html danny tom cs kuleuven ac colored petri net cpn multi agent application 
particular modeled packet world 
research packet world case study fundamentals agents social behavior 
approach combine experiments conceptual modeling 
start basic model add social skills modular way 
integrating new social skills means adding new modules offers clear conceptual view evolution agents environment 
conceptual view mean concepts agent need order acquire new kind social ability ii infrastructure necessary environment support abilities iii concepts relate 
insights learn case study gradually develop generic conceptual model social agents situated mas 
cpn basic model packet world 
model consists agents interact passive objects environment 
interaction central issue multi agent systems incorporated basic infrastructure agent coordination straight away basic model 
extend model making possible agents communicate information 
communication basis social organization 
concrete realization cpn multiagent application model potential support research agents social behavior 
major motives cpns modeling tool cpns gives clear conceptual view agents environment live ii cpns support neat verification formalization 
keywords colored petri nets multi agent systems 
situate research goals domain multi agent systems mas 
explain tackle problems want solve motivate choice colored petri nets cpn tool modeling mass situate subject research 
conclude overview 
fundamentals sociality mass importance mass design concept today software dispute 
mas models part world community autonomous agents interact environment 
mas activity distributed agents community 
intelligence systems comes interaction agents individual capabilities 
contrasts approach classical artificial intelligence agent acts independent cognitive reasoning machine 
mas society agents live 
living community requires number social skills 
agent research community paid little attention fundamentals sociality mass unanswered questions remain 
lack insight agents sociality limits potential agent approach 
quote jennings realize full potential mass better understanding needed impact sociality 
individuals behavior link behavior individual agents system research fundamentals agents sociality divided approaches 
approach research mainly experiment oriented 

projects explore new kind interactions rules setting social structures 
see interaction agents new functionality emerge go sum capabilities individuals 
second approach intends conceptualize social aspects agents mas 
examples 
group researchers integrated certain aspects agents sociality formal model agent bdi model 
group set thoughts agents sociality organization mas structured 
conclude done far characteristics research focuses particular aspect sociality mas research starts particular point view research done separately focus mainly directed social behavior emerge mas attention devoted questions social behavior arises goals research goal research get better understanding sociality mass intend build generic conceptual model social agents situated mas 
approach combine experiments conceptual modeling approaches mentioned previous section 
case application explore different kind social behaviors 
parallel experiments build conceptual model 
start basic model add social skills modular way 
integrating new social skills means adding new modules offers clear conceptual view evolution agents environment 
conceptual view mean concepts agent need order acquire new kind social ability ii infrastructure necessary environment support abilities iii concepts relate 
insights learn case study gradually develop generic conceptual model social agents situated mas 
generalize insights learned case application order build models different classes social skills 
modeling mass colored petri nets set approach question arises model case application 
petri nets long tradition describe analyze concurrent processes excellent candidates 
colored petri nets cpn combine best classical petri nets high level programming languages popular 
cpns intuitive graphical representation paves way clear conceptual modeling complex systems 
behavior system modeled cpn analyzed means simulation formal base 
remarkable cpns offer ingredients tackle complexity multi agent systems little model study 
interesting 
far reaching cpns modeling mass ferber 
ferber developed formalism called basic representation interactive components 
component approach primitive components bricks described cpn 
standard multi agent systems ferber proposes extensive set components representing generic model specific part mas 
inspired ideas decided cpns research 
contrast ferber uses cpns operative representation functioning mas cpns conceptual modeling sociality mass situating research overview multi agent application research packet world 
originally huhns stephens proposed application research topic investigate sociality mass packet world consists number different colored packets scattered rectangular grid 
agents live virtual world collect packets bring corresponding colored destination 
agents limited view world 
packet world offers rich set fundamental characteristics broad range multi agent systems 
agents may perform better job share information set form cooperation 
describe models packet world 
models form solid basis research agents social behavior 
intuitive description packet world section cpn basic model 
model consists agents interact passive objects environment 
section extend model making possible agents communicate information 
communication basis social organization 
section give results experiments models 
conclude look section 
cpns designed design cpn tool 
order keep clear view models limit number agents 

packet world consider rectangular grid size grid contains number colored packets agents 
agents job collect packets bring corresponding colored destinations 
grid contains destination color 
shows example packet world size agents 
packet world agents interact environment number ways 
allow agents perform number basic interactions passive objects environment 
agent step free neighbor fields 
second agent carrying packet pick neighbor fields 
third agent put packet carries free neighbor fields course destination field particular packet 
agent may wait 

packet world squares packets circles delivering points important notice agent limited view world 
view covers small part environment agent 
property limited knowledge typical agents multi agent system 
model view size world expresses far squares agent see 
model simple measure indicate efficient agents perform job 
time agent step moves packet picking putting step counter incremented 
point time value counter indicates energy agents invested far 
basic model packet world limit agents possible interactions environment basic set mentioned 
modeled basic agents social skills 
goal collect packets world bring destinations 
general goal divided set primary goals 
short agents act repeating cycle driven primary goals look packet pick look destination deliver packet 
extended model agents interact 
interaction foundation cooperation agents 
packet world imagine different kinds cooperation 
agents example agree plan form chain pass packets 
modeled form cooperation 
extended model integrated facilities basic model agents communicate 
particular agents extended functionality request information 
exploring world find target agent see agent ask visible colleague desired information 
requested agent knows sees asked information respond query information 
allows requesting agent act efficient 
actions influences reactions agents multi agent system endowed autonomy 
driven set goals 
order achieve goals agents undertake actions 
agent acts environment picks packet full guarantee action succeed 
agent trying pick packet time 
consequence get packet leaving empty hands 
say action agent results influence environment 
influences result reactions environment 
influence succeed fail 
example agent performs action pick invokes influence perform pick environment 
action succeeds environment reacts reaction pick action fails reaction pick 
reaction environment performed influences point time agents experience result intended actions 
agent notified result action undertook say agent consumes result produced influence 
agent state agent decide perform action endowed attitudes information 
section mentioned agent driven set primary goals 
agents act achieve goals 
perform influences environment described section 
agent selects action take state world account 
agent example decides pick packet aware fact carry packet 
general means agent possess state 
model packet world agent maintains state position carries packet 
agent see packet near 
needs information environment order act 
call information view agent 
model regularly agent gets update view world 
mentioned section view covers small part environment agent 
special synchronization module responsible timing updates agents views 
explain synchronization process detail 
alternative agent know world order take decision 
example necessary agent sees destination packet knows location destination 
model endowed agent belief base 
belief base contains records information agent collected past 
clear information volatile 
destination particular color packets change packet located certain field disappeared 
model agents know beliefs unconditionally trusted 
agents revise suspicious beliefs soon get information percept update soon subject belief comes inside certain range vision 
job states world start time packet world initial state 
packets scattered grid agents located 
counter measures agents performance initialized zero 
define job task agents collect packets deliver right destinations 
job starts synchronization module triggers environment send agents view 
driven goals agents select action perform 
actions result transformation state packet world 
cycle repeats grid cleared 
time action agent modifies state world performance counter increased 
soon packets delivered destination synchronization module stops process updating view agents 
informs agents job come 
packet world state 
transformation world described dynamic process transforms initial state world sequence discrete states final state means performing synchronized actions agents 
conflict resolution synchronization agents act environment reacts 
takes influences agents account produces new consistent world 
model distinguish levels synchronization 
synchronization level concurrent actions 
call system synchronization 
level synchronization guarantees laws world respected 
example agent time step particular free field 
system synchronization implicitly integrated cpn 
second level synchronization situated higher level interaction agents 
call level functional synchronization 
functional synchronization offers support coordination actions agents 
actions agents synchronized action cycles shown 
cycle starts updating perception agent 
state new percept receives agent reason wants 
agent selects action produces influence invoked environment 
environment calculates reactions performed influences notifies agents means consumption 
soon reactions completed environment triggered calculate new percept agent starts new action cycle 
model functional synchronization realized means synchronization module 
percept synchronization percept calculation percept update reasoning action cycle reactions influences consumption sync module environment 
functional synchronization 
wonder decided introduce functional synchronization 
limits freedom action agents 
agents longer allowed handle rhythm 
just point 
problem solving power multi agent system arises interaction agents system 
order cooperate agents coordinate actions 
coordinating actions autonomously running agents hard achieve 
introduced functional synchronization 
price individual freedom offer agents clean framework coordinate interactions 
fit communication model 
means sending question responding means sending answer integrated extended model class actions 

modeling basic components packet world section discuss modeled basic model packet world means cpn 
give high level overview model 
identifies different modules multiagent system 
discuss cpn separated module 
bring separated modules global net discussing integration communication basic model section 
agent agent high level model divided basic model packet world separated modules representing fundamental component packet world 
distinguish environment box agents rounded boxes synchronization module diamond 
shown agents basic model interact environment 
white arrows represent influences performed agents 
gray arrows represent consumptions percepts agents 
synchronization module regulates updates 
sync module agent agent environment 
high level basic model agents 
go separate cpns different modules tell approach modeling modularity 
module kinds places 
circles represent internal places ovals represent interface places 
interface places similar notion fusion places defined 
different modules combined merging overlapping interface places 
note distinguished internal interface places indicate places module overlap similar places modules global cpn composed 
graphical distinction particular semantic meaning related places cpn general 
model environment environment models world agents live 
packet world modeled environment centralized entity 
agents interact environment means set actions 
concurrent actions agents lead modification world 
agents notified transformations means consumptions get invoked influences ii percepts partial view state world agent 
environment keeps track efficient agents perform job 
modeled efficiency tracker simple counter incremented time agent invests relevant portion energy step moves packet 
shows cpn environment 
data environment modeled token world located place environment 
token list item item record components color item record name name coord coordinate color world list item performance efficiency agents certain point time modeled set anonymous tokens collected place count 
reactions environment modeled transitions 
reaction takes influence state world input 
case reaction produces successful action involved part world modified 
world left untouched 
furthermore reaction produces consumption agent sent corresponding interface place synchronization token sent synchronization module 
action ends successfully depends actual state world 
tested means guards transitions 
look example 
token se view percept produce percept view view token token sync move token agent consume position cant step step cpn environment packet world move token token token token token pick agent cant pick environment world world put packet count move token token token token skip true token count token cant put 
cpn environment packet world 
suppose agent intends step 
puts token move interface place 
token contains information identity agent coordinate square wants step 
reaction world possibilities 
action succeeds transition step guard fire models world invoked influence consumption 
action fails transition cant step fire case condition fulfilled state world position agent updated 
second case fails 
case original location agent copied consumption agent 
part environment concerns production agents percepts modeled transition produce percept 
soon token arrives place synchronization module transition fires 
reads world produces agents updated views puts interface place percept 
agents pick 
note environment produces percepts long produce percept transition read token packet count place 
initially place contains anonymous token packet grid 
time agent delivers packet destination token consumed packet count place 
latest packet delivered remain longer tokens packet count place ends production new percepts 
model basic agent agents active entities packet world 
agent endowed number operations order act environment 
perceive information instantly register 
act environment manipulate things 
cpn model basic agent shown 
ready agent agent view view view startup name identity atp andalso prec stepp percept view view move move stepp step true agent consume position cpn basic agent packet world agent rout rin pick atp rout revise rin move carry empty agent belief atd andalso drec prec drec carry empty carry empty carry empty token move put atd andalso drec token agent surrounded token token skip true 
cpn basic agent packet world 
actions agent undertakes driven set goals 
goals basic agent quite limited 
case agent hands free look packet pick 
soon agent holds packet look destination deliver 
actions available agent fulfill goal go packet started token agent located place 
performing actions available fulfill second goal deliver packet requires agent token place 
agent token contains state agent maintains 
token consists parts color agent record name name coord coordinate carry name initially agent token located place ready 
execution starts startup transition fires 
passes agent token place 
time name agent placed identity place 
agents identity dispatch percepts environment various agents 
state agent maintains world modeled tokens belief stored place color prec drec color belief record subj item item basic model belief contains information item world definition item see section 
provided kind beliefs packet subj prec destination subj drec 
basic agents belief base passive limited way 
fact look packet destination packet base see 
programmer agents initial information means initial marking belief base take profit belief base help 
agent trusts beliefs destination revises beliefs packet soon approaches subject belief 
done means revise belief view function guard transition pick 
agents view world modeled tokens view color view list item practice list contains items world 
head list item corresponds agent 
environment copies items agent range defined variable view size 
illustrates limited view agent world 
example size view 

view world agent 
discuss action set agent 
action modeled transition 
transition consumes token agent view set 
optionally belief base consulted 
agent token located place agent step pick packet skip 
token place agent step put packet skip 
case selection action criteria described guards transitions 
illustrate action put models view agent intern data agent beliefs agent invoked influence atd andalso drec action put selected agent destination packet carries atd condition 
record possible information destination selected belief base drec condition 
record contains coordinate destination agent creates influence delivering packet 
destination unknown searches actual view creates similar influence 
influence sent interface place environment takes handling 
influence modeled token move color move product agent coordinate tuple contains agents identification see section coordinate tuple square intends perform influence 
move token place lands offers environment information determine action agent intends perform 
percepts environment come interface place percept 
soon new percept arrives agent identify order obtain new information 
transition reads agents identity 
match view accepted broadcast possible actions selected execution action cycle 
reactions influences consumed 
similar identification scenario 
accepting consume agent token directed main places fact agent carries packet 
model synchronization module synchronization module models notion functional synchronization described section 
offers agents implicit framework coordinating interactions 
shows module connections environment 
token token token cpn sync module packet world se percept view produce percept view view token environment packet count world world token 
synchronization module packet world 
behavior module straightforward 
time agents performs actions environment react 
reaction particular anonymous synchronization token produced placed place 
tokens sent interface place synchronization module 
tokens collected place 
actions agents handled place contains number tokens equal number agents living packet world 
triggers output transition fire placing anonymous token place 
turn enables produce percept transition environment new percepts calculated sent agents 
starts new action cycle see section 
complete cpn basic version packet world de separated modules compose complete cpn packet word 
model depicted gives detailed picture high level model 
interface places combined techniques mentioned earlier 
keep clear overview limited number agents 
general mas may composed agents 
model agent cpn module 
ready cpn basic version packet world ready agent agent agent agent start start belief prec drec belief prec drec agent name identity carry empty carry empty agent name identity agent carry empty carry empty look ford agent atp andalso prec stepp stepp surrounded atp andalso prec stepp carry empty carry empty carry empty carry empty stepp surrounded view atd andalso drec atd andalso drec token move rin rout token rin rout view token put put atd andalso drec skip true atd andalso drec pick pick true atp rout revise rin step atp rout revise rin token token view move token view token true skip step true token agent view move percept view view token true skip move agent move consume position token pick token cant pick se token token put cant put token 
cpn basic model packet world 
token token token token cant step token token token environment count world world step token token token token produce percept packet count want model mas agents combine modules hierarchical cpn 
discuss 
illustrate purposes model agents sufficient 

cpn communicating agents section extend basic model packet world way agents communicate information 
communication enables agents coordinate actions behavior resulting multi agent system coherent 
agents abilities communicate better achieve goals driven 
communication part perception receiving messages part action sending messages 
conversation agents follows protocol 
protocol enables agents exchange understand messages 
extend basic agent functionality communication build communication module plugged basic model agent 
furthermore environment equipped infrastructure handle messages mail 
build postal service module plugged environment 
section introduce communication protocol agents 
give high level overview extended model packet world including communication 
new modules necessary communication conclude complete cpn extended model 
communication protocol basically agents packet world capabilities 
reflected roles play dialogue 
long agent sees agent capable sending message peer colleague 
moment model question answer types messages 
particular limit subject messages requests information 
shows different steps dialogue 
syntax protocol described section 
compose msg process answer addressee send msg send reply accept msg look info activities 
communication agents 
agent delivers composed message inbox postal service 
service knowledge mailboxes agents routes message mailbox addressee 
soon message arrives addressee pick mailbox 
model agent obliged handle incoming message 
addressee decides read message look requested information 
knows information sends answer informs requester help moment 
reply arrives information processed possibly update belief base requester 
high level model packet world communication extension shows high level model packet world agents equipped functionality communicate 
basic agents basic model extended communication module 
module permits agent interact colleague 
sync module communication module basic agent postal service environment communication module basic agent 
high level model functionality inter agent communication 
arrows agents model communication channels postal service module 
responsible delivering posted messages mailboxes addressees 
note postal service module produce functional synchronization pulses 
model communication module agents communication module assembles functionality agent send requests respond questions process answers 
cpn module depicted 
model agents gather information colleague location packet particular destination actual state 
asking information modeled transition respectively 
fire transitions compose message number conditions fulfilled 
conditions described guards transitions 
look example transition models internal state agent current view question function returns true agent see destination packet ii sees colleague ask information 
succeeds function produces question token message delivered inbox communication module 
message structure color performative color message record name name perform performative content item cpn communication module packet world agent msg answer question message mailbox msg msg answer msg question msg msg rin rout rin msg qt response regulation queued regulation qt view qt qt prec rin qt empty qt qt view drec rin qt empty rout rin msg belief prec drec inbox question 
communication module agent 
performative informs addressee type message sent 
content question item structure completed addressee 
example agent asks agent location destination yellow packets compose message perform item name coord null agent receives message knows exactly asking 
uses belief base actual view find coordinate 
finds coordinate yellow destination replies message perform item name coord replying message performed transition response 
fire transition view consumed message mailbox 
information believe base consulted extra information source 
model prevents agent send messages information 
places contain limited number tokens consumed time question sent restored answer processed 
processing answer comes update belief base case answer contains new information answer thrown away 
model posting service module postal service responsible delivering mail agents right mailbox 
shows cpn module 
postal service inbox place agents leave messages 
message accepted transition 
transition puts message place produces tokens 
token goes place user read total number messages postal service handled far 
second token goes place log messages saved 
third token sent place directed place synchronization module 
means model sending messages coordinated question agent message actions agents perform 
fits concept functional synchronization offering solid base agents coordinate activities 
sp token token token message destination msg mailbox mailbox mailbox mailbox addresses deliver msg cpn postal service packet world msg mailbox msg empty message msg message mailbox msg empty 
postal service module 
message resides delivered addressee firing transition 
transition consults addresses place different mailboxes stored 
mapping addressee indicated message information mailbox message delivered mailbox addressee pick 
complete cpn packet world communicating agents de separated modules proposed previous sections compose complete cpn packet word communicating agents 
model depicted gives detailed picture high level model 

experiments section briefly give overview results experiments cpns basic version packet world extended version functionality communication 
discuss results simulations look number verifications 
simulations design cpn tool cpn executed automatically interactive 
allows follow successive actions agents 
tests world size size 
changed view size agents 
table gives overview results 
numbers rounded averages jobs 
table 
simulation results 
world view size kind model count gain world size world size inbox msg msg token basic communication basic communication basic communication basic communication message message mailbox mailbox mailbox mailbox mailbox msg empty addresses cpn packet world token message msg message sp token msg msg token accept msg deliver msg mailbox msg empty destination msg msg message message message mailbox mailbox inbox msg msg msg msg answer question answer question question question msg msg answer msg msg msg answer msg msg msg rin rout rin msg ready msg msg rin rout rin msg question question question agent question qt ready agent queued qt qt qt response agent response regulation regulation regulation regulation qt qt agent qt start qt qt qt qt qt prec rin qt empty start drec rin qt empty prec rin qt empty drec rin qt empty rin rin rout rout belief prec drec belief prec drec name agent agent identity name carry empty carry empty agent carry empty carry empty agent identity atp andalso prec stepp stepp carry empty atp andalso prec stepp carry empty carry empty carry empty stepp surrounded surrounded view atd andalso drec view move atd andalso drec token token move rout rin token rin rout token skip view view token put put token atd andalso drec skip true atd andalso drec pick pick true true true skip step atp rout revise rin step atp rout revise rin token token agent move agent move consume position view perform skip perform put move percept view view token skip true pick cant pick se token token 
complete cpn packet world communicating agents 
token token token token token token put token cant put token cant step token token token environment count world world token step token token token produce percept packet count compare results kind model basic communication see increasing view size significantly reduces number steps agents need complete job 
obvious explanation greater view size increases information agents act efficiently 
compare results kinds models view size notice small view sizes communicating model scores significantly better basic version 
greater view sizes gain marginal 
case agents communicate information act efficiently 
case view agents covers great part world see looking need request information 
tests confirm value information interchange agents better founded need tests especially greater worlds agents 
verifications simulation design cpn tool offers support formal verifications cpns means occurrence graph tool 
occurrence graph directed graph node reachable marking arc occurring binding element 
occurrence graphs number formal verifications cpns packet world 
discuss results basic version world size agents collect packets 
tool generates standard report information see gives lot information 
liveness properties gives dead transitions instances occurrence graph 
cant pick dead transition instance means packet world conflicts agents picking packets 
contrary cant step dead transition instance sure agents stepped square 
investigate cpn detail occurrence graph tool offers lot standard query functions 
users formulate customized queries 
number formal verifications extended cpn packet world extra depicted 
added places petri net packets grid carried packets delivered packets job transitions finish job test job 
initially packets grid contains anonymous tokens carried packets delivered packets empty 
agent picks packet pick fires token packets grid passed carried packets 
agent delivers packet destination put fires token passed carried packets delivered packets 
job packets delivered packets grid carried packets empty delivered packets contains anonymous tokens 
agent final action cycle agent token reaches place new synchronization token reaches place finish job transition enabled fire 
clears petri net anonymous token arrives job place 
enables test job transition fire forever 
packet world free deadlocks 
prove deadlock appears prove exists path node occurrence node represents final marking representing state job place 
particular node leaf node occurrence graph shown predecessors 
proof straightforward 
function proof searches number nodes path leaf node 
number zero proven packet world deadlock free 
test module packet world agent token pick packets grid token token carried packets environment world world token put agent token token delivered packets finish job token job proof fn fn op token token val int test job proof fn mark mas packets grid mark mas carried packets mark mas delivered packets token empty fn op val node list mas finish job mas test job 
test module packet world 
job correctly solved limited number steps 
prove job packet world correctly solved limited number steps take steps 
prove place invariant holds sum anonymous tokens representing packet places packets grid carried delivered packets constant equal node occurrence graph leaf node invariant tells strange packets enter packet world packet lost job 
function proof shows invariant holds 
complete proof demonstrate number steps reach solution test job enabled limited 
proof tells exists path node graph leaf node conclude execution ends limited number steps 

cpn packet world multi agent application 
research application case study fundamentals sociality mass reflect verify expectations cpns worked 
important argument cpns strong graphical expressiveness 
build packet world means compositional modules 
integrate communication infrastructure basic model got clear view impacts agents environment 
building executable cpn leaves escape designer 
aspect modeled explicitly unambiguously 
forced find concrete solutions problems 
typical example way realized functional synchronization 
talk lot aspect modeling cpn brings designer essence 
state learned lot mass cpns model 
argument chosen cpns possibility simulation 
simulating mas done different ways 
executing cpn attractive way simulate problem 
fact point 
important fact execution cpn direct simulation model 
simulation directly shows value model built 
argument cpns mention possibility formal verification 
mas community strong tradition formal description verification ideas 
cpns join approach 
formal verification lets designer proof correctness parts model 
design cpn tool hard prove packet world correct solution limited number steps 
tool quite simple proof property 
reflect experiences cpns tool model agents sociality 
model developed forms solid basis research agents social behavior 
conclude thoughts 
intention build modules number social skills agents packet world 
examples agents cooperate forming chain passing packets agents coordinate actions avoiding conflicts agents step long way packet 
building models gain depth knowledge fundamentals sociality mass manage complexity extensive models hierarchical cpns 
intend generalize insights learned packet world 
intend build models different classes social skills 
aggregate models serve defined easy communicate formal model social agents mass 
petri communication automata vol 
applied data research princeton af 
jensen coloured petri nets lecture notes comp 
science nr 
advances petri nets bad 
ferber 
multi agent systems distributed artificial intelligence addison wesley isbn 
design cpn computer tool coloured petri nets www daimi aau dk jensen coloured petri nets 
basic concepts springer verlag isbn 
jennings agent software engineering artificial intelligence 
huhns stephens multi agent systems societies agents weiss multiagent systems mit press 
shoham tennenholtz social lows artificial agent societies line design 
agents 
conte castelfranchi simulations understanding norm functionality social groups 
goldman rosenschein emergent coordination cooperative state changing rules dai 
emergent conventions structure mas complex systems summer school santa fe 
walker wooldridge understanding emergence conventions agent systems icmas 
cohen levesque teamwork special issue cognitive science artificial intelligence 
jennings norman social mental shaping modeling impact sociality mental states autonomous agents computational intelligence 
jennings organization sociality manifesto new science multi agent systems proc 
th european workshop multi agent systems maamaw france 
holvoet approach open concurrent software development phd thesis leuven belgium 
modeling multi agent systems colored petri nets th iasted international conference applied informatics ai germany pp 
feb 
costa miranda modeling analyses multi agent system colored petri nets workshop applications petri nets intelligent system development williamsburg usa june 
moldt multi agent systems coloured petri nets az ma und balbo 
cost modeling agent conversations colored petri nets ijcai stockholm sweden 
moldt concurrent architecture multi agent platform proceedings aose aamas bologna italy july 
miyamoto wrote number articles petri nets newsletter www informatik uni hamburg de keywords agent net html 
