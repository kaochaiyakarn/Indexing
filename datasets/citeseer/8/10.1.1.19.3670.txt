rescue meta modelling logic programming explanation constraint programming pattern description detection yann ga gu cole des mines de nantes rue alfred bp nantes cedex france fr software maintenance costly tedious phase software development process 
phase maintainer needs understand modify program source code 
needs representation program accurately reflects structure behavior 
find places program require modifications 
perform changes improve program behavior introduce defects 
research focus maintainer second tasks accurate representation program structure behavior detection places improve 
propose set software engineering tools representation java programs structural dynamic information semi automated detection design patterns design defects 
design patterns design defects related assume group classes micro architecture similar identical design pattern corresponds possible design defect 
pattern distorted implemented pattern distorted fit architecture case maintainer may want analyze highlighted micro architecture 
concentrate programs developed object oriented programming languages interested detecting object oriented design patterns design defects 
believe apply approach programming language functional procedural 
suitable elements describe patterns programs written programming language 
partly funded object technology international drive ottawa ontario canada develop tool describe design patterns design defects apply design patterns detect complete forms design patterns 
caffeine tool dynamic analysis java programs 
develop library analyze binary class relationships 
solver explanation constraint solver detect design patterns design defects 
tool visualize program architecture behavioral information generate problems related detections design patterns design defects display results detections 
tools different declarative meta programming paradigms 
merriam webster paradigm philosophical theoretical framework scientific school discipline theories laws generalizations experiments performed support formulated 
interpret definition term declarative metaprogramming denote programs languages subjects computation programs program artifacts describe patterns meta model 
descriptions represent structure behavior solution elements patterns 
descriptions class entities manipulate generate source code 
reason compare descriptions 
caffeine analyze program execution queries 
express queries term trace model execution model program execution logic programming 
caffeine system runs routine program analyze emits events runtime behavior 
caffeine system receives analyzes drives program execution queries 
solver explanation constraint programming solve problems representing detection design patterns design defects program architecture 
problem decomposes constraint system generated pattern domain representing program architecture 
constraint system problem domain generated automatically pattern program architecture expressed meta model 
display program architectures terms patterns box meta model behavioral information obtained caffeine 
display classes inheritance implementation relationships binary class relationships association aggregation composition relationships 
visualize results detection computed solver 
position motivate distinct declarative meta programming paradigms meta modelling logic programming explanation constraint programming 
describe succinct scenario highlighting tools 
pattern description patterns widely accepted software practitioners 
cover phases software development process requirements analysis architecture design implementation idioms defects refactoring testing 
requirements analysis architectural patterns high level informal general purpose patterns design defect implementation patterns tightly coupled software development process implementation 
desirable formalize patterns 
formalization may support reification instantiation application detection comparison patterns 
techniques exist formalize design defect implementation patterns logic programming 
logic notations 
meta modelling program generation 
program transformations 
uml associated notations ocl 
state charts 
protocols finite state machines 
choice particular technique depends intended formalization 
want reify design patterns design defects class entities declarative descriptions patterns structure behavior 
want reason interact patterns instantiate display source code constraint systems constraint domains recognize source code 
choose meta modelling technique represent patterns 
authors different techniques formalize patterns 
techniques shortcomings intended formalization 
system logic programming set predicates describes pattern pattern reified system reason interact system 
example code generation takes place separate module input set predicates 
dynamic information program analysis important issue object oriented software engineering 
program analysis serves different purposes extracting object model source code understanding dependencies classes instances verifying refuting simulating checking properties program analysis may performed statically dynamically 
hand information may costly complex impossible extract static program analysis 
hand results dynamic analyses valid set considered executions 
caffeine want perform dynamic analyses java programs extract information dependencies classes instances 
model execution program trace history execution events 
execution events execution program prolog predicates example 
request available events prolog engine runs routine program analyzed 
prolog engine drives execution program analysis java platform debug architecture api 
prolog showed adequacy query traces different works 
example prolog predicates count number times method executes query query 
query 
main query 
main 
order caffeine obtain event program execution predicate 
second filter method entries corresponding method predicate 
third increment counter recursively call query 
logic programming allows powerful quite natural expression queries trace program execution 
particular develop set predicates verify properties binary class relationships 
techniques reason program executions include universally quantified predicates regular expressions temporal logic 
purpose techniques drawbacks 
universally quantified predicates declarative prolog queries deal state information 
regular expressions simpler efficient power expression 
temporal logic eases expressing temporal relationships precedence expressive logic programming offers unification mechanism high level pattern matching capabilities 
pattern detection automated detection patterns source code difficult task subject works 
patterns program architecture real links patterns actors relationships source code classes relationships 
solver information collected caffeine represent program architecture 
information pattern described meta model automatically generate constraint problem constraints variables correspond pattern detect domain correspond classes relationships classes program architecture 
extend constraint solver explanations palm obtain automatically complete distorted solutions constraint problem constraint problem constrained exists solution constraints 
distorted solutions solutions subset constraints represent possible design defects design pattern detected 
example palm code excerpt instructs constraint solver compute solutions problem inheritance 
inheritance pattern states entity super entity class interface know entity sub entity extends implements 
pb inheritance length pb super entity length pb sub entity length post pb post pb declare new problem domain number entities program architecture length maximum level constraint relaxation 
second declare variables problem variables values range length 
post constraints constraint states variables instantiate entity variable extends implements entity variable 
second constraint ignorance states variables instantiate entity variable know entity variable 
assign weight ignorance constraint allow solver remove constraint fails find solutions 
solutions ignorance constraint corresponds distorted solutions inheritance pattern solutions possible design defects 
precise definition knowledge relationship scope article interested reader may refer 
explanation constraint programming easy express complex problems terms solutions want compute solutions 
eases explanation distorted solutions detection possible design defects 
explanation constraint programming powerful approaches fuzzy logic logic programming 
fuzzy logic proved usefulness detecting defects class declarations generic fuzzy reasoning nets difficult construct require fine tuning 
logic programming helps detecting classes relationships described logical rules directly help detecting distorted solutions 
example scenario highlighting integration different tools caffeine solver maintainer desires understand better architecture junit find possible design defects 
assume maintainer starts scratch pattern described 
assume knowledge design patterns 
turns loads junit display architecture 
quickly browses program architecture notices class possesses container aggregation relationship interface classes package framework 
wonders facts composition container relationship 
turns caffeine writes simple program uses caffeine analyze relationship classes specific prolog query 
runs program test class provided junit input obtains confirmation relationship classes composition container relationship 
goes back loads result dynamic analysis 
model architecture changes reflect behavioral information 
recognizes container composition relationship classes sign possible implementation composite design pattern decides verify possibility 
builds meta entity describing solution element composite design pattern constituents meta model 
second uses interact composite meta entity 
instantiates meta entity model 
parameterize model fine tune model decides go model chooses palm custom constraint builder set available builders save constraint system associated model composite design pattern disk 
third sake place summarize 
discussion binary class relationships interested reader may turn 
generates domain corresponding architecture junit calls solver 
solver computes set complete distorted solutions 
maintainer loads solutions constraint problem browses different distorted solutions constraint solvers 
solutions respectively close micro architecture advocated composite model 
investigate micro architectures highlighted constraint results decide micro architectures represents composite design pattern modifications required 
declarative meta programming core software engineering tools 
meta modelling logic base programming constraint programming solve practical software engineering problems declaration patterns representation programs detection patterns source code programs 
author deeply herv tool meta model kind support invaluable advices 
cointe 
gu jussien 
instantiating detecting design patterns putting bits pieces 
proceedings ase pages 
ieee computer society press november 

gu 
meta modeling design patterns application pattern detection code synthesis 
proceedings ecoop workshop automating object oriented software development methods 
university twente netherlands october 
tr ctit 
antoniol 
design pattern recovery object oriented software 
proceedings th workshop program comprehension pages 
brown 
design reverse engineering automated design pattern detection smalltalk 
technical report tr university illinois urbana champaign 
brown brown iii 
anti patterns refactoring software architectures projects crisis 
john wiley sons 
buschmann meunier rohnert stal 
pattern oriented software architecture system patterns 
john wiley sons 
coplien 
advanced programming styles idioms 
addison wesley 
corbett dwyer hatcliff robby 
expressing checkable properties dynamic systems bandera specification language 
technical report ksu cis technical report kansas state university 
submitted journal publication 

coca debugger fine grained control flow data events 
proceedings icse pages 
acm press may 

extendable trace analyser prolog 
journal logic programming special issue synthesis transformation analysis logic programs volume pages 
elsevier north holland november 
eden gil 
precise specification automatic application design patterns 
proceedings ase pages 
ieee computer society press november 
fowler 
analysis patterns reusable object models 
addison wesley object technology series 
fowler 
refactoring improving design existing code 
addison wesley 
gamma beck 
junit 
available www junit org 
available www junit org 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

gu 
design patterns constraints automate detection correction inter class design defects 
proceedings tools usa pages 
ieee computer society press july 

gu douence cointe 
bridging gap modeling programming languages 
technical report info cole des mines de nantes july 

gu douence jussien 
java caffeine tool dynamic analysis java programs 
proceedings ase 
ieee computer society press september 

gu jussien 
explanations design patterns identification 
proceedings ijcai workshop modeling solving problems constraints pages 
aaai press august 

behavioral patterns software requirement engineering 
cd rom cascon 
centre advanced studies ibm toronto laboratory institute information technology national research council canada november 
jackson rinard 
software analysis roadmap 
proceedings icse software engineering track pages 
acm press june 
jackson 
lightweight extraction object models bytecode 
proceedings icse pages 
acm press may 
jahnke sch fer 
generic fuzzy reasoning nets basis reverse engineering relational database applications 
proceedings european software engineering conference pages 
jussien 
constraints explanation constraint programming 
cp workshop user interaction constraint satisfaction december 
kobayashi 
object oriented modeling software patterns support tool 
proceedings ecoop workshop automating object oriented software development methods 
university twente netherlands october 
tr ctit 
lzle singh 
dynamic query debugging 
proceedings ecoop pages 
springer verlag june 
mens wuyts 
supporting software development declaratively codified programming patterns 
journal expert systems applications 

pagel winter 
pattern tools 
proceedings europlop 
prechelt kr mer 
functionality versus practicality employing existing tools recovering structural design patterns 
journal universal computer science december 
prechelt unger tichy br votta 
controlled experiment maintenance comparing design patterns simpler solutions 
ieee transactions software engineering 

de patterns de conception un ta 
proceedings lmo french pages 

implementing patterns chapter 
addison wesley 
sun microsystems java platform debug architecture 
available java sun com products jpda 
suny 
mise en de patterns de conception un 
phd thesis universit de paris lip july 
chiba 
programming support design patterns compile time reflection 
proceedings workshop reflective programming java oopsla vancouver canada pages october 

implementing design patterns declarative code generators 
submitted ecoop 
woods quilici yang 
constraint design recovery software reengineering theory experiments 
kluwer academic publishers kluwer academic publishers group distribution center post office box ah dordrecht netherlands 
wuyts 
declarative reasoning structure object oriented systems 
proceedings tools usa pages 
