caramel concept representation system generic programming osl iu edu introduces caramel concept representation markup language system generic programming 
concepts interface descriptions templates central role generic programming 
language support result represented implicitly form documentation power enforce interface adherence 
caramel system provides framework explicit representation concepts xml subsequent integration concept descriptions generic library 
xml concept description defined caramel dtd tools caramel system automatically generate concept checking classes compile time assertions interface adherence archetypes concept exemplars verification algorithm implementations 
documentation associated concept generated number popular formats including html atex 
concept checking classes archetypes documentation generated single source xml concept description consistency assured 

generic programming continued evolve important paradigm building robust reusable software 
term concept emerged denote specifically interface description templates heart generic programming frameworks 
concepts play obviously critical role generic programming typically implicitly 
language support describe concepts represented explicitly generic libraries 
result enforcement template arguments adhere required interface 
specifically concept set requirements valid expressions associated types semantic invariants complexity guarantees type fulfill correctly context generic algorithm 
type fulfills requirements concept said model concept 
concepts represented formal template parameters function templates generic algorithms 
template parameters merely placeholders restriction set valid type arguments 
conven jeremy siek osl iu edu open systems laboratory computer science department indiana university bloomington www osl iu edu research caramel andrew lumsdaine osl iu edu tion template parameters names corresponding concept required concepts specified documentation form 
example prototype std sort algorithm template class randomaccessiterator void sort randomaccessiterator randomaccessiterator std sort algorithm operate properly type variables bound meet requirements random access iterator concept specified section iso standard 
unfortunately template system provides flexibility generic programming possible templates carry particular semantic information relative generic algorithm 
particular meaning compiler conveyed name randomaccessiterator template parameter compiler means enforcing point std sort instantiated type bound randomaccessiterator fulfill requirements random access iterator 
naturally generic algorithm invoked type fulfill syntactic requirements concept compile time error occur 
error se reflect fact type meet requirements concept 
error may occur deep inside instantiation hierarchy point expression valid type presumed associated type available 
needed explicit representation concepts tools representation enforce interface conformance verify algorithm implementations interface specifications 
describe caramel concept representation markup language system generic programming 
caramel system provides framework explicit representation concepts subsequent integration concept descriptions generic library 
primary goals caramel elevate role concepts generic programming provide mechanisms safer generic programming 
central caramel dtd document type definition defines concepts described xml 
xml concept description caramel dtd tools caramel system automatically generate types output products important contributions better generic programming concept checking classes compile time assertions enforcing interface adherence input types meet requirements algorithm 
concept archetypes exemplar classes verifying algorithm interfaces 
documentation human readable forms concept specification formatted familiar ways popular document formats html 
concept checking classes archetypes documentation generated single source xml concept description consistency assured 
description information flow caramel generic programming project shown 
concept author creates concept descriptions caramel concept format 
processed tools caramel system produce concept checking classes archetypes documentation 
user creating types generic algorithms documentation create types modeling concept concept checking classes ensure type truly model concept 
generic algorithm author documentation create algorithms concepts concept checking classes ensure correct types algorithm archetypes test algorithm uses properties type specified concept 

concepts generic program ming concept represent interface generic algorithm types may provided template parameters 
generic algorithm requires parameters model specific concepts data types parameters model concepts algorithm compile run correctly provided algorithm implemented correctly 
concept contains syntactic semantic requirements 
example syntactic requirements generic binary search algorithm able determine length sequence searched function method get specific element compare elements 
example semantic requirements sequence sorted comparison operator sort compare elements binary search 
concept author user type user concept file documentation caramel tools concept checking classes dotted lines indicate production solid lines indicate 
archetypes generic algorithm generic algorithm writer information flow caramel concept consists constraints individual requirements functions operators runtime behavior 
constraints require certain properties arguments concept including compile time run time properties 
kinds constraints concepts 
kind expresses operation method lookup table entry valid type concept 
require operations defined types values 
addition associated types defined 
require type exist related 
associated types traits classes need located 
associated type definition provides shorthand name type easily concept description 
concepts constraints requiring operations usually called valid expressions 
valid expression consists expression compile types return type certain properties 
instance valid expression require values type addable operator result addition type valid expression may specify pre postconditions semantics expression 
constraints concept take form invariants identities 
requirement expression true values type 
instance parallel prefix sum algorithm require operation combine elements list associative 
concept may provide guarantees resource complexity various operations 
concepts may include refinements 
refinement includes requirements concept current 
instance bidirectional iterator concept refines forward iterator concept 
means type models bidirectional iterator model forward iterator 
refinement provides subset relationship set types modeling refining concept set types modeling refined concept 
order automatically processed concepts represented computer readable format 
format easy parse contain information documentation 
description valid expressions code way simplifies code generation concept checking classes archetypes 
concept representation contain foremost constraints form meat concept 
documentation provided 
includes documentation concept definitions algorithm complexities pieces text 
notations variable definitions simplify output concept documentation concept checking classes 
related interfaces languages provide support interfaces sense java interface 
interface called base class specifies methods required parameter function method 
user defined type implements inherits interface 
specifies compiler user type may parameters implementing interface required causes compiler check user type methods required interface 
user type methods required interface compile time error occurs 
advantage method compiler tests user type methods require separate concept checking library 
disadvantages methods checked user explicitly state interfaces implemented user type 
interfaces constrain subtype polymorphism ensure object passed method correct virtual functions implemented constrain parametric polymorphism ensure type passed generic algorithm correct methods defined 
interfaces exist java languages constrain subtype polymorphism constrain generic type parameters generic java pizza languages 
unified modeling language format specifying designs object oriented programs supports interfaces 
designs written represented xml 
standard template library modeled uml 
interface definition languages interface definition languages specify interfaces objects accessed system corba com 
interface definition language contains information interface programming language specification contains remote object protocol needs know parameters read written data access requirements 
interface definition language specifies interface type 
corba idl microsoft idl com dcom contain interface specification systems 
signatures similar interface signature called type class list methods type support 
interface user type need explicitly state signatures supported type 
compiler checks user type supports correct methods type passed function 
signatures supported gnu compiler theta programming language 
functional programming community haskell standard ml languages signatures constrain generic type parameters 
addition interfaces mentioned uml supports types equivalent signatures 
assertions design contract programming languages provide methods verify runtime type satisfies certain properties 
usually done inserting extra debugging code called assertion tests properties causes program abort satisfied 
example document semantics method data structure ensure particular implementation follows specification 
called design 
structure similar interfaces specify presence list methods 
provide detailed semantics methods 
eiffel uses non generic generic classes including restricting parameters generic types fit particular interface 
systems anna preprocessor ada provide general specification language embedded program 
preprocessor uses generate documentation assertions code input formal correctness proof system 
provide way specify interfaces generic algorithm generate code documentation 
formal specification way specify interface type formal specification 
particular formal specification languages support generic programming 
languages include fully formal descriptions type constraints detail caramel provides 
designed specifications converted documentation programs standard programming languages 
examples formal specification languages generic include obj 
languages allow user prove mathematically certain type matches concept generic algorithm function correctly 

concept applications concept checking classes compilers support concepts previously developed idiom call concept checking defining compile time assertions type model concept :10.1.1.22.427
library supporting idiom provides concept checks standard library available boost concept checking library 
concept checking class comparable 
required valid expressions concept exercised constraints member function 
namespace boost template class struct void constraints bool concept checking class instantiated user template arguments generic algorithm function requires 
example safe version stl sort function 
include boost concept check hpp template class iter void safe sort iter iter typedef typename std iterator traits iter value type boost function requires boost requirements std sort caramel system program converts concept xml concept checking class described section 
concept archetypes complementary problem concept checking verifying documented requirements generic algorithm match algorithm implementation problem refer concept covering 
typically library implementors check coverage manual inspection error prone 
previously developed idiom exploits compiler type checker available part boost concept checking library :10.1.1.22.427
provides archetype class concept standard library 
archetype class provides minimal implementation concept 
check concept covers algorithm archetype class concept instantiated passed algorithm 
example suppose documentation std sort stated iterator arguments type model random access iterator value type iterator comparable 
concepts cover std sort verified compiling program 
include algorithm include boost concept archetype hpp int main typedef boost comparable archetype boost random access iterator archetype ri std sort ri ri compiling program result compiler error turns concepts cover std sort 
resulting error message indicates algorithm requires value type copy constructible 
copy constructor needed assignment operator needed 
error implementation sort uses operation truly necessary error interface requirements sort provide features correctly implement algorithm 
case problem interface specification analyzed evaluated case case basis 
requirements copy construction assignment summarized assignable concept 
code shows implementation archetype class assignable 
base template parameter provided archetypes combined 
check std sort archetype classes assignable comparable need combined 
namespace boost template class base null archetype class assignable archetype public base typedef assignable archetype self public assignable archetype const self self operator const self return caramel system generates archetype classes xml concept descriptions described section 
documentation generation third product concept representation system documentation concept 
purpose concept documentation communicate interface requirements user 
caramel system concept documentation modeled concept descriptions generic programming stl sgi stl documentation 
documentation produced html atex formats 
documentation concept contains parts header information various sections human readable documentation notation concept list associated types list valid expressions list invariants see section list related concepts 
information footnotes copyright messages inserted appropriate 
features required concept description documentation generation 
information independent output documentation language easy add additional languages 
caramel system output specific code xml concept descriptions 
example mathematical expressions represented subset mathml converted specific output language 
requirement concept description structure somewhat similar documentation 
instance valid expression lists modeled closely documentation look translation programs need overly complicated 
process caramel system converts xml concept descriptions documentation described section 
types related automated documentation generation 
systems javadoc generate documentation source code special comments markup 
designed document concepts javadoc document interfaces java system 
documentation tool designed generic programming concepts 
intended documenting haskell programs automatically generate documentation type class equivalent concept marked source code 
system rational soda generate documentation source code keep updated source code changes 
logical extension literate programming program interspersed large blocks documentation 
literate programming systems knuth web system 

caramel system concept representation markup language caramel system uses xml represent concepts 
format formally defined xml document type definition dtd 
tools provided convert format html atex documentation produce automated concept checking classes archetypes 
diagram steps process 
caramel concept format caramel concept format contains elements listed section part generic concept description 
elements added simplify generation documentation concept checking classes archetypes 
sections concept concept described caramel format consists sections 
list sections followed detailed descriptions 

concept name 
parameters 
copyright statements 
models sentence 
documentation 
notation 
refinements 
associated types 
defined types 
valid expressions 
see 
example models concept name concept name optionally category 
name constituent word capitalized 
separate name actual code conform naming standards 
name generated removing white space hyphens human readable name 
instance hilbert space concept name hilbert space name code 
parameters concept describes behavior single type concept describes interactions multiple types 
instance input iterator concept parameter iterator type group concept element type group operation type identity operation inverse operation 
refer types parameters concept 
parameter name refer xml description code role describe parameter documentation 
example table group concept parameters name role element type op operation type identity function type inverse function type copyright statements copyright statements may included concept may specified directly concept file external xml file 
copyright information printed files output concept 
models sentence models sentence template sentence documentation describe set types model specific concept 
improve readability quality documentation 
example group concept models sentence element type arg num operation arg num identity function arg num inverse operation arg num form self arg tag template replaced actual type corresponding parameter concept 
self tag replaced name current concept 
sentence substituted names specific types concept referred 
documentation sections concept format express various pieces human readable documentation 
main named documentation providing main description concept purpose 
definition complexity invariant sections 
written minimum formatting contain code blocks mathematical notation written extended subset mathml 
notation notation section defines type names variable names concept documentation concept checking class 
common form declare list variables type 
variables listed documentation valid expressions needing variables type sequentially names declaration list 
instance declaring variables type int expression requiring sum int output concept xml documentation internal format final output formats implemented refinements concept may refine concept 
instance concept refines concept requirements specified appear reminiscent subtype relationship concepts 
normal refinement requires parameters exactly concepts 
inadequate concepts alternative form allows subset parameters 
form uses models sentences described earlier 
associated types associated type type directly parameter concept part concept definition 
example stl iterator associated type value type type data pointed 
case iterator associated types provided traits class concepts associated types member types concept parameter directly 
associated value type iterator accessed std iterator traits class 
description associated type includes name required access method nested typedef particular traits class 
defined types defined types notational convenience xml concept descriptions 
create short name type parts xml concept description 
defined types appear output behave macros 
valid expressions important parts concept specification list valid expressions 
come types listed separately documentation value expressions type expressions 
similar semantics main difference constraint type value 
constraints consists expression written parse tree list requirements return type expression 
requirements include html html latex pdf pdf documentation formats 
concept checking class hpp archetypes hpp steps caramel processing structure type constraints type specified type convertible constraints constraints derived constraints 
addition return types expressions may required model concept possibly types specified arguments concept 
invariants form actual requirements types concept 
see feature concept may list concepts related 
purely documentation purposes 
models section lists examples types sets types satisfy concept 
section purely documentation purposes 
concept xml definition concept structure described defined xml document type definition dtd 
allows tools xerces validate particular concept description correct format 
order allow flexibility section ordering dtd express constraints concept format catch major errors 
parse trees interesting feature caramel format code valid expressions expressed parse tree 
simplifies production archetypes parse trees directly translate code cost requiring parse tree code converter producing documentation concept checking classes 
provided converter 
instance converter set ignore top level const volatile qualifiers ignore toplevel 
parse tree format somewhat gcc xml covers details expressions program structure 
example parse tree expressed xml represents extraction value type iterator named iter 
get member type name value type apply template name std iterator traits type name iter apply template get member type parse tree iterator value types concept mutability concept mutable non mutable forms 
example non mutable iterator container may moved container may change element points 
mutable iterator hand allowed change element points 
forms handled concept flags compile time determine form 
concept checking classes archetypes generated forms separately documentation version concept forms 
modules system addition concept structure dtd described caramel system contains programs operate concepts produce various types output 
outputs include html atex documentation index html concept checking classes archetypes 
modules written gnome xml library xml parsing generation services 
concept checking class generation generate automatic concept checking classes stage process 
stage shares modules documentation generator 
sections documentation intended human reading deleted constraint valid expression converted code test 
tests simpler boost concept checking type traits static assertion libraries 
converter produces concept checking classes mutable form concept non mutable form intended boost concept checking library 
concept archetype generation process generate archetypes complicated previous 
roughly stage process stages integrated single program 
stages simplicity inherent part archetype generation process 
operators functions required concept produced dummy values results 
default constructors copy constructors assignment operators explicitly required concept marked private ensure depends implicitly 
documentation generation process documentation generation broken steps ease addition new output formats 
concept converted language independent intermediate format output format html atex current implementation 
step follows list concept sections gathers information section 
documentation copied intermediate format parts code valid expression return type constraints converted text original tree representations 
format matches structure output documentation closely designed easy parse xslt stylesheet currently parsed program 
tree conversions handled separate module included documentation translation programs 
output conversion program run 
current implementation contains programs stage html atex output 
dtd provided intermediate format users write processors handle stage conversion 
programs generally convert tags intermediate file directly output perform complicated processing data 
example example equality comparable concept sgi stl documentation traced caramel system 
xml file created concept shown 
note concept description include require available concept elements 
concept described scope concept tag contains concept name category concept case utility stl utility concepts 
parameter type comparable equality 
documentation notations declared values denoted sample value type valid expressions 
requires specific operator values type return type convertible bool 
written words equal equal parse tree 
examples sgi documentation types modeling equality comparable concept 
concept checking class produced shown 
note section code follows concept description fairly closely 
name concept name checking structure 
notations concept variable declarations valid expression test concept checking class 
test instance tests equality operator exists type result operator convertible bool 
concept checking class literal translation concept description captures exactly concept requires 
second test similar stylesheet xslt equivalent program 
consists set templates procedures handle various types input 
sake brevity clarity examples shown abbreviated fashion 
concept name equality comparable category utility param name role comparable type copyright statements misc 
documentation models sentence type arg num model self models sentence notation variables sample value type name valid expression name equality test equal sample value type name sample value type name equal return type convertible type name bool valid expression valid expression name inequality test equal sample value type name sample value type name equal return type convertible type name bool valid expression example models concept equality comparable concept file copyright statements header inclusions namespace declarations template class struct void constraints equality test bool inequality test bool identical struct mutable form concept equality comparable concept checking class tests inequality operator 
concept checking classes mutable non mutable forms concept placed file non mutable form shown example 
addition archetype produced shown 
shows non mutable form mutable form concept 
group types defined separate namespace 
important nt corresponds type concept description 
type public constructors defined 
concept require archetype depends implicitly 
helper types convertible bool 
operators defined objects type nt order require copy constructor return helper types 
return bool directly concept require 
sample value function archetype just returns nonsense value type invoking constructors 
parameters concept listed order test archetype easily 
note archetype needs compile successfully runtime behavior unimportant 
header copyright information namespace boost namespace archetypes forward declarations structs actual archetype class definition struct mutable typedefs structs typedef mutable nt nt typedef mutable typedef mutable typedef nt parameter concept parameter structure definitions namespace mutable struct nt operations explicitly disabled 
struct convertible bool operations disabled 
struct convertible bool operations disabled 
standalone functions operators namespace mutable operator const nt const nt return boost sample value operator const nt const nt return boost sample value equality comparable archetype major type output caramel system generate concept documentation shown 
concept checking class follows directly concept xml document 
heading concept name category followed description 
notation section concept parameters notation concept shown 
lists valid expressions example models case sgi documentation copyright messages 

libraries frameworks doc caramel part development caramel system developed xml concept descriptions libraries 
beneficial expanding range concepts caramel system able represent 
standard library concepts standard library documented caramel system 
sgi stl documentation language standard iterator function object container utility concepts documented 
equality comparable concept earlier example library 
concepts exposed weaknesses early versions caramel system 
example dealing member access pointers operator 
way operation implemented unique part operation provided type returning pointer rest accessing member handled implementation 
issue solved handling operator differently operators conversion xml concept description xml intermediate documentation format 
operator defined concepts returning pointer shown concept documentation explanatory note 
equality comparable category utility description types operators 
notation type playing role comparable type equality comparable concept 
objects type valid expressions equality test expression return type convertible bool inequality test expression return type convertible bool models int std vector int copyright sgi copyright hewlett packard equality comparable documentation boost property map concepts boost property map concepts documented caramel system 
property map association key set value set 
requirement key set finite 
property maps read write read write provide associated value 
property maps generalizations arrays stl maps 
require substantial changes system done fairly early development cycle influenced features included 
concepts category readable property map writable property map read write property map lvalue property map 
plan applying system rest boost libraries 
mtl algebra concepts algebra concepts draft matrix template library documented caramel system 
concepts demonstrate different features system include mathematical formulas concepts multiple type parameters 
hilbert space concept example library 
mathematics especially field algebra uses ideas similar concepts 
analog concepts algebraic structures defined properties theorems proved 
full description algebraic structures sources 
concept descriptions mtl basically translations algebraic structures code 
concepts caused problems caramel system 
concepts large amounts mathematical notation lead mathml represent 
mathematical concepts types parameters models sentence construct described earlier needed added concepts documentation readable 
addition concepts group refer loops needed detected expanding archetype constraints avoid infinite recursion 
problems concepts 
instance mtl definition additive abelian group concept required result addition convertible original type require result additions 
changed caramel description concept 
versions mtl include concepts documented caramel system 
concepts library documented additive abelian group finite vector space banach space hilbert space commutative groupoid linear algebra commutative ring linear operator field module finite banach space ring finite hilbert space linear operator finite linear operator vector space 
testing procedures test concept checking classes archetypes produced caramel system concept descriptions underlying tested stl container class appropriate concept checking classes tested stl algorithm archetype concept required algorithm arguments 
algorithms passed corresponding archetypes containers passed failed due bug version standard library tests 

straightforward avenue improvement caramel system document concepts 
provide valuable feedback improve appeal system potential users 
possible new feature add support constructs current caramel system support 
system currently support member class templates non type template parameters adding allow general range concept expressed 
needed concepts currently system 
member class templates required document standard library allocators memory allocation routines 
features probably difficult implement needed 
possible new feature increase formality concept specifications caramel system 
instance formal proof language output formats prove particular class models certain concept 
require substantial changes system currently parts concept invariants complexity specifications written documentation interpreted caramel 
addition concepts need rewritten new formal definitions 
probably concepts current documentation lacks certain invariants implied reasonably assumed human reader need explicitly stated 
major change caramel system 
feature ease concept entry readable input language converted program xml 
similar language javadoc specialized concepts 
currently entering concept requires typing paste concepts xml verbose language 
verbose sections concept currently parse trees mathematical notation 
parse trees tag represent operator require name specified start node 
mathematical notation expressed extended subset content mathml written parse tree similarly verbose 
better system readable format preprocessor convert xml processing 
xml internal format programs easier time parsing concepts 
alternative way simplify concept entry specialized concept editor 
editor provide template concept allow entry parse trees mathematics mathml web pages editors exist language 
concept editor show concept documentation screen 
written file full xml description concept 
possible existing xml editors extended purpose 
support generic programming languages useful feature caramel system 
currently supported kinds information contained concept description dependent particular language 
set operators supported concept features 
caramel system extended generate signatures type classes documentation multiple generic programming languages 
release caramel system expected 
available www osl iu edu research caramel 

acknowledgments authors individuals helpful discussions contributed caramel matt alex stepanov david musser schupp ron garcia 
supported nsf aci 
author supported schmitt fellowship university notre dame course 
benefitted comments anonymous reviewers 

information technology open distributed processing interface definition language 
iso iec 
apache xml project 
xerces java 
xml apache org xerces index html 
mathematical markup language mathml version 
world wide web consortium february 
www org tr mathml 

generic programming stl 
professional computing series 
addison wesley 
baumgartner russo 
signatures language extension improving type abstraction subtype polymorphism 
software practice experience august 
simplified wrapper interface generator 
www org 
boost 
boost libraries 
www boost org 
bracha odersky stoutamire wadler 
making safe past adding genericity java programming language 
oopsla 
day gruber liskov myers 
subtypes vs clauses constraining parametric polymorphism 
oopsla pages 

uml description stl 
workshop template programming erfurt germany october 
goguen 
parameterized programming 
ieee transactions software engineering se sept 
gosling joy steele bracha 
java language specification second edition 
addison wesley 

february 
www fmi uni passau de 
international standardization organization iso 
ansi iso standard programming language 
rue de case ch gen switzerland 
jones hughes haskell non strict purely functional language february 
www haskell org 
kapur musser stepanov 
language manipulating generic objects 
editor proceedings workshop program specification volume lncs pages aarhus denmark aug 
springer 
king 
gcc xml xml output extension gcc front 
february 
public com gcc xml 
knuth 
literate programming 
center study language information stanford ca 
luckham von henke 
overview anna specification language ada 
ieee software march 
meyer 
object oriented software construction 
prentice hall upper saddle river nj nd edition 
microsoft 
com december 
msdn microsoft com library com qn htm 
microsoft 
microsoft interface definition language december 
msdn microsoft com library ov htm 
milner tofte harper 
definition standard ml 
mit press 
myers 
traits new useful template technique 
report june 
object management group omg unified modeling language specification march 
www omg org technology documents formal unified modeling language htm 
object management group common object request broker architecture specification february 
odersky wadler 
pizza java translating theory practice 
proceedings th acm symposium principles programming languages popl paris france pages 
acm press new york ny usa 
rational software 
rational soda 
www rational com products soda 
siek lumsdaine :10.1.1.22.427
concept checking binding parametric polymorphism 
workshop template programming erfurt germany october 
siek lumsdaine 
matrix template library generic programming approach high performance numerical linear algebra 
international symposium computing object oriented parallel environments 
silicon graphics sgi implementation standard template library 
www sgi com tech stl 
sun microsystems javadoc 
java sun com se docs javadoc index html 
van der 
algebra 
frederick ungar publishing 

xml library gnome june 
www org 
world wide web consortium 
extensible markup language xml second edition october 
www org tr rec xml 
