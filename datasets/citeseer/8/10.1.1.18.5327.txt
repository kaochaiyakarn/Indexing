overview formal framework managing mathematics william farmer mcmaster ca martin mcmaster ca department computing software mcmaster university main street west hamilton ontario canada may 
mathematics process creating exploring connecting mathematical models 
presents overview formal framework managing mathematics process mathematical knowledge produced process 
central idea framework notion biform theory simultaneously axiomatic theory algorithmic theory 
representing collection mathematical models biform theory provides formal context deduction computation 
framework includes facilities deriving theorems mixture deduction computation constructing sound deduction computation rules developing networks biform theories linked interpretations 
framework tied speci underlying logic intended background logics simultaneously 
ideas mechanisms framework inspired imps interactive mathematical proof system axiom computer algebra system 
keywords mechanized mathematics computer theorem proving computer algebra axiomatic method little theories method ams msc classi cations 
mathematics 
mathematics process creation exploration connection 
consists intertwined activities 
model creation 
mathematical models representing mathematical aspects world created 

model exploration 
models explored stating proving conjectures performing computations 
visualization important model exploration technique considered 
farmer 
model connection 
models connected results obtained model related models 
mathematical models come forms mathematical models considered collections objects related certain ways 
example standard model natural numbers consists nite set usual binary operations usual binary relations producing models knowledge models mathematics process enlarges body mathematical knowledge 
mathematical knowledge turn fuels mathematics process 
old ideas joined re ned new ideas 
old structures extended new structures 
patterns discovered illuminated 
mathematics process produced body mathematical knowledge truly overwhelming size complexity enlarged increasing rate 
compared disciplines system managing mathematics process knowledge produces primitive changed relatively little half century 
computers extensively performing computations rarely parts mathematics process 
great majority mathematical knowledge expressed abbreviated informal readable style mathematicians employed centuries 
new century mathematics managed best facilitate production mathematics process application science technology 
question important questions facing mathematics today 
believe answer formal framework meets goals 
model representation 
framework provides way representing models knowledge models 

process facilitation 
framework facilitates full process creating exploring connecting models 

mechanization 
framework ectively mechanized software system 
principal candidates framework computer theorem proving computer algebra 
formal framework managing mathematics computer theorem proving computer theorem proving emphasizes conjecture proving aspect mathematics process 
axiomatic theory represent collection mathematical models similar structure 
formally triple logic consisting family formal languages set models language language set formulas members called axioms model model axiom holds 
language provides common vocabulary making statements models logical consequence axioms holds model example presents formulation peano arithmetic famous axiomatic theory represents standard model natural numbers 
computer theorem proving framework mechanized wide range di erent kinds computer theorem provers 
examples include automath coq hol imps isabelle mizar nqthm nuprl otter pvs 
theorem provers primarily prove conjectures context axiomatic theory 
aspects mathematics process usually supported 
manage creation extension connection axiomatic theories perform computations process proving conjectures 
example peano arithmetic 
language secondorder logic sol exactly nonlogical constants 
individual constant 
unary function constant successor function 
contains binary predicate constant considered logical constant 
set formulas 
successor 

injective 

induction axiom 
pa sol second order theory peano arithmetic 
pa speci es single model isomorphism standard model natural numbers 
operations relation de nable pa farmer pa powerful theory suited proving general theorems standard model natural numbers 
signi cant shortcomings 
pa pa plus de nitions pa nitely axiomatizable second order logic means pa represented computer system kind procedural mechanism encoding nite set de nitions second prove equation directly axioms pa requires number steps proved calculation simple calculator 
computer algebra computer algebra emphasizes computational aspect mathematics process 
algorithmic theory usually represents single mathematical model 
formally triple logic formal language set algorithms take expressions input return expressions output 
language provides vocabulary making statements model represents 
algorithms exhibit behavior model possesses 
example presents simple algorithmic theory represents standard model natural numbers 
computer algebra framework mechanized computer algebra systems 
examples include axiom macsyma maple mathematica 
computer algebra systems designed primarily performing computations 
computations performed great speed results reliable 
algorithmic theories computation performed usually represented explicit manageable units 
conjecture proving generally possible mathematical knowledge represented algorithmically 
example natural number arithmetic 
language rst order logic fol nonlogical constants 
nitely individual constants 
binary function constants 

binary predicate constant includes binary predicate constant considered logical constant 
numeral member numeric term variable free term numeric formula formal framework managing mathematics equation inequality numeric terms eval algorithm numeric term returns numeral equals reduce algorithm numeric formula returns logical constant true false true false respectively 
fol algorithmic theory natural number arithmetic 
speci es standard model natural numbers 
powerful theory evaluating variable free numeric terms deciding equations inequalities variable free numeric terms 
suitable proving properties natural numbers 
example provide means prove fundamental theorem arithmetic says natural number factored product primes unique order factors 
computer theorem proving computer algebra ful lls requirements formal framework managing mathematics 
knowledge mathematical models best encoded declaratively axioms knowledge best encoded procedurally algorithms manipulate expressions 
formal framework allow models knowledge models represented ways 
second full process creating exploring connecting mathematical models supported 
emphasizing just conjecture proving just computation 
power mathematics process comes rich interplay creating models exploring deduction computation connecting share structure 
proposal formal framework propose formal framework managing mathematics ffmm 
managing mathematics process knowledge produces 
ffmm notion biform theory simultaneously axiomatic theory algorithmic theory 
biform theory represents collection mathematical models encoding knowledge models declaratively procedurally 
ffmm intended support full mathematics process provides means manage creation exploration connection biform theories 
ffmm includes facilities derivation theoremoid construction theory development 
derivation merger deduction computation driven application deduction computation rules called theoremoids 
theoremoids farmer constructed theorems primitive theoremoids biform theory techniques guarantee soundness 
networks biform theories developed creating biform theories linking interpretations installing theorems theoremoids de nitions 
ideas mechanisms ffmm inspired imps interactive mathematical proof system axiom computer algebra system 
mechanization ffmm discussed 
believe ffmm mechanized ideas embodied computer theorem proving systems imps computer algebra systems axiom maple 
presents overview ffmm proofs details 
detailed presentation ffmm see technical report 
large body related proposal concerning logical frameworks managing logical systems investigating metalogical issues problem integrating computer theorem proving computer algebra 
related discussed section 
rest organized follows 
properties background logic ffmm satisfy discussed section 
central notion biform theory de ned section 
techniques constructing theoremoids discussed section 
derivation process exploring biform theories introduced section 
connecting biform theories translations interpretations subject section 
brief overview ffmm infrastructure developing networks biform theories section 
sections special computational devices algebraic processors computational models 
ends section survey related section 

logics ffmm particular background logic 
mathematics formalized variety traditional logics rst order logic simple type theory 
background logics ffmm simultaneously mathematical results shared related logics see section 
background logic satisfy relatively small set properties 
properties expressed notion admissible logic de ned precisely 
admissible logic classical formal framework managing mathematics valued logic de ned family admissible languages usually share common structure 
languages language triple 
set syntactic objects called sorts 
set syntactic objects called expressions 
total function 
phrase expression sort means expression subexpression position expression 
result replacing position syntactic object denoted 
assume expression sort assume languages closed replacement subexpression expression sort 
atomic contains subexpressions 
language 
sublanguage extension written subfunction language admissible conditions hold 
contains denotes sort truth values 

true false expressions sort 

expressions sort negation implication conjunction disjunction expressions sort 

expressions sort expression sort called equation asserts equality standard logic means denote value logic admits unde nedness lutins logic imps means denote value unde ned :10.1.1.20.7997
farmer 
expressions expression sort called conditional denotes true denotes false 
summary language admissible contains certain basic machinery forming propositional statements equations conditionals 
formula expression admissible language sort 
models semantics admissible language set models see 
set models formula set formulas satis es written satis es written satis es 
valid respect written model satis es logical consequence respect written model satis es satis es local contexts expressions subexpression position set models set formulas occurring local context respect sets formulas implies words local context expression position set formulas govern subexpression occurring example fag local context position occurs fa local context position occurs 
method local contexts powerful idea applicable deduction computation 
see examples local contexts imps facilitate deduction computation 
ffmm local contexts control local application deduction computation rules see section 
formal framework managing mathematics admissible logics admissible logic triple 
set admissible languages 

set models 
expression position local context respect 
traditional logics including propositional logic rst order logic simple type theory formulated admissible logics 
logics admit unde nedness lutins logic imps related logics see formulated admissible logics :10.1.1.20.7997
examples stt admissible logic formulation church simple type theory 

theories section introduce central notion biform theory generalization axiomatic theory algorithmic theory 
axioms biform theory axiomatic meaning algorithmic meaning 
result biform theory simultaneously axiomatic theory algorithmic theory 
representing collection mathematical models biform theory provides formal context deduction computation 
transformers deduction computation rules represented ffmm algorithms called transformers map expressions admissible language expressions 
admissible language 
transformer algorithm implements partial function mean dom denote domain subset de ned 
resides language transformer expressions dom 
transformer intended expression transforming algorithm preserves meaning modi es meaning prescribed way 
logics lutins requires adding machinery framework handle subsorts 
farmer instance transformer represent evaluator simpli er rewrite rule rule inference decision procedure translation language 
various examples transformers 

context sensitive deduction computation rules give di erent values di erent assumptions represented transformers return conditionals 
suppose transformer residing language expression subexpression position application written expression 
unde ned unde ned 
language expression sort de ned 
generalizes formula algorithm 
admissible language 
pair 
kind 

formula called assertional 

transformer residing called transformational 
kind called equational 
concentrate attention kind assertional equational 
useful kinds transformational de ned see examples 
span written span set formulas span fag 
span fe dom transformational kind span normally set formulas relating input output 
example span set implications inequalities transitive relations operation written oper transformational 
oper true true transformer maps true unde ned expressions 
oper 
meanings 
axiomatic meaning span formulas algorithmic meaning operation 
formal framework managing mathematics biform theories biform theory triple 
admissible logic called logic 
member called language 
set called span written span union spans span operations written oper set operations viewed having forms simultaneously span form axiomatic theory oper form algorithmic theory 
model model span 
axiom span 
theorem written span thm denote set theorems theoremoid span obviously theoremoid denote set theoremoids 
great majority commonly rules inference represented transformational kind 
exceptions include rules universal generalization existential instantiation elimination 
show rules inference kind realized conservative extensions pro les see section :10.1.1.20.9925
admissible logic biform theory 
subtheory extension written thm thm 
biform theory 
set languages 
extension 
smallest language 


may de ned 
obviously 
de ned 
set formulas mean single formula mean fag 
examples stt stt stt stt biform theory formulation logical theory stt farmer example biform theory peano arithmetic 
pa stt pa pa extension stt 
stt pa 
pa includes atomic expressions sort atomic expression sort atomic expressions sort 
atomic expression sort 
sort individuals intended denote set natural numbers 

pa stt assertional representing axioms axiomatic theory pa example 
equational representing algorithms eval reduce algorithmic theory example 
pa biform theory formulation peano arithmetic combines axiomatic algorithmic machinery pa 
important emphasize biform theory assumptions 
members spans assumed true results operations assumed sound 
transformational example taken assumptions sound pa meaningful question 

theoremoid construction section notion derivation merger deduction computation 
see essence derivation application theoremoids 
ective derivation requires toolbox theoremoids employed biform theory 
course toolbox theoremoids theory contains theory may embody reasoning computational techniques desired 
theoremoids obtained 
parts answer biform theory theorem assertional theoremoid second transformational theoremoid obtained formal framework managing mathematics constructing transformer residing language proving theoremoid ffmm include general system proving transformational theoremoid particular theory 
includes collection techniques constructing transformational guaranteed construction 
techniques described section 
third technique theory interpretation described section 
techniques constitute toolkit building sound deduction computation tools form transformational theoremoids 
computing theorems de ne family theorem theoremoid constructors stt automatically generate transformational theoremoids theorems style theorem employed imps see 
form generated transformational theoremoid depends syntactic form theorem 
example suppose theorem formula form quanti ed variable sort may occur de ne transformer residing de ned follows alpha equivalent substitution domain fx unde ned 
equational theoremoid applies conditional rewrite rule reverse conditional rewrite rule generated 
applied derivation graph introduces conditional resolved simpli cation split split conditional operator see section 
examples theorem theoremoid constructors quanti cation 
method generating transformational theoremoids theorems powerful technique 
transformational theoremoids designed writing formulas right form veri ed proving formulas theorems nally constructed automatically 
construction large collection useful transformational theoremoids reduced essentially just theorem formulation proving 
farmer combining theoremoids theoremoid combinator forms new transformational theoremoid set existing transformational theoremoids 
theoremoid combinators inspired constructors imps see 
example xpoint combinator builds transformational theoremoid transformer ect repeating applying transformer transformational theoremoid expression expression remains unchanged 
biform theory de ne 
de ne xpoint de ned follows 
expression de ned 

unde ned 
easy see equational theoremoid xpoint equational theoremoid theoremoid combinators 

derivation ffmm biform theory provides context performing deductions computations importantly operations deduction computation intertwined 
want replace unfortunate separation deduction computation new notion combines call derivation 
need formal workspace building derivations intertwined deductions computations 
workspace biform theories xed admissible logic 
solution notion derivation graph de ned section 
generalization notion deduction graph employed imps see 
derivation graphs levels 
concentrate base level derivation graph de nes derivation lowest level 
base level levels structure intended raise derivation level mathematics practitioners comfortable 
derivation graphs base level admissible logic 
derivation graph node pair biform theory expression node intended represent expression context biform theory assertional formula 
formal framework managing mathematics table derivation graph connectors name tuple meaning implication assertional assertional fn 
nn nn assertional computation assertional assertional node represents assertion analogous sequent node imps deduction graph plays role context plays role assertion 
assertional nodes means means hold 
means hold 
kinds derivation graph connectors named implication computation 
table connector tuple consisting kind certain collection nodes 
intended meaning kind connector table 
derivation graph connector analogous inference node imps deduction graph fact inference node represented combination implication connector connector 
computation connector connect nodes related computation 
relationship recorded assertion node 
form restricted 
example equation inequality transitive relation derivation graph pair nite set nodes nite set connectors contain nodes derivation graph intended record web deductions computations 
trees assertional nodes connected rst kinds connectors represent deductions sequences nodes connected computation connectors represent computations 
truth node assertional node form true 
true canonical truth node 
initial derivation graph fn true 
derivation graphs built initial derivation farmer graph applying operators add new nodes connectors derivation graph 
primitive derivation graph operators adding nodes connectors derivation graph 
de ned table ii 
operator takes derivation graph admissible logic objects inputs returns derivation graph obtained adding nite set nodes output nodes nite set connectors output connectors 
output nodes required nodes 
add node simply adds node derivation graph 
strengthen strengthen create new nodes replacing theory node derivation graph extension eliminate implication split conjunction split equation split conditional restructuring operators 
apply apply operators applying theoremoids kind respectively nodes derivation graph 
provide means employ formulas transformers asserted theoremoids biform theories 
notice operators exploit local context position theoremoid applied 
kind theoremoid kind corresponding operator theoremoid apply 
operator de ned sense operator applied derivation graph result derivation graph 
derivation graph admissible initial derivation graph result applying operator admissible derivation graph 

deductions computations fix admissible derivation graph 
fng set assertional nodes deduction pair 




true 

fng 



deduction 



fcg 



deduction 








fn formal framework managing mathematics table ii 
primitive derivation graph operators name input objects output objects add node biform theory expression strengthen assertional biform theory strengthen biform theory true eliminate implication split conjunction fn split equation formulas split conditional position apply true position true true apply position true de ned proof deduction set truth nodes theorem soundness deductions 
admissible derivation graph 
deduction fn 
proof nodes biform theory 
equational computation sequence hn farmer alternating nodes computation connectors 



theorem soundness equational computations 
biform theory admissible derivation graph 
equational computation derivation graphs higher levels base level derivation graph consists set nodes connectors construction application operators 
derivation graph additional levels structure base level 
annotations 
level derivation graph annotated operator applications construct 

tactics 
composite derivation graph operators apply primitive derivation graph operators certain speci ed ways introduced style tactics 
example tactic split conditional negatively applied conditional node apply apply appropriate theoremoid create new node replaced apply split conditional level derivation graph constructed application tactics primitive derivation graph operators applied indirectly tactics 

scripts 
derivation graph script list tactic applications building derivation graph 
serves compact prescriptive representation derivation graph 
scripts convenient storing derivation graphs building new tactics reusing parts derivation graph construction 
proof scripts discussed 
level derivation graph includes derivation graph script records history constructed tactics 
formal framework managing mathematics 
tracking 
derivation graph easily mess incomplete deductions computations 
level partial deductions computations derivation graph theorems produce way tracked derivation graph constructed 

translations interpretations translations transformers connect biform theory 
interpretations meaning preserving translations 
admissible logic biform theory 
translation transformer respects sorts expressions sort de ned sort 
case logics translation normally homomorphism respect syntactic structure logic see 
example equal de ned 
interpretation translation formulas de ned 
words interpretation translation maps theorems theorems see 
translations interpretations powerful mechanism connecting biform theories similar structure 
serve conduits passing information form formulas theory 
translations transport problems conjectures interpretations transport solutions theorems 
translation may preserve meaning interpretation connects theory concrete theory equally theory meaning preserving way 
interpretations enable little theories method mathematical knowledge reasoning distributed network theories applied biform theories 
example 
biform theory monoids interpretations pa see example interpret unit binary operator pa pa respectively 
interpretations enable theorems monoids transported pa 
cases interface mechanized mathematics system formalized biform theory suppose farmer mechanized mathematics systems biform theory interfaces problems solutions passed translations interpretations respectively theoremoid instantiation theoremoid instantiation technique constructing transformational guaranteed construction 
translation suppose transformer residing instance implements function maps dom dom dom 
clearly transformer residing de ned instance 
instance instance 
proposition 
interpretation instance assertional theoremoid assertional theoremoid proposition 
interpretation expressions language de ned 
instance equational theoremoid equational theoremoid describe technique theoremoid instantiation create residing language theory instantiable interpretations prove way equational theoremoid proposition instance appropriate interpretation theoremoid theoremoid instantiation works constructing kinds transformational theoremoids 

theory development ffmm derivation performed top network biform theories connected translations interpretations 
network static 
collection models informal mathematics needs continuously expanded enriched 
ffmm includes facility developing theories provides services formal framework managing mathematics 
create new biform theories 

create new links biform theories translations interpretations 

store derived theorems 

store constructed theoremoids 

add new objects concepts biform theories conservative extensions 
theory development facility biform theories infrastructure developing axiomatic theories partially implemented imps 
consists kinds storage objects collection primitive operations creating modifying storage objects 
section give just brief overview theory development infrastructure ffmm 
admissible logic 
recall atomic expression language expression contains subexpressions 
biform theory 
conservative extension written formulas biform theory object stores development biform theory 
speci cally includes base biform theory current biform theory set derived theorems set constructed theoremoids objects storing translations interpretations theorems theoremoids de nitions pro les see 
de nition pair set atomic expressions equational dom called de ning installed biform theory changing 
result new theory value installation allowed de ned 
de nition means introduce new machinery compromising original machinery 
de ned atomic expression eliminated expressions rewrite rule 
example 
pa stt pa pa biform obtained pa example removing atomic expressions pa pa pa biform theory formulation axiomatic theory pa example 
de nition 

applied times 
pa pa farmer theoremoids pa 
pa equivalent pa pa pa pa pa 
pro le pair set atomic expressions called pro ling installed biform theory changing 
result new theory members satisfy properties expressed 
pro le generalization de nition 
installation allowed de ned 
de nition pro le means introduce new machinery compromising original machinery 
de nition pro led atomic expressions may eliminable 
pro les introduce machinery impossible introduce direct de nitions 
example biform theory real number arithmetic consider pro le assertional pro ling obtained applying predicate atomic expression 
pro le introduces expression denotes square roots unspeci ed 
example pro le introduce biform theory algebra data type consisting collection objects plus set operations objects 
primitive operations creating kind storage object installing theorem theoremoid de nition pro le objects biform theory object result installing theorem theoremoid object theorem theoremoid added derived theorems constructed theoremoids respectively 
result installing de nition pro le object current theory replaced 
replacement appropriate conservative extension primitive operation extending translations interpretations 
current theory biform theory object replaced extension stored translations normally de ned de ned pro led atomic expressions basic solutions problem discussed 
rst solutions extend old translations automatically new translations third solution provide user primitive operation extending translations 
mechanism extending translations advantageous create translation base theory biform theory object extend needed 
reason base theory initial current theory permanently stored formal framework managing mathematics useful theory development operations de ned primitive operations 
examples operations de ned transporting theorems theoremoids de nitions pro les biform theory object creating new biform theory objects instantiating existing biform theory object cases interpretations see 

algebraic processors changing atomic expressions transformer simplifying expressions general biform theory say elds turned transformer simplifying expressions specialized biform theory say real arithmetic 
transformer sound right structure modi ed transformer sound idea notion algebraic processor equational theoremoid specialized interpretation 
algebraic processor pair 
biform theory intended represent class mathematic structures monoids vector spaces partial orders 

equational theoremoid intended simplify expressions encodes properties required theoremoid 
instance interpretation algebraic processor instance 
example 
suppose algebraic processor biform theory commutative semirings additive multiplicative identities natural number exponents 
reasonable simplify expression expression notice rst second sum di erent expressions rst denotes natural number second denotes semiring element 
contains appropriate computational farmer models see section simplify suppose interpretation pa instance 
algebraic processor pa specialization algebraic processor constructor procedure creating algebraic processors algebraic processors 
small collection algebraic processor constructors algebraic processor instantiation construct large variety algebraic processors 
example imps provides instantiable algebraic processor constructors modules vector spaces ring eld partial orders see 
combined simpli ers theories real arithmetic octet arithmetic elds vector spaces real numbers 

computational models domain computation domain short set data structures represents set mathematical elements integers set operations data structures implement mathematical functions addition multiplication 
domains play fundamental role axiom computer algebra system 
fact axiom equipped sophisticated programming language constructing simple domains domain integers complex domains simpler domains domain rational numbers constructed domain integers 
background theory axiom domain implicit 
notion computation model axiom style domain background theory form biform theory 
representation triple 
language expression sort 
possibly nite set data structures 

bijection instance translation representation bijective restriction inverse formal framework managing mathematics example 
nn sublanguage pa see example nn set character strings base numerals represent natural numbers 
nn function nn maps string nn represents nn nn nn nn representation natural numbers 
computational model tuple 
biform theory 

representation 
domain consisting set data structures set operations 

transformational theoremoid uses data structures operations compute values expressions constructed expressions instance interpretation computational model instances respectively 
notice domain example 
recall theory pa stt pa example representation nn nn nn nn example 
nn domain consisting set nn data structures operations adding multiplying members nn de ned data structures operations nn pa nn computational model 
entities similar computational models provided imps see 
rst arithmetic integers second extends rst arithmetic rational numbers 
imps theory real arithmetic 
computational model constructor procedure creating computational models 
expansion axiom concept domain constructor 
simple computational models created constructors take arguments 
complex computational models created farmer constructors take computational models arguments 
example computational model constructor build model polynomials rational coecients model rational numbers 
computational model constructor build model eld quotients model integral domain 

proposed formal framework called ffmm managing mathematics process mathematics knowledge produced process 
claim ffmm meets goals 
model representation 
biform theory simultaneously axiomatic theory algorithmic theory represent collection mathematical models 
properties models speci ed declaratively procedurally 
process facilitation 
mathematical models created explored connected biform theories 
theory development facility provides operations creating biform theories storing biform theory objects 
operations connecting biform theories translations interpretations developing biform theories installing theorems theoremoids de nitions pro les biform theory objects 
biform theories explored derivation facility 
driven application theoremoids derivation combination deduction computation produces theorems 
theorems represent knowledge models theoremoids tools reasoning computing 
mathematics process ffmm divided triad symbiotic processes biform theories created incrementally enriched new language theoremoids 
theorems derived applying theoremoids biform theories 
new theoremoids constructed theorems existing theoremoids biform theories 
mechanization 
discussed ffmm mechanized computer system 
subject entirely separate 
produced computer mechanization ffmm believe intend 
expect borrow heavily implementation ideas employed imps axiom maple mechanized mathematics systems 
view success imps axiom implementations proof concept framework proposal 
formal framework managing mathematics implementation ffmm kernel interactive mathematics laboratory students engineers scientists mathematicians create explore connect mathematics countless ways possible today common mathematics practitioner 
supports full mathematics process equipped endowed mathematics library accessible wide range mathematics practitioners potential revolutionize mathematics learned practiced 

related logical framework system managing logical systems investigating metalogical issues 
large literature design logical frameworks see frank pfenning web guide logical frameworks 
logical frameworks proposed provide services representation logical systems 
implementation logical systems 
interoperation logical systems 
analysis metalogical issues 
ffmm logical framework provides services 
ffmm manages logical systems represented biform theories 
shown ffmm biform theories connected translations interpretations incrementally enriched derivation involve di erent biform theories logic 
logical frameworks deal logical systems deduction biform theories mixed deduction computational 
notion biform theory simple details syntax semantics biform theory underlying logic details derivation problem integrating computer theorem proving computer algebra systems primary challenges mechanized mathematics today 
mechanized mathematics system combines capabilities computer theorem proving system computer algebra system great value wide range mathematics practitioners 
unfortunately historically little communication computer theorem proving computer farmer algebra communities 
researchers europe north america begun pursue ways integrating computer theorem proving computer algebra example see 
general approaches creating integrated system 
computational capabilities added computer theorem proving system 
computation various forms added computer theorem proving systems 
examples include decision simpli cation procedures rewrite rule systems propositional simpli cation binary decision diagrams bdds linear arithmetic generic algebraic simpli cation imps mechanisms applying theorems rules inference lcf style tactics imps imps proof scripts 
second deductive capabilities added computer algebra system 
examples include incorporation logic computer algebra system axiom analytica computer theorem proving system mathematical analysis implemented mathematica 
third computer theorem proving system computer algebra system combined 
examples include systems combining computer theorem proving system computer algebra system frameworks techniques integrating computer theorem proving computer algebra systems :10.1.1.27.2536
fourth system created deduction computation integrated bottom level 
examples include system intended support full process mathematical problem solving including conjecture proving computation framework ffmm proposed 
authors bell canada supporting research 

armando interfacing computer algebra deduction systems 
kerber eds symbolic computation automated reasoning 
peters pp 


barros coq proof assistant manual version 
available ftp ftp inria fr inria coq doc manual dvi gz 
formal framework managing mathematics 
uller kerber agentoriented approach reasoning 
linton sebastiani eds 
pp 


bertoli giunchiglia speci cation integration theorem provers computer algebra systems 
fundamenta informaticae 

boyer moore computational logic handbook 
academic press 

boyer moore integrating decision procedures heuristic theorem provers case study linear arithmetic 
technical report cmp institute computing science university texas austin 

buchberger symbolic computation computer algebra logic 
baader schulz eds frontiers combining systems applied logic series 
kluwer academic publishers pp 


buchberger nakagawa th project progress report 
kerber eds symbolic computation automated reasoning 
peters pp 


project project systems integrated computation deduction 
web site www org 

char gonnet leong watt maple language manual 
springer verlag 

church formulation simple theory types 
journal symbolic logic 

clarke zhao analytica theorem prover mathematica 
kapur ed automated deduction cade vol 
lecture notes computer science 
pp 


computer algebra automated reasoning computer algebra automated reasoning caap project university st andrews 
web site www theory dcs st ac uk info html 

constable allen bromley cleaveland cremer harper howe knoblock mendler panangaden sasaki smith implementing mathematics nuprl proof development system 
englewood cli new jersey prentice hall 

craigen meisels overview 
technical report cp ora 

enderton mathematical logic 
academic press 

farmer partial functions version church simple theory types 
journal symbolic logic 

farmer simple type theory partial functions subtypes 
annals pure applied logic 

farmer theory interpretation simple type theory 

ed higher order algebra logic term rewriting vol 
lecture notes computer science 
pp 


farmer interactive mathematics laboratory 
proceedings st annual small college computing symposium sccs 
pp 


farmer infrastructure reasoning 
mcallester ed automated deduction cade vol 
lecture notes computer science 
pp 

farmer 
farmer proposal development interactive mathematics laboratory mathematics education 
ed cade workshop deduction systems mathematics education 
pp 


farmer set theory mechanized mathematics 
journal automated reasoning 
forthcoming 

farmer guttman set theory support partial functions 
studia logica 

farmer guttman imps updated system description 
slaney eds automated deduction cade vol 
lecture notes computer science 
pp 


farmer guttman nadel thayer proof script pragmatics imps 
bundy ed automated deduction cade vol 
lecture notes computer science 
pp 


farmer guttman thayer little theories 
kapur ed automated deduction cade vol 
lecture notes computer science 
pp 


farmer guttman thayer imps interactive mathematical proof system 
journal automated reasoning 

farmer guttman thayer imps user manual 
technical report mitre 
available imps mcmaster ca 

farmer guttman thayer contexts mathematical reasoning computation 
journal symbolic computation 

farmer transformers symbolic computation formal deduction 
colton martin eds cade workshop role automated deduction mathematics 
pp 


farmer detailed description formal framework managing mathematics 
technical report mcmaster university 
available imps mcmaster ca 

giunchiglia talcott reasoning theories 
journal automated reasoning 

gordon milner wadsworth edinburgh lcf mechanised logic computation vol 
lecture notes computer science 
springer verlag 

gordon melham hol theorem proving environment higher order logic 
cambridge university press 

harrison th ery skeptic approach combining hol maple 
journal automated reasoning 

combining theorem proving symbolic mathematical computing 
campbell eds integrating symbolic mathematical computation arti cial intelligence vol 
lecture notes computer science 

structures symbolic mathematical reasoning computation 
ed disco design implementation symbolic computation systems vol 
lecture notes computer science 
springer pp 

formal framework managing mathematics 
axiom scienti computation system 
springer verlag 

kerber integrating computer algebra proof planning 
journal automated reasoning 

macsyma macsyma mathematics system manual 
macsyma 
mccune otter 
stickel ed th international conference automated deduction vol 
lecture notes computer science 
pp 


monk inference rules local contexts 
journal automated reasoning 

nederpelt geuvers eds selected papers automath vol 
studies logic foundations mathematics 
north holland 

owre rajan rushby shankar srivas pvs combining speci cation proof checking model checking 
alur henzinger eds computer aided veri cation th international conference cav vol 
lecture notes computer science 
pp 


paulson isabelle generic theorem prover vol 
lecture notes computer science 
springer verlag 

pfenning logical frameworks 
web site www cs cmu edu afs cs cmu edu user fp www lfs html 

poll thompson adding axioms axiom system automated reasoning 
technical report computing laboratory university kent 

rudnicki overview mizar project 
technical report department computing science university alberta 

eld mathematical logic 
addison wesley 

project project computer supported mathematical theorem proving research institute symbolic computation risc 
web site www org 

wolfram mathematica system doing mathematics computer 
addison wesley 
