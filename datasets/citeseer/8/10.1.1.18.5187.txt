centrum voor wiskunde en informatica xml benchmark project schmidt waas kersten florescu manolescu carey busse information systems ins ins april report ins issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax xml benchmark project albrecht schmidt florian waas martin kersten daniela florescu ioana manolescu michael carey ralph busse cwi box gb amsterdam netherlands firstname lastname cwi nl propel san jose ca usa propel com mike carey propel com inria rocquencourt le chesnay cedex france ioana manolescu inria fr gmd ipsi 
darmstadt germany busse darmstadt gmd de standardization orts query language xml documents drawing close researchers users increasingly focus attention database technology deliver new challenges sheer amount xml documents produced applications pose data management validation performance evaluation optimization xml query processors upcoming issues 
long tradition database research xml store benchmark project provides framework assess xml database abilities cope broad spectrum di erent queries typically posed real world application scenarios 
benchmark intended help implementors users compare xml databases independent speci application scenario 
benchmark ers set queries intended challenge particular primitive query processor storage engine 
workload propose consists scalable document database concise comprehensive set queries covers major aspects query processing 
queries challenges range stressing textual character document data analysis queries include typical ad hoc queries 
complement research results obtained running benchmark xml database platform 
intended give rst baseline illustrating state art 
acm computing classi cation system logical design data models languages query languages database systems query processing keywords phrases benchmarking database performance semi structured databases 
xml data interchange format penetrating virtually areas internet application programming bringing massive amounts data 
content providers increasingly interested deploying advanced data management systems sites data volume exceeds toy sizes 
complexity challenge attracted attention database research community 
early efforts mainly concentrated schema issues theory organizing data lacking fixed schema incompatible existing technology sight 
xml gained momentum commercial products began appear market development focus research shifted specific technical issues physical 
data break query performance starting determine success failure solutions development 
currently major minor database vendors see bou growing list scrambling leverage existing products rudimentary xml support conversion purely relational data xml documents products provide may need meet new requirements 
new requirements somewhat sketchy differences xml relational object relational data easy grasp implications underlying data store fully understood 
xml definition textual markup language means case rdbms data elements ordered nature string core data type richer data types integers floats user defined data types derived externally provided schema information may may helps avoid excessive expensive coercions data types 
additionally cope tree structure xml documents resulting intricate hierarchical relationships data regular path expressions essential ingredient query languages need evaluated efficiently 
may model relationships exceed limitations tree structures require mapping logics logical oids efficient management 
earlier map wealth new properties existing data models provides undoubtedly helpful guidance prototypes implemented top data object stores standard apis direct access internal workings product drawn valid certain extent effectiveness particular mapping remains unclear 
simple extensions product caused significant performance improvements 
due complexity interaction interdependencies various system components designs obvious advantages disadvantages hard assess putting conclusive test comprehensive quantitative assessment short right benchmark 
dealing design decisions outlined certainly new issue past years database community developed rich tradition performance assessment systems ranging research developments abm oo benchmark cdn benchmark cdn industrial standards family tpc benchmarks gra just mention better know examples 
available benchmarks offers coverage needed geared certain data model flexibility possibilities semistructured query languages exceed existing systems limitations far 
xmark benchmark version described takes challenge features tool kit evaluating retrieval performance xml stores query processors workload specification scalable document database comprehensive set queries 
help users queries intended challenge query processor important primitive query language 
useful number ways place feature wise examination query processors proves beneficial query processor operate variety architectures tends suited different application workloads exhibits special characteristics 
instance xml stores derived relational object relational main memory object oriented database technology textual information retrieval data structures persistent object stores 
different products expected display diverging behavior performance stress tests system architecture 
second benchmark document queries aid verification query processors challenging problem high level query languages introduced 
world mark languages problem equivalence xml documents xml query processors expected output aggravates 
degrees freedom different possible physical representations document see boy attempt tackle introduce combined degrees freedom query execution regarding order set valued attributes different character encodings namespaces experience research done regard output xml query processors equivalent 
third executing benchmark query set exhibits details workflow required incorporate query processor application scenario 
consequently doing benchmark helps users estimate costs deploying system application scenario answer question systems fits best needs 

motivation queries answers machine repository xml workflow scenario xml processing systems usually consist various logical layers physically distributed network 
benchmark results interpretable systems engineering issues concentrate core ingredients query processor interaction data store 
consider network overhead communication costs rmi corba sockets rpc java beans transformations xsl output 
test scenario depicted 
applications run machine 
choice language xquery cfr amalgamation research languages semi structured data xml see bc overview 
process standardization language choice major competitors field 
consider updates little agreement semantics standard defined 
target audience divided groups 
framework help database vendors verify refine query processors comparing implementations 
second customers assisted choosing products providing simple case study pilot project provides essential ingredients targeted system 
researchers lastly provide example data framework helping tailor existing technology xml settings refinement design algorithms 
rest structured follows motivate necessity benchmark xml query processors introduce structure document database 
presenting queries give preliminary results obtained running queries test environment 

motivation existing database benchmarks cover plethora aspects traditional data management ranging query optimization transaction processing 
established techniques store process xml clear semi structured nature data repercussions performance engineering issues impede effectiveness techniques original area 
sequel argue need new benchmark specifically xml query processors 
evolution xml differs significantly evolution relational databases agreed standard early stage accepted supported large community 
imposes top perspective benchmark designer resulting kind thematic benchmark sense provide challenges typical query primitives 
think combination traditional new features xml processing systems results need new quality systems engineering new benchmark 

database description shown data centric documents documents logically represent data structures bou map nicely relational databases see fk object relational databases km clear systems handle efficiently documents text oriented natural language mark interspersed example compare google bp full text search favorite rdbms xml mapping combination 
want give hints different dbms architectures respond xml challenge summarized follows 
textual order xml structures original document incorporated queries feature simple look queries dear systems prepared challenge see queries section 

strings basic data type vary greatly length posing additional storage problems 
type problems arise typing rules query languages tend clash generic string tokens xml 

queries involving hierarchical structures form complicated path expressions especially relationships connection order queried tend require expensive join aggregation operations relational systems 

compound matters loose schema xml documents query formulation tedious user point view 
technically null values blow size database 
user viewpoint specifying long complicated path expressions error prone 
authors know talking 
activities xml schema try problem making data centric documents accessible rdbms reformulating concepts integrity constraints xml context 
solve problems requires additional engineering efforts sacrifices quick easy appeal helped xml gain popularity quickly 
benchmark queries designed address matters specifically 

database description design xml benchmark requires carefully modeled example database behavior queries predictable allow formulation queries feel natural concise challenges 
outline characteristics document closer look technical issues generating documents 
hierarchical element structure nesting elements renders tree structure xml documents 
subsection describe structure document modeled database deployed internet auction site 
main entities person open auction closed auction item category 
relationships expressed exception annotations descriptions take natural language text document centric element structures embedded sub trees semantically belong 
hierarchical schema depicted 
semantics entities just mentioned follows 
items objects sale sold 
item carries unique identifier bears properties payment credit card money order 
seller description encoded elements 
item assigned world region represented item parent 

open auctions auctions progress 
properties privacy status bid history increases time bidders seller current bid default increase type auction dutch featured regular time interval bids accepted status transaction item sold 

database description item regions site africa asia 
closed auctions open auctions people person description category categories reserve description name open auction closed auction edge mailbox mail annotation bidder increase description initial annotation description price homepage name profile income element relationships queried elements 
closed auctions auctions finished 
properties seller person buyer person respective item price amount items sold date transaction closed type transaction annotations bidding process 

persons characterized name email address phone number mail address homepage url credit card number profile interests set open auctions watch 

categories feature name description implement classification items 
category graph links categories network 
entities constitute relatively structured data oriented part document schema regular entity basis exceptions person homepage predictable 
apart occasional lists bidding histories order input particularly relevant 
stark contrast offspring annotation description elements dual nature document centric side xml 
length strings internal structure sub elements varies greatly 
markup comprises lists keywords formatting instructions character data imitating characteristics natural language texts 
ensures database covers full range xml instance incarnations marked data structures traditional prose 
appendix gives impression document showing snippets 
overview connect sub trees 
care taken feature diverse distributions derived uniformly normally distributed variables 
note typed instances xml element point type xml element example interest object refer categories 
generated text generate text bears characteristics natural language text analyzed shakespeare plays determined statistic characteristics text 
generator distribution frequently occurring words shakespeare plays 
incorporate additional characteristics little relevance performance assessment 
believe 
database description buyer seller author watch seller bidder interest person category annotation item closed auction open auction tokenization text compression methods commonly sufficiently assessed text provide 
names email addresses various sources electronically available phone directories care taken preserve important characteristics original material time scramble data names combining different names 
similar techniques avoid clashes existing email addresses forth 
xml constructs xml standard defines constructs useful producing flexible markup justify definition queries challenge directly 
restricted set xml features data generator consider essential xml processing 
generate documents entities notations 
distinguish parsed character data character data assume just string types viewpoint storage engine 
furthermore don include namespaces queries 
restrict bit ascii character set 
provide dtd xml schema information allow efficient mappings 
stress additional information may exploited 
generate document designed implemented document generator called provide scalable xml document database 
obvious requirement capable producing xml document specified eager meet additional demands 
generation xml document platform independent user interested running benchmark able download binary generate exactly document matter hardware operating system accurately scalable ranging minimal document scaling factor zero arbitrary size limited capacity system time resource efficient elapsed time ideally scales linearly resource allocation constant independent size generated document order able reproduce document independently platform incorporated random number generator relying system built random number generators 

document name scaling factor document size tiny mb standard mb large gb huge gb scaling benchmark document basic algorithms statistics textbooks unit implements uniform exponential normal distributions fairly high quality 
assigned elements dtd plausible distribution children observing consistency referencing elements number items organized continents equals sum open closed auctions second provide accurate scaling scale selected sets number items persons user defined factor 
calibrated numbers match total document size slightly mb scaling factor cf 
fig 

tests resulting document size deviate anticipated usually percent 
meeting efficiency goals interesting challenge get created different places straightforward solution keeping sort log id referenced infeasible large documents 
solved problem modifying random number generation produce identical streams random numbers 
way able implement partitioning sets item ids referenced open closed auctions 
current version requires mb main memory produces documents sizes mb gb seconds respectively mhz pentium iii 
detailed description tool 

document context xml ole stands apart importance benchmarks 
prospective standards xquery cfr explicitly designed database data integration languages strictly speaking assume need documents presence database 
little doubt databases help managing large amounts xml data 
previous xml benchmarking efforts br designed application centric multi user workloads include updates bulk operations dispense doing date standard agreement exact semantics updates 
resort interpretation take xquery syntax document site xml literally formulate queries respect single large document committing specific database scenario 
authors experience problems document test environments aware size document may large systems 
data generator additionally offers mode outputs entities file chosen user 
note case modifications document version benchmark may necessary 
example user chooses dtd supply parser controlled id idref declared attributes converted required attributes 
validating parser tries check uniqueness existence ids respectively idrefs 
respect queries changes path expressions assume single document necessary 
changes remain local 
stress solution regarded semantics queries defined section differ matter executed single document collection document 
query semantics document normative 

benchmark queries 
benchmark queries section lists queries benchmark consists 
chose express queries xquery cfr successor quilt crf standardized 
note query set preliminary 
exact match simple query mainly establish simple performance primitive unit help establish metric interpret subsequent queries 
tests database ability handle simple string lookups fully specified path 

return name item id item registered north america 
document auction xml site regions item id item return name text ordered access queries help users gain insight dbms copes intrinsic order xml documents efficient expect dbms handle queries order constraints 

return initial increases open auctions 
document auction xml site open auctions open auction return bidder increase text query evaluates cost array look ups 
note query may harder evaluate looks especially relational back ends may struggle complex aggregations select bidder element index 

return fist current increases open auctions current increase twice high initial increase 
document auction xml site open auctions open auction bidder increase text return bidder increase text complex application index lookups 
case relational dbms query take advantage set valued aggregates index attribute accelerate execution 
queries akin aggregations tpcd gra benchmark 

list reserves open auctions certain person issued bid person 
document auction xml site open auctions open auction bidder id person bidder id person return initial text time stress textual nature xml documents querying tag order source document 
casting strings generic data type xml documents 
queries interpret strings need cast strings data type carries semantics 
query challenges dbms terms casting primitives provides 
especially additional schema information just dtd hand casts occur frequently 

sold items cost 
count document auction xml site closed auctions closed auction price text return price 
benchmark queries regular path expressions regular path expressions fundamental building block virtually query language xml semi structured data 
queries investigate query processor optimize path expressions prune traversals irrelevant parts tree 

items listed continents 
document auction xml site regions return count item evaluation engine realize need traverse complete document tree evaluate expressions 

pieces prose database 
document auction xml site count description count mail count email sum return sum note count aggregation require complete traversal tree 
just cardinality respective relation queried 
note tag exist database document 
chasing integral part xml allow richer relationships just hierarchical element structures 
queries define horizontal traversals increasing complexity 
query optimizer take advantage cardinalities sets joined 

list names persons number items bought 
joins person closed auction document auction xml site people person document auction xml site closed auctions closed auction buyer person id return return count 
list names persons names items bought europe 
joins person closed auction item document auction xml site people person document auction xml site closed auctions closed auction document auction xml site regions europe item item id return id buyer person return name text return construction complex results constructing new elements may put storage engine stress especially context creating materialized document views 
query reverses structure person records grouping interest profile person 
large parts person records repeatedly reconstructed 
avoid simple copying original database translate mark french 

benchmark queries 
list persons interest french markup result 
distinct document auction xml site people person profile interest category document auction xml site people person profile interest category return gender text age text education text income text name text street text city text country text email text homepage text text return fernandez point fms cost generating textual answers creating materialized views may differ greatly 
note require system construct materialized view 
comparing relative costs creating view versus outputting text certainly interesting 
joins values query tests database ability handle large intermediate results 
time joins basis values 
difference queries chasing queries specified dtd may optimized logical oids example 
queries cascade size result set provide various optimization opportunities 
note alternative query formulations operator may 

person list number items currently sale price exceed person income 
document auction xml site people person document auction xml site open auctions open auction initial profile income text return return count 
richer average person list number items currently sale price exceed person income 
document auction xml site people person document auction xml site open auctions open auction initial profile income text return profile income return count reconstruction key design xml dbms mappings determine fragmentation criteria 
complementary action reconstruct original document broken representation 
query tests ability database reconstruct portions original xml document 

benchmark queries 
list names items registered australia descriptions 
document auction xml site regions australia item return description full text continue challenge textual nature xml documents time conduct full text search form keyword search 
full text scanning studied isolation think interaction structural mark essential concepts considered orthogonal query restricted subset document combining content structure 

return names items description contains word gold 
document auction xml site item contains description gold return name text path traversals contrast section try quantify costs long path traversals don include wildcards 
descend deep tree query return query 
queries check existence paths selecting paths predicates 

print keywords emphasis annotations closed auctions 
document auction xml site closed auctions closed auction annotation description parlist parlist text keyword text return 
confer 
return ids sellers auctions emphasis 
document auction xml site closed auctions closed auction empty annotation description parlist parlist text keyword text return missing elements test query processors knows deal semi structured aspect xml data especially elements declared optional dtd 

persons don homepage 
document auction xml site people person empty homepage text return fraction people homepage high query presents challenging path traversal non clustering systems 
function application query puts application user defined functions udf proof 
xml world udfs particular importance allow user assign semantics generic strings go type coercion 

convert currency reserve open auctions currency 
function convert return convert dfl euros document auction xml site open auctions open auction return convert reserve text 
experiments experiences sorting lack schema clauses play role sql ish order group 
query requires sort generic strings 

give alphabetically ordered list items location 
document auction xml site regions item name text return location text 
aggregation query computes simple aggregation assigning person category 
note aggregation truly semi structured includes persons relevant data available 

group customers income output cardinality group 
count document auction xml site people person profile income count document auction xml site people person profile income income count document auction xml site people person profile income count document auction xml site people person empty income return 
experiments experiences benchmark group design activity evaluate progress commercial research settings 
evaluation meant illustrative case study full comparative analysis various systems definitely scope 
experience reported section gathered monet xml internal structure access research vehicle xml processing 
contrasted findings experiments disk relational systems showed similar behavior add fundamentally new insights results reported 
semantics xquery version queries checked sah 
tools run benchmark document available project web site 
include data generator query set mapping tool convert benchmark document flat file may bulk loaded relational dbms mapping similar binary fragmentation described 
derive mappings desirable 
experiments monet xml set translated queries section monet low level executable algebra mil bk techniques described 
due highly fragmented binary data model monet xml mil queries quite lengthy comparison compact xquery representation 
extreme example query binary relations scanned respective full text string gold translated nearly lines mil 
took advantage path summary monet xml provides formulate queries assumed available query formulation time 
numbers measured warm database benchmark document scaling factor dtd schema information 
times measured silicon graphics server equipped gb main memory gb scsi hard disk 
experiments experiences query rp monet xml query ms query ms query ms query ms query ms query ms query ms query ms query ms query ms query ms query ms query min query ms query ms query ms query ms query ms query ms query ms performance impression monet xml scaling factor pentium iii cpus clocked mhz 
installed operating system redhat linux kernel version smp 
benchmark document scaled factor generated indentation 
bulk load mb took seconds 
time includes parsing document mapping relational tables writing tables disk committed transaction 
mapping process monet xml works dtds generates database schema fly 
turn attention running times displayed give preliminary interpretation 
note query repetition factor rp listed indicate query executed environment 
query consists table scan look ups 
monet features main memory kernel operations quite fast incur little data volume 
query mainly supposed establish performance baseline scan goes tuples followed table look ups mapping schemes probably varies 
queries ones provide surprises 
turned parts query plans compute indices quite complex tpcd aggregations require computation set valued attributes determine bidder element index respect open auction ancestor 
complexity query plan higher innocent looking xquery representations queries suggest 
consequently running times quite high 
features predicate implemented theta join aforementioned attributes store global order 
come query tries quantify cost casting operations necessary comparisons 
monet xml cost coercion low respect relative complexity query execution plan ms needs execute 
note character data original document including stored strings cast runtime richer data types necessary queries 
apply domain specific knowledge pre calculation caching casting results 
regular path expressions challenge queries 
monet xml evaluates regular path expression regular expression search path summary monet xml equivalent schema contains sequences element attribute tags encountered 
experiments experiences source document 
surprisingly fast systems access path summary effectively plays role index comes free queries expensive execute 
complicate matters looks non existing paths 
queries implemented joins 
attributes stored strings chasing monet xml amounts executing equi joins strings 
surprised cheap comparison deemed individual elements similarly expensive 
construction complex query results point really put xml processing systems test shows 
path expressions join expression query kept simple bulk lies construction answer set amount mb xml text 
monet xml spends total processing time just constructing answer set comparatively time extracting variables original data 
produced massive amounts output data test ability cope large intermediate results theta joining potential buyers items interest 
theta join produces tuples 
challenge query optimizer pick execution plan allows insights data volume influence query output performance 
monet xml theta join dominates costs 
desirable possibly expensive feature xml stores ability reconstruct document isomorphic equivalent document bulk loaded 
shows 
monet xml needs minutes reconstruct tiny fraction original documents 
basic action performed sort union order relations relevant sub trees large number lookups oids 
obviously monet performance impressive 
experimenting logical oids improve performance 
query continues stress textual side xml executing full text search 
monet xml provide full text indices scan large part database 
scan word execution time data volume involved remaining joins negligible terms processing time 
tried estimate influence long path expression versus short ones 
exactly want help 
table displays traversing path cheap longer paths take significantly time short counterparts avoid unnecessary traversals 
stresses loose schema xml document querying non existing data 
query execution plan computes intersection sets 
queries primarily interest interest establish relative costs function application sorting operations comparing system architectures 
perform favorably binary fragmentation data model incurs little data volume computations easily fit main memory 
aggregations conclude query set combination table scans set difference 
data model allows plan little data volume 
addition tests relational backends evaluating benchmark persistent object store pdom gmd 
note query formulation xquery cfr novices formulate benchmark queries 
short phase getting language problems language 
mention point facilitate query formulation enormously 
query processor able validation path expressions online tell user sequence tags exists database instance great help users quite regularly simple typos path names evaluate empty results 
dbms course decide path expression contains typo issue warning path expression contains non existing tags 
approach query example possibly lead helpful results 
looking forward standardized query language agreed tremendously facilitate exchange ideas interested parties 
want propose simple optimizations applied direct consequence analysis benchmark results monet xml accelerate query execution sacrificing generality 
note optimizations included performance figures 
schema information form lc simplify considerably 
schema created fly monet xml reduce storage requirements query processing time especially inlining collapsing relationships path expression 
storage engine monet collects meta information possible decide paths collapsed sacrificing original semantics document 
storage engines similar information collected creation hash indexes 
achieving hardly need novel technology 
straight forward optimization chasing materialization destination nodes logical oids especially case avoid large scans 
third point replacement generic strings integers appropriate helps eliminate expensive casting operations achieved integrating views intermediate results query optimization done monet project mpk 
think classic gap data centric document centric documents bou hard come generic way high costs reconstructing parts highly fragmented data show 
definitely consider construction specialized indexes costs research topic 

specifications developed xml benchmarking project set queries lessons learned executing workload specification 
benchmark designed top standardization issues xml starting point 
queries try capture essential primitives xml processing data management systems path expression querying null values full text search hierarchical data ordered data coercions data types 
discussed lessons learned running queries research vehicle monet xml 
demonstrated single best generic mapping text documents database instances dividing line lies queries stress textual nature document order constraints reconstruction queries queries stress data centric perspective associative retrievals 
schema information useful schema query optimization especially gives hints document centric characteristics go databases general 
alleviates problem competing design rules schema adhere depending application area 
expect continue evolve 
formally important parts complete application scenario missing lack update specifications prominent 
hope continuing standardization efforts possible incorporate updates 
commonly agreed standards benchmarks need exist 
especially xml world example collaborative efforts 
abm anderson porter schneider 
benchmark 
advances database technology edbt 
international conference extending database technology venice italy march proceedings volume lecture notes computer science pages 
springer 
bc ceri 
comparative analysis xml query languages 
sigmod record 
bk kersten 
mil primitives querying fragmented world 
vldb journal 
bou 
xml database products 
available www com xml htm 
bou 
xml databases 
available www com xml htm 
boy boyer 
canonical xml version 
available www org tr xml 
bp brin page 
anatomy large scale hypertextual web search engine 
computer networks 
bray paoli sperberg mcqueen maler 
extensible markup language xml second edition 
available www org tr rec xml 
br rahm 
benchmark xml data management 
proceedings btw oldenburg 
springer berlin 
cdn carey dewitt naughton 
oo benchmark 
proceedings acm sigmod international conference management data washington may pages 
acm press 
cdn carey dewitt naughton brown gehrke shah 
object relational benchmark 
sigmod proceedings acm sigmod international conference management data may tucson arizona usa pages 
acm press 
cfr chamberlin florescu robie simeon stefanescu 
xquery query language xml february 
available www org tr xquery 
crf chamberlin robie florescu 
quilt xml query language heterogeneous data sources 
international workshop web databases webdb pages 
fk florescu kossmann 
storing querying xml data 
ieee data engineering bulletin 
fms fernandez suciu 
efficient evaluation xml middleware queries 
proceedings acm sigmod international conference management data 
appear 
gra gray 
database transaction processing performance handbook 
available www com handbook contents asp 
km meyer 
xml object relational database systems enhancing structural mappings statistics 
international workshop web databases conjunction acm sigmod pages 
lc lee chu 
comparative analysis xml schema languages 
sigmod record 
mpk kersten 
multi query optimizer monet 
proceedings british national conference databases volume lecture notes computer science lncs springer verlag pages 
patel naughton kaushik 
set containment joins bad ugly 
vldb proceedings th international conference large data bases pages 
apers de 
nested loop join queries oodb 
proceedings th international conference large data bases vldb santiago de chile chile pages 
sah sahuguet 
making mistakes lessons learned 
technical report university pennsylvania 
schmidt kersten florescu carey manolescu waas 
xml store benchmark project 
www org 
schmidt kersten waas 
efficient relational storage retrieval xml documents 
international workshop web databases conjunction acm sigmod pages dallas tx usa 

massive stochastic testing sql 
vldb proceedings rd international conference large data bases pages 
shanmugasundaram tufte zhang dewitt naughton 
relational databases querying xml documents limitations opportunities 
proceedings th international conference large data bases vldb september edinburgh scotland uk pages 

xml schema 
www org xml schema 
appendix snippets benchmark document united states eighteen page lady idle authority monster removes rescue runs peace oak assembly holes patience mirrors master yielded officer embrace fears distinction 
ship internationally see description charges 
mailto com www com graduate school 
