drawing graphs non uniform vertices david harel harel wisdom weizmann ac il vertices graphs appear real applications nonuniform 
circles ellipses rectangles geometric elements varying shapes sizes 
unfortunately current force directed methods laying graphs suitable graphs vertices zero sized dimensionless points 
turns naively extending methods handle nonuniform vertices results serious deficiencies terms output quality performance 
try remedy situation identifying special characteristics graphs offering algorithms tackling 
algorithms viewed carefully constructed extensions force directed methods output quality performance similar 
categories subject descriptors information systems information interfaces presentation computing methodologies computer graphics general terms algorithms design experimentation keywords graph drawing visualization force directed optimization vertex overlaps 
graph structure real world model entity relationship structure entities represented set vertices relationship edges real graphs usually intended comprehended humans usefulness graph depends clarity layout 
achieving clear aesthetic picture graph easy task years researchers motivated seek automated means drawing graphs nicely 
state art surveyed comprehensively 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
avi trento italy copyright acm xxxxx xx xx xx 
yehuda koren yehuda wisdom weizmann ac il dept computer science applied mathematics weizmann institute science rehovot israel central graph drawing problem laying arbitrary undirected graph 
common approach drawing graphs apparently force directed approach :10.1.1.20.5663
algorithms approach consist components 
heuristic force energy model quantifies quality drawing second optimization algorithm computing drawing locally optimal respect model 
practice vertices graphs non uniform 
applications different types vertices depicted different geometric shapes 
vertex graph represents entity associated information name parameter provide information inside drawing vertex 
varying sized circles ellipses rectangles vertices 
unfortunately force directed methods represent vertices zero sized dimensionless points plane naive extensions handle nonuniform vertices seriously deficient terms output quality performance 
algorithms drawing undirected graphs vertices various shapes sizes 
algorithms viewed enhancements generalizations existing force directed methods naive extensions output quality performance comparable originals 

force directed graph drawing force directed approach apparently prevalent attitude drawing general graphs 
algorithms approach consist components 
force energy model quantifies quality drawing 
second optimization algorithm computing drawing locally optimal respect model 
resulting final layout brings system equilibrium total force vertex zero equivalently potential energy locally minimal respect vertex positions 
regarding drawing standard force directed methods draw edges straight line segments issue reduces problem positioning vertices 
outline notable force directed graph drawing 
sections introduce enhancements methods enable deal sized shaped vertices 
spring embedder method spring embedder method earliest viable algorithm drawing general graphs 
proposed eades refined fruchterman reingold 
method graph mechanical collection electrical charged rings vertices connecting springs edges 
vertices reject repulsive force adjacent vertices con nected edge pulled attractive force 
method seeks equilibrium conflicting constraints 
spring methods successful small sized graphs vertices 
kamada kawai method kamada kawai modelled graph system springs act accordance hooke law vertices connected spring rest length proportional graph theoretic distance endpoints stiffness inversely proportional square rest length 
optimization procedure tries minimize total energy system uv length spring length single edge graph theoretic distance kamada kawai method treats aesthetic criteria spring embedder method addresses produces drawings similar quality 
advantage method applied straightforwardly drawing weighted graphs assuming edge lengths reflect weights 
multi scale graph drawing multi scale approach vast improvement technique facilitates drawing larger graphs containing vertices see 
methods consider series abstractions graph called coarse graphs combinatorial structure significantly simplified important topological features preserved 
energy minimization divided coarse graphs way globally related properties optimized coarser graphs locally related properties optimized finer graphs 
result energy minimization process considers small neighborhoods yielding quick running time 

defining problem seeking nice layout graph define mean nice 
known aesthetic criteria graphs relevance demonstrated literature uniform small edge lengths 
dealing vertices longer zero sized points regular criteria hold additional constraints needed prevent overlaps involve vertices vertices overlap 
edges cross vertices 
kind vertices allow 
methods describe adapted easily take care common shape implemented ellipses rectangles 
assume user oriented vertices rotated reflected 
means laying vertex entails deciding location center 
edges chosen straight line standard edges drawn straight line segments connecting boundaries vertices 
actual choice segment implementation offers possibilities segment lies line connecting centers vertices ii shortest straight line segment connecting boundaries 
having adopted possibilities problem drawing graph reduces problem deciding locations vertices 
layout defined follows definition 
layout graph mapping graph vertices dimensional euclidean space vertices points taken location center trivial solutions couple naive methods drawing graphs come mind 
easiest consider graph having conventional zero sized vertices construct nice layout known method scale entire resulting drawing space vertices violating constraints 
method 
important aesthetic criteria achieved 
carried globally edges uniform length long 
simple cases drawing compact look extremely distorted 
stress ability achieve compact picture great importance area efficient drawings essential practical visualization applications screen space valuable commodities 
better approach bound vertices outside circles 
drawing graph circular shaped vertices carried easily simple variant virtually known force directed method increasing length edge lengths radii incident vertices 
details see section call graphs wt graphs 
method quickly produce drawings vertex overlaps 
edge lengths non uniform resulting drawing satisfactorily compact wasted space enclosing circles original vertices 
example applications rectangular vertices long narrow 
intention describing trivial solutions convince reader handle large sized vertices quite easily allowing long non uniform edges 
rest show methods deal large vertices producing compact drawings 

spring methods simplicity underlying principle spring method flexible adapted non uniform vertices redefining forces 
modifications seen prevent vertex overlaps achieving aesthetic criteria original method addressed 
edge lengths short uniform edge vertex overlaps eliminated see section 
strongly believe methods tightly integrate achievement aesthetic issues trying impose constraints way separately address aesthetics constraints trade 
result methods move vertices away considering aesthetic implications action 
elliptic spring method ellipses better circles bounding kinds shapes appear real applications rectangles parallelograms sense deal elliptical vertices 
propose generalization standard spring methods elliptic shaped vertices 
restrict ellipses radii parallel axes 
method uses forces elliptic inverse elliptic force fields related shapes vertices 
forces defined follows elliptical vertices vi vj centers xi yi xj yj radii rx respectively define amount repulsive force centers xi xj yi yj fr rx len ry len vertices adjacent attract attractive force strength fa rx rx xi xj len yi yj len ry intuition want center vi lie inside ellipse center xj yj radii len ry len 
ellipses overlap repulsive force large attractive force small 
adjacent ellipses far away opposite behavior 
weighting constant typically set case adjacent vertices forces cancel ellipses approximately distance len 
resulting layout contains vertex overlaps increase value len vertices placed apart 
may done automatically focused locally overlapping vertices 
find layout optimization method fruchterman reingold initial configuration vertices placed randomly frame final configuration achieved predefined number sweeps 
sweep vertex moves direction determined total effect forces exerted 
amount displacement decreased iteration decreasing temperature 
method applied graphs zero sized vertices setting radii achieves results comparable known spring methods 
call algorithm elliptic spring method generalizes traditional spring approach shaped vertices 
exhibits results elliptic spring method demonstrates flexibility algorithm allocating necessary area vertices achieving aesthetic layout 
graphs structure different vertex sizes 
various statistics regarding results table 
modified spring method alternative approach adopting spring embedder needs take distance vertices shortest distance boundaries centers 
consequence redefine strengths forces fruchterman reingold method fa lb len fr len max lb lb shortest distance boundaries small constant 
overlap lb 
constant typically set 
direction forces centers gravity vertices 
forces cancel lb len 
repulsive force dominant subsumes attractive force vertices tangential overlap 
prevent overlaps vertices close strong repulsive force 
call algorithm modified spring method easily applied rectangular vertices 
practical problem may arise implementing method various shapes ellipses computation shortest distance boundaries costly especially considering inside innermost loop algorithm 
overcome problem devising variant algorithms measure distance boundaries vertices segment connects centers gravity 
distance defined vertices overlap straight line 
shows layouts rectangular versions graphs produced modified spring method 
comparison table provide various statistics regarding results modified spring method msm elliptic spring method esm applied elliptic vertices 
comparison give statistics fruchterman reingold method frm applied graphs dimensionless vertices 
graph give number sweeps needed achieving aesthetic picture 
actual running time pentium iii mhz pc provided 
see running time esm slightly better msm 
attributed fact forces esm milder easier optimize 
forces esm computed efficiently 
clear running time frm faster msm esm 
discuss point section 
regarding output quality graph supply average edge length avglen standard deviation edge length stddev ratio stddev avglen 
ratio normalized measure uniformity edge lengths independent edge lengths 
results obvious msm superior esm regarding uniformity edge length 
uniformity edge lengths msm comparable frm sense msm optimal generalization frm handle non uniform vertices 
advantage msm esm ability handle directly variety shapes esm approximate ellipses 
clear winner msm esm 
sections shall describing better methods central role methods described final beautification nice picture 
kind msm may advantage 
paradox convergence slow 
relatively slow convergence rate esm msm comparing frm attributed flaw design fundamental problem 
apparently algorithm deals sized vertices doomed slow convergence cost function prevent overlap vertices 
reason vertices take significant fraction drawing area space maneuver seeking nice layout slows convergence considerably 
illustration see vertices blocked achieving proper place prevention vertex overlap 
unavoidable tradeoff ability prevent vertex overlaps convergence rate 
paradoxically get robust drawing algorithm aspiration nice layout contradict need fair convergence rate trapped easily local minima 
want kind problem may arise common graph graph graph graph graph square grid depth sierpinski results elliptic spring method graph graph graph depth sierpinski graph graph square grid results modified spring method graph name method sweeps time sec 
average edge standard deviation stddev avglen length avglen lengths stddev msm esm frm msm esm frm msm esm frm msm esm frm msm esm frm sierpinski msm depth esm frm msm grid esm frm table statistics regarding results modified spring method msm elliptic spring method esm fruchterman reingold method frm 
running times pentium iii mhz pc rounded 
msm esm shorter edges preferable yield compact picture 
frm average edge length scaling measure 
desired layout bad local minimum cases cost function tries deal rich set aesthetic criteria 
remarkable example cost function tries minimize edge crossings 
experimenting simulated annealing method extracting edge crossing component energy function convergence rate faster :10.1.1.20.5663
fortunately case vertex overlaps way get forcing constraints gradually 
stage set things cost function weak completely prevent overlaps 
drawing process proceeds coarse structure picture cost function fully prevents overlaps 
principle method described section going want describe kamada kawai method generalized incorporate arbitrarily sized vertices 

iterative kamada kawai method section introduce method finds nice layout graph arbitrarily sized vertices iteratively finding nice layout related weighted graph conventional dimensionless vertices 
definition 
layout graph denote length segments straight line connecting inside drawing area vertices define suitable metric vertices layout 
definition 
graph layout define weighted graph weighting function len 
metric defined graph theoretic distance vertices graph len constant chosen attempt approximate desired uniform edge length independent shape placement vertices 
notice generalization graph theoretic distance expresses fact vertices non zero sizes length path measured edges account appropriate segments pass vertices 
heuristic heuristic nice drawing relates isometry euclidean metric metric precisely position nice layout minimizes energy function euclidean distance normalizing factor 
call heuristic generalized kamada kawai 
optimization method optimization method propose consist incrementally improving sequence layouts follows graph iteration iteration iteration iteration time sec rounded grid grid sierpinski depth table convergence rate iterative kamada kawai method initial layout random better choice described section 
xi layout minimizes energy function xi xi xi xi minimization carried optimizing vertex separately newton raphson method exactly done executed classical method kamada kawai weighted graph see details 
process stops expect event happen iterations explain 
satisfactory coarse global solution exist distance far vertices sensitive changes layout important point discussed detail section far vertices approximation final distance 
means reasonable global rendition final picture 
global structure nice expect angles vertices close final values 
angle pair vertices determines function approximation final distance 
expect second approximation optimized close optimal 
experimental results table help confirm 
summarize number operations iterations 
number reversely indicates quality layout previous iteration 
seen significant part carried iteration cases second iteration devoted merely final improvements 
method call iterative kamada kawai method deals aesthetics deals vertices take part drawing area 
convergence fast 
process converges expected iterations cost slightly regular kamada kawai method performance vastly improved multi scale techniques see subsection 
previous methods prone vertex overlaps 
main reason repulsive force linear weaker inverse squared forces spring embedder methods 
reason spring embedder methods neglect far away vertices 
involves global considerations may forgo local considerations mean violating constraints 
defined cost function energy 
implicitly defined underlying forces derivatives conform hooke law linear spring length 
phenomenon relaxed adjusting constants kv give higher priority relations close vertices 
layout violates constraints increase constant len locally focused method improve layout solve local problems high speed 
describe related method section 
presents layouts graphs shown previously produced 
layouts achieved iterations iterations improve results 
graph provide average edge length avglen ratio standard deviation edge lengths average length stddev avglen 
ratio normalized measure uniformity edge lengths 

global layout reduction weighted graphs section idea method previous subsection show problem drawing graph arbitrarily sized vertices reducible problem drawing restricted kind weighted graph equivalently problem drawing graph circular vertices 
argue isomorphic graphs large matching sets vertices similar size drawn approximately 
difference drawings lie local phenomena include violation constraints 
expect differences local arrangements compensate considers larger larger portions drawing converging average 
reduction carried substituting non point vertices circles related sizes equivalently adjusting edge lengths way shape large clusters vertices remain 
fortunately drawing new graphs carried modifying virtually force directed method 
definition restricted kind weighted graph want reduce problem similar construction previous section definition 
wt graph structure graph len constant 
define weight edge len 
may think graph vertices circles radius important benefit reduction able show global structure graph 
simplicity assume optimal layout respect fixed set aesthetic criteria accepted force directed algorithms 
term layout nice 
definition 
layout local change layout respect distance vertex layout globally nice respect local change nice layout respect want find particular weight function result graph similarly sized clusters definition 
vertex denote length line segment angle connecting center point boundary 
example ellipse radii tan tan avglen stddev avglen stddev avglen stddev avglen stddev avglen avglen avglen avglen graph graph graph graph avglen stddev avglen stddev avglen stddev avglen avglen avglen graph square grid depth sierpinski definition 
uniformly distributed 
denote expected value 
example ellipse radii shown inequalities equalities chosen substitute ellipse circle area radius 
rectangle sides length respectively ln reduction sin arctan sin arctan results iterative kamada kawai method sin arctan ln sin arctan problem finding globally nice layout graph non uniform vertices reduced problem drawing wt graph 
way supporting claim consider heuristic 
expectation probability matching paths length respect metric def 
grows number vertices path 
vertices far considerations account heuristic graphs exactly 
means differences local lie relationships close vertices drawn closely possible 
nice layouts wt graphs achieved algorithm capable drawing general weighted graphs kamada kawai example 
spring embedder methods suitable drawing general weighted graphs 
draw general weighted graph restricted version wt graph 
spring embedder methods adapted drawing making ideal distance vertices non uniform 
accordingly strengths forces fruchterman reingold method changed ku distance vertex centers ku correlated 
improve iterative kamada kawai method way 
basing initial metric random layout define graph theoretic distance vertices def 

way better approximation final metric 

combined method consequence previous section argue divide problem finding nice layout graph arbitrarily sized vertices complementary problems 
consists finding globally nice layout second optimizing layout locally 
constraints section refer small areas drawing address local optimization problem 
problems advantage drawback 
problem finding globally nice layout advantage reduced problem drawing wt graph special constraints solved quickly familiar methods large graphs 
hand final optimization problem deal small number vertices rigorous albeit slow methods 
try exploit observations 
combined method 
constructing globally nice layout kamada kawai method finding nice layout 

local beautification modified generalized spring method low temperature dozen sweeps improving result step 
remarks step method drawing wt graphs applied 
example large graphs drawn multi scale methods 
see subsection improve speed step considering small neighborhoods time 
leads significant performance gain graph large 
find combined method best methods 
integrates results nicely satisfy constraints efficiency operation 
step constructing globally nice layout takes dominant fraction running time 
step implemented algorithms drawing graphs dimensionless vertices 
speed combined method close methods draw graphs dimensionless vertices 
contains layouts previously shown graphs produced combined method 

edge vertex overlaps combined method section general way propose solve problem addresses 
method properly deal second constraint preventing overlaps vertices edges 
fortunately typical outputs methods need worry encountering overlaps claim 
denote length longest edge 
drawing contains edge vertex overlaps distance boundaries vertices 
proof 
contradiction 
consider typical case edge vertex intersection vertices vertex intersects edge see 
suppose related layout satisfies condition claim 
divide edge segments segment connecting boundaries length luv segment passing inside length lv segment connecting boundaries length lvw 
clearly length luv lv lvw 
get luv lvw layout satisfies condition claim know distance boundaries vertices max len 
luv lvw 
substituting results contradicting fact maximal edge length 
lvw lv luv typical vertex edge crossing consequence claim fulfilling aesthetic criteria drawing algorithms clearly seek attain implies edge vertex overlaps uniform edge lengths 
distance non adjacent vertices longer uniform edge length 
reason long edge drawn shortest line segment connects vertices boundaries condition claim equivalent requiring ratio maximal edge length minimal edge length implies distance non adjacent vertices half maximal edge length implies 
practice aesthetic criteria uniform edge length adjacency closeness fully achieved expect layout strives comply criteria deviation lengths edges large edges rarely intersect vertices 
cases edges intersect vertices nice dedicated local beautification step eliminate cases overlap edges vertices 
nice drawing need local changes edges short single edge overlap single vertex 
important final step include aesthetics issues ruin aesthetic properties achieved 
candidate method simulated annealing graph drawing :10.1.1.20.5663
simulated annealing general stochastic method optimizing energy functions include discrete terms explicitly punish overlaps 
input layout close optimal simulated annealing quickly find overlap free layout 
possibility add repulsive forces vertices edges really act vertex pair adjacent vertices 
details 
implemented forces believe efficient 
exist edge vertex intersections give straight line edges draw edges curves bypassing vertices 
routing edge relatively easy typically bypass single vertex 
edge routing algorithm may 
edges drawn straight line segment connects centers treat length approximation distance adjacent vertices 
avglen stddev avglen stddev avglen stddev avglen avglen avglen avglen stddev avglen time sec time sec time sec time sec graph graph graph graph avglen stddev avglen stddev avglen avglen avglen stddev avglen time sec time sec time sec graph square grid depth sierpinski 
edge length considerations reader noticed algorithms parameter len reflects desired edge length 
parameter plays important role distinguishes graphs large vertices standard ones 
laying standard graph edge length significance matter scaling picture 
laying graph large vertices situation complicated edge lengths sizable entities picture desired length depend sizes vertices length inherent factor resulting layout 
examples algorithms results clarify point shows layouts graph 
length edges equal units radius circle unit perfectly symmetric result 
average length edges shorter units badly symmetric layout 
reason different results constant len 
value len small algorithm crowded vertices areas negative impact final layout 
illustrates case edges short surrounding circle vertices layout large enclose large interior vertices resulting non planar layout 
problem optimizing edge length problem minimizing edge length yields intuitive picture 
incorporated observation toolkit algorithms program search optimal edge length running substantial methods described various edge lengths 
program initializes edge length large value decreases binary search bad occurs results combined method short edges may conflict symmetry short edges may conflict planarity loss important aesthetic criterion planarity uniformity edge lengths violation constraints 
iteration search initialized result previous iteration converges quickly 
notice initialization dimensionless vertices equivalent setting infinite edge length 

related various changes force model classical force directed methods handle vertex overlaps introduced papers 
changes related spring embedder 
best knowledge heuristic section generalization kamada kawai energy handle non uniform vertices 
mentioned changes 
forces weak reserve wasted area vertices prevent overlaps 
hand forces strong field tenses tightly vertices convergence slow 
alternative approach developed interesting gansner north 
method carried phases 
phase draws graph algorithm regardless vertex shapes 
second phase removes overlapping vertices iteratively constructing voronoi diagram vertex centers sites moving vertices centers voronoi cells 
needed surrounding bounding box enlarged giving area drawing 
process ends overlap 
third phase draws edges smooth curves avoid overlaps 
third phase absent method may helpful 
independent previous phases incorporated method post processing stage 
regarding stages think approach advantageous explain 
voronoi diagram solely vertices centers movement vertices second phase treat vertex shapes achieve layout compact 
iterative movement succeed preventing overlaps bounding box drawing enlarged equivalent global possibly wasteful growth drawing area increasing distances nonoverlapping vertices 
example compare results graphs figures reproduced scaled 
intentionally set parameters minimize drawing area 
seen results occupy space 
results pleasing aesthetically compared results 
space results comparable 
brings advantage approach 
problem divided parts solely responsible aesthetics responsible satisfying constraints knowing aesthetics 
fully agree divide conquer strategy adopted accelerates running time think correct division different division global aesthetics local aesthetics 
division built parts enrich aware aesthetic issues 

investigated problem drawing general undirected graphs arbitrarily sized vertices attempted formulate analyze special issues arise tackling problem 
algorithms varying speed quality laying graphs suggested 
graph graph results gansner north gn application known methods yields non aesthetic pictures hand careless extension cost function leads unsatisfactory convergence time 
final methods smooth extensions methods drawing graphs dimensionless vertices sense worse methods terms speed output quality 
fact suggested fast reduction problem drawing graphs arbitrarily sized vertices problem drawing restricted kind weighted graph solved small changes force directed method aware 

davidson harel drawing graphs nicely simulated annealing acm trans :10.1.1.20.5663
graphics 
dobkin gansner koutsofios north implementing general purpose edge router proceedings graph drawing lncs pp 

di battista eades tamassia tollis algorithms visualization graphs prentice hall 
eades heuristic graph drawing congressus numerantium 
fruchterman reingold graph drawing force directed placement software practice experience 
gansner north improved force directed layouts proceedings graph drawing lncs pp 

harel multi scale method drawing graphs nicely discrete applied mathematics 
harel koren fast multi scale method drawing large graphs proceedings graph drawing lncs pp 

kamada kawai algorithm drawing general undirected graphs information processing letters 
kamps read constraint spring model algorithm graph layout proceedings graph drawing lncs pp 

numerical optimization approach general graph drawing ph thesis carnegie mellon university 
wang miyamoto generating customized layouts proceedings graph drawing lncs pp 

