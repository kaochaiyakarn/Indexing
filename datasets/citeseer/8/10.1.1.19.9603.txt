infrastructure pervasive computing challenges karen henricksen indulska rakotonirainy school computer science electrical engineering university queensland distributed systems technology centre email karen csee uq edu au dstc edu au mobile embedded computing devices pervasive obvious nature interactions users computers evolve 
applications need increasingly autonomous invisible placing greater reliance knowledge context reducing interactions users 
applications cope highly dynamic environments resources network connectivity software services frequently vary time 
presents vision pervasive computing enumerates software engineering challenges involved realizing vision 
evaluates current state research presents agenda investigations pervasive computing 

vision computing landscape evolve environment computers autonomous devices provide largely invisible support tasks performed users 
networked computing devices proliferate landscape embedded objects ranging home appliances clothing users longer tethered single computing device 
nature devices change form augmented environments physical world sensed controlled way merged virtual world 
norman suggests computing devices specialized purpose device designed solve narrow set defined interrelated tasks 
applications greater awareness context able provide intelligent services reduce burden users direct interact applications 
context application may include information characterize situation entity entity person place object considered relevant interaction user application including user applications 
applications resemble agents carry tasks behalf users exploiting rich sets services available computing environments 
addresses research issues associated vision computing landscape 
structure follows 
section presents assumptions pervasive computing environment 
section describes requirements challenges associated vision section presents survey existing approaches evaluates respect requirements identified section 
section describes agenda research pervasive computing section presents concluding remarks 

assumptions requirements pervasive computing infrastructure centered high level conceptual model consisting devices users software components user interfaces 
distinction software components user interfaces important 
software components programming units dynamically composed form complete applications user interfaces conceptual entities responsible interaction user may distributed multiple software components devices 
remainder outline software engineering issues associated components model 
important concerns pervasive computing security privacy communication infrastructure network protocols pans sensor networks energy efficiency fall outside scope reported funded part operative research centre program department industry science tourism commonwealth government australia 

discussion communication issues pervasive computing see advocate approach data centric networking arnold describe alternative approach undirected content routing 
pervasive computing landscape involve vast numbers component types 
scalable supporting infrastructure required order enable dynamic discovery software components information dynamic interconnection components sensing interpretation dissemination context mobility adaptation components rapid development deployment large numbers software components user interfaces 

challenges component types conceptual model pervasive computing challenges place requirements supporting infrastructure manner software components user interfaces constructed 
challenges characterized section 
devices device related challenges addressed pervasive computing infrastructure wide differences heterogeneous device types problems caused device mobility 
device heterogeneity 
believe heterogeneity computing systems disappear increase range computing devices widens 
devices pervasive computing environment include sensors actuators mediate physical virtual environments embedded devices objects watches shoes home office appliances videos telephones mobile devices handheld organizers notebooks traditional desktop machines 
heterogeneous devices required interact seamlessly despite wide differences hardware software capabilities 
require infrastructure maintains knowledge device characteristics manages integration devices coherent system enables arbitrary device interactions example mobile phone desktop workstation 
device mobility 
mobility introduces problems maintenance connections devices move areas differing network connectivity handling network disconnections 
protocols wireless networking handle problems mobility routing handovers problems solved network level require knowledge application semantics 
role computing infrastructure cooperate applications order perform tasks related device mobility management replicated data cases disconnection 
software components responsibility pervasive computing infrastructure respect applications includes supporting application requirements context awareness adaptation mobility distribution interoperability facilitating rapid development deployment software components providing component discovery services providing scalability 
section addresses challenges involved meeting requirements 
mobility distribution 
users mobile able exploit capabilities devices simultaneously mechanisms required enable mobility distribution software 
mechanisms largely transparent component developers concerned program data migration synchronization coordination distributed components 
support mobility need go current support code migration provided platforms java virtual machine jvm run time migration heterogeneous execution environments required 
similarly support distribution need surpass provided platforms corba offer transparency distributed communication typically address mobility synchronization coordination 
context awareness 
invisibility applications accomplished part reducing input users replacing knowledge context 
contextaware software components exploit information activities user engaged proximity devices services location time day weather conditions 
knowledge context required enable adaptation changing environmental conditions changing bandwidth input output devices brought mobility 
infrastructure pervasive computing support context awareness facilitating gathering information sources sensors resource monitors performing interpretation data carrying dissemination contextual information interested parties scalable timely fashion providing models programming context aware applications 
challenging aspect interpretation involves steps integration data different sources example combining height horizontal position dimensional position inference example bob meeting room alice meeting room meeting bob alice place prediction context history resolution inconsistencies context data different sources provision estimates accuracy contextual information 
adaptation 
adaptation required order overcome intrinsically dynamic nature pervasive computing 
mobility users devices software components occur leading changes physical virtual environments entities 
applications highly dynamic users requiring support novel tasks demanding ability change requirements fly 
role infrastructure pervasive computing facilitate adaptation may involve adapting individual software components reconfiguring bindings components adding removing substituting components 
adaptation may done application aware application transparent manner described noble 
dynamic adaptation involve complex issues managing adaptation software components simultaneously applications different possibly conflicting requirements maintaining consistent external view component behavior evolves time 
interoperability 
today application developers wide range programming models languages development environments foresee heterogeneity continuing particularly range uses computing technology expands 
infrastructure pervasive computing support diverse types software component 
infrastructure required integrate software components may reside fundamentally different environments home office computing environments compositions successfully interact cooperate achieve common tasks 
applications pervasive computing environments required respond novel tasks situations applications increasingly formed dynamically available software components 
require dynamic interoperability component level addition interoperability overcomes heterogeneity environment components 
components need capable dynamically acquiring knowledge interfaces behavior order learn interact previously unknown components 
component discovery 
issue discovery software components addressed various research areas 
open distributed computing resource discovery supported type management repository maintains descriptions service interface types trader aware instances service types 
resource discovery addressed network directory protocols ldap technologies jini bluetooth 
problem resource discovery solved differently domains main challenge pervasive computing environments characterized heterogeneity integrate different approaches single scalable resource discovery system mapping requests resource discovery domains 
development deployment 
number diversity software components required pervasive computing environments necessitate methods rapid development deployment 
rapid development part enabled infrastructure obviates need application developers concerned tasks adaptation context gathering management resource discovery distribution management communication distributed application components 
rapid development specialized applications agents enhanced development special purpose languages enable applications specified high level abstraction 
attempts create languages underway example xml mobile document application language modal developed ibm specifying small document applications information appliances 
infrastructural support rapid application deployment achieved provision execution environments applications placed regard configuration adaptation 
rapid deployment applications distributed environments supported limited fashion platforms jvm dynamically load execute programs 
platforms meet needs heterogeneous environments require support broad range component types scalability dynamic configuration adaptation components 
scalability 
features pervasive computing increasing ubiquity devices software 
infrastructure interactions components software services provided pervasive computing environment scalable 
powerful software platform scalable fault tolerant distributed components built essential 
platforms developed example ninja service architecture discussed section 
users users pervasive computing environments mobile computing sessions distributed range devices 
infrastructure role respect users maintain knowledge context manage tasks related mobility 
context 
infrastructure maintain context data related users including capabilities preferences current activities active computing sessions 
uses user related context include allowing applications provide adaptation user requirements enabling amount input applications require users reduced 
example knowledge user engaged driving car application ensure interaction carried speech interface order enable user focus road 
information users computing sessions including details applications devices applications reside manage application migration adaptation frequently occur user mobile 
discussed section 
mobility 
user mobility devices supported enabling automated migration new location application components 
tasks identifying need application migration carrying migration described section ideally performed computing infrastructure manner migration transparent possible applications concerned 
user interfaces users pervasive computing environments demand ubiquitous access computing applications create requirement universally available user interfaces 
device heterogeneity introduce requirement user interfaces highly adaptable 
diminishing amount user interaction applications brought part increasing ratio applications people changing nature interactions brought computing situated mobile novel situations mandate creation new types user interfaces 
universal interfaces 
need universally available user interfaces create requirement new methods programming user interfaces assumptions available input output devices 
gui interfaces designed screen pointing device keyboard longer broadly useful computing environments devices novel input output mechanisms example touch screens gesture recognition increasingly common 
order provide scalable support universal interfaces necessary application programmers write generic interfaces allow semantics user interaction specified rendering input modalities 
early efforts area emerging modal enables graphical user interfaces specified independently platform instantiated regard context including user preferences execution time 
adaptation 
user interfaces pervasive computing environments highly adaptable order respond changes available input output devices caused mobility changes context application example user switches working desk driving car novel application behaviors created dynamic fashion available components 
challenges providing user interface adaptation lies ensuring adaptation preserves consistent view application 
user uniform mental model application regardless user interacting speech interface graphical 
consistent adaptation particularly challenging interaction paradigms completely different 
example interactions gesture interfaces occur continuous period interactions mouse driven interface occur discrete points time difficult map forms input 
challenge lies dynamically coordinating heterogeneous collections input output devices form single user interface example control interface video conferencing system formed user pda input device videoconference screen output device 
usability 
user interfaces pervasive computing carefully designed factors mind 
ergonomics interface designed keep user attention focused task hand peripheral matters interface distracting 
second user interface rewarding enjoyable 
third user interface allow novel types interaction common computing tasks increasingly ubiquitous delegation tasks provision guidance software agents 
user interfaces designed ordinary people just technologists 
challenge 
discussion existing approaches described classes challenges involved realizing pervasive computing 
summarized leftmost columns table 
challenges partially addressed existing research sample surveyed evaluated section 
discussion partitioned primary aims research efforts note overlaps exist categories notably service platforms appliance environments 
context models issue 
support support device heterogeneity devices support device mobility 
support software components management application mobility distribution support context aware components support adaptation support dynamic interoperability components support component discovery support rapid component development deployment support scalability 
support management user context users support user mobility 
support user interfaces support universal interfaces management user interface adaptation support usability context models developed support context aware adaptive systems applications 
primarily address challenges table providing context representation interpretation dissemination 
sentient computing project concerned supplying context information applications particular focus location information 
location mobile objects people equipment tracked devices known bats successor earlier active badges communicate base stations ultrasound 
context information gathered resource monitors track resources cpu memory bandwidth 
context associated logical model physical world 
model real world entities table 
primary areas focus context models service platforms appliance environments pervasive computing environments captured objects types names capabilities properties including static dynamic context 
objects stored persistent database queried corba proxy 
additionally applications receive notifications location related events spatial monitoring service performs interpretation location data detects important events defined containment rules 
drawbacks sentient computing framework focus location 
framework provides interpretation event notification location changes support types context limited ability query information proxy server 
order support rich context requirements pervasive computing software means apply context interpretation arbitrary types context required 
hewlett packard cooltown project proposes webbased model context 
model entities people places things web representations retrieved url 
entity web representation captures static dynamic aspects context including relationships entities sets services associated entity 
primary aims model enable adaptation web content user context 
potential uses framework broader 
location awareness concept space 
beacons wirelessly transmit urls corresponding spaces enabling devices near beacons discover access local spaces 
spaces accessed portals responsible providing access control gateway space services 
space manager performs tracking devices located space point time generation dynamic web pages reflect current context 
cooltown context model limitations 
address means specifying context allows arbitrary web descriptions renders machine processing context difficult 
additionally interpretation context subscription context events outside scope model 
sentient computing cooltown projects context toolkit project focuses programming context context representation 
context toolkit aim providing abstractions separating gathering processing context context 
toolkit comprises types component context widgets acquire context data sensors interpreters perform processing context data abstracting high level information person location raw location coordinates aggregators combine context data multiple sources 
carried context date adequate satisfy requirements pervasive computing 
ideas context modeling sentient computing cooltown approaches context processing context toolkit united scalable framework better programming models context aware applications support rich types context awareness adaptation created 
service platforms service platforms typically aim facilitate rapid creation deployment services challenge table offering dynamic service discovery including ability clients learn capabilities services partially addressing 
platforms address issues scalability adaptation 
jini service framework java rmi supports flexible easily administered environments services added removed dynamically 
offers service model components infrastructure services distributed environment programming model distributed services set system services including lookup service clients locate required services 
moca jini aims provide dynamic service environment focuses satisfying requirements mobile computing environments 
moca provides dynamic service discovery limited forms adaptation changes caused mobility disconnection mobile network support device heterogeneity location transparent access services 
framework consists components reside mobile device service registry repository information available services set core services provide local file caching file loading application management 
moca model locating service discovery essential services mobile device designed disconnected operation mind 
unfortunately model places considerable resource demands mobile device rendering framework unsuitable extremely resource poor devices 
jini moca address service provision relatively small service environments ignore scalability 
ninja service framework contrast designed large scale internet services 
provides service platform delivers scalability fault tolerance distribution composability services 
services written java jini moca defined programming model 
services executed top vspace platform cluster computing environments known bases 
dynamic deployment service performed uploading service base 
service discovery supported hierarchical arrangement service discovery services 
addition service platform ninja offers adaptation meet needs heterogeneous client devices 
adaptation performed active proxies lie internet server client overcome problems disconnection limited bandwidth limited processing capacity client device disparities protocols data formats clients servers 
ninja able address challenges 
ninja moca lesser extent jini satisfy requirements pervasive computing issues remain scopes including context awareness user user interface issues 
appliance environments aim models appliance computing support interoperability collections appliances 
havi standard home appliances designed consortium industry players appliance market consisting set apis services standard communication 
havi primary goal providing dynamic service environment software components discover interact services closely resembles goals service frameworks jini 
havi provides mechanisms devices discover query control appliances home network provides system services message event transfer 
application interfaces specified programming language independent idl applications programmed variety languages java language choice applications require portability device controllers uploaded executed range devices 
havi supports universal appliance controls form java applets 
control applets loaded appliances device employed user remote control 
provides user uniform access appliance regardless device control 
universal user interfaces addressed ibm research project aiming enable user employ single pda device called universal information appliance interact services 
java applets provide remote interfaces ibm approach relies modal new high level application user interface description language xml 
modal applications uploaded dynamically user device corresponding services tailored user device preferences 
modal applications supported infrastructure comprising modal engine execution environment applications similar purpose jvm local database responsible storing data user preferences passwords communication middleware shared tuple space tspaces 
benefits communication model offers distribution transparency support range interaction types including event stream interactions removes need resource discovery 
unfortunately communication distributed tuple spaces scale large systems remains demonstrated unsuitable invisible computing environments 
primary challenges addressed ibm universal information appliance infrastructure havi dynamic interoperability components dynamic component discovery 
additionally address provision appliance interfaces universally available regardless computing device 
consider graphical user interfaces pervasive computing demand broader range interface types 
pervasive computing environments section surveys broadly addresses pervasive computing goal providing anytime computing decoupling users devices viewing applications entities perform tasks behalf users 
numerous ongoing projects area including pima aura 
pima founded idea application model pervasive computing decouple application logic details specific run time environment specific services user interface renderings 
application functionality modeled generic fashion tasks sub tasks joined navigation mechanisms 
pima project ongoing research thrusts 
include creation application development environment supports application model described challenge construction service environments provide applications access local services 
pima aims address application adaptation including rendering specific devices dynamic application determining split functionality client server execution time context 
pima aims create mechanisms allow applications learn interact previously unknown services execution time 
aura pervasive computing project successor earlier coda odyssey projects adaptation 
pima aura proposes programming model task computing 
model tasks viewed compositions services 
tasks services explicit representations 
services described virtual service types define functional state configuration interfaces dependencies services 
virtual service types related inheritance composed form new virtual services 
tasks toplevel compositions services specified flows decompose tasks steps subtasks primitives actions carried services 
tasks instantiated protocol responsible gathering information available services selecting suitable services carry tasks binding performing configuration initialization services 
coordination protocol manages plugging services response resource changes 
tasks managed third protocol responsible task migration obtaining consistent snapshots task state managing replication consistency 
pima aura addresses development deployment applications application adaptation dynamic service discovery 
project contrast pima aura primarily addresses issues infrastructure software development 
group proposes data centric networks approach active networks data packets responsible traversing network obtaining required resources inside network 
group considering infrastructural issues service discovery proxy architectures support devices interest applications location tracking objects gathering data sensors applications embedded web servers 
research currently remains early stages 
discussion section surveyed active research areas address requirements pervasive computing 
main goals focuses research areas summarized table 
table demonstrates ingredients pervasive computing infrastructures existing research considerable challenge remains producing solutions problems far little addressed constructing computing infrastructure integrates solutions challenges described 

research agenda summary pervasive computing requirements 
ability dynamically discover compose software components frequently changing environments 
ability support increasingly autonomous invisible applications provision rich context information gathered wide range sources interpreted disseminated scalable fashion interested parties 
ability rapidly develop deploy flexible software components adaptive contextaware additionally satisfy special requirements scalability fault tolerance 
ability integrate heterogeneous computing environments differing communication protocols services discovery mechanisms coherent pervasive computing systems enable formation dynamic interactions components 
ability construct novel types user interfaces universally available regardless input output capabilities available devices sensitive situation non distracting requirements addressed individually broad range research disciplines including mobile distributed computing software engineering collaborative context awareness wearable computing hci sample characterized section 
remain considerable hurdles realizing pervasive computing vision 
believe research directions particular pursued 
need new approaches software design development 
banavar described programming model pervasive computing generic programs created device service characteristics 
believe model sufficient invisible computing applications reliant rich knowledge context order function autonomously 
advocate development new models programming context 
previous gathering interpretation representation context extended deeper investigation context data 
abstractions application context awareness adaptation formed serve basis new application programming models languages 
issues currently focus research group constructing comprehensive framework contextaware computing supports concerns context gathering interpretation programming issues 
framework developed conjunction mercury application supporting context aware communication pervasive computing environments serves testbed ideas contextaware computing 
second scalable framework overcoming heterogeneity enabling dynamic interactions software components required 
framework build broaden scope existing creating interoperability computing environments corba dcom 
address device software heterogeneity heterogeneity components networking infrastructures middleware platforms service discovery mechanisms 
addition mechanisms needed enable software components respond novel situations dynamically learning interfaces behaviors components 
investigation user interface usability issues pervasive computing required 
current research hci arena addressing construction user interfaces innovative devices including information appliances mobile computers 
emerge new models user interaction replace models centered desktop computing widely past 

concluding remarks vision computing landscape characterized ubiquity computing devices autonomy dynamicity context awareness computing applications heterogeneity system components 
provided discussion challenges associated vision framed conceptual model pervasive computing encompasses devices users software components user interfaces 
additionally evaluated current state research degree satisfies requirements pervasive computing 
concluded agenda research highlights need investigations context awareness adaptation integration frameworks overcome system heterogeneity user interface models computing environments 

norman invisible computer products fail personal computer complex information appliances solution mit press 
dey abowd better understanding context context awareness workshop context awareness chi april 
century challenges data centric networking invisible computing proceedings th annual intl 
conference mobile computing networking mobicom august 
arnold discourse disposable computers talk usenix workshop embedded systems march 
noble agile application aware adaptation mobility proceedings th acm symposium operating systems principles october 
universal information appliance ibm systems journal vol 

gribble ninja architecture robust internet scale systems services computer networks special issue pervasive computing june 
benyon new hci 
navigation information space appear special issue knowledge systems 
harter anatomy context aware application proceedings th annual intl 
conference mobile computing networking mobicom august 
kindberg people places things web presence real world www cooltown hpl hp com hewlett packard labs technical report hpl 
dey salber abowd context infrastructure smart environments proceedings st intl 
workshop managing interactions smart environments december 
waldo jini technology architectural overview white sun microsystems january 
beck islam moca service framework mobile computing devices proceedings international workshop data engineering wireless mobile access august 
lea gibbs abrams networking home entertainment devices havi computer vol 
september 
banavar challenges application model pervasive computing proceedings th annual intl 
conference mobile computing networking mobicom august 
want garlan task driven computing technical report cmu cs school computer science carnegie mellon university may 
