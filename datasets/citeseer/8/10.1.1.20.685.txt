automated component compatibility assessment department computer science engineering university west czech republic kiv cz position ecoop workshop component oriented programming budapest hungary 
increasing software components methods safe replacement currently components newer versions greater importance 
component specification application composition issues researched working approaches assess compatibility different components hard find 
define compatibility levels contextual compatibility takes account actual usage component bound assembled application 
method determining compatibility components uses analysis differences specifications structured traits related declarations 
area software components lot effort put research component specifications consistent composition including dynamic case 
lead adoption industry architectures corba component model ccm javabeans research systems sofa 
problem determining compatibility components opinion received insufficient attention 
imagine better version component currently 
best just plug writing adaptation code especially non programmer 
substitution component affect correct functioning consistency application better version compatible current 
supported agency czech republic project number research plan number msm funded ministry education czech republic 
definitions compatibility related research 
perry inscape environment defines levels compatibility individual functions strict compatibility equivalent subtyping ensures plug substitutability 
dce environment java binary compatibility specification define rules changes interface description resp 
class implementation considered compatible respect existing compiled code 
production systems ensure compatibility software applications respect prospective upgrade dmi initiative various linux packaging systems 
main disadvantage point view rely dependency compatibility descriptions supplied manually may reflect correctly real properties application implementation 
larsson define compatibility black box components levels relaxation behaviour compatibility preserves interface non functional characteristics component interface compatibility preserves functional interface input output compatibility considers just data component exchanges environment 
authors mention means determining component satisfies level 
approach goal checking compatibility components done dynamically statically 
dynamic checking means running suite compliance tests ascertain correct interactions replacement component place current 
allows detailed assessment may option frameworks underspecified components com 
may hard automate relies high quality test suites may pose problem production components short time market 
static checking uses component specification similarly verdict determining specifications replacement component features proper inclusion relation current :10.1.1.29.5124
fast accurate interfere possibly running applications feasible components rich specifications 
approach completely superior current trend declarative languages component development static checking attractive option 
similarly larsson believe constraining reduce compatibility issue subtyping view 
presents foundations approach static component compatibility checking takes account deployment environment 
section describes aspects involved assessing component compatibility static checking 
structured view component specifications section defines compatibility levels strict relaxed 
section briefly describes experimental implementation method automated component assessment sofa 
component features traits assessing component compatibility consider features exposes interaction 
important aspect check structure syntax operational interface invoke component functionality function calls events formats data features produce consume data read written subjects 
orthogonal property features direction 
primarily component provides features clients interact com corba interfaces event sinks ccm 
hand component may require connection features environment implementation depends 
example corba sofa components require interfaces ccm called access components 
addition correct features component defined semantic constraints 
may mandate interface methods called particular order operations component preserve invariant property 
traits component specification components black box units description features available users including application developers commonly specification component surface systems notably corba sofa surface specification provide fairly detailed information structure semantics component features 
specifications basis analysing comparing component properties 
component specification frame provide connection property boolean keepalive property long timeout require system sock protocol semantics connection get sock create sock write sock read sock destroy 
declarations 
interface response get uri request protocol get module system interface int create omitted brevity protocol create 
surface specification component sofa cdl components coarse grained fairly complex entities analyses provide results language constructs low level abstraction function signatures 
better approach term interface avoid mismatch idl interfaces 
comparison declarations corresponding user view component features example level interfaces idl sense data format specifications xml dtds 
structuring surface specification declaration aggregates called specification traits 
trait named set declarations di describe structure semantics particular type feature component surface name di 
example sofa components traits provided interfaces required interfaces component properties behaviour description called frame protocol see figures 
trait classified trait categories roles declarations provisions traits describing provided features requirements describe required features dependencies semantics traits specifying component feature semantic properties 
trait contents property boolean keepalive long timeout provides ht connection requires system sock protocol connection get sock create trait contents component section shows component compatibility defined assessed feature specification constructs grouped traits 
compatibility components informal definition replacement component compatible current component satisfies requirements operational interface environment able read write data place format current input output compatibility conform semantics current component interactions engaged 
important note modifications provided required features affect compatibility equally 
replacement component provided features obviously current clients able successfully communicate 
need problem replacement component different requirements environment may able satisfy provide features bound 
situation programming languages type replacement object subtype current type typical example assignment subclass instance variable superclass type 
compatibility levels observation tells common notion compatibility may overly restrictive case component replacing current particular context 
differentiate levels component compatibility 
strict compatibility requires replacement component subtype current warranted contravariant differences specifications 
level ensure substitution context 
relaxed level termed contextual compatibility takes account important aspects environment current component deployed context component see 
current component provided features components application configuration bound components requirements 
example component provides webdav interfaces assembled application webdav protocol 

current environment provides features replacement component declares required necessarily considering requirements current component 
example new version component may require additional interface provided current parser component 
trait definitions differences replacement component current represented specifications changes corresponding declaration traits tr tci changes fall types determined function change tc tri means tri tci specialization means extension functionality enriched data format stringent semantics generalization means reduction functionality relaxed semantics mutation means traits incomparable contents basically due mixture specialization generalization changes declared features 
function parametrized comparison algorithm pertinent trait suitable comparing kind declarations ti contains 
define levels compatibility terms change types 
replacement component specification cr rr tr strictly compatible current cc rc sc tc change tc tri specialization change tc generalization change tc tr generalization 
definition corresponds natural understanding replacement component provides requires impose new semantic constraints 
contextual compatibility definition needs description component context see 
subsets declarations provided features bound components constitute set declarations features compo tci nents provide satisfy requirements component denoted 
compatibility semantics needs take account declarations related bound provided features consider reduced set context triple cx 
current replaced simple sockets timeout keepalive sys parser simple sockets webdav keepalive sys parser context component substitution provide require semantics binding replacement component contextually compatible current tr change tri specialization tr rr change tr specialization tc sc tr sr change tc tr generalization 
plain words replacement component provides features current context requires available components semantics clients able manner current 
sofa implementation approach research component compatibility done part sofa project closely related component versioning 
compatibility checking involves steps 
context current component determined 
achieve description application architecture hierarchical aggregation sub components linked interface bindings 
read static cdl specification start modified application lifetime components substituted 
traits representing context built specifications components referenced architecture 
second step change types pairs corresponding traits replacement component context cx determined 
comparison traverses declarations types referenced specification considers changes lower levels granularity adding method provided interface propagates specialization provides trait 
lastly computed differences provided required semantics traits matched definitions 
result better component compatible current 
architecture sub components architecture inst inst inst parser interface bindings bind sock sys sockets bind connection cdl architecture specification web browser seen method susceptible small changes swapping method parameters type renaming 
reason strictness belief components substitutable little additional programming possible similarly changing expansion cards pcs 
concept connectors feature adaptations case changes 
addition advantages static checking noted approach possible compute data compatibility assessment advance 
enables simplify assessment common situation upgrading component subsequent revision 
case changes revisions classified developer site stored component meta data 
prevent substitutions user site component specifications aren available 
shown declarative specification black box components assess chances successful substitution 
classification changes corresponding declaration traits specifications possible reason differences components suitable abstraction level 
importantly enables define practically evaluate component compatibility respect particular application context 
ideas progress 
sofa system includes working tool change type classification compatibility assessment 
development support determining current application architecture deriving context 
goal provide tools guide user application composition component updates compatibility rules defined 
lot theoretical done 
deficiency approach currently way determine component needs required features example webdav interface component calls issued interface 
accounted definition context contextual compatibility assessment 
needed compatibility semantic aspects 
better defined relation global rules application consistency semantics forms semantic specifications example timing constraints may difficult compare additional information 
software connectors hierarchical model 
technical report department software engineering charles university prague 
declarative approach designing developing adaptive components 
proceedings th ieee conference automated software engineering 
ieee cs press september 
component revision identification idl adl component specification 
accepted poster presentation esec fse european conference software engineering vienna austria 
christensen experiences architectural software configuration management 
proceedings scm workshop ecoop 
springer verlag 
debian packaging manual 
available www debian org doc desktop management task force desktop management interface specification version 
dmtf gosling joy steele java language specification chapter java binary compatibility 
sun microsystems javasoft javabeans specification 
available www javasoft com beans spec html new challenges configuration management 
proceedings scm workshop toulouse france september 
lncs springer verlag 
pagurek architecture support dynamic composition service components 
workshop component programming ecoop 
object management group corba components joint revised submission 
omg orbos perry version control inscape environment 
proceedings icse monterey ca 
peterson dce guide developing portable applications 
mcgraw hill 
sofa architecture component trading dynamic updating 
proceedings annapolis maryland usa 
ieee cs press 
behavior protocols components 
submitted publication ieee transactions software engineering component environments non programmers case studies 
workshop component programming ecoop 
szyperski component software 
acm press addison wesley wing specification matching software components 
acm transactions software engineering methodology vol 
october 
