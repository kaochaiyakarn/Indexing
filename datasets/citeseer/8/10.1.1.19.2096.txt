reconciling replication transactions reliability corba applications pascal felber narasimhan institut eurecom route des cr bp sophia antipolis france pascal felber eurecom fr school computer science carnegie mellon university pittsburgh pa cs cmu edu 
corba standard incorporates support reliability distinct mechanisms replication fault tolerant corba standard transactions corba object transaction service 
transactions represent roll back reliability mechanism handle fault reverting committed state discarding operations progress time fault 
replication represents roll forward reliability mechanism handles fault re playing operations progress operational replica crashed server 
today enterprise applications tier structure simple clients rst tier servers middle tier perform processing databases third tier store information 
applications replication required protect middle tier processing transactions required protect third tier data 
requires reconciliation roll forward roll back reliability mechanisms order protect data processing provide consistent reliable operation 
looks issues integrating replication transactions tier enterprise corba applications particular emphasis reconciling fault tolerant corba standard corba object transaction service 
emergence internet enterprise computing web electronic commerce led development system architectures advanced features address technical quality service qos issues security data integrity high availability reliability scalability atomicity session management 
reliability particular forms cornerstone enterprise market increasingly intolerant downtime enterprise server crashes leading bad publicity prohibitive nancial losses reduction stock prices loss customers 
adverse impact pascal felber narasimhan economy quality life lack fault tolerance increasingly unacceptable particularly enterprise applications 
continuous perceived uptime reliability key requirements electronic commerce servers 
approaches providing fault tolerance 
hardware redundancy solutions insucient focus primarily detecting tolerating hardware defects 
enterprise systems contain lot software part hardware software components fail disrupting service 
provide necessary degree availability systems hot swappable components replace failed component onthe working component failover switch clients working replaced component old failed 
distinct aspects fault tolerance enterprise systems protection data protection processing operations progress fault occurs 
protect loss corruption data databases transaction processing systems employed 
protect loss operations processing servers perform processing replicated exist redundant servers perform computing redundant network resources running distributed application 
today enterprise applications tier structure simple front clients usually browsers rst tier servers business logic middle tier perform processing databases legacy applications third tier store information 
di erent technologies form basis tiers instance application servers usually environment choice middle tier business logic components 
architecture enterprise applications client server middleware client requests services network server performs services returns results client 
middleware platforms common object request broker architecture corba increasingly adopted simplify clientserver application programming rendering transparent low level details networking distribution physical location hardware operating systems byte order 
despite attractive features middleware platforms favor deployment applications high reliability requirements 
recognizing de ciency object management group omg corba standards body attempted incorporate speci cations reliability corba middleware standard 
reliability support corba takes di erent forms corba object transaction service ots ii adopted fault tolerant corba ft corba standard 
unfortunately speci cations developed independently fact dicult reconcile replications transactions general 
reason replication represents roll forward mechanism fault crash server tolerated switching backup replica server re doing moving forward operations progress lecture notes computer science failed server 
hand transactions represent roll back mechanism crash server tolerated discarding operations progress failed server reverting known committed state persisted database 
clearly focus reliability mechanism di ers transactions focus protecting data replication focuses protecting processing 
stated way roll forward mechanism promotes liveness roll back mechanism promotes safety 
true reliability enterprise applications clearly require elements roll forward roll back reliability strategies order protect data processing 
fact complementary strategies stands bene greatly 
today state art state challenging achieve 
exist orthogonal equally essential properties building mission critical distributed systems availability consistency 
availability provides clients abstraction continuous service despite failure server components generally achieved replication critical resources failure copy critical component masked copy 
consistency guarantees informally system remain coherent state despite occurrence faults 
partial execution operation lead violation consistency property 
instance money transferred bank account system incoherent state money withdrawn source account deposited destination account 
consistency generally maintained transactional facilities 
integrating replication transactions achieve additional objectives provide stronger consistency replicated systems supporting non deterministic operation provide higher availability failure transparency transactional systems 
explore underlying problems composing capability provided replication roll back capability provided transactional systems order achieve reliability distributed enterprise corba systems 
chosen corba vehicle exploring research problems integrating replication transactions prior experience building replication corba systems corba unique middleware currently incorporates speci cations replication ft corba transactions ots 
hope ideas lay foundations reconciling separate speci cations deriving powerful capability combining ft corba ots 
intention invent novel protocols pragmatic approach leveraging best transactional replication worlds combin authors independently developed fault tolerant corba systems ft corba standard approved 
addition authors contributed participated ft corba standardization process 
pascal felber narasimhan ing power achieve reliability availability critical corba applications 
rest organized follows section introduces necessary background concepts presents fundamental system models consider rest 
section describes compares roll back roll forward reliability greater detail 
section outlines novel scheme integrating best ft corba ots mechanisms achieve availability consistency 
section discusses research efforts relevant area 
section presents concluding remarks 
background architectures form focus tier distributed enterprise middleware applications 
thin rst tier clients communicate application servers implement application logic typically middleware component model enterprise javabeans ejb corba component model ccm 
middle tier servers transactional access back systems typically highly available parallel database servers 
illustrates tier con guration multiple application servers process requests possibly thousands thin clients 
firewall thin clients servers application server database enterprise fig 

typical tier architecture communication clients servers happen various protocols rmi iiop ssl focus corba distributed rst second tier client server interactions 
similarly assume communication middle tier application servers third tier database system performed corba 
lecture notes computer science rest text assume communication various tiers distributed client server architecture occurs corba internet inter orb protocol iiop 
mechanisms discussed generic readily extended middleware protocols additional levels nesting tier architectures 
rest section describe current support transactions fault tolerance corba standard 
corba object transaction service corba incorporates support roll back reliability object transaction service ots 
ots forms part rich suite services naming events noti cation corba incorporates vendors provide order free corba programmers having write commonly functionality 
ots essentially speci es interfaces synchronizing transaction elements distributed client server application shown 
transaction satis es called acid properties atomicity transactions executes completely consistency transactions correct transformation state isolation transactions execute concurrently appears transaction transactions execute durability modi cations performed completed transactions survive failures 
ots transaction typically initiated client involve multiple objects performing multiple requests 
scope transaction de ned transaction context shared participating objects 
transaction context logically bound thread client initiated transaction implicitly associated subsequent requests client issues client decides terminate transaction 
fault occurs duration transaction changes produced consequence client requests committed preserved accordance durability property 
case fault occurs transaction changes data occurred duration scope current transaction rolled back discarded 
trans 
ctx 
transactional client trans 
obj 
transactional server operation transactional transactional operation recoverable server obj 

resource client transaction service fig 

architectural overview ots pascal felber narasimhan apart transactional client transaction context distributed transaction typically involves kinds objects transactional recoverable resource objects 
transactional objects corba objects behavior state ected invoked scope transaction objects refer persistent data modi ed transactional requests 
recoverable objects transactional objects explicitly participate transaction service protocols 
registering resource objects ots turn drives commit protocol issuing requests resources registered transaction 
transactional recoverable objects hosted transactional recoverable servers participate twophase commit protocol executed completion distributed transaction 
ots implements roll back reliability sense ect requests issued context failed transaction undone recoverable servers 
roll back implicitly triggered occurrence fault explicitly requested transactional object 
roll back client re try transaction take appropriate action 
fault tolerant corba standard support roll forward reliability corba provided adopted fault tolerant corba ft corba speci cation 
ft corba implements reliability replicating critical objects server replica fails processing client request replica take processing request generally client noticing failure 
ft corba speci cation includes minimal fault tolerant mechanisms included corba implementation interfaces advanced management facilities intended provided fault tolerant corba implementation 
ft corba implementors free proprietary mechanisms reliable multicast protocols actual implementation long resulting system complies interfaces de ned speci cation behavior expected interfaces 
client side mechanisms included corba implementations regardless implement ft corba intentionally kept minimal 
essentially specify object contain multiple pro les designates replica multi pro le iors simple rules iterating pro les case failure 
mechanisms ensure unreplicated clients interact replicated ft corba servers fault tolerant manner 
server side components ft corba shown 
replication manager handles creation deletion replication application objects infrastructure objects 
replication manager replicates interoperable object ior standardized form corba object contains pro les 
pro le contains su cient information contact object protocol usually tcp ip information includes host name port number object key associated corba object 
lecture notes computer science notifications alive fault reports create object set properties create object generic factory group manager property manger replication manager fault fault detector server app 
server app 
client host host host fault factory logging recovery factory logging recovery fault orb orb orb app 
invocations fig 

architectural overview ft corba objects distributes replicas system 
replica object individual object replication manager object group clients contact replicated object 
replication manager functionality achieved property manager generic factory object group manager 
host process object faults detected fault detector 
occurrence faults reported fault noti er lters distributes fault event noti cations replication manager 
noti cations replication manager initiates appropriate actions enable system recover faults 
reliability strategies section compare replication transaction reliability strategies introduced previous section particular focus respective bene ts drawbacks 
replication reliability replication intended protecting computational resources redundancy processor fails processor take processing failed processor 
distributed systems best known replication styles active primary backup passive replication 
replicated object represented object group replicas object forming members group 
object group membership may static dynamic 
static membership implies number identity replicas pascal felber narasimhan change lifetime replicated object hand dynamic replication allows replicas added removed run time 
active replication replicas object play role active replica receives request processes updates state sends response back client 
client invocations sent processed server replica failure server replicas transparent client 
primary backup replication server replicas designated primary replicas serve backups 
client typically sends request primary executes request updates state updates states backups sends response client 
periodic state updates primary backups serve synchronize states server replicas speci points execution 
replication implements roll forward recovery mechanisms promote liveness continuing processing left time failure 
active replication event fault active replicas crashes replicas continue processing current request regardless implicitly implementing roll forward mechanism 
primary backup replication event fault primary replica crashes backup replicas takes new primary re processes requests previous primary performing failed 
backup replica crashes loss processing 
roll forward mechanism explicitly implemented re election new primary replica re processing requests new primary 
consistency maintained active primary backup replication guaranteeing partial request execution harm request eventually completed rolling forward 
major limitation replication system consistency may preserved presence non determinism 
frequent assumption building replicated corba systems corba object deterministic behavior 
determinism implies distinct distributed replicas object starting initial state receive process set operations order reach nal state 
reproducible behavior application lends reliability 
unfortunately pure deterministic behavior dicult achieve simple applications 
common sources non determinism include local timers multi threading operating system speci calls functions shared memory primitives non deterministic behavior inevitable challenging problem development fault tolerant systems 
active replication determinism crucial maintaining consistency states replicas object 
passive replication perceived solution non deterministic applications 
truth perception passive replication invocations processed primary primary state captured update states backup replicas 
primary fails processing invocation partial execution discarded lecture notes computer science invocation processed afresh new primary 
state updates happen replicas primary replica results non deterministic behavior replicated object completely contained havoc consistency object 
exist situations passive replication sucient deal non determinism 
particularly true scenarios nondeterministic behavior passively replicated object contained behavior leaked replicated objects system 
consider case primary replica invokes server object nondeterministic decision load balancing primary replica randomly chooses servers process credit card transaction 
primary replica fails issuing invocation guarantee new primary select server old primary system inconsistent state old new primary replicas communicated di erent servers states updated 
passive replication resolve non deterministic behavior persistent ect leakage non determinism resulting partial execution invocation failed replica 
possible passively replicated object access external components non deterministic inputs accesses performed context transaction aborted failure 
sources non determinism thread scheduling controlled careful programming 
general passive replication cure non determinism 
transaction reliability replication transaction processing systems essentially aim protecting data 
failure occurs context transaction objects involved transaction reverted state just prior transaction 
state updates processing occurred transaction discarded trace left system 
systems support nested transactions new child transaction initiated scope existing parent transaction 
nested child transaction fails enclosing parent transaction needs automatically roll back application attempt correct problem subsequently retry nested transaction 
enclosing transaction encounters fault nested transactions roll back enclosing transaction 
transactions roll back recovery mechanisms guarantee consistency undoing partial request processing 
data protected undesirable side ects failures computational resources may unavailable arbitrary durations 
transactions ective mechanism preserving consistency achieving high availability trade liveness safety 
pascal felber narasimhan ok takes crashes transfer bank deposit ok ok withdraw account withdraw re invokes bal bal bal re proc 
duplicate old reply client ok bal bal bal account bank account transfer crashes takes re issues request ok withdraw ok rollback withdraw ok deposit trans 
rolls back trans 
commits re invokes client bal bal bal bal re proc 
bal account ok bal bal re proc 
bal bal fig 

reliability multi tier applications 
roll forward 
roll back 
roll back vs roll forward consider simple tier bank application 
client issues transfer request passively replicated bank object turn withdraw money bank account deposit account see 
bank essentially stateless object coordinates money transfer stateful bank account objects typically hosted database server 
data pertaining bank accounts possibly managed distinct entities di erent branches account objects execute di erent servers located bank object 
bank account objects fail independently 
primary bank object fails performing transfer invoker backup generally know point failed invoking invocations invoking roll forward roll back reliability strategies adopt approaches address problem illustrated ow requests replies represented arrows ow time occurs downward bottom gure 
roll forward reliability strategies invocations traditionally sent reliable multicast known reliable group communication replicas object receive request 
evident active replication con guration client need re issue request active server replicas fails fact client typically aware failure 
primary backup setting primary nished processing request multicasts response state update backups returning response client 
state update allows backups synchronize state primary 
response lecture notes computer science cached backups retrieval primary fail 
primary fails backup assumes role new primary transparently 
primary fails returning response client client re issue request backups new primary new primary cached response state update old primary readily return response doesn cached response re process request 
fails having successfully invoked invoking replying new primary know failed re processes request 
assume objects deterministic behavior re invoke invocations idempotent repeated executions invocation leave state invoked object unaltered re processing requests corrupt state duplicate processing requests allowed occur 
guarantee behavior ft corba invoker embeds request identi er request 
identi er invoked server detect duplicate invocation return previously cached replies re processing entire request 
invocation normally processed nally sends reply note server moves consistent state consistent state intermediary inconsistent state note exposed roll back reliability strategies invocation typically sent point point communication failure invoked server effects invocation rst wiped system invoker re issues request backup server 
retransmission generally performed transparently middleware infrastructure knowledge client application 
roll back phase recovery requires mechanisms enable component undo changes state ects processing invocation order avoid inconsistencies 
achieved transactional facilities reset component previous known committed state transaction aborts 
roll back interesting participants transaction distributed entities 
distributed transactions possible roll back actions remote components invoked context transaction 
starts new transaction processing request fails just having successfully invoked commit transaction actions performed part transaction undone state system balance accounts reset prior invocation roll back strategy entire invocation sub chain root crashed object reverted previous consistent state 
receive reply eventually re issues request fault occurs invocations processed normally reply returned note re issue request server left consistent pascal felber narasimhan state identical initial state re invocation server reaches consistent nal state 
potential faster recovery roll back phase prior retry recovery phase roll forward approaches suited systems real time requirements need predictable response times embedded systems supervision control applications 
particular roll forward recovery active replication recovery time signi cantly faster roll back recovery 
hand rollback approaches adapted transactional systems integrity data far recovery time electronic commerce banking applications 
reliability strategies distinct properties critical distributed application signi cantly bene combining particular strengths strong consistency transactions high availability replication simultaneously alleviating respective limitations deterministic behavior replications unpredictable response time transactions 
combining replication transactions section outline protocol provide reliability clients replicated servers 
supports non deterministic servers nested invocations transactional environments enterprise application servers 
illustrate protocol context architecture extends naturally tier systems 
protocol client issue request remote invocation highly available server 
outcome request preserved despite failure client network server 
event failure client re issue request obtain reply worrying duplicate processing potential corruption server state 
protocol ft corba ots replicate computational resources maintain consistency 
assumes servers access logging infrastructure similar logging mechanisms speci ed ft corba storing retrieving information 
log accessible replicas object support transactional operation 
implemented various mechanisms database communication primitives guarantee atomic exchange data replicas commit time 
important feature architecture fact middle tier servers perform core processing initiate transactions third tier database servers store persist data 
exploit ft corba infrastructure handle server replication client side failover 
exploit ots mechanisms enable servers perform processing handle client request scope nested transactions initiate 
emphasized sections marry best ots lecture notes computer science ft corba mechanisms achieve reliability availability way rst tier client third tier database 
client side mechanisms server objects passively replicated hosted ft corba infrastructure 
replicated server represented multi pro le corba interoperable object ior pro le enumerating address host name port number object key server replica 
non replicated rst tier client addresses middle tier primary server replica fault tolerant object 
part client need perform additional processing apart conforming client side ft corba speci cation 
ft corba standard client side orb runtime rst invokes primary server replica 
primary suspected failed clientside orb runtime transparently iterates addresses contained multi pro le ior invoking address search operational server replica 
eld embedded request client side orb runtime contains unique request identi er permits middle tier servers detect request duplicate seen 
allows server side orb runtimes detect discard duplicate requests prevent server state corrupted 
note client invocation need execute context transaction ots eliminating need embedding transactional service context client request 
service context information carried request rst tier middle tier ft corba duplicate request detection 
server side mechanisms server side protocol relies ots ft corba achieve consistency availability 
consistency implemented ots mechanisms server side fault tolerant orb runtime 
client mistakenly invokes backup replica primary replica server side ft corba runtime intercepts request reaches server replica transparently noti es client primary identity location forward reply message 
client side orb runtime address embedded message contact real primary replica 
client request executed non primary replica ensuring states server replicas rendered inconsistent accidental diversion requests wrong server replica 
corba allows client propagate additional information server order uence processing speci invocation 
additional information embedded eld iiop invocation message interpreted server side orb runtime 
pascal felber narasimhan receiving request rst tier client primary rst checks log see request processed unique context embedded client request precisely purpose 
current client request duplicate primary returns previously generated cached reply 
fresh non duplicate request primary server replica initiates ots transaction 
note architecture nested transaction incoming request part transaction 
scope transaction encloses operations performed replica including interactions components 
client request processed scope server initiated transaction 
hosting middle tier servers ft corba infrastructure ots enabled servers initiate transactions bene ting ft corba mechanisms 
allows handle stateless stateful servers middle tier opposed tier enterprise architectures typically handle stateless servers 
server object stateful state state update retrieved primary replica updateable interface object support ft corba standard 
state written log response client 
replica commits transaction returns response client 
primary fails committing transaction rolls back undoes operations performed failed replica complete invocation chain root failed primary rolled back including data written log 
primary fails committing reply available backup replicas elected new primary return reply invocation encountered 
protocol applies recursively tiers 
nested transactions failure contained just branch invocation tree roll forward strategy scope branch 
scheme best illustrated example 
consider bank application introduced section 
shows run protocol failures 
client rst sends transfer request replicated bank object primary replica starts transaction tx sends request withdrawal account turn primary replica account starts transactions tx nested tx performs withdrawal logs state update response commits transaction returns response fails receiving response 
fails committing tx transaction rolls back 
consequence nested transaction tx rolls back state account reverted previous value 
time takes global state system consistent roll back recovery mechanism ots 
client runtime ft orb detects failure transparently re issue transfer request second pro le ior roll forward mechanism ectively shields client failure server 
lecture notes computer science ok ok store upd store upd store upd store takes process commit tx balance process balance balance balance commit tx return ok commit tx start tx re invokes crashes start tx client bank account account balance takes balance re invokes withdraw ok transfer withdraw start tx tx aborted start tx ok ft orb transp 
withdraw start tx start tx commit tx balance ft orb transp 
commit tx deposit balance fetch upd apply upd return balance process rollback crashes rollback tx balance balance roll back roll forward fig 

protocol run failures nd rd tiers 
notices transfer request processed associated entry log 
initiates new top level transaction tx invokes primary replica performs withdrawal context new nested transaction tx returns reply fails committing transaction 
note scenario failure occurs rd tier server transaction tx roll back 
ft orb runtime detects failure re issues request backup server mechanism 
transaction tx completed successfully detects request processed fetches state update reply log updates state returns previous reply performs deposit account logs response commits transaction tx returns response client 
key idea combination replication transaction models 
beauty server initiated ots transaction scope fault occurs server processing client request violate data consistency merely triggers roll back processing pascal felber narasimhan state changes 
time server replicated client side orb runtime equipped ft corba failover infrastructure crash server replica lead loss availability 
best worlds replication availability liveness transactions consistency safety achieved 
related exist commercial implementations research prototypes ft corba speci cation ots speci cation 
implementations employ roll back roll forward reliability strategies attempt reconcile di erent approaches 
focus integration approaches systems satisfy approaches discuss merits drawbacks various ft corba ots implementations 
highlight research orts attempted solve speci aspects integration problem albeit di erent viewpoint 
related orts include research integrating transactional protocols group communication protocols group communication forms foundation maintaining consistency replication systems 
aim take advantage group communication transactions new transactional model transactional servers fact groups processes 
allows transactional applications built top computer clusters 
transaction executes exactly despite failures targeted tier enterprise architectures stateless middle tier servers replicated 
overcomes limitations current transactional technologies part ensure request processing suciently reliable 
transaction abstraction builds asynchronous replication scheme provides liveness feature replication safety feature transactions 
corba related ort aims compare di erent kinds systems group communication transactions transactions group communication viewpoint replicating objects availability 
study leads conclude transactions ective right group communication infrastructures support transactional applications lead bene ts faster failover event fault 
replication schemes refer objects servers notion integrating group communication transactional model extended replication entire database 
attempts eliminate centralized unreliable approach databases adopt today 
proposed family replication protocols exploit group communication semantics eliminate deadlocks improve performance enhance reliability 
lecture notes computer science ibm research dependency spheres aims integrate asynchronous messaging synchronous transactions distributed objects intention increasing level reliability provided enterprise web services 
dependency spheres provide new kind global transaction context allows synchronous asynchronous distributed messaging style exchanges occur single transaction operation 
best knowledge research represents rst transactional mechanisms implement replication address determinism problem nested interactions replicated objects 
today enterprise applications tier structure simple clients rst tier servers middle tier perform processing databases third tier store information 
enterprise applications replication required protect middle tier processing transactions required protect third tier data 
corba middleware standard incorporates support reliability distinct mechanisms roll forward replication new fault tolerant corba standard roll forward transactions corba object transaction service 
current state art state practice dicult reconcile techniques 
true reliability enterprise applications clearly require elements roll forward reliability protect processing liveness rollback reliability protect data safety 
novel combination replication transactions achieve best worlds obtain consistency availability way rst tier client third tier database 
exploit ft corba infrastructure handle server replication client side failover 
exploit ots mechanisms enable servers perform processing scope nested transactions initiate 
knowledge rst transactional mechanisms implement replication address determinism problem nested interactions replicated objects 
solution context corba equally applicable transactional environments 
early results experimental evaluation shelf orbs demonstrate little ort required combine replication transaction real world application overhead remains small normal operation 
presence failures performance replication recovery mechanisms strongly depends failures occur failure occurring context top level transaction force roll back costly resources involved transaction 
addition overhead recovery highly dependent quality ft corba pascal felber narasimhan ots implementations particular performance accuracy monitoring mechanisms 

marzullo schneider toueg 
distributed systems chapter primary backup approach pages 
nd edition 

felber 
corba object group service service approach object groups corba 
phd thesis swiss federal institute technology lausanne switzerland 

guerraoui implementing transactions asynchronous replication ieee transactions parallel distributed systems vol 
pp 


ibm global services 
improving systems availability 

kemme alonso suite database replication protocols group communication primitives proceedings ieee international conference distributed computing systems amsterdam pp 
may 

little shrivastava integrating group communication transactions implementing persistent replicated objects lecture notes computer science vol springer verlag 

narasimhan 
transparent fault tolerance corba 
phd thesis department electrical computer engineering university california santa barbara december 

object management group 
common object request broker architecture speci cation edition omg technical committee document formal january 

object management group 
fault tolerant corba omg technical committee document formal december 

object management group 
object transaction service speci cation omg technical committee document formal may 

object management group 
corba component model omg technical committee document ptc january 

martinez jimenez peris group transactions integrated approach transactions group communication concurrency dependable computing kluwer academic publishers 

schneider 
distributed systems chapter replication management state machine approach pages 
nd edition 

sun microsystems 
enterprise java beans version 

tai sutton jr dependency spheres global transaction context distributed objects messages proceedings th ieee international enterprise distributed object computing conference seattle wa september 
