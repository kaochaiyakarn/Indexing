cade workshop wp visual reasoning visual logic programming set inclusion chaining jordi dave robertson marco schorlemmer institut ncia artificial csic campus uab catalonia department artificial intelligence university edinburgh south bridge edinburgh scotland mail jpf iiia csic es dr aisb ed ac uk visual reasoning visual programming areas sharing common interest visual representations nowadays textual formalisms 
design visual logic programming language research falls intersection areas 
hand designing declarative programming language issues visual programming apply 
hand due declarative nature foundations close visual reasoning 
explain research framework motivation designing visual logic programming language 
focused design intuitive easily accessible language formalize high level preliminary specification systems 
standard approach formalization divide languages sublanguages type expressions sublanguage kind preliminary specification value expressions language computation takes place 
approach ideal rich complicated type expressions typing relation types values automatically checked 
design calculus refinements explored alternative standard schema give clear cut distinction type value expressions 
consider types typing relation non transitive relation transitive subtyping relation types 
consider types sets expressions set expressions subtyping relation inclusion sets singletons play role values 
formalization process seen refinement process definition object successive refinements set inclusions giving upper lower bounds supported project tic funded cicyt object constraining interpretation object 
idea making logics users considered utility visual reasoning visual programming 
visual formalism early stages system formalization may give way saying just easy whilst saying way easy refine computationally plausible logic 
see visual languages potential help carry desire logics accessible particularly software area widely 
motivation design visual logic programming language start exploring visual reasoning visual programming known paradigm close research 
furthermore visual formalism logic programming language interesting 
purely academic point view interesting see expressive diagrammatic metaphors communication syntax invented logicians 
order fit existing research framework intended visual language strongly sets set inclusion relation 
starting point diagrammatic system developed eric hammer sets 
hammer focuses study valid reasoning diagrammatic system 
think type diagrammatic notation complicated purposes provides detail properly know predicates arguments variable matching implicit implication 
tried develop similar simpler diagrammatic system fits logic programming paradigm specially subset horn clause logic 
basic ideas visual language represent logical predicates diagrammatically set elements satisfy 
second graphical inclusion relation sets main mech anism construct diagrams predicate represented graphical set graphical set inclusion implication order build formulas 
instance want formalize fact humans order logic say human mortal visual language represent diagram mortal human sections introduce informally syntax semantics language sketch intuitions operational semantics 
point ongoing research means closed 
main interest explore new possibilities opened visual notations area 
syntax semantics visual syntax language customization higraphs open ended topological formalism developed david harel combines known diagrammatic formalisms graphs venn diagrams :10.1.1.20.6336
hammer diagrams higraphs 
higraph graph nodes represent sets elements related binary relation graphical inclusion 
important difference venn diagrams graphical inclusion information relevant absence graphical inclusion taken account 
instance sets graphically overlap common elements 
syntactic properties higraphs close diagrammatic expressive needs 
higraphs allow represent sets elements hold certain predicate arguments predicate diagram 
ultimate goal able embed concepts visual notation way easier understand 
language different types nodes sets elements 
arrows represent application predicates functions terms shown 
apart combining nodes means applications inclusions sets sets elements sets 
terms terms directed acyclic graphs dags built circles rounded boxes 
represent elements predicate arguments 
rounded boxes represent parts terms explicit name constants functions 
circles represent variables notation need name 
compound terms built graphs applying functions terms arrows 
see examples terms graphically represented 
textual term 
examples terms predicates explained section predicates represented graphically labeled boxes meaning set abstraction arguments 
assume predicate arguments left free range set abstraction 
rest arguments predicate explicitly shown means arrows 
refer selected argument convention usually variable set consists elements instantiating predicate holds 
find examples predicates graphical representation sets formal interpretation sets 
way predicates viewed functions argument chosen output rest inputs 
set interpretation 
examples predicates set operations construct new sets predicates 
operations union intersection complement 
interpretation union set intersection set complement set 
correspond respectively predicate disjunction predicate conjunction predicate negation 
see diagrammatically represented 
diagrams know represent terms predicates visual syntax step study 


set operations combine different predicates terms order express intended meaning 
diagram visual equivalent formula textual language smallest complete unit description language 
diagram composed various predicates terms may share common subterms related inclusion relation 
diagram goal predicate predicate defined head horn clause 
goal predicate diagram marked thick lines draw corresponding set box 
important restriction order obtain manageable diagrams set inclusions allowed superset goal set 
inclusions terms sets allowed 
find examples diagrams defining predicates grandparent ancestor descendant assuming predicate parent defined 
grandparent parent ancestor parent parent ancestor parent descendant ancestor 
examples diagrams explain semantics diagrammatic language defined 
said semantics term element semantic domain semantics predicate represented graph ical set set abstraction arguments 
define semantics diagram stating model interpretation model diagram looking interpretations diagrammatic nodes graphical inclusions hold 
model interpretation graphical inclusions diagram proved 
extending notation basic elements visual logic programming language 
described construct programs practice find difficult arrange diagrammatic elements way intended relations expressed 
solve problem language practical add visual extra logical elements graphical copy allows copies sets elements place diagram 
argument labeling ordering arguments important allow label arrows order distinguish 
empty arguments unconnected arrows equivalent singleton variables 
possible diagrams compositional syntax syntax predicate composition 
type syntax called taxonomic syntax predicate argument predicate 
formalized visual logic programming language making extensive compositional syntax order simplify resulting diagrams 
explore language extensions prefer focus operational behaviour visual language 
operational semantics development language concentrated efforts defining visual syntax queries solved prolog operational semantics translating diagrammatic programs pure prolog ones 
order real visual logic programming language need explore advantages directly visual syntax solving queries giving way visually ask questions visual program defining visual inferences operate diagrams 
mentioned syntax graphical set inclusion diagrams implication 
fact visual programs logical theories involving inclusions 
levy noticed transitivity property inclusion captured rewrite relations means bi rewrite systems 
bachmair studied rewrite techniques dealing arbitrary transitive relations context resolution theorem proving developing called ordered chaining calculus 
grandparent parent parent parent tom sally ann parent john mary parent bob bob 
visual program ann serves proof theoretic basis underlying operational behaviour visual query solving 
visual query solving sketch ideas example visual program suppose want know grandparent 
express query query diagram grandparent differs ordinary diagrams box marked thick lines defining predicate unknown variables computed noted interrogation mark 
queries prolog existentially quantified solved refuting negation 
achieved transforming query diagram answer diagram applying visual inferences 
idea diagram transformation complete query trace proof instantiation unknown variables 
conventional logic programming may solve query exploring definitions program 
match grandparent box definition 
circle argument grandparent matches round box boxes referring parent added query diagram grandparent parent parent inference step chaining step going proof existence element grandparent box means membership parent box contained 
place unknown variable parent box 
transitivity inclusion relation implicit chaining trivially captured diagram 
match parent box argument definition 
gives alternatives instantiate circle parent round box bob ann 
choose represent alternatives single diagram grandparent parent parent bob parent ann correspond breadth strategy prolog depth strategy 
unknown variable appears twice showing possible solutions computed 
case inference step ordinary resolution step instantiate circles due matching add chaining step new predicate boxes diagram repetition ones corresponding different alternatives 
transformation resolution leads answer diagram original unknown variable appears fully instantiated presenting case different solutions original query john mary tom sally grandparent grandparent parent parent john mary tom sally parent bob ann advantages visual notation simple example keep trace proof diagram query solving process elegant way different alternative answers easily single diagram 
giving operational semantics visual logic programming paradigm lot explored advantages resulting open questions chaining operational semantics visual language 
step direction schorlemmer 
progress new visual notation horn clause logic intuitions design operational semantics language 
set abstractions graphical set inclusion think allows uniform concise view logical expressions 
divided sections syntax semantics operational semantics aspects strongly tied 
concentrated part need develop areas time 
hand exploit advantages visual syntax defining operational semantics 
hand restrict syntax diagrams way obtain efficient computations keeping consistent intuitive diagrams 
aspect mention study integration visual language known existing textual ones 
ideas think visual notation best heterogeneous environment part contribute expressiveness resulting language superior 
language require intrinsically heterogeneous operational semantics 
visual query solving techniques need extended order cope structures language complement set union intersection sets 
necessary consider visual query solving language extensions compositional syntax 
aspects operational semantics introduced need revised extended 
instance need study deal infinite solutions recursive definitions necessary split solution multiple answer diagrams 
theorem proving transitive relations impractical general improved 
point interest study new programming methodologies adequate visual language 
diagrammatic syntax changes usual relationships syntax language operational semantics user programming habits 
working implementation language 
implementation focused development editing techniques sensible syntax semantics language think important element help visual language closer user 
visual queries implementation solved translating diagrams pure prolog 
plan implement interpreter visual language ideas 
come back original idea visual language rapid prototyping preliminary specifications stepwise refinement 
think informal diagrams software lifecycle naturally expressed visual syntax integrated directly design process 
robertson 
grasp graphical specification language preliminary specification logic programs 
technical report iiia institut en ncia artificial 
bachmair ganzinger 
rewrite techniques transitive relations 
proc th ieee symposium logic computer science pages 
barwise etchemendy 
heterogeneous logic 
diagrammatic logics cognitive computational perspectives 
aaai press mit press 
hammer 
representing relations diagrammatically 
barwise editors working papers diagrams logic indiana university logic group preprint series 
indiana university 
harel 
visual formalisms 
communications acm 
levy 
calculus refinements formal specification model inclusions 
phd thesis universitat polit cnica de catalunya 
levy 
bi rewriting term rewriting technique monotonic order relations 
kirchner editor rewriting techniques applications volume lecture notes computer science pages 
springer verlag 
levy 
bi rewrite systems 
journal symbolic computation 
published 
robertson 
visual logic programming language 
proc th ieee symposium visual languages 
schorlemmer 
theories declarative programming 
joint conference declarative programming 
