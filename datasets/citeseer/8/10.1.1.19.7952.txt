deriving operational software specifications system goals emmanuel letier axel van lamsweerde informatique universit catholique de louvain louvain la neuve belgium avl info ucl ac goal orientation increasingly recognized paradigm eliciting modeling specifying analyzing software requirements 
goals statements intent organized refinement structures range high level strategic concerns lowlevel technical requirements software assumptions environment 
operationalization system goals specifications software services core aspect requirements elaboration process little systematic constructive support available 
particular formal methods assume operational specifications focus posteriori analysis 
considers formal constructive approach operational software specifications built incrementally higher level goal formulations way guarantees correctness construction 
operationalization process formal derivation rules map goal specifications specifications software operations specifically rules map real time temporal logic specifications sets pre post trigger conditions 
rules define operationalization patterns may guiding documenting operationalization process hiding formal reasoning details patterns formally proved correct 
catalog operationalization patterns structured rich taxonomy goal specification patterns 
constructive approach requirements elaboration requires multiparadigm specification language supports incremental reasoning partial models 
provides formal semantics goal operationalization discusses semantic features language allow incremental reasoning 
categories subject descriptors software engineering requirements specification methodologies languages software engineering software verification formal methods correctness proofs general terms design verification languages documentation 
keywords goal oriented requirements engineering operationalization patterns incremental specification reasoning partial models frame problem kaos 

research formal specification produced impressive amount helpful techniques tools specification analysis algorithmic model checking deductive verification specification animation specification testing specification reuse specification refinement 
techniques presuppose formal specification available 
building formal specifications complex software easy task 
problem merely translating natural language statements formal language 
specification large general requires complex models elaborated structured interrelated negotiated 
goal oriented requirements engineering refers goals requirements elicitation elaboration organization specification analysis negotiation assignment documentation evolution 
goals objectives system consideration achieve 
word system refers software environment 
goals formulated terms statements may refer functional nonfunctional properties range high level concerns safe transportation flight control system lower level ones reverse thrust enabled wheels pulse :10.1.1.164.5970
multiple reasons goals explicit requirements engineering process 
goals drive elaboration requirements support provide criterion requirements completeness pertinence induce rich specification structuring mechanisms decomposition composition refinement abstraction decomposition reasoning alternatives provide rationale requirements allow trace low level details back highlevel concerns 
higher level goal stable goals essential elements managing requirements evolution 
goals recognized roots conflicts detected resolved 
achieving goals general requires cooperation multiple agents humans devices software 
example high level goal safe transportation require cooperation pilot autopilot software board tcas software ground tracking system essence goal refinement decompose goal subgoals subgoal requires cooperation fewer agents refinement process stops goals assigned responsibility single agents :10.1.1.36.7311
terminal goals assigned agents software requirements terminal goals assigned agents environment assumptions normative policies enforced software 
general alternative responsibility assignments explored example goal mode engaged aircraft near desired altitude assigned pilot autopilot agent 
different alternatives goal refinement assignment yield permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigsoft fse nov charleston sc usa 
copyright acm 
alternative system proposals features automated 
functional goals assigned software agents need operationalized specifications services agents provide meet general non functional goals quality service select goal refinement assignment alternatives meet best 
formally speaking operationalization process maps declarative property specifications operational specifications satisfying 
produce correct topic explored 
suppose example goal reverse thrust enabled wheels pulse assigned autopilot agent infer formal specification goal need autopilot operations formal specification operations guarantees goal achievement 
presents pattern technique operationalizing goals specified real time linear temporal logic rt ltl operations specified pre post trigger conditions pptc 
technique constructive derived guaranteed correct construction incremental operational specifications built gradually partial models lightweight formal correctness proofs remain hidden 
roughly speaking operationalization pattern captures rule inferring generic pptc specifications generic rt ltl specification 
patterns proved correct step verification system correct means conjunction pptc specification patterns entails rt ltl specification pattern notion correctness fully precise 
derivation goal pattern instantiation gives instantiated correctness proofs free 
operationalization patterns identified taxonomy frequently goal patterns taxonomy partially adapted catalog specification patterns empirical evidence reported breadth coverage 
considerable body problem refining software specifications programs 
contrast concerned explored upstream problem refining declarative goals operational software specifications requirements engineering time 
strictly mathematical point view problems may appear variants similar problem refining higher level model lower level 
important differences specification language features important requirements engineering specification formalisms phase program derivation distinction domain properties requirements distinction pre trigger conditions traceability software specifications system goals underlying approach supports incremental derivations partial specifications incomplete goal models contrast program derivation techniques generally require complete formal specification start derivation rules aim supporting lightweight refinement process frequent temporal logic specifications contrast lower level rules refinement calculi :10.1.1.36.7311
considerable body formal techniques combine declarative operational specifications 
contrast constructive approach proposed techniques focus posteriori verification operational specifications respect declarative ones 
principle derivation rules guiding goal operationalization suggested :10.1.1.36.7311
rules limited coverage rely fully formal basis lack desirable semantic properties discuss 
rules complement catalog formal refinement patterns developed upstream phase goal refinement patterns involve goal specification language 
rest organized follows 
section introduces background material goal oriented elaboration requirements provide context terminology examples sequel 
section discusses semantic features operational language needed incremental reasoning partial models formal characterization operationalization provided semantic framework 
section presents pattern approach illustrates typical operationalization patterns discusses structure coverage pattern catalog 

goal oriented ion requirements operationalization techniques developed kaos framework goal oriented requirements engineering :10.1.1.36.7311
briefly introduce background relies 
modeling specifying requirements application model composed submodels goal model goals achieved system described alternative refinement links conflict links object model application objects involved described relationships attributes agent model agents system described interfaces responsibilities respect goals operation model services operationalizing goals assigned software agents described 
model separate semantics related inter model consistency rules 
concentrates derivation operation model goal model features operation model greater detail provide basis operationalization process 
specification language multiparadigm language structure outer graphical layer modeling concepts goals objects agents inner assertion layer specifying concepts formally 
assertion layer optional formal reasoning 
goal model various objectives system meet defined model interrelated refinement links 
example safety goal considered mine pump control system goal maintain informaldef pump shall water level high formaldef mine pump high motor refines avoid specification fragment introduces concept type goal named corresponding property hold states maintain verb defined informal statement refining parent goal avoid refined subgoals 
lack space graphical layer represented textual form 
goal defines set admissible histories composite system consideration 
history temporal sequence global system states state mapping assigns value object attribute relationship object model 
real time linear temporal logic natural specifying goals 
temporal operators state 
previous state time time past past time deadline deadline remained true back time true remained true true time units ago standard logical connectives implies equivalent strongly implies strongly equivalent iff iff goal definition patterns lightweight specification goals modeling layer achieve cease maintain tw avoid tw denote current target new condition respectively 
section introduce specializations patterns basis identifying relevant goal operationalization patterns 
specification conjunction assertions formalizing subgoals entail formal assertion parent goal refine 
formal goal refinement generates corresponding proof obligation 
object model model defines domain entities relationships attributes relevant goal formulations 
example assertion formalizing goal attribute mine object predicate captures relationship mine pump objects 
corresponding declarations object model entity mine relationship links mine card pump card objects specified informally formally means domain invariants capture indicative properties domain 
agent model model defines responsibilities interfaces various agents forming composite system humans devices software goal refinement ends subgoals assigned single agents 
example consider goal declared subgoal goal specified follows pumpswitch goal assigned agent provided sufficient monitoring control capabilities realize goal agent able monitor quantity denoted control quantity denoted pumpswitch monitoring control links define agent interface agent model agent monitors 
controls pumpswitch 

pumpswitch agents fact objects may characterized domain specific attributes pumpswitch relationships invariants 
operation model model defines various services provided software agents 
operation input output relation components object model operation applications define state transitions histories prescribed goal model 
operations declared signatures objects specified pre post trigger conditions 
important distinction domain pre postconditions capture elementary state transitions defined operation applications domain required pre postconditions capture additional strengthenings ensure goals met 
conditions descriptive conditions prescriptive 
traceability operations underlying goals supported 
example operation partially specified operation input output pumpswitch dompre pumpswitch pumpswitch signature part declares input output relation sets states instance variable type 
output clause restricts scope operation pumpswitch attribute object means operation allowed change value attribute 
domain conditions describe application operation means domain prescription operation applied may applied 
operationalization refers process prescribing additional pre trigger postconditions operations order achieve goal specifications 
example operational requirement added order ensure goal introduced operation 
trigger condition captures obligation trigger operation high water flag provided pump switch see dompre assertion 
domain precondition operation formalized state predicate initial state operation domain required postconditions formalized predicates operation final state possible previous state operation initial state required pre trigger condi tions formalized predicates operation initial state possible past states past temporal operators 
semantics required pre trigger postconditions required precondition captures permission perform operation condition true required trigger condition captures obligation perform operation condition true provided domain precondition true required postcondition captures additional condition hold application operation 
required pre trigger postcondition linked goal operationalizes 
general required conditions different operations may needed operationalize goal completely 
set required pre trigger postconditions operations said complete operationalization goal satisfying required conditions set guarantees satisfaction goal 
goal refinement goal operationalization generates corresponding proof obligation 
formal semantics meant goal operationalization complete section 
back example complete operationalization goal required trigger condition operation required precondition operation operation input output pumpswitch dompre pumpswitch pumpswitch required precondition necessary ensure goal states pump switch may turned high water flag 
operations capture atomic state transitions 
real time temporal logic framework application operation maps state state time distance time unit smallest unit scale 
activity lasting states modelled introduce atomic operation starts activity atomic operation ends activity operations different ways activity terminate constraints activities formulated assertions goal model link events corresponding applications start operations 
operation models include operations encode activities derived systematically goal model operation model 
note structuring decomposition refinement kaos done declarative goal level 
operations may applied concurrently 
non interleaving semantics required semantics trigger conditions immediate obligations 
interleaving semantics operation model inconsistent trigger conditions operations true time 
goal operationalization incremental process 
new goals may need operationalized new operations new required pre trigger postconditions operations identified 
semantics operational language needs compositional see section 
incremental operationalization process may result inconsistent operation models example operation applied due required trigger conditions achieve goal time may applied due required preconditions achieve goal 
situations correspond violations consistency meta rule kaos language dompre violations rule traced back conflicts goals operational requirements derived see examples :10.1.1.36.7311
conflicts better resolved goal level discussed 
elaborating models method available elaborating goal object agent operation models systematic fashion see details illustrations 
roughly method consists intertwined steps goal model elaborated asking questions top goal refinement questions bottom goal abstraction refinement patterns object model derived collecting objects attributes relationships appearing goal formulations domain properties involved goal refinements agents identified interfaces possible responsibilities respect goals best alternatives selected multiple goal refinements agent assignments best trade offs achieve non functional goal offsprings goal graph functional goals assigned software agents operationalized operations meet 
variants general scheme available integrate elicitation conflict analysis obstacle analysis 
sections focus step goal operationalization 

semantics operationalization section provides necessary foundations operationalization techniques section particular notion correct operationalization fully precise 
mentioned want operationalization incremental process correctness goal operationalization established locally specifications goal operations involved operationalization 
discuss incrementality influences semantics operation model 
formal semantics operationalization 
generative semantics vs pruning semantics alternative styles semantics generally considered operational specification language 
generative semantics behavioral change forbidden ones explicitly required specification 
pruning semantics behavioral change allowed ones explicitly forbidden specification 
generative semantics operations viewed generating set admissible histories system assumed cover transitions possible 
examples languages defined semantics include languages transition systems state machines statecharts scr tables state languages vdm :10.1.1.17.6363
advantage style semantics built assumption changes operation explicitly requires specifier relieved explicitly specifying change words generative semantics avoids frame problem 
price pay built frame assumption incompatible idea partial models views 
generative semantics extremely difficult support incremental reasoning partial models 
illustrate point consider operationalization goal maintain required trigger condition operation required precondition operation see section 
assume complete operationalization built operation model operation goal operationalized required trigger condition operation 
generative semantics possible prove required trigger condition sufficient guarantee satisfaction goal semantics rely assumption transitions pump switch problem operation added model operationalize goal satisfaction original goal longer guaranteed required trigger condition operation goal violated operation applied high water signal 
process correctness goal operationalization needs reconsidered time new operation added model course undesirable 
avoid problem induced generative semantics languages larch temporal logic formalisms taken dual perspective pruning semantics operational specifications viewed restrictions state transitions allowed specifications prune set admissible histories system 
incremental elaboration reasoning composition partial models possible provided frame problem handled appropriate way 
take approach handle frame problem built axioms semantics order relieve specifier obligation explicitly state change 
frame axiom attribute relationship variable declared output clause specification operation left unchanged application operation 
note built axiom incompatible incremental elaborations partial models semantics allows operations applied concurrently 
variable output operation free change application operations provided applied concurrently operation 
frame axiom enforced requiring conditions operation refer state variables explicitly declared output clause operation way similar larch 
frame axiom state transition satisfies domain pre postconditions operation corresponds application operation 
second axiom corresponds meta rule rigorous operation op dompre op op performed op note axiom incompatible incremental elaborations partial specifications 
say operation cause transition state satisfying domain precondition state satisfying domain postcondition 
force simultaneous application operations overlapping domain pre postconditions allows multiple views combined synchronization operations discussed 
illustrate second frame axiom enables reason locally correctness goal come back operationalization goal maintain trigger condition operation required precondition operation see section 
condition requires operation performed high water flag 
second frame axiom instantiated operation states transition state pump switch state corresponds application operation 
guarantees goal operationalization complete operation turns pump switch added model case second frame axiom allow new operation included operation included 
second frame axiom bears similarities frame axioms locality axioms 
formal semantics goal operationalization formal semantics operation model defined mapping construct operational language temporal logic assertions 
mentioned operation defines relation states relation defined domain pre postconditions operation 
operation op operation model logical variables arg argn arguments res results introduce temporal logic predicate denoted op arg argn res expresses operation currently applied arguments results 
definition semantics operations 
operation op operation model predicate op defined follows op arg argn res dompre op op dompre op op domain precondition postcondition operation respectively 
definition states application operation implies operation domain precondition satisfied state application domain postcondition satisfied state application ii state transition satisfies domain pre postconditions operation corresponds application operation 
condition ii captures second frame axiom 
example operation predicate associated operation section defined follows pumpswitch pumpswitch denote op op op sets required pre trigger postconditions operation op operation model respectively 
define formal semantics conditions introduce temporal logic predicate required condition denoted definition semantics required pre trigger postconditions required condition operation op operation model predicate defined follows op def op op def dompre op op op def op definition standard notation universal closure example semantics required trigger condition operation section expressed temporal logic assertion pumpswitch turn definition semantics goal operationalization 
introduced set required pre trigger postconditions operationalizes goal satisfaction required conditions corresponding operations guarantees satisfaction goal 
definition correctness goal operationalization 
set rn required conditions operations operation model correctly operationalize goal model iff conditions hold 
rn completeness 
rn false consistency 
rn minimality completeness condition goal operationalization similarities corresponding condition goal refinement 
important difference semantics goal operationalization rely domain properties guarantee satisfaction goal 
due fact agent responsible goal may rely domain properties realize goal 
second important difference definition minimality condition 
operationalization condition requires requirements operationalizing goal stronger required goal 
related fact agent responsible goal capability satisfying goal restrictive required goal 
formal specification goals operations allows completeness consistency minimality formally verified 
example completeness operationalization goal maintain section established verifying proof obligation step pumpswitch pumpswitch goal predicates defined definition pumpswitch pumpswitch pumpswitch pumpswitch 
minimality condition obtained inverting antecedent consequent formula verified similarly 

iz ation patterns concern define inference rules semantics allow complete consistent minimal operationalization derived goal specification real time linear temporal logic rt ltl 
operationalization takes form set operations specified domain required pre post trigger conditions 
derivation rules correspond operationalization patterns defined frequent goal specification patterns 
operationalization pattern operationalization link goal specification pattern rt ltl set required pre trigger postcondition specification patterns operationalize root correctly sense definition 
proof correctness respect semantics goal operationalization done patterns specifier relieved tedious proofs completeness consistency minimality 
constructively patterns guide specifiers process deriving operational specifications system goals 
sample patterns various examples order highlight benefits approach process building pattern catalog discussed 
sample patterns shows pattern operationalizing goals form mt meta variable target state formula meta variable formula current state possibly past states 
operation model fragment pattern states order operationalize goal operations introduced appropriate domain specific renaming operation op domain pre postcondition pair required trigger condition stating operation applied holds provided holds operation op domain pre postcondition pair required precondition stating operation may applied hold 
correctness pattern established proving conditions definition 
example completeness easily proved verifying assertion temporal verifier step operationalization goal maintain operations section derived instantiation immediate achieve pattern 
patterns course instantiated completely different situations 
example consider flight control system goal reverse thrust enabled wheels pulse mentioned section goal specification matches root immediate achieve pattern derived instantiations operational specifications derived operation op dompre operation op dompre immediate achieve pattern operation dompre operation dompre shows frequently pattern operationalizing bounded achieve goals 
applicability goal form wheret target state condition reached condition current possibly past state 
explanation operation model fragment bounded achieve pattern states order operationalize goal form operation op considered domain pre postcondition pair required trigger condition stating operation applied remained false true time units ago true 
example come back mine pump case study consider goal achieve 
formal specification goal critical alarm goal matches root bounded achieve pattern operational specification derived instantiation matching meta variables operation dompre alarm alarm alarm critical alarm derived trigger condition captures obligation perform operation measure critical level time units ago alarm remaining 
shows frequently pattern operationalizing maintain avoid goals 
applicability goal general form state formula maintained condition current possibly past state new condition true true instantly enforceable state holds operational specification languages equipped synchrony hypothesis scr condition hold root goal simplifies tw :10.1.1.17.6363
explanation operation model fragment inbetween invariance pattern states order operationalize goal form operations op op considered domain pre postcondition pair required trigger condition stating operation applied holds provided holds second domain pre postcondition pair required precondition stating operation may applied true back including time true 
example consider goal simplified light control system 
goal maintain informaldef room light remain time person entering room time person leaving 
formaldef room light light goal specification matches root inbetween invariance pattern operational specification derived instantiation matching meta variables operation input room room light dompre light operation input room room light dompre light required precondition captures light may turned entry room detected back time exit room detected lights 
note derived precondition original goal formulated require light turned soon exit occurs 
note operator introduced goal specification ensure goal realizable agent detect entry switch light state 
benefits operationalization patterns argue operationalization patterns helpful variety reasons 
limited experience operationalization patterns far arguments grounded extensive experience patterns upstream phase goal refinement industrial projects undertaken consulting 
abstraction formal details checking completeness consistency minimality operationalization practice tedious complex error prone 
mentioned pattern proved inclusion catalog 
patterns involving propositional qualitative temporal logic proved correct step verification tool operation op dompre bounded achieve pattern operation op dompre operation op dompre inbetween invariance pattern ones real time constructs proved hand 
user pattern gets instantiated hidden correctness proof free 
completeness assurance sketch goal produced just intuition tend incomplete 
matching incomplete operationalization corresponding pattern allows missing operational specifications pointed 
running example sketch operationalization goal maintain typically produced operation required trigger condition 
matching operationalization immediate achieve pattern revealed missing required precondition operation 
experience similar patterns completing goal refinements suggests particular patterns may extremely helpful practice 
guidance writing operational specifications various examples pattern instantiation suggested patterns constructively incrementally identify operations relevant goal derive requirements operations needed achieve goal 
contrasts traditional formal methods complete model provided posteriori analysis take place 
goal mining operational specifications operationalization patterns bottom elicit goals underlying available operational specification 
pattern usage important initial formulations preliminary material provided requirements engineers tend practice operational 
goal mining operational specifications allows various goal level analysis checking operational formulation completeness respect goals left implicit identifying resolving obstacles goal achievement order produce robust requirements identifying resolving conflicts goal level exploring alternative system proposals 
illustrate pattern goal mining operational specifications consider excerpt initial problem statement simple autopilot pilot dials altitude feet current altitude presses alt eng button altitude mode directly engage 
altitude engage mode change armed flight path angle select mode engaged 
informal formulation refers operations required conditions applications 
instance operation may specified follows operation input autopilot output autopilot dompre goal occurs immediate achieve pattern matches domain pre post required trigger condition root goal specification obtained rationale trigger condition goal achieve formaldef autopilot occurs higher level goals elicited asking questions 
resulting goal graph provide rationale operational problem statement provided goal level analysis performed inferred goal structure 
inductive goal inference procedure discussed bottom operationalization patterns different starts concrete scenarios interaction agents starts operational specifications 
catalog operationalization patterns discuss relevant operationalization patterns identified organized 
identifying patterns way identifying operationalization patterns concrete examples goal 
unfortunately large body specifications available patterns inferred 
constructive elaboration operational requirements goal specifications widely adopted previous derivations operational requirements goals done ad hoc fashion fully precise semantics operationalization 
decided explore space operationalization patterns basis patterns goal operationalized 
order get rich set goal patterns extended specialized high level achieve maintain patterns kaos language specification patterns adapted 
goal patterns due unrealizability problems impossibility evaluate condition refers evaluate condition react state 
goal patterns taxonomy identified proved corresponding operationalization patterns 
goal patterns achieve maintain avoid unbounded achieve bounded achieve immediate achieve state invariance taxonomy goal patterns transition invariance mt global invariance invariance inbetween invariance tw shows current taxonomy goal patterns 
name hierarchy may pattern variants example pattern fig 
variant inbetween invariance pattern fig 

current catalog operationalization patterns downloaded 
coverage catalog construction coverage catalog operationalization patterns relative coverage taxonomy goal patterns 
effectiveness approach assumption properties occur practice specified small set specification patterns 
assumption partly supported empirical evidence 
dwyer report examples property specifications literature matched patterns 
limited experience rare cases goals write match general patterns 
taxonomy certainly complete enriched additional goal patterns haven specifications 
extensions taxonomy goal specification patterns trigger identification corresponding operationalization patterns catalog 
granularity taxonomy patterns probably important issue coverage 
taxonomy goal specification patterns corresponding catalog operationalization patterns composed propositional patterns mainly 
goals operationalized general match propositional patterns strict application corresponding operationalization pattern may produce operational specifications pre trigger post conditions coarsegrained due propositional nature pattern involved 
goal refinement patterns enrich catalog order patterns 
number variants finer grained level large useful coverage hypothesis properties occurring practice specified small set patterns longer hold consider finer grained order patterns 
experienced goal refinement patterns operationalization patterns may prove helpful match perfectly 
cases produce sketch specification adapted second phase 
adapted specification formally model checked respect originating goal 
specification environment currently building interacts tools alcoa nusmv purpose 

growing consensus complex software requires models analysis validation early phases software development 
formal methods take granted models available consider process building model focussing resulting product 
usually model fairly operational needs complete analysis take place 
analysis amounts form model debugging 
described effort complement analysis techniques building operational models higher level abstractions system objectives requirements engineers reason elicit requirements 
gave formal semantics notion operationalization discussed features language provides order support incremental operationalization process reasoning techniques applicable partial models 
operationalization patterns amount high level inference rules deriving pieces operational specifications compositionally constructively 
pattern proved produce complete consistent minimal operationalization hides formal details may fairly different situations various examples aimed suggesting 
patterns may guiding specification building process pointing incomplete mining goal structures operational specifications 
derivation rules proposed goal operationalization :10.1.1.36.7311
rules limited coverage rely formal semantics operations defined ensure completeness consistency minimality goal 
operationalization patterns domain independent sense orthogonal domain specific task specific model patterns 
provision tool support way context wider ongoing project faust formal analysis specification tools 
pattern management tool environment building provide facilities retrieving matching patterns instantiate create new patterns new variants existing ones find near matches adapt instantiations produced 
tool designed generic manage refinement obstruction conflict operationalization patterns 
tool expected cooperate faust animator generates parallel finite state machines operational specifications animate allow specification derivation adequacy checking proceed hand hand 
compared extensive experience goal refinement patterns industrial projects limited experience date operationalization patterns consists handling wide variety case studies literature specification including non trivial ones 
preliminary experience far confirms observed goal refinement patterns patterns helpful informally guide specification drafts formally patterns provide helpful guidance formal instantiations produced need subsequently adapted specifics problem hand 

reported partially supported de project actions de recherche nr 
belgian fond national de la recherche scientifique 
grateful fse reviewers help improving aspects presentation 

back calculus refinements program derivation acta informatica vol 

borgida mylopoulos reiter changes frame problem procedure specifications proc 
icse th international conference software engineering baltimore may 
borger light control case study problem description journal universal computer science vol 

butler 
requirements capture pvs specification simple autopilot 
nasa technical report 
nasa langley research center may 
chung nixon yu mylopoulos non functional requirements software engineering kluwer academic 
dardenne van lamsweerde fickas goaldirected requirements acquisition science computer programming vol :10.1.1.36.7311

darimont van lamsweerde formal refinement patterns goal driven requirements elaboration proc 
fse fourth acm symp 
foundations software engineering san francisco october 
dijkstra discipline programming 
prentice hall 
dwyer avrunin corbett patterns property specifications finite state verification proc 
icse st intl 
conference software engineering los angeles may 
fiadeiro maibaum temporal theories modularisation units concurrent system specification formal aspects computing vol 
pp 

fickas helm knowledge representation reasoning design composite systems ieee trans 
software engineering june pp 

fowler analysis patterns reusable object models 
addison wesley 
guttag horning jones garland wing 
larch languages tools formal specification 
springer verlag 
harel naamad statemate semantics statecharts acm trans 
software eng 
methodology vol 
october pp 

heitmeyer jeffords labaw automated consistency checking requirements specifications acm trans :10.1.1.17.6363
software engineering methodology vol 
july pp 

jackson software requirements specifications 
acm press addison wesley 
jackson structuring specifications views acm transactions software engineering methodology vol 
october 
jackson automating order relational logic proc 
fse acm sigsoft conf 
foundations software engineering 
san diego november 
jackson problem frames analyzing structuring software development problems 
addison wesley 
jones 
systematic software development vdm 
nd ed prentice hall 
joseph real time systems specification verification analysis 
prentice hall 
specifying message passing time critical systems temporal logic lncs springer verlag 
kramer magee sloman conic integrated approach distributed computer control systems iee proceedings part january pp 

lamport temporal logic actions acm transactions programming languages systems vol 
may 
van lamsweerde darimont massonet goaldirected elaboration requirements meeting scheduler problems lessons learned proc 
re nd int 
symp 
requirements engineering york ieee 
van lamsweerde darimont letier managing conflicts goal driven requirements engineering ieee transactions software engineering vol 
nov pp 
van lamsweerde inferring declarative requirements specifications operational scenarios ieee trans 
sofware 
engineering special issue scenario management dec pp 

van lamsweerde letier handling obstacles goal oriented requirements engineering ieee transactions software engineering special issue exception handling october 
van lamsweerde requirements engineering year research perspective 
invited keynote proc 
icse nd international conference software engineering acm press pp 

van lamsweerde formal specification roadmap 
software engineering finkelstein ed acm press pp 

van lamsweerde goal oriented requirements engineering guided tour 
invited proc 
re international joint conference requirements engineering toronto ieee august pp 
letier reasoning agents goal oriented requirements engineering 
ph 
thesis university louvain may www info ucl ac people thesis html 
letier van lamsweerde agent tactics goal oriented requirements elaboration proc 
icse th intl 
conf 
software engineering orlando ieee cs press may 
maibaum temporal reasoning deontic specifications ch 
meyer wieringa eds deontic logic computer science normative system specification wiley pp 

manna pnueli temporal logic reactive concurrent systems springer verlag 
manna step group step deductive algorithmic verification reactive real time systems proc 
cav th intl 
conf 
computer aided verification lncs springer verlag july pp 

massonet van lamsweerde analogical reuse requirements frameworks proc 
re rd int 
symp 
requirements engineering annapolis 
morgan programming specifications nd edition prentice hall 
parnas madey functional documents computer systems science computer programming vol 
pp 

potter sinclair till 
formal specification prentice hall 
zave jackson dark corners requirements engineering acm trans 
software eng 
methodology vol 
january pp 

