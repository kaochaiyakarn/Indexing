push relabel framework submodular function minimization applications parametric optimization lisa fleischer satoru iwata august combinatorial strongly polynomial algorithms submodular function minimization devised independently iwata fleischer fujishige schrijver 
improve running time schrijver algorithm designing push relabel framework submodular function minimization sfm 
extend algorithm carry parametric minimization strong map sequence submodular functions asymptotic running time single sfm 
applications include algorithm finding lexicographically optimal base 
function defined subsets finite ground set submodular satisfies uy 
submodular functions arise combinatorial optimization various fields 
examples include cut capacity functions matroid rank functions 
submodular function minimization sfm problem finding subset strongly polynomial time algorithms sfm introduced schrijver ll 
algorithms ellipsoid method 
combinatorial polynomial time algorithms developed iwata fleischer fujishige schrijver 
algorithms build cunningham design combinatorial polynomial algorithm testing membership matroid poly combinatorial pseudopolynomial time algorithm general sfm 
iwata fleischer fujishige design weakly strongly polynomial algorithms employing scaling techniques design algorithms minimum cost submodular flow 
schrijver describes combinatorial strongly polynomial algorithm builds directly part done fields institute university toronto toronto ontario canada 
part appeared proceedings nd acm symposium theory computing 
school industrial administration carnegie mellon university pittsburgh pa usa 
par tially supported nsf eia ccr 


edu 
department mathematical engineering information physics graduate school engineering university tokyo ku tokyo japan 
email tokyo 
ac 
jp 
algorithm said run pseudopolynomial time run time depends polynomially absolute value largest number appearing input 
case sfm absolute value largest number represent function value 
algorithm testing membership matroid polyhedra 
algorithms worst case complexity ivi denotes maximum absolute value function values ff denotes time function evaluation time determine algorithm runs time 
improved version schrijver algorithm 
algorithm depends novel subroutine reduce interval described section 
uses subroutine lexicographic framework layered network manner similar augmenting path algorithms tardos tovey trick 
design simpler push relabel framework sfm reduces number subroutine calls factor resulting algorithm runs ff time 
push relabel framework introduced goldberg tarjan maximum flow problem 
subsequently applied intersection fujishige zhang 
gallo tarjan extended push relabel algorithm solve monotone para metric maximum flow problems increase time complexity 
iwata discussed extension result intersection 
showed strong map sequence submodular functions plays similar role monotone parametric network 
analogously extend push relabel algorithm sfm solve parametric minimization problem strong map sequence 
show parametric submodular function minimization algorithm solve related problems asymptotic time solving sfm push relabel algorithm minimizing positive vector finding lexicographically optimal base 
concept lexicographically optimal base introduced fujishige generalization lexicographically optimal flow earlier defined megiddo 
existence combinatorial polynomial time algorithms general sfm common algorithms required minimizing submodular functions having access oracle 
done reasons ellipsoid method viewed tool proving polynomial solvability practically efficient algorithm specific submodular functions may efficient specialized algorithms minimization 
manner fujishige devised algorithm finding lexicographically optimal base uses calls oracle sfm algorithm finding lexicographically optimal flow solving maximum flow problems designates number terminal vertices 
gallo tarjan described find lexicographically optimal flow asymptotic running time single maximum flow computation push relabel algorithm 
show exploit structure combinatorial algorithm submodular function minimization find lexicographically optimal base ff time asymptotic time improved version algorithm sfm 
improves factor analysis algorithm fujishige obtained simply algorithm sfm oracle 
notation definitions denote set integers set reals respectively 
finite nonempty set cardinality ivi vector set define 
denote xu unit vector xu xu assume loss generality submodular function associate base polyhedron defined rv vx vector called base 
aset vis called tight holds 
extreme base extreme point 
total order greedy algorithm produces extreme base setting note implies tight set indices total orders denote yi extreme base generated greedy algorithm 
interval note may empty 
define total order obtained moving just relations extreme base generated greedy algorithm 
submodular function minimization schrijver algorithm combinatorial algorithms submodular function minimization dual charac minimizer 
define mint theorem edmonds vector reduction implies max min 
important note maximizer left hand side extreme base 
extreme easy show simply exhibit total order generates greedy algorithm 
extreme problem verifying problem determining 
unfortunately efficient algorithm known relying general sfm 
avoid problem representation base convex combination extreme bases ai ai 
subsequent algorithms general sfm 
greedy algorithm returns base natural idea start base move maximizer left hand side 
way move base base increase element decrease element amount 
determine maximum feasible step size new vector xv xu determine minimum value sets 
quantity called exchange capacity computing problem minimizing submodular function 
avoid obstacle computing exact exchange capacities schrijver proposes method computing lower bounds exchange capacities framework performing exchanges leads strongly polynomial algorithm sfm 
iyi algorithm solves membership problem possible find minimum arbitrary submodular function binary search method 
asking function defined re nonempty possible determine minimum value greater 
lower bound arbitrary submodular function define vu 
submodular 
computing equivalent finding minimum value pair schrijver introduces subroutine moves reducing il number total indices attain maximum 
maintaining affinely independent representation applications base iteration satisfies 
schrijver subroutine described follows 
reduce interval input total order output constant decomposition yi xt xs convex combination suppose red uce returns ue try 
total orders generated subroutine satisfy properties set strictly contained yi yi yi yi attain maximum coefficient yi convex representation replacing ai re try new base ai try iyi ilx xt xs new index set total orders convex representation smaller fewer total orders obtain value 
takes time determine expression yi xt xs 
operation number total orders expression new base may increased time 
reduce interval takes ff time 
schrijver describes modification layered network algorithm find minimizer calling reduce interval times 
describe embed reduce interval push relabel framework minimize submodular function calls reduce interval 
speedup mirrors improvement run time push relabel algorithms layered network algorithms maximum flow algorithm 
giving faster algorithm push relabel framework adaptable generalizations maximum flow parametric maximum flow 
show sections case submodular function minimization 
push relabel framework push relabel algorithm works graph vertex set arc set ai maintains distance labels vertices 
definition labeling valid satisfies ar 
push relabel algorithm maintains valid labeling 
initially clearly valid 
note valid distance labeling lower bound minimum number arcs valid labeling define push relabel algorithm maximum flow maintains flow satisfies capacity constraints conservation 
vertices allowed excess flow coming going 
operations push relabel apply vertex excess 
setting submodular function minimization algorithm simply maintain base convex combination extreme bases 
operations push relabel apply elements operation relabel applies 
new removed algorithm 
operation push applies results 
accomplishes repeatedly selecting largest interval applying subroutine reduce interval get convex decomposition re try yi xt xs 
updates xt xs min 
update change new convex combination coefficients updated ehr set augmented indices ir total orders nonzero coefficients final coefficients indices ir obtained adding existing coefficient coefficient ir computed 
standard linear programming technique reduced affinely independent set members time 
entire sequence repeated occurs call push saturating 
push nonsaturating 
call subroutine reduce interval maximum size intervals decreases number total orders attain maximum decreases 
push performs calls reduce interval 
operations algorithm follows 
algorithm starts fixing arbitrary total order highest apply procedure scan 
goal scan obtain certify push operation applicable case relabel operation applicable 
procedure scan repeatedly picks vertex order possible examined scan ends non saturating push time scan invoked starts done keeping pointer indicates current vertex examined scan algorithm increments performs saturating push finds push applicable 
vertex relabel resets vertex algorithm terminates empty 
algorithm summarized 
correctness complexity lemma operations push relabel maintain valid 
proof 
start valid 
operation relabel applicable maintains valid 
suppose valid reduce interval introduces new arc 
new arc ai ai remains valid push operation 
push relabel fix total order obtained greedy algorithm 
iv iv element max 
start scan 
push 
updates scan 
relabel 
updates 
set vertices reachable 
return description push relabel algorithm finding minimizer submodular function 
lemma termination set vertices directed path minimizer proof 
ifn vw 
implies 
arc enters set yi tight implies 
set minimizer holds implies minimizer argument proof lemma subset vp arc vx minimizer algorithm vertex algorithm performs relabel operations total 
sequence lemmas bounds number push operations 
lemma relabel applicable algorithm resets scan 
proof 
suffices establish algorithm resets arc imply applied 
suppose reduce interval introduces 
proof lemma inequality tightened 
hand 
case 
corollary algorithm performs saturating pushes 
proof 
saturating push incremented 
saturating pushes relabeled 
label exceeds saturating pushes element saturating pushes total 
lemma non saturating push scan algorithm performs relabel proof 
consequence non saturating push 
applying scan algorithm increase push 
implies highest label selection rule relabel operation time push invoked 
corollary number non saturating pushes 
proof 
relabel operations course algorithm number times push non saturating 
vertices implies nonsaturating pushes 
algorithm performs relabel push operations 
push operation calls reduce interval times reduce interval invoked times total 
push relabel algorithm runs time 
algorithm reverse direction arcs replace roles 
case push operation performed vertex negative 
algorithm ends 
implies minimizer set vertices reachable arcs minimizer call variant reverse push relabel 
parametric submodular function minimization gallo tarjan modify maximum flow push relabel algorithm goldberg tarjan solve parametric network flow problem 
consider flow network arc capacities functions parameter arc leaving source increasing entering sink decreasing arcs constant capacities 
called monotone parametric network 
show sequence parameter values ok minimum cuts maximum flows computed values asymptotic time push relabel maximum flow computation 
setting submodular functions consider generalization special parametric flow problem 
submodular function said strong quotient implies denote relation say relation strong map 
lemma minimal maximal minimizer contained minimal maximal minimizer show parametric flow problem special case strong maps consider fixed value parameter denote set arcs leaving cut function defined subsets vts submodular function 
easy check 
special case strong map sequence set functions obtained submodular function nonnegative vector rv set functions tw increasing sequence 
lw tw 
show minimizer submodular functions strong map sequence fl fk asymptotic time single submodular function minimization push relabel algorithm 
algorithm consists iterations 
iteration finds minimizer ft iteration starts valid labeling applies push relabel algorithm sfm terminates 
subsequent iteration starts final distance labeling previous iteration appropriately defined base ft current labeling valid respect resumes push relabel algorithm inputs 
obtain initial base ft iteration ic ki convex combination extreme bases ft obtained previous push relabel iteration 
bases ft generate base yi ft set 
extreme bases convex combination changed total orders generating changed 
implies 
furthermore lemma implies yi aii implies implies valid labeling respect lemma yi denote respectively extreme points obtained applying greedy algorithm 
yi total order discuss time complexity algorithm 
validity implies total number relabel operations 
total number push operations na 
generate initial base ft iteration apply greedy times generate extreme bases 
takes total arithmetic steps function evaluations function strong map sequence 
algorithm requires kn oracle calls additional arithmetic steps 
algorithm runs time complexity push relabel algorithm single submodular function minimization long 
note algorithm run fi obtained line manner course algorithm 
fact section 
may interested computing minimizers opposite order minimizer need invoke push 
moving function obtain new base way 
check labeling valid just opposite case showing new base holds lemma new function strong quotient old function 
applications finding weighted minimizer application finding minimizer positive vector seek smallest value set 
computed discrete newton method follows 
start ct serves upper bound 
find minimizer ctw 
current optimal value decreasing positive 
set strictly contained update gives improved upper bound 
repeating eventually obtain optimal implies may apply algorithm strong map submodular functions solve problem asymptotic time single push relabel submodular function minimization 
lemma number visited algorithm finding lexicographically optimal base related application finding lexicographically optimal base 
concept introduced megiddo multi terminal network flow 
fujishige generalized framework 
weight vector satisfying base denote sequence numbers arranged increasing order 
base said lexicographically optimal lexicographically maximum bases 
lexicographically maximum base may extreme base 
fujishige showed uniqueness lexicographically optimal base described algorithms find 
base denote distinct values ofx put hj jw 
fujishige proved lexicographically optimal base hj hj holds 
lexicographically optimal hj ctw hj hj ctw hj suggests finding appropriate hi minimizer ctw parameter fact fujishige recursive algorithm computing lexicographically optimal base 
minimize submodular function aw 
aw aw case lexicographically optimal base base satisfy aw 
unique minimal minimizer aw 
minimal minimizer set elements reach ax 
fw restriction respect defined fw fw denote contraction respect defined fw kj vw 
compute lexicographically optimal base tm fw respect lexicographically optimal base xw fw respect tm xw defined xw xw vw lexicographically optimal base discuss efficient implementation recursive algorithm similar lexico graphically optimal flow algorithm gallo tarjan 
sufficiently small number alw nonnegative 
instance select min 
apply reverse push relabel algorithm alw obtain base valid labeling dl 
similarly sufficiently large number minimizes 
instance select max 
apply ordinary push relabel algorithm obtain base valid labeling 
perform recursive procedure slice oz xl dl 
procedure slice cl xl compute unique minimal minimizer applying ordinary reverse push relabel algorithms 
ordinary starts reverse starts concurrently execute algorithms terminates 
suppose ordinary terminates base valid labeling 
case symmetric 
return iwi compute tm xw applying respectively slice tm cl slice fw iwi continue reverse algorithm replace resulting ones apply slice tm dl finding tm slice fw finding xw 
lexicographically optimal base obtained divide ground set complement introduce new labelings half ground set 
entire algorithm deals labelings performs relabel operations total 
algorithm finds lexicographically optimal base time 
running time push relabel algorithm sfm previous best algorithm due fujishige requires calls oracle sfm 
grateful tom mccormick useful comments referees suggestions improved presentation 
cunningham testing membership matroid polyhedra combinatorial theory 
cunningham submodular function minimization combinatorica 
nonlinear fractional programming management sci 
edmonds submodular functions matroids certain polyhedra combinatorial structures applications guy sauer eds gordon breach 
fleischer iwata mccormick faster capacity scaling algorithm sub modular flow math 
programming appear 
fujishige lexicographically optimal base respect weight vector math 
oper 
res 
fujishige zhang new algorithms intersection problem submodular systems japan 
appl 
math 
gallo tarjan fast parametric maximum flow algorithm applications slam cornput 
goldberg tarjan new approach maximum flow problem cm 
lovasz schrijver ellipsoid method consequences combinatorial optimization combinatorica 
lovasz schrijver geometric algorithms combinatorial optimization springer verlag 
iwata capacity scaling algorithm convex cost submodular flows math 
programming 
iwata fleischer fujishige combinatorial strongly polynomial algorithm minimizing submodular functions cm appear 
iwata mccormick strongly polynomial cut canceling algorithm submodular flow problem proceedings seventh mps conference integer programming combinatorial optimization 
iwata fast parametric submodular intersection algorithm strong map sequences math 
oper 
res 
megiddo optimal flows networks multiple sources sinks math 
programming 
schrijver combinatorial algorithm minimizing submodular functions strongly polynomial time combinatorial theory 

tardos tovey trick layered augmenting path algorithms 
math 
oper 
res 
minimizing submodular function lattice oper 
res 

