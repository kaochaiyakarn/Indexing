journal arti cial intelligence research submitted published monitoring teams overhearing multi agent plan recognition approach gal kaminka cs cmu edu computer science department carnegie mellon university pittsburgh pa usa david pynadath pynadath isi edu milind tambe tambe usc edu computer science department information sciences institute university southern california admiralty way los angeles ca usa years seeing increasing need line monitoring teams cooperating agents visualization performance tracking 
monitoring deployed teams rely agents communicate state monitoring system 
presents non intrusive approach monitoring overhearing monitored team state inferred plan recognition team members routine communications exchanged part coordinated task execution observed overheard monitoring system 
key challenges approach include demanding run time requirements monitoring observations increasing monitoring uncertainty need scale monitoring address potentially large teams 
address set complementary novel techniques exploiting knowledge social structures procedures monitored team cient probabilistic plan recognition algorithm suited processing communications observations ii approach exploiting knowledge team social behavior predict observations execution reducing monitoring uncertainty iii monitoring algorithms trade expressivity scalability representing certain useful monitoring hypotheses allowing number agents di erent activities represented single coherent entity 
empirical evaluation techniques combination apart monitoring deployed team agents running machines physically distributed country engaged complex dynamic task execution 
compare performance techniques human expert novice monitors show techniques capable monitoring human expert levels despite di culty task 

years seen tremendous growth applications involving distributed multi agent teams formed agents collaborate speci joint task jennings kumar cohen kumar cohen levesque lesser lenser bruce veloso barber martin 
growth led increasing need monitoring techniques allow synthetic agent human operator monitor identify state distributed team 
previous discussed critical role monitoring visualization ndumu nwana lee identifying failures execution providing advice improve performance aiello sera ni facilitating collaboration monitoring agent members team grosz kraus 
ai access foundation morgan kaufmann publishers 
rights reserved 
kaminka pynadath tambe focuses monitoring cooperative agent teams overhearing internal communications 
allows human operator synthetic agent monitor coordinated execution task listening messages team members exchange 
contrasts previous techniques impractical settings direct observations team members unavailable team members physically distributed away observer large scale applications composed deployed agents dynamically integrated jointly execute task 
example common technique report monitoring requires monitored communicate state monitoring agent regular intervals team member changes state 
reporting provides monitoring agent accurate information state team 
unfortunately report monitoring su ers di culties monitoring large deployed teams interest real world see section detailed discussion requires intrusive modi cations behavior agents report state needed di erent monitoring applications 
agents deployed repeated modi cations behavior agents di cult implement complex manage 
particular legacy proprietary systems notoriously expensive modify instance consider notorious modi cations address year bug 
second bandwidth requirements report monitoring relies communication channels unrealistic jennings grosz kraus :10.1.1.37.83
addition network delays unreliable lossy communication channels key concern report monitoring approaches 
advocate alternative monitoring approach multi agent keyhole tambe huber hadley devaney ram intille bobick kaminka tambe 
approach monitoring system infers unobservable state agents observable actions knowledge plans give rise actions 
approach non intrusive requiring changes agents behaviors allows changes requested monitoring information 
assumes access knowledge plans may explain observable action knowledge readily available monitoring system assume deployed collaborative environment 
cases monitoring system may deployed human operator team 
additional bene approach rely inference compensate occasional communication losses robust communication failures 
general observable actions agents distributed team routine communications agents exchange part task execution ndumu 
fortunately growing popularity agent integration tools tambe pynadath das kaminka martin cheyer moran agent communications finin labrou may eld reed increases standardization aspects agent communications provides increasing opportunities observing interpreting inter agent communications 
assume monitored agents truthful messages communicating teammates attempting deceive monitoring agent prevent overhearing deployed human operator team 
possibly stochastic model plans agents may executing monitoring system plan recognition infer current state agents observed routine messages 
application plan recognition techniques overhearing poses signi cant challenges 
key characteristic overhearing task scarcity observations 
explanations overheard messages observed actions fairly easy disambiguate uncertainty arises relatively observe team members practice continuously communicate state jennings grosz kraus 
team members change state keeping quiet 
key characteristic overhearing observable actions inherently multi agent actions agents communicate single agent sends messages 
implicitly act monitoring teams overhearing role communications listening 
despite scarcity observable communications multi agent nature observed actions monitoring system infer state agents team times 
previous investigations multi agent plan recognition tambe devaney ram intille bobick kaminka tambe typically assumption changes state agents observable ect uncertainty resulted ambiguity explanations observed actions 
furthermore investigations addressed settings observable actions individual action carried single agent 
addition challenges unique overhearing monitoring system address additional challenges stemming monitoring service visualization 
representation algorithms support soft real time response reasoning done quickly useful visualization 
furthermore real world applications demand techniques scale number agents increases monitoring large teams 
current representations plan recognition computationally intense address single agent recognition tasks pynadath wellman 
multi agent plan recognition investigations typically explicitly addressed scalability concerns devaney ram intille bobick 
presents overseer implemented monitoring system capable monitoring large distributed applications composed previously deployed agents 
overseer builds previous multi agent plan recognition tambe intille bobick kaminka tambe utilizing knowledge relationships agents understand decisions interact 
previous techniques proved insu cient overseer includes number novel multi agent plan recognition techniques address scarcity observations severe response time scale requirements imposed realistic applications 
key contributions include linear time probabilistic plan recognition representation associated algorithms exploit nature observed communications ciency ii method addressing unavailable observations exploiting knowledge social procedures teams ectively predict ectively monitor observations normal failed execution allowing inference lack observations iii yoyo algorithm uses knowledge team organizational structure team hierarchy model agent team di erent parallel activities taken individual agents single structure modeling agent individually 
yoyo sacri ces expressivity ability accurately monitor team certain coordination failure states signi cant gains ciency scalability 
rigorous evaluation overseer di erent monitoring techniques application domains show techniques result signi cant boosts overseer monitoring accuracy ciency techniques explored previous 
evaluate overseer capability address lossy observations key concern report monitoring 
furthermore evaluate overseer performance comparison human expert novice monitors show overseer performance comparable human experts despite di culty task overseer reliance computationally simple techniques 
key lessons draw overseer combination computationally cheap multiagent plan recognition techniques exploiting knowledge expected structures interactions team members competitive approaches focus accurate modeling individual agents may computationally expensive 
organized follows 
section presents motivation design overseer examples actual distributed application overseer applied 
section presents novel single agent plan recognition representation associated algorithms particularly suited monitoring agent observed communications 
section explores methods overseer uses address uncertainty representation monitoring team agents 
section presents yoyo allows cient reasoning methods previously discussed 
section presents evaluation di erent techniques incorporated yoyo 
kaminka pynadath tambe section contrasts techniques previous related investigations nally section concludes presents plans 
addition appendices pseudo code algorithms discussed text portions data experiments readers may wish replicate experiments 

motivation illustrative examples considerations experience actual distributed applications directed plan recognition approach advocate 
considerations context illustrative complex distributed application evaluating overseer section 
application distributed team agents executes simulation evacuation civilians threatened location 
integrated system allows human commander interactively provide locations stranded civilians safe areas evacuation key points 
simulated helicopters coordinated mission evacuate civilians relying various information agents dynamically obtain information enemy threats re plan routes avoid threats obstacles distributed team composed diverse agents di erent research groups multi modal command input agent cohen johnston mcgee oviatt pittman smith chen retsina route planner payne sycara lewis hahn ariadne information agent knoblock minton ambite ashish modi muslea tejada synthetic helicopter pilots tambe johnson jones laird rosenbloom 
agents designed task built deployed prior creation team 
team integrated tambe accomplishes integration wrapping agent proxy maintains collaboration agents proxies 
proxies agents form team jointly executing distributed application described team oriented program 
program consists team hierarchy team decomposes subteams sub subteams 
plan hierarchy contains team plans decompose subteam plans assignment teams team hierarchy plans plan hierarchy 
example shows part team subteam hierarchy described 
instance transport subteam flight team subteam task force 
shows abbreviated plan hierarchy domain 
high level team plans evacuate typically decompose team plans process orders ultimately leaf level plans executed individuals 
temporal transitions constrain order execution plans 
teams assigned execute plans task force team jointly executes evacuate transport subteam executes transport operations transport ops step 
program application consists team plans 
plans may get executed repeatedly agent may execute hundreds plan steps part execution single team oriented program 
execute team oriented program proxy uses domain independent teamwork model called steam tambe 
teamwork model automatically generates communication messages required ensure appropriate coordination proxies 
instance steam requires agent privately obtains belief bel terminates team plan agent send message rest team terminate team plan private belief bel led termination 
avoid jamming communication channels ood messages single plan steam chooses communicate selectively 
communicating initiation termination plan led monitoring teams overhearing task force flight team transport escort route planner escort follow transport division 
escort lead evacuate 
task force execute mission task force process task force maneuvers zone landing 
fly flight plan flight team fly control route 
orders flight team flight team transport operations escort escort transport operations orders get get orders get orders role portions team hierarchy plan hierarchy domain 
dotted lines show temporal transitions 
messages generated run messages get exchanged run steam tambe 
displays messages exchanged team members evacuation application steam 
rst message sent proxy called members team team name task force 
content message indicates team terminate plan called determine number 
second message sent proxy called team auto members subteam team subteam 
content message indicates subteam establish commitment plan named prepare execute mission 
complete run appendix discussed section capability automated monitoring progress team critical 
need team monitoring ampli ed distributed settings human operator place directly observe agents executing remote location 
instance trial runs evacuation simulation application described monitoring requires series phone calls human operators di erent states trying verify successful execution system operating 
agent team located multiple computers room diversity agents extremely di cult observer automatically monitor state team just observing di erent agent output screens 
overseer built provide monitoring tracking routine communications agents 
plan recognition allows humans agents query plans entire team subteams individuals monitor progress compute likelihoods failure agent team communicates selectively plans executed overseer plan recognition faces signi cant uncertainty 
furthermore overseer able answer queries line ciently 
discussed addressing challenges required novel team plan recognition techniques developed 
considerations led away report monitoring applications 
report monitoring requires agents code modi ed communicate reports needed monitoring monitoring requirements change application information needed agent 
unfortunately agents kaminka pynadath tambe log message received fri sep logging agent message tell content terminate jpg constant determine number number determined kqml string receiver team kqml word reply nil kqml word team team kqml word sender kqml word kqml msg id isi edu kqml word log message received fri sep logging agent team auto message tell content team auto establish commitment prepare execute mission kqml string receiver team escort follow kqml word reply nil kqml word team team escort follow kqml word sender team auto kqml word kqml msg id dui isi edu kqml word example kqml messages observations overseer 
proxies deployed government laboratories universities 
modifying agents deployed location problematic intrusive interfere carefully designed timing speci cations tasks requiring modi cations agents developers 
distributed nature implies centralized server controls behavior agents changes required di erent proxy types 
general modifying legacy proprietary applications including integration architecture course known di cult process solution requires constant modi cations agents architecture scale 
second important consideration computational bandwidth requirements monitoring 
repeatedly noted literature expect agents able communicate continuously fully monitor agents jennings grosz kraus :10.1.1.37.83
team example regularly scheduled state reports agents required temporal resolution require approximately messages sent minute run number nearly doubling reach agents 
agents report state changes announcing plan initiation termination approximately messages sent 
order magnitude normal messages exchanged agents part routine execution 
network support bandwidth necessary report monitoring signi cant computational burden monitoring system process incoming reports 
hand plan recognition approach natural task 
doesn require changes behavior monitored agents suitable monitoring agents deployed 
second doesn add computational burdens monitored agents network uses observations available 
third main knowledge source plan recognition systems typically rely plan library fact easily available accessible form monitoring system team oriented program monitoring teams overhearing integrate agents operator deploying monitoring system assumed describe integration team oriented program rst place 
criticized assumption correct plan library fact satis ed fully monitoring application 
note assumption holds agents integration architecture knowledge rely possibly stochastic model components execution communications integrate 
focuses team oriented programs described techniques introduced appear generalizable types representation languages distributed systems tms decker team oriented programming tidhar 
furthermore plan library need contain details names key steps 
agents utilizing erent representations plan hierarchy monitored long execution states corresponding team oriented program order coordinate team rst place 
monitoring overhearing poses unique challenges previously discussed 
ers unique opportunities plan recognition 
earlier stated assumption agents truthful communications seek deceive teammates monitoring system prevent overhearing way encryption 
assumption justi ed monitoring system deployed operator monitored agents 
result failures team coordinate due clock asynchrony may cause corresponding failures monitoring 
additional assumptions messages monitored agents 
assumption allows plan recognition system treat observations certainty message overheard terminating plan monitoring system infer certainty plan longer executed 
eliminate plan recognition ambiguity 
multiple instantiations plan may exist message specify terminated 
second termination plan monitored team member choose multiple alternative plan steps follow choice evident observations 
di culty monitoring overhearing demonstrated human monitoring performance novice human monitors managed achieve approximately accuracy average 

monitoring team agents separate individuals section representation associated baseline algorithms support overhearing plan hierarchy team hierarchy 
making assumption agent independence observations beliefs agent state execution bearing beliefs agent state 
assumption traded assume team members successful coordination knowing agent begun executing joint plan naturally increase likelihood teammates begun agents independent 
fact successful teamwork requires interdependency agents grosz 
initial assumption agent independence provides baseline comparison closely follows current approaches multi agent plan recognition assume observations individual agent continuously available 
sections sections highlight unique challenges tackled monitoring overhearing take agent interdependencies account 
maintaining separate plan recognizer agent 
recognizer observes messages respective agent sends 
basis observations recognizer maintains probabilistic estimate state execution various plans agent may currently executing 
knowledge plans assigned agents team memberships kaminka pynadath tambe available application plan hierarchy team hierarchy team oriented program constructing monitored application 
section presents language probabilistic representation team oriented program 
exploit various independence properties team oriented programs achieve compact representation possible plan states agents 
section presents algorithm updating recognizer beliefs agents plan states observation message 
algorithm performs update ciency gained exploiting particular semantics communicated messages message observation indicates initiation termination particular plan certainty 
section presents algorithm updating recognizer beliefs agents plan states message observed 
absence evidence algorithm ciently updates recognizer beliefs temporal model agents plan execution strong markovian assumption 
section presents recognition procedure illustration complexity analysis procedure 
plan state representation address uncertainty monitoring probabilistic model supports quantitative evaluation recognized plan hypotheses 
monitoring agents duration execution time series plan state variables 
point time agent plan state state team oriented program currently executing path root leaf team oriented program tree 
represent plans program set boolean random variables fx variable true agent actively executing plan time represent beliefs agent actual state time probability distribution variables fx distribution includes dependencies di erent plans team oriented program parent child relationships temporal dependencies plan state times 
simplify dependency structure useful introduce additional boolean random variables done true plan executed time execution terminated time number possible representations capturing distribution performing inference variables 
generality plan hierarchy dynamic nature domain requirements task eliminate existing approaches consideration 
instance potentially generate dbn dynamic belief network represent probabilistic distribution plan variables 
include nodes representing plan variables representing done 
links nodes represent structure plan hierarchy parent child relationships temporal constraints ll conditional probability tables accordingly 
represent temporal progress team including nodes variables time slice add links nodes nodes represent dynamics conditional probability tables links 
transition node node add binary nodes indicating observation message transition 
plan hierarchy plan nodes corresponding dbn representation binary random variables 
standard dbn inference algorithms maintain belief state representing posterior probability distribution variables time slice conditioned observations far time 
inference algorithms update belief state incorporate new evidence variables compute time tick belief state extract desired probability plan state variables examining posterior probabilities stored dependency structure plan model space time complexity performing inference dbn incorporating single observation computing single agent 
monitoring teams overhearing dbn method su ciently cient support line monitoring real world domains time step recognizer perform inferential step exponential computational complexity 
exist single agent plan recognition techniques avoid exponential complexity dbns representation inference algorithms aimed particular properties plan recognition task pynadath wellman 
specialized representations avoid full generality dbns capturing broad class interesting planning agent models 
specialized representation single agent plan recognition algorithms exploit particular structure plan models achieve cient online inference 
drawing inspiration success single agent domains adopt similar methodology multi agent domain 
words developed novel plan recognition representation suited capturing team oriented programs 
structural assumptions representation support cient inference specialized algorithms naturally supporting extension represent inter agent dependencies discussed section 
represent team oriented plan directed graph vertices plans edges signify temporal hierarchical decomposition transitions plans children edges denote hierarchical decomposition plan sub plans 
sibling edges denote temporal orderings plans 
structure plan hierarchy variables fx form directed connected graph node hierarchical decomposition incoming transition parent node representing parent plan number temporal incoming transitions plans precede order execution 
graph may contain multiple nodes single plan plan potential child multiple parent plans 
node may number temporal outgoing transitions immediate successor sibling nodes representing plans may follow order execution number hierarchical decomposition outgoing transitions node rst children executed rst decomposition plan graph forms tree hierarchical decomposition transitions plan descendent 
hand may cycles temporal transitions siblings 
words plan may outgoing temporal transition meaning selected execution termination node temporal path leading back plan meaning rst node temporal sequence plans may executed repeatedly 
may alternative temporal paths leading indirectly node 
perform inference representation borrow standard dbn inference algorithms notion belief state dbn case belief state represents posterior probability distribution variables time slice conditioned observations far 
addition plan distinguish state actual execution blocked state indicating execution terminated execution successor begun agent process sending message 
block belief terminated agent begun execution successor block belief time monitored agent currently executing terminated 
precisely de ne block pr done je block pr done je denotes evidence received far 
recognizer observes message agent time updates previous belief state incorporating evidence new belief state method described section 
observe message agent time propagates belief new belief state method described section simulate plan execution time 
belief update observed message observing team communications recognizer expect occasionally receive evidence form messages sent individual agent member identify plan initiation termination 
incorporating evidence exploit assumption agents truthful kaminka pynadath tambe messages 
words observe initiation message plan time true certainty 
likewise observe termination message plan time done true certainty 
precisely algorithms section specialized exploit property observed communications observation pr pr done possible previously observed evidence messages assumed truthful remains ambiguity 
message uniquely speci es relevant plan uniquely specify relevant node 
words recognizer unsure particular node message refers graph may contain multiple nodes consistent message 
furthermore message announces termination plan ambiguity corresponding node remains ambiguity plan selected agent 
observations available overhearing tasks immediate interest fall level ambiguity 
evacuation scenario example nodes corresponding plan land troops instance land troops picking people transported dropping 
recognizer observes message indicating agent terminated land troops know certain agent begun executing land troops ambiguity node currently relevant 
furthermore may exist ambiguity plan agent select terminating land troops 
algorithm presents pseudo code complete procedure incorporating evidence observations 
algorithm incorporate evidence msg beliefs plans initialize distributions plans plans consistent initiation message plans precede block block block wx wx termination message plans succeed block block block xy xy normalize distribution plans block block propagate block tmp parent tmp null parent tmp block parent tmp block tmp block tmp parent tmp incorporating evidence observed initiation message lines suppose time observed message msg corresponds initiation 
plan consistent msg know certainty agent executing regardless evidence previously observed 
simply set belief true 
multiple plans consistent msg distribute unit probability consistent plan weighted prior belief seeing message 
prior belief depends predecessor plans may terminated prior seeing message 
support computation beliefs transitions predecessor plans successors beliefs seeing message transition overseer stores parameters 
probability entering successor plan predecessor plan just completed wx pr jw done 
probability seeing message agent took speci ed transition wx pr msg jw done 
monitoring teams overhearing previous runs acquire suitable values parameters producing frequency count transitions messages seen runs see section discussion overseer 
observation initiation message msg time wish distribute unit probability plans unblocked state consistent msg 
derive new belief plan time follows pr pr msg je pr denominator simply normalization factor candidate plans ignore derivation focus numerator expand possible predecessor plans possible termination states pr msg done je pr msg done je second term proceed terminated 
second term expand joint probability component conditional probabilities pr done 
pr jw done 
pr done je assume probability sending message distribution plan transitions obey markov property independent plan history time current plan time rst conditional probabilities independent previous history observations 
third exactly previous belief blocked pr done pr jw done block rst conditional probabilities exactly parameters wx wx block lines algorithm perform exactly derived summation equation normalization step carried line see 
similar procedure followed message observed indicating termination lines 
case know agent executing previous time step moved successor 
potential successor plans set belief proportional transition probability similar initiation message pr pr msg je pr kaminka pynadath tambe denominator normalization factor ignore 
expand numerator possible states execution pr msg done je pr msg done je pr msg done je pr msg done je rst term nonzero correspond states execution inconsistent observed message pr msg done je rewrite joint probability product conditional probabilities pr done 
pr jx done 
pr done je markovian assumptions simplify conditional probabilities rewrite third probability belief state pr done pr jx done 
block rewrite rst conditional probabilities parameters xy xy block lines algorithm perform exactly derived summation equation 
normalization sum line 
line normalizes sum recapture formed probability distribution 
note normalization step take account fact evidence may incorporated plan steps ancestor case evidence ancestor plan probabilistically redundant 
speci evidence descendent plan useful visualization accurate 
propagation evidence lines recalculated beliefs set line changes recursively propagated decomposition hierarchy plan children line call algorithm 
addition recalculated beliefs propagated plan ancestors decomposition hierarchy lines evidence child plan active evidence parent active 
assume knowledge relative likelihood child plans treat equally 
additional knowledge likelihoods easily exploit propagate algorithm 
belief update observation overhearing tasks great deal uncertainty agents complete execution plan steps agents necessarily send messages termination initiation plan 
messages observed time system beliefs time calculated possibility agents may initiated terminated plans monitoring teams overhearing algorithm propagate plan probability beliefs plans fc rst child plans block block propagate sending messages 
support necessary belief update need model plan execution provides probability plan termination time pr done 
principle probability distribution arbitrarily complex structure may vary enormously domain domain plan plan domain 
domains obtaining accurate model distribution requires complex knowledge acquisition domain experts complex learning process part agent 
addition accurate model may complex support cient online inference 
overseer uses temporal model supports cient inference simple parameter estimation procedures 
overseer models duration leaf plan exponential random variable 
words probability plan completing execution time units increases single parameter corresponds mean duration easily acquire domain experts previous runs 
inference exponential random variable markovian property probability plan completion times pr done jx independent long agent executing time strong assumption may fully hold real world domains approximation 
error associated approximation may acceptable enormous gain inferential ciency show remainder section 
ciency gains manifest overseer rolls model forward time compute belief state time slice 
exponential random variable model plan duration probability completion leaf plan constant plan plans children probability completion exactly probability completion child temporal ordering children 
having computed probability plan termination overseer evaluates plan agent may execute 
examines possible successors computes probability corresponding transition conditioned fact message observed xy prior probability message xy 
mentioned section overseer markovian assumption plan history time ect likelihood various transitions 
assumption combine parameters get desired conditional probability transition observed kaminka pynadath tambe message pr jx done msg pr msg jx done pr jx done pr msg jx done xy xy pr msg jx done pr jx done xy xy xz xz xy xy normalizing denominator sum numerator possible successors pre compute line 
value determine likelihood agent send message terminating plan time special case equation de ned possible transitions require message 
case agent begun execution successor completed execution probability mass signifying belief agent longer executing time waiting message blocked state 
words increased belief agent executing immediate successors time seen message 
algorithm presents pseudo code process propagating probabilities forward time message observed 
initializes values lines 
process continues going plans post order explore children plans plans reachable hierarchical decomposition transitions parents sibling plans order execution 
plan algorithm executes stages determines plan outgoing probabilities lines determines outgoing probability mass propagated outgoing temporal transitions blocked waiting message lines propagates non blocked temporal outgoing transitions lines nally computes belief agent execute plan time tick block blocking lines 
remainder section explains stages detail 
calculating outgoing probability lines 
algorithm variable represents total temporal outgoing probability plan belief agent executing time plan leaf derive temporal outgoing probability temporal model discussed previously belief agent currently executing lines 
parent lines fact redundant serve remind reader parent follows children execute line 
depends critically post order traversal plan hierarchy outgoing probability parent derived outgoing probabilities hierarchical decomposition children children outgoing probabilities calculated parents 
determining non blocked outgoing probability lines 
probability sum possible values numerator equation temporal outgoing transitions originating illustrated derivation 
see line critical calculating belief agent terminated execution begun execution successor belief block agent blocking 
monitoring teams overhearing algorithm propagate forward beliefs plans plans block block plans post order children temporal order parents leaf block calculate probability terminating time parent known post order guarantees children set line temporal outgoing transitions tx xy xy transition taken temporal outgoing transitions tx xy xy tx leads successor plan block block propagate tx terminating transition parent parent xy xy parent outgoing probability children block block block block propagating temporal outgoing transitions lines 
key component propagation 
temporal outgoing transition overseer calculates temporary variable holds probability mass corresponding overseer belief joint event agent having completed execution ii agent transition tx iii agent doing sending observable message 
calculation derived follows probability done message observed agent chose pr done jx pr done pr jx done msg xy xy xy xy transition leads successor plan lines added state time temporal incoming probability 
decomposition assumed immediate incoming probability propagated added rst children algorithm 
multiple rst children denote alternative plan decompositions single agent compute probability dividing probability incoming parent 
children rst child plans distribute new incoming probability turn method 
time step algorithm propagate rst children child order execution 
reason assume plans take single time step complete 
transition special case termination transition line successors 
case outgoing temporal probability added parent outgoing probability parent may propagating parent temporal outgoing probability temporal outgoing transitions 
note post order traversal plan hierarchy guarantees children explored parents parent fully computed time algorithm reaches parent 
kaminka pynadath tambe computing new blocked non blocked probabilities lines 
outgoing probability mass propagated children siblings steps remaining involve re calculation overseer belief blocked non blocked states 
total temporal outgoing probability blocked subtracted belief agent executing probability mass left block blocking message observed overseer added blocked state 
discussion overhearing approach outlined section maintains separate plan recognition mechanism agent ignoring inter agent dependencies 
array individual models updated passage time messages observed state team taken combination state individual agent 
algorithm embodies approach called time tick collects messages observed updates state agents 
evacuate 
task force execute mission task force process task force maneuvers zone landing 
fly flight plan flight team fly control route 
orders flight team flight team transport operations escort escort transport operations get orders orders get evacuate 
task force execute mission task force process task force maneuvers zone landing 
fly flight plan flight team fly control route 
orders flight team flight team transport operations escort escort transport operations get orders orders get array single agent recognizers agent 
algorithm array overseer beliefs plan hierarchy array agents agents message ma observed incorporate evidence ma message sent forward illustration operation algorithm consider example domain evacuation scenario 
overseer begins belief agent executing toplevel plan rst child process orders time evacuate block block 
overseer observes message initiation fly flight plan helicopters applies incorporate evidence algorithm 
plan hierarchy known process orders possible current plan agent helicopter question executing fly flight plan block lan block 
probability mass propagated fly flight plan rst children belief child set 
time passes message observed uncertainty fly flight plan landing zone maneuvers active possible states duration fly flight plan uncertain 
overseer assign probability top level plan evacuate 
probability mass fly flight plan propagated time tick landing zone maneuvers propagate forward monitoring teams overhearing gorithm 
propagation incoming temporal probability mass added belief execution landing zone maneuvers propagated rst children immediately 
assuming helicopter agent free select transport operations escort operations incoming probability split evenly added prior belief rst children 
temporal propagation step outgoing belief rst children propagated outgoing temporal transitions 
inference procedure described algorithms exploits particular structure representation ways general existing algorithms 
pseudo code demonstrates single monitored agent types belief updates time complexity linear number plans transitions 
agents space time complexity algorithm mn 
gain ciency compared approach dbn sources 
markovian assumption probability observing message depends relevant plan active independently execution history 
assumption incorporate evidence beliefs time second markovian assumption temporal model allowing propagation algorithm reason forward time beliefs time regard previous history 

monitoring team overhearing previous section outlined cient plan recognition mechanism particularly suitable monitoring single agent communications 
monitoring team achieved monitoring member team independently 
unfortunately time complexity approach acceptable monitoring recognition results poor 
evaluation section provides details short average accuracy approach experiments 
main cause low accuracy scarcity observations identifying characteristics monitoring overhearing 
previously discussed monitoring agents switch state sending message 
monitoring system critically needs estimate correctly times agents switch state 
agents rarely communicate observations variance temporal behavior respect system predictions tends cause large errors monitoring 
address issue bring back discussion agent independence assumption previous section 
team members communicate independently communications team action intended change state listener cohen levesque 
agents rarely send message may change state receiving message 
words observed messages previous section update belief state sender update state listeners 
monitoring system know relationships team members 
knowledge social structures enables additional sophisticated forms monitoring 
instance order maintain social structures team members communicate predictably particular points execution task 
predictions observable behavior communications reduce uncertainty 
case di cult correctly predict speci agent communicate speci point task execution easy predict team member 
knowledge procedures employed team maintain social structures useful allows monitoring system predictions 
reason ects communications receivers observable behavior team members monitoring system utilize knowledge social structures social procedures team members maintain structures 
exploitation social kaminka pynadath tambe knowledge monitoring called socially attentive monitoring kaminka tambe 
section discusses concepts detail 
exploiting social structures computationally cheap approach described earlier proved insu cient evacuation domain 
monitoring overhearing tasks monitoring system address scarce observations agents rarely communicate time 
evacuation application single message observed average combined individual state changes 
challenging conditions system monitoring overhearing come rely extensively ability estimate agents change internal state sending message 
representation earlier simple cient temporal model estimated average duration plans 
high variance actual duration plan execution compared duration predicted average duration model plan execution times vary depending external environment 
instance agents team running local network response times queries may shorter communicating continents 
latency times internet vary greatly di cult predict 
plan execution times vary depending plan step executed internally 
instance traveling plans repeatedly evacuation team oriented program take seconds minutes execute depending particular route followed 
plan execution times vary depending outcome plan step 
instance route planner functioning correctly responds seconds 
crashes return answer agents wait relatively long time relying time decide failed 
problem addressed principle expressive model execution duration instance account internal execution context 
practice model expensive computationally need rely knowledge previous steps breaking markovian assumption determine duration plan step executed improved temporal model reason likelihood instance plan step second instance opposed third 
applications grow scale real world increasingly complex temporal model continuously re ned cover increasingly complex temporal behavior agents 
fortunately temporal model way monitoring system estimate times agents change internal state 
alternative method estimating unobserved state changes utilize known dependencies agents exploit evidence state agent infer state 
particular true team settings agent send message intending ect state receivers particular way 
principle assumption receivers change state predictably observation message evidence inference sender state receivers state 
trade agent independence assumption earlier assumption successful coordination 
reasonable assumption team settings agents actively attempting maintain teamwork communications tambe kumar dunin keplicz 
ects message receiver dependent relationship sender receiver take relationship described mathematical relation monitoring teams overhearing possible states sender receiver 
principle relationships underly social structures structures interactions agents decisions dependent predictable degree teammates 
knowledge dependencies monitoring agent may observations communication action agent infer possible state 
simple example structure common teams jennings kinny ljungberg rao sonenberg tidhar werner application roles govern team members undertake tasks service team goal :10.1.1.37.83
roles ideally bias decision mechanism team members making decisions appropriate roles 
knowledge roles team members useful counter uncertainty faced monitoring agent 
instance suppose monitoring agent knows evacuation application instance particular helicopter team member choose transport ops escort ops child landing zone maneuvers team member belongs transport team escort team 
knowledge reduce uncertainty monitoring agent assumption team member incorrectly choose inappropriate plan role 
overseer fact uses knowledge roles manner alleviate uncertainty 
monitoring role information previous tambe intille bobick discussed section 
important social structure exists teams 
agents teams team member ideally agreement joint goals plans cohen levesque levesque cohen nunes jennings grosz kraus tambe rich sidner lesh rich sidner kumar cohen kumar 
phenomenon called team coherence kaminka tambe holds di erent levels team 
agents atomic subteam plans selected subteam subteams sibling subteams higher level joint plans individual agents may choose execution service agreed joint plans 
provided monitoring agent knows plans jointly executed subteams transitions taken subteams coherence heuristic preferring hypotheses team members agreement joint plans hypotheses disagreement 
example suppose entire team known executing fly flight plan 
message member transport subteam observed indicating begun execution transport ops plan step 
plan step jointly executed members transport subteam coherence prefer hypothesis subteam members initiated execution transport ops 
furthermore plan step service landing zone maneuvers plan jointly executed transport escort subteams prefer coherent hypothesis team members escort executing landing zone maneuvers 
known role come back plan hierarchy infer members escort subteam executing escort ops knowledge expected relationships particular knowledge plans joint team members subject coherence part speci cation distributed application provided overhearing system designer operator 
fact readily available agents coordination 
instance earlier discussed assumption team oriented programs available monitoring agent hold knowledge plans hierarchy executed sub teams encoded plan hierarchy 
team hierarchy contains knowledge subteam agent part subteam 
coherence powerful heuristic 
assumes non failing cases team members successfully maintain joint execution particular plans 
assumption evidence decision team member uences coherence belief kaminka pynadath tambe team mates decided 
lacking evidence coherence prefers hypotheses team members joint decisions 
instance suppose transition team plan taken transport team 
non failure circumstances coherent hypotheses considering transition members transport took transition 
evidence member supporting hypotheses infer state members 
signi cance property coherence monitoring system reduce uncertainty agent reduction ampli ed coherence heuristic apply agents 
coherence heuristic lead signi cant boost monitoring accuracy number hypotheses underlying probabilistic disambiguation cut dramatically 
section provides depth evaluation coherence knowledge roles select plan recognition hypotheses overseer 
coherence signi cantly increases time complexity computation 
requires setting inter agent links array plan recognizers overseer section links represent probabilistic association plans executed jointly contrast temporal hierarchic decomposition transitions far 
instance speci plan executed jointly agents link constructed variable representing agent execution plan variable representing agent execution plan 
general inter agent links agents joint plans 
agents array recognizers individual agent plan hierarchy size run time complexity exact inference algorithm mn quite worse general exponential number coherent non coherent hypotheses select 
section section describe highly scalable number agents representation reasoning coherent hypotheses 
exploiting procedures maintain social structures monitoring system exploit knowledge procedures agents maintain social structures alleviate uncertainty resulting observations 
instance monitoring system accurately predict observable behavior monitored agents observed predicted behavior monitoring system may infer agents reached state associated predicted behavior 
predictions eliminate monitoring hypotheses setting individual agent xy probabilities re ect prediction message transmitted agent execution terminates initiates instance application ariadne information agent queried possible threats route followed evacuation 
may possible predict route taken helicopters message sent ariadne agent teammates message observed ariadne agent inferred executed step 
furthermore assumption coherence discussed monitoring system may infer team members executed step new route taken team 
inference obviously dependent system observational capabilities useful lossy observations monitoring system see section 
general speci individual predictions di cult 
team members engaged joint tasks require agents tackle problem 
settings predicting individual communications may impossible 
instance consider distributed search problem target solution search space di erent areas search space divided agents understanding rst nd target communicate 
di cult accurately predict agents communicate nd target predict monitoring teams overhearing focus agents orts area 
easy predict agent nd target communicate 
similarly evacuation application may di cult predict helicopter reach civilians rst easy predict communicate location 
teams utilize social procedures conventions jennings team members maintain relationships :10.1.1.37.83
removal agent independence assumption allows monitoring system exploit knowledge procedures making predictions behavior team members coordinating 
instance knowledge procedures team recover coordination failures allows monitoring system predict behavior team members case failed execution 
similarly knowledge communication procedures team part team members coordination allows predicting observable messages interactions team members necessarily specifying particular individual agent carry 
example suppose overseer overhears message indicating ight team initiated joint execution fly flight plan 
time passed possible team executing fly flight plan terminated begun joint execution landing zone maneuvers 
overseer knows team member explicitly communicate terminating fly flight plan initiating landing zone maneuvers communications observed monitoring system eliminate possibility team executing eliminating uncertainty case fly flight plan possible 
leave discussion technically social procedure form team member communicate subteam take transition converted xy values section technique representing team wide probabilities way allows cient reasoning 
remainder section address knowledge social procedures may acquired 
social procedures communications may simple case rules may involve complex algorithms 
instance jennings suggests heuristic application dependent rules determine communication decisions 
steam tambe uses decision theoretic procedure considers cost communication cost decision communicate 
procedures proposed cohen levesque jennings rich sidner 
regardless complexity key point monitoring system necessarily full knowledge procedures order exploit predictions needs approximate outcome combination techniques combat plan recognition ambiguity relying just technique 
decisions social procedures acquired learning previous runs system 
detailed exploration appropriate learning mechanisms outside scope provide strict demonstration feasibility learning social procedures simple rote learning proved ective generating useful communications model signi cantly reduced uncertainty monitoring evacuation application 
simple mechanism records execution plans explicitly communicated initiated terminated 
learned rules ective immediately stored monitoring task 
figures results rote learning mechanism di erent runs tasks 
axis denotes observed communication message exchanges task progresses 
exchanges take place run exchange including dozen broadcast messages agents announce termination initiation plan 
axis shows number hypotheses considered overseer seeing message probabilistic temporal knowledge 
greater uncertainty hypothesis correct re ected higher values axis 
task kaminka pynadath tambe execution possible plans considered possible ignore temporal knowledge graph 
progress task steps remain possible reached expect see gradual non monotonic decline move axis 
technique successfully eliminates hypotheses considerations results axis values lower baseline execution curve 
line marked learning shows baseline predictions learning component turned 
baseline shows relatively high level ambiguity exists system predictions states agents possible 
learning technique applied line message seen immediately predictions learned experience immediately useful ambiguity reduced somewhat line marked line learning 
exchanges encountered late task execution seen 
ectively reduce ambiguity monitoring system rst run 
third line learning presents number hypotheses considered fully learned model 
model learned run applied modi cations runs system 
seen shows signi cantly reduction number hypotheses considered overseer 
evaluation communications predictions sections full exploration learning task scope 
number recognized plans observed communication exchanges learning line learning previously learned predictions learning experiment number recognized plans observed communication exchanges learning line learning previously learned predictions experiment number recognized plans observed communication exchanges learning line learning previously learned predictions experiment number recognized plans observed communication exchanges learning line learning previously learned predictions experiment learning communication decisions di erent experiments 
monitoring teams overhearing discussion key characteristic monitoring overhearing tasks scarcity observations available monitoring system 
fortunately observations available monitoring system viewed observations multi agent actions sender message changes state intends change state recipients cohen levesque 
single observation evidence inferring state sender receivers 
stands contrast previous addressed monitoring multiple actions 
monitoring team monitoring system knowledge social structures procedures exploit information activities team member hypothesizing activities team member 
techniques speci representation earlier 
instance increased belief agent execution plan evidence teammate execution constructing appropriate probabilistic links nodes representing beliefs large dbn representing agents 
start dbn representation discussed section replicate single agent network containing plans separate agents 
number nodes represent plans transitions individual agent 
introduce appropriate inter agent links capture inter agent dependencies represented model teamwork 
introducing links computational complexity performing dbn inference explodes 
obviously social reasoning computationally expensive cient representation described earlier 
section provides details cient mechanism reasoning team information role coherence utilizing communications predictions 
mechanism techniques described section resulted accuracy average experiments compared average social knowledge 
sections detailed discussion results 

plan recognition overhearing previous section outlined socially attentive monitoring techniques alleviating uncertainty monitoring team agents exploiting knowledge social structures social procedures monitored team 
discussed coherence role maintenance exploit knowledge ideal agreement agents speci plans executed speci plans assigned agents ful lling roles 
furthermore discussed disambiguation predictions observable behavior knowledge social procedures employed team members 
disambiguation heuristics eliminate incorrect hypotheses considered 
reasoning techniques computationally expensive 
section presents cient algorithm building representation previously facilitates scalable monitoring overhearing large teams 
key idea represent hypotheses heuristics considered valid eliminating consideration plans transitions considered illegal heuristics 
relying team hierarchy coherent hypotheses represented single recognizer array recognizers ering considerable scalability team monitoring 
algorithm longer represent certain hypotheses scalability comes expense expressivity 
discuss scalable representation trade ers 
cient reasoning team coherence coherence strong constraint team agents linear number size plan hierarchy coherent hypotheses exponential num kaminka pynadath tambe ber incoherent hypotheses number agents proof appendix 
exploit property designing monitoring algorithms reason linear number coherent hypotheses er better scalability number agents increases 
algorithms may able reason incoherent hypotheses expressive 
section demonstrates level accuracy limited expressiveness su cient purposes 
furthermore algorithms reason coherent hypotheses may able detect incoherent hypotheses representing failure state team members disagreement 
presenting yoyo algorithm cient technique reasoning coherent hypotheses algorithm 
yoyo replaces array algorithm described earlier algorithm 
similarly yoyo called time tick 
message observed state entire team propagated forward time 
observed messages collected evidence di erent plans implied messages 
algorithm yoyo plan hierarchy team hierarchy beliefs new messages observed team propagate forward initialize distributions plans initialize empty sets 
messages fx initiation message consistent fy termination message consistent plans agent sending message initiating plans precede transition allowed block block block wx wx plans agent sending message terminating plans succeed transition allowed block block block xy xy normalize distribution teams account plans block block block team propagate block team parent null parent block block team parent scale parent parent yoyo key novelty relies single plan hierarchy represent team members regardless number array structures 
words variable represents overseer belief agents teams associated described team oriented program executing plan time yoyo extensive information associating plans transitions teams subteams team hierarchy 
team hierarchy plays critical role respect maintains knowledge critical correctly applying coherence single recognizer 
monitoring teams overhearing key distinction yoyo array approach causes subtle critical di erence way probabilities propagated transitions 
plan hierarchy individual agent part array models outgoing transition represented hierarchical decomposition temporal step agent allowed take 
alternative outgoing transitions represent alternative paths execution available agent 
hand plan hierarchy yoyo alternative outgoing transitions tagged di erent subteams ancestors represent decision point agent alternative paths execution decided agents roles team memberships 
creates critical di erence values xy xy interpreted 
previously section value xy referred probability speci agent take transition terminated execution yoyo refers probability entire team take transition 
yoyo unable represent hypotheses team members take transition di erent groups members form di erent subteams represented team hierarchy di erent transitions tagged allowed di erent subteams 
value xy interpreted di erently critical way 
previous sections taken represent probability speci individual communicate transition taken yoyo value represents probability team members communicate transition taken team 
longer refers individual agents sub team 
way yoyo solves issue represent predictions type team member communicate step reached discussed previously 
example suppose yoyo sets belief team executing landing zone maneuvers plan step probability landing zone maneuvers yoyo rst children escort ops transport ops executed members th escort transport subteams respectively 
individual agent case probability divided children duplicated belief entire team executing landing zone maneuvers implies equally belief transport subteam executing transport ops escort subteam executing escort ops 
explain yoyo operation detail message observed lines 
observations available state entire team jointly propagated forward time calling team propagate forward algorithm appendix 
slightly modi ed version propagate forward algorithm takes di erent subteams account propagating beliefs total outgoing probability sibling child transition outgoing transitions taken di erent teams team ancestor transport escort sub teams total probability transition splitting outgoing probability transitions 
appropriately team propagate forward relies modi ed version propagate algorithm algorithm called team algorithm appendix 
algorithm incorporation evidence lines 
propagation process 
messages observed lines 
messages observed yoyo single algorithm monitoring multiple potential message senders message may observed yoyo begins incorporate observations maintained beliefs team 
process somewhat similar incorporate evidence algorithm described earlier algorithm takes account multiple observations agents may sent message 
multiple messages di erent agents may refer plan yoyo incorporate evidence multiple times 
simple loop lines builds set initialized plans terminated plans going incoming messages arrived time process takes worst case kaminka pynadath tambe 
yoyo better array approach multiple messages cause multiple updates array yoyo multiple messages may refer single plan triggering single update 
incorporating evidence initiated terminated plans lines 
plans line yoyo sets new belief weighted prior belief initiation lines similarly done incorporate evidence algorithm algorithm account team implied sender processed message line 
done lookup sender transitions allowed take followed 
de nition transition allowed taken super team allowed similar process done termination messages lines course looking possible successors plans consistent messages 
want cause updates line line cases termination message initiation message refer transition loop plans line skips plans addressed previous step 
process 
normalizing temporary distribution line 
temporary distribution resulting processing initiation termination messages normalized similar fashion analogous step algorithm 
process take account plan hierarchy question team hierarchy 
typical normalization procedure evidence di erent plans selected di erent teams may necessarily compete may necessarily require normalization 
instance messages observed implying team initiated execution plan implying team initiated execution plan children joint parent executed jointly subteams normalized likelihood assigned assigned propagation steps described 
process 
propagating evidence lines 
beliefs set plan implied observations children lines 
team execute plan determined lookup team line 
yoyo begins propagate evidence plan parents lines 
belief child plan propagated added belief parent line 
parent plan parent executed super team current team change probability propagated children executed subteams 
upward propagation alternated downward propagation hierarchical decomposition transitions downward step executed team responsible joint execution parent plan longer current subteam considered parent team parent team lines 
condition satis ed change beliefs parent plan propagated children executed subteams 
done scale algorithm algorithm appendix 
downward propagation line implements subtle critical step re aligns beliefs yoyo maintains subteams implied message beliefs coherent existing evidence 
scale procedure re distributes new state probability parent children child gets scaled relative weight parent 
result state probabilities children sum state probability parent 
process recursive re visits subtree carried hierarchical decomposition transitions previously updated 
downward propagation done yoyo updates current team parent team hierarchy line 
note call parent team re ects lookup team hierarchy 
alternating upward downward propagation origin yoyo name 
monitoring teams overhearing plan hierarchy regardless downward propagation took place temporary variable updated climb hierarchical decomposition line 
iteration loop begun line worst case plan hierarchy team hierarchy traversed 
loop repeat worst case plans plan hierarchy process mh 
example illustrates yoyo inference observation message 
suppose single member transport subteam communicates initiating transport ops plan 
observing message yoyo looks sender determine transitions taken line 
proceeds determine new beliefs team execution transport ops plan lines incorporates new beliefs re ect increased belief transport subteam executing transport ops children lines 
plan parent landing zone maneuvers null yoyo enters loop lines 
increases belief execution parent line 
checks condition line team execute landing zone maneuvers team parent transport subteam landing zone maneuvers executed jointly transport escort subteams 
yoyo calls scale procedure line re adjust landing zone maneuvers children subtrees 
landing zone maneuvers hierarchical decomposition children transport ops yoyo updated executed transport subteam escort ops executed escort subteam 
scale climbs landing zone maneuvers escort ops increasing yoyo beliefs escort team executing escort ops plan 
process re aligns prior beliefs yoyo likelihood escort ops executed current evidence ect updating beliefs plans executed escort subteam single observation member transport team 
process repeats loop entire set beliefs updated aligned respect observed message 
scalability number agents yoyo ers signi cant computational advantages compared individual representation array approach 
yoyo requires single fully expanded plan hierarchy represent entire team 
hierarchy union individual agent plan hierarchies containing transitions plans tagged subteams allowed execute 
addition yoyo uses single copy team hierarchy 
suppose size plan hierarchy size team hierarchy number agents team 
agents added monitored team team hierarchy grows new node represents new agent connected appropriate sub team team hierarchy 
yoyo space complexity 
grows write compare array approach mn algorithm 
analyze yoyo run time complexity consider behavior algorithm separately cases communications observed cases message observed 
messages observed update takes form single call forward algorithm process 
clearly best case scenario yoyo 
agent communicates yoyo go upward downward propagation process 
worst case scenario yoyo occurs agents send messages messages refers di erent plan messages plans merged lines 
case di erent plans evidence exists require separate update lines 
yoyo complexity case kaminka pynadath tambe mh mn clearly worst case continuously sustained monitored team agents continuously communicate state 
believe average case real world domains agents closer case earlier see section evaluation 
case yoyo complexity compares favorably procedure reasoning coherent hypotheses array recognizers mn process agent communicates section 
discussion yoyo explicitly represents team single coherent entity 
space run time requirements preferable array approach number agents grow considerably simpli es reasoning coherence communications predictions 
hand yoyo sacri ces capability represent failing team activities incoherent hypotheses executing team plan teammate executing 
mean individual actions taken agents locked synchronous execution individual agents execute individual action time 
instance team members executing completely di erent path execution time plan steps easily represented plan hierarchy includes joint plan having rst hierarchical decomposition children selected respectively 
outgoing temporal transition similarly outgoing temporal transition executed team members jointly initial evidence agent executing individual plans yoyo evidence team member having begun parallel execution individual execution path 
evidence agent executing individual actions increase likelihood agent continuing execution pace 
impossible yoyo correctly represent monitoring hypothesis executing child executing plan child results evaluation conducted section demonstrated importance coherence accurate visualization tradeo expressivity vs scalability justi ed overseer accuracy improved due coherence 
yoyo sacri ces capability reason certain failure incoherence hypotheses capable supporting failure detection important secondary goal visualization 
earlier shown merits coherence service detecting disagreements team particular demonstrating coherent monitoring leads sound centralized disagreement detection may lead sound complete disagreement detection speci circumstances kaminka tambe 
yoyo fact cient way reason coherent hypotheses provides basis providing sound disagreement detection results 
concern generality technique may raised yoyo reliance team hierarchy 
believe reasonable expect large complex real world multiagent systems type targeted organizational hierarchy sort associated see instance tidhar 
human organizations certainly demonstrate emergence hierarchies especially organizations grow larger big corporations government organizations tackle mission critical tasks military organizations 
addition team hierarchies computational agents critical planning maintaining network system security believe team hierarchy weakness approach organizational structures wide spread computational multi agent systems human multi agent systems 
may possible gradually learn monitoring teams overhearing team hierarchy coordinated team purpose monitoring discussion possibility outside scope 
team hierarchy apply assumption coherence representations algorithms 
instance start dbn representation team section unify multiple random variables represent separate agents single random variable team subteam 
yoyo size representation grows size plan hierarchy number agents 
number nodes single agent case discussed section 
complexity inference answering plan recognition queries exponential number nodes 

evaluation section presents detailed evaluation di erent contributions contained overseer 
exploring relative contribution technique success overseer section 
focus evaluating overseer communications predictions respect lossless lossy observations section 
comparison overseer performance human experts non experts section 
empirically evaluate yoyo scalability application domain section 
accuracy evaluation rst part evaluation tests contribution di erent techniques overseer successful recognition correct state team members 
compares average accuracy sample actual runs marked axis 
minute run team executed task completely 
di erent points execution actual state system compared state predicted overseer prediction taken current hypothesis 
run comparisons data points 
percentage correct monitoring hypotheses run comparisons range axis 
temporal coherent coherent temporal coherent comm coherent temporal comm evaluation run percent accuracy sample runs 
accuracy individual models coherence section leftmost bar marked temporal group clearly low 
approach straightforward attempt monitoring multiple agents monitoring individual kaminka pynadath tambe considering interactions described section 
bar presents monitoring accuracy coherence rule hypotheses section ties broken randomly 
bar right coherent temporal presents results combining coherence probabilistic temporal model sections 
bar marked coherent comm shows ects combining coherence predictions knowledge communication procedures team section 
communications predictions restrict set coherent hypotheses considered ties broken randomly 
remaining bar coherence temporal comm presents monitoring accuracy run combination techniques 
results demonstrate ectiveness socially attentive monitoring techniques 
results show coherence heuristic brings accuracy probabilistic reasoning 
boost performance particularly interesting result relation coherence technique previous techniques explored literature tambe intille bobick 
previous successfully relationships agents increase accuracy monitoring 
boost overseer accuracy role teamwork relationships con rms results previous investigations 
results demonstrate technique su cient domain 
overseer adds number novel techniques addressed previous 
rst technique combines coherence temporal model plan duration coherent temporal results signi cant increases accuracy probabilistic temporal information allows overseer better handle lack observations 
possible alternative explore evaluation rely communications predictions rule hypotheses states may may reached coherent comm 
interesting compare performance techniques comparing coherent temporal coherent comm bars 
runs average accuracy coherence communications predictions signi cantly higher coherence temporal model 
despite fact ective coherence technique uses arbitrary random selection available hypotheses reason cases communication predictions powerful rule hypotheses signi cantly decreasing uncertainty agents plan horizons 
random selection stands better chance informed temporal model selection hypotheses 
runs show reversal trend compared runs 
figures show accumulative number errors task execution progresses run run 
error de ned failure choose correct hypothesis hypothesis re ect true state agent team 
message exchange corresponds dozen messages communicated agents establishing terminating plan 
gures lower slope means better performance errors 
line marked coherent shows accumulative number errors coherence select correct hypothesis choices turn erroneous random choice competing hypotheses 
line marked coherent temporal shows results coherence temporal model choose hypothesis 
similarly line marked coherent comm shows results coherence communications predictions 
remaining line displays results combined technique coherence temporal model communications predictions 
see techniques coherent temporal coherent comm equal slopes result equal number errors run know due alleviated uncertainty communications predictions leads higher probability success coherent comm technique results fewer alternative hypotheses better chance correct 
monitoring teams overhearing rpp rpp run rpp rpp run accumulative number errors runs see run situation changed dramatically 
see lines longer similar 
line marked coherent comm greater slope run indicating communications predictions able reduce uncertainty resulting lower average accuracy 
second see temporal model results errors evidenced slower rising slope line marked coherent temporal 
case actual duration plans matched temporal model accurately runs 
trying understand di erence runs runs system discovered runs involved relatively failures part team members including agents crashing responding 
communications predictions learned successful runs correctly predict communication messages result team detected recovered failures 
uncertainty alleviated arbitrary selection relatively hypotheses 
explains relatively lower accuracy coherent comm technique run clearly shows limitation simple learning approach took intend address 
factors uence accuracy communication models lower accuracy occur runs failures occurred 
results coherent temporal technique vary 
able determine failures cause relative increase relative accuracy coherent temporal technique 
variance results due additional factors 
run instance technique results relatively higher accuracy failure occurred 
certainly mission speci cations di er runs machine loads cause mission execution run slower faster great variance temporal behavior system principal reason communication prediction 
variance obvious graphs 
summary despite variance results coherent temporal technique due variance temporal behavior system simplicity temporal model possible sensitivity coherent comm technique learned predictions clear techniques combination building coherence heuristic compensating weaknesses 
runs combined technique coherent temporal comm superior technique 
performance varied accuracy run run 
average accuracy runs combination technique resulting signi cant increases accuracy compared initial solution began investigation human novice performance see section 
communications kaminka pynadath tambe predictions need perfect temporal knowledge need precise order useful 
evaluating communications predictions key question communications predictions sensitivity loss observations 
cacy technique see previous section stems capability inferences expected observation 
predictions previous section assumed observation loss prediction stated particular message observed probability assigned prediction 
settings involving lossy observation streams inference prove incorrect overseer wait observation correctly monitor actual state team members 
evaluate predictions sensitivity observation loss chose experimental runs represent extreme performance results overseer run lowest accuracy run highest run showed interesting reverse relative performance coherent temporal coherent comm see 
runs simulated observation loss rate repeating trial times di erent random seeds 
words ran total trials random messages observed overseer observable overseer reached evacuation team members team performance identical original settings 
set predictions appropriately settings expected message predicted appear probability opposed probability originally 
results experiments 
di erent runs bars 
left shaded bar shows original results previous section observation loss treatment possible loss predictions 
right bar shows average accuracy achieved overseer trials run observations observable overseer 
error bars right bar mark minimum maximum accuracy values achieved trials run 
run error bars unseen trials resulted accuracy 
number promising drawn results 
runs overseer average accuracy dropped performance overseer dropped level loss introduced 
run original performance poorest change performance 
performance run drop slightly partially explained run previously discussed failures exploit communications predictions 
promising drawn results overseer performance degrade gracefully rate comparable rate degradation overseer input 
second overseer performance observation loss settings fairly invariant 
run considered normative show little variance trial despite change selection observations unobserved trial 
run representative normative runs shows little variance respect average accuracy observation loss 
result suggests may drop performance observation loss expected overseer performs consistently varying lossy settings 
overseer human monitoring overhearing important facet evaluation overseer examines performance comparison novice expert monitors evacuation application 
evaluation sheds light di culty monitoring task demonstrates overseer performance monitoring teams overhearing run run run average accuracy comparison average accuracy results observation losses 
comparable higher lower human expert performance signi cantly better novices 
conduct evaluation examined runs representatives overseer bounds performance discussed runs 
rst author served expert monitor having experience overhearing evacuation application possible speci cally actual test runs established group novice monitors subjects generally familiar hierarchical control structures unfamiliar monitoring overhearing evacuation application component agents 
subject printed books run containing overheard messages human readable form messages overheard overseer optimal lossless conditions 
material subject copy plan hierarchy team hierarchy average duration information available overseer parameter di erent leaf plans 
overheard message second line print indicated time passed overhearing message subject asked write best estimate agents current state message overheard speci ed time passed 
felt di erent agents di erent sub teams di erent states specify agent subteam doing 
emphasize subjects exactly runs overseer evaluated 
actual test process began short explanation task full explanation plan hierarchy including answering questions subjects semantics di erent transitions short test run allowed subject plan hierarchy team hierarchy providing feedback subject accuracy 
questions answered subjects test books unlimited time complete order started book required 
settle expert training expert task time consuming requires familiarity internals evacuation application architecture 
kaminka pynadath tambe nish 
subjects allowed look forward message completing answer go back change previous answers 
encouraged seek assistance locating plans plan hierarchy consistent messages information provided plan may correct plans consistent 
subjects nished runs test books taken score computed 
correct prediction awarded incorrect prediction standard scoring overseer accuracy 
answer sub tree fly flight plan considered incorrect prediction subjects repeatedly instructed speci answer required 
results test 
previous graphs axis denotes percentage accurate monitoring hypotheses data points run depending run 
axis categories di erent runs 
run left bar marked novices presents average accuracy achieved novice monitors middle bar marked experts presents accuracy achieved human expert monitor nal bar yoyo re prints results 
results show average accuracy novices clearly inferior expert monitor overseer 
overseer performance human expert runs human expert better overseer run draw results 
monitoring task overseer faced evacuation application trivial novices failed achieve average best run generally performed signi cantly worse human expert 
second overseer performance di erent runs comparable human expert better worse 
overseer performance tended follow trend novices 
words overseer accuracy tended go di erent runs similar manner average novice human monitor expert accuracy remained fairly constant runs 
novices experts yoyo accuracy human novice expert monitors compared overseer 
monitoring teams overhearing evaluating yoyo trading expressivity scalability examine key trade expressivity ciency involved plan recognition techniques 
accuracy discussion clear coherence useful heuristic 
yoyo takes extreme approach strictly ruling reasoning 
impossible yoyo instance represent incoherence team members disagreement plan executed common team 
may impossible yoyo explicitly represent hypotheses associated communication losses delays cause 
approach individual represented separately allows representation respect expressive 
failure checks place yoyo able detect previously discussed 
hand yoyo ers signi cant computational scalability respect number agents monitored 
analysis yoyo complexity contrast array approach section follow empirical evaluation 
reports space requirement yoyo array approach di erent domains evacuation domain yoyo evaluated deployed additional domains built multi agent teams modsaf tambe calder smith mar robocup tambe erdem kaminka marsella muslea marsella kaminka muslea tambe 
yoyo currently evaluated domains fully deployed believe partial existing implementations su cient provide robust projections space savings achieved domains 
believe projected savings implementation domains provide rough guide savings designers expect deploying yoyo additional domains 
domain compares space requirements array approach left bar yoyo right bar 
addition dark shaded region top bar shows space required representing additional agent approaches assumption additional plans added plan hierarchy agents added 
discussed assumption favorable array representation 
gure shows signi cant space savings achieved yoyo 
representing teams current size yoyo space requirements signi cantly smaller 
furthermore yoyo savings really shine examine scalability approaches 
array approach requires amount space shown gure shaded area yoyo requirements grow node additional agent 
space requirements representing additional agents small don show gure 
earlier section analyzed yoyo worst case run time complexity argued worst case behavior extreme sustained practice involves continuous communications agents infeasibility provided motivation exploring plan recognition approach 
evidence average case consider evacuation application agents communicate average state changes 
application agents communicate parallel exchanges dozens cases parallel communications referred plan requiring single update yoyo see discussion section 
task execution agents expected communicate parallel di erent plans scenario di erent yoyo worst case scenario 
average length task execution domain approximately time ticks 
array approach update state agent time tick message appear 
average complexity time tick worst case mn 
yoyo average complexity signi cantly di erent time ticks result process time result kaminka pynadath tambe array yoyo array yoyo array yoyo evacuation agents robocup agents modsaf agents number nodes additional agent current application empirical savings applying yoyo evacuation domains 
process times expensive updating state di erent agents 
worst case scenario occur di erent runs 

related aiello 
aiello bene ts overhearing agent conversations 
suggest may infer intent agents engaged conversations er speci suggestions improving agents performance 
instance overhearing conversation agents keyword search web may suggest alternative keywords conduct search 
closely related research overseer points potential additional bene ts overhearing technology 
contrast aiello address problem intent plan recognition 
algorithms inferring plans disambiguating recognized plans 
overseer di ers previous plan recognition focused monitoring multiple agents single agent 
previous multi agent plan recognition focused exploiting explicit teamwork reasoning tambe explicitly reasoning uncertainty recognizing multi agent plans devaney ram intille bobick key novelty overseer ectively blends threads 
provide detailed discussion 
overseer team tambe reasons explicitly team intentions inferring team plans observations similarly overseer coherence heuristic 
team uses coherence restrict space requirements plan library similarly yoyo 
overseer uses advanced teamwork model predict failure states recovery actions uses knowledge procedures team communication decisions explicitly reasons uncertainty time allowing answer queries related likelihood current team plans issues addressed team 
team explicitly represent ordering constraints plans address scarce observations assumes observations available account possible changes state observed agents 
monitoring teams overhearing devaney ram intille bobick focuses explicitly addressing uncertainty plan recognition multi agent contexts exploit explicit notions teamwork 
devaney ram pattern matching recognize team tactics military operations 
approach relies team plan libraries veri ed domain experts combines team plan hierarchies organizational knowledge explicitly represented technique 
similarly intille bobick rely entirely coordination constraints agents recognize team tactics football sense socially attentive technique prefers hypotheses agents maintaining roles 
intille bobick single structure di erent recognized recognized tactic 
investigations position trace data monitored human teams 
di ers devaney ram intille bobick ways 
previous investigations applied settings observations continuously available monitored agent 
contrast overseer targeted overhearing limited observations available time number agents observed 
overseer introduces number novel techniques communications predictions useful settings 
second important di erence underlying representation reasoning 
introduce novel representation particularly suited monitoring overhearing intille bobick rely standard belief networks constructed particular way support reasoning spatial temporal coordination 
explicit teamwork organizational structure team hierarchy enables yoyo principle reason coordination teamwork failures previous monitoring techniques fail recognize team actions intille bobick 
huber reports probabilistic plan recognition service observation coordination net trek domain shows agents plan recognition coordination outperform agents communications coordination 
huber takes coordination cooperative actions part self interested agents joining agent attacking common enemy 
huber exploit knowledge relationships agents limit computation increase accuracy 
huber system allow uncertainty caused missing observations contrast introduce specialized mechanisms explicitly address 
plan recognition bayesian networks charniak goldman provide general model plan events evidence inference 
static bayesian network include nodes plans observations execution plans 
representing events single time step dbns described section include nodes time steps 
agents executing plan hierarchy size nite time horizon steps number nodes network 
inference space time complexity exponential number nodes prohibitive lengths execution example domains 
representation yoyo related existing approaches modeling stochastic processes particular probabilistic plan recognition 
representation closely resembles hidden markov models hmms rabiner han veloso 
theory represent plan state team agents unconstrained state space hmm 
hmm state space represent possible combinations individual plan states agents size hmm state space exponential number agents plans 
standard algorithms hmm inference able exploit structure plan team hierarchies particular forms evidence described section way yoyo 
generalized versions hmm model ghahramani jordan jordan ghahramani saul compactly represent state space yoyo exact inference intractable models 
models cient algorithms kaminka pynadath tambe approximate inference di culty determinism planning models 
pynadath wellman report probabilistic state dependent grammar psdg model avoids full complexity dbn inference making simplifying assumptions appropriate plan recognition 
psdg incorporate broader classes inference yoyo intended single agent plan recognition support concurrency general fashion multi agent plan recognition 
goldman geib miller develop conceptual model bayesian plan recognition include key novelties ability infer plans single agent lack observation action 
goldman deal di erent issue altogether communications predictions address 
framework looks sequence observations observation may missing observations actions appear 
framework allows inference plans rise missing observation ruled recognition hypotheses 
contrast approach uses communications predictions inference plan steps occur 
overseer probabilistically expects predictions come true infer additional information missing predicted observation followed 
addition approach fully implemented deployed multi agent settings single agent 
complementary line context architecture focused intended plan recognition monitoring team members may adapt communications monitoring easier tambe 
reduced eliminate uncertainty ii methods address uncertainty presents interesting direction overseer development 

summary introduced monitoring overhearing technique increasingly important growing need monitor agent systems particularly distributed deployed 
overseer system monitoring teams overhearing routine communications exchange part execution joint tasks 
monitoring overhearing plan recognition task presents characteristic challenges previously addressed 
include scarcity observations compared rate change agent state fact agents individually observable observations essentially multi agent actions 
addition familiar challenges demanding response times maintaining performance face scale number monitored agents 
address challenges overseer employs number novel techniques exploit knowledge relationships agents alleviate uncertainty increase ciency monitoring cient probabilistic algorithm plan recognition particularly suited monitoring communications ii yoyo approach cient maintenance recognition coherent hypotheses iii social structures procedures team coherence communications maintain coherence alleviate uncertainty 
demonstrate generality techniques discussed potential techniques representations plan hierarchy particular dbns 
provided depth empirical evaluation techniques domains overseer applied 
evaluation carefully examines contribution technique recognition success demonstrates techniques best complement relative weaknesses 
evaluation scalability yoyo performance conditions observation loss 
comparison overseer performance human expert novice monitors demonstrated overseer performance comparable human experts despite di culty monitoring task 
monitoring teams overhearing opportunities research directions arise experimental results 
rote learning predict messages observed provided feasibility demonstration proved ective normative runs 
simple mechanism damaging rare patterns communications arose experiments shown 
depth exploration role learning directions hope pursue 
addition learning mechanisms derive plan hierarchy team hierarchy structures records conversations interest 
part agents authors kaminka pynadath tambe 
yves victor lesser george bekey je rickel dan leary useful comments manuela veloso enthusiastic support project carnegie mellon university 
kaminka deserves special help analyzing processing data 
research supported darpa awards managed air force research labs rome site 
aiello sera ni 

ontological overhearing 
intelligent agents viii proceedings international workshop agents theories architectures languages atal 
barber martin 

dynamic reorganization decision making groups 
proceedings fifth international conference autonomous agents agents pp 

acm press 
calder smith mar 

modsaf behavior simulation control 
proceedings third conference computer generated forces behavioral orlando florida 
institute simulation training university central florida 
charniak goldman 

bayesian model plan recognition 
arti cial intelligence 
cohen johnston mcgee oviatt pittman smith chen 

multimodal interaction distributed applications 
proceedings fifth annual international multimodal conference multimedia pp 

cohen levesque 

rational interaction basis communication 
cohen morgan pollack 
eds intentions communication systems development foundation benchmark series chap 
pp 

mit press 
cohen levesque 

teamwork 
nous 
decker 

environment centered analysis design coordination mechanisms 
ph thesis department computer science university massachusetts amherst 
devaney ram 

needles haystack plan recognition large spatial domains involving multiple agents 
proceedings fifteenth national conference arti cial intelligence aaai pp 
madison wi 
dunin keplicz 

role dialogue collective problem solving 
proceedings fth international symposium logical formalization commonsense reasoning commonsense pp 

kaminka pynadath tambe finin labrou may eld 
kqml agent communication language 
bradshaw 
ed software agents 
mit press 
ghahramani jordan 

factorial hidden markov models 
machine learning 
goldman geib miller 

new model plan recognition 
proceedings conference uncertainty arti cial intelligence uai stockholm sweden 
grosz 

collaborating systems 
ai magazine 
grosz kraus 

evolution sharedplans 
wooldridge rao 
eds foundations theories rational agency pp 

grosz kraus 

collaborative plans complex group actions 
arti cial intelligence 
han veloso 

automated robot behavior recognition applied robotic soccer 
proceedings ijcai workshop team behavior plan recognition 
appears proceedings th international symposium robotics research 
lesser 

self diagnosis adapt organizational structures 
proceedings fifth international conference autonomous agents agents pp 

huber 

plan plan recognition models ective coordination agents observation 
ph thesis university michigan 
huber hadley 

multiple roles multiple teams dynamic environment autonomous agents 
johnson 
ed proceedings international conference autonomous agents agents pp 
marina del rey ca 
acm press 
intille bobick 

framework recognizing multi agent action visual evidence 
proceedings sixteenth national conference arti cial intelligence aaai pp 

aaai press 
jennings 

commitments conventions foundations coordination multiagent systems 
knowledge engineering review 
jennings 

controlling cooperative problem solving industrial multi agent systems joint intentions 
arti cial intelligence 
jordan ghahramani saul 

hidden markov decision trees 
mozer jordan petsche 
eds advances neural information processing systems vol 

mit press 
kaminka pynadath tambe 

monitoring deployed agent teams 
proceedings fifth international conference autonomous agents agents 
kaminka tambe 

robust multi agent teams socially attentive monitoring 
journal arti cial intelligence research 
kinny ljungberg rao sonenberg tidhar werner 

planned team activity 
castelfranchi werner 
eds arti cial social systems lecture notes ai pp 

springer verlag new york 
monitoring teams overhearing 

computational scheme reasoning dynamic probabilistic networks 
proceedings conference uncertainty arti cial intelligence uai pp 
san mateo ca 
morgan kaufmann 
knoblock minton ambite ashish modi muslea tejada 

modeling web sources information integration 
proceedings fifteenth national conference arti cial intelligence aaai 
kumar cohen 

fault tolerant multi agent system architecture 
proceedings fourth international conference autonomous agents agents pp 
barcelona spain 
acm press 
kumar cohen levesque 

adaptive agent architecture achieving faulttolerance persistent broker teams 
proceedings fourth international conference multiagent systems icmas pp 
boston ma 
ieee computer society 
lenser bruce veloso 

complete software system autonomous legged soccer robots 
proceedings fifth international conference autonomous agents agents pp 

acm press 
lesh rich sidner 

plan recognition human computer collaboration 
proceedings seventh international conference user modelling um ban canada 
levesque cohen nunes 

acting 
proceedings eigth national conference arti cial intelligence aaai menlo park ca 
aaai press 
marsella kaminka muslea tambe 

teammate experiences acquired design robocup teams 
journal autonomous agents multi agent systems 
martin cheyer moran 

open agent architecture framework building distributed software systems 
applied arti cial intelligence 
ndumu nwana lee 

visualizing debugging distributed multi agent systems 
proceedings third international conference autonomous agents agents 
acm press 
payne sycara lewis hahn 

varying user interaction multi agent systems 
proceedings fourth international conference autonomous agents agents pp 



role acquaintance models agent production planning 
klusch kerschberg 
eds proceedings cooperative information agents cia fourth international workshop lnai pp 

springer verlag 


reducing communication tra multi agent systems 
journal applied system studies 
pynadath wellman 

probabilistic state dependent grammars plan recognition 
proceedings conference uncertainty arti cial intelligence uai pp 

rabiner 

tutorial hidden markov models selected applications speech recognition 
proceedings ieee 
kaminka pynadath tambe reed 

dialogue frames agent communications 
proceedings third international conference multiagent systems icmas pp 

rich sidner 

collagen agents collaborate people 
johnson 
ed proceedings international conference autonomous agents agents pp 
marina del rey ca 
acm press 
tambe 

tracking dynamic team activity 
proceedings national conference arti cial intelligence aaai 
tambe 

exible teamwork 
journal arti cial intelligence research 
tambe erdem kaminka marsella muslea 

building agent teams explicit teamwork model learning 
arti cial intelligence 
tambe johnson jones laird rosenbloom 

intelligent agents interactive simulation environments 
ai magazine 
tambe pynadath das kaminka 

adaptive agent integration architectures heterogeneous team members 
proceedings fourth international conference multiagent systems icmas pp 
boston ma 
tidhar 

team oriented programming preliminary report 
tech 
rep australian arti cial intelligence institute melbourne australia 
tidhar 

team oriented programming social structures 
tech 
rep australian arti cial intelligence institute melbourne australia 


open distributed information systems way multi agent conception framework 
working notes aaai workshop agent oriented information systems pp 

appendix additional algorithms proofs appendix contains pseudo code algorithms described pseudocode provided body text 
include modi cations propagation procedures necessary propagation yoyo 
addition provide proof number coherent hypotheses agents linear size plan library number incoherent coherent hypotheses monitoring plan library agent monitoring agent monitoring system reasons monitoring hypotheses words view nite set possible plans agent may executing 
query agent current state monitoring system plan recognition algorithm picks speci members hypotheses current state agent call sets hypotheses jm construct team hypothesis monitoring system combine individual hypotheses form hypothesis team state 
agent monitoring system chooses individual hypothesis combination forms team state hypothesis 
uncertainty state agent team hypothesis exists 
uncertainty exists state agents clearly process selecting individual hypotheses combinatorial nature possible combinations individual hypotheses possible principle 
monitoring teams overhearing consider coherent hypotheses exist 
restrict coherent hypotheses selection individual hypotheses agent constrained selections agreement individual hypothesis selected agent 
selection individual state hypothesis rst agent choose second agent third agent hn jm individual state hypotheses rst agent follows number coherent team state hypotheses bounded jm size plan library agents 
fact number coherent hypotheses bounded mink members mink matched members individual hypothesis sets contrast de nition team state hypotheses incoherent 
kn min hypotheses 
yoyo propagation algorithms section algorithms section support main text provided completeness 
may contain step iterates teams take outgoing transition line algorithm line algorithm 
step requires clari cation iterating outgoing teams meet condition algorithm consults team hierarchy carry iteration topmost teams terms team hierarchy meet condition 
instance application domain team task force subteams transports 
transition allowed taken transports iteration teams allowed take transition consider task force 
transition allows task force iteration step take place executed team task force parent team transports 
algorithm team propagate plan probability beliefs plans teams allowed take outgoing hierarchical decomposition transition ct fc rst child taken team tg ct plans ct block block team propagate algorithm may require clari cations 
important note plans line traversed pre order parents children 
scaling calculation depends parent having scaled probability 
second iteration sub plans essentially captures plans subtree rooted parent plan subtree rooted child adjusted yoyo prior call algorithm 
fact team scale plans sure siblings alternatives team get scaled 
correct procedure called incorporating evidence siblings 
appendix experimental material plan team hierarchy evacuation application sample logs containing overheard messages provided part online appendix 
kaminka pynadath tambe algorithm team propagate forward team hierarchy beliefs plans plans block block plans post order children temporal order parents leaf block calculate probability terminating time parent known post order guarantees children set line temporal outgoing transitions tx xy xy teams allowed take temporal outgoing transition transition taken temporal outgoing transitions tx taken xy xy tx leads successor plan block block team propagate tx terminating transition parent parent xy xy parent outgoing probability children block block block block algorithm scale parent plan team child plan beliefs subplans team pre order block block block parent block parent block block block block parent block parent block 
