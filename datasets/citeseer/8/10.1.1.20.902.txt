fine control demand haskell william harrison tim sheard james hook pacific software research center ogi school science engineering oregon health science university wlh sheard hook cse 
ogi 
edu 
functional languages calculus core depart fi om fu foundation including features alter default evaluation order 
resulting mixed evaluation partly lazy partly strict complicates formal semantics languages 
functional language haskell language features pattern matching case expressions guards introducing strictness lazy language 
just haskell differ lazy calculus 
answer question introducing calculational semantics haskell exposes interaction strict features default laziness 
real functional programming languages completely lazy completely strict mixture 
functional languages commonly contain constructs alter default evaluation strategy programs efficient useful respect 
called strict languages ml scheme contain lazy programming difficult 
haskell features perturbing default lazy evaluation allow control demand primarily reasons efficiency 
heart real functional languages lie various flavors calculus strict lazy semantics understood time 
just semantics real languages messy mixed evaluation relate textbook examples 
answer question large fragment haskell 
contributions fold 
demonstrate techniques rigorously specifying mixed languages 
techniques particularly development nested patterns apply semantics functional languages general 
provide large case study development formal language specification informal 
haskell report describes haskell semi formal manner instances descriptions guided development formal specification 
described supported part national science foundation cda murdock charitable tl ust 
presents dynamic semantics larger fragment haskell including essentially overloading gathered place 
haskell contains large number constructs allowing control evaluation departing standard lazy evaluation 
say constructs introduce fine control demand subtle changes default lazy evaluation strategy haskell compelling reasons 
haskell features fine control demand nested patterns case expressions declarations guards clauses equations strict constructor functions newtype datatype definition facility se operator 
presents model features 
calculational semantics provides unified model constructs interactions haskell features 
calculational semantics mean meta circular interpreter haskell writ haskell 
distinguish calculational approach language definition taken denotational similar form spirit 
semantics haskell program designed standard techniques structures programming language semantics 
challenge confronted immediately writing language specifica tion arose fact evaluation control constructs interact ways difficult understand 
interaction easy write language definition lazy strict 
automated support form type checking unit testing specifications helpful eliminating bugs establishing confidence correctness definition 
alternative calculational approach defining languages advocated provide purely formal mathematical specification set equations 
writing semantics functional program number advantages approach 
language specification type checked executable 
subtle errors may caught easily corrected type checked environment 
interpreter tested large number examples 
unit testing invaluable identifying problems earlier versions semantics problems may overlooked purely mathematical specification 
earlier purely formal mathematical specifications nested pattern matching proved lazy strict having executable version helped expose isolate subtleties involved 
rationale part project pacific software research center attempting develop formal basis reasoning haskell programs automated tools mechanizing reasoning 
important part develop logic manipulate haskell terms standard model required establish soundness logic 
led literature surprise lacking formal descriptions big picture haskell 
plenty papers particular features haskell laziness class system little unifies ssn haskell fine control mechanisms added refined years 
haskell report uses strategy translating complex constructs simpler core language really just slightly extended lambda calculus 
translation approach useful problematic semantic definition expand issues appendix 
translations semantically harmless amounting removal called syntactic sugar 
translation schemas haskell report rely generation new source level variables 
semantics languages variable binding mechanisms complex defines language feature translation introduces new variables leaves understood semantic setting domains continuous functions moves complicated world 
languages binding mechanisms suggests kinds transformations means trivial model correctly 
serious defect translation approach fails compositional 
reason eschew techniques relatively simple alternatives adapt denotational semantics 
specifications inspired translations haskell report compare definitions report appropriate 
semantic metalanguage haskell care taken notation recognizable functional programmer 
languages ml miranda ill scheme clean haskell built monads give overview haskell monad syntax 
semantics relies error monad built haskell monad :10.1.1.17.268
structure monad unit return bind data just return return just just haskell alternative syntax bind called notation defined 
syntax haskell rich language features sublanguage identifies different syntactic categories 
categories include names assume reader familiarity monads :10.1.1.17.268
type name string data plus mutt data ls lazy strict deriving eq data integer pvar name name name nested linear repetition variables patterns data tl newtype tl data haskell expressions var name const integer undefined app abs name ls name seq bin cond case match undefined fx el data tl newtype tl el seq el el el el case ds type match type clause case pat body decs body decs data declarations fun name clause vat ds ds data bodies guarded normal ex ds ds fig 

syntax haskell sublanguage operators strictness annotations matches clauses bodies expressions declarations patterns 
display data definitions haskell represent syntax 
definitions conventional comments relate syntax concrete syntax haskell 
missing syntax necessary complete haskell definition module system classes list comprehensions notation 
scalar function structured data values data integer fv tagged name environments bind names values type env name meanings expressions patterns bodies declarations env mb env mp md env fig 

calculational semantics haskell model haskell section presents calculational model haskell compositional interpreter presents definitions semantic values environments env types semantic functions expressions patterns rap bodies rob declarations red 
semantic values constructed standard way corresponding universal domain construction denotational semantics 
environments map names values 
semantic functions compositional meaning term syntactic categories depends solely meaning subterms 
model laziness haskell laziness metalanguage haskell degree limits generality semantics 
alternative explored reynolds style monadic interpreter models laziness explicitly 
advantage reynolds style approach resulting semantics executed functional language strict languages ml scheme 
disadvantage unavoidable loss precision typing semantics 
reynolds style monadic interpreter semantic functions typed difficult setting distinguish clearly pure value world expressions declarations red computational world patterns bodies rap rob 
modeling failure haskell distinct kinds failure explicitly modeled monad 

kind failure arises run time errors division zero non exhaustive pattern match coverage 
head empty list example kind failure 

second kind failure stems non termination 
kind failure captured interpreter terminating 

third kind failure stems unsuccessful pattern match context failure may trapped controlled proceeding match case expression clause multi line function definition 
model failure computation monad 
failure failure kind occurs context match clause 
semantics failure kind reported causes interpreter terminate unsuccessfully 
assert programs fail manner denote bottom bottom semantic value usually written see 
semantic operators give explicitly categorical domain theoretic treatment summarize assumptions existence certain basic semantic oper shown 
operations function composition function application app currying sharp basic operations denotational descriptions functional programming languages 
call currying operation sharp beta converts uncurried function value beta form vl body equivalent curried form vl body 
assume semantic domain corresponding haskell type contains bottom element bottom domain pointed 
necessary existence fixed points necessary modeling recursion 
define fixed point operator fix standard way 
operation requires explanation 
operation meant specify haskell operation seq named accordingly semantic seq 
purpose seq allow haskell programmers force evaluation occur benefit seq evident call need semantics attendant sharing 
model uses seq force computation operand subsequent evaluations shared value 
haskell report cf 
section page seq defined equations seq 

ifx 
operator defined similarly subtlety arising model failure 
evaluates operand sufficiently match value doing may produce failure forms listed section ultimately producing bottom 
function composition diagrammatic application app app fv currying sharp int sharp vs beta beta tuple vs sharp vs beta fv sharp tuple tuple tuple vs tagged tuple vs vs beta domains pointed fixed points exist bottom bottom undefined fix fix fix purification run monad purify purify just purify bottom kleisli composition diagrammatic semantic seq case fv tagged alternation fatbar fatbar fb fb fb just fb just fig 

semantic operators operations kleisli composition alternation fatbar purification purify integral modeling haskell constructs involving fine control demand case expressions patterns guards multi line declarations 
kleisli composition control operator pattern matching 
function applied input performs 
produces just value 
produces 
meaning pattern similar behavior pattern matching failure match signified propagated 
expanded section 
fatbar operation integral specification case expressions 
fatbar ml ml indicating pattern match failure result ml returned 
sequencing behavior close meaning haskell case expression case ml 
semantics purification distinguishes computational aspects language pure value aspects operator purify signifies return computational world value world 
fine control demand may occur haskell expressions pattern matching meaning expressions value computation run monad purify converts computation value 
note match failure recast bottom purify reflects unrecoverable errors exhausting branches case 
meaning patterns pattern matching nested patterns challenging problem describing semantics functional programming language consider treatment nested patterns major contributions 
haskell patterns occur different syntactic contexts lambda expressions expressions el matches case el clauses multi line function definitions 
patterns may appear sub patterns patterns called nested patterns 
important exception haskell patterns behave pat terns functional languages ml clean 
haskell contains pattern operator represented tilde alter default order evaluation pattern match 
patterns form known haskell literature irrefutable patterns shall see term misnomer matches irrefutable patterns fail 
haskell patterns evaluated strictly ml miranda 
matching free pattern name comes fi om peyton jones function represented fat bar name fatbar data tree tree tree tree tree ex match failure exl ex match failure ex ex match failure fig 

shifting matching fi om binding evaluation value performs entire pattern match binding time variables contrast pattern match matching delayed variable evaluated 
sense pattern operator haskell splits evaluation pattern match binding evaluation times pattern variables 
examples help clarify pattern operator splits evaluation pattern match 
haskell function applications ex ex demonstrate evaluation subtleties arising irrefutable patterns 
involve variations pattern applied value call 
distinguish pattern ex ex affixed expression number pl 
note lambda expressions ex exl constant body ex ex variable bodies patterns pl include combination different bodies results different evaluation behavior noted right hand side 
contains pattern match ex performed entirely binding time variables results pattern match failure evaluated body ex 
exl identical ex pl affixed 
evaluating exl succeeds irrefutable pattern pl shifted entire pattern match evaluation times variables variable evaluated body exl failure producing pattern match performed 
evaluate variables ex match failure produced ex 
ex evaluation body forces match part outermost 
second allows match succeed 
variable evaluated body ex causes match failure despite fact subpattern matches argument interestingly case evaluating forces match previous failure cases 
model patterns 
pattern may modeled function value object matched produces bindings variables error signifying match failure 
refer variables pattern fringe 
specifying potentially error producing functions usually accomplished error monad haskell built monad purpose :10.1.1.17.268
view pattern function takes value returns tuple values containing bindings fringe model arbitrary tuples lists type semantic function rap iv 
rap just rs list values vs bindings fringe pattern match failure occurs rap returns 
define special function fringe calculating fringe pattern fringe returns fringe order occurrence left right fringe name fringe ps fringe foldr map fringe ps fringe pvar ix fringe ps fringe foldr map fringe ps fringe fringe matching variable forces matching succeeds variable bound value signified returning just iv 
match pattern constant argument compared constant pattern 
equal return signifying pattern match failure 
return just 
observe additional bindings empty list returned 
simplest pattern wildcard pattern succeeds returning just 
mp mp pvar mp mp mp ps tagged tuple vs mp ps tagged vs rap just just just map mp ps vs map rap ps vs rap just arity rap project map purify replicate project xs 
project xs project arity length fringe qs vs replicate replicate just vs just vs replicate fig 

semantics patterns tuples structured data common discuss cases 
auxiliary function performs sufficient evaluation match pattern 
matching haskell pattern pn tuple value vl vn succeeds match pi vi succeeds 
sense matching tuple patterns haskell somewhat strict 
function strict tuple takes list qs pattern meanings functions type corresponding list values rs applies pattern meaning qi corresponding vi 
matches succeed bindings collected match returned 
matches fails returned 
structured data similar 
pattern nps matched tagged vs tags compared 
tags equal ps matched vs case 
returned 
constructor function introduced newtype declaration acts identity function 
match pattern argument just match sub pattern argument 
similar rule evaluation newtype constructor functions function semantically interesting pattern irrefutable pattern semantics shown 
laziness match achieved wrapping actual matching just constructor 
mrp vl vn rap just vl vn bottom bottom rap arity 
notice identical purify rap branch returns list bottom values variable fringe 
generally effect deferring pattern match failure characterized equivalence rap just bottom bottom rap view patterns possible describe formally varieties pattern match failure binding evaluation time failure manifested semantics 
binding time failure match top pattern value manifested computation 
haskell include irrefutable patterns story 
match top match top return just bottom bottom variable fringe bound bottom 
precisely pattern match deferred evaluation time 
failing binding time variable fringe bound bottom match failure reported evaluation times fringe 
meaning expressions semantics meaning haskell program environment value function 
section contains detailed explanation semantic function expressions subsections describes related clauses making definition auxiliary functions necessary clauses 
auxiliary functions supply meaning syntactic categories haskell 
semantics haskell mutually recursire expressions deferred discussion declarations section 
env var rho rho const rho es rho tuple map rho es cond eo el rho ifv eo rho el rho rho undefined rho bottom ifv ifv tagged true ifv tagged false tuple tuple tuple vs tagged tuple vs fig 

semantics simple expressions pedagogical reasons text breaks definitions clauses time 
actual implementation need collect single place 
intended general audience constructs unique haskell described operationally appropriate 
simple expressions meaning variable obtained extracting binding current environment rho applying variables name 
constants simply turned values 
case tuples laziness haskell apparent 
evaluation subexpressions es suspended accomplished lazy list constructor 
conditional expressions easily translated control operator ifv 
meaning undefined expression simply bottom 
application abstraction function application abstraction essence functional language 
nested patterns bound haskell functional languages care taken implement haskell laziness correctly 
compute meaning application app app apply meaning el meaning 
meaning haskell abstraction defined terms auxiliary operation called lain describe detail 
meaning abstraction single pattern abs environment rho simply lain rho injected fv 
haskell abstractions may pattern bound lambda syntax abs env app el rho app el rho rho abs rho fv lam rho abs ps rho sharp length ps lam ps rho lain env lamp rho mp vs extend rho xs vs just purify xs fringe ps tuple ps fig 

semantics application abstraction pn 
note construct reducible previous case abs pl 
abs pn 
fact translation cf 
section abs pl pn waits arguments matching patterns abs pl 
abs pn matches arguments applied 
laziness abs pl pn achieved currying sharp times 
lain 
evaluating haskell expression applied value environment rho follows sequence steps 
match secondly just rs evaluate extended environment extend rho xs rs xs fringe match produces application fail 
observed section kind sequencing suggests kleisli composition 
steps neatly charac mp vs extend rho xs vs just xs fringe function values functions define lain rho expression composed right purify mp vs extend rho xs vs just purify example purification delimits computational aspects haskell 
abstraction effects arising pattern matching impurities eliminated post composing purify 
meaning guarded expressions body form guarded haskell expression occurring scope case expression function declaration pattern binding 
example case expression case gl el 
gn en gl el gn en body guards gl gn boolean valued expressions 
body represented syntax guarded gl el 
gn en 
body may unguarded represented normal just expression 
operationally bodies guards behave nested expressions 
body gl el gn en aforementioned case expression evaluate follows 
pattern match value fails continue 
pattern match succeeds evaluate gl gn ascending order true guard gi list exhausted 
gi true guard continue evaluating el 
guards false continue guarded bodies restrict branches case expressions taken 
particular identities hold case true 
case 
case false 
case 
identity shows having constant true guard identical having guard case having constant false guard branch equivalent ignoring branch altogether 
mb env mb normal rho just rho mb guarded gl rho ire gl rho ire rho ire gs rho ifv rho just rho ire gs rho fig 

semantics guarded expressions bodies bodies occur branches case statements 
displays semantics bodies mb env meaning unguarded body normal just meaning expression injected monad 
meaning body guarded gl el 
gn en ifv gl rho just el rho ifv gn rho just en rho behaves sequence nested clause 
context signifies falsity guards forced successful branch case fail branch case attempted 
env case ml rho mcase rho ml rho mcase env match mcase rho ml map match rho ml purify ms foldr fatbar ms function match construct meaning match match env match rho ds mp vs extend rho xs vs ds xs fringe rho ds meaning body clause ds env fig 

case expressions 
note defined 
case expressions consider semantics case expressions 
definitions discussed section summarized 
meaning case expression defined terms main auxiliary functions match 
function match gives meaning match really just branch case expression 
function uses fatbar semantic control operator construct meaning case statement 
match tuple ds match semantic specification similar lain discussed section occurs case expression valued 
additional consideration declarations ds visible body declarations appear haskell concrete syntax clause ds 
third auxiliary function models mutually recursire clauses haskell defer discussion section declarations handled 
suffices say rho ds meaning body scope rho extended contain bindings ds 
ds empty rho ds simply rob rho 
function match rho ds defined mp vs extend rho xs vs ds xs fringe see pattern lain bindings fringe ofp extracted kleisli composition rap rs 
extended environment passed call extend rho xs vs ds 
function mcase takes current environment rho list ml ran returns function unfolding definitions definition mcase value mcase rho ml ran seen form match rho ml fatbar match rho mn fatbar purify infix notation fatbar 
recall section term applied value control operator fatbar sequence match rho mi left right coming leftmost computation form just exists 
value expression case purify just simply match rho mi value term purify simply bottom 
eventuality occurs branches case expression exhausted 
function simple matter define case expressions 
example purification delimits computational aspects haskell 
failure computational world resulting interaction patterns cases guards value level failure bottom post composing purify 
constructor application constructor applications evaluated manner tuples 
key difference possibility constructors arguments annotated strict arguments 
example haskell write data string int signifies evaluation second argument strict 
represent syntax annotating sub argument constructor application strictness annotation type ls 
force evaluation strict constructor argument semantic operator defined 
expression argument strictly annotated constructor correct value resulting tagged value rho rho current environment rho 
may odd expression identical rho different termination behavior 
force evaluation rho may fail causing entire rho rho fail 
sequencing arguments constructor application el performed auxiliary function 
tests strictly annotated argument el outlined constructs returns corresponding tagged value 
sample hugs session showing application constructor applications represent readability haskell concrete syntax 
applications constructors undefined expression assumed constructor declared strictness annotation 
evaluating undefined rho env strict lazy constructor applications el rho el rho ls env name rho vs tagged vs strict es rho vs rho es rho vs rho lazy es rho vs es rho vs rho new type constructor applications rho rho miscellaneous functions seq el rho el rho rho bin op el rho bin op el rho rho bin plus bin mult bin tagged equal bin tagged equal true false fig 

semantics constructor applications seq arithmetic operations environment just results tagged value returned pretty printed form expect lazy constructor 
evaluating undefined produces failure forces evaluation argument undefined 
semantics undefined rho semantics undefined program error undefined newtype constructor application newtype constructor acts identity function easy define clause newtype constructors 
miscellaneous expressions come miscellaneous expression forms seq operation primitive binary operators 
assume primitive operators strict operands 
md env md fun cs rho sharp body body mcase rho map ps ds ps ds cs length 
head cs md val ds rho purify rho ds fig 

semantics declarations meaning declarations section consider declarations processed haskell 
declaration forms function pattern represented syntax fun cs val ds respectively 
cs list clauses cs 
semantics declarations discussed 
fun declaration corresponds multi line function declaration nth int nth xs nth xs nth xs observe clause necessarily number pattern arguments assumed typedness terms 
haskell report cf 
section page defines multi line function declarations translation case expression general binding form functions semantically equivalent equation simple pattern binding xl 
xk case xl xk 
plk pml 
xi new identifiers 
consider model fun cs environment rho 
reuse model case expression behavior haskell report quoted clause cs branch case mcase rho map ps ds ps ds cs term function say little argument 
general expect tuple value tagged tuple rs input branch case tuple pattern defined 
function curried form arity number arguments apply currying times sharp semantic operator 
full definition md fun cs appears 
interestingly currying operator sharp dispenses condition xi new identifiers quote variables fresh metalanguage 
haskell report cf 
section page defines pattern declarations translation expression 
begins giving general form pattern bindings words pattern binding el decls translation pattern binding semantically equivalent simple pattern binding decls gl el gm em error unmatched pattern translation means pattern binding may reduced related expression 
section function env models haskell clauses function specify binding 
val ds rho purify rho ds 
observe rho ds computation brought value world purify 
mutual recursion binding technique modeling mutually recursive declarations haskell adapts standard technique denotational semantics specifying mutual recursion recursive expressions 
technique applies lazy calculus variable tuple patterns bound care taken generalizing haskell nested patterns bound 
section overview standard technique compare definition haskell report describe specification mutual recursion haskell 
overview mutual recursion typically specified denotationally consider adding various binding constructs lazy calculus 
say semantics non recursive lazy calculus lazy env value env value defined similarly env respectively 
non recursive expressions frequently introduced syntactic sugar application der ax non recursive binding variable accomplished merely function application handled 
handling recursive binding follows similar pattern case explicit fix point operator fix necessary letrec der ax fix ax may contain recursively defined apply fix resolve recursion 
definition handles recursive binding 
standard technique denotational semantics extending equation sets mutually recursive bindings tuples 
case mutually recursive bindings set mutually recursive bindings xl el xn en refactor single tuple pattern xl xn tuple expression el en 
pattern expression play equation letrec xl el 
xn fix 
returning mutually recursive bindings haskell similar standard technique occurs 
complications arise haskell nested patterns bound just variables tuples 
comparing equation relevant equations haskell report section page see similar going pl el pn en ine pl pn el eo el case el variable appears free 
el fix el definition shows convert simple case expression manner similar equation 
definitions mutually recursive bindings single tuple pattern tuple expression resolves recursion explicit fix point 
worth pointing fix really hypothetical meant direct reader implicit intentions haskell designers haskell contain fix operator define 
semantic subtlety arises fact pattern matching perturbs haskell default lazy evaluation 
haskell abstraction may env ds rho rho ds env rho rho rho ds lam dp rho dp declared ds xs ds decls env tuple map md ds fix mp dp vs decls extend rho xs vs just purify env rho mb rho rho ds dp rho dp declared ds xs ds decls env tuple map md ds fix mp dp vs decls extend rho xs vs just purify rho mp vs mb extend rho xs vs xs fringe fringe declaration name fun ds ds val ds fringe ds fig 

semantics mutually recursive bindings partially strict argument abstraction evaluated get bindings fringe 
arguments fix lazy care taken annotate certain patterns irrefutable pattern operator pops somewhat definitions 
specification mutual recursion similar annotations necessary 
condense schemas guides specification mutually recursire binding haskell pl 
pn el concrete consider done specify ds manner discussed 
gather patterns left hand sides declarations ds call pl pn form necessary tuple pattern pl 
pn 
accomplished chiefly auxiliary functions declared shown 
adds pattern necessary 
note variable pattern pvar needs redundant need added 
declared ds returns tuple pattern component patterns 
declared declared ds map ds fun pvar val case pvar step specifying ds form tuple value right hand sides declarations ds 
corresponds tuple 
accomplished mainly mapping semantics declarations rad declaration list ds converting list tuple value 
recall tuple defined 
put pieces auxiliary function 
rho ds takes current environment rho extends mutually recursire bindings ds evaluates extended environment 
words rho ds precisely ds rho 
rho ds implements scheme equation define meaning haskell 
defined analogous manner auxiliary function 
describe clauses bodies handle mutual recursire bindings identically principal difference applies bodies computational type 
el seq just seq just just case case false case case true fac fac fac fac semantics el rho semantics rho program error undefined semantics rho program error undefined semantics rho program error undefined semantics rho semantics rho semantics hugs el hugs program error hugs program error num fromint hugs program error num fromint hugs hugs hugs fig 

comparing semantics hugs testing interpreter presents number examples compares output semantics executing hugs hugs haskell interpreter 
rho empty environment sake readability shown syntax translations el 
interesting cases el 
observed section lambda expression pl explicitly curried expression semantics agrees hugs interpreter point 
semantics explains somewhat surprising distinction nicely 
consider haskell terms tl just just tl rho function value fv bottom function applied fail 
meaning application bottom pattern matching just performed 
distinguishes 
required haskell report cf 
section page tl rho simply rho bottom 
haskell report contains number translation schemas describe interactions haskell features doing provide semi formal language definition programmers language implementors alike 
section included schemas motivate formal view mutual recursion 
schemas may viewed set axioms haskell satisfied candidate semantics including considered bona fide haskell semantics sense 
example validation occurs 
validated number translation schemas report having pattern matching number schemas remain unchecked 
follow collect haskell axioms proofs validation respect semantics 
haskell commonly referred lazy functional language properly understood non eager language contains features patterns seq operator introduce strict perturbations default lazy evaluation mechanism 
perturbations important practical reasons expert haskell programmers may strictness sparingly programs avoid computational overhead associated laziness giving entirely 
mixed evaluation order complicates haskell semantic point view 
modeled haskell control demand writing calculational semantics haskell relying certain built aspects haskell laziness model haskell 
alternative modeled haskell case mcase rho match rho fatbar match rho purify mp rho ust fatbar purify 
mp rho ust ust rho ust fatbar purify rho ust fatbar purify rho ust purify purify ust rho fig 

validating semantics translation case fine control demand monadic interpreter model full range fully strict fully lazy languages 
formal treatment fine control demand haskell believe techniques apply equally semantics functional languages general 
patterns considered nested patterns resort pattern match compilation simplify task 
clearly defines interaction data strictness annotations newtype data constructors haskell features 
code available online cse 
ogi 
edu wlh 
authors john launchbury dick kieburtz mark jones insights haskell constructive criticism earlier versions 
anonymous referees research group ogi offered helpful suggestions led significant improvements presentation 

harold abelson gerald jay sussman julie sussman 
structure interpretation computer programs 
mcgraw hill cambridge mass second edition 

olivier danvy 
compiling monads 
technical report cis kansas state university manhattan kansas ber 

daniel friedman mitchell wand christopher haynes 
essentials programming languages 
mcgraw hill book new york second edition 

murdoch gabbay andrew pitts 
new approach syntax involving binders 
longo editor proceedings lth annual symposium logic computer science lics pages trento italy july 
ieee computer society press 

carl gunter 
semantics programming languages programming techniques 
mit press cambridge massachusetts 

cordelia hall kevin hammond simon peyton jones phillip wadler 
type classes haskell 
proceedings european symposium programming volume lecture notes computer science pages 
springer verlag april 

mark jones 
system constructor classes overloading implicit higherorder polymorphism 
fpca conference functional programming computer architecture copenhagen denmark pages new york june 
acm press 

sheng liang paul hudak mark jones 
monad transformers modular interpreters 
conference record popl nd acm sigplan sigact symposium principles programming languages pages 
acm press january 

robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press 

eugenio moggi 
functor categories level languages 
proceedings international conference foundations software science computation structure fossacs volume lecture notes computer science pages 
springer verlag 

simon peyton jones 
implementation functional programming languages 
computer science 
prentice hall 

simon peyton jones 
implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming july 

simon peyton jones john hughes editors 
report programming language haskell 
february 

simon peyton jones simon marlowe 
secrets glasgow haskell compiler inliner 
proceedings workshop implementing declarative languages idl september 

simon peyton jones santos 
transformation optimiser haskell 
science computer programming september 

andrew pitts murdoch gabbay 
metalanguage programming bound names modulo renaming 
mathematics program construction volume lecture notes computer science pages 
springer verlag 

rinus plasmeijer marko van eekelen 
functional programming keep clean unique approach functional programming 
cm sigplan notices june 

home page 
www cse ogi edu projects 
james hook principal investigator 

joseph stoy 
denotational semantics scott strachey approach programming language semantics 
mit press cambridge massachusetts 

phillip wadler 
essence functional programming 
th popl pages january 
pattern matching compilation just desugaring pattern tx tn ti variables constructor function simple pattern 
ti variable patterns nested pattern 
pattern matching typically performed part front ghc hugs yields efficient programs see chapter wadler details 
shows example pattern match compilation definition haskell function nested patterns transformed similar definition nested patterns 
feature transformation necessity generating new variables xs xs way 
original nested patterns case xs xs xs xs pattern match compilation case xs xs case xs xs xs xs fig 

pattern match compilation syntactic previous attempts define denotational semantics core haskell concentrate fragment language nested patterns kind programs produced pattern match compilation 
semantics unnested haskell extended simply full language defining meaning term nested patterns meaning compilation 
example meaning identified 
observe extended semantics relies ability generate fresh names semantics 
implicit assumption approach compilation just semantically irrelevant elimination syntactic sugar 
defect extended semantics longer compositional 
serious flaw derives reliance fresh name generation pattern matching compilation 
developments semantics staged languages reveal structural consequences including name generation denotational semantics considerable 
serious consequences developing simple logic haskell programs 
