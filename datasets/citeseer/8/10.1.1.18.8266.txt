functor pulling lambert meertens department algorithmics architecture cwi amsterdam department computing science utrecht university netherlands www cwi nl lambert concerned construction basic building blocks polytypic programming 
polytypic program program generic type constructor say specializing list program lists obtained tree get program trees 
known examples polytypic building blocks initial algebra assuming initial algebra exists ff catamorphism combinator fa details see 
previous defined crush combinator hh ha ai phi theta regular giving generic way reduce data structures binary operation 
define generalization crush examples 
polytypic basic building blocks advanced applications part performed visiting kestrel institute palo alto 
preliminaries constant functions mapping 
returning denoted polymorphically typed type variable ffi categorical embedding assume categorical embedding programming formalism usual mappings function arrow type object type constructor functor polymorphic function natural transformation typing translates covariant functors 
usual functional programming idiom treat polymorphic functions multiply typable functions base category additionally may typing functor category equally general typings correct concat list list list concat list int list list int concat list list concat list deltaf list deltaf function composition denoted ffi functor composition denoted delta 
assume category finite sums products initial algebras regular defined section 
binary sum inl inr binary product exl theta exr theta theta functors functor gammag theta defined gammag hfa tuple notations avoid excessive delta delta delta need notation 
indices run initial segment naturals 
writing tt gamma form tt may omit superscript inferred reasonably guessed context 
notation hi tuple ha gamma behaves functor respects typing composition 
range hi hi hi hi ffi hi ffi hi hi tt expression tupled constant hi ha ai may omit running index altogether write 
projection functors ex tt defined ex hi gamma running index tupling results sequence functors common source generalizing binary gamma tupling gamma tt defined pointwise gamma hi gamma gammaf 
tuple typed polymorphic functions correct typing hi gamma gamma consequence treating polymorphic functions typed functions base category proper categorical treatment natural transformations typing gamma gamma gamma functor category 
rules involving gamma 
ex gamma rule ex delta gamma gamma fusion rules gamma deltag delta gamma gi gamma deltag gamma fi delta fold product defined tt functor functors deltag deltag note theta deltaf usually superscript clear context 
transposition transposition functors defined gamma ex spelling am gamma gamma 
gamma gamma gamma gamma gamma 
delta delta delta gamma gamma 
gamma gamma gamma gamma gamma rule delta gamma gamma delta gamma definition gamma ex delta gamma gamma fusion gamma ex delta gamma functor gamma ex delta gamma ex gamma rule gamma pairs transpositions form natural isomorphisms delta gamma gamma regular functors regular functors extension class polynomial functors type functors 
define notion 
type functors binary functor theta define fixed unary functor ha bi 
exists initial algebra unary type functor defined ffi id initial algebra functorial typing gamma example list bi thetab initial algebra list theta list putting cons ffi inl nil ffi inr cons list theta list nil list conversely cons nil 
details consult 
grammar regular functors functor built ex theta gamma delta called regular functor 
formal context free grammar ary regular functors ary constant functor ex projection gamma theta binary sum product gamma functor tupling deltaf functor composition type functor induced rule functor composition target type category course form tt extended arbitrary finite sums products defined produce ary functors ary functors extensions handled obvious isomorphisms theta functor list produced grammar list delta theta gamma functor pulling ary functor 
want define polytypic functions ary hf ha gamma ha gamma 
ha gamma gamma gamma gamma hh ha gamma ha am gamma 
ha gamma gamma gamma gamma function pulls speak functor inside parameter example function theta product unzip exl exr hi theta hi hi thetab choice typing specializes ha ai type polytypic crush 
problem addressing generalizes notion 
polytypic polymorphic type variables ij transposition functors typing rendered succinctly naturally deltaf deltat deltah id simplifies deltaf deltah unary viewed possible tt tt polytypic function unzip defined completely generic requirement functor categories products 
general lucky need assume regular define polytypic combinator induction structure process shall see ingredients needed body done crush concerted effort minimize number ingredients supplied combinator possible take available free 
consider cases corresponding production rules grammar 
inductive hypothesis deltaf deltat deltah sufficiently simple postpone case 
case ex requirement ex deltat ex deltah choice obvious ex id case need supply ingredient combinator 
case requirement delta deltat deltah spelling type variables type hi hi hi hi hi hi hi see case theta requirement theta delta theta deltat theta deltah free solution 
example requirement boils theta thetab thetab theta set polymorphic solution take showing pulled set categories having arrows typing 
ingredient phi delta theta deltat theta deltah supplied 
case gamma requirement gamma delta gamma deltat gamma deltah inductive hypothesis deltaf deltat deltah tuple hi gamma delta deltat gamma deltah delta gamma deltat gamma deltah required typing 
case deltag requirement deltag delta deltag deltat deltag deltah inductive hypothesis viewing unary deltaf deltah pg deltag deltat deltah deltaf deltag deltat deltah deltag deltat delta deltag deltat deltah deltag deltat fpg deltah deltag deltat deltag deltah composing obtain free ffi fpg having required typing 
case requirement delta deltah 
ha bi pattern match required typing ga ha catamorphism typing ga hha ga functorial typing abstracting type variable amounts deltag deltah deltag deltah gammag see catamorphism delta deltah provided construct typing delta delta deltah gamma inductive hypothesis deltaf deltat deltah deltaf deltat gamma deltah gamma delta gammaf deltah gamma function gamma delta delta gammaf free solution case ffi 
case requirement delta deltat deltah hi hi non typed 
case theta free solution consider 
construction specializes 
taken neutral element phi ingredient needed case theta 
general neutrality phi usual sense meaningless operations type theta neutral elements typing phi form 
define generalized notion neutrality 
consider exr hi theta hi phi way constructing function typing hi exr ffi phi ffi theta id typing hi hi theta phi hi theta hi theta hi theta id hi theta hi theta hi require equi typed generic functions equal 
similar coherence condition obtained switching left right 
require requirements combined unique solution 
define element neutral phi hi exr ffi phi ffi theta id exr hi exl ffi phi ffi id theta exl requirement phi unique neutral element specialization neutrality gives conventional notion neutrality 
introduce notation constructed hh notation special case crush 
summary functor phi delta theta deltat theta deltah unique neutral element hi hh deltaf deltat deltah inductively defined regular functors hh hh ex id hh hh theta phi hh gamma hi hh hh deltag hh ffi hh hh ffi hh example specialization specialization hh list list delta theta gamma gives hh list definition hh ffi ffi phi rules functor hi ffi inl ffi phi hi ffi inr ffi examples section give examples functor useful different problems 
freely mix functional programming idiom categorical notation 
cross application hh ii construct generalization cross product sets 
assume type constructor set example values type set int sets naturals 
set functor defining set xs ff want cross generalization cross theta set theta set theta set cross theta hxs ysi fhx yi xs pair sets turned set pairs 
set pulled 
list example cross list fu vg fx general structure sets turned set structures way choosing elements constituent sets 
apply intuition govern construction set neutral element typing set constant type set 
values type empty set singleton set ffflg ffl stands single inhabitant unit type 
structures source type constituent sets freedom making choices exactly way choosing element constituent sets 
result singleton set ffl ffflg 
solution satisfies required coherence conditions choice 
define generically cross theta ii cross theta defined 
previous section specialization cross list set ffi inl ffi cross theta set ffi inr ffi ffflg set fx delta delta deltag ff delta delta deltag recalling ffi inl ffi inr correspond list constructors cons nil respectively express conventional functional programming idiom cross list foldr fl ni xs fl ys hx yi xs jeuring defines mutually recursive polytypic functions cross cp type functors 
approach single definition job cross cp 
full type constructor defined data consider structure type hi 
position filled value form turn structure type hi impossible generic way inventing values fill missing entries 
best deliver structure type hi idea encapsulated generic function full hi hi words want pull internal outside 
need define full theta express functional programming style pattern match full theta hone yi hx yi full theta positions pair filled pair returned 
missing returned 
find neutral element reasoning cross find ffl natural transformation set fxg denotes course empty set 
specialization generic hh ii ffi hif 
possible express relationship cross full state proof ffi full cross ffi monads set functor monad question cases instances generic construction monads 
answer appears provided functor strong details worked 
functor arise monadic construction 
theta endofunctor unzip coincides theta ii regular functor arise monad 
endofunctor functor monad holds 
research questions half zips hoogendijk backhouse define generic half zips commute type constructors 
done setting exist arrows typing comparison results non trivial exercise 
relationship needs study clarification 
monadic construction details construction monadic functor mentioned section worked uniqueness neutral element required uniqueness neutral elements 
simple exercise algebra show normal neutral elements operation phi theta unique 
known examples polymorphic functions phi delta theta deltat theta deltah neutral element element exists unique unknown necessarily 
calculational theory calculational rules functor 
regular functors appear polymorphic arrows category small categories 
higher order parametricity boost calculation 
regularity possible extend theory non regular functors 
special theta easily pulled 
specification declaratively specify function fully partially typings inhabitants 
know functor constructed right generalization specific instances question pertains parts polytypic programming 
typing guarantee uniqueness inhabitants 
richard bird oege de moor 
algebra programming volume prentice hall international series computer science 
prentice hall 
paul hoogendijk 
generic theory data types 
phd thesis eindhoven university technology 
www win tue nl cs wp papers papers html 
paul hoogendijk roland backhouse 
datatypes commute 
moggi rosolini editors category theory computer science pages 
springer verlag 
lncs 
www win tue nl cs wp papers papers html 
patrik jansson johan jeuring 
polyp polytypic programming language extension 
popl th acm sigplan sigact symposium principles programming languages pages 
acm press 
www cs chalmers se publications html 
johan jeuring 
polytypic pattern matching 
conference record fpca sigplan sigarch wg conference functional programming languages computer architecture pages 
www cs chalmers se publications html 
johan jeuring patrik jansson 
polytypic programming 
launchbury meijer sheard editors advanced functional programming second international school pages 
springer verlag 
lncs 
www cs chalmers se publications html 
malcolm 
data structures program transformation 
science computer programming 
lambert meertens 
calculate 
herbert doaitse swierstra editors programming languages implementations logics programs 
proceedings eighth international symposium plilp volume lncs pages 
springer verlag 

