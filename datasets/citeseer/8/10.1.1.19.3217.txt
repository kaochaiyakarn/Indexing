constraint programming agent automated trading erik magnus boman mats carlsson eriksson finne janson lars sics swedish institute computer science ab box se kista sweden th february trading agent competition tac combines fairly realistic model internet commerce including challenging problem automated reasoning decision making 
automated trading auctions severe time constraints conducted entering autonomous agents tac assuming role travel agents 
tac game rules description discrete optimization problem faced agent wishes allocate goods clients described 
tac entry encapsulating constraint programming solution explained detail 
sics swedish institute computer science ab entered agent named tac trading agent competition second series events organized university michigan 
main goal tac stimulate research design agents representatives clients seeking acquire goods competitive internet auctions 
overview event tac general philosophy motivation published 
published description agents reached finals detailed presentations best performing agents 
sics tac february presentation second event considerably challenging tac home page presentations agents reached semi finals 
detailed descriptions presently prepared widely circulated apparently available web time 
second event generated significant attention general press 
tac scenario hand prototype problems come commerce advances complex domains agent represents clients characteristics known run time assigned task delivering travel package 
bundle goods consisting flight mandatory flight mandatory rooms hotel nights location mandatory entertainment tickets optional 
agent receives client lump sum delivered travel package choice hotel entertainment tickets 
goods bundled acquired separate line auctions running michigan internet auctionbot server 
run game agents representing clients known tac instance 
actual competitions tac tac taken place round robin tac instances large number qualifying seeding rounds smaller number semi final final rounds 
hand tac scenario seen general procedure automatically distributing goods clients hold non additive utilities 
contrasted procedures ways 
privacy tac client transmits preferences agent agent transmit interacts auction server placing bids 
agent reveals relatively little aggregated demand curve clients server surrounding world 
economic efficiency clients transmit preferences server server compute optimum 
solve resource allocation problem large combinatorial auction 
outcome tac instance seldom optimal 
computing optimal allocation computationally difficult problem open question approach scale practice 
requires clients reveal demand curve server goes privacy dimension 
discussion see 
aspect tac distributed computation 
intelligence tac resides agents 
relative clients solve combinatorial optimization problem goods acquired agent packaged bundles delivered clients 
fact problem facing agent respect completely equivalent auctioneer determining winning sics tac february bids combinatorial auction 
successful tac agent similar integer programming techniques alternatively techniques constraint programming 
relative agents tac agents strategy problem 
determine strategy competitive situation easy 
game played times players deterministic strategies weaker players collection players evolve nash equilibrium mass action interpretation nash theory 
different equilibria strategy choose depends strategies 
tac number players large long agents generalized strategies nash equilibrium assured furthermore weaker players mass action interpretation apply 
essentially means known way compute priori best course action 
agent methodology presents mechanisms encapsulation preferences 
encoding information server readable data serve input optimization algorithm interesting feature tac agent approach automated trading 
determinism basic matching service allowed disturbed novel approaches electronic trade steadily increasing 
definitions agents service exchange systems general formulation evaluation complex orders 
intellectual tradition computer experiments competitive strategy games experiments simple robust strategies quite 
prisoner dilemma competition best strategy simple tit tat 
santa fe computer double auction tournament best simple steal deal 
retrospect tac offers example 
winning strategy simplest reach finals strategy deduced bids 
complicated strategy worse 
organized follows section describe idea strategy sections describe constraint programming solver architecture agent implemented 
section tells story finals strategy relatively unsuccessful 
section sums presentation discusses choices lessons learned 
completeness summarize important information rules tac appendix sics tac february strategy execution loop main strategy agent repeated locally optimal adjustments goods currently held 
adjusted flights agent ended unused flights 
strategy follows collect price quotes get updated price quotes auctions 
compute marginal costs type goods calculate marginal cost vector cost changing current amount units goods need sell goods get units cost negative positive 
goods bought auction closed cost set infinity sold set zero 
agent know true marginal costs costs somewhat naively estimated mix historical data mean current prices see 
compute allocation constraint solver described section computes optimal amounts goods goods acquired marginal costs 
solver anytime algorithm produces increasingly better allocations 
run solver seconds works reasonably 
bid bids computed hold currently bid required allocation step 
maximal price bid resources amount specified marginal cost vector 
event auctions increase bid maximal price exponentially hotel auctions bid maximal price immediately 
hotel quotes updated minute hotel auction closes minute 
flight auctions handled differently pose kind real option problem act act 
different heuristics tried 
competition tried avoid buying flights unused finding flights needed 
done calling solver times high low sics tac february price estimates 
flights allocated bought early 
rest flights bought normal goods minutes play 
iterate bids placed monitor auctions see allocated resources bids invalid auctions closes 
return step 
game ended terminate loop 
comments realize price quotes hotel auctions updated continuously 
initially believed hotel prices go able track prices closely 
optimal allocation hotel rooms agent valid bids assumed agent simply raising bid rooms drop auctions 
hotel rooms sold bids hotel rooms withdrawn assumed superfluous hotel rooms going problem 
flight tickets wanted test various variants concerns 
tried treat flight tickets buy solver says 
generally led agent buying flight tickets buying stage solver decided allocation pattern better 
buy flight tickets delayed tactic generally specified times fraction solver told 
led buying flight tickets somewhat late instances paying comparatively high prices 
final stages competition variant delayed tactic described 
noted estimates expected prices sophisticated 
expected prices entertainment tickets latest available prices separately bid ask 
sics tac february expected price flight ticket expected price time purchase 
strategy called purchasing ticket time expected price known current time instance expected prices hotels av erage prices hotels previous rounds 
time progressed monitored actual price current instance 
assumed price grow linearly auction closed provided extrapolated expected price expected closing time 
compared estimate current instance average previous rounds largest expected prices hotels 
easy observation data auction rooms hotel day closes prices rooms hotel day tend rise 
soon hotel closed day average price hotel day taken conditional average previous rounds hotels closed order 
attempt extract information hotel room prices order closing auctions 
solver task solver module compose trip package clients net agent utility maximized 
utility difference total client benefit total cost 
cost benefit functions solver module extensionally tables 
constraint programming finite domains clp fd approach optimization problem 
variables variables range interval integers denoted problem variables variable client denotes trip allocated sics tac february arrival day denotes trip departure day denotes trip denotes hotel event day denotes event 
cumulated variables variables simply functions problem variables range denotes day 
number arrivals day number departures day number cheap hotel rooms day number hotel rooms day number event tickets day objective function denote benefit commodity client denote price items commodity day functions input data 
objective maximize function constraints section denotes equation holds 
sics tac february link constraints tickets 
constraints link problem variables flights events cumulated variables 
encoded global cardinality constraints basic form 
link constraints hotel rooms 
constraints link problem variables hotel rooms cumulated variables 
encoded single constraint basic form 
purpose need introduce new cumulated variables number arrivals day clients staying cheap hotel number arrivals day clients staying hotel number departures day clients staying cheap hotel number departures day clients staying hotel 
sics tac february arrival precedes departure 
trip constraints 
trip allocated client event constraints 
client visit event arrival departure dates 
sics tac february search procedure clp fd incomplete constraint solver 
having declared variables posted constraints constraint solver may able detect global infeasibility resort search usually form backtrack search 
true solver module search procedure details 
search optimality 
tac search procedure property quickly finds solution keeps finding progressively better better solutions 
clp fd setting usually done variant branch bound search solution best far search limited better solutions bounding benefit function eqn 

new solution search restarted tighter lower bound 
avoiding useless 
procedure finds solution records trace choices way root search tree solution 
idea bad choices ones lead solution 
search restarted information avoid bad choices 
escaping trap depth search 
main advantage depthfirst search great memory efficiency search tree explored space proportional single branch 
main drawback sensitivity search order choice truly critical undone rest search space exhausted 
popular way mitigating drawback limited discrepancy search lds simply depth search upper bound number backtracks path root 
solver module uses lds iteratively incremented bound 
variable order 
rank client denote client maximal utility 
problem variables assigned order arrival departure dates ii hotels rooms iii event tickets 
sets variables ordered descending rank respective client 
value order 
estimated value assignment computed average lower upper bounds benefit function sics tac february eqn 
assumption clp fd setting straightforward compute 
hotel room event ticket variable going assigned solver module tries values domain descending arrival departure dates going assigned solver computes estimated value combination values tries value tuples descending agent implemented agent played trading agent competition written somewhat quickly seeding rounds 
parts design earlier agent participated qualification rounds 
developed sicstus prolog including solver tac optimizer described section 
architecture shows architecture 
section describe implementation parts solver 
communication scheduling component handles communication tac server solver 
handles scheduling components need active tac games auction handlers 
necessary prolog single threaded 
game handler component responsible handling specific game initialized game started game client preferences received agent 
setups auction handlers game handles communication auction handlers solver 
game handler sure solver started quotes received auctions 
ensures agent place bids tac server started auctions 
sics tac february agent architecture handles retrieval transactions reports auction han 
restarts solver calculate new client allocation allocation failed probably fail 
determines game ended handles final score calculation solver 
auction handler component super object flight hotel entertainment handlers contains common code handling quote information allocation bids flight hotel entertainment handlers instance auction handler specific type auction type item sold auction 
convert information internal format solver format interaction solver take place 
sics tac february handlers default bidding strategy implemented important enable plug strategy handlers making easy experiment different strategies 
strategy components strategy component implements strategy type auction implement predicates methods calculate solver prices impl calculates expected prices sent solver new optimization 
calculate new bid impl calculates new bid desired number items number owned current price 
happens solver gives agent new orders follow previous bids item 
calculate replacement bid impl calculates bid replace old bid desired number items number owned current price bid placed 
happens solver gives agent new orders previous bid 
update bid list impl update current bid signal time send new price expectations solver 
happens current bid longer valid price increase 
results tac competition sics entered agent preliminary rounds tac incomplete quite badly 
organizers tac generously invited seeding rounds 
walk existing code decided redo implementation scratch 
began september development continuing seeding rounds began september 
agent eventually finished number relatively better seeding rounds 
agents divided quarters respectively top bottom quarters fighting half seats finals middle quarters half 
placed fifth heat advance finals 
results summarized table 
sics tac february points beat agent heat agent heat advance 
discussed table differences statistically significant scores top bottom heat tended little higher middle heat 
said ready earlier qualified middle heat seeding rounds better chance reaching finals 
agent reasonably stable seeding rounds 
results taken due defects strategy remaining implementation problems 
retrospect described section partially built misunderstanding competition rules 
starting second implementation realize hotel price quotes date indicative pay get room 
reasonably add heuristic corrections 
essentially kinds estimates expected prices history current instance played ii factors compensate price quotes hotels old usually low 
described systematic time 
second time consider seriously best choice just settled factor usually fraction averaged final price earlier rounds seldom dropped auctions 
discussion trading agent competition challenging market game 
interesting purely practical commercial reasons prototype commerce 
possible application areas include automatic decision making allocation fine grained commodities shorter time scales possible human traders 
examples markets bandwidth electric power consumption communication services prone overloading congestion 
services tac agents may potential interest human users looking travel packages business travelers 
sics tac february results tac agent heat score std dev min max retsina polimi bot umbctac arc table results tac 
affiliations agents team members tac home page 
heat composed agents placing top bottom quarter seeding rounds heat contained agents middle half 
top agents heat advanced finals 
score computed average result instances unbiased estimate agent play iterations restarting scratch instances estimated error order agent standard deviation divided 
differences score points heat taken statistically significant 
sics tac february results tac finals agent score std dev min max high low retsina table results final tac 
table entries table column ranks agents respectively highest lowest results finals 
crash game score third place standard deviation 
number instances final differences standard deviation divided significant 
token agents switch order pairwise significantly ahead 
exceptions placing significant measure 
interesting ranking agents score partially reproduced ranking highest lowest result match perfect 
robustness test performed tac organizer subtracting fluctuations desirability random preferences actual clients 
re analysis essentially reproduces order 
sics tac february tac set interesting right 
stimulated groups implement adapt suitable anytime optimization packages able compute collection goods really worth agent 
tac teams packages computed optimum tac agents reaching 
problem complementary utilities calculate efficiently certainly wider interest computational economics 
tac stimulated thinking strategies 
game tac rules slightly different described strongly favored decisions late possible 
year important monitor network characteristics adapt strategy response times 
tac upward trend flight prices waiting moment bad strategy 
uneven updating hotel prices meant quality network connections probably mattered event tickets auctions 
highest scoring agent living agents ag bids flights hotels immediately start game instance played close opposite strategy 
passing may note placed high bids hotel rooms wanted got 
price pay game rules th highest bid generally lower 
success depended entirely agents making reasonable bids nice illustration efficient market hypothesis fully deterministic setting 
sics agent reasonably 
crash twice expensive re allocations ocular review game history data suggest unnecessary 
results probably reflect strategy implementation 
basic idea strategy partially misunderstanding competition rules lesson investigate carefully time 
far reaching lesson helped local test environment run tac agents controlled manner anecdotal evidence suggest successful teams develop platforms 
finals decided re engineer tac server alpha version available 
intention server written sicstus prolog released open software public domain 
discussions way university michigan team hold tac event server 
tac concept quickly benchmark automatic test qualifying seeding final games tac tac run tac server university michigan built proprietary software auctionbot available source code executable 
sics tac february market research 
look forward participating event 
supported swedish board technical development project swedish institute project 
summary tac rules completeness summarize rules tac 
description complete particularly bids expressed auction server see 
utilities feasible travel package consists flight flight rooms hotel nights optionally tickets entertainment events 
client utility feasible travel package travel penalty hotel bonus fun bonus utility agent collection goods sum utilities clients feasible travel packages delivered 
client set preferences preferred arrival date preferred departure date wants pay extra hotel wants pay entertainment event 
travel penalty actual arrival departure dates day away hotel bonus client gets stay better hotel 
trip irrespective length 
entertainment tickets feasible entertainment package ancillary feasible travel package contains event events day event day departure 
fun bonus sum client wants pay events feasible entertainment package 
sics tac february utility agent collection goods highly non linear flight tickets worth combined hotel rooms delivered client feasible travel package 
collection goods typically ways dividing packages 
computing combination packages maximizes agent utility problem combinatorial optimization 
auctions goods distributed separate markets called auctions 
instance tac game runs minutes 
auctions run full time 
auctions flight tickets properly just counter markets seller auction server holds unlimited supply tickets 
flight auctions possible flight day day possible flight day day 
auctions open full instance clear continuously 
price charged seller changes time somewhat way airline sells seats flight released different dates 
price changes random general trend upward 
hotel rooms sold ascending multi unit th price auctions kind gen vickrey auctions 
items hotel rooms kind 
price item th highest bid 
hotel auctions tac game instance night type hotel bad 
hotel auctions start game 
hotel auctions close minutes game scheme randomly chosen closes minute event tickets initially distributed randomly agents 
bought sold agents standard continuous double auctions 
twelve auctions kind day kind entertainment 
auctions clear continuously open instance 
available information tac api allows agents query status auctions bid price ask 
flight auctions entertainment auctions auction server answers updated information delay 
sics tac february curious feature tac server instantaneously process bids hotel rooms 
minute available bids collected highest bids selected 
full minute server answer th highest price calculated updated price quote account taken higher bids may arrived price beat get hotel higher quote 
similarly agents holding bids highest minute full minute receive reply bids active may 
summary important feature tac agents get information current prices hotel rooms prices continuously computed 
sics tac february andersson ygge 
integer programming combinatorial auction winner determination 
proc 
fourth international conference multiagent systems icmas 
andersson ygge 
managing large scale computational markets 
proc 
st hawaiian international conference system sciences volume vol vii software technology track pages 
ieee computer society 
robert axelrod 
evolution operation 
basic books new york usa 
nicolas mats carlsson 
new multi resource constraint negative heights 
technical report swedish institute computer science 
finding smart web get easier 
boston globe 
doug bryan 
commerce trading competition pits bot bot 
center strategic technology research 
anne eisenberg 
online auctions ll bot vs bot vs bot 
new york times 
mats carlsson sicstus prolog user manual 
swedish institute computer science release edition 
isbn 
eugene fama 
efficient capital markets review theory empirical 
journal finance 
luca maria gambardella 
autonomous bidding agent simultaneous auctions 
proceedings fifth international workshop cooperative information agents cia volume lecture notes artificial intelligence lnai pages 
amy greenwald justin boyan 
bidding algorithms simultaneous auctions case study 
proc 
third acm conference electronic commerce pages 
amy greenwald peter stone 
autonomous bidding agents trading agent competition 
ieee internet computing march april 
sics tac february dave 
tampa plays host bots 
st petersburg times 
william harvey matthew ginsberg 
limited discrepancy search 
chris mellish editor ijcai proceedings international joint conference artificial intelligence montreal 
pascal van hentenryck 
incremental constraint satisfaction logic programming 
warren szeredi editors iclp th int 
conf 
logic programming series logic programming pages jerusalem 
mit press 
mo 
ladies start 

harold kuhn john reinhard selten weibull eric van peter 
john nash game theory 
persson editor nobel lectures economic sciences pages 
world scientific singapore 
kevin 
tac finals analysis 
mail wellman list sent nov 
tim mcdonald 
robot agents coming soon software near 
yahoo news 
nash 
non cooperative games 
phd thesis princeton university 
kevin malley 
agents automated online trading 
dr dobb journal 
eric rasmussen 
games information nd ed 
blackwell publ cambridge ma usa 
gin 
generalized arc consistency global cardinality constraint 
proc 
th aaai pages 
mit press 
michael rothkopf ronald 
computationally manageable combinatorial auctions 
technical report rrr rutgers university nj usa 
john rust john miller richard palmer 
characterizing effective trading strategies insights computerized double auction tournament 
journal economic dynamics control 
tuomas sandholm 
algorithm optimal winner determination combinatorial auctions 
proc 
international joint conference artificial intelligence ijcai pages stockholm sweden 
sics tac february tuomas sandholm 
cabob fast optimal algorithm combinatorial auctions 
proc 
international joint conference artificial intelligence ijcai seattle wa 
peter stone michael littman satinder singh michael kearns 
adaptive autonomous bidding agent 
journal ai research jair 
betsy strother 
trading agent competition 
exchanges 
ec trading agent competition auction eecs umich edu 
tac team michael wellman peter wurman kevin malley de lin daniel reeves william walsh 
designing market game trading agent competition 
ieee internet computing march april 
tac 
www sics se market tac 
pascal van hentenryck 
constraint satisfaction logic programming 
mit press 
michael wellman amy greenwald peter stone peter wurman 
trading agent competition 
unpublished manuscript 
