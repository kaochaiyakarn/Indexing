file system benchmarks tomorrow thomas performance minneapolis minnesota com ph growing popularity storage area networks sans clustered shared file systems file system distinct critical part system environment 
file system mitigates access data mass storage subsystem certain behavioral functional characteristics affect performance application system point view 
measuring file system performance significantly complicated underlying disk subsystem types higher level operations performed allocations deletions directory searches 
tasks measuring characterizing performance file system complicated sans emerging clustering technologies add distributed aspect file systems 
similarly cluster san grows size task performance measurement 
objective study identify significant issues involved file system benchmarking highly scalable clustered environment 
discusses approach measuring file system performance large scale clustered supercomputer environment specifically supercomputer built los alamos national laboratories lanl half part accelerated strategic computing initiative asci 
supercomputer approximately terabytes disk storage connected cluster processors running unix variant multi layer distributed file system 
environment stresses capabilities file system benchmark program demonstrates happens file system system size scales large sizes 
outset study necessary examine capabilities various file system benchmarks currently produced commercial organizations 
include old favorites bonnie postmark aim suite vii lmbench hbench 
determined quickly benchmarks capability meet requirements dictated architecture machine 
apparent benchmarks reason easily modified operate effectively targeted environment 
objective study determine design benchmark suite gauge bandwidth transaction performance highly distributed hierarchical parallel file system underlying storage subsystem 
summarizes high level design issues involved development program suite benchmark storage subsystems file system hierarchy 
begins description hardware infrastructure machine 
followed descriptions hierarchy file system performance 
short discussion benchmarking versus characterization perspective performance view 
various issues affect performance results caching effects file system aging briefly described order keep visible 
remainder describes logistics managing workload generators collecting performance data analyzing generating reports 
hardware infrastructure issues task gauging performance file system relatively simple files systems local computer system 
advent physically shared disk subsystems measuring performance file system significantly complex 
due fact number measurement points increased computer system computer systems share access disk subsystem importantly data levels 
furthermore share parts disk subsystem controllers paths switches entirely separate connections share media data 
order sense application level benchmark suite performance characteristics underlying hardware infrastructure separated performance characteristics file system 
critical understand file system interacts underlying hardware infrastructure 
case machine pieces hardware architecture need considered compute nodes system area network cluster fabric nodes storage area network storage fabric storage devices pieces certain functional performance limits need evaluated understood isolation operate system final configuration 
example necessary determine performance characteristics single disk array single node scale number disk arrays configuration maximum determine performance anomalies result scaling 
similar exercise required evaluating performance scaling storage area network nodes disk arrays added fabric 
performance compute nodes system area network needs evaluated number compute nodes accessing nodes scales 
compute node compute node node storage node storage node compute node node cluster fabric compute node storage fabric storage node storage node node storage node compute node diagram 
generalized architecture super computer cluster los alamos national labs 
computer nodes tightly coupled cluster fabric nodes connected storage nodes storage fabric 
hierarchy necessary distinction file system hierarchy underlying subsystem 
general file system essentially application sorts issues requests underlying subsystem behalf user application 
architecture machine hierarchy multiple file systems distinction blurred 
user application interfaces top level file system turn interfaces file system storage subsystem 
lower level file system interfaces file system actual storage subsystem hardware see diagram 
file systems hierarchy different functional performance characteristics 
top level file system parallel file system understands multiple threads single process concurrently accessing different parts single file 
general works fine small number threads say 
machine number threads trying access single file 
imagine start time threads issuing open single file separate compute nodes problem 
scenario single compute node attempting access pieces single file nodes problem 
third scenario compute nodes access data single node problem 
possible number computer nodes hundreds thousands number nodes tens hundreds number possible scenarios suggests single benchmark run sufficient describe performance behavior file system levels environment 
necessary just measure performance file system application point view characterize detailed performance measurements components directly related operation 
words necessary measure performance file system levels isolation possible composite file system levels 
file system performance file system performance general broken major categories meta data user data performance 
meta data performance relates operations opening closing creating deleting space allocation obtaining updating status attributes file 
operations involve accessing actual user data file 
meta data includes data structures required represent file storage device inodes directories super blocks file access tables user data performance strictly involves reading writing actual data file 
machine incorporates file system hierarchy consisting levels file systems 
generally speaking top hierarchy parallel type file system runs compute nodes gives parallel application ability multiple threads simultaneously access different parts single file parallel 
parallel file system file system presents single consistent view nodes single file space 
nodes file system access storage control nodes 
application request open close read write file environment request propagated file system levels reaches actual storage media 
significant impact meta data user data performance 
aspect file system architecture requires significant effort benchmark suite design 
benchmarks versus characterization file system benchmarks general provide single value limited number values intended represent performance file system 
somewhat trying reduce vector scalar sense significant amount important detail get lost translation 
order get accurate assessment performance storage subsystem necessary perform benchmark range values specific parameters 
result performance profile characterization function parameter 
parameters determine single operation interacts computer system 
interaction ultimately determines performance operation 
parameters dynamic variables useful see performance file system function significant parameters 
significant parameters impact performance 
example request size may impact bandwidth performance application disk location accessed 
request size application gives top level file system transfer data application memory buffer storage media goes changes request received storage device 
application may instance request mb transfer 
file system may break sixteen mb requests underlying logical device driver 
device driver may split mb request kb requests disk arrays 
disk arrays divide kb requests kb requests delivered disk drives disk array 
mb request application turned kb requests operate parallel disk drives serially disks width logical device smaller original mb request 
request size manipulation occurs life cycle application data transfer request performance application sees depends heavily requested transfer size 
particular transfer size may perform transfer sizes may dramatically different graph logical volume striped ide kbyte stripe width sequential reads request size byte blocks performance level 
graph demonstrates dramatically performance levels change function request size 
graph shows bandwidth performance application reading wide striped logical volume function request sizes ranging kb mb increments bytes 
apparent small change request size results potentially large change performance right side graph performance varies mb sec mb sec kb change request size 
perspectives perspective point view performance measured 
generally accepted perspectives 
application 
system 
storage subsystem application perspective file system benchmarks represent 
perspective underlying system services hardware functions hidden 
perspective includes cumulative effects applications running time benchmark run 
true applications running machines may simultaneously accessing storage subsystem test 
perspective results benchmark skewed due undesirable interactions applications machines 
application perspective divide operations distinct categories meta data user data type higher level operation performed 
application interface file system generally high level system calls open close read write create 
higher level system calls perform operations rename create directory remove lookup name 
performance operations ultimately determine performance application sees meta data user data operations 
system perspective viewed running system monitoring tools sar example benchmark run 
tools provide coarse grained real time monitoring system activity high level operations file reads writes number operations sent storage subsystem device device basis 
perspective possible see measure effect applications running concurrently benchmark program 
furthermore sophisticated system monitoring tools possible monitor activity systems may sharing access storage subsystem test 
problem getting complete view systems common clock order better understand interaction systems shared storage subsystem 
storage subsystem perspective difficult monitor tools available collect performance data storage subsystem 
furthermore storage subsystem split pieces interconnect fabric storage devices 
pieces need monitored independently represent areas possible resource contention 
monitoring points fabric fabric switches traffic flows points 
storage subsystem monitored storage device controllers connect fabric 
observation perspectives possible sort affects parts system caching disks interconnect speeds process contention caching effects levels caching mitigate performance issues underlying storage layers 
include file system buffer cache disk array controller caches disk drive caches 
file system buffer cache top layer cache hierarchy 
file system buffer cache generally significant amount physical system memory hold large chunks data files accessed file system manager ufs 
example application benchmark program issues read system call file system managers read data file system buffer cache copy requested data user buffer 
similarly write operations data copied user buffer file system buffer cache written storage media 
normal applications acceptable behavior running benchmarks necessary understand cache 
results benchmark rendered meaningless 
disk array controller disk drives separate caches connected controlled file system manager device drivers 
control disk array disk drive controller different control algorithms determine effective configuration usage modes cache purely vendor dependent model specific 
mentioned important understand cache benchmark run effects taken account setting benchmark runtime parameters interpreting results 
file system aging effects time file system files repeatedly created deleted exhibit side effects related aging fortunately 
file system ages way get highly fragmented commonly fat file systems example 
smaller file systems possible file systems ratio size file system data rate underlying disk generally quite low order standard gb disk 
means possible read write data disk subsystem order rearrange sufficiently decrease fragmentation 
large scale supercomputer system machine practical ratio size file system achievable transfer rate underlying hardware times pc example 
means take order days entire file system significant burden available resources 
depending data layout application accessing files may may performance problem optional 
necessary able test monitor file system performance ages order determine really necessary 
workload generator control mechanisms running multiple workload generators necessary control activities achieve desired behavior 
single machine case control mechanism relatively simple straight forward 
general single master control process passes high level instructions parameters workload generators machine lets run collects aggregated results displays performance information run 
process true cluster machines slave master slave master slave master master slave master slave master important understand control process scales number machines cluster running workload generators increases 
case large cluster may necessary manage workload generators 
management process essentially involves starting workload generators optionally terminating collecting correlating reporting results run 
process take minutes large number workload generators process serialized 
process managed binary tree example possible reduce startup time order order log 
diagram shows master manager starts master manager machines turn start master managers machines 
significantly decreases resources needed single machine cluster start master control processes cluster 
unsynchronized synchronized workload generators workload generator program generates traffic specific set parameters 
important parameters direct impact observed bandwidth transaction performance individual workload generator include size transfer number transfers generate access pattern transfers percentage read versus write operations temporal access patterns bandwidth transaction rate parameters indirect impact observed performance include processor allocation memory allocation parameters process priority parameters synchronization parameters slave master slave slave slave slave slave slave slave slave storage fabric diagram 
running single isolated machine opposed cluster machines multiple concurrent workload generators synchronized achieve correct temporal access patterns desired 
temporal access pattern described number operations unit time issued workload generator 
rate operations issued particular workload generator tied synchronized issued workload generators 
synchronization done different methods semaphores shared memory spaces message passing interfaces signals common methods 
furthermore important note multiple concurrent workload generators single machine share common clock 
allows cross correlation detailed time stamp trace data workload generators produce run 
cross correlating results possible show workload generators interact 
multiple machine environment task synchronizing multiple workload generators machines complicated 
order able cross correlate time stamped trace data workload generators different machines necessary define machine having master clock machines synchronized 
workload generator workload control process machine responsible synchronizing master clock machine disseminating information workload generators may running machine 
process determining global time value relatively simple takes little time single process 
single machine defined master time server machine wanting synchronize master machine send requests master time clock value 
time values master clock machine round trip time get values possible determine global time approximately machine accessing master clock machine 
traditional mbit ethernet standard pc hardware running mhz pentium iii processors possible get global clock accurate microseconds 
time processes operations disk subsystem greater millisecond microseconds resolution global clock sufficient purposes performance testing 
minor issue arises single machine act master clock number machines cluster running workload generators increases time takes get master clock machines increases 
main reason process determining global time cluster machines serialized machines order get accurate value clock 
time takes determine global clock single workload generator traditional mbit ethernet example seconds single machine determine global time time takes synchronize machines properly times seconds 
gets large say example total time get processes synchronized started order minutes 
time course significantly reduced faster lower latency networks available 
mentioned show potential problem area scaling single machine large cluster machines 
performance data collection issues consider collecting performance data type data collected collect 
concerning issue essentially types data collect workload generator aggregate data time stamped data 
second issue collect data moving performance data workload generators workload generators inadvertently skew results moving data networks measured 
workload generator runs set workload threads generate performance data 
performance data collected workload generator passed back parent master workload generator processing 
aggregate performance data continually passed hierarchy reaches top control tree time analyzed displayed 
hierarchical approach efficiently handle small amounts performance data represents aggregate results large amounts generated time stamping operations easily result megabytes data thread 
aggregate performance comes different levels hierarchy single thread workload generator combined average threads workload generator combined average workload generators workload generator thread thread thread global results collection display thread workload generator thread thread thread thread workload generator time stamped data important visualizing behavior individual workload threads interaction workload threads single run concurrent workload generators 
graph shows time stamped results individual workload generators running simultaneously different machines thread machine 
dot graph individual event represents instantaneous bandwidth performance specific operation function time operation completed 
close observation seen hosts generally maintain approximately mb sec host continually lag approximately mb sec time ms hosts issuing operations host utilizes entire mb sec available bandwidth 
time stamp data difficult see relationship behavior interaction host computer systems 
graph mb sec run monitoring report generation run helpful monitor progress benchmark run 
amount data reported monitoring process reported take consideration issues data movement mentioned previous section 
monitoring process consume resources compute network interferes benchmark 
ideally monitor process run machine separate machines running benchmark amount performance data collected monitor program kept minimum 
benchmark run complete reasonable collect performance data single machine purposes analysis report generation 
different levels reporting important benchmarking characterization efforts 
include summarized report run time correlated scatter graph data rates plotted completion times host host host host time ms increments thread thread thread thread detailed report run node detailed report trace data node analysis tools detailed trace data summarized detailed reports run necessary understand performance system operating configuration parameters run 
amount time stamped data large run necessary build entire post run analysis knowledge extraction system aid interpretation data 
time writing capability implemented 
summary machine scheduled brought online complete subsystem 
architecture machine presents valuable lessons scaling clustered environment 
lesson process designing running benchmark program attempting mimic behavior application class applications interpreting results fine tuning subsystem file system re running benchmark order achieve certain level performance labor intensive 
lesson learned ideally applications performance benchmarks 
scale machine detailed real time system perspective monitoring capability immense help identifying performance bottlenecks occur different applications difficult impossible see anomalies benchmark 
real time information fed back system effort dynamically adjust necessary improve performance application running 
running application counts benchmark program 
tang diane benchmarking filesystems thesis tr harvard college cambridge mass april smith keith file system aging increasing relevance file system benchmarks proceedings acm sigmetrics conference june acm martha functionality performance evaluation file systems storage area networks san proceedings th ieee symposium mass storage systems th nasa goddard conference mass storage systems technologies april ieee computer society press 
