translating object constraint language order predicate logic bernhard beckert uwe keller peter schmitt universitat karlsruhe institut fur logik und am karlsruhe fax email beckert keller ira uka de 
define translation uml class diagrams ocl constraints order predicate logic 
goal logical reasoning uml models realized interactive theorem prover 
put emphasis usability formulas resulting translation developed optimisations heuristics enhance ciency theorem proving process 
translation implemented part key system implementation stand 
overview 
unified modeling language uml widely accepted standard object oriented modelling language supported great number case tools 
object constraint language ocl integral part uml introduced express subtleties nuances meaning diagrams convey 
great number papers attributing rigorous meaning uml class diagrams ocl constraints translating language known semantics example casl ltl language extension casl specification language extension object logical language pvs mathematical system model msm eer diagrams maude language 
clarification semantics uml class diagrams provided papers necessary prerequisite rigorous semantics ocl developed draft :10.1.1.51.5401
believe semantics uml class diagrams ocl issues common consent controversial open issues understood serve basis developments 
translation developed applied ocl constraints uml diagram type 
semantical status ocl constraints diagram types state sequence diagrams clear restrict attention moment ocl constraints class diagrams 
translation uml ocl order predicate logic 
goal logical reasoning uml models 
novel features put emphasis usability formulas resulting translation er alternatives translation model elements 
possible develop optimisations heuristics enhance ciency theorem proving process 
interactive theorem proving ease interacting human prover central factor ciency 
readability translated formulas crucial issue 
key project 
reported part key project see overview web page www ira uka de key information 
logical language project dynamic logic multi modal extension order predicate logic specially suited reason properties programs 
account restrict attention translation order logic crucial part 
extension translation ocl constructs require dynamic logic target language pre result post conditions iterate operation straightforward 
extensive account treat pre operator dynamic logic 
implementation 
implemented translation including optimisations heuristics 
implementation written java part key system 
wish translation di erent context provided stand version reads uml class diagram ocl constraints translated xml file generates text file containing resulting formulas 
uses xml dialect xmi standard textual representation uml diagrams 
parsing ocl constraints integrated parser component ocl compiler developed 
tried keep implementation flexible easy adapt di erent needs arising application areas di erent syntax output formulas new optimisations new heuristics choosing possible translations 
adaptations changes uml ocl standard require ort 
key system stand version additional documentation examples downloaded www ira uka de key 
best knowledge implementation translation 
hope serve means helping promote application ocl 
structure 
section briefly review semantical pre requisites describe semantical properties translation 
basic translation sections section devoted possible optimisations improve readability usability resulting order formulas 
section concludes outlook extensions 
examples refer class diagram shown 
bank integer account integer integer withdraw integer integer integer integer person name string age integer sex string bank boolean unemployed boolean customer integer name string integer employ person boolean real contract job string income integer manages boss companies worksfor employees employer uses accounts accounts employees employer customers favourites ordered fig 

example uml class diagram 
properties translation start uml class diagram enriched ocl constraints 
cn 
cn describe possible states system modelled 
system state called snapshot uml framework complete description instance modelled system 
details objects exist instances classes gives values attributes existing objects defines pairs objects general tuples objects instances associations classes order structures represent system states 
vocabulary set types function relation symbols read diagram choices symbols include binary association classes multiplicity may give rise inclusion binary relation symbol unary function symbol 
common platform comparing alternatives include similar cases symbols definition follows shortly 
course structures valid system states say structure conforms case satisfies diagram ocl constraints 
cn possible system state uml ocl semantics 
sections describe associate uml class diagram ocl constraints 
cn formulas thc 
new symbols added translation formulas extended signature tr correctness property translation reads structure conforms 
cn thc 
extension detailed analysis correctness property translation 
translation handle meta level features exception allinstances 
due fact role meta level unclear 
version uml standard discussion may undergo substantial changes eliminated 
translating class diagram extracting signature class diagram summarise order signature extracted class diagram extensive account may 
set types contains 
type class types denoted names corresponding class starting upper case letter 

types integer real boolean string 
type collection set bag sequence types 
types form called collection types 
collection types generated collection type nesting collection type operators allowed 

furthermore contain type serves translation ocl type 
subtype relation defined 
type infinite supply variables type set functions relations contains 
binary association association ends functions referred role name association 
role name name class attached 
function names start lower case letter 
attached class function signature sets case multiplicity signature stereotype ordered sequences ary relations proceed correspondingly 

ary association addition ary predicate 
attribute class function referred name attribute signature value type attribute specified class attribute called static attribute constant type added concrete syntax constant 
operation class parameters type 
result type function 
accordance ocl specification require side ects satisfies property 

association class attached association associates classes unary projection functions 
properties pre defined ocl types detailed standard functions relations 
symbol denote equality 
overloading symbol types 
extracting formulas class diagram translation axd class diagram consists parts independent contains axioms data types adts represent built data types ocl integer boolean axioms adts set bag represent corresponding collection types ocl 
second part axd set axioms depend express intrinsic information deal inter dependencies function relation symbols extracted reflect example symmetry associations uml 
example 
consider association worksfor classes person 
signature contains function symbols relation symbol representing association employer argument type person value type employees argument type value type binary relation symbol worksfor argument type person second argument type restrict interpretation symbols appropriately set axd contains axioms person employer employees person employer worksfor person employees worksfor third part contains formulas representing restrictions system states expressed graphically multiplicity constraints subtyping restrictions 
require class union concrete subclasses enumerations sets containing exactly enumeration literals elements 
detailed account topic 
giving formal definition typical example example 
consider association uses classes customer account set contains formulas expressing multiplicity constraints attached uses customer size accounts account size size translating ocl constraints overview ocl constraints consist ocl expression type boolean declaration connecting ocl expression item class diagram 
case pre post conditions constraint bound operation invariants bound class 
translation procedure ocl constraints process ocl expressions isolated entities take account diagram information contains 
basic translation described ocl expressions cases translated order term appropriate data type adt 
exceptions expressions ocl type boolean usually transformed order formulas 
order term resp 
formula result translating ocl expression exp denoted exp 
translation procedure works structural recursion expressions 
certain ocl features translated described subsections new function predicate symbols introduced elements extended signature axioms constrain interpretation introduced symbols semantics uml ocl 
note ocl allows modeller shorthand notations 
assume constraints normalised longer standard form translated implementation normalisation provided ocl compiler 
set ax exp generated translation expression exp includes axioms generated recursive translation subexpressions exp axioms stem translation top level ocl feature exp translation ocl expressions extended ocl constraints follows 
ocl invariant form context inv class diagram ocl expression type boolean invariant states instance self existing system state property described holds 
accordingly translation th invariant ax self pre post conditions translated similar way pre operator may occur post conditions requires special treatment see detailed account 
translating built ocl types translating boolean expressions 
said usually translate ocl expressions type boolean order formulas 
boolean operators implies translated corresponding order operators 
equality boolean expressions represented operator 
translating integer real string expressions 
ocl type integer corresponds adt integer said signature contains symbol feature integer feature integer translated corresponding function predicate symbol adt 
way ocl types real string handled help adts real string argued convincingly encapsulation concepts adts uml classes di erent uml classes consequence smoothly translated adts 
analysis applies primarily user defined classes ect translation basic ocl types just mentioned 
example 
ocl expression respect class person self age self employer size states person self employed non negative age translation results formula age self size employer self 
ocl terminology feature ocl type operation applied instances translating allinstances operator ocl operator allinstances applied class precise applied object type corresponds class diagram 
returns set instances class current state 
translate operator introduce new symbol allinstances class define allinstances allinstances additional axiom allinstances introduced specify meaning new constant 
translating collection operators overview 
ocl ers common super type collection collection types set bag sequence 
ocl defines super type occur actual ocl constraints define features collection types common size operator 
consequently provide adts represent sets bags sequences collections occurring types collection bank adts collection relevant purpose typing pathological borderline situations play role modelling ocl practice 
describe translation features collection types common 
translating size count sum includes append features translated functions direct counterparts adts set bag sequence example size size union union 
translating equality 
translate equality sets ocl type set expressing elements 
similar situations new variable 
bags get formula count count sequences similar translation generated 
translating 
expresses collection subset 
expresses element element treated similarly 
translating notempty isempty 
translation expression notempty formula 
isempty treated negation notempty 
translating forall exists 
meaning forall evaluates true possible instantiations elements collection translation 
translate exists 
example 
consider ocl expression formalises di erent objects class bank attribute di erent values 
bank allinstances forall implies translation formula shorter optimised translation section translation bank allinstances bank bank allinstances bank additional axiom bank allinstances bank translating 
meaning exp evaluation exp results di erent value instantiation elements exp exp distinct new variables 
translating 
value exp sequence elements collection ordered values expression exp sense order defined ocl type exp translate introduce new function symbol 
pn free variables occurring translations exp subexpressions excluding variable translation 
pn 
ensure desired interpretation properties axioms added axe 
pn count count 
pn 
pn integer integer size 
pn exp 
pn exp 
pn integer integer distinct new variables 
translating select reject 
expression select denotes collection consisting elements evaluates true instantiated element 
translation introducing new function symbol select 
pn free variables occurring translation condition excluding translation select 
pn 
axioms added specify meaning select form depends set bag sequence 
axioms sets axioms types similar 
pn select emptyset 
pn emptyset 
pn set select insert 
pn insert select 
pn 
pn set select insert 
pn select 
pn reject operator just opposite select treat negating filter condition applying translation 
example 
ocl expression formalises person works bankb person allinstances select employer exists name name bankb isempty notation denotes result syntactically replacing occurrences variable term term similar abbreviation technique translation select operator 
free variables 
pn arguments new function leads incorrect results 
translation formula shorter optimised translation section translation person select allinstances person additional axioms person allinstances person select emptyset person emptyset person set person person employer employer name name bankb select insert insert select set person person employer employer name name bankb select insert select translating constructs ocl translating 
operators allow check type value expression exp 
translation exp exp 
operator expressed subtype relation extracted diagram translating 
translate cast operator introduce new function symbol pair subtype define type 
additional axioms specifying symbols form 
translating variables literals 
translation ocl variable including self order variable name ocl literals type boolean integer real string translated term corresponding adt 
translate literals collection types case enumerate elements collection construct term adt set resp 
bag sequence 
example set insert insert insert emptyset integer translate collection literals specify range elements set introduce new function symbol set define set 
pn 
pn free variables occurring translations bounds 
additional axiom specifying set 
pn set 
pn bags sequences translation similar 
additional axioms needed express element range occurs exactly result sequences elements ordered 
example 
ocl expression invariant class customer formalises customer favourite companies ordered stock price 
sequence 
self favourites size forall implies self favourites self favourites translation formula shorter optimised translation section translation integer seq self integer seq self rice favourites self rice favourites self additional axioms customer integer seq size favourites customer integer integer size seq seq seq customer integer count seq optimisations simplifications motivation crucial usability formulas generated translation particular interactive theorem proving usefulness translation formulas easy understand original ocl expressions 
way achieving goal generate formula syntactically close possible translated ocl expression 
example names function symbols formula far possible coincide names corresponding features ocl 
tried satisfy demand basic translation described section 
generated formulas similar original expression syntactic structure unnecessarily complicated hard read 
due additional axioms introduced order constrain interpretation new function symbols mainly represent ocl collections 
small ocl expression large number constraining axioms 
technique aims overcome problem section 
idea di erent representation ocl collections 
help reduce number additional function symbols axioms introduced collection operators translated select 
note readability formulas improved applying rewriting rules 
cases ects unsuitable translation undone mere simplification form original constraint known choose order representation choices consequently time part translation 
representing collections predicates translation described section uses functional representation ocl collections expressions type set sequence bag translated order terms 
alternative translate expressions represent formula 
sets predicative translation easy define set expression translated characteristic formula equivalent 
presentation allows translate ocl set operators need introduce new function symbols 
example expression select represented 
unfortunately cases predicative representation useful 
example expression form size translated better apply functional translation subexpression bags sequences useful predicative representation di cult define sets resulting formulas hard understand 
investigation examples showed predicative translation sets preferable cases 
ocl constraints expressions type bag sequence sets additional information contain irrelevant 
example expression forall translated order elements number occurrences importance translated 
basic idea gives rise simple powerful heuristics decide predicative translation preferable functional form 
usually decision globally expression combining translations subexpressions di erent representations functional resp 
predicative awkward leads formulas hard read 
detailed account topic please refer 
examples predicative translations section predicative translations ocl expression examples section 
shorter easier read functional translations 
necessary anymore generate additional axioms new symbols introduced 
example 
predicative translation expression example bank bank example 
ocl expression example translates erson employer employer name name bankb example 
predicative translation expression example integer size favourites self integer size favourites self rice favourites self rice favourites self translation logical information contained uml class diagrams ocl constraints order predicate logic 
implemented part key system 
easy systems order logic universal nature readily mapped logical languages formal methods 
provided set optimisations 
experimenting case studies give insight optimisations necessary desirable 
account deliberately excluded items iterate operator better expressed higher order logic 
issues treated 
remains research compare possibly adapt translation version uml ocl standard agreed 

baar beckert menzel schmitt 
key approach integrating object oriented design formal verification 
de guzman brewka pereira editors proceedings logics artificial intelligence jelia malaga spain lncs 
springer 

alvarez 
formally modeling uml evolution holistic approach 
smith talcott editors proceedings formal methods open objectbased distributed systems stanford usa pages 
kluwer 

baar beckert schmitt 
extension dynamic logic modelling ocl pre operator 
proceedings fourth andrei ershov international conference perspectives system informatics russia lncs 
springer 

rational software iona 
response uml ocl rfp 
initial submission august 

breu huber rumpe 
precise semantics object oriented modeling techniques 
bosch mitchell editors ecoop workshop finland lncs pages 
springer 

france 
problem oriented analysis basic uml static modeling concepts 
proceedings conference object oriented programming systems languages applications oopsla denver usa volume acm sigplan notices 
acm press 

gogolla richters 
constraints queries uml 
editors unified modeling language technical aspects applications pages 
physica verlag 

kent mitchell 
reflections object constraint language 
post workshop proceedings uml 
springer 

kent 
interpreting object constraint language 
proceedings asia pacific conference software engineering 
ieee press july 

cerioli reggio 
data types uml models 
technical report disi tr disi universita di genova italy 

finger 
modular architecture toolset supporting ocl 
evans kent selic editors proceedings international conference unified modeling language uml york uk lncs pages 
springer 

keller 
von ocl constraints einer logik fur java 
diplomarbeit fakultat fur informatik universitat karlsruhe 
german 


kim carrington 
formalizing uml class diagram object 
france rumpe editors proceedings unified modeling language fort collins usa lncs pages 
springer 

krishnan 
consistency checks uml 
proceedings asia pacific software engineering conference pages 

object management group framingham ma usa www omg org 
omg unified modeling language specification version june 

reggio cerioli astesiano 
algebraic semantics uml supporting multiview approach 
nijholt scollo editors proceedings number twente workshop language technology 
university twente 

richters gogolla 
formalizing uml object constraint language ocl 
proceedings conceptual modeling lncs pages 
springer 

schmitt 
model theoretic semantics ocl 
beckert france jacobs editors proceedings workshop precise modelling deduction object oriented software development siena italy pages 
technical report dii dipartimento di ingegneria dell informazione universita degli studi di siena 

warmer kleppe 
object constraint language precise modelling uml 
object technology series 
addison wesley 

