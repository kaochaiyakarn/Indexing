self controlling dynamic reconfiguration case study mcgregor springer verlag berlin 
published field programmable logic applications proceedings th international workshop fpl lecture notes computer science springer verlag isbn pp 

reproduced permission springer verlag 
www springer de self controlling dynamic reconfiguration case study gordon gregor patrick motorola sherwood house business centre cheshire cw tn gordon mcgregor motorola com university strathclyde george st glasgow xw eee strath ac uk 
design physical implementation self controlling dynamically reconfigurable system described detail 
reconfiguration control logic target application execute parallel fpga 
addition data required reconfiguration generated demand 
pattern matching algorithm investigate viability systems exhibit self control reconfiguration management 
system engineered custom development platform xilinx xc fpga 
methodology development tools design evaluated 
initial measures performance recommendations device design 
dynamic reconfiguration field programmable gate arrays fpgas recognised advanced application area reconfigurable logic emerging commercial 
currently small subset available fpgas capable reconfigured way 
growing trend industry provide dynamically reconfigurable devices varying degrees configuration flexibility 
contemporary fpgas xilinx virtex family atmel family dynamically reconfigurable 
degree support technique varies device families depending mainly flexibility configuration mechanisms 
date xilinx xc devices provided flexible complete configuration access methods dynamically reconfigurable array 
devices obsolete features adopted virtex family 
case study considered custom platform integrates xc device supporting hardware software development tools 
dynamically reconfigurable devices characterised ability continue operate interruption sub sections array logic reconfigured 
ability array continue function modified presents designers intriguing new design possibilities 
particular allows development applications maintain internal configuration state need external controller 
investigate practicality applications proof concept design developed 
novel tools employed accelerate specification design exemplar system 
design described detail associated methodology 
types dynamic reconfiguration controllers types tasks identified 
tasks intrinsically require dynamic reconfiguration execute devices dynamically reconfigurable 
call examples intra task dynamic reconfiguration 
tasks functionally complete successfully operate placed devices dynamically reconfigurable 
systems comprised tasks benefit dynamic reconfiguration particularly fpgas larger 
statement observations fpga accommodates tasks increasingly tasks need execute simultaneously 
inactive circuits dynamically reconfigured allow functions performed smaller devices 
modification operation system level termed inter task dynamic reconfiguration 
support inter task reconfiguration requires fewer modifications current design methodologies design dynamically reconfigurable circuits 
inter task reconfiguration especially applicable modular system design methodologies standard communication interfaces protocols 
methodologies typical developed enable ip reuse system chip soc design 
increasing convergence design methodologies near 
intra task inter task reconfiguration require controller schedule implement reconfiguration 
fpgas simple configuration controller integrated array loads initial configuration external source 
currently fpgas integrate controllers complex support schedule reconfigurations 
external devices required manage load bitstream initial configuration 
reconfiguration controller exist forms 
software controllers executing standard microprocessor feasible dedicated hardware controllers 
optimal selection controller intimately tied nature reconfiguration required application 
inter task reconfigurations characterised large functional changes 
task typically executes significant proportion time reconfiguration required 
contrast intra task reconfigurations typically require frequent smaller reconfigurations 
scheduling complexity intra task systems comparatively simpler due reduced logical dependencies functional changes 
pre determined sequences reconfiguration implemented provide required operation 
characteristics generalise software control better suited inter task reconfigurable systems 
interrupt latencies processor handling reconfiguration requests amortised longer execution times tasks 
intra task systems require dedicated controllers implement simple scheduling fastest possible speed 
large reconfiguration latencies tolerated due frequent reconfigurations 
novel way obtain flexibility processor dedicated speed hardware implement controller fpga 
support new cad tools fully customised implementation controller developed application 
scheduling sequencing operation application captured early design process part methodology aim transfer information directly controller logic 
time controller design manually developed simulations reconfigurable operation application 
self controlling reconfigurable systems dynamically reconfigurable device compelling reason external fpga implement reconfiguration controller 
controller hosted array dynamically reconfigured 
desirable features arrangement 
firstly control logic close array possible minimising latencies associated accessing configuration port 
secondly fewer discrete devices required reducing system complexity 
implement self controlling dynamically reconfigurable application certain practical problems overcome 
issue gaining access configuration control ports fpga array 
xc feature supported 
configuration signals driven internal sources ring 
status information describing state array available application logic allowing reconfiguration controller monitor current configuration environment 
second main potential pitfall occurs device initially configured 
contention control configuration interface occur controllers exist system 
subtle problem arise standard controller potentially configure array longer controls configuration port actively port 
situation occurs impossible complete instantiation reconfiguration controller 
multiplexing isolate controllers overly complex solution requiring external routing additional logical components 
note hosting reconfiguration controller array necessarily imply self modifying system 
controller actively reconfigure internal logic 
reconfiguring controller technically possible arrangement seen desirable feature avoided designs 
controller task treated static task array execution application 
system overview proof concept application developed investigate internally managed control dynamically reconfigurable fpgas 
system working example self configuring dynamically reconfigurable application 
exhibit internal generation bitstream data 
custom house prototyping platform initial development host final application 
platform comprises fpgas associated support logic 
xilinx device provides debugging facilities manages communications host system interactive development 
second device xilinx xc fpga target dynamically reconfigurable application 
application implements pattern matching algorithm requires reconfiguration 
algorithm concept known data folding known run time constant propagation 
principle data folding quite simple fixed coefficient implementations circuits pattern matchers multiplication units execute quickly smaller area equivalent variable coefficient implementations 
data folding exploits speed area advantage fixed implementations extends support operations slowly varying parameters operands 
context slowly varying means coefficients change sufficiently infrequently logic reconfigured appreciable impact execution time 
fig 
illustrates standard bit pattern matching circuit equivalent dynamically reconfigurable implementation data folding 
understand operation consider case fixed logical 
equal output standard implementation asserted 
test data match signal asserted 
equivalent dynamically reconfigurable implementation coefficient match fixed inverter buffer section configured implement buffer 
gives equivalent logical operation standard implementation 
conversely match coefficient value gate configured inverter 
match match standard implementation dynamically reconfigurable implementation fig 

implementations bit pattern matching circuit data folded implementation executes faster rate due reduced propagation delay 
circuit footprint substantially reduced 
xc implementation variable coefficient implementations single bit pattern matcher logic slower equivalent data folded implementations 
fig 
highlights main components self controlling system 
region dashed rectangle delimits user configurable region array 
grey section indicates actual pattern matching logic 
system tasks manage flow data application initiate requests reconfiguration 
reconfiguration controller responsible processing requests converting appropriate signals select correct partial configuration load 
bitstream generation circuitry produces required configuration data demand response requests 
nonvolatile memory bus notation bitstream control match standard configuration controller reconfiguration interface custom 
controller 
request system intra task tasks configurable circuits bitstream generation circuitry fpga fig 

system block diagram pattern matching application profile system execution proceeds follows logic array 
power standard configuration controller transfers bitstreams non volatile memory array 
serial bitstream configure initial application logic reconfiguration controller bitstream generation circuitry 
configuration control transferred reconfiguration controller system begins execute 
data passes system compared match circuitry 
reconfiguration request triggered new value 
value transferred reconfiguration controller initiates reconfiguration request 
reconfiguration selected associated id passed bitstream generation circuitry 
reconfiguration controller manages dynamic loading internally generated bitstream array reconfigures pattern matching logic 
indication successful completion sent system tasks pattern matching continues 
repeat note reconfiguration complete pattern matching continues immediately 
requirement reset existing tasks 
reconfiguration interval system continues execute pattern logic wait successful completion reconfiguration avoid producing erroneous data 
system required suppress incorrect results 
method stall stream data circuit 
alternative just ignore results 
example design match output suppressed reconfiguration essentially ignoring erroneous false matches 
system initially configured requires external support application data 
internal generation bitstreams enables unique standalone operation dynamic system 
design methodology distinct stages existed development self controlling system 

modelling simulation 
prototyping interactive debugging 
stand implementation entire design captured structural vhdl files simulation final implementation 
continuity provided reusing source files increased likelihood correct design 
main stages design considered turn 
modelling simulation dynamic circuit switching dcs technique developed university strathclyde simulate dynamically reconfigurable logic extensions standard simulation tools 
initially developed schematic capture extended vhdl simulation packages 
stage design required capture operation dynamically reconfigurable tasks 
example dcs describe operation pattern matching logic 
initially possible permutations logic swapped described vhdl source files 
design step describe single bit patternmatching circuit 
fig 
shows code describe buffer inverter pair dcs 
structural vhdl represent valid circuit stage 
dcs tools modify design produce simulatable model circuit 
virtual components inserted design model dynamic reconfiguration 
virtual components implement switching logic correctly isolate integrate logic configured array 
von tags source code allow xilinx netlist generation tools design extract correct initial configuration system 
case configuration implement buffer pattern matcher 
careful control comments allowed dcs compatible implementable versions design produced source files 
dynamically reconfiguring section swap buf buf port map supply swap inv inv port map supply von fig 

pattern matching logic structural vhdl additional information required elaborate conditions logic active circuit 
schedule file generated design provides information dcs simulation model 
fig 
shows part schedule file buffer element design 
full path entity estimates reconfiguration time 
case pattern matcher estimates size logic clock speed configuration interface give accurate initial estimate particularly logic modified small 
complex designs estimation tools developed aid designer accurately predicting performance 
support hierarchical designs allowed larger pattern matching circuits investigated single bit matching circuit captured 
re block remove time ns blocks written toplevel arch bit arch swap buf ns ns activate control pkg deactivate control pkg fig 

dcs schedule file example addition location timing information activation deactivation conditions block specified 
describe conditions logic reconfigured system 
reconfiguration controller operation essentially specified conditions elements design 
simulation designer gain detailed understanding reconfiguration requirements develop control logic 
design controller logic manually developed simulation results 
potential exist generate controller automatically dcs design information 
note version dcs create implementable designs requirement control flags 
implementation interactive debugging remainder system designed standard simulation tools 
simulating operation main functional blocks design proceeded implementation phase 
vhdl source files converted xc xilinx utility called 
placed routed xact apr tools 
point unique characteristics xc accelerate debugging design 
values combinatorial sequential signal system monitored due flexible interface fpga 
interactive tools created allow design placed array executed software control 
concepts borrowed software engineering watches breakpoints debug design 
interactive tools integrated apr tools accessing symbolic information location structures design registers 
information portions array monitored referred symbolically greatly simplifying debugging process 
flexible debug environment prove operation task system turn 
data original vhdl provided stimulus task tested array 
data passed system debugging tools output captured compared expected results 
static tasks proven reconfiguration controller logic exercised reconfigurable operation design closely investigated 
developed tools allow partial reconfigurations loaded array interactive programmatic control 
system clock driven software state array accessible reconfiguration intervals allowing inspection reconfiguration 
bitstreams required implement pattern matcher tested partial reconfiguration data generated apr tool 
partial reconfiguration bitstreams produced vendor design tools optimal 
achieve smallest fastest possible reconfiguration required configuration data downloaded 
information current configuration array stage required generate optimal reconfiguration 
temporal information available required differences logic evaluated optimal bitstream generated 
bitstream generation tools process design manner currently developed 
example optimal configurations reconfiguration manually generated inspection 
required design changes known bitstreams derived information available xc 
hand generated bitstreams tested interactive tools confirm performed equivalent operations produced layout software 
manually generated bitstreams orders magnitude smaller automatically generated equivalents 
configuration data bitstream generation circuit designed tested situ 
circuit responds signals reconfiguration controller identify required set reconfiguration data 
data produced sequentially clock edge 
final implementation reconfiguration controller manages transfer data reconfiguration interface 
stand implementation versions final application developed 
implemented byte wide pattern matching circuit 
search ascii format text files find selected strings 
reconfiguration controller design existed partly software partly hardware 
understanding gained completing design accelerated implementation final stand version 
due area limitations device final circuit implements single bit pattern matcher suitable operating streams serial data 
completely hardware controlled solution single bit version executes faster software controlled byte wide implementation 
xc provides unique answer previously noted problem associated boot strapping dynamically reconfigurable system 
multiple mutually exclusive access points configuration interface 
exclusivity ports means contention access initial boot strapping reconfiguration controller 
ports slow serial port high speed parallel port accessible user logic 
parallel interface uncommon fpgas providing high bandwidth configuration access point 
solution problem contention initialisation available previous field programmable device 
application initially configured serial interface 
custom reconfiguration controller manages subsequent reconfigurations array fast parallel interface 
signal generated configuration interface indicate reconfiguration controller take control system 
signal switched reconfiguration interface serial parallel operation 
fig 
shows actual timing data taken operation final stand design 
signal request reconfiguration sent controller initiates change pattern matching logic 
signals represent identifier signals reconfigurable elements initiate bitstream generation 
signal changes pattern matcher completed reconfiguration 
fastest possible reconfiguration array takes ns 
optimum time configure bit wide pattern matcher 
practical reconfiguration time larger value final system measured ns single reconfiguration due response time reconfiguration controller request 
implication average patterns need compared reconfiguration comparable static implementation 
execution system limited clock period configuration interface support 
ns limiting factor pattern matching application 
array logic potentially execute faster rate depending actual design 
main observation reconfiguration speed device slower potential execution speed logic array 
improve system performance dynamically reconfigurable systems impact reconfiguration latency reduced 
obvious method achieve configuration mechanisms execute higher speed 
currently careful controller design effectively reduce impact reconfiguration reconfiguring device just prior logic required array 
advantage comparatively slow reconfiguration rate execution speed custom reconfiguration controller critical presenting opportunity synthesis behavioural description 
fig 

stand implementation actual operation design demonstrates potential entirely selfcontained fpga systems 
novel development tools advances fpga technology provides new approaches system development previously possible 
custom tools developed support design flow designed inter operate integrate standard commercial cad tools 
advantages tools provide designer evident application 
example limited relatively small array size xc reconfiguration controller approximately quarter available logic 
rapid increases fpga densities systems similar described increasingly practical 
unfortunate currently commercially available devices fully support techniques described 
larger devices virtex fpgas attempting move dynamic reconfiguration techniques mainstream adaptable implement novel applications 
features fully addressable configuration logic support dynamic configuration vital careful consideration configuration access requirements devices 
greater flexibility accessibility configuration control required true potential dynamic reconfiguration achieved 
authors motorola funding aspects described 
invaluable support provided xilinx support vhdl elaboration tools details xc bitstream formats 
editorial science technology hardware goes soft economist nd may mcgregor robinson hardware software design environment reconfigurable logic systems fpl 
estonia 
sept dunlop dynamic reconfiguration field programmable gate arrays field programmable logic applications oxford england sept aspects dynamically reconfigurable logic iee colloquium reconfigurable systems glasgow scotland pp mar robinson mcgregor dick performance evaluation full speed pci initiator target subsystem fpgas field programmable logic applications proceedings fpl pp 
luk cheung eds springer verlag data folding sram configurable fpgas ieee workshop fpgas custom computing machines pp 
napa ca apr hutchings improving functional density run time constant propagation acm sigda international symposium field programmable gate arrays pp 
simulation tool dynamically reconfigurable field programmable gate arrays ieee transactions large scale integration vlsi systems vol 
pp 
sept robinson mcgregor new cad framework extends simulation dynamically reconfigurable logic field programmable logic applications pp hartenstein 
eds estonia sept robinson modelling synthesis configuration controllers dynamically reconfigurable logic systems dcs cad framework field programmable logic glasgow scotland aug shirazi luk cheung automating production run time reconfigurable designs proc 
ieee symposium field programmable custom computing machines pocek arnold eds ieee computer society press 
