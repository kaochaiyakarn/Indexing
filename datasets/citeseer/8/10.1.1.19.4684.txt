transformation system developing recursive programs burstall john darlington edinburgh edinburgh scotland system rules transforming programs described programs form equations simple lucid hopefully correct program transformed efficient altering structure illustrative examples program transformations tentative implementation described alternative structures programs shown possible initial phase automatic semiautomatic program system indicated key words phrases program transformation program manipulation optimization recursion cr categories 
system transforming programs programs expressed order recursion equations 
recursive form adapted tion usual algol style form program transformation system consists just simple rules strategy applying 
despite rules produce interesting changes programs 
aim investigation help people write correct programs easy alter 
produce programs adopt mathematical programming style 
takes really seriously tempting free mind considerations computational may heavy penalty program running time practice necessary adopt intricate version program sacrificing comprehensibility speed 
question arises lucid program transformed intricate systematic way way mechanized 
surprising notice language purely recursive programs sharp contrast programs written maximal clarity written tolerable efficiency 
knuth points consider translation algol style language machine code language performed optimizing compilers get issue contrast program structure particularly recursion loop structure 
start programs having extremely simple structures introduce complications usually take granted high level language programs 
tions arise introducing useful interactions originally separate parts program benefiting called economies interaction 
proceed manner showing examples various kinds copyright association computing machinery general permission republish profit part material granted provided acm copyright notice publication date issue fact privileges granted permission association computing machinery ideas conference reliable software los angeles revised extended version supported science research council authors address department artificial intelligence edinburgh university hope park square meadow lane edinburgh eh nw scotland journal computing machinery vol january pp transformation system developing programs program transformation achieved system 
sort completeness system embodies family program transformations formal delineation family 
general method showing transformations efficiency 
hope examples give reader pleasure convince system power 
see example programs complicated intertwined transform mathematical definitions sensible programs 
grateful suggestions capturing notion intertwining precisely 
transformation rules viewed possible initial phase mechanized program transformation system fact arose efforts understand parts earlier system darlington darlington burstall 
system started favor iterations possible transformations concrete data redundant arranged overwriting data structures 
feel manipulation possible performed removing recursion 
largely influenced boyer moore elegant successful program proving facts lisp programs implemented new rules semiautomatic program transformation system relies guidance user key steps 
section introduce transformation method informally section formal system sentences sets equations 
section examples application 
section outline strategy applying transformation rules describe program improvement system implemented 
section discuss conversion iterative form 
section discuss rule added system discuss translation programs data ones concrete data section list open problems related 
appendix apply method substantial example appendix show possible prove transformations effect improvement particular program 

example consider simple example 
function scalar product written 
vectors defined wish compute rewriting recursive function form want dot ifn dot fi dot dot clear really need separate recursive calculations independent loops try symbolically evaluating definition dot fi dot fi dot dot ti simple property ifn dot dot fi simple properties rearrangement 
burstall darlington dot dot lsf write ft gives recursive definition dot 
save multiplications additions final combines loop overheads tests 
notice scalar product calculations intertwined 
economy comes interaction lost luc symbolically evaluated program call unfolding rearranged introduced recursion call th folding precise transformation rules 
transformation rules notation 
definition dot dot fi convenient program execution transformation purposes easier rewrite dot dot dot easily translatable back conditional form mutually exclusive exhaustive forms numbers inverse 
example fibonacci function ifx fi concatenation function lists concat ifx ml cons car concat cdr fi concat nil concat cons cons concat reworking scalar product example get dot dot dot dot dot dot dot dot dot dot din develop method formal inference system sentences equations omit definitions known notions instance assume usual call name semantics recursion equations 

need primitive function set function symbols zero arguments subset pr symbols constructor function symbols 
primitive functions conditional 
examples construc tor functions cons successor written 
folding idea manna program synthesis developed independently time transformation system developing programs parameter set parameter variables 
recursive function set 
recursive function symbols 
expression expression usual way primitive function symbols parameter variables function symbols 
allow construc tion expressions taken set local variables example 
left hand left hand expression form el el en expressions involving parameter variables constructor function symbols disallowing 
hand expression right hand expression expression 
possibly primes subscripts denote expressions 
recursion equation recursion equation consists left hand expression right hand expression written examples 

usual notion substitution expression instance 
inference rules transforming 
set recursion equa tions may add set inference rules folding obvious 
illustrate rules example 
definition 
introduce new recursion equation left hand expression instance left hand expression previous equation 
example dot dot 

introduce substitution instance existing equation 
example dot dot dot dot 
nl equations occurrence instance replace corresponding instance obtaining add equation 
example unfolding dot dot takes dot dot dot dot 
folding 
equations occurrence instance replace corresponding instance obtaining add equation 
example folding dot dot takes dot dot din 
burstall darlington abstraction 
may introduce clause deriving previous equation new equation ul 
un fn ul 
un fn 
dot example 
see example fibonacci example section 
laws 
may transform equation right hand expression laws primitives 
obtaining new equation example commutativity enables rewrite dot dot dot dot 
new equation obtained rules may taken definition function appearing left provided take disjoint exhaustive subset 
notions exhaustiveness depend data domain attempt definition clear integers hsts believe rules preserve correctness formal proof 
informal argument plotkin effect rules equally obtained follows rewrite definitions say 
corresponding equations 
transformation rules seen correspond sound rule deducing new equation rules get new equations say 
di choose subset exhaustive disjoint say 
iv rewrite definitions 

functions defined satisfy eqs 
functions 
functions defined satisfy eqs 
eqs 
rio eqs 
functions defined equal ones defined fis equal defined retain correctness lose impose extra restriction improve programs know sufficient conditions general 
appendix show improve program preserve termination 
reasoning employed suggests general argument improvements introduced rewriting lemmas abstraction ii unfolding leave unchanged ul folding preserves efficiency provided argument equation substitution lower jn founded ordering equation transformed 
strategy 
simple strategy applying rules turns quite powerful examples follow 

necessary 
instantiate 
unfold repeatedly 
stage unfolding try apply laws abstraction 
fold repeatedly stages require invention user unfolding folding routine symbol manipulation 
discuss strategy section 
examples transformation system example 

look case gain efficiency introducing new definition transformation system developing programs nally separate computations 
case avoid computing certain values twice 
eureka draw attention certain steps transformations 
reader may feel certain steps deserve eureka 
section describe program improving system transformation rules show automatically achieve steps 
steps marked indicate help user give system 
take definition section starting point 
regard abbreviation successor pairing primitive function written 




eureka 
unfolding 
instantiate fix unfold fold 
fold notice pattern applying inference rules 
comes somewhat 
obvious ons unfold far possible order fold 
order fold 
new computes result linear time 
example 
scalar product example combined independent loops example transformed binary recursion loop 
example combines binary recurs ons 
assume tree ttp atom tree trees tip tree constructor functions 
computes sum tips computes product wish compute 

tip 
tree 
tip 
tree 

ttp tip 
tree dr tree tree 


unfolding unfolding abstraction folding computes functions 
example 
table factorials 
suppose want table factorials 
may define naively burstall darlington 
fact 
fact fact 
nil 
cons fact computed afresh 
improve definition 
fact fact nil 
fact fact cons fact cons fact eureka instantiate unfold law unfold cons fold 
cons fact cons fold new definition computes fact fact cutting ume time notice ascending order easy require extension rules 
currently investigating problem 
example 
testing trees equality frontiers 
example substantial nature program test binary trees frontier sequence atoms tips 
obvious revolves computing frontier list comparing lists element element 
comparison soon differing elements hsts detected time computed lists quite unnecessarily 
trees may differ shape easy compare element element generated 
proposed problem illustrate virtues coroutines 
transformation system produce satisfactory program provided user defines generalization problem comparing frontiers lists trees single trees formal problem details transformations required quite long relegated appendix 
strategies applying rules implementation program improving system just having set transformation rules freely applied tn possible ways algorithmic system avoiding search far possible 
experimenting strategies applying rules strategy described briefly observations helpful 
optimizing transformations consist sequence rewriting lemmas 
associativity abstraction usually de layed just folding 
ii cut abstraction combining folding process fold possible 
call combined step forced folding discuss detail 
transformation system programs heuristic assumptions 
algorithm applied instantiation equation improved 
algorithm 
arbitrarily unfold rewriting lemma 
arbitrarily repeat step go step 
arbitrary forced fold 
repeat step folding possible 
arbitrary choices exhaustive manner backtracking 
algo rithm ts quite laborious observation faster general algorithm ill cases equational method writing programs constructor operations left hand side ensures unfolding go indefinitely folding usually delayed possible unfolding done provided equations system kept fully unfolded form 
algorithm assumption 
algorithm 
unfold equation unfolding possible 
equation improved 
unfold unfolding possible 

arbitrarily rewriting lemma goto step goto step 
arbitrary forced fold repeat step folding possible 
algorithms succeed examples exception part section 
program system 
implemented heuristic program improving system transformation rules algorithms 
mentioned earlier program system described darlington burstall enabled user write program high level language recurs equations translated efficient transparent versions 
system separate transformation processes transformation rules described unify extend processes storage overwriting considered 
new system shared user system 
system developed hope shift user 
january user required give hst equations augmented necessary definitions ones marked eureka examples 
hst useful lemmas equation form rewrite rules statements functions associative commutative 
ii hst properly left hand sides equations user wants system 
system searches space possible transformations lii looking folds algorithm algorithm desired 
resulting new equations printed examination user 
effort system assess efficiency new definitions 
sample system improvement shown table see fold achieved matching routine 
expressions seeks substitution transforms second example finds substitution goes 
matching routine ty specified example fred substitution 
capable matching abstraction example burstall darlington table start user starts dialogue input equations system responds user inputs equations input rewriting lemmas lemmas needed indicated declared input instances functions interested system responds system starts results gets system outputs ground term achieves system outputs fold achieves folds folds 
laws applied immediately result fold 
plotkin general theory braiding laws unification 
grateful rodney topor commutative parts matcher 
example abstraction consider example 
simple unfolding gives system trying fold 
matching routine spots necessary components match forces rearrangement applying abstraction folds developments 
desirable stage development system get produce automatically definitions user currently supply 
lot cleverness optimization resides 
number cases clear theoretically clear done efficiently excessive search 
idea expand extent computation tree generated equations look match higher nodes tree lower ones 
need substitution applied lower nodes gives higher ones 
consider example hst problem equations fact fact cons fact express terms new function say recursive definition form generally 
arbitrary substitution 
expand try cons act cons fact cons fact pictorially execution tree ts form transformation system developing recursive programs fact notice substitution takes pair terms bottom line previous line 
put fact terms ofg terms ofg 
similarly fibonacci example definition 
expansion computation tree notice find substitution takes lower pair andf higher overlapping andf 
putting express terms ofg express terms ofg 
see general approach expand computation tree seek substitution lower slice higher 
appropriate examples definition tuple terms occurring computation see examples 
section recurs iteration need introduce extra variable generalize element list elements 
show rationale auxiliary definitions 
development wish incorporate near give matcher ability synthesize subsidiary functions 
technique 

conversion form transformation system convert recursive iterative form 
say set definitions functions fl fro form equation xl xn contain form el en el en contain fz conditional expression alternatives forms recursive definitions trivially rewritten loops labels 
transformation automatic introduce new time similar pattern generalizations original function definition replacing subexpressions right variables including variables extra parameters case major operator right associative 
generalizations central success boyer moore program prover profited studies aubin moore extended prover deal programs forms generalization translate iterative truly recursive form opposite approach 
example 
factorial 


factorial introduce new function generalizing burstall darlington 
factorial 

factorial 
factorial definition eureka instantiate unfold unfold associativity fold fold definition form 
succinct definition obtained replacing factorial 
rules stand allow derive section discuss additional rule yield 
example 
list reverse 

reverse nil ml 
reverse reverse nil infixes cons concat see section 
introduce new function generalizing nil 
reverse definition eureka 
nil unfold 
reverse nil instantiate unfold rot fold allow unfolds contrary strategies 

reverse nil fold iterative form reverse nil succinct requires extra rule described 
example 
frontier tree 
example uses generalization produce function 
produces equation form xn en contain new faster 
previous example frontier tree mean list tip elements need constructor functions indicate tip element tree form binary branch 

tip nil 
frontier tree tl frontier tl frontier introduce generalizing 

tip 
tree tl 
frontier tree tl frontier lu frontier tl frontier tl fltl frontier definition eureka unfold instantiate unfold associativity fold fold unfold fold definition faster uses 
frontier nil succinct needs extra rule 

extra transformation rule redefinition transformation rules described far allowed start definition function unfold fold get new definition 
sake efficiency may wish move sn opposite direct 
transformation system developing recursive programs example improvement system far due michael paterson 
define 
definition 
better 
clearly obtainable instantiation unfolding folding left 
reverse direction done rules 
definition 

fold dana scott pointed introduce extra rule system making fact transform function definition say set equations identical defining previous function know newly defined function equal previous terminates 
check totality previous definition ensure new introduce spurious values previous failed terminate 
just shown satisfies identical define may redefine 
call new rule redefinition 
general function totally defined equations proceed follows new definition function eureka transform new previous rules get equations identical original equations function 
replace original new definition redefinition rule 
time explore utility new rule essentially allows reverse previous transformations 
clear difficulty mentioned iteration examples recall final factorial 
factorial 


obtain better smaller faster version 
factorial 
factorial 
factorial new rule noting identity copy 

redefinition definition eureka instantiate unfold unfold replacing similarly obtain succinct definitions reverse frontier 
burstall darlington implemented new rule mechanized system put extra option th user asserting say factorial redefinition system look new similarly unfold check identity equations obtained previous ones remove favor new 

programming data type change darlington darlington burstall method hierarchically structured programs flattened programs expressed entirely terms lowest level primitives consequent gain efficiency loss understandability 
achieved straight line programs technique combined optimization replacement procedure calls bodies 
implemented system extra built took advantage known ps objects representations case sets hsts bit strings perform extra 
propose new technique structuring programs show new method flatten programs need straight line ones doing away need build representation dependent 
usual method structuring data write functions higher data types terms lower data types see example hoare 
propose remove need provide just ask single representation function mapping lower data type higher 
grateful hoare suggesting 
advantages method involved programmer 
division object cleaner natural 
programs written entirely terms primitives 
representation relationship implicit earlier method clear programmer 
ii resulting programs modular easier modify user wants add new representation add new function rewrite number functions 
problem rewriting programs terms lower primitives 
show method accomplishes means simple example hope clarifies method structuring programs 
example 
twisting tree 
suppose wishes write programs late trees labeled atoms nodes 
define labeled trees inductively constructors ltree 
labeled trees ltree atoms labeled trees labeled trees labeled trees hree argument atom labeled trees producing labeled tree assuming lisp machine binary trees available basic data structure constructors nil parr nil binary trees atoms binary trees pair trees binary trees binary trees programmer choose represent labeled trees node binary tree consisting atom second binary tree consisting left right subtrees 
example parr pair ml pair pair ml nil represents transformation system programs ltree ltree 
simply define representa tion function trees labeled trees ml patr pau pl ltree pl user write labeled tree manipulating functions entirely terms labeled tree primitives 
simple twist labeled trees labeled trees twist twist ltree tl hree twist tl want produce twist 
trees binary trees simulates concrete data 
method requires availability reverse representation function ideas produce inverses automatically tentative 
case labeled trees trees nil ltree tl parr patr tl want twist twist 
labeled trees coding concrete twist binary trees concrete usable definition uses implemented 
massage little 
twist ml twist ml unfold twist pair pair twist patr pair instantiate pair patr twist pl unfold parr parr twist twist fold gives recursive definition twist terms available concrete primitives nd parr 
example 

consider algorithm floyd 
sorting algorithm arrays represent trees 
algorithm repeated calls procedure takes arbitrary tree moves root element branch long smaller successor elements 
show version algorithm acting concrete data arrays obtained systematically acting data labeled trees 
labeled trees represented concretely array atoms successor nodes 
example tree burstall darlington represented array deal subtrees represented arrays need form notation partial arrays selecting certain indices array 
size original tree simplicity keep fixed 
define set indices corresponding subtree rooted lfn 
example indices left hand subtree 
call set partial arrays subscripts arrays example 
call set trees represent trees 
precise arrays set functions atoms trees defined inductively trees trees set trees form ltree tl atom tl trees trees 
corresponding subtree tree subarray array 
ifa arrays write am restriction indices 
example example written subarray rooted 
general arrays 
represent left right subtrees tree represented clearly ff am 
pair domains trees 
define representation function coding function inverse arrays 
trees representation concrete trees 
arrays 
coding concrete defined recursively arrays contains ltree az cn ltree tl cz tl empty array desired property arrays algorithm concentrate main procedure called floyd 
write trees roots air call just produces rearranged tree top element moved branch far possible elements larger 
idea algorithm get tree branch sorted order maintain state affairs new elements added 
system developing recursive programs number cases definition depending relative sizes top elements tree 
similar discuss just case 
function sift labeled trees labeled trees case defined sift ltree ltree tll ltree ltree soft ltree tll ltree define function concrete data cn sift run stands uses sift wish transform run 
consider typical case assuming elements exist 
sift ltree ra unfolding rn cn 
note view partial arrays functions sets index value pairs combine partial array just index 
cm rm arrays term just 
fold sift second term form 
arrays sift sift le 
ltree comparing second term 
value index 
suggests introduce substitution operation arrays array value tth element 
formally tl array qo 

digression motivates rewrite ft ft cz ltree 
eureka folding definition sift az folding definition sift burstall darlington required recursive sift 
operates partial arrays 
substitution operation corresponds assignment element array 
key step marked eureka involves tricky looks hard 
preparation folding just associativity examples imagine matching algorithm built various properties substitution uses force fold 
run transformations system supplying key substitutions rewrite lemmas 
intuitions manipulations complex notation suggest open area research 
finished floyd sift procedure iterative important iteratively single array copying 
stout reader may follow transformations required may skip section 
notice properties substitution express terms definition sift 
just array sift sift eureka sense means exchange nth th elements sift subarray rooted notice part replaced sifted version 
suggests general operation replacing subarray rooted define arrays am eureka 
enjoys know helpful getting programs 
lemma 
operation enables rewrite sift simply analyze computation defining subsidiary function describe depends bm definition eureka produces array subarray starting sifted 
enables write sift fold 
transform definition iterative 
associativity way rewriting expressions revolving 
sift bm bm bm unfolding recursive definition sift sift bm sift various toggling properties subarray formation eureka transformation system developing recursive programs folding definition 
definition quite simple 
road hard eureka 
conclude basic transformation method works runs obscurity usually reasoning data structure overwriting 
hope stimulate research reasoning 

tried general method particular tactics incorporated previous improvement system darlington burstall 
continuing theoretical side problems open moment january 
wide class program improvements falls scope transfor mations 
obtain formal characterization class 
il necessary sufficient conditions guarantee transforma tions produce improvement 
general argument basis fibonacci 
practical side continuing implemented system investigate behavior different strategies 
generalization old new ones just outlined section new needs extra parameter section totally new definitions needed appendix 
look problem involved structuring optimization large programs 
system simply extended achieve synthesis algorithms implicit 
gives simple examples 
author investigate structure classes algorithms attempting synthesize algorithms class common high level 
class investigated sorting algorithms far known sorting algorithms synthesized manually high level definition 
mention relevant people 
courcelle provide mathematically rigorous treatment inference system simple recur language 
manna waldinger program synthesis rode develop rule similar folding rule presentation underlying ideas different 
general way akin gerhart transformations harvard program tham large literature optimization techniques compilers 
appendix testing trees frontiers example obvious may compute values needed problem proposed originally illustrate usefulness 
coroutine facility recursion equation language achieve similar economy computation general way 
problem test binary trees frontier frontier tree list ts tips 
trees tl equal sense tl 
natural approach define desired testing function terms function frontier produces list tree getting tl function eqlist test lists equal 
tl compute noticing element 
try obtain improvement avoids 
need data type atom derive data type tree constructor functions ttp care tip tree combine subtrees tl tl tl tl true eqlist tl frontier false ttp atoms trees tree trees trees trees burstall darlington fig trees need lists atoms trees type alpha nil alpha hsts cons alphas alpha lists alpha hsts write cons 
habit specifying type new function usual notation outside 
define functions mare function tests trees frontiers 
concat alpha lists alpha lists alpha hsts concatenation alpha type write concat 
nil 
atom lists atom lists truth values list equality 
nil true 
eqlist nil false 
eqlist nil false 
eq eqlist eq tests atoms trees atom hsts list atoms tips tree 
frontier tip nil 
frontier tree tl frontier frontier trees trees truth values tree equality tip sequence 
eqlist frontier frontier try improve methods success 
overcome introduce general function see tests lists trees tip sequence 
upper case hsts trees values functions lists trees arguments analogous distinct variables functions lower case 
decompose tree current state cross section tree just list subtrees coroutine method subtrees scenes associated coroutine activations 
system developing recursive programs frontier flatten frontier st frontier frontier true fig tree hsts explicit 
need function frontier give hst atoms tips hst trees frontier tree hsts atom hsts see 

frontier flatten eureka takes list trees hst frontiers tree lists atom hst lists 
nil 
frontier flatten takes hst lists hst atoms concatenating elements flatten atom hst lists atom hsts 
flatten nil nd 
flatten flatten tree lists tree lists truth values equality tree lists 
frontier frontier transformations redefine terms tree singleton hst trees 
need nd 
eqlist frontier frontier repeat eqlist frontier nil frontier nd eureka nil nil fold improve 
clear start frontier transforming equation 

frontier nd flatten nil unfold 
frontier ttp flatten st tip 
instantiate nil flatten unfold nil frontier fold burstall darlington 
frontier tree flatten tree tl frontier flatten unfold frontier tl frontier flatten frontier tl fold notice requires insight alternative step fold immediately give result want new definition frontier improve improve uses 
nil nil true instantiate unfold 
ttp nil false unfold 
nil tip false similarly 
tip tip eq eqlist frontier frontier unfold eq fold 
tree sl eqlist frontier sl frontier unfold sl fold 
st tree tl similarly give direct recursive definition st auxiliary functions 
reduces tree left hand far necessary shown example order tip reached tips compared stops process immediately equal 
cope nd cases 
execution radically different original built concept structured computationally inefficient way involving essary computation large intermediate lists 
appendix 
improving examine sequence transformations rules improves efficiency program try prove case example 
throw light principles involved requiring elaborate formal apparatus rewrite transformations giving subscript new function symbol define variants may differ meaning certainly differ efficiency 
concentrate auxiliary function defined terms original function definition gz unfold system developing recursive programs tl tll ti ti ti eq tll tll eq false fm improved unfold gs abstraction folding gt gt folding notice folding done steps replacing instance right hand side original equation left hand side leaves ge ultimately defined terms replacing recursion 
call new function wish imply equation 
write denote number arithmetic operations needed compute value function symbol equations number argument 
number additions ignoring successor 
unfolding affect number operations 
trivial induction fix gs abstraction improvement 
clearly stage folding affect number operations burstall darlington gs ifx 
wish show ifx 
easy show induction gt ifx rx 
base 
immediate ifx rx 
step 
need show 
equation ts just gt 
gr gt gg 
gg gr 
summarize proved directly abstraction improvement folding preserves fact amplifies doing level recursion general see improvements introduced abstraction rewriting lemmas folding preserve provided base case worse argument substitution lower founded ordering undergoing fold 
acknowledgments independent moore raymond extending boyer moore theorem prover handle essentially iterative programs late result helped develop technique translating recursion outlined section 
paterson scott contributions described section hoare suggesting look representation function problem tackled section 
valuable conversations colleagues plotkin topor schwarz helped example boyer moore influenced great deal 
synthesis stimulated manna 
members ifip working group provided valuable stimulus 
clearly owe influence structured programming ideas 
referees morris helpful comments typing 
aubin heuristics proofs reduction improving programs arc france pp proc symp proving moore js proving theorems lisp functions acm jan jr wegbreit laboratory study programming proc afips vol afips press pp courcelle vuillemin semantics simple language proc sixth annual acm symp theory pp darlington approach automatic program ph th dep artif edinburgh edinburgh darlington burstall system automatically improves programs proc third lnt joint conf intel stanford pp 

appear acta 
application program transformation program synthesis proc ria symp proving improving programs arc france pp floyd algorithm comm acm dec correctness program conf rec second symp principles programming languages palo alto calif pp hoare proof correctness data representations acta structured programming th go statements acm computing surveys 
manna waldinger knowledge program synthesis system developing programs moore introducing iteration pure lisp theorem prover csl xerox palo alto res ctr palo alto plotkin theories meltzer eds edinburgh press edinburgh pp topor interactive program verification virtual programs ph th dep intel edinburgh edinburgh received july revised january journal computing machinery vo january 
