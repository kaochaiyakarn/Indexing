eliminating fuzzy duplicates data warehouses rohit surajit chaudhuri venkatesh ganti cornell university microsoft research rohit cs cornell edu microsoft com duplicate elimination problem detecting multiple tuples describe real world entity important data cleaning problem 
previous domain independent solutions problem relied standard textual similarity functions edit distance cosine metric multi attribute tuples 
approaches result large numbers false positives want identify domain specific abbreviations conventions 
develop algorithm eliminating duplicates dimensional tables data warehouse usually associated hierarchies 
exploit hierarchies develop high quality scalable duplicate elimination algorithm evaluate real datasets operational data warehouse 

decision support analysis data warehouses influences important business decisions accuracy analysis crucial 
data received data warehouse external sources usually contains errors spelling mistakes inconsistent conventions significant amount time money spent data cleaning task detecting correcting errors data 
problem detecting eliminating duplicated data major problems broad area data cleaning data quality hs rd 
times logical real world entity may multiple representations data warehouse 
example lisa purchases products twice entered different customers lisa simpson seattle wa usa lisa seattle wa united states due data entry errors 
duplicated information significantly increase direct mailing costs customers permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment proceedings th vldb conference hong kong china done visiting microsoft research lisa may sent multiple catalogs 
duplicates cause incorrect results analysis queries say number customers seattle erroneous data mining models built 
refer problem detecting eliminating multiple distinct records representing real world entity fuzzy duplicate elimination problem called merge purge record linkage problems hs fs 
problem different standard duplicate elimination problem say answering select distinct queries relational database systems considers tuples duplicates match exactly attributes 
data cleaning deals fuzzy duplicate elimination focus 
henceforth duplicate elimination mean fuzzy duplicate elimination 
duplicate elimination hard caused types errors typographical errors equivalence errors different non unique nonstandard representations logical value 
instance user may enter wa united states wash usa wa united states america equivalence errors product tables pro windows xp professional different encountered bibliographic tables vldb large databases important detect clean equivalence errors equivalence error may result duplicate tuples 
class equivalence errors addressed building sets rules 
instance commercial address cleaning software packages rules detect errors names addresses 
focus domain independent duplicate elimination techniques 
domain specific information available complements techniques 
previous domainindependent methods duplicate elimination rely textual similarity functions edit distance cosine metric predicting tuples textual similarity greater pre specified similarity threshold duplicates fs ka coh hs 
functions detect duplicates due equivalence errors say united states requires threshold dropped low resulting large number false positives pairs tuples incorrectly detected duplicates 
instance name address city id city state id name address assoc 
lake view blvd main street main street associates lake view ideology vancouver pl victoria films victoria av 
ideology 
pl clark consultants cherry street clark consultants st tuple pairs values ussr united states country attribute declared duplicates detect united states duplicates textual similarity 
exploit dimensional hierarchies typically associated dimensional tables data warehouses develop efficient scalable duplicate elimination algorithm called delphi significantly reduces number false positives missing detecting duplicates 
rely hierarchies detect important class equivalence errors relation significantly reduce number false positives 
example describes schema maintaining customer information typical selling products services 
dimensional hierarchy consists relations organization city state country relations connected key foreign key relationships called referential links 
say organization country relations bottom top relations respectively 
consider tuples usa united states country relation 
state attribute value mo appears tuples state relation joining countries usa united states state values occur country tuple 
usa united states occur state mo general country tuples associated sets state values 
degree overlap sets associated countries measure cooccurrence detect duplicates usa united states 
notion occurrence reducing number false positives 
consider countries usa uk 
sufficiently closer edit distance function commonly textual similarity function incorrectly deduce duplicates 
delphi duplicate elimination presence hierarchies state stateid city stateid victoria victoria vancouver aberdeen aberdeen problems occur textual similarity functions cosine metric 
notion cooccurrence state relation observe sets called children sets usa uk states mo missouri aberdeen aberdeen joining usa uk respectively disjoint 
conclude usa uk duplicates 
reasons efficiency scalability want avoid comparing pairs tuples relation hierarchy 
previous approaches considered windowing strategy sorts relation key compares records sliding window sorted order hs 
observe equivalence errors uk great britain may adjacent standard sort orders lexicographical order 
exploit dimensional hierarchy propose grouping strategy compares tuples small groups relation 
instance compare state tuples join country tuple country tuples duplicates 
groups smaller entire relation grouping strategy allows compare pairs tuples group efficient 
outline follows 
section discuss related 
section discuss key concepts definitions 
section describe delphi 
section discuss important issues 
section discuss results thorough experimental evaluation real datasets 

related country mo mo mo missouri bc british columbia aberdeen aberdeen country united states america united states usa canada uk organization level city level state level country level example customer database earlier proposals exist problem duplicate elimination fs ka hs coh 
mentioned earlier methods rely threshold textual similarity functions detect duplicates detect equivalence errors lower thresholds sufficiently lower thresholds result explosion number false positives 
record linkage literature focuses automatically determining appropriate thresholds fs ka suffers false positive explosion detecting equivalence errors 
gravano proposed algorithm approximate string joins principle adapted detect duplicate records gij 
edit distance function measure closeness tuples technique suffers drawbacks strategies relying textual similarity functions 
exploit hierarchies dimensional tables detect important class equivalence errors exhibit significant occurrence relations increasing number false positives 
significant amount exists related aspects data cleaning development transformational cleaning operations rh gfs detection correction formatting errors address data bds design business practices process flows prevent problems deteriorating data quality pro nr 
automatic detection integrity constraints functional dependencies key foreign key relationships km enforced improve data quality complementary techniques cleaning existing data 
commercial importance data cleaning problem domain specific industrial tools exist 
galhardas provides nice survey commercial tools gal 
notion occurrence tuples similar clustering categorical data grs matching schema mbr 

concepts definitions dimensional hierarchy consists chain relations linked key foreign key dependencies 
illustrates example 
entity described hierarchy consists chain tuples relation joins tuple parent relation 
example redmond wa usa describes organization entity identifiers typically generated maintaining referential links 
clarity notation explicitly list identifiers tuples required 
consider organization entities redmond wa usa seattle wa usa customer information dimensional hierarchy shown 
corresponding pairs tuples name state country relations individually identical 
duplicates city relation fact difference entities distinct 
phenomenon characteristic dimensional hierarchies 
example publications title may appear proceedings conference journal distinct entities publications database 
motivated typical scenarios consider entities dimensional hierarchy duplicates corresponding pairs tuples relation hierarchy match exactly duplicates duplicate detection functions level 
example entities duplicates respective pairs country state city organization tuples entities duplicates 
formally introduce dimensional hierarchies definition duplicate entities duplicate detection functions 

dimensional hierarchies relations rm keys km constitute dimensional hierarchy key foreign key relationship ri ri 
ri th level relation hierarchy 
rm bottom top relations respectively ri child ri 
unnormalized dimension table join rm chain key foreign key relationships 
say tuple vi ri joins tuple vj rj exists tuple projections ri rj equal vi vj respectively 
specifically say vi ri child vi ri vi joins vi 
example mo state relation child usa country relation 
say tuple combination row rm entity ri joins ri 
typical dimensional tables data warehouses values key attributes km artificially generated loading process tuple vi inserted ri 
generated keys useful matching tuples joining tuples relations hierarchy 
overload term tuple mean descriptive attribute values set attribute values including generated key attributes 
clarify clear context 

definition duplicates formally define notion duplicate entities assuming duplicate detection functions level 
fm binary functions called duplicate detection functions fi takes pair tuples ri returns duplicates 
rm sm entities 
say duplicate fi ri si 
instance consider entities main street mo united states main street missouri usa duplicates pairs duplicates united states usa country relation mo missouri state relation city relation main street main street organization relation 
observe easily extend definition sub entities ri rm si sm 

duplicate detection functions exploit dimensional hierarchies measure cooccurrence tuples detecting equivalence errors reducing false positives 
conjunction textual similarity functions cosine metric edit distance traditionally employed detecting duplicates 
final duplicate detection function weighted voting predictions cooccurrence textual similarity functions 
intuitively weight prediction indicative importance information arrive prediction 
adopt standard thresholded similarity function approach define duplicate detection functions hs 
textual occurrence similarity tuples greater threshold tuples predicted duplicates textual cooccurrence similarity 
section assume thresholds known 
section relax assumption describe automatic threshold determination 
introduce notion set containment define similarity functions 
consider textual attributes comparing tuples assume default conversions types text integer converted varchar 
collection sets defined domain objects intuitive notion similar set set fraction objects contained 
notion containment similarity effectively measure document similarity bgm 
extend notion take account importance objects distinguishing sets 
example set microsoft incorporated similar microsoft boeing incorporated token microsoft distinguishing token incorporated 
idf inverse document frequency value object successfully information retrieval literature quantify notion importance 
formalize intuition 
set objects 
collection sets objects bag objects contained set frequency fg object respect frequency 
idf value respect log define idf value set subset idf containment metric define containment metric cmg respect sets ratio idf value intersection idf value set 
clarity presentation drop subscript notation extending define textual occurrence similarity metrics 

textual similarity function tcm assume tuple split set tokens tokenization function say white spaces 
treating tuple set tokens token containment metric idf weighted fraction tokens contains 
vn set tuples ri 
ts denote set tokens tuple bt bag multi set tokens occur tuple tf denote frequency token bt 
token containment metric tcm respect tuples containment metric cm ts ts respect token sets 
example tokens equal idf values tcm mo united states mo united states america tcm mo united states america mo united states 
observe tokens differ slightly due typographical error token containment metric treats distinct tokens 
address shortcoming treat similar tokens edit distance small value say bt synonyms 

occurrence similarity function fkcm dimensional hierarchy tuple parent relation ri joins set call children set tuples child relation 
measure occurrence distinct tuples amount overlap children sets tuples 
unusually significant cooccurrence average overlap pairs tuples ri certain threshold cause duplicate 
example duplicate states mo missouri occur city distinct states occur common cities 
informally cooccurrence measure called foreign key containment edit distance tokens minimum number edit operations delete insert transpose replace required change normalize value sum lengths aep 
metric fkcm tuples containment metric children sets second tuples 
say tuples ri occur tuple ri join general distinct tuples ri join sets usually little overlap tuples ri 
call children set cs children set cs 
vn set tuples ri 
bc bag multi set children tuples ri tuple parent 
child frequency cf child tuple respect number times occurs bc 
fk containment metric fkcm respect containment metric cm cs cs respect bc children sets cs cs 
example metric values missouri state id mo state id state relation children sets identical 
note measuring occurrence tuples ri ri disregard information relations reasons 
restriction improves efficiency number distinct combinations joining tuple ri increases go hierarchy 
example number state tuples pointing united states country relation number city state tuple pairs point 
restriction enables efficient computation occurrence measure tuples 
second occurrence information tuples ri provided relations rj usually available ri 
tuples rj join tuple ri join tuples ri children sets distinct tuples different 
discuss exceptional cases section 

combination function thresholded similarity metrics detecting duplicates 
similarity cm greater threshold duplicate detection function cm predicts duplicate 
discuss combination predictions obtained functions 
adopt weighted voting predictions weight prediction proportional importance information arrive prediction 
discussed earlier idf values token children sets capture concept amount information sets containing lowest relation hierarchy return prediction tcm 
distinguishing tokens children tuples higher idf values 
tuple ri wt idf ts wc idf cs 
tcm threshold fkcm threshold textual occurrence similarity thresholds respectively 
pos function defined follows pos 
weighted voting combination function pos wt pos tcm tcm threshold wc pos fkcm fkcm threshold 
essentially combination function returns prediction duplicate duplicate similarity function higher weight 
suppose uk considered duplicate usa textual similarity function 
occur state tuple fkcm contradicts prediction 
children set uk higher idf value token set uk duplicate usa 

delphi describe delphi 
recall consider entities duplicates respective pairs tuples relation hierarchy duplicates 
entities customer information duplicates organization tuples city tuples state tuples country tuples duplicates 
straightforward duplicate detection algorithm independently determine sets duplicate tuples level hierarchy determine duplicate entities entire hierarchy 
example process organization city state country relations independently determine duplicate pairs tuples relations 
may identify pairs duplicate entities corresponding tuples level hierarchy organization city state country equal duplicates 
efficient exploiting knowledge processed relations 
suppose know united states america united states duplicates usa rest unique tuples country relation 
processing state relation compare tuple bc missouri joins canada duplicates usa 
observe usage requires process parent relation hierarchy processing child 
move hierarchy reduction number comparisons significant 
instance organization relation may millions tuples number seattle wa usa may thousands 
adopt top traversal hierarchy 
process topmost relation group child relation relatively smaller groups compared entire relation compare pairs tuples group 
si join ri rm key foreign key attribute pairs 
knowledge duplicates si group relation ri place tuples ri ri join combinations si si si group si si equal duplicates corresponding pairs tuples si si match exactly duplicates 
process group ri independently 
observe require si grouped sets duplicates 
due efficiency considerations restrict sets disjoint 
sets tuples ri may processed multiple groups causing repeated comparisons pairs ri tuples 
considering example top traversal dimensional hierarchy follows 
detect duplicates country relation process state relation grouping processed country relation process city relation grouping processed state country combination process organization relation grouping processed city state country combination 
remainder section organized follows 
section discuss procedure detecting duplicates group tuples relation hierarchy 
section discuss top traversal hierarchy coordinating invocation group wise duplicate detection procedure 
explicitly discuss special case lowest relation fkcm 
discussion easily extended special case 

duplicate detection describe procedure detect duplicates group tuples relation hierarchy 
output procedure partition sets set consists variations tuple 
determine pairs duplicates partition discussed earlier duplicate detection function requires predictions threshold decision functions tcm fkcm metrics 
straightforward procedure compare tcm fkcm pairs tuples group choose pairs similarity greater tcm fkcm threshold 
reduce number pair wise comparisons tuples pruning tuples duplicates tcm fkcm describe step detail assuming tcm fkcm thresholds known 
section describe method dynamically determine thresholds group 

duplicate detection tcm want detect pairs tuples duplicate tcm tcm 
reduce number pair wise tuple comparisons potential duplicate identification filter efficiently isolating subset consisting potential duplicates 
tuple duplicate tuple duplicate detection consists identifying set ii comparing tuple tuples may duplicate 
tcm compares token sets tuples abuse notation tcm denote comparison token set tuple multi set union token sets tuples set similar notation fkcm 
potential duplicate identification filter intuition filtering strategy determine set potentially duplicate tuples tcm value tuples 
tuple tcm specified threshold duplicate perform comparisons identify potentially smaller comparing pairs involving tuples filtered set significantly efficient comparing pairs tuples intuition filtering strategy captured observation tcm fkcm 
observation follows fact multi set union token sets tuples superset token set 
observation cm denote tcm fkcm metric tuples set tuples 
cmg cmg computing tcm token tables describe technique efficiently compute tcm tuple intuition tokens intersection token set ts multiset union token sets tuples frequency bag tokens bt 
token unique frequency 
build structure called token table containing information set tokens frequency tf bt greater ii frequencies tokens iii list pointers tuples token occurs 
difference token table inverted index token table contains tokens frequency respect greater potentially smaller large percentage tokens bt unique 
maintain lists tuple identifiers tokens frequent 
frequency start ignoring token called token frequency set equal number tuples mentioned earlier enhance tcm treating tokens close edit distance implementation synonyms 
due space constraints skip details token table construction 
example suppose processing state relation grouped country relation detected set united states united states america usa duplicates country relation 
group state tuples joining usa duplicates token table consists entry token mo frequency tupleid list 
computation tcm requires frequencies respect bt tokens ts obtained looking token table 
tokens absent token table frequency 
tuple tcm greater tcm threshold potential duplicate tuple added 
computing pairs duplicates compare tuple set sv tuples union tuples sharing tokens sv obtained token table 
tuple sv tcm 
tuple sv tcm tcm threshold add pair pairs duplicates 
duplicate detection fkcm predict tuple duplicate fkcm tuple fkcm fkcm threshold 
observation determine set potential duplicates efficiently computing fkcm children tables 
computation set potential duplicates duplicates fkcm tuples tcm 
describe construction children table group tuples 
children tables children table hash table containing subset union children sets tuples contains child tuple ri joining tuple frequency cf bc greater ii frequencies children tuples iii list pointers tuples joins 
maintain lists tuples children frequency children frequency fixed number tuples example consider example 
process state relation grouped country relation 
suppose united states united states america usa set duplicates country relation 
group state tuples joining usa duplicates children table contains entry child frequency tupleid list 
note recall frequency child tuple bc descriptive attribute value combinations ignores generated key attributes ri 
example tuple frequency ignore attribute values 
building children table procedure similar building token table difference multi set union children sets bc large street addresses city illinois chicago may fit main memory 
follow steps 
refer tuples bc frequency greater non unique tuples 
fetch non unique tuples bc hash table 
ii fetch tuples children pair time associate non unique tuples bc list tuples join 
combination detecting duplicates tcm fkcm combine combination function section predictions pair tuples detected duplicates tcm fkcm 

grouping duplicate pairs sets coordinating top traversal hierarchy requires partition sets duplicates determine representative tuple called canonical tuple set able exploit database systems processing 
issue clearer section 
partition sets duplicates adapt method hs handle asymmetric similarity functions 
essential idea divide connected groups choose canonical tuple group 
standard approach hs elevate relationship duplicate tuples transitive relation 
duplicate consider duplicate 
intuition partitioning method identify maximal connected sets duplicates pair tuples set deduce transitivity duplicate vice versa 
connected set maximal add tuples making disconnected 
connected set choose tuple highest idf value token sets children sets higher level relations canonical tuple 
relationship duplicate asymmetric tuple may multiple connected sets 
tuple place view definitions lm select rm li select li am case ti ai null li ai ti ai li ai li li left outer join ti li am ti am li ai ti ai set closest computed fkcm higher levels tcm lowest level canonical tuple 

top traversal qi describe top traversal hierarchy 
starting topmost relation group relation invoke duplicate detection procedure group 
primary goal traversal group relation appropriately 
grouping relation ri combination si join ri rm processed relations ri tuples join tuple combinations equivalently sub entities si exactly equal detected duplicates placed group 
straightforward ordering si join ri si achieve desired grouping duplicate tuple combinations si may adjacent sorted order 
example duplicates uk great britain country relation adjacent sorted order 
realize correct sorted order considering new relation li join rm duplicate tuples processed relations ri rm replaced canonical tuples 
group relevant projection li canonical tuple combinations si 
avoid explicit materialization large large database relations li recording detected duplicates translation tables 
translation tables significantly smaller database number duplicates number tuples database 
translation tables informally translation table ti records mapping duplicate tuple ri canonical tuple ancestral combination join ri rm point 
storing ancestral combination assume duplicate tuples relations ri rm replaced canonical tuples 
example usa canonical tuple set duplicates united states united states america mo set missouri states pointing usa united states united states america translation table country relation level maps united states united states america usa 
translation table state level maps usa missouri usa mo 
select li 
li 
li 
count select distinct li 
li 
group li 
li 
li 
having count order li 
li 
li 
view definitions queries qi select li 
li 
li 
li 
select distinct li 
li 
order li 
li 
li 
canonical ri represent relation ri duplicate tuple replaced canonical tuple 
translation table ti schema ri ri canonical ri canonical ri canonical rm 
ti records duplicate tuple canonical tuple canonical tuple combination sv grouping combination canonical ri canonical rm relations join 
coordination form sql queries qi qi results contain information required processing group ri 
scan portions query results pause process group ri tuples continue scans 
define set views queries 
sequence views lm li defined 
informally li represents current state unnormalized relation join rm duplicate tuples ri rm collapsed canonical tuples 
lj schema unnormalized dimension relation considering translation table country relation outer join original unnormalized relation translation table country attribute results new unnormalized relation canonical country attribute 
united states united states america replaced usa canonical equivalent 
queries qi qi defined ai denotes set descriptive attributes including generated keys ri 
sake clarity omit key foreign key join conditions clause 
queries qi qi order projection li li am li ai 
tuple combination gs group tuples ri joining invoke duplicate detection procedure discussed section group gs follows 
scan result qi fetch group tuples joining scan corresponding group result qi process gs move subsequent group 
group consists information required building hash table nonunique children bc gs associating non unique children parent tuples building token table 
note maintain memory require tuple time 

dynamic thresholding cases difficult users set tcm fkcm thresholds 
develop technique dynamically determine thresholds group 
treating group independently allows set qualitatively better thresholds adapting characteristics group 
example numbers tokens may vary significantly groups names argentina may longer usa 
intuition threshold determination fraction duplicates group small say duplicate tuple higher value containment metric tcm fkcm unique tuple 
expect outliers distribution tcm fkcm 
standard outlier detection methods normality assumptions set thresholds 
section demonstrate experimentally threshold determination procedure quite effective 

resource requirements processing relation ri hierarchy send queries qi qi database system query computes join relations rm 
key foreign key joins efficient create appropriate join indexes 
expect number duplicates translation tables small 
outer joins translation tables efficient 
main memory requirements group level duplicate elimination procedure ideally requires group token table children table tuples main memory 
frequency distribution children tokens follows zipfian distribution true real datasets zipf half tokens children tuples frequencies greater maintained memory 
rare cases group processed large may materialize token children tables disk build appropriate indexes 

discussion discuss interesting issues starting note require dimensional information mp cm mp ed delphi global delphi delphi stripped normalized relations rm 
adapt delphi unnormalized relation join rm long sets attributes form hierarchy known 
fkcm measurement recall fkcm metric uses information level 
strategy efficient sufficient exceptional cases 
discuss cases 
small children sets children set tuple small single erroneous tuple cs significant fraction may incorrectly believe unique fact duplicate 
want detect errors modify children table construction processing follows 
add children tuples bc frequency children table 
treat pairs duplicate tcm tuples synonyms measuring metrics parents 
temporarily maintain children tuples frequency require additional main memory 
correlated errors consider sets tuples relation uses abbreviations uses expanded versions reporting country state values 
tuple united states washington may duplicate usa wa represents set values tuples 
may detect united states duplicate usa occurrence look level states relation 
possible overcome limitation measuring significant computational overhead cooccurrence lower level relations 
number combinations may high organizations usa fit main memory 
definition duplicates discuss limitation definition duplicates 
consider pair entities smith wa usa smith washington canada 
tuples canada usa rightly considered duplicates country relation definition entities duplicates 
observe second tuple violates implicit explicit functional dependency rule zipcode state wa country usa correct violation detect windowing hierarchy occurrence global thresholds cosine metric windowing hierarchy occurrence global thresholds edit distance grouping hierarchy occurrence global thresholds grouping hierarchy occurrence dynamic thresholding grouping hierarchy occurrence dynamic thresholding table algorithms percentage fp cosine metric edit distance false positive explosion wa washington duplicates occurrence information customer entities duplicates 
definition duplicates directly allow inconsistencies correct conjunction cleaning operations 
potential duplicate identification filter imagine set tuples tokens bt occur tuples cases filtering strategy effective may mark tuples potential duplicates 
experiments real data illustrate case typically occur practice 
developing appropriate filters rare cases open issue 
note possible consider similarity combination functions ones 
observation summarizes filtering strategy may valid similarity functions may design suitable filters possible 

experimental evaluation real datasets evaluate quality efficiency delphi compare earlier 

datasets setup fp fn cm cm cm edit edit edit cm cm consider clean customer information internal operational data warehouse introduce errors 
customer dimensional hierarchy relations name level city level state level country level tuples respectively 
start real data characteristics real data variations lengths strings numbers tokens frequencies attribute values occurrence patterns preserved 
know duplicate tuples correct counterparts erroneous dataset evaluate duplicate elimination algorithms 
observed similar results publication information bibliography database 
omit results due space constraints 
error introduce types errors common data warehouses equivalence errors spelling truncation errors 
generator parameters percentage error parameter controls error introduced relation 
second equivalence fraction third spelling fraction parameters control fractions equivalence errors spelling truncation errors respectively 
suppose percentage error equivalence fraction introduce duplicate tuples input table due equivalence errors 
equivalence errors consider tuple combination key associates mo usa customer table 
suppose want create equivalence error mo state relation 
mo say new value undetectable standard textual similarity functions 
equivalence errors usually occur multiple tuples choose entities country usa state mo modify value mo modified tuples introduce errors tuple child relation exists 
insert erroneous tuples lowest level hierarchy randomly picked token token set insert modified tuple spelling truncation errors modify token tuple changing deleting adding characters truncating token 
time modify characters remaining just truncate token 
number characters modified truncated linearly decreasing function maximum half token length 
token permutation consider example user enters name followed name stipulated name followed name 
reflect types errors randomly permute tokens erroneous tuples added algorithms table summarizes algorithms evaluate study 
mp cm mp edit derivatives windowing mp algorithm cosine metric edit distance respectively hs coh 
delphi global variant delphi uses global thresholds tcm fkcm 
delphi stripped variant delphi uses tcm completely ignores occurrence information 
run variants mp unnormalized relation name city state country relations sort key name city state country 
mp cm mp edit fix window size vary thresholds 
mp cm mp edit denote threshold cosine metric edit distance set delphi fp global arrived global tcm threshold fkcm threshold respectively trials 
compare quality algorithms group duplicate tuples lowest name relation output pairs duplicates detected delphi 
quality metrics describe quality metrics evaluating algorithms 
false positives percentage incorrect pairs tuples algorithm detects duplicates relative actual number duplicates called false positive fp percentage 
false positive percentage greater algorithm produces incorrect pairs 
lower false positive percentage indicates higher confidence algorithm results 
false negatives percentage undetected duplicates input dataset relative number duplicates called false negative percentage 
lower false negative percentages indicate duplicate detection 

analysis results delphi delphi stripped delphi global mp cm mp edit 
false positive explosion error percentages false positive percentages demonstrate cosine metric edit distance result large false positive percentages 
consider dataset error equivalence spelling truncation fractions 
shows results applying windowing strategy different sort orders name city state country city state country name state country name city country name city state 
cm edit denotes results cosine metric edit distance threshold cm cosine metric restricted definition duplicates presence dimensional hierarchies 
observe lowering thresholds drastically increases false positive percentages cosine metric edit distance 
fn 
quality delphi delphi stripped delphi global mp cm mp edit experiments generated erroneous datasets input dataset introducing errors relative fractions equivalence error spelling truncation errors fixed 
reduction false positive percentages shows false positive percentages algorithm 
delphi delphi global significantly lower false positive percentages conclude hierarchies occurrence information significantly reduce false positive percentages 
reduction false negative percentages plots false negative percentages see delphi lowest false negative percentages 
occurrence information useful reducing false negatives 
delphi stripped better delphi global 
dynamic thresholding helps reduce false negative percentages 
impact false positive reduction unpredictable 

speed scalability error percentage false negative percentages ran delphi delphi stripped mp cm datasets size 
table shows delphi scalable wide range dataset sizes 
running times normalized respect delphi tuple dataset 
note maximum amount main memory required delphi datasets considered mb supporting argument token children tables fit memory 
tuples delphi delphi stripped mp cm tcm fkcm name city state country table scalability table filtering scalability characteristics mp edit similar mp cm consider 

potential duplicate filter evaluate potential duplicate filtering technique 
dataset duplicate tuples 
table shows total number potential duplicates groups relation hierarchy 
entry denotes tcm fkcm returned potential duplicates respectively 
observe compared minimum duplicates targets set tuples considered potential duplicates 
potential duplicate filtering enhances efficiency 
observe fkcm returns fewer potential duplicates 
conclude cooccurrence information effective reducing false positives 

exploited dimensional hierarchies data warehouses develop high quality scalable efficient algorithm detecting fuzzy duplicates dimensional tables 
intend consider multiple hierarchies detecting fuzzy duplicates 
members group microsoft research thoughtful comments 
aep pevzner 
new approach sequence comparison normalized local alignment 
bioinformatics 
bds borkar deshmukh sunita sarawagi 
automatic segmentation text structured records 
proceedings acm sigmod conference santa barbara ca may 
bgm broder glassman manasse zweig 
syntactic clustering web 
proc 
sixth int 
world wide web conference world wide web consortium cambridge pages 
beyer goldstein ramakrishnan shaft 
nearest neighbor meaningful 
international conference database theory pages 
january 
bl barnett lewis 
outliers statistical data 
john wiley sons 
ricardo baeza yates berthier ribeiro neto 
modern information retrieval 
addison wesley longman 
coh cohen 
integration heterogeneous databases common domains queries textual similarity 
proceedings acm sigmod pages seattle wa june 
ronald 
data quality scenes perspective data cleansing 
www com march 
fs sunter 
theory record linkage 
journal american statistical society 
gal helena galhardas 
data cleaning commercial tools 
inria fr cleaning html 
gfs helena galhardas daniela florescu dennis shasha eric simon cristian 
declarative data cleaning language model algorithms 
proceedings th international conference large databases pages roma italy september 
helena galhardas daniela florescu dennis shasha eric simon 
extensible framework data cleaning 
acm sigmod may 
gij gravano ipeirotis jagadish koudas muthukrishnan srivastava 
approximate string joins database free 
proceedings vldb 
venkatesh ganti johannes gehrke raghu ramakrishnan 
cactus clustering categorical data summaries 
proceedings acm sigkdd fifth international conference knowledge discovery databases pages august 
david gibson jon kleinberg prabhakar raghavan 
clustering categorical data approach dynamical systems 
vldb new york city new york august 
grs sudipto guha rajeev rastogi kyuseok shim 
rock robust clustering algorithm categorical attributes 
proceedings ieee international conference data engineering sydney march 
juha pasi hannu toivonen 
efficient discovery functional approximate dependencies partitions 
proceedings th international conference data engineering icde pages orlando florida february 
hs hernandez stolfo 
merge purge problem large databases 
proceedings acm sigmod pages san jose ca may 
ka alvey 
record linkage techniques 
statistics income division 
internal revenue service publication 
available www bts gov methodology 
km kivinen mannila 
approximate dependency inference relations 
theoretical computer science september 
mbr madhavan bernstein rahm 
generic schema matching cupid 
vldb pages roma italy 
alvaro monge charles elkan 
field matching problem algorithms applications 
proceedings second international conference knowledge discovery databases kdd 
monge elkan 
efficient domain independent algorithm detecting approximately duplicate database records 
proceedings sigmod workshop data mining knowledge discovery tucson arizona may 
mannila 

algorithms inferring functional dependencies 
data knowledge engineering february 
nr felix naumann claudia 
metadata models meet iq requirements 
proceedings international conference data quality iq mit cambridge 
pro mit total data quality management program 
information quality 
web mit edu www 
rd rahm hai 
data cleaning problems current approaches 
ieee data engineering bulletin december 
rh raman joe hellerstein 
potter wheel interactive data cleaning system 
vldb pages roma italy 
zipf zipf 
human behaviour principle effort 
addison wesley reading ma 
