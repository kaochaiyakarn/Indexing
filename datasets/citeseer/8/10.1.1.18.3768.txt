token controlled place refinement hierarchical petri nets application active document workflow david stork rob van glabbeek california research center sand hill road suite menlo park ca stork rii com department computer science stanford university stanford ca cs stanford edu 
propose extensions predicate transition nets allow tokens carry data control information control refine special refinable place nodes net 
formal extensions find active document workflow documents specify portions processing workflow net 
approach enables workflow designer specify places target predicate transition net may refined enables document author specify places refined attachment refinement net 
task allows workflow designer set general constraints document author control processing prevents conflicts foreseeable practical cases 
refinable places augmented permission structure specifying document authors refine place document tokens execute node refinement net 
refined nets hierarchical structure represented bipartite trees 
document process workflow sequence operations documents loan application employment application insurance claim purchase online credit verification purchase processing patient medical records distribution sign memos ce editorial steps production magazine increasingly important application concurrency theory 
number ad hoc high level languages commercial systems cosa visual workflow forte conductor workflow inconcert sap workflow developed serve applications need formal language allow workflow properties derived example halting reachability invariances deadlock livelock 
various high level workflow languages expressed common formal language functional di erences similarities exposed analyzed formal language 
unifying formal language enable business partners merge workflows instance chaining synchronization di erent high level workflow languages 
wil van der aalst colleagues argued petri nets predicate transition nets form subclass provide formal foundation document workflow reasons specifically formal semantics petri net formalism provides precise definitions clear semantics basic systems enhanced attributes color time hierarchy :10.1.1.147.3781
graphical nature petri nets natural graphical representations intuitive easy learn admit natural human machine interfaces supporting drag drop click link operations icons representing processes documents 
expressiveness basic petri nets support functional primitives needed model existing document workflow systems 
management systems modeled local states petri nets represented explicitly allows modeling implicit choices milestones 
reasoning properties petri net process algebra rests firm mathematical foundations facilitates reasoning network properties 
analysis wealth formal petri net analysis techniques developed proving properties safety invariance deadlock 
calculating performance measures response times waiting times occupation rates 
vendor independence petri nets tool vendor independent framework vanish amidst inevitable marketplace 
model analyze existing workflows build extend petri nets provide foundation powerful enhanced workflow systems 
basic petri nets attractive foundation current workflow systems petri net theory stands incapable expressing properties seek expanded workflows 
particular explore properties active document workflow introduce extensions petri net theory enable 
section review petri nets traditional document workflow sketch functionality want active document workflow mention analogies areas computer science 
section review petri net related formalisms show insu cient express active document workflow 
section give formal definition token controlled place refinement conclude section directions 
document workflow traditional workflow traditional document workflow workflow designer specifies processing steps applied passive document 
workflow implemented petri net tasks transitions represented squares specify operations performed local states places represented circles specify status 
causal flow petri net indicated arrows arcs linking transitions states states transitions states states transitions transitions 
documents represented tokens flow network 
states conditions workflow copier tray empty return receipt sent forth represented place nodes status indicated presence absence tokens 
shows simple document workflow newspaper publisher 
ignore moment bold circle consider network implements traditional workflow 
reporters field submit drafts articles newspaper editorial ce fax email article transmitted document electronically scanned ce create electronic version 
submission logged electronic document passed editor corrections passes edited document 
reporter ready submit email send fax send fax scan fax text available log submission edit article complete typeset print processing specified active document reporters field newspaper editorial office articles printed reporter ready submit email ready send ready send place fax place fax received fig 

workflow implemented petri net specifies tasks squares states circles linked arcs 
schematic example newspaper reporters submit articles editorial ce fax email ultimately leading typeset articles newspaper 
current state draft article reporter scanned reporter ready submit article 
state shown dots tokens constituting marking 
network input places di ers slightly workflow nets defined :10.1.1.147.3781:10.1.1.147.3781
active document workflow exploits processing bold circle see sect 

active document workflow consider full network fig 
bold circle represent active document workflow case single article submitted reporter 
reporter submits draft article case reporter added special control instructions document 
submission logged workflow network special control information read executed state node indicated bold circle 
control information document machine readable form specify tasks translate paragraph french english convert entries table japanese yen dollars october exchange rate send copy document person international news division combinations operations 
processing invoked function library calls set resources available editorial ce known reporter 
operations number reasons done easily rapidly ce field 
instance relevant extra information incorporated processing software may reside firewall editorial ce resources translator image processing systems may available ce forth 
applications active documents contain control information send return receipt sender print letter corporate mail address crop photograph square encrypt document text pgp determine name recipient corporate president replace occurrence president document name change text column column tables appendix route document request acknowledgment acknowledgment received pass document stage target workflow encrypt document pass document stage create pdf duplicate document send internal document archive stress enhancement merely token controlled selection pre existing operations anticipated workflow designer 
putting operations arbitrarily large number unanticipated ways 
workflow designers users specified control tasks done ad hoc informal way 
instance example reporter sent separate message secretary editorial ce specifying alterations performed submitted draft article 
increase electronic workflow ce intranets networked ce appliances business business nets world wide web presents opportunity automating processes scaling large workflow systems 
research goal provide formal foundation workflow includes methods protocols automating processing active documents 
newspaper example active document workflow automate processing ensure editor receive document form author wishes rapidly minimum direct human intervention 
standards active document workflow specification formal language conventions calls libraries resources protocols facilitate interorganizational active document workflows 
proposed extension traditional workflow workflow designer specifies places network support token specified processing resources available processing document author specifies resources document processing 
document processing routing allows flexibility di erent applications 
fixed rigid applications workflow designer retains absolute control permit document controlled processes workflow network 
nodes bold circle fig 
just traditional passive document workflow 
applications workflow designer may permit limited flexibility freedom document author important workflow processes completed logging archiving copy original document 
workflow designer provides set resources libraries set implicitly limits operations invoked document author 
networks serving multiple highly variable operations workflow network multiple places author specify processing provide large libraries basic operations invoked active document 
example rigid workflow processing issued tra tickets fines police station motor vehicle administration 
freedom specifying ticket fine processed 
example modest freedom granted document author newspaper example 
consider applications document author great freedom 
suppose mobile professional ce computer running active document processing system 
case author compose business letter small portable device send electronically home computer supports active document workflow 
document specify letter printed corporate special letter stock bound latest version corporate financial sheets resident home machine mailed particular set recipients 
active document workflow type particularly useful low bandwidth mobile non synchronous applications 
imagine outsource document processing service customers submit active documents specifying typesetting layout translation graphics processing postal electronic distribution archiving services 
approach deliberately blurs reduces distinction data control lambda expressions describe functions arguments calculus high level programming languages calculus lisp scheme 
indirect informal way file headers extensions jpg gif indicate images processed rendered particular way analogy propose 
stronger richer analogy active document processing typesetting document preparation system single source file contains mixture text control functions specify document formatted text rendered 
systems encompass tasks distribution workflow generally 
roles humans humans essential components workflow system course clarify responsibilities design enhanced systems 
expert workflow designer constructs workflow newspaper ce specifying processing steps flow relation refinable places library functions called active documents 
similarly expert specifies permission structures control document authors refine place see sect 

document authors reporters non experts need understand functions available libraries 
newspaper example humans serve resources specified library 
operation translate french english send document bilingual expert needs expertise document workflow conventions 
permission structures consider workflow network having legal department finance department 
documents letters faxes emails received classified routed document workflow appropriate department 
employees may wish tailor reprogram workflow means documents outside ce 
surely members legal department ability permission alter processing documents routed legal department analogously finance department 
approach supports alterations allowing temporary changes ecting current document semi permanent changes ecting multiple documents workflow 
allow active documents change refine workflow net undo reverse changes 
altered network hierarchical network implementing new functions lies deeper level original network 
formalism supports permission structures specify change documents ected change discussed 
related formalisms formalism active document workflow build petri nets reason mentioned number related general formal approaches specific proposals considered 
shall see properties needed enable active document processing envision 
graph rewriting algebras graph rewriting algebras specify replace subgraphs subgraphs 
structure governing substitutions formal composition reversion contraction 
algebras inadequate active document workflow contain notion document controlling rewriting 
action refinement concurrency theory process algebra action refinement refers substitution complicated actions simpler ones 
technique insu cient active document workflow provision substitutions take place execution process 
petri nets refinement refinement petri net process node network replaced networks 
standard petri nets refinement places transitions refinement specified creator network information tokens 
shall employ token controlled refinement mechanism implementing processing specified document author 
furthermore refinement need replace existing section net attach refinement net way described 
traditional workflow nets traditional workflow nets represent documents tokens essence ignore contents documents 
reason su ciently expressive token controlled refinement 
furthermore ort formal document workflow employs petri nets basic colored nets predicate transition nets shall require 
petri nets structured tokens higher level nets predicate transition nets colored peri nets tokens carry structured information exploited transitions 
higher level net document workflow supports processing document bill familiar supplier forward bill chief financial cer 
existing higher level nets allow changes workflow network token controlled changes workflow network particular 
knowledge higher level nets refinement 
reconfiguration dynamic reconfiguration processes changed dynamically intermediate computed results range applications fpga reconfigurable computing 
fpga approach rest formal foundations petri nets message packets approach bear weak correspondence tokens petri nets workflow 
badouel oliver describe petri net self modifying reconfigurable net modifies structure rewriting components reconfiguration information passed tokens 
similar ideas appear valk 
hierarchical networks hierarchical nets studied tokens objects nets transitions may synchronize ones system net travel 
approach close number ways separates behavior system net object net allow passing document contents 
summary previous formalisms support full range active document workflow structures envision 
turn specification formalism 
token controlled refinement hierarchical nets informal description basic token controlled refinement subsequently develop various successive stages formal definitions kind nets support refinement 
active documents carry data text control information control documents represented structured tokens petri net 
consider document file data control may intermixed long tagged separable 
call traditional workflow net target net distinguish refinement nets specified structured token 
active document workflow workflow designer specifies target net number special refinable places serve loci document controlled operations 
shows internal structure refinable place bold circle fig 

top portion fig 
shows target petri net includes single refinable place 
structured token enters refinable place refinement enabled 
information token specifying refinement net read refinement net may attached input output places shown 
approach local places transitions refined simplifies formal definition emphasizes refinement amounts addition extra tasks workflow process detailed explanation execute specified process 
natural consider refinement net lie di erent level target net shown fig 

shall describe token carrying instruction refinement undone may arrive resulting contraction eliminates refinement net 
fig 

refinable place denoted bold circle contains formally simple net consists unique input place unique output place os transition linked shown 
token controlled place refinement os serve anchors inserted refinement net shown fig 

transition represents op transition leaves document unchanged 
symbol analogy transitions calculus communicating systems ccs 
shall see documents pass transition refinement document permission execute refinement net attached refinable place 
refinement net target net target net level level place refinable place transition structured token refinement refinement fig 

token controlled process refinement occurs structured token encounters refinable place 
case control information token read implemented refinement net level 
transitions workflow nets consider documents contain control information net representations employ structured tokens 
systems network transitions modify documents capture fact build predicate transition net formalism 
illustrates transition net lower case roman letters represent documents upper case roman letters represent operations performed single multiple documents 
japanese translation document denoted concatenation documents denoted forth 
fig 

transitions workflow networks traditional predicate transition nets 
example documents enter transition 
operations denoted upper case letters documents arguments japanese translation denoted concatenation documents denoted shown left 
processed documents including ones subject null op process emitted transition 
formally equivalent representation label output arcs symbolic names corresponding emerging documents write transformations box shown right 
second representation emphasizes fact information passing arc considered document 
second representation colored petri nets obscures structural information documents instance particular document concatenation documents 
practice operations automatic encrypt electronic document require human intervention translate document japanese 
acknowledge operations may quite di cult implement need specify attributing label listed library called needed 
colored petri nets may su cient formal expressive power serve foundation networks colored nets awkward unnatural needs obscure structure documents relationships 
instance documents represented tokens di colors composite concatenated document represented third color obscuring document composite structure 
fact giving equivalent predicate transition net cient way specifying colored net 
predicate transition nets signature list names operations predicates documents associated arity 
instance contain binary operator interpreted concatenation documents unary operator interpreted japanese translation document argument 
binary predicate evaluated true says argument document containing endorsement statements contained second document unary predicate evaluated true says argument document signed president 

set variables ranging documents 
tt denotes set terms instance japanese translation document concatenated document furthermore set formulas language order logic saying statements document endorsement signed president 
predicate transition net quadruple disjoint sets places transitions flow relation allocates transition order formula called transition guard 
elements graphically represented circles boxes respectively element represented arc labeled variable formulas written transition arc indicates firing transition document taken place arc indicates firing document deposited place transition guard selects properties input documents satisfied transition fire simultaneously specifies relation input output documents 
variables allocated arcs leading may occur free formula 
provide means talk input output documents transition 
consider example transition consumes input documents produces output document transition guard formula says transition may fire pgp document successfully decrypts key document conditions met decrypted document emitted 
marked predicate transition nets firing rule recall signature 
algebra domain operations predicates defined 
case course elements denote documents 
evaluation algebra assigns variable document evaluation extends straightforward manner terms formulas terms tt evaluates true false formulas 
marking predicate transition net allocation tokens places net 
tokens documents represented elements algebra speak marking marked predicate transition net tuple predicate transition net marking associates place multiset documents algebra multiset function tells possible document copies reside place 
markings write marking 
addition markings yields union respective multisets tokens place net 
function function need yield marking specify negative number documents place 
transition predicate transition net evaluation input output markings 
multiset brackets 
transition enabled marking evaluation written case fire yielding marking written workflow nets workflow net defined van der aalst petri net special places represent input output net 
workflow net initial marking 
net acts documents represented tokens deposited environment input place net finite loops may represent ongoing behavior environment may continue drop documents input place 
documents arrive output place carried away environment 
furthermore incoming arcs workflow net outgoing arcs workflow net place path net general sense consider multiple input output places fig 
discussions simplicity follow van der aalst assuming just 
van der aalst typically abstracts contents documents modeling unstructured tokens 
give contents documents expanding place transition nets predicate transition nets 
predicate transition workflow net tuple marked predicate transition workflow net tuple 
parts definition ected 
initial marking workflow net marking puts single document input place net 
workflow nets required sound sense initial marking evolves marking document output place document output place documents left net 
initial marking evolve marking evolve marking token output place 
transitions net fired 
van der aalst workflows considered case driven meaning case started document token dropping input place executed fresh copy workflow net 
guarantees documents workflow corresponding di erent cases influence 
consider cases executed parallel workflow net creating possibility case influence execution 
want cases independent augment document token color number require transitions fire incoming documents color number 
course output corresponding color number 
simple implement required bookkeeping tasks predicate transition nets 
simple hierarchical workflow nets formalization token controlled refinement workflow net may refinable places tuple set refinable places 
input output place refinable 
may helpful think refinable place consisting input place output place transition indicated fig 

arcs leading go arcs go transition input place output place 
transition observable ect passes documents unchanged 
fact behavior net branching bisimulation equivalence una ected substitution net fig 
place simple hierarchical workflow net tuple predicate transition workflow net set refinable places function associates refinable place simple hierarchical workflow net 
refinement net inserted nets simple hierarchical workflow nets formal definition involves recursion class simple hierarchical petri nets smallest class ih tuples predicate transition workflow net set refinable places ih 
top level net place document arrives document transferred input place net runs concurrently top level net 
document reaches output place transferred back fact input transitions need document place top level net 
marked simple hierarchical workflow tuple predicate transition workflow net set refinable places marking top level net function associates refinable place marked simple hierarchical workflow net 
definition marking simple hierarchical workflow net layer level hierarchy just top layer layers reside transitions net fire level hierarchy definitions predicate transition nets tokens arrive refinable places level lower hierarchy tokens arriving output places refinement net level higher 
non hierarchical predicate transition workflow net regarded simple case hierarchical workflow net 
classical notions place refinement petri nets regarded methods flatten hierarchical nets non hierarchical ones 
flattening operation workflow nets extremely easy define just insert net identifying input place output place deleting transition explore ways change hierarchical structure nets dynamically particular undoing refinement execution net important clearly separate refinement net associated refinable place top level net 
flatten net refinement hierarchical nets 
operational behavior hierarchical net best understood flattened net 
hierarchical workflow nets hierarchical workflow net defined just simple hierarchical workflow net refinement function structure 
particular associates refinable place just single refinement net list guarded refinement nets 
guarded net pair guard net guard order logic formula distinguished variable variable may occur free formula 
structured token arrives guard guarded net list evaluated guard evaluates true token descends input place corresponding net 
second guard tested 
element list net cf fig 
guard evaluates true 
token arrives output place net list specified moves upwards higher level net 
aim defining guards way stems recognition particular refinement may useful documents particular type particular author 
guards check way document permission enter particular refinement net 
case document permission enter meaningful refinement net associated certain place structured token performs transition 
level level level fig 

successive semi permanent refinements lead hierarchical net 
target net top refinable places 
refined attachment workflow net refined shows example hierarchical net single place multiple refinement nets attached 
hierarchical structure net represented means bipartite tree indicated fig 

path root leaf consists alternating sequence nets refinable places 
token controlled refinement order hierarchical workflow nets allow token controlled refinement refinement function structure indicated 
active document workflow allocate identifiers refinable places documents carry instructions land refinable place identifier add guarded net list guarded refinement nets 
refinable place carries extra refinement guard checks incoming document permission initiate refinement 
refinement net extractor ref reads instruction pertaining avoid confusion guards discussed henceforth called entry guards 
fig 

nets produced token controlled refinement fig 
represented bipartite tree 
tree path root leaf consists alternating sequence nets refinable places 
refinement document extracts appropriate guarded refinement net document text 
incoming document refinement guard evaluates true holds refinement net extractor yields guarded refinement net ref net added head list 
want give documents possibility remove certain refinement nets 
removal occur refinement net active token refinement net 
merely allow documents change entry guard refinement net false preventing subsequent documents entering net 
soon refinement net inactive sense steps role workflow comes 
eliminate idling ghost nets incorporating garbage collection process regularly checks workflow inactive refinement nets entry guards false removes workflow 
order model token controlled refinement fully component hierarchical net structure ref refinement guard ref refinement net extractor list guarded refinement nets triples refinement net entry guard removal guard 
guards order logic formulas variable occurring free 
document enters refinable place removal guards guarded refinement nets evaluated substituting free variable guarded refinement net evaluates true removal assigning false 
refinement guard evaluated 
case evaluates true guarded refinement net ref added head list token enters refinement nets token evaluated entry guards soon guarded refinement net encountered evaluates true token transferred input place initial state hierarchical workflow net refinement function refinable place list guarded refinement net true false 
removal guard net evaluates false net removed 
net entry guard evaluates true guarantees document succeed entering net document fail enter refinement net 
machinery set facilitate semi permanent refinement 
order achieve temporary refinement token creating refinement net may enter net removal guard refinement net true entry guard 
way token visits refinable place close refinement net 
summary summarize formal definitions entities supporting active document workflow part traditional definitions notations 
places set german elements indicated circles 
transitions set german elements indicated squares 
variables set symbolic names instantiated documents 
flow relation relation sv indicated network set directed arcs labeled variables 
input place unique place workflow net accepts tokens documents environment 
general nets multiple input places 
output place unique place workflow net emits tokens documents environment 
general nets multiple output places 
signature set names ary operations predicates documents 
terms tt 
formulas language order logic 
transition guards formulas allocated transition predicate transition workflow net tuple 
tau net net true 
entry guard formula tells document permission enter refinement net removal guard formula tells document intention permission remove refinement net guarded refinement net triple consisting refinement net entry removal guard 
guarded net tuple true false 
refinable places set elements indicated bold circles 
refinement guard formula tells document permission refine place refinement net extractor term ref ref extracts document guarded refinement net document inserted place refinement function function associates refinable place triple ref consisting refinement guard refinement net extractor list guarded refinement nets list guarded net 
algebra tokens algebra set 
tokens equipped operators predicates 
marking assignment structured tokens places net 
marked hierarchical workflow net net 
transition firing hierarchical active document workflows firing networks supporting active document workflow complicated traditional workflows course permissions refinement contraction supported 
firing transition entails 
evaluation variables true extract documents place deposit documents place 
structured token enters refinement place guarded refinement net true change false evaluate 
true add guarded refinement net ref head list go elements true move input place 
structured token enters output guarded refinement net transfer token level continue executing target net 
directions summary identified new general powerful operation refinement proposed modifications predicate transition nets operation support enhanced workflow 
formal definitions elementary properties lay foundation sophisticated theory concurrency workflow applications 
ideally prove preservation refinement properties workflow soundness put forth van der aalst 
alas general predicate transition nets soundness property need preserved refinement case extensions predicate transition nets significant restrictions expressive power nets 
focus properties preservation liveness refinement shown composition petri nets 
steps concurrent formalization expanded workflow important practical applications 

wil van der aalst 
reasons petri net workflow management system 
information process integration enterprises rethinking documents pages 
kluwer academic norwell ma 

wil van der aalst 
interorganizational workflows approach message sequence charts petri nets 
systems analysis modelling simulation 

wil van der aalst jorg desel andreas oberweis editors 
business process management models techniques empirical studies 
springer new york ny 

luca aceto matthew hennessy 
adding action refinement finite process algebra 
information computation 

eric badouel javier oliver 
reconfigurable nets class high level petri nets supporting dynamic changes 
wfm workshop th international conference applications theory petri nets pages 

michel bruno courcelle 
graph expressions graph rewriting 
mathematical systems theory 

brauer robert gold walter vogler 
survey behaviour equivalence preserving refinement petri nets 
grzegorz rozenberg editor advances petri nets number lncs 

kent dybvig 
scheme programming language ansi scheme 
prentice hall upper saddle river nj 

hartmann 
predicate transition nets 
advances petri nets volume lncs pages 
springer verlag 

hartmann kurt 
system modelling high level petri nets 
theoretical computer science 

rob van glabbeek goltz 
refinement actions causality models 
jaco de bakker willem paul de roever grzegorz rozenberg editors proceedings rex workshop stepwise refinement distributed systems models formalism correctness netherlands may june volume lecture notes computer science lncs pages 
springer 

rob van glabbeek peter weijland 
branching time abstraction bisimulation semantics 
journal acm 

kurt jensen 
coloured petri nets invariant method 
theoretical computer science 

kurt jensen 
coloured petri nets basic concepts analysis methods practical vol 

springer verlag 

donald knuth 
program computers typesetting 
addisonwesley reading ma 

frank leymann dieter roller 
production workflow concepts techniques 
prentice hall upper saddle river nj 

michael kohler daniel moldt heiko 
liveness preserving composition agent petri nets 
technical report universitat hamburg fachbereich informatik 

michael kohler daniel moldt heiko 
modelling structure behaviour petri net agents 
jose manuel editors applications theory petri nets pages 

robin milner 
communicating mobile systems calculus 
cambridge university press cambridge uk 

ethan andre dehon 
matrix reconfigurable computing architecture configurable instruction distribution deployable resources 
peter athanas kevin pocek editors proceedings ieee workshop fpgas custom computing machines pages 

murata 
petri nets properties analysis applications 
proceedings ieee 

wolfgang reisig 
elements distributed algorithms modeling analysis petri nets 
springer berlin germany 

smith 
principles high level petri nets 
wolfgang reisig grzegorz rozenberg editors lectures petri nets basic models volume advances petri nets pages 
springer 

robert 
analysis petri nets stepwise refinements 
journal computer system sciences 

valk 
self modifying nets natural extension petri nets 
proceedings icalp volume lecture notes computer science lncs pages 
springer 

valk 
petri nets token objects elementary object nets 
jorg desel manual silva editors application theory petri nets volume lecture notes computer science lncs pages 
springer 

patrick henry winston berthold klaus paul horn 
lisp 
addison wesley reading ma third edition 
