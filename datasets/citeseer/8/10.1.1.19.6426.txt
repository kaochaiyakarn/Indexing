formal design environments brian adam jason hickey california institute technology pasadena ca usa cs caltech edu mojave cs caltech edu 
design formal integrated design environment 
long term goal ort allow seamless interaction software production tools formal design analysis tools especially compilers higher order theorem provers 
report initial design architecture integration metaprl logical framework multilanguage compiler call mojave generic extensible parser call phobos 
integration currently performed level mojave functional intermediate representation allowing theorem prover program analysis transformation optimization 
developing formal integrated design environments formal informal tools symbiotic relationship 
interactions formal informal parts fide bidirectional interdependent 
existing formal design environments allow bidirectional interactions especially theorem prover compiler 
system clearly bene closer interaction 
example compiler able theorem prover optimization proof validation program transformation 
theorem prover bene ability formalize code especially tactics 
larger need ective formal programming languages 
ective mean languages general ecient software production 
formal mean programs speci ed veri ed 
compiler responsible eciency prover formality 
order achieve properties simultaneously argue theorem prover compiler interact closely equivalently folded 
describe initial integrating metaprl logical framework mojave multi language compiler 
parts needed integration compiler theorem prover share common language compiler allow extended program syntax includes speci cation compiler prover agree common program semantics especially operational semantics 
results architecture implementation metaprl mojave formal design environment shared typed intermediate language semantics de ned metaprl implementation nuprl type theory extensible front called phobos uses metaprl rewriting system extending de ning programming languages examples theorem prover optimization 
section describes related 
section describes metaprl mojave phobos systems individually section presents combined architecture 
give example applications section nish summary 
supported onr darpa afosr 
brian related initially started development metaprl system 
metaprl logical framework designed allow relations logics 
metaprl designed logical programming environment lpe programs type systems proofs speci cations de ned related 
problems metaprl design layered architecture 
theorem prover layered ocaml compiler connection unidirectional 
task parsing type inference scoping assigned compiler available formal system hindering ective formal software development 
related ort nuprl system optimize communication protocols ensemble group communication system 
project separated prover compiler 
optimize protocol parser convert protocol requirements expression nuprl type theory prover apply optimization tactics generate fast path result printed ml le compiled ocaml compiler 
successful awkward 
furthermore optimization strategies de ned nuprl part program code making dicult synchronize formal system new ensemble code releases 
architecture propose ort design system formal properties rst class program properties prover compiler interaction seamless 
related areas sannella tarlecki extended ml allows mixing program implementation formal speci cation sml programs 
acl system allows extensive mixing formal speci cation common lisp programs 
nearly formal systems including systems hol pvs isabelle allow extensive reasoning programs prover coupled compiler proposing 
architectural components major parts architecture 
metaprl system provides reasoning mojave system provides compilation phobos system provides generic extensible parsing 
system architecture shown 
mojave metaprl functional ir metaprl ml java pascal phobos codegen machine code ii fig 

system architecture path corresponds traditional compilation path augmented theorem prover 
path ii uses dynamically extensible front 
formal design environments theories logics inference rules rewrites tactics refiner theorem prover term language logic engine meta language fol nuprl classical nuprl zf fig 

metaprl system architecture metaprl system metaprl logical framework designed architectural principles nuprl system 
system architecture shown 
re ner contains parts term module de nes system syntax logic engine theorem proving bookkeeping module manage validate proofs perform program extraction constructive proofs 
meta language de nes language tactics rewriting tactics de ne decision procedures proof heuristics 
entire metaprl system written ocaml ocaml language tactics 
topmost layer metaprl de nition theories logics 
theory de ned syntax de ned terms proof rewriting rules tactics theorems expressed derived inference rewriting rules utilities display pretty printing 
judgments inference rules described sequent logic 
example inference rule describe implies rule propositional logic 
rule imp intro main wf type rule variables meta variables represent arbitrary terms represents context 
sequents labeled main wf premises rule main main premise wf formedness requirement 
operator meta implication metaprl uses represent inference rules 
declaration imp intro rule de nes tactic called imp intro re ne goal form subgoals 
straightforward example de ne derived rule theorem apply sequents form proof imp intro rule twice premises 
rewriting judgments de ned similar way 
rule beta reduction untyped lambda calculus expressed rule 
rewrite beta declaration de nes conversion called beta applied proof redex performing substitution 
note statement rewrite uses second order substitution 
pattern represents term variable allowed free term represents substituted brian syntax terms logical terms including goals subgoals expressed language terms 
general syntax terms parts 
term operator name sum unique name indicating logic component term list parameters representing constant values list subterms possible variable bindings 
syntax describe terms nuprl de nition operator name 
pn parameters fv 
vm subterms displayed form term number fg lambda fx 
bg apply ff ag variable fg sum fx yg examples shown right 
variables terms string parameter name numbers integer parameter 
lambda term contains binding occurrence variable bound subterm mojave compiler mojave multi language compiler shown left half major parts 
front ends responsible compiling code functional intermediate representation fir back responsible generating machine code fir 
fir type inference optimizations form middle stage compiler 
fir primary concern language interaction metaprl 
functional intermediate representation fir designed minimal general purpose typed intermediate language 
fir higher order functions polymorphism object types 
describe parts rst type system programs 
fir type system fir type system polymorphic lambda calculus 
type system shown 
normal scalars including native integers various bit precisions boxed integers enumerations ig values range oating point numbers 
enumerations code base types empty type void unit functions multiple arguments 
type space functions arguments types returning value type tuples ht collections elements having potentially di erent type 
array represents variable sized arrays elements having type data type speci cally represents variable sized data area containing elements type 
values data type statically type checked type error store integer data area immediately fetch value location type runtime raise exception operation unsafe 
types de ned relative context contains type de nitions scope information polymorphic variables 
union type 
polymorphic disjoint union tuples value disjoint union type tagged tuple type tag ng 
de nes union type 
constructor type const denotes tagged tuple type 
polymorphism expressed existential universal types 
value type type type value type type types object type object recursive type de nition denoting objects description fir expressions fir expressions functional intermediate form order evaluation explicit 
atoms values constants variables expressions computed atoms 
function de nitions stored environment serves type assignment 
de nitions shown 
expressions include explicit coercions arithmetic unary binary operators 
formal design environments type description boxed boxed integers ig integer enumerations native integers oat floating point numbers tn function type const tn constructor type ht tni tuple type array array type data unsafe data polymorphic type variables type variables tn type application existential types universal types type object object type 
tm type abstraction type contexts fig 

fir type system ext call represents call runtime providing method issue system calls 
type de nitions system calls provided part compiler con guration ensure type safety 
provides means calling function 
match construction allows pattern matching constant set numbers represented list intervals 
match case de nes set expression operationally pattern match selects rst case evaluates expression match type error 
alloc operation allocation tuples constructors arrays data arrays 
array operations de ne primitives load store values arrays 
store operation non functional primitive language 
assert statement asserts predicate true 
runtime uses predicates validate array bounds runtime properties 
phobos phobos parser provides dynamic extensible parsing 
languages augmented new syntax semantics added system runtime dynamically 
central issue extensible parser representation semantic actions programs describe clause grammar form syntax tree 
approach represent intermediate forms terms metaprl term rewriter de ne semantic actions 
example shows language description simple arithmetic expressions including factorials 
entire description represented language module incrementally re ned extended inheriting modules 
language module phobos lex parse source string return metaprl term encodes semantic meaning 
phobos language module consists term declarations importing terms existing metaprl modules 
example arithmetic meta operations imported base meta standard metaprl module de nes basic brian de nition description nil nil value type boxed boxed integer constants native integer constants floating point constants variables unop 
unary operations binop 
binary operations integer interval set match case bounds bounds check pointer pointer check function function check alloc ha ani tuple allocation const constructor allocation array array allocation malloc malloc unop unary operations binop binary operations ext calls runtime tail call match 
cn set membership alloc allocation load store assert assertion variable type vn function de nition variable environment fig 

fir expressions operations numbers simple conversions simpli cation 
term declarations serve purpose veri cation proper scoping metaprl modules 
terms declared explicitly named parent module example itt int base number 
lexical information terminal symbols named de ned corresponding regular expressions 
regular expression matched resulting token represented token pos stores matched string pos source position 
term meaning optional lexical rewrite 
example numbers rewritten metaprl number terms 
precedence rules de ne precedence associativity terminal symbols production rules 
grammar expressed bnf production may contain list rewrites de ne corresponding semantic action 
rewrite rst matching rewrite carried parsing 
rewrite default rewrite builds tuple term right hand side 
post parsing rewrites possibly multiple sections rewrites executed sequential order parsing 
example rewrites responsible replacing fact term actual value unfolding factorials multiplications 
time applying rewrites metaprl re ner contains built conversions example reduce meta arithmetic terms 
optimizations optional target patterns optimizations 
formal design environments module calculator terms extend base meta declare meta sum meta diff declare meta prod meta quot terms extend declare fact tokens longest num token pos itt int base number times div plus minus bang eol space left plus minus left times div left left bang grammar start num plus plus meta sum minus minus meta diff times times meta prod div div meta quot bang bang fact rewrites fact fact number meta prod number fact meta diff number fig 

grammar simple arithmetic factorials 
brian language module 
yields itt int base number metaprl number term representing number 
system architecture technical issues integrating systems 
rst issue de ning shared language metaprl mojave phobos metaprl share common language terms 
order metaprl reason mojave programs formalize language including operational semantics 
fir common language fir common metaprl mojave language reasons 
frontends including ml java produce programs fir reason fir reason programs produced languages 
second fir precise semantics source languages example 
disadvantage fir dicult general translate source level speci cations proofs corresponding speci cations proofs fir level 
optimization problem nearly hard current developing operational reasoning metaprl programs fir 
mojave compiler terms internal representation programs 
communication metaprl develop glue code translate mojave fir representation program metaprl term representation program 
glue code straightforward remainder assume programs represented terms 
fir term representation metaprl term representation fir programs straightforward 
cases term represents fir expression explicit operator name set subterms described recursively 
illustrate translation examples notation 
term representation fir program 
atom values tagged name additional parameters 
signed ig expressions bit interesting binding structure 
term representation expression contrast ml representation uses explicit binding form higher order syntax 
pfenning mentions advantage higher order syntax substitution alpha renaming automatic 
disadvantage analyses modify binding unusual ways dicult de ne 
illustrate term syntax term binary arithmetic 
binop binop remaining terms follow general form omit 
operational semantics operational semantics fir de ned rewriting rules metaprl 
actual operational de nition quite large combinations arithmetic operations values 
forms de nition straightforward 
example operational rule addition general form write simpli ed pretty printed notation 
faithful implementation modular arithmetic 
formal design environments control operator match interesting de nition 
match operator pattern match number set intervals 
number interval cases arbitrary reduction performs case analysis time 
match cases 
match cases interval represented list closed intervals membership operation de ned inductively 
interval 
interval false remainder operational semantics straightforward 
models usage question models probably interesting topic translation 
ideally develop model fir type theory higher order logic prove operational semantics typing rules 
note complete model need represent partial functions general recursive types 
developed model presume need restrict validation fragment calculus de ned formal model 
treat operational semantics axiomatically 
illustrates currently major ways metaprl mojave system 
path uses mojave front ends generate fir code passed metaprl optimization 
ii path produces fir phobos description optimizes passes compiler code generation 
examples illustrate system optimizations 
metaprl mojave systems including examples downloaded www metaprl org mojave cs caltech edu 
dead code elimination standard code transformations incredibly easy de ne term rewriting 
dead code elimination simplest 
idea dead code elimination remove code ect result computation 
problem computable general develop proof procedures catch fairly broad set 
usual approximation syntactic characterization sub expression dead free second order term rewriting easy characterize 
rewrites derived theorems metaprl unop binop alloc dead code elimination performed normalizing program respect rewrites 
note expression redex mention variable means allowed appear free second order pattern allowed appear provable 
note rst order de nition substitution useful dead code elimination rule specify explicitly variable dead 
brian 
unop unop main di erences formal dead code elimination path ii standard dead code elimination path 
formal de nition smaller mojave dead code elimination phase lines ocaml code 
second ocaml implementation general global program properties 
example ocaml implementation performs dead argument elimination function parameter eliminated 
requires modi cation calls function program global operation dicult perform term rewriting 
partial evaluation example illustrates simple non trivial application partial evaluation 
consider fir code omit types clarity 
power function computes value res passes continuation cont 
power function computes speci case res 
power res cont cont res res res power res cont power cont power cont inline power res number cont example unroll de nition power sequence multiplications programming language de ned phobos includes inline extension programmer indicate patterns expanded inline keyword 
example inline instruction speci es call power function expanded third argument number 
information metaprl system constructs rewrite force unfolding 
power res number cont number cont res res res number power res cont power normalized relative rewrite calls power function constant exponent inlined 
nal de nition power function follows 
power cont cont formal design environments optimized code produced metaprl suboptimal assume multiplication associative number multiplications reduced 
implemented partial evaluation compiler phase path 
partial evaluation naturally expressed operational semantics program implementation needlessly reimplement program evaluation 
demonstrates principle formal integrated design environments integration far complete 
steps complete formalization operational semantics type system fir general framework performing partial evaluation 
mojave compiler architecture stages program transformation optimization 
transformations signi cantly simpli ed implementing theorem prover 
important direction bootstrapping 
currently metaprl layered ocaml compiler mojave implementation ml include module system 
removal obstacle enable complete integration formal design environment 

stuart allen 
non type theoretic de nition martin types 
proc 
second symp 
logic comp 
sci pages 
ieee june 

stuart allen robert constable douglas howe william aitken 
semantics re ected proof 
proc 
fifth symp 
logic comp 
sci pages 
ieee june 

robert boyer strother moore 
computational logic handbook 
academic press 
second edition 

judy crow sam owre john rushby natarajan shankar srivas 
tutorial pvs 
workshop industrial strength formal speci cation techniques april 
www csl sri com sri csl fm html 

gordon melham 
hol 
cambridge university press 

jason hickey 
fault tolerant distributed theorem proving 
harald ganzinger editor automated deduction cade th international conference automated deduction lnai pages trento italy july 
springer verlag 

jason hickey 
metaprl logical programming environment 
phd thesis computer science dept cornell university ithaca ny 

jason hickey brian alexei kopylov aleksey nogin xin yu 
listing metaprl theories 
metaprl org theories pdf 

sannella tarlecki 
de nition extended ml 
technical report ecs lfcs laboratory foundations computer science university edinburgh 

sannella tarlecki 
de nition extended ml gentle 
theoretical computer science 

christoph kreitz mark hayden jason hickey 
proof environment development group communication systems 
kirchner kirchner editors th international conference automated deduction volume lecture notes arti cial intelligence pages 
springer verlag 

xiaoming liu christoph kreitz robbert van renesse jason hickey mark hayden kenneth birman robert constable 
building reliable high performance communication systems components 
th acm symposium operating systems principles sosp volume operating systems review pages 

aleksey nogin jason hickey 
sequent schema derived rules 
theorem proving higher order logics tphols 

lawrence paulson 
isabelle generic theorem prover 
springer lncs 

frank pfenning conal elliott 
higher order syntax 
proceedings acm sigplan symposium language design implementation pages atlanta georgia june 

didier emy er ome vouillon 
objective ml simple object oriented extension ml 
acm symposium principles programming languages pages 
