symmetry breaking predicates search problems james crawford matthew ginsberg computational intelligence research laboratory university oregon eugene cirl uoregon edu eugene luks roy department computer science university oregon eugene cs uoregon edu reasoning optimization problems exhibit symmetries 
previous shown special purpose algorithms symmetries simplify reasoning 
general scheme symmetries exploited adding symmetry breaking predicates theory 
approach propositional satisfiability problem pre processor systematic non systematic reasoning method 
general case adding symmetry breaking axioms appears intractable 
discuss methods generating partial predicates show specific cases symmetries broken fully partially polynomial number predicates 
ideas implemented include experimental results classes constraint satisfaction problems 
human artifacts chess boards aircraft exhibit symmetries 
highly regular patterns circuitry microchip interchangeable car engine seats commercial aircraft drawn organizationally symmetric designs 
part appeal regular symmetric design allows reason understand larger complex structures handle 
follows appear proceedings knowledge representation kr cambridge massachusetts nov build computer systems configure schedule diagnose reason human artifacts need endow reasoning systems ability exploit structure general symmetries particular 
automated reasoning huge area purposes focus search 
abstractly search problem consists large usually exponentially large collection possibilities search space predicate 
task search algorithm find point search space satisfies predicate 
search problems arise naturally areas artificial intelligence operations research mathematics 
symmetries search problems conceptually simple 
points search space related symmetry want visit 
order accomplish solve problems 
symmetries need discovered need realize interchange ships changing basic form problem 
second need symmetries 
focuses second problems 
shown crawford crawford detecting symmetries equivalent problem testing graph isomorphism problem received substantial amount study see babai 
regard computational advantage symmetries past focused specialized search algorithms guaranteed examine single member symmetry class brown crawford unfortunately difficult combine symmetry exploitation satisfiability constraint satisfaction flexible backtracking schemes gaschnig ginsberg nonsystematic approaches minton selman rapid progress search techniques generally past years tying symmetry exploitation specific search algorithm premature 
approach take different 
modifying search algorithm symmetries symmetries modify hopefully simplify problem solved 
tic tac toe example require move middle upper left hand corner upper middle doing change analysis game interesting way 
general approach add additional constraints symmetry breaking predicates satisfied exactly member set symmetric points search space 
constraints language original problem propositional satisfiability purposes run symmetry detection utilization algorithm preprocessor satisfiability checking algorithm 
course catch 
case catches known polynomial algorithm detecting symmetries 
symmetry detection equivalent graph isomorphism believed easier np complete known polynomial 
graph isomorphism rarely difficult practice profoundly demonstrated efficient nauty system mckay furthermore shown average graph isomorphism linear time naive methods babai kucera second catch detection complete computing full symmetry breaking predicate appears intractable 
generally reason generate full symmetry breaking predicate 
generate partial symmetry breaking predicate affecting soundness completeness subsequent search 
show interesting cases break symmetries fully partially polynomial number predicates 
outline rest follows define symmetries search problems discuss predicates added break symmetries 
discuss exact partial methods controlling size symmetry breaking predicate 
discuss experimental results related 
definitions preliminaries purposes assume working clausal propositional logic 
symmetries propositional theory defined permutations variables theory leave theory unchanged 
symmetries form group techniques notation computational group theory 
set propositional variables 
usual literals variables negations variables write negation clause just disjunction literals written xyz theory conjunction clauses 
basic observation critical definitions clauses considered identical iff involve set literals order significant theories identical iff involve set clauses 
truth assignment set variables function ft fg occasion write respectively 
usual way extends semantics propositional logic function set theories abuse notation continue denote extended function truth assignment called model theory set models denoted 
propositional satisfiability problem just see garey johnson instance theory question non empty model 
clearly determine assignment exists trying possible assignments 
unfortunately set size assignments 
known approaches determining propositional satisfiability computationally equivalent asymptotically worst case complete search 
propositional satisfiability simplest canonical examples search problem 
formally define symmetries need additional notation 
consider set group permutations denoted sym 
group composition product oe oe sym taken result performing oe 
sym image negation true clause iff true terms clause true theory iff true clauses theory 
recall permutation finite set toone mapping denoted standard write permutation superscript natural equality oe oe 
permutation set variables naturally extends permutation negated variables permutation set clauses permutation theories fc im fc im theory sym 
say symmetry automorphism iff set symmetries subgroup sym denoted aut 
example consider theory ac bc notice interchange theory unchanged order clauses order literals clauses affected 
customary denote particular symmetry 
permutations variables general symmetries particular viewed acting assignments theories 
sym acts set truth assignments mapping 
theory 
immediate consequence symmetry maps models models non models non models proposition theory aut truth assignment iff 
generally aut induces equivalence relation set truth assignments equivalent aut equivalence classes precisely orbits aut set assignments 
note equivalence class contains models contains models indicates symmetries reduce search determine model visiting equivalence class visiting truth assignment 
symmetry breaking predicates symmetry breaking predicates chosen true exactly element equivalence classes assignments generated symmetry equivalence 
example small natural write left action oe oe expressing image lead awkward relation oe oe example theory discussed section models 
theory nontrivial symmetry interchange required proposition applying perturbation model yields model 
break symmetry adding axiom eliminates models leaving model equivalence class 
general introduce ordering set variables construct lexicographic order set assignments 
add predicates true smallest model ordering equivalence class 
intuitively viewing model binary number seen 
add predicates saying map smaller model symmetries 
sym acts sequence variables vm 
sequence vm convenient denote initial segment course empty sequence 
write shorthand clause wm sequences variables abbreviate predicate gamma gamma write shorthand delta delta delta intuition definition assignment predicate true iff vm viewed binary number equal wm 
henceforth fix ordering vm variables set truth assignments note surely way create symmetry breaking predicates 
break symmetries adding predicate true member equivalence class 
inherit lexicographic ordering 
words viewed binary numbers 
consider symmetry theory predicate rules model immediate proposition theory ordering variables 
predicate aut true lexicographically model equivalence class truth assignments 
symmetry breaking predicate returning example tracking take 
recall swaps 

non term rules model 
model ruled maps lexicographically smaller model 
addition auxiliary variables predicates represented linear number clauses 
introducing new variable defined true exactly done adding clauses aut may exponential size entire symmetry breaking predicate theorem may quite large 
general negative result theorem problem computing theory predicate true lexicographic leader equivalence class models np hard 
proof theorem technical appendix 
proof includes showing npcompleteness question incidence matrix graph gamma reorder vertices edges gamma produce incidence matrix exceeds lexicographically 
despite negative worst case result possible generate exactly approximately symmetry breaking predicates interesting problems 
sections focus exact methods show cases aut exponential may possible generate tractable symmetry breaking predicates 
section turn approximate symmetry breaking 
symmetry tree problems queens relatively small number symmetries done simply computes symmetries calculates predicate symmetry 
interesting problems symmetries computing predicates symmetry yields unnecessary duplication 
example oe aut agree variables oe 
order attack problems large number symmetries organize symmetries symmetry tree show tree pruned 
describe symmetry tree pruning methods need notation permutations 
theory vm fixed ordering describe permutation variables listing image permutation 
example permutation written 
notation extended partial permutations maps initial segments partial permutation written 
note initial segment empty giving rise partial permutation 
purposes formal development follow useful describe partial permutations standard group theoretic construction 
aut 
set permutations move variables 
ig 
delta delta delta gn identity subgroup 
denote set right cosets right coset set form note disjoint union 
purposes think right coset partial permutation 
partial permutation length associated 
note tuple independent choice describe structure symmetry tree sb root sb considered level set comprises nodes level furthermore parent iff equivalently terms partial permutations root node gamma child gamma image symmetry mapping gamma gamma 
illustrate construction recall example discussed section 
assume symmetries theory identity operation exchange takes second takes children root node 
mapped forced map node child 
similarly node child 
final symmetry tree shown 
symmetry trees simple example 
duplication previously observed predicate proposition arose precisely oe oe belong right coset mind define 
notation superfluous determined possible case 
associate predicate corresponding node sb 
clear conjunction predicates assigned nodes sb remains symmetry breaking predicate pruning symmetry tree working symmetry tree generate symmetry breaking predicates eliminates certain amount duplication 
cases symmetry tree exponential size 
example theory admits 
permutations fx zg 
typically expect see 
permutations variables appearing practical problems unusual see theories exponentially large symmetry groups 
furthermore surely want take advantage symmetry breaking opportunities afforded group 
section show pruning rules achieve drastic reduction size symmetry tree important cases breaking symmetries 
see done consider symmetry tree shown 
suppose aut includes permutation exchanging nodes symmetry form subtree rooted tree diagram pruned 
symmetry trees pruning example 
see consider node composing symmetry creating branch find corresponding node example difficult show 
prune loss inferential power 
example generalized follows 
consider right coset take constructions follow independent choice 
smallest equivalence relation endpoints sequence possible exception endpoints terms observe sequences equivalence class singleton 
definition see child sb antecedent forces observation show theorem suppose aut stabilizes equivalence classes 
ae descendents level node sb may pruned 
proof indicated 
show conjunction predicates oe gamma gamma oe oe gamma gamma imply oe implies oe implies equality variables equivalence classes stabilizes classes implies conjunction oe oe imply oe required 
applying condition globally need sure 
safe prune instances case proper refinement theorem implies 
case prune provided oe induced lexicographic ordering easily seen interpretation cosets 
technical extensions theorem possible formulation particularly useful suitable standard tools computational group theory 
computation employs set stabilizer techniques closely related graph isomorphism methods 
particular methods luks guaranteed exhibit suitable elements exist polynomial time various conditions including boundedness equivalence classes turns practical computation rarely difficult problem anyway generally considered efficient implementations cases corresponding butler case pruning particularly effective symmetry group theory full symmetric group permutation symmetry theory 
case symmetry tree size pruning nodes remain 
see happens note perturbation symmetry aut stabilizes equivalence classes node delete descendents long deleted node 
prunes tree generated entire pruned tree symmetry breaking predicate generated time 
resultant predicate minimal 
turns vm predicate generates consists clause obvious polynomial time simplifications reduce linear number clauses clear useful simplifications general case 

extreme cases constructed pruning effective 
cases symmetry tree polynomial size 
existence cases consequence assuming np theorem fact theorem suggests strongly theories tractable lex leader predicate lex leader verification np hard 
directly construct theories symmetry tree pruned polynomial size lex leader problem polynomial time algorithm uses string canonization procedure babai luks applicable group turns abelian 
existence polynomial time algorithm turn guarantees find symmetry breaking predicate polynomial time sb useless purpose 
details appear 
approximation symmetry tree exponential size pruning possible natural approach generate just part tree smaller tree generate partial symmetry breaking predicates 
call predicate partial symmetry breaking predicate theory models consist member symmetry equivalence classes truth assignments variables add changing soundness completeness subsequent search 
trade search engine may visit multiple nodes equivalent symmetry essence approximating symmetry breaking predicate trades time spent generating symmetry breaking predicates time search engine 
section discuss various approaches generating partial symmetry breaking predicates 
experimental results implemented prototype system takes propositional theory clausal form constructs approximate symmetry breaking formula 
implementation consists steps 
input theory converted graph automorphisms graph exactly symmetries theory 
done construction crawford colors vertices graph vertices representing positive literals representing negative literals representing clauses 
graph automorphisms constrained map nodes nodes color 
add edges literal clause appears 
edges node colorings guarantee automorphisms graph symmetries theory 

find generators automorphism group graph mckay graph isomorphism package nauty mckay nauty fast practice known efficiency special case binary clauses representing link directly creating node binary clause linking 
important instances consider huge number binary clauses algorithms follow quadratic worse number nodes 
examples infinite classes graphs drive nauty provably exponential behavior miyazaki 
generators automorphism group construct symmetry tree generate symmetry breaking predicate 
expected cases computing entire predicate computationally infeasible 
approximations compute partial symmetry breaking predicates ffl generating predicates just generators returned nauty ffl building symmetry tree small depth generating predicates smaller tree ffl generating random group elements writing predicates elements 
alternative implemented pruning rules section obviously cases 
experiments generally compare run time testing satisfiability input theory conjoined symmetry breaking predicate 
cases sat checking done tableau algorithm crawford auton run times user time 
code written experiment pigeonhole problem pigeonhole problem php gamma place pigeons gamma holes pigeon assigned hole hole holds pigeon 
problem obviously unsatisfiable 
study problem provably exponentially hard resolution method tractable symmetries 
typical encoding problem variables fp ij gamma ij taken mean pigeon hole php gamma ij ik gamma ij ij pigeons interchangeable holes interchangeable automorphism group php gamma direct product symmetric groups 
order group gamma 
prohibits full symmetry tree 
furthermore demonstrate appendix see final pruning section help case 
experiments generate predicates associated generators automorphism group specifically set generators returned nauty 
php generators determined polynomial time serve break symmetries 
course general predicates associated generators aut suffice break symmetries 
run times various sizes shown 
run times sparc difficult tell run time data scaling turns show analytically step implementation polynomial time 
input theory represented graph gamma vertices nauty takes graph input finds generators automorphism group 
nauty builds search tree node coloring vertices suitable refinement coloring parent node 
time nauty spends node polynomial size input graph 
show nauty runs polynomial time suffices show number nodes polynomial 
proof requires discussion details internals nauty scope show problem nauty expands exactly gamma gamma nodes 
computing predicates generators obviously polynomial time 
step sat checking general exponential theories augmented symmetry breaking predicates need run tableau proof unsatisfiability obtained polynomial time simplification procedure front tableau 
example queens queens problem studied csp literature include prototypical example problem small number geometric symmetries 
problem place queens chess board queen attach 
queens symmetries size board full symmetry tree leaves 
see construction section theory clauses clauses binary clauses edges graph nodes refining vertex coloring vertex coloring vertex color color number pigeons symmetry symmetry run times pigeon hole problem symmetry 
note axis log scaled 
nodes depth symmetry tree generate clauses length linear turns long clauses little satisfiability checker tableau experiments cut symmetry tree depth generate predicates depth 
results shown 
run times sparc 
symmetry symmetry run times queens symmetry 
note axis log scaled 
know queens somewhat delicate problem reordering clauses input drastically change behavior sat checkers especially increased 
took theory symmetry breaking predicates randomly perturbed order clauses variables clauses times 
ran tableau permuted theory 
shows average run times 
seen qualitative nature results changed fair amount noise removed 
symmetry symmetry average run times random permutations symmetry 
note axis log scaled 
related freuder discusses elimination interchangeable values constraint satisfaction problems 
brown discuss algorithm backtracking search presence symmetry 
approach search engine modified node search tree test done determine node lex symmetries theory 
krishnamurthy discusses idea symmetries reduce lengths resolution proofs 
uses rule symmetry asserts symmetry theory th show follows th follows th proof repeated step replaced 
tour show krishnamurthy method np complete general restriction equivalent graph isomorphism 
restricted method appears discussed crawford craw obviously perturbations symmetries theory 
idea average cases sat checker gets lucky model immediately 
queens data perturbations 
ford tour proof graph isomorphism uses essentially construction crawford 
discuss techniques making symmetries specially designed search engines 
successful uses symmetry reducing search spaces surely large growing literature application automorphism groups combinatorial problems see butler lam lam thiel lam 
impressive contributions discovery classification designs study combinatorial optimization problems 
shown symmetries utilized add additional constraints symmetry breaking predicates search problems 
constraints ensure search engine visits points search space equivalent symmetry problem 
complexity results suggest generating symmetry breaking predicates intractable general case 
partial symmetry breaking done polynomial time assuming associated graph isomorphism problem tractable 
preliminary experiments completed showing partial symmetry breaking effective prototypical constraint satisfaction problems 
continues realistic applications applying techniques propositional encodings planning problems joslin roy appendix theorem direct consequence npcompleteness problem 
maximum model class mmc input theory ordering 
question exist aut shall demonstrate completeness reduction clique garey johnson intermediate problem interesting right 
lexicographic ordering consider theta matrices mn tuples rows succession 
problem 
maximum incidence matrix 
mim input incidence matrix graph gamma 
question incidence matrix gamma respect lexicographic ordering 
recall jv incidence matrix gamma determined specified orderings ij ith vertex lies jth edge 
matrices related permutations rows columns 
particular np completeness mim establishes np completeness problem existence matrix obtained matrix permuting rows columns lemma mim np complete 
proof mim np suitable orderings guessed verified 
completeness reduce clique mim 
suppose instance gamma clique gamma graph positive integer relevant question gamma contains clique complete subgraph vertices 
may assume jv 
augment gamma graph gamma follows 
fix ordering jv additional vertices comprise sets disjoint 
describe new edges 
complete graph vertices fw wk ordered indicated subscripts 

join vertex new set size jv jv ordered precedes joined done joining jv elements jv gamma elements jv gamma 
set joined provides new common neighbor pair vertices ensures degree maximal gamma 
jv create new vertex ij add edges joining join vertices new set chosen bring total degree precisely gamma jv jv degree 
ij jv jg order ij precedes precedes ij precedes ij vertices resulting graph gamma ordered sequence orders segments indicated 
construction gamma clique observe gamma second clique iff gamma clique vertices degree 
instance mim take lexicographically greatest incidence matrix gamma respect indicated ordering vertices 
regard note maximum incidence matrix vertex ordering obtainable polynomial time 
claim maximum incidence matrix gamma ordering suppose maximum matrix 
rows jx correspond vertices directly joined forces rows duplicate counterparts jv rows correspond remaining vertices directly joined suppose rows correspond ordering row exceeded row joined jv elements fact jv elements 
similarly remains ordered 
ordering maximality requires ordered specified irrelevant reorderings 
proving claim 
need show gamma second clique iff gamma incidence matrix suppose gamma clique reorder comprises elements st element common neighbor elements matrix induced new order agrees rows st row exceeds st row begins gamma gamma st row begins gamma gamma 
conversely maximum incidence matrix gamma suppose rows recorded clique consisting entirely vertices maximum degree gamma segment strictly exceeded 
vertices ordering produces form clique 
clique 
trust demonstration discourage finding lex leading incidence matrices approach finding canonical forms graphs graph isomorphism 
lemma mmc np complete 
proof mmc np guess exists verify aut polynomial time 
reduce mim mmc follows 
suppose theta matrix constitutes instance mim 
sets size respectively describe theory set theta variables gamma delta gamma delta trivially tautology 
verifies aut sym theta sym acting theta natural way 
fix orderings xm yn respectively theta ordered lexicographically 
theta matrix yields model gamma ij reversal accommodate conversion maximal matrices minimal models 
natural correspondence row respectively column permutations sym respectively sym 
obtained row permutation column permutation permutation pair yield sym theta sym 
follows directly iff establishing reduction mim mmc 

particular proof npcompleteness mmc chosen show problem remains np complete identified theta aut sym theta sym 
note pigeonhole problem engenders theory exactly type 
fact jx jy gamma php significant routine padding force restriction mim 
demonstrated futility php pruning methods section rely solely information contained aut sb 
supported part arpa rome labs numbers afosr numbers nsf number iri 
benefited various discussions years people including bart selman steve minton miyazaki david etherington david joslin members cirl 
babai kucera babai kucera 
canonical labelling graphs linear average time 
proceedings twentieth ieee conference foundations computer science pages 
babai luks babai eugene luks 
canonical labeling graphs 
proceedings fifteenth annual acm symposium theory computing pages boston massachusetts april 
babai babai 
automorphism groups isomorphism reconstruction 
lov asz graham grotschel editor handbook combinatorics chapter pages 
north holland elsevier 
benhamou benhamou 
theoretical study symmetries propositional calculus applications 
kapur editor automated deduction th international conference automated deduction cade lecture notes artificial intelligence pages 
springer verlag 
brown cynthia brown larry finkelstein paul purdom 
backtrack searching presence symmetry 
mora editor applied algebra algebraic algorithms error correcting codes th international conference pages 
springer verlag 
butler lam butler lam 
general backtrack algorithm isomorphism problem combinatorial objects 
journal symbolic computation 
butler butler 
fundamental algorithms permutation groups 
lecture notes computer science 
springer verlag 
crawford auton james crawford larry auton 
experimental results crossover point random sat 
artificial intelligence 
crawford james crawford 
theoretical analysis reasoning symmetry order logic extended 
workshop notes aaai workshop tractable reasoning pages 
de la tour thierry boy de la tour st ephane 
complexity extending ground resolution symmetry rules 
pro ceedings fourteenth international joint conference artificial intelligence ijcai volume pages 
freuder eugene freuder 
eliminating interchangeable values constraint satisfaction problems 
proceedings ninth national conference artificial intelligence pages 
garey johnson garey johnson 
computers intractability 
freeman new york 
gaschnig john gaschnig 
performance measurement analysis certain search algorithms 
technical report cmu cs carnegie mellon university 
ginsberg matthew ginsberg 
dynamic backtracking 
journal artificial intelligence research 
joslin roy david joslin roy 
exploiting symmetry plan generation 
unpublished manuscript 
krishnamurthy krishnamurthy 
short proofs tricky formulas 
acta informatica 
lam thiel lam thiel 
backtrack search isomorph rejection consistency check 
journal symbolic computation 
lam lam 
applications group theory combinatorial searches 
finkelstein kantor editors groups computation workshop groups computation volume dimacs series discrete mathematics theoretical computer science pages 

construction groups constructive approach group actions 
editor symmetry structural properties condensed matter proceedings third international school theoretical physics pages 
world scientific singapore new jersey london hong kong 
luks luks 
isomorphism graphs bounded valence tested polynomial time 
comp 
sys 
sci 
mckay mckay 
nauty user guide version 
technical report tr cs department computer science australian national university canberra 
minton steven minton mark johnston andrew philips philip laird 
solving large scale constraint satisfaction scheduling problems heuristic repair method 
proceedings eighth national conference artificial intelligence pages 
miyazaki miyazaki 
complexity mckay canonical labeling algorithm 
finkelstein kantor editors groups computation ii workshop groups computation volume appear dimacs series discrete mathematics theoretical computer science 
selman bart selman hector levesque david mitchell 
new method solving hard satisfiability problems 
proceedings tenth national conference artificial intelligence pages 
