emacs lisp dynamic scope analysis matthias neubauer institut ur informatik universit freiburg neubauer informatik uni freiburg de michael sperber wilhelm institut ur informatik universit sperber informatik uni tuebingen de possible translate code written emacs lisp lisp dialect uses dynamic scoping modern programming language lexical scoping largely preserving structure readability code 
biggest obstacle idiomatic translation emacs lisp translation dynamic binding suitable instances lexical binding binding constructs real programs fact exhibit identical behavior dynamic lexical binding 
idiomatic translation needs detect binding constructs possible convert lexical binding constructs target language achieve readability ciency target code 
basic prerequisite idiomatic translation dynamic scope analysis associates variable occurrences binding constructs 
analysis 
application nielson nielson framework flow analysis semantics dynamic binding akin moreau 
implementation handles substantial portion emacs lisp applied realistic emacs lisp code highly accurate reasonably cient practice 

migrating emacs lisp emacs lisp popular programming language considerable number desktop applications run emacs editor variants 
actively maintained code base measures loc emacs lisp code base growing language showing age lacks important concepts modern functional programming practice provisions large scale modularity 
implementations slow compared mainstream implementations lisp dialects 
development emacs dialects places package collection includes popular add ons applications currently contains loc 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp september florence italy 
copyright acm 
comparatively little focus significant improvements emacs lisp interpreter 
hand years seen advent large number extension language implementations full programming languages suitable inclusion application software 
specifically current scheme implementations technologically better suited extension language emacs emacs lisp 
fact cial long range plan gnu emacs replace emacs lisp substrate scheme implementation 
part di erent independent ort variant gnu emacs uses emacs lisp extension language 
replacing central part application presents di cult pragmatic problems feasible reimplement entire emacs lisp code base hand 
successful migration requires ingredients emacs lisp code continue run unchanged transitory period 
automatic tool translates emacs lisp code language new substrate produce maintainable code 
ingredients particularly hard implement keeping old emacs lisp implementation re implementing emacs lisp engine new substrate second di cult 
direct translation emacs lisp modern typed functional language straightforward dynamic assignment dynamic environment passing implement dynamic scoping result maintainable output code users modern functional languages dynamic binding limited contexts exception handling parameterization 
turns situation di erent emacs lisp users lets binding constructs real emacs lisp code dynamic scope lexical scope identical consequently idiomatic translation emacs lisp say scheme convert binding constructs corresponding lexical binding constructs target substrate 
problem recognize binding constructs distinguish programmer meant dynamic scope meant lexical scope 
dynamic scope bindings travel program execution values requires proper filename expand file name filename file file name filename dir file name directory filename comp file name completions file dir newest comp setq file concat dir car comp comp cdr comp backup file name file null newest file newer file file newest setq newest file newest typical usage emacs lisp 
flow analysis 
presents analysis called dynamic scope analysis 
specifically contributions formulated semantics subset emacs lisp called mini emacs lisp similar sequential evaluation function moreau 
applied flow analysis framework nielson nielson semantics resulting acceptability relation flow analyses mini emacs lisp programs 
acceptability relation formulate implement flow analysis emacs lisp tracks flow bindings addition flow values 
applied analysis real emacs lisp code 
specifically analysis able handle real world examples high accuracy reasonable ciency 
part el scm project works migration emacs lisp scheme 
aspects translation front issues correct handling symbols code data duality treatment primitives outside lexical scope 
analysis number purposes development cient compiler emacs lisp translation di erent substrate common lisp 
overview 
section presents code examples show need dynamic scope analysis 
section defines syntax mini emacs lisp 
section develops operational semantics evaluation contexts 
semantics section presents specification correct flow analysis 
section sketches correctness proof 
implementation approach described section 
section describes experimental results gained implementation prototype 
discussion related 

examples consider emacs lisp code shown taken literally files el current core 
file name handler alist nil format alist nil insert file functions nil coding system read binary coding system write binary find buffer file type function find buffer file type symbol function find buffer file type nil unwind protect progn find buffer file type lambda filename insert file contents filename visit start replace find buffer file type function find buffer file type find buffer file type function find buffer file type parameterizations dynamic emacs lisp 
contains variable bindings introducing temporary names intermediate values 
bindings variables filename file dir comp newest visible functions reachable body contain occurrences names 
variable occurrences access bindings body lexical scope bindings 
translating lexically scoped counterpart target language preserve behavior function 
shows example idiomatic dynamic binding taken files el part implementation insert file contents literally calls insert file contents body 
definition insert file contents contains occurrences variables bound exception find buffer file type function 
permissible translate lexically scoped binding construct 
vast majority binding constructs real emacs lisp code dynamic scope lexical scope coincide 
ultimate goal analysis detect bindings constructs possible 
general value flow flow bindings interact evaluation emacs lisp programs 
possible apply standard flow analyses lexical binding semantics solve problem new analysis necessary 

syntax mini emacs lisp sake simplicity concentrate subset emacs lisp called mini emacs lisp 
omit multi parameter variable parameter functions catch throw dual name spaces functions ordinary values resulting gratuitous split funcall regular application data code duality appears various contexts emacs lisp 
adding features analysis straightforward re quire significant new insights omit 
implementation analysis treat features 
syntax mini emacs lisp lab 
fritz franz 
lit 
prim cons car 
term quote lambda setq 
en exp def defvar defun prg expressions carry unique labels analysis uses identifying locations program source 
set literals trivially extensible 
note emacs lisp uses nil symbol boolean false true 
emacs lisp program consists sequence definitions followed single expression entry point program 

semantics mini emacs lisp structural operational small step semantics mini emacs lisp 
evaluation contexts syntactic rewriting developed felleisen friedman 
values intermediate terms separate syntactic categories intermediate expressions values 
syntax literals abstractions fun func val prim sym pair bind exp elements val called values results successful computations 
represent primitive values symbols functions correspond expressions exp produce 
semantics uses intermediate bind terms handle dynamic binding result reducing expressions value bound variable evaluated 
expressions attach labels values intermediate terms 
value bound variable bind term carry label bind expressions show evaluation analysis looks source code 
environments environments finite mapping symbols values contain bindings env fin val 
notation empty environment 
modification existing environment new mapping symbol value written 
evaluation contexts evaluation contexts mini emacs lisp bind setq vx vx vx bind vx setq vx vx rules describes contexts reduction step mini emacs lisp occur 
variable access needs dynamic binding variable 
variable contexts help accomplish describe contexts contain bindings associated symbol reductions evaluation state consists partially evaluated expression global environment 
configuration conf tuple consisting environment current expression conf env exp primitive steps evaluation process reduction rules 
expressions immediately reduce value prim quote quote sym lambda lambda func note emacs lisp abstractions evaluate closures dynamic scope 
semantic mechanics dealing variable access var bind vx bind vx vx vx dom variable may local global binding 
lambda constructs introduce local bindings 
variable occurrence closest bind context variable holds value 
var rule expresses behavior context vx guarantees binding closer variable 
lacking local binding global apply rule takes 
machinery mutating bindings setq analogous referencing variables setq bind vx setq bind vx vx setq vx case local binding setq rule changes value corresponding bind context 
assignments global variables mutate global environment 
reductions function applications local variable bindings app func bind bind bind app rule reduces function application binding function parameter wrapped function body environment 
rule turns expression corresponding bind expression 
evaluation continues body value 
bind rule removes obsolete context 
note distinction expressions bind expressions unnecessary considering semantics formulation flow analysis requires separation 
rules handle conditionals sym nil sym nil reduction rules selected primitives dealing pairs cons cons pair car car pair cdr cdr pair cons rule produces pair value argument values 
car selects component pairs rule car cdr rule handles cdr 
combination reduction rules defines reduction relation conf conf putting possible configurations reduction step evaluation relation 
reflexive transitive closure written expression contexts far meaning expression defined relation 
programs define kind context expression contexts defvar reductions programs equipped notion program configurations env prg contexts programs reduction relation expressions possible state rewriting rules programs defvar defvar dom defun defun func dom exp defvar defun rules satisfy top level definitions 
defvar rule inserts new global binding variable environment 
condition dom guarantees global variable name 
defun rule equivalent procedures 
exp rule allows reductions expressions places defined contexts 
reflexive transitive closure evaluation function programs reduction relation rewrites program gets final answer 
happen program may loop case reduction sequence infinite evaluation may get stuck configuration matching reduction rule 
reduction relation induces partial evaluation function eval eval prg eval undefined 
specification analysis section specifies flow analysis mini emacs lisp 
help definitions domains analysis define acceptability relation correct flow analyses employ domains 
actual analysis results directly definition acceptability relation 
domains domains analysis bp bp lab bpe bp cons lab lab val fun cons env bp val cache lab val bp short denote syntactic locations variable bindings 
stands top level bindings 
label body function expression serves birthplace binding creates 
birthplace environments abstractions regular variable environments map variables regular values 
cons part value domain set possible pairs contains triples labels birthplace environment 
labels labels argument subexpressions cons expression created pair 
birthplace environment registers bindings active time creation pair 
registering birthplace environment necessary di erentiate program points depending birthplace environments occur 
val set possible values value represents set run time values 
run time value relevant analysis single symbol represents primitive values symbols 
analysis tracks symbols needed eventually variable names functions primitive values pairs 
cache cache profile values occur program run 
tracks values program subexpressions di erentiated birthplace environment 
environment env union environments occur evaluation program 
associates variable name value 
acceptability programs define acceptability relation programs cache env prg 
relation defines validity analyses regard program current birthplace environment bpe notation bpe value expressions bpe bpe quote bpe quote bpe lam bpe lambda func bpe quote lam clauses register counterpart cache program point current birthplace environment bpe 
note lam require analysis valid body lambda term acceptable analysis treat reachable functions correctly 
expressions occurrences variable mutations induce validity constraints 
var rule variable enforces value variable current birthplace bpe held environment subset value linked label birthplace environment cache var bpe bpe bpe setq clause enforces analysis righthand side valid 
valid analysis allows values result subexpression possible values variable current bindings bpe expression setq bpe setq bpe bpe bpe bpe bpe app clause specifies constraints procedure calls 
second condition bpe bpe guarantee analysis valid birthplace environment operator operand app bpe bpe bpe func bpe 
bpe bpe bpe bpe bpe bpe function func occur operator position procedure call bpe valid analysis body expanded birthplace environment bpe contains binding function parameter analysis link values argument formal parameter possible results body expression 
clause works analogously function application bpe bpe bpe bpe bpe bpe bpe bpe clause branch contributes valid analysis bpe bpe bpe bpe bpe bpe bpe bpe primitives primitive associated flow behavior 
pair construction selection serve examples 
cons rule pair constructor straightforward cons produces pair values labels arguments original birthplace environment cons bpe cons bpe bpe bpe bpe car cdr clauses straightforward induce validity constraints argument simply pick second component respectively pairs flowing car bpe car bpe bpe bpe 
bpe bpe cdr bpe cdr bpe bpe bpe 
bpe bpe definitions defvar defun clauses extend notion valid scope analyses entire programs 
defvar clause handles variable definitions defvar bpe defvar bpe bpe bpe bpe valid analysis reflect value initially bound variable 
associate variable values current binding bpe 
valid analysis take account rest program 
defun clause registers procedure environment 
defvar clause rest program valid 
defun bpe defun func bpe values far definition relation possible expressions programs checks certain analysis program valid 
goal show valid analyses agree semantics semantically correct 
reduction rules generate intermediate terms covered rules far 
const bpe prim bpe sym bpe sym bpe proc bpe func func bpe const sym proc clauses identical equivalents quote lam semantics identical 
pair clause simpler version cons clause 
di erence pair carries values unknown prior birthplace environment evaluation took place 
requirement suitable birthplace environment bpe exists pair bpe pair bpe bpe bpe bpe bpe intermediate expressions final clause definition acceptability handles intermediate bind expressions 
bind expression binds variable value evaluation body bind bpe bind bpe bpe bpe bpe bpe bind rule requires valid analysis body suitably extended birthplace environment bpe value body value bind expression 
supplementary constraint reflects actual new binding show variable environment relevant birthplace relation explained section 
approximation relation intuitively relation determines dynamic scope analysis correctly reflects evaluation process program sense 
formulation uses approximation relation regulates approximation values val equivalents 
formal definition val val cache 
pair bpe 
bpe bpe bpe holds value correct representation set values cache 
straightforward treatment pairs representation pair consists components creation points birthplace environment 
representation map values components 
value cache participates definition definedness immediately clear acceptability relation subsection unambiguous 
structural induction su cient app clause compositional 
hand specifications considered functional cache env exp cache env exp bpe bpe bpe bpe bpe bpe bpe 

change perspective leads specification sound mathematical means 
monotone function complete lattice cache env exp 
cache env exp complete lattice respect partial order monotone function complete lattice 
consequently greatest fixed point 
welldefined definition works coinduction gfp 
acceptability environments dynamic scope analysis ultimately concerned scope environments necessary extend notion acceptability environments cache env env bpe dom bpe acceptability relation environments examines binding actual environment occurs evaluation relates counterpart correctness 
acceptability configurations combination acceptability relation programs environments produces acceptability relation configurations combinations environments expressions cache env conf bpe bpe bpe furthermore possible define acceptability relation program configurations combinations programs environments cache env bpe bpe bpe 
semantic correctness semantics developed section employs evaluation contexts rewriting rules 
specification semantics uses exclusively syntactical means exception notion environments program transitions sequence configurations include valid programs expressions reaches final value gets stuck loops forever 
definition acceptability relation previous section derived intuitively 
correctness proof necessary show valid analysis stays valid evaluation process 
section summarizes import lemmas theorems involved proof 
details reader referred neubauer thesis dissertation 
lemma states dynamic scope analysis valid value value part cache label bpe lemma bpe bpe proof 
structural induction lemma states obvious assumption value correct approximation true value correct approximation value includes lemma 
proof 
structural induction case proof obtained individually inspecting definition specification acceptability relation important property stated lemma analysis valid term label values flowing contained values flowing label analysis valid label lemma bpe bpe bpe bpe proof 
case analysis rules term 
example case setq expressions premise bpe setq follows bpe bpe bpe bpe bpe setq clause 
assumption yields bpe bpe 
backwards application setq clause yields proposition 
cases analogously 
central insight validity dynamic scope analysis expression carries subexpressions evaluation context 
stronger subexpression replaced valid violating validity 
result proof correctness reduction step concentrate possible redexes expressions lemma allows generalize result big picture 
facility known replacement lemma realm combinatory logic lemma bpe carrying label exists bpe bpe holds 
bpe bpe 
bpe bpe 
proof 
structural induction main theorem subject reduction expressions reduction relation 
valid dynamic scope analysis expression correct approximation environment stay valid step resulting expression modified environment theorem bpe bpe proof 
case analysis reduction relation 
second theorem formulates subject reduction entire programs adapting previous theorem reduction relation theorem bpe bpe proof 
case analysis 
implementation definition acceptability relation section blueprint practical implementation dynamic scope analysis 
analysis constraintbased uses set syntactic entities represent applications rules generated acceptability relation 
analysis just constraint program analysis consists phases constraint generation constraint simplification 
consider fixed program describe compute dynamic flow analysis acceptable respect acceptability relation 
program finite possible enumerate occurring labels symbol functions 
call finite sets lab fun respectively 
similarly sets possibly occurring birthplace environments possibly occurring pairs cons identifiable finite 
accordingly finite set values conceivable possible program runs abs fun cons finite sets serve basis specification dynamic scope analysis program generating constraints constraints generated analysis flow variables stand sets values 
flow variable bpe stands set values cache label birthplace environment bpe flow variable stands set values environment 
constraint analysis belongs di erent kinds 
simple constraint form value abs states certain value member set values variable constraint says values contained conditional constraint value abs constraint states constraint hold value member set values denoted inspecting rules acceptability relation define function bpe constructs set constraints solved shown 
parameter program expression constraints generated 
second bpe birthplace environment relative generation constraints takes place 
third parameter set pairs label body procedure birthplace environment bpe 
set instances pairs procedures birthplace environments handled constraint generation 
analysis uses prevent generating duplicate constraints 
bpe bpe gj quote bpe bpe gj lambda bpe func bpe bpe bpe bpe gj setq bpe gjt bpe bpe bpe bpe bpe gj bpe gjt bpe gjt bpe func bpe func fun bpe bpe bpe bpe gjt bpe func bpe bpe func fun func bpe bpe bpe func fun gj bpe gjt bpe gjt bpe bpe bpe bpe gj bpe gjt bpe gjt bpe bpe bpe gjt bpe bpe bpe gj cons bpe gjt bpe gjt bpe bpe bpe gj car bpe gjt bpe bpe bpe bpe bpe bpe cons gj cdr bpe gjt bpe bpe bpe bpe bpe bpe cons gj defvar bpe gjt bpe bpe bpe bpe gj defun pk bpe func bpe generating constraints 
constraint generation rules straightforward translations corresponding rules acceptability relation 
involved case treatment procedure applications 
addition generation constraints terms operator position parameter position procedure flowing operator triggers generation constraints body current birthplace environment conditional constraint 
treatment primitives car cdr works similar way know pairs occur operator position 
generates conditional constraints pairs 
definedness termination algorithm follow simple fix point arguments underlying finite complete lattice 
bpe specified generates large number conditional constraints application car cdr rules triggered phase 
implementation defers generation right hand sides constraint solving 
possible specify analysis way mean having mix constraint generation constraint solving phase obscure presentation 
solving constraints generated set constraints express behavior valid dynamic scope analyses 
get dynamic scope analysis close generated constraints inference rules write denote closure set constraints actual dynamic scope analysis results solving phase values associated variable generating initial constraints closing constraints dsa bpe bpe denotes top level birthplace environment 
implementation employ standard technique graph representation constraint set apply worklist algorithm graph compute package lines prims bps dynamic iters analysis bps time sec mail utils el rfc el add log el pop el footnote el analyzed emacs lisp packages size lines code macro expansion number additionally primitives number number recognized dynamic binding number iterations worklist algorithm analysis time 
solution original constraints 
worklist algorithm terminates 
program induces finite set values abs finite number potential nodes finite number program points variables birthplace environments 
analysis propagates finite number data objects finite number nodes 
process ends finite number steps latest datum arrived node 
algorithm exponential worst case complexity respect size analyzed program number possible birthplace environments exponential 
section shows prototype implementation practical medium sized realworld examples 
translation emacs lisp programs new substrate ideally happens speed quite important say compilers run 
precision premium 

meeting real world prototype implementation algorithm lines scheme code runs atop scheme byte code implementation scheme 
handles large subset emacs lisp programs 
specifically correctly deals number aspects language treated including multi parameter functions optional arguments catch throw funcall duality functions names separation function value components bindings 
section results analysis run various packages taken directly package collection 
receive accurate information real packages implementation know flow behavior substantial number primitives 
implementation contains small macro language describe flow behavior basic primitives implementation emacs lisp exists 
macros simplifies description primitives tremendously 
instance lines primitive flow filename const union symbol symbol nil describes constraint generation built primitive file exists checks existence file name 
currently system emits annotated version input program marking bindings stay dynamic lexical binding 
binding type condition decide type variable belongs binding type condition variable dynamically cache registers object variable label di erent birthplace static static birthplace dynamic bpe bpe bpe 
conditions exist implementation recognize emacs lisp lets flavor statically scoped letrec scheme 
results section obtained running implementation scheme system scheme athlon ghz system kbyte second level cache mbyte physical memory 
put ort highly optimize compile implementation native code feasibility main concern 
lists packages experimental results 
part regular distribution 
mail utils contains utility functions packages 
rfc implements parser standard internet messages 
pop provides pop functionality email clients 
add log lets programmer manage files changes programs 
footnote ers functionality add footnotes bu ers 
shows analysis highly accurate leaves small number dynamic binding constructs 

limitations analysis described solves hardest problems associated translating emacs lisp programs readable scheme programs remain eval emacs lisp eval function interprets piece data emacs lisp expression 
semantics naturally quite undefined scheme environment 
simple cases example expression evaluated symbol idiomatic translation eval forms 
programmers transform emacs lisp code eval attempting translation 
dynamic generation symbols introspection capabilities language belong category 
bu er local variables emacs lisp features bu er local variables implicitly change value current bu er 
unfortunate conflation language semantics application domain yields unexpected hard track behavior emacs lisp code 
bu er locality usually global property variables programs rarely variable bu er locally bu er globally 
feasible approach translate bu er local variables special designated data structures access special constructs preserving implicit nature 
special analysis required long calls local close variable declarations 
note kinds problems inherent translation programming language maintainability preserved 

related dynamic binding despite fact languages dynamic variable binding existed long time formulations semantics languages quite rare 
hand folklore dynamic binding eliminated dynamic environment passing translation dynamic bindings explicit 
gordon initially formalized dynamic binding context early lisp dialects studied interpreters denotational semantics 
moreau rounded view dynamic binding introducing syntactic theory dynamic binding calculus allowing equational reasoning 
theory derived small step semantics evaluation contexts syntactic rewriting developed felleisen friedman 
wright felleisen harper stone formulated semantics exception mechanisms employ kind dynamic binding 
lewis introduce language feature called implicit parameters provides dynamically scoped variables languages hindley milner type systems formalize axiomatic semantics 
functions implicit parameters class values setting 
flow analysis realistic implementations flow analysis functional programming languages simple monovariant cfa flow analyses analysis looks program point independent context 
shivers proposed splitting analysis function call sites depending context procedure calls called cfa 
splittings depending procedure calls proposed jagannathan weeks poly cfa wright jagannathan polymorphic splitting 
concept coinduction arose milner tofte works semantics type systems extended calculus 
nielson nielson coinduction means specifying static analysis 
provides theoretical framework specification analysis 
subject reduction notion correctness generally called subject reduction result 
curry feys introduced subject reduction show correctness predicates languages combinatory logic 
mitchell plotkin idea show type correctness result calculus language wright felleisen adapted flexible concept operational semantics reduction rules evaluation contexts 
wright jagannathan technique polymorphic splitting flow analysis 
emacs lisp scheme number projects built currently building scheme variants emacs 
oldest matt emacs lisp interpreter allows running emacs lisp programs top mit scheme edwin editor 
current orts include ken creating emacs emacs project aims reimplementing emacs atop java bytecodes leveraging kawa compiler scheme 
far emacs lisp concerned seen significant far making emacs lisp programs run 
projects address permanently translating emacs lisp code scheme retaining maintainability 

specified proved correct implemented flow analysis emacs lisp distinguishing feature correct handling dynamic binding 
primary purpose analysis aid translation emacs lisp programs modern language substrates lexical scoping binding real emacs lisp programs behaves identically lexical dynamic scoping 
analysis highly accurate practice 
prototype implementation reasonably cient 
main directions research improving ciency analysis ordinary optimization compilation code modularization constraints integration analysis translation suite emacs lisp scheme 
acknowledgments 
initial members el scm project martin johannes peter biber 
specifically peter biber developed precursor analysis demonstrating feasibility project 
peter thiemann provided valuable suggestions 
icfp referees valuable comments 

aiken 
set constraints results applications directions 
lecture notes computer science 
aiken wimmers 
type inclusion constraints type inference 
proceedings fpca pages 

java scheme emacs 
proceedings freenix track usenix annual technical conference freenix pages berkeley ca june 
usenix ass 

java scheme emacs text editor 
sourceforge net feb 
curry feys 
combinatory logic volume north holland amsterdam 
felleisen friedman 
control operators secd machine calculus 
wirsing editor formal description programming concepts iii pages 
north holland 
flanagan felleisen 
set analysis full scheme soft typing 
technical report tr rice university oct 
flanagan felleisen 
componential set analysis 
acm transactions programming languages systems mar 
gordon 
programming language theory implementation 
prentice hall 
emacs 
sourceforge net july 
harper stone 
interpretation standard ml type theory 
technical report cmu cs carnegie mellon university pittsburgh pa june 
published fox memorandum cmu cs fox 
heintze 
set analysis ml programs 
acm conference lisp functional programming pages 
hindley seldin 
combinators lambda calculus volume london mathematical society student texts 
cambridge university press 
jagannathan weeks 
unified treatment flow analysis higher order languages 
popl 
kelsey rees 
tractable scheme implementation 
lisp symbolic computation 
lewis stallman gnu manual group 
gnu emacs lisp manual 
www gnu org manual manual html 
lewis shields meijer launchbury 
implicit parameters dynamic scoping static types 
proceedings th annual acm sigplan sigact symposium principles programming languages boston massachusetts pages jan 
milner tofte 
induction relational semantics 
theoretical computer science 
mitchell plotkin 
types type 
acm languages systems volume pages july 
moreau 
syntactic theory dynamic binding 
higher order symbolic computation dec 
neubauer 
dynamic scope analysis emacs lisp 
master thesis universit dec 
www informatik uni freiburg 
de neubauer ps gz 
nielson nielson 
infinitary control flow analysis collecting semantics closure analysis 
proc 
popl pages 
acm press 
plotkin 
structural approach operational semantics 
technical report daimi fn computer science department aarhus university aarhus denmark sept 
queinnec 
lisp small pieces 
cambridge university press 

emacs 
www mit edu july 
serrano feeley 
storage analysis applications 
proceedings fst international conference functional programming page june 
shivers 
control flow analysis higher order languages 
phd thesis carnegie mellon university may 
stallman 
gnu extension language plans 
usenet article oct 
wing 
lisp manual 
ftp ftp org pub docs pdf gz may 
version 
wright felleisen 
syntactic approach type soundness 
technical report rice university apr 
final version information computation 
wright felleisen 
syntactic approach type soundness 
information computation 
preliminary version rice tr 
wright jagannathan 
polymorphic splitting ective polyvariant flow analysis 
acm transactions programming languages systems jan 
