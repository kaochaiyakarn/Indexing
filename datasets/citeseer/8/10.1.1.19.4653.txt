verification embedded software problems perspectives patrick cousot radhia cousot cole normale informatique rue ulm paris cedex france patrick cousot ens fr www di ens fr cousot laboratoire informatique cnrs cole polytechnique palaiseau cedex france lix polytechnique fr lix polytechnique fr 
computer aided formal methods successful verification enhanced debugging hardware 
cost correction hardware bug huge justify high investments alternatives testing correctness verification 
case software bugs quite common situation easily handled online updates 
area embedded software errors hardly tolerable 
embedded software safety critical software failure create safety hazard equipment put human life danger 
embedded software verification research area growing importance 
day software verification technology certainly useful limited cope formidable challenge complete software verification 
highlight problems solved envision possible interpretation static analysis solutions 
origin computer science software general embedded soft ware particular expands continuously consume available processor cycles memory 
exponential complexity growth vlsi decreasing constant costs accompanied delay months years corresponding proportional growth software 
operating system running large number applications crashes day computers hours crash minutes decade probably supported part rtd project ist european ist fp programme 
patrick cousot radhia cousot software hardware faults 
software bug rate preserved slightly decreased size software multiplied factor computer system expected crash minutes 
embedded software presently simpler operating systems complexity growing rapidly area 
similar failure rates leads software crashes hours hardly acceptable safety crit ical systems fault tolerant ones 
follows verification techniques formal informal scale similar proportions higher rate software verification cost known linear software size 
highlight problems solved envision possible interpretation static analysis solutions 
formal methods formal methods theorem proving deductive methods model checking program static analysis interpretation success stories 
embedded software meteor line metro paris formally designed method 
lines specification written compiles lines ada program 
correctness proof interactive theorem proving required handle manually proof obligations 
purpose rules added prover proved correct automatically 
metro running error claimed embedded software specification 
errors interfaces specification satisfied central control software developped potentially subject errors 
may wonder successful experience theorem proving formal methods standard design safety critical embedded software 
circulating figures person years human cost software development process 
ariane flight failure due inertial system send ing incorrect data software exception 
overflow exception caused unprotected data conversion large bit floating point bit signed integer value 
conversions protected maximum workload target set inertial sys tem computer 
ironically exception lifted part software serves purpose ariane launcher lifts previously re quired ariane 
erroneous reasoning physical limitations large margins safety lead decision leave variables unprotected 
unfortunately overflow caused unexpected high value early part trajectory ariane di ers ariane re sults considerably higher horizontal velocity values 
exception caused inertial system processor shut proved fatal 
origin error caught interpretation verification embedded software problems perspectives static analysis program 
unfortunately automatic static analysis relies approximation software errors caught statically way 
exists approximation prove specification computer system semantics model discovering abstraction logically equivalent formal correctness proof 
manually design abstraction hidden form model consider general purpose reusable abstractions proof peculiar functional specification 
formal methods certainly model checking 
famous design fault pentium processor hardware design companies model checkers 
day hard ware model checkers verify circuit designs hundreds registers abstraction surrounding environment 
model checking proceeds exhaustive enumeration state space subject state space explosion checking algorithm may linear size specification formula state space state space size grows exponentially size description model usually form program computer language 
despite various symbolic representation techniques bdds numerous variants try reduction modular decomposition breadth checking sat procedure model checking scale hardware speaking software 
di culties come temporal logic specification human understanding capabilities 
success model checking formal verification refined functional specifications subjects errors design model specification finding bugs informal methods testing simulation 
partial model checking techniques explore part state space testing simulation follow exactly principle avoiding exploration see random pruning search space 
debugging done price sound ness considered abusive practical misunderstood 
despite successes debugging simulation run time tests redundant computations detect faulty numerical computations check run time path traversed legal essential computer aided methods embedded software validation verification 
success formal methods mainly hardware design problematic scale software 
challenges embedded software verification software models programming language semantics standard models software called semantics 
formalize program execution mathematical terms 
patrick cousot radhia cousot obviously programming language semantics serve basis analy sis verification software written language 
practice di culties 
informal standards exist see ansi compilers strictly implement specifications 
standards continuously revised 
example change array subscript range object apparently accessible subscript lvalue expression declaration int 
obviously probably erroneous havior programs may completely modified update semantics 
programming environments include large libraries semantics informally specified 
consequently semantics programming language specified compiler ma chine specific libraries hardly understandable 
best case consequence situation program verification tools try conform standards fully conform practice 
formal tools programming specification language semantics ab interpretation semantics obvious advantage providing automatically model program verified 
problem driven abstractions model checking model checking model assumed verification relative model 
model preserve selected characteristics real world ar suppressing away complex real world system program 
abstraction done informally uses ab interpretation existing refined model 
requirement design model enable program verification leads di erent descrip tions real world system program programming language implementation verification language model logic language specification properties model checked 
specification valid implementation model faithful seldom checked interpretation prove model abstraction implementation semantics 
abstraction considered model checking concrete model model requiring fourth level description implementation 
concrete model assumed finite large auto matically checked abstraction concretization functions computable 
context refinement computable case general semantics usual programming languages 
abstraction generally concrete model finite concrete model considered semantics implementation implementation described programs written realistic program ming language 
question model finite infinite 
verification infinite concrete model finite model verification embedded software problems perspectives adequate 
leads idea design model concrete deductive methods prove soundness di culty discovering abstraction logically equivalent discovery inductive argument ant proof abstraction sound logically equivalent inductive proof invariance verification conditions 
wise stated correctness concrete model established checking finite model discovery proof soundness required abstraction logically equivalent direct correctness proof concrete model 
hoped globally simplify proof abstractions partitioning decompose global proof local ones 
unfortunately soundness proof global local abstractions undecidable di cult checking model finite 
di culty choice soundness proof abstraction benefit clear 
abstraction checking process redone modification program 
certainly di culty embedded software evolves slowly long period times years 
fore necessary anticipate model maintained modified program 
standard abstractions program analysis model checkers ini tial abstraction embedded software provided form finite model program 
static program analysis model program verified abstraction provided analyzer proved correct programming language 
user extract verification model program choose prede fined abstractions 
analyzers infinitely programs shown finite abstraction powerful infinite domains widening narrowing turing equivalent programming languages 
broader class general purpose abstractions implemented form libraries needed 
elimination false alarms auto matic choice appropriate domain opened 
widening narrowing duals infinite domains sat chain conditions require widening narrowing techniques order accelerate convergence fixpoint computations ap choose alternatives absence best approximation 
dual notions exist approximations 
widen ing narrowing techniques model checking link known techniques recognized compare widening bdds 
widening narrowing technique dynamic approximation technique fixpoint computation abstraction static fixpoint computation time model semantics designed 
patrick cousot radhia cousot abstractions expressed widenings abstraction required ensure existence cient computer representation properties static analysis initial model model checking :10.1.1.51.537
represent properties terms quite adequate practice powerful widenings semantics geometry fixpoint computation 
widenings thresholds example widening finite domain static analysis limitation reachability certain depth model checking equivalent static abstraction expressive :10.1.1.51.537
dynamic widenings better exploited model checking cope state space explosion problem model explored times di erent levels abstractions determined dynamically widenings 
specifications specification language model checking typically temporal logic fixpoint calculus 
program analysis specification pro vided automatically standard example absence run time errors provided user testing 
cases forward backward greatest fixpoints static analysis checking methods di erent 
design model program abstraction sense interpretation establish comparison specification program dependent language dependent abstraction program dependent model checking language dependent testing static analysis obviously think static checking program dependent model designed check language dependent properties standard abstractions may problem threads eventually enter exit critical sections condition monitors eventually verified condition variables 
control structures flat modelling control structures transition systems initially considered program analysis model checking valid program ming languages prolog remains exception func tional languages 
context finiteness hypothesis data structures ensure finiteness program semantics 
example restriction program variables booleans case possible simulate turing machine pascal enabling finite model verification embedded software problems perspectives checking 
control analysis may require precise data flow analysis trace pointers functions handlers see sec 

simple control structures control abstractions consist isolating control flow skeleton void knowledge data particular veracity tests run time errors rough usable safety properties 
example erroneous reasoning abstraction live variable dataflow analysis liveness property control flow model original program analysis determines potentially live variables dead variables sure 
deductive methods model checking methods proving liveness model ignoring program control flow partially ignoring single test perform abstractions valid safety liveness properties 
upper abstraction models power temporal logics traditional program analysis methods simply ruled 
obviously dual notion abstraction mixed lower approximation models hardly usable prove property time di erent models needed proving di erent liveness properties program alternative approaches discussed sec 

embedded software certainly evolve multithreaded programming requires high level expertise precise analysis tools cope usual control flow problems exceptions race conditions deadlocks priority inversion software numerical properties integer properties abstractions non relational infinite domains designed handle properties integers 
non relational numerical abstraction rapidly followed relational ones 
relational domains scale static analysis provided number values related limited statically abstraction time dynamically widenings 
relational numerical domains widening extensively model checking infinite state spaces handle safety properties exactly classical static analysis techniques 
liveness properties techniques static analysis inference variant functions model checking finite systems fixpoint approxima tion quite di erent see sec 

context infinite state spaces dual widenings known variant functions finite prefix su intermediate ration finite subset execution traces debugging 
needing subject cope liveness properties embed ded software involving integer computations 
patrick cousot radhia cousot floating point properties embedded software involve float ing point computations control trajectory performed fixed precision 
consequence uncontrolled loss precision floating point operations 
transcendental numbers rep resented exactly computer machines finite implementations numbers floating point numbers mathematical real numbers truncated number 
usual algebraic laws associativity instance longer true manipulating floating point numbers 
leads bugs run time errors instance un caught numerical exceptions subtle ones relevance numerical calculations cases com pletely non significant 
just take example reported showing importance loss precision 
th february gulf war anti missile missed turn crashed american killing soldiers 
cial enquiry re port gao attributed fairly simple numerical bug 
internal clock delivers tick tenth second controlled mis 
internal time converted seconds multiplying number ticks bits register 
binary format represented exact manner memory 
produced truncating error decimal internal com puted time drift respect ground systems 
battery operation hours drift seconds 
flies clock error corresponded localization error meters 
proximity sensors supposed trigger explosion anti missile find fell hit ground exploding 
sophisticated semantics history abstractions needed cally analyze origin consequences loss precision numerical programs 
note completely di erent boolean verification circuits floating point unit model checking 
data structures model checking program data structures simply ignored 
analysis message passing transition systems communication protocols take message passing queues operations account content see 
abstraction process interpretation remains quite informal purely syntactic bases adequate liveness properties noted previous sec 

embedded software written ada uses data structures completely ignored verifying correctness 
exam ple encoding control booleans compiling synchronous programs enumerated types 
type casts may taken account 
complex example pointers simplest case pass parameters procedures pointers bu ers queues verification embedded software problems perspectives may yield aliases 
analysis correctness proof aliases account incorrect 
pointer alias analysis attempts determine pointer expressions refer storage location useful detect potential side ects assignment parameter passing see overview 
memory allocated data structures memorize information traced way correctness analysis proof 
necessary study shape data structures absence errors manipulation see 
classical ex ample error bu er overflow attackers operating systems 
precise domains possible check absence overflows low rate false alarms 
standard abstractions data structures remain developped standard libraries 
modularity modularity studied model checking static analysis 
modules designed manually model checking fol low modular structure software program static analysis 
basic methods compositional separate modular static analysis programs ab interpretation known simplification separate analysis equations constraints solved module simply simplified fixpoint computation delayed context module known worst case separate analysis consists considering absolutely information known interfaces module detection potential interactions agents part mo bile system interacting unknown context separate analysis user provided interfaces properties external objects ref program part defined user analysis module rely information module guarantee veracity symbolic relational separate analysis analysis module relates symbolically local information module named external objects relational domain pointer analysis sec 

fifth category essentially obtained iterative composition separate local analyses global analysis methods 
example large software library elementary functions analyzed ciently precise separate possibly parallel analysis basic functions reused lower degree precision program analysis 
timing embedded software particular design model syn chronous languages lustre signal shown satisfy timing constraints typically execution simultaneous instantaneous ac tions take upper bound typically milliseconds 
modelling timing constraints di cult impossible bounds patrick cousot radhia cousot tight characteristics modern computers pipelines cache hierarchies taken account 
numerous extensions model checking handle time timed automata di cult manually design appropriate models required fine grain level 
program analysis timing semantics hardly designed programming language source level automatic concrete com plexity analysis certainly useful insu cient constants factors matter 
practice indispensable consider program semantics assembler level compiler processor hypotheses frequency physical interrupts 
model automatically generated program confident correctness established assembler language level timed model considered processor di cult task 
handle loops upper bound number iterations handle termination 
termination unbounded liveness properties embedded software usually proved terminate operator imperative interaction easily checked property reachability parts software elementary loops basic functions proved ectively terminate 
liveness proof di cult safety proofs 
case finite models fairness hypotheses case model safety property loop go infinitely di erent states liveness property model proved proving stronger safety property model 
infinite models traces generated infinite transition sys tem usually safety properties proofs resort variant functions harder discover invariants abstractions traces sets states 
models considered model checking timed automata restricted serve basis general approach 
results obtained program analysis particular context partial evaluation termination imperative functional logic constraint languages promising 
fairness schedulers considered infinite state distributed programs local network 
distribution mobility evolution critical real time embedded software avionics communica tion defense automotive utilities space medical industry central ized control distributed control ethernet local area network lan 
example modern automotive train transportation computer systems certainly contain soon contain dozen comput ers communicating lan 
radically changes programming models verification embedded software problems perspectives presently particular shared memory message systems 
context reason sets traces uml se quence diagram sequences sets states implicit temporal specifications day set abstractions may inadequate 
experience analysis network protocols certainly useful regularity certainly rule 
embedded software lans certainly fully integrated wide area networks internet decade 
example meet constraints resulting continuous air tra growth air navigation systems certainly replace existing air tra control systems ective tra management relies flight path negotiations ground aircraft reduce pilot controller workload implies network communications communication satellites 
tic network software mobility replace online components new ones communication mean implies continuous changes communication topology 
proof non trivial properties mobile systems processes definitely involves unbounded recursive structures hard analyze uniform models instances processes merged independently instances 
relational abstractions counting necessary obtain precise results 
user interfaces tools formal methods may require profound understanding methods tools incomplete user eventually come questions formal tool fully answer case user want understand definite positive negative answer produced simple formal systems simple type systems hard 
interfaces formal software tools non specialists formal methods particular interpret output case uncertainty interact tool considered 
formal verification certainly essential design safety critical embedded sys tems 
embedded software validation evolve debugging tion long way go 
increasing complexity software systems evolves new capacities hardware networking capabilities 
continuously increased complexity verification embedded software formidable challenge decade 
success certainly depends models semantics specifi cations embedded software considered hand models guarantee success finite models allowing formal proof program exist 
hand patrick cousot radhia cousot models extremely costly design relatively small parts program maintain order follow program evolutions 
methods proving soundness hand models developped strongly rely interpretation 
application specific models constructed automatic abstraction require model theorem prover soundness proof 
logically equivalent direct formal proofs extremely costly small parts program 
abstraction inevitable costly interesting alternative de sign reusable abstractions programming languages respect pre defined specifications static program analysis user defined specifi cations testing 
purpose program semantics abstraction formalized interpretation certainly important formal method leading systematic de sign useful automatic tools supporting design embedded software 
abraham 
myth fault tolerance complex systems keynote speech 
pacific rim international symposium dependable computing hong kong cn 
ieee comp 
soc 
press dec 
www 
utexas edu talks 
abramsky gabbay maibaum eds 
semantic modelling volume handbook logic computer science 
clarendon press 

abrial 
book 
cambridge press 
alur dill 
theory timed automata 
theoret 
comput 
sci 

ball rajamani 
bebop symbolic model checker boolean pro grams 
havelund penix visser eds proc 
th spin workshop stanford ca lncs pages 
springer verlag aug sep 
beer ben david eisner geist rodeh 
rulebase model checking ibm 
grumberg editor proc 
th int 
conf 
cav haifa il lncs pages 
springer verlag jul 
ben jones 
computational complexity programming languages constant factors matter 
acta 

benveniste le guernic 
synchronous programming events relations signal language semantics 
sci 
comput 
programming 
biere cimatti clarke fujita zhu 
symbolic model check ing sat procedures bdds 
proc 
th conf 
dac new orleans la pages 
acm press june 
godefroid 
symbolic verification communication protocols infinite state spaces extended 
alur henzinger eds proc 
th int 
conf 
cav new brunswick nj lncs pages 
springer verlag jul aug 
verification embedded software problems perspectives bourdoncle 
debugging higher order imperative languages 
proc 
acm sigplan conf 
pldi 
acm sigplan 
pages albuquerque nm june 
acm press 
burch clarke mcmillan dill hwang 
symbolic model checking states 
inform 
comput 
june 
cadence 
model checking verification 
www cadence 
com html 
caspi pilaud halbwachs plaice 
lustre declarative language programming synchronous systems 
th popl munchen de 
acm press 

chen clarke ho kam leary zhao 
verification circuits floating point unit word level model checking 
srivas eds proc 
st int 
conf 
formal methods computer aided design fmcad number lncs pages palo alto ca nov 
springer verlag 
clarke emerson 
synthesis synchronization skeletons branch ing time temporal logic 
ibm workshop logics programs yorktown heights ny lncs 
springer verlag may 
clarke emerson jha sistla 
symmetry reductions model checking 
hu vardi eds proc 
th int 
conf 
cav vancouver bc ca lncs pages 
springer verlag june jul 
clarke grumberg jha lu veith 
counterexample guided abstraction refinement 
emerson sistla eds proc 

conf 
cav chicago il lncs pages 
springer verlag jul 
clarke grumberg jha lu veith 
progress state explosion problem model checking 
wilhelm editor informatics years back years ahead volume lncs pages 
springerverlag 
clarke grumberg peled 
model checking 
mit press 
clarke jha lu wang 
bdds technique abstraction model checking 
pierre eds correct hardware design verification methods proc 
th ifip wg adv 
res 

conf 
bad de lncs pages 
springer verlag sep 
cleaveland iyer 
optimality abstractions model checking 
mycroft editor proc 
nd int 
symp 
sas glasgow uk sep lncs pages 
springer verlag 
cousot 
de construction approximation de points fixes sur un treillis analyse de programmes 
tat sciences universit scientifique de grenoble grenoble fr mar 
cousot 
semantic foundations program analysis 
muchnick jones eds program flow analysis theory applications chapter pages 
prentice hall 
patrick cousot radhia cousot cousot 
methods logics proving programs 
van leeuwen editor formal models semantics volume handbook theoretical computer science chapter pages 
elsevier 
cousot 
interpretation formal methods challenges invited 
wilhelm editor informatics years back years ahead volume lncs pages 
springer verlag 
cousot 
partial completeness fixpoint checking invited 
walsh eds proc 
th int 
symp 
sara horseshoe bay tx lnai pages 
springer verlag jul 
cousot 
compositional separate modular static analysis programs ab interpretation 
proc 
advances infrastructure elec business science education internet aug 
cousot cousot 
static determination dynamic properties programs 
proc 
nd int 
symp 
programming pages 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
th popl pages los angeles ca 
acm press 
cousot cousot 
static determination dynamic properties recur sive procedures 
neuhold editor ifip conf 
formal description programming concepts st andrews ca pages 
north holland 
cousot cousot 
systematic design program analysis frameworks 
th popl pages san antonio tx 
acm press 
cousot cousot 
la floyd induction principles proving ity properties programs 
nivat reynolds eds algebraic methods semantics chapter pages 
cambridge press 
cousot cousot :10.1.1.51.537
comparison galois connection widen ing narrowing approaches interpretation 
actes bor fr 
oct 
cousot cousot 
interpretation application logic pro grams 
logic programming 
editor logic programming mistakenly published unreadable galley proof 
correct version see www di ens fr cousot 
cousot cousot 
comparing galois connection widen ing narrowing approaches interpretation invited 
bruynooghe wirsing eds proc 
th int 
symp 
plilp leuven aug lncs pages 
springer verlag 
cousot cousot 
galois connection interpretations strictness analysis invited 
bjrner broy eds proc 
ru lncs pages 
springer verlag june jul 
cousot cousot 
higher order interpretation applica tion analysis generalizing strictness termination projection analysis functional languages invited 
proc 
iccl pages toulouse fr may 
ieee comp 
soc 
press 
cousot cousot 
interpretation program testing invited 
proc 
computer ebusiness international conference verification embedded software problems perspectives compact disk electronic proceedings www en proceedings htm aquila jul aug 
reiss 
cousot cousot 
temporal interpretation 
th popl pages boston ma jan 
acm press 
cousot halbwachs 
automatic discovery linear restraints variables program 
th popl pages tucson az 
acm press 
dor rodeh sagiv 
checking string manipulations programs integer analysis 
cousot editor proc 
th int 
symp 
sas paris fr lncs pages 
springer verlag jul 
dor rodeh sagiv 
checking linked lists 
palsberg editor proc 
th int 
symp 
sas santa barbara ca lncs pages 
springer verlag june jul 
feret 
interpretation static analysis mobile ambients 
cousot editor proc 
th int 
symp 
sas paris fr lncs pages 
springer verlag jul 
feret 
occurrence counting analysis calculus 
entcs 
www elsevier nl locate entcs volume html 
feret 
confidentiality analysis mobile systems 
palsberg editor proc 
th int 
symp 
sas santa barbara ca lncs pages 
springer verlag june jul 
flajolet zimmermann 
automatic average case analysis algorithm 
theoret 
comput 
sci 

floyd 
assigning meaning programs 
schwartz editor proc 
symposium applied mathematics volume pages 
ams 
giacobazzi 
incompleteness counterexamples refine ments model checking 
cousot editor proc 
th int 
symp 
sas paris fr lncs pages 
springer verlag jul 
goubault 
static analyses precision floating point operations 
cousot editor proc 
th int 
symp 
sas paris fr lncs pages 
springer verlag jul 
halbwachs 
synchronous programming interpretation 
le charlier editor proc 
st int 
symp 
sas namur sep lncs pages 
springer verlag 
halbwachs 
experience proving regular networks processes modular model checking 
acta 

hankin hunt 
approximate fixed points interpretation 
sci 
comput 
programming 
erratum sci 
comput 
program ming 

msc uml sequence diagrams 
reed reed eds proc 
sdl meeting uml th int 
sdl forum copenhagen dk june lncs pages 
springer verlag 
holzmann 
code models 
proc 
nd int 
conf 
new castle tyne gb 
june 
patrick cousot radhia cousot holzmann smith 
software model checking extracting verification models source code 
proc 
formal methods software engineering distributed systems forte ng china pages 
kluwer acad 
pub 
oct 
huth jagadeesan schmidt 
modal transition systems tion valued program analysis 
sands editor proc 
th esop lncs pages genova apr 
springer verlag 
joint technical committee iso iec jtc information technology 
iso iec standard programming language dec 
joint technical committee iso iec jtc information technology 
iso iec standard programming language dec 
joint technical committee iso iec jtc information technology 
tech nical corrigendum iso iec iso iec standard programming language dk jtc sc wg www docs tc htm 
jones 
program analysis implicit computational complexity 

danvy filinski eds proc 
nd symp 
pado dk may lncs page 
springer verlag 
kesten pnueli 
modularization abstraction keys formal ver ification 
eds rd int 
symp 
mfcs lncs pages 
springer verlag 
kozen 
results propositional calculus 
theoret 
comput 
sci 

kupferman vardi 
detection temporal model checking 
pierre eds correct hardware design verification methods proc 
th ifip wg adv 
res 

conf 
bad de lncs pages 
springer verlag sep 
deutsch gonthier 
software reliability verification process ariane example 
proceedings data systems aerospace athens gr 
esa publications sp may 
lee pardo 
jang somenzi 
tearing auto matic abstraction ctl model checking 
iccad san jose ca pages 
ieee comp 
soc 
press nov 
leuschel 
power homeomorphic embedding online termination 
levi editor proc 
th int 
symp 
sas pisa sep lncs pages 
springer verlag 
lions chairman board 
ariane flight failure report inquiry board 
www esa press press ariane rep html see vlsi colorado edu abel pubs 
html ariane 
margaria yi eds 
branching vs linear time final showdown gen ova lncs 
springer verlag apr 
martin alt wilhelm ferdinand 
analysis loops 
koskimies editor proc 
th int 
conf 
cc lisbon pt lncs pages 
springer verlag mar apr 

interpretation typed decision graphs 
sci 
comput 
verification embedded software problems perspectives programming may 
min 
new numerical domain di erence bound matrices 

danvy filinski eds proc 
nd symp 
pado dk may lncs pages 
springer verlag 
schmidt schau 
tea automatically proving termination programs non strict higher order functional language 
van hentenryck editor proc 
th int 
symp 
sas paris fr sep lncs pages 
springer verlag 

sifakis 
verification concurrent systems cesar 
proc 
int 
symp 
programming lncs pages 
springer verlag 
ranzato 
completeness model checking 
sands editor proc 
th esop genova apr lncs pages 
springer verlag 
rushby 
automated deduction formal methods 
alur hen eds proc 
th int 
conf 
cav number lncs pages new brunswick nj jul aug 
springer verlag 
ryder landi stocks zhang 
schema interprocedural side ect analysis pointer aliasing 
toplas 
appear 

model checking guided abstraction analysis 
palsberg editor proc 
th int 
symp 
sas santa barbara ca lncs pages 
springer verlag june jul 
schmidt 
data flow analysis model checking interpretations 
th popl pages san diego ca jan 

acm press 
somogyi sndergaard 
termination analysis mercury 
van hentenryck editor proc 
th int 
symp 
sas paris fr sep lncs pages 
springer verlag 
ferdinand wilhelm 
fast precise wcet prediction separated cache path analyses 
real time syst 

