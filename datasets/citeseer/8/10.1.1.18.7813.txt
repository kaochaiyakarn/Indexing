proceedings international conference parallel architectures compilation techniques pact september 
basic block distribution analysis find periodic behavior simulation points applications modern architecture research relies heavily detailed pipeline simulation 
simulating full execution industry standard benchmark take weeks months complete 
overcome problem researchers choose small portion program execution evaluate results simulating entire program 
propose basic block distribution analysis automated approach finding small portions program simulate representative entire program execution 
approach profiles program code structure basic blocks uniquely identify different phases execution program 
show periodicity basic block frequency profile reflects periodicity detailed simulation different architectural metrics ipc branch rate cache rate value misprediction address misprediction reorder buffer occupancy 
basic block frequencies collected fast profiling tools approach provides practical technique finding periodicity simulation points applications 
order evaluate new architecture features detailed modeling pipeline buses queuing delays needed timing models power estimation 
detailed simulation takes great deal processing power time small subset program simulated 
programs wildly different behavior different parts execution making section program execution simulated great importance relevance correctness study 
looking architecture features programs demonstrate cyclic behavior different metrics 
include ipc branch prediction value prediction address prediction cache performance reorder buffer occupancy 
cyclic periodic behavior application defined repeatable pattern seen metric program execution 
example spec program wave shows main phases cycle 
ipc st phase ipc timothy sherwood erez brad calder department computer science engineering university california san diego cs ucsd edu nd phase repeats execution 
period length time takes complete phases cycle 
main focus develop automated accurate efficient approach determining starting points program simulate duration simulation 
focus finding initialization part program start cyclic part program 
ii 
period program 
period length cyclic nature program execution 
iii 
ideal place simulate specific number instructions time simulate 
iv 
accurate confidence estimation simulation point 
create fast efficient tool focused approach knowledge architectural metrics program highly correlated performance metrics 
propose basic block distribution analysis calculate enumerated items 
running program completion execute basic block certain number times 
snapshot number times basic block executed provides basic block fingerprint 
basic block fingerprints gathered small intervals program execution find representative areas program simulate 
done finding best match smaller basic block fingerprints basic block fingerprint representing complete execution program 
potential advantage requires basic block profiles means relatively fast basic block profiler opposed slow timing simulation 
addition compilers collect basic block edge frequency profiling information performance tuning guide hot path code layout compiler optimizations 
rest organization 
section details example motivating cyclic behavior exists applications 
section describes basic block distribution analysis find initialization period length applications 
section examines cyclic behavior programs terms architectural features metrics order see correlate basic block cyclic behavior 
section presents results finding places application simulate 
analyzes error finding representative part program simulate range architecture features ipc branch prediction value prediction address prediction cache designs reorder buffer occupancy 
section describes related section summarizes results contributions 
cyclic behavior programs programs execute steady state high level 
tend go different stages execution starting setup phase initialize data structures set rest execution 
start time account significant amount execution 
example spec needs execute instructions reaches code accounts bulk execution 
initialization stage past bulk execution execution phases 
programs tend written modular fashion set procedures contained loop procedure loop procedures 
mode execution representative important program written common case compute bound applications type concern examining new architectural modifications 
applications written manner strong periodic behavior alternating completely different sections code 
computer architects cognizant fact programs execute distinct phases may testing performance machine single unrepresentative section execution initialization phase may representing parts program 
shows behavior executes 
plotted graph variety architectural metrics ipc cache rates 
graph shows wave distinct phases execution starting initialization phase ends instructions 
program enters series cycles phases 
phase average ipc achieved cycle phase ipc drops 
complete details graph dis ruu val addr data ruu val addr branch ipc wave time varying behavior spec program wave 
unit axis represents committed instructions 
results shown ipc reorder buffer ruu occupancy value address branch prediction rates instruction data cache rates axis scale metric labelled 
cussed section 
reason periodic behavior seen call graphs generated wave shown figures 
call graph generated just partial execution sections high ipc call graph sections low ipc 
nodes graphs procedures annotated number times called 
strong periodic behavior due outer function shown calling different routines succession trans 
call graphs show share low level functions sqrt bulk execution occurs different functions 
easy see careful decisions program execution simulate easily see differences factor important metrics ipc 
example demonstrates fact different phase behavior identified examining execution behavior code 
motivated develop general automated technique determining simulate basic blocks program 
basic block distribution analysis section propose basic block distribution analysis generic way determining cyclic behavior application finding preferred simulation points application order achieve representative sample execution 
basic block vectors basic block section code executed start finish entry exit 
frequencies inst branch ipc sqrt trans call graph generated phase execution average ipc achieved 
field sqrt sqrt xy cos call graph generated phase average ipc 
basic blocks executed metric compare different sections application execution 
intuition behavior program time directly related code executing time basic blocks provide information 
program run interval time execute basic block program certain number times 
knowing information provides basic block fingerprint interval execution tells code application spending time 
basic idea find reasonable sized interval time program execution basic block fingerprint similar full execution program 
find know full execution program interval choose spends proportionally amount time code 
results basic block fingerprints collected intervals instructions execution program 
interval sample number times basic block entered interval recorded new count basic block begins interval 
basic block vector single dimensional array element static basic block program 
element array count times basic block entered interval 
useful take basic block vectors varying size intervals 
say basic block vector gathered counting basic block executions interval times instructions basic block vector duration interested actual count basic block executions interval proportions basic block execution normalized having element divided sum elements vector 
normalization ensures sum elements turn allows compare vectors different durations 
basic block vector contains normalized basic block frequencies entire execution program provides call target 
goal analysis find basic block vector small duration similar target 
finding section code representative 
order find basic block vector similar target way comparing basic block vectors 
operation desire takes input basic block vectors output number tells close 
compute function take element wise subtraction vectors 
take absolute value element sum elements single number 
produces number sums 
single number tell closely related 
call difference 
way comparing basic block vectors look execution program changes time 
creating basic block difference graph understand find representative interval program need understand execution program changes time 
reason create basic block difference graph 
basic block difference graph plot individual sample program compares target basic block vector created entire run completion 
interval instructions create duration calculate difference target 
shows plot differences entire execution creating basic block difference graph 
axis number instructions millions axis measure comparison basic block vectors discussed difference 
difference means vectors completely unrelated deviation result perfect match target vector 
sections describe basic block difference graph find initialization phase program find period program 
finding initialization phase execution initialization phase programs different steady state behavior application 
study value prediction saw execution speedup value prediction simulating initialization phase program comparison speedup fast forwarding past initialization wave hydro tomcat vpr vortex bzip basic block difference graphs 
axis unit represents executed instructions 
graphs show basic block vector difference axis calculated comparing target generated interval executed instructions 
phase 
contrast vortex saw execution speedup value prediction initial part program saw execution speedup fast forwarding 
results show results generated execution terribly misleading important simulate representative sections code 
approach determine initialization stage thought sliding piece jig saw puzzle rest puzzle 
jig saw piece fit best spot removed comparison point show difference 
soon shifted away space comparison underlying pieces show marked difference 
find initialization phase treat bb difference graph signal 
take quarter bb difference graph signal call initialization representative signal irs search initialization 
take irs slide bb difference signal looking peak irs differs bb difference signal 
way treat bb difference graph puzzle irs piece puzzle sliding 
chose irs quarter bb difference signal capture majority initialization stage 
assumption initialization phase shorter half length entire execution 
compare irs point half original bb difference signal 
signal starting point bb difference graph equal length irs signal compared irs 
compare sub signals take absolute difference point sub signals summarize resulting differences single number 
number represents close signals match 
done point half execution bb difference graph resulting new graph call initialization difference graph 
shown 
graphs categorized observable behaviors 
periodic pattern seen wave vortex bzip due irs containing initialization stage cyclical behavior execution 
manifest cyclical behavior remainder comparison past initialization stage 
steep incline plateau seen hydro tomcat 
plateau explained initialization part programs having overlap rest program initialization phase completed 
programs examined initialization stage complete peak corner initialization difference graph 
initialization representative signal reaches initialization stage bb difference signal difference maximized initialization phase left compare 
wave hydro tomcat vpr vortex bzip initialization difference graphs 
axis units terms instructions 
axis axis value represents signal difference irs original basic block difference signal starting axis value 
mathematically peak corner graph represents point slope changing fastest 
second derivative function rate change slope algorithm determine point marking initialization 
column table shows initialization points automatically analysis 
finding period find period form period representative signal prs bb difference graph starting precomputed initialization phase previous section 
prs quarter length program execution 
duration sufficient capture periods length duration comprising half program execution 
find period slide prs half entire bb difference graph starting initialization stage 
perform comparisons axis value finding initialization stage resulting period difference graphs shown 
period graph shows points prs matched sub signals original signal bb difference graph 
shifting prs bb difference graph resulting calculations close zero represent match prs original sub signal 
time duration match represents period program 
local minimums shifting prs calculate period 
period calculated minimum axis points period graph calculating length instructions axis minimums 
length period signal period application 
second column table shows periods automatically analysis 
programs fit cleanly description finding periodic behavior 
vpr visible period behavior repetitive 
find representative points simulation vpr shown analysis section 
bzip hand multiple periods 
largest period duration seen consists cycles complete execution bzip 
looking see behavior captured creating bb difference graph different durations 
results shown basic block vectors duration instructions create bb difference graph 
vector duration find period duration smallest period size 
figures show larger durations creates bb difference graph emphasizes larger periods 
wave hydro tomcat vpr vortex bzip period difference graphs 
axis units terms instructions 
axis xaxis point represents signal difference prs original basic block difference signal starting initialization phase 
bzip bb vector duration bzip bb vector duration bzip bb vector duration basic block difference graphs varying duration basic block vector creating graphs 
results show larger bb vector creates bb difference graph emphasizes larger periods 
fourier analysis initially tried fourier analysis discover period signal 
convolved signal smooth basic block difference graph emphasizing frequencies larger amplitude 
convolution periodic behavior original signal new signal analyzed find period 
vortex new signal inferior original slightly varying period entire execution 
convolution signals static period lengths 
fourier analysis potentially benefits dealing certain types execution 
period instruction cache way set associative byte blocks cycle latency data cache way set associative byte blocks cycle latency unified cache meg way set associative byte blocks cycle latency branch predictor hybrid bit gshare bit predictors bimodal predictor order issue order issue operations cycle entry re order buffer mechanism load store queue loads may execute prior store addresses known architecture registers integer floating point functional units integer alu load store units fp adders integer mult div fp mult div virtual memory byte pages cycle fixed tlb latency earlier issued instructions complete table baseline simulation model 
algorithm currently computes single period entire execution 
optimal period locally periodic behavior execution bzip prime example described 
bzip distinct phases phase periodic behavior signal noisy 
fourier analysis potentially provide information periodic behavior signal extracting optimize current approach part 
cyclic behavior architectural metrics section examine time varying behavior applications terms architectural features metrics 
show correlation periodic behavior architectural features metrics examined simulation 
methodology examine architecture features metrics collected information spec programs tomcatv hydro spec programs bzip vortex vpr input sets 
program compiled dec alpha axp processor dec fortran compilers 
programs built osf operating system full compiler optimization ifo 
timing simulator derived simplescalar tool set suite functional timing simulation tools alpha axp isa 
simulator executes user level instructions performing detailed timing simulation aggressive way dynamically scheduled microprocessor levels instruction data cache memory 
simulation execution driven including execution speculative path detection fault tlb branch mis prediction 
baseline microarchitecture model detailed table 
modified release simplescalar memory hierarchy buses pipelined transfer width bytes cycle 
collecting time varying behavior show time varying behavior programs simplescalar modified output clear statistics committed instructions 
statistic counters cleared intervals state machine cache branch prediction tables cleared intervals 
eliminates cold start error added experiment 
results graphed committed instructions programs examined 
yield clear picture large scale runtime behavior exhibited application indicating sets instructions indicative execution 
small granularity provides useful information program start times easily simulated machine 
program run completion graph intervals show cyclic nature program 
summarizes data graphed instructions cycle 
number instructions committed sample divided number simulated cycles took execute instructions 
percent ruu occupancy 
simplescalar uses unified register update unit ruu model reorder buffer reservation stations 
simulations entry ruu report results terms percent ruu entries average instruction sampling period 
cache rate 
cache rates shown kb way associative instruction cache kb way associative data cache 
caches byte lines 
branch prediction rate 
mcfarling bi modal gshare branch predictor 
entry bit chooser table choose entry bit bi modal branch predictor entry gshare table 
entry way associative branch target buffer provide predicted addresses entry return address stack predict return instructions 
branch misprediction rate types executed branch instructions shown 
address prediction rate 
rates shown delta stride address prediction infinite sized table load gets entry 
delta address predictor change prediction stride seen times row 
rates shown applying address prediction load instructions 
value prediction rate 
rates shown delta value address prediction infinite sized table 
delta value predictor change stride seen times row 
rates shown applying value prediction load instructions 
note address value prediction architectural optimizations gathering results rates gathered 
affect ipc branch cache rate results shown 
cyclic architecture results show time varying behavior spec programs examined 
legend top 
program results ipc average percent ruu occupancy percent branch rate percent value rate percent address rate percent instruction data cache rates shown graph 
different results shown graph graph axis 
graph left right axis labeled metrics axis 
graphs percent ruu occupancy value address rates left axis 
similarly cache rate branch rate ipc usually right axis 
cache rate shown axis depending program axis scale order allow interesting trends seen 
axis terms committed instructions 
ran programs completion converge constant behavior instructions repeatable cyclic behavior execution 
save space show program demonstrate cycles 
tomcat instructions clearly demonstrate cyclic nature programs vortex cycles larger scale order instructions cycles order instructions 
vpr mild cyclic tendencies pattern concrete programs 
choosing simulate error analysis simplescalar fastest simulators executes order times slower hardware 
simplescalar emulates execution program allows simulation execute speculative paths execution 
critical accurately modeling speculative execution recovery techniques latest architecture features studied field 
researchers cycle level simulator similar simplescalar executing ruu val addr data ruu val addr data ruu val addr data ruu val addr ruu val addr branch ruu val addr branch ipc hydro tomcatv bzip vortex vpr time varying behavior programs hydro tomcatv bzip vortex 
unit axis represents committed instructions 
inst branch ipc inst branch ipc inst ipc branch branch data inst ipc data inst ipc small fraction program 
instructions may typically executed starting predetermined point 
table see baseline behavior programs architectural metrics discussed section complete run application 
addition included initialization phase period duration millions instructions determined analysis discussed section 
get representative sample program full period simulated 
simulation points evaluate accuracy period length compare behavior simulating single period simulating program complete execution 
choose preferred period simulation starting point building bb difference graph program duration equal period length shown table 
take minimum point new bb difference graph preferred period simulate 
table compares performance different metrics preferred period simulated compares baseline metrics shown table 
column labeled start simulation started simulation ran complete period length shown table 
experiments cold start effects eliminated warming simulator full execution program point 
metrics examined examined section 
addition associated metric error 
error percent difference metric measured preferred period simulated versus complete execution program 
ipc values periods match closely execution program 
programs difference ipc preferred simulation period full program execution 
metrics match closely 
show instruction cache error results programs instruction cache rates low represent meaningful error 
results show able capture ipc simulating instructions period starting instructions program 
different basic blocks executing different proportions run application chosen sample close execution 
limited simulation due time constraints researcher typically simulate program simulate instructions usually smaller name init period ruu ipc val addr bzip hydro tomcat vortex vpr wave table columns show length initialization phase size period hundreds millions instructions 
average branch misprediction rate ruu occupancy instructions cycle data cache rate instruction cache rate value misprediction rate address prediction rate shown full run completion 
period 
determine simulate constraint build bb difference graph program bb vector duration number instructions millions user willing simulate 
take minimum point graph represent ideal simulation point 
table shows effect limited amount simulation time 
limit amount simulation time committed instructions starting instruction millions shown column table 
see error rate gone table 
due fact carefully selected starting point algorithms section results get acceptable bounds 
worst case ipc difference program smaller run size bzip 
address rate value rate 
periodic results show simulated instructions needed capture small period bzip simulating instructions simply small capture behavior loop 
examine performance choosing simulation point picking just initialization phase 
table shows metrics table section execution past initialization stage period 
start simulation chosen initialization time plus time period 
intuition simulate time past initialization allowing full period simulation warm architectural structures cache branch predictor 
looking table see scheme provides higher errors important metrics ipc branch prediction data cache rates find preferred starting point shown table 
related section describe related finding simulation points techniques sampling simulation statistical simulation 
time varying behavior programs attempt showing periodic patterns vary time cache behavior branch prediction value prediction address prediction ipc ruu occupancy 
examined creating similar time varying graphs branch rates 
graphs manually choose fast forward pick simulation periods similar proposed 
automatically finding simulate concurrent proposed automated approach choosing representative slices program execution 
propose technique similar gather statistics execution program completion 
major differences 
propose metrics architecture independent characterize behavior program 
evaluate metrics captures spatial locality captures temporal locality 
propose create specialized metrics instruction mix control transfer instruction characterization distribution data dependency distances quantify behavior program full execution execution samples 
second point propose clustering choosing algorithms find set samples captures full execution program 
approach cooperative metrics analysis propose clustering choosing algorithms developed easily area research 
statistical sampling basic block distribution analysis accurately finds periods simulation periods long conducting detailed simulation studies 
section examine choosing instructions simulate long periods name start err ruu err ipc err data err inst err val err addr err bzip hydro tomcat vortex vpr wave table results simulating complete period application 
column shows starting instruction period simulated millions instructions 
branch rate ruu occupancy instructions cycle data cache rate instruction cache rate value misprediction rate address prediction rate shown complete cycle program execution 
columns percent difference metric period metric full program execution 
name start err ruu err ipc err data err inst err val err addr err bzip hydro tomcat vortex vpr wave table metrics table automatically chosen instruction simulation point 
error comparing sampled metric full execution program listed metric 
name start err ruu err ipc err data err inst err val err addr err bzip hydro tomcat vortex vpr wave table metrics table section simulated instructions chosen period initialization phase 
columns percent difference metric chosen simulation metric full program execution 
showed close approach comes execution applications examined 
approach sampling simulation inside representative period order maintain accuracy reducing simulation time 
different techniques proposed sampling estimate behavior program 
techniques take number contiguous execution samples referred clusters execution program 
clusters spread execution program attempt provide representative section application simulated 
sampling address issue deal state machine switching cluster starting simulation cluster 
option providing meaningful results sample large number sequential instructions order provide results due time takes warm architecture structures caches large number samples sure capture large scale behavior program 
conte proposed option reconciliation disjoint sample points structures holding state reset clusters 
example cache flushed btb reset switching simulation cluster 
hope state machine cluster similar start disjoint cluster 
statistical simulation technique improve simulation time statistical simulation 
statistical simulation application run synthetic trace generated attempts capture program behavior 
trace captures characteristics basic block size typical register dependencies cache misses 
trace run little cycles faster simulator 
technique benefit basic block distribution analysis 
may need execute programs completion place time consuming step 
second separate traces gathered different phases trying get phase represents average behavior application 
summary increasingly common computer architects compiler designers small section benchmark represent program design evaluation system 
leads problem finding sections program execution accurately represent behavior full program 
basic block distribution analysis automated approach finding simulate order achieve accurate estimate complete program 
basic block distribution program entire execution gathered quickly efficiently basic block edge profiler need cycle accurate simulation 
basic block distribution form profile acts fingerprint program behavior 
fingerprint automatically find initialization phase period duration programs examine 
quantify show basic block distribution analysis highly correlated architectural metrics including ipc branch rate cache rates value misprediction address misprediction reorder buffer occupancy 
results show simulate application complete period ipc error rates programs examine 
show constrained instructions simulation time representative instructions necessarily right initialization phase typically straddle transition phase 
basic block distribution analysis show possible find small representative sections program result error ipc 
acknowledgments anonymous reviewers providing useful comments 
funded part darpa ito contract number dabt compaq computer 
burger austin 
simplescalar tool set version 
technical report cs tr university wisconsin madison june 
calder 
comparative survey load speculation architectures 
journal instruction level parallelism may 
conte hirsch menezes 
reducing state loss effective trace sampling superscalar processors 
proceedings international conference computer design iccd october 
gabbay mendelson 
speculative execution value prediction 
ee department tr technion israel technology november 
gonzalez gonzalez 
memory address prediction data speculation 
technical report universitat de catalunya 

choosing representative slices program execution microarchitecture simulations preliminary application data stream 
workload characterization emerging applications kluwer academic publishers september 
mcfarling hennessy 
reducing cost branches 
th annual international symposium computer architecture pages 
association computing machinery 
chong 
hls combining statistical symbolic simulation guide microprocessor designs 
th annual international symposium computer architecture june 
calder 
predictive techniques aggressive load speculation 
st international symposium microarchitecture 
sherwood calder 
time varying behavior programs 
technical report ucsd cs uc san diego august 
ahuja martonosi clark 
branch prediction instruction window size cache size performance tradeoffs simulation techniques 
ieee transactions computers november 
sohi 
instruction issue logic high performance multiple functional unit pipelined computers 
ieee transactions computers march 
wang franklin 
highly accurate data value prediction hybrid predictors 
th annual international symposium microarchitecture december 
