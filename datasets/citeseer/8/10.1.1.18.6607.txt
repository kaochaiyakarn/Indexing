high speed homology search fpgas yamaguchi maruyama institute engineering mechanics systems university tsukuba ou dai tsukuba ibaraki japan japan advanced institute science technology ishikawa japan japan riken genomic sciences center yokohama japan introduce way achieve high speed homology search adding shelf pci board field programmable gate array fpga pentium computer system 
fpga reconfigurable device kind circuits pattern matching program realized moment 
performance proportional size fpga system fpgas larger larger moore law 
easily obtain latest larger fpgas form shelf pci boards fpgas low costs 
result obtained follows 
performance comparable small middle class dedicated hardware systems board latest fpgas performance furthermore accelerated number fpga boards 
time comparing query sequence elements database sequence elements smith waterman algorithm sec times faster desktop computer ghz 
accelerate performance laptop computer pc card smaller fpga 
time comparing query sequence database sequence sec times faster desktop computer 
past years rapid increase genetic genomic database pattern matching problems bioinformatics require huge time computations 
algorithms dedicated hardware systems developed 
result obtained trade quality time cost 
desktop computer systems unrealistic check pattern matching possibilities reasonable time 
simplified effective algorithms designed systems 
dedicated hardware systems computation time supported aid scientific research priority areas genome information science ministry education culture sports science technology japan japan society promotion science research fellowships young scientists 
drastically improved possibilities checked pattern matching problems parallelism 
cost systems expensive 
field programmable gate array fpga reconfigurable device designed rapid prototyping kinds circuits realized fpga moment downloading configuration data host computers dedicated memories 
performance proportional size fpga parallelism computation limited size 
fpgas larger larger moore low number transistors fixed size size fpgas twice months 
easily obtain latest largest fpgas form offthe shelf pci boards fpgas shipped companies obtain kinds boards low cost 
fp gas accelerators application areas dedicated hardware systems bioinformatics 
show achieve high performance homology search adding shelf fpga board pentium computer system 
performance furthermore accelerated number fpga boards 
approach search divided phases fpgas hardware resources pattern matching problems bioinformatics 
different configuration data different circuits downloaded host computer phase order limited hardware resources 
configuration data easily modified new fpga boards generated programs written hardware description languages assuming special hardware resources fpga boards 
organized follows 
section describes overview approach details approach section 
experimental results approach shown section 
section current status works 
overview approach current target problems homology search problems smith waterman algorithm comparison query sequences database sequences 
section describe overview approach 
hardware software approach need followings components hardware platform 

shelf fpga board pci bus interface 
host computer pentium computer driver programs fpga boards run windows linux 
matching 
ggg aau acu acg agc trp glu gly gly asp ser leu pci dma memory fpga host computer windows linux pci board shelf board fpga pci bus interface pci board dma functions data transfer memory banks required components hardware platform softwares necessary approach 
drivers programs control fpga boards host computer developed board maker attached fpga boards 
cad tools fpga need modify configuration data new fpga boards 
components shown developed 
programs circuits implemented fpga 
interface programs run host computer 
programs circuits memory banks transfer data fpga host computer assumed 
fpga boards memory banks order receive data host computer fpga running memory bank 
configuration data new fpga boards easily generated changing parameters programs fpga size memory size fpga pin assignment 
interface programs need control fpga boards driver programs 
structure driver programs depends boards need modify part programs board 
advantage disadvantage approach describing details approach summarize advantage disadvantage approach compared dedicated hardware systems 
advantages approach follows 

kinds fpga boards shipped companies costs boards relatively low 
choose fpga boards requirements budgets 
example cost largest fpga board times cost pentium desktop computer system cost pc card smaller fpga half cost laptop computer 

easy obtain boards latest fpgas larger fpgas soon fpgas shipped important performance approach proportional size fpgas 

possible replace fpga board host computer independently 

making configuration data programs configuration data open users accelerate search purchasing shelf fpga board 
hand disadvantages follows 

general shelf fpga boards hardware resources homology search 
especially memory size memory bandwidth sufficient 
furthermore assume memory banks board data transfer host computer fpga internal memory fpga homology search order maintain portability circuits 
limited memory size memory bandwidth query sequences compared long database sequences 
query sequences compared subsequences database sequences automatically divided search results fragments subsequences shown length fragments specified users 
parts database sequences processed twice size parts proportional length query sequences 
performance worse query sequences longer negligible large size fpgas 
smaller fpgas length query sequences limited long query sequences processed 
example pc card virtex xcv maximum length query sequence 

software environment poor 
improvement works 
scalability performance proportional number fpga boards 
query sequence compared database sequences stored different hard disks 
database sequence divided subsequences stored different hard disks database sequences subsequences compared query sequence independently 
data transfer rate pci bus limited fpga boards attached host computer 
evaluated performance fpga board estimation boards attached host computer 
connecting hardware platforms ethernet easily accelerate performance furthermore 
performance proportional number hardware platforms 
total performance comparable large size dedicated hardware systems 
details approach section describe details approach 
features approach 
multi thread computation order achieve high performance 
phase search order limited memory bandwidth 
parallel processing dynamic programming describing details introduce dynamic programming algorithm 
shown query sequence database sequence compared inserting gaps 
scores matching elements inserting gaps score matrices computation order pattern matching dynamic programming length query sequence database sequence respectively 
unrealistic dynamic programming algorithm long database sequences desktop computer systems 
query sequence database sequence lj lj lj tt tc tg ta ta ta tg ti gt gc gg ga ga ga gg ti ac ag aa aa aa ag ti ac ag aa aa aa ag query sequence database sequence lj lj lj lj tt tc tg ta ta ta tg ti gt gc gg ga ga ga gg ti ac ag aa aa aa ag ti ac ag aa aa aa ag microprocessor reconfigurable device iterations iterations parallel processing dynamic programming dedicated hardware systems reconfigurable devices fp gas process matching elements parallel 
shows matching elements processed parallel 
right hand side part elements diagonal line processed 
order computation reduced elements processed parallel 
size hardware large compare elements elements suppose hardware process elements parallel query sequence compared database sequence scores th elements stored temporal memory 
elements query sequence compared database sequence scores stored temporal memory 
structure processing unit multi thread computation shows structure processing unit dynamic programming 
consists stages takes clock cycles compute scores cell dynamic programming array 
overlapping computation start compute scores elements diagonal line clock cycles 
element database sequence lut msb ff lut lut ff lut lut ff lut lut ff lut lut ff lut lsb score cell placed oblique direction ff ff add score upper cell ff add ff add ff implementation processing unit cmp computed score cell shows database sequence length compared query sequence length circle represents processing unit 
length query sequence larger number processing elements fpga query sequence processed shown 
case takes cycles compare sequences processing units wait clock cycle compare elements diagonal lines described means units idle clock cycle clock cycles 
query sequence database sequence sequential execution dynamic programming suppose length query sequence longer number processing units fpga 
naive approach 
elements query sequence compared intermediate results th scores lower edge upper half stored 
elements query sequence compared intermediate results 
case takes cycles compare sequences processing units idle clock cycle clock cycles described 
reduce computation time multi thread computation method 
multi thread computation 
elements diagonal line upper half processed score th element stored temporal registers 
elements diagonal line lower half processed waiting clock cycle intermediate result 
interleaving processing elements upper half lower half eliminate idle cycles processing elements 
clock cycles equal longer cases 
length query sequence longer twice number processing units multi thread computation shown repeated length query sequence 
case elements query sequence processed scores th elements stored memories scores stored total computation elements 
query sequence phase search phase database sequence naive approach query sequence database sequence multi thread computation multi thread execution dynamic programming phase database sequences divided sub sequences size intermediate results described large stored internal memory fpga 
shows long database sequence compared query sequence 
database sequence divided sub sequences size decided size internal memory fpga 
sub sequence compared query sequence multi thread method 
shown processed processed 
comparison sub sequences scores upper edge position sampled compared scores lower edge position 
score position compared score position difference scores stored memory banks fpga board sent host computer 
host computer sorts differences shows positions database sequence 
approach query sequence compared fragments size scores fragment smith waterman algorithm shown users 
interval sampling distance scores specified users 
small data sent host computers performance go 
assume length fragment twice times query sequence 
division sub sequences parts length overlapped order compare query sequence fragments length 
parts compared twice major overhead phase 
length overlapped area decided length query sequence general 
overhead proportional length query sequence 
overhead larger length query sequence longer query sequence database sequence head head sub sequence phase execution score relatively larger size internal memory fpga smaller size fpga smaller 
order achieve higher performance phase need implement processing units fpga 
size processing unit proportional data width 
implement units reducing data width 
narrower data width scores may cause overflow underflow comparison sub sequences 
order avoid underflow need size subsequences smaller means areas overlapped 
need find balance sub sequence size parallelism 
current fpgas size internal memory large gives best performance decide data width base size internal memory size fpga 
second phase order display optical alignments need find path upper left position lower right position gives best score shown phase best score computed information path discarded computation 
need bits cell array distinguish path comes upper upper left left 
number elements processed parallel performance second phase decided fpga data width memory banks fpga board size fpga 
width elements processed parallel 
second phase information path output score obtained phase 
number fragments need display alignments performance phase important 
length query sequence obtain optical alignments fragment sec desk computer 
experiments tested performance approach environments desktop computer fpga board laptop computer pc card 
desktop environment fpga board rc pp evaluate performance desktop environment 
board memory banks data transfer fpga board host computer 
fpga xilinx xcv board largest fpgas obtain 
implement processing elements phase homology search run mhz 
size internal memory fpga kbits length subsequence elements 
overhead caused overlapped area length query sequence size fragment times query sequence 
shows relation time phase length query sequence length database sequence 
slope search time slightly larger length query sequence larger percentage overhead overlapped area gradually increase 
speedup compared ghz linux kernel version gcc times length query sequence 
time sec 
phase laptop environment fpga system gates parallel parallel database sequence elements phase desktop environment fpga system gates dedicated systems query sequence number elements comparison desktop laptop environment second phase process elements parallel write bits memory banks board 
computation time query sequence elements fragment elements msec 
times faster ghz 
laptop environment pc card wildcard annapolis micro systems fpga xcv xilinx evaluate performance laptop environment 
pc card memory banks bits width kb block banks transfer data pc card host computer 
size fpga xcv seventh fpga xcv 
case implement processing units fpga run mhz 
size internal memory fpga kbits length subsequences elements 
overhead caused overlapped area length query sequence size fragment times query sequence 
compare query sequences longer 
shows relation time phase length query sequence length database sequence 
slope search time larger size query sequence percentage overhead overlapped area increase 
computation time times faster ghz linux kernel version gcc length query sequence 
second phase process elements parallel write bits memory bank card 
computation time query sequence elements fragment elements msec 
times faster ghz 
current status works developed circuits homology search showed achieve high performance shelf fpga boards 
performance comparable small middle class dedicated hardware systems board latest fpgas xilinx xcv 
time comparing query sequence elements database sequence elements smith waterman algorithm sec times faster desktop computer ghz 
accelerate performance laptop computer pc card fpga xilinx xcv 
time comparing query sequence database sequence sec times faster desktop computer 
evaluating performance translated nucleotides 
need translate sequences comparison size unit fpga larger parallelism phase go performance 
improving circuits unit achieve higher performance 
parts programs homology search development need improve parts 
developing softwares parallel processing homology search number pairs fpgas host computers connected ethernet 
planning accelerate pattern matching problems bioinformatics fpgas 

smith waterman identification common molecular subsequences journal molecular biology 

steven henikoff henikoff amino acid substitution matrices protein blocks proc 
natl 
acad 
sci 


jones taylor thornton rapid generation mutation data matrices protein sequences 

altschul gish miller myers lipman basic local alignment search tool mol 
biol 


pearson lipman fasta improved tools biological sequence comparison proc 
natl 
acad 
sci 
usa 

altschul madden schaffer zhang zhang miller lipman gapped blast psi blast new generation protein database search programs nucl 
aci 
res 


www com boards html 
www fccm org ieee symposium field programmable custom computing machines 
www ecs umass edu ece fpga index html acm international symposium field programmable gate arrays 
informatik uni kl de fpl index fpl html international conference field programmable logic applications 
www com 
www com index html 
www com 
www com 
www com 
www xilinx com 
