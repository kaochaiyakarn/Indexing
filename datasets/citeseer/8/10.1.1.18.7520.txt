performance practice string hashing functions ramakrishna justin zobel department computer science rmit cs rmit edu au string hashing fundamental operation countless applications fast access distinct strings required 
describe class string hashing functions explore performance 
particular experiments small sets keys large key set text database show possible achieve performance close theoretically predicted hashing functions 
consider criteria choosing hashing function compare class functions methods string hashing 
results show class hashing functions reliable ecient appropriate choice general purpose hashing 
string hashing process reducing string pseudo random number speci ed range 
fundamental operation widely applications speed critical 
small scale hash table basic data structure applications symbol tables compilers account names password les 
hashing applications spell checking bloom lters 
databases hashing important just indexing operations joins inverted le construction 
performance hashing scheme depends primarily factors eciency ow handling scheme behaviour hashing function 
research addressing problems ow collisions 
hashing functions received attention analytically behaviour hashing wellunderstood 
hashing assumed keys integers practice keys strings alphanumeric characters aspect hashing proceedings fifth international conference database systems advanced applications melbourne australia april 
attracted surprisingly little research 
papers examined speci string hashing functions functions compare analytically predicted performance hashing unknown 
choice hashing function crucial eciency 
assumed load factor access costs independent table size poor function assumption breaks 
comparison hashing function badly designed function may give acceptable performance small application symbol table slower large database application join 
class string hashing functions demonstrate experimentally analytically predicted performance achieved practice choosing hashing functions random class knowledge previous investigation classes string hashing functions 
results performance evaluated measures average number probes successful unsuccessful search largest number probes successful search worst case 
experimental results sets strings drawn real data including set distinct words drawn text database 
results show class gives average performance 
identify properties class string hashing functions satisfy uniformity universality applicability eciency 
properties motivate class string hashing functions compare string hashing functions proposed 
results show functions class reliable faster hashing functions 
class functions choice application involving hashing strings including schemes hash joins external hashing chained hashing explore function performance 
section describe class hashing functions 
analysis hashing schemes reviewed section 
section describe test data experimental results considering worst case search lengths 
string hashing functions discussed section 
classes hashing functions section describe class string hashing functions 
outline notation 
string hashing functions represented generic form string characters seed intermediate hash value examination characters 
set init character set step return nal hm hash value computed follows 
function init applied yield initial step function step hash value computed far current character 
hash value returned function nal internal hash value hm de ning init step nal describes string hashing function 
example de ne init step nal yielding simple uninteresting hashing function hash value sum ascii values string 
hash values truncated way give values range table size 
general practical mechanism take modulo remainder division values form integer bitwise 
operations hashing function include addition multiplication bitwise bitwise bitwise exclusive modulo left shift value bits right shift value bits 
architectures today modulo implemented software multiplication usually hardware relatively slow operations typically single cycle instructions 
assume characters represented integer code ascii 
contend useful generalpurpose hashing class hashing functions satisfy properties 
uniformity 
hashing function uniform probability arbitrary key hashing slot table size independent hash values keys 
practical terms uniformity means load factor ratio keys slots average access time roughly constant regardless table size 
universality 
class hashing functions universal table size pair valid keys number hashing functions equal jh 
randomly chosen hashing function probability hash value equal practice universality means high probability randomly chosen hashing function perform 
hashing function true exist sets keys hash value hashing function invulnerable deliberate attempt identify set keys 
class hashing functions universal functions class uniform guaranteed class subjected attack 
hashing function set keys key true randomly chosen function set hash values uniformly distributed 
somewhat dicult test universality practice test require hashing pair keys possible seed value table size 
subjecting class attack kind outlined actively searching keys hash value obtain strong indication class universal 
applicability 
pragmatic level hashing functions applicable circumstances hashing 
function limited table sizes hash strings certain length accept seeds allowing example double hashing valuable functions restrictions 
eciency 
primary advantage hashing access method speed data set keys table size search time assuming hashing function time complexity 
hashing functions small applications little advantage function large key set 
practice constant factors important 
example applications possible search array log fast search hash table 
consider application keys long strings 
search array required element inspection rst characters key mismatch full comparison correct element 
hashing key completely inspected twice form hash value check key table 
slow hashing function complex operations character unacceptable 
valuable properties perfection hashing function collision free sort order hash values sort order original keys 
valuable speci applications perfect hashing functions lookup static tables example may necessary store keys 
functions require prior knowledge complete set keys hashed 
consider perfect order preserving hashing functions 
de ne class string hashing functions 
obtain class hashing functions meets criteria wish ecient primitive operators addition exclusive possible operators allow function generate large hash values design function scramble input bits thoroughly possible losing contribution characters 
essential mechanism left shift higher order bits operators bitwise avoided tend erase information 
principles experimented combinations primitive operators result propose shift add xor class hashing functions components de ned init step ll rr nal modulo operation nal step replaced bitwise suitable values 
discuss function simplest identify required properties 
functions general form new knowledge previously analysed respect theoretical behaviour hashing functions 
uniformity universality investigated section simply note seed gives new function de ned class hashing functions 
appropriate choice shift magnitudes bit space providing greater likelihood uniform distribution hash values 
example character keys possible obtain bit string class functions 
experiments variation values little di erence characters required yield large hash value contribution rst characters diminished note character set ascii bit values 
conclude class widely applicable 
class fairly ecient 
slow operations modulo multiplication necessary nal modulo reduce hash value table size operations character exclusive shifts additions machines require single instruction cycle 
possible exists simpler effective hashing function obtained simplifying shift add xor 
considering possible simpli cations left shift required obtain bit values right shift required uniformity suspect majority occurrences letters english including vowels rightmost bit discuss exclusive required universality 
eciency considered section 
note require table size prime carefully chosen way hashing functions ective table sizes 
readers may curious chose de ne step step ll rr belief exclusive appropriate hashing 
shift xor xor class uniform apparently universal 
reasons entirely clear mix addition exclusive required particular addition appears valuable propagates change bits leads distribution position 
essentially methods hashing strings 
directly reduce string string bits shift add xor class 
convert string number apply integer hashing function nal kp kt large prime 
expect functions behaved operations required conversion hashing faster shift 
example consider cormen leiserson rivest sedgewick better known algorithms texts 
cormen leiserson rivest suggest strings converted numbers radix conversion 
alphanumeric strings implicitly base radix conversion requires comparisons subtraction multiplication character possibly operations ow 
ascii characters radix conversion simpler involving places multiplication conversion lead contribution rst characters string lost shifted left 
technique regarding strings numbers numerical hashing inappropriate arbitrarily large numbers manipulated eciently 
sedgewick suggests method avoids ow modulo operation step considerably expensive evaluate 
hypothesis choosing functions random shift add xor class string hashing functions making random selection seed practice obtain analytically predicted performance hashing schemes 
prediction performance reviewed section 
predicted behaviour hashing hashing techniques usually analysed assumption hash values uniformly distributed 
consider set keys mapped address range values 
key hashing function maps key range probability key hashes particular address independent outcome hashing keys 
ways keys distributed addresses functions map set keys table 
assumed distributions equally keys hashed slots 
analytically predicted performance class hashing functions corresponds expected performance randomly chosen function set functions 
interesting consider average case worst case behaviour 
average case behaviour measured average length probe sequence average number accesses successful unsuccessful search 
analytical results average case chained hash table knuth page 
worst case hashing occurs keys hash address search length 
knuth page expressed fear possibility concluding hashing inappropriate certain real time applications air trac control people lives stake 
gonnet proved fears hashing probability worst case words small 
gonnet proposed measure worst case hashing length longest probe sequence llps keys stored hash table maximum successful search length 
gonnet proposed expected value llps better measure worst case hashing extraordinarily improbable worst case llps demonstrated theoretically llps narrowly distributed expected value quite small dramatically greater dividing keys evenly buckets 
larson extended results general case bucket size greater 
analytical results average case worst case behaviour class ideal hashing functions yardstick evaluating behaviour practice classes string hashing functions 
experimental results hypothesis choosing hashing functions random shift add xor class hashing functions analytically predicted performance hashing schemes achieved practice 
support hypothesis section experimentally evaluate shift add xor class string hashing functions real data sets 
exhaustively checking class hashing functions uniform require evaluating function potential key sets seeds 
close approximation clearly impractical applying class selection data sets reasonable number seeds highly con dent observed behaviour approximation behaviour class 
experiments sets keys available 
explore performance hashing functions discussed 
reported results key sets 
results key sets similar 
names le distinct surnames extracted internet news articles hand edited remove errors nonsense 
trec le distinct words contiguous alphabetic strings extracted rst gigabytes trec data data contains full text newspaper articles abstracts scienti journals 
experiments focused certain table sizes load factors allow comparison previously published analytical results usually require full data sets 
subsets data required size random subsets strings trec names lexicographically rst strings trec names le rst distinct strings exactly characters aaaaa le strings reversed 
les pathological cases help expose aws weak hashing functions 
experiments focused hash tables separate chaining tolerance ows similarity schemes linear hashing extensible hashing consider typical hash tables practical 
results independent hash table organisation demonstrate properties class hashing function apply regardless internal external hashing slots size buckets keys applications hash joins 
le available ftp cs rmit edu au le pub rmit data surnames average case search length rst investigated average search lengths successful unsuccessful search 
results shown table 
actual results average randomly selected hashing functions equivalently seeds set trec keys gure standard deviation 
results number keys held table size varied give load factor 
example load factor table size 
predicted results quoted knuth page 
seen correspondence extremely con rming hypothesis functions class xor generate uniform hash addresses 
identical results usually observed data les including pathological data les 
tried table sizes key set sizes including table sizes powers lead poor behaviour similar behaviour observed 
note reported gures larger bucket sizes changing bucket size change distribution properties hashing function 
way comparison consider class hashing functions init step nal function compilers reported mckenzie harries bell 
load factor randomised data les average successful search length signi cantly greater prediction 
interesting consider performance large data set realistic case hashing function database system 
full set trec keys randomly chosen hashing functions load factor xor gave average successful search length average search length essentially identical performance small set keys 
simple function average successful search length increasing value left shift decreases value gure unacceptable 
experiment similar experiments large sets keys rst character strings observed poorly chosen hashing func predicted successful actual successful predicted unsuccessful actual unsuccessful table average search length successful unsuccessful keys load factors averaged seeds standard deviation 
keys extracted trec data 
tion performance markedly deteriorate number keys increases 
hashing function member shift add xor give theoretically predicted performance 
worst case search length experimental results expected length longest probe sequence llps shown table experiments reported table 
predicted results quoted gonnet 
seen llps values vary signi cantly runs indicated high standard deviation 
load factor greatest llps observed runs load factors greatest llps 
llps values varied somewhat data les example load factor les drawn names trec minimum average value llps maximum 
values error indicated standard deviation close analytically predicted value 
average llps 
decided examine detail distribution llps values hashing strings data set randomly selected hashing functions 
results shown 
predicted analysis distribution experimental llps values extremely narrow load factor llps values largest observed value occurred experiments 
pushing experiment chose random set keys names table size measured llps hashing functions seeds worst llps occurrences 
small table exhaustive search class failed nd hashing function maps keys value 
average llps 
full set trec keys distribution llps values narrower 
hashing functions load average average llps minimum maximum 
note llps expected rise slowly table size increased indicator poor performance 
interestingly experiments indicate llps better tool average search length discriminating hashing functions particularly large key sets 
example data hashing function simplifying step operation shift add xor step ll reasonable average successful search length average llps worst case successful search length markedly deteriorates 
note llps values quoted table lower bound quite possible hashing function better worst case performance data set 
particular perfect hashing functions constructed respect set keys hashed de nition llps 
weakness functions ineciency dynamic sets keys unpredictable behaviour arbitrary key set 
universality possible conclusively demonstrate class hashing functions universal evidence indicate universality holds 
method deliberate attack hashing function table size nd set strings hash value set strings explore llps average search lengths 
signi cant increase llps indicates strings hashed value seeds expected universal class hashing functions 
approach provide evidence universality full trec key set assumed loading factor table size randomly chose hashing function searched predicted actual table length longest probe sequence llps keys load factors averaged seeds standard deviation 
keys extracted trec data 
length longest probe sequence frequency load factor load factor load factor load factor distribution length longest probe sequence llps keys randomly selected seeds 
keys extracted trec data 
set keys hash value 
attacked shift add xor class choosing random seeds examined distribution llps values 
attack average llps identical value table aside occurrence llps llps values 
behaviour virtually indistinguishable random set keys 
process attack key tool evaluation hashing functions 
example shift xor xor class de ned step ll rr attack increases average llps seeds 
class de ned step ll rr average llps increased average successful search length 
survive attack class functions large 
example class de ned init step nal ect distinct members table size power 
string hashing functions addition string hashing functions proposed literature surprisingly di erent functions embodied software 
consider functions 
discussed algorithms texts describe form multiplicative method stage methods string reduced number processing hashing function integers 
form multiplicative method follows 
init step nal kp kt large prime radix 
variation form array distinct large primes follows 
init step nal kp kt tested functions kind methodology section 
approaches uniform provided radix power probably universal resistant adversarial attack widely applicable 
sedgewick function resist attack quite functions full set trec strings average llps signi cant increase 
functions relatively slow 
sun sparc functions xor class process just strings hashed millisecond 
contrast multiplicative methods processed strings millisecond sedgewick method uses modulo character processed strings millisecond 
expect similar relative performance current architectures 
papers concern string hashing functions 
pearson proposed algorithm de ned init step nal array distinct bit values randomly permuted denotes th value algorithm computes bit hash values albeit quickly 
pearson gives extension bit hash values somewhat slower 
array ect seed di erent permutations yield di erent hashing functions 
function limited value practice expensive store seed function applicable limited table sizes 
generalisation pearson function tested class init step ll nal class uniform experimental results identical shift add xor resistant attack keys millisecond slightly slower shift add xor 
simpli cation algorithm preserves uniformity universality 
string hashing functions survey software mckenzie harries bell 
function described pearson functions designed accept seeds form classes respect criteria particularly interesting 
distinct classes discussed variants simple radix shift methods 
interesting class hashing functions de ned init step ll mask nal step left rotation bits xor ed mask bits 
function similar method attributed knuth knott page embodied spelling checking utility exactly cost shift add xor speed slightly vulnerable attack average llps 
analytically behaviour hashing schemes understood 
criteria believe practical hashing functions evaluated uniformity universality applicability eciency 
developed class shift add xor string hashing functions experimentally showed choosing hashing functions random class analytically predicted performance achieved practice 
shown class universal resistant method adversarial attack 
functions class computationally ecient processing keys unit time string hashing functions shown experiments distinct words trec ective large key sets strings database 
shift add xor class functions appropriate choice practical applications 
results answer important question posed users hashing function hashing strings 
answer random choice class high probability ecient ective hash functions 
worst case performance results shift add xor class string hashing functions particular interest 
provided experimental evidence including set strings exhaustive search hashing functions con rming theoretical prediction length longest probe sequence narrowly distributed 
knowledge rst experiments testing prediction 
results con rmation appropriately chosen class hashing functions hashing safe practice likelihood theoretical worse case keys hashing value extraordinarily low 
evan harris suggesting hashing functions 
ramamohanarao 
supported australian research council 
cormack horspool 
practical perfect hashing 
computer journal volume number pages february 
cormen leiserson rivest 
algorithms 
mit press massachusetts 
deutscher sorenson tremblay 
distribution dependent hashing functions characteristics 
proc 
international conference management data pages 
fox chen heath 
order preserving minimal hash functions information retrieval 
acm transactions information systems volume number pages 
gonnet 
expected length longest probe sequence hash code searching 
journal acm volume number pages 
harman 
overview rst text retrieval conference 
harman editor proc 
trec text retrieval conference pages washington november 
national institute standards special publication 
knott 
hashing functions 
computer journal volume number pages 
knuth 
art computer programming volume sorting searching second edition 
addison wesley massachusetts 
larson 
expected worst case performance hash les 
computer journal volume number pages 
lum 
general performance analysis key address transformations methods le concept 
communications acm volume number pages 
lum yuen dodd 
key transform techniques fundamental performance study large existing les 
communications acm volume number pages 
mckenzie harris bell 
selecting hashing algorithm 
software practice experience volume number pages 
pearson 
fast hashing variable length text strings 
communications acm volume number pages 
ramakrishna 
hashing practice analysis hashing universal hashing 
proc 
acm sigmod international conference management data pages 
ramakrishna 
practical performance bloom lters parallel free text searching 
communications acm volume number pages 
ramakrishna larson 
file organization composite perfect hashing 
acm transactions database systems volume number pages 
sedgewick 
algorithms addisonwesley reading massachusetts second edition 
zobel dart 
phonetic string matching lessons information retrieval 
proc 
acm sigir international conference research development information retrieval pages zurich switzerland august 
