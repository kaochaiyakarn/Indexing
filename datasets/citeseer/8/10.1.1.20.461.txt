science computer programming north holland statecharts visual formalism complex systems david harel department applied mathematics weizmann institute science rehovot israel communicated pnueli received december revised july 
broad extension conventional formalism state machines state diagrams relevant specification design complex systems multi computer real time systems communication protocols digital control units 
diagrams call statecharts extend conventional state transition diagrams essentially dealing respectively notions hierarchy concurrency communica tion 
transform language state diagrams highly structured economical description language 
statecharts compact expressive small diagrams express complex behavior compositional modular 
coupled capabilities computerized graphics statecharts enable viewing description different levels detail large specifications manageable comprehensible 
fact intend demonstrate statecharts counter objections raised conventional state diagrams appear render specification diagrams attractive plausible approach 
statecharts stand behavioral description part general design methodology deals system aspects functional tion data flow specification 
discuss practical experience gained years applying statechart formalism specification particularly complex system 
literature software systems engineering unanimous recognizing existence major problem specification design large complex reactive systems 
reactive system see contrast transformational system characterized large extent event driven continuously having react external internal stimuli 
examples include telephones automobiles communication networks computer operating systems missile avionics systems man machine interface kinds ordinary software 
problem rooted difficulty describing reactive behavior ways clear realistic time formal initial part research carried author consulting research development division israel aircraft industries lad lod israel 
stages supported part iai ad cad elsevier science publishers 
north holland rigorous sufficiently amenable detailed computerized simulation 
behavior reactive system really set allowed sequences input output events conditions actions additional information timing constraints 
problem especially acute fact set sequences usually large complex lend naturally friendly gradual level level descriptions fit nicely human frame mind 
transformational systems kinds data processing systems really specify transformation function input output relation usually sufficient 
transformational systems highly complex excellent methods allow decompose system transformational behavior smaller parts ways coherent rigorous 
approaches supported languages imple mented tools perform practice 
opinion reactive systems difficult cases problem satisfactorily solved 
important promising approaches proposed section discusses number 
general feeling improvements developments necessary 
represents certain attempt progress lines 
literature agreement states events priori natural medium describing dynamic behavior complex system 
see example 
basic fragment description state transition takes general form event occurs state condition true time system transfers state 
informal exchanges concerning dynamics systems nature plane cruise mode switch thrown enters navigate mode displaying time button pressed watch starts displaying date 
finite state machines corresponding state transition diagrams state diagrams short formal mechanism collecting fragments 
state diagrams simply directed graphs nodes denoting states arrows labelled triggering events guarding conditions denoting transitions 
shows simple self explanatory state diagram 
generally agreed complex system beneficially described naive fashion unmanageable exponentially growing multitude states arranged flat fashion fig 

statechart visual formalism complex systems resulting unstructured unrealistic chaotic state diagram 
see example 
useful state event approach modular hierarchical structured 
solve exponential blow problem relaxing requirement combinations states represented explicitly 
state event approach cater naturally general flexible statements airborne states yellow handle pulled seat ejected change state independent braking system selection button pressed enter selected mode display mode consists time display date display stopwatch display 
clause calls ability cluster states superstate introduces independence hints need general transitions single event labelled arrow captures refinement states 
conforming picture worth words find way change extend old state event formalism ways satisfy needs retaining enhancing visual appeal state diagrams 
fact surveying flowchart techniques challenges computer science research community come visual medium describing concurrency orthogonality described rep resents concurrency viewed response challenge 
previous attempts extending flat state diagrams communicating state machines augmented transition diagrams discussed section 
sections main sections introduce statecharts possible attempt confronting problems 
statecharts constitute visual formalism describing states transitions modular fashion enabling clustering orthogonality concurrency refinement encouraging zoom capabilities moving easily back forth levels abstraction 
technically speaking kernel approach extension conventional state diagrams decomposition states inter level transi tions broadcast mechanism communication concurrent com ponents 
essential ideas enabling extension provision deep descriptions notion orthogonality 
strongly believe virtues visual descriptions approach described solely diagrammatic terms reader able provide textual language theoretic algebraic equivalent desired 
nutshell say statecharts state diagrams depth orthogonality broadcast tion 
mundane name chosen lack better simply unused combination flow state diagram chart 
earlier versions word meant combination specification stratification states act preparing statecharts 
harel running example sections concerns author citizen quartz multi alarm iii wristwatch example sufficiently simple contained entirety sufficiently complex serve illustration method 
section discusses number advanced features investigation possible additions basic formalism including integration statecharts temporal logic 
section contains brief account formal semantics statecharts complete treatment deferred separate 
section mentioned discusses related compares statechart formalism alternative notations suggested specification reactive systems 
section reports briefly experience accumulated language implementation workings 

state levels clustering refinement deciding graphical representation capturing depth hierarchy real disadvantage drawing trees line graphs 
media whatsoever area diagram lines points width advantage taken location 
shall rounded rectangles boxes sequel denote states level encapsulation express hierarchy relation 
arrows allowed originate terminate level 
graphics general concept higraph combines notions euler circles venn diagrams hypergraphs wide variety applications 
see 
arrow labelled event abbreviation optionally parenthesized condition 
section allowed labelled mealy outputs actions 
fig 
states example event occurring state transfers system state condition holds instant occurrence 
event takes system cluster new superstate replace tt arrows fig 

fig 

product citizen watch america statecharts complex systems semantics exclusive xor state 
really abstraction state outgoing fl arrows capture common property leads decision transitions leave super state fig 
stand transitions leaving substates turns highly important main way statecharts number arrows 
approached different angle decided simple situation fig 
state refined consist yielding fig 

having refinement incoming arrows underspecified say entered 
extending point directly respectively job transition added obtains fig 

clustering abstraction bottom concept refinement top give rise relationship state substates 
fig 
fig 

fig 

zooming zooming illustrated simple example 
achieved looking inside disregarding external interface time finding simply fig 
done eliminating inside abstracting fig 
fig 

notions acquire significance 
suppose far outside world concerned default state sense asked enter group states system enter specified 
description fig 
captured small arrow fig 

fig 
direct notation fig 
ii alternatively step fig 
iii cil ii iii fig 

harel says default default course zooming obvious advantages 
default arrows analogous start states finite state automata 
introduce running example 
citizen quartz multi alarm iii watch main display area smaller ones tone control buttons denoted see fig 

display time fig 

am pm hour time modes date day month month day week beeps hour enabled independent alarms stopwatch lap regular display modes display light illumination weak battery blinking indication test 
shall assume main functions known liberal terminology power weakens denote certain events obvious meaning course things complete tie events actual happenings physical parts system specify output events produced separately specified components 
main external events depressing releasing buttons event denotes button depressed denotes released certain internal ones 
distinction sharpened section 
description watch intended faithful actual workings possible minor differences worth dwelling detected normal watch 
point statechart watch 
fig 
obtained author obviously ate method observation final product basis initial specification design final product spirit gradual development anomalies avoided 
shows transitions normal displays mode various states 
stand respective internal time settings alarms current time 
abbreviates enabled alarm disabled similarly abbreviates statecharts visual formalism complex systems pressed hits alarms beep fig 
enabled alarm enabled 
conditions take precise form description watch available 
notice clustering replaces arrows 
displays change alarm information specified topic activities discussed section 
refinement displays state yields fig 
decided cycle displays linked repeated time date displays linked time display resume minutes date 
time display default meaning things entrances alarms beep fig 
entrances time 
changed time 
hi fig interesting frequent ways entering group states system history group 
simplest kind enter history entering state visited 
watch example refine states alarm fig 
substates intended model display disabled enabled status corresponding feature 
new alarm state entrance described fig 
meaning enter visited enter time 
equivalently continuation arrow notation fig 

case switch substates 
noted generally means history applied level appears fig 
history chooses system enters left visit 
choice default arrows 
history apply way lowest level states attaching asterisk entry 
fig 
system enter visited state overriding defaults 
achieve effects level levels extremes additional entrances 
fig 
system enter visit visited 
way default arrow overridden history 
specifying complex notions history temporal logic discussed section 
displays state enriched include updating capabilities alarms general time date combination 
entering update modes achieved second continuous depressing required time date update mode 
cases depressing brings control back previous display 
situation displays far including addition entrance modifying earlier decision return time alarm fig 

step refinement updating modes 
statecharts figs 

cases additional exit previous level naive way fig 
apply update 
case uses notation fig 
illustrate fact applies certain parts update specified 
zooming say fig 
result likes fig 

say arrows figs 

depressing updating substates causes exit encapsulating superstate entrance visited substate just left 
case fig 
arrow replaces arrows substate 
time arrows merely op discussed responsible updating require additional level states specify pressing boosts appropriate internal setting unit 
statecharts visual formalism complex systems orm fig 
lo 
fig 

fig 

harel displays sac min 
date fig 

fig 
statecharts visual formalism complex systems update fig 

update update fig 

allow economical representation arrows common sources targets events fig 

note variant fig 
arrows reversed contradiction desired determinism system 
clearly subtle contradictions occur result deep character statecharts carefully avoided 
example fig 
shows contradiction resulting fact possible transitions leading state emanating periphery emanating ancestors 
contains default contradiction entering fl 
default arrow entering entirely contained area problem influenced entrance vial 
fact consequence area dominated graphical representation 
underspecified contains default 
fig 

harel fig 

orthogonality independence concurrency capabilities described previous section represent part story xor exclusive decomposition states related concepts notations 
section introduce de capturing property state system components 
notation statecharts physical splitting box components dashed lines 
shows state consisting components property entails combination 
say orthogonal product components different conceptually defaults internal transitions entering outside absence additional information entering combination default arrows fig 


statecharts visual formalism complex systems event occurs transfers simultaneously resulting new combined state 
illustrates certain kind synchronization single event causing simultaneous happenings 
hand tx occurs affects component resulting 
turn illustrates certain kind independence transition system component 
behaviors part orthogonality term describe decomposition 
conventional free equivalent fig 

reader doubt realize fig 
contains states components fig 
contained 
clearly components states result states product 
course root exponential blow number states occurs classical finite state automata state diagrams orthogonality way avoiding 
note transition condition attached obvious shown explicitly fig 

split orthogonal components general dependence 
condition causes depend somewhat know inner states formally orthogonal product generalization usual product automata difference usually required disjoint product dependence components introduced common events condi tions 
fig 

slightly notational problem lack appropriate location name 
product state general lie superstate area outside borderline box belongs 
course possible additional box fig 

prefer try managing name simply attach outside fig 

harel fig 

jd obvious application orthogonality splitting state accordance physical subsystems 
typically occurs high level specification 
avionics system example general mode component orthogonal components subsystems radar 
overly simplified attempt look fig 

avionics system genera mode radar abc fig 

subsystems showing orthogonality occurs watch example complicate matters slightly discussing exits entrances orthogonal states 
observe fig 
possible interface description state fig 
internal transitions omitted simplicity 
split exit illustrates simple explicit indication occurrence combination entered 
event causes system enter arrow default event causes entrance default 
event causes entrance combination visited state event combination causes transfer alternative statecharts 
formalism complex systems fig 

possibility replace outgoing branches merging arrows condition arrow applicable 
arrow hand typical exit independently transition states product state ax left entered depending fact component general kind exit arrow causing control leave unconditionally 
worth fig 
zoom entrance arrows entrance crosses state boundary rely default 
see fig 

fig 

contains refinement stopwatch display state figs 
orthogonality self explanatory 
regular tap kinds displays zero special state stopwatch initial position 
description outcome separate person group dedicated specifying behavior stopwatch 
fig 
appears citizen watch high levels 
start top behavioral specification watch accounting battery insertion removal fig 
decide see fig 
alive state consist orthogonal components main component containing displays alarm beep modes component enabled disabled status alarms containing state power status light 
resulting levels statechart fig 
main component alive state described detail earlier 
citizen multi alarm 
dies fig 

statecharts formalism complex systems olive mai alarm status power fig 

state light component looks innocent quite subtle scope 
orthogonality component level prescribes depressing say update state figs 
simultaneously turn light cause system exit updating state 
shall see interesting combinations 
note disabled enabled status alarms directly linked corresponding substates displays way modeling display change hidden consequences 
course ways constructing statecharts writing programs encourage possibilities depending things personal style 
point situation permits conditions pi alarms precise 
example enabled replaced alarm status 
enabled 
note previous entrances figs 
longer interpreted reservation enter visited 
catered battery removal death specification attain sophisticated meaning history forgotten dead entered 
deal complex historical criterion special actions clear history state clear history state cause forgetting visited states level levels respectively state 
combination clear history abbreviated clh 
forgotten entrances apply defaults employed 
chosen attach action transitions entering dead right discussed section 
final features citizen watch nicely illustrate painless way certain kinds changes statecharts 
think features handed team specifiers designers late stage process specification 
beep testing feature second involves minute automatic return time displays stopwatch condition button depressed interim 
test depressing causes healthy beep 
clearly test modeled detached form fig 
assuming simplicity harel 
statecharts complex systems test fig 

depressed simultaneously applicable states watch 
example obvious relevant dead state probably states 
claim behavioral designer watch attach piece description orthogonal component whichever portion desired 
reasonable choice time display mode fig 

significance kind fig 

decision clear test system time case 
happens beep test author actual watch applicable precisely time date states curiously general update sequence 
applicable took author quite required finger twisting discover fact second wait period 
new box drawn relevant portions common property applicability beep test test attached properly 
see fig 

add citizen documentation watch lists light feature beep test way press happen indication scope provided despite major difference 
second feature life easier addition involves merely drawing box relevant displays appropriate event condition outgoing arrow 
see fold contains full statechart watch far 
harel instructive certain linear branching sequences events called scenarios observe effects prescribed statechart 
example assume system mon updating state see fig 
reason user urge try 
suppose order releasing 
regular component says shall time month updated step fact show fig beep test component says shall beep state light component orthogonal higher level says shall light 
fact quite case shall time month ahead light 
small example subtle anomaly citizen watch happens continuous beep test stops depressing resumes letting go 
shows refinement beep state capturing fact included fig 
fig 

noted time activity internal values time date alarm settings included fig 

parts modelled appropriately additional component orthogonal alive state form extra level states update states cf 
figs 
accompanying text section 
alternatively regard involving variables change values postpone specification activity part system see section 
mention contents displays state names suggestive taken section 
additional statechart features number features part basic statechart formalism show watch example 
statecharts visual formalism complex systems condition selection entrances circled connectives similar abbreviating cated entrances substates superstate simple direct arrow 
conditional illustrated particularly simple case fig 

replace 
actual conditions topology arrows complex omit details chart simple incomplete form fig 

user supply full details separately computerized support system statecharts able show enrich request 
fig 

second connective selection 
selection occurs state entered determined simple fashion value generic ev ent event selection number clearly defined options specifier chosen model options states 
consider say computerized storage system connected display keys marked type name qty place pertaining respectively type objects stored code name quantity physical placement 
typical updating procedure allow user select option updated pressing appropriate key updating possibly repeatedly 
models situation fig 
shows selection option unified history entrance simplifies things 
user specify event selection disjunction lower level events association appropriate state entrance defined 

delays timeouts formalism treats time restrictions implicit timers exits date alarms beep fig 

formally done event ty select qty selected upd update harel name te update updating fig 

selection expression timeout event number represents event occurs precisely specified number time units elapsed occurrence specified event 
aforementioned exit date example formally appear timeout entered date 
need emit system state occurs repeatedly specification systems especially real time systems worthwhile supply special notation graphical possible obvious property state 
shows notation including indicate state comes bound indication bound generic event stands timeout entered state bound state source transition bound specified bound 
allow lower bounds 
general syntax specification attached providing lower upper bounds time state 
omitted done state fig 

fig statecharts visual formalism complex systems significance lower bound cause exits events apply state lower bound reached 

purpose subsection simply call reader attention possibility useful manual computerized laying parts statechart outside natural neighborhood 
conventional notation hierarchical description advantages keeping neighborhood small parts interest large 
see fig 

necessary option system description large 
aware fact extreme yields trees basic area dominated graphical philosophy 
adopt ing idea sparingly desirable 
fig 


actions activities statecharts including extensive fig 
connecting states transitions objects appearing real watch 
apart convention regarding letters depressing real buttons suggestive words displays beeps says watch beeps displays 
says keeps time 
obviously pure statecharts represent control part system responsible making time dependent decisions influence system entire behavior 
far reactivity part expressed system changing internal state configuration response incoming sensed events conditions 
respond 
influence components system 
obvious missing ability statecharts generate events change value conditions 
expressed notation attached label transition action carried system 
shall reserve word action split second happenings instantaneous occurrences take ideally zero time 
sending signal takes zero time conventional assignment statement 
actions output events system swallow ticket send current balance display 

want transition labelled component statechart trigger transition orthogonal component necessarily having immediate external effects simply label second sensing taken action carried generating event sensed component transition taken instantaneously 
events actions closely related distinction precisely drawn input output events 
actions 
need activities actions conditions events 
activity takes nonzero amount time displaying executing lengthy computations 
activities dur able take time instantaneous 
order enable statecharts control activities need special kinds actions start activities 
accordingly activity associate special new actions start new condition active ali obvious meanings 
start entrance say alarms beep state attach action start entering transitions alternatively entrance state required activity 
obviously order describe real actions activities assume physical functional description system providing say hierarchical decomposition subsystems functions activities support 
description identify external input output ports associated signals 
statecharts control internal activities 
aware fact achieving functional decomposition means trivial matter assume kind description produced existing method 
want emphasize statecharts complex systems conviction beneficial directly link aspects system description underlying statechart 
idea precise statechart contain instructions carry actions activities simple extension ideas called mealy moore automata see 
actions allowed transitions allowed states usually meaning action carried entering state question 
shall allow association actions exit state allow specify activity carried continuously system state 
words saying activity carried state just saying action start carried entering leaving enrich transition labelling form event triggering transition condition guards transition taken false action output automata theoretic terms carried transition 
allow boolean combinations component shall get detailed syntax 
fig 
example system event occurs new state configuration actions carried simultaneously entrance 
notice concurrency actions induced nested structure states 
action obviously take place transition state occurs 
event occurs system exits causing actions take place causing internal action carried turn sensed event causes transition orthogonal component 
output event left hand component input event right hand 
new state configuration action taken time 
defining formal semantics action enriched quite delicate matter 
see section 
entry exit fig 
reader able informal descriptions order formulate actions activities watch carries attach rightful places statecharts 
example appropriately identified action starting continuously display status internal setting alarm obviously associated entrance state alarm terminating display associated exits thereof 
simply associate durable activity alarm state 
similarly activity start half second beep associated transitions stopwatch 
run state component precisely happens stopwatch turned 
clearly actions activities associated various physical components displays internal processors timers 
deal problem finding right formalism specifying activities 
possibility comes mind case activities sequential nature simply conventional programming language 
activities involve reactive behavior may separate internal statecharts control internal behavior 
effect results hierarchy activities statechart controlling reactive behavior terms input output events 
system mentioned section contains graphical formalism activities activity charts corresponding physical structural aspects system description module charts 
designed fit nicely behavioral aspects described statecharts scope 
see 

possible extensions formalism section contains preliminary ideas number advanced features currently investigated possible additions basic statechart formalism 
reader take account 
final recommendation syntax satisfactory formal semantics 
brought author opinion represent significant potential strengthenings statechart formalism tool specifying real systems 
way fragments manually experimental projects mentioned 

parameterized states cases alarm fig 
different states identical internal structure 
common ones situations best viewed single state parameter 
statecharts visual formalism complex consider refinement state update min updating captured 
obvious candidate fig 
condition tests current time unspecified event denotes crossing minute borderline 
parameterizing states choose notation fig 

example ofa parameterized think cases parameterized helpful 
example comes mind specification individual telephones connected central network 
portion relevant statechart fig 

cases keep mind underlying programming language variables rich data structures best tool specifying complex kinds parameterization 
bec fig 

fig 

telephones telephone fig 


overlapping states interrelationship states statecharts far tree xor tree 
absolutely deep reason statecharts need means entirely tree 
human mind perform tree hierarchical objects definitely rule clustering complex 
example fig 
shows situation state parents 
reason doing fig 

statecharts formalism complex systems conceptual similarities involved states merely pragmatic desire describing joint exits transitions appearing 
really happening states related xor 
course kind overlapping burden specification possibly economy descrip tion 
case resort copies overlapping states beneficial turning xor 
consider state substates internal transitions lives circumstances joined orthogonal marriage state 
figures show ways describing situation 
fig 

fig 
appears twice obviously entirely desirable situation especially large complex 
contains special new state says really state artificial solution 
recommendation overlapping states fig 

transitions appearing quite unambiguous reader verify 
particular entrance clearly entrance product defaults pair 
exit leaves regardless matched state tle exit condition attached 
problem overlapping ambiguity entrances substates clear transition entering supposed fig 

mean 
suggest refining elementary graphical notation arrows crossing state pleasure entering state 
shows entrances causing entrance causing entrance 
overlapping states economically describe variety synchronization primitives reflect natural situations complex systems 
examples appear 
discussed section overlapping states cause semantical problems especially overlapping involves orthogonal components 
suggestion syntax semantics overlapping states appears 
fully convinced addition appropriate version overlapping states basic formalism greatly enhance potential 
lb fig 

statecharts visual formalism complex stems 
incorporating temporal logic temporal logic tl quite extensively specification concurrent programs see 
opinion tl beneficially statecharts way 
possible specify ahead time kinds global constraints tl eventualities absence deadlock global timing constraints 
carry statechart specification system attempt description satisfies tl clauses 
approach require develop proof methods statecharts description language temporal logic assertion language 
attempt extend methods developed verifying conventional state machines tl formulas 
dually possibility synthesize statechart rom tl specifications 
feel represents important research topic people involved avionics project mentioned section displayed linear scenario mode thinking 
able state desirable scenarios firing missile updating location precise detail describing things wanted system eventually 
scenarios easily described tl beneficial able derive reasonable statechart description large set scenarios tl 
zave sequence diagrams tailored scenario descriptions see section 
statecharts conditions specifier want refer system past behavior 
supplied history entrance purpose obvious able specify complex things 
example shutting history clear history action away history entrance say state fig 
conditional entrance condition state similar state clause leading default 
formula taken past fragment temporal logic dead 

states transition taken past 
dead 

recursire probabilistic statecharts seen little need arise practice worth noting introduce recursion automata theoretic terms context freeness statecharts just augmented transition networks see introduce conventional state diagrams 
done specifying name separate statechart case transition arrow 

harel extension require notation terminal states say double initial ones defaults 
want add statecharts 
way doing allow nondeterminism say forms discussion fig 
specify bias coin tossed arises 
fact really tantamount considering markov charts classical markov chains statecharts classical transition diagrams finite state automata 

semantics statecharts statechart formalism turns quite challenge comes providing formal semantics simple finite state automata 
main difficulty depth states orthogonality constructs claimed dealt translation ordinary automata delicate problems arise 
consider fig 

semantics able conclude occurs system ends leads nondeterministically 
difficult problems arise events conditions generated statechart sensed orthogonal components 
fig 

obvious 
problems concurrency stem cooperation mechanism shared variables access communication channels handshake rendezvous respect statecharts employ broadcast communication mechanism 
part generates event action placed say right transition parts sense acting response specified 
clearly sensing event component generate new event causing generated 
cycles fig 
dealt semantics presumably rendering undefined 
statecharts 
complex systems fig 

events generated actions cause problems generated dynamics statechart 
allow statecharts refer condition state events signal changes condition entered state left state 
sight defined time span durable happening instants time 
fig 
illustrates situation quite clear outcome 
starting occurs 
intuition says formal semantics supply answers 
fig 

desire allow simultaneous events cause problems especially wish negate events order specify occurred simul 
fig 
example meaning exits obvious occurs 
combining generated events internal events conditions simultaneous events negations causes extremely delicate problems solution far scope quite lengthy 
refer reader syntax version formal operational semantics language including features 
shall provide hints basic notions ideas 
notices states statechart related ways exclusive orthogonal 
best way see consider harel fig 

state tree 
exclusive respectively orthogonal path common ancestor state resp state path 
definitions defines legal partial configuration essentially set mutually orthogonal states full configuration maximal set 
basic configuration states atomic offspring 
statechart state tree set transitions ordered pair configurations source target labelled legal combination 
defaults history entrances appropriately included 
heart semantics definition function nextstep full basic configuration set external conditions set simultaneous external events provides set possible full basic configurations 
system nondeterministic error pragmatic sense fig 
discussion standard general case framework formal semantics 
semantics assumes step represents time interval new internal events may generated responded 
main steps defining nextstep 
relevant transitions elected 
ti ds involves analyzing trigger part label left see triggered source configuration see transition semantics takes separately analyzing consequences applying consequences action part label finding new transitions relevant result 
process continued closes reaching stable consistent situation 
configuration replaced appropriate obtained applying effect just determined appropriate configuration diving downwards default entrances reach full basic configuration 
set final result nextstep 
course process computing stable consistent situation tricky part details 
history entrances cause essential problems incorporating semantics entails remembering state state area includes connector basic configuration includes connector 
merely abbreviations constructs 
statecharts visual formalism complex systems mentioned earlier advanced features section exception overlapping states see satisfactory syntax formal semantics 

related state event approach form finite state machines state transition diagrams suggested numerous times system specification 
small sample includes recommending state machines user interface interactive software recommending specification data processing systems hardware system description specification communication protocols computer aided instruction 
papers ones turned approaches identified problems associated naive conventional state machines state diagrams especially exponential blow number states 
example problems cause simply give state machines system description 
table authors claim state transition diagrams hard read difficult draw change non user friendly stepwise refinement decomposed executable code large complex specifications 
need separate state components identified authors recommend separate diagrams related linkages pp 

diagramming techniques linkages semantics point subjective correspondence linked objects 
number suggestions fo formalisms involving communicating finite state machines 
main propositions kind ccitt language communication protocols sdl 
see example 
basic sdl formalism enables level concurrency consisting number conventional machines communicating broadcast communication mechanism 
input messages queued output requests peeled queue defining language involves solving problems regarding implementa tion communication mechanism 
workable way introducing hierarchy depth put forward sdl group result relatively simple protocols quite complex looking sdl descriptions 
augmented transition networks atn see provide hierarchical state event descriptions allowing transition machine labelled name machine 
transition reached called statemachine started original transition returned machine reaches final state 
leads course recursire state machines see section 
approach definitely way introducing hierarchy state machines preferable 
particular way introduce interrupt driven behavior relating events high level collections states transition leaving superstate statechart specify event entries exits cut levels detail 
hierarchy aug mented transition networks subroutines process driven approach event driven 
addition atn address state blow problem concurrency synchronization describable formalism 
interesting surveying flowchart techniques psychological point view green shows example high level states state machine transitions allowed leave contours state level 
semantics precisely adopted statecharts event regarded interrupt applied low level states 
methodologies suggested specification complex systems sadt hos concentrate mainly structural functional aspects systems provide dynamic semantics cover precise behavioral aspects 
explicitly implicitly methods recommend control specified suitable programming language pdl 
usually provide means functional decomposition data control flow information 
consequently approaches taken addition control oriented code suitable transformational systems 
proposed methods augmented conventional state machines behavioral control 
discuss number approaches provide solutions problem behavioral description complex reactive systems 
survey comments extremely brief 
chosen small subset proposed methods concentrating opinion sufficiently formal yield direct implementations full computerized simula tion rapid prototypes ii representative particularly interesting approaches problem 
petri nets see considered best known best understood solutions 
graphical precise come complete impressive body research accumulated period years 
heavily event driven definition allow maximum concurrency 
drawbacks unavailability satisfactory hierarchical decomposition 
consequently level concurrency kind high level encompassing events applicable lower level states places naturally specifiable 
feel introducing depth definition place petri net transitions connected places levels way overcoming problem 
milner ccs formal programming specification language algebraic nature accumulating large body research involving variations statecharts visual formalism complex systems formal semantics detailed comparisons languages 
main characteristics ccs adoption recursion main control structure availability nested concurrency naming aliasing flexibility provided variables signals communication channels 
fact ccs emerging yardstick measure features capabilities power new languages approaches programming specifying concurrency 
needed order assess precise relationship statecharts ccs language 
interesting differences languages ccs hoare csp statechart formalism 
stressed statecharts efficient comes describing interrupt driven behavior delineating large set states specifying react identically occurrence event 
describe similar situation say ccs explicitly add branch representing reaction relevant processes corresponding states 
main difference mechanism communication processes 
languages basic communication mechanism rendezvous enforces synchronization single sender single receiver 
statechart communication mechanism hand broadcast sender may proceed listening 
forces enabled listeners accept respond message simultaneously response specified 
mechanisms incompatible sense difficult cumbersome implement terms 
interesting find leads natural compact specifications systems 
point worth mentioning broadcast mechanism crucial feature statechart formalism 
conceivable satisfactory version statecharts defined rendezvous replacing broadcasting retaining benefits afforded central concepts depth orthogonality 
zave approach sequence diagrams viewed jackson tree representations regular expressions events inputs residing leaves 
specification system set views effect possibly large sequence diagram 
enhance flexibility comprehension events aliases special filter responsible managing aliases input events relevant views 
sequence diagrams structured scenarios see section constitute natural way specifying system behavior identify desired scenarios respect class events union view system behavior 
sequence events conforming views illegal error 
concurrency zave approach explicitly top level views concurrent view sequential possibly nondeterministic constructs 
concurrency inherent described system implicitly represented sequence diagrams nondeterministic interleaving actions concurrent elements 
may relate zave diagrams statecharts viewing harel folding conjoining diagrams making concurrency explicit 
means sequence diagrams read automatically produced corresponding statecharts essentially expressive power 
statechart formalism encourages user explicitly identify orthogonal concurrent elements behavior wishes specify 
practical experience th users approach completely new system specify scenarios representing central threads desired behavior 
experimenting gradually conceive patterns control certain point ready constructing statecharts compactly represent patterns 
formalisms complementary fashion 
zave descriptions taken upper bounds behavior environment non conforming input sequences error possible way merging approaches sequence diagrams assertion language constraint language verifying desired properties suggested temporal logic section 
far programming languages especially tailored real time applications concerned esterel language see intriguing 
motivated concerns similar resulting decisions taken strikingly similar statecharts 
transitions assign ment statements signal assumed instantaneous take zero time 
durable happenings occur events waiting 
events broadcast process misses event happen attentive instant occurrence 
interesting aspects esterel way translated compiled conventional finite state machines 
compiler analyzes possible interleaving events prunes impossible ones practice results automata smaller obtained naive product operation applied bottom concurrent processes original program 
leads wonder translation techniques useful designing optimizing compiler sorts 

practical experience implementation statechart formalism conceived developed author consulting israel aircraft industries iai development complex state art avionics system advanced airplane 
particular kind project demand bewildering levels competence people diverse backgrounds pilots electrical engineers communication experts software hardware professionals defense weapons experts people continuously discuss specify design construct modify parts system statecharts formalism complex systems ranging high level system structure way implementation details 
languages tools doing communicating ideas decisions effect quality maintainability expedition system overestimated 
experience statechart approach project encouraging people able enter behavioral description portion system time turnover period peer review inter group feedback unusually minute 
statecharts project main behavioral specification method 
addition avionics project method experimentally number software electronics semiconductor industries 
cases language manually inevitable ces 
believe serious evaluation method uncover weaknesses prompt modifications fitting real various application areas depend large extent quality computer ized graphics tool especially efficiency user friendliness 
implementation called statemate final stages construction called ad cad advanced computer aided design incorporated cambridge massachusetts 
prototype statemate beta site tests commercially available version planned release june 
implemented system uses statechart language order specify dynamic behavior system development sud 
addition provides complementing views sud structural view describing physical modules channels functional view describing data flow activities 
hierarchy activities controlled statechart discussed earlier 
views closely interrelated described special kind diagram module charts activity charts 
system enables editing testing consistency completeness verifying multitude sophisticated properties absence nondeterminism deadlock 
supports management functions queries reports various kinds 
system main functions ability carry wide range detailed simulations sud ranging step simulation random event interactive simulation carried graphically simulating aspects system description 
details implementation clearly scope 
reader able appreciate multitude ways support system may aid user 
limit number kinds features want implementa tion 
desired graphical options range smooth useful zoom capabilities self system arranges things order minimize say arrow length crossover feature implemented desired query options range listing states certain properties presenting complex views system dominated say events time actions states 
harel 
number theses reactive systems differ systems require different approaches specification 
essential element specification reactive systems need clear rigorous behavioral description serve backbone development requirements specification way user documentation 
provide possible fitting formalism specifying reactive behavior 
ties visual languages methodologies appropriate structuring elements exploit obvious advantages man machine interaction 
validating theses scientific really achieve effort convince reader worthy serious consideration 
considering thesis convinced people working complex systems long time appreciated simplicity appropriateness state event approach lacked formalism possesses certain elementary properties depth modularity provided programming languages conventional approaches physical functional aspects system description 
lack exponential blow syndrome inherent conventional state machines hindered serious states events design really large systems 
thesis believe long scientists engineers sitting front graphical workstations large blackboard size 
displays fantastic resolution carrying everyday technical scientific chores 
quite fair say existing visual description methods computer science predominantly intended aids 
real description object usually textual algebraic form picture help see things better assist comprehending complexity involved 
suggesting visual formalism name game uses statecharts formal description graphical construct precise meaning 
language consist linear combinations icons level graphs complex multi level diagrams constructed nontrivial ways simple constructs 
textual representations visual objects aids users lacking graphical equipment applications requiring textual reports way 
see discussion higraphs 
midst research efforts aimed evaluating statechart method number diverse areas hardware components communication systems interactive software systems 
propose statecharts complex systems adoption statecharts hardware description language designing communication protocols 
papers encouraging results support propositions 
acknowledgments people israel aircraft industry influenced initial development ideas 
particular am grateful introducing problems having insight see solutions possible shai indispensable part development suggestions dashed lines solid ones quartz watch illustrating method presenting respectively avionics engineer user points view competent patient way possible 
discussions comments pnueli sherman useful thought provoking greatly helped shape initial ideas form 
particular pnueli ideas concerning reactive systems served pinpoint problems addresses 
joint pnueli term reactive due sherman variety related issues including semantics statecharts functional view system development served clarify matters 
comments pnueli referees previous versions manuscript appreciated 
superb graphical likewise weintraub deserve special 
languages statemate internal report ad cad cambridge ma 
bar tur harel statecharts describing th communication complex systems department applied mathematics weizmann institute science rehovot 
israel 
berry esterel synchronous programming language mathematical semantics brookes winskel eds seminar concurrency 
lecture notes computer science springer berlin 
international telecommunication union functional description language sdl recommendations za vol 
vi fast 
vi geneva 
clarke emerson sistla automatic verification finite state concurrent systems temporal logic specifications acm trans prog 
lang 
syst 

harel statecharts hardware description cs department applied mathematics weizmann institute science rehovot israel 
edwards aspinall synthesis digital systems asm design techniques barbacci eds computer hardware description languages applications north holland amsterdam 
mills 
state machines semantics software engineering proc 
ieee compsac conference hard transition diagram cai help systems internat 
man machine studies 
green pictures programs processes things lines behavior inform 
tech 

hamilton higher order software methodology defining software ieee trans 
software engrg 

harel statecharts visual approach complex systems cs department applied mathematics weizmann institute science 
morel visual formalism applications preparation 
harel pnueli development reactive systems apt ed logics models concurrent systems springer new york 
harel pnueli schmidt sherman formal semantics statecharts proc 
nd ieee symposium logic computer science 
hoare communicating sequential processes comm 
acm 
hopcroft ullman automata theory languages computation addison reading ma 
jackson system development prentice hall englewood cliffs 
jacob formal specifications design human computer interface comm 
acm 

kahana master thesis bar ilan university israel hebrew 
martin mcclure diagramming analysts programmers prentice hall englewood cliffs nj 
milner calculus communicating systems lecture notes computer science springer berlin 
parnas transition diagrams design user interface interactive computer system proc 
acm conference 
pnueli temporal logic programs 
iee symposium foundations computer science 
reisig petr nets springer berlin 
ross structured analysis sa language communicating ideas ieee trans 
software engrg 

schwartz melliar smith temporal logic specification distributed systems proc 
nd conference distributed computer systems 
specification verification communication protocols affirm state transition models ieee trans 
software engrg 

tanenbaum computer networks prentice hall englewood cliffs nj 
ward transformation schema extension data flow diagram represent control timing iee trans 
software engrg 

wasserman extending state transition diagrams specification human computer interac tion iee trans 
software engrg 

woods transition network natural language analysis comm 
acm 
zave distributed alternative finite state machine specifications acm trans 
prog 
long 
syst 

