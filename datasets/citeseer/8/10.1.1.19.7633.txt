improved algorithms submodular function minimization submodular flow lisa fleischer dept ind eng 
oper 
res 
columbia university new york ny usa columbia edu groups researchers independently de veloped combinatorial strongly polynomial time gorithms submodular function minimization iwata scher fujishige schrijver 
improve algorithms show ideas generated design algorithms helpful contexts 
demonstrates combinatorial algorithms submodular function minimization 
particular accomplish things 
im prove complexity schrijver algorithm designing push relabel algorithm submodular function tion sfm 
second exploit common structure shared submodular function minimization maximum submodular flow design algorithm maximum submodular flow depend oracle sfm 
time complexity sfm 
design algorithms minimum cost lar flow depend oracle sfm framework submodular function minimization iwata fleischer fujishige 
show optimal dual solutions computed time sfm op primal solutions obtained ad ditional maximum submodular flow computation 
give weakly strongly polynomial versions 
part done leave fields institute toronto canada 
partially supported nsf int eia 
ta part done leave fields institute toronto canada 
partly supported aid scientific research ministry education science sports culture japan 
permission digital hard copies part personal classroom granted fee provide copies distributed tbr profit commercial advantage copies bear notice full citation page 
copy republish post redistribute lists requires prior permission fee 
stoc portland oregon usa copyright acm satoru iwata grad 
school eng 
science osaka university osaka japan iwata sys es osaka ac jp 
function defined subsets ground set submodular satisfies 
submodular functions arise combinatorial optimization various fields 
examples include cut capacity func tions matroid rank functions entropy functions 
sub modular function minimization sfm problem find ing subset connecting submodular functions network flows edmonds giles introduced submodular flow prob lem includes network flow matroid intersection directed cut covering 
combinatorial op timization problems shown special cases submodular flow 
particular frank tardos solved minimum cost rooted vertex connectivity augmentation problem directed graphs reducing minimum cost submodular flow 
reduces simultaneous edge connectivity augmentation problem undirected graphs submodular intersection problem equivalent maximum submodular flow 
number network flow algorithms extend ed submodular flow problems 
algorithms rely oracle finding minimizer lar function 
best known time complexity frame finding feasible submodular flow min log log log solving mi cost submodular flow problem time required sfm upper bound ab value arc capacities function values maximum absolute value arc costs input numbers integers 
polynomial time algorithm sfm intro duced uses ellipsoid method 
ellipsoid method known establishing poly nomial time equivalence separation optimization problems combinatorial optimization 
op timization problems shown polynomially able separation implies optimization optimiza tion problem submodular function polyhedra solvable greedy algorithm 
sfm harder solve separation problem 
decades optimiza tion implies separation ellipsoid method gave polynomial time algorithm sfm 
interim re searchers achieved combinatorial strongly polynomial time algorithms special cases including cunningham algo rithm testing membership matroid polyhedra queyranne algorithm minimizing symmetric ular functions 
groups independently devised com strongly polynomial time algorithms general submodular function minimization 
algorithms cunningham approach design augmenting path algorithm sfm 
time evaluate set 
schrijver describes algorithm runs ns 
iwata fleischer fujishige describe strongly polynomial time algorithm runs tn log weakly polynomial time algorithm runs tn log time upperbound maximum function value assuming function values integer 
contributions faster strongly polynomial time algorithm sfm 
new algorithm exploits subroutine devised 
reduce number subroutine calls factor embedding subroutine push relabel framework submodular intersection developed fujishige zhang 
resulting algorithm runs time 
function evaluation takes linear time fastest strongly polynomial algo rithm sfm 
show algorithm modified solve general problem time bound describe algorithm maximum submodular flow require oracle sfm 
modify combinatorial algorithms sfm design direct strongly polynomial algorithm problem 
describe algorithms solving min imum cost submodular flow require oracle sfm 
weakly strongly polynomial time algorithms 
design combinatorial algorithms builds ideas 
algorithm computes optimal dual node prices time sfm 
optimal flow computed maximum submodular flow iterations price finding algorithm 

preliminaries denote set integers set reals respectively 
finite nonempty set cardinality ivi vector set define vex 
denote xu unit vector 
assume 
base polyhedron defined xl vx vector called base 
extreme base extreme point 
fundamental step algorithms sfm submodular flow move base exchange operation xv xw 
maximum possible exchange tx allowable called exchange capacity defined max xv xw 
hard see equivalent min 
base define ax la 
call ax exchange arc computing ex change capacities general hard sfm 
extreme base exchange capacities com puted function evaluation special vertex pairs follows 
vl 
vn linear ordering greedy algorithm generates extreme base setting vh vl vh vh vh lh edmonds showed extreme base gen erated greedy algorithm applied linear order ing 
note linear ordering generates base vh vh 
set called tight 
note set tight arcs enter lemma follows greedy algorithm definition exchange capacity 
lemma linear ordering immediately follows generates extreme base 
linear ordering obtained inter changing extreme base generated satisfies xv xw 
extreme base denote belongs tight set containing note implies precedes linear ordering generating partial order fors call interval interval empty definition 
hasse diagram directed acyclic graph arc set consists pairs distinct vertices 

submodular function minimization dual characterization minimizer sub modular function follows rain max theorem vector reduction due edmonds 
define min edmonds theorem implies max min 
result derived lp strong duality 
characterization driven searches combinatorial algorithms sfm 
necessarily true base achieving max imum extreme base 
order apply lemma cunningham chose represent base convex combination extreme bases ai ai yi 
idea strongly polynomial time algorithms sfm current 
roughly speaking cunningham uses augment ing path framework seeks increase aug vertices vertices paths arcs union hasse dia grams yi 
obtains nsm log nm time algorithm sfm 
major difference combinatorial polynomial time algorithm schrijver ham algorithm schrijver maintains directed graph arc set cunningham algorithm uses arcs hasse diagrams 
difference schrijver gorithm perform augmentation path 
constructs layered network detect shortest augment ing path applies exchange operation arc shortest augmenting path 
computing exchange capacity schrijver subroutine computes amount exchange sufficient eliminate arc az 
reduce interval input extreme base distinct output positive constant decomposition xt xs convex combination extreme bases tlb subroutine works follows 
vl 
vn linear extension vv vq vp vq 
compute extreme base yr generated lr vl yp vr vp vr vr vn 
determine xt xs put 
pq holds yr satisfies sub routine runs time 
algorithm schrijver minimizes calling subroutine times 
algorithm calls times 
push relabel algorithm sfm describe push relabel algorithm sfm 
push relabel approach introduced network flows goldberg tarjan efficient known algorithms maximum flow 
applied intersection problem equivalent maximum submodular flow fujishige zhang 
algorithm maintains convex combina tion iet iyi extreme bases yi directed graph 
start extreme base obtained greedy algorithm 

labeling valid satisfies 
algorithm maintains valid label ing 
initially clearly valid 
note valid distance labeling serves lower bound minimum number arcs valid labeling define 
algorithm consists basic tions 
opera tion push applies 
select largest interval apply subroutine reduce yk get convex decomposition jej jyj xt xs 
update xt min ak 
putting ak ak aj ak obtain convex combination 
standard linear programming technique reduce num ber positive coefficients expression time delete indices zero coef operation push iterates az 
call push saturating nonsaturating 
iteration maximum size intervals decreases number extreme bases attain maximum decreases 
push performs iterations 
operation relabel applies 
updates 
clearly holds algorithm 
algorithm fixes arbitrary total order ver 
algorithm repeatedly selects vertex highest apply procedure scan 
procedure scan repeatedly picks vertex total der applies push possible examined scan ends non saturating push time scan invoked starts done keeping pointer indi cates current vertex examined scan algorithm increments performs sat push finds push appli cable 
vertex algorithm performs relabel resets vertex 
algorithm terminates empty 
denote set vertices directed path implies 
arc enters yi implies 
minimizer holds means minimizer establish correctness complexity gorithm require technical lemma adapted 
lemma highlights additional difficulty working az 
arcs may appear disappear change capacity opera tions applied completely disjoint arcs 
extra complication arise traditional network flows 
lemma xt xs jej jyj convex combination obtained subroutine ifu uj proof 
satisfies 
ifu exists 
follows submodularity yj holds contradicts uj similarly exists 
follows submodularity yj holds fl contradicts yj lemma operations push relabel maintain va lid proof 
start valid 
operation relabel applica ble maintains valid suppose valid reduce interval yk introduces new arc case lemma implies belonged reduce yk 
valid reduce yk 
push applies implies 
push operation maintains valid labels remains valid algorithm 
algorithm performs relabel operations total 
lemma en sures relabel applicable algorithm resets scan 
algorithm performs saturating pushes 
lemma 
proof 
suppose statement holds call reduce interval yk introduces new arc 
fol lows lemma va applicability push 

hand 
case 
lemma non saturating push scan algorithm performs relabel 
proof 
consequence push applying scan algorithm increase push 
implies highest label selection rule relabel operation push 
lemma implies number non saturating pushes proof straightforward 
algorithm performs relabel push oper ations 
push operation calls subroutine times algorithm calls times total 
push relabel algorithm runs time 

feasible submodular flow section give combinatorial algorithm maximum submodular flow call oracle sfm 
best known algorithm runs time time required sfm oracle 
show solve time sfm algorithm preceding section modifying tion algorithm fujishige zhang 
algorithm replaces call algorithm sfm ora cle calls reduce interval 
resulting algorithm looks similar sfm algorithm preceding section easily interpreted modification algorithm 
describing find feasible submodular flow 
directed graph lower bounds flow values arcs 
flow qo boundary qo defined qo qo sets arcs ing entering respectively 
words net flow leaving submodular function 
flow qo satisfies sf qo theorem frank system sf feasible holds addition integer valued exists integral solution 
algorithm maintains base convex combination extreme bases yi flow satisfying initially extreme base obtained greedy algorithm flow obeying upper lower bounds instance start 
feasible solution 
algorithm maintains directed graph defined 
arc denote residual capacity 

previous algorithm feasibility algorithm maintains valid distance labeling satisfies arc az initially algorithm starts set 
algorithm consists types basic operations pushes 
pushes fall categories pushes arcs previously defined push 
differentiate type push denoting 
applies 
augments min 
ife push called saturating 
called ing 
algorithm modify applicability re label calling operation rela bel 
applicable az 
updates 
algorithm works replace scan applies push relabel replaced 
algorithm terminates empty 
empty andx qv feasible flow 
set ver reachable intersect case iei 
certificate bility theorem 
correctness complexity algorithm shown extending lemmas gorithm including operation 
arguments extra operation similar simpler omit ted 
algorithm may extended find feasible sub modular flow maximizing flow particular arc 
starting set allow labels increase 
start flow qv ca ex base obtained greedy algorithm puts 
implies initial arcs leaving az modified initial labeling valid 
theorem combinatorial algorithm com puting maximum submodular flow oracle calls arithmetic computations 

minimum cost submodular flow section describe combinatorial time algorithm minimum cost submodular flow call oracle sfm 
algorithm computes optimal dual node prices time fastest com polynomial time algorithm sfm 
modify problem obtain flow addi tional iterations resulting algorithm runs time mn log nu 
obtain strongly polynomial time algorithm 
obtain results exploiting similarity tween papers scaling algorithm sub modular flow fleischer iwata mccormick combinatorial polynomial time algorithm lar function minimization iwata fleischer fujishige inspired 
notation choice direction exchange arc section arbitrary fixed im plications choices orientation vertices sources sinks defined relation tight sets 
choice way opposite choice 
builds algorithms consistent choices 
chose consistent 
current sec tion builds 
may describing backwards contained simply matter definitions 

optimality conditions minimum cost submodular flow problem called asks solution sf minimizes cost vector section review optimality conditions submodular flow prob lem 
standard network flows consider dual problem defines node prices consider linear program maximize base polyhedron 
optimal solution called maximum base 
pl pk distinct values ofp put hi pi ith level set ofp 
define ho fp defined fv hi hi hi 
lemma follows easily submodularity implies fp 
lemma function fp submodular satisfies fp addition exists set hi hi fp 
theorem base equiv maximum 
ii fp 
iii hi hi 
iv ax 
arc define price function node potentials define reduced cost cp ax 
theorem submodular flow qo optimal exists cp implies cp implies qo maximum base 
integral may restrict integral 

scaling algorithm discussing algorithm obtains optimal node prices submodular function takes inte values 
section show obtain op flow applications algorithm 
optimal node prices fix flows non zero reduced cost arcs call maximum submodular flow algorithm described section find rest flow 
due differences complexities algorithms may efficient 
keep general framework weakly submodular flow algorithm described 
gorithm uses shortest augmenting path subroutine scaling framework 
review algorithm highlight changes necessary obtain algo rithm require oracle sfm 
main contribution subroutine find cost augmenting path require oracle 
subroutine described section 

scaling framework scaling phase capacities submodular constraints relaxed adding arc set complete directed graph capacity initial graph 
arc set denoted 
alia 
define submodular function iv xi 
equivalently capacity cut 
relaxation thought relaxing condition qa relaxing capacities 
arcs cost pure relaxation capacities 
treat arcs having separate flow denoted 
distinct may assume zero residual capacity 
point algorithm flow qa flow price vector base fp sb 
sum fp sb 
allowed compute exchange capacities general algo rithm section maintain convex combination extreme bases yi fv 
yi maintain linear ordering li generates yi 
allow apply lemma appropriate 
maintains theorem qo theorem measure progress algorithm qo defined discrepancy function iz 
scaling phase algorithm repeatedly looks path ocp residual capacity augments flow path decreasing discrepancy 
path con arcs de set arcs capacity de set arcs 
augmenting path 
algorithm starts large speci fied section 
show section scaling phase starts discrepancy ends discrepancy 
section show integer optimal scaling phase 

initialization start flow qo price vector satisfy condi tion theorem obtained follows 
check exists dual feasible solution obtain solution bellman ford moore algorithm modified graph described 
dual feasible construct flow cp satisfies condition theorem time 
start linear ordered nonincreasing values see lemma motivation base fp ob tained applying greedy algorithm check primal infeasibility algorithm detect 
set max max lu oo max ll max 
qo nu ally wehavethat ix initial discrepancy qo 

scaling phase start new phase modify satisfy ity constraints new value modify satisfy arcs residual capacity 
object scaling phase decrease augmenting augmenting paths restricted de maintaining reduced cost optimality conditions cp ud ua implied theorem 
necessary find cost respect reduced costs cp augmenting path 
algorithm repeatedly calls sub routine find 
subroutine extension dijkstra algorithm discussed section 
returns cost path ud 
may consider arcs searching cost augmenting path 
brood dij kst ra performs double exchange selected arcs search cost path avoid appearance exchange arcs path 
double exchange arc exchange oper ation followed modification flow unchanged endpoints augment exactly cost augmenting path augmentation decreases discrepancy endpoints augmenting path maintains discrepancy nodes 
phase ends empty set nodes reachable de az disjoint 
case net excess phase total discrepancy 
second case total discrepancy bounded residual capacity tad fqa bounded proof primal infeasibility 

finding shortest augmenting path describe find cost augmenting path de tj exchange capacity oracle 
algorithm extension dijkstra short est path algorithm handle exchange capacities 
dijkstra algorithm edmonds karp capacity scal ing algorithm minimum cost flow find cost path capacity 
done ignoring edges residual capacity 
com submodular flow settings may exchange arcs 
avoid exchange arcs cost path double exchange operation trades exchange capacity arc az residual flow capacity parallel arc arcs zero cost reduced cost serve equally cost path 
performing exchange operation increase exchange capacity arcs changing residual exchange capacity graph 
tricky maintain valid distance labels required correctness dijk stra algorithm 
particular case residual flow arcs ignore exchange arcs positive residual capacity capacity arcs may change exchange operations performed completely different arcs 
fortunately character ize capacity exchange arcs strictly positive 
lemma simpler version lemma 
lemma base xt xs 
ay ay ay 
authors lemma develop version dijkstra works presence exchange arcs 
solve sfm problem idea modified find augmenting paths oracle computing exchange capacities 
algorithm ignores exchange capacity arcs considers pairs sat conditions lemma 
find cost augmenting path 
section extend ideas find cost augmenting path re computing exchange capacities lemma 
immediately evident possible find cost paths exchange arcs ignored 
show possible carefully choosing linear orderings li generating yi result yields efficient com algorithm submodular flow 
subroutine starts parameter node prices base iei fp flow flow 
algorithm maintains linear orderings li generate yi vi described 
maintains distance labels set permanently labeled ver reachable augmenting paths tj 
algorithm returns cost cp augmenting path de set nodes reachable de 
distance labels satisfy cp cp ud start nodes distance label 
immediately nodes reachable reduced cost arcs de added distance label 
proceeds looking arcs cp arc double exchange applied performing ex change operation sending flow backwards parallel arc maintain 
works fol lows 
double exchange swaps exchange capacity residual flow capacity setting yk yi xv xw min yi reduc ing words minimum lower bound amount flow sent backwards forwards maxi mum amount change possible affect performing exchange operation yi 
double exchange saturating yi nonsaturating wise 
saturating double exchange updates yi yi yi yi xv xw modifies li inter changing nonsaturating double exchange ad dition adds new index yk equal old yi sets ai yi sets ak difference old new ai 
cases moves xv 
qo invariant 
operation double exchange depicted 
operation swap 
swap modified subroutine 
double exchange creates residual arc arc zero reduced cost 
arcs exchange capacity arcs initial cost corresponding reduced costs 
applicability double exchange 
case set vertices reachable reduced cost paths may added updating labels vertices equal 
arc az rand cp selects low est finitely labeled vertex adds updated labels set updates labels vertices adjacent de 
subroutine set extreme bases reduced affinely independent set standard linear programming technique 

implementation implement efficiently start sub routine reordering linear ordering li double exchange min aia yi ia yi new index iu yi hi tr yi yk yi lk li yi yi yi update interchanging el iyi operation double exchange 
values vertices monotone nonincreasing 
lemma extreme base yi encountered algorithm exists linear ordering generating yi ordered nonincreasing values 
proof 
exchange arcs 
algorithm maintains cp 
construction ay implies 
suppose li vk vk 
vk vk ay yi vk vk 
lemma interchange vk vk li resulting order generates yi 
values don change augmentations grouping vertices level sets li remains un changed augmentations 
pair vertices called level active ht ht immediately precedes li 
refinement concept active pair introduced 
exchange arcs initial cost zero level active pair positive exchange capacity reduced cost 
lemma says sufficient consider level active pairs looking reduced cost exchange arcs 
lemma level active pairs reduced cost arcs ax leave proof 
suppose level sets ho hx 
hr prove lemma proving fol lowing statement level active pairs ht hi tight 
statement implies lemma az reduced cost ht ht prove statement suffices consider fixed set jl ht ht 
level active pairs elements jt precede elements jt linear ordering li implies hi jt initialization vv vw tf permanently labeled vertices de min reorder li nonincreasing values 
level active pairs level active pair double exchange 
de min oo node smallest label 
min cp reduce affinely independent set 
return path nodes return finding cost augmenting path 
ht ht yi tight set yi tight tight case 

correctness complexity lemma double exchange maintains valid dis tance labels reduced cost optimality conditions 
proof double exchange applied arcs zero reduced cost 
new arc zero reduced cost 
suppose double exchange applied moves yi 
show creates new ex change arc au exists path au reduced cost new arc ap pears ay lemma implies arc arc existed au 
double exchange applies double exchange 
path zero initial cost arcs double exchange 
au zero initial cost reduced cost paths 
reduced cost optimality conditions held fore double exchange hold afterward 
similarly reduced cost new arc equals reduced cost path endpoints distance labels remain valid 
vertices double exchange alters amount unchanged 
theorem returns cost aug path proof path exists time function evaluations 
proof sketch correctness key show vertex added label shortest path distance ing distances cp arcs de ax induction 
uses lemmas combined standard arguments correctness dijkstra algo rithm 
details omitted lack space 
complexity initial reordering li takes steps total steps 
rating double exchange augments nonsaturating double exchanges 
saturating double exchange moves element closer start li 
happen times element upper bound saturating double exchanges 
double exchange uses constant number evaluations fp plus constant number arith operations 
single evaluation require linear number evaluations fp evaluated sets nested level sets lemma suffices evaluate total effort spent finding augmenting path arithmetic steps function evaluations 
updates affinely inde pendent 
starts affinely indepen dent set increases size nonsaturating double exchanges 
iii 
arithmetic operations reduce iii 
termination discuss terminate scaling algorithm pro vided integer valued 
price func tion define lp setting lp cp lp lp ep 
scaling phase discrepancy ff obtain rip 
integrality assumption im plies 
follows theorem exists submodular flow satisfies lp fp 
theorem implies optimal flow optimal price function 
theorem optimal dual node prices minimum cost submodular flow problem integer log nu arithmetic steps function evalua tions 
proof 
log nu scaling phases 
initial flow adjustments initial discrepancy phase rn total number tations phase augmentation decreases discrepancy 
theo rem implies complexity bound 

obtaining flow order compute optimal submodular flow suffices find feasible submodular flow lp fp 
done algorithm section 
efficient algorithm apply price finding algorithm described slightly modified problems start lp modify reduced cost zero reduced cost arcs reduced cost 
price finding algorithm finds optimal prices px reveal objective function value maximum amount flow arc feasible flow 
fix flow repeat 
corollary minimum cost submodular flow combinatorial algorithm mn log nu time 
just explained find feasible ular flow flow maximizing flow specified arc calls modified submodular function tion algorithm 
frank points done calls sfm algorithm 
submodular 
theorem implies feasibility submodular flow problem checked applying sfm algorithm applying test modified problem fixed arc reveals maximum flow possible feasible flow 

strongly polynomial algorithm obtain strongly polynomial algorithm embed subroutine brood dij kst ra variant strongly poly nomial algorithm 
uses log scaling phases fix sign reduced cost arc log scaling phases reduced costs fixed optimal price vector deduced 
optimal flow described section 
grateful lex schrijver sharing drafts combinatorial algorithm minimizing submodular functions strongly polynomial time 
andr frank tom mccormick useful com ments 
cunningham 
testing membership matroid dra 
combinatorial theory 
cunningham 
submodular function minimization 
combinatorica 
edmonds 
submodular functions matroids certain polyhedra 
guy sauer sch editors combinatorial structures applications pages 
gordon breach 
edmonds giles 
min max relation submodular functions graphs 
ann 
discrete math 
fleischer iwata mccormick 
faster ity scaling algorithm submodular flow 
technical report discussion louvain la neuve bel 
frank 
finding feasible vectors edmonds giles poly 
combin 
theory 
frank 
tardos 
application submodular flows 
linear algebra applications 
fujishige ck 
strongly poly nomial algorithm minimum cost submodular flow prob lems 
math 
oper 
res 
fujishige zhang 
new algorithms tion problem submodular systems 
japan 
appl 
math 
goldberg tarjan 
new approach maximum flow problem 
journal acm 
grotschel lovasz schrijver 
ellipsoid method consequences combinatorial optimization 
combinatorica 
iwata fleischer fujishige 
combinatorial strongly polynomial time algorithm minimizing ular functions 
proceedings th annual acm sym theory computing 
proceedings 
iwata mccormick 
fast cost scal ing algorithm submodular flow 
appear 

edge splitting problems demands 
burkard woeginger editors integer programming combinatorial optimization vol ume lncs pages graz austria june 
springer 
queyranne 
minimizing symmetric submodular functions 
math 
programming 
schrijver 
combinatorial algorithm minimizing ular functions strongly polynomial time 
preprint 
submit ted 
