rewriting logic framework building generic tools verifying concurrent systems martin lehrstuhl fur informatik ii rwth aachen germany informatik rwth aachen de method constructing generic verification tools easily adjusted di erent process algebras di erent semantic models concurrency 
purpose recall basics rewriting logic serves uniform model concurrency 
applying rewriting logic specifications explain generic tools developed formal methods popular verification hardware hardware systems expected standard step process developing hardware components cw 
gaining commercial success companies intel national semiconductor texas instruments establishing new departments see example job concurrency mailing list cml 
approaches verification systems distinguished 
model checking theorem proving 
want focus model checking 
case studies showed especially model checking help find errors design process see cw overview 
main reason success availability tools supporting analysis formal systems cwb mol ncsu cwb cs smv spin ghp truth lt 
despite developments main problems limit model checking techniques practical situations 
number design notions ccs mil acp bv lotos bb pn bh support tools limited sense design notion supported tool 
fact strengthened number notions describing requirements 

state explosion problem semantic treatment hardware hardware systems current verification tools leads huge number states limits model checking small hardware components 
cms process algebra compiler solve problem 
process algebra description compiler generates front ncsu cwb 
process algebra description consists specification syntax semantics 
specify semantics structural operational semantics sos rules provided 
approach just suitable design notions natural sos style semantics 
avoid state explosion problem approaches distinguished 
known symbolic model checking 
basic idea describe underlying transition system boolean function coded ciently binary decision diagrams bdds bry 
approach big success solve main problem modelling concurrency possible interleaving actions modelling concurrent system transition system consisting possible interleavings 
second approach avoid state explosion problem known partial order reduction 
idea generate transition system underlying system consisting distinct interleavings 
technique described way semantics underlying process algebra partial order semantics 
idea understand concurrency di erent way 
note number di erent proposals modelling concurrency traces event structures petri nets see wn overview comparison 
verification tools just partly understood 
note symbolic model checking di erent models concurrency semantic domain orthogonal concepts 
may possible code systems generated di erent semantics bdds 
meseguer rewriting logic show symbolic model checking techniques proved model checking real systems just toy examples 
unified model concurrency 
rewriting logic operational nature explain process algebra compiler constructed suitable process algebras sos style semantics wide range semantics including petri nets mazurkiewicz traces 
introduce rewriting logic section give short overview fundamental concepts developing verification tools section 
section discuss structure process algebra compiler 
section remarks 
fundamental concepts verification finite state systems general structure model checking tools described 
system consideration described specification language usually kind process algebra 
specification transformed probably demand representation model semantic domain underlying process algebra 
current systems cwb ncsu cwb smv spin truth current version support finite state transition systems 
properties check formulated logical formulas logic ltl ctl calculus 
tool checks model satisfies formula way underlying system formulated property 
idea developing generic verification tools write compiler reads specification process algebra generates corresponding front rest tool including scanner parser syntax process algebra corresponding semantic functions 
section point kind semantic functions necessary 
process algebra description consists specification syntax operational semantics 
cases semantics described sos rules usually cases process algebra transition system semantics approach studied cms 
shown technique usable languages ccs lotos generate cient tools 
generalise approach process algebras example petri net semantic domain interpretation formulas transition systems petri nets traces 
description properties logic ltl ctl calculus 
abstraction specification distributed system formal language ccs acp lotos 
model checking 
tt tt tt structure model checking tools semantics find suitable way specify semantics 
propose meseguer rewriting logic 
rewriting logic rewriting logic developed meseguer mes 
shown number examples suitable common framework concurrency 
lines mes 
rewriting logic observation models concurrency notion state transition common 
di er distributed structure interleaving true concurrency 
rewriting logic aimed corresponding mathematical model uses notions rewrite systems equational theories 
relationship shown state term proposition transition rewriting deduction distributed structure algebraic structure propositional structure signature order sorted rewriting logic order sorted equational theory equational signature set equations 
rewriting operate equivalence classes terms modulo signature sentences rewriting logic sequences form terms possibly involving variables denotes equivalence class term modulo equations rewrite theory tuple ranked alphabet function symbols set equations set labels set pairs lt component label second component pair equivalence classes terms 

countably infinite set variables 
elements called rewrite rules 
write understand labelled sequence 
indicate variables occurring set 
write 

ready define rules deduction reflexivity congruence 


replacement rule 


transitivity denotes simultaneous substitution rewrite theory say current rewrite write obtained finite application preceding rules deduction 
important rule congruence 
called true concurrency models allow concurrent rewrite system 
words global state consists number local states global rewrite possible local component enables corresponding rewrite see example petri nets 
aims su cient deduction rules define notion interpretation model 
notice deduction rules correct complete wrt 
interpretation described mes 
examples chemical machine ccs lotos calculus grammars parallel functional programming languages mes 
show labelled transition systems petri nets described framework rewriting logic 
labelled transition systems labelled transition systems described relatively simple rewrite theories 
consists constants empty 
mainly transition systems exhibit concurrency concurrency modelled interleaving transformed sequential system 
example consider transition system corresponding signature defined rewrite rules prove system evolve state state petri nets petri nets true concurrency models actions occur time modelled interleaving 
global states system consist multi sets contain corresponding markings places net 
firing transitions corresponds directly rewriting modulo associativity commutativity idempotence multisets algebraically axiomatised associative commutative multiset union operation identity empty multiset 
consider petri net corresponding signature defined ux uz rewrite rules proof places marked system reach global state marked process algebra compiler truth hope examples sections show specification underlying system underlying model concurrency rewriting logic powerful convenient specification rules 
ort spent developing programming language called maude support rewriting logic specifications 
moment beta versions available 
details 
section give basic ideas process algebra compiler rewriting logic specifications verification platform truth lt 
gives general overview system process algebra compiler syntax semantics parse functions process algebra description syntax analyser semantic functions frontend semantic analyser process algebra compiler pac gets input process algebra description generates back 
process algebra description consists grammar syntax process algebra language similar yacc 
furthermore semantics syntax suitable rewriting logic similar maude defined 
process algebra compiler divided components syntax analyser semantic analyser 
syntax analyser takes input grammar part description generates scanner parser process algebra 
semantic analyser takes input rewriting logic specification generates corresponding semantic functions allow proofs underlying process algebra 
semantic functions include functions analysing current state determining states common basis models concurrency rewriting logic 
scanner parser semantic functions form called frontend 
moment di erent process algebra compilers development due di erent backends haskell maude 
pac part verification tool truth entirely written haskell developing version generating haskell code 
syntax analyser rely existing parser tool called happy hap 
semantic analyser develop functions manipulating terms equational theories 
step want implement algorithm suitable combination associativity commutativity idempotence 
theories important aims example representing sets understood dj 
second process algebra compiler generates backend consisting maude code advantages 
maude system capable dealing di erent rewrite theories 
second due fact rewriting logic reflective cm maude adopted feature 
reflection basically means possible implement strategies proofs language 
opens possibility optimise maude code generated process algebra compiler second step 
provide scanner parser generator produces maude code 
proposed generalisation standard process algebra compilers means supporting di erent semantic domains 
furthermore argued rewriting logic framework capable expressing semantic domains way suitable construct semantic functions corresponding underlying process algebra 
described section currently developing di erent versions process algebra compiler suitable system truth 
aim conclude order get experimental results runtime behaviour memory behaviour 
step process algebra descriptions defined milner ccs transition system semantics pn process algebra petri net semantics input language pep system bh gra 
clear corresponding process algebra specification domain interfere logic specifying properties underlying system 
moment give process algebra description second step interleaving semantics able check formulas calculus 
enables integrate system verification tool 
long specification main emphasis gain experience memory consumption process algebra descriptions 
model checking compute full state space memory enhancements expected 
clear treatment intermediate step ort done developing logics corresponding underlying model concurrency 
bb brinksma 
iso specification language lotos 
van eijk vissers diaz editors formal description technique lotos pages 
elsevier science publishers north holland 
bh eike best richard hopkins 
pn basic petri net programming notation 
bode mike reeve wolf editors parle parallel architectures languages europe volume lecture notes computer science pages 
springer verlag june 
url www informatik uni hildesheim de pep pep html best hopkins bpn parle final 
bry bryant 
symbolic manipulation boolean functions graphical representation 
proceedings nd acm ieee design automation conference pages los alamitos ca usa june 
ieee computer society press 
bv baeten verhoef 
concrete process algebra 
abramsky gabbay maibaum editors handbook logic computer science vol volume pages 
oxford university press 
manuel clavel steven eker patrick lincoln jos meseguer 
principles maude 
jose meseguer editor proceedings international workshop rewriting logic volume electronic notes theoretical computer science pages 
elsevier 
url www csl sri com clavel pubs ps 
cm manuel clavel jose meseguer 
reflection rewriting logic applications maude language 
proceedings imsa pages japan 
information technology promotion agency url www csl sri com clavel pubs imsa ps 
cml concurrency mailing list 
url www cwi nl concurrency concurrency html 
cms cleaveland sims 
front generator verification tools 
lecture notes computer science 
url www csc ncsu edu eos users www papers pac ps 
cs cleaveland sims 
ncsu concurrency workbench 
lecture notes computer science 
cw clarke wing 
formal methods state art directions 
technical report cmu cs carnegie mellon university cmu september 
url ftp reports 
adm cs cmu edu usr anon cmu cs ps 
dj nachum dershowitz jean pierre jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science volume formal methods semantics chapter pages 
north holland amsterdam 
ghp jean charles gerard holzmann doron peled editors 
spin verification system volume dimacs series 
american mathematical society 
isbn 
gra bernd 
pep tool 
proceedings cav computer aided verification volume lecture notes computer science pages 
springer verlag june 
url www informatik uni hildesheim de pep pep html pep cav 
hap happy parser generator haskell 
url www dcs gla 
ac uk fp software happy 
mcmillan 
smv system symbolic model checking approach 
technical report cmu cs carnegie mellon university 
john levine tony mason doug brown 
lex yacc 
reilly associates morris street suite sebastopol ca 
lt martin stephan tobies 
truth platform verification distributed systems 
technical report rwth aachen 
appear 
mes jose meseguer 
rewriting unified model concurrency 
proceedings concur conference lecture notes computer science volume pages amsterdam august 
springer 
report sri csl computer science lab sri international 
mes meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science april 
mes jose meseguer 
rewriting logic semantic framework concurrency progress report 
seventh international conference concurrency theory concur volume lecture notes computer science 
springer verlag august 
mil milner 
communication concurrency 
international series computer science 
prentice hall 
su fisher research 
mol moller 
edinburgh concurrency workbench version 
department computer science university edinburgh october 
wn glynn winskel mogens nielsen 
models concurrency 
technical report basic research computer science brics aarhus 
ib url theory doc ic ac uk papers 

