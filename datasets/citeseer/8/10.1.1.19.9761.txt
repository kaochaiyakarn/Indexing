executing sql encrypted data database service provider model um bala iyer chen li sharad mehrotra department information computer science university california irvine ca usa acm org ics uci edu ibm silicon valley lab san jose ca usa ibm com rapid advances networking internet technologies fueled emergence software service model enterprise computing 
successful examples commercially viable software services include rent spreadsheet electronic mail services general storage services disaster protection services 
database service model provides users power create store modify retrieve data world long access internet 
introduces challenges important issue data privacy 
context speci cally address issue data privacy 
main privacy issues 
owner data needs assured data stored service provider site protected data outsiders 
second data needs protected service providers providers trusted 
focus second challenge 
speci cally explore techniques execute sql queries encrypted data 
strategy process query possible service providers site having decrypt data 
decryption remainder query processing performed client site 
explores algebraic framework split query minimize computation client site 
results experiments validating approach 

internet possible computers connected 
uence systems internet era business 
internet profound impact software industry 
facilitated opportunity supported part ibm ph fellowship 
performed author ibm 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
acm sigmod june madison wisconsin usa copyright acm 
provide software usage internet led new category businesses called application service providers 
provide worldwide customers privilege software internet 
sta ed experts art putting software solutions variety software products familiar business services payroll enterprise resource planning customer relationship marketing 
er services internet small large worldwide organizations 
xed costs amortized large number users potential reduce service cost possibly increased telecommunications overhead 
possible provide storage le access services 
natural question feasibility providing value add layer data management 
business perspective database service inherits advantages asp model large number organizations dbmss 
model allows organizations leverage hardware software solutions provided service providers having develop 
importantly provides way organizations share expertise database professionals cutting people cost managing complex information infrastructure important industrial academic organizations 
technological angle model poses signi cant challenges foremost issue data privacy security 
database service provider model user data resides premises database service provider 
corporations view data valuable asset 
service provider need provide su cient security measures guard data privacy 
data privacy challenges arise 
rst challenge service providers protect theft customer data hackers break site scan disks 
encryption stored data straightforward solution challenges 
trade need regarding encryption techniques data granularity encryption 
rst challenge examined hac um 
hardware encryption superior software encryption 
encrypting data bulk reduced byte encryption cost signi cantly exposing startup overheads 
encrypting row preferable encrypting eld queries tpc benchmark 
second challenge total data privacy complex includes protection database provider 
requirement encrypted data may decrypted provider site 
straightforward approach transmit requisite encrypted tables server provider site client decrypt tables execute query client 
approach mitigates advantage service provider model primary data processing occur client machines 
clear large number queries selections joins unions data processing done server answers computed little ort client 
proposed system basic architecture control ow shown comprised fundamental entities 
user poses query client 
server hosted service provider stores encrypted database 
encrypted database augmented additional information call index allows certain amount query processing occur server data privacy 
client stores data server 
client maintains metadata translating user queries appropriate representation server performs post processing server query results 
auxiliary information stored develop techniques split original query unencrypted relations corresponding query encrypted relations run server client query post processing results server query 
achieve goal developing algebraic framework query rewriting encrypted representation 
explore feasibility ectiveness approach testing performance strategy numerous queries 
results show privacy service providers achieved reasonable overhead establishing feasibility model 
previous di erent research areas related 
search encrypted data keyword search supported doing arithmetic encrypted data studied literature 
functionalities provided limited insucient executing complex sql queries encrypted data 
rest organized follows 
section presents data encrypted stored server 
section discusses condition query translated condition encrypted data server 
section describe individual relational operators selection join set di erence group implemented 
section shows rewrite query splitting server query client query computation client reduced 
section gives experimental results queries tpc benchmark 
conclude section 
relation encryption storage model discuss techniques query processing encrypted data rst discuss encrypted data stored server 
relation store server client user entity 
service provider architecture 
encrypted relation attribute explain de ned section stores encrypted string corresponds tuple relation attribute corresponds index attribute query processing server 
example consider relation emp stores information employees 
eid ename salary addr tom maple mary main john river jerry emp table mapped corresponding table server emp eid ename salary addr necessary create index attributes involve search join predicates 
example knew query involves attribute addr selection join index attribute need created 
loss generality assume index created attribute relation 
partition functions explain stored attribute attribute purpose need develop notations 
rst map domain values attribute partitions fp pkg partitions taken cover domain partitions overlap 
formally de ne function partition follows partition fp pkg example consider attribute eid emp table 
suppose values domain attribute lie range 
assume range divided note alternatively chosen encrypt attribute level row level 
alternative pros cons 
point interested readers detailed description 
rest assumes encryption done row level 
partitions 
partition emp eid di erent attributes may partitioned di erent partition functions 
clear partition attribute corresponds splitting domain set buckets 
histogram construction technique equi width equi depth create partitioning attributes 
examples explain strategy simplicity assume equi width partitioning 
extension strategy partitioning methods relatively straightforward require changes notations developed 
example equi width case value maps single histogram bin equi depth may map multiple buckets 
notation assumes value maps single bucket 
experimental section equi width evaluate strategy equi depth partitioning 
example equi width histogram illustrated 
note domain attribute corresponds eld ordering de ned eid attribute assume partition continuous range 
low high denote lower upper boundary partition respectively 
identification functions furthermore de ne identi cation function called ident assign identi er partition attribute shows identi ers assigned partitions attribute emp eid 
instance eid eid 
partition identi cation functions emp eid 
ident function value partition unique purpose collision free hash function utilizes properties partition may ident function 
example case partition corresponds numeric range hash function may start values range 
mapping functions partition identi cation functions de ne mapping function maps value domain attribute identi er partition belongs partition contains example table shows values mapping function attribute emp eid 
instance eid eid eid 
note necessary create partitions 
created values inserted database 
eid value map emp eid classify types mapping functions 
order preserving mapping function called order preserving values domain 

random mapping function called random order preserving 
random mapping function provides superior privacy compared corresponding order preserving mapping 
see mapping function order preserving ects translate query queries client server 
query translation simpli ed order preserving mapping function 
develop translation strategies types mapping functions 
de ne mapping functions help translating queries encrypted representation 
rst function de ned holds attribute hold attributes domain values exhibit total order 
application mapping function value greater maximum value domain vmax returns vmax 
similarly application mapping function value minimum value domain returns vmin 
subset values domain attribute value domain 
de ne mapping functions partitions associated jp map jp low vg map jp high vg essentially set identi ers partitions ranges may overlap values result map set identi ers corresponding partitions ranges may contain value likewise map set identi ers corresponding partitions ranges may contain value greater storing encrypted data notations specify store encrypted relation server 
tuple ha relation stores tuple fa ang encrypt function encrypt tuple relation 
instance encrypted relation emp stored server eid ename salary addr 



rst column contains string corresponding encrypted tuples emp 
instance rst tuple encrypted 
equal encrypt tom maple 
second encrypted 
equal encrypt mary main 
treat encryption function black box discussion 
block cipher technique aes rsa blow sh des encrypt tuples 
second column corresponds index employee ids 
example value attribute eid rst tuple corresponding partition 
partition identi ed store value identi er eid tuple 
similarly store identi er second employee id 
table di erent mapping functions di erent attributes 
mapping functions ename salary addr attributes shown assumed generate identi ers listed table 
general notation encrypt map relation encrypted representation 
relation relation 
example emp table emp decryption functions operator maps relation encrypted representation de ne inverse operator maps encrypted representation corresponding unencrypted representation 
example emp emp 
operator may applied query expressions 
query expression consists multiple tables related arbitrary relational operators joins selections clear general schema encrypted relation result relational operators encrypted relations hr decryption operator applied strips index values decrypts unencrypted attribute values 
example assume table de ned mgr mid stored database 
corresponding encrypted representation mgr table mgr mid 
suppose compute join tables emp mgr attributes 
resulting relation temp contain attributes eid ename salary addr emp mgr mid mgr decrypt temp relation operator compute temp corresponding table contain attributes eid ename salary addr emp mid mgr temp decrypt encrypted columns temp drop auxiliary columns corresponding indices 

mapping conditions mapcond section study translate speci query conditions operations selections joins corresponding conditions server side representation 
translation function called mapcond know conditions translated ready discuss relational operators translated server side implementation query trees translated 
relation server side stores encrypted tuples attribute indices determined mapping functions 
client stores meta data speci indices information partitioning attributes mapping functions client utilizes information translate query server side representation executed server 
consider query conditions characterized grammar rules condition attribute op value condition attribute op attribute condition condition condition condition condition condition 
allowed operations op include discussion tables illustrate translation 
emp eid ename salary addr pid mgr mid proj pid pname budget attribute value condition arises selection operations 
mapping de ned follows mapcond de ned section function maps identi er partition contains value instance consider emp table mapcond eid eid eid mapped mapping function attribute 
attribute value condition arises selection operations 
attribute de ned ordering mapping function attribute order preserving random di erent translations possible 
order preserving case translation straightforward mapcond random translation little complex 
check attribute value representation lies partitions may contain value formally translation mapcond map instance condition translated mapcond eid eid employee ids partitions identi ers 
note mapping de ned random case translate conditions involving attributes 
di erentiate cases translation query processing easier case 
attribute value condition symmetric previous 
di erentiate mapping function order preserving 
translation follows order preserving mapcond random mapcond map 
instance condition translated mapcond eid eid employee ids greater mapped identi ers 
attribute attribute condition arise join 
attributes di erent tables instances table 
condition arise selection attributes table 
translation mapcond pk pk partition partition pk 
consider possible pairs partitions overlap 
pair pk condition identi ers partitions pk 
take disjunction conditions 
intuition pair partitions may provide values satisfy condition partitions ident emp partitions ident mgr instance table shows partition identi cation functions attributes emp mgr 
condition emp mgr translated condition emp mgr emp mgr emp mgr emp mgr 
attribute attribute condition arise join selection 
assume condition just translating conditions inequality operator seen previously mapping condition depends mapping functions attributes order preserving random 
specify translation turn 
order preserving case list partitions identify partitions satisfy ordering condition 
speci cally mapping follows mapcond partition low order preserving order preserving translation symmetric way roles reversed 
mapping follows mapcond partition high order preserving case choice mappings 
choice speci partitioning translation follows mapcond pk low high pk partition partition 
random translation mapcond pk pk partition partition high pk low 
consider pairs partitions satisfy condition 
pair condition corresponding pair identi ers 
take disjunction conditions 
example condition emp translated emp mgr emp mgr emp mgr emp mgr emp mgr emp mgr 
condition emp mgr included partition attribute emp partition attribute mgr provide pairs values satisfy emp mgr 
condition attribute attribute mapcond mapping mapping attribute attribute described roles attributes reversed 
condition condition condition condition translation composite conditions follows mapcond condition condition mapcond condition mapcond condition mapcond condition condition mapcond condition mapcond condition translation mapcond condition treatment involved negated queries monotonic correct translation requires notation 
discussion 
operator follows mapping operator follows mapping 
conditions involve attribute operator discussed 

section describe individual relational operators selections joins set di erence grouping operators implemented proposed database architecture 
strategy partition computation operators client server 
speci cally attempt compute superset answers generated operator attribute indices stored server 
answers ltered client decryption generate true results 
attempt minimize done client possible 
furthermore try ensure possible operators executed client side applied tuples arriving answer stream soon arrive need store 
purpose guarantee client side operators eciently implemented 
implementation operators developed section section develop algebraic framework rewriting sql queries purpose splitting query computation client server 
explaining implementation operators consider simpli ed relations previous section emp eid mgr mid previous sections map functions emp eid emp mgr 
simplicity assume map function mgr mid emp eid shown 
addition denote relations operator notations 
emp eid emp mgr mid mgr partition identi cation functions attributes 
selection operator consider selection operation relation condition speci ed attributes straightforward implementation operator environment transmit relation server client 
client decrypts result operator implements selection 
strategy pushes entire implementing selection client 
addition entire encrypted relation needs transmitted server client 
alternative mechanism partially compute selection operator server indices associated attributes push results client 
client decrypts results lters tuples satisfy speci cally operator rewritten follows map cond notation operator executes server superscript highlight fact select operator executes server 
non adorned operators assumed execute client 
decryption operator keep attribute drop attributes 
explain implementation example eid emp 
de nition mapcond discussed previous section selection operation translated emp condition server mapcond eid join operator consider join operation join condition equality conditions case join corresponds equijoin general conditions resulting theta joins 
join operation implemented follows map cond 
adornment join operator emphasizes fact join executed server 
instance join operation emp emp mgr mgr translated emp mgr 
condition server condition de ned section 
grouping aggregation operator grouping aggregation operation denoted lg la lg refers list attributes grouping performed la corresponds set aggregation operations 
example operation count means create groups attribute relation group compute count function 
lg fcg la fg 
resulting relation contain attributes tuple result entry distinct value number tuples group reported attribute la grouping performed 
implementation grouping operator achieved follows fa ja lgg server group encrypted tuples attributes lg server perform aggregation corresponding la values attributes la results returned client performs grouping operation operation implemented eciently tuple belonging single group single group computed server 
result client needs consider tuples single group computing groups corresponding course aggregation functions speci ed la computed client computation requires tuples rst decrypted 
explain implementation example 
count eid emp want nd number employees department 
denote count eid operation translated emp rst grouping attribute server 
grouped tuples returned client decrypt data perform grouping operation attribute 
step done eciently tuples grouped server 
perform aggregation count eid count number employee ids 
sorting operator sorting operation implemented similarly grouping operator 
rst sort partition ids server 
strategy implement follows list corresponding list attributes 
grouping operation encrypted attributes mapping functions attributes order preserving grouping operation replaced corresponding sorting operation results returned client call decryption function perform operation sorting tuples attributes note amount done client compute postprocessing depends attributes listed order preserving mappings 
attributes order preserving mappings results returned server upto partition 
sorting results simple local operation single partition 
alternatively mapping order preserving useful compute server reduce amount client 
tuples grouped server implemented eciently merge sort algorithm 
example sorting operation eid emp implemented follows eid eid emp 
rst perform grouping operation eid emp relation server 
client decrypts returned tuples applies sorting operation emp duplicate elimination operator operator implemented similarly grouping operator list attributes attribute rst group encrypted tuples server attributes results returned decrypted client perform duplicate elimination operation example operation emp translated eid emp set di erence operator implementation di erence operation server dicult rst decrypting relations impossible tell tuple appears indices stored server meaningfully reduce amount done client 
assume relations set di erence compatible de ned attributes bn respectively 
rule implement set di erence operator map cond fa symbol superscript join emphasizes denoted operator implemented server side 
illustrate rule example 
suppose want compute emp mgr want nd employees managers 
query translated query emp eid emp mgr mid mgr eid emp mid mgr emp mgr condition mapcond emp eid mgr mid de ned section 
see attribute attribute case observations implementation set di erence operator noteworthy 
grouping results index attributes necessary translation correct grouping operator 
reason including grouping operator signi cantly reduce computation client 
example due grouping operator tuples null value attributes grouped 
resulting tuples set di erence operator arrive client tuples decrypted corresponding tuple immediately returned answer 
reason matching tuples cause potential elimination tuples projection subsequent set di erence implemented client side may restricted tuples corresponding value null 
furthermore computing projection attributes subsequent set di erence projections need consider single group formed operator time 
tuple di erent group eliminate tuple group 
performing grouping server side necessary signi cantly reduce computation client 
second optimization implementation set di erence operator outer join server care 
naive strategy transmit entire relations client decrypts computes set di erence 
naive strategy cheaper previous strategy size quadratic resulting high transmission decryption cost compared strategy transmitting relations individually computing set di erence client 
strategy depends content relations 
selecting speci strategy depends integrating framework cost query optimizer scope 
union operator essentially different union operators bag set semantics 
eliminate duplicates 
implementation union operator bag semantics straightforward wish compute union set semantics computed follows list attributes attribute implementation union operator server side straightforward technical challenge arises 
speci cally tuples originate able apply correct decryption function client correctly interpret values index attributes result server store additional attribute result union determine origin tuple originates 
adding attribute crucial correct implementation ignore discussion keep algebra simple 
full version illustrates need maintaining additional attribute resulting modi cations mapping functions developed algebra 
projection operator tuple relation encrypted single string attribute relation server projection implemented server 
result compute set attributes strategy transmit complete relation client decrypt relation client compute projection 
instance eid emp eid emp 
splitting query purpose section develop strategy split computation server client 
server implementation relational operators discussed previous section compute query possible remainder computation client 
objective come best query plan minimizes execution cost 
setting cost query consists components cpu cost evaluating query server network transmission cost cpu cost client 
variety possibilities exist 
example consider query emp table retrieves employees salary greater average salary employees department identi ed 
select emp name emp emp salary select avg salary emp emp emp avg sal ename emp sal original query tree 
emp avg sal ename emp emp sal replacing encrypted relations 
emp avg sal ename emp sal map cond emp doing selection server 
emp sal emp mapcond emp avg sal emp sal ename multiple interactions client server 
query plans employees average salary mgr emp mgr emp pid proj pid pname sal proj emp original query tree 
emp mgr emp pid proj pid sal proj emp mgr pname replacing encrypted relations 
evaluation join query 
corresponding query tree evaluation strategies illustrated figures 
rst strategy simply transmit emp table client evaluates query 
alternative emp mgr mgr emp pid proj pid pname sal mapcond pname mapcond sal proj emp rewriting selections 
emp mgr mgr mapcond pname mapcond sal proj emp emp pid proj pid pname sal pulling selections 
mapcond pname mapcond sal proj emp emp mgr mgr mapcond emp pid proj pid pname sal emp pid proj pid rewriting join 
mapcond pname mapcond sal proj emp mgr mapcond emp mgr mapcond emp pid proj pid pname sal proj pid emp pid emp mgr nal query tree 
query rewriting heuristic join queries strategy compute part inner query server selects possible tuples corresponding mapcond 
server sends client encrypted version emp table emp encrypted representation set tuples satisfy inner query 
client decrypts tuples evaluate remainder query 
possibility evaluate inner query server 
select tuples corresponding employees department 
results shipped client decrypts tuples computes average salary 
average salary encrypted client shipped back server computes join server 
results decrypted client 
heuristic rules separate queries immediately obvious rich set possibilities exist evaluating query framework decision exact query plan cost 
topic outside scope 
attempt primarily establish feasibility proposed model cost optimization relegated 
section restrict simpler task explore heuristic rules allow query tree split parts server part referred executes server rst client part referred executes client results query evaluated server 
objective minimize computation attempt rewrite query tree ort evaluating query occurs server client amount 
illustrate ideas examples 
rst example consider query computes names managers employees working project salary 
select emp mgr proj proj pname proj pid emp pid emp sal emp mgr rst step convert query corresponding query tree manipulate query tree generate plan standard query rewrite laws relational algebra 
shows query tree selections pushed relations proj emp 
relations encrypted stored server rst replace relation query encrypted relation resulting tree shown 
stands current query tree requires entire relations proj emp mgr sent client decrypt relations evaluate query 
replace selection operations implementation listed previous section resulting query tree shown 
notice corresponding tree server participating evaluation selection conditions 
objective perform computation server possible pull client side selection conditions pname sal join operator emp pid proj pid standard rewrite rules involving selections relational algebra 
new query tree shown 
rewrite query tree join implementation discussed previous section emp pid proj pid executed server 
shows query tree rewriting 
pull selections pname sal emp pid proj pid join operator emp mgr replace join operator implementation discussed previous section get nal query tree shown 
notice tree query processing done server 
results obtained server decrypted ltered client 
success splitting query server side client side depended able pull selection operations relational operations higher query tree repeatedly rewriting higher level operations operator implementations listed previous section 
situations selection operator pulled query tree illustrated example uses set di erence operator 
consider query retrieves set employees manager named bob 
corresponding sql query shown select ename emp eid select eid emp mgr eid mid ename bob strategy discussed easily convert query query tree shown 
execute query plan illustrated server submit client relation emp encrypted answers generated operator 
projections followed set di erence operator implemented client 
notice selection projection operators pulled set di erence operator dicult apply implementation set di erence operator discussed previous section evaluate set di erence server 
trick rewrite set di erence operator left outer join operator similar implementation set di erence discussed previous section 
rewrite law set di erence corresponding tree modi ed query tree shown 
pull selections projections outer join resulting query tree shown 
tree eid mgr mapcond ename bob mapcond eid mid emp mid emp eid mid ename bob query tree join computation server 
mid eid eid mgr mapcond ename bob mapcond eid mid emp mid eid mid emp eid mid ename bob rewriting di erence operator 
mid eid eid mid mapcond ename bob mgr emp eid mid eid mid ename bob mapcond eid mid emp pulling selection projection 
mid eid emp mapcond ename bob mgr mapcond eid mid mapcond eid mid eid mid ename bob eid mid emp final query tree 
query rewriting set di erence query 
manipulated operator implementation discussed previous section resulting nal tree shown 
nal tree performs query computation server results decrypted ltered nal answer evaluated client 

experimental evaluation conducted experiments show validity ectiveness architecture proposed 
section experimental results 
ran tests utilizing tpc benchmark 
tpc benchmark database created scale factor referred mb mb database respectively 
experiments conducted ibm intel personal computers pentium iii mhz processors mb ram 
computers performed server performed client client server architecture 
relevant software components ibm db microsoft windows operating system 
relations tpc benchmark includes multiple tables particular interest experimental study lineitem customer order tables 
partitioned attributes tables lineitem shipdate discount quantity orders orderdate custkey customer custkey partitions created partitioning criteria described 
encrypt rows relations blow sh encryption algorithm implemented java 
partitioning algorithm equi width equidepth histograms partition data di erent classes queries 
equi width equi depth histograms widely investigated context selectivity estimation databases 
detailed description constructing equi depth histograms 
queries considered di erent queries suite evaluation di erent aspects architecture 
rst query shown selection query single table involved join operations 
second query shown modi ed version tpc query number denoted 
query involves join operation tables customer orders 
rst successfully rewrote queries rewriting rules described executed translated queries client server architecture di erent partitioning schemes 
select sum discount revenue tpcd lineitem shipdate date shipdate date year discount quantity query rst set experiments tpc benchmark 
select orderdate tpcd customer tpcd orders custkey custkey orderdate date group orderdate order orderdate query second set experiments tpc benchmark 
experiment rst set experiments studied components query execution time architecture 
conducted tests increasing number buckets 
show results tests 
shown network communication cost client site query execution time signi cantly decrease increase number buckets 
reason due decreasing number rows returned server 
number buckets partition data increases server better capability lter false rows satisfy selection predicates 
network cost client site query execution time decrease sharply case server site query execution time 
experiments selectivity query approximately 
possibility prefetch batch doing table scan remained best choice database optimizer 
independently number buckets predicate evaluation performed sequential table scan causing steady behavior server site query execution time 
experiments compared query execution times architecture case having single server performs functions described architecture 
represents total data privacy represents row level data encryption decryption server trusted decrypt data 
shows comparison 
results different numbers buckets 
rst bar gure shows query execution time single server setup server selects columns encrypted tables performs real query selected rows 
second third bars show query execution times server side client side respectively query executed architecture 
experiments show architecture introduce signi cant overhead due proposed communication protocol client server 
experiment second set experiments studied queries include join operations 
experiments modi ed version tpc benchmark 
show client side server side total query execution times increasing number buckets join attributes custkey custkey query 
gure illustrates query response times decrease sharply increasing number buckets 
explained previous experiment behavior primarily increasing number buckets server better able eliminate tuples decrypted ltered client 
performance signi cantly improved client server side queries 
client side query execution time shows steep decrease greater server side query execution time 
reason due dominant cost decryption performed client site 
express fact shows query response times client side query execution time decryption clientside query execution time decryption plotted removing decryption cost query execution time 
studied rst set experiments shows total query execution times single server client server architectures 
results tests consistent previous ones 

application service provider asp model enterprise computing emerged rise internet technologies 
asp model service provider provide software service large client base internet 
services databases special 
data precious resource enterprise 
result privacy security data service provider site paramount 
addressed speci data privacy challenge owner database trust service provider data 
solution store data service provider encrypting decrypted owner 
developed techniques bulk executing sql queries done service provider need decrypt stored data 
technique deploys coarse index allows partial execution sql query provider side 
result query sent client 
correct result query decrypting data executing compensation query client site 
proposed technique operate sql query split server query client site query execution time includes network communication cost required transfer selected rows server 
number buckets query execution time client ite network cost server ite cost factors time 
number buckets query execution time single server server ite client ite comparison client server strategy single server strategy 
ect number buckets queries 
client server total query execution times 
ect decryption performed client site 
comparison client server strategy single server strategy ect number buckets join query 
client query 
service provider retains responsibility manage persistence data 
client gets total privacy cost cooperating query execution service provider 
client need manage data persistence continues bene service database service provider 

aes 
advanced encryption standard 
national institute science technology fips 
song wagner perrig 
search encrypted data 
proc 
ieee 
des 
data encryption standard 
fips pub federal information processing standards publication 
garcia molina ullman widom 
database systems complete book 
prentice hall 
hac um iyer li mehrotra 
executing sql encrypted data database service provider model 
technical report tr db database research group university california irvine 
hac um iyer mehrotra 
providing database service 
proc 
icde 
ioannidis poosala 
histogram approximation set valued query answers 
proc 
vldb pages 
jagadish jin ooi 
tan 
global optimization histograms 
proc 
acm sigmod 
shapiro connell 
accurate estimation number tuples satisfying condition 
proc 
acm sigmod 
rivest adleman 
data banks privacy homomorphisms 
foundations secure computation pages 
rivest shamir adleman 
method obtaining digital signatures public key cryptosystems 
communications acm 
schneier 
description new variable length key block cipher blow sh fast software encryption 
cambridge security workshop proceedings 
silberschatz korth sudarshan 
database system concepts rd edition 
mcgraw hill book 
tpc 
benchmark speci cation 
www tpc org 
winslett ullman 
je rey ullman speaks higher education database theory 
sigmod record 
