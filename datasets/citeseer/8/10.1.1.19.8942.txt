tagless staged interpreters typed languages emir pa ogi school science engineering oregon health science university cse ogi edu walid taha computer science department yale university taha cs yale edu tim sheard ogi school science engineering oregon health science university sheard cse ogi edu multi stage programming languages provide convenient notation explicitly staging programs 
staging definitional interpreter domain specific language way deriving implementation readable efficient 
untyped setting staging interpreter removes complete layer interpretive overhead just partial evaluation 
typed setting hindley milner type systems allow exploit typing information language interpreted 
practice slowdown cost factor times 
previously type specialization tag elimination applied problem 
propose alternative approach expressing definitional interpreter dependently typed programming language 
report experience issues arose writing interpreter designing language 
demonstrate soundness combining staging dependent types general sense formalize language called meta prove type safety 
formalize meta extend shao saha trifonov lh language multilevel setting 
building lh allows demonstrate type safety setting type language contains calculus inductive constructions having repeat needed establishing soundness system 
keywords multi stage programming definitional interpreters calculus constructions domain specific languages years substantial effort invested development theory tools rapid implementation domain specific languages dsls :10.1.1.37.5006
dsls formalisms provide users notation appropri supported nsf ccr 
supported nsf itr 
supported nsf ccr 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp october pittsburgh pennsylvania usa 
copyright acm ate specific family tasks 
promising approach implementing domain specific languages write definitional interpreter dsl meta language stage interpreter manually adding explicit staging annotations multi stage programming applying automatic binding time analysis line partial evaluation 
result steps staged interpreter 
staged interpreter essentially translation subject language dsl target language compiler target language approach yields simple compiler dsl 
addition performance benefit compiler interpreter compiler obtained process retains close syntactic connection original interpreter inspiring greater confidence correctness 
concerned subtle costly problem arise subject meta language statically typed 
particular meta language typed generally need introduce universal datatype represent values uniformly remain typed see detailed discussion :10.1.1.34.5353
having universal datatype means perform tagging operations run time 
subject language untyped writing ml interpreter scheme checks really necessary 
subject language statically typed writing ml interpreter ml extra tags really needed 
necessary statically type check interpreter 
interpreter staged inherits weakness generates programs contain superfluous tagging operations 
early estimates cost tags suggested produces upto times slowdown sml nj system 
extensive studies metaocaml system show slowdown due tags high times 
remove tagging overhead inherent universal types 
possibility proposed tag elimination transformation designed remove superfluous tags post processing phase 
scheme dsl implementation divided distinct stages traditional 
extra stage tag elimination distinctly different traditional partial evaluation specialization stage 
essence tag elimination allows type check subject program interpreted 
checks superfluous tags simply erased interpretation 
semantically equivalent interface added interpretation 
tag elimination statically guarantee tags erased 
run tag elimination runtime multi stage explicit staging multi stage language usually implies meta language target language language 
language 
study alternative approach provide guarantee 
fact user introduces tags place type system meta language strong avoid need 
follows describe details problem 
interpreters untyped setting reviewing write simple interpreter untyped language 
notational parsimony ml syntax disregard types 
interpreter small lambda language defined follows datatype exp int string string exp exp exp fun eval env case env fn eval ext env eval env eval env provides simple implementation subject programs represented datatype exp function eval evaluates exps environment env binds free variables term values 
implementation suffers severe performance limitation 
particular able inspect result interpretation eval env find equivalent fn eval ext env term compute correct result contains expanded recursive call eval 
problem arises call byvalue call name languages main reasons called layer interpretive overhead degrades performance 
fortunately problem eliminated staging annotations 
staged interpreters untyped setting staging annotations partition program stages 
brackets 
surrounding expression lift surrounded expression stage building code 
escape drops surrounded expression previous stage splicing constructed code build larger pieces code appear brackets 
staging annotations change evaluation order programs evaluating lambda abstraction force unfolding eval function code generation time 
just adding staging annotations eval function change behavior achieve desired operational semantics fun eval env case 
env eval ext env 
computing application eval env directly yields term 
discussing issue prove adequacy representations correctness implementations interpreters scope 
examples done 
leftover latent recursive calls eval 
multistage languages come run annotation allows execute code fragment 
staged interpreter viewed user directed way reflecting subject program meta program handed type safe way compiler meta language 
staged interpreters hindley milner programming languages haskell ml hindley milner type system eval function staged typed 
branch case statement different type types reconciled 
hindley milner system circumvent problem universal type 
universal type type rich encode values types appear result function eval 
case includes function integer values 
typical definition universal type example datatype int interpreter rewritten typed program fun unf fun eval env case env fn eval ext env unf eval env eval env compute eval env get back value fn eval ext env 
just untyped eval stage version eval 
computing eval env yields 
problem superfluous tags unfortunately result contains tag may minor issue small program effect larger program profusion tagging operations 
tags necessary untyped 
know subject language statically typed example simply typed lambda calculus tagging operations really needed 
benchmarks indicate tags add time overhead large times 
number approaches dealing problem 
approaches guarantee time writing staged interpreter tags eliminated runtime 
tag elimination guarantees elimination tags particular examples requires separate meta theoretic proof obtain guarantee 
contributions propose alternative solution superfluous tags problem 
solution dependently typed multi stage language 
inspired writing dependently typed interpreters cayenne 
illustrate viability combining dependent types staging designed implemented prototype language call meta 
language vehicle investigate issues arise approach 
built compiler interpreter meta 
report issues arose trying develop dependently typed programming language opposed type theory 
meta features basic staging operators dependent types help avoiding redundant typing annotations dependently typed inductive families dependent datatypes separation values types ensuring decidable type checking treatment equality representation types equality type mechanism technical contribution formalizing multistage language proving safety sophisticated dependent type system 
capitalizing shao saha trifonov tl system turn builds number works typed intermediate languages :10.1.1.14.4810:10.1.1.36.3970
organization section shows take motivating example turn tagless staged interpreter dependently typed setting 
syntax semantics simple typed language show implemented direct fashion meta 
part writing interpreter similar done cayenne simplified presence dependent datatypes meta see related 
key observation interpreter needs defined typing derivations expressions 
dependently typed datatypes needed represent typing derivations accurately 
show interpreter easily staged 
step exactly untyped hindley milner setting 
section point address basic practical problems arise implementation interpreters dependently typed programming language 
show construct typing judgments consumed tagless interpreter 
review important clear separation computational language type language 
motivates need representation types effect code tagless staged interpreter 
section presents formalization core subset meta formal proof type safety 
approach builds shao saha trifonov development rich dependent type language called tl 
system type computational language includes basic effects non termination 
develop multi stage computational language show essentially techniques verify soundness 
key technical modifications needed addition levels typing judgments addressing evaluation type binders 
section discusses related section outlines directions concludes 
tagless staged interpreter section show example discussed dependently typed setting 
considering definition syntax semantics simply typed version subject language 
subject language syntax semantics defines syntax type system semantics sample language shall call sl 
simplicity development de bruijn indices variables binders 
semantics defines types sl mapped intended meaning 
example meaning type set natural numbers meaning arrow type function space furthermore map meaning type assignments product sets denoting finite number types assignment 
note semantics programs defined typing judgments maps elements meanings types 
standard way defining semantics typed languages implementation section direct codification definition 
interpreters meta interpreter sl simply implementation definition 
defining datatypes interpret basic types typing environments 
define datatypes meta uses alternative notation sml haskell datatype definitions 
example define set natural numbers writing datatype nat nat write inductive nat nat nat nat inductive notation convenient defining dependent datatypes wish define new types new kinds meaning types types 
type expression type assignments represented follows inductive typ typ typ typ typ inductive exp ei nat exp ev nat exp el typ exp exp ea exp exp exp inductive env env env typ env definitions means defining new type 
implement type judgment sl need dependently typed datatype indexed parameters type assignment env expression exp type typ 
define datatype shown 
constructor datatype corresponds rules type system object language 
example consider rule lambda abstraction lam 
basic idea judgments types principle view type rule constant combinator judgments 
combinator takes hypothesis judgments free variables returns judgment 
case rule requires environment types body lambda abstraction judgment returns judgment lt rule codified directly constructor jl env typ typ exp el 
definition see differences traditional datatype definitions inductive datatypes constructors dependently typed arguments range type indexed different indices 
return type constructors dependent datatypes provide information values 
interpreters types judgments defining judgments ready implement interpretations 
note type result interpretation judgments depends interpretation sl types 
dependency captured interpretation function 
presents implementation practical reasons discuss section datatype legal meta 
section explain basic ideas discuss need called representation types 
hi lt nat var weak lt lam app hi lt 

semantics sl inductive env exp typ jn env nat ei jv env typ ev jw env typ typ nat ev ev jl env typ typ exp el ja env exp exp typ typ ea 
typing judgment representation types fun typ case nat fun env case unit fun eval env rho exp typ case jn jv rho jw eval rho ev jl ee es ej fn eval ee rho es ej ja eval rho eval rho 
dependently typed tagless interpreter representation types tion types mapping type assignments types interpretation judgments eval 
function eval defined case analysis typing judgments 
function significantly computationally different section 
relatively minor differences include additional typing annotations case analysis typing judgments 
importantly writing require tags result values type system allows specify return type function tags longer needed help discriminate type value getting back runtime type system tells statically 
staged interpreters meta shows staged version eval 
saw earlier staging complicated hindley milner dependent types 
staged interpreter evals returns value type code 
note type value assignments changed see carrying runtime values sl carries pieces code representing values variable assignment 
executing program produces tagless code fragments interested 
crucial point note eval function performs tagging interpretative overhead traversing input considerable 
judgements eval run time may require deconstructing tagged values 
staging overheads performed stage overhead free term generated execution stage 
staging violations prevented standard way meta type system see technical report :10.1.1.19.8942
staging constructs davies addition cross stage persistence 
refer reader details nature staging violations 
adding run construct lines previous works considered 
turn addressing practical questions unique dependent typing setting including abovementioned judgements constructed 
practical concerns building type judgments amounts implementing typechecking type inference language interpreting 
practical concern types depend values lead undecidable unsound type checking 
happens values contain diverging side effecting computations 
section discuss concerns addressed context meta 
constructing typing judgments requiring user dsl supply typing judgment program interpreted acceptable depend situation 
user able implementation supplying plain text subject program 
implementation needs include type checking function 
function takes representation program produces appropriate typing judgment exists 
want implement type inference require type annotations input 
presents function typecheck 
function useful illustrating number features meta type result typecheck dependent sum written typ 
means result result typecheck option typ particular term typecheck typecheck consists sl type typing judgment particular type 
judgments built sub judgments case strong dependent sum elimination construct need results recursive calls typecheck 
case constructing application judgments illustrates interesting subtlety 
building judgment expression ea involves computing judgments sub terms 
judgments assign types tdom rt respective expressions 
definition inductive family order build larger application judgment tdom rt sl type typ values equal 
introduce language constructs meta express sort constraints values 
expression form assert introduces equality judgment id values equality types elimination construct cast cast expression type equality judgment type id 
type checker allowed equality prove cast correct equality judgment stating equal 
operationally expression assert evaluates subexpressions compares equality 
equal computation proceeds values equal program raises exception terminates 
cast construct sure equality judgment introduced assert evaluated runtime equality check simply proceeds evaluate argument expression 
alternative assert cast include equality judgments types part typing judgments build equality proofs part typecheck function 
approach possible proves exceedingly verbose difficult read example omitted 
assert cast serve convenient programming shortcut relieves user effort formalizing equality type level manipulating equality types 
representation types combining effects dependent types requires care 
example typecheck function partial input terms just typed sl 
inputs typecheck cause runtime pattern match failures equality assertion exception 
meta continue side effects non termination exceptions 
time dependently typed languages perform computations type checking determine equality types 
allow effectful computations leak computations may typed 
function omit option save space rely incomplete case expressions 
feature restricted ground types value shown equal runtime 
due space omit approach define alternative type checking function accompanying technical report :10.1.1.19.8942
fun env case unit code fun evals env rho exp typ code case jn 
jv rho jw evals rho ev jl ee es ej 
evals ee rho 
es ej 
ja 
fun typecheck env exp typ case ei jn ev nn case nn case ee jv ee case fn rt typ ev rt case rx typ rx jw rx typecheck ev el targ fn rt typ targ rt case rt typ targ rt jl targ rt typecheck targ ea fn rt typ rt fn rt typ rt case rt typ case rt typ case rt tdom ja tdom cast assert rt tdom tdom typecheck typecheck fun exp nat fn typ case typ case eval typecheck 
staged tagless interpreter function typecheck representation types done type checking risk non termination unsoundness typechecking time 
called preserving phase distinction compile time runtime 
basic approach dealing problem allow types depend types values 
disallowing kind dependency allow express type checking function produces term type depends value argument 
standard solution introduce mechanism allows limited kind dependency values types 
limited dependency uses called singleton representation types :10.1.1.41.548
basic idea allow bijections ground terms value type world 
rewrite interpreter type depend runtime values may introduce effects typechecking phase 
computation type checking phase guaranteed completely effect free 
run time values forced representation types reflect world values values inductive kinds 
meta special type constructor express kind dependency 
example define inductive kind nat inductive nat nat nat nat note definition exactly type nat classified 
definition encountered introduced constructors type possibility special type constructor write refer type unique inhabitant call rep 
presents implementation representation types 
introducing restriction type system requires turn definition exp env typ definitions kinds just change character definition 
terms kinds general recursion defining interpretation 
special primitive recursion constructs provided type language define interpretations 
judgments remain type 
type indexed types values 
part definition judgments interpretation function change 
need change judgments case natural numbers augmenting representation value number 
constructor jn jn env nat rn ei definition eval changed accordingly 
modified eval uses helper function convert representation natural type natural number definition typecheck function requires substantial changes 
particular function requires carrying case analysis types :10.1.1.36.3970
purpose meta provides special case construct 
pattern matches value type kind provided representation value type 
pattern matching inductive kinds performed presence corresponding runtime value appropriate representation type 
inside body case expression rep provides representation value part inductive constructor bound 
practice see fundamental reason distinguish 
identifying requires add special support syntactic sugar particular representation type 
formal development section report main technical result type safety formalized core subset meta 
result shows multi stage programming constructs safely integrated sophisticated dependent type system tl 
follow approach developers tl build computation language uses tl type language 
integrating formalization tl framework gave significant practical advantages formal development important meta theoretic properties type language tl proven 
change type language results church rosser property type language decidable equality type terms easily reused proofs 
computational language lh 
tried difference languages small possible 
result proof type safety similar type safety proof lh able reuse certain lemmata techniques developed lh proof 
detailed proof type safety extended technical report :10.1.1.19.8942
defines computational types step needed integrate tl framework 
syntax computational language 
language contains recursion staging constructs 
contains predefined representation types naturals booleans 
construct lh provides propagating proof information branches analogous construct full implementation inductive datatypes style left 
arbitrary dependent types prohibited universal existential quantification express dependencies values types kinds 
example identity function naturals expressed follows ln nat lx nat formalize assert cast construct requires extending language computational types equality judgment types 
similarly add appropriate constructs syntax able define small step semantics staged language define syntax terms families expressions values 
typing judgment appropriately extended level annotations 
due lack space show relevant definitions type system small step semantics proofs relevant theorems included companion technical report :10.1.1.19.8942
list important theorems 
lemma progress 

proof structural induction examination cases typing judgment 
lemma subject reduction 
proof cases possible reductions theorem type safety 


type safety follows subject reduction lemma progress lemma lemmas 
development wright felleisen syntactic technique :10.1.1.44.5122
inductive nat zero nat succ nat nat inductive nat nat nat nat inductive typ typ typ typ typ inductive exp ei nat exp ev nat exp el typ exp exp ea exp exp exp inductive env env env typ env inductive env exp typ jn env nat rn ei jv env typ ev jw env typ typ nat ev ev jl env typ typ exp el ja env exp exp typ typ ea val typ primrec typ nat fn fn val env primrec env unit fn fn typ fun cast nat rn nat rn zero succ cast rep fun eval env rho exp typ case jn rn cast rn jv rho jw eval rho ev jl ee es ej fn eval ee rho es ej ja eval rho eval rho fun typecheck env re exp rs typ rs ei jn rep ev rep re ee rep jv ee re fn typ ev case rx typ rx jw rx typecheck rep ev rep ev el targ fn typ targ case typ targ rep targ jl targ typecheck targ rep targ rep ea fn typ fn typ case typ case typ tdom rep ja tdom cast assert tdom tdom typecheck rep rep typecheck rep rep 
tagless interpreter representation types inductive kind nat bool 
tup nat 
nat pk kind pk kind ks pk ks pk eq nat nat 
tl definition types type variables tl type expressions tl exp tt ff fix open sel assert cast lx lx exp tt ff fix open sel assert cast tt ff fix hv assert 
syntax related barendregt high level theory dependent type systems 
number strictly terminating functional programming dependent type theory literature 
cayenne dependently typed programming language 
essence direct combination dependent type theory potentially non terminating recursion 
fact implement interpreter similar discussed 
extends done cayenne respects cayenne allows types depend values ensure type checking terminates 
second cayenne support dependent datatypes writing interpreter involves separate proof object encode information carried just threaded program 
number parameters passed meta cayenne implementation eval function dependent datatypes meta allows direct analogy standard definition semantics typing judgments raw terms 
third cayenne provide explicit support staging essential component achieving performance results achieved tagless staged interpreters 
xi pfenning study number different practical approaches introducing dependent types programming languages 
concentrates limiting expressivity dependent types limiting constraints need solved arithmetic problems 
singleton types xi context dml 
idea number works developed idea representation types intensional type analysis 
logical frameworks dependent types basis proof systems 
related logical frameworks sufficient purposes interested computational programming languages effects termination 
shao saha trifonov generic framework safely integrating computation base language rich dependent type system losing decidability soundness typechecking 
dybjer extensively studies semantics inductive sets families simultaneous inductive recursive definitions 
tl uses type level value level 
coq proof assistant provides fairly extensive support kinds definitions 
interesting explore integration second techniques programming languages 
interesting problem self interpretation possible programming language 
possible languages 
clear done dependently typed language 
exploring problem interesting 
staged type inference means obtaining programs tags 
techniques discussed probably closest spirit tag elimination 
fact multi stage setting tag elimination applied runtime non standard type analysis 
key differences staged type inference system code type reflect type information type information determined dynamic type checking 
importantly success failure staged type inference depend value code type undergone simplification easy return value tells runtime language dynamic inference succeeded 
tag elimination hand works code explicit static type 
additionally carefully crafted fall back plan projection embedding pairs runtime tag elimination guaranteed denotational semantics certainly operational semantics independently test code analysed simplifications may done subject program 
shown dependently typed programming language express staged interpreter completely circumvents need runtime tagging operations associated universal datatypes 
doing highlighted key practical issues arise trying develop staged interpreters dependently typed language 
need functions build representations typing judgments interpretation function defined 
second need representation types avoid polluting type language impure terms computational language 
demonstrate staging constructs dependent types safely combined formalize language multi stage computational language typed shao saha trifonov tl system 
allows prove type safety fairly straightforward manner having duplicate done tl system 
practical concern dependent types writing interpreters systems decidable type inference view highly valued feature typed language 
find annotations burden simple tricks implementation avoid need redundant annotations 
carrying developed deeper appreciation subtleties involved dependently typed programming implementation type checkers dependently typed languages 
current implementation prototype system available online 
step study integration dependently typed language practical implementation multi stage programming metaocaml 
lot opportunities context dependently typed languages explore 
examples include syntactically lighter support representation types formalizing simple tricks implementation help alleviate need redundant type annotations 
interested exploring dependent types reflect resource needs generated programs 
lennart augustsson 
cayenne language dependent types 
available www cs chalmers se cayenne 
lennart augustsson magnus carlsson 
exercise dependent types typed interpreter 
workshop dependent types programming gothenburg 
available online www cs chalmers se cayenne interp ps 
henk barendregt 
lambda calculi types 
abramsky gabbay maibaum editors handbook logic computer science 
oxford university press oxford 
jon bentley 
little languages 
cacm 
cardelli 
phase distinctions type theory 
manuscript 
thierry coquand bengt nordstrom jan smith von 
type theory programming 
bulletin european association theoretical computer science february 
columns logic computer science 
karl crary stephanie weirich 
flexible type analysis 
proceedings fourth acm sigplan international conference functional programming icfp volume acm sigplan notices pages september 
acm press 
karl crary stephanie weirich 
resource bound certification 
symposium principles programming languages popl pages january 
acm press 
karl crary stephanie weirich gregory morrisett 
intensional polymorphism type erasure semantics 
international conference functional programming icfp baltimore maryland usa pages 
rowan davies frank pfenning 
modal analysis staged computation 
symposium principles programming languages popl pages st petersburg beach 
peter dybjer 
inductively defined sets martin lof set theory 
avron harper honsell mason plotkin editors workshop general logic february 
peter dybjer 
inductive sets families type theory set theoretic semantics 
huet plotkin editors preliminary proc 
st int 
workshop logical frameworks antibes france may pages 

ftp ftp inria fr inria projects coq types proceedings book ps peter dybjer 
inductive sets families martin lof type theory set theoretic semantics 
huet plotkin editors logical frameworks pages 
cambridge university press 
peter dybjer 
inductive families 
formal aspects computing 
peter dybjer 
general formulation simultaneous inductive recursive definitions type theory 
journal symbolic logic 
peter dybjer anton 
finite axiomatizations inductive inductive recursive definitions 
backhouse sheard editors informal proc 
workshop generic programming sweden june 
dept computing science chalmers univ techn goteborg univ june 
electronic version available win tue nl 
eduardo 
tutorial recursive types coq 
technical report tr inria rocquencourt may 
carl gunter 
semantics programming languages 
mit press 
robert harper furio honsell gordon plotkin 
framework defining logics 
proceedings symposium logic computer science pages washington 
ieee computer society press 
conference held cornell university ithaca new york 
robert harper greg morrisett 
compiling polymorphism intentional type analysis 
conference record popl nd annual acm sigplan sigact symposium principles programming languages san francisco calif pages new york ny january 
acm 
huang walid taha 
practical implementation tag elimination 

paul hudak 
building domain specific embedded languages 
acm computing surveys electronic december 
paul hudak 
modular domain specific languages tools 
proceedings fifth international conference software reuse pages 
ieee computer society june 
hughes lars pareto amr sabry 
proving correctness reactive systems sized types 
guy steele jr editor proceedings acm symposium principles programming languages popl volume st petersburg florida 
acm press 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prenticehall 
henning 
jones optimal specialization strongly typed languages 
pages 
meta dependently typed multi stage language 
available online www cse ogi edu 
metaocaml compiled type safe multi stage programming language 
available online 
cs yale edu homes taha metaocaml 
torben mogensen 
inherited limits 
partial evaluation practice theory volume lecture notes computer science pages 
springer verlag 
eugenio moggi walid taha el benaissa tim sheard 
idealized metaml simpler expressive 
european symposium programming esop volume lecture notes computer science pages 
springer verlag 
bengt nordstrom 
programming constructive set theory examples 
proceedings acm conference functional programming computer architecture nh pages new york 
acm 
bengt nordstrom kent peterson jan smith 
programming martin lof type theory volume international series monographs computer science 
oxford university press new york ny 
currently available online authors homepage 
oregon graduate institute technical reports 
box portland usa 
available online ftp cse ogi edu pub tech reports readme html 
emir walid taha tim sheard :10.1.1.19.8942
tagless staged interpreters typed languages formal development 
technical report ogi 
available 
christine paulin mohring 
inductive definitions system coq rules properties 
research report rr laboratoire de informatique du ecole normale superieure de lyon december 
christine paulin mohring 
inductive definitions system coq rules properties 
bezem groote editors proc 
st int 
conf 
typed lambda calculi applications tlca utrecht netherlands march volume lecture notes computer science pages 
springer verlag berlin 
frank pfenning 
logic programming lf logical framework 
gerard huet gordon plotkin editors logical frameworks pages 
cambridge university press 
frank pfenning peter lee 
leap language eval polymorphism 
josep fernando orejas editors tapsoft proceedings international joint conference theory practice software development volume lecture notes computer science pages 
springer verlag 
benjamin pierce 
basic category theory computer scientists 
mit press cambridge mass 
calton pu andrew black crispin cowan jonathan walpole 
operating system specialization 
proceedings workshop domain specific languages paris 
john reynolds 
definitional interpreters higher order programming languages 
acm national conference pages 
acm 
john reynolds 
definitional interpreters higher order programming languages 
higher order symbolic computation 
reprinted proceedings th acm national conference 
zhong shao andrew appel 
type compiler standard ml 
proceedings acm sigplan conference programming language design implementation pldi pages la jolla california june 
zhong shao saha trifonov 
type system certified binaries 
acm sigplan notices january 
tim sheard el benaissa emir 
dsl implementation staging monads 
second conference domain specific languages dsl austin texas 

mark shields tim sheard simon peyton jones 
dynamic typing staged type inference 
proceedings acm symposium principles programming languages popl pages 
yannis smaragdakis don batory 
transformation library data structures 
usenix conference domain specific languages october 
walid taha 
multi stage programming theory applications 
phd thesis oregon graduate institute science technology 
available 
walid taha editor 
semantics applications implementation program generation volume lecture notes computer science montreal 
springer verlag 
walid taha 
sound reduction semantics untyped cbn multi stage computation 
theory metaml nontrivial 
proceedings workshop partial evaluation semantics program pepm boston 
acm press 
walid taha el benaissa tim sheard 
multi stage programming axiomatization type safety 
th international colloquium automata languages programming icalp volume lecture notes computer science pages aalborg 
walid taha paul hudak wan 
directions functional programming real time applications 
international workshop embedded software es volume lecture notes computer science pages lake tahoe 
springer verlag 
walid taha henning 
tag elimination type specialisation type indexed effect 
subtyping dependent types programming workshop 
inria technical report 
walid taha henning john hughes 
tag elimination jones optimality 
olivier danvy andrzej editors programs data objects volume lecture notes computer science pages 
walid taha tim sheard 
multi stage programming explicit annotations 
proceedings symposium partial evaluation semantic program manipulation pepm pages amsterdam 
acm press 
robert tennent 
semantics programming languages 
prentice hall new york 
trifonov saha zhong shao 
fully reflexive intensional type analysis 
proceedings acm sigplan international conference functional programming icfp volume acm sigplan notices pages september 
acm press 
andrew wright matthias felleisen :10.1.1.44.5122
syntactic approach type soundness 
information computation 
hongwei xi frank pfenning 
eliminating array bound checking dependent types 
proceedings acm sigplan conference programming language design implementation pldi pages montreal canada june 
xi frank pfenning 
dependent types practical programming 
conference record popl th acm sigplan sigact symposium principles programming languages san antonio texas pages new york ny january 
acm 
