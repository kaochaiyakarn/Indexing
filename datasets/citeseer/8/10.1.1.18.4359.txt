hermes high performance reliable mram enabled storage magnetic ram mram new memory technology access cost characteristics comparable conventional dynamic ram dram non volatility magnetic media disk 
simply replacing dram mram main memory non volatile improve file system performance 
effective mram file system potential significantly improve performance existing file systems 
hermes file system mram dramatically improve file system performance permanent store file system data metadata 
particular metadata operations file system requests nearly free hermes require disk accesses 
data requests faster increased metadata request speed mram non volatile cache allow hermes better optimize data placement disk 
mram capacity small replace disk entirely hermes mram provide high speed access relatively small units data metadata leaving file data stored disk 

ethan miller elm cs ucsc edu current file systems optimized assumption stable storage system block oriented high latency device disk 
result existing file systems data structures algorithms transfer data large units take great pains ensure file system image disk remains internally consistent 
file system includes non volatile memory nvram usually limited amount temporary storage area facilitate staging data disk 
magnetic ram mram new memory technology currently development speed density cost dram non volatility disk 
investigating mram hermes high scott brandt cs ucsc edu computer science department university california santa cruz performance reliable mram enabled storage file system dramatically improve file system performance storing metadata data mram 
mram cost comparable dram totally replace disk types secondary storage mems 
researching effective ways limited amounts mram file system 
mram file system hermes major advantages existing file systems performance reliability 
discuss mram file system reduce cost metadata operations nearly zero leaving limited solely cpu speed 
increases speed file reads writes reducing metadata overhead allowing file system better lay data disk buffering writes longer safe mram 
file system reliability greatly improved 
simplifying metadata structures results complex reliable software 
keeping metadata mram allows hermes run consistency checks file system background normal operation allowing errors caught early spread 

hermes design darrell long darrell cs ucsc edu hermes file system built ground assumptions differ current file systems metadata accesses need large contiguous blocks metadata accesses take microseconds milliseconds 
assumptions differ underlying disk file systems require milliseconds access blocks data 

metadata management hermes maintains metadata mram avoiding need access disk metadata requests 
ability mram handle single word reads writes benefits hermes allowing simpler data structures 
example trees xfs efficient large blocks expense file system complexity 
hermes hand simpler data structures binary trees hash tables memory semantics need allocate structures large blocks 
keeping metadata mram prohibitive traditional file systems require overhead metadata mb dram gb disk may expensive memory costs exceeding disk 
hermes contrast extensive compression variable sized allocations drastically reduce needed space avoiding problem 
example inode unix require bytes little benefit reducing size disk retrieval time dominated access latency reduced smaller objects 
possible save small amounts dram expense transforming inode transferring disk memory information inodes compression difficult 
hermes commonalities inodes reduce required space 
example file inode contain pointer access control list user files identical permissions inodes share single list 
file index pointers benefit compression variable sized allocation 
file systems extents compress index lists storing lists extents variable sized blocks mram hermes eliminate wasted space 
potential problem keeping metadata mram may easy modify data structures potentially causing file system inconsistency 
wild file system operating system overwrite valid metadata mram corrupting file system 
hermes avoid problems techniques similar rio 
keeping file system mram protected explicitly necessary hermes ensure desired changes mram 
process switching page read read write page table fast significantly slow hermes mram operations particularly necessary metadata modified 

mram write buffer file systems hermes buffer writes memory reasons allowing process continue waiting write go disk reordering writes minimize disk latency waiting hope file deleted 
file systems writes hermes safe written mram 
allows hermes postpone writes long desired fear data loss due system crash 
write buffer hermes similar systems nvram important differences mram considerably faster nvram metadata updates accompanying write done immediately mram 
writes mram considerably faster writes flash ram require milliseconds 
mram faster write time reduces window vulnerability data lost system failure 
mram long term stable store data written kept long necessary 
allows hermes optimize data placement disk reducing time wasted disk access latency 
existing file systems run risk data loss hold data write buffer long 
systems non volatile ram battery backed ram lose data dead batteries addition usual dangers storing data ram 

mram file storage mram may useful disk reads particularly relatively large amount mram system 
disk latencies currently ms time disk transfer kb data 
file system keep blocks file mram transferring data mram disk seek completed 
combining technique file access prediction clustering secondary storage improve performance reserving scarce mram resource live data 
probe storage available technique effective latency data secondary storage lower reducing amount file data buffered mram increasing number files buffering possible 
write buffering caching file headers entire files small new technique 
mram technique attractive allows structures survive power loss system reboot enabling file system build cache time need preserve disk reload system restart 

performance hermes significantly outperform existing file systems reasons 
metadata operations hermes nearly free require mem ory type accesses 
table shows common file system request types noting disk operations needed satisfy 
existing file systems cache metadata dram updating original disk changes occur 
eliminate disk reads caching metadata writes go disk ensure consistency writes partial order enforced maintain file system consistency 
mes hand handles disk requests shaded columns entirely mram leaving file data reads writes disk 
results dramatically faster metadata operations requiring microseconds milliseconds complete 
data writes safely buffered mram indefinitely described section decreasing latency user write safe commit data 
table 
disk needed file system requests 
request global metadata type disk requests needed file metadata file index file data file stat read file read read write read read file write read write read write read write read write hermes metadata operations limited cpu speed file system satisfy time takes execute metadata operation cpu 
existing file systems operations sufficient execute file system request modern processor allowing single processor file server handle metadata operations second hermes able operations second simpler data structures fewer instructions manipulate need spend instructions managing disk file server provides average kb file block metadata operations server sustain mb second single commodity cpu 
simple mram resident data structures mes provide added speed way reduced lock contention 
disk file systems finegrained locking ensure high levels concurrency face relatively long metadata operations 
particular operations require reading data disk hold locks milliseconds potentially causing contention locks 
hermes contrast complete metadata reads updates microseconds 
time shorter scheduling quantum systems result high levels lock contention 
contention problem exacerbated sym metric multiprocessor systems hermes relatively course grained locking maintain low levels lock contention 

reliability file system reliability users important performance getting correct data better getting erroneous data 
hermes provide high performance seen section sacrificing reliability 
hermes reliable existing file systems reasons including lower software complexity ability continuously check system consistency 

reducing software complexity relatively simple structures mram mes reduces software complexity making file system software reliable 
simple data structures wellunderstood prone programming errors reducing likelihood bug hidden thousands lines complex code 
mram faster disk temptation programmers take shortcuts save microseconds making shortcut malfunction 
lower number locks needed hermes increase software reliability 
metadata operations locking structures need thousands locks file system 
uniprocessor system fact single lock entire metadata structure sufficient operations cpu bound gain minimal benefit interleaved requests 
multiprocessor file servers relatively small number locks file metadata disk allocation memory allocation sufficient guarantee processors waiting file system locks 
net result lower probability deadlock chance data improperly modified 

metadata checking hermes take active approach protecting file system consistency continuously checking metadata structures system running 
background process checking files second fully check system files minutes demands system resources 
checking file system metadata system operating increases reliability ways 
easier write program detects error write file system doesn produce errors place 
merely detecting error may sufficient attempt correcting prevent spreading rest file system 
second existing file systems metadata checked 
rely logging techniques recover quickly crash examine metadata written normal operation 
necessary full check metadata large file system files take hours days consume disk bandwidth time 
third extremely large file systems encountering new problem disk unreliability due firmware errors undetectable bit errors concern 
bit error rate problem file systems store terabyte data bit errors may go unnoticed days 
continuous checks current file systems assume code contain bugs underlying media reliable assumptions increasingly file systems grow larger complex 

backing metadata mram part computer subject component failure 
mram place metadata stored hermes guard mram failure 
logging metadata changes location holding mram 
done ways 
option write metadata changes disk 
similar logging involve ordering issues metadata updates conventional systems suffer 
second option keep metadata log different bank mram holding original metadata 
mram removed computer placed new contents read solution sufficient back metadata little cost 
case metadata update logging requires little space 
majority metadata updates timestamp modifications recorded bytes 
complex modifications take space mram buffer changes flush disk times minute 
mechanism means total mram failure chip failure lose small amounts data consistency affected 
important remember chip failure common source computer failure chip failure affects file systems memory caching buffering 

related builds areas file system research research non volatile ram nvram systems schemes reduce latency disk accesses particularly metadata relevant 
douglis wu proposed nvram hold entire file system :10.1.1.17.2863
approach acceptable relatively small file systems mram nvram expensive replace disk general purpose file systems 
additionally flash ram systems support single word writes requires ms write relatively large block data 
prevents fine grained modification data non volatile memory 
envy copy write buffering get long erase latency flash ram approach required extensive garbage collection similar log structured file systems :10.1.1.17.2863
nvram long recovery file system reliability restrictions small size coarse grained write access 
systems nvram non volatile cache disk data lives disk 
design improves file system reliability reducing window vulnerability written data improves performance relaxing metadata write constraints 
allow rich metadata structures possible metadata permanently resident mram writes sent disk requiring disk seeks consuming disk bandwidth 
techniques reducing disk latency improving reliability metadata include writing data nearest free disk blocks logging soft updates 
techniques reduce access latency writes reduces number blocks written 
additionally techniques little caching speed metadata read access 
technique combining metadata file data allows data metadata small files read written single contiguous request 
technique tried relatively small files 

current research research mram file systems specifically hermes just begun 
described ways mram improve file system performance questions remain 
example happens mram limited 
insufficient mram available metadata hermes efficiently transform memory structures disk structures infrequently files 
correct tradeoff mram metadata write buffering uses caching blocks file reduce access latency 
exploring issues related mram distributed file system 
clearly form sharing similar cooperative caching necessary fully utilize mram system 
differences access latency network lower disk considerably higher mram 
just research new technology mram file systems avenues research pursue 

magnetic ram available commercially years crucially important file system designers incorporate file systems effectively 
shown magnetic ram dramatically improve file system performance reliability 
file system hermes keep metadata mram allowing nearly free metadata operations limited cpu speed 
mram non volatile need flush metadata disk improving file system data bandwidth freeing disk need handle frequent metadata accesses 
file system reliability benefits mram 
simpler metadata structures possible mram reduce file system complexity increase software reliability 
background metadata consistency checking likewise increase chance error increasing file system reliability errors soon happen 
combination performance reliability mram attractive technology incorporation file systems 
amer long noah low cost file access prediction pairs th ieee international performance computing communications conference pp 

baker ousterhout seltzer non volatile memory fast reliable file systems th conf 
architectural support programming languages operating systems asplos pp 

blackwell harris seltzer heuristic cleaning algorithms log structured file systems proceedings usenix technical conference pages january 
das de sousa melo freitas technology assessment implementation elements semiconductor components magnetic random access memory mram architectures ieee trans 
pp 

dahlin wang anderson patterson cooperative caching remote client memory improve file system performance proceedings st symposium operating systems design implementation osdi pages 
douglis caceres kaashoek li marsh tauber storage alternatives mobile computers proceedings st symposium operating systems design implementation osdi pp 

english stepanov loge self organizing disk controller winter usenix technical conference pp 

ganger kaashoek embedded inodes explicit groupings exploiting disk bandwidth small files usenix technical conference pp 

griffin schlosser ganger nagle operating system management mems storage devices th symp 
operating systems design implementation osdi pp 

hagmann reimplementing cedar file system logging group commit th acm symposium operating systems principles pp 

hitz lau file system design nfs file server appliance winter usenix conference 
lowell chen free transactions rio vista th acm symposium operating systems principles pp 

mckusick ganger soft updates technique eliminating synchronous writes fast filesystem freenix track usenix technical conference pp 

roselli lorch anderson comparison file system workloads usenix technical conference pp 

rosenblum ousterhout design implementation log structured file system acm transactions computer systems pages 
sweeney hu anderson peck scalability xfs file system proceedings usenix conference pages 
wu zwaenepoel envy non volatile main memory storage system th conf :10.1.1.17.2863
architectural support programming languages operating systems asplos pp 

