software framework real time corba telerobotic systems robotics intelligent machines laboratory dipartimento di ingegneria dell informazione university parma italy ce technological developments distributed systems led new telerobotic applications virtual laboratories remote maintenance complex equipment 
applications satisfy general requirements distributed computing location transparency interoperability domain specific requirements reconfigurability guaranteed performance real time operation cooperation robots sensory systems 
describe software framework distributed telerobotic systems exploiting advanced corba features including asynchronous method invocation real time priorities 
framework allows development portable multithreaded clientserver applications supporting concurrent preemptable actions target robot system evaluated laboratory setup including robot manipulator cameras accessible multiple clients 
traditional approach robot teleoperation dedicated system architecture ensuring tight coupling master device slave robot means dedicated connection 
approach unable cope novel remote operation paradigms tele teaching virtual laboratories line robots projects requiring collaboration geographically distributed users 
top seemingly conventional telerobotic system architecture new applications require support distributed collaboration multiple sites dynamic reconfiguration physical robotic resources user connections public outreach media covered experiments 
order available multiple users physical resources robots sensors managed software applications termed servers accepting incoming requests providing control arbitration resource allocation 
users interact client applications task programming monitoring 
key feature system architecture interconnection channel shared multiple clients servers enable distributed collaboration 
users arbitrary locations distance cost factors dictate interconnection channel implemented internet 
standard general purpose interconnection technologies providing essential functional advantages exacerbates latency bandwidth problems faced telerobotic systems 
problems compound certain properties typical new applications 
distributed telerobotic applications systems extremely heterogeneous implemented previously available devices hardware acquired different vendors running different operating systems programmed variety languages 
systems dynamic general scenario sensor robot controllers dynamically connect network resulting changes number location peers service roles change run time need load reconfiguration improve distributed system performance 
clients register disconnect run time bid commanding supervisory roles leading variety dynamic interaction patterns 
building teleoperation architecture scratch heterogeneous dynamic systems feasible due economic time constraints 
trend modern distributed systems design open reconfigurable scalable architectures built commercial shelf cots components 
object oriented oo design methodology provides fundamental concepts inheritance polymorphism hiding useful development complex distributed cots applications 
area exploitation middleware software low level apis client server applications major approach pursued cope dynamic flexible applications 
established middleware implementations common object request broker architecture corba www corba org vendor independent specification promoted object management group omg www 
omg org 
corba overcomes interoperability alias heterogeneity problem mentioned allows integration systems built different software technologies programming languages operating systems hardware 
middleware corba simply tool connecting objects heterogeneous processing nodes implement application 
additional required develop telerobotic application standard client server application 
implementing servers known complex time consuming task number specific constraints met 
telerobotic system server satisfy requirements multithreaded structure concurrency mechanisms allowing improvement perceived response time simplifying sharing cpu computational communication services 
able deal client requests preserving ordering exhibit different kinds reaction depending urgency 
operate real time allow implementation appropriate control laws guaranteed operation 
server provide synchronization mechanisms exclusive allocation non sharable resources 
extension corba client side operator operation station data interpretation state shared network commands state processed data state robot server sensor data processing robot arm sensors camera laser infrared server side components telerobotic system 
standard api multithreading synchronization asynchronous calls available forcing developers build dedicated solutions rely proprietary features 
describe framework exploiting latest corba specifications meet requirements modern telerobotic systems 
section provides background advanced corba features specifically features exploited framework proposed 
section describes proposed general framework distributed telerobotic systems 
experience collected far implementing framework laboratory setup reported section 
section discusses related section summarizes 
advanced corba features inception standard corba supported interoperability heterogeneous systems providing flexible communication activation substrate distributed computing environments 
detailed description corba basic components 
internet inter orb protocol iiop interoperable object ior interface definition language idl corba services components allow corba successfully exploited standard client server applications 
section summarizes new features corba standard impact telerobotic applications 
extensions cots middleware critical applications requiring strict control allocation cpu memory resources 
telerobotic system provide operator guarantee correct execution priorities application tasks server 
peer heterogeneity applications precludes common priority scale forcing users earlier corba versions concern low level details threads different oses 
new rt corba specification developers rely portability endsystem priority 
new feature priority mapping converts corba priority levels assigned corba operations os native priority levels vice versa 
teleoperation applications require task executed right priority server side 
rt corba allows models adopted method invocation basis server declared client propagated 
server declared model server defines execution priority object methods client propagated exploited proposed framework client establishes prior registration video object commander command wrapper name vid video name sending command creation command wrapper server ami manipulator handler ami sensor handler creation ami reply handlers creation video object client side orb video starting video client starting naming service searching naming service object iors registration objects console starting console client name sending data clients server creates starting server sens sensor creation robotic objects server side manip manipulator collaboration diagram teleoperation system corba 
service available naming service providing location transparency 
servers clients created communication peers 
ity operation priority honored server 
control robots sensors teleoperated multiple remote clients requires multithreaded server allowing concurrency actions 
server able discriminate services granting privilege critical tasks emergency reading proximity sensors avoid priority inversion tasks blocking high priority ones 
support programming multithreaded servers rt corba provides thread pool mechanism enabling preallocation server resources 
thread pool mechanism group threads statically created corba server start time 
threads ready bound requested methods fixed cap set dynamic threads created static threads exhausted 
thread pools avoid overhead thread creation destruction run time help guaranteeing performance constraining maximum number threads host 
extreme condition set threads bound low level requests server deadlines high priority actions situation clearly unacceptable robot teleoperation system 
avoid depletion threads low priority requests thread pool partitioned lanes different priority 
partitioning sets maximum concurrency degree server amount done certain priority 
partitioning lanes related parameters modified run time server freedom reserved higher priority methods borrow threads lower level lanes lane exhausted 
rt corba allows consistent synchronization methods semantics corba applications middleware means mutex interface implementing mutual exclusive lock 
mutex interface basic synchronization mechanism improves portability correctness application code rt corba lacks higher level synchronization mechanisms condition variables semaphores barriers 
standard api priority inversion protocol prescribed rt corba user rely orb specific apis fully prevent priority inversion 
additional advanced feature exploited proposed framework drawn corba messaging specification 
standard service requests corba systems rely synchronous method invocation smi model blocks client server notifies requested activity 
approach acceptable simple teleoperation applications consisting stepping action time possibly go mode smi clearly unsuited advanced telerobotic scenarios user invoke execution multiple concurrent actions server 
examples tasks coordinated operation multiple arms concurrent sensing manipulation 
non blocking invocations earlier corba versions relied methods guaranteeing delivery request techniques ing significant programming efforts known error prone 
efficient way perform non blocking invocations available extension corba messaging asynchronous method invocation ami model polling callback approach 
ami smi share object interface clients choose synchronous asynchronous calls server implementation affected 
ami allows corba system efficiently activate multiple concurrent actions remote teleoperated side shown section 
framework section describes proposed general framework distributed telerobotic systems 
collaboration diagram provides snapshot main components interaction 
robot server implemented robot server allows concurrent control robots sensors 
receives commands executes sends results sensor data back clients 
server application multithreaded sensitive priority requests 
start time server creates thread pool lanes 
threads lane take care requests range priorities leader followers pattern 
server associates thread pool real time portable object adapter 
server process uses create delete corba objects controlled robot sensor dispatch incoming requests corba servants object concrete implementations 
registration created robot sensor objects naming service provides location transparency 
adding support new device robot sensor server simply requires write interface methods available clients implementation 
location transparency multithreaded control command concurrency priority mapping provided server implementation 
moving device robot server need change code 
robot server code fully portable number operating systems support multithreading real time including qnx vxworks general purpose oses 
distributing sensor data sensor data distributed clients observer pattern 
pattern requires definition corba classes available sensor subject server side observer client side 
example implemented solution video ccd camera follows 
receive video data camera client calls method attach video camera object subject passing video object observer figures 
camera object server holds list video objects attached 
video data ready server invoke video obj draw image data method attached video objects 
method detach allows client video stream removing list 
data acquisition distribution synchronized blocking corba calls polling operation technique efficient 
new sensors reuse code implementation requires definition data type 
robot client users define application tasks submitting sequence single commands move arm position pi get robot position start grabbing video stream 
means program interpreted 
control flow sequence single actions client synchronous method invocations remote object method 
flow involves set actions run parallel robot client uses asynchronous method invocation model 
order ami remote object client define ami handler item orb manage server replies related previous ami calls 
additional features current robot client implementation location transparency controlled devices available naming service transparency servers oses rt corba services priority mapping possibility establish priority tasks client propagated model 
concurrency action execution asynchronous method invocation ami offers powerful tool support parallel execution actions server side 
server receives non blocking requests client dispatches thread pool priorities 
common approach execution parallel actions start soon possible requests reach server 
robotics applications set parallel actions time coordination skeleton manipulator cobegin boolean get robot speed set robot speed speed boolean get gripper position position move gripper pos position boolean get joints configuration move joint joint number angle boolean move joint joint number angle boolean park robot boolean get gripper openness boolean open gripper boolean close gripper boolean halt boolean restore boolean skeleton camera manipulator impl attach video format boolean detach video boolean stub video camera impl draw ims boolean image source server modularity framework eases integration new objects robots sensors server 
required define idl interfaces implementation exposed methods actions available clients 
class diagram shows idl interface manipulator camera 
execution required ensure logical correctness safety 
rationale waiting rendezvous strategy framework 
instruction termed cobegin prefixes invocation parallel actions server 
cobegin acts barrier method invocations execution start calls reached server 
implement cobegin condition variables mechanism provided rt corba 
code portability avoided os native system calls multithreading implemented barrier simple lock unlock functions available rt corba 
solution fully efficient waiting threads wake periodically check barrier state 
cobegin method mandatory parallel execution actions 
cobegin server schedules ami requests soon arrive 
experimental assessment implementation framework written ace orb tao freely available open source real time implementation corba 
edge supporting rt corba host server intel mhz mb os solaris host client intel dual mhz mb os linux dedicated parallel line bnc video connection controller fast ethernet network mbit fast ethernet switch mbit experimentation setup 
ccd video robotic arm puma host client amd mhz mb os solaris proprietary features considered inclusion version standard 
tao supports operating systems including solaris rt linux vxworks qnx lynx 
framework described section build telerobotic system applications simulated workload 
telerobotic testbed teleoperation testbed composed clients server running machines connected fast ethernet switch 
server controls physical devices puma robot arm ccd cameras wrist mounted ceiling shooting testbed area 
robot server runs solaris general purpose operating system supports real time multithreading 
robot clients run solaris linux machines 
controlling client located solaris machine order set realtime features server monitoring clients run linux incomplete real time support 
applications implemented test correctness framework identify relevant parameters robot server 
lanes low medium high priority defined thread pool 
low medium priority lanes supply threads execution actions composing goal task 
high priority lane supplies threads emergency actions guarantee immediate dispatch scheduling algorithm server priority level round robin sched rr available operating system 
versions rt corba standard include dynamic scheduling algorithms earliest deadline maximum urgency minimum latency available tao proprietary exten smi optional ami pri ami smi pri smi ami pri ami pri command id start cobegin comm comm comm comm smi ami invocation mode pri priority level sampling intervals duration precedence graph concurrent task composed initial action start followed concurrent actions different priority 
sions 
description implemented applications short videos cues available project page ce projects teleoperation 
concurrent execution experiments involving simulated workload carried evaluate correctness robustness robot server 
robot server tested variety sets concurrent actions different priority levels synchronization 
goal experiments verify effectiveness cobegin avoiding priority inversion execution parallel actions 
experiments described showing precedence relations duration priority method call 
correct outcome experiment requires concurrent methods executed priority 
compares experimental executions task 
cobegin top diagram medium priority action id request reaching server executed high priority action id 
cobegin bottom diagram priority threads guaranteed priority inversion occurs 
related relates area internet telerobotics aim build flexible cheap dynamic heterogeneous distributed telerobotic systems applications 
broad perspective applications collection 
main issue projects interaction web users lacking technical skills require command interfaces 
research views internet telerobotics method id method id cobegin time index cobegin time index experimental results concurrent service top bottom cobegin 
distributed robotic systems drs addressing issues arising implementation client server systems 
papers exploit interoperability location transparency provided corba ease system implementation applications distributed laboratory supervisory control scheme internet telerobotic system conceived provide assistance aged disabled people 
papers directly concerned implementation systems supporting distributed telerobotic applications 
hara propose framework oo programming robot control dalton taylor advocate nonblocking asynchronous communications viewed essential build distributed robotic systems 
feature available corba implementation relied architectural framework exploits non standard middleware 
believe current corba rt corba specifications including ami invocation model advanced features described section choice longer justified 
research departs prior art respects 
knowledge developed telerobotic application cots middleware merely interoperability location transparency full advantage multithreading real time features 
previous area asynchronous method invocation model asynchronous interface deemed essential feature 
rt corba technology matured leveraged develop reliable cots telerobotic systems strict control scheduling execution cpu memory resources 
technological developments distributed systems led new telerobotic applications virtual laboratories remote maintenance complex equipment 
viability cost effectiveness applications rely features cots systems location transparency interoperability 
distributed telerobotic applications pose additional challenges reconfigurability guaranteed performance real time operation cooperation physical robots sensory systems 
extensions corba specification better suited needs distributed telerobotic systems 
investigation initial largely positive assessment additional experimentation needed generate feedback middleware designers 
example corba synchronization mechanisms deserve improvement 
common concern corba systems system slower bigger difficult understand 
experience partially true long term projects evolving goals complex applications corba middleware provides far advantages 
described software framework distributed telerobotic systems exploiting advanced rt corba features achieve flexibility portability openness extensibility reusability application 
ami interface realtime features allow development portable multithreaded server supporting concurrent preemptable actions 
currently developing java advanced interface enabling skilled users graphically design tasks including concurrent conditional actions 
open question distributed telerobotic applications partitioning control task execution clients servers degree autonomy left servers overcome latency bandwidth limitations 
acknowledgments supported part murst italy project dependable reactive computing systems industrial applications cnr italy project 
fe robot system architectures distributed virtual laboratories 
ws int 
workshop tele education mechatronics virtual laboratories germany july 
backes tso 
mars pathfinder mission internet operations wits 
ieee int 
conf 
robotics automation leuven belgium may 

generic robotic motion control api kit technology corba communications 
ieee int 
conf 
robotics automation albuquerque nm april 
dalton taylor 
distributed robotics internet 
ieee robotics automation magazine june 
distributed object computing doc group 
real time corba tao ace orb 
www ece uci edu schmidt tao html 
douglass 
doing hard time developing real time systems uml objects frameworks patterns 
addison wesley 
fay wolfe cooper johnston 
real time corba 
ieee trans 
parallel distributed systems october 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
goldberg editors 
online robots 
mit press 
henning 
advanced corba programming 
addison wesley 
hara 
web top robotics 
ieee robotics automation magazine june 
jia 
internet robotic system common object request broker architecture 
ieee int 
conf 
robotics automation seoul korea may 
object management group 
common object request broker architecture specification revision october 

integration robotics laboratory corba 
ieee int 
conf 
systems man cybernetics orlando fl october 
rajkumar sha lehoczky 
realtime synchronization protocols multiprocessors 
ieee real time systems symposium huntsville december 
schmidt stal rohnert buschmann 
pattern oriented software architecture volume patterns concurrent networked objects 
wiley sons 
sheridan 
telerobotics automation human supervisory control 
mit press cambridge ma 
