modeling service level agreements composed services david daly gautam kar william sanders center reliable high performance computing coordinated science laboratory department electrical computer engineering university illinois urbana champaign urbana illinois usa crhc uiuc edu www crhc uiuc edu perform ibm watson research center box yorktown heights ny ibm com 
web services increasingly accepted step development hierarchical distributed services perform complex tasks 
focus develop guarantees performance aggregate service guarantees provided lower level services 
particular demonstrate problem example commerce web site implemented web services 
example transaction processing performance council tpc tpc benchmark specifies online store complete description functionality site description customers site 
develop models site performance performance sub services 
model results compared experimental data predict performance system varying conditions 
web services increasingly referred outsourcing internet allow remote services discovered accessed uniform manner execute functionality 
infrastructure web services developed form open standards soap material supported part national science foundation ibm 
opinions findings recommendations expressed material author necessarily reflect views national science foundation ibm 
done part daly intern ibm watson research center 
uddi wsdl closed standards 
web service customer query uddi universal description discovery integration server find needed services access wsdl web service description language descriptions services soap simple object access protocol protocol 
customer service provider negotiate contract including service level agreements slas customer finds appropriate service 
development outsourced web services allows service providers specialized efficient provide improved flexible services 
logical result outsourcing development hierarchical services outsourced services service aggregators complete web service customer outsourced services 
little overhead service aggregator able quickly develop deliver service customer contract needed levels service increase levels needed 
focus modeling services determine service levels guaranteed 
problem overview hierarchical aggregated services web services require contracts including slas negotiated 
slas stipulate minimum standards provided service usage constraints customer service 
agreements generally include penalties service levels meet guarantees sla violation 
relatively straightforward necessarily easy problem determine levels service guaranteed service provided entirely entity outsourcing subcomponents prediction performance individual services examined areas 
difficult determine level service offered service composed multiple services 
service provider may know guarantees offered slas component services need method compute sla composite service 
problem develop contracts customer service integrator service providers 
service integrator guarantees performance customer service providers guarantee performance services service integrator 
problem complicated fact service level composite service may simple combination service levels sub services 
situation requires simultaneous analysis relevant outsourced services focus 
address problem relating sla terms understand type guarantees offered sla 
providers commonly guarantee service completed certain time certain percentage time load certain value 
normally requests respond seconds load requests second slas form component services 
focus area commerce tpc focused situation service integrator implements commerce web site client 
integrator may combination traditional service providers outsourced web services implement ecommerce site providing integrator flexibility scale services needed low overhead 
service integrator external vendor internal organization immaterial 
need provide performance guarantees client 
commerce example specifically examine tpc benchmark developed transaction processing performance council tpc 
benchmark online bookstore 
users may search books view track orders perform functions 
pages dynamically generated application server product customer data stored back database 
tpc benchmark requires main services application server back database 
benchmark intended test unified system offerings vendor reason services outsourced 
standard sla guarantee percent satisfied requests satisfactory simple services sufficient commerce site example 
shift business metrics necessary properly meet requirements client 
client inherently care response time satisfaction customers site 
ultimately client concerned revenue profit service provider guarantees revenue profit factors service level influence metrics 
customer dissatisfied site leaves client loses potential revenue 
propose relate business metrics client interested service related metrics provider able measure report number customers leave transaction prematurely 
suggest sla terms commerce site form customers leave site prematurely service level fraction customers leave site prematurely dependent response time service levels component services represented single response time guarantee 
original sla form earlier component services simple services sophisticated sla required complete commerce site 
related performed relevant related modeling ecommerce systems 
revenue key metric determine effect options revenue 
almeida develop queuing models commerce systems determine resources needed meet demands system 
adjustments variability workload multiple classes requests 
demand system generated customer behavior model graph solved determine arrival rates queuing systems 
authors extended business focused concentrating revenue metrics revenue throughput potential lost revenue 
assumes resources application server database forth controlled hosting commerce site 
assumption valid focus directly revenue profits site 
deals similar systems context outsourced web services 
outsourced web services invalidates assumption resources direct control service provider 
addition web service aggregator merely developing implementing ecommerce site control products offered site reasonable expect revenue guarantees aggregator 
focusing revenue measure factors impact revenue controlled aggregator 
commerce sla models determine sla guarantees service integrator offer customer sla guarantees outsourced services model service submodels 
model major components uses determine sla guarantees 
workload model models load applied system 
incorporates behavior users determine requests 
addition sla commerce site user behavior users leave site prematurely poor service workload model explicitly model users leaving site prematurely completion normal activity 
second component system model 
system model captures performance services process user requests 
workload model needs determine load offered services predict customers leave site prematurely 
therefor understand user leave web site 
reason workload model includes models users accessing services 
simple model user behavior workload model 
users wait certain amount time page 
page takes longer allowed time load user attempts reload page 
attempts reload page certain number times frustrated leaves site 
model tracking times user reloads page number reloads gets preset threshold modeled user leaves site 
construct slightly complicated model user leaves site retry pages certain span time 
scenario complex dealt research 
need model system workload model 
system individual services 
model services latency throughput component determine total delay experienced user request 
latency component model represents network latency sending request server getting response server 
network latencies combined aggregate latency service affected load server 
local network expected bottleneck modeled service 
represent latency constant time delay 
corresponds low network load condition requests size take amount time traverse network 
network internet may experience local bottlenecks varying delays 
attempt account factor time 
second factor total delay request experiences accessing service latency service time 
service time total time process request request arrived service 
example number factors affect service time request including size request speed service requests service 
service exhibits parallelism process multiple requests time degradation service requests 
number requests processed time degradation service request degree parallelism service 
number requests greater degree parallelism requests processed time experience slowdown processing 
service time combined level parallelism determines throughput service 
throughput important system operator operators want process requests possible hardware 
user ultimately care throughput service delay experienced accessing 
parallelism service time allow determine delay unable compute solely throughput 
parameters sla values server processing delay selected match sla guarantee loss service detailed information available 
recall service sla defined section form requests take longer seconds complete load requests second values service delay parallelism service need determined sla values 
select average service delay meet sla guarantee unloaded machine 
delay specified delay distribution service specification includes type delay distribution normal negative exponential parameters describe particular distribution type 
negative exponential delay distribution information available 
negative exponential distribution requires average service time parameter 
simple matter determine parameter negative exponential distribution time sample value greater service time request loaded server complicated request may need compete resources leading longer service delays 
effect load request reflected degree parallelism service setting parallelism times service delay select parallelism server process requests second experiencing slowdown 
experimental validation demonstrate models ideas developed previous section simulating experiments bius tool running experiments experimental tpc configuration determine lost user rate commerce system represented tpc 
explicitly develop slas services models developed web services perform measurement experiments determine model parameters suggested previous section 
experiment unusually detailed demonstrate accuracy models 
addition measurements show sla guarantees component services determined 
simulation environment bius models simulated bius tool 
bius multi formalism multi solution extensible modeling tool discrete event stochastic models 
bius user parts system different formalisms ways describing model combine models form complete model 
study stochastic activity network san formalism generality 
sans consist places represented circles contain tokens activities represented bars remove place tokens places gates represented triangles control behavior activities allowing complex behavior 
shows san model user accessing home page site 
process starts token placed home submodel 
submodel composed submodels form complete model 
composition explained 
user generates requests request activity fires removing token home placing token apiece home req prog 
user waits token placed place home represents response 
token placed home token token req prog removed token placed viewing 
occurs time pass representing time user spends reading page done viewing activity fires removing token viewing putting place determines page visit 
alternatively response request takes long activity timeout fire user retry request 
drain lost activity ensures lost request eventually removed system 
fig 

san model user accessing home page fig 

san model application server fig 

san model db access home page model explain token goes home home home service model shown fig 
controls 
home home places shared models models number tokens place 
latency activity remove token home place place token piece processing iis queue 
delay latency activity represents network latency experienced request 
iis queue shared services application server 
processing time home page scaled iis queue value combined degree parallelism server 
home page requires db access time access modeled application server processing time 
token placed db db request done token placed 
shows model db access 
similar home page access 
token placed db delay firing latency processing time scaled number requests currently db 
similarly models represent user access pages site processing requests 
earlier description user behavior model stated user leaves requests retried 
modeled separate model describe space consideration 
user retries pages ends session prematurely 
user session normally 
tpc definition session ends home page request random timer expires 
behavior included model 
bius allows multiple models composed certain places held common shared rep join formalism 
join node combines multiple different models rep node creates multiple replications model 
cases places held common submodels 
models joined sharing identically named places create model user accessing site 
model replicated represent population users accessing site 
replicas final composed model share specific places iis queue db queue 
measure interest model percentage user sessions prematurely 
measures defined determine number sessions prematurely total number sessions 
ratio numbers user loss rate 
experimental environment tpc running lab lab set application server database run tpc benchmark local network 
application server ran iis jakarta ibm rs workstation back database resided aix box db 
servers client connected mbit ethernet 
client ran linux pentium iii workstation 
tpc users wait request complete sessions normally 
adjusted tpc client emulators retry requests time elapses leave site client retry requests 
adjustment model match behavior experimental setup additional step model needs parameterized match experimental system 
actual slas determine parameters attempted experimentally determine response times parallelism services 
calibrated values performing experiments user timeouts words users retry requests 
single user experiments run determine response time servers multiple user experiments run determine effect load services parallelism 
service provider perform similar experiments determine sla terms offered service 
analyzed page tpc different demands outsourced services 
results start calibration results 
calibration needed determine service delay parallelism services application server database server size requests page 
step thought determining terms offered sla services translating needed parameters 
calibration equivalent having sla terms accurate plus distribution information 
calibrate pages individually 
page multiple database accesses varying usage application server 
shows inverse cumulative distribution function delay accessing buy confirm page interactions interactions time response time experimental response time simulated time home buy confirm home buy confirm fig 

inverse cumulative delay distributions page accesses home page 
simulated results closely reflect experimental results 
services low variance completely unloaded systems accommodated erlang distribution negative exponential services 
buy confirm page large outlying probability density seconds experiments 
accommodate adjusted db access occasionally require larger amounts resources 
pages performed similarly buy confirm page slowest pages home page quickest pages 
service integrator determine requests page outsourced services size requests determine model parameters combining information performance guarantees offered service providers outsourced services 
determined relative request sizes performance service measurements delays pages understanding requests generated page 
validation model predictions models calibrated ran complete experiments compare loss rate modeled experimental systems 
systems gave similar loss rates component loss rates shown table 
table shows user retries number lost users users users willing wait seconds 
experiments minutes second 
simulations solved model times generate confidence intervals compared experiments solved 
note things results lower loss rates model reports losses timeouts higher loss rates appears higher probability retried request take long leading loss captured models 
expect models conservative overestimate loss low loss rates 
able account higher loss rate retried requests making retried requests higher demand services especially requests need retried larger average 
table 
simulation experimental results timeout length number users exper 
simulation exper 
simulation exper 
simulation timeouts loss timeouts loss timeouts loss results determine sla offered service integrator amount time user wait page 
instance user expected wait seconds si guarantee loss load users 
problem discovered system unstable high loss rates 
tpc benchmark starts new user session immediately ends order maintain constant number users 
lead increased load loss considered 
normally user leave causing load loss rate drop experiment new user requests increasing load decreasing 
analyzing results varying parameters simulation models verified model performed base case conducted studies model better understand dynamics system ramifications performance guaranteed 
studies done experimental setup time consuming 
studies focused ways lower loss rate order improve service guarantees offered 
studies focused user model determining effect timeout value loss threshold loss rate 
varied parameters separately studies 
shows increasing timeout value decrease loss rate increasing timeout value seconds ensure loss 
similarly fig 
shows users willing retry requests leaving loss rate drops 
fraction user sessions lost user user retry vs lost user probability time seconds user waits retrying request fig 

loss rate function long user wait request fraction user sessions lost user db processing rate vs lost user probability db processing rate baseline fig 

loss rate function db performance fraction user sessions lost user number retries vs lost user probability number times user retry request fig 

loss rate function times user willing retry requests fraction user sessions lost user db parallelism vs lost user rate db degree parallelism baseline fig 

loss rate function db parallelism timeout length loss threshold values change 
focus ways speed site lower loss rate 
services evaluating application server back database varied performance services 
minimal speedup observed increasing application server performance performance degradation observed application server slowed 
increasing performance database dramatic effect loss rate shown fig 

database key bottleneck investigate ways lower response time requests database 
shows increasing parallelism db lower loss rate 
easier increase parallelism db reduce response time 
graphs show service integrator want negotiate improve guaranteed level service sla database service increasing number requests processed changing response time criterion 
baseline results showed buy confirm page dominant source timeouts site 
results shown solving model showed decreasing processing requirements buy confirm page lower loss significantly 
framed problem coming sla guarantee terms web service composed collection web services 
problem relating sla terms sub services aggregate service useful manner 
focusing web commerce showed aggregated service need provide types guarantees different obtained sub services 
proposed model web services relate different guarantees 
realized model tpc benchmark implementation set implementation experimentally relate performance sla guarantees sub services performance sla guarantees complete web commerce site 
results model agreed closely experimental values allowed answer questions answered experimentation 
instance determined speeding database response time example significantly improve performance 
varying database response time difficult actual database demonstrates usefulness model 

box layman mendelsohn nielsen thatte simple object access protocol soap tech 
rep 

christensen curbera meredith weerawarana web services description language wsdl tech 
rep 

clark courtney daly doyle sanders webster bius modeling tool proceedings th international workshop petri nets performance september pp 


clark courtney daly doyle sanders webster bius framework implementation transactions software engineering vol 
october 

almeida scaling business technologies models performance capacity planning prentice hall 

almeida mendes resource management policies commerce servers performance evaluation vol 
pp 


meyer sanders stochastic activity networks structure behavior application proc 
international conference timed petri nets pp 


transaction processing performance council tpc tpc benchmark web commerce august 

transaction processing performance council tpc web page www tpc org 
uddi executive white november www uddi org 
