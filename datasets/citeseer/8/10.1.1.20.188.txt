detecting errors configurable program dataflow analysis samuel dept computer sciences university texas austin austin tx cs utexas edu automatic compiler approach detecting programming errors 
system uses configurable scalable program dataflow analysis engine driven highlevel programmer written annotations 
show system automatically detect wide range programmer errors programs including improper libraries information leaks security vulnerabilities 
show aggressive compiler analysis system performs yields precise results 
system detects wide range errors greater scalability previous automatic approaches 
important class security vulnerabilities system automatically finds known errors medium large programs producing false positives 

software complex pervasive impact programming errors grown dramatically 
approaches detecting correcting errors include code reviews testing formal verification 
code reviews testing effective finding superficial errors reliable exhaustive 
formal verification guarantees program correctness requires creation complete specification program difficult impractical undertaking 
focused automatic systems designed detect errors minimal manual intervention 
systems include lexical techniques enhanced type systems compiler approaches finite state machines model checking :10.1.1.114.3285
approaches problems limit usefulness 
lexical approaches detect superficial errors 
type approach requires manual intervention generates numerous false positives placing burden programmer determine errors real 
previous approaches suffer state explosion problems limit scope single procedures relatively small programs 
key contribution interprocedural approach detecting errors improves previous simultaneously providing precision scalability 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
submitted pldi berlin germany copyright acm emery berger dept computer sciences university texas austin austin tx emery cs utexas edu calvin lin dept computer sciences university texas austin austin tx lin cs utexas edu overview broadway system 
system treats error detection dataflow analysis problem solves problem configurable program dataflow analysis engine 
programmers library writers write set annotations class error system detects errors unmodified programs manual intervention 
system detects errors generated propagate procedure calls 
important error class system detects format string vulnerabilities 
contrast previous approaches require substantial manual program analysis produce false positives show system quickly detects instances format string vulnerabilities programs produces false positives 
programs range size lines lines 
system pinpoint source lines calling contexts leading improper uses sockets double locking privacy leaks 
believe aggressive compiler analysis system employs critical effective error detection 
find errors propagate pointers dependence pointer analysis 
avoid excessive false positives capture errors perform interprocedural context flow sensitive analysis 
despite apparent cost approach show system scalable previous 
provide simple method throttling context sensitivity allows system trade precision faster analysis 
remainder organized follows 
provide overview broadway system section 
contrast system previous section 
section summarize language describing errors explain system performs domain specific analysis 
section describe wide range errors system capable detecting provide empirical results analysis 
discuss scalability approach section 
address directions section conclude section 
broadway system broadway compiler takes source files set tions input 
shows architecture system 
guided annotations broadway analyzes code reports analysis optionally generates transformed program output 
broadway performs program analysis code referring annotations relevant procedure call sites 
annotations allow properties associated inputs outputs procedures 
annotation writer specify error conditions code transformations 
originally designed broadway compiler support optimization building partial evaluation interpretation support domainspecific analysis optimization 
particular compiler focuses supporting types domain specific optimizations 
extends traditional optimizations passes dead code elimination constant propagation apply library routines 
optimizations significant impact performance modify eliminate entire library calls 
second provides tools necessary identify exploit special case library routines 
libraries contain routines perform essentially computation different assumptions inputs different performance characteristics 
broadway compiler information captured annotations specialize application programs 
show broadway information statically detect errors 

related compilers performed error checking sort 
checks traditionally limited semantics base programming language 
extends error checking high level semantics built programming language 
papers focused type systems express high level programming constraints 
shankar system detecting format string vulnerabilities type inference 
approach new type qualifiers tainted untainted introduced language added signatures standard library functions 
qualifiers denote associated variables possibly received input untrusted source 
type inference performed extensible type qualifier framework derives consistent assignment type qualifiers string variables 
security errors reported type mismatches 
inherent limitations static typing cause approach produce large numbers false positives 
example type variable change operations change taintedness 
similarly procedure type signature application may call times different contexts different combinations tainted untainted arguments 
shankar address problem adding form polymorphism type system 
solution require understanding annotating application program order get acceptable precision 
approach recognizes taintedness property state object type 
flow sensitivity context sensitivity keep information distinct different points call sites program 
vault system provides programming language support explicitly expressing constraints domain specific resources files sockets :10.1.1.14.7406
order vault programmer translates input program vault programming language adding resource constraints necessary 
language uses type guards control particular operation valid resource 
vault avoids problems type qualifiers introducing keys track flow sensitive condi tions 
system reconcile conflicting conditions control flow merge points 
approach avoids problem lattices represent error conditions allows specify precisely information combined merge points 
mc system checks errors operating system code programmer written checkers state machines :10.1.1.114.3285
checker consists set states set syntax patterns trigger transitions state machine 
compiler pushes state machine path program reports error states encounters 
approach proven quite successful finding errors limitations 
scope analysis limited single procedure time number paths program extremely large 
second analysis syntax driven compiler lacks deep information program semantics dataflow dependences pointer relationships 
approach scalable utilizes deeper program information 
slam toolkit approach similar mc rigorous powerful 
slam includes pointer analyzer check programs interprocedurally 
input toolkit consists program analyze separate specification describes safety properties test 
toolkit generates abstraction program represents behavior respect properties interest 
uses model checker perform path sensitive analysis abstracted program 
system differs slam ways 
broadway currently describe types constraints slam require formal specifications 
path sensitive scalable slam discuss section 
differs previous expressiveness scalability 
constrained recognizing errors propagate dataflow show class includes important errors including privacy leaks security vulnerabilities 
rely static typing report false positives 
interprocedural analysis allows find errors state machine approaches scalability problems 
capture extensive range safety properties avoid inherent state space explosion problem path sensitive analyzers 

errors dataflow problems section describe broadway compiler detect errors 
cast error detection dataflow analysis problem compiler solves configurable dataflow analysis engine 
analysis problems specified defining flow values transfer functions track error related properties target program 
system avoids difficulty defining new dataflow analysis problems providing simple annotation language express wide range useful problems 
approaches detecting errors support complex specifications system effective finding errors aggressive analysis framework 
annotation language described annotation language detail 
summarize main features 
annotation language focuses describing behavior library routines domainspecific abstractions represent 
focus comes broadway compiler original goal optimizing software libraries 
focus important error checking interesting difficult detect programming errors arise unsafe incorrect software libraries 
libraries encapsulate sort domain specific semantics files sockets locks abstractions exist semantics base language typically receive semantic checking support conventional compilers 
defining analysis problems annotation language contains basic dependence annotations advanced analysis annotations 
basic annotations provide summary library routine behavior respect pointer analysis dependence information 
describe pointer relationships procedure broadway provides entry exit annotations 
annotations operator indicate object points object 
access modify annotations simply list uses defs procedure 
shows basic annotations string copying function 
annotations indicate parameters strcpy point objects objects string dest string routine reads src string object modifies string object 
procedure strcpy dest src entry src src string dest dest string access src string modify dest string basic annotations describe pointer dependence behavior 
advanced annotations describe dataflow analysis problems solved framework 
define new dataflow analysis library annotator specifies simple lattice property annotation set transfer functions library routine 
transfer functions specified annotation summarizes effects library routine lattice values 
currently limit structure lattices simple hierarchy named categories enumerated type compiler automatically infers meet function 
annotations compare lattice values operators exactly tests exact match atleast tests lattice greater equal function 
annotation shown defines minimal error detection lattice called state elements ok error 
augment annotations strcpy annotation tells compiler function passes error state source string destination string 
example highlights important benefit including pointer information annotations associate error state actual string contents just surface variables 
capability follow states objects passed program regardless pointers refer 
analysis results annotations identify error conditions testing analysis result flow values represent incorrect states 
report annotation consists conditional expression message string 
library routine callsite compiler emits message calling contexts condition true 
message string contain special tokens compiler replaces callsite specific information 
special tokens include com ok error property state ok error procedure strcpy dest src entry src src string dest dest string access src string modify dest string analyze state src string exactly ok dest string ok src string exactly error dest string error function passes error states source destination 
plete call stack line number source file names actual arguments flow values objects 
shows report annotation system call 
prints error message input string state 
provides location call source name argument 
procedure puts entry string access string report state string exactly error error callsite argument error state function passes error states source destination 
analysis framework property specified annotations dataflow analysis framework associates values lattice objects application code 
objects representation fine grained including local global variables structures structure fields heap allocated memory 
heap objects distinguished full context path allocation site 
library call compiler tests current lattice values associated actual arguments updates states transfer functions 
annotations direct framework analyze property forwards backwards target program 
section give examples forward backward analyses compare kinds problems solve 
framework uses flow sensitive context sensitive interprocedural dataflow analysis 
compiler builds factored chains objects target program 
pass relies basic annotations precisely describe dependence pointer behavior library routine 
compiler performs library specific analyses single pass def chains efficiently propagate flow values 
analyzing properties transfer functions property test current state properties 
compiler visits library routine call site invokes reports applicable 

detecting errors broadway section describe number errors broadway detect 
include invalid uses libraries double locking mutexes complicated errors including privacy leaks security vulnerabilities 
provide examples erroneous code describe dataflow analyses enable broadway detect errors 
analyze number actual synthetic applications results including number actual errors system detects number false positives reports accuracy error reporting 
ran system linux ghz pentium system megabytes ram 
broadway system compiled gcc version optimization level 
invalid library usage library interfaces contain implicit constraints order routines may called 
file access rules example kind usage constraint 
program access file proper open close calls kind access reading writing match mode open call 
sophisticated analysis required model semantics unix sockets 
proper sequence unix calls create server socket bind followed accept connection 
shows model constraint marking socket variable progress sequence 
created bound error listening property error created bound listening lattice steps creating socket 
model socket conflicting states different paths goes error state 
shows full annotations function 
input socket bound name annotations transition listening state 
call listen invalid system print error message offending line 
simple deadlock detection deadlock detection np hard problem broadway detect number situations lead deadlocks including double locking 
broadway compiler performs interprocedural analysis find instances double locking widely separated program source 
note attempt model concurrent semantics threads 
pthreads library locking controlled mutex variable mutex annotations track procedure listen socket backlog analyze socket exactly bound socket listening default socket error report socket exactly bound error context socket socket bound annotations ensure called 
particular mutex locked unlocked 
shows lattice analysis 
locked unlocked error property mutex error locked unlocked lattice lock states 
library functions pthread mutex lock pthread mutex unlock lock unlock mutex object 
shows locking function annotated test double locking 
procedure pthread mutex lock mutex ptr entry mutex ptr mutex analyze mutex mutex exactly unlocked mutex locked report mutex mutex exactly locked error context mutex mutex ptr locked annotations check double locking 
applied analysis describe section synthetic program tests timer posix threads function supported linuxthreads package gnu library 
implementation function gnu library version contains double locking error simple escaped manual detection testing 
system finds bug seconds reporting false positives issues error report error pthread mutex lock timer mutex timer te locked 
information leaks dataflow analysis engine allows track state objects program 
example analysis verify program reveal private information world 
consider information originating local disk private information coming network public 
system ensure program transmit private information network local internet file socket unknown property unknown socket internet local file keyword introduces new lattice 
define lattice identifies kind device associated file descriptor 
property takes advantage lattice structure minimize information loss control flow merge points 
example statement creates internet socket branch local socket compiler infer resulting file descriptor kind socket 
augment model marking data public private depending source 
compiler test information flow constraints 
shows annotations write function report condition 
notice report warning type socket determined 
procedure write fd buffer ptr size entry buffer ptr buffer report fd exactly internet buffer exactly file error context file data sent internet report fd atleast socket buffer exactly file warning context file data may sent internet annotation report data file system sent network 
security vulnerabilities expand information flow analysis described detect entire class errors arise data un note notion information flow weaker described literature track flow data program 
trusted source network user reaches vulnerable part program 
terminology introduced perl programming language wagner consider data tainted comes untrusted source 
mark vulnerable functions requiring input untainted 
taintedness analysis detect format string vulnerability errors arise untrusted data format string argument functions 
certain functions take strings arguments define format output 
instance format string printf print string argument surrounded parentheses 
program contains format string vulnerability reads string data untrusted source network data ends format string argument 
carefully manipulating input strings hacker access stack execute arbitrary code 
format string vulnerability identified widely software packages subject numerous cert advisories 
describe detail define annotations provide taintedness analysis detecting vulnerabilities 
formulation taintedness analysis starts definition lattice shown 
tainted untainted property taint tainted untainted lattice taintedness 
include value capture conflicting states different control flow paths 
instance possible data setting data string zero memset 
annotate standard library functions produce tainted data 
include obvious sources untrusted data scanf read obvious ones readdir getenv 
shows annotations read system call 
notice annotations assign property contents buffer buffer pointer 
helps prevent false positives single pointer point tainted untainted data program 
procedure read fd buffer ptr size entry buffer ptr buffer access disk modify buffer analyze taint buffer tainted system call data buffer 
taintedness property propagate functions manipulate data 
example program concatenates tainted strings result tainted 
annotate various string operations indicate affect taintedness arguments 
shows annotations sprintf system call 
function takes variable number arguments compiler binds third argument args rest actual arguments 
procedure sprintf buffer ptr format ptr args entry buffer ptr buffer format ptr format args arg contents access format arg contents modify buffer analyze taint buffer arg contents call pass tainted data arguments buffer 
annotations dereference args argument pass taintedness state arguments buffer contents 
args represent multiple objects compiler meets lattice values 
tainted buffer contents tainted 
annotate standard library functions accept format strings including sprintf report format string tainted 
shows annotations syslog function frequently format string vulnerabilities 
procedure syslog priority format ptr args entry format ptr format args arg contents access format arg contents modify disk report taint format exactly tainted error context argument format ptr tainted syslog function reports tainted format string 
report annotation tests contents format string taintedness 
true generates error message replacing various special tokens report information actual call site 
compiler replaces context token full context path error occurred 
replaces format ptr name corresponding actual argument call site 
applied taintedness analysis programs versions known contain format string vulnerabilities 
programs daemons systems applications combing actual security advisories online 
table summarizes results experiments 
results disabled context sensitivity annotated library routines treated compiler context sensitive manner 
cases compiler properly identified locations format string errors 
fact cases patches exist locations reported compiler exactly match recommended patches 
analysis time roughly proportional square number lines code lpd exceptionally bushy call graph 
significantly system reported false positives 
contrast previous solutions type theory report false positives significant manual program analysis intervention shankar applied system programs yielding false positives 
backwards analysis approach define backwards analogue taintedness analysis call 
analysis mark format strings track backward sources 
report error data untrusted source eventually format string 
shows output analyses program 
analysis useful conjunction taintedness analysis narrow exact cause vulnerability 
argument commands commands read client run may format string 
backwards analysis tells sources tainted data 
manual inspection programs yielded interesting observations 
taintedness property string contents surface variables program 
pointer analysis properly model fact 
furthermore taintedness change execution points buffer contains tainted data times 
example associate taintedness surface variables code result false positive second call 
char malloc read fd tainted syslog format string error internal message tainted syslog okay flow sensitivity needed avoid false positives 
second programmers pass data program including storing retrieving data structures 
example named program bind package reads host names stores array request structures 
traverses data structure extracts names service requests 
point pass hostname syslog resulting format string vulnerability 
precise interprocedural pointer information properly tracks individual strings computations preventing taintedness spreading unnecessarily 
programs define wrapper functions standard system calls 
wrappers may signature system call perform additional processing 
wrappers serve error handlers frequently culprits format string vulnerabilities 
unfortunately application may call wrapper thousands different places making difficult discover source problem 
full context sensitivity identify exact call stack error occurs 
program package lines procedures time mm ss known errors errors false positives format string vulnerabilities named bind lpd table summary analysis results format string vulnerabilities 
previous approaches system finds known errors false positives 

scalability program analysis systems tradeoff scalability analysis quality results 
example path sensitive analysis provides extremely detailed results number paths grows fast techniques limited small programs small parts programs 
cost context sensitive interprocedural analysis grows rapidly size program provides larger scope information 
system attempts strike balance precision scalability 
ways 
take path insensitive approach 
second provide simple mechanism controlling degree context sensitivity analysis 
annotations summarize information library routines treat library calls context sensitive incurring cost analyzing library source 
control context sensitivity threshold depth procedures program call graph 
compiler treats procedures deeper call graph context sensitive treats procedures shallower call graph contextinsensitive 
explored complex schemes approach capture essential benefit context sensitivity 
calls small frequently reused procedures treated independently large high level procedures analyzed 
detect errors large programs start minimal level context sensitivity 
mode compiler finds errors report exact call stack errors occur may report false positives rare 
know program bugs rerun analysis higher context sensitivity threshold 
precise analysis detailed path sensitive techniques particularly interprocedural path sensitive analysis slam toolkit 
path sensitive approaches suffer severe state explosion problem caused extremely large number paths program 
comparison context sensitive analysis relatively cheap 
consider simple call graph depicted 
procedure calling contexts 
calling context number paths product number paths intervening procedure 
see numbers compare real program format string bug occurs levels deep call graph calling contexts 
nearly possible paths program location 
believe avoiding state space explosion vital order preserve scalability 

currently exploring ways help library writer develop annotations 
exposing information broadway program objects size array objects allow detect broader class errors significantly complicating job annotation writer 
compiler assist generation checking basic dependence main commonly procedure may calling contexts huge number paths 
tions library source code 
research demonstrated techniques automatically check library routine summary implementation routine 
compiler help checking transfer function annotations 
current implementation possible define analyses converge transfer function non monotonic 
lattices finite tend relatively small compiler perform offline check exhaustively tests nonmonotonic behavior 
practice experiments exhibited problem lattices analyses simple 
applied performance tuning broadway 
plan implement number optimizations improve broadway space runtime performance 

described broadway compiler approach performing automatic error detection 
show broadway find wide range programming errors apply find format string vulnerabilities programs 
solution user provides simple annotations describe library routines invokes compiler iteratively analyze application increasing amounts context sensitivity 
results show aggressive analysis capabilities necessary precise error detection scalable practical 
approaches superficial find errors detailed approaches handle large programs 
believe aggressive analysis necessary reasons 
dependence pointer analysis required order find errors usage libraries pointers pointer data structures 
flow sensitivity context sensitivity important order avoid excessive false positives objects error conditions change state program execution library routines called contexts different implications existence errors 
interprocedural analysis necessary objects typically passed program multiple layers library library wrappers 
cost analysis significant large programs procedure oriented approach scalable approaches 
approach provides simple method throttling context sensitivity effectively trades precision faster analysis 
analysis remains expensive compared traditional compiler analysis tens minutes programs lines code believe precision approach justifies cost 
analysis time comparison cost effort finding errors manually take days weeks 
important find errors security violations automated approach desirable needs run overnight 
previous shown broadway perform domain specific optimizations 
shows broadway extremely effective error detection 
illustrates power incorporating domain specific information compilation process 
believe idea broader implications applying compiler technology improve software quality programmer productivity 

thomas ball sriram rajamani 
automatically validating temporal safety properties interfaces 
international spin workshop model checking software may 
berlin weise 
compiling scientific programs partial evaluation 
ieee computer december 
james bowman 
format string attacks 
rr sans org malicious format string php october 
cert advisory ca 
pass user supplied input format string parameter syslog calls 
december 
cert advisory ca 
isc bind contains input validation error 
january 
charles consel olivier danvy 
tutorial notes partial evaluation 
proceedings acm symposium principles programming languages pages charleston south carolina 
patrick cousot radhia cousot 
interpretation frameworks 
journal logic computation august 
robert deline manuel fahndrich :10.1.1.14.7406
enforcing high level protocols low level software 
sigplan conference programming language design implementation june 
allen emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume formal models semantics pages 
north holland 
dawson engler benjamin chelf andy chou seth hallem :10.1.1.114.3285
checking system rules system specific programmer written compiler extensions 
symposium operating systems design implementation october 
fagan 
design code inspections reduce errors program development 
ibm systems journal july 
samuel calvin lin 
annotation language optimizing software libraries 
second conference domain specific languages pages october 
samuel calvin lin 
optimizing high performance software libraries 
languages compilers parallel computing pages august 
neil jones flemming nielson 
interpretation semantics tool program analysis 
handbook logic computer science 
oxford university press 

matt kaufmann panagiotis strother moore 
computer aided reasoning approach 
kluwer academic publishers june 
tim 
format string attacks 
www com docs pdf september 
rountev barbara ryder 
points side effect analyses programs built precompiled libraries 
proceedings international conference compiler construction april 
radu martin rinard 
design driven compilation 
proceedings international conference compiler construction april 
umesh shankar talwar jeffrey foster david wagner 
detecting format string vulnerabilities type qualifiers 
proceedings th usenix security symposium 
john bloch gary mcgraw 
static vulnerability scanner code 
th annual computer security applications conference december 
larry wall tom christiansen jon orwant 
programming perl rd edition 
reilly july 
steve zdancewic andrew myers 
secure flow linear continuations 
higher order symbolic computation 
