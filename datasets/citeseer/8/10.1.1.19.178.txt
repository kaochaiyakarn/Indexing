fast approximate reconciliation set di erences john byers je rey considine michael mitzenmacher new simple ecient data structures approximate reconciliation set di erences useful standalone primitive peer peer networks natural subroutine methods exact reconciliation 
approximate reconciliation problem peers respectively subsets elements sa sb large universe peer wishes send short message peer goal determine elements set sb sa possible 
avoid expense round trip communication times focus situation single message sent 
motivate performance tradeo message size accuracy computation time problem straightforward approach bloom lters 
introduce approximation reconciliation trees computationally ecient solution combines techniques patricia tries merkle trees bloom lters 
analysis approximation reconciliation trees provide experimental results comparing various methods proposed approximate reconciliation 
problem nding set di erences fundamental problem distributed computing arising protocols gossiping synchronization replication 
solves problem nding exact set di erences parties near optimal communication complexity presents various tradeo number rounds computational complexity 
contrast previous consider nding approximate set di erences goal determine large fraction set di erence parties 
obtain solutions allow greatly reduced computation exact methods utilize single round communication 
supported part nsf ani ani 
mail cs bu edu 
supported part nsf ccr ccr ccr alfred sloan research fellowship 
mail eecs harvard edu 
approximate reconciliation motivated potential expense computation communication exact reconciliation methods 
fast approximate reconciliation prelude expensive exact reconciliation scheme applications database synchronization 
substantial reduction size set di erence orded fast approximate reconciliation speeds subsequent exact reconciliation small set di erence 
approximate reconciliation problem strongly motivated peer topeer applications 
example peers large song libraries wish trade music may suce learn large fraction set di erence order useful trading 
example approximate reconciliation subroutine informed content delivery large data les protected erasure resilient codes :10.1.1.124.9552:10.1.1.124.9552
context approximate reconciliation allows peers downloading piece popular content quickly identify send useful encoding packets peers downloading content parallel 
content protected erasure resilient encoding peer need receive suciently large subset encoding packets recover content entirety approximate reconciliation needed application 
reconciliation performed real time parallel number processes speed advantage round approximate reconciliation compelling 
previous orts set reconciliation generally focused exact case 
reconciliation clearly done simple enumeration set elements save space hashes set elements 
exact reconciliation near optimal communication complexity considered 
general approach involves peer evaluating characteristic polynomial set points information compute ratio characteristic polynomials set di erences 
necessitates interpolation factorization rational polynomials computationally expensive tasks 
furthermore approach requires knowing upper bound number di erences js sb js sa requires multiple rounds communication 
additional communication rounds improve estimated upper bound apply divide conquer techniques 
best protocol date runs expected linear time requires log rounds communication 
basic data structures patricia tries merkle trees employed di erent ways protocols authors 
contrast previous focuses round protocols reconciling di erences large sets 
example informed content delivery application sets encoding symbols gb les may sizes millions peers may sets hundreds thousands di erences 
scenario essential reconcile quickly allow important transfer content 
hand minimizing communication complexity bits may necessary long cost reconciliation tiny fraction note rst provided brief overview data structures develop :10.1.1.124.9552:10.1.1.124.9552
provides full description including relevant theoretical details multiple variations detailed experimental results 
bandwidth content transfer 
important aspect carefully separate preprocessing costs costs reconciliation incurred real time 
sense peer peer setting peer may requested determine set di erences peers time construct set representation amortized pairwise communications 
account costs focus minimizing done peer sent message draws elegant classical data structures including merkle trees bloom lters patricia tries 
describe data structures bloom lters provide reasonable starting point approximate reconciliation 
bloom filters approximate reconciliation simple mechanism round approximate reconciliation bloom lter 
solution surprisingly ective particularly number di erences large fraction set size 
goal designing subsequent data structures improve solution challenging cases 
review bloom lter data structure framework 
bloom lter represent set fs elements universe size consists array bits initially set 
bloom lter uses independent random hash functions range 
element bits set check element check set 
clearly member set assume wrong probability 
bloom lter may yield false positive suggests element 
probability false positive depends number bits item number hash functions equation km note highly accurate approximation treat equality henceforth 
false positive rate minimized picking ln results ln approximate reconciliation solution peer sends bloom lter fa sa peer simply checks element sb fa false positive occurs peer assume peer element peer fails nd element sb sa bloom lter cause peer mistakenly declare element sb sa 
evaluate data structure specify relevant performance criteria approximate reconciliation 
number communication rounds 
message size number bits sent construction time construction time time compute message construction time time produce appropriate representation sb reconciliation time time compute approximation sb sa message appropriate representation sb accuracy probability element sb sa identi ed secondary concern correlation correct identi cation elements sb sa bloom lters message size kept small achieving high accuracy 
example just bits element sa message length js hash functions yields accuracy bits element hash functions yields accuracy 
improvements introduced compressed bloom lter reduces number bits transmitted peers cost bits store bloom lter systems requiring compression decompression peers 
constant number hash functions assuming hashes array accesses constant time operations construction time jsa set bloom lter reconciliation time jsb nd set di erence 
construction time precompute hashes set elements shift reconciliation time construction time 
may summarized obvious theorem 
theorem exists round protocol message size jsa construction time jsa reconciliation time jsb constant accuracy 
requirement jsa construction time jsa message size may excessive large js possibilities scaling approach larger set sizes 
example large js js peer create bloom lter elements sa equal modulo appropriate peer lter determine elements sb sa equal modulo relatively large set elements 
bloom lter approach pipelined incrementally providing additional lters di ering values needed 
pipelining approach similarly schemes 
unavoidable drawback bloom lters large reconciliation time set di erence sb sa small element sb tested lter fa described minimizing reconciliation time crucial applications reconciliation performed realtime 
new data structures avoid problem 
approximate reconciliation trees section develop data structure call approximate reconciliation tree reconcile set di erences time sub linear js expense extra logarithmic terms construction times 
practice extra expenses appear relatively minor detail section 
key idea send searchable structure message element sb needs tested membership sb sa speci cally protocol nal version data structure develop theorem 
theorem exists round protocol message size jsa construction time jsa log js construction time jsb log js reconciliation time jsb sa log js high probability constant accuracy 
theorem assumes operations handling log js log js contiguous bits done constant time comparing hashes log js bits 
describe data structures approximate reconciliation trees addition bloom lters section 
provide analyze basic construction approximate reconciliation trees section 
improvements basic construction leading asymptotically better performance discussed section nal construction analyzed section 
prerequisite data structures addition bloom lters approximate reconciliation trees patricia tries merkle trees 
patricia tries provide structured searching comparable subsets merkle trees comparisons subsets practical 
bloom lters provide compact representations avoid complications 
describe patricia tries merkle trees brie 
patricia tries peer represents set patricia trie 
describe construction binary patricia trie arbitrary subset universe 
root depth corresponds entire subset children correspond subsets half left child right child 
rest trie similar jth child depth corresponds set 


described trie nodes depth log unsuitable universe large 
nodes trie correspond sets 
fact jsj non trivial nodes 
trie collapsed removing edges nodes correspond set leaving jsj nodes 
resulting trie referred patricia trie patricia tree search literature 
patricia tries need binary discuss section explain methods identifying set discrepancies trie representations 
simplicity describe method searching tries size 
suppose peer peer constructed tries ta tb respective subsets sa sb peer sends trie peer root peer matches root peer di erences sets 
discrepancy 
peer recursively considers children root 
sb sa eventually peer determines leaf corresponding tree tree peer peer nd sb sa assuming nodes trie compared constant time total peer nd sb sa jsb sa log discrepancy may cause peer trace path depth log searching discrepancies collapsed patricia tries harder node tb longer clear node maps ta annotations specifying collapse operations included trie 
methods avoid problem subsequently 
search method operates patricia trie tb running time proportional depth tb worst case depth patricia trie may js 
avoid issue high probability hash element initially inserting virtual tree shown 
range hash function poly js avoid collisions 
assume hash function appears random set values resulting hash values appear random 
assumption hash functions 
obtain random patricia trie properties studied random search tree literature particular 
speci cally average depth leaf binary patricia trie random leaf values interval log variance depth leaf constant 
maximum depth log log high probability 
distribution leaf depths closely concentrated log important consideration node trie represent subset elements exact comparison nodes constant time impossible 
probabilistic comparisons done comparing hashes 
leads consider merkle trees 
merkle trees merkle trees provide method signing comparing large databases allowing fast updates identifying di erences 
application form merkle tree top trie associating value node underlying tree 
leaves value obtained applying hash function element represented leaf 
values internal nodes merkle tree obtained applying hash function values children 
construction hash node dependent elements subtree 
case suces simple mixing function bit wise exclusive obtain value internal node values children 
note hash function leaves merkle tree independent hash function organize elements patricia trie avoid correlation elements subtree 
see example 
merkle trees top tries give natural set reconciliation algorithm tree hashes sent 
algorithm exactly described time compare hash values associated corresponding nodes trie 
ords constant time comparisons runs risk false positive matches due hash collisions 
problem extending method patricia trie complexity associated specifying collapses corresponding nodes tries compared 
address section bloom lters 
basic construction breaking spatial correlation randomization tree balancing leaf bloom filter internal bloom filter mod patricia trie pre hashed merkle tree xor mod example creation bloom ltering approximate reconciliation tree 
poly js case js example permutation functions shown 
describe approximate reconciliation trees bloom ltered representation patricia merkle tree combination just described 
peer starts building patricia trie set associated merkle tree values 
message sends bloom lter values merkle tree 
perform approximate reconciliation uses patricia trie set merkle tree set example merkle tree derived patricia trie set 
input values hash values range 
note hash collisions di erent nodes tree 
recursive algorithm previously traverse trie traverse collapsed patricia trie tb performing comparison trie node checks value node tb performing lookup value bloom lter provided tests node ta value 
bloom lter summarize merkle tree values advantages nearly eliminates incidence hash collisions merkle trees approximate reconciliation tree large number bits merkle tree value summarizing values bloom lter sending 
avoids complications associated collapse operations performing comparisons patricia tries explicit bookkeeping transmitted message 
obvious disadvantage comparisons nodes tries correspond bloom lter lookups accurate direct comparisons merkle tree values 
consider accuracy approach 
sending bloom lter node values large number bits values avoid collisions log js bits suces high probability bits covers practical situations 
ignore collisions henceforth analysis 
obtain false positive element sb sa depth approximation reconciliation tree sb false positive node values path root leaf representing bloom lter 
false positive rate bloom lter sent probability identi es member sb sa achieve constant expected accuracy elements 
individual elements depth log js tree high probability mentioned earlier false positive rate bloom lter log js 
means log js bits element bloom lter 
additionally number hash functions log log js minimize false positive rate constant number hash functions requires number bits element log js 
may mean constructing bloom lter representing sa peer know approximate size sb case practical situations :10.1.1.124.9552:10.1.1.124.9552
practice deviation set sizes large di erence log log js log log js signi cant small constant factor padding size bloom lter cover nearly practical situations 
expect small xed number hash functions universally chosen ahead time 
basic construction described far prove theorem 
theorem exists round protocol message size jsa log log js construction time jsa log js log log js construction time jsb log js reconciliation time jsb sa log js log log js high probability constant accuracy 
proof peer constructs bloom lter representing sa approximate reconciliation tree outlined bloom lter log log js bits node tree log log js hash functions 
message size jsa log log js construction time jsa log js log log js 
precompute values approximate reconciliation tree time jsb log js 
check value bloom lter takes log log js time jsb sa log js checks high probability long depth patricia tree sb log js 
false positive probability bloom lter log js log log js bits element hash functions 
element depth log js high probability expected accuracy constant 
exact constant depends constant factors hidden order notation investigated experimentally section 
improvements approximate reconciliation trees described far combine better properties bloom lters merkle trees quicker searches small numbers di erences complications managing tree structures 
unfortunately inherit common weakness tree search strategies incorrect pruning false positives result large numbers di erences overlooked 
example false positive checking root approximate reconciliation tree di erences sets reported identical 
addressing problem required increasing number bits element running times non constant factors 
section discuss series improvements basic approximate reconciliation trees ameliorate problems 
improvements allow signi cantly better performance practice collectively enable nal construction proof theorem 
increased branching factor rst improvement simple increase maximum branching factor trees 
reduces number internal nodes improving false positive probability allowing bits node 
decreases height tree reducing number bloom lter tests constant factor 
cost potential increase running time searches elements sb sa children internal node checked match occur 
improvement change asymptotic results constant factors 
larger branching factors important part real implementation 
bene ts illustrated experiments section 
correction factors improvement inherent redundancy merkle tree structure 
internal node represents subset provides match children match 
double check match caused false positive internal node check children 
demonstrate section signi cantly improve accuracy expense running time 
generally change search procedure stops searching path consecutive matches reported new parameter call correction factor 
exactly basic reconciliation procedure 
traversal pruned consecutive matches traversal pruned consecutive matches 
branching factor slows traversal factor leads improvement 
theorem exists round protocol message size jsa construction time jsa log js construction time jsb log js reconciliation time jsb sa log js high probability constant accuracy 
proof sketch 
approximate reconciliation tree construction constant number bits node hash functions bloom lter 
probability individual false positive search constant 
uses correction factor log log js maintains constant accuracy 
improved bit allocation implicit assumption basic approximate reconciliation tree construction nodes equal worth number bits node 
noted earlier false positives near root tree lead di erences missed ect partially mitigated correction factors 
merely adding bits root close descendants signi cantly alleviate 
opposite tree false positives leaves impossible correct 
accuracy approximate reconciliation trees best accurate bloom lter tests leaves regardless done internal nodes 
implies accuracy approximate reconciliation tree better bloom lter size 
suggests schemes reduce number bits describe internal nodes compromising accuracy desirable 
fact prove reasonable approach separate bloom lter level tree bits represent node height tree 
elegant approach described section 
leveraging random tree structure problem noted previously bloom lter represent nodes may diculties determining nodes correspond peers approximate reconciliation tree 
hand bloom lter increases probability individual false positive 
possible desirable higher accuracy merkle tree complications reconstructing tree structure 
achieve hybrid rst observe random trie nodes patricia rst log log log levels complete high probability 
top levels complete reconstruction skipped values levels may simply enumerated xed order 
setup access nodes rst log js log log js levels directly yielding lower false positive rate switches testing nodes lower levels tree bloom lter 
better jsa log js values adopt idea varying numbers bits elements large hashes log js bits signi cantly ecting number bits available leaves lower levels 
speci cally uses jsa log js bits manages avoid false positives upper levels high probability 
basically balls bins problem balls log bins 
simple calculation shows bins ball high probability 
improved theoretical result various improvements section essentially analysis piece wise prove theorem 
theorem exists round protocol message size jsa construction time jsa log js construction time jsb log js reconciliation time jsb sa log js high probability constant accuracy 
proof constructs approximate reconciliation tree components 
values top log js log log js complete levels explicitly sent log js bits value 
values remaining internal nodes sent bloom lter jsa bits constant number hash functions similarly leaf nodes sent separate bloom lter jsa bits constant number hash functions 
note loss generality may assume js js leaf bloom lter satisfy condition theorem 
top levels tree bits hashes ensure false positive occurs path probability log js js 
remaining levels correction level log log log js log log log js 
sucient guarantee constant probability false positive path rst log js log log js levels tree depth encompasses constant fraction leaf nodes ensuring constant accuracy 
experiments experiments focus practical applications focus accuracy achievable various implementations :10.1.1.124.9552:10.1.1.124.9552
experiments deal sets random bit elements di erences 
total message size bits element hashes internally bits 
data point shown average samples 
accuracy experiments shows results main set experiments 
shows basic implementation ects varying correction factor redistributing bits leaves internal nodes 
comparison curve accuracy leaf bloom lter 
curve corresponds arbitrarily high correction factor corresponds accuracy bloom lter number bits 
increasing correction level brings accuracy closer leaf bloom lter 
time optimal distribution bits allocates bits leaves correction reduces internal false positive rate 
bits element leaf bloom filters bloom filter leaf accuracy limit correction correction correction correction correction branching factor bloom lters bits element leaf bloom filters bloom filter leaf accuracy limit correction correction correction correction correction branching factor bloom lters bits element leaf bloom filters bloom filter leaf accuracy limit correction correction correction correction correction branching factor explicit top bits element leaf bloom filters bloom filter leaf accuracy limit correction correction correction correction correction branching factor explicit top comparison various improvements 
js js js sa bits element 
shows result simply increasing branching factor 
produces dramatic increase accuracy tree depth halved number internal nodes drops 
shows result explicitly giving values upper complete levels tree 
de nite improvement basic approach changing branching factor 
improvement enhances scalability approximate reconciliation trees set sizes grow correction factor necessary keep accuracy constant grows slowly improvement 
shows combine ect approaches 
fraction differences bloom filter normal normal top top speed comparison various methods 
js js js sa bits element 
speed experiments examine relative speeds various approaches 
compare bloom lters basic approximate reconciliation trees explicit complete top levels correction levels zero 
approximate reconciliation trees branching factor bloom lters leaf nodes internal nodes 
distribution bits bloom lters chosen maximize accuracy 
small numbers di erences bloom lters take signi cantly longer reconcile 
reconciliation time taken bloom lters roughly constant drops slightly number di erences increases 
elements set require computing hash functions elements may early bloom lter reveals element set 
reconciliation time approximate reconciliation trees grows roughly linearly number di erences initially small 
bloom lters drop time reconcile nearly elements di erent 
expected approximate reconciliation trees higher correction factors slower 
di erence basic approach explicitly listing values top levels small small numbers di erences 
small numbers di erences appreciable constant factor favor explicit listing bit wise comparisons values faster performing bloom lter tests 
larger numbers di erences number nodes top levels small fraction total nodes traversed di erence negligible 
correction level approximate reconciliation trees faster number di erences fewer js correction faster number di erences fewer js cost significantly decreased accuracy 
note changing correction level crossover points vary parameters js number bits element precise approach scale di erent ways 
trend small numbers di erences approximate reconciliation trees faster advantage deteriorates correction level increases 
introduced approximate reconciliation set di erences useful primitive peer peer applications 
noting ecacy bloom lter solution designed approximate reconciliation trees enhanced solution minimizes reconciliation time 
experiments demonstrate approximate reconciliation trees suitably ecient practical 
leave open theoretical practical questions 
practical side plan consider best approximate reconciliation methods speed exact reconciliation computations 
theoretical side worthwhile consider lower bounds approximate reconciliation terms computation amount communication necessary bits rounds 
bloom space time trade hash coding allowable errors 
communications acm july 
byers considine mitzenmacher rost informed content delivery adaptive overlay networks :10.1.1.124.9552:10.1.1.124.9552
proc 
acm sigcomm august 
cormen leiserson rivest algorithms 
mit press cambridge massachusetts 
fan cao almeida broder summary cache scalable wide area cache sharing protocol 
ieee acm trans 
networking 
preliminary version appeared proc 
sigcomm 
szpankowski limit laws heights generalized tries patricia tries 
proc 
latin 
knuth art computer programming volume sorting searching 
addison wesley reading ma 
merkle protocols public key cryptosystems 
ieee symposium security privacy pp 

minsky ecient reconciliation unordered databases 
tech 
rep tr cornell university 
minsky practical set reconciliation 
tech 
rep bu ece boston university 
minsky set reconciliation nearly optimal communication complexity 
isit washington dc june 
mitzenmacher compressed bloom lters 
proc 
th annual acm symposium principles distributed computing pp 

appear ieee acm trans 
networking 

