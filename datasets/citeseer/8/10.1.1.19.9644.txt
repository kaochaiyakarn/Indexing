xmark benchmark xml data management albrecht schmidt florian waas martin kersten michael carey ioana manolescu ralph busse cwi kruislaan gb amsterdam netherlands firstname lastname cwi nl microsoft redmond wa usa microsoft com bea systems usa bea com inria rocquencourt le chesnay cedex france ioana manolescu inria fr fhg ipsi 
darmstadt germany busse ipsi fraunhofer de standardization efforts xml query languages progressing researchers users increasingly focus database technology deliver new challenges abundance xml documents poses data management validation performance evaluation optimization xml query processors upcoming issues 
long tradition database research provide framework assess abilities xml database cope broad range different query types typically encountered real world scenarios 
benchmark help implementors users compare xml databases standardized application scenario 
offer set queries query intended challenge particular aspect query processor 
workload propose consists scalable document database concise comprehensive set queries covers major aspects xml query processing ranging textual features data analysis queries ad hoc queries 
complement research results obtained running benchmark xml database platforms 
results intended give baseline illustrate state art 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference hong kong china data exchange format xml penetrating virtually areas internet application programming 
electronic commerce sites content providers rely heavily new technology increasingly interested deploying advanced data management systems sites data volume exceeds toy sizes 
complexity challenge attracted attention database research community 
early efforts mainly concentrated schema issues theory organizing data fixed schema incompatible existing technology 
xml gained momentum numerous commercial products appearing market development focus research shifted specific technical issues physical data breakdown query performance started determine success failure implemented xml solutions 
increasingly major minor database vendors see seemingly growing list scrambling leverage existing products rudimentary xml support conversion purely relational data xml documents products provide may need meet new requirements 
new requirements somewhat sketchy differences xml relational object relational data easy grasp implications underlying data store fully understood 
xml definition textual markup language means relations rdbms data elements ordered nature string core data type richer data types integers floats user defined data types derived 
externally provided schema information may may help avoid excessive expensive coercions data types 
addition ally cope tree structure xml documents resulting intricate hierarchical relationships data regular path expressions essential ingredient query languages call efficient evaluation strategies 
powerful language feature model relationships exceed limitations tree structures require mapping logics logical oids join indexes efficient management 
earlier extend existing data models cope new xml requirements provided helpful guidance prototypes implemented top data object stores standard apis direct access internal workings product drawn valid certain extent effectiveness particular mapping remains unclear 
simple extensions product caused significant performance improvements 
due complexity interdependencies various system components designs hard assess putting conclusive test comprehensive quantitative assessment short right benchmark 
need new benchmarks recurring momentum database research past years database community developed rich tradition performance assessment systems ranging research developments oo benchmark oo benchmark benchmark industrial standards family tpc benchmarks just mention examples 
available benchmarks offers coverage needed xml processing geared certain data model flexibility expressiveness semistructured query languages exceed existing systems limitations far 
xmark benchmark described takes challenge features tool kit evaluating retrieval performance xml stores query processors workload specification scalable benchmark document comprehensive set queries designed feature natural intuitive semantics 
facilitate analysis interpretation queries intended challenge query processor important primitive query language 
useful number ways 
place systematic examination query processors proves beneficial processor operate variety architectures tends suited different application workloads exhibits special characteristics 
instance xml stores derived relational main memory object oriented database technology textual information retrieval data structures persistent object stores 
different products expected display diverging behavior performance stress tests system architecture physical data breakdown 
second benchmark document queries aid verification query processors challenging problem high level query languages introduced 
world xml problem equivalence query processor output goes bad worse degrees freedom different possible physical representations document see attempt tackle introduce combined degrees freedom query execution regards order set valued attributes different character encodings namespaces experience suggests problem deciding regard output xml query processors equivalent requires research 
third executing benchmark query set exhibits details required incorporate query processor application scenario 
consequently benchmark help users estimate costs deploying system application scenario answer question systems fits best needs 
xml processing systems usually consist various logical layers physically distributed network 
benchmark results interpretable systems engineering issues concentrate core ingredients query processor interaction data store 
consider network overhead communication costs rmi corba sockets rpc java beans transformations xslt output 
choice language xquery amalgamation research languages semistructured data xml see overview proposed standard 
process standardization language choice major competitors field 
consider updates little agreement semantics standard defined 
target audience divided groups 
framework help database vendors verify refine query processors comparing implementations 
second customers assisted choosing products setting simple case study pilot project provides essential ingredients targeted system 
researchers lastly provide example data framework helping tailor existing technology xml settings refinement design algorithms 
rest structured follows motivate necessity benchmark xml query processors introduce structure document database 
presenting queries give results interpretations obtained running queries test environments 
xml query processing existing database benchmarks cover plethora aspects traditional data management ranging query optimization transaction processing 
established techniques store process xml clear way semi structured nature data impacts performance engineering issues impede effectiveness techniques original area 
sequel motivate need new benchmark specifically xml query processors 
evolution xml differs significantly evolution relational databases xml agreed standard early stage accepted supported large community 
imposes top perspective benchmark designer resulting kind thematic benchmark sense provide challenges typical query primitives 
combination traditional new features xml processing systems results need new quality systems engineering new benchmark 
shown data centric documents documents logically represent data structures map nicely relational databases see object relational databases clear systems handle efficiently documents natural language mark interspersed 
want hint different dbms architectures respond xml challenge summarized follows textual order xml structures original document incorporated queries feature simple look queries expensive systems prepared challenge see queries section 
strings basic data type vary greatly length posing additional storage problems 
type problems arise typing rules query languages tend clash generic string tokens xml 
queries involving hierarchical structures form complicated path expressions especially relationships connection order queried tend require expensive join aggregation operations executed relational systems 
compounds matters loose schema xml documents tends query formulation tedious user point view 
technically null values blow size database 
specifying long complicated path expressions error prone 
activities context xml schema try challenges making data centric documents accessible rdbms reformulating concepts integrity constraints xml context 
solve problems requires additional engineering efforts sacrifices annotation author bidder seller open auction watch interest person item category buyer seller closed auction quick easy appeal helped xml gain popularity quickly 
benchmark queries designed address matters specifically 
related benchmarks available evaluate certain aspects xml repositories database systems 
benchmark developed university leipzig 
consists queries update operations 
goal benchmark test queries second database process cost 
additional measures include response times bulk load times database index sizes 
main objective benchmark stress test xml systems multi user workload 
xml counterpart oo benchmark geared object repositories comprises xml version original oo database reformulations original queries run accordingly challenges traversal oriented 
benchmark features extensions tailored testing xml specific features 
differs aims large scale analytical xml processing time offers query challenges designed lines xml query algebras helping analyze improve underlying query processor merely measuring systems performance 
database description design xml benchmark requires cautiously modeled example database behavior queries predictable allow formulation queries feel natural concise challenges 
outline characteristics document closer look technical issues generating documents 
regions africa asia 
item people person open auctions description reserve name open auction mailbox mail homepage name profile hierarchical element structure income annotation bidder description increase initial site closed auctions closed auction annotation price description edge element relationships queried elements nesting elements renders tree structure xml documents 
subsection describe structure benchmark document modeled database deployed internet auction site 
main entities come groups person open auction closed auction item category side annotation description side 
relationships entities group expressed second group take natural language text document centric element structures embedded sub trees semantically belong 
hierarchical schema depicted er diagram 
semantics entities just mentioned follows items objects sale sold 
item carries unique identifier bears properties payment credit card money order 
seller description encoded elements 
item assigned world region represented item parent 
open auctions auctions progress 
properties privacy status bid history increases decreases time bidders seller current bid time interval bids accepted status transaction item sold 
closed auctions auctions finished 
properties seller person buyer person respective item price number items categories category description sold date transaction closed type transaction annotations bidding process 
persons characterized name email address phone number mail address homepage url credit card number profile interests possibly empty set open auctions interested get notifications 
categories feature name description implement classification scheme items 
category graph links categories network 
entities constitute relatively structured data oriented part document schema regular entity basis exceptions person homepage predictable 
apart occasional list types bidding histories order input particularly relevant 
hand offspring annotation description elements document centric side document 
length strings internal structure sub elements varies greatly 
markup comprises lists keywords formatting instructions character data imitating characteristics natural language texts 
ensures database covers full range xml instance incarnations marked data structures traditional prose 
available snippets benchmark document 
overview connect sub trees 
care taken feature diverse distributions derived uniformly normally exponentially distributed random variables 
note typed instances xml element point type xml element example model interests refer categories 
generated text generate text bears similarities natural language analyzed shakespeare plays determined statistic characteristics word frequency stopwords generator mimics characteristics frequent words excluding words 
incorporate additional characteristics punctuation little relevance performance assessment 
believe tokenization text compression methods commonly sufficiently assessed text provide 
entities names email addresses various internet sources electronically available phone directories scrambled 
refer details 
xml constructs xml standard defines constructs useful producing flexible markup justify definition queries challenge directly 
restricted set xml features data generator consider performance critical context xml processing databases 
generate documents entities notations 
distinguish parsed character data character data assuming string types viewpoint storage engine 
furthermore don include namespaces queries 
restrict bit ascii character set 
dtd schema information provided allow efficient mappings 
stress additional information may exploited 
generate document designed implemented document generator called provide scalable xml document database 
obvious requirement capable producing xml document specified eager meet additional demands 
generation xml document platform independent user interested running benchmark able download binary generate document matter hardware operating system achieve plain ansi implement accurately scalable ranging minimal document arbitrary size limited capacity system time resource efficient name scaling factor document size tiny mb standard mb large gb huge gb scaling benchmark document elapsed time ideally scales linearly resource allocation constant independent size generated document deterministic output depend input parameters 
order able reproduce document independently platform incorporated random number generator relying operating system built random number generators 
basic algorithms statistics textbooks implements uniform exponential normal distributions fairly high quality 
assigned elements dtd plausible distribution children observing consistency referencing elements number items organized continents equals sum open closed auctions second provide accurate scaling scale selected sets number items persons user defined factor 
calibrated numbers match total document size slightly mb scaling factor cf 
fig 

challenge implement data generator efficiently created various places document abide integrity constraint points valid identifier go straight forward solution keeping sort log record identifier referenced unfortunately infeasible large documents 
solved problem modifying random number generation produce identical streams random numbers 
way able implement partitioning sets item ids referenced open closed auctions 
current version requires mb main memory produces documents sizes mb gb seconds respectively mhz pentium iii 
detailed description tool downloads project web page 
document context xml role stands apart importance benchmarks 
prospective standards xquery exclusively designed database data integration languages strictly speaking assume need documents presence database 
little doubt databases help managing large amounts xml data 
resort interpretation take xquery syntax document auction xml literally formulate queries respect single large document committing specific database scenario 
authors experience problems document test environments aware size document may large systems 
data additionally offers mode outputs entities defined section file chosen user 
note case modifications version benchmark may necessary 
example user chooses dtd supply parser controlled id idref declared attributes converted required attributes 
validating parser tries check uniqueness existence ids idrefs respectively 
respect queries changes path expressions assume single document necessary 
changes remain local 
stress solution regarded semantics queries defined section differ matter executed single document collection documents 
query semantics document version normative 
benchmark queries section lists queries benchmark 
chose express queries xquery successor quilt standardized 
due lack space query source code 
remaining queries downloaded project web site 
queries grouped subsection headings indicate concept tested 
exact match simple query mainly establish performance baseline help interpret subsequent queries 
tests database ability handle simple string lookups fully specified path 

return name person id person 
site people person id person return name text ready challenging queries ordered access queries help users gain insight dbms copes intrinsic order xml documents efficiently expect dbms handle queries order constraints 

return initial increases open auctions 
query evaluates cost array lookups 
note may harder evaluate looks especially relational back ends may struggle complex aggregations select bidder element index 

return current increases open auctions current increase twice high initial increase 
complex application array lookups 
case relational dbms query take advantage set valued aggregates index attribute accelerate execution 
queries akin aggregations tpcd benchmark 

list reserves open auctions certain person issued bid person 
time stress textual nature xml documents querying tag order source document 
casting strings generic data type xml documents 
queries interpret strings need cast strings data type carries semantics 
query challenges dbms terms casting primitives provides 
especially additional schema information just dtd hand casts occur frequently 
queries include casts query meant challenge casting isolation 

sold items cost 
regular path expressions regular path expressions fundamental building block virtually query language xml semi structured data 
queries investigate query processor optimize path expressions prune traversals irrelevant parts tree 

items listed continents 
evaluation engine path encoding scheme help realize need traverse complete document tree evaluate expressions 

pieces prose database 
note aggregations require complete traversal document tree 
just cardinality respective parts queried 
chasing integral part xml allow richer relationships just hierarchical element structures 
queries define horizontal traversals increasing complexity 
query optimizer take advantage cardinalities operands joined 

list names persons number items bought 
joins person closed auction 
list names persons names items bought europe 
joins person closed auction item construction complex results constructing new elements may put storage engine stress especially newly constructed elements queried 
query reverses structure person records grouping interest profile person 
large parts person records repeatedly reconstructed 
avoid simple copying original database translate mark french 

list persons interest french markup result 
joins values query tests database ability handle large intermediate results 
time joins basis values 
difference queries chasing queries specified dtd may optimized logical oids example 
queries differ mainly size result set provide various optimization opportunities 

person list number items currently sale price exceed person income 

person income list number items currently sale price exceed person income 
reconstruction key design xml dbms mappings determine fragmentation criteria 
complementary action reconstruct original document broken representation 
query tests ability database reconstruct portions original xml document 

list names items registered australia descriptions 
full text continue challenge textual nature xml documents time conduct full text search form keyword search 
full text scanning studied isolation think interaction structural mark essential concepts considered orthogonal restricted subset document combining content structure 

return names items description contains word gold 
path traversals contrast section try quantify costs long path traversals don include wildcards 
descend deep document tree query query additionally ascend tree selection 
note queries check existence paths 

print keywords emphasis annotations closed auctions 

confer 
return ids sellers auctions keywords emphasis 
missing elements test query processors know deal semi structured aspect xml data especially elements declared optional dtd 

persons don homepage 
fraction people homepage high query presents challenging path traversal non clustering systems 
function application query puts application user defined functions udf proof 
xml world udfs particular importance allow user assign semantics generic strings go type coercion 

convert currency reserves open auctions currency 
sorting due lack schema clauses play role sql ish order group 
query requires sort generic strings 

give alphabetically ordered list items location 
aggregation query computes simple aggregation assigning person category 
note aggregation truly semi structured includes persons relevant data available 

group customers income output cardinality group 
queries constitute challenges posed xmark 
deploying various environments felt number type queries exhibit balance conciseness detail making possible run benchmark acceptable time acquiring interesting characteristics system tested 
experiments experiences benchmark group design activity academic industry researchers known success evaluate progress commercial research settings 
evaluation section meant highlights encountered running benchmark broad range systems depth analysis behavior individual systems scope 
anonymized systems due wellknown license restrictions simply speak systems test platforms fall categories systems designed large scale repositories expected perform handling large amounts data 
call system system sequel refer systems mass storage systems 
systems relational technology come cost query optimizer allow kind hand optimization hints relational product 
require user provide mapping physical data breakdown system reads dtd lets user generate optimized database schema 
systems main memory come heuristic optimizers allow rewriting queries hand necessary 
query processors intended serve embedded query processors programming languages aim small medium sized documents 
call software system falls category system note analysis 
systems provided opportunity look query execution detail find time spent query optimization metadata access wait allowed black box analysis augmented usual monitoring tools operating systems provide 
tools run benchmark document available project web site 
include data generator query set mapping tool convert benchmark document flat file may bulk loaded relational dbms variety formats available 
experiments conducted variety set ups systems required prepare data translate queries proprietary language executed systems processed queries possibly minor syntactic changes 
queries run machines equipped mhz pentium iii processors scsi ultra gb main memory operating systems windows advanced server linux respectively depending packages required 
systems equipped processors processor bulk load query execution 
system size time mb mb mb mb mb mb table database sizes concerning scaling factor able run queries systems scaling factor intended 
mass storage systems able process queries embedded system failed 
systems commence evaluation benchmark document generated scaling factor 
note took xml seconds user time linux machine including system time disk scan benchmark document time includes tokenization input stream normalizations substitutions required xml standard user specified semantic actions 
times summarized table range seconds seconds 
constitute completed transactions include conversion effort needed map xml document database instance 
note system requires dtd derive database schema time derivation included negligible anyway 
resulting database sizes listed table systems included comparison require far larger database sizes 
turn attention running times statistics displayed table basic insights 
space discuss timings experiments detail query system compilation cpu compilation total execution cpu execution total table detailed timings systems system system system system system system table performance ms queries discussed section selection 
physical xml mappings literature query consists table scan index lookup small number additional table look ups 
mainly supposed establish performance baseline scaling factor scan goes tuples followed table lookups mapping 
queries ones provide surprises 
turns parts query plans compute indices quite complex tpc aggregations require computation set valued attributes determine bidder element index respect open auction ancestor 
complexity query plan higher innocent looking xquery representations queries suggest 
consequently running times quite high 
system able find execution plan systems spent time optimization 
table displays interesting characteristics traced back physical mappings systems 
system basically stores xml data big heap single relation 
system hand uses highly fragmenting mapping 
consequently system access fewer metadata compile query system spending half time query compilation optimization system comes cost 
data mapping deployed sys tem explicit semantics actual cost accessing real data higher system vs 
system mentioned needs dtd derive storage schema additional information helps get favorable performance 
table find detailed execution times 
show mappings structure data semantics achieve significantly higher cpu usage compare system system vs system 
system uses data mapping spirit results comparatively simple efficient execution plans outperforms systems 
results due lack space features predicate may expensive evaluate 
mappings store extent tags position start tag corresponding tag may able exploit additional information achieve running times 
come query tries quantify cost casting type coercion operations necessary comparisons 
mass storage systems cost coercion low respect relative complexity query execution plan execution times 
case exhibit great differences execution times 
note character data original document including time seconds mb document kb document performance figures embedded query processor system stored strings cast runtime richer data types necessary queries 
apply domain specific knowledge systems schema information caching casting results 
regular path expressions challenge queries 
system keeps detailed structural summary database exploit optimize traversal intensive queries surprisingly fast 
systems access structural summaries effectively play role index schema queries significantly expensive execute 
problem looks paths efficiently solved exploiting structural summary case system systems cost accessing schema information high dominated query performance 
queries usually implemented joins 
systems analyze detail chasing basically amounted executing equi joins strings 
surprised relatively cheap comparison deemed individual elements similarly expensive 
system able find execution plan acceptable time 
apart anomaly implementation executed join algorithms determine performance 
construction complex query results addressed 
path expressions join expression query kept simple bulk lies construction answer set amount mb xml text 
produced massive amounts output data test ability cope large intermediate results theta joining potential buyers items interest 
theta join produces tuples 
especially challenge query optimizer pick execution plan allows insights data volume influences query output performance 
systems optimizer chose sub optimal execution plan 
systems experiment hand optimized execution plans 
queries far attempted estimate cost long path expressions respect short ones 
exactly help 
sake space figures report systems needed times longer execute needed 
due joins complicated path expression brings execution optimization 
sql output system needed keep intermediate results small 
stresses loose schema xml documents querying non existing data 
query execution plan computes intersection sets 
timings table show typical situation systems able process query seconds order magnitude difference performance 
queries performance figures due lack space primarily interest establish relative costs function application sorting operations comparing system architectures 
aggregations conclude query set combination table scans set difference 
systems show similar performance 
general note queries reformulate queries sql proprietary xml query languages satisfy query processor frequently necessary hand optimize multi pass sql sequences sql statements reuse intermediate results generated native xml engines systems hand need manual intervention 
separate observation mention installation effort tested systems differed greatly production setting effort may important 
performance figures certain systems particularly systems show pathological running times 
necessarily mean relevant systems inferior relied built query optimizers change reformulate queries hand 
show benchmark queries reasonable challenges solved optimally 
analysis query translation optimization process showed search spaces xml queries larger necessary translation xquery lower level algebra information especially path expression lost 
improve experimenting new pruning strategies extended low level algebras better capture query semantics starting point 
comparison presents performance behavior embedded query processor document sizes kb scaling factor mb scaling factor largest sizes sensibly execute system running resources 
smaller document query took longer seconds faster seconds means implementation techniques embedded processor incur significant performance overhead compared mass storage systems competitive cases 
respect join queries note result sizes small comparison mass storages systems larger scaling factor experiments 
advantage embedded systems usually allow control query execution providing hooks execution engine letting users implement certain operators 
mention point facilitate query formulation enormously 
query processor able validate path expressions online tell user sequence tags exists database instance great help users quite regularly simple typos path names evaluate empty results 
dbms course decide path expression contains typo issue warning path expression contains non existing tags 
approach query example possibly lead helpful results 
benchmark specifications developed xmark set queries lessons learned executing workload specification number platforms 
benchmark designed top standardization issues xml starting point 
queries try capture essential primitives xml processing data management systems path expressions querying null values full text search hierarchical data varying fan outs ordered data coercions data types complex results 
experiences experiments summarized follows physical xml mapping far reaching influence complexity query plans 
mapping favors certain types queries enabling efficient execution plans 
mapping able outperform board 
complexity query plans aggravated information loss translation declarative high level query language low level execution algebra 
appears semantic gap 
cost query optimizers deal larger search spaces necessary 
meta data access dominant factor query execution especially simple lookup queries small result sizes see table explanations section 
schema information enables better database schema design useful query optimization see running times system versus comparable systems table 
important parts complete application scenario missing update specifications standard defined prominent 
expect continue evolve standardization efforts 
anderson porter schneider 
benchmark 
international conference extending database technology volume lecture notes computer science pages 
hme rahm 
benchmark xml data management 
proceedings btw 
ceri 
comparative analysis xml query languages 
acm sigmod record 

xml database products 
available www com xml htm 
boyer 
canonical xml version 
available www org tr xml 
bray paoli sperberg mcqueen maler 
extensible markup language xml second edition 
available www org tr rec xml 
lacroix lee li 
applying benchmark xml query processing tools 
international conference information knowledge management pages 
carey dewitt naughton 
oo benchmark 
proceedings acm sig mod international conference management data pages 
carey dewitt naughton brown gehrke shah 
object relational benchmark 
proceedings acm sigmod international conference management data pages 
cattell skeen 
object operations benchmark 
tods 
chamberlin florescu robie sim stefanescu 
xquery query language xml february 
available athttp www org tr xquery 
chamberlin robie florescu 
quilt xml query language heterogeneous data sources 
international workshop web databases webdb pages 
james clark xml parser 
available sourceforge net projects 
florescu kossmann 
storing querying xml data 
ieee data engineering bulletin 
gray 
database transaction processing performance handbook 
available www 
com handbook contents asp 
meyer 
xml object relational database systems enhancing structural mappings statistics 
international workshop web databases webdb pages 
patel naughton kaushik 
set containment joins bad ugly 
proceedings international conference large data bases pages 
schmidt kersten florescu carey manolescu waas 
xml store benchmark project 
www 
xml benchmark org 
schmidt kersten florescu carey manolescu waas 
example snippet queries 
available monetdb cwi nl xml snippet txt monetdb cwi nl xml queries txt 
schmidt kersten waas 
efficient relational storage retrieval xml documents 
international workshop web databases webdb pages dallas tx usa 
schmidt waas kersten florescu carey manolescu busse 
benchmark xml databases 
acm sig mod record 
schmidt waas kersten florescu manolescu carey busse 
xml benchmark project 
technical report ins april 
shanmugasundaram tufte zhang dewitt naughton 
relational databases querying xml documents limitations opportunities 
proceedings international conference large data bases pages 

massive stochastic testing sql 
proceedings international conference large data bases pages 

xml schema 
www 
org xml schema 
zhang naughton dewitt luo lohman 
supporting containment queries relational database management systems 
proceedings acm sigmod international conference management data 
