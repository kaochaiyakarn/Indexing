computing maximum overlap convex polygons translations de berg devillers van kreveld schwarzkopf uu cs august issn computing maximum overlap convex polygons translations mark de berg olivier devillers marc van kreveld schwarzkopf convex polygon plane vertices convex polygon vertices 
prove maximum number combinatorially distinct place ments respect translations rain rim nm give example showing bound tight worst case 
second log algorithm determining translation maximizes area overlap prove placement centroids coincide realizes overlap maximum possible overlap 
upper bound show example overlap placement maximum possible overlap 
matching plays important role areas computer vision 
typically shapes point sets polygons instance wants determine shapes resemble 
precisely wants find rigid motion shape maximizes resemblance shape 
ways measure resemblance 
example point sets polygonal chains hausdorff distance polygonal chains distance 
resemblance convex polygons measured looking hausdorff distance boundaries 
application computer vision appropriate look area symmetric difference polygons distance measure sensitive noise image noise may add thin features boundary add large areas 
notice minimizing area symmetric difference polygons equivalent maximizing area overlap polygons 
algorithm time complexity known finding maximum overlap area convex polygons supported esprit basic research action project alcom ii algorithms complexity 
supported netherlands organisation scientific research nwo 
dept computer science utrecht university box tb utrecht netherlands 
inria bp sophia antipolis cedex 
address dept computer science university science technology dong south korea 
allowed rotate point boundary sliding polygon boundary 
mount studied behavior area overlap simple polygons translations polygon 
pose case convex polygons open problem 
consider matching problem convex polygons plane rigid motions allow translations 
words convex polygons plane goal find translation maximizes area overlap results follows 
denote number vertices respectively 
start studying combinatorial question combinatorially distinct placements respect 
define placements combinatorially equivalent pairs edges intersect see section precise definition 
show number distinct placements min nm give example showing bound tight worst case 
surprise result appears new previous bounding number placements polygon polygonal environment usually motivated motion planning problem deals case polygon allowed intersect environment see latombe book halperin thesis 
main result section give log time algorithm computing placement maximizes area overlap algorithm fact area overlap function unimodal 
round exposition show sense approximate maximum possible overlap convex polygons simply superposing centroids coincide 
show placement realizes overlap maximum possible overlap give upper bound example factor 
seen generalization problem placing copy polygon inside polygon 
chazelle studied variants problem 
results convex polygons decide linear time translated contained papers compute largest copy polygon placed inside 
number distinct placements simple polygon vertices plane simple polygon vertices 
position orientation fixed free translate 
section bound number distinct placements respect define formally call placements distinct 
denote boundary cp boundary cq 
consider boundary edges relatively open sets endpoints included 
rq point say lexicographically smallest vertex 
point plane denotes point placed similarly edge vertex denote edge vertex placed call placement space possible placements case dimensional space called configuration space 
definition intersection set placement denoted set consisting pairs interior edge vertex tle interior edge vertex intersect 
placements combinatorially distinct 
configuration space partitioned regions intersection sets corresponding placements points region corresponding placements combinatorially equivalent 
number combinatorially distinct placements bounded number regions configuration space 
previous configuration spaces usually inspired motion planning applications polygon robot polygon obstacle 
setting interested free space region configuration space collide words intersection set empty 
translations considered free space complement minkowski sum complexity worst case convex polygons complexity worst case 
information configuration spaces connection motion planning refer reader latombe book halperin thesis 
application interested placements intersection set empty results motion planning literature apply 
closer look configuration space 
fix edge edge consider locus points intersects 
region parallelogram denoted spanned translated copy translated copy observe points interior edges vertex lies vertex lies point vertex vertex coincides vertex 
ii edge edge 
arrangement ii induced ii partitioning configuration space mentioned correspondence combinatorially distinct placements faces arcs nodes ii 
bound complexity ii immediately implies bound number distinct placements 
proceed bound complexity ii 
ii planar subdivision defined nm parallelograms complexity bounded 
simple polygons bound tight worst case 
fact complexity free space mentioned 
convex polygons situation different show theorem maximum number combinatorially distinct placements min nm 
significantly larger complexity free space convex polygons 
theorem tle max mum number combinatorially distinct placements convex polygons vertices respectively min nm 
proof 
prove upper bound 
convex polygon vertices convex polygon vertices 
bound complexity subdivision ii avoid confusion edges polygons edges ii call arcs 
similarly call vertices ii nodes 
get defined 
ii planar subdivision suffices bound number nodes 
node ii corner parallelogram intersection boundary parallelograms 
corners parallelograms corresponds placement vertex coincides vertex clearly nm placements 
intersections parallelogram boundaries correspond placements edges el vertices vl ei ii 
vertices vx edges vi ei iii 
edge el vertex vertex vx edge vi el 
bound number nodes type 
fix vertex place vl op 
move keeping op 
get type node vertex crosses edge path vertex describes translate op intersect op twice 
total number type nodes involving vertex vl 
total number type nodes vertices 
similar argument shows number type ii nodes 
remains bound number nodes type iii 
fix vertex move stays 
count number times vertex crosses edge look path vertex vl follows 
path obtained placing vl rotating degrees mirrored image results exactly path vl follows 
path convex polygonal segments 
crosses cp min times 
number type iii nodes involving vertex min total number type iii nodes nm rain 
example bm distinct placements easy construct give example distinct placements 
fig 
gives example 
dotted polygonal closed path path follows moved keeping contact path intersects cp min times 
bottom vertices top vertices top vertices bottom vertices placed close path followed moved close dotted path min intersections path cp 
get total nm min distinct placements 
computing maximum overlap get main problem studied convex polygons find placement maximizes overlap need introduce notation 
overlap function defined area 
moved ra vertices keeping con tact vertices convex polygons min nm distinct placements 
problem find placement maximizes 
call placement goal placement 
look restricted version problem allowed translated fixed direction 
loss generality assume direction horizontal 
value define horizontal overlap function denoted 

theorem convex polygons wards concave volume graph convex 
proof 
function downwards concave cross section line downwards concave suffices prove fact 
loss generality restrict ourself case horizontal lines prove function vy downwards concave 
imagine moving left right plane starting bc 
define 
intersection time define dimensional polytope ppq viewing time third dimension union polygons ppq 
ppq written intersection convex polytopes convex polytope 
pq avis apply brunn minkowski theorem states square root function describes area intersection pq horizontal plane downwards concave sweep oq 
cross section ppq horizontal plane exactly intersection theorem follows 
non negative function called unimodal interval points bl bx zero outside strictly increasing constant bx strictly decreasing bl algorithm overlap function 
corollary convex polygons horizontal overlap function 
unimodal 
proof 
downwards concavity immediately follows unimodal function turn implies 
unimodal 
theorem compute maximum overlap case confined translate fixed line 
algorithm important ingredient general algorithm 
lemma avis line compute time 
proof 
chazelle algorithm convex polytope pq computed linear time avis algorithm compute horizontal section ppq maximal area linear time 
turn attention general case arbitrary translations allowed 
algorithm consists stages 
stage locate horizontal strip contains point goal placement 
done binary search uses algorithm lemma subroutine 
reduces complexity search space sufficiently enter second stage algorithm cuttings 
second stage reduces complexity search space easy compute maximum overlap 
describe stages detail 
stage 
consider placement completely imagine moving upward entirely sorted sequence vertex vertex align horizontally 
words contains values yi vertices yi coordinate 
shall binary search locate horizontal strip yi yi contains goal placement 
fact write contains point goal placement 
confusion arise shall permit slight abuse terminology 
compute set explicitly contain nm elements want spend time 
look closely set 
set coordinates vertices sorted increasing order 
bn set vertices sorted decreasing order 
sets computed linear time 
elements set exactly entries matrix cij cij ai bj 
sets sorted row column sorted 
furthermore entry cij evaluated constant time 
parameter compute th largest entry algorithm frederickson johnson 
binary search proceeds follows 
generic step values kmin kmax goal placement horizontal strip initially kmin kmax nm 
compute values yk yk kmin km algorithm frederickson johnson 
compute maxt wy maxt dy lemma 
cases consider depending computed values maxt maxt set kmi maxt maxt yk set kmax 
maxt wy maxt dy set kmin kmax strip 
binary search continues kmax kmin 
correctness algorithm lemma 
lemma fl lines rl points fl respectively rl lie open half plane bounded containing contains goal placement 
proof rr shall prove closed half plane bounded con taining rl contain placement rl implies lemma 
point half plane intersection point closed line segment overlap function unimodal rl imply rl 
assumption rl prove binary search algorithm correctly efficiently finds strip containing goal placement 
lemma binary search finds time log horizontal strip contains goal placement 
yi yi proof prove algorithm correct 
amounts proving cases mentioned handled correctly 
tl value maximizing wy value maximizing wy 
define rl tl yk yk 
suppose rl proves case handled correctly 
similarly rl implies goal placement line proves second case handled correctly 
combining arguments cases see third case handled correctly 
remains prove time bound 
step binary search selection algorithm frederickson johnson takes time apply algorithm lemma takes time 
number steps binary search log nm total time claimed 
binary search set gives horizontal strip contains goal placement 
placement interior strip vertical order vertices respect fixed 
means complexity part ii significantly total complexity ii show 
lemma stage algorithm located horizontal strip containing goal placement part ofa ii inside formed segments 
proof recall ii defined nm parallelograms 
parallelogram defined pair edges edges parallelograms words segments induce ii defined vertex edge pair 
claim vertex define vertex edge pairs corresponding segment intersects er 
vertex edge placement 
horizontal line intersect exchanges vertical order endpoint moved lie define vertex edge pair edge intersected horizontal line 
convex edges 
argument shows vertex define vertex edge pairs 
second stage enter second stage horizontal strip er contains goal position 
number segments defining ii inside er 
proof lemma follows compute segments linear time take point inside strip merge sorted sequences coordinates vertices vertices find vertex edges define edge inside know segments defining ii cuttings zoom goal placement 
works explained 
set line segments plane 
cutting collection triangles disjoint interiors collectively cover entire plane triangle number segments intersecting interior isi size cutting number simplices consists 
set lines plane set line segments cutting size 
constant cutting constructed linear time 
set segments defining ii inside construct cutting er 
cutting consists triangles intersected segments 
idea find triangle cr contains goal placement proceed recursively inside triangle 
recurse triangles 
decide triangle recurse proceed follows 
il ia set lines edges cutting er 
line compute maximum overlap time algorithm lemma 
assume moment maxima distinct 
max lemma know line fi side restrict attention 
implies restrict attention triangles separated line 
number segments recurse cr 
log recursive calls left triangular regions intersected segments ii 
inside regions overlap function second degree polynomial computed linear time 
polynomial compute maximum constant time giving desired goal placement 
total running time second stage log 
finishes description algorithm 
remains get rid assumption maxima distinct done follows 
dealing erate situation 
max difficulty arises achieved vertex cutting cr fig 

case goal position triangles cutting incident know 
goal position doesn matter recurse provided keep track placement largest overlap far assume case 
find triangle containing goal placement take lines el lies triangle enclosed see fig 

distance lines goal placement inside achieved computing sym treating extension reals larger zero smaller positive real 

compute lemma lemma 
goal position 
triangle cr incident containing contain goal placement 
proof follows lemma 
find recurse log time degenerate cases 
completes proof main result summarized theorem 
theorem convex polygon plane vertices convex polygon vertices 
placement maximizes area computed log time 
bounds overlap particular translation prove section approximate area largest possible overlap simply looking placement centroids coincide 
prove overlap placement maximum possible overlap 
give upper bound example ratio 
lower bound define notations 
centroid denoted cp 
ucp ucp similarly cq denotes centroid section choose origin overlap function maximal origin position maximal overlap position 
maximal overlap area denoted 
sequel polar coordinates respect origin horizontal direction point polar coordinates denoted denote dimensional object bounded graph horizontal plane 
lemma translation centroids projection centroid 
proof 
horizontal projection centroid vi replacing expression integrals get du dv definitions 
cq obtain cf cq area du area du area area area area cp cq evaluated polar coordinates fo rdr defined area intersection vertical half plane polar coordinates 
polar coordinates horizontal projection centroid cross section oe re dr lemma value projection centroid cross section greater te maximum 
eo 
proof strictly decreasing maximum theorem unique value ro roe 
consider function ro 
downwards concavity function theorem relative position cv see weighted barycenter function deduce theorem relative position lemma curve oo convex 
proof follows directly downwards concavity function theorem 
curve intersection surface defined horizontal plane 
theorem translation matches centroids convex polygons realizes overlap area maximal overlap area 
proof 
overlap placement centroids coincide cq cp cn lemma 
cn centroid points eo weighted positive function equation 
curve eo inside convex curve lemma convex lemma 
cn inside convex curve downwards concavity ofv theorem cn 
theorem translation matches centroids dimensional convex polyhedra realizes overlap volume times maximal overlap volume 
proof 
proof similar gave dimensional case 
higher dimension downwards concavity function follows brunn minkowski theorem new definition yields claimed bound 
upper bounds dimensional example worst known example overlapping polygons reaches bound maximal overlap overlap centroid position 
example depicted assuming small edges triangles length opposite angle small 
intersection optimal position small square edge length intersection centroid position square edge length 
optimal position example reaching upper bound 
dimensional example worst example dimensions drawn 
edge length smallest face area volume intersection optimal position evaluate volume centroids coincide edge parallel section vertical plane centroid length length stick inside horizontal section centroid horizontal face volume intersection optimal centroid position example reaching upper bound 
algorithm computes translation convex polygon maximizes area overlap convex polygon algorithm runs log time number vertices respectively 
algorithm overlap function convex polygons 
showed particular placement centroids polygons coincide gives approximation optimal overlap area 
conjecture lower bound improved tight bound shown 
demonstration better bound rely facts theorem 
fact easy construct example bivariate function downwards concave value maximal value representation function related overlap polygons 
obvious step develop efficient algorithm arbitrary simple polygons 
unfortunately overlap longer unimodal non convex polygons overlap func tion local maxima 
difficult develop algorithm inspect local maxima 
cases number local maxima overlap function relatively small 
interesting develop algorithm running time depends number local maxima 
acknowledgment 
alt helpful discussions centroid problem 
pankaj agarwal micha sharir toledo 
applications parametric searching geometric optimization 
proc 
rd cm siam sympos 
discrete algorithms pages 
alt mer 
approximate matching polygonal shapes 
proc 
th annu 
acm sympos 
cornput 
geom pages 
alt 
measuring resemblance polygonal curves 
proc 
th annu 
acm sympos 
cornput 
geom pages 
avis bose snoeyink toussaint zhu 
sectional area convex polytopes 
proc 
th annu 
acm sympos 
cornput 
geom pages cll 

boissonnat 
polygon placement translation rotation 
proc 
th sympos 
theoret 
aspects cornput 
sci volume lecture notes computer science pages 
springer verlag 
chazelle 
polygon containment problem 
preparata editor computa tional geometry volume advances computing research pages 
jai press london england 
chazelle 
optimal algorithm intersecting dimensional convex polyhedra 
siam cornput 
chazelle 
cutting hyperplanes divide conquer 
discrete cornput 
geom 
chew goodrich huttenlocher kedem kleinberg kravets 
geometric pattern matching euclidean motion 
proc 
th canad 
conf 
cornput 
geom pages waterloo canada 
chew kedem 
placing largest similar copy convex polygon polygonal obstacles 
cornput 
geom 
theory appl 
fortune 
fast algorithm polygon containment translation 
proc 
th internat 
colloq 
automata lang 
program volume lecture notes computer science pages 
springer verlag 
fl johnson 
generalized selection ranking sorted matrices 
siam cornput 

convex polytopes 
wiley new york ny 
halperin 
algorithmic motion planning arrangements curves surfaces 
ph thesis computer science department tel aviv university tel aviv 
huttenlocher kedem kleinberg 
dynamic voronoi diagrams minimum hausdorff distance point sets euclidean motion plane 
proc 
th annu 
acm sympos 
cornput 
geom pages 
huttenlocher kedem sharir 
upper envelope voronoi surfaces applications 
discrete cornput 
geom 

latombe 
robot motion planning 
kluwer academic publishers boston 
mount silverman wu 
area overlap translated polygons 
spie vision geometry ii 

combinatorics overlapping convex polygons contact 
proc 
ith canad 
conf 
cornput 
geom pages 
sharir cole kedem pollack 
geometric ap plications davenport schinzel sequences 
proc 
th annu 
ieee sympos 

cornput 
sci pages 
venkatasubramanian 
area intersection closed objects 
information sciences 

