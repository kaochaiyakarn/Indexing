memory reuse latency accelerated sampled microarchitecture simulation john jr kevin department computer science university virginia charlottesville va cs virginia edu uva computer science technical report cs copyright fl explores techniques speeding sampled microprocessor simulations exploiting observation memory precede sample occur nearest sample germane sample 
means accurately warming simulated cache branch predictor state requires subset memory control flow instructions immediately preceding simulation sample need modeled 
technique takes measurements memory reuse latencies uses data choose point prior sample engage cache hierarchy branch predictor modeling 
starting cache branch predictor modeling late pre sample instruction stream modeling cache branch predictor interactions pre sample instructions able save time cost modeling 
savings reduces simulation running times average generating average error ipc 
explores techniques accelerating sampled microarchitecture simulations reducing amount cache branch predictor warm time prior samples simulation data gathered 
warm refer practice modeling cache branch predictor interactions specified interval prior actual data gathering effort establish simulated cache branch predictor state precisely appeared entire simulation conducted cycle accurate detail 
unfortunately highly detailed software simulation microprocessor prohibitively slow 
fastest hardware slowdowns orders magnitude native execution common 
example lilja show cycle accurate modeling spec benchmarks inputs take year 
software simulation fundamental computer architecture research 
simulation driven research tractable studies employ sampling measurements small representative subset instructions executed lifetime benchmark 
samples instructions simulated detail modeling cycle cycle individual instructions simulated pipeline 
preserve integrity sampled measurements simulated processor state accurately established prior full detail simulation 
words accuracy predicated successfully defeating called bias cache branch predictor performance critical microprocessor performance state cache levels hierarchy branch predictor appear approximately entire simulation performed cycle accurate detail leading edge sample simulation results may inaccurate 
straight forward technique guarantee accuracy pre sample cache branch predictor state model interaction memory instruction data cache hierarchy control flow instruction branch predictor simulator executing pre sample instructions 
cache interaction branch predictor interaction modeled cycle accurate samples 
way cache branch predictor contain exactly state cycle accurate simulation employed simulation 
accuracy terms cache branch predictor state full warm method heavy handed 
expensive terms running time cycle accurate simulation modeling cache branch predictor interactions costly 
viable method accelerating sampled simulations avoid full warm modeling interactions occur number instructions prior sample 
technique determination engage cache branch predictor warm exploiting memory reuse latencies measurement number instructions elapse successive address 
developed software facilitates measurements determines pre sample warm interval independently instruction stream data stream control flow instruction stream 
rest organized follows 
discuss related section 
section explains memory reuse latency measurement significance 
section applies sampled simulation 
explain experimental methodology results section conclude section 
related studies examine ways reduce simulation running times executing small subset benchmark cycle accurate detail 
identify short representative simulation windows instructions specint benchmarks 
key insight guides approach exclude benchmarks unrepresentative start behavior data structure setup initialization 
conte take different approach simulate multiple short samples 
focuses branch prediction structures assuming perfect cache shows stale predictor state previous sample plus short warm interval instructions prior sample sufficient minimize cold start bias achieve small errors percent mean observed ipc 
experiments conducted research similar multiple sample simulation regime prefixing sample warm interval preserving stale cache state samples 
heuristics reducing cold start bias studied kessler 
consider half sample warm purposes tracking entries known contain state stale state previous sample flushing state estimating error introduces 
warm acceleration methods proposed may compromise accuracy pre sample state initialization 
propose warm acceleration technique called minimal subset evaluation mse exploits observation memory prior sample germane memory occur sample 
mse technique uses formulas derived combinatorics probability principles calculate user chosen probability number memory prior sample modeled order achieve accurate pre sample cache state probability cache state appear exactly full warm 
mse mathematical underpinnings improve prior efforts maintaining accuracy reducing warmup times 
treats warm acceleration pre sample memory interactions level data instruction cache obvious mse extends secondary caches branch predictors 
sherwood propose basic block distribution analysis :10.1.1.18.7813
technique profiles frequency characteristics benchmark basic blocks order isolate continuous subset dynamic instruction stream execution characteristics closely mimic complete endto execution benchmark 
key insight periodic basic block frequency behavior reflects periodicity various architectural metrics ipc cache rate branch predictor accuracy simulation 
sherwood build concept create technique automatically isolates multiple subsets dynamic instruction stream benchmarks behavior complex single instruction stream slice 
cases aim reduce simulation running times executing cycle accurate detail small representative slice dynamic instruction stream 
wood establish concept cache generations 
cache generation begins immediately new line brought cache ends line evicted replaced 
notion cache generations establishes framework analytically estimating unknown cold start ratio establish substantially higher ratio chosen random 
armed reliable estimated unknown ratio able accurately measure cache ratios sampled simulations 
decay cache research propose technique cutting power heuristically presumed dead cache lines reducing leakage power 
measurements show kb data cache proportion cache lines dead time ranges spec benchmarks 
shows cache lines active lifetime significantly longer useful lifetime 
measuring reuse latency individual memory addresses able forge alternative warm ac technique preserves accuracy determining germane sample 
memory reuse latency memory reuse latency refers elapsed time memory address 
purposes time measured number completed instructions 
facilitate rigorous discussion mathematical framework establish relationship instructions single pre sample sample pair elements discrete interval instruction 
lg pictured 
imagine partitioned mutually exclusive buckets union exactly 
measured benchmark custom profiling software 
profiler simulates pre sample sample pair profiling software maintains associative arrays memory addresses instruction stream data stream stream branch instructions 
element array timestamped number instructions executed currently simulating memory branch instruction address difference previous timestamp current number executed instructions temporarily stored 
concurrently build reuse latency histogram incrementing count bucket contains 
pre sample sample section concludes profiler outputs histogram 
histograms contain complete memory reuse latency profile pre sample sample pair 
histogram gives count number elapsed instructions successive accesses lies interval subset bucket ng buckets 
surprisingly histograms invariably tell story plotted far greater number revisited small number instructions access histogram bucket largest population bucket 
instructions elapse access accessed current pre sample sample pair 
histograms able calculate population arbitrary percentile reuse latencies bucket contained bucket wn 
bucket mean jth bucket interval upper bounded gamma wn instructions pre sample sample pair 
words current pre sample sample pair reuse latencies wn instructions 
engaging warm wn instructions prior current pre sample sample boundary large reasonable certainty overwhelming majority addresses accessed sample initialized 
essentially argue require wn instructions successive accesses pointless model gamma pre sample cache branch predictor interactions occur wn instructions sample probably accessed sample 
strategy delaying pre sample cache branch predictor interaction modeling explained detail section 
accelerating warm steps warm acceleration technique enumerated 
user selects locations sample regions benchmark corollary non sample regions selected simultaneously 
sample paired preceding non sample referred pre sample region 

user profiles benchmark characterize pre sample sample pair reuse latency occur 
profile data valid cache branch predictor configuration time cost choice benchmark samples 

simulations run aggressive mode updating architected state 
wn instructions prior cycle accurate simulation sample simulator shifts warm mode memory interactions cache hierarchy branch predictor interactions modeled 
sample reached cache branch predictor contain accurate state full detail cycle accurate simulation begins 
step repeats pre sample sample pair 
notice step 
efficient execution achieved breaking simulation separate phases 
aggressive fast forward phase considered cold phase followed warm phase cache branch predictor interactions modeled concluded hot phase cycle accurate simulation processor pipeline takes place 
phases models proper subset activity modeled subsequent phase 
contrast approach conservative technique modeling pre sample cache branch predictor interactions 
shall refer discussion large appears section 
pre sample sample phase phase cold warm phase hot 

pre sample sample pair discrete interval partitioned mutually exclusive buckets form histogram wn 
bucket warm begins wn instructions prior instruction borders eminent sample 

obviously modeling pre sample cache branch predictor interactions maintain perfect state levels cache hierarchy branch predictor rendering simulation data inaccuracies arise cold start bias 
discussion accuracy refer data yielded simulations technique enumerated model subset pre sample cache branch predictor interactions calculate relative error delta gammai pc ipc pre sample sample pair aim research preserve accuracy increase duration cold phase reducing duration warm phase leaving hot phase unchanged 
safe strategy conservative memory occur pre sample period impact sample 
discussed show prior sample relevant 
reciprocally name implies effort establish accurate state prior sample 
experiments technique model pre sample cache branch predictor interactions 
susceptible cold start bias shown section 
ad hoc warm methods guess warm amount pre sample instructions may yield inaccurate results warming instructions fall short potential speed warming fewer pre sample instructions yielded accurate results 
results data discussed section gathered steps enumerated section 
pre sample sample pair warm phase engaged wn instructions prior sample 
benchmarks come spec suite binaries compiled alpha instruction set 
profiler multiple sample simulator adapted sim safe sim respectively simplescalar toolset version 
measure running time data accurately possible sim modified unix system call monitor cpu time benchmark run 
modified sim supporting files incorporate enhanced statistics gathering capabilities allowed engage statistics gathering arbitrary points arbitrary collection statistics cache dl 
misses pred 
addr hits simulation 
warm phase varies size percentile amount cache branch predictor activity varies effective comparisons required comparable statistics 
size locations full detail samples remain fixed benchmark decided engage statistics gathering cache branch predictor solely hot phases 
metrics measure merit ipc accuracy relative running time percentage 
metrics tightly coupled clearly worthless 
words reducing simulation run times useful simultaneously preserving accuracy 
step profile benchmarks gather data 
simple perl script extract wn pre sample sample pair 
data fed multiple sample simulator demarcate cold phase warm phase 
previously chosen hot phase samples remained fixed just profile 
table shows percent error ipc relative warm technique 
stated previous section cold start bias readily seen benchmarks gcc especially vpr parser 
benchmarks ipc diverges benchmarks aforementioned effectively demonstrate simulation data gathered trusted 
benchmarks shows increasing trend enhanced accuracy smaller relative error increases 
result compelling observes trend inaccurate experiments gcc parser vpr highlighted previously 
exception monotone increasing trend benchmarks mesa 
speculate result destructive interference branch predictor causes mesa enter sample phases suboptimal branch predictor state 
cases achieves error lower values reliable general accurate 
discussion ability accelerate simulation running times important fully understand optimality runtime acceleration 
model cache branch predictor interactions prior full detail samples simulations warm phase cold hot 
cold phase models proper subset activity modeled warm phase eliminating warm phase altogether minimizes execution time absolute minimum phase cold warm hot simulation strategy described section 
running time minimum possible running time represents benchmark maximum potential speed 
table shows potential speed ups ranged art fma percentage benchmark running time 
running time percentages shown table give percentage potential execution achieved delta gamma gammat 
words table choice sampling strategy scope refer 
shows close maximum possible reduction percentile able achieve higher percentage better 
observe higher percentiles amount achieved potential decreases 
course due fact higher increase size warm phase relative cold phase causing larger number pre sample cache branch predictor interactions modeled 
spite achieved potential respectable ranging vpr lucas 
translate running times respectively benchmarks relative running times benchmarks percentiles total running time reduced minimum 
performs achieving average error ipc average total running time reduction recommended percentile 
memory reuse latency analysis useful technique reduce running times sampled simulations reducing amount time spent warming simulated cache branch predictor state simulation phase preceding sample 
measuring latency number instructions consecutive accesses memory address discover memory reuse latency corresponds arbitrary percentile mark threshold simulation cold warm modes 
simulation rapid possible cold mode uses aggressive low detail simulation updating architected state warm mode memory interactions cache hierarchy branch instruction interactions branch predictor modeled 
warm mode cache branch predictor state accurately established allowing subsequent hot mode simulate cycle accurate detail complications arising cold start bias compromise accuracy 
results show benchmarks running times reduced average generating average error ipc 
research initiatives include application technique different sampling regimes 
profiler software modified version sim soon posted laboratory computer architecture virginia web site lava cs virginia edu 
acknowledgments material supported part national science foundation 
ccr 
percentage gamma delta benchmark ipc art crafty fma gcc gzip lucas mesa parser perlbmk twolf vortex vpr mean table 
ipc accuracy error relative gammai pc ipc 
benchmark art crafty fma gcc gzip lucas mesa parser perlbmk twolf vortex vpr mean table 
maximum potential acceleration percentage potential running time speed delta gamma gammat austin 
simplescalar home page 
www simplescalar org 
conte hirsch menezes 
reducing state loss effective trace sampling superscalar processors 
proceedings international conference computer oct 
jr 
minimal subset evaluation rapid warm simulated hardware state 
proceedings international conference computer design sept 
hu martonosi 
cache decay exploiting generational behavior reduce cache leakage power 
proceedings th international symposium computer architecture june 
kessler hill wood 
comparison trace sampling techniques multi megabyte caches 
technical report univ wisconsin madison computer sciences dept september 
aj flynn lilja 
adapting spec benchmark suite computer architecture research 
proceedings third ieee annual workshop workload characterization pages sep 
patel iyer 
accurate low cost methods performance evaluation cache memory systems 
ieee trans 
computers november 
standard performance evaluation 
spec cpu benchmarks 
www site www org osg cpu dec 
sherwood calder :10.1.1.18.7813
basic block distribution analysis find periodic behavior simulation points applications 
proceedings international conference parallel architecture compilation techniques sept 
sherwood calder 
automatically characterizing large scale program behavior 
proceedings th international conference architectural support programming languages operating systems oct 
ahuja martonosi clark 
branch prediction instruction window size cache size performance tradeoffs simulation techniques 
ieee trans 
computers nov 
wood hill kessler 
model estimating trace sample ratios 
proc 
acm sigmetrics conf 
measurement modeling computer systems pages june 

