usenix association proceedings fast conference file storage technologies monterey california usa january advanced computing systems association usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
venti new approach archival storage describes network storage system called venti intended archival data 
system unique hash block contents acts block identifier read write operations 
approach enforces write policy preventing accidental malicious destruction data 
addition duplicate copies block coalesced reducing consumption storage simplifying implementation clients 
venti building block constructing variety storage applications logical backup physical backup snapshot file systems 
built prototype system preliminary performance results 
system uses magnetic disks storage technology resulting access time archival data comparable non archival data 
feasibility write model storage demonstrated data decade plan file systems 

archival storage second class citizen 
computer environments provide access versions information stored file systems databases access tedious may require assistance system administrator 
common ability user examine data month year decade 
feature may needed frequently needed crucial 
growth capacity storage technologies exceeds ability users generate data making practical archive data 
plan computing environment authors includes file system stores archival data optical jukebox 
ken thompson observed usage patterns capacity jukebox considered infinite 
time took fill jukebox improvement technology allow upgrade new jukebox twice capacity 
sean quinlan sean dorward bell labs lucent technologies abundant storage suggests archival system impose write policy 
policy prohibits user administrator deleting modifying data stored 
approach greatly reduces opportunities accidental malicious data loss simplifies system implementation 
experience plan policy changes way views storage 
obviously data temporary derivative large undesirable impractical retain forever archived 
decided data worth keeping resources needed store data consumed reclaimed 
eliminates task periodically cleaning deciding data worth keeping 
thought required storing data write archive cost storage continues fall easy decision 
describes design implementation archival server called venti 
goal venti provide write archival repository shared multiple client machines applications 
addition magnetic disks primary storage technology performance system approaches non archival storage 

background prevalent form archival storage regular backup data magnetic tape 
typical scenario provide backup central service number client machines 
client software interfaces database file system determines data back 
data copied client tape device network record copied stored catalog database 
restoring data tape backup system tedious error prone 
backup system violates access permission file system requiring system administrator privileged software perform task 
tedious restore operations infrequent problems process may go undetected 
potential sources error abound tapes mislabeled reused lost drives wander alignment read old tapes technology obsolete 
tape backup systems tradeoff exists performance backup restore operations 
full backup simplifies process restoring data data copied continuous region tape media 
large file systems databases incremental backups efficient generate backups self contained data restore operation scattered multiple incremental backups multiple tapes 
conventional solution limit extent scattering performing full backup followed small number incremental backups 
file systems plan afs provide unified approach backup problem implementing snapshot feature 
snapshot consistent read view file system point past 
snapshot retains file system permissions accessed standard tools ls cat cp grep diff special privileges assistance administrator 
experience snapshots relied resource available easy access 
snapshots avoid tradeoff full incremental backups 
snapshot complete file system tree full backup 
implementation resembles incremental backup snapshots active file system share blocks remain unmodified snapshot requires additional storage blocks changed 
achieve reasonable performance device stores snapshots efficiently support random access limiting suitability tape storage approach 
afs systems snapshots ephemeral small number versions file system retained 
policy reasonable versions files useful 
systems archival storage requires additional mechanism tape backup 
philosophy plan file system random access storage sufficiently cheap feasible retain snapshots permanently 
storage required retain daily snapshots file system surprisingly modest statistics file servers years 
plan elephant file system retains versions data 
system allows variety storage reclamation policies determine version file deleted 
particular landmark versions files retained permanently provide archival record 

venti archival server venti block level network storage system intended archival data 
interface system simple protocol enables client applications read write variable sized blocks data 
venti provide services file backup system backend archival storage types applications 
venti identifies data blocks hash contents 
collision resistant hash function sufficiently large output possible consider hash data block unique 
unique hash called fingerprint block address read write operations 
approach results storage system number interesting properties 
blocks addressed fingerprint contents block modified changing address behavior intrinsically write 
property distinguishes venti storage systems address block contents independent 
writes idempotent 
multiple writes data coalesced require additional storage space 
property greatly increase effective storage capacity server rely behavior client applications 
example incremental backup application may able determine exactly blocks changed resulting unnecessary duplication data 
venti duplicate blocks discarded copy data retained 
fact replacing incremental backup full backup consume amount storage 
duplicate data different applications machines eliminated clients write data block size alignment 
hash function viewed generating universal name space data blocks 
cooperating coordinating multiple clients share name space share venti server 
block level interface places restrictions structures format clients store data 
contrast traditional backup archival systems require centralized control 
example backup systems include form job scheduler serialize access tape devices may support small number predetermined data formats catalog system extract pertinent meta data 
venti provides inherent integrity checking data 
block retrieved client server compute fingerprint data compare requested fingerprint 
operation allows client avoid errors undetected data corruption enables server identify error recovery necessary 
fingerprint block identity facilitates features replication caching load balancing 
contents particular block immutable problem data coherency greatly reduced cache mirror contain stale date version block 

choice hash function design venti requires hash function generates unique fingerprint data block client may want store 
obviously size fingerprint smaller size data blocks hash function exist fewer possible fingerprints blocks 
fingerprint large randomly distributed problem arise practice 
server capacity likelihood different blocks hash value known collision determined 
probability collision vanishingly small confident fingerprint unique 
desirable venti employ cryptographic hash function 
function computationally infeasible find distinct inputs hash value 
property important prevents malicious client intentionally creating blocks violate assumption block unique fingerprint 
additional benefit cryptographic hash function strengthens client integrity check preventing malicious server fulfilling read request fraudulent data 
fingerprint returned block matches requested fingerprint client confident server returned original data 
venti uses sha hash function developed national institute standards technology nist 
sha popular hash algorithm security systems date known collisions 
output sha bit byte hash value 
software implementations sha relatively efficient example mhz pentium compute sha hash kbyte data blocks microseconds rate mbytes second 
bit hash values generated sha large ensure fingerprint block unique 
assuming random hash values uniform distribution collection different data blocks hash function generates bits probability collisions bounded number pairs blocks multiplied probability pair collide today large storage system may contain bytes data 
consider larger system contains bytes stored kbyte blocks blocks 
sha hash function probability collision scenario sufficiently ignore sha hash unique identifier block 
obviously storage technology advances may feasible store point necessary move larger hash function 
nist proposed variants sha produce bit results 
immediate sha suitable choice generating fingerprint block 

choice storage technology plan file system designed optical offered high capacity respectable random access performance obvious candidate archival storage 
decade seen capacity magnetic disks increase far faster rate optical technologies 
today disk array costs equivalent capacity optical jukebox occupies physical space 
disk technology approaching tape cost bit 
magnetic disk storage stable permanent optical media 
reliability improved technology raid write optical disks little protection erasure due failures storage server raid array firmware 
issue discussed section 
magnetic disks venti benefit reducing disparity performance conventional archival storage 
operations previously required data restored magnetic disk accomplished directly archive 
similarly archive contain primary copy accessed read data 
effect archival data need storage hierarchy differentiated write policy server 

applications venti building block construct variety storage applications 
venti provides large repository data shared clients tape libraries currently foundation centralized backup systems 
applications need accommodate unique properties venti different traditional block level storage devices properties enable number interesting features 
applications block level service provided venti store complex data structures 
data divided blocks written server 
enable data retrieved application record fingerprints blocks 
approach pack fingerprints additional blocks called pointer blocks written server process repeated recursively single fingerprint obtained 
fingerprint represents root tree blocks corresponds hierarchical hash original data 
simple data structure storing linear sequence data blocks shown 
data blocks located fixed depth tree pointer blocks addressed root fingerprint 
applications structure store single file mimic behavior physical device tape disk drive 
write nature venti allow tree modified new versions tree generated efficiently storing new modified data blocks reusing unchanged sections tree depicted 
root 
tree structure storing linear sequence blocks root root 
build new version tree 
mixing data fingerprints block complex data structures constructed 
example structure storing file system may include types blocks directory pointer data 
directory block combines meta information file fingerprint tree data blocks containing file contents 
depth tree determined size file assuming pointer data blocks fixed size 
structures obviously possible 
venti block level interface leaves choice format client applications different data structures coexist single server 
sections describes applications venti archival data repository user level archive utility called vac proposal physical level backup utility preliminary new version plan file system 

vac vac application storing collection files directories single object similar functionality utilities tar zip 
vac contents selected files stored tree blocks venti server 
root fingerprint tree written vac archive file specified user consists ascii representation byte root fingerprint plus fixed header string bytes long 
corresponding program called enables user restore files vac archive 
naturally requires access venti server contains actual data situations transparent 
user appears vac compresses amount data bytes 
important attribute vac writes file separate collection venti blocks ensuring duplicate copies file coalesced server 
multiple users vac data copy stored server 
similarly user may repeatedly vac directory time contents directory change additional storage consumed server related extent changes total size contents 
venti coalesces data block level files change may share blocks previous versions require little space server log database files examples scenario 
unix systems dump utility back file systems 
dump ability perform incremental backups data user specifies dump level files new changed dump level written archive 
implement incremental backups dump examines modified time associated file efficient method filtering unchanged files 
vac implements incremental option file modification times 
user specifies existing vac file archive reduce number blocks written venti server 
file vac examines modified time file system vac archive 
vac copies fingerprint file old archive new archive 
copying just byte fingerprint enables new archive include entire file reading data file system writing data network venti server 
addition incremental dump resulting archive identical archive generated incremental option performance improvement 
means need multiple levels backups incremental full restore operations greatly simplified 
variant incremental option improves backup files modification times 
vac reads file computes fingerprint block 
concurrently pointer blocks old archive examined determine fingerprint block offset old version file 
fingerprints block need written venti 
fingerprint simply copied appropriate pointer block 
optimization reduces number writes venti server saving network disk bandwidth 
file level optimization resulting vac file different produced optimization 
require data file read effective significant number unchanged blocks 

physical backup utilities vac tar dump archive data file logical level walk file hierarchy converting data meta data internal format 
alternative approach block level physical backup disk blocks file system directly copied interpretation 
physical backup number benefits including simplicity potentially higher throughput 
physical backup utility file systems stores resulting data venti appears attractive implemented application 
simplest form physical backup copy raw contents disk drives venti 
backup includes tree pointer blocks enables access data blocks 
vac result single fingerprint representing root tree fingerprint needs recorded outside venti 
coalescing duplicate blocks main advantage making physical backup venti copying data storage medium tape 
file systems inherently block expect coalescing effective 
backups file system time share unchanged blocks file systems different machines running operating system may blocks common 
vac user sees full backup device retaining storage space advantages incremental backup 
enhancement physical backup copy blocks actively file system 
file system formats relatively easy determine block free walking file system hierarchy 
free blocks generally contain temporary files created removed time backups advantageous store blocks 
optimization requires backup format able represent missing blocks easily achieved venti storing null value appropriate entry pointer tree 
random access performance venti sufficiently possible physical backup restoring disk 
operating system support feasible directly mount backup file system image venti 
access file system read provides natural method restoring subset files 
situations full restore required possible restore lazy fashion copying blocks venti file system needed copying entire contents file system resuming normal operation 
time perform physical backup reduced variety incremental techniques 
vac backup utility compute fingerprint block compare fingerprint appropriate entry pointer tree previous backup 
optimization reduces number writes venti server 
file system provides information blocks changed case backup utility avoid reading unchanged blocks 
major advantage venti backup utility implement incremental techniques providing user full backup 
backup utility writes new blocks venti server constructs pointer tree appropriate fingerprint unchanged blocks 

plan file system combined small amount read write storage venti primary location data place store backups 
new version plan file system developing exemplifies approach 
previously plan file system stored combination magnetic disks write optical jukebox 
jukebox furnishes permanent storage system magnetic disks act cache jukebox 
cache provides faster file access importantly accumulates changes file system period snapshots 
snapshot taken new modified blocks written disk cache jukebox 
disk cache smaller active file system needing big contain daily changes file system 
accesses cache significantly slower changing jukebox takes seconds 
performance penalty certain operations old snapshots prohibitively expensive 
rare occasions disk cache reinitialized due corruption file server spends days filling cache performance returns normal 
new version plan file system uses venti optical jukebox storage device 
performance venti comparable disk substitution equalizes access active archival view file system 
allows disk cache quite small cache accumulates changes file system snapshots speed file access 

implementation implemented prototype venti 
implementation uses append log data blocks index maps fingerprints locations log 
includes number features improve robustness performance 
section gives brief overview implementation 
shows block diagram server 
client fs client client network block cache venti server index cache index data 
block diagram venti prototype 
venti intended archival storage goal prototype robustness 
approach data log arena arena arena directory trailer taken separate storage data blocks index locate block 
particular blocks stored append log raid array disk drives 
simplicity append log structure eliminates possible software errors cause data corruption facilitates variety additional integrity strategies 
separate index structure allows block efficiently located log index regenerated data log required reliability constraints log 
structure data log illustrated 
ease maintenance log divided selfcontained sections called arenas 
arena contains large number data blocks sized facilitate operations copying removable media 
arena section data filled append manner 
venti data blocks variable sized current limit kbytes blocks immutable densely packed arena fragmentation 
block prefixed header describes contents block 
primary purpose header provide integrity checking normal operation assist data recovery 
header includes magic number fingerprint size block time block written identity user wrote 
header includes user supplied type identifier explained section 
note copy block stored log user fields correspond time block stored server 
arena data blocks block header header header data data header blocks data directory header offset header offset 
format data log 
magic fingerprint type size user encoding esize storing block log attempt compress contents 
inclusion data compression increases effective capacity archive simple add log structure 
obviously blocks incompressible 
encoding field block header indicates data compressed algorithm 
esize field indicates size data compression enabling location block arena determined 
downside compression computational cost typically resulting decrease rate blocks stored retrieved 
prototype uses custom lempel ziv algorithm optimized speed 
compression performance bottleneck existing server 
implementations may benefit hardware solutions 
addition log data blocks arena includes header directory trailer 
header identifies arena 
directory contains copy block header offset block arena 
replicating headers blocks relatively small part arena server rapidly check rebuild system global block index 
directory facilitates error recovery part arena destroyed corrupted 
trailer summarizes current state arena including number blocks size log 
arena data log directory start opposite ends grow 
arena filled marked sealed fingerprint computed contents entire arena 
sealed arenas modified 
table 
performance read write operations mbytes kbyte blocks sequential reads random reads virgin writes duplicate writes uncached index cache block cache raw raid basic operation venti store retrieve blocks fingerprints 
fingerprint bits long number possible fingerprints far exceeds number blocks stored server 
disparity number fingerprints blocks means impractical map fingerprint directly location storage device 
index locate block log 
implement index disk resident hash table illustrated 
index divided fixed sized buckets stored single disk block 
bucket contains index map small section fingerprint space 
hash function map fingerprints index buckets roughly uniform manner bucket examined binary search 
provisioned sufficient buckets index hash table relatively empty bucket overflows extremely rare 
bucket overflow extra entries placed adjacent bucket 
structure simple efficient requiring disk access locate block cases 
index bucket entry bucket bucket bucket entry entry entry fingerprint type size address 

format index 
need go index main performance penalty venti compared conventional block storage device 
prototype uses techniques increase performance caching striping write buffering 
current implementation important caches approximately equal size block cache index cache 
hit block cache returns data fingerprint bypassing index lookup access data log 
hits index cache eliminate index lookup entries smaller hit rate correspondingly higher 
unfortunately caches speed process storing new block venti 
server check block duplicate examining index 
block contained server obviously cache 
fingerprint block contains internal structure location fingerprint index essentially random 
furthermore archival nature venti means entire index fit memory large number blocks 
combining factors means write performance venti limited random io performance index disk current technology accesses second 
striping index multiple disks get linear speedup 
requires sufficient number concurrent accesses assure buffering writes accessing index 
prototype venti server implemented plan operating system lines server runs dedicated dual mhz pentium iii processor system gbyte memory accessed mbs ethernet network 
data log stored gbyte ide raid array index resides string seagate cheetah xl gbyte scsi drives 

performance table gives preliminary performance results read write operations variety situations 
comparison include scsi performance raid array 
performance times slower directly accessing disk believe results promising improve system matures 
uncached sequential read performance particularly bad 
problem sequential reads require random read index 
assistance client read operations size gb ratio jul jul jan jan jul jan storage size jul overlapped benefit striping index 
possible solution form read ahead 
reading block data log feasible read blocks 
extra blocks added caches referencing index 
blocks read order written log latency uncached index lookups avoided 
strategy streaming data multimedia files 
basic assumption venti growth capacity disks combined removal duplicate blocks compression contents enables model necessary reclaim space deleting archival data 
demonstrate believe model practical statistics derived decade plan file system 
computing environment includes plan file servers named 
primary file repository point superseded 
life file servers user accounts active time 
file servers hosted numerous development projects contain large data sets including chess games astronomical data satellite imagery multimedia files 
jan jul jan jul jan jul jan jul ratio archival active data jul jan jul jan jul jan jul jan jul jan jul jan jan jul jul jan size gb jan jul jan storage size jul jan jul jan depicts size active file system measured time du space consumed jukebox size jukebox data stored venti 
ratio size archival data active file system 
seen venti storage required implement daily snapshots plan relatively modest result block level incremental approach generating snapshot 
archival data stored venti cost retaining snapshots reduced significantly 
case file system size venti slightly larger active file system cost retaining daily snapshots zero 
note amount storage venti uses snapshots conventional methods back file system 
plan approach snapshots necessity venti remove duplicate blocks 
stored venti size jukebox data reduced factors elimination duplicate blocks elimination block fragmentation compression block contents 
table presents percent reduction factors 
note uses kbyte block size uses kbyte effect removing fragmentation significant 
jul ratio archival active data 
graphs various sizes plan file servers 
ratio jan jul jan jul jan jul jan jul jukebox venti active file system jan jan jul jukebox active venti active jul year history plan file servers may interest researchers 
available block information including hash block contents block pointers directory information 
traces include actual contents files file names 
sufficient information reconstruct structure file system track daily changes structure time 
traces available www cs bell labs com trace html 
table 
percentage reduction size data stored venti 
elimination duplicates elimination fragments data compression total reduction 
reliability recovery concert development venti prototype built collection tools integrity checking error recovery 
example uses tools include verifying structure arena checking index entry block data log vice versa rebuilding index data log copying arena removable media 
tools directly access storage devices containing data log index executed server 
directory structure area enhances efficiency integrity recovery operations typically orders magnitude smaller arena contains needed information 
index checking utility example implemented disk sort arena directories followed comparison sorted list index 
prototype currently contains approximately blocks gbytes storage 
index check takes hours significantly hours takes read log data 
additional integrity recovery feature association type identifier block 
bit identifier included client read write operations effect partitioning server multiple independent domains 
idea type indicates interpretation data contained block 
client feature example indicate block root node tree blocks 
currently data format associated type left entirely client server interpret type conjunction fingerprint key index block 
type identifier assist administrator locating blocks user accidentally lost fingerprint 
tool server data log scanned blocks match specified criteria including block type write time user identifier 
type relatively simple locate forgotten root blocks 
uses type include ability server determine location fingerprints block enabling server traverse data structures stored 
storing data log raid disk array server protected single drive failures 
obviously scenarios sufficient multiple drives may fail may fire machine room raid firmware may contain bugs device may stolen 
additional protection obtained site mirrors server 
implemented strategy architecture venti relatively simple 
background process server copies new blocks data log mirrors 
copying achieved venti protocol server simply client mirror 
mirroring may sufficient 
implementation venti may contain bugs exploited compromise server 
automated attack may delete data servers simultaneously 
storage devices provide low level enforcement write policy provide protection attack 
write read optical provide protection common magnetic disk storage systems 
resorted copying sealed arenas removable media 

related stanford archival vault prototype archival repository intended digital libraries 
archive consists write log digital objects files auxiliary indexes locating objects log 
objects identified hash contents cyclic redundancy check crc 
venti system way share data objects partially build complex data structures file system hierarchy 
archive consists collection separate objects limited ability group objects sets 
venti blocks organized complex data structures creating hash trees idea originally proposed merkle efficient digital signature scheme 
approach block retrieval read secure file system comparable venti 
blocks identified sha hash contents idea applied recursively build complex structures 
focus system security archival storage 
administrator creates digitally signed database offline 
database contains public read file system published multiple servers efficiently securely accessed clients 
outperforms traditional methods providing data integrity client file server demonstrating attractive property hash addressing 
similarities simple implement top venti 
goal venti provide flexible location archival storage example application capability 
fact venti provide trivial solution problem stale nfs handles data deleted venti stale handle encountered 
content derived names example naming objects secure hash contents 
addresses issue naming managing various binary software components particular shared libraries application 
philosophy elephant file system similar venti large cheap disks feasible retain versions data 
feature elephant system ability specify variety data retention policies applied individual files directories 
policies attempt strike balance costs benefits storing version file 
contrast venti focuses problem store information deciding retained 
system elephant file system incorporate venti storage device permanent landmark versions files plan file system venti archive snapshots 
self securing storage retains versions file system data order provide diagnosis recovery security breaches 
system implemented self contained network service exports objectbased disk interface providing protection compromise client operating system 
old data retained window time deleted reclaim storage 
venti provides features self securing storage server self contained accessed simple low level protocol malicious users corrupt delete existing data server old versions data available inspection 
system write file system operation venti storage reclaimed deleting data removes constraint intrusion detected limited window time 
hybrid approach retain version time versions time 
venti provide long term storage hybrid 

venti distributed multiple machines approach identifying data hash contents simplifies extension 
example io performance improved replicating server simple load balancing algorithm 
storing retrieving block clients direct operation server bits fingerprint 
load balancing hidden client application interposing proxy server performs operation behalf client 
today venti provides little security 
authenticating server clients read block know fingerprint 
fingerprint act capability space fingerprints large venti protocol include means enumerating blocks server 
protection weak single root fingerprint enables access entire file tree fingerprint known way restrict access particular user 
exploring ways providing better access control 
date structures storing data venti break files series fixed sized blocks 
identical blocks consolidated venti consolidation occur data shifted file application uses different block size 
limitation overcome adaptation manber algorithm finding similarities files 
idea break files variable sized blocks identification anchor break points increasing occurrence duplicate blocks 
strategy implemented client applications change venti server 
detailed analysis decade daily snapshots plan file systems interesting 
trace data publicly available contains approximately information studies long term file activity 

approach identifying block sha hash contents suited archival storage 
model ability coalesce duplicate copies block venti useful building block number interesting storage applications 
large capacity magnetic disks allows archival data retained available line performance comparable conventional disks 
stored prototype server decade daily snapshots major departmental file servers 
snapshots stored little gbytes disk space 
today gbytes drives cost ide raid controllers included 
scaled version server provide archival storage home user attractive price 
tomorrow terabyte disks price archival data deleted reclaim space 
venti provides attractive approach storing data 

acknowledgments improved comments suggestions peter bosch eric grosse lorenz rob pike ross quinlan cliff young anonymous reviewers 
shepherd ethan miller 
help 

ann chervenak zachary 
protecting file systems survey backup techniques 
proceedings joint nasa ieee mass storage conference march 
arturo crespo hector garcia molina 
archival storage digital libraries 
proceedings rd acm international conference digital libraries 
kevin fu frans kaashoek david mazi res 
fast secure distributed read file system 
proceedings th symposium operating systems design implementation 
timothy gibson ethan miller darrell long 
long term file activity patterns 
proceedings th international conference technology management performance evaluation enterprise wide information systems computer measurement group december 
dave hitz james lau michael malcolm file system design nfs file server appliance proceedings winter usenix conference san francisco ca january 
hollingsworth miller 
content derived names configuration management 
proceeding acm symposium software reusability boston may 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
norman hutchinson stephen manley mike guy harris dave hitz steven kleiman sean malley 
logical vs physical file system backup 
proceedings rd usenix symposium operating systems design implementation osdi 
udi manber 
finding similar files large file system 
proceedings winter usenix conference san francisco ca january 
alfred menezes paul van oorschot scott vanstone 
handbook applied cryptography 
crc press 
ralph merkle 
protocols public key cryptosystems 
proceedings ieee symposium security privacy pp 
april 
muthitacharoen chen david mazi res 
low bandwidth network file system 
proceedings th symposium operating systems principles october 
national institute standards technology fips 
secure hash standard 
department commerce april 
national institute standards technology draft fips 
secure hash standard 
department commerce may 
evi nemeth garth snyder scott trent hein 
unix system administration handbook rd edition prentice hall 
rob pike dave presotto sean dorward bob ken thompson howard trickey phil 
plan bell labs computing systems vol 
pp 
summer 
sean quinlan 
cache worm file system 
software practice experience vol pp december 
douglas michael feeley norman hutchinson alistair veitch ross jacob 
deciding forget elephant file system 
proceedings th symposium operating systems principles december 
john 
strunk garth goodson michael craig soules gregory ganger 
self securing storage protecting data compromised systems 
proceedings th symposium operating systems design implementation october 
thompson best 
magnetic data storage technology ibm journal research development vol pp 
may 
ziv lempel 
universal algorithm sequential data compression ieee trans 
inform 
theory vol 
pp 
may 
