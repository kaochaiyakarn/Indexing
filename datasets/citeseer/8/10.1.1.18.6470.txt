gate environment teaching nlp bontcheva hamish cunningham valentin tablan diana maynard department computer science university sheffield sheffield dp uk hamish diana dcs shef ac uk argue gate architecture visual development environment effective tool teaching language engineering computational linguistics 
gate comes customisable extendable set components allows students get hands experience building nlp applications 
gate tools corpus annotation performance evaluation students go entire application development process graphical development environment 
offers comprehensive unicode compliant multilingual support allowing students create components languages english 
nlp teaching tools designed specifically purpose gate system developed actively language engineering research 
unique duality allows students contribute research projects gain skills embedding hlt practical applications 
students learn programming benefit integrated development environments support entire application development process writ ing code testing documentation 
addition environments offer support automation common tasks user interfaces designed easily assembling visually components menus windows 
similarly nlp cl students benefit existence graphical development environment allows get hands experience aspect developing evaluating language processing modules 
addition tool enable students see clearly practical relevance need language processing allowing experiment easily building nlp powered web applications 
shows existing infrastructure language engineering research gate cunningham cunningham successfully nlp teaching environment addition successful vehicle building nlp applications reusable components maynard maynard 
key features gate particularly suitable teaching system designed separate cleanly low level tasks data storage data visualisation location loading components execution processes data structures algorithms process human language 
way students concentrate studying modifying nlp data algorithms leaving mundane tasks gate 
automating measurement performance language processing components facilities creation annotated corpora needed 
providing baseline set language processing components extended replaced students required 
modules typically separate clearly linguistic data algorithms allowing teachers separately students adapt modules new domains languages just modifying linguistic data 
comes exhaustive documentation tutorials online movie demonstrations available web site gate ac uk 
gate language processing modules developed promote robustness scalability nlp approaches applications emphasis language engineering research 
nlp le courses gate offer students opportunity learn non toy applications running big realistic datasets british national corpus news collected web crawler 
unique research teaching duality allows students contribute research projects gain skills embedding hlt practical applications 
gate teaching perspective gate cunningham architecture framework development environment human language technology modules applications 
comes set reusable modules able perform basic language processing tasks pos tagging semantic tagging 
eliminate need students re implement useful algorithms modules pre requisites completing assignments 
example marin dimitrov sofia university successfully completed masters degree implementing lightweight approach inal coreference resolution named entities uses gate reusable modules earlier processing builds results see section 
courses emphasis linguistic annotation corpus gate corpus annotation environment see gate ac uk talks tutorial 
annotation done completely manually bootstrapped running gate processing resources corpus correcting adding new annotations manually 
facilities courses assignments students need learn create data quantitative evaluation nlp systems 
evaluated requirements teaching environments discussed bird gate covers quite 
graphical development environment jape language facilitate difficult tasks 
inter module consistency achieved annotations model hold language data extensibility modularity reason gate successfully research projects maynard 
addition gate offers robustness scalability allow students experiment big corpora british national corpus approx 
gb 
subsections provide detail aspects gate 
gate graphical development environment gate comes graphical development environment gate gui facilitates students inspecting language processing results debugging modules 
environment facilities view documents corpora ontologies including popular prot editor noy linguistic data expressed annotations see shows document viewer annotations highlighted 
shows resource panel left loaded appli thesis available www com thesis pdf gate visual development environment cations language resources processing resources modules 
viewers editors complex linguistic data coreference chains syntax trees 
new graphical components integrated easily allowing lecturers customise environment necessary 
gate team developing new visualisation modules especially visual jape rule development tool 
gate api data model central concept needs learned students start gate annotation data model encodes linguistic data input put modules 
gate uses single unified model annotation modified form tipster format grishman largely compatible atlas format bird liberman 
annotations characterised type set features represented attribute value pairs 
annotations stored structures called annotation sets constitute independent layers annotation text content 
annotations format independent particular linguistic formalism order enable modules different linguistic theories 
generality enables representation linguistic information ranging simple results com coreference chains viewer plex parse trees discourse representation examples saggion 
addition annotation format allows representation incomplete linguistic structures partial parsing results 
gate tree viewing component written especially able display disconnected incomplete trees 
gate implemented java easier students typically familiar language programming courses 
gate api application programming interface fully documented javadoc examples comprehensive user guide cunningham 
students generally need java api majority modules gate jape language customisation existing development new modules requires knowledge jape annotation model described 
jape version common pattern specification language appelt describe patterns match annotations created result details see cunningham 
familiar gate data model students find difficult write jape rules effectively regular expressions concept familiar syntax tree viewer showing partial syntax tree sentence telecom news text cs students 
example rule existing named entity recognition grammar rule priority token orthography lookup kind kind rule rule matches pattern consisting kind word starts upper cased letter recognised followed entries gazetteer list designators words typically indicate companies gmbh 
annotates pattern entity type gives feature kind value feature rule value 
rule feature simply debugging purposes clear particular rule fired create annotation 
grammars sets rules need compiled students automatically analysed executed jape transducer module finite visual evaluation tool state transducer annotations document 
grammars stored files plain text format edited text editor notepad vi 
rule development process performed students gate visual environment see execute grammars visualise results 
process cycle students write rules re initialise transducer gate gui right clicking run test data check results go back improving rules 
evaluation part cycle performed gate visual evaluation tools produce precision recall measure automatically see 
advantage jape student assignments learned students enables experiment variety nlp tasks tokenisation sentence splitter chunking template information extraction 
need compiled supports incremental development jape ideal rapid prototyping students experiment alternative ideas 
students doing bigger projects final year project want develop gate modules finite state machinery jape 
assignment require development complex grammars jape case java code right hand side rule 
gate modules typically access manipulate annotations students need learn part gate api classes 
experience msc students lal marin dimitrov shown significant problems 
useful modules splits text simple tokens numbers punctuation symbols words different types initial capital upper case 
generally need modified different applications text types 
currently recognises types words whitespace patterns numbers symbols punctuation handle language indo european group modifications 
available open source student assignment modify rules cope languages specific problems language 
finite state technology rules independent algorithm executes 
sentence splitter cascade finitestate transducers segments text sentences 
module required tagger 
splitter tagger application independent 
splitter grammars modified part student project deal specifically formatted texts 
tagger modified version brill tagger assigns part speech tag word symbol 
modify tagger behaviour students re train relevant annotated texts 
gazetteer consists lists cities organisations days week consists entities names useful indicators typical designators titles gazetteer lists compiled finite state machines annotate occurrence list items document 
students easily extend existing lists add new ones double clicking gazetteer processing resource brings gazetteer editor installed gate unicode editor 
jape transducer module runs jape grammars doing tasks chunking named entity recognition default gate supplied ne transducer performs named entity recognition english vp chunker shows chunking done jape 
simpler terms grammar rules complexity somewhat incomplete np chunker obtained request author 
module primary objective perform entity tracking recognising relations entities orthographically matching names 
secondary role improving named entity recognition assigning annotations previously unclassified names relations existing entities 
support languages english gate uses unicode unicode consortium tested variety romance languages 
ability handle unicode data separation data algorithms allows students perform easily small scale experiments porting nlp components new languages 
graphical development environment supports fully creation editing visualisation linguistic data documents corpora unicode supported languages see tablan 
order easier foreign students gui planning localise menus error messages buttons currently english 
installation programming languages support gate java run platform java support 
easier install maintain gate comes installation wizards major platforms 
allows creation site wide gate configuration file settings need specified copies run stu dents configuration modules available 
addition gate allows students configuration settings specify modules available 
personal settings override gate default site wide configurations 
students easily install gate home computers installation program 
gate allows applications saved moved computers platforms students easily home lab transfer data applications 
gate graphical environment comes configured default save state exit students automatically get applications modules data restored automatically time load gate 
gate java modules written languages integrated 
example prolog modules easily executable jasper java prolog linking library 
programming languages support java native interface jni 
existing uses gate teaching locations diverse bulgaria copenhagen surrey system order avoid having write simple things sentence splitters scratch enable visualisation management data 
example lal imperial college developing summarisation system gate annie project meng degree computing www doc ic ac uk pl 
site includes url components url gate loads software network 
student project discussed detail section 
colleagues universities edinburgh umist manchester sussex reported previous versions system teaching university stuttgart produced tutorial ger man purposes 
educational users early versions gate include exeter university imperial college stuttgart university university edinburgh 
order facilitate gate teaching tool provided number tutorials online demonstrations exhaustive documentation gate web site gate ac uk 
example msc project goal develop coreference resolution module integrated named entity recognition system provided gate 
required number tasks performed student corpus analysis ii implementation integration iii testing quantitative evaluation 
student developed lightweight approach resolving pronominal coreference named entities implemented gate module run existing ne modules provided framework 
enabled existing annotated corpus information extraction evaluation competition gate evaluation tools establish module compared results reported literature 
testing process simple gate visualisation facilities capable displaying coreference chains documents 
gate allowed student achieve verifiable results quickly incur substantial integration overheads comes bootstrap tool automates creation gate compliant nlp modules 
steps need followed bootstrap tool create empty java module add implementation 
java development environment stages students familiar compile class uses java archive jar file gate details example see cunningham 
bootstrap wizard dialogue generates automatically makefile facilitate process write xml configuration data new resource tell gate url new jar xml files 
example topics gate wide range tasks teaching number topics 
topics covered part course gate language processing language engineering computational linguistics differences methodologies problems 
architectures portability robustness corpora web 
corpora annotation evaluation tools methodologies 
basic modules tokenisation sentence splitting gazetteer lookup 
part speech tagging 
information extraction issues tasks representing linguistic data tipster annotation format muc results achieved 
named entity recognition 
coreference resolution template elements relations scenario templates parsing chunking document summarisation ontologies discourse interpretation language generation language generation parsing summarisation discourse interpretation modules currently distributed gate obtained contacting authors 
modules text classification learning algorithms general developed near 
lecturer willing contribute modules gate welcome offered integration support 
example assignments availability example modules variety nlp tasks allows students basis development entire nlp application consisting separate modules built course 
example consider problems recognising chemical formulae texts making system extracts information dialogues 
tasks require students changes number existing components write new grammars 
example assignments chemical formulae recognition follow probably dialogues assignment modifications regular expression grammar formulae clo li ti suitable way 
gazetteer create new lists containing new useful clues types data chemical elements abbreviations 
named entity recognition write new grammar executed new jape transducer module recognition chemical formulae 
assignments dialogue application sentence splitter modify splits correctly dialogue texts account speaker information dialogues punctuation 
example full name 
err john smith confirm postcode telephone number security 
erm postcode 
ab cd corpus annotation evaluation default named entity recogniser bootstrap manual annotation test data dialogue application evaluate performance default ne grammars dialogue texts suggest possible improvements basis information missed incorrect annotations provided corpus benchmark tool 
named entity recognition implement improvements proposed previous step changing default ne grammar rules introducing rules specific dialogue domain 
assignments connected particular domain application chunking implement np chunker jape 
look vp chunker grammars examples 
template experiment extracting information dialogues templates jape example implementation provided soon 
group students building web applications embed applications developed far web application takes web page returns annotated entities 
gate ac uk annie index jsp example 
near possible assignments summarisation generation modules development 
possible demonstrate parsing discourse interpretation modules implemented prolog somewhat difficult modify assignments recommended 
modules bird assignments 
outlined gate system key features effective tool teaching nlp cl main advantage gate framework graphical development environment suitable research teaching making easier connect allow student carry final year project contributes novel research carried lecturers 
development environment comes comprehensive set tools cover entire application development cycle 
provide students hands experience wide variety tasks 
universities willing gate teaching tool benefit comprehensive documentation tutorials online demonstrations 
appelt 

common pattern specification language 
technical report sri international artificial intelligence center 
bird liberman 

formal framework linguistic annotation 
technical report ms cis department computer information science university pennsylvania 
xxx lanl gov abs cs cl 
cunningham maynard bontcheva tablan 

gate framework graphical development environment robust nlp tools applications 
proceedings th anniversary meeting association computational linguistics 
cunningham maynard bontcheva tablan 

gate user guide 
gate ac uk 
cunningham 

gate general architecture text engineering 
computers humanities 
grishman 

tipster architecture design document version 
technical report darpa 
www itl nist gov div related projects tipster 
bird 

natural language toolkit 
acl workshop effective tools methodologies teaching nlp 
maynard cunningham bontcheva george robert gaizauskas mark hepple patrick herring brian mitchell michael wim peters andrea mark stevenson valentin tablan christian yorick wilks 

survey uses gate 
technical report cs department computer science university sheffield 
maynard tablan cunningham wilks 

named entity recognition diverse text types 
advances natural language processing conference bulgaria 
maynard tablan cunningham saggion bontcheva wilks 

architectural elements language engineering robustness 
journal natural language engineering special issue robust methods analysis natural language data 
forthcoming 
noy sintek decker fergerson musen 

creating semantic web contents prot 
ieee intelligent systems 
saggion cunningham bontcheva maynard wilks 

access multimedia information multisource multilanguage information extraction 
th workshop applications natural language information systems stockholm sweden 
tablan bontcheva cunningham maynard tony paul baker mark 

unicode environment creation language resources 
proceedings rd language resources evaluation conference 
forthcoming 
unicode consortium 

unicode standard version 
addison wesley reading ma 
