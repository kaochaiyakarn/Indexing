functional programming january fl cambridge university press tutorial universality expressiveness fold graham hutton university nottingham uk www cs nott ac uk functional programming fold standard operator encapsulates simple pattern recursion processing lists 
article tutorial key aspects fold operator lists 
emphasize universal property fold proof principle avoids need inductive proofs definition principle guides transformation recursive functions definitions fold 
secondly show pattern recursion encapsulated fold simple language tuples functions class values fold operator greater expressive power expected 
programs involve repetition naturally expressed form recursion properties proved programs form induction 
functional approach programming recursion induction primary tools defining proving properties programs 
surprisingly recursive programs share common pattern recursion inductive proofs share common pattern induction 
repeating patterns tedious time consuming prone error 
repetition avoided introducing special recursion operators proof principles encapsulate common patterns allowing concentrate parts different application 
functional programming fold known foldr standard recursion operator encapsulates common pattern recursion processing lists 
fold operator comes equipped proof principle called universality encapsulates common pattern inductive proof concerning lists 
fold universal property form basis simple powerful calculational theory programs process lists 
theory generalises lists variety datatypes simplicity restrict attention lists 
article tutorial key aspects fold operator lists 
emphasize universal property fold derived fusion property proof principles avoid need inductive proofs definition principles guide transformation recursive functions graham hutton definitions fold 
secondly show pattern recursion encapsulated fold simple language tuples functions class values fold operator greater expressive power expected permitting powerful universal fusion properties fold applied larger class programs 
article concludes survey recursion operators space pursue 
article aimed reader familiar basics functional programming say level bird wadler bird :10.1.1.31.3551
programs article written haskell peterson standard lazy functional programming language 
special features haskell ideas easily adapted functional languages 
fold operator fold operator origins recursion theory kleene fold central concept programming language dates back reduction operator apl iverson insertion operator fp backus 
haskell fold operator lists defined follows fold ff fi fi fi 
ff fi fold fold xs fold xs function type ff fi fi value type fi function fold processes list type ff give value type fi replacing nil constructor list value cons constructor list function manner fold operator encapsulates simple pattern recursion processing lists constructors lists simply replaced values functions 
number familiar functions lists simple definition fold example sum int int product int int sum fold product fold theta bool bool bool bool fold true fold false recall enclosing infix operator phi parentheses phi converts operator prefix function 
notational device called sectioning useful defining simple functions fold required arguments operator enclosed parentheses 
example function appends lists give single list defined follows ff ff ff ys fold ys examples far constructor replaced built function 
applications fold constructor replaced userdefined function defined nameless function notation definitions standard list processing functions tutorial universality expressiveness fold length ff int length fold reverse ff ff reverse fold xs xs map ff fi 
ff fi map fold xs xs ilter ff bool 
ff ff ilter fold xs xs xs programs written fold readable programs written explicit recursion constructed systematic manner better suited transformation proof 
example see article definition map fold constructed standard definition explicit recursion importantly definition fold simplifies process proving properties map function 
universal property fold fold operator universal property fold origins recursion theory 
systematic universal property functional programming malcolm generalisation bird theory lists bird meertens arbitrary regular datatypes :10.1.1.100.9674
finite lists universal property fold stated equivalence definitions function processes lists xs xs fold right left direction substituting fold equations gives recursive definition fold conversely left right direction equations precisely assumptions required show fold simple proof induction finite lists bird :10.1.1.31.3551
taken universal property states finite lists function fold just solution defining equations fact unique solution 
key utility universal property explicit assumptions required certain pattern inductive proof 
specific cases verifying assumptions typically done need induction appeal universal property complete inductive proof fold manner universal property fold encapsulates simple pattern inductive proof concerning lists just fold operator encapsulates simple pattern recursion processing lists 
universal property fold generalised handle partial infinite lists bird simplicity consider finite lists article :10.1.1.31.3551
graham hutton universality proof principle primary application universal property fold proof principle avoids need inductive proofs 
simple example consider equation functions process list numbers delta sum fold left hand function sums list increments result 
right hand function processes list replacing addition function empty list constant 
equation asserts functions give result applied list 
prove equation observing matches righthand side fold universal property fold delta sum 
appealing universal property conclude equation proved equivalent equations delta sum delta sum xs delta sum xs sight may complicated original equation 
simplifying definitions composition sectioning gives sum sum xs sum xs verified simple calculations shown columns sum sum xs definition sum definition sum sum xs arithmetic arithmetic sum xs completes proof 
normally proof required explicit induction 
proof induction encapsulated universal property fold result proof reduced simplification step followed simple calculations 
general functions lists proved equal induction proved equal universal property fold operator provided course functions expressed fold expressive power fold operator addressed article 
fusion property fold generalise sum example consider equation functions process list values delta fold fold pattern equation occurs frequently reasoning programs written fold true general universal property fold tutorial universality expressiveness fold calculate conditions equation true 
equation matches right hand side universal property conclude equation equivalent equations delta fold delta fold xs delta fold xs simplifying definition composition gives fold fold xs fold xs simplified calculations fold definition fold fold xs fold xs definition fold fold xs fold xs generalising fold xs fresh variable universal property fold calculated explicit induction simple conditions sufficient ensure finite lists composition arbitrary function fold fused give single fold interpretation property called fusion property fold operator stated follows delta fold fold systematic fusion property functional programming malcolm generalising earlier bird meertens bird meertens :10.1.1.100.9674
universal property primary application fusion property proof principle avoids need inductive proofs 
fact practical examples fusion property preferable universal property 
simple example consider equation delta sum fold previous section equation proved universal property fold proof simpler fusion property 
replace function sum definition fold earlier delta fold fold equation matches fusion property conclude equation follows assumptions graham hutton simplifying equations definition sectioning gives true simple properties arithmetic 
generally replacing addition example arbitrary infix operator phi associative simple application fusion shows phi delta fold phi fold phi phi interesting example consider known equation asserts map operator distributes function composition delta map delta map map delta replacing second third occurrences map operator equation definition fold earlier equation rewritten form matches fusion property map delta fold xs xs fold xs 
delta xs appealing fusion property simplifying gives equations trivially true definitions map delta map map delta map addition fusion property number useful properties fold operator derived universal property bird :10.1.1.31.3551
fusion property suffices practical cases revert full power universal property fusion appropriate 
universality definition principle proof principle universal property fold definition principle guides transformation recursive functions definitions fold simple example consider recursively defined function sum calculates sum list numbers sum int int sum sum xs sum xs suppose want redefine sum fold want solve equation sum fold function value observing equation matches right hand side universal property conclude equation equivalent equations sum sum xs sum xs tutorial universality expressiveness fold equation definition sum immediate 
second equation calculate definition follows sum xs sum xs definition sum sum xs sum xs generalising sum xs functions universal property calculated sum fold note key step calculating definition generalisation expression sum xs fresh variable fact generalisation step specific sum function key step transformation recursive function definition fold manner 
course sum example artificial definition sum fold immediate 
examples functions definition fold immediate 
example consider recursively defined function map applies function element list map ff fi 
ff fi map map xs map xs redefine map fold solve equation map fold function value appealing universal property conclude equation equivalent equations map map xs map xs equation definition map immediate 
second equation calculate definition follows map xs map xs definition map map xs map xs generalising map xs ys ys ys functions ys ys universal property calculated map fold ys ys general function lists expressed fold operator transformed definition universal property fold graham hutton increasing power fold generating tuples simple example fold generate tuples consider function calculates sum length list numbers int 
int int xs sum xs length xs straightforward combination definitions functions sum length fold earlier function redefined single application fold generates pair numbers list numbers fold 
definition efficient original definition single traversal argument list separate traversals 
generalising example pair applications fold list combined give single application fold generates pair appealing called banana split property fold meijer 
strange name property derives fact fold operator written brackets resemble bananas pairing operator called split 
combination termed banana split 
interesting example consider function dropwhile removes initial elements list elements satisfy predicate dropwhile ff bool 
ff ff dropwhile dropwhile xs dropwhile xs xs suppose want redefine dropwhile fold operator 
appealing universal property conclude equation dropwhile fold equivalent equations dropwhile dropwhile xs dropwhile xs equation immediate 
second equation attempt calculate definition normal manner dropwhile xs dropwhile xs definition dropwhile dropwhile xs xs dropwhile xs generalising dropwhile xs ys ys xs ys unfortunately final line valid definition variable xs occurs freely 
fact possible redefine dropwhile directly fold possible indirectly general function dropwhile ff bool 
ff 
ff ff dropwhile xs dropwhile xs xs tutorial universality expressiveness fold pairs result applying dropwhile list list redefined fold appealing universal property conclude equation dropwhile fold equivalent equations dropwhile dropwhile xs dropwhile xs simple calculation equation gives 
second equation calculate definition follows dropwhile xs dropwhile xs definition dropwhile dropwhile xs xs dropwhile xs xs definition dropwhile dropwhile xs xs xs dropwhile xs xs generalising dropwhile xs ys ys xs xs ys xs note final line valid definition variables bound 
summary universal property calculated dropwhile fold ys xs ys xs xs definition satisfies equation dropwhile xs dropwhile xs xs dropwhile definition 
function dropwhile redefined simply dropwhile fst delta dropwhile generalising function dropwhile pairs desired result argument list shown function dropwhile redefined terms fold required 
fact result instance general theorem meertens states function finite lists defined pairing desired result argument list redefined terms fold way original possibly recursive definition function 
primitive recursion section show tupling technique previous section primitive recursive function lists redefined terms fold recalling fold operator captures simple pattern recursion defining function processes lists xs xs functions redefined fold generalise pattern recursion primitive recursion steps 
introduce extra graham hutton argument function base case processed new function recursive case passed unchanged functions consider pattern recursion defining function xs xs simple observation routine application universal property fold function redefined fold follows fold second step introduce list xs extra argument auxiliary function consider pattern defining xs xs xs pattern recursion lists called primitive recursion kleene 
technically standard definition primitive recursion requires argument finite sequence arguments 
tuples class values haskell treating case single argument sufficient 
order redefine primitive recursive functions terms fold solve equation fold function value possible directly possible indirectly general function xs xs xs pairs result applying list list redefined fold appealing universal property fold conclude equation fold equivalent equations xs xs simple calculation equation gives 
second equation calculate definition follows xs xs definition xs xs xs xs definition xs xs xs xs xs generalising xs xs xs xs summary universal property calculated fold xs xs xs tutorial universality expressiveness fold definition satisfies equation xs xs xs definition 
primitive recursive function redefined simply fst delta shown arbitrary primitive recursive function lists redefined terms fold note tupling define primitive recursive functions terms fold precisely key defining predecessor function church numerals barendregt 
intuition representation natural numbers generally inductive datatype calculus idea representing number fold operator 
example number succ succ succ zero represented term fold operator sense arguments viewed replacements succ zero constructors respectively 
fold generate functions having functions class values increases power primitive recursion power fold operator 
simple example fold generate functions function compose forms composition list functions defined fold replacing list composition function delta empty list identity function id compose ff ff 
ff ff compose fold delta id interesting example consider problem summing list numbers 
natural definition function sum fold processes numbers list right left order 
possible define function suml processes numbers left right order 
suml function naturally defined auxiliary function suml defined explicit recursion accumulating parameter suml int int suml xs suml xs suml suml xs suml xs addition function associative constant unit addition functions suml sum give result applied list 
function suml potential efficient easily modified run constant space bird :10.1.1.31.3551
suppose want redefine suml fold operator 
possible directly possible indirectly auxiliary function suml int 
int int redefined fold appealing universal property conclude equation suml fold equivalent equations graham hutton suml suml xs suml xs simple calculation equation gives id second equation calculate definition function follows suml xs suml xs functions suml xs suml xs definition suml suml xs suml xs generalising suml xs functions 
summary universal property calculated suml fold 
id definition states suml processes list replacing empty list identity function id lists constructor function takes number function returns function takes accumulator value returns result applying new accumulator value note structuring arguments suml int 
int int crucial definition fold particular order arguments swapped supplied pair type suml means longer defined directly fold general care regarding structuring arguments required aiming redefine functions fold sight imagine fold define functions process elements lists right left order 
definition suml fold shows order elements processed depends arguments fold fold 
redefining auxiliary function suml fold shown function suml redefined terms fold required suml xs fold 
id xs section remarking fold generate functions provides elegant technique implementation attribute grammars functional languages fokkinga swierstra 
foldl operator generalise suml example consider standard operator foldl processes elements list left right order function combine values value starting value foldl fi ff fi fi 
ff fi foldl foldl xs foldl xs tutorial universality expressiveness fold operator suml redefined simply suml foldl 
functions defined simple way foldl example standard function reverse redefined foldl follows reverse ff ff reverse foldl xs xs definition efficient original definition fold avoids inefficient append operator lists 
simple generalisation calculation previous section function suml shows redefine function foldl terms fold foldl xs fold 
id xs contrast possible redefine fold terms foldl due fact foldl strict tail list argument fold 
number useful duality theorems concerning fold foldl guidelines deciding operator best suited particular applications bird :10.1.1.31.3551
ackermann function final example power fold consider function ack processes lists integers defined explicit recursion follows ack int 
int int ack ys ys ack xs ack xs ack xs ys ack xs ack xs ys ackermann function converted operate lists natural numbers representing number list arbitrary elements 
function classic example function primitive recursion firstorder programming language 
higher order language haskell ackermann function primitive recursive reynolds 
section show calculate definition ack terms fold appealing universal property fold equation ack fold equivalent equations ack ack xs ack xs simple calculation equation gives definition 
second equation proceeding normal manner result definition function reader may wish verify 
progress fold redefine function ack xs left hand side second equation 
appealing universal property equation ack xs fold equivalent equations ack xs ack xs ys ack xs ys graham hutton equation gives ack xs second ack xs ys ack xs ys definition ack ack xs ack xs ys ack xs ys generalising ack xs ys zs ack xs zs zs functions ack xs universal property calculated ack xs fold ack xs ack xs result calculate definition ack xs ack xs result fold ack xs ack xs ack xs generalising ack xs fold functions fold summary universal property twice calculated ack fold fold recursion operators final section briefly survey selection recursion operators space pursue article 
fold regular datatypes 
fold operator specific lists generalised uniform way regular datatypes 
ideas category theory single fold operator defined regular datatype malcolm meijer sheard fegaras 
fold nested datatypes 
fold operator generalised natural way nested datatypes 
resulting operator appears general widely useful 
finding solutions problem subject current research bird meertens jones 
fold functional datatypes 
generalising fold operator datatypes involve functions gives rise technical problems due contravariant nature function types 
ideas category theory fold operator defined works datatypes meijer hutton operator understood practical applications lacking 
simpler general solution rise interesting applications concerning cyclic structures fegaras sheard 
monadic fold 
series influential articles wadler showed pure functional programs require imperative features state exceptions tutorial universality expressiveness fold modelled monads wadler wadler wadler :10.1.1.100.9674
building notion monadic fold combines fold operators structure processing recursive values monads structure imperative features fokkinga meijer jeuring 
relational fold 
fold operator generalised natural way functions relations 
generalisation supports fold specification construct addition programming construct 
example relational fold circuit design calculus ruby jones sheeran jones eindhoven spec calculus aarts textbook algebra programming bird de moor 
recursion operators 
fold operator useful recursion operator 
example dual operator unfold constructing processing recursive values specification purposes jones bird de moor program reactive systems kieburtz program operational semantics hutton subject current research 
interesting recursion operators include called paramorphisms meertens hylomorphisms meijer malcolm 
automatic program transformation 
writing programs recursion operators simplify process optimisation compilation 
example eliminating intermediate data structures programs deforestation considerably simplified programs written recursion operators general recursion wadler launchbury sheard takano meijer :10.1.1.1.7380
generic system transforming programs written recursion operators currently development de moor 
polytypic programming 
defining programs specific particular datatypes rise new field called polytypic programming backhouse 
formally polytypic program parameterised datatypes 
polytypic programs defined number applications including pattern matching jeuring unification jansson jeuring various optimisation problems bird de moor 
programming languages 
number experimental programming languages developed focus recursion operators general recursion 
examples include algebraic design language adl kieburtz lewis categorical programming language charity cockett fukushima polytypic programming language polyp jansson jeuring 
erik meijer members languages programming group nottingham hours interesting discussions fold am grateful roland backhouse mark jones philip wadler anonymous referees detailed comments article led substantial improvement content presentation 
supported engineering physical sciences research council epsrc research gr structured recursive programming 
graham hutton aarts backhouse roland hoogendijk paul ed van der jaap 

relational theory datatypes 
available world wide web www win tue nl win cs wp papers papers html 
backhouse roland jansson patrik jeuring johan meertens lambert 
sept 
generic programming 
lecture notes rd international summer school advanced functional programming 
backus john 

programming liberated von neumann style 
functional style algebra programs 
cacm aug 
barendregt henk 

lambda calculus syntax semantics 
northholland 
revised edition 
bird richard 

constructive functional programming 
proc 
marktoberdorf international summer school constructive methods computer science 
springer verlag 
bird richard 

functional programming haskell second edition prentice hall 
bird richard de moor oege 

algebra programming 
prentice hall 
bird richard meertens lambert 

nested datatypes 
jeuring johan ed proc 
fourth international conference mathematics program construction 
lncs vol 

springer verlag 
bird richard wadler philip 

functional programming 
prentice hall 
cockett robin fukushima tom 

charity 
yellow series report 
department computer science university calgary 
de moor oege ganesh 
sept 
generic program transformation 
lecture notes rd international summer school advanced functional programming 
fegaras leonidas sheard tim 

revisiting datatypes embedded functions 
proc 
rd acm sigplan sigact symposium principles programming languages 
fokkinga maarten 
june 
monadic maps folds arbitrary datatypes 
memoranda informatica 
university twente 
fokkinga maarten jeuring johan meertens lambert meijer erik 

translating attribute grammars catamorphisms 

hutton graham 

fold unfold program semantics 
proc 
rd acm sigplan international conference functional programming 
iverson kenneth 

programming language 
wiley new york 
jansson patrick jeuring johan 

polytypic unification 
appear journal functional programming 
jansson patrik jeuring johan 

polyp polytypic programming language extension 
proc 
th acm sigplan sigact symposium principles programming languages 
acm press 
jeuring johan 

polytypic pattern matching 
proc 
th international conference functional programming computer architecture 
acm press san diego california 
jones geraint 

designing circuits calculation 
technical report prg tr 
oxford university 
jones geraint sheeran mary 

circuit design ruby 
ed formal methods vlsi design 
elsevier science publications amsterdam 
jones mark paul 

pragmatic approach maps folds parameterized datatypes 
submitted publication 
kieburtz richard 

reactive functional programming 
proc 

chapman hall 
tutorial universality expressiveness fold kieburtz richard lewis jeffrey 

algebraic design language preliminary definition 
oregon graduate institute science technology 
kleene 

metamathematics 
van nostrand 
launchbury john sheard tim 

warm fusion deriving build recursive definitions 
proc 
th international conference functional programming computer architecture 
acm press san diego california 
malcolm 

algebraic data types program transformation 
ph thesis groningen university 
malcolm 

algebraic data types program transformation 
science computer programming 
meertens lambert 
nov 
algorithmics programming mathematical activity 
proc 
cwi symposium 
meertens lambert 

paramorphisms 
formal aspects computing 
meijer erik 

calculating compilers 
ph thesis nijmegen university 
meijer erik hutton graham 

bananas space extending fold unfold exponential types 
proc 
th international conference functional programming computer architecture 
acm press san diego california 
meijer erik jeuring johan 

merging monads folds functional programming 
jeuring johan meijer erik eds advanced functional programming 
vol 

springer verlag 
meijer erik fokkinga maarten paterson ross 

functional programming bananas lenses envelopes barbed wire 
hughes john ed proc 
conference functional programming computer architecture 
lncs 
springer verlag 
peterson john apr 
haskell language report version 
available world wide web www haskell org 
reynolds john 

approaches type structure 
proc 
international joint conference theory practice software development 
lecture notes computer science vol 

springer 
sheard tim fegaras leonidas 

fold seasons 
proc 
acm conference functional programming computer architecture 
springer 
swierstra doaitse pablo joao 
sept 
designing implementing combinator languages 
lecture notes rd international summer school advanced functional programming 
takano meijer erik 

shortcut deforestation calculational form 
proc 
th international conference functional programming computer architecture 
acm press san diego california 
wadler philip 
oct 
applicative style programming program transformation list operators 
proc 
acm conference functional programming languages computer architecture 
wadler philip 

comprehending monads 
proc 
acm conference lisp functional programming 
wadler philip 

essence functional programming 
proc 
principles programming languages 
wadler philip 

monads functional programming 
broy manfred ed proc 
marktoberdorf summer school program design calculi 
springer verlag 
