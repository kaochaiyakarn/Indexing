functional programming january fl cambridge university press higher order functions graham hutton department computer science university utrecht po box tb utrecht netherlands 
combinator parsing text parsers resembles bnf notation 
basic method number extensions 
address special problems white space parsers separate lexical syntactic phases 
particular combining form handling offside rule 
extensions basic method include combining form useful applications simple means combinator parsers produce informative error messages 
broadly speaking parser may defined program analyses text determine logical structure 
example parsing phase compiler takes program text produces parse tree structure program 
programs improved having input parsed 
form input acceptable usually defined context free grammar bnf notation 
parsers may built hand generated automatically tools lex yacc unix aho 
methods building parsing particular gained widespread acceptance lazy functional languages 
method parsers modelled directly functions larger parsers built piecewise smaller parsers higher order functions 
example define higher order functions sequencing alternation repetition 
way text parsers closely resembles bnf notation 
parsers style quick build simple understand modify 
sequel refer method combinator parsing higher order functions combine parsers 
combinator parsing considerably powerful commonly methods able handle ambiguous grammars providing full backtracking needed 
fact just parsing 
semantic actions added parsers allowing results manipulated way please 
example section convert parser arithmetic expressions evaluator simply changing semantic actions 
generally imagine generating form machine code programs parsed 
appears journal functional programming july 
graham hutton principles widely known due part wadler little written combinator parsing 
article basic method number extensions 
techniques may lazy functional language higher order polymorphic style type system 
programming examples features standard functions explained 
library parsing functions taken available electronic mail author 
versions exist miranda lazy ml 
parsing combinators defining type parsers 
parser may viewed function string symbols result value 
parser consume entire string part result suffix input string 
parser may able produce result 
example may expecting letter find digit 
defining special type success failure parser choose parsers return list pairs result empty list denoting failure singleton list xs indicating success value input xs 
shall see section having parsers return list results proves useful 
want specify type parser regardless kind symbols results involved types included extra parameters 
miranda type variables denoted sequences stars 
parser 
example parser arithmetic expressions type parser char expr indicating takes string characters produces expression tree 
notice parser new type abbreviation synonym purpose types involving parsers easier understand 
primitive parsers primitive parsers building blocks combinator parsing 
corresponds symbol bnf notation denoting empty string 
succeed parser succeeds consuming input string 
outcome succeed depend input result value pre determined included extra parameter succeed 
parser succeed inp inp definition relies partial application properly 
order arguments means succeed supplied argument result parser function succeeds value 
example succeed miranda trademark research software limited 
higher order functions parsing parser returns value 
furthermore succeed plainly arguments type suggest 
magic second argument simply hidden inside type result clear expansion type parser abbreviation 
succeed fails fail regardless input string fail parser fail inp function allows parsers recognise single symbols 
enumerating acceptable symbols find convenient provide set implicitly predicate determines arbitrary symbol member 
successful parses return consumed symbol result value 
satisfy 
bool 
parser satisfy fail satisfy xs succeed xs fail xs notice succeed fail example 
strictly necessary presence parser easier read 
note parser satisfy returns failure supplied empty input string 
satisfy define parser single symbols literal 
parser literal satisfy example applying parser literal string gives result 
definition literal function tests argument equality example operator sectioning useful syntactic convention allows partially apply infix operators 
combinators basic building blocks consider put form useful parsers 
bnf notation larger grammars built piecewise smaller ones denote alternation juxtaposition indicate sequencing 
parsers resemble bnf notation define higher order functions correspond directly operators 
higher order functions combine parsers form parsers referred combining forms combinators 
terms 
alt combinator corresponds alternation bnf 
parser alt recognises 
normally interpret sequential exclusive manner returning result parser succeed failure 
approach taken fairbairn 
graham hutton combinator parsing inclusive acceptable parsers succeed case return results 
general combinator parsers may return arbitrary number results 
explains decision earlier parsers return list results 
parsers returning list alt implemented simply appending denoted miranda result applying parsers input string 
keeping bnf notation miranda notation convert alt infix operator 
just sectioning infix notation merely syntactic convenience equivalent contexts 
alt parser 
parser 
parser alt inp inp inp knowing empty list identity element easy verify definition failure identity element alternation fail alt alt fail practical terms means alt expected behaviour argument parsers succeeds 
similarly alt inherits associativity alt alt alt alt 
means need worry bracketing repeated alternation correctly 
allowing parsers produce result allows handle ambiguous grammars possible parses produced ambiguous string 
feature proved particularly useful natural language processing frost 
example ambiguous string frost discovered moon orbits mars jupiter interested single longest parse string consumes symbols 
reason normal combinator parsing arrange parses returned descending order length 
required little care ordering argument parsers alt 
see example combinator section 
combinator corresponds sequencing bnf 
parser recognises placed succession 
parser may succeed results input stream suffix second parser applied turn 
manner results produced successful parse parser 
combined pairing form single result compound parser 
parser 
parser 
parser inp inp example applying parser literal literal input abcd gives result cd 
combinator excellent example list comprehension notation analogous set comprehension mathematics fx defines squares lists replace sets elements drawn determined order 
elegance combinator lost notation available 
higher order functions parsing alternation sequencing associative due tupling results component parsers 
miranda infix operators notation assumed associate right 
write interpreted 
manipulating values part result parser value 
combinator allows manipulate results building parse tree common application 
parser behaviour parser function applied result values parser 
parser inp inp counterpart pure bnf notation common delta delta deltag operator yacc aho 
fact combinator restrict building parse trees 
arbitrary semantic actions 
example section convert parser arithmetic expressions evaluator simply changing actions 
clear connection attribute 
relevant article attribute grammars johnsson 
combinator parser may viewed implementation lazy functional language attribute grammar node inherited attribute input string synthesised attributes result value parse part input string 
remainder section define useful new parsers combinators terms primitives 
bnf notation repetition occurs merit abbreviation 
zero repetitions phrase admissible simply write formally notation defined equation 
combinator corresponds directly operator defined way parser 
parser cons alt succeed action cons uncurried version list constructor defined cons xs xs 
combinator parsers return possible parses grammar failure occurs nth application results returned gamma successful applications 
convention results returned descending order length 
example applying parser literal string gives list aaa aa ab aab surprisingly parser corresponds common iterative form bnf defined parser behaviour accepts repetitions zero graham hutton parser 
parser cons note may fail succeeds 
define parsers number words non empty sequences digits letters number parser char char word parser char char number satisfy digit digit word satisfy letter letter combinator generalisation literal primitive allowing build parsers recognise strings symbols just single symbols string 
parser string succeed string xs literal string xs cons example applying parser string string gives output 
important note string xs fails prefix sequence xs available input string 
define parsers combinator prune unwanted components parse tree 
recall parsers composed sequence produce pair results 
interested component pair 
example common throw away reserved words parsing 
cases special versions combinator useful throw away left right result values reflected position letter names parser 
parser 
parser parser 
parser 
parser snd fst actions fst snd standard projection functions pairs defined fst snd interested result parser parser succeeds 
example find reserved word lexical analysis may convenient return short representation string 
return combinator useful cases 
parser return behaviour returns value successful higher order functions parsing return parser 
parser return const const example conclude combinator parsing derivation simple parser 
suppose program works arithmetic expressions defined miranda follows expr num num expr add expr expr sub expr expr mul expr expr div expr imagine function converts terms type expr normal arithmetic notation 
example num mul num add num pretty printing quite simple inverse operation parsing usually thought involved 
shall see building combinator parser arithmetic expressions complicated implementing function 
start thinking parsing define bnf grammar expressions 
definition type expr may cast bnf notation 
need include expressions extra case expn expn expn expn gamma expn expn expn expn expn digit expn grammar basis parser practice useful impose little structure 
simplify expressions multiplication division normally assumed higher precedence addition subtraction 
example interpreted 
terms grammar introduce new non terminal level precedence expn term term term gamma term term term factor factor factor factor factor factor digit expn addition multiplication clearly associative division subtraction normally assumed associate left 
natural way express convention grammar left recursive production rules expn expn gamma term 
unfortunately top methods combinator parsing known left recursion leads non termination parser aho 
section show transform grammar eliminate left recursion 
leave grammar extra parenthesis disambiguate expressions involving repeated operations 
graham hutton grammar expressions simple step build combinator parser 
bnf description simply re written combinator notation augmented semantic actions manipulate result values expn term literal term plus alt term literal term minus alt term term factor literal factor times alt factor literal factor divide alt factor factor number value alt literal expn literal note parser special sequential combining forms strip non numeric components result values 
way arithmetic actions simply take pair expressions argument 
definitions actions standard miranda function converts string digits corresponding number 
value xs num xs plus add minus sub times mul divide div completes parser 
example expn gives add num mul sub num num num add num sub num num num result produced parser forced consume input 
expect longest parse returned 
behaviour results careful ordering alternatives parser 
parse tree natural output parser restriction combinator parsing 
example simply replacing standard semantic actions set evaluator arithmetic expressions 
value xs xs plus minus times divide div interpretation expn higher order functions parsing layout conventions programming languages set layout rules specify white space spaces tabs newlines may improve readability 
section show common layout conventions may handled combinator parsers 
free format input syntactic level programs comprise sequence tokens 
languages adopt free format input imposing restrictions white space permitted inside tokens may freely inserted strictly necessary tokens form single larger token 
white space normally stripped comments separate lexical phase source program divided component tokens 
approach developed section 
simple parsers separate lexer required case arithmetic expression parser previous section want allow white space 
nibble combinator provides simple solution 
parser nibble behaviour parser eats white space input string nibble parser char 
parser char nibble white white white literal combinator definition simplify parsers involving repeated literal string 
defined follows 
parser 
parser foldr alt fail library function foldr captures common pattern recursion lists 
takes list binary operator omega value ff replaces constructor list omega empty list ff 
example foldr 
example ff chosen right identity omega infix dot denotes function composition defined 
clear behaviour xn alt alt 
alt xn practice nibble conjunction string combinator 
abbreviation useful case symbol char 
parser char char symbol nibble string graham hutton example applying parser symbol hi string hi gives hi result 
points worth noting free format input 
practice indent programs reveal structure 
free format input allows prevent doing wrongly 
secondly extra symbols usually needed programs guide parser determining structure 
classic examples semi colon pascal 
offside rule approach layout adopted functional languages constrain generality free format input just extra symbols guide parser longer needed 
normally done imposing weak indentation strategy having parser intelligent layout determine structure programs 
consider example program clear intended global definitions local constraint guarantees determine structure programs way usually landin offside rule landin defined follows syntactic class obeys offside rule token object class lie directly right token 
token breaks rule said offside respect object terminates parse 
miranda offside rule applied body definitions special symbols separate definitions indicate block structuring required 
offside rule force specific way programs free personal styles 
worthwhile noting interpretations offside rule 
particular proposed standard functional language haskell takes slightly different approach hudak 
offside combinator keeping spirit combinator parsing define single combinator encapsulates offside rule 
parser imagine parser offside behaviour required consume precisely symbols respect symbol parsed 
parsers see suffix entire input string having knowledge consumed previous parsers 
implement offside combinator need context information decide symbols higher order functions parsing input 
approach extra information key offside combinator 
passing extra argument parsers assume symbol input string paired row column position stage prior parsing 
simplify types parsers involving offside rule abbreviation pos symbol type paired position 
pos num num input string assumed contain position symbol primitive parsing function satisfy changed slightly 
row column numbers guide parser reasonable satisfy strip information consumed symbols 
manner annotations input string concern building parsers entirely hidden parsing notation 
parsers defined terms satisfy need minor change types remain 
satisfy 
bool 
parser pos satisfy fail satisfy xs succeed xs fail xs able define offside combinator 
complication white space treated special case offside 
avoid problem assume white space stripped input prior parsing 
layout information lost symbol input paired position 
reality parsers separate lexical phase anyway comments white space stripped 
offside parser pos 
parser pos offside inp takewhile hd inp inp drop inp offside rule tells parser offside succeed consume precisely symbols input string 
definition sufficient apply parser longest prefix 
pattern list comprehension filters parses consume symbols 
successful parses simply return result value remaining portion input string 
interesting note offside combinator depend structure symbols input paired position 
example irrelevant symbols single characters complete tokens 
graham hutton completeness briefly explain standard miranda functions offside 
list function takewhile returns longest prefix predicate holds element 
function hd selects element list defined hd xs function drop retains elements list 
length operator lists 
building realistic parsers simple grammars parsed single phase programming languages need distinct parsing phases lexical syntactic analysis 
lexical analysis simple form parsing surprising find lexers may built combinator parsers 
section extended example shows build phase combinator parsers demonstrates offside combinator 
example language develop parser small programming language similar form miranda 
program shows syntactic features considering add sub answer mult program formed parser produce parse tree type script defined 
local definitions attached definitions language normal expression level parse tree 
script script def def def var var expn expn var var num num expn apply expn expn def var char context free aspects syntax captured bnf grammar 
non terminals var num correspond variables numbers defined usual way 
ambiguity resolved offside rule applied body definitions avoid special symbols separate definitions delimit scope 
prog defn defn var body body expr defn expr expr prim prim prim var num expr expect application associating left language expressed left recursive production rule grammar expr 
higher order functions parsing mentioned section left recursion top parsing methods mix 
build combinator parser grammar eliminate left recursion 
consider left recursive production rule ff fffi fl assumed fl ff 
assumption ensures production non recursive base case 
general situation recursive production ff reader referred aho 
language generated ff unwinding recursion times clear single fl followed number fis acceptable 
assert ff equivalent ff fffi fl 
proof simple fl fi fi properties fi fl distributivity fi fl properties sequencing fffi fl definition ff example language allows replace left recursive expr production rule expr prim prim turn simplifies expr prim languages accepted left recursive iterative production rules provably equivalent parse trees fact different 
problem fixed simple action parser return point section 
layout analysis recall offside combinator assumes white space input replaced row column annotations symbols 
character paired position simple layout phase prior lexical analysis 
white space stripped lexer normal practice 
pl pl pl xs pl tab xs pl xs pl xs tab div lexical analysis primary function lexical analysis divide input string component tokens 
context token comprises tag string 
strings tag may treated equal syntax analysis 
token tag char example imagine ident add lpar tokens corresponding strings add 
sentence previ graham hutton ous paragraph reserved word symbol requires unique tag 
avoid tedium choose bundle tokens tag symbol tag ident number symbol junk example tokens number symbol correspond strings 
special tag junk things white space comments required stripped syntax analysis 
parsers lexers ultimately defined terms primitive parsing function satisfy 
earlier decided place throw away position consumed symbols 
need information offside combinator requires token paired position 
solution define new combinator tok encapsulates process pairing token position 
tok applied parser complete tokens convenient include tag extra parameter tok 
see tok provides means change parser result type char parser result type pos token 
tok parser pos char char 
tag 
parser pos char pos token tok inp xs xs inp hd inp example string tok symbol parser produces pair symbol result successful position character input string 
notice tok may fail parsers admit empty string trying select position character input string left 
reasonable ignore problem guarantee termination lexer empty string admissible token 
turn attention lexical analysis 
thinking moment lexer clear general structure follows pi parser ti tag 
tok alt tok alt 
alt pn tok tn find convenient define combinator builds parsers form 
list 
parsers tags lex combinator builds lexer 
lex parser pos char char tag 
parser pos char pos token lex foldr op fail op xs tok alt xs standard functions foldr explained section 
lex define lexer language 
lexer parser pos char pos token lexer lex literal junk higher order functions parsing string symbol word ident number number string symbol secondary function lexer resolve lexical conflicts 
basically kinds 
lexical classes may overlap 
example reserved words usually admissible identifiers 
secondly strings may interpreted different numbers tokens 
example seen representation operator separate operators 
lexer conflict reserved word 
arrange correct interpretation ordering tokens relative priorities 
case example reserved words appear identifiers lexer 
ordering remaining non conflicting tokens probability occurrence considerably improve performance lexer 
scanning natural identity element list constructor build list tokens white space comments removed lexer tagged junk removed 
strip function takes output lexer removes tokens junk tag strip pos token 
pos token strip filter junk fst fst standard function filter retains elements list satisfy predicate defined filter xs xs 
example applying filter list gives list 
syntax analysis lexical analysis initial jump characters tokens 
syntax analysis completes parsing process combining tokens form parse tree 
tokens tag part important syntax analysis 
define kind parser recognises token tag regardless string part 
token consumed parser tag somewhat redundant way position redundant consumed satisfy primitive 
kind returns string part consumed token kind tag 
parser pos token char kind satisfy fst snd reserved words symbols share single tag symbol kind function cases 
need special function matches graham hutton string part token 
define lit xs parser admits token symbol xs 
kind tag part consumed token discarded lit char 
parser pos token char lit xs literal symbol xs snd recall bnf grammar example language 
prog defn defn var body body expr defn expr prim prim var num expr just arithmetic expression example section build parser simply casting grammar combinator notation including semantic actions build parse tree prog defn script defn kind ident lit offside body body expr lit defn opt expr prim foldl apply prim kind ident var alt kind number alt lit expr lit recall offside rule applied body definitions example language 
direct correspondence see offside combinator applied body defn parser 
opt combinator definition body corresponds delta delta delta notation bnf denoting optional phrase opt parser 
parser opt alt succeed defining remaining semantic actions somewhat strange action foldl apply expr parser merits explanation 
recall original grammar section left recursion express left associativity application 
applying simple transformation left recursion eliminated favour iteration 
combinator parsing iteration corresponds 
operators produce list result 
really want expr parser left recursive application spine result list transformed denotes application constructor apply 
directed reduction combinator section time operator bracketed left right 
foldl foldr 
fact foldl precisely works non empty lists don need supply base case 
remaining semantic actions straightforward simply converting results appropriate types 
final action takes account higher order functions parsing local declarations expression level parse tree attached definitions grammar 
xs def xs xs num xs ds ds complete parser complete parser obtained simply composing functions pairing symbols position lexer lexical analysis strip removing white space comments prog syntax analysis 
ignore possibility errors assuming lexical syntactic analysis successful 
function fst hd selects result lexical syntactic phases 
parse char 
script parse fst hd prog strip fst hd lexer combining forms conclude combinator parsing presenting extra combining forms proved useful allowing parsers lazy give informative error messages manipulate result values new ways 
improving laziness combinator parsers simple build parsers lazy expect 
recall combining form section 
example applying parser literal string gives list aaa aa ab aab miranda lazy expect result available time parsed input string 
happens 
practice string aaa available entirely constructed 
implication parsers defined top level lexers rely lazy evaluation produce components result lists supply demand basis 
refer reader wadler detailed explanation laziness problem wadler solution new combinator guarantees parser succeeds 
graham hutton limiting success combinator parsers article return list results successful 
able return result allows build parsers ambiguous grammars possible parses produced ambiguous input string 
natural languages commonly ambiguous 
programming languages part completely unambiguous parse input string possible 
working un ambiguous grammars may preferable special type failure success parser returning list results 
fail ok parser 
redefining primitive parsers combining forms straightforward 
error reporting simple extension type effect reporting errors parsing 
combinator parser applied input string containing error result outright failure parse input 
prefix input may parsed successfully case suffix input returned part result parser 
input produce error message uninformative position input longest parse ends may far away error 
problem solved distinguishing failure error parsing cases return message giving reason unsuccessful parse fail char error char ok redefining primitive parsers combining forms straightforward fail error values treated identically definition alt combining form second parser may applied parser fails produces error 
error values created parser 
parser inp inp fail xs error xs parser behaviour parser failure gives rise error 
common ways alt alt 
case failure parser success parser gives error just failure 
second case failure alternative succeed gives rise error 
experience shown careful result reasonably informative error reporting 
higher order functions parsing result values parsers built combining form right hand parser access result produced left hand parser results produced parsers paired 
useful parser take just sequence symbols input result parser 
new combining form proves useful building parsers parser 
parser 
parser inp inp ok inp inp assume convenience miranda extended expressions written parser accepts strings parser treatment result values different parser successful result value bound variable parser parser turn successful result composite parser result parser contrast parser result pair results parsers interesting useful applications combining form 
example define succeed application imagine parser form 
alt left side alt parser successful parser fails right side alt parser re applied input string 
clearly inefficient 
standard solution giving parser form alt new action combination actions common application grammar transformation language constructs optional component 
examples constructs expressions having optional part definitions miranda having optional part 
problem transformation action requires means telling parsers successful decide actions applied result 
may necessitate parsers having encode result values way 
cleaner treatment actions factorisation result parser available parser alt combining form 
alt graham hutton original parser actions took pair results argument parser actions curried take arguments time 
application parsing infix operators associative left 
consider parser form parser produces lists result values 
lists example right recursive structure list empty comprises value list 
suppose wanted parser admitted strings results returned order left recursive right recursive structure 
parser foldl left recursive binary constructor 
foldl explained section 
drawback approach building intermediate list prior applying foldl operator 
need intermediate structure avoided rewriting parser accumulating left recursive structure input parsed alt succeed conclude noting interesting relationship categorical notion monad combinator parsers give rise monad refer reader wadler full explanation 
context combining form closely related composition operator kleisli category induced monad parsers 
identity operator succeed 
precise composition operator defined follows 
compose equivalent definition compose succeed paul hudak john launchbury comments suggestions 
aho sethi ullman compilers principles techniques tools addison wesley 
fairbairn making form follow function technical report university cambridge computer laboratory june 
frost launchbury constructing natural language interpreters lazy functional languages glasgow university 
hudak wadler 
editors report programming language haskell glasgow university yale university 
johnsson attribute grammars functional programming paradigm fpca lncs 
higher order functions parsing landin programming languages cacm vol 
march 
wadler replace failure list successes fpca lncs 
wadler comprehending monads fpca 
