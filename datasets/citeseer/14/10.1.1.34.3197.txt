space efficient closure representations zhong shao andrew appel princeton university cs tr march modern compilers implement function calls returns steps closure environment properly installed provide access free variables target program fragment second control transferred target jump arguments results 
closure conversion decides represent closures runtime crucial step compilation functional languages 
new algorithm exploits compile time control data flow information optimize closure representations 
extensive closure sharing allocating closures registers possible new closure conversion algorithm reduces heap allocation memory fetches local global variables improves efficient code generated standard ml new jersey compiler decstation 
approaches new closure allocation scheme satisfies strong safe space complexity rule achieving asymptotic space usage 
modern compilers take great efforts optimize function calls returns fundamental control structures especially functional languages 
function call context information saved registers frame 
compiler continuation passing style cps frame closure continuation function 
cps compiler closure environment constructed function continuation definition site provides runtime access bindings variables free function continuation body 
function call implemented installing corresponding closure environment setting arguments normally registers passing control target jump instruction 
func appear acm conference lisp functional programming june cs princeton edu 
supported part national science foundation ccr ccr 
tion returns implemented way essentially calls continuation functions represented cps 
closure combination registers memory data structures gives access free variables 
compiler free choose closure representation minimizes stores closure creation fetches access free variables memory reachable data 
developed new algorithm choosing closure representations 
far know new closure allocation scheme satisfy important properties ffl stack allocation traditional linked closures shared closure representations safe space complexity see section time allow extensive closure sharing 
ffl closure allocation scheme exploits extensive compile time control data flow information determine closure representations 
ffl source language functions sequential function calls build shared closure continuations advantage callee save registers 
ffl activation records frames allocated heap freely shared heap allocated closures 
stack allocation impossible stack frames normally shorter lifetime heap allocated closures 
ffl tail recursive calls quite troublesome implement correctly stack implemented easily 
ffl closure optimizations cleanly represented continuation passing style intermediate language 
ffl closure created writes generational garbage collection call cc efficient reduces need alias analysis compiler 
ffl closures allocated heap registers class continuations call cc efficient requiring complicated stack :10.1.1.40.6828
new closure allocation scheme runtime stack 
closure environments allocated heap registers 
decision may controversial stack allocation widely believed better locality deallocation stack frames cheaper garbage collection 
heap allocated closures contiguous memory extra memory write read frame pointer necessary function call 
assumptions longer hold reasons 
show section parts continuation closures allocated callee save registers extra memory write read call avoided 
help compile time control data flow information combination shared closures callee save registers comparable better stack allocation 

companion show stacks significantly better locality heap allocated activation records modern cache memory hierarchy 
stacks better write ratio better read ratio 
modern machines write penalty approximately zero 

amortized cost collection low especially modern generational garbage collection techniques 
major contribution safe space closure conversion algorithm integrates improves previous closure analysis techniques simple general framework expressed continuation passing closure passing style :10.1.1.48.4346
new algorithm extensively exploits compile time control data flow information optimize closure allocation strategies representations 
measurements show new algorithm reduces heap allocation memory fetches local global variables improves efficient code generated standard ml new jersey compiler decstation 
safely linked closures optimization closure representations dangerous unsafe space usage maximum live data size 
chase observed certain storage allocation optimization may convert program runs robustly due requirement larger fraction memory program needs 
appel noticed programs linked closures stack allocated activation records may cause compiled program memory 
fun fun val hd fun fun fun big big fun loop res res val big loop res val result loop example standard ml example consider standard ml program 
flat closures see evaluation yields closure contains just integers final result result contains copies closure uses space 
linked closures see closure contains pointer closure contains list size final result keeps closures simultaneously requires space consumption 
obviously space leak caused inappropriately retaining dead objects garbage collected earlier 
instances real programs live data size memory unnecessarily large factors compiled early versions compiler introduced kind space leak 
versions sml nj linked closure record contains bound variables enclosing function pointer enclosing function closure 
flat closure record holds free variables needed function :10.1.1.43.208
flat closures linked closures safely linked closures qs comparison closure representations variable integer constant real constant arithmetic operator fun val select val val syntax cps obeyed safe space complexity ssc rule users really notice improvement 
ssc rule stated follows local variable binding unreachable scope see appel formal definition 
traditional stack allocation schemes linked closures obviously violate rule local variable bindings stay stack exit scope may remain live 
flat closures satisfy ssc rule require variables copied times closure 
closure strategies described appel jim violate rule 
stack frame implementations violate ssc dead variables remain frame function returns 
avoided associating descriptor return address showing variables live complicates garbage collector 
obeying ssc require extra copying pointer values old closure contains contains values needed new context new closure 
simply zap unneeded values old closure known old closure 
challenge find efficient closure strategies obey ssc minimizing copying 
new algorithm uses safely linked closures rd column contain variables needed function avoids clo practice ssc relaxed little asymptotic space complexity change retain sure copying grouping variables lifetime sharable record 
denote closure code pointers 
flat closures variables copied closure closure closure expensive 
traditional linked closures closures re closure retaining variable free accessing variables inside quite expensive links needs traversed 
noticing lifetime safely linked closure puts separate record shared closures linked closures nesting level safely linked closures exceeds enjoy fast variable access time 
continuations closures illustrate cps conversion new new closure analysis algorithm example 
function iter iteratively applies function argument converges satisfy predicate variables proven constant size compile time 
fun iter fun function iter standard ml continuation passing style continuation passing style cps subset calculus closely reflects control flow data flow operations von neumann machine 
calculus functions nested variables lexical scope von neumann machine order evaluation pre determined 
purposes express cps ml notation albeit severely constrained see 
atom variable constant record constructed sequence atoms 
bound element record th field may fetched select syntax building records selecting fields applying primitive arithmetic operators defining mutually recursive functions fun specify continuation expression result expressions 
hand function application shown line right specify continuation expression functions return conventional sense 
expected functions pass continuation function arguments 
function defined ordinary way fun presumably invoked callee order continue computation 
fun iter fun fun fun function iter cps optimizations shows code function iter translation cps continuation argu en 
denote sequence expressions en 
ment hoisted loop loop invariant 
optimizations performed cps conversion closure analysis subject 
ease presentation capital letters denote continuations 
call functions declared source program user functions iter introduced cps functions 
continuation variables formal parameters commonly placed argument introduced cps conversion serve return continuations 
functions iter called escaping functions may passed arguments stored data structures compiler identify places called 
functions escape called known functions 
extensive optimizations known functions know call sites compile time 
closure passing style continuation passing style meant approximate operation von neumann computer function machine language just address executable program convention registers hold parameters jump arguments 
notion function cps nested lexical scope may contain free variables 
problem solved adding closure explicit access nonlocal variables 
kranz showed different kinds functions different closure allocation strategies 
example closure known function allocated registers know call sites compile time caller pass free variables extra arguments runtime hand closure escaping function may allocated heap record contains machine code address function plus bindings free variables 
conventional compilers caller save registers may destroyed procedure call callee save registers preserved calls 
variables live call may allocated caller save registers cuts register saving traffic 
wanted adapt idea continuationpassing intermediate representation 
follows cps converted user function passed ordinary arguments continuation function extra arguments function returns invoking result argument additional arguments callee save arguments handed back continuation 
cps code translated machine instructions stay registers ex fun iter fun cr fun val select val select val select val select fun val select val select val select cr val cr cr function iter closure conversion ecution needed registers purposes case save restore 
say continuation represented registers just pointer memory resident closure 
previous outlined framework demonstrated reduce allocation memory traffic 
really algorithm exploit flexibility callee save registers provide 
closure creation represented cps language :10.1.1.9.6252
call style clo 
main difference clo cps functions clo contain free variables translated directly machine code 
clo formal parameters function correspond target machine registers heap allocated closures represented cps records 
lists code function iter translation clo 
continuation functions variables represented machine code pointer plus extra callee save arguments 
original function free variables callee save registers variables effective total 
passed line free variables plus machine code pointer entry point squeezed formal parameters 
free variables callee save arguments heap allocated records containing variables cr closure record appears call line 
previous closure conversion algorithms require memory stores continuation function 
important advance new allocate example record cr functions record carefully chosen contain loop invariant components built outside loop 
escaping user functions iter represented closure record th field machine code pointer iter 
escaping function calls implemented selecting th field placing closure special register formal parameter doing jump arguments lines 
closure conversion section new closure conversion algorithm framework defined section 
algorithm takes cps expression argument determines closure representation function definition converts clo expression function definition contain free variables 
presentation algorithm organized steps 
construct extended cps call graph captures control flow information cps expression 

gather set raw free variables lifetime information cps function 

closure strategy analysis determine machine allocate closure 

closure representation analysis determine actual structure closure runtime 

find variable access path non local variables cps function 
step necessarily correspond separate pass real implementation done single pass 
extended cps call graph cps expression divide set function definitions categories escaping user functions known user functions escaping continuation functions known continuation functions see paragraph section definitions 
cps variables directly calls possibly function call inside function definition example directly calls call inside extended cps call graph directed graph set function definition variables nodes edge directly calls directly calls function return continuation 
example extended cps call graph function iter follows pi iter directly called conservatively assume function call return continuation extended cps call graph essentially captures simple set control flow information cycles graph imply loops recursions path 
nested hierarchies loops recursions revealed running tarjan interval analysis algorithm assuming reducible flow graph 
purpose closure analysis control flow information choose closure representations allow efficient variable accesses frequently executed program fragments loops 
function definition define loop level nesting depth interval extended cps call graph assuming interval depth 
function variables defined loop levels defined 
loop level call defined min 
loop level arbitrary cps expression inside function definition inductively defined follows ffl max ffl ffl continuation max user function return continuation 
loop level number guide static branch prediction control flow example function iter loop level loop level iter 
cps expression shivers sophisticated techniques find better approximations control flow information 
flow graph tarjan interval essentially strongly connected subgraph interval analysis partitions set nodes disjoint intervals interval representing proper loop recursion layer 
definition calls return continuation calls continuation variable clearly call inside loop call 
closure representations take considerations branch taken runtime 
function definition expression define pred predecessor set set variables edge extended cps call graph 
raw free variables lifetime implement safely linked closures described section want group variables closure records similar lifetimes 
defined may registers hold waiting earlier record obey ssc rule 
closure conversion algorithms start phase gather set raw free variables function definition free variables called raw free variables may substituted set free variables closure representation analysis phase true free variables denote set variables put closure environment 
algorithm gathering lifetime information time 
define lifetime variable assign stage number denoted sn function definition method ffl function definition sn ffl user function sn sn nearest enclosing function definition ffl continuation function sn maxf sn pred definition valid continuation functions recursive define time cps variable sn nearest enclosing function definition set free variables function definition set triples fut lut variable fut time denoting smallest stage number uses inside lut time denoting largest stage number uses inside reflect control flow lut fut numbers calculated predicted function stage number raw free variables closure strategy iter slot slots slots slots table raw free variables closure strategies execution frequency example cps expression ignore uses calculation 
higher preference uses inside loop body lead efficient closure representation runtime 
example stage number set raw free variables function definitions shown table 
notice variable different lut fut numbers inside different function definitions 
closure strategy analysis closure strategy analysis essentially determines machine allocate closure 
previous cps compilers escape analysis simply runtime stack 
closure strategy analysis decides slots registers closure going denoted function calculate simple algorithm ffl escaping user function 
essentially means free variables put heap 
closure pointer linked data structure heap 
ffl escaping continuation function number callee save registers 
call sites known compile time continuation functions uniform convention registers 
special cases continuation functions represented differently briefly discussed section 
ffl known functions call sites known compile time closures environments may allocated completely registers 
number registers target machine limited may desirable allocate free variables registers see section 
run iterative algorithm calculate appropriate number slots registers known function escape analysis refers analysis decides function environment allocated stack 

initially known function assigned slots maximum number available registers target machine minus number formal parameters function assuming passed registers 
known function substitute min ft 
vn subset functions pred enclose definition free value max number variables free substitution process repeated longer changes fixed point reached 
second step observation called inside function free number slots assigned bigger number slots available environment kind spilling inevitable 
choosing subset calculating step take advantage control flow information extended cps call graph 
specifically want favor program fragments executed choose higher value call loop 
apply algorithm function iter 
suppose callee save registers initially assuming available registers target machine calls free min shown table notice call iter considered free iter 
closure representation analysis closure representation analysis solves problem function contains free variables iterative process clearly terminates sum functions gets smaller round 
assigned slots place values slots 
cps expression closure representa tion analysis done processing function definition preorder traversal traversal maintain update data structures static environment maps function definition processed far closure representation 
list currently visible closures variables 
current contents callee save registers 
traversing processing function definition 
suppose set raw free variables step section rfv check recursive mutually recursive functions find transitive closure rfv raw free variables 
example shown table function recursive rfv remove replace raw free variables 
propagate fut lut numbers free variables minimum fut numbers maximum lut numbers 
result transitive closure rfv 
find set true free variables replacing continuation variable rfv corresponding callee save variables function definition closure contents slot variables 
example suppose callee save registers continuation variable represented code pointer callee save variables 
set true free variables notice naturally inherit fut lut numbers 

assume contains variables assigned slots closure strategy analysis section 
done search current list visible closures maintained data structure see closure record reuse share 
ssc rule mentioned section satisfied making sure reuse closures contents subset 
closures heap safely linked closures certain closure sharings anticipated processing enclosing function definitions 
multiple sharable closures best fit heuristic decide reuse 
example function iter closure cr line sharable continuations 
size closure sharing larger heap allocate part closure 
putting variables slot packing remaining variables heap closure 
criteria choosing variables priorities priority smaller lut number second smaller fut number third variable current callee save registers 
contents decide variable goes slot avoid possible register moves 
example function assigned slots true free variables put free variable register smallest fut number variables lut number 

decide actual layout spilled heap closure variables variable lut number 
satisfy ssc shared closures distinct lut number requires separate record 
example closure split records lut number different finish processing function definition updating environments accordingly closure representation 
cr shared creation outside loop 
iteration manages call unknown escaping functions memory traffic 
important strengths new algorithm 
access path non local free variables finding access path non local free variable just breadth search environment 
lazy display technique kranz loads common paths shared 
specifically look function innermost function inside assuming uses safely linked closure shown accessing non local variable inside requires traversing links load nd field closure register access directly load 
intermediate variables register may available machine registers cause unnecessary register spilling avoided selectively keeping limited number intermediate variables lazy display registers 
remarks graph coloring global register allocation targeting implemented lal george accomplish control transfers function calls line moves 
allows flexible boundary callee save caller save registers normal compilers 
programs scheme tend accumulate values registers dump closure infrequent intervals 
may useful callee save fewer caller save registers optimize 
closure scheme handles tail calls nicely simply re arranging registers 
hanson shows complicated things necessary re arrange stack frame 
source language function calls functions sequence previous cps compilers including allocate continuation closure call 
callee save registers safely linked closures allow allocate 
general deep recursions handled efficiently scheme 
conventional stack implementation tends high space overhead frame closures quite concise 
total memory usage cache coverage recursions 
case studies environment allocation scheme implement frequently control structures efficiently 
compilers identify special control structures compile time assign special closure allocation strategy 
example kranz orbit compiler tail recursions called stack loop strategy general recursions assigned stack recursion strategy 
new closure conversion algorithm hand uniformly decides closure strategy number slots closure representation function solely lifetime information free variables simple control flow information 
section shown new algorithm implements tail recursion efficiently function iter 
section examples show new algorithm effectively deals common control structures sequence function applications calling known function general recursion 
function calls sequence common control structure functional programs making sequence function applications shown example fun val val val function formal parameter called times row inside function traditional stack scheme function called activation record containing formal parameters local variables pushed stack 
time called certain local variables registers saved stack 
example assuming function arguments return results passed registers call registers holding saved retrieved returns 
activation records allocated heap things get worse 
time registers need saved function call closure record built heap 
heap allocated closures contiguous memory extra memory write memory read frame pointer necessary function call 
new closure analysis technique callee save registers heap allocated activation records efficient stack allocation 
idea allocate parts current activation record registers 
careful lifetime analysis register save restore function calls eliminated amalgamated function calls sequence need just write heap record 
lists code function translation clo new algorithm section 
continuations represented code pointer plus callee save registers denoted capital letters 
escaping function calls calls line implemented selecting th field placing closure special register formal parameter doing jump arguments lines 
call line put variables smaller lut numbers callee save registers spill rest heap record cr line 
second third calls line register save restore necessary 
lifetime overlap just share callee save register 
fun fun fun fun val select val val select val select val select val select val select val select val cr val select cr making sequence function calls lambda lifting known function lambda lifting known transformation rewrites program equivalent function free variables :10.1.1.48.4346
lambda lifting known functions essentially corresponds special closure allocation strategy allocates free variables registers possible 
special strategy generate efficient code 
example program assume known function free variables 
fun fun closure allocated registers call inside free variables saved heap assuming callee save registers call returns variables reloaded back registers passed function entering saved calls 
clearly allocating environment registers dramatically increases need callee save registers inside leads memory traffic limited number callee save registers 
closure strategy analysis described section uses iterative algorithm decide number registers assigned known function 
number registers assigned restricted callers return continuation return continuation call result assigned slot closure allocated heap 
general recursion closure strategy analysis algorithm described section conservatively represents continuation functions fixed number callee save registers 
restriction relaxed continuations passed known functions represented number callee save registers 
special calling convention especially desirable general recursions map function shown follows translation cps fun map fun val car val cdr fun fun val notice recursive function called places function map return continuation inside return continuation 
second call recursive call executed runtime 
represent normal continuation functions callee save registers represent continuations callee save registers 
lists code function map translation clo special calling convention 
known function environment free variable allocated register treated extra argument see line 
continuation uses normal calling convention passed function line new coercion continuation line built adjust normal convention registers special convention callee save registers 
return continuation represented callee save registers build smaller heap closure size line continuation represented callee save registers heap closure size 
program size description barnes hut body problem solver 
boyer standard theorem prover benchmark 
cml sieve cml implementation prime number generator 
knuth bendix knuth bendix completion algorithm 
lexgen lexical analyzer generator 
life game life implemented lists 
ray simple ray tracer 
simple spherical fluid dynamics program 
vliw vliw instruction scheduler 
yacc implementation lalr parser generator 
table general information benchmark programs links traversed allocation size execution time code size millions seconds program old new savings old new savings old new savings savings barnes hut boyer cml sieve knuth bendix lexgen life ray simple vliw yacc average table performance benchmark programs escaping user known user continuation record program old new old new old new old new old new barnes hut boyer cml sieve knuth bendix lexgen life ray simple vliw yacc table allocation breakdown benchmark programs fun map fun val select val select val select fun val car val cdr fun fun val val select val select val select val cr val select cr val cc cc function map special calling conventions measurements implemented new space efficient closure conversion algorithm standard ml new jersey compiler version 
compare performance compilers old algorithm new algorithm described 
old algorithm uses hybrid scheme uses linked closure representation space safe uses flat closure representation 
old new compilers satisfy safe space complexity rule 
compilers represent continuation closures callee save registers 
compilers representation analysis allow arguments passed registers 
lazy display technique implemented compilers effectively new compiler extensive shared closures 
table shows set benchmarks source program size number lines 
table shows number memory fetches local global variables total heap allocation size execution time user time plus system time decstation code size show savings old new compilers 
average new compiler reduces heap allocation memory fetches local global variables improves efficient code generated old compiler 
new compiler uniformly generates compact code achieves average reduction code size old compiler 
vliw benchmark instruction scheduler achieves speedup execution time gets significant benefits extensive closure sharing new closure conversion algorithm 
measured allocation profile various kinds closures shown table escaping user known user continuation respectively total size closures allocated escaping user function known user function continuation function record includes cons cells explicitly allocated non closures includes arrays register spills 
reduction heap allocation continuation closures closure analysis reduce allocation records arrays 
comparison schemes closure analysis related influenced research results 
closure analysis steele continuation closures stack frames kranz closure analysis choose specialized representations different kinds closures appel jim investigated closure sharing strategies 
combine analyses stack allocation 
tail calls hanson showed complexity implementing tail calls correctly efficiently conventional stack 
closure passing style lambda notation represent results closure analysis called lambda lifting 
efficient call cc tried call cc efficient 
callee save registers dataflow analysis help decide put variables caller save registers 
shown represent callee save registers continuation passing style new algorithm better job 
safe space complexity notion certain compiler optimizations cause space leaks remembering old appreciated 
chalmers lazy ml compiler sml nj compiler ones know guarantee space safety 
globalization local variables different functions nonoverlapping live ranges allocated register global save restore 
stack regions tofte talpin demonstrated analysis avoid garbage collection entirely unfortunately satisfy safe space complexity rule 
new closure conversion algorithm great success 
closure conversion algorithm faster previous algorithm 
program smaller average faster average benchmarks 
decreases rate heap allocation obeying safe space complexity rule keeping closures small helps reduce amount live data preserved garbage collection 
closure analysis technique introduced applied compilers cps intermediate languages 
safely linked closures callee save registers essential building real efficient compilers want satisfy safe space complexity rule 
trevor jim xavier leroy john reppy jean pierre talpin lfp program committee comments early version 
andrew appel 
garbage collection faster stack allocation 
information processing letter 
andrew appel 
compiling continuations 
cambridge university press 
andrew appel trevor jim 
optimizing closure environment representations 
technical report dept computer science princeton university princeton nj 
andrew appel trevor jim 
continuationpassing closure passing style 
sixteenth acm symp 
principles programming languages pages new york 
acm press 
andrew appel david macqueen 
standard ml new jersey 
martin wirsing editor third int symp 
prog 
lang 
implementation logic programming pages new york august 
springer verlag 
andrew appel zhong shao 
callee save registers continuation passing style 
lisp symbolic computation 
andrew appel zhong shao 
empirical analytic study stack vs heap cost languages closures 
technical report cs tr princeton university department computer science princeton nj march 
lennart augustsson 
garbage collection machine 
technical report pmg memo dept computer sciences chalmers university technology goteborg sweden december 
henry baker 
buried binding stale binding problems lisp 
unpublished june 
luca cardelli :10.1.1.43.208
compiling functional language 
proc 
acm conference lisp functional programming pages august 
david chase 
safety considerations storage allocation optimizations 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages new york june 
acm press 
fred chow 
minimizing register usage penalty procedure calls 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages new york june 
acm press 
william clinger anne eric ost 
implementation strategies continuations 
acm conference lisp programming pages new york june 
acm press 
cousineau curien mauny 
categorical machine 
jouannaud editor functional programming languages computer architecture lncs vol pages new york 
springer verlag 
olivier danvy 
memory allocation higher order functions 
proceedings sigplan symposium interpreters interpretive techniques pages 
acm press june 
amer diwan david tarditi eliot moss 
memory subsystem performance programs copying garbage collection 
proc 
st annual acm sigplan sigact symp 
principles programming languages pages 
acm press 
lal george guillaume john reppy 
portable optimizing backend sml nj compiler 
proceedings international conference compiler construction page appear april 
carsten gomard peter sestoft 
globalization live variables 
proceedings symposium partial evaluation semantics program manipulation pages 
acm press june 
jr guy steele gerald jay sussman 
dream lifetime lazy variable extent mechanism 
proceedings lisp conference pages stanford 
chris hanson 
efficient stack allocation languages 
acm conference lisp programming pages new york june 
acm press 
robert hieb kent dybvig carl bruggeman :10.1.1.40.6828
representing control presence class continuations 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages new york 
acm press 
thomas johnsson :10.1.1.48.4346
lambda lifting transforming programs recursive equations 
second international conference functional programming languages computer architecture pages new york september 
springer verlag 
norman jouppi 
cache write policies performance 
proceedings th annual international symposium computer architecture pages 
acm press may 
richard kelsey paul hudak 
realistic compilation program transformation 
sixteenth acm symp 
principles programming languages pages new york 
acm press 
kranz kelsey rees hudak philbin adams 
orbit optimizing compiler scheme 
sigplan notices proc 
sigplan symp 
compiler construction july 
david kranz 
orbit optimizing compiler scheme 
phd thesis yale university new haven ct 
landin 
mechanical evaluation expressions 
computer journal 
xavier leroy 
unboxed objects polymorphic typing 
nineteenth annual acm symp 
principles prog 
languages new york jan 
acm press 
robin milner mads tofte robert harper 
definition standard ml 
mit press cambridge massachusetts 
guillermo juan 
liar algol compiler scheme 
thesis mit dept computer science electrical engineering june 
barbara ryder marvin 
elimination algorithms data flow analysis 
acm computing sur september 
olin shivers 
control flow analysis higher order languages 
phd thesis carnegie mellon university pittsburgh pa may 
cmu cs 
guy steele 
rabbit compiler scheme 
technical report ai tr mit cambridge ma 
robert tarjan 
testing flow graph reducibility 
journal computer system science december 
mads tofte jean pierre talpin 
implementation typed call value calculus stack regions 
proc 
st annual acm sigplan sigact symp 
principles programming languages pages 
acm press 
david ungar 
design evaluation high performance smalltalk system 
mit press cambridge ma 

