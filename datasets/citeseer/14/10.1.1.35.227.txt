accepted publication science computer programming 
functional documents computer systems david parnas telecommunications research institute ontario trio department electrical computer engineering mcmaster university hamilton ontario canada jan madey institute informatics warsaw university warsaw poland software documentation standards go great detail format documents describing details paragraph numbering section headings fail give precise descriptions information contained documents 
opposite defines contents documents specifying format notation 
describe documents system requirements document system design document software requirements document software behaviour specification module interface specification module internal design document representations mathematical relations 
describing relations specify information contained document 
engineers expected disciplined science mathematics technology build useful products 
construct computer systems clearly engineers sense 
design process computer systems different developing engineering products 
professional engineers extensive mathematics provide precise descriptions products 
contrast computer systems usually described inaccurately imprecisely anthropomorphic analogies intuitive language 
engineers assemble system recognise necessity precise interface specifications components 
contrast computer system designers particularly programmers rarely write specifications rely intuitive descriptions 
result cut try process substantial redesign done system integration 
advocates making computer systems design types engineering 
applying mix standard engineering mathematical concepts show essential properties computer systems components described set mathematical relations 
describing relations computer systems designers document designs systematically documentation conduct thorough reviews 
project involved documents formal reviews described 
discusses limited set professional documents 
discuss useful types documents user manuals queuing theory models 
accepted publication science computer programming 
goal describe contents key computer systems documents form 
define documents terms functions describe say way functions represented 
consider important agree content discussing notation 
sharp contrast papers formal methods provide precise specifications syntax give short question information provided syntax 
companion reports discuss notations provide easily read representations functions 
discuss documentation high level abstraction dealing uniformly types systems documents 
specific application apply concepts specific notation done 
breadth discussions case studies relegated papers cited text 
comparison notations intended specialised applications best done papers limited scope 
addressed mixed audience 
want understood engineers educated fields chemical engineering mechanical engineering computer scientists interested providing tools engineers 
group may familiarity concepts notation standard mathematics 
second group find approaches control theory circuit theory new 
sure stay include basic definitions familiar 
role documentation computer system design 
production design documents plays key role engineering practice 
professional engineers build product putting detailed plans 
documents prepared thoroughly analysed construction begun design construction 
prescribe procedures designing establish criteria evaluating designs 
validation design documents criteria major part engineering 
inspiration leads design may occur flash analysis required confirm safety approach takes longer 
analysis difference professional engineering invention 
design validation technical task carried design documentation precise permit systematic analysis 
conventional engineering documents sufficiently detailed calculate pressures derive differential equations compute load factors find resonant frequencies information contain 
way computer systems particularly software parts documented different 
documents produced advance implementation technical ones narratives explaining role system scenarios describing descriptions attractive qualities 
little technical evaluation done basis documents 
documents provide precise analyses algorithms ignore actual code 
real evaluation design wait implementation nearly complete 
point corrections difficult expensive earlier date 
software development organisations documentation viewed part design activity additional somewhat task completed bureaucratic regulations 
programs written documentation frequently documentation written separate group include designers 
usually programmers consider accepted publication science computer programming 
pre implementation documentation vague nearly useless 
consequently computer system design documents usually inaccurate delivered rarely kept date 
exceptions hardware documents 
hardware designed engineers taught importance technical documentation 
inadequate documentation causes software quality degrade time changes inconsistent original undocumented design concept changes result unnecessarily complex programs 
believe standard engineering practice applied phases computer system design 
documentation design medium input subsequent analysis testing activities 
view documentation important product documentation software product revised replaced relatively quickly documentation software products questionable long term value 
suggest documents completed order 
documents revised repeatedly project progresses understanding 
vital documentation kept alive date consistent current state product 
mean functional 
describe approach call functional relational accurate important note functional sense standard mathematical meaning 
function means purpose role activity function system control level water tank 
mathematics function means mapping sets elements called domain range respectively element domain mapped exactly element range 
condition satisfied mapping called binary relation certain applications useful combine relation additional set subset relation domain known competence set form call limited domain relation short ld relation 
term functional denote approaches concepts 
conventions inn sequel 
binary relation denotes set ordered pairs constitutes relation domain denotes set values appear left element pair range denotes set values appear right element pair denotes predicate characteristic predicate set true member function denotes 
important note elements range domain relation need scalars 
universes sets drawn may include vectors scalar values functions vectors avoid relational prevent confusion data base term 
treat function special case relation 
alternatively relation treated function mapping elements relation domain subsets relation range 
accepted publication science computer programming 
functions 
particular interest time functions functions domain set real numbers interpreted representing time 
time functions range domain functions possible specify critical characteristics real time systems 
specifying real time properties means relations time functions traditional approach dealing time long routinely engineers design electronic circuits control systems believe argue need new kinds logic deal real time systems explaining approach taught engineers years 
show sections classic approaches allow talk real time properties precise way 
illustrate generality approach familiar area program semantics 
mills pointed semantics deterministic sequential program described single function 
mills says little representation functions suggests describe concurrent assignment statements 
ways represent function 
dijkstra weakest precondition predicate transformer precondition postcondition pairs authors notation introduced provide necessary information 
notations advantages disadvantages single representation ideal broad class functions involved 
step precise practical documentation identification relations described documents 
notation description relations expected develop profession matures 
information provided computer system documentation 
computer systems complex products require great deal documentation 
section describe purpose important documents subsequent sections provide detailed descriptions 
documents discuss ones mentioned industry standards 
division documents intended provide separation concerns 
document aimed different audience engineers specialised interests 
purpose replace usual vague common sense descriptions documents precise definitions 
documents needed 
overview system requirements document treats complete computer system computers associated peripheral devices black box 
include description environment identifies set quantities concern system users associates mathematical variable 
describe relationships values quantities result physical constraints additional constraints values environmental quantities enforced new system 
black box description method document system requirements applicable systems built analogue components relays systems digital computers 
analysis network comprising computers components easier notation concepts cf section 
system design document identifies computers system describes communicate include precise description relevant properties peripheral devices 
values computer input output registers denoted mathematical variables system design document defines relationship values values environmental quantities identified systems requirements document cf section 
accepted publication science computer programming 
system requirements document system design document determine software requirements 
documents may serve software requirements document described 
case requirements fully determine software behaviour 
may externally distinguishable software products satisfy system requirements 
situation project managers may request additional document software behaviour specification records additional design decisions provides description actual behaviour software 
sections discuss issues detail 
see examples discussion documents 
software projects usually organised set assignments 
assignment produce group programs call module 
software module guide informal document describes division software modules stating responsibilities 
modules described module guide satisfy stated requirements 
software module guides described length 
module listed software module guide module interface specification 
treat module black box identifying programs invoked outside module call access programs describing externally visible effects cf section 
software products described uses relation document 
range domain uses relation subsets set access programs modules 
pair relation program uses program document consists binary matrix constrains programmers determines viable subsets software 
document discussed 
implementation module specification module internal design document 
document sufficiently precise module interface specification verify design 
describe module data structure state intended interpretation data structure terms external interface specify effect access program module data structure cf sections 
called clear box description 
different overview system obtained documenting data flow variables communicating sequential processes 
included data flow document cf section 
communication computers requires establishment communications protocols 
absolutely essential communications services provided protocols completely defined protocols documented precision allows testing verification 
done documents service specification protocol design document cf section 
lowest level computer system find hardware chips 
simple devices early computers modern chips include substantial amounts memory complex decision making logic 
black box description behaviour chips chip behaviour specification serve define interface chip designers integrate chip rest system cf section 
earlier discussions documents contained 
accepted publication science computer programming 
document system requirements 
critical step documenting requirements computer system identification environmental quantities measured controlled representation quantities mathematical variables 
environmental quantities include physical properties temperatures pressures readings user visible displays administrative information number people assigned task wishes human user 
quantities denoted mathematical variables usual engineering association carefully defined coordinate systems signs unambiguously stated 
diagrams essential clarify correspondence physical quantities mathematical variables 
useful characterise environmental quantity monitored controlled 
monitored quantities user wants system measure 
controlled quantities values system intended control real time systems time treated monitored quantity 
sequel denote monitored quantities denote controlled ones 
quantity monitored controlled corresponding values specified equal relation nat cf section 
note systems expected monitor status internal hardware components 
determined design process may add set monitored variables long design begun 
environmental quantities value recorded function time 
denote environmental quantity denote time function describing value 
note mathematical function domain consists real numbers value time denoted 
vector time function containing element monitored quantities denoted similarly denoted 
relation nat environment nature previously installed systems place constraints values environmental quantities 
restrictions documented requirements document may described means relation call nat nature defined follows domain nat set vectors time functions containing exactly instances allowed environmental constraints range nat set vectors time functions containing exactly instances allowed environmental constraints nat environmental constraints allow controlled quantities take values described values monitored quantities described frequently possible monitor control exactly variables interest user 
monitor control variables values related variables real interest 
usually obtains clearest simplest documents writing terms variables interest user spite fact system monitor variables order determine value mentioned document 
accepted publication science computer programming 
nat usually function nat function computer system able vary values controlled quantities effecting changes monitored quantities 
note values included domain nat system designers may assume values occur 
relation req computer system expected impose constraints environmental quantities 
permitted behaviour may documented describing relation call req 
req defined follows domain req set vectors time functions containing instances allowed environmental constraints range req set vectors time functions containing instances considered permissible values allowed correctly functioning system 
req computer system permit controlled quantities take values described values monitored quantities described req usually function tolerate small errors values controlled quantities 
requirements feasibility requirements specify behaviour cases arise true domain req domain nat relation req considered feasible respect nat holds domain req nat domain req domain nat feasibility sense means nature described nat allow required behaviour described req mean functions involved computable implementation practical 
note imply domain req nat domain nat discussions model practice 
examples discussion 
document system design 
system design additional sets variables introduced represents inputs values stored input registers computers system represents outputs contents output registers computers 
values described time functions 
note defined section 
describe document meaning new variables giving relation values previously introduced 
accepted publication science computer programming 
relation denote vector containing element input registers 
physical interpretation inputs described relation defined follows domain set vectors time functions containing possible instances include domain nat 
range set vectors time functions containing possible instances describes values input registers possible describes values monitored quantities 
describes behaviour input devices 
relation function result imprecision measurement transducer devices 
relation denote vector containing element output registers 
effects output devices described relation defined follows domain set vectors time functions containing possible instances range set vectors time functions containing possible instances describes values controlled quantities possible describes values output quantities output device functioning correctly 
describes behaviour output devices 
relation function unavoidable device imperfections 
document software requirements 
software requirements determined system requirements document system design documents 
mentioned earlier software requirements document seen combination documents 
describe relations nat req 
sequel assume req feasible respect nat 
relation sof software provide system input output behaviour described relation call sof 
defined follows domain sof set vectors time functions containing possible instances range sof set vectors time functions containing possible instances sof software produce values described inputs described sof function software deterministic 
accepted publication science computer programming 
software acceptability software acceptable sof satisfy note predicates nat false software behaviour considered acceptable 
example value outside domain behaviour acceptable software constrained 
relations describing device behaviour hold means device broken software required satisfy system requirements conditions 
possible provide different versions relations order describe fail soft behaviour 
fail soft specifications weaker predicates software expected satisfy conjunction requirements expressed form 
example fail soft specifications describe broken device weaker predicates weaker req 
treat relations req sof functions functional notation rewrite implication follows relational composition recalling domain sof include possible values formula expressed concise way nat sof req authors requirements document describe relations nat req 
software designers determine sof verify 
document type may require natural language physical diagrams description environmental quantities precise mathematical 
natural language definition physical interpretation mathematical variables unavoidable usual engineering 
document software behaviour 
software requirements document fully represents requirements software meet may allow observable differences behaviour 
frequently designers chose implement subset behaviours allowed requirements document 
way designers decisions left programmers 
relation sof describing behaviour actual implementation described separate document known software behaviour specification 
document especially important multiple computer systems define allocation tasks individual computers system 
computer networks multi processor architectures may see hierarchy software behaviour specifications upper level document assigning duties group computers lower level documents detailing responsibilities individual computers groups 
computers 
universes drawn assumed include vectors time functions appropriate types ranges functions 
relations relational composition defined 
behaviours pairs 
sof nat req domain nat req sof accepted publication science computer programming 
document black box module interfaces 
computer systems require software completed single person weeks 
products desirable decompose software construction task set smaller programming assignments 
assignment produce group programs cf 
section call module 
section assume modules designed information hiding principle 
division software modules described informally software module guide states responsibilities module 
specify behaviour modules precisely allow module implementors independently reasonable likelihood separately written modules function correctly combined 
view module implementing finite state machines frequently called objects variables 
description module interface black box description objects 
program system belongs exactly module 
programs objects created modules components data structure 
writing software module interface specifications principal similar documenting software requirements simplifications possible 
software modules entirely internal environmental quantities monitor control communication performed external invocation module programs 
state set software module finite state transitions treated discrete events 
modules real time neglected sequence events matters 
allows replace concept time function sequence describing history terms discrete events call sequences traces 
identify finite subset infinite set possible traces canonical traces 
trace equivalent exactly canonical trace 
trace assertion specifications comprise groups relations functions domain set pairs canonical trace event range set canonical traces 
pair function canonical trace equivalent canonical trace extended event functions known trace extension functions 
relations domain contains canonical traces associate canonical trace set values output variables 
functions domain set values output variables values define information returned module user module 
single module implement objects class type 
example single module implement stacks 
case may choose design module objects completely independent describe behaviour typical object class 
reports describe method detail show set functions provide precise readable description externally visible behaviour module 
older discussions approach 
traces equivalent effect behaviour object 
precise definitions 
trace extension function called reduction function 
alternate model extension relation possible 
accepted publication science computer programming 
document internal module design 
module private data structure programs 
propose document design sufficiently precisely correctness verified code 
internal documentation module contain types information complete description data structure may include objects variables implemented modules 
function known abstraction function domain set pairs object name data state range set canonical traces objects created module 
pair included function traces equivalent describes sequence events affecting object named resulted data state 
ld relation referred program function specifying behaviour module programs terms mappings data states program execution data states execution cf section 
shown hoare information allows design verified may subsequently check implementation module interface 
view module creating single object simplifies discussion eliminating object names consider deterministic programs design verification illustrated diagram 
lower level represents changes module data structure caused program invocation event 
upper level represents external view changes 
canonical trace extended single event mapped trace extension function cf section item canonical trace program function event maps old data state ds new data state ds abstraction function maps data states canonical traces 
design correct diagram commutes possible events 
view module producing set named objects diagram slightly complex domains functions modified include names objects principle remains 
program non deterministic program function ld relation cf section possible data states mapped canonical trace abstraction function 
document effect individual programs 
term program denote text describing set state sequences digital finite state machine 
state sequences called execution program 
mills term representation mapping abstraction function 
trace extension function event abstraction abstraction function function ds program function event ds accepted publication science computer programming 
execution begins machine particular state called starting state 
sequence state changes may may terminate commence 
sequence terminate state called final state say program execution terminates simply program terminates 
situations want document intermediate states sequence 
starting state want know termination possible finite executions 
termination guaranteed executions finite 
termination possible possible final states 
information described ld relation 
ld relation comprises relation subset domain relation called competence set 
description program set starting states termination guaranteed competence set 
set starting states termination possible domain relation 
ordered pair relation possible program execution terminate state started state document effects executing program describing ld relation competence set identical domain relation convention omit 
program deterministic yields exactly function mills 
fact ld relation reduced mills function program deterministic means concepts provide set upward compatible notations may omit information redundant mix notations special cases general concept 
ld relations specifications programs stating behaviour required programs complete descriptions actual behaviour program 
longer programs self documenting set understandable short programs program display 
display comprises specification program program possibly containing names programs specifications named programs 
possible understand verify display information display supplemented dictionary definitions displays 
aspect documentation discussed detail 
document data flow 
interpretations data flow computer systems 
description way information flows variable 
execution program execution outer loop program controls periodic process constraints relating values variables programs 
constraints described relations 
relation variable program 
range set possible values variable 
domain relation set possible values variables program 
documentation helps debugging program 
describes constraints checked run time 
texts called procedures parameters programs definition section 
behaviour described general concept called parameterised program functions cf 
accepted publication science computer programming 
second interpretation data flow particularly convenient concurrent real time programs 
view software consisting set processes considered device transforms sequence input values sequence output values 
data flow transducers described approach propose description system requirements 
real time concern trace assertion method applied document behaviour process 
experience approach suggest worthy study 
document communication services protocols 
modern communications systems implemented hierarchy services service hierarchy 
level hierarchical communications system viewed module service offered specified means trace assertion method 
document corresponds usually called service specification 
implementation service lower level services local data structures partially described program functions abstraction functions mentioned section 
functions correspond called protocol design 
discussed detail 
communication protocols relatively small number states 
consequently enumerative analysis techniques practical applications verification protocols 
past decade formal methods protocol description analysis diverged verification types programs 
believe spite fact different analysis techniques available notation protocol computer systems 
hope see merging communities concepts applied 
document chip design 
current technology allows fabricate chips perform tasks complex implemented software years ago 
externally visible behaviour chips described techniques sections 
specification written way called chip behaviour specification 
usual discrete state assumptions behaviour approximated trace assertion method 
may prove useful document internal structure chips means abstraction functions functions describe change internal state result external events 
memories described simply regularity digital hardware components usually smaller state spaces software systems 
state spaces small enumerative design design validation techniques 
believe concepts discussed applicable hardware software small state space possible perform analyses practical software systems 
represent functions computer systems engineering 
definitions precise sufficient allow practical agreed notation provide definitions functions relations involved 
turning ideas method applied project requires define syntax expressions explain expressions interpreted functions relations 
trap formal methods groups fallen attempt define universal accepted publication science computer programming 
notation definition functions 
tempting define languages vdm hope doing give universal specification language 
unfortunately centuries research applied mathematics shown representation best classes functions 
example functions easily expressed polynomials functions approximated clumsy way class expressions 
history predictor continue invent improved forms expressions discover new classes functions interest 
experience methods revealed relations interest computer system design represented tables entries expressions possibly tables 
practice functions want describe great points discontinuity conditional expressions describe functions lengthy difficult parse 
tabular form expression parses information reader factors common subexpressions 
define semantics tables giving translation table boolean expression interpreted characteristic predicate relation viewed set ordered pairs 
companion gives semantics variety table formats 
provides systematic definition larger class table formats 
interpretation predicate expressions tables discussed 
final remarks section presents thoughts soundness practicality value ideas 
evidence theory sound 
ideas old computer science standards 
wheel reinvented idea 
system requirements model essentially control theory minor adjustments accommodate current computer terminology 
early version software requirements model produce approach quite obvious background control theory 
trace assertion model close certain algebraic theories 
main advantage difficult issues functions domain consisting strings function compositions 
relational semantics thoroughly explored authors 
excellent text relational methods 
discussion particular version 
internal module documentation model years old reinvented researchers 
effort show understood theories applied problem documentation 
approaches thoroughly studied confident unpleasant surprises model documentation 
evidence theory scales 
theories prove impractical applied realistic applications 
original aspects ideas grew practical applications experience shown usable 
systems software requirements models evolved united states naval research laboratory navy aircraft ideas variety organisations including bell laboratories atomic energy canada limited air force 
early version trace model successfully gmbh darmstadt germany 
internal documentation approach accepted publication science computer programming 
disciplined verification safety critical software ontario hydro 
experiences successful demonstrated functional methods tabular representations useful time consuming 
methods demand precision care similar required programming mathematics 
basis observations engineer time spent projects mentioned believe production documents fully practical new tools available 
class tool reduce time effort required write documents automating 
advanced tools increase value documents checking validity tables simulating designs specifications generating test cases specifications inserting runtime checks diagnostic programs specifications 
progress great deal done 
gain concepts 
believe gained concepts documentation 
primary advantage increase quality documentation mathematical documentation far complete correct informally written documentation 
rigidly organised documentation advantageous find specific information 
particularly suitable software 
see great advantages having common set notations computer system design process 
having common set concepts allow set basic tools process systems design software design chip design 
approach interpretation tables defined translating table conventional expression extensible 
new table formats introduced needed basic model completely independent representation functions 
grateful comments people including hoffman kelly milner ravn schneider serra taylor van weiss wang anonymous referees 
mills de bruijn inspired senior author think functional terms 
supported province ontario telecommunications research institute ontario trio atomic energy control board natural sciences engineering research council canada nserc state committee scientific research poland digital equipment external research programme 
quigley verification shutdown system software darlington nuclear generating station proceedings international conference control instrumentation nuclear installations institution nuclear engineers glasgow united kingdom may pp 
parnas assertions traces write specifications software modules proceedings nd conference european cooperation informatics venice lecture notes computer science springer verlag pp 

reprinted accepted publication science computer programming 
gehani mc eds software specification techniques bell telephone laboratories pp 

madey functional approach protocols specification proceedings th international ifip symposium protocol specification testing verification vancouver canada june pp 

britton parnas software module guide nrl memorandum report united states naval research laboratory washington december pp 
courtois parnas formally specifying communications protocol trace assertion method crl report mcmaster university crl telecommunications research institute ontario trio hamilton ontario canada july pgs 
dijkstra discipline programming prentice hall 
engel madey parnas ravn van formal approach computer systems requirements documentation hybrid systems grossman nerode ravn rischel eds lecture notes computer science springer verlag pp 

gannon hamlet mills theory modules ieee transactions software engineering vol 
se july pp 

predicative programming communications acm vol 
february pp 

parnas shore software requirements aircraft nrl memorandum report united states naval research laboratory washington november pp 
specifying software requirements complex systems new techniques application ieee transactions software engineering vol 
se january pp 

parnas utter documentation software design medium bell system technical journal vol 
october pp 

hoare proof correctness data representations acta informatica vol 
february pp 

hoffman trace specification communications protocols ph thesis university north carolina chapel hill 
hoffman trace specification communications protocols ieee transactions computers vol 
december pp 

madey editor trace assertion method proceedings th international conference cad cam robotics factories cars ed ottawa ontario canada pp 

madey parnas documentation paradigms crl report mcmaster university crl telecommunications research institute ontario trio hamilton ontario canada july pp 
madey fundamentals trace assertion method technical report tr warsaw university institute informatics warsaw pgs 
published university quebec hull department computer science canada technical accepted publication science computer programming 
report rr 
formal semantics tables crl report mcmaster university crl telecommunications research institute ontario trio hamilton ontario canada september pgs 
revised version appear proceedings th international conference software engineering 
mills new math computer programming communications acm vol 
january pp 

mills basili gannon hamlet principles computer programming mathematical approach allyn bacon 
mills linger box structured information systems ibm systems journal vol 
pp 

parnas information distributions aspects design methodology proceedings ifip congress booklet ta pp 

parnas criteria decomposing systems modules communications acm vol 
december pp 

parnas hierarchical structure proceedings ifip congress north holland pp 

parnas designing software ease extension contraction ieee transactions software engineering vol 
se march pp 

parnas generalized control structure formal definition communications acm vol 
august pp 

parnas documentation communications services protocols technical report queen university telecommunications research institute ontario trio kingston ontario canada february pp 
parnas predicate logic software engineering ieee transactions software engineering vol 
september pp 

parnas tabular representation relations crl report mcmaster university crl telecommunications research institute ontario trio hamilton ontario canada october pp 
parnas software aging proceedings th international conference software engineering italy may ieee press pp 

parnas mathematical descriptions specification software proceedings ifip world congress volume august pp 

parnas madey functional documentation computer systems engineering technical report queen university telecommunications research institute ontario trio kingston ontario canada september pp 
parnas madey functional documentation computer systems engineering 
version crl report mcmaster university crl telecommunications research institute ontario trio hamilton ontario canada september pp 
parnas madey documentation real time requirements ed 
realtime systems 
abstraction languages design methodologies ieee computer society press accepted publication science computer programming 
pp 

parnas wang trace assertion method module interface specification technical report queen telecommunications research institute ontario trio kingston ontario canada october pp 
parnas wang simulating behaviour software modules trace rewriting systems ieee transactions software engineering vol 
october pp 

parnas kendall development safety critical software proceedings international conference control instrumentation nuclear installations institution nuclear engineers glasgow united kingdom may pp 
parnas madey assessment safety critical software technical report queen university telecommunications research institute ontario trio kingston ontario canada december pp 
parnas madey assessment safety critical software nuclear power plants nuclear safety vol 
pp 

parnas clements weiss modular structure complex systems ieee transactions software engineering vol 
se march pp 

parnas clements rational design process fake ieee transactions software engineering vol 
se february pp 

parnas madey formal documentation structured programs crl report mcmaster university crl telecommunication research institute ontario trio hamilton ontario canada september pp 
parnas madey precise documentation structured programs ieee transactions software engineering vol 
december pp 

peters parnas generating test oracle program documentation proceedings international symposium software testing analysis issta august pp 

schmidt relations graphs discrete mathematics computer scientists springer verlag pgs 
van requirements model re examination real time systems application monitoring systems technical report queen telecommunications research institute ontario trio kingston ontario canada may pp 
van parnas madey documentation requirements computer systems proceedings ieee international symposium requirements engineering san diego california usa january pp 

wang specifying simulating externally observable behavior modules ph thesis crl report mcmaster university crl telecommunication research institute ontario trio hamilton ontario canada 
