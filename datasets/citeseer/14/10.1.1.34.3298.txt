core calculus dependency martn abadi systems research center compaq ma pa dec com anindya banerjee stevens institute technology ab cs stevens tech edu nevin heintze bell laboratories nch bell labs com jon riecke bell laboratories riecke bell labs com notions program dependency arise settings security partial evaluation program slicing call tracking 
argue central notion dependency common settings captured single calculus dependency core calculus dcc small extension moggi computational lambda calculus 
establish thesis translate typed calculi secure information flow binding time analysis slicing call tracking dcc 
translations help clarify aspects source calculi 
define semantic model dcc give simple proofs noninterference results case 
systems incorporate aspects program dependency arise different contexts 
example type systems secure information flow trace dependencies outputs inputs computation 
type systems meant guarantee secrecy integrity 
secure lambda slam calculus program languages volpano data may labelled high security low security type system ensures computations depend high security inputs yield high security outputs conversely low security outputs depend high security inputs :10.1.1.40.1122:10.1.1.149.7391
independence property called noninterference property security literature high security data interfere calculation low security outputs 
fragments trust calculus jflow appear satisfy noninterference property proved 
program analyses slicing call tracking bindingtime analysis dependency goal analyses compute conservative approximation parts program may contribute program final result generally intermediate results 
correctness analyses expressed properties analogous noninterference 
instance slicing aim determine parts program may contribute output parts contribute replaced expression type 
call tracking wish determine functions may called evaluation functions called replaced function type affecting final value 
binding time analysis wish separate static dynamic computations dynamic values replaced expression type affecting static results 
similarity secure information flow program analyses striking raises question analyses share common substrate 
provides answer constructing general framework type dependency analyses higher order programs 
framework calculus called dependency core calculus dcc 
give denotational semantics dcc formalizes notion noninterference 
show translate variety calculi security slicing binding time analysis call tracking dcc way noninterference results respective calculi immediate corollaries generic results dcc 
advantages foundational approach 
dcc gives way compare dependency analyses 
idea relates back strachey conception denotational semantics tool comparing languages 
second translations yield check type systems dependency analysis 
help confirm seemingly ad hoc decisions calculi uncovered problems 
third general results dcc yield simple noninterference proofs individual dependency analyses 
dcc simple extension moggi computational lambda calculus 
typically computational lambda calculus single type constructor semantically associated monad 
dcc notion extended incorporate multiple monads level predetermined information lattice 
computational lambda calculus describing dependency somewhat surprising 
usually computational lambda calculus describes languages side effects forms basis adding side effects pure functional languages 
dependency analyses contrast fundamentally change values computed 
common idea underlying uses computational lambda calculus 
case haskell way compute value type constructor pass value expression non type 
similarly information flow systems test high security boolean requires branches conditional return high security values 
cases type rules computational lambda calculus enforce necessary restriction 
rest describes dcc semantic model dcc translations type dependency analyses dcc 
certain aspects dependency analysis modelled dcc discuss concluding discussion 
commonality dependency analyses presenting syntax semantics core language dcc give examples dependency analyses slam calculus slicing calculus 
slam calculus dependency analysis slam calculus typed lambda calculus extended security annotations access control information flow 
simplify setting consider functional facet calculus information flow corresponds fragment trust calculus palsberg 
type pair consisting structural part security annotation denoting information flow ranging elements security lattice element greatest element example type bool denotes low security booleans similarly bool denotes high security booleans 
type bool 
bool denotes low security function accepts high security integer returns low security result 
terms type rules language section 
simple example typed slam term type bool 
bool constant function lx bool true note constructors slam labelled security annotations 
low security computations depend data evaluation expression true false produce low security boolean true information high security boolean leaked world 
remedy simple constructor security annotation constructor flow annotation result 
specifically annotation result upper bound original annotation constructor 
propagation annotations captured dependency calculus principle elimination rule properties security level binding time information dependency annotation constructor transferred result type expression 
principle fundamental design dependency calculus rest 
example result true false high security boolean noninterference property vacuously satisfied result high security boolean 
generally context expression type bool noninterference says depend high security variable constant respect slicing calculus dependency analysis program slicing seek dependencies program subterms program may contribute output 
example slice application lx contain function lx constant argument contribute final result 
identify subterms follow abadi labelled lambda calculus 
give conservative approximation labelled operational semantics type system previous biswas employs set analysis 
type system slicing similar slam calculus 
type pair consisting structural part set labels denoting slicing information 
note powerset labels forms complete lattice empty set element set labels greatest element 
give complete type system section 
typing judgement means assumptions expression type possible dependency instance consider example constructors labelled lx int fn easy see type function part application int fn 
int fn fn type term int fn 
result evaluating term depend noninterference holds slicing calculus assumption expression type int powerset lattice depend dependency core calculus dcc minor extension moggi computational lambda calculus 
features distinguish computational lambda calculus 
calculus contains sum types lifted types term recursion 
lifting allows model callby value calculi 
second having type constructor semantically associated monad calculus incorporates multiple type constructors element predetermined lattice idea considered wadler 
lattice represents different grades information 
security setting element usually stands low security 
type constructors change level type 
instance bool describes high security booleans 
third monad bind operation special typing rule explained 
syntax types dcc grammar unit theta ranges elements predetermined lattice lifting operation types denoted syntax types induces subset types called pointed types ffl pointed type ffl pointed types theta pointed types ffl pointed type pointed type 
account pointed types see howard mitchell text 
similarly operation types induces subset types called types protected level table typing rules dcc 
var unit unit lam lx app pair theta proj theta proj inj inj case case inj inj unitm bindm bind protected level lift lift seq seq pointed rec pointed ffl protected level ffl protected level theta protected level ffl protected level protected level 
typing rules dcc appear table 
typing judgements typing environment denotes list distinct variables types 
rules unit function product sum types standard rule monadic unit operation 
rule monadic bind nonstandard concept protected level body usually body type model section gives justification rule 
rules lift seq just special cases monadic unit bind operations lifted types recursion permitted pointed types 
operational semantics dcc call name semantics 
particular term reduces bind reduces denotes capture free substitution rest operational semantics standard omitted 
semantics model dcc draws ideas noninterference proofs reynolds concept parametricity 
method easiest explain example high low security booleans 
high security computation depend high security input low security computation 
model explains difference views high security booleans view captured binary relation computations respect relations 
simple example high security view diagonal relation related iff high security computations distinguish booleans 
low security view contrast true relation related low security computations take advantage distinctions high security booleans 
sabelfeld sands develop ideas manuscript similar constructions appear nielson strictness analysis 
formalize ideas category 
recall complete partial order cpo poset contains upper bounds directed subset cpo may may element 
recall directed complete relation relation preserves upper bounds directed sets 
define category dc dependency category category ffl objects object cpo jaj family relations ffl morphisms morphism continuous function hom denote set morphisms condition morphisms crucial 
consider instance lattice points ftrue falseg trivial ordering define objects rh rh relations relation corresponds low security viewer high security boolean viewer distinguish booleans 
choose true relation theta relation rh contrast corresponds high security viewer high security boolean viewer distinguish booleans 
choose rh diagonal relation similar manner choose diagonal relation morphism send arguments related results related true relation pair words function mapping high security booleans low security booleans constant function 
relation need diagonal relation true relation 
key property need dc model dcc typed lambda calculus products coproducts establish adapt standard results categorical semantics show dc cartesian closed coproducts monad 
results necessary justify constructions reader unfamiliar category theory safely skip 
concretely objects ffl unit object unit defined poset identity relations 
ffl coproducts ja bj jaj jbj inl inl inr inr ae inl inl inr inr ffl products ja theta bj jaj theta jbj thetab ha bi ha theta hx yi ffl exponentiation ja bj hom jaj jbj hom ffl lifting ja 
ae 

ordered jaj 
ordered elements 
ffl monads jt jaj ae jaj theta jaj define maps maps identity function 
morphisms identities category domain codomain 
definitions surprising mitchell text gives history definitions 
structure gives machinery needed interpret types terms dcc 
meaning type category theta theta meaning typing judgement 
omit definitions meanings terms standard 
induction definition pointed show proposition pointed element 
recursion interpreted fixed points 
monads give way change level type 
operator changes relations true relation 
generally type protected level views type level true relation 
proposition type protected level theta applications strong version noninterference languages recursion notion dependency ways state notion noninterference 
says program terminates input produces result changing input related input causes program terminate result related original result 
strong notion noninterference 
calculi satisfy strong property satisfy weaker property related inputs cause program terminate outputs related 
property related inputs may yield different convergence behavior 
section study calculi strong version noninterference 
include calculi call name semantics turn easier translate dcc 
section study calculi satisfy weaker version noninterference 
call name functional slam calculus source calculus call name purely functional version slam calculus calculus essentially trust calculus palsberg coercion high low security 
denote join semilattice security levels range levels types unit theta typing rules appear table 
typing rules operation ffl ktk increase security level type 
symbol denotes subtyping relation 
restriction recursion function types essential call name context restriction merely allows type system call byvalue version 
operational semantics calculus deviates original operational semantics slam calculus arguments passed name value 
evaluation contexts defined style felleisen grammar delta proj inj local operational rules lx proj protect case inj inj inj table typing rules functional slam calculus 
var unit unit sub rec function type lam lx app ffl pair theta proj theta proj ffl inj inj case case inj inj ffl protect protect ffl subunit unit unit theta theta write rewrites rewritten 
translation slam calculus dcc straightforward 
types translated dcc recursive definition maps types security level dcc types maps types security level dcc types 
unit unit 
theta theta slam typing derivation translated valid dcc derivation rules table 
easy check slam typing derivation yields dcc typing derivation translation 
prove correctness properties translation theorem adequacy table unit unit iff 
theorem noninterference elements suppose unit unit derivable slam type system 
iff proof proof follows directly structure dc sketch argument case fl hg 
suppose unit unit derivable slam type system 
applying typing rule lam lx 
unit unit translating dcc lx unit unit lx 
element 
unit unit unit unit 
dc condition morphisms implies 
case rd true relation diagonal relation 

lx lx adequacy iff noninterference theorem stated specific type readability extends types involving function types 
slicing calculus slicing calculus introduced section attempts calculate portions program may contribute final answer definitely 
study slicing formulate slicing analysis 
types language exactly slam calculus ranges sets labels 
typing rules appear table 
rules resemble slam calculus rules rules value constructors different 
types translated dcc exactly call name functional slam calculus typing judgement translated judgement form rules table 
correctness properties callby name functional slam calculus 
table typing rules slicing calculus subtyping analogous subtyping slam calculus 
var unit unit fng sub rec function type lam lx fng app ffl pair theta fng proj theta proj ffl inj inj fng case case inj inj ffl table typing rules binding time calculus 
var unit unit sub unit sta unit dyn rec function type lam lx app pair theta proj theta proj inj inj case case inj inj ffl binding time calculus goal binding time analysis annotate program binding times specialization directives 
binding times specify data available 
instance binding times static dynamic static denotes known specialization time dynamic denotes known run time 
binding times specify specialization directives expression static binding time eliminable reduced compile time 
expression dynamic binding time residual reduced compile time 
hatcliff danvy define binding time type system focused computational lambda calculus 
system dynamic context expression type int mapped analysis annotated term annotation sta static identical equivalent integer constant lemma 
property exactly noninterference static data rely dynamic data 
implicit hatcliff danvy type system restriction structure types 
restriction explicit defining notion formedness types 
example dyn denotes dynamic binding time sta dyn types int sta 
int sta dyn int sta theta int sta dyn ill formed int dyn 
int dyn sta formed 
dcc give generic account system 
specifically show noninterference property independent notion formedness employed 
specific notion wellformedness motivated engineering constraints varying specializer specializer 
summary binding time analysis viewed dependency calculus la dcc conjunction notion formed types 
dependency captures generic notion computation depends dynamic inputs formedness condition captures constraints imposed specializer 
formalize ideas source language similar slam types annotated binding times sta dyn 
types binding time calculus unit theta sta dyn formed types subset types defined follows ffl unit formed 
ffl op formed iff formed op theta 
typing rules 
judgement means assumptions expression formed type note formedness restriction types obviates need ffl elimination rules app proj ffl binding time calculus translated dcc 
types translated dcc way call name functional slam calculus 
typing judgement translated table typing rules smith volpano calculus booleans 
var gh const gh true false skip gh skip cmd sub gh gh assign gh gh cmd seq gh cmd gh cmd gh cmd gh gh cmd gh cmd gh gh cmd gh cmd judgement form rules table 
correctness properties call name functional slam calculus 
smith volpano calculus smith volpano calculus simple language modified types keep track security levels variables commands 
just slam calculus type system prevents high security inputs influencing outputs 
translation smith volpano calculus dcc looks different translations slam slicing calculus binding time calculus 
part difference arises difference imperative functional languages 
deeper level subtleties pointed types dcc useful translation 
types smith volpano calculus divided data types phrase types cmd phrase type type storage cells hold values type subtyping relation typing rules primitive relations cmd cmd 
typing rules calculus appear table 
order keep translation dcc simple modify original type rules ways 
variables types variables command type possible original smith volpano calculus appear 
typing contexts consequently split parts gh containing sets high low variables respectively type contexts just lists variables split 
second implicit data type boolean integer 
words type low security booleans type high security booleans 
simplification expository purposes direct way encoding integer type dcc 
extend encoding original calculus directly add integer type dcc semantic domain flat integers add recursive types dcc represent integers type expression 
changes complicate dcc essentially new difficulties arise integers 
operational semantics language uses state map variables ftrue falseg 
forms judgement operational semantics 
judgement form command denotes computation terminates state judgement form 
denotes computation halted command run rules define operational semantics skip 
false 


false 
true 
true 
reflexive transitive closure 
observations calculus order 
phrases type cmd modify variables type phrase type cmd function state portion state representing high variables 
low commands contrast modify high low variables 
second loops may include low expressions low commands 
restriction type system satisfy strong noninterference property 
concurrency leak information 
restriction loops follows low commands may diverge 
translation smith volpano calculus dcc depends observations 
define type bool dcc type unit unit sv bool sv bool sv sv theta theta sv sv sv theta sv bool sv sv theta sv bool sv cmd sv theta sv sv sv cmd sv theta sv 
sv theta sv translations judgements closed expressions dcc form gh sv ranges expressions commands denotes result translation complete translation table 
example suppose rule typing derivation 
judgement gh cmd translated ls shorthand case inj inj fresh variable contrast judgement gh cmd translated ls bind notice bind rule value expression high security boolean decomposed 
arms conditional protected level part translation typed 
suppose set variables define 
prove theorems translation theorem adequacy suppose cmd 
iff hh ii theorem noninterference suppose gh cmd derivable smith volpano calculus dually proof noninterference theorem uses semantic model dcc original operational proof uses detailed operational analysis 
applications ii weaker version noninterference calculi track dependency satisfy strong version noninterference 
example original functional slam calculus uses call value semantics call name semantics 
calculus high security inputs may affect termination behavior outputs low security computation 
earlier version smith volpano calculus due volpano smith irvine satisfies weaker notion noninterference strong version noninterference require restriction loops low commands 
unfortunately difficult dcc directly model languages 
alter syntax semantics dcc slightly 
main problem lies semantics lifting 
consider instance meaning dcc type bool bool bool unit unit function type map elements elements constant element type bool essence obeying strong version noninterference 
weaker version want relation bool relate element bool just relation non 
elements continue diagonal relation 
model weaker notion underlying category change semantics lifting operator relations 
change definition protected include clause ffl protected level protected level 
call new language tuned call value operational semantics call name 
meaning isomorphic terms lx bind seq lift lx seq bind lift terms typed change definition protected 
describe calculi satisfying weak version noninterference translations 
call value functional slam calculus application call value version functional slam calculus section 
syntax typechecking rules language exactly callby name setting require recursion form ffl main change operational semantics evaluation contexts lx inj hv vi delta inj ei hv ei proj case inj inj rewrite rules lx proj hv protect case inj inj inj lx types translated follows unit unit theta theta 
call name case type translated pointed type function types guaranteed pointed 
typing judgement translated judgement form rules table 
theorem adequacy table unit unit iff 
theorem noninterference elements suppose unit unit derivable slam type system 
iff table typing rules call tracking calculus 
var unit unit sub rec gamma 
lam lx gamma 
app gamma 
ktk tk pair theta tk proj theta proj inj inj case case inj inj ktk call tracking calculus types call tracking calculus grammar unit theta gamma 
ranges sets labels 
labels occur lambdas 
typing rules appear table 
term assigned type effect set labels lambdas may called 
denote element lattice sets labels 
subtyping rule function types gamma 
gamma 
subtyping rules obvious omitted 
types translated follows unit unit theta theta gamma 

typing judgement translated judgement form rules table 
theorem adequacy table unit unit iff 
theorem noninterference element suppose lx unit unit lx unit unit derivable call tracking type system 
lx iff lx theorem formalizes intuition expression calling function property function replace arbitrary function appropriate type changing result evaluating 
discussion shown dependency analyses cast dcc 
section shows compare contrast various dependency analyses single framework 
example callby name functional slam calculus slicing calculus binding time calculus share common translation types dcc set common correctness properties small differences occur translations terms 
larger differences calculi smith volpano calculus described 
advantage translations utility design dependency analyses 
instance certain incompleteness functional slam calculus semantic sense add rule easily modelled dcc original slam calculus rule 
dcc point apparent design inconsistencies existing calculi 
currently redesigning imperative slam calculus translation dcc guide type system vehicle proving noninterference 
model underlying dcc simplifies proofs noninterference 
model invaluable developing dcc 
instance pattern seq bind occurs frequently translations type pointed protected order translation 
concepts pointed protected obvious path adopt increasingly complex set type conversions equations 
model helpful developing weaker notion noninterference extending notion protected types lifted types changing semantics lifting 
difficult change syntax dcc directly imposing equation 
aspects dependency translated dcc 
example binding time analyses davies pfenning directly translated dcc dcc model coercion run time objects compile time objects 
different semantics due moggi developed binding time analyses concept fibration model dependency 
similar comment applies trust operator maps untrusted trusted palsberg 
possible extensions dcc include accounting spawning concurrent threads modelling cryptographic operations way encrypting high security datum produce low security ciphertext 
relationship dcc semantic dependency context optimizing compilers region systems memory management explored 
eugenio moggi discussions anonymous referees comments 
anindya banerjee member church project supported part nsf eia 
november abadi 
secrecy typing security protocols 
theoretical aspects computer software third international symposium volume lect 
notes computer sci 
springer verlag 
abadi lampson 
levy 
analysis caching dependencies 
proceedings acm sigplan international conference functional programming pages 
acm 
biswas 
dynamic slicing higher order programming languages 
phd thesis university pennsylvania 
cartwright felleisen 
semantics program dependence 
proceedings acm sigplan conference programming language design implementation pages 
acm 
consel 
binding time analysis higher order untyped functional languages 
proceedings acm conference lisp functional programming pages 
acm 
davies 
temporal logic approach binding time analysis 
proceedings eleventh annual ieee symposium logic computer science pages 
davies pfenning 
modal analysis staged computation 
conference record third annual acm symposium principles programming languages pages 
acm 
denning 
lattice model secure information flow 
commun 
acm 
denning denning 
certification programs secure information flow 
commun 
acm 
felleisen 
theory practice class prompts 
conference record fifteenth annual acm symposium principles programming languages pages 
acm 
ferrante ottenstein warren 
program dependence graph optimization 
acm trans 
programming languages systems 
hatcliff danvy 
computational formalization partial evaluation 
mathematical structures computer science 
special issue containing selected papers workshop logic domains programming languages darmstadt germany 
heintze riecke 
slam calculus programming secrecy integrity 
conference record fifth annual acm symposium principles programming languages pages 
acm 
howard 
inductive coinductive pointed types 
proceedings acm sigplan international conference functional programming pages 
acm 
hudak peyton jones wadler arvind boutel fairbairn fasel guzman hammond hughes johnsson kieburtz nikhil partain peterson 
report functional programming language haskell version 
acm sigplan notices may 
lambek scott 
higher order categorical logic 
cambridge studies advanced mathematics 
cambridge university press 
mclean 
security models 
editor encyclopedia software engineering 
wiley press 
mitchell 
foundations programming languages 
mit press 
mizuno schmidt 
security flow control algorithm denotational semantics correctness proof 
formal aspects computing 
moggi 
notions computation monads 
information control 
moggi 
categorical account level languages 
proceedings mathematical foundations programming semantics thirteenth annual conference electronic notes theoretical computer science 
elsevier 
available www elsevier nl locate entcs 
myers liskov 
decentralized model information flow control 
proceedings sixteenth acm symposium operating systems principles 
acm press 
myers 
practical static information flow control 
conference record sixth annual acm symposium principles programming languages 
acm 
nielson 
strictness analysis denotational interpretation 
conference record fourteenth annual acm symposium principles programming languages pages 
acm 
nielson nielson 
automatic binding time analysis typed calculus 
science computer programming 
nielson nielson 
level functional languages volume cambridge tracts theoretical computer science 
cambridge university press 
palsberg 
trust calculus 
journal functional programming november 
reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages 
north holland amsterdam 
riecke viswanathan 
isolating side effects sequential languages 
conference record annual acm symposium principles programming languages pages 
acm 
sabelfeld david sands 
model secure information flow sequential programs 
unpublished manuscript 
smith volpano 
secure information flow multithreaded imperative language 
conference record fifth annual acm symposium principles programming languages 
acm 
strachey 
varieties programming language 
proceedings international computing symposium pages 
foundation venice 
reprinted peter hearn robert tennent eds algol languages 
birkhauser 

tang 
systemes interpretation pour analyse de de 
phd thesis ecole nationale des mines de paris 

tang jouvelot 
effect systems subtyping 
acm conference partial evaluation program manipulation june 
thiemann 
unified framework binding time analysis 
bidoit editor colloquium formal approaches software engineering fase volume lect 
notes computer sci pages 
springer verlag april 
tip 
survey program slicing techniques 
journal programming languages september 
tofte 
talpin 
region memory management 
information computation 
volpano smith irvine 
sound type system secure flow analysis 
journal computer security 
wadler 
marriage effects monads 
proceedings acm sigplan international conference functional programming pages 
acm 
weiser 
program slicing 
ieee trans 
software engineering july 
translations dcc translations various source calculi dcc tables 
translations readable cases sums products left 
dcc combinator abbreviation dot ktk dot lx bind bind ktk seq bind fresh variable 
translations require coercion combinator interpreting subsumption combinators need defined specially system 
definitions translation 
table translation call name functional slam calculus dcc excerpts 
coerce coerce unit unit lx unit bind coerce lx bind lz coerce coerce coerce thetau thetau lx theta bind proj coerce proj coerce lx bind seq case inj lift inj coerce inj lift inj coerce var unit unit lift unit sub coerce rec lam lx lx app ffl dot bind ffl fresh pair theta theta proj theta proj ffl theta dot bind proj ffl fresh inj inj lift inj case case inj inj ffl dot bind seq case inj inj ffl fresh protect protect ffl dot ffl table translation slicing calculus dcc excerpts 
var unit unit fng fng lift fng unit lam lx fng fng lx fng app ffl dot bind ffl fresh table translation binding time calculus dcc excerpts 
var unit unit lift unit lam lx lx app bind fresh table translation smith volpano calculus dcc 
true inj false inj case inj inj fresh proj projection state variable coerce cmd cmd coerce ls theta sv hh coerce cmd cmd ls theta sv lift proj si var gh ls proj sv gh true ls hh true sv gh false ls hh false sv gh true ls true sv gh false ls false sv gh skip cmd ls proj sv cmd gh skip cmd ls lift sv cmd sub gh gh sv coerce sv gh gh gh gh cmd sv gh ls proj sv gh cmd gh gh cmd sv ls lift proj proj ii sv cmd gh cmd gh cmd gh cmd sv gh cmd sv cmd ls hc proj si sv cmd gh cmd gh cmd gh cmd sv gh cmd sv gh cmd ls seq sv gh cmd gh gh cmd gh cmd sv sv cmd ls bind sv gh cmd fresh ifl gh gh cmd gh cmd sv gh sv cmd ls sv cmd gh gh cmd gh cmd sv gh sv cmd ls seq lift sv gh cmd table translation call value functional slam calculus excerpts 
fix lg 
lx ffl coerce unit unit lx unit bind coerce lx 
bind lz seq coerce lift coerce var lift unit unit lift unit sub seq lift coerce fresh rec ffl fix lam lx lift lx 
app ffl 
seq seq lift dot ffl fresh protect protect ffl seq lift dot ffl fresh table translation call tracking calculus excerpts 
fix lg 
lx gamma 
var lift unit unit lift unit rec gamma 
fix lam lx gamma 
lift lx seq lift dot fng 
fresh app gamma 
ktk tk 
ktk tk ktk tk fresh 
