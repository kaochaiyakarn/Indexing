code compression procedural abstraction register allocation march uppsala master theses computing science dv issn code compression procedural abstraction register allocation johan information technology computing science department uppsala university box uppsala sweden memory size important economic factor development embedded systems desirable find compiler optimization techniques reduce size generated executable code 
code compression technique procedural abstraction repeated occurrences equivalent code fragments factored new subroutines 
thesis investigate prospects applying procedural abstraction intermediate code level 
previous approaches working machine code level deal complications caused peculiarities register allocation assignment 
working register allocation avoid complications take full advantage powerful register allocation techniques 
experimental results show substantial reductions intermediate code size 
supervisor sven examiner sven passed code compression procedural abstraction register allocation march years powerful computer systems incorporated wide variety small electronic devices cellular phones kitchen appliances automobile components children toys 
embedded systems developed memory size major impact power consumption production costs 
compiler embedded system desirable optimization techniques reduce size generated executable code 
technique procedural abstraction repeated instances equivalent code fragments factored new subroutines 
code compression interesting programs transferred networks give speed ups general reduced load times improved instruction cache behaviour :10.1.1.147.3931
thesis prospects applying procedural abstraction register allocation investigated 
working control flow graphs intermediate code level compiler matching algorithm identify groups semantically equivalent code regions replaced calls new procedures 
procedural abstraction optimization interprocedural nature produces better results code 
abandon traditional framework programs compiled module module favour optimization framework modules compiled 
having access program allows forms optimization chapter think approach reasonable 
carried part program optimization project uppsala university 
project sponsored advanced software technology competence centre collaboration iar systems 
author people valuable contribution feedback inspiration sven jan carl von platen erik charles 
code compression procedural abstraction register allocation march procedural abstraction general abstraction process putting name group concepts name reason group effect creating new concept turn recursively abstracted 
procedural abstraction name associated group program statements forming procedure executed single statement 
programmers heavy procedural abstraction source code level writing programs easier reason program 
leads improved program quality reducing amount source code 
compiler optimization procedural abstraction involves finding multiple code fragments automatically semantically equivalent replacing calls new procedure 
optimization applied different levels compiler example source code level machine code level 
sections describe apply procedural abstraction intermediate code level register allocation 
basic concepts assume working intermediate code level compiler register allocation 
instruction intermediate code consists opcode opcode sequence operands operands 
instruction operands labels constants temporary registers 
infinite supply temporaries temporaries reused shared functions 
information instruction belong operand assumed encoded opcode 
procedure call requires instruction takes number input arguments returns number output arguments 
destination call pointer may constant 
procedures program available compiler 
convenience say sequence elements size size called valid index control flow graphs procedure program represented control flow graph define follows 
definition control flow graph directed graph distinguished nodes start node occurs path start 
start predecessors successors 
nodes control flow graph basic blocks sequences straight line code entered left 
order able reason edges control flow graph introduce notation 
node set edges leaving set edges entering source edge code compression procedural abstraction register allocation march destination 
successors predecessors node defined follows succs preds elements sets arranged fixed order treated sequences 
order applied elements succs preds 
basic block branching instruction canonical order true edge comes false edge conditional branch switch cases ordered numerical value 
canonical ordering allows determine condition branch edge taken looking corresponding instruction 
additional restriction imposed control flow graphs single node may multiple predecessors multiple successors 
control flow graph conforms restriction said split merge form 
control flow graph easily transformed split merge form inserting extra empty merge node node multiple predecessors extra split node node multiple successors 
case branching instruction original node moved split node 
nodes single predecessor single successor called block nodes 
empty block nodes safely removed graph 
dominators liveness slightly modified versions standard definitions 
definitions dominators section definition liveness section 
dominators extended include nodes edges node dominate edge vice versa 
definition control flow graph node edge said dominate node edge path start includes node edge said postdominate node edge path includes liveness defined edge entrance exit basic blocks 
definition temporary live edge control flow graph path defined 
mappings concept mapping elements sets important procedural abstraction algorithms 
defined follows 
definition mapping sets bijection subset subset clear subsets equal size 
say mapping complete code compression procedural abstraction register allocation march way view mapping set pairs element element occurs position pair occurs second position pair matching algorithm described section succeeds complete mappings elements certain sets 
determine case mappings built incrementally inserting new pairs existing mapping 
course insertion fail complete mapping exists sets 
definition formalizes 
definition mappings consistent union seen sets mapping 
insert new pair mapping check singleton mapping consistent insertion successful new mapping union insertion failed 
method combine mappings check consistency abort failure proceed union successful 
single entry single exit regions terms control flow procedure single entry point single exit point 
region code replaced call procedure preserving semantics program control flow region single entry point single exit point 
concept single entry single exit region deceptively hard define rigorously 
definition johnson pearson pingali 
definition single entry single exit region graph ordered edge pair distinct control flow edges 
dominates 
postdominates 
cycle containing contains vice versa 
call entry region written entry exit region exit 
shows control flow graph single entry single exit regions 
note third property necessary prevent backedges affect dominator postdominator relations entering leaving region determine nodes belong region dominators 
definition node control flow graph contained single entry single exit region dominates postdominates 
edge dominates edge postdominates region entries edges note backedge 
code compression procedural abstraction register allocation march nodes contained region traversed defining local successor predecessor functions succs exit preds entry depth traversal entry natural start node 
note block nodes single entry single exit regions 
sequence regions exit region entry sub sequence region 
example single entry single exit regions 
leads problems regions may overlap partially number regions potentially quadratic number edges 
combat problems choose consider canonical regions 
definition single entry single exit region canonical provided 
dominates single entry single exit region 
postdominates single entry single exit region 
edge control flow graph entry canonical region exit canonical region 
example regions canonical 
shown canonical single entry single exit regions statements applies 

node disjoint node contained 
nodes contained vice versa 

control flow graph canonical single entry single exit regions 
block node split node merge node start code compression procedural abstraction register allocation march words canonical regions overlap partially canonical regions nodes common region completely nested inside 
canonical single entry single exit regions control flow graph organized tree parent region closest containing region children region regions immediately contained 
call program structure tree pst 
show pst control flow graph 
region define rank number edges longest path leaf region pst 
example rank rank 
johnson linear algorithms finding canonical single entry single exit regions building program structure trees computing dominators 
matching single entry single exit regions replaced calls suitably defined new procedure semantically equivalent 
semantic equivalence general undecidable find syntactic criterion guarantees semantic equivalence 
section define criterion call matching regions match guaranteed semantically equivalent safely rewritten 
loosely speaking regions match identical labels temporaries 
correspondences labels temporaries place label temporary corresponding label temporary 
formal definition matching property uses auxiliary definitions 
require regions control flow structure property call node equivalence 
definition pair single entry single exit regions node equivalent possible set complete mapping nodes nodes 
size succs size succs 
program structure tree 
code compression procedural abstraction register allocation march 
valid index succs pair succs succs furthermore node pairs entry entry exit exit pair mapping called corresponding pair nodes 
second property required matching called instruction equivalence corresponding pair nodes required instructions terms opcodes order 
definition pair single entry single exit regions instruction equivalent node equivalent corresponding pair nodes 
size size 
valid index opcode opcode 
valid index instructions form corresponding pair instructions 
definition follows corresponding pair instructions number operands 
say valid index operands pair operands operands corresponding pair operands 
regions match require corresponding operands equivalent sense 
definition pair single entry single exit regions operand equivalent instruction equivalent corresponding pair operands op op holds 
op op constants type value op equal value op 

op op temporaries type corresponding pair operands op op op op corresponding pair operands op op op op 

op op labels refer corresponding pair nodes 
second property exist complete mapping temporaries temporaries op op op op pair corresponding operands op op temporaries 
pairs mapping called corresponding pairs temporaries 
code compression procedural abstraction register allocation march canonical ordering successors see section ensures pair instruction equivalent regions third property holds pair corresponding label operands 
definition summarizes requirements matching property 
definition single entry single exit regions match pair operand equivalent 
follows definition node equivalence instruction equivalence necessary conditions regions match 
algorithm order determine regions match go steps 

check node equivalent recursively traversing nodes regions parallel building mapping nodes nodes incrementally 
node equivalent proceed step 
check instruction equivalent traversing instructions pair corresponding nodes members checking opcodes equal 
store pairs corresponding operands list instruction equivalent proceed step 
check operand equivalent looking pairs corresponding operands elements turn building mapping temporaries regions incrementally 
constants operands required value labels ignored 
operand equivalent match 
shown matching defined equivalence relation 
proof outlined 
clearly region matches identity functions mappings reflexivity 
matches matches defined inverses symmetry 
matches matches matches functional composition mappings match gives transitivity 
matching equivalence relation partition regions groups equivalence classes members group match 
inverses functional composition easily construct necessary mappings members 
rewriting group matching single entry single exit regions 
pair regions group mapping temporaries 
mapping nodes rewriting phase 
create new procedure body copy follows 
node contained insert node control flow graph add code compression procedural abstraction register allocation march mapping add edges new graph maps local successors node corresponding successors complete copy add edges start node entry exit node temporary occurs fresh temporary 
replace occurrence insert new mapping new procedure match matching equivalence relation match mappings naively temporaries occurring input output parameters 
liveness information reduce number parameters required 
temporary input parameter corresponding temporaries dead entry regions 
output parameter corresponding temporaries dead exit regions 
formalize say set necessary input parameters par set temporaries exists live entry 
likewise set necessary output parameters par set temporaries exists tf live exit 
sets ordered treated sequences 
region create new node containing single call valid index par send par th input argument 
valid index par receive par th output argument 
entry exit remove nodes contained graph 
estimating code size reductions rewriting group matching regions result reduction code size overhead cost added function calls 
group rewritten estimate calculated code size reduced group rewritten 
estimated code size reduction turn negative group left estimate model actual code size reductions accurately possible avoid rewriting groups increase code size rewriting possible reduce code size 
formula estimate code size reduction resulting rewriting single group matching regions 
components formula follows size region group size intermediate code instructions region code compression procedural abstraction register allocation march added size procedure call added size new procedure 
note formula valid single group rewritten multiple groups involved rewriting group may change groups sub regions removed program 
groups processed order decreasing rank change restricted improving algorithm procedural abstraction technique described previous sections efficient areas 
note number possible region pairs program grows quadratically number regions 
partition regions equivalence classes need match mn pairs usually better reduce number matching operations fingerprinting scheme described 
second area improvements performance matching algorithm 
original algorithm node matched time region contains node matched 
node may contained multiple regions get expensive 
information program structure tree sure node matched innermost region contained matched 
fingerprinting suggested debray numerical value called fingerprint computed region 
fingerprint designed regions different fingerprints guaranteed match 
regions program partitioned groups identical fingerprints example hashtable buckets regions group need matched regions group 
number quantities inexpensive compute program structure trees program guarantee regions different values match 
efficient differentiating small regions efficient large deeply nested regions 
ideally fingerprints composed quantity 
obvious quantities region listed 
rank number children pst 
number descendants pst 
number control flow graph nodes contained 
put regions list 
match region remove matching regions complete equivalence class list 
repeat list empty 
code compression procedural abstraction register allocation march number control flow graph nodes contained contained children pst 
total number instructions opcodes instructions node speed partitioning fingerprint encoded single bit machine word 
program structure tree program structure tree holds information regions nested 
able information adopt shallow view control flow graphs region shallow view child pst treated special region node single predecessor entry single successor exit 
matching regions step matching algorithm section checking node equivalence modified handles shallow control flow graphs allowing find corresponding pairs region nodes 
actual sub regions represented region nodes called corresponding sub regions 
key observation regions match necessary pairs corresponding sub regions match 
improvement match groups regions order increasing rank bottom ensuring regions matched parents pst 
storing result match table look results matches corresponding pairs sub regions abort matching pair failed match 
going avoid recomputing mappings temporaries pair matching sub regions parent regions matched 
mappings child regions pair consistent union mappings consistent corresponding temporaries contained sub region matches resulting mapping match stored table 
problem bottom method regions rank matched regions matched 
regions rank small worth rewriting 
avoid matching regions results needed matching higher ranked regions 
solution match regions order decreasing rank top matching corresponding sub regions recursively encountered 
result match stored looked time needed 
remaining groups small give savings matching phase ended 
code compression procedural abstraction register allocation march experiments implemented procedural abstraction intermediate code level research compiler evaluated performance set benchmark programs 
results experiments 
prototype implementation prototype implementation computes canonical single entry single exit regions control flow graphs input program applies simple fingerprinting scheme reduce number regions matched 
uses bottom version improved matching techniques section mappings temporaries matching regions stored reused 
regrettably time constraints prevented implementing complete rewriting phase 
get meaningful results base statistics estimated code size reductions described section 
estimates accurately reflect reduction intermediate code size resulting actual rewriting phase 
detail done follows 
matching phase results list groups regions regions group match 
groups sorted order decreasing rank 
estimated code size reduction computed group list 
positive added total code size reduction region group child regions descendants deleted list 
models fact rewriting replace regions single 
estimate non positive group contribute total code size reduction descendants regions left 
group removed list process repeated list empty 
basic formula computing estimated code size reduction section number intermediate code instructions region constant constant 
test purposes values constants varied model contexts function calls expensive 
prototype implementation realized compiler framework program optimization project 
compiler uses ansi compliant frontend borrowed iar systems modified output program representation file 
global optimizations performed frontend inlining loop unrolling code expanding optimizations disabled 
output frontend fed interprocedural optimizer backend written functional language scheme 
frontend output modules source files input program collected 
control flow graphs functions program reassembled complete callgraph built 
compiler framework currently development meant register allocation code generation available prototype implementation 
verification correctness procedural abstraction algorithm code compression procedural abstraction register allocation march limited code inspection manual inspections output data various stages 
benchmarks tested performance procedural abstraction algorithm running number benchmark programs prototype implementation 
table lists benchmark programs experiments 
benchmark programs taken sources mediabench benchmark suite www cs ucla edu mediabench applications html pointer intensive benchmark suite todd austin www cs wisc edu austin austin html telenor software site www nta software table lists properties benchmark programs 
second column shows number functions program 
third column shows number canonical single entry single exit regions fourth column shows number intermediate code instructions procedural abstraction 
table 
benchmarks name general description source part adpcm audio encoder decoder mediabench ks kernighan graph partitioning pointer intensive benchmark suite anagram anagram generator pointer intensive benchmark suite video decoder player telenor mpeg enc mpeg video encoder mediabench pegwit public key encryption authentication program mediabench table 
benchmark properties benchmark functions regions instructions ks anagram mpeg enc pegwit code compression procedural abstraction register allocation march results different cost models calculate code size reductions achieved procedural abstraction 
table shows results experiment set 
cost model savings represent exact reduction number intermediate code instructions 
column labelled instructions shows number instructions prior procedural abstraction 
saved shows reduction number instructions procedural abstraction 
saved instruction shows savings ratio measured code size reduction attributed regions non trivial control flow structure 
high level regions internal nodes psts rank 
experiment regions rank removed list candidates computing code size reductions 
column labelled high level shows savings achieved high level regions high level saved shows ratio high level savings regular savings 
column saved instruction different averages 
row labelled total total number instructions divided total savings 
row labelled average sum ratios divided number benchmarks 
sixth column high level saved treated way 
procedural abstraction optimization introduces procedure call region rewritten new procedure group regions rewritten 
performance method sensitive cost procedures procedure calls 
additional cost models see savings affected increased cost procedure calls table presents results experiment set table presents results set 
expected savings ratio drops cost procedure calls goes 

compression ratio savings ratio 
table 
results benchmark instructions saved saved instruction high level high level saved ks anagram mpeg enc pegwit total average code compression procedural abstraction register allocation march table 
results benchmark instructions saved saved instruction high level high level saved ks anagram mpeg enc pegwit total average table 
results benchmark instructions saved saved instruction high level high level saved ks anagram mpeg enc pegwit total average code compression procedural abstraction register allocation march related number researchers proposed techniques apply data compression executable code 
decompression occurs loading instruction cache misses requires specialized hardware :10.1.1.147.3931
approaches give better compression ratios produce directly executable code advantage offset extra cost inconvenience machinery required perform decompression fact executable code ends random access memory ram approach programs compiled byte code interpreted runtime 
compression ratios impressive massive penalty decreased execution speed 
space savings somewhat diminished fact interpreter held memory 
brian marks published report procedural abstraction reduce executable code size 
fraser myers wendt improved technique 
applied string matching techniques assembler code order identify repeated sequences identical code replaced calls new subroutines 
fraser recognized rewriting sequences return instructions expensive call instructions replaced simple unconditional cross jumps 
early procedural abstraction techniques quite successful judging published results 
brian marks studied procedural abstraction source code level potential savings small worthwhile 
early techniques require code sequences identical order merge performance sensitive number identical code fragments introduced compiler 
experiments methods gains leading believe modern compilers produce code adapted procedural abstraction identical code fragments 
cooper mcintosh proposed sophisticated procedural abstraction technique 
building string matching technique fraser registers represented relative offsets previous uses definitions register allows similar code sequences differ register assignment identified 
identification phase register renaming phase inserted attempts rewrite similar fragments identical form 
possible rename registers way cases renaming process aborted 
hard prove suspect problem worse register allocation algorithms better utilizing existing set registers 
technique debray evans muth rely purely linear code sequences 
control flow graphs program regenerated executable code graph matching technique find repeated occurrences similar graph regions 
cooper mcintosh debray allow regions differ register assignment renaming phase try similar regions identical 

typical embedded systems read memory rom expensive ram preferable executable code rom 
code compression procedural abstraction register allocation march approach similar debray uses control flow graph representation program allows similar regions differ register assignment 
differs previous approaches procedural abstraction optimization applied register allocation removes need register renaming phase register assignment handled register allocator 
means succeed replacing group matching regions calls new procedure take full advantage powerful register allocation techniques 
potential drawbacks method 
register pressure increased return address stored execution new procedure 
lead register spilling register pressure high 
secondly difficult compute accurate estimates actual savings produced matching group determine rewritten register allocation code selection peephole optimization produce varying amounts code intermediate code instructions 
user assistance may required tune estimates 
shown experimental results performance procedural abstraction optimization sensitive cost procedure calls 
calling convention passes arguments results registers register allocation technique reduces number register register copy instruction coalescing expect overhead procedure calls kept low 

note new procedures called external sources means safely non standard calling convention 
code compression procedural abstraction register allocation march extensions investigate savings ratio reached intermediate code level sustained generating executable code 
detailed measurements properties matching regions useful direct research areas yield best improvements 
current algorithm regions differ register assignment matched abstracted 
possible relax requirement matching regions identical treating constant instruction operands temporaries passing values arguments new procedures 
extension allow non deterministic semantically equivalent reordering instructions instruction operands matching phase 
alternative program representations investigated model instruction dependencies better control flow graphs 
applying tail call optimization chapter procedural abstraction phase reduce cost procedure calls introduced achieving effect similar cross jumps previous approaches 
cooper mcintosh profiling information reduce impact method execution speed avoiding rewrite time critical regions generally investigate ways control trade code size execution speed program optimizing compiler procedural abstraction 
code compression procedural abstraction register allocation march applied procedural abstraction intermediate code level optimizing compiler working graph program representation 
preliminary results show reductions intermediate code size averaging 
optimization technique maintain level compression generated executable certainly considered inclusion compiler embedded systems 
shown cooper mcintosh debray interprocedural code compression eliminate savings traditional size optimizations dead code elimination common subexpression elimination constant folding 
compiler introduce opportunities procedural abstraction register allocation code selection believe having additional code compression phase operating machine code assembler level improve results 
code compression procedural abstraction register allocation march alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley 
keith cooper nathaniel mcintosh 
enhanced code compression embedded risc processors 
proc 
conf 
programming languages design implementation may 
saumya debray william evans robert muth 
compiler techniques code compression 
workshop compiler support system software may 
jens ernst christopher fraser william evans steven lucco todd proebsting :10.1.1.147.3931
code compression 
proc 
conf 
programming languages design implementation pages june 
fraser myers wendt 
analyzing compressing assembly code 
proc 
acm sigplan symposium compiler construction volume pages june 
lal george andrew appel 
iterated register coalescing 
acm transactions programming languages systems may 
richard johnson david pearson keshav pingali 
program structure tree computing control regions linear time 
proc 
conf 
programming languages systems may 
charles eva trevor mudge 
reducing code size run time decompression 
proc 
international symposium high performance computer architecture january 
brian marks 
compilation compact code 
ibm journal research development november 
steven muchnick 
advanced compiler design implementation 
morgan kaufmann publishers 
wolfe 
executing compressed programs embedded risc architecture 
proc int symp 
microarchitecture 

compacting object code parameterized procedural abstraction 
master thesis university victoria 
excellent source information procedural abstraction code compression techniques code compaction bibliography maintained rik van de www win tue nl cs pa html 
