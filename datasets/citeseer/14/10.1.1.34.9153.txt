deduction refinement planning werner stephan susanne german research center artificial intelligence dfki saarbrucken germany dfki uni sb de introduce method deduction refinement planning prefabricated general solutions adapted special problems 
refinement proceeds stepwise transforming nonconstructive problem specifications executable plans 
refinement step correctness proof guaranteeing soundness refinement generation provably correct plans 
solving hard deduction problems level planning concrete level efficient 
approach aims making deductive planning feasible realistic contexts 
approach temporal logic framework allows representation specifications plans linguistic level 
basic actions plans specified programming language constructs formulae logic 
solutions represented possibly recursive procedures 
common level representation fluid transition specifications plans refinement process basically relies 
technique refinement planning 
idea refine initial non constructive specification step step executable plan reached 
refinement step sound proviso certain proof obligations provably correct plans 
method developed temporal logic framework similar manna pnueli kohler stephan 
specifications plans represented linguistic level specify sequences states called computations 
consequence limited input output behavior plans formulating specifications 
may state proceedings aips edited pp 
aaai press 
properties certain intermediate states particular called safety conditions hold intermediate states 
refinement process takes non constructive initial specification generates executable plan set computations included set computations described initial specification 
aim deductive planning feasible realistic contexts 
follow paradigm hierarchical planning 
hard deduction problems proving total correctness recursive plans solved upper level providing collection prefabricated general plans 
plan generation level interactive process non trivial inferences shared authors manna waldinger steel carried fully automatic way 
algorithmic solutions efficient way refined specific concrete ones 
room planning scenario consider example concrete planning scenario suppose problem moving blocks 
starting scratch planning process gets lost mass subproblems find right door considerable help planner know solution organized phases phase block moved 
approach additional knowledge plan certain open steps filled concrete plans refinement 
way formalize additional knowledge reduces necessary proofs local intermediate steps 
search appropriate steps lower level done matching concrete actions elementary state transitions solution 
abstraction means consider world details restrict certain features planning scenario sufficient outline solution 
general solutions require manipulation indefinite number objects plans level cases recursive 
approach recursive plans corresponding correctness proofs part domain modeling level 
important point provide uniform algorithmic solution level final plan sensitive additional ad hoc constraints uniform treatment 
organized follows 
section introduce basic representation formalism temporal planning logic tpl 
sections shown planning scenarios planning problems solutions formulated framework 
means detailed example demonstrate section refinement planning works context relate existing approaches conclude remarks section 
temporal planning logic tpl interval modal temporal logic called tpl temporal planning logic formally reason plans 
syntax planning scenario called language finite set sort symbols disjoint theta indexed families disjoint sets function symbols disjoint indexed families disjoint sets relation symbols indexed family disjoint denumerable sets global variables ffl ffl fg indexed family disjoint denumerable sets abstraction symbols procedure names fg abstraction symbols describe basic actions 
rigid flexible symbols respectively 
flexible symbols interpreted state dependent way 
simplified version considered flexible function symbols 
rigid terms containing symbols built usual 
set formulae abstractions rules ffi fl delete add fl ffi denote modal weak operators respectively 
denotes chop operator serves express sequential composition formulae 
relation symbols context delete add flexible 
operator define usual modalities ways true 
addition strong operator defined fi ffi 
seen semantics strong operator demands state exist formula ffi additionally holds state interval state 
semantics recursively defined abstraction equation satisfied provided syntactically continuous circumstances maximal solution corresponding equation 
model language indexed family nonempty domains global interpretation assigns total functions relations rigid symbols 
valuation variables sort preserving mapping fi jxj jdj fi valuation fi satisfies fi fi fi fi agree arguments possibly fi set states sigma set interpretations flexible relation symbols relations rigid terms evaluated fi usual 
case choppy logics general semantics intervals states rosner pnueli 
sigma denote set finite infinite sequences oe 
oe oe states sigma sigma sigma gamma 
sigma denote set sequences length concatenation intervals denoted delta 
fusion denoted ffi partial operation intervals defined oe ffi oe oe oe infinite oe oe oe 
oe oe oe 
oe concatenation fusion extended sets intervals usual way 
valuation fi semantics formulae fi sigma atomic formulae oe containing rigid symbols oe fi sigma fg 
interpretation propositional connectives straightforward 
interesting cases follows 
fi ff oe delta sigma oe fi flexible fi fi ffi fi sigma sigma delta fi fi fa sigma delta fi sigma delta fi ig fi fi ffi fi fl fi fl fi fi add fi 
oe oe oe oe oe oe fi delete fi 
oe oe oe oe oe oe gamma fi abstractions fi fi fi sigma fi fl fl fl fl note quantification global variables order formulae evaluated state interval 
general formulae interpreted sets intervals 
oe fi means fi oe satisfies holds oe 
order formula oe holds interval iff oe true interpretation flexible symbols state oe 
ffi holds oe iff oe state interval holds interval results oe removing state 
ffi false denotes set state intervals 
holds oe iff exists suffix oe oe satisfies holds suffixes inbetween oe oe operator express partial correctness assertions 
formula ffi false oe holds oe iff oe infinite order formula oe true state oe 
chop operator 
basically allows split interval subintervals 
example ffi false oe holds oe iff oe infinite satisfies oe split oe oe oe satisfies order formula oe holds state oe state oe oe satisfies 
logic describe computations certain formulae plans viewed programming language constructs 
basic elements programming language elementary add delete operations add delete flexible relation symbol basic actions described procedural abstractions 
order ease readability abbreviations oe fi oe oe choose oe oe oe skip skip ffi false class formulae denoted abbreviations called plan formulae 
please note choose construct essentially describes existential quantification 
addition holds 
add 
fi ffi false oe ffi oe delete 
fi ffi false oe ffi oe oe formula resulting order formula oe replacing occurrence atomic subformula oe results oe replacing respectively 
oe oe weakest preconditions sense dijkstra oe respect add delete respectively 
equivalences state order formula oe holds execution elementary add delete operation oe oe holds 
planning scenarios planning problems planning scenarios set giving set sort symbols signature flexible rigid relation symbols 
example cf 
door holds connects respectively 
second step basic actions defined procedures pickup rob holds add holds skip fi putdown rob holds delete holds skip fi walk rob connects closed holds choose holds small broad delete delete rob add rob add skip fi delete rob add rob fi skip fi procedures certain sets formulae generated 
comprise action descriptions effect descriptions invariance clauses serve perform various specific tasks occur refinement planning 
please note applying action inappropriate arguments leads trivial action skip impossible action false 
reason impossible action may lead inconsistencies formulae satisfying interval 
consequence formulae stating certain properties actions plans partial correctness assertions may trivially true 
action descriptions specify cases action really acts body differs skip 
walk obtain formulae rob connects closed holds small broad write walk complete recursive definition walk 
walk delete delete rob add rob add rob connects closed holds 
walk delete rob add rob action descriptions instantiate solution patterns concrete solutions 
effect descriptions indicate immediate effects action 
closely correspond action descriptions 
walk obtain eff eff respectively 
eff example reads eff rob connects closed holds ffi false 
rob rob pickup example obtain axiom eff rob holds pickup ffi false holds invariance clauses specify facts affected action 
comprise invariance assertions inv oe stand formulae oe ffi oe ffi oe order 
pickup inv pickup inv true inv closed true inv rob true stating pickup doesn change relations closed rob 
formulae generated uniform way purely syntactic inspection user defined procedures easily proved example equivalences control structures section 
note specified effects basic actions terms partial correctness assertions saying action terminates effect holds 
note operators effect invariance formulae refer just intervals satisfying respective action affect entire interval satisfying plan occur 
give example 
suppose want prove formula oe rob holds holds execution plan pickup putdown 
expressed oe pickup putdown ffi false oe oe pickup putdown oe order hold state interval 
obtain oe pickup putdown pickup terminates oe pickup ffi false 
eff inv follows addition effect pickup part oe invariant pickup hold state interval satisfying oe pickup 
pickup putdown combined state pickup interval coincides state putdown interval 
obtain pickup rob holds holds putdown reasoning putdown similar way succeed proving original assertion deriving ffi false oe possible format initial specifications fin ef safe inv conjuncts describe properties computation meet order accepted possible solution 
fin ffi false ef oe pre ffi false oe post safe oe pre oe safe oe inv inv oe inv oe formula fin states computations finite 
effect computation ef described pre postconditions order formulae 
addition desired effect initial specification may contain safety conditions hold intermediate states 
conditions order 
inv serves specify facts remain unchanged 
starting refinement planning concrete problem specification state domain facts relevant current scenario 
domain facts describe facts affected actions remain static current scenario may vary concrete scenario 
facts described rigid part signature 
example cf 
obtain df connects connects connects connects connects connects connects connects small small small small broad broad broad broad solutions going describe strategy recursive patterns refined plans basic actions lower concrete level 
example level consists scenario blocks rooms related 
problem moving arbitrary set blocks room solved recursive plan move choose move move gamma fbg skip fi move delete add skip fi moves block data type sets 
signature data type contains rigid symbols gamma 
idea refine plan lower level addition doors different size robot move operation longer available 
sense operation implemented sequences operations lower level 
order enable refinement allow certain additional steps level extending set possible computations 
adopt method known stuttering lamport ery 
allows insertion additional steps affect facts interested level able prove useful facts solution 
stuttering versions operations exhibit essentially behavior leave room refinements 
stuttering introduced replacing basic delete operations body plans move case appropriate stuttering versions 
delete body move example replaced delete formula ffi false inv allows inserting certain steps essential add delete operations 
forces steps safe sense affect relation blocks different just manipulated current rooms specification plans formulae subject process domain modeling sketched section actions planning scenarios 
replacing add example stuttering versions cases obtain plan move 
able prove assertions move fin move inv move ffi false describing termination stuttering version move invariance properties effects respectively 
initial specification refinement planning start plans form proceed stepwise filling gaps concrete plans 
refinement planning environment refinement planning consists transforming initial specification intermediate steps concrete plan 
step correctness proof guaranteeing soundness refinement provably correct plans 
refinement process try construct plan set computations subset done transforming gradually sequence intermediate specifications note correspond current arguments move call 
plan formula step restrict set computations going describe particular refinement strategy adapts general solution special problem 
proceeds phases ffl phase find solution level 
ffl phase unwind recursive plans 
ffl phase fill missing steps 
initial problem specification form section oe pre closed closed closed closed rob holds oe post inv inv oe safe closed closed initial situation oe pre depicted 
robot carry blocks room 
process allowed change position block 
additional safety condition door open situation 
top level planning done assertions operations 
example phase comes plan move introduced section simply instantiate general recursive solution 
application substitutions fa cg certain proof obligations arise 
guarantee concrete specification met respect level particular instance solution solves planning problem modulo concrete actions insert ones 
proof obligations state preconditions oe pre planning problem imply preconditions move move applicable current initial state oe pre fa cg postconditions move meet current goals oe post fa cg oe post proposed solution doesn violate invariance conditions required invariance clauses move satisfy inv inv fa cg inv example formulae proved ready carry refinement step oe pre oe pre oe safe move fa cg 
please note safety conditions guaranteed level appear refined specification 
second phase perform symbolic execution call move 
move assertions cf 
section know way unwinding recursive procedure desired result 
unwinding done single step 
choice order movements better idea unwind stepwise way 
cases order relevant planning process lower level backtracking intermediate situation possible way 
strategy get oe pre oe pre oe safe delete add move fb cg intermediate specification 
situation phase actual planning process lower level may start 
note cases uniform way filling missing steps 
example moved door impossible possible strategy look action deletes 
applying substitution identify walk appropriate action matching elementary operations intermediate specification delete delete rob add rob add delete add delete rob add rob doesn affect relation implies allowed replace second occurrence delete rob add rob apply refinement obtaining oe pre oe pre oe safe rob connects closed holds small broad walk move fb cg new specification 
turn refinement process third occurrence formula replaced skip omit order ease readability 
planning proces continues analyzing preconditions walk 
rigid part considered 
turns connects small broad proved domain facts need backtrack point 
second step flexible part preconditions matched oe pre oe pre satisfies closed rob match holds suggested search action holds effect leaves relations closed rob untouched 
inspecting effect descriptions leads pickup carry refinement step 
substitutions preconditions pickup coincide oe pre obtain new specification oe pre oe pre oe safe pickup rob connects closed holds small broad walk move fb cg step justified able prove rob holds pickup inv order generate part refined plan verify pickup meets safety conditions problem specification compute facts hold application pickup 
facts comprise effects pickup parts oe pre invariant pickup 
prove formulae oe pre pickup oe safe oe pre pickup fin ffi false oe stating pickup terminates oe holds oe rob holds closed closed closed closed 
refinement step obtain oe pre pickup oe oe safe walk move fb cg proceeding walk way leads specification oe pre pickup walk oe oe safe move fb cg oe rob holds closed closed closed closed 
specification refinement planning proceeds unwinding move 
related hierarchical problem solving refinement solutions important methods reducing costs planning 
provide significant restriction search space help generate plans goal directed way tenenberg 
approaches creation abstraction levels hierarchical planning developed 
bacchus yang knoblock kramer unger lansky getoor sacerdoti tate wilkins 
comprise different principles 
concerned abstracting state space 
hierarchy abstraction levels obtained stepwise ignoring certain details planning domain sacerdoti 
approaches abstractions automatically generated bacchus yang knoblock lansky getoor 
second abstraction method combines basic actions comprehensive ones sacerdoti tate wilkins obtaining kind macro operation 
hierarchical planning proceeds expanding macros 
approach definition solutions subject process domain modeling 
reason environment plans recursive 
introduced method stepwise refining recursive solutions 
allows particular generation completely different concrete solutions expansion recursive call depending specific properties current objects involved 
representation formalism planning approach relies relation adl framework pednault pednault 
adl temporal planning logic uses elementary add delete operations describe basic actions follows strips idea add delete lists relations fikes nilsson 
adl provides fixed form action description schemata immediately correspond situation calculus axioms 
environment add basic elements programming language specify actions plans 
programming language provides conditionals nondeterminism recursion 
completely embedded logic programming language constructs temporal logic formulae 
means particular planning problems specifications plans actions flexibly treated linguistic level 
feature distinguishes representation formalisms adl dynamic logic harel rosenschein situation calculus mccarthy hayes fluent theory manna waldinger motivated planning logic 
introduced approach hierarchical planning recursive plans stepwise refined concrete solutions 
refinement step includes formal correctness proof guaranteeing soundness entire procedure correctness final solution 
planning logic provides flexible means reason specifications plans offers perspective treating nonterminating concurrent systems 
procedure refinement planning currently implemented part deductive planning system bauer generates plans purely declarative specifications representation formalism similar 
indebted anonymous referees carefully read comments led clear improvement presentation 
partly supported federal ministry education science research technology 
bacchus yang 
downward refinement efficiency hierarchical problem solving 
artificial intelligence 
bauer kohler paul 
phi logic tool intelligent help systems 
proceedings th international joint conference artificial intelligence ijcai 
morgan kaufmann 
kohler 
deductive planning plan reuse command language environment 
proceedings th european conference artificial intelligence ecai 
wiley 
dijkstra 
discipline programming 
prentice hall 
fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
steel 
recursive plans 
hertzberg ed proceedings european workshop planning 
lnai springer 
harel 
order dynamic logic 
new york lncs springer 
knoblock 
automatically generating abstractions planning 
artificial intelligence 
kramer unger 
generalizing operator abstraction 
backstrom sandewall eds current trends ai planning 
ios press 
lamport 
temporal logic actions 
acm transactions programming languages systems 
lansky getoor 
scope abstraction criteria localized planning 
proceedings th international joint conference artificial intelligence ijcai 
morgan kaufmann 
manna pnueli 
temporal logic reactive concurrent systems 
springer 
manna waldinger 
clear block plan formation situational logic 
journal automated reasoning 
mccarthy hayes 
philosophical problems standpoint artificial intelligence 
machine intelligence 

ery 
stuttering closed temporal logic modular reasoning concurrent programs 
proceedings st international conference temporal logic ictl 
springer 
pednault 
adl exploring middle ground strips situation calculus 
proceedings st international conference principles knowledge representation reasoning kr 
morgan kaufmann 
rosenschein 
plan synthesis logic perspective 
proceedings th international joint conference artificial intelligence ijcai morgan kaufmann 
rosner pnueli 
choppy logic 
symposium logic computer science 
ieee computer society press 
sacerdoti 
planning hierarchy spaces 
artificial intelligence 
sacerdoti 
structure plans behavior 
north holland 
stephan 
new logical framework deductive planning 
proceedings th international joint conference artificial intelligence ijcai 
morgan kaufmann 
tate 
generating project networks 
proceedings th international joint conference artificial intelligence ijcai 
morgan kaufmann 
tenenberg 
abstraction planning 
allen kautz tenenberg eds reasoning plans 
morgan kaufmann 

wilkins 
practical planning 
morgan kaufmann 
