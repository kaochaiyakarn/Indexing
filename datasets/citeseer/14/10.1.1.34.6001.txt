rewriting poor design patterns design patterns position jens jahnke albert university paderborn germany jahnke uni paderborn de ghjv proposed number design patterns offer solutions recurring design situations 
solutions discuss solutions design situations argue solutions replaced sound design pattern 
position exactly describes task oo reengineering find patterns legacy oo program show poor solution recurring problem replace poor solution sound solution offered corresponding design pattern 
replacing poor solution design pattern gains advantages offered design patterns structured documented easy understand sub design flexible extensible easy maintain 
yield solve main problems 
detecting occurences poor implementation design patterns legacy programs 
replacing poor code design implementation design pattern attack problem generic fuzzy reasoning nets cf 
offer general graphical high level language modelling applying reverse engineering knowledge 
language enables define analyse fuzzy knowledge deals incomplete contradicting analysis results able defer expensive analysis operations demand incorporate interactively uncertain user assumptions 
second problem attacked knowledge base design patterns stores structure design patterns high conceptual level description prototypical implementation rules variation adaptation pattern implementation 
addition knowledge base contain rules describing replace poor design patterns corresponding patterns 
consider oo reengineering interactive design task 
plan offer proposed mechanisms semi automatic tool support uml back design environment rose 
environment currently supports editing uml class diagrams limited support design patterns transformations uml class diagrams including standard implementations associations design patterns 
environment supports structure oriented editing code backward propagation design relevant changes uml class diagram 
section introduces singleton situation running example 
section shows identify poor situation example section shows poor situation replaced instance singleton design pattern 
assume reader uml cf 
uml 

representation design patterns mind extend comparable 
submitted esec fse workshop object oriented reengineering friday september singleton example typical simple example poor design implementation may fixed appropriate design pattern number global variable replaced singleton design pattern 
shows code example university administration system containing global variable course program type map provides global access courses title 
expect global variable consists definition variable file scope certain cc file extern declaration corresponding file making available clients 
reverse engineering analyse application code identify basic elements create logical representation abstracts code details variants 
shows logical representation derived code extended uml class diagram notation 
global variable represented explicit object uml notation class instances underlined object declaration rectangle 
identification poor singleton pattern shown dashed oval uml notation design patterns 
cc include xy course program print 
xy top level scope extern map course program 
xy cc top level scope map course program 
global variable example code cc extern map course program 
course program 
cc 
course program 
include xy 
course title string 
student name string 
attends map 
poor singleton situation course program map singleton poor definition ghjv example shows poor situation full direct read write access global variable 
maintenance big system prevents programmer deleting course inserting inconsistent course destroying map just assigning new value 
due full access map operations trivial replace hash table implementation sorted tree support ordered listings 
global variables replaced singleton pattern cf 

global variable changed private data member new class course program 
private data member closely corresponds qualified association shown grey green color 
private access constructor prevents clients creating instances 
provided static public instance method creates sole instance demand provides easy access sole instance course program instance reengineering 
methods directly global variable class course program provides encapsulating methods call corresponding method private data member 
enables extension consistency checks 
addition shows cutout methods class map course program application 
encapsulation cutout facilitates switch implementations 
making methods visible helps identify potential accidental writes 
replacing global variable singleton pattern includes replacing applied occurences direct method invocations invocations appropriate methods new singleton class 
obsolete extern declarations includes removed include statements file new singleton class inserted 
altogether enhances design implementation legacy system utilizing advantages introduced design pattern hopefully affecting applications execution semantics 

static class members indicated underlining 
string string course program course title string 
attends sound singleton pattern instance singleton course program instance course program course program map course program instance course program operator string string course print class access op student name string 
storage instance null instance new map read courses instance return instance return course program course program print detection poor patterns general problem detecting poor design patterns legacy oo program seldom appear pure strict form 
fairly simple example global variable consist definition variable file scope certain cc file extern declaration corresponding file making available clients cf 

slight variation client unit contains extern declaration including corresponding file 
case static class member variable public access rights 
may exist inconsistent situations public global variable locally 
shows cutout generic fuzzy reasoning net modelling simple rules identification poor singleton pattern 
consists states grey green ovals representing certain pieces knowledge fuzzy implications grey green rectangles representing knowledge inference rules 
example implication represents fuzzy rule item declared class public access globally visible 
certainty 
negation indicated solid arrowheads rule says file scope item declared static global item 
rule concludes item globally visible represents variable 
storage class static 
represents global variable certainty 
facts rule identifies instance poor singleton pattern 
due experiences analysing relational databases reverse engineering deal inconsistent incomplete knowledge certain resource demanding analysis operations 
consider reverse engineering interactive task plan semi automatic tool support deal uncertain user assumptions 
allow deal problems fuzzy inference mechanisms demand driven analysis 
due space show full power mechanism may look 
give impression identification poor singleton start inference user assumption variable course program represents poor singleton 
validate assumption inference mechanism tries instantiate implications prerequisites 
fuzzy place global variable applied occurrence created formal parameter bound course program 
analysis checks course program variable binds parameter map course public access rights storage class static 

inference mechanism searches applied occurences course program 
generates fuzzy place occurrence formal parameters bound appropriate time 
static 
reverse engineering knowledgebase poor singleton patterns 
class 
poor singleton file scope public facts proved fuzzy belief poor singleton assumption evaluate rejecting interactive hint 
basic facts course program represents variable derived source code analysis tools get fuzzy belief 
fuzzy implication combines fuzzy beliefs input places certainty fuzzy minimum function 
fuzzy belief derived facts course program map course computed fuzzy maximum fuzzy beliefs computed implications 
shows handle uncertain inconsistent facts expensive source code analysis triggered demand 
summarize combination basic facts derived source code logical items conceptual level 
logical items serve input pattern rewriting process 
pattern rewriting detecting poor design situations plan tool support replacement poor patterns corresponding patterns 
need extensible pattern knowledge base describes available patterns corresponding poor patterns poor patterns various parts replaced parts patterns 
set knowledge base high level graphical specification language provides formal intuitive pattern description 
idea specify poor pattern corresponding replacements extended uml class diagram notation 
shows pattern rewrite rules singleton example look 
lhs left hand side rule refers elements 
contains global variable formal parameters variable name variable type bound analysis phase 
addition global variable classified poor singleton sufficient certainty 
applying rule occurence lhs replaced copy rhs right hand side 
global variable deleted new singleton class name inserted 
new class contains variable private data member addition contains static data members holding sole instance new singleton class providing access sole instance 
rule subrule rule 
indicates application rule triggers application rule possible 
lhs rule refers elements rule shown grey green color new elements 
rule looks methods invocations 
corresponding method incorporated singleton class crossed element says existing 
occurence method rule creates corresponding member function 
addition rule creates default implementation forwards method call private data member 
rule subrule rule 
indicates application rule triggers application rule possible 
rule replaces direct invocations certain method calls corresponding new singleton member function singleton object retrieved instance 

see handling negations 

indicates name private data member computed concatenation name bound note rewrite rules defined terms high level logical concepts 
introducing new class results creation corresponding cc file containing class usual ifndef 
define 
endif directives ensuring single inclusion standard constructor destructor declarations default implementations default elements class implementation header comment template 
creating singleton access operation declares function public static member function file provides default implementation cc file 
removing method invocation automatically removes longer external declarations include directives 
adding logical concept instance adds necessary include directives 
summarize logical element pattern rewrite rules represents complex analysis deletion insertion design level concept may cause complex text analysis change operations files underlying implementation code 
general multiple ways fix certain design problem 
approach reflected multiple rule sets rule variants apply poor pattern 
different rule sets represent alternative choices patterns alternative implementations pattern 
environment able identify applicable rewrite rules execute rules choosen reengineer 
rewrite rules singleton pattern instance instance singleton class access op storage singleton poor definition rule 
rule 


return 

rule 

instance 
proposes semi automatic tool support reengineering oo legacy systems rewriting poor design patterns design patterns 
code analysis reverse engineering phase supported generic fuzzy reasoning nets offering general means dealing uncertain inconsistent incomplete reengineering knowledge 
forward engineering task supported knowledge base design pattern rewrite rules specify design level poor code replaced designed implementation 
reverse forward engineering tasks attacked high level graphical specification languages 
authors strong background definition implementation graphical specification languages 
jens jahnke developing implementing general means complex program analysis reverse engineering tasks major part phd thesis 
albert partly developed fully implemented general purpose pattern rewrite language called progres phd thesis 
experiences going realize design pattern rewriting approach part postdoctoral qualification 
am aksit matsuoka eds ecoop object oriented programming proc 
th european conf 
june lncs springer tool support object oriented pattern am pp 
ghjv gamma helm johnson vlissides design patterns elements reusable object oriented software addison wesley isbn 
jahnke generic fuzzy reasoning nets basis reverse engineering relational database applications appear proc 
esec appear rose rose integrated design environment uml master thesis university paderborn german operational specification programmed phd thesis german rwth aachen deutscher verlag vieweg isbn stroustrup programming language addison wesley new york uml uml notation guide technical report version rational software santa clara www rational 
com development environment programmed specification implementation application phd thesis german rwth aachen deutscher verlag vieweg isbn 
