pseudorandom generator way function johan hastad russell impagliazzo leonid levin michael luby pseudorandom generators fundamental theoretical applied aspects computing 
show construct pseudorandom generator oneway function 
easy construct way function pseudorandom generator result shows pseudorandom generator iff way function 
warning essentially published siam journal computing subject copyright restrictions 
personal 
basic primitives study interaction randomness feasible computation pseudorandom generator 
intuitively pseudorandom generator department numerical analysis computing science royal institute technology stockholm sweden email nada kth se 
research supported swedish national board technical development 
department computer science university california san diego 
research partially done berkeley email russell cs ucsd edu 
research supported nsf ccr computer science department boston university st boston ma email cs bu edu 
research supported nsf ccr 
international computer science institute berkeley california computer science division university california berkeley email luby icsi berkeley edu 
research partially done leave absence university toronto 
research supported nserc operating national science foundation operating ccr national science foundation operating ccr united states israel binational science foundation united states israel binational science foundation esprit br ec 
polynomial time computable function stretches short random string long string looks random feasible algorithm called adversary 
adversary tries distinguish string random string length 
strings look adversary acceptance probability strings essentially 
pseudorandom generator efficiently convert small amount true randomness larger number effectively random bits 
notion randomness tests string evolved time set theoretic tests enumerable kol recursive limited time tests 
motivated cryptographic applications seminal bm introduces idea generator produces output polynomial time output passes general polynomial time test 
fundamental yao introduced definition pseudorandom generator commonly today proves definition original bm equivalent 
robust notion pseudorandom generator due bm yao contrasted classical methods generating random looking bits described knuth 
studies classical methods output generator considered passes particular set standard statistical tests 
linear congruential generator example classical method generating random looking bits pass variety standard statistical tests 
show polynomial time statistical test output generator pass 
distinction weaker requirement output pass particular statistical tests stronger requirement pass feasible tests particularly important context applications 
pointed bm cryptographic applications adversary assumed malicious possible restriction tests computation time 
pseudorandom generator directly design private key cryptosystem secure adversaries 
context monte carlo simulation applications typical algorithm uses long random strings typical analysis shows algorithm produces correct answer high probability string uses chosen uniformly 
practice long random string chosen uniformly require random bits typically reasonable produce store 
short random string stretched long string simple generator linear congruential generator long string simulation algorithm 
general hard directly analyze simulation algorithm prove produces correct answer high probability string uses produced method 
pseudorandom generator provides generic solution problem 
example yao shows pseudorandom generators reduce number random bits needed probabilistic polynomial time algorithm shows perform deterministic simulation polynomial time probabilistic algorithm subexponential time pseudorandom generator 
results deterministic simulation subsequently generalized bh 
conditions stringent easy come natural candidate pseudorandom generator 
hand variety natural examples basic primitive way function 
informally way easy compute hard average invert 
np oneway functions known np implies way functions 
examples functions way practice conjectured way 
examples conjectured way functions discrete logarithm problem modulo large randomly chosen prime see dh factoring number product large randomly chosen primes see rsa problems coding theory see gkl subset sum problem appropriately chosen parameters see 
bm construct pseudorandom generator way function 
introduce elegant construction shows construct pseudorandom generator presumed difficulty discrete logarithm problem 
yao substantially generalizes result showing construct pseudorandom generator way permutation 
arguments needed proof missing yao completed levin 
levin conjectured simpler construction case oneway permutations eventually shown gl 
important works contributed expansion conditions way functions pseudorandom generator constructed 
gmt yao show construct pseudorandom generator difficulty factoring substantially simplified 
way permutation task inverting find case permutation natural extension successful inversion finding 
levin introduces way functions remain way iterations shows necessary sufficient construction pseudorandom generator 
gkl shows construct pseudorandom generator way function property value range function roughly number preimages 
expanded list conjectured way functions pseudorandom generators constructed variety non number theoretic functions including coding theory problems 
general question construct pseudorandom generator oneway function structural properties left open 
resolves question 
give successively intricate constructions starting constructions way functions lot structure finishing constructions way functions required structural properties 
current combination results announced conference papers ill 
concepts tools previous methods bm rely constructing function output bit computationally unpredictable bits output statistically correlated bits 
gl provide simple natural input bit hidden padded version way function 
result radically simplifies previous constructions pseudorandom generator oneway permutations addition previous constructions substantially efficient 
result fundamental way 
approach different spirit previous constructions pseudorandom generators way functions special structure 
previous methods rely iterating way function times iteration extract computationally unpredictable bit 
approach sure iterations function way 
contrast explained detail approach concentrates extracting smoothing entropy parallel independent copies way function 
construction combines parallel approach standard method iteratively stretching output pseudorandom generator 
notion computational indistinguishability provides main conceptual tools 
gm yao say probability distributions computationally indistinguishable feasible adversary distinguish terms pseudorandom generator intuitively polynomial time computable function maps string length longer strings length random variable uniformly distributed strings length random variable uniformly distributed strings length pseudorandom generator computationally indistinguishable 
shannon entropy distribution measure information content 
fundamental law information theory application function increase entropy 
example bits entropy bits entropy see proposition 
focuses computational analog shannon entropy computational entropy 
say computational entropy shannon entropy computationally indistinguishable 
pseudorandom generator computational entropy greater shannon entropy input sense amplifies entropy 
introduce generalizations pseudorandom generator computational entropy 
say pseudoentropy generator computational entropy significantly shannon entropy say false entropy generator computational entropy significantly shannon entropy 
show construct false entropy generator way function pseudoentropy generator false entropy generator pseudorandom generator pseudoentropy generator 
presentation results reverse order 
hash functions analysis fundamental way constructions 
approach roots gkl 
gl turns easily computable bit hidden parity random subset input bits inner product input random string 
random inner product viewed hash function bits bit 
due importance basic algorithms primality testing randomness interesting computational resource right 
various studies extracting random bits biased slightly random sources possess certain amount entropy sources model imperfect physical sources randomness geiger counter noise diodes utilized real life 
see blum sv vv cg 
main technical lemmas lemma viewed hashing lemma manipulate entropy various ways viewed method extracting close uniform random bits slightly random source random bits catalyst 
outline outline follows section give notation especially related probability distributions ensembles 
section define basic primitives general notion reduction primitives 
spend little time conventional papers cryptography want discuss effects reductions security quantitative terms 
section introduces basic mechanisms finding hidden bits manipulating en tropy hash functions 
main result section reduction false entropy generator pseudorandom generator pseudoentropy generator 
section construction pseudorandom generator way function pre image sizes estimated 
way functions common important special case main reason including develop intuition general way functions 
section presents technically challenging construction false entropy generator way function 
combined section yields main result construction pseudorandom generator way function 
section somewhat direct efficient construction pseudorandom generator way function 
uses ideas sections avoids redundancy involved combining generic reductions 
section concludes placing results context modern cryptographic complexity 
basic notation set natural numbers 
set number elements sets set consisting elements number jaj absolute value dae smallest integer greater equal log logarithm base bit strings 
hx yi denote sequence followed appropriate view concatenation th bit fi jg hx phi hx phi phi theta bit matrix indicated thetan write refer entry view sequence hx xm strings length case th row matrix view bit string length mn concatenation rows matrix 
fi operation indicates matrix multiplication gf 
appears left fi considered row vector appears right fi considered column vector 
fi delta mod 
generally thetam thetan fi theta bit matrix entry fi th row th column probability notation general capital greek letters denote random variables random events 
stated random variables independent random variables 
distribution finite set assigns probability 
say random variable distributed pr indicate write indicate supported strings length convenience blur distinction random variable distribution 
random variables necessarily independent jx denotes random variable takes value conditional probability pr jx pr pr 
function mapping set random variable defines distribution 
indicate distribution indicate uniformly distributed pr indicate uniform distribution distributed want indicate random sample chosen distribution notation random variables lower case letters indicates fixed element chosen distribution real valued random variable denotes expected value probabilistic event pr denotes probability event occurs 
definition statistical distance distributions set statistical distance jpr gamma pr proposition function domain pair distributions 
entropy definition entropy shan 
definition information entropy distribution set define information respect gamma log shannon entropy distributions necessarily independent conditional entropy respect jd jx 
refer entropy random variable equal 
refer conditional entropy jx conditioned equal jd 
variant definition entropy due renyi 
definition renyi entropy distribution set renyi entropy gamma log pr independent 
distributions arbitrarily large entropy couple bits renyi entropy 
proposition distribution proposition implicitly 
proposition shows function increase entropy statistical sense 
proposition function distribution domain 
definition characterizes entropy lost application function uniform distribution 
definition degeneracy degeneracy gamma ensembles definitions results asymptotic form 
ensembles asymptotic definitions define primitives way functions pseudorandom generators define adversaries try break primitives 
cases index ensemble implicitly definition result holds values definitions ensembles input output lengths polynomially related 
specify 
definition polynomial parameter say parameter polynomial parameter constant cn cn say time polynomial parameter addition constant computable time uses polynomial parameter integer valued case real valued 
definition function ensemble denote function ensemble integer valued time polynomial parameters respect function mapping injective function ensemble 
injective permutation ensemble 
theta mn denote function ensemble inputs 
case consider function second input fixed value input case write place 
definition time function ensemble say thetaf mn time function ensemble function ensemble computable time say time function ensemble constant cn say mildly nonuniform time function ensemble time function ensemble additional input called advice integer valued polynomial parameter necessarily time computable 
definitions generalize natural way functions inputs 
describe functions variable length inputs outputs cases implicitly assume string padded special blank symbol appropriate length 
intermediate reductions certain statistical quantities order construct new primitive 
example approximation entropy distribution construction pseudoentropy generator 
cases quantities easy approximate number different approximation values take small 
reason definition mildly non uniform time function ensemble definition 
definitions give way functions false entropy generators pseudoentropy generators pseudorandom generators analogous mildly non uniform version 
proposition show remove mild non uniformity final construction pseudorandom generator 
definition range preimages function function ensemble 
respect define range ff range define pre fx yg definition regular function ensemble say function ensemble oe regular pre oe range definition time function ensemble 
range define approximate degeneracy log pre notice approximation additive factor quantity gamma 
furthermore additive factor degeneracy oe regular function range additive factor log oe degeneracy definition probability ensemble denote probability ensemble integer valued time polynomial parameter respect probability distribution definition probability ensemble denote probability ensemble respect distribution generated random string length function ensemble rn rn distribution say probability ensemble rn computable time say time function ensemble mildly non uniformly mildly non uniform time function ensemble 
definition copies functions ensembles integer valued time polynomial parameter 
probability ensemble kn kn probability ensemble respect parameter kn consists concatenation independent copies similarly mn function ensemble kn kn function ensemble kn thetam kn hf kn definitions primitives reductions primitives described include way functions pseudorandom generators 
primitives describe cryptographic applications useful described applications 
definition primitives need describe means primitive secure attack adversary 
introduce adversaries security describe basic primitives 
adversaries security adversary example trying invert way function trying distinguish output pseudorandom generator truly random string 
time success ratio particular adversary measure ability break cryptographic primitive 
primitive place cumbersome misleading phrase cryptographic primitive 
security primitive lower bound time success ratio adversary break primitive 
constructions primitives allow private public inputs 
public input part output primitive known adversary time tries break primitive 
construct primitive constructed primitive public inputs 
glance public inputs useful adversary knows time tries break constructed primitive 
contrary public inputs turn quite useful 
intuitively value randomly chosen adversary priori build breaking strategy strategy possible values 
private input primitive directly accessible adversary 
security parameter primitive length private input 
private input primitive kept secret adversary sense measure success adversary terms 
definition breaking adversary security adversary function ensemble 
time success ratio instance primitive defined sp length private input worst case expected running time instances parameterized sp success probability breaking case say breaking adversary say secure breaking adversary mildly non uniform adversary mildly non uniform time function ensemble advice function ensemble additional input 
success probability time success ratio mildly non uniform adversary uniform adversaries 
definition success probability sp depends primitive question probability defined primitive defined 
intuitively smaller time success ratio adversary primitive better adversary able break primitive uses time larger success probability 
definitions refinement definitions appear literature 
previously adversary considered breaking ran polynomial time inverse polynomial success probability 
advantage definition introduced precise characterization security primitive 
important different applications require different levels security 
applications polynomial security applications better security crucial log better 
way function definition way function time function ensemble success probability adversary inverting sp pr secure way function breaking adversary function considered way reasonable sense case time invert smaller time evaluate forward direction 
example breaking adversary secure 
hand exhaustive adversary tries possible inputs find inverse delta breaking 
range securities hoped fall extremes 
pseudorandom generator definition thought computationally restricted adversary definition statistical distance 
original idea gm yao 
definition computationally indistinguishable probability ensembles 
success probability adversary distinguishing sp pr gamma pr distribution distribution secure computationally indistinguishable breaking adversary distinguishing alternative definition computationally indistinguishable accurately reflects tradeoff running time adversary success probability 
alternative definition success probability defined sp sp takes sp trials order approximate sp constant factor 
definition computationally indistinguishable alternative exactly original definition success probability adversary sp sp cases noted strength reduction definition computationally indistinguishable find easier definition 
places explicitly alternative definition able claim reduction linear preserving 
strictly speaking private inputs definition default security parameter 
typical definition distribution defined output time function ensemble case length private input function ensemble security parameter 
circumstances important case proposition 
yao originally gave definition pseudorandom generator parameterize security precisely 
definition pseudorandom generator time function ensemble secure pseudorandom generator probability ensembles secure computationally indistinguishable 
definition pseudorandom generator requires generator stretch input bit 
proposition provides general way produce pseudorandom generator stretches bits pseudorandom generator stretches bit 
proposition appears bh due goldreich micali 
proposition suppose pseudorandom generator stretches bit 
define inductively hg ng fn ig integer valued time polynomial parameter 
kn pseudorandom generator 
reduction linear preserving 
page give formal definition reduction means linear preserving intuitively means kn pseudorandom generator secure pseudorandom generator pseudoentropy false entropy generators definitions subsection introduce new notions interesting right intermediate steps constructions 
difference pseudorandom generator pseudoentropy generator output pseudoentropy generator doesn computationally indistinguishable uniform distribution computationally indistinguishable probability ensemble entropy input generator 
pseudoentropy generator amplifies randomness output randomness computationally input randomness output randomness longer necessarily uniform 
definition computational entropy time function ensemble polynomial parameter 
secure computational entropy time function ensemble mn mn secure computationally indistinguishable mn definition pseudoentropy generator time function ensemble polynomial parameter 
secure pseudoentropy generator pseudoentropy secure computational entropy pseudorandom generator easy see pseudoentropy generator 
computationally indistinguishable definition pseudorandom generator consequently pseudoentropy generator pseudoentropy 
false entropy generator generalization pseudoentropy generator 
false entropy generator doesn necessarily amplify input randomness just property output randomness computationally statistically 
definition false entropy generator time function ensemble polynomial parameter 
secure false entropy generator false entropy secure computational entropy note definition computational entropy function ensemble computationally indistinguishable required time computable 
consistent definition pseudorandom generator distribution pseudorandom generator indistinguishable uniform distribution 
non uniform version computational entropy necessarily time computable corresponding non uniform versions pseudoentropy generator false entropy generator 
turns easier construct false entropy generator necessarily time computable way function construct false entropy generator time 
approach non uniform version proposition ill describe non uniform reduction way function pseudorandom generator 
uniform reduction proposition requires time computable 
main difficulties constructions build false entropy generator time computable 
hidden bits construction pseudorandom generator way function key ideas construct way function function output bit computationally unpredictable output bits hidden statistically somewhat predictable output bits 
idea original construction pseudorandom generator discrete logarithm problem bm central constructions time 
definition hidden bit time function ensembles 
probability ensemble fi 
secure hidden hf hf fii secure computationally indistinguishable 
reductions results involve reduction type primitive 
definitions quantify strength reductions 
particular parameterization security different quantitative measures security preserving properties reduction derived luby hl 
intuitively reduction constructs primitive inputs length second primitive inputs length reduction specifies oracle tm delta adversary breaking adversary breaking security preserved reduction parameterized definition reduction polynomial parameters theta reduction primitive primitive pair oracle tms delta delta ffl time function ensemble instantiates primitive instantiates primitive 
ffl time function ensemble inputs length calls inputs length ffl suppose adversary time success ratio inputs length define 
adversary time success ratio inputs length discuss security preserving properties reduction compare breaks breaks inputs similar size 
say reduction ffl linear preserving rn delta 
ffl poly preserving rn delta ffl weak preserving rn delta mildly non uniform reduction properties delta delta allowed access integer valued polynomial parameter depends notions security preservation apply mildly non uniform reductions 
broken time exponential omega gamma omega gamma case weak preserving reduction ignore oracle break brute force 
assume loss generality obvious definition reduction propositions say security preserved reductions reductions composed proposition delta delta mildly non uniform reduction primitive primitive mildly non uniform time function ensemble instantiates primitive security mildly non uniform time function instantiates primitive security proposition delta delta mildly non uniform reduction primitive primitive delta delta mildly non uniform reduction primitive primitive delta delta mildly non uniform reduction primitive primitive 
phrase definitions terms asymptotic complexity easily interpret fixed length inputs context actual implementation just algorithm analysis 
clearly standard situations closer inequalities equalities security transferred describe slack inequalities affects security preserving properties reduction 
number calls invariably constant depends polynomially time success ratio polynomial slackness inequality turns major reason loss security reduction primarily depends larger larger larger function function formalize follows 
proposition ffl runs time polynomial counting running time sp sp reduction linear preserving 
ffl runs time polynomial sp sp reduction poly preserving 
ffl runs time polynomial sp sp reduction weak preserving 
important design strongest reduction possible 
techniques described directly yield poly preserving reductions regular nearly regular polynomial time computable degree regularity way functions pseudorandom generators luby covers conjectured way functions 
reduction general way functions weak preserving 
hidden bits hash functions computational entropy constructing hidden bit go constructing function output bits computationally unpredictable statistically correlated output bits 
fundamental proposition gl strengthened levin provides answer 
proposition way function 
fi hidden hf ri reduction linear preserving respect alternative definition computationally indistinguishable 
proposition presents elegant simple general method obtaining hidden bit way function 
need stronger proposition gl see levin proofs 
proposition oracle tm properties 
adversary accepts input bits outputs single bit 
input parameter ffi outputs list bit strings property fixed case pr fi gamma pr fi ffi probability case 
probability depends values random bits running time polynomial ffi running time number bit strings bounded ffi 
proposition immediate consequence propositions definition 
proposition way function 
hf xfi ri hf fii computationally indistinguishable fi 
reduction linear preserving respect alternative definition computationally indistinguishable 
way permutation pseudorandom generator describe way construct pseudorandom generator way permutation substantially simpler stronger security preserving properties original construction yao 
construction proof described due gl 
proposition way permutation 
define time function ensemble hf fi ri 
pseudorandom generator 
reduction linear preserving respect alternative definition computationally indistinguishable 
proof fi 
permutation hf fii uniform distribution proposition hf fii computationally indistinguishable reduction linear preserving respect alternative definition computationally indistinguishable 
reason proposition works permutation uniformly distributed looks random 
uniquely determines entropy lost application general way function necessarily holds 
intuitively rest constructs way function properties general way function 
done hash functions smooth entropy uniform recapture entropy lost application 
proposition produces pseudorandom generator stretches input bit 
construct pseudorandom generator stretches bits combine construction described previously proposition 
way function pseudoentropy generator describe construction pseudoentropy generator way function 
construction theorem yields pseudorandom generator way function 
construction different spirit original construction gkl illustrates construct pseudoentropy generator particularly simple way gl 
assumptions consequences somewhat different construction described proposition 
proposition way function 
define time function ensemble hf fi ri pseudoentropy generator pseudoentropy 
reduction linear preserving respect alternative definition computationally indistinguishable 
proof fi 
proposition shows hf fii computationally indistinguishable reduction linear preserving respect alternative definition computationally indistinguishable 
function fi random bit fi pseudoentropy 
note possible argue pseudorandom generator 
example way permutation 
way function hf fi ri pseudorandom generator output bit zero independent inputs output easily distinguished uniformly chosen random string 
universal hash functions concept universal hash function introduced cw proved far reaching broad spectrum applications theory computation 
definition universal hash functions theta mn time function ensemble 
recall definition fixed view describing function delta maps bits bits 
pairwise independent universal hash function fxg mn pr mn intuitively universal hash function property distinct pair mapped randomly independently respect constructions function ensembles universal hash functions description hash function viewed public input function ensemble part output 
construction universal hash function due cw 
definition matrix construction mn theta mn time function ensemble 
thetam hx fi concatenate definition cover case refer universal hash functions think construction 
universal hash function satisfies required properties may 
note efficient hash functions terms number bits specification 
example toeplitz matrices see example gl levin 
toeplitz matrix matrix constant diagonal specify theta toeplitz matrix specify values gamma diagonals simplest bit efficient construction universal hash function adopt default remaining 
smoothing distributions hashing lemma key component subsequent reductions describe 
lemma probability ensemble renyi entropy positive integer valued parameter 
theta mn gamma universal hash function 
mn gamma hh hz gamma lemma generalization lemma appears sip 
uniform distribution set mn papers proved similar lemmas 
special case linear hash functions lemma derived gl considering unlimited adversaries 
generalization broader class hash functions appears iz 
lemma interpreted follows universal hash function smooths renyi entropy uniform distribution bit strings length integer parameter controls tradeoff uniformity output bits universal hash function amount entropy lost smoothing process 
managed convert renyi entropy uniform random bits maintaining original supply random bits proof gamma 
define 
want show je gamma gammas gamma show theta fi fi ex gamma gammas fi fi gamma proof follows 
random variable jzj jzj jensen inequality 
letting gamma gammas see sufficient show gamma gammas gamma elementary expansion terms rearrangements summation write ex gamma gammas gamma gammas fixed value expectation respect zero pairwise independence property universal hash functions 
fixed value gamma gammas gammas gamma gammas gammas renyi entropy follows pr gammam entire sum gamma equal gamma definition lemma required renyi entropy applications distribution question renyi entropy lemma applies proposition 
applications need shannon entropy 
technical result due shan allows convert shannon entropy renyi entropy looking product distributions 
proposition integer valued polynomial parameter 
ffl probability ensemble 
probability ensemble nkn satisfying gamma nk kn gammak ffl necessarily independent probability ensembles hd probability ensemble nkn satisfying value nkn pr je jd gamma nk kn gammak corollary integer valued time polynomial parameter 
ffl probability ensemble gamma nk pn theta nkn mn universal hash function 
kn kn thetan pn hh umn pn gammak ffl necessarily independent probability ensembles hd jd gamma nk pn theta nkn mn universal hash function 
hx kn kn theta pn hh hu mn pn gammak proof combine proposition lemma proposition proposition 
pseudoentropy generator pseudorandom generator pseudoentropy generator pseudoentropy subsection construct pseudorandom generator start preliminary propositions 
proposition computational analog proposition 
proposition probability ensembles time function ensemble 
computationally indistinguishable 
computationally indistinguishable 
reduction linear preserving 
proposition appears gm 
proposition integer valued time polynomial parameter 
probability ensembles 
computationally indistinguishable 
kn kn computationally indistinguishable 
reduction weak preserving 
precisely probabilistic oracle tm properties nkn breaking adversary distinguishing kn kn breaking adversary distinguishing essentially equal nkn crucial sampling algorithms reduction weak preserving distinguishing kn kn respect private inputs length nk translates distinguishing private inputs length give construction pseudorandom generator pseudoentropy generator construction mn time function ensemble time polynomial parameter 
gamma pn theta jn universal hash function 
kn thetan pn define time function ensemble hh kn yi theorem described construction 
pseudoentropy generator pseudoentropy pseudorandom generator 
reduction weak preserving 
proof mn time function ensemble witnesses pseudoentropy generator guaranteed definition computational entropy secure computationally indistinguishable kn thetan kn thetan pn proposition kn kn computationally indistinguishable 
proposition follows hh kn hh kn computationally indistinguishable 
choice corollary follows hh kn jn pn gammak follows jn pn computationally indistinguishable 
note choice output length longer input length nk false entropy generator pseudoentropy generator false entropy generator false entropy subsection construct mildly non uniform pseudoentropy generator idea extract bits entropy compromising false entropy 
see page definition major obstacles necessarily time function ensemble non regular function variance quite high function guess value consistently accuracy 
integer valued time polynomial parameter kn thetan intuition construction false entropy kn times degeneracy kn times furthermore large high probability respect kn kn close degeneracy kn universal hash function extract roughly degeneracy kn bits entropy compromising false entropy kn 
construction time function ensemble 
time polynomial parameter assume simplicity 
approximation additive factor fix sigma upsilon gamma gamma nk pn theta nkn jn universal hash function 
kn thetan pn define time function ensemble hf kn ri lemma described construction 
false entropy generator false entropy mildly non uniform pseudoentropy generator pseudoentropy 
reduction weak preserving 
proof jn note gamma gamma corollary letting corollary follows hf kn ri gammak prove computational entropy nk 
probability ensemble computationally indistinguishable computationally indistinguishable hf kn ri hd kn ri computationally indistinguishable proposition claim implies hd kn ri computationally indistinguishable 
kn delta choice nk 
computational entropy nk lemma follows 
mildly non uniform uniform pseudorandom generator proposition value integer valued time polynomial parameter 
dlog kn theta time function ensemble nk kn thetan define time function ensemble phi kn mildly non uniform pseudorandom generator input set pseudorandom generator 
reduction weak preserving 
proof kn thetan suppose adversary distinguishing probability sp fi fi pr gamma pr fi fi describe oracle tm sp distinguishing probability running time running time plus time run compute output gamma inputs 
works respect particular works result follows 
works follows 
input randomly generates gamma kn computes phi phi runs input outputs 
nature phi chosen randomly probability pr chosen randomly probability pr 
value distinguishing probability sp note may case fixed values completely predictable 
hand value pseudorandom value may time computable 
exactly case lemma useful useful transform mildly non uniform pseudorandom generator pseudorandom generator note construction length output inputs length nk nk stretches input string strictly greater length 
reduction weak preserving reason usual breaking adversary inputs length nk transferred breaking adversary inputs length proposition satisfy property nk fixed proposition stretch output viewed function string length longer nk exclusive stretched outputs 
summary putting results section ffl reduction way permutation pseudorandom generator 
subsection ffl reduction way function pseudorandom generator 
combining subsections ffl reduction pseudoentropy generator pseudorandom generator 
subsection ffl reduction false entropy generator pseudorandom generator 
combining subsections extracting entropy way functions ection show construct pseudoentropy generator way function additional property number inverses computed polynomial time function time function ensemble 
combined results summarized subsection gives construction pseudorandom generator way function property 
reasons giving construction illustrates additional ideas needed construction false entropy generator oneway function 
general way function necessarily property time function ensemble considerably effort needed construct pseudorandom generator 
subsequent section describe construct false entropy generator way function 
combined results summarized subsection gives construction pseudorandom generator way function 
way function approximable pre image sizes pseudoentropy generator see get trouble construction proposition suppose regular way function fi 
hf fi ri hf fii computationally indistinguishable fi lost bits input entropy application similarly fi hidden hf ri completely statistically uncorrelated 
idea overcome problems create new function original way function concatenated degeneracy function number bits hashed input regain lost entropy 
proposition applied new function obtain pseudoentropy generator 
show construct pseudoentropy generator case time function ensemble 
construction time function ensemble suppose time function ensemble 
pn theta universal hash function 
pn define time function ensemble hf yi lemma described construction 
way function 
way function 
reduction poly preserving 
pn gamma 
proof suppose adversary inverts probability ffi time prove oracle tm input finds pre probability ffi description compute 
choose ff choose pn ff outputs output dlog ffi range pn define random variable fi gammaj ng pre 
probability fl jn inverts input hf hfi fli ffi fix range fi gammaj lemma hfi hfi ffi probability fl jn inverts input hf hfi fli ffi 
choose fl jn probability inverts input hf hfi fli gamma delta ffi ffi note input distribution call note run time dominated time run time success ratio inverting ffi proof fix range pre properties universal hash function pr gamma delta pre calculating renyi entropy follows gamma log delta gamman gamma log result follows log 
corollary described construction 
define time function ensemble hf fi ri way function 
pseudoentropy generator pseudoentropy 
reduction poly preserving 
proof proof proof proposition 
pn fi 
lemma part proposition follows hf fii computationally indistinguishable reduction poly preserving 
lemma part follows fi 
hand input entropy follows pseudoentropy 
theorem pseudorandom generator constructed way function time function ensemble 
reduction weak preserving 
proof combine construction construction corollary theorem 
theorem easy corollary theorem previously obtained gkl different construction proof techniques 
theorem oe regular way function oe time polynomial parameter 
pseudorandom generator constructed reduction weak preserving 
proof note case dlog oe furthermore dlog oe ng 
combining construction construction corollary theorem yields mildly non uniform pseudorandom generator 
theorem shows construct pseudorandom generator 
ideas luby theorem theorem gives versions theorem theorem reduction poly preserving security parameter time computable 
way function false entropy generator finding determined hidden bits final step general construction pseudorandom generator way function construct false entropy generator way function 
technically difficult part 
construction uses ideas construction 
way function pn theta dlog universal hash function 
similar construction gamma pn define time function ensemble hf dlog ri note lemma restricted function oneto way function necessarily time function ensemble may time function ensemble main difficulty overcome 
fi 
proof lemma corollary claim formalize time limited adversary distinguish fi fi 
fhx gg fhx gamma gg lemma ii fi 
way function 
hf fi hf fi computationally indistinguishable 
reduction poly preserving 
proof breaking adversary distinguishing distributions 
breaking adversary hidden bit fi hf proposition oracle tm breaking adversary inverting delta idea lemma success probability input hf ff ri ff dlog inverse polynomial success probability input fixed hx ii consider oracle tm input chooses gamma ff dlog pn runs input hf ff ri 
pr hx ii gamma follows produces inverse probability times probability produces inverse 
completely determined fi completely determined interesting case case lemma adversary unable distinguish fi fi part lemma fi completely determined case extract little bit false entropy 
construction main theorem describe construction false entropy generator part construction independently randomly choose sets inputs concatenate outputs particular kn thetan kn kn thetap part construction kn 
gamma pr gamma show sufficient approximation additive factor entire construction 
need able claim described mildly non uniform 
assume exact value kn thetan value chosen large high probability case possible values case lemma fi looks random bit time limited adversary 
problem don know set values bit fi looks random time limited adversary 
idea hash bits bits release hashed bits 
intuition hashed bits look random time limited adversary really gamma bits randomness left bits seeing kn approximately gamma gamma bits false entropy 
theta kn mn universal hash function define time function ensemble hh hx fi kn fi kn kn theorem way function described equations 
mildly non uniform false entropy generator false entropy reduction weak preserving 
proof mn hh hx fi kn fi kn kn hz kn note distribution output output bits replaced random bits 
lemma shows corollary shows way function computationally indistinguishable reduction weak preserving 
remains prove theorem proofs lemma lemma subsection 
corollary follows immediately lemma lemma 
turn state main result theorem 
theorem way functions iff pseudorandom generators 
proof pseudorandom generators imply way functions follows levin 
converse follows theorem results summarized subsection 
main lemmas lemma proof entropy excluding bits exactly 
additional entropy bits equal upper bound additional entropy bits additional entropy hx fiy kn fi kn amount entropy added fi 
hand condition fi determined hf probability gamma additional entropy condition 
probability gamma follows additional entropy added fi gamma 
additional entropy bits gamma gamma gamma choice lemma adversary distinguishing probability ffi pr gamma pr 
assume loss generality pr pr 
ii fi 
oracle tm distinguishes hf fi hf fi probability ffi 
running time polynomial running time proof lemma technically involved 
proving lemma give main corollary lemma give motivation proof lemma 
corollary way function 
computationally indistinguishable 
reduction weak preserving 
proof combine lemma lemma 
give intuition proof lemma 
oracle tm non straightforward hybrid distributions argument able distinguish distributions statement lemma 
give intuition hybrid describe related straightforward hybrid argument know implement efficiently 
consider distribution 
probability probability gamma defined previously 
random variables define distribution construction define replacing hx distribution described slightly different way 
suppose distribution altered follows change th input bit hu fi 
call distribution lemma intuitively case time limited adversary able distinguish hand hard see lemma statistical distance exponentially small adversary distinguish able distinguish hf fi hf fi statement lemma 
question really prove computationally indistinguishable resolving question consider family hybrid distributions 
hybrid distribution position change th input bit hu fi 
kn gamma gamma ffi inefficient oracle tm follows input hf yi phase chooses chooses sample oracle tm produces random bit stops 
interesting case replaces inputs corresponding th position sample th input bit set 
second phase runs adversary input outputs bit produced distinguishing probability oracle tm ffi problem efficient oracle tm may possible efficiently uniformly sample required 
possible sample uniformly theta gamma fraction samples randomly distributed gamma fraction samples randomly distributed simple idea construct efficient adversary described 
efficient adversary described detail proof lemma proceeds phases similar inefficient oracle tm described 
phase consists stages stage produces coupled pair distributions polynomially 
stage consists adversary sampling distributions produced previous stage produce pair output distributions current stage 
initially turn kn kn gamma positions fixed essentially way gamma gamma positions fixed way fill position samples hx drawn uniformly theta gamma high probability directly tell sample criteria decide samples keep fill position criteria sample distinguishing probability highest th position fixed sample 
ffi pr gamma pr 
ffi ffi ffi kn follows ng ffi gamma gamma ffi ffi discrepancy value ffi ffi gamma inverted second phase 
intuitively stage phase works follows 
bit chosen randomly probability zero probability gamma distribution th input hx kn chosen randomly chosen randomly chosen randomly th input bit set random bit correct inner product bit 
distribution th input kn set way set distributions correlated 
choice th inputs done times chosen times time distinguishing probability corresponding approximated choice maximizes difference accepting probabilities determines set 
second phase chooses uses pair distributions produced stage 
idea choose random sample modify portions part input run modified sample sample outputs produce bit output 
intuition distinguishing probability ffi average ffi turn formal proof lemma 
proof lemma oracle tm works follows input hf yi phase define kn ae ffi ae stage works follows randomly choose probability choose gamma 
define wm hx gamma wm gamma hx fixed wm th input bit set xm fi similarly define gamma wm gamma hx fixed wm ffi gamma wm pr gamma wm gamma pr gamma wm sampling ae times gamma wm gamma wm produce estimate delta gamma wm pr delta gamma wm gamma ffi gamma wm ae gamman index delta gamma wm maximized 
set hx wm gamma wm gamma wm go stage 
phase pick gamma 
distribution set rst input bit set set set set fi sample sample 
output fi output 
prove oracle adversary just described distinguishes claimed lemma 
hx ii 
pr gamma follows directly definitions fi gamma ffi fi gamma ffi ffl ffi gamma ffi distinguishing probability gammae fi ffi gammaffi ffl gamma expectations 
prove lemma sufficient show ffl ae equivalently kn gamma ffl aek ffi expectation random choices phase 
ffi pr gamma pr prove showing ffi kn gamman expectation random choices phase 
ffi gamma ffi ffl ae 
expectation random choices rst stage phase conditional set choices previous stages 
ffi ffi follows ffi ffi gamma ffi kn kn gamma ffi gamma ffi ae kn gamma ffl ffi kn gamma ffl proves bound equation 
suffices prove 
proof pr applying chernoff bounds see get probability gamma gamman kn gamma gamma entropy input conditional rest bits kn kn gamma sum applying lemma kn kn gamman ffi kn kn gamma kn gamman proof recall st input fi ffi ffi gamma ffi ffi ffi gamma ffi gamma ffi ffi ffl gamma ffi ffl ffi gamma ffi show ffi ffi gamma ffi gamma ae concludes proof 
consider stage phase 
choice fact gamma follows probability gamma gamman ae wm ae wm follows chernoff bounds pr max fffi wm ffi ffi gamma ae gamma gamman probability gamma gamman delta wm ae corresponding ffi wm recalling wm chosen stage ffi wm delta wm gamma ae max delta wm gamma ae max fffi wm gamma ae ffi ffi gamma ae probability gamma delta gamman ffi value ffi conditional conclude ffi ffi ffi gamma ae probability ffi ffi gamma ffi ffi gamma ffi gamma ae continue just check approximation sufficient 
suppose entire construction replacing enlarge density making contain elements hx ii 
lemma easily seen remain valid lemma just true entropy decreases 
implies sufficient try different values direct construction shown construct false entropy generator arbitrary way function pseudoentropy generator false entropy generator pseudorandom generator pseudoentropy generator 
combinations constructions gives pseudorandom generator arbitrary way function stated theorem 
literally composing reductions preceding parts construct pseudorandom generator inputs length way function inputs length obviously suitable reduction practical applications 
subsection concepts developed rest provide direct efficient construction 
construction produces pseudorandom generator inputs length clearly suitable practical applications 
sharper analysis reduce best find ideas developed 
result considered practical pseudorandom generator inputs length close 
special cases way functions ideas practical see luby 
improvement direct construction comes observation reductions involves product distribution product distribution needed proof 
start way function construct equation probability previous section 
hx ri represent input distribution length length 

fi set intuitively generate pseudo random bits follows kn kn compute kn kn 
intuitively entitled recapture gamma hhf kn kn bits conditional entropy left computed kn kn entitled recapture bits kn get hidden bit copy 
able extract bits kn entropy 
totally predictable inputs hhf gamma see proof lemma add output bits entitled bits input kn methods extracting entropy perfect need sacrifice bits stage corollary need sacrifice nk stage chose satisfy nk formally gamma gamma gamma nk gamma nk gamma nk indices hash functions hr maps bits bits hr maps bits bits hr maps bits bits 
construction follows construction hh hr kn hr kn theorem way function construction mildly non uniform pseudorandom generator 
reduction weak preserving 
proof easy check outputs bits inputs 
noted conditional entropy gamma gamma 
corollary hh statistically indistinguishable random bits hf kn kn statistically indistinguishable hz hr kn hr kn mn lemmas follows hr kn computationally indistinguishable random bits hf kn computationally indistinguishable hz hr kn corollary hh kn statistically indistinguishable hz output computationally indistinguishable truly random output length 
hash functions constructed toeplitz matrices bits sufficient construct hash function bits inputs needed hash function just constant fraction inputs 
input length nk 
need proposition get rid mild non uniformity 
arguments clear approximation true values sufficient 
cases pairs consider 
means get total generators needing input length 
total input size pseudorandom generator claimed 
general problem characterize conditions cryptographic applications possible 
conditions mean complexity theoretic conditions np existence way functions examples cryptographic applications private key cryptography identification authentication digital signatures bit commitment exchanging secrets coin flipping telephone variety cryptographic applications known secure protocol constructed pseudorandom generator lr gmr naor gmw show applications ranging private key encryption zero knowledge proofs pseudorandom generator 
results show protocols way function 
ny gives signature scheme way permutation rom substantially improves basing scheme way function 
notion false entropy generator shows existence pseudorandom generators equivalent existence pair distributions computationally indistinguishable statistically different 
il provides complementary results way function constructed secure protocol variety cryptographic applications including private key encryption identification authentication bit commitment coin flipping telephone 
ow shows way function constructed non trivial zero knowledge proof protocol 
secure protocols applications equivalent existence way functions 
results described previous paragraphs show existence way function central modern complexity cryptography 
applications shown possible way function ir give strong evidence exchanging secrets public channel application kind 
fundamental issue efficiency size time general construction give pseudorandom generator way function increases size input large polynomial amount weak preserving 
news practical applications nice general poly preserving linear preserving reduction 
research evolved long period time greatly influenced people 
amos fiat moni naor rubinfeld manuel blum steven rudich noam nisan lance fortnow umesh vazirani charlie rackoff oded goldreich hugo krawczyk silvio micali insights contributions 
particular charlie umesh manuel advice enthusiasm oded hugo exposing fourth author wealth insights problem 
oded insightful comments aspect earlier versions improved presentation ways 
chor goldreich schnorr rsa rabin functions certain parts hard siam computing vol 
pp 

babai fortnow nisan wigderson bpp subexponential time simulations exptime proofs complexity theory vol pp 

bennett brassard robert privacy amplification public discussion siam computing vol 
pp 

blum blum independent unbiased coin flips correlated biased source finite state markov chain th ieee symposium foundations computer science pp 

bm blum micali generate cryptographically strong sequences pseudo random bits siam computing vol 
pp 

bh boppana pseudo random generators complexity classes micali ed advances computer research vol 
pp 
jai press 
inferring sequences produced pseudo random number generators jour 
acm vol 
pp 
cw carter wegman universal classes hash functions jcss vol 
pp 

cg chor goldreich unbiased bits sources weak randomness probabilistic communication complexity siam computing vol 
pp 

dh diffie hellman new directions cryptography ieee trans 
inform 
theory vol 
pp 

goldreich note computational indistinguishability icsi tech report tr july 
goldreich goldwasser micali construct random functions acm vol 
pp 

gkl goldreich krawczyk luby existence pseudorandom generators siam computing vol 
december pp 

gl goldreich levin hard core predicate way function rst acm symposium theory computing pp 

gmw goldreich micali wigderson proofs yield validity languages np zero knowledge proofs acm vol 
july pp 

gm goldwasser micali probabilistic encryption jcss vol 
april pp 

gmr goldwasser micali rackoff knowledge complexity interactive proof systems siam computing vol 
pp 

gmt goldwasser micali tong establish private code public network rd ieee symposium foundations computer science pp 

hastad pseudo random generators uniform assumptions nd acm symposium theory computing pp 

hl herzberg luby public randomness cryptography proceedings crypto icsi technical report tr october 
il impagliazzo luby way functions essential information cryptography th ieee symposium foundations computer science pp 

ill impagliazzo levin luby pseudo random number generation way functions rst acm symposium theory computing pp 

impagliazzo naor efficient cryptographic schemes provably secure subset sum cryptology vol 
pp 

ir impagliazzo rudich limits provable consequences way functions rst acm symposium theory computing pp 

iz impagliazzo zuckerman recycle random bits th ieee symposium foundations computer science pp 

knuth knuth semi numerical algorithm art computer programming addison wesley second edition vol 
chapter 
third edition expected 
kol kolmogorov approaches concept amount information probl 
inf 
vol pp 

krawczyk predict congruential generators journal algorithms vol 

pp 

levin levin way function pseudorandom generators combinatorica vol 
pp 

levin levin randomness non determinism way function pseudorandom generators symb 
logic vol 
pp 
luby luby pseudorandomness cryptographic applications princeton computer science notes princeton university press 
lr luby rackoff construct pseudorandom permutations pseudorandom functions siam computing vol 
pp 

mceliece public key cryptosystem algebraic coding theory dsn progress report jan feb jet propulsion laboratory california institute technology 
cryptography weak sources randomness tech 
report toronto 
motwani raghavan randomized algorithms cambridge university press 
naor naor bit commitment pseudorandom generators cryptology vol 
pp 

preliminary version appears crypto pp 

ny naor yung universal way hash functions applications rst acm symposium theory computing pp 

ow ostrovsky wigderson way functions essential nontrivial zero knowledge nd israel symposium theory computing systems pp 

renyi renyi probability theory north holland amsterdam 
rsa rivest shamir adleman method obtaining digital signatures public key cryptosystems comm 
acm vol 
pp 

rom way functions necessary sufficient secure signatures nd acm symposium theory computing pp 

sv vazirani generating quasi random sequences slightly random sources jcss vol 
pp 

shan shannon mathematical theory communication bell systems technical journal pp 
pp 

sip sipser complexity theoretic approach randomness th acm symposium theory computing pp 

vazirani strong communication complexity theory generating quasi random sequences communicating slightly random sources combinatorica vol 
pp 

vv vazirani vazirani random polynomial time equal slightly random polynomial time th ieee symposium foundations computer science pp 

yao yao theory applications trapdoor functions rd ieee symposium foundations computer science pp 


