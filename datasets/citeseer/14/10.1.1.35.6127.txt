submitted eleventh international conference software engineering knowledge engineering specifications knowledge components reuse enrico motta dieter fensel mauro richard benjamins knowledge media institute open university walton hall milton keynes uk motta open ac uk cs unibo aifb institute university karlsruhe karlsruhe germany dfe aifb uni karlsruhe de social science informatics university amsterdam wb amsterdam netherlands richard swi psy uva nl 
ibrow project aims support semi automatic configuration intelligent problem solvers reusable components 
project takes holistic approach reuse developing solutions various types technologies required reuse technically economically feasible 
technologies include innovative software architectures modelling languages software libraries brokering agents methodologies 
focus particular aspect ibrow project specification reusable library components 
particular illustrate test case pre existing library reusable components parametric design reformulated terms framework constructs provided ibrow modelling language 
exercise shows advantages terms reusability usability afforded ibrow approach 
proposed framework language provide effective organization constructing libraries large horizontal cover maximizing reusability avoiding brittleness traditional monolithic libraries 
mauro contribution carried visiting knowledge media institute open university 
regular affiliation university bologna dipartimento di scienze dell informazione zamboni bologna italy 

effective approaches software reuse need tackle range technical problems span software architectures specification languages software libraries supporting tools ibrow project benjamins aims support semi automatic configuration intelligent problem solvers reusable components 
project takes holistic approach reuse developing solutions various types technologies required reuse technically economically feasible 
technologies include innovative software architecture fensel upml modelling language fensel software libraries motta brokering agents benjamins methodologies fensel 
focus particular aspect ibrow project specification reusable library components 
particular illustrate depth test case pre existing library reusable components parametric design tasks motta zdrahal motta reformulated terms architecture constructs provided upml modelling language 
purpose exercise show advantages terms reusability usability afforded approach general upml language particular 
particular show proposed architecture language provide effective organisation constructing libraries large horizontal cover maximising reusability avoiding brittleness traditional monolithic libraries 
precise reuse requires appropriate organizational structures place 
issue concerns refer interested reader analyses 
specifications knowledge components reuse page organised follows 
section give overview ibrow project 
section library parametric design components provided input test case 
section illustrate rational reconstruction input library upml framework 
sections discuss related highlight main study 

overview ibrow project building knowledge systems reusable components scenario envisaged ibrow project knowledge engineers construct intelligent systems plug play development process 
involves locating appropriate components libraries available world wide web configuring complete problem solver 
process supported specialised software broker benjamins job acquire detailed task specification user identify appropriate problem solving method psm applicable task 
complexity typical top level task knowledge system consider instance configuration design planning problem method task selection configuration process just shot activity involves decomposing task number subtasks recursively locating configuring appropriate sub methods applicable specific subtasks 
problem solving structure target system characterized task method structure problem solving methods solve task directly decompose task number subtasks see 
specifications knowledge components reuse page top level task decomposition method task 
task primitive method task primitive method decomposition method 
task primitive method 
characterizing problem solver task method structure detailed task specification produced instantiating generic task model particular application domain 
generic task model provides formal description class problems configuration design classification fault diagnosis independent specific application domain 
example modelling office allocation application involve selecting generic task model parametric design motta zdrahal instantiating terms concepts office allocation domain employees offices process characterised imposing particular task viewpoint domain 
general task viewpoints imposed application domain 
instance sisyphus benchmarking study office allocation problem turn characterised design classification task gaines 
tasks domains provide basic epistemological building blocks ibrow approach reuse 
third important class components problem solving methods 
domain independent specifications generic specifications knowledge components reuse page problem solving behaviours reusable domains possibly generic tasks 
problem solving methods characterised terms epistemological requirements impose application domain 
problem solving methods instance generate test local search generally applicable methods introduce relatively weak requirements underlying domain knowledge 
words generically reusable provide little task specific leverage 
problem solving methods model diagnostic methods console torasso called strong methods introduce significant assumptions available domain knowledge availability device model 
generic tasks domain models psms subscribe different terminologies need integrated building application reuse 
instance solving office allocation problem involve integrating generic task model parametric design task independent domain model organisation applying task independent characterization propose revise problem solver fensel resulting task specification :10.1.1.41.1698
important challenges naturally arise scenario formally specify terminology particular class components task model parametric design ii model connections components subscribing different terminologies 
ibrow ontologies gruber model adapters fensel model 
ontologies adapters described sections 
ontologies ibrow architecture ontology provides partial specification shared conceptualisation formulating knowledge level theories universe discourse gruber guarino giaretta motta 
role ontology provide specifications knowledge components reuse page common vocabulary shared different agents 
ontology concerned terminology model implementation aspects words knowledge level formalisation newell 
typically ontologies literature domain ontologies capture domain knowledge world characterised independent style guarino 
ibrow ontologies characterize terminology associated tasks psms 
instance ontology specifying terminology parametric design tasks normally include concepts parameter parameter value constraint requirement motta zdrahal 
ontology called task ontology 
similarly define method ontologies define terminology associated problem solving method 
example propose revise characterised task domain independent terms terms states state transitions procedures fixes fensel :10.1.1.41.1698
conceptual separation task method domain ontologies maximizes reusability problem solving method applied different task models different domains 
time introduces need special purpose modelling constructs integrating heterogeneous components 
discussed 
adaptation reuse discussed previous section ibrow maintain strong epistemological distinction domains generic tasks problem solving methods reflected different ontologies different types components 
building application requires configuring integrating heterogeneous components means adapters 
integrating explicitly defined adapters library application development process affords number advantages specifications knowledge components reuse page psms reused different tasks domains 
reusable adapters defined provide standard adaptation search methods design tasks 
combination generic methods domain oriented task oriented adapters integrated library define highly usable strong psms 
adapter concept externalization essential preventing combinatorial explosion libraries problem solving components 
simple example illustrates point 
assume search strategies problem types 
adapters components necessary cover combinations increasing retrieval overhead 
adapters components necessary 
clarify point consider case providing library search methods 
local search algorithm main parameters determine search character graham selection start nodes generation successors nodes selection preferred nodes definition preference relation 
different values parameters distinguish alternative search methods best search vs hill climbing 
explicitly providing generic specification parameters define large variety search methods adaptations single generic specification 
different refinements share required adapters limited number adapters required model alternative search strategies 
general types adapters required configure application reusable components bridges connect different parts model mapping task viewpoint domain model process element specifications knowledge components reuse page defined specialization existing 
examples section bridges discussed detail fensel 
task refiner task task domain bridge psm task bridge ont refiner ontology domain model psm refiner psm psm domain bridge 
ibrow architecture knowledge systems 
summarize ibrow framework reuse comprises classes components ontologies tasks methods domain models bridges see 
section show framework applied drive development library problem solving components highlight resulting benefits 
introduce library parametric design components henceforth mz library provided input test case 

task specific library knowledge components mz library developed enrico motta zdrahal motta zdrahal motta aims reconcile advantages terms knowledge acquisition reuse afforded task specific formulations clear specifications knowledge components reuse page theoretical foundations problem generality provided task independent problem solving paradigms search 
specifically architecture mz library relies key ideas ibrow different kinds formal ontologies specify generic structure class problems task ontologies knowledge requirements problem solving methods method ontologies 
psms applicable class problems say characterized refinements common task specific method generic problem solving model 
model comprises set generic problem solving components generic sub tasks sub methods provide high level building blocks necessary construct problem solving methods applicable model associated generic method ontology expresses minimal knowledge requirements satisfied psm applicable order bridge gap method task dimensions provide task independent foundation task specific library problem solving methods construction generic problem solving model discussed previous bullet say driven task ontology selection generic problem solving paradigm 
particular mz library search paradigm 
advantage choice constrain range problem solving methods modelled specializations model problem solving methods seen performing search 
provides diagrammatic representation architecture process model underlying mz library 
task ontology parametric design developed 
task specific problem solving model method ontology produced specifications knowledge components reuse page integrating model problem solving search parametric design task ontology 
problem solving methods defined specializations generic problem solving model 
advantage approach strong organizational structure provided task specific problem solving model possible define new psms relatively simple refinements configurations generic problem solving model typically components needed define new psms average 
resulting psms characterized homogeneous style share high level components inherit common control structure generic problem solving model 
approach easier compare contrast psms define hybrid psms integrating components pre existing psms see motta details 
def class parametric design 
def class parameter 
def class constraint 
task ontology problem solving search def class design operator 
def class design state 
def class design focus 
def class design context 
generic method ontology parametric design initialize design space select design state new design state 
select design state select design context 
generic parametric design gen design control design context 
design state extend design state generate state collect state foci 
problem solving method 
parametric design initialize design space select design state new design state 
select design state select design context 
generic parametric design gen design control select design state design context 
design state extend design state generate state collect state foci 
generic problem solving model parametric design initialize design space select design state new design state 
select design context 
generic parametric design gen design control select design state design context 
design state extend design state generate state problem solving method collect state foci 
problem solving foundation mz library 
specifications knowledge components reuse page parametric design extend design generic design control collect design foci design state design context initialize design space select design focus select design state design focus evaluate design state collect focus operators evaluate feasibility order focus operators evaluate cost select design operator evaluate consistency try design operator evaluate completeness apply design operator table 
main tasks parametric design model 
listing main tasks included generic model parametric design problem solving table 
suite high level tasks allowed model classes parametric design psms 
include case design methods variations propose revise design psms search algorithms hill climbing psms drawn design scheduling literature propose exchange propose backtrack 
details motta zdrahal motta zdrahal motta 
mz library tested successfully application domains including number real world engineering design applications see zdrahal 
results show technology leads significant improvement performance design process typical improvement factor 

developing reusable components upml discussed previous section mz library extensive established resource building parametric design components 
provides strong support developing parametric design applications reusing problem types requires considerable re engineering 
course hardly surprising library specifications knowledge components reuse page designed task specific 
library conceptually search paradigm clearly unnecessary entire library task specific reusability library greatly enhanced making explicit library methodological process led development 
specifically required separate specification search component parametric design task ontology ii include explicitly library connection models 
follows describe rational reconstruction process illustrating ibrow approach library development 
introducing modularity specification main modules mz library specifies task ontology parametric design 
reconstructing module upml decided decouple various parts ontology reusable tease various ontological commitments 
instance separating optimality aspects rest ontology ensures simple parametric design applications need instantiate optimality requirements ii generic optimality machinery specification generic tasks planning tasks 
way generalized parametric design task ontology mz library defining refinement specification generic design task 
organization task oriented part resulting upml library shown 
shows defined single ontology task specification mz library subdivided ontologies task specifications shown rectangles text bold 
organization allows multiple task specifications time minimizing number definitions specifications knowledge components reuse page particular 
instance task specifications require optimality criteria inherit optimality machinery ontology design preferences 
design solution generic design terminology design optimal design parametric design terminology parametric design design preferences optimal parametric design 
hierarchy ontologies task specifications upml library modelling ontologies tasks upml ontology defined providing signature axioms associated elements signature 
specification expressed sorted logic close specification style ml van harmelen fensel frame logic kifer :10.1.1.115.3586
examples shown sorted logic 
examples frame logic upml fensel 
illustrate style specifications knowledge components reuse page specification show ontology design solution 
ontology formally specifies constitutes solution design task 
ontology design solution pragmatics defines predicates axioms needed describe solutions design tasks import generic design terminology signature predicates variables signature axioms ontology admissible solution design model constraints requirements consistent design model constraints suitable design model requirements design model requirement constraint rs requirements cs constraints design model admissible solution iff consistent respect problem constraints suitable respect problem requirements 
admissible solution cs rs consistent cs suitable rs design model consistent respect set constraints iff violated 
consistent cs cs violated statements design model suitable iff requirements satisfied 
suitable rs rs satisfied statements task parametric design task ontology 
ontology specification upml import parametric design terminology specification roles input output roles goal reqs requirements constraints params parameters value ranges value ranges design parametric design model parametric solution design reqs params value ranges preconditions parameter set empty params parameter associated value range params vr vr value ranges vr vs 
definition task parametric design specifications knowledge components reuse page shown task specified providing input output roles goal preconditions see fensel details 
specifying problem solving behaviour section illustrate model parametric design problem solving included mz library reconstructed upml library provide reusable resource original 
search parametric design terminology state space terminology design solution gen design psm gen parametric design psm generic design terminology design search 
ontology inclusion psm refinement upml library shown monolithic task specific model parametric design problem solving defined mz library factorized number psm specifications ontologies particular provide distinct specification search problem solving shown 
explicit upml library search foundation mz library 
shadows indicate ontologies 
specifications knowledge components reuse page problem solving method defined upml logical specification characterized input output roles preconditions postconditions assumptions 
define requirements domain knowledge fulfill order guarantee method succeeds 
case requirement solution state reachable input state 
general assumptions necessarily provable particular domain 
cases proving assumption may require reasoning effort computationally expensive solving task hand 
assumptions provide important aspect problem solving method specification 
define glue ensure complexity gap psm task heuristically bridged domain knowledge 
provide way formalize informal notion knowledge systems heuristic problem solvers 
problem solving method search ontology state space terminology competence roles entirely clear characterise generically input search problem solver 
avoid problem assuming kind non empty input specification provided input state output state preconditions subtasks input initialize select state derive successor states update state space postconditions output solution state empty set psm fails solution state output assumptions guarantee psm succeeds introduce assumption solution state exists reached input state solution state successor input problem solving method 
specification search problem solving method specifications knowledge components reuse page ontology design search fills terminological gap search design problem solving 
having defined ontology specify refiner derive generic design problem solver refinement search psm see 
important aspect refiner links generic notion solution state search ontology design specific notion admissible solution 
refines input roles adding design specific notions requirements constraints 
refines generic subtask initialize design specific initialize design model 
psm refiner search gen design psm pragmatics refiner specialises generic search psm design tasks 
particular refines generic input search psm set requirements set constraints replaces generic initialize task design specific initialize design model adds axiom linking search specific predicate solution state design specific predicate admissible solution 
specify input roles initialize design model initialize 
unfortunately see way upml 
ontology basic design search design solution auxiliary terminology constants competence reqs requirements constraints design model design model refined roles input reqs constraints refined preconditions reqs refined subtasks axioms specialise subtask initialize replacing subtask initialize design models initialize initialize design model keyword exist original upml specification 
possible refine search psm able add axiom links generic notion solution state design specific notion admissible solution solution state admissible solution reqs constraints psm refiner 
defining generic design problem solver refinement search style specification reconstructed generic model parametric design library included mz library see motta full specifications knowledge components reuse page specification 
result flexible reusable resource development process problem solving foundations explicit library 

related number libraries problem solving components proposed decade knowledge engineering 
earlier ones breuker marcus simply collections complete problem solving methods providing strong inflexible support 
certain degree flexibility introduced second generation libraries benjamins breuker van de velde hara structured task method organization number problem solving methods defined task decomposition methods divide task number subtasks 
basic principle task method structures task possible find number methods solve 
method solves task association adequate purpose navigating library configuring psm provide strong organization model developing library 
result quite difficult get task method structure right rn 
contrast approaches library clear theoretical basis generic problem solving paradigm 
adaptation usually handled implicitly second generation libraries approach considers adapters class library components resulting flexible reusable comprehensible resource 
adapters discussed detail fensel motta typology adapters proposed 
notion adapter context plays role similar mediators heterogeneous information systems wiederhold genesereth connectors specifications knowledge components reuse page software architectures shaw garlan adapters design patterns gamma 
idea underlying approaches essentially kind external kit required order allow interaction reusable components configuration different computational scenarios 
externalization adaptation process advantage original components remain unchanged usable new situation 
adapters takes advantage task specific architectures developed knowledge engineering years 
architectures generic model parametric design outlined specific domain generalize classes applications 
aspect specific knowledge engineering research implies adapters tend powerful potentially reusable 
instance adaptation search design refine different search methods different types design problem solving 

shown approach development library problem solving components knowledge systems arguably provides number advantages avoids brittleness traditional monolithic libraries supports development usable task specific psms maximizes reusability allowing integration library general purpose task independent problem solving components addresses horizontal cover problem making component adaptation process explicit 
addition library formally specified opening door automatic support verification validation fensel semi automatic configuration psms benjamins 
specifications knowledge components reuse page course enabling reuse requires just providing right library 
ibrow project developing web software infrastructure aims reduce costs associated reuse benjamins 
believe success enterprise general ibrow enterprises crucial break cost skill barrier currently hampering take knowledge engineering technology 
birmingham 

solving sisyphus design 
international journal human computer studies pp 

benjamins 

problem solving methods diagnosis 
phd thesis department social science informatics university amsterdam 
benjamins wielinga wielemaker fensel 

brokering problem solving knowledge 
appear proceedings th european workshop knowledge acquisition modeling management ekaw 
springer verlag 
benjamins plaza motta fensel studer wielinga schreiber zdrahal 

intelligent brokering service knowledge component reuse world wide web 
proceedings th banff knowledge acquisition knowledge system workshop kaw banff canada 
breuker van de velde 

commonkads library expertise modelling 
ios press amsterdam netherlands 
breuker wielinga van someren de schreiber de wielemaker hayward 

model driven knowledge acquisition interpretation models 
deliverable esprit project kads 
university amsterdam 
console torasso 

hypothetical reasoning causal models 
international journal intelligent systems pp 



organizational factors reuse 
ieee software pp 

fensel 

defining semantics axiomatization specifying reasoning process knowledge systems 
proceedings th european conference artificial intelligence ecai budapest august 
fensel 

specifying knowledge systems reusable components 
proceedings th international conference software engineering knowledge engineering madrid spain 
fensel motta 

structured development problem solving methods 
submitted publication 
fensel motta benjamins decker grosso van harmelen musen plaza schreiber studer wielinga 

unified problem solving method development language upml 
esprit project number ibrow deliverable chapter 
fensel motta decker zdrahal 

ontologies defining tasks problem solving methods mappings 
plaza 
eds knowledge acquisition modeling management lecture notes artificial intelligence lnai springer verlag 
specifications knowledge components reuse page fensel sch 

inverse verification problem solving methods 
international journal human computer studies pp 

gaines 

situated classification solution resource allocation task represented visual language 
international journal human computer studies pp 

gamma helm johnson vlissides 

design patterns 
addison wesley 
graham 

synthesis local search algorithms algebraic means 
proceedings th knowledge software engineering conference 
gruber 

translation approach portable ontology specifications 
knowledge acquisition pp 

guarino 

formal ontology conceptual analysis knowledge representation 
international journal human computer studies pp 

guarino giaretta 

ontologies knowledge bases terminological clarification 
mars editor large knowledge bases knowledge building knowledge sharing 
ios press amsterdam pp 

van harmelen 
ml formal language kads models 
knowledge acquisition pp 

kifer lausen wu 

logical foundations object oriented frame languages 
journal acm vol 


problem statement sisyphus models problem solving 
international journal human computer studies pp 



organisational considerations software reuse 
annals software engineering vol pp 
marcus 
editor 
automatic knowledge acquisition expert systems 
kluwer academic boston ma 
motta 

reusable components knowledge models 
phd thesis 
knowledge media institute 
open university 
uk 
available url kmi open ac uk enrico thesis thesis html 
motta zdrahal 

parametric design problem solving 
gaines musen editors proceedings th banff knowledge acquisition knowledge system workshop kaw banff canada november 
motta zdrahal 

approach organization library problem solving methods integrates search paradigm task method ontologies 
international journal human computer studies pp 

motta fensel 

upml specification parametric design library 
esprit project number ibrow deliverable 
newell 

knowledge level 
artificial intelligence pp 

hara 

gdm grammar 
vital project report nott 
available author ai group department psychology university nottingham uk 
rn 

principles libraries task decomposition methods 
shadbolt hara schreiber editors 
advances knowledge acquisition ekaw 
lecture notes artificial intelligence 
springer verlag pp 



coke efficient solving complex assignment problems propose exchange method 
th international conference tools artificial intelligence 
arlington virginia 
birmingham 

solving vt reuse 
international journal human computer studies pp 

shaw garlan 

software architectures 
perspectives emerging discipline 
prentice hall 
zdrahal 

experiments applying knowledge techniques parametric design 
editor proceedings international conference engineering design 
volume pp 
tampere university technology finland 
specifications knowledge components reuse page yost 

configuring elevator systems 
international journal human computer studies pp 

wiederhold genesereth 

conceptual basis mediation services ieee expert september october issue pp 

zdrahal motta 

depth analysis propose revise problem solving methods 
gaines musen editors proceedings th banff knowledge acquisition knowledge systems workshop 
banff canada 
zdrahal motta 

improving competence integrating case reasoning heuristic search 
gaines musen editors proceedings th banff knowledge acquisition knowledge system workshop kaw banff canada november 
