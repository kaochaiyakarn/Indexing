persistent applications michael carey david dewitt michael franklin nancy hall mark mcauliffe jeffrey naughton daniel schuh marvin solomon tan seth white michael computer sciences department university wisconsin madison shore cs wisc edu shore scalable heterogeneous object repository persistent object system development university wisconsin 
shore represents merger objectoriented database file system technologies 
give goals motivation shore describe shore provides features technologies 
describe novel aspects shore architecture including symmetric peer peer server architecture server customization extensible value added server facility support scalability multiprocessor systems 
initial version shore operational expect release version mid 
shore scalable heterogeneous object repository new persistent object system development university wisconsin represents merger object oriented database oodb file system technologies 
past years seen significant progress oodb area applications application areas chosen leave file systems favor oodbs 
feel applications benefit oodb support impeded limitations current technology 

current oodbs closed restricted language persistent smalltalk file systems relational database systems 
large scale applications require multilingual data access 

current oodbs application programmers face decision put data oodb case version appeared proceedings acm sigmod conference management data minneapolis mn may 
research sponsored advanced research project agency arpa order number monitored army research laboratory contract 
current address department computer science university maryland college park md existing file applications rewritten leave data files 

current oodbs provide fairly heavy solution area transaction management dictating adoption serializability tothe transaction data recoverability 

current oodbs strongly client server architectures inappropriate execution peer peer distributed systems kinds high performance multicomputer hardware needed certain large scale applications 
goal shore project provide system addresses issues enabling holdout applications move data incrementally files modern persistent object repository 
expect current oodb clients find shore attractive alternative 
exodus involved earlier object oriented database effort called exodus cdf 
version exodus provides client server architecture page level locking log recovery aries algorithm support multiple servers distributed transactions 
exodus package includes programming language rcs variant supports convenient creation manipulation persistent data structures 
functionality performance robustness low cost free 
exodus popular piece software 
exodus associated toolkit projects wisconsin 
different groups countries taken copies ftp site storage manager ti open object oriented database system serves storage engine commercial product announced multi media dbms shown commercially competitive performance oodbms benchmark cdn 
exodus suffers limitations shared current persistent object stores 
exploration limitations may help explain motivation shore 
exodus storage objects untyped arrays bytes correct interpretation contents responsibility application programs 
allows instances type stored database type information stored 
compiletime approach data types disadvantages including ffl easy access objects wrong type programming configuration errors version mismatch 
ffl restricting type support compiler locks users single language solutions 
ffl sharing data applications difficult 
ffl lack stored types prevents dbms providing facilities support heterogeneous hardware platforms data browsers garbage collectors 
time designed exodus felt variability type systems common solution 
growing consensus level type support oodbms system provide cat 
second limitation exodus storage manager esm client server architecture 
users constructed database servers object servers exodus client processes leading client level server problem illustrated 
query shipping opposed data shipping sql server difficult construct efficiently existing software base 
contrast open architecture allowed clients customize esm server process directly 
esm process architecture fails support clean mapping parallel processors intel paragon ibm sp 
simply run exodus server node mass storage attached support distributed transactions sufficient efficient parallelism requires availability extensive server server communication facilities 
third limitation exodus lack support access control 
aspects system original thinking different clients wish implement different protection models provided built protection support 
furthermore exodus allows client processes manipulate objects directly cached copies database pages errant pointer destroy client data metadata rendering entire database unusable 
original design exodus client client sql applications exodus storage manager sql server exodus server exodus client client level server problem 
envisioned client processes database systems object servers trusted software layers 
shore aims support environments single storage volume may shared mutually applications 
exodus objects similar unix files untyped sequences bytes interface manipulating completely different 
result existing applications built unix files easily exodus 
design shore strives retain features exodus storage manager transactions performance robustness eliminating limitations 
shore differs exodus object shore contains pointer type object defines structure interface 
shore data language sdl provides single language neutral notation describing types persistent data shore process architecture different exodus key ways 
shore symmetric peer peer structure 
participating processor runs shore server process regardless local disks 
client process interacts shore communicating local shore server see 
design scalable run single processor network workstations large parallel processor intel paragon ibm sp 
second shore supports notion value added server 
server code modularly constructed relatively simple users build application specific servers facing client level server problem 
example paradise project shore server build geographic information system 
shore intended complete system esm 
addition flexible process structure support typed objects shore provides services users find attractive including name space access sdl closely related odl data definition language proposed standard odmg oodb vendor consortium cat 
workstation app app shore app shore workstation shore shore app server server shore process architecture 
control model similar unix unix compatible interface legacy software tools openness area language bindings traditional database services associative data access indexing clustering 
remainder organized follows 
section provides overview services provided shore including file system database features 
shore process architecture described section 
section describes tools developing writing parallel object oriented applications shore 
conclude section 
software described simply 
basic shore software operational system sufficiently complete binding run oo benchmark cdn client server parallel environments 
expecting full release version shore mid 
basic shore system concepts hybrid system shore may described file system augmented database features dbms file system features 
section describe basic features shore explaining combines important ideas areas order arrive system capable addressing variety application requirements discussed 
big picture shore collection cooperating data servers data server containing typed persistent objects 
organize universe persistent shore objects unix namespace provided 
unix named objects directories symbolic links individual typed objects counterpart unix plain files 
unix shore allows object accessed globally unique object identifier oid reused 
shore introduces new types objects including types pools described detail section 
type system shore objects language neutral supporting applications programming language language binding exists 
objects primary data content textual untyped binary data unix file system calls provided enable legacy applications existing language compilers cad tools access data content untyped manner 
shore structured peer peer distributed system node objects stored application program wishes execute contains shore server process talks shore servers interfaces locally executing applications caches data pages locks order improve system performance 
shore object basics shore object model database object models consists objects values persistent datum shore object object identity denoted unique object identifier oid structurally object container value value simple structured may include typed oids objects 
value type object 
behaviorally object set methods contents accessed manipulated 
internal structure methods available object dictated object type referred interface type shore object tagged type object captures information 
shore object lighter weight unix file may heavy support fine grained data structures customarily represented linked lists trees graph structures programs 
support flexibility dynamic structures efficiency logically contiguous blocks secondary storage shore allows object extended variable sized heap see 
core object described type 
heap system store variable sized components value strings variable arrays sets 
heap contain dynamic values similar top level objects independent identity example object destroyed dynamic values destroyed 
dynamic values linked local stored disk offsets start heap swizzled memory actual memory addresses 
commercial oodbms deu provides related facility objects values distinction main difference encapsulated values form set list array shore heap contain arbitrary data structure 
demand paging support large objects object heap closely resembles small object store database 
value ues object heap object core shore object structure 
file system features file system standpoint shore provides major services 
support object naming space management world persistent objects shore provides flexible object namespace 
second enable legacy unix file applications continue exist new shore applications developed mechanisms provided permit shore object data accessed unix file system calls 
shore object namespace shore provides tree structured unix namespace persistent objects reachable directly indirectly distinguished root directory 
doing shore gives users framework register individual persistent objects roots large persistent data structures framework provides richer naming environment single level persistent root directory exodus current oodbs 
realization framework involves extending set familiar unix object types directories symbolic links regular files cross pools modules type objects 
shore directory objects provide facilities unix directories 
familiar unix concepts path name subdirectory parent directory link hard symbolic root directory defined unix rt :10.1.1.100.7314
unix directory set pairs 
oid refer shore object system maintains unix invariant set directories forms single rooted tree 
directories objects contain called registered objects 
registered object contains superset unix attributes ownership commercial systems tree structured name space naming databases naming organizing individual persistent objects collections 
access permissions timestamps 
support lighter weight objects shore introduces new kind registered object called pool members pool called anonymous objects clustered near disk share unix attributes ownership pool 
anonymous objects path names accessed oid object 
operation enumerate contents pool accessed oid path name 
registered property orthogonal type type object created pool anonymous object directory registered object 
expect typical shore database vast majority objects anonymous registered objects serving roots entry points graphs anonymous objects 
preserve invariant objects reachable root directory system shore imposes different deletion semantics registered anonymous objects 
unix registered object explicitly deleted reclaimed system link count number directory entries referring drops zero 
anonymous object deleted time pool deleted empty 
oid soft may object refers deleted 
oids reused accidentally capture new object 
oids stored contents arbitrary objects stronger integrity guarantee impractical enforce 
shore introduces fundamental kinds objects modules type objects cross modules type objects similar pools anonymous objects respectively different deletion semantics preserve existence dependency objects types 
cross similar symbolic links provide way insert alias object directory name space 
symbolic link contains path name registered object cross contains oid arbitrary object 
cross symbolic links soft permitted 
intended primarily unix compatibility feature described section 
illustrates concepts 
directory smith contains entries project doc pool referring directory cross pool respectively 
registered object smith project entries contains pointers members pool 
sort directory entry points data struc semantics timestamps slightly different unix order efficiently maintainable retaining usefulness applications rely 
ture 
symbolic link smith project readme alias cross smith doc alias member pool 
attempt access path names unix compatibility interface resolve anonymous object 
smith pool smith smith project proj root project pool smith project entries entries smith project readme smith doc smith doc doc shore name space 
legacy unix tool support shore provides richer environment traditional file systems situations tools designed files need invoked database objects 
typical example provided project uses exodus 
improves current environments maintaining rich set attributes relationships object repository program sources object files specifications documents represents object directed graph intra inter object links represented oids 
tools developed part take full advantage rich structure occasionally necessary invoke existing tools compilers editors objects stored database 
possible approaches rewrite tools access objects copy contents object file operating copy back results keep contents permanently files storing metadata file names database 
approaches unsatisfactory various reasons 
solution generalized expanded shore provide special unix compatibility feature 
shore object may optionally designate range bytes text field 
compatibility library provides versions unix system calls open read write seek interpreting pathname arguments shore name space satisfying requests fetching updating text field objects 
registered objects text fields behave dev null read zero length ignore attempts change 
anonymous objects accessed cross 
applications re linked constructed nfs file server 
entire subtree shore name space mounted existing unix file system 
applications attempt access files portion name space unix kernel generates nfs protocol requests handled shore nfs server 
object oriented database features mentioned section important motivation shore rectify shortcomings exodus shared existing object oriented databases 
access control name space limitations addressed previous section 
process structure addressed section 
section describe design implementation shore type system indicate supports hardware language heterogeneity 
shore type system shore type system embodied shore data language sdl language shore types defined 
sdl quite similar nature object definition language odl proposal odmg consortium cat descended omg interface description language idl dialect rpc interface language osf distributed computing environment dce 
sdl started roughly time odmg omg idl starting point 
development odl proceed waiting odmg complete 
time odmg standards late design stage portions entirely clear internally consistent 
goals odmg somewhat different 
concentrate standardized interface existing oriented oodbs focus support inter language object sharing large namespace objects 
objects instances interface types types constructed interface type constructor 
interface types methods attributes relationships 
attributes interface type primitive types integer character real constructed types 
shore provides usual set type constructors enumerations structures arrays define relationships addition shore provides variety bulk types including sets lists sequences enable shore object contain collection objects 
shore provides notion modules enable related types grouped name scoping type management purposes 
provide brief taste sdl shows oo benchmark cdn types defined 
module oo const long enum forward declarations interface connection interface interface public attribute char ptype attribute long relationship set connection 
inverse relationship set connection 
inverse relationship ref 
partof inverse parts void long traverse op inout const void init long ref 
cp connection types contents file oo sdl 
shore language bindings shore intended allow databases built application written language accessed manipulated applications written object oriented languages clos 
capability important large scale applications vlsi cad efficiency simulating large chips clos smalltalk convenient writing associated design rule checking user interface code 
shore methods associated sdl interfaces written interest brevity details omitted 
languages shore language binding exists 
currently binding operational illustrate shore language binding concepts briefly discussing shore binding 
application oo benchmark created follows 
step write description types sdl 
oo example description saved file called oo sdl 
step sdl type compiler create type objects corresponding new types 
type compiler shore application creates type objects sdl definitions 
language specific tool case extract derive set class declarations special purpose function definitions type objects 
example generated code placed files oo oo header file oo included source files supply applicationspecific implementation member functions traverse source files manipulate instances oid type object compiled files catch version mismatches runtime 
fragment generated oo file shown 
data member types correspond directly sdl types languages offers direct support simple types 
shore types corresponding type sets language appropriate presentation sdl type generated 
shore presents sets collection types pre defined template classes parameterized types ref set 
class ref 
encapsulates oid overloading features behave pointer read instance 
class set connection 
encapsulates data structure containing set oids provides member functions enable contents accessed 
bindings planned course shore fully operational delivering performance binding 
note shore application create type objects 
instance write graphical schema design tool create type objects install database 
class public char ptype long long set connection 
set connection 
ref 
partof virtual void virtual long traverse op const virtual void init long ref 
cp additional sdl generated members included 
class generated oo sdl 
header file generated binder application programmer implement operations associated oo interfaces 
binding access simple data members provided safely techniques 
mentioned ref generated classes behave read pointers information atomic part printed function follows void ref 
cout 
type 
ptype 
part 


function directly access part type data members atomic part update 
attempts flagged error compiler 
similarly member functions update contents object flagged const sdl definition illustrated attempts call non const member function ref caught compiler 
modify object application call special generated member function update returns read write 
example code fragment directly exchanges attributes atomic part ref 
long tmp update update tmp function update coerces type ref 
non const 
runtime effect marking referenced object dirty changes transmitted server transaction commits 
member function declared const legal way accomplish exchange define member function follows void long tmp tmp definition invoked job 
ref 
update shore binding implements collection types similarly oodbs obj ont ver template type set connection contains member function members returns iterator 
example function extended print atomic part outgoing connections follows void ref 
cout 
type 
ptype 
part 


outgoing connections iter connection 
members ref connection 
null print cout 
oodb services shore provides support concurrency control locking crash recovery logging services integrated support data caching described 
shore provide users choice lower levels consistency recovery 
details reduced levels worked 
shore services include optimized object queries bulk types flexible user controllable notion sticky object clusters permit users cluster related objects 
shore architecture peer peer server communication section illustrates process structure shore 
shore executes group communicating processes called shore servers 
shore servers consist exclusively trusted code including parts system provided part standard shore release code value added servers added sophisticated users implement specialized facilities query shipping sql server introducing client level server problem described earlier 
application processes labeled app manipulate objects servers deal primarily fixed length pages allocated disk volumes managed single server 
applications trusted sense buggy malicious application modify objects authorized access particular corrupt metadata slot tables indexes directory structure 
shore server plays roles 
page cache manager 
cache may contain pages local volumes pages remote servers containing objects requested local client applications 
second server acts agent local application processes 
application needs object sends rpc request local server fetches necessary page returns object 
details provided section 
shore server responsible concurrency control recovery 
server obtains caches locks behalf local clients 
owner page server manages volume responsible arbitrating lock requests objects logging committing changes 
transaction management described detail 
process structure provides great deal flexibility 
acting owner page shore server performs role server traditional data shipping client server dbms acting agent application plays role client 
letting shore server assume roles allows data placement optimized workload 
example data largely private single user owned shore server user workstation 
location transparency application viewpoint provided architecture allows application workstation access local remote persistent data identical manner 
furthermore ability cache pages local server greatly reduce observed performance penalty accessing remote data 
applications running workstation access data largely private local shore server obtaining shared data shore servers 
query shipping architecture implemented higher level server sql server applications communicate directly remote servers 
shore software components language independent library depicts components shore software linked application 
application attempts dereference unswizzled pointer language binding generates call object cache manager language independent library lil 
disk volumes replicated 
client object cache language independent library application code rpc interface storage manager page cache shore vas interface server application server interface desired object lil sends rpc request local server fetches necessary page necessary reading local disk sending request server 
local operating system supports shared memory server uses deliver page objects lil quickly 
experimenting cache management strategies cache objects come free page requested object 
avoid paging object cache manager locks cache memory uses lru replacement grows large 
oids cache swizzled point entries object table 
level indirection allows objects removed memory transaction commits need track pointers 
lil contains unix compatibility library procedures emulate common file system calls open read seek 
lil responsible authenticating application server kerberos authentication system 
shore server shows internal structure shore server detail 
divided main components server interface communicates applications storage manager sm manages persistent object store 
server interface responsible providing oid contains volume identifier 
server uses global volume location service find appropriate server establishes network connection necessary 
shore servers data log application transaction index vas sm interface threads async io transaction mgr 
recovery mgr 
sm sm interface page cache lock table logical id cache sm core distributed transactions locking logging communication object operating system interface consistency page cache object access control name space shore vas nfs vas shore server components access shore objects stored sm 
manages unix name space structures described section 
application connects server server associates unix process state user id current directory name connection 
user id information checked registered objects accessed protect unauthorized access 
unix current directory name information provides context converting file path names absolute locations name space 
server interface example value added server vas 
vas nfs server described section 
vas provides alternative interface storage manager 
interact storage manager common interface similar rpc interface application processes server 
possible debug new vas client process migrate server added efficiency completely debugged 
example vas sql server provides query shipping interface relational database 
server interface lies storage manager 
shown sm viewed having sub layers 
highest interface consists primarily functions control transactions access objects indexes 
middle level comprises core sm 
implements records indexes transactions concurrency control recovery 
lowest level extensions core implement sql server vas example different shore server upper layers type system shore essentially thrown away facilities provided shore storage manager construction completely different customized server 
distributed server capabilities described section 
addition layers sm contains operating system interface packages multi threading asynchronous inter process communication 
implementation details detailed description storage manager scope 
subsection highlight important technical issues arise implementation cache consistency transaction management object identifier implementation 
cache consistency shore types caches object caches applications page caches maintained shore servers 
types caches managed differently 
shore servers page caches allowed retain contents transaction boundaries called inter transaction caching 
cache consistency maintained callback locking protocol hmn wr fc 
application server interface support upcalls 
requiring application processes respond remote procedure calls interfere synchronization mechanisms application programs threads packages graphics interviews networking interfaces 
object cache invalidated locks released transaction 
plan explore techniques extend object cache transaction boundaries shore project 
balance efficiency need fine grain concurrency shore uses adaptive version callback locking dynamically adjust granularity page vs object locking performed depending presence data conflicts 
adaptive algorithm notion lock de escalation lc jos 
transaction management application wishes commit transaction commit request sent local server 
transaction modified data owned multiple servers phase commit protocol relevant servers 
local server log coordinate distributed commit protocol delegate coordinator role server 
transactions access data owned local server commit locally 
peer peer architecture incurs additional overhead distributed commit necessary 
transaction rollback recovery facilities shore aries recovery algorithm extended client server environment shore 
client server distinction reflects roles played server respect object 
server owns object stores log object performs recovery operations object 
servers caching object behave clients generate log records shipped owner object 
initial implementation shore relies simple extension aries call redo server 
extension client ships dirty pages back server log records server receives log records client operations indicated log records 
easy implement advantage eliminating need send dirty pages back server 
primary disadvantage server may need reread pages flushed cache 
plan implement client server extension aries developed implemented exodus storage manager compare performance simpler redo server implementation 
oid implementation implementation object identifiers oids considerable impact rest object manager implemented performance 
shore storage manager uses types oids 
physical oid records actual location object disk logical oid position independent allowing transparent reorganization reclustering 
higher levels shore including object cache manager logical oids represent object 
logical oid consists byte volume identifier byte serial number 
designed long allow globally unique allowing independently developed databases combined 
large avoid reuse values conceivable operating conditions 
oid stored disk serial number recorded 
volume identifier assumed volume containing oid 
serial number identifies special forwarding entry contains full oid object identifier volume contains serial number relative volume 
map serial numbers physical oids remote logical oids volume contains tree index called lid index 
memory hash table cache translated entries 
server eagerly adds translations transaction translation cache 
example server receives request object logical oid generally computational cost redo small ignored especially compared cost receiving page data network 
currently cache requests page containing object object server 
page arrives server enters mappings objects page translation cache 
technique effectively reduces number lid index accesses lookup object lookup page objects 
parallelism shore goals shore able support parallel applications single threaded applications 
parallel environment challenge identify available sources parallelism define services interfaces allow applications exploit parallelism provide high performance implementations services 
divide parallelism inter transaction parallelism intra transaction parallelism 
inter transaction parallelism merely means running independent transactions concurrently multiple processors 
target architecture parallel shore shared multiprocessor 
multiprocessor commercial shared multiprocessor network workstations 
shore symmetric peer peer server architecture ideal basis constructing parallel persistent object store platform client server shore process node multiprocessor obtain object stored multiprocessor presenting object oid local server 
intra transaction parallelism easy identify priori 
way address needs large scale parallel applications noting persistent object store applications large slow accessing large amounts data object bases grow large storing large collections homogeneous objects 
primary target parallel shore provide framework operations large collections objects run parallel 
shore currently basic parallel construct shore parset short parallel set parset concept proposed kilian kil way adopting data parallel approach object oriented parallel programming 
ways expose parallelism 
set oriented queries parallelized way relational queries parallelized relational systems 
second coupled object oriented programming provide parallel set apply operation invokes method element parset parallel 
similar approach parallel apply arbitrary function member set filter operation bubba project mcc 
parallel shore distinguish forms primary secondary 
terms primary secondary analogy common database indexes 
primary physical implication primary data partitioning 
contrast secondary just logical collections objects denote set objects apply executed imply objects reside 
object number secondary primary parset 
due space constraints giving detailed description parset semantics implementation give informal description parallelize oo benchmark 
code currently running prototype parset implementation network workstations 
purposes discussion suffices know oo database contains set composite parts associated subgraph atomic parts 
parallel oo implementation composite parts stored parset distributed nodes system hashing composite part id node portion parset node looks shore collection 
processors node collection composite parts node composite parts forth 
illustrates process communication structure parallel shore application 
application parallel oo designated main master process running nodes system 
addition master process slave processes running nodes multiprocessor slaves forked master required exactly master lifetimes 
slave processes contain methods invoked objects loop waiting messages master process 
example suppose main program executes parset method apply composite parts composite part parset 
applied composite part traverses subgraph atomic parts contained composite part 
cause master send messages slaves saying apply composite parts partition parset 
slaves execute request parallel talking local servers detail appears 
attribute called separate oid composite part object fetching composite part objects object caches calling method 
shore server node master slave shore server node slave shore server node slave parset server parallel shore architecture parallelism just described largely transparent application programmer simply writes single threaded shore program containing parset apply calls 
slave code generated compile time necessary communication synchronization master slaves handled runtime system 
state information parset catalog information process ids port numbers obtained runtime system consulting parset server note executing composite part node may require access atomic objects residing node transparent case slave executing 
slave just requests objects local shore server responsible contacting shore servers remote objects needed 
slaves master share global oid space gives applications shared memory flavor processors share memory 
currently designing synchronization primitives support programming model oo implementation currently require primitives 
portability goal shore run wide range hardware platforms 
support goal parset implementation uses new threads package fm turn uses pvm sun interprocess communication 
pvm public domain message passing library writing parallel programs runs platforms ranging networks workstations multiprocessors 
portable parallel programming environment implementation hope ensure shore usable network workstations 
shore integration file system oodb concepts services 
file system world shore draws object naming services support lower cheaper degrees transaction related services object access mechanism legacy unix file tools 
oodb world shore draws data modeling features support associative access performance acceleration features 
provide scalability basis parallelizing system shore employs novel architecture including support symmetric peer peer server communication caching addition includes support extensibility value added server facility 
previous system exodus shore system publicly available anonymous ftp expect release shore occur mid 
paul adams marvin solomon 
overview software development environment 
proceedings fourth international workshop software configuration management baltimore md 
bancilhon briggs khoshafian valduriez 
fad powerful simple database language 
proc 
vldb conf brighton england 
cat cattell 
object database standard odmg 
morgan kaufmann san mateo ca 
cdf michael carey david dewitt daniel frank goetz graefe joel richardson eugene shekita 
architecture exodus extensible dbms 
proceedings twelfth international conference large data bases pages 
cdn michael carey david dewitt jeffrey naughton 
oo benchmark 
proceedings acm sigmod conference management data washington may 
carey franklin 
fine grained sharing oodbms 
submitted publication 
december 
deu deux system 
communications acm october 
dewitt luo patel yu 
paradise parallel geographic information system 
proceedings acm workshop advances geographic information systems november 
dewitt naughton shafer venkataraman 
parset design document 
unpublished manuscript november 
fc franklin carey 
client server caching revisited 
proceedings international workshop distributed object management edmonton canada august 
published distributed object management ozsu dayal eds morgan kaufmann san mateo ca 
fm edward felten dylan mcnamee 
user guide 
august 
michael franklin michael tan michael carey david dewitt 
crash recovery client server exodus 
proceedings conference management data pages june 
hmn howard menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
jos joshi 
adaptive locking strategies multi node data sharing environment 
proc 
th vldb conf barcelona spain sept 
kil michael kilian 
parallel sets objectoriented methodology massively parallel programming 
phd thesis harvard center research computing technology cambridge ma 
lc lehman michael carey 
concurrency control algorithm database systems 
proc 
rd int 
conf 
foundations data organization algorithms paris france june 
lamb landis orenstein weinreb 
objectstore database system 
communications acm october 
mohan lindsay pirahesh schwarz 
aries transaction recovery method supporting locking partial rollbacks write ahead logging 
acm transactions database systems march 
miller neuman schiller saltzer 
section kerberos authentication authorization system 
technical report project athena technical plan project athena cambridge ma december 
obj objectivity objectivity manual 

ont ontos ontos manual 

rcs joel richardson michael carey daniel schuh 
design programming language 
acm transactions programming languages systems july 
rt dennis ritchie ken thompson :10.1.1.100.7314
unix time sharing system 
communications acm july 
sandberg goldberg kleiman walsh lyon 
design implementation sun network filesystem 
usenix summer conference proceedings 
sun sunderam 
pvm framework parallel distributed computing 
concurrency practice experience december 
ver manual 

wr wang rowe 
cache consistency concurrency control client server dbms architecture 
proceedings acm sigmod conference denver june 

