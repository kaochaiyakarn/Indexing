dynamically configuring communication services service configurator pattern article appeared june report magazine 
rapidly growing collection communication services available internet 
communication service component server provides capabilities clients 
services available internet include www browsing content retrieval services alta vista apache netscape server software distribution services electronic mail network news transfer agents sendmail file access remote machines ftpd remote terminal access routing table management gated host user activity reporting fingerd network time protocols request brokerage services 
common way implement services develop separate program compile link execute program separate process 
static approach configuring services yields inflexible inefficient applications software architectures 
main problem static configuration tightly couples implementation particular service configuration service respect services application 
article describes service configurator pattern increases application flexibility performance decoupling behavior services point time service implementations configured applications 
article illustrates service configurator pattern distributed time service written example 
service configurator pattern implemented ways ranging device drivers modern operating systems solaris windows nt internet windows nt service control manager java applets 
jain douglas schmidt cs wustl edu schmidt cs wustl edu department computer science washington university st louis mo service configurator pattern intent decouples behavior services point time service implementations configured application system 
known super server motivation service configurator pattern decouples implementation services time services configured application system 
decoupling improves modularity services allows services evolve time independently configuration issues services located concurrency model execute services 
addition service configurator pattern administration services configures 
facilitates automatic initialization termination services improve performance factoring common service initialization termination patterns efficient reusable components 
section motivates service configurator pattern distributed time service example 
context service configurator pattern applied service needs initiated suspended resumed terminated dynamically 
addition service configurator pattern applied service configuration decisions deferred run time 
motivate pattern consider distributed time service shown 
service provides accurate faulttolerant clock computers collaborating local area networks wide area networks 
synchronized time services important require maintain accurate global time 
instance large scale distributed medical imaging systems require distributed time service globally synchronized clocks ensure patient exams accurately timestamped analyzed health care delivery system 
shown architecture distributed time service contains time server clerk client components time server answers queries time clerks 
clerk queries time servers determine correct time calculates approximate correct time distributed time algorithms updates local system time 
client uses global time information maintained clerk provide consistency notion time clients hosts 
common solution way implement distributed time service statically configure logical functionality time servers clerks clients separate physical processes 
approach hosts run time server processes handle time update requests clerk processes 
code fragment illustrates structure statically configured time server process clerk handler processes time requests clerks 
class clerk handler public svc handler sock stream public method called reactor requests arrive clerks 
virtual int handle input void read request clerk reply current time 
clerk acceptor factory accepts connections clerks creates clerk handlers 
typedef acceptor clerk handler sock acceptor clerk acceptor int main int argc char argv parse command line arguments 
options instance parse args argc argv set acceptor listen clerk connections 
clerk acceptor acceptor options instance port register reactor singleton 
reactor instance register handler acceptor accept mask run event loop waiting clerks connect perform time queries 
reactor instance handle events program uses reactor pattern acceptor pattern implement statically configured time server process 
host requires global time synchronization run clerk process 
clerks periodically update local system time values received time servers 
code fragment illustrates structure statically configured clerk process class communicates time server 
class time server handler 
class establishes connections time servers periodically queries latest time values 
class clerk public svc handler sock stream public initialize clerk 
clerk void time server handler handler iterator pattern connector pattern set connections time servers 
iterator iterator handler set iterator handler iterator advance connector connect handler time value timeout interval register timer expire seconds 
trigger call handle timeout method query time servers retrieve current time day 
reactor instance schedule timer timeout interval method implements clock synchronization algorithm computes local system time 
called periodically reactor timer mechanism 
int handle timeout void periodically query servers iterating handler set obtaining time updates time server 
time server handler handler iterator pattern query time servers iterator iterator handler set iterator handler iterator advance time value server time handler get server time compute local system time store shared memory accessible client processes 
private typedef unbounded set time server handler handler set typedef unbounded set iterator time server handler iterator set clerks iterator set 
handler set handler set connector factory establishes connections time servers creates time server handlers 
connector time server handler sock connector connector int main int argc char argv parse command line arguments 
options instance parse args argc argv initialize clerk 
clerk clerk run event loop periodically querying time servers determine global time 
reactor instance handle events program uses reactor pattern connector pattern implement statically configured clerk process 
client processes synchronized time reported local clerk 
minimize communication overhead current time stored shared memory mapped address space clerk clients host 
addition time service communication services file transfer remote login servers provided hosts execute separate statically configured processes 
traps pitfalls common solution patterns reactor acceptor connector improve modularity portability distributed time server shown configuring communication services static approach drawbacks service configuration decisions early development cycle undesirable developers may know best way locate distribute service components 
example lack memory resources wireless computing environments may force split client clerk independent processes running separate hosts 
contrast real time avionics environment necessary locate clerk server process reduce communication latency 
forcing developers commit prematurely particular service configuration impedes flexibility reduce performance functionality 
modifying service may adversely affect services implementation service component tightly coupled initial configuration 
hard modify service affecting services 
example real time avionics environment mentioned clerk time server statically configured execute process reduce latency 
distributed time algorithm implemented clerk changed existing clerk code require modification recompilation static relinking 
terminating process change clerk code terminate time server 
disruption service may acceptable highly available systems telecommunication switches call centers 
system performance may scale efficiently associating process service ties os resources descriptors virtual memory process table slots 
design wasteful services frequently idle 
processes wrong abstraction short lived communication tasks asking time server current time resolving host address request domain name service 
cases multithreaded active objects single threaded reactive event loops may efficient 
better solution convenient flexible way implement distributed services service configurator pattern 
pattern decouples behavior communication services point time services clerk server located process clerk may optimize communication eliminating need set socket connection server directly accessing server notion time shared memory 
configured application system 
service configurator pattern resolves forces need defer selection particular type particular implementation service late design cycle allows developers concentrate service functionality clock synchronization algorithm committing prematurely particular service configuration 
decoupling functionality configuration service configurator pattern permits applications evolve independently configuration policies mechanisms system 
need build complete applications systems composing multiple independently developed services require global knowledge service configurator pattern requires services uniform interface configuration control 
allows services treated building blocks integrated easily components larger application 
uniform interface services look feel respect configured 
turn uniformity simplifies application development promoting principle surprise need optimize control reconfigure behavior service run time decoupling implementation configuration possible fine tune certain implementation configuration parameters services 
instance depending parallelism available hardware operating system may efficient run multiple services separate threads processes 
service configurator pattern enables applications select tune behaviors run time information may available help optimize services 
addition adding new updated service distributed system performed requiring downtime existing services 
uses omt notation illustrate structure distributed time service designed service configurator pattern 
structure distributed time service base class provides standard interface configuring time servers clerks 
service configurator application uses interface initiate suspend resume terminate service obtain run time information service ip address port number 
services reside repository added removed repository service configurator application 
subclasses service base class appear distributed time service time server clerk 
subclass represents specific functionality distributed time service 
server service responsible receiving processing requests time updates 
service connector factory creates new connection server dynamically allocates new handler send time update requests connected server receives replies servers handlers updates local system time 
service configurator pattern distributed time service flexible managing configuration service components time service decoupling implementation issues 
addition service configurator provides framework consolidate configuration management communication services administrative unit 
applicability service configurator pattern services initiated suspended resumed terminated dynamically implementation service may change configuration respect related services remains configuration group collocated services may change implementations remain application system simplified composed multiple independently developed dynamically configurable services management multiple services simplified optimized configuring single administrative unit 
service configurator pattern dynamic re configuration undesirable due security restrictions case static configuration may necessary possible service configurator pattern statically configure services ensuring implementations statically linked main executable program 
termination service complicated tightly coupled context performed uniform manner service benefit dynamic configuration changes stringent performance requirements mandate need minimize extra levels indirection incurred os language mechanisms dynamic re configuration 
structure participants structure service configurator pattern illustrated omt notation structure service configurator pattern key participants service configurator pattern include service service specifies interface containing hook methods initialization termination service configurator application dynamically configure 
concrete service clerk server implements service hook methods service specific functionality event processing communication clients 
service repository service repository maintains repository services offered service configurator application 
allows administrative entities centrally manage control behavior configured services 
collaborations depicts collaborations components phases service configurator pattern interaction diagram service configurator pattern service configuration initializes calling method 
service initialized successfully service configurator adds repository manages controls 
service processing configured system service performs processing tasks servicing client requests 
processing executing service configurator suspend resume 
service termination service configurator terminates longer needed calling hook method 
hook allows service clean terminating 
terminated service configurator removes repository 
consequences benefits service configurator pattern offers benefits centralized administration pattern services single administrative unit 
helps simplify development automatically performing common service initialization termination activities opening closing files acquiring releasing locks 
addition administration communication services imposing uniform set configuration management operations initialize suspend resume 
section covers details parameters passed service activated 
increased modularity reuse pattern improves modularity reusability communication services decoupling implementation services configuration services 
addition services uniform interface configured encouraging reuse simplifying development subsequent services 
increased configuration dynamism pattern enables service dynamically reconfigured modifying recompiling statically relinking existing code 
addition reconfiguration service performed restarting service active services located 
increased opportunity tuning optimization pattern increases range service configuration alternatives available developers decoupling service functionality concurrency strategy execute service 
developers adaptively tune daemon concurrency levels match client demands available os processing resources choosing range concurrency strategies 
alternatives include spawning thread process arrival client request pre spawning thread process service creation time 
drawbacks service configurator pattern drawbacks lack determinism pattern hard determine behavior application services configured run time 
problematic real time systems dynamically configured service may perform predictably run certain services 
example newly configured service may consume excessive cpu cycles starving services causing deadlines 
reduced reliability application uses service configurator pattern may reliable statically configured application particular configuration services may adversely affect execution services 
instance faulty service may crash corrupting state information shares services 
particularly problematic multiple services configured run process 
increased overhead pattern adds extra levels indirection execute service 
instance service configurator initializes service loads service repository 
may incur excessive overhead time critical applications 
addition dynamic linking implement service configurator scope service configurator pattern ensure robust dynamic service reconfiguration 
supporting robust reconfiguration primarily matter protocols policies service configurator pattern primarily addresses re configuration mechanisms 
step common alternatives define service control services inherit interface base class services respond control messages define service repository maintain table service implementations select configuration specify command line mechanism specify user interface specify configuration file determine service execution reactive execution mechanism multi threaded active objects multi process active objects table steps involved implementing service configurator pattern pattern adds extra levels indirection method invocations global variable accesses 
implementation service configurator pattern may implemented ways 
section explains steps alternatives involved implementing pattern 
steps alternatives summarized table 
define service control interface basic interface services support enable service configurator configure control service service initialization provide entry point service perform initialization service 
service termination terminate execution service 
service suspension temporarily suspend execution service 
service resumption resume execution suspended service 
service information report information port number service name describes service 
basic approaches defining service control interface inheritance message inheritance approach service inherit common base class 
approach configurator framework java applets 
works defining base class containing number pure virtual hook methods follows class service public initialization termination hooks 
virtual int init int argc char argv virtual int fini void scheduling hooks 
virtual int suspend void virtual int resume void informational hook 
virtual int info char size init method serves entry point service 
service configurator initialize execution 
method allows service configurator terminate execution 
methods scheduling hooks service configurator suspend resume execution 
info method allows service configurator related information name network address 
methods impose uniform contract service configurator manages 
message way control communication services program service respond specific set messages 
possible integrate service configurator non oo programming languages lack inheritance ada 
windows nt service control manager scm uses scheme 
window nt host master scm process automatically initiates manages system services passing various control messages resume 
developer scm managed service responsible writing code process messages 
define repository service repository maintain service implementations objects executable programs dynamically linked library dlls 
service configurator uses service repository access service configured removed system 
service current status active suspended maintained repository 
service configurator stores accesses service repository information main memory file system kernel may operations report status processes threads 
select configuration mechanism service needs configured executed 
configure service requires specifying attributes indicate location service implementation executable program dll parameters required service run time 
configuration criteria specified various ways command line environment variables user interface configuration file 
centralized configuration mechanism simplifies installation administration services application consolidating service attributes initialization parameters single location 
determine service execution mechanism service dynamically configured service configurator executed various combinations reactive active object schemes 
alternatives examined briefly reactive execution single thread control service configurator execution services configures 
multi threaded active objects approach runs dynamically configured services threads control service configurator process 
service configurator spawn new threads ondemand execute services existing pool threads 
multi process active objects approach runs dynamically configured services processes 
service configurator spawn new processes demand execute services existing pool processes 
sample code code presents example service configurator pattern written 
example focuses configuration related aspects distributed time service section 
addition example illustrates patterns reactor pattern acceptor connector patterns commonly develop communication services object request brokers 
example service class omt class diagram shown represented server class class 
code section implements server clerk classes 
classes inherit service allowing dynamically configured application 
addition approach uses configuration mechanism explicit dynamic linking configuration file dynamically configure clerk server portions distributed time service 
service execution mechanism reactive event handling model single thread control 
example shows clerk component change algorithm uses compute local system time affecting execution components configured service configurator 
algorithm modified clerk component reconfigured dynamically service configurator 
code shown includes main driver function provides generic entry point service configurator application 
implementation runs unix posix win platforms ace obtained www www cs wustl edu schmidt ace html 
save space error handling code omitted 
time server class time server uses acceptor class accept connections clerks 
class uses acceptor pattern create handlers connection clerks want receive requests time updates 
design decouples implementation time server configuration 
developers change implementation time server independently configuration 
provides flexibility respect evolving implementation time server 
time server class inherits service base class defined section 
enables service configurator dynamically link unlink time server 
loading time server service repository service configurator invokes init hook 
method performs time server specific initialization code 
likewise fini hook method called automatically service configurator terminate service longer needed 
clerk handler processes time requests clerks 
class clerk handler public svc handler sock stream identical clerk handler defined second section 
class time server public service public initialize service linked dynamically 
virtual int init int argc char argv parse command line arguments get port number listen 
parse args argc argv set connection acceptor endpoint listen mode acceptor pattern 
acceptor open port register reactor singleton 
reactor instance register handler acceptor accept mask terminate service dynamically unlinked 
virtual int fini void close connection 
acceptor close methods info suspend resume omitted 
private parse command line arguments specified configuration file 
int parse args int argc char argv acceptor factory accepts connections clerks creates clerk handlers 
acceptor clerk handler sock acceptor acceptor port time server listens 
int port note service configurator suspend resume time server calling suspend resume hooks respectively 
clerk class clerk uses connector class establish maintain connections time servers 
connector class uses connector pattern create handlers connection time server 
handlers receive process time updates time servers 
class inherits base class 
time server dynamically configured service configurator 
service configurator initialize suspend resume terminate clerk calling suspend resume hooks respectively 
class communicates time server 
class time server handler public svc handler sock stream public get current time time server 
time value get server time void 
class establishes maintains connections time servers periodically queries calculate current time 
class clerk public service public initialize service linked dynamically 
virtual int init int argc char argv parse command line arguments host port specification server create clerk instance handles connection server 
parse args argc argv time server handler handler iterator pattern connector pattern set connections time servers 
iterator iterator handler set iterator handler iterator advance connector connect handler time value timeout interval register timer expire seconds 
trigger call handle timeout method query time servers retrieve current time day 
reactor instance schedule timer timeout interval terminate service dynamically unlinked 
virtual int fini void time server handler handler disconnect time servers 
iterator iterator handler set iterator handler iterator advance handler close remove timer 
reactor instance cancel timer info suspend resume methods omitted 
handle timeout method implements clock synchronization algorithm computes local system time 
called periodically reactor timer mechanism 
int handle timeout void periodically query servers iterating handler set obtaining time updates time server 
time server handler handler iterator pattern query time servers iterator iterator handler set iterator handler iterator advance time value server time handler get server time compute local system time store shared memory accessible client processes 
private parse command line arguments specified configuration file create clerks specified server 
int parse args int argc char argv typedef unbounded set time server handler handler set typedef unbounded set iterator time server handler iterator set clerks iterator set 
handler set handler set connector set connections servers 
connector time server handler sock connector connector clerk periodically sends request time update servers iterating list handlers 
clerk receives responses connected time servers recalculates notion local system time 
clients ask clerk current time receive globally synchronized time value 
configuring application located configuration code illustrates dynamic configuration execution application uses configuration file server clerk os process int main int argc char argv configure daemon 
service config daemon argc argv directive description dynamic dynamically link enable service static enable statically linked service remove completely remove service suspend suspend service removing resume resume previously suspended service table service configuration directives perform daemon services updates 
daemon run event loop completely program configures communication services dynamically constructor service config object 
method consults conf configuration file configure time server 
dynamic time server service dll time server time server port configure clerk 
dynamic clerk service dll clerk tango cs time server port time server port atomic clock lanl gov time server port polling frequency entry svc conf configuration file processed ace service configurator framework 
framework interprets directive command dynamically link designated service application process 
table summarizes available service configuration directives 
example entry svc conf file specifies service name time server service repository identify dynamically configured service 
time server factory function located dynamic link dll 
service configurator framework dynamically links dll application address space invokes time server factory function 
function dynamically allocates new time server instance follows service time server void return new time server final string parameter entry specifies environment variable containing port number server listen connections 
service configurator converts string argc argv style vector passes init hook time server 
method succeeds service stored service repository name time server 
second entry conf file specifies dynamically configure 
service configurator dynamically links dll dll application address space invokes clerk factory function create new clerk instance 
init hook passed names port numbers time servers tango cs atomic clock lanl 
addition option defines frequently clerk poll time servers 
distributed configuration suppose want locate time server order reduce memory footprint application 
re service configurator pattern required split conf file parts 
part contains server entry part contains entry 
services change virtue fact service configurator pattern decoupled behavior configuration 
shows configuration looks server clerk located process configuration looks split 
reconfiguring time server clerk reconfiguring application suppose need change algorithm implementation 
example may decide switch implementation berkeley algorithm implementation cristian algorithm outlined berkeley algorithm approach time server active component polls ma chine network periodically ask time 
responses receives computes aggregate notion correct time tells machines adjust clocks accordingly 
cristian algorithm approach time server passive entity responding queries clerks 
actively query machines determine notion time 
change time synchronization algorithm may necessary response characteristics time server 
instance machine server resides receiver server act passive entity cristian algorithm appropriate 
hand machine time server resides receiver implementation berkeley algorithm appropriate 
shows change clerk implementation corresponding change clock synchronization algorithm 
change takes place process separating server previously located 
ideally change algorithm implementation affecting execution services components time service 
accomplishing service configurator simply requires modification conf file terminate clerk remove clerk additional requirement service configurator process directive 
done generating external event unix signal rpc notification windows nt registry event 
receipt event application consult configuration file terminate execution clerk service 
service configurator call method clerk terminate execution clerk component 
execution services affected 
clerk service terminated changes algorithm implementation 
code recompiled relinked form new dll 
similar approach taken add clerk service back service configurator 
configuration file modified new directive specifying clerk dynamically linked follows reconfigure new clerk 
dynamic clerk service dll clerk tango cs time server port time server port atomic clock lanl gov time server port receiver intercepts short pulses national institute standard time nist provide universal coordinated time utc public 
state diagram service lifecycle polling frequency external event generated causing process reread configuration file add clerk component repository 
clerk component execution method called service configurator framework 
shows state diagram lifecycle service clerk service 
note entire process terminating removing clerk service active services affected changes implementation reconfiguration clerk service 
ease able substitute new service implementation exemplifies flexibility offered service configurator pattern 
known uses service configurator pattern widely system application programming environments including unix windows nt ace java applets modern operating system device drivers modern operating systems solaris windows nt provide support dynamically configurable kernel level device drivers 
drivers linked unlinked system dynamically fini info hooks 
operating systems service configurator pattern allow administrators reconfigure os kernel having shut recompile statically relink new drivers restart system 
unix network daemon management service configurator pattern manage unix network daemons 
widely available network daemon management frameworks listen 
frameworks consult configuration files specify service names standard internet telnet daytime port numbers listen clients connect services executable file invoke perform service client connects 
frameworks contain master acceptor process monitors set ports associated services 
client connection occurs monitored port acceptor process accepts connection request appropriate pre registered service handler 
handler performs service reactively active object returns results client 
windows nt service control manager scm windows nt service control manager scm port monitor se 
provide built support listening set ports dispatching server processes demand client requests arrive 
provides interface allows master scm process automatically initiate control pause resume terminate administrator installed services registry access 
services run separate threads single service daemon process 
installed service individually responsible configuring monitoring communication endpoints general socket ports 
instance control named pipes shared memory 
adaptive communication environment ace framework ace framework provides set mechanisms configuring controlling communication services dynamically 
ace service configurator extends mechanisms provided inetd listen automatically support dynamic linking unlinking communication services 
code contained section shows ace framework implement distributed time service 
mechanisms provided ace influenced interfaces configure control device drivers modern operating systems 
targeting kernel level device drivers configurator framework focuses dynamic configuration control objects 
java applets applet mechanism java uses service configurator pattern 
java provides support downloading initializing starting suspending resuming terminating applets 
providing methods start initiate terminate threads 
method java applet access thread running andthen issue control messages suspend resume 
presents example illustrates service configurator pattern java applets 
related patterns intent service configurator pattern similar configuration pattern 
configuration pattern decouples structural issues related configuring services distributed applications execution services 
configuration pattern frameworks configuring distributed systems support construction distributed system set components 
similar way service configurator pattern decouples service initialization service processing 
primary difference configuration pattern focuses active composition chain related services service configurator pattern focuses dynamic initialization service handlers particular endpoint 
addition service configurator pattern focuses decoupling service behavior service concurrency strategies 
manager pattern manages collection objects assuming responsibility creating deleting objects 
addition provides interface allow clients access objects manages 
service configurator pattern manager pattern create delete services needed maintain repository services creates manager pattern functionality dynamically configuring initializing suspending resuming terminating service created manager pattern added fully implement service configurator pattern 
service configurator reactor pattern perform event demultiplexing dispatching behalf configured services 
likewise dynamically configured services execute long periods time active object pattern 
administrative interfaces configuration files guis service configurator system provide facade 
facade simplifies management control applications executing service configurator 
virtual methods provided base class callback hooks 
hooks service configurator initiate suspend resume terminate services 
class described section may created factory method 
allows application decide type ofservice subclass create 
concluding remarks article describes service configurator pattern illustrates decouples implementation services configuration 
decoupling increases flexibility extensibility services 
particular service implementations developed evolved time independently issues related service configuration 
addition service configurator provides ability reconfigure service modifying recompiling statically relinking existing code 
service configurator pattern administration services configures 
centralization simplify programming effort automating common service initialization tasks opening closing files acquiring releasing locks 
addition centralized administration provide greater control lifecycle services 
service configurator pattern applied widely contexts 
article distributed time service written example demonstrate service configurator pattern 
ability decouple development components distributed time service configuration system exemplifies flexibility offered service configurator pattern 
decoupling allows different clerks developed different distributed time algorithms 
decision configure particular clerk run time decision yields greater flexibility 
article showed service configurator pattern dynamically reconfigure distributed time service having modify recompile statically relink running servers 
service configurator pattern widely contexts device drivers solaris windows nt internet inetd windows nt service control manager ace framework 
case service configurator pattern decouples implementation service configuration service 
decoupling supports extensibility flexibility applications 
pyarali harrison schmidt design performance object oriented framework high performance electronic medical imaging usenix computing systems vol 
november december 
accuracy clock synchronization achieved tempo berkeley unix bsd ieee software engineering vol 
pp 
july 
cristian probabilistic clock synchronization distributed computing vol 
pp 

schmidt reactor object behavioral pattern concurrent event demultiplexing event handler dispatching pattern languages program design coplien schmidt eds reading ma addison wesley 
schmidt design patterns initializing network services introducing acceptor connector patterns report vol 
november december 
schmidt connector design pattern actively initializing network services report vol 
january 
schmidt suda object oriented framework dynamically configuring extensible distributed communication systems iee bcs distributed systems engineering journal special issue configurable distributed systems vol 
pp 
december 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
pree design patterns object oriented software development 
reading ma addison wesley 
stevens unix network programming edition 
englewood cliffs nj prentice hall 
unix system network programming 
reading ma addison wesley 
jain schmidt service configurator pattern dynamic configuration services proceedings rd conference object oriented technologies systems usenix june 
crane magee design patterns binding distributed systems oopsla workshop design patterns concurrent parallel distributed object oriented systems austin tx acm oct 
buschmann manager design pattern proceedings rd pattern languages programming conference september 
schmidt active object object behavioral pattern concurrent programming proceedings nd annual conference pattern languages programs monticello illinois pp 
september 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 

