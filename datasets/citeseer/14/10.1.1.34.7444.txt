weak consistency architecture distributed information services richard golding ucsc crl july concurrent systems laboratory computer information sciences university california santa cruz santa cruz ca services provided wide area networks internet challenges 
reliability performance scalability expected services requires implemented multiple replicated servers 
possible architecture implements replicas process group 
architecture provides scalability availability handles portable computer systems minimizes effect users 
key principles architecture component independence process group protocol provides small summaries database contents caching database slices quorum multicast client server communication protocol 
distributed bibliographic database system serves example 
keywords weak consistency process group quorum multicast component independence scalability fault tolerance 
information services soon available internet 
services provide access specialized information internet host 
bulk systems centralize parts service centralizing entire system breaking service pieces implementing piece centralized application 
architecture building distributed information services drawing examples bibliographic database system 
architecture emphasizes scalability fault tolerance application respond gracefully changes demand site network failure 
uses weak consistency replication techniques build flexible distributed service 
start defining environment architecture operate goals 
give overview architecture followed sections detailing components weak consistency process groups quorum multicast protocols mechanisms cache predefined slices subsets database 
environment internet behaviors accounted designing information service 
include latency required send messages affect response time application communication unreliability may require robust communication protocols 
hosts ethernet exchange pair datagram packets milliseconds hosts continent may require milliseconds 
hosts different continents require longer 
packet loss rates common go higher golding 
internet single points failure usually partitioned non communicating networks 
difficult environment building distributed applications 
application architecture handle vast number users access widely available service 
internet includes hosts potential user base millions numbers expected increase rapidly 
archie anonymous ftp location service reported order queries day queries second servers november 
archie system specialized service limited audience compared traditional information services general public newspapers library card catalogues 
anecdotal evidence points current services nearly queries second 
despite environment users expect service behave provided local system 
studies shown people best response time second queries presenting new information queries provide additional details schatz 
furthermore users expect able service long local systems functioning 
especially difficult expectation meet portable systems system may disconnected network long time may semi connected expensive low bandwidth connection 
researchers investigating file systems tolerate disconnection kistler alonso 
term process refers process running site 
sites processor nodes network workstation file server 
server processes access pseudo stable storage disk affected system crash 
sites loosely synchronized clocks 
sites processes fail crashing fail send invalid messages processes corrupt stable storage 
processes temporarily fail recover 
sites failure modes temporary recoverable failures permanent removal service 
network sufficiently reliable processes eventually exchange messages need free value provided darrell long tracking internet population part longitudinal reliability study long long 
partitions 
semi partitions possible low bandwidth connection available sites rest network 
principles general principles guiding solutions 
service replication general mechanism meeting availability demands enabling scalability 
replication dynamic new servers added removed accommodate demand changes 
system asynchronous servers independent possible requires synchronous cooperation large numbers sites 
improves communication site failure tolerance 
local communication faster long distance communication possible 
solutions prefetching caching possible improve response time 
service secure degree appropriate possible client processes trust information provided service service providers accurately charge service needed 
architecture minimize effect user 
system weak consistency architecture implement distributed bibliographic database system 
project aims evaluate architecture convenience performance 
system derived system developed hewlett packard laboratories years wilkes 
system emphasized sharing bibliography information research group 
users search database keywords enter new changed 
extended handle multiple databases distributed widely dispersed sites 
databases specialized particular topics operating systems organization technical reports 
database replicated sites internet users create copy interesting parts database 
user enters new copy propagated copies 
system includes simple mechanism notifying users interesting papers entered database 
stores format similar refer shown 
type unique mnemonic tag golding 
tags determined users potentially collide system internally uses unique identifier consisting timestamp plus address site created 
stored hashed files indexed tag keyword 
location information database inference engine system determine best way provide user copy 
architecture replication cornerstone architecture 
set replicated servers cooperate provide service shown 
client processes service contacting server process 
server processes turn communicate propagate update information 
multiple servers improve communication locality 
clients communicate server long distance communication 
servers clients communicate closest 
reduces communication latency decreases load communication imposes internet 
approach place server geographic region organization 
course clients able identify nearby servers maintain performance nearby sites fail problem discussed section 
techreport type golding tag richard golding kim taylor group membership epidemic style ucsc crl ucsc 
apr ftp postscript ftp cse ucsc edu pub tr ucsc crl ps new lightweight group membership mechanism allows temporary inconsistencies membership views 
mechanism uses epidemic communication techniques ensure group members eventually converge consistent view membership 
members join leave groups show mechanism resilient gamma members failing crashing number members group 
distributed systems weak consistency replication lightweight group membership process groups example 
portable portable server full server slice server client client client client slice server full server portable client workstation client slice server workstation server workstation system architecture 
local area networks nearby server communicate distant servers 
portable systems may include slice server maintains copy part database 
replicated servers help meet goal highly available reliable service 
service available long clients remain connected server server functioning 
study workstation reliability long shows hosts available better time mean time failure mttf weeks 
study hosts north america respond polled time golding indicating long term network failure probably uncommon 
study showed communications reliable closer sites 
architecture expected provide nearly complete availability 
server maintains copy database 
simplicity database entry assumed unique key 
servers maintain copy full database 
maintain caches slices information discussed section 
cache arbitrary collection database entries slice subset database defined query similar relational database view 
example slice maintain copy entries 
servers organized process group 
servers group communication protocol multicast message group need perform database operation 
client processes send request messages just server forwards request needed servers multicast 
servers added removed follow group membership protocol inform servers obtain copy database 
servers coordinate operation provide consistent service answers provided server contradict provided 
consistency controlled group communication protocol state server determined messages received 
topic discussed section 
eventually weakly consistent communication protocols perform synchronous updates 
messages delivered site propagated asynchronously 
answer server gives client query depends server observed update 
eventually server observe update 
existing information systems usenet quarterman xerox grapevine system schroeder similar techniques 
users bibliographic database worried update takes hours propagate server long updates available right away server 
delayed propagation means clients wait distant sites updated faulttolerance service depend client behavior 
allows messages transferred bulk communication protocols provide best efficiency high bandwidth high latency networks 
transfers occur peak times 
servers disconnected network period time updated reconnected 
hand clients able tolerate inconsistency service may need provide mechanism reconciling conflicting operations 
updates take form differences text updates applied order site 
update may occasionally superseded collisions 
group processes communicating way organized weak consistency process group 
propagating updates server form logical asynchronous group multicast operation immune temporary crashes 
developed protocols weak consistency group communication adding removing servers group 
detailed section 
weak consistency process groups replicated services implemented process group 
members group group communication protocols communicate group membership protocols determine processes group 
membership communication protocols closely related membership protocol usually uses form communication protocol send membership information processes communication protocol uses membership information identify processes receive messages 
weak consistency protocols guarantee messages delivered members guarantee 
section discuss weak consistency compares kinds consistency detail protocols weak consistency group communication membership 
kinds consistency service provided process depends messages received application level consistency depends communication consistency 
communication protocols provide guarantees 
message delivery 
messages delivered reliably case guaranteed arrive best effort meaning system attempt deliver message guaranteed 

delivery ordering 
messages delivered processes order different order received 
total ordering means processes see messages order order necessarily order messages sent 
causal ordering implies messages potential causal relation delivered order replicas lamport ladin 
messages causal relation delivered different orders different processes 
messages delivered database site differs correct global value constant pu barbar 
weaker orderings include process fifo channel ordering messages particular process delivered order streams messages different processes may interleaved arbitrarily 
possibility guaranteeing particular order 

time delivery 
communication protocol deliver messages synchronously bounded time eventually finite unbounded time 
general strong guarantees require multiphase synchronous protocols weaker guarantees allow efficient asynchronous protocols 
weak consistency architecture provides reliable delivery modified produce delivery orderings guarantees eventual message delivery 
particular non zero probability processes received messages processes guaranteed agree finite unbounded time messages sent 
grapevine schroeder wide area systems weak consistency 
system replicated data updated site results propagated sites background 
updates propagated ways 
site direct mail unreliable multicast get update sites possible 
rumor propagate updates site 
pairs sites periodically exchange known updates anti entropy session mutually consistent 
methods anti entropy guaranteed delivery sites 
long system uses weak consistency groups 
uses group communication coordinate group processes periodically retrieve uptime statistics internet hosts 
list hosts polled experimental results propagated group communication protocols outlined section 
group communication developed new group communication protocol provides reliable eventual delivery called timestamped anti entropy golding 
protocol fault tolerant messages delivered process group processes temporarily fail disconnected network 
send message group process appends timestamp information writes log stable storage 
time time site selects partner site exchange logs anti entropy session 
addition processes maintain summary timestamps messages received 
summaries exchanged step anti entropy sessions allow process send messages received 
unreliable multicast propagate message quickly anti entropy sessions ensure message delivered sites multicast 
protocol meets architectural goals 
provides asynchronous communication mechanism allows replicas independent 
anti entropy sessions involve replicas mechanism scale large dynamically changing groups 
sites tend select nearby partners anti entropy minimizing long distance communication 
protocol handles disconnected failed sites 
replica unavailable messages accumulate replica logs transmitted replica available 
summaries provide compact way portable systems measure far date information measure prompt user plug machine network information 
tradeoffs protocol blocking replicas maintain fault tolerant logs timestamps appended message 
operation coordinated entire group total consistency preserved delayed request message received acknowledged process group 
time request message stored disk affected failure recovery 
message generate variety different message delivery orderings including total causal process ordering 
causal orderings possible process clocks meet lamport happens condition lamport 
execute protocol process maintain data structures message log timestamp vectors mattern 
maintained stable storage corrupted site process crashes 
site maintain clock loosely synchronized processes 
message log contains messages received process log list sender id timestamp message 
timestamped messages entered log receipt removed processes received 
sender identification timestamp order bytes 
messages eventually delivered log applied database 
processes maintain summary timestamp vector record updates observed summary vector list process id timestamp 
process records timestamp process received messages generated time process maintains timestamp timestamp vector process group 
vector provides fast mechanism transmitting summary information state process 
written terms log 
update information retrieved database contents log technically necessary 
grapevine demers technique 
developed similar protocol requires state process allows unsynchronized clocks 
alternate protocol discovered independently agrawal agrawal 
process maintains acknowledgment timestamp vector record messages acknowledged processes acknowledgment vector list process id timestamp 
process holds timestamp process knows received message sender timestamp equal process periodically sets entry acknowledgment vector minimum timestamp recorded summary vector 
mechanism progress long process clocks loosely synchronized acknowledgment vector updated regularly 
process determine group member process observed particular message looking local acknowledgment vector 
time time process select partner process start anti entropy session 
session begins processes allocating session timestamp exchanging summary acknowledgment vectors 
process determines messages observed summary timestamps greater corresponding ones partner 
messages retrieved log sent process reliable stream protocol 
step exchange fails process abort session 
session ends exchange acknowledgment messages 
successful session processes received set messages 
processes set summary acknowledgment vectors elementwise maximum current vector received process 
anti entropy sessions completed update messages delivered log database unneeded log entries purged 
system guarantees processes observe messages order messages timestamp summary vector delivered 
process weaker orderings allowed messages delivered immediately receipt 
log entry purged process observed 
true minimum timestamp acknowledgment vector greater timestamp log entry 
reliable delivery guarantee met important case process permanently fails loses data 
weak consistency communication scheme free window vulnerability exist data sent processes 
practice duration reduced disseminating new updates rapidly real networks allow complete certainty 
group membership group membership protocol provides mechanisms listing group membership creating new group joining leaving group recovering member failure 
group communication protocol uses information identify sites receive multicast messages 
section sketches weak consistency group membership protocol details proofs correctness reported golding 
process maintains eventually consistent view membership indicating status member view list process id status timestamp 
views updated anti entropy sessions eventually processes reach agreement membership stops changing 
inconsistent group views system vulnerable failure 
process contact processes view transitive closure views kept equal group membership 
knows graph formed membership views incorrect process know fails 
ensure knows graph stays correct failures graph connectivity greater 
initialize new group process creates new view 
join group finds sponsor processes group 
processes insert views send resulting view back leave group marks status leaving waits process observe status change 
waiting performs anti entropy sessions originate messages 
fails outside mechanism inform functioning member process 
process marks failed view 
information propagates processes re establishing connectivity way 
contrast system previous group membership mechanisms ensure greater consistency group views expense latency communication overhead 
isis system birman birman group membership mechanism cristian cristian built top synchronous atomic broadcast protocols provide process sequence group views 
system little maintains logically centralized group view atomic transactions 
performance disadvantages weak consistency process groups pointed section operations delayed request messages observed group require disk message logs messages lost sites fail simultaneously 
magnitude problems depend fast messages propagated group determined simulation 
system server processes modeled markov system states state labeled number processes available number observed update 
data loss due permanent site failure appears negligible systems internet sites stay service years 
probability losing message depends ratio ae rate sites perform anti entropy rate permanent site failure 
sites perform anti entropy hourly sites remain service years ae probability failure 
usual approximations stable storage delayed writeback volatile storage negligible effect 
size logs function time required propagate message group member 
time required increases approximately log number processes reasonable update read rates information propagate sites needed 
shows distribution time required reach consistency different numbers processes 
presenting inconsistent information users inconsistent information confusing users 
user finds newly added sends message user discussing second user may able find propagated right servers 
problem remedied making information available users propagated may information unavailable quite time 
system provides hybrid solution allows users immediate access new information 
maintains pending copy inconsistent database entries 
users access pending copies appending pending suffix tags 
consistent copy available unmodified tag 
server attempts apply changes pending copy received changes may applied order different order applied final consistent copy 
time multiples mean propagation time sites sites sites sites sites sites sites sites time required propagate message processes 
nearby servers replicated service communications local clients able locate closest servers 
servers similar mechanism bias partner selection favor nearby servers 
investigated quorum multicast protocols preferred sites golding golding 
protocols ordering sites attempt communicate best 
sites ordered predictions communication latency failure bandwidth 
quorum multicast select sites quorum multicast protocols allow clients generally communicate nearby sites falling back distant sites nearby ones failed 
protocols originally developed implementing majority voting replication protocols provide exactly communication locality fault tolerance needed communication single server 
semantics quorum multicast define interface quorum multicast message sites reply count replies exceptions reply count met 
message sent reply count sites 
responses received operation succeeds fails 
way returns set responses received 
quorum multicasts client server communication setting sites list servers reply count 
servers ordered nearest farthest protocol select nearby servers distant ones 
variations protocol uses different policy handle site communication failure 
tuned declare possible failure nearby site early improving communication latency site expense extra messages 
variations provide number messages latency milliseconds distribution communication latency 
measured maple ucsc edu sci kun nl average latency milliseconds 
different policies retrying communication nearby sites may failed 
performance prediction problem client site able rank servers expected communication performance quorum multicast 
expected performance prediction communication latency failure bandwidth 
operation requires small amount information moved sites message processing latency dominate performance 
large amounts information transferred bandwidth dominate 
prediction biased probability client communicate server 
detailed examination problem available golding 
predictions derived statically topology network dynamically performance samples 
topology internet quite complex detailed topological models available 
approximations topological information hop counts shown poor performance predictors golding 
dynamic prediction generally accurate 
communication latency predicted moving average samples 
moving average time sequence defined wa gamma gamma estimator biased weight older samples heavily adjusting parameter method implementations tcp jacobson 
assumes latency normally distributed computes estimate variance determine failure timeouts 
actual distribution generally similar 
normally distributed predictable 
latency predictions biased probability site respond 
site may respond message get crashed 
moving average probability message failure combined packet timeout expected latency give expectation gamma sample number observed latency failed messages expected time expected time communication latency 
samples longer trace measured maple ucsc edu sci kun nl 
packet timeout reported failed messages 
graph includes estimation curves showing effect different weights moving average estimator 
shows estimation responds sequence samples 
experience shown estimator 
bandwidth considered rank servers example system selecting site retrieve copy 
unfortunately bandwidth predictable latency 
shows typical bandwidth distribution 
distribution nearly uniform consequently high variance 
evaluated number prediction methods bandwidth moving average prediction appears 
prediction methods moving averages samples accurate 
time site communicates server log communication statistics database sites local area network pool results increase number samples 
quorum multicast techniques cause samples come nearby sites 
periodically dropping sites database ensure accurate prediction potential servers keep database size small 
database samples available local organization portable systems find database connect internet 
caching prefetching multiple servers bring information closer clients necessarily information local 
clients particularly portable systems disk space store entire database 
clients disconnected portable systems operate information local 
systems perform better information local network 
caching prefetching information personal organization wide servers meet need 
cache slice servers play different roles 
cache servers maintain copies accessed database sample fraction typical bandwidth distribution 
measured beowulf ucsd edu lcs mit edu 
entries improve performance site organization repeatedly accesses small set database entries 
slice servers prefetch database entries near user specified interests 
slices provide way group information accessed entries 
caches slices differ handling new database entries slice servers store copy new entry matches predicate cache servers 
alonso barbar garcia molina researched issues systems bounded inconsistency alonso 
point slices call quasi copies similar materialized views relational database 
views entries slice determined evaluating expression form query database 
system slice coherency condition specifies far date entries slice 
weak consistency cache server stores random subset database entries 
similar servers store full database copy maintains message log summary acknowledgment vectors 
periodically perform anti entropy sessions full servers propagating updates originated servers receiving updates entries cached 
cache server unable answer client queries keyword searches database full database copy 
queries performed full slice server 
slice servers weak consistency architecture act ordinary servers store selection condition addition database log timestamp vectors 
selection condition predicate database entries 
simplicity assume predicate disjunctive normal form form client queries slice server server determine satisfy query query equivalent subset slice predicates 
example slice server answer query stored australian animals server satisfy query query processed server 
domain name service forwarding recursive server forwards query sever iterative informs client servers answer query 
recursive forwarding simple clients increases dependence clients server correctness 
slice server conducts anti entropy sessions maintain information 
sessions similar ordinary ones selection predicate passed partner information flows 
slice server perform sessions full servers 
full server sends updates entries interest slice server slice server sends updates originated 
users local network may share common slice server 
combined selection condition union individual users conditions union computed log time predicates disjunctive normal form 
selection predicates need changed time time reflect changing user interest 
slice server needs add slice predicate potentially increases information maintains 
server computes difference old new predicates performs special anti entropy session consistent server retrieve database entries matching difference predicate 
remove predicate potentially narrowing server scope server discard consistent database entries communicating servers 
slicing mechanism particularly useful portable computing systems 
systems may disconnected network connected low bandwidth wireless link 
user create small slice server system keep important information local 
volume updates slice may small send wireless link 
slice server obtain summary timestamp vector full server determine updates slice lacks 
difference exceeds bound slice server prompt user connect machine higher bandwidth network telephone connection get new information 
slices resource discovery information services split information separate databases users private copies reflect different administrative domains 
multiple databases exist separate problem finding databases added 
usual solution database location service 
built architecture 
user specify databases want specifying selection condition entries 
condition build slice user queries routed databases 
new databases available added slice available user 
user install agent automatically create slice new database user selection condition 
principles put forward ideas 
weak consistency architecture adheres 
architecture uses weak consistency process groups replication 
having multiple servers provides fault tolerance allows service scale large user populations 
weak consistency protocols expressly designed allow servers added removed disturbing normal operation meeting goal dynamic server group 
protocols allow servers operate asynchronously independently 
ensure servers continue function servers failed 
quorum multicast mechanism enables local communication 
clients quorum multicast protocols dynamically determined performance predictions communicate nearby servers 
performance prediction information packaged portable systems find accurate prediction database matter connected internet 
slicing allows local sites store small subset larger database 
slice server prefetch information user interests 
portable systems local slice server disconnected internet 
continuing parts weak consistency architecture represent progress 
time writing system uses basic weak consistency group communication membership protocols provide slice cache servers 
mechanism finalized 
performance prediction mechanisms subject ongoing research 
conducting long term performance study internet improve analysis prediction methods 
discussion performance prediction service implemented 
servers take different roles control access databases 
servers allow queries updates allow queries 
addressed security authentication problems ignored actual implementation 
appears new model authentication required weak consistency systems central authentication key server bottleneck 
acknowledgments supported part fellowship santa cruz operation concurrent systems project hewlett packard laboratories 
darrell long kim taylor george neville neil provided helpful comments 
peter danzig prompted investigation resource discovery problem 
system developed conjunction john wilkes hewlett packard laboratories received assistance computer systems research group project uc berkeley 
system obtained writing author golding cis ucsc edu 
agrawal agrawal 
efficient dissemination information computer networks 
computer journal december 
alonso rafael alonso daniel barbar luis 
increase node autonomy distributed file systems 
proceedings th ieee symposium reliability distributed systems october 
alonso rafael alonso daniel barbar hector garcia molina 
data caching issues information retrieval system 
acm transactions database systems september 
barbar daniel barbar hector garcia molina 
case controlled inconsistency replicated data position 
proceedings workshop management replicated data houston texas pages luis felipe cabrera francois aris editors november 
birman kenneth birman thomas joseph 
reliable communication presence failures 
acm transactions computer systems february 
birman kenneth birman robert cooper barry 
programming process groups group multicast semantics 
technical report tr january 
department computer science cornell university 
cristian cristian 
probabilistic approach distributed clock synchronization 
proceedings th international conference distributed computing systems newport beach ca pages 
ieee computer society press 
demers alan demers dan greene carl hauser wes irish john larson scott shenker howard sturgis dan swinehart doug terry 
epidemic algorithms replicated database maintenance 
operating systems review january 
alan peter deutsch 
archie electronic directory service internet 
proceedings winter usenix conference san francisco january pages january 
golding richard golding 
distributed epidemic algorithms replicated tuple spaces 
technical report hpl csp june 
concurrent systems project hewlett packard laboratories 
golding richard golding 
accessing replicated data large scale distributed systems 
master thesis published technical report ucsc crl june 
computer information sciences board university california santa cruz 
golding richard golding 
performance prediction internet progress report 
technical report ucsc crl june 
computer information sciences board university california santa cruz 
golding richard golding darrell long 
quorum oriented multicast protocols data replication 
proceedings th international conference data engineering tempe arizona february pages february 
ieee computer society press 
golding richard golding kim taylor 
group membership epidemic style 
technical report ucsc crl april 
computer information sciences board university california santa cruz 
jacobson van jacobson 
congestion avoidance control 
proceedings sigcomm pages 
kistler james kistler satyanarayanan 
disconnected operation coda file system 
proceedings th acm symposium operating systems principles asilomar pacific grove ca pages october 
association computing machinery sigops 
ladin ladin barbara liskov shrira 
lazy replication exploiting semantics distributed services 
position th acm sigops european workshop bologna september 
published operating systems review january 
lamport leslie lamport 
time clocks ordering events distributed system 
communications acm 
little mark little santosh shrivastava 
replicated resilient objects 
proceedings workshop management replicated data houston texas pages november 
long darrell long john carroll park 
study reliability internet sites 
proceedings th ieee symposium reliability distributed software database systems pisa italy pages september 
institute electrical electronics engineers 
long darrell long 
replicated monitoring tool 
technical report ucsc crl april 
computer information sciences board university california santa cruz 
mattern mattern 
virtual time global states distributed systems 
proceedings international workshop parallel algorithms chateau de bonas france october pages cosnard robert raynal editors 
science publishers north holland 
pu calton pu avraham leff 
replica control distributed systems asynchronous approach 
technical report cucs january 
department computer science columbia university 
quarterman john quarterman 
notable computer networks 
communications acm october 
schatz bruce raymond schatz 
interactive retrieval information spaces distributed widearea network 
technical report tr december 
department computer science university arizona 
schroeder michael schroeder andrew birrell roger needham 
experience grapevine growth distributed system 
acm transactions computer systems february 
wilkes john wilkes 
bibliography database user guide manual 
technical report hpl csp may 
hewlett packard laboratories 

