strategy pattern composing reliable distributed protocols benoit pascal felber rachid guerraoui laboratoire de syst emes exploitation epartement informatique ecole polytechnique ed erale de lausanne lausanne suisse mail bast lse epfl ch reliable distributed systems involve complex protocols 
context protocol compositions central concept allows reuse robust protocol implementations 
describe strategy pattern recursively support protocol composition bast framework 
discuss design alternatives applied existing frameworks 
presents strategy pattern build bast extensible objectoriented framework programming reliable distributed systems 
protocol composition plays central role bast relies notion protocol class 
focus recursive strategy pattern overcome limitations inheritance trying flexibly compose protocols 
companion generic agreement protocol classes customized solve atomic commitment total order multicast central problems transactional systems group oriented systems respectively 
bast framework part phoenix going research project operating systems laboratory swiss federal institute technology lausanne 
bast framework building reliable distributed systems challenging task deal complex issues reliable communications failure detections distributed consensus replication management transactions management issues corresponds distributed protocol 
protocol jungle programmers choose right protocol right need 
protocol necessary comes problem interactions programmers task 
bast framework aims structuring reliable distributed systems allowing complex distributed protocols composed flexible manner 
example adequately composing reliable multicast protocols transactional protocols bast possible transparently support transactions groups replicated objects 
relies heavily strategy pattern recursively get limitations inheritance far protocol composition goes 
current implementation written smalltalk fully operational 
intended prototyping platform new reliable distributed protocols 
help test approach adding protocol classes 
currently version bast framework worked context project esprit aims designing reliable corba compliant platform 
plan port bast java program concept failure detection enables hide timeouts commonly distributed systems 
ming environment 
overview section introduces concept protocol object defined bast helps structure distributed systems deal failures 
section discusses inheritance limited supporting flexible protocol composition presents applied strategy pattern break limitations 
show strategy pattern transparently recursive manner steps performed order extend bast protocol composition 
section discusses various design alternatives compares approach research works described literature 
section summarizes planning bast framework 
protocol objects bast framework designed help programmers building reliable distributed systems protocols basic structuring components 
bast distributed system composed protocol objects means remotely designate participate various protocols distributed protocol set interactions protocol objects aiming solving distributed problem name protocol object capable participating protocol say object protocol class 
object provides set operations interface protocol operations act entry points protocol 
class root protocol class hierarchy 
broad definitions interaction objects located distinct network nodes protocol mere point point communication 
example class implements reliable point point communication protocol provides operations enable reliably send respectively receive object operation call named bast cat egyptian mythology 
mean object protocol object 
allowing send protocol objects network implies solve distributed object migration problem 
back said triggered protocol 
note homogeneous view distributed protocols contradict fact protocols basic 
communication protocols example fundamental distributed protocol 
dealing failures 
failures part real world need reliable distributed protocols consensus atomic commitment total order multicast 
reliable distributed protocols challenging implement imply complex relationships underlying protocols 
example atomic commitment total order multicast rely consensus failure detections reliable point point communications reliable multicasts 
turn reliable multicasts built top reliable point point communications 
presents overview distributed protocol dependencies 
bast protocol classes organized single inheritance hierarchy follows protocol dependencies pictured 
protocol class implements protocol instances object class execute protocol inherited object superclasses 
protocol objects able run executions identical distinct protocols concurrently 
strategy pattern bast composing protocols protocol objects managing protocol dependencies necessary design implementation phases protocol classes runtime protocol objects 
partly due fact protocol objects execute protocol time 
context trying compose protocols comes answering question protocol layers assembled cooperate 
presents runtime snapshot protocol object class implements algorithm solving distributed consensus problem 
consensus problem defined set oe distributed objects follows correct objects oe propose initial value reach agreement unreliable message passing reliable message passing reliable failure detection uniform consensus dynamic terminating multicast multicast best effort message passing fifo message passing superclass protocol class hierarchy protocol dependencies reliable message passing reliable multicast unreliable message passing failure detection dynamic terminating multicast consensus protocols protocol classes bast proposed values decision 
class defines operations propose decide mark termination protocol respectively 
consensus protocol object capable executing protocol inherited class reliable point point communications reliable multicasts failure detections 
concurrently managing different protocol stacks application layer issuing low level calls transport layer 
focusing consensus stack protocol composition means assemble various layers necessary execute consensus protocol protocol stack pictured 
assembling occurs runtime creates new stack time application invokes operation propose 
inadequacy inheritance 
bast distributed applications structured needs protocols protocol objects act distributed entities capable executing various protocols 
approach comes choosing right class right problem 
believe inheritance appropriate tool achieve passing appropriate arguments protocol operations implementing callback operations programmers ability tailor generic protocol classes needs 
pretend inheritance sufficient far protocol composition goes offer flexibility 
example inheritance allow easily implement new algorithm existing protocol protocol class want 
furthermore inheritance appropriate comes choosing protocol algorithms runtime 
limitations lead seek alternative solution flexible protocol composition 
protocol algorithms strategies gamma intent strategy pattern define family algorithms encapsulate interchangeable page 
usually achieved algorithm encapsulating called strategy object called context object :10.1.1.136.2555
making object protocol class independent algorithm supporting protocol precisely need able compose reliable distributed protocols flexible manner 
bast framework strategy objects represent protocol algorithms instances subclasses class 
subclass implements algorithm solving problem referred class algo 
strategy pattern terminology protocol algorithm instance algo class strategy protocol object instance object class context 
strategy context strongly cou application layer transport layer send recv propose decide propose decide fdt algo rmc algo rmp algo consensus algorithm protocol object action interacting protocol layers send recv protocol layers protocol objects application layer deals instances object classes knows strategies 
strategy context interactions 
sketches way protocol objects algorithm objects interact 
left side protocol object offers services inherits superclasses new services specific protocol actual algorithm implementing protocol part code uses services provided strategy right side 
operation related protocol invoked execution protocol delegated strategy 
turn services required strategy run protocol inherited services context 
required services merely identify entry point operations underlying protocols needed solve problem instance class algo represents execution protocol implemented class holds context object running call services required strategy issued context object 
instance subclass simultaneously 
runtime maintains table strategies currently execution 
message tagged enable identify execution protocol message involved dispatch right strategy 
presents relationship classes object algo class diagram omt object modeling technique notation 
correspondence algo strategy objects layered protocol stacks pictured runtime strategy object represents layer protocol stacks currently execution 
context strategy separation enables overcome limitations inheritance far protocol composition goes 
example optimize reliable multicast algorithm protocol classes leaving unchanged 
different protocol algorithms chosen dynamically criteria computed runtime 
approach helps protocol programmers clearly specify protocol dependencies protocols 
drawback strategy pattern overhead due local interactions strategies contexts 
distributed systems overhead small compared communication delays especially failures complex protocols involved 
specifically time local smalltalk invocation normally reliable multicast communication usually takes ms protocol objects involved considering values measured network sun failures 
gain flexibility clearly local overhead caused strategy pattern 
reliable multicast example implemented reliable multicast communications strategy pattern 
bast class provides primitives enable send respectively receive message set protocol object way enforces reliable multicast properties 
current implementation class relies strategy class 
overview protocol 
protocol starts operation invoked initiator object passing message destination set 
operation context creates strategy invokes operations arguments just received 
strategy builds message containing 
issues reliable point topoint communication protocol object referenced order strategy relies inherited service context message reaches target objects operation triggered protocol 
operation detects multicast message forwards strategy charge particular execution reliable multicast protocol 
receives time re issues reliable point topoint communication protocol object referenced extracted invokes context passing message extracted 
retransmission scheme necessary agreement property reliable multicast primitive requires correct objects receive message 
recursive strategy pattern solving distributed problem strictly focus interaction class object class algo forgetting sparcstation interconnected mbits ethernet 
protocols implemented 
particular protocols needed support protocol transparently inherited services class object 
services implemented applying strategy pattern transparently managed inherited operations object 
sense bast uses strategy pattern powerful recursive manner 
recursive strategy pattern illustrated 
schematically presents possible implementation protocol class section enables solve distributed consensus problem providing operations propose decide 
gray oval context class inner white circles various algo strategy classes different protocols 
arrows show connections provided services top required services bottom strategy class 
operations provided class grouped application layer side top 
strategy class pictured managed corresponding context class protocol class hierarchy 
extending bast framework basing bast framework strategy pattern advantage easily extensible 
illustrate built protocol class supporting dynamic terminating multicast dtm protocol existing contexts strategies 
dtm protocol understood common denominator reliable distributed algorithms 
overview protocol 
protocol starts invocation operation initiator object passing message set protocol object 
invocation results reliable multicast set participants objects 
message reaches participant protocol triggers operation receive passing argument 
participant object computes reply returns 
eventually operation interpret triggered protocol non faulty participant object subset participants replies argument 
protocol insures correct participant objects get subset replies consensus reached set 
inherited services context provided services strategy context strategy classes inherited services provided services required services specific services propose decide fdt algo rmc algo rmp algo consensus algorithm propose decide context strategy objects strategy protocol layer strategy pattern bast methodology extending bast 
steps methodology guides programmers extending bast framework strategy pattern 
illustrate steps presenting methodology applied design class 

establish services new protocol class provides operations programmers wanting operations receive interpret 

choose algorithm implementing dtm determine services requires decomposing way allows reuse existing protocols possible services consensus failure detections reliable point point reliable multicast communications see algorithmic details 

implement chosen algorithm class calls required services issued instance variable representing context object instance class 

choose protocol class derived obtain new class choice class directly inferred step chosen superclass provide services required protocol dtm 

implement class connecting services provided class new dtm specific services class connecting services required class corresponding inherited services class 
design alternatives implementation bast strategy pattern distributed algorithms objects protocol objects capable participating protocol execution concurrently 
furthermore protocol composition possible single inheritance protocol objects basic addressable distributed entities approach possible guarantee protocol execution involving protocol object time 
example sure concurrent multicast communications transactions involving protocol objects 
allowing concurrency level essential feature 
far protocol composition concerned single inheritance way offering satisfactory degree flexibility 
reasons bast evolve second implementation main goal overcome limitations mentioned 
discuss design alternatives considered process implementing second pro remember smalltalk implementation language prototyping 
transport layer application layer send recv propose decide recursive strategy pattern bast design issues studied existing frameworks described literature 
multiple inheritance prototyping language offer multiple inheritance assembling various protocol layers code reuse mechanism appealing idea protocol class object implement protocol accessing required underlying protocols unimplemented operations protocol class class 
able instantiate protocol object build new class deriving necessary protocol classes 
major drawbacks approach 
protocol layers assembled subclassing difficult compose protocol runtime impossible classes compile time entities 
second manage concurrent protocol executions protocol object problem handled nicely soon algorithms manipulated objects 
ingalls borning shown reflective facilities smalltalk applied extend language multiple inheritance technique really wanted 
toolbox approach possible approach reuse protocol implementations provide programmers toolbox containing reusable components associate design patterns 
asx conduits frameworks seen 
asx framework provides collaborating components known wrappers help producing reusable communication infrastructures 
components designed perform common communication related tasks event demultiplexing event handler dispatching connection establishment routing design patterns reactor pattern acceptor pattern act architectural blueprints guide programmers producing reusable portable code 
conduits kinds objects basically offered conduits information chunks assembled order create protocol layers protocol stacks 
various patterns provided help programmers building protocols 
thing protocol object frameworks 
main intend provide programmers powerful unifying concept protocol object choose toolbox approach bast 
furthermore asx promote protocol composition conduits slightly different way bast shall see 
black box framework conduits offers basic elements helps programmers build protocol layers 
design patterns motivated fact traditional layered architecture allow code reuse layers precisely conduits aims 
protocols composed conduit lower level bast assembling conduits information chunks elementary blocks build protocol layers 
words conduit framework allow manipulate protocol layers objects pieces protocol layers 
compared bast protocol algorithms decomposed conduit conduits information chunks finer grain objects bast strategies 
represent protocol layers internal components protocol layers 
conduit goes step process protocol algorithms 
approach easy conduit pure black box framework bast combines features black box white box frameworks bast considering definitively get rid inheritance issue carefully studied important consequences way bast 
modeling communications systems try model communications address reliability issues streams kernel 
systems offer reliable distributed communications groups elemental addressing facilities isis horus transactions 
systems merely provide non extensible library communication protocols 
bast tried model kind interaction distributed object communications 
necessary want deal failures extensible way reliable protocols tend complex mere communications 
far protocol black box framework reusability mainly achieved assembling instances white box framework mainly achieved inheritance 
black box framework easier harder design 
composition concerned horus system enables build protocol stacks existing layers strictly vertical manner 
groups fundamental addressing facility provides framework pattern building new protocols layers 
making protocol objects bast basic distributed entities build group model transaction model 
furthermore strategy pattern provides powerful scheme creating new protocols composition 
concluding remarks protocol objects help build reliable distributed systems 
focused strategy pattern enables overcome limitations inheritance trying compose protocols 
far know bast framework providing concept protocol object see contribution design structured reliable distributed systems 
current prototype bast fully operational 
moment inheritance partly involved composing distributed protocols minor drawback protocol composition flexible expect 
due fact programmers know implementation protocol classes reuse inheritance relationships 
surprising inheritance known violate encapsulation hinder modularity 
consist trying decide getting definitively rid inheritance far protocol composition goes way achieve flexibility 
plan extend bast new protocol classes supporting frequently protocols reliable distributed systems 
birman van renesse 
reliable distributed computing isis toolkit 
ieee computer society press 
chandra toueg 
unreliable failure detectors reliable distributed systems 
technical report tr cornell university computer science department october 
preliminary version appears podc 
fischer 
consensus problem unreliable distributed systems brief survey 
technical report department computer science yale university june 
gamma helm johnson vlissides 
design patterns abstraction reuse objectoriented design 
european conference objectoriented programming proceedings ecoop volume lecture notes computer science 
springer verlag july 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
felber guerraoui 
protocol classes designing reliable distributed environments 
european conference objectoriented programming proceedings ecoop volume lecture notes computer science 
springer verlag july 
goldberg robson 
smalltalk language implementation 
addison wesley 
gosling 
java language environment white 
technical report sun microsystems october 
guerraoui schiper 
transaction model vs virtual synchrony model bridging gap 
theory practice distributed systems volume lecture notes computer science pages 
springer verlag 
johnson engel 
framework network protocol software 
object oriented programming systems languages applications conference proceedings oopsla 
acm press 
special issue sigplan notices 
ingalls borning 
multiple inheritance smalltalk 
proceedings national conference artificial intelligence pages 
aaai 
mishra peterson schlichting 
experience modularity 
software practice experience october 
peterson hutchinson malley 
rpc evaluating new design techniques 
acm symposium operating systems principles november 
ritchie 
stream input output system 
bell laboratories technical journal 
rumbaugh blaha premerlani eddy 
object oriented modeling design 
prentice hall 
schmidt 
asx object oriented framework developing distributed applications 
proceedings th usenix technical conference 
usenix association april 
shrivastava dixon 
overview distributed programming system 
ieee software 
van renesse birman 
protocol composition horus 
acm principles distributed computing 

