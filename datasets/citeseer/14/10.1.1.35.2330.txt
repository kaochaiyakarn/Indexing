chapter submitted inclusion coordination theory collaboration technology eds olson smith malone seeding evolutionary growth reseeding incremental development collaborative design environments gerhard fischer jonathan grudin raymond mccall jonathan david redmiles brent reeves frank shipman department computer science institute cognitive science university colorado boulder colorado information computer science department university california irvine ca college environmental design institute cognitive science university colorado boulder colorado research gale drive boulder colorado department computer science texas university college station texas 
number years created software design environments solely support individual designers 
turned attention problem supporting long term collaboration 
takes place artifact functions repeatedly redesigned relatively long period time years 
artifacts increasingly common wide range domains including design buildings space habitats software computer networks name looked 
initial plan modify previous architecture design environments add support evolutionary development design knowledge design 
anticipated create messy information proposed process seeding evolutionary growth reseeding information design environment 
course working network designers building evaluating prototype systems revising initial theories collaborative design practice developed new think quite useful 
chapter discusses results 
chapter begins describing view design long term indirect collaboration 
discuss role knowledge plays collaborative design 
phases seeding evolutionary growth reseeding described detail 
discussion section describes experiences observing working network designers experiences affected system prototypes 
reviewing related conclude lessons learned believe value interested supporting long term asynchronous design 

long term collaborative design teamwork playing larger role design projects kaplan johansen 
projects increasingly large complex long duration 
design process takes place years followed extended periods maintenance redesign 
specialists different domains coordinate efforts despite large separations distance time 
projects constructive collaboration crucial success difficult achieve 
difficulty due large part ignorance individual designers decisions interact decisions designers 
large part turn consists simply knowing decided 
meetings types direct communication commonly means coordination collaboration design projects situations especially ones involving long term collaboration feasible 
design projects extend years involve high turnover personnel 
design systems done maintenance redesign people doing members original design team 
able requires collaboration original designers system 
people project group time need collaborate long term design 

asynchronous communication research supporting collaborative gone supporting synchronous communication colab stefik grove ellis gibbs rein 
argue long term collaborative design demands support synchronous communication 
possible collaborating designers direct communication potential providing tools primarily intended asynchronous hollan stornetta 
primary distinctions synchronous asynchronous communication taken computer supported cooperative field cscw represented matrix 
examples illustrate benefits technologically supported asynchronous communication voice mail electronic mail 
consider installation voice mail systems large corporations 
experience suggests people idea asynchronous communication phone better phone communication 
people leave messages hi denny guess re call back 
people leave messages contain just call back 
example hi denny 
problem ar report 
due dates incorrect customer number 
need get right friday close 
takes time people learn efficient place item person electronic stack inbox interrupt doing phone call 
people usually prefer speak person learn technology 
leaving detailed message sense messages requests 
better give person time research question call back surprise problem expect instant diagnosis 
asynchronous communication begins synchronous previously dominated 
phone mail thought inconvenient backup preferable voice voice useful service right just back 
time different different meeting rooms shifts teleconferencing email place asynchronous communication matrix cscw perspectives developed johansen johansen 
focuses technological support asynchronous different time different place communication 
email prototypical example asynchronous communication 
arguing assumption goal computational media emulate face face communication hollan stornetta cite email paramount success informal communication 
interesting aspect related point argued statement meets critical litmus test groups close physical proximity 
fact experience uncommon send email adjacent office sharing office 
voice mail certain situations email changed tolerable substitute preferred medium 
electronic mail plays important role success model computer supported communication 
cscw research focuses providing media emulate face face meetings success email reminder communication support emulating face toface communication 
benefit asynchronous communication archived 
digital voice recording electronic mail available retrieval 
clearly solve problem information retrieval step 
examples voice mail electronic mail illustrate asynchronous communication comes preferred synchronous communication certain types information 
chapter stronger case asynchronous communication improvement cases absolutely necessary long term design 
model email important resource design teams 
careful analysis led introduce key distinction asynchronous communication predictability 

long term indirect communication long term collaborative design tasks communication designers asynchronous respect time place indirect sense senders receivers information known priori 
introduces predictability known matrix cscw compare 
note predictability pertains participants 
long term projects time different predictable different unpredictable different predictable different unpredictable meeting rooms shifts desktop conferencing email team rooms collaborative writing long term indirect collaboration electronic newsgroups multicast presentations place classification different cscw perspectives classification scheme extends matrix shown 
focus unpredictable communication occurs design life cycle complex systems 
time place unpredictable participants known long life cycles complex systems grudin 
unpredictable regard team members users need communicate 
argued detail attribute caused pursue describe embedded communication communication sense embedded design artifact stored separately 
long term indirect communication particular importance situations direct communication impossible impractical undesirable communication shared artifacts designed artifacts continue evolve long periods time months years 
designers need informed context support indirect coordination collaboration go electronic mail proposed cscw software provide 
support allow team members separately substantial distances space time alert existence potential interactions 
interactions exist support provided collaboration conflict resolution 
designers able interact design artifacts created previous designers 
technology enabling effectively create virtual cooperation designers worked project 
challenges motivated new conceptual model design environments new model design process 

evolution knowledge design conceptual framework grew systems try augment expert solving problem cooperating experts collaborating years different places 
process initial research formulated design process model believe important aspect designing systems collaboration 
process model motivated large software systems gnu emacs symbolics genera unix window system evolved time 
systems users develop new techniques extend functionality system solve problems anticipated system authors 
new releases system incorporate ideas code produced users 
way software systems extensible programmers design environments need extended domain designers term users design environments interested trained low level details computational environments nardi 
illustrate conceptual framework domain computer network design involves complex artifacts continuously modified redesigned 
domain constantly changing new technologies developed 
knowledge acquisition crucial issue creation effective information systems types including expert systems hypermedia systems design environments 
extreme approaches input information advance typified expert systems buchanan shortliffe start empty system allow information base grow structured consequence characterized initial proposals argumentative hypertext mccall schuler conklin 
approach adequate information needs designers 
put knowledge approach fails numerous reasons 
inadequate domains domain knowledge undergoes rapid changes computer network domain prime example 
traditional knowledge acquisition approaches require domain designers articulate knowledge outside context problem solving initial knowledge acquisition phase fail capture tacit knowledge polanyi designers know tell environment developers 
tacit knowledge part human expertise surfaces context solving specific problems 
just provide empty framework approach requires designers context specific project 
difficulties capturing design knowledge design projects known fischer 
documenting interferes thinking process disrupting design requiring substantial time effort designers invest design 
designers typically find difficult structure thoughts format regardless format mccall 
addition domain designers lack knowledge interest formalize knowledge computationally interpreted shipman 
model extremes put knowledge empty framework 
designers interested design task hand maintaining knowledge base 
time important knowledge produced daily design activities captured 
expect designers spend extra time effort maintain knowledge base design provide tools help designers record information quickly regard information integrated seed 
model knowledge base maintenance periodically performed environment developers domain designers collaborative activity 
domain independent design environment architecture plays important role continual development design environments 
provides structure domain knowledge mechanisms delivering knowledge needed support design task hand 
developed domainindependent architecture numerous attempts create domain oriented design environments fischer 
architecture consists components construction component argumentation component catalog interesting design examples specification component simulation component 
individual components linked knowledge mechanisms construction analyzer built critiquing system fischer argumentation catalog explorer 
design environments contain information encoded variety representational 
construction kits critics considered formal representations design knowledge interpreted computer 
argumentation semiformal representation informal textual graphic records linked formal associations 
reseeding environment developers clients environment developers seeding time new domain knowledge design environment evolutionary growth domain designers domain designers domain designers seeding evolutionary growth reseeding process model domain oriented design environments seeding environment developers domain designers collaborate create design environment seed 
evolutionary growth domain designers create artifacts add new domain knowledge seed 
reseeding phase environment developers collaborate domain designers organize formalize generalize new knowledge 
process model continual development design environments initial seed iterations growth reseeding illustrated seeding process domain designers environment developers instantiate domain oriented design environment seeded domain knowledge 
evolutionary growth process domain designers add information seed create design artifacts 
reseeding process environment developers help domain designers reorganize reformulate information reused support design tasks 
illustrate evolution design environments discuss seeding evolution reseeding detail sections 
network shipman fischer design environment supporting computer network design illustration 

seeding process seed built customizing domain independent design environment architecture particular domain process knowledge construction 
goal construct knowledge possible seed building complex changing domains complete coverage possible 
seed explicitly designed capture design knowledge 
domain designers participate seeding process expertise determine seed support practice 
expecting designers articulate precise environment supporting computer network design screen image network seed 
shown palette network objects upper right construction area logical networks configured upper left 
complete system requirements prior seed building view seed building knowledge construction knowledge structures access methods collaboratively designed built knowledge acquisition knowledge transferred expert knowledge engineer expressed formal rules procedures 
new seed requirements elicited constructing evaluating domain oriented knowledge structures 
seeding process network design environment see driven observations network design sessions prototypes proposed system functionality discussions centered prototypes 
design sessions logical map network designed served ground design meetings discussions scenarios disagreements 
logical map chosen central representation artifact network design prototype construction kit implemented logical map fischer 
evaluation network seed indicated designers need support communication form critiques reminders general comments reeves shipman 
pointer annotation sketching tools integrated construction kit talking artifact takes place artifact representation space 
important lesson learned seeding network base design discussions prototyping efforts existing artifacts 
discussing existing computer science network cu boulder effective way elicit domain knowledge provided concrete context triggered domain designers knowledge form war stories 
high level discussions general domain concepts effective discussions focused existing domain artifacts 
information seed network acquired existing databases containing information net logical map embedded discussion logical map serves away low level details allowing discussions artifact embedded design 
devices users architectural layout building 
network seed contains formal representations approximately network devices users 
autocad tm databases created facilities maintenance personnel provide architectural details rooms 
information represented network construction kit underlying knowledge representation formalisms 
informal part network seed includes notes systems administration class knowledge various research groups electronic mail network designers 

evolutionary growth phase design task potential add knowledge contained system 
new construction kit parts rules required support design rapidly changing domains fischer 
issue information seed augmented design task alternative approaches problems discovered recorded 
information accumulated information space phase informal designers formalize new knowledge want distracted design task 
approach challenge view design environment seed medium communication design 
critique current design systems function artifact deposits representations artifact designed 
experience shown designers integrate designing discussing way separate interpretation difficult reeves 
talking artifact requires talking artifact 
interpretation discussion requires discussion embedded context originally elicited 
important implication view design artifacts artificially separated communication 
integration seen ways 
design sessions videotaped analysis deictic referring items frequent 
long term study network designers showed users took advantage embedded annotations frequent deictic reeves 
second discussion artifact guided incremental design process 
designers took opportunity illustrate critiques 
rarely detailed comment accompanied changing artifact 
logical map mentioned served represent real network medium changes considered argued 
focused facilitated discussion 
frequently arguing design artifacts specific issues led discussions larger issues 
collaborating designers preferred ground discussions design representations 
logical maps served point inconsistencies appealing idea difficulty implementation remind participants important constraints describe network states changes 

reseeding acquiring design knowledge little benefit delivered designers relevant 
periodically growing information space structured generalized formalized reseeding process increases computational support system able provide designers shipman mccall 
task reseeding involves environment developers working domain designers 
period information space annotations partial designs discussions mixed original seed modifications performed domain designers 
information useful environment developers domain designers process organizing generalizing formalizing new information updating initial seed 
need reorganization organizational aspect reseeding necessary information space modification designers system eventually inconsistent 
example new technology available informal notes contradict formal knowledge network devices 
information space disorganized difficult designers locate information need 
difficult find right place add new information compounding problem 
occur information topic located separate parts information space information put location designers find 
need generalization reuse information projects requires generalization task specific information entered 
goal create generally applicable information integrating information specific situations 
related need reorganization variations ideas added project oriented parts information space 
example generalization network domain documenting changes design information concerning conversion sections network new networking standard appear conversion subnet 
order bring information coherent subnet specific details need abstracted information new situations 
need updating information described earlier systems supporting rapidly changing domains forced evolve obsolete 
evolution occur evolutionary growth need concerted efforts environment designers update domain information 
example difficulty potential support updating information consider problem updating initial formal structures created seeding network 
frequent change number type devices people places environment needs represent 
potential supporting process comes existence line sources information 
sources line information individually contain part information needed 
sources variety representations identifiers information 
result process updating turns heuristic 
automation changes aids knowledge engineers updating information space requiring determine handle exceptional cases disambiguate multiple potential cross 
experience network shown need devise semi automatic methods updating information line sources reseeding 
information computer network design line user device profiles domains potential line sources information data mining 
support sources aid domain designers environment designers keeping design environment date 
need formalizing information final task part reseeding formalization domain information entered evolutionary growth format useful providing knowledge support 
experience shown cases users formalize information 
example designers may comments notes characteristics network device enter information environment description device 
designers cautious time performing tasks necessary completing primary task design instantiation network 
reseeding primary task improvement information design environment involvement environment designers formalization information entered informally evolutionary growth possible 

discussion experience incremental development collaborative design environment network shown utility necessity seeding evolutionary growth reseeding process 
time pointed need types support provided design environments process successful 
design environment needs just storage mechanism design start medium communication designers 
leads need embedding communication design artifact 
artifact discussion artifact develop time necessary provide prior context enable comprehension comments design decisions 
information allowed enter environment informal representation formal representations needed provide knowledge support 
computer support formalization knowledge important successful design environment development 
size information space potential missing relevant information entered designers mechanisms required help location communication information 
led initial investigation computational agents convey design decisions opinions designers 

embedded communication analysis design sessions domains kitchen architecture network showed design artifacts ground discussions strongly language difficult understand access video 
deictic frequent computer design systems cad support referencing 
led embedded communication including discussion design artifact artifact 
intended address deixis addressed shortcoming see design rationale systems artifact rationale stored separately 
quickly leads inconsistencies done supposed done user think gotten done 
competent practitioners usually know say polanyi conversation leaves things tacit 
attempt overcome tacit aspects forcing designers knowledge explicit 
approach labeled tyranny explicit hill aspects seen motivation providing computational media designer natural level tacit knowledge respected 
design process suggests need medium design artifact emerges allows designer undergo frequent shifts stance 
observations collaborating designers network show artifacts serve medium communication 
furthermore discussions artifact guide incremental design process 
communicating asynchronously textual annotations network designers integrated notes artifact ways separate interpretation difficult 

embedded history way evidence physical history guides cognitive tasks computational media provide cues guide design tasks hill 
example auto parts manuals worn provide visual tactile cues guide 
way physical wear tear resource computational media embed history artifact artifact serve guide 
computational media represent potential provide history access mechanisms go possible physical artifacts providing access various perspectives date user design change relation design units 
approach recognize fluid nature design process create computer environment artifact product process 
capturing design process done way interfere better able learn observing design sequence 
understanding complex design best done studying process product ullman 
users draw heavily past experience solving current problems lee 
computational tools support human tendency reuse previous experience 
complicating factor tendency people event plausible inference exact recall 
potential computer systems serve external memory aids restoring context surrounding past design decisions suchman anderson 
context important collaboration increases 
context collaborative design provide user history artifact history 
wolf argue process information created important understanding product group 
study done gain insight facilitate information retrieval computer mediated design sessions analyzed group participants videotape access meeting information 
people searched information main access methods participant remembered person doing action communication medium people recalled medium 
whiteboard overhead transparency time people relative time midway meeting duration minutes discussion clock time got item clock relation events people events markers events 
findings people videotape information retrieval serve challenges computational history mechanisms 
hutchins study team navigation large ships motivates history collaborative artifacts chart performed surface device interface watching chart revealing done perform task watching calculator computer hutchins 
asynchronously communicating designers possibility watching chart 
keeping artifact history interaction available watching time 
relate study imagine chart replay interaction took place show instruments 
design history provides approach design rationale 
design rationale appears great promise kunz rittel recorded successes conklin 
designers perceive benefit extra cost documenting reasoning reeves shipman 
history potential candidate interaction tool extra cognitive cost associated having history support 
provides benefit restoring context previous 
benefit history related design rationale domains network design involve dimensional sketches graphical representations designers deduce rationale seeing process came ullman 
logical map current network hides tradeoffs compromises past affect current decisions 
having history evolution clarifies tacit knowledge represented static logical map 
side benefit groupware aids help individual 
example designer said 
history primarily viewed tool help understand designers useful reminding oneself called reflexive cscw thimbleby anderson witten 
usually adding multiuser features complicates system single users history example kinds 
context important reminding research human memory shown people prone recall inferring plausible remember anderson 
memory performance improves closely current context matches past physical emotional internal context 
recall involves plausible inference exact recall 
history tools needed support collaborative design 
motivation argument lies done situated cognition relating context lave 
design environments capture portion context dates user certain changes 
small portion important collaborative design 
designer project team understands portion design artifact 
large projects evolve time turnover attrition take toll increasingly important computer design environments help capture evolution artifact just current state 
history serves remind designers artifact came context certain decisions 

computer support formalization knowledge study collaborative design projects showed designers rapidly vary informal formal representations 
current cad systems example allow formal representation stored 
research showing importance informal sketches gross 
sketches part system exert enormous influence development implementation process 
making arbitrary distinction formal informal data support smooth migration informal representations textual notes sketches formal representation oo class diagrams standardized graphical items palettes 
address difficulties involved formalizing information environment designers domain designers phases design environment development developed tools support process formalization shipman 
class tools suggests possible formalizations added information space variety information system available seed information added 
formally represented information placement textual content textual attribute values tools 
example tool network looks vocabulary textual values attributes relate property sheet suggested attributes suggested attributes imported electronic mail message appear bold property sheet 
text mail message shown 
attribute devices involved selected user appears top portion property sheet may edited 
objects suggests replacement augmentation relationship objects 
example workstation design attribute disk server value text string 
tool suggest recasting attribute relation string pointing object design represents device 
tools possible textual display objects suggest new attributes relations 
example discuss text annotation taken verbatim electronic mail message network designers 
recognizing concepts formally represented system provides domain design specific cues content object 
occurrence text system suggests new attributes mail message shown 
example system recognized devices places known system 
new attributes locate related information 

agents support communication designers participate project difficult know project 
informed changes affect designer find old knowledge affects modification 
issue information group memory available designers presents formidable challenges 
prior critics fischer information delivery fischer individual provided potential solution creating mechanisms automatically volunteer information 
having design environment volunteer information leads issues determine information volunteer volunteer designers interact environment determine information volunteered designers 
context network begun investigating agents support communication 
compared agents providing information focussed designers text analysis algorithms combined complex interest profiles directly determine information volunteered 
focussed designers create agents 
agent editor showing current status agent designers define edit agents network agent editor 
selecting trigger query action designers decide information displayed situation display manner display 
rest information collaborative design environment agents created evolve phases environment development 
initial set agents created seeding 
evolutionary growth phase agents created modified agent editor shown 
types information agents added edited removed reseeding 

relation developed domain oriented design environments fischer support design variety domains including user interfaces lemke fischer buildings mccall shipman computer networks fischer voice dialog systems repenning sumner 
previous design environments lemke fischer janus fischer mccall mccall emphasized systems individual designers providing support human problem domain communication communicating abstractions concepts specific domain fischer lemke construction kits 
human problem domain communication construction kits necessary sufficient design 
evaluating prototypical construction kits fischer lemke assist user constructing interesting useful artifacts application domain 
need knowledge distinguish designs bad designs 
design environments combine construction kits critics fischer 
critics knowledge design principles detection suboptimal solutions constructed designer 
challenges critiquing systems avoiding disruption 
systems accomplish making critics sensitive specific design situation fischer incorporating model user fischer giving users control critics fire fischer 
part janus project fischer mccall focussed building critics useful spite highly intelligent intelligent designer 
simple critics informative domain knowledge designers network designers necessarily familiar relevant knowledge fire codes buildings problems arise collaboration technology people ar required additional support system primarily benefits users grudin 
particularly important systems incorporate design rationale information difficult task fischer 
system process described addresses ways 
dividing labor environment designers domain designers seeding reseeding activity evolutionary growth allow different players focus tasks rewarded 
allowing comment informally process formalization knowledge postponed cost designers permitting benefit eventual inclusion knowledge system 
project gave opportunity build previous design environment broaden environments investigate complex issues long term collaborative design 
usefulness seeding evolutionary growth reseeding model demonstrated variety systems operating systems walker domain oriented design environments fischer 
model successfully addresses number important issues 
hand intentional effort recognize importance specialization expense expressive generality 
providing significant seed knowledge domain oriented design environments specific design projects recreate domain oriented abstractions extend seed incomplete inaccurate task 
new designs described concepts rules examples contained seed 
model avoids pitfalls expert systems approaches built assumption relevant knowledge domain encoded system 
model shares objectives group memory projects including need maintenance activity separate day day berlin terveen selfridge long 
emphasis domain orientation sets approach apart 
particular domain orientation interesting perspective view major challenges shared evolving information spaces development classification conventions support information location ability actively deliver information users relevant task hand fischer 
systems designed general information storage retrieval face difficult task developing information categories sense individuals share information berlin 
general categorization schemes dependent group members develop change group members come go 
design domains hand characterized domain specific conventions relatively precise stable meaning domain practitioners 
domain conventions developed time enable designers conceptualize design problems communicate important ideas 
relative stability domain conventions domain oriented systems sensitive turnover group personnel 
general purpose information spaces limited notion user task hand 
design environments exploit domain semantics design context fischer actively notify designers information know 
active information delivery helps designers detect inconsistencies early design process learn design concepts unaware 

summary chapter described process model evolution domain oriented design environments 
consider design environments seeds grow accumulating design knowledge support design tasks 
periodically reseeding process necessary ensure new knowledge accessible design environment computational mechanisms accessible designers environment 
claim approach necessary support design complex open ended domains new design knowledge surfaces context design tasks 
seed collection knowledge procedures capable growing sustaining growth interaction domain designers day day 
stimulates focuses mediates discussion knowledge capture incremental growth phase 
seed capable capturing information elicited system 
absolute requirement completeness correctness specificity information seed 
fact shortcomings respects provoke input designers 
evolutionary growth system process adding information related directly indirectly artifact designed 
artifact case network logical map foundation evolutionary growth 
growth phase designers system primarily focused task hand 
information input highly situation specific tied specific artifact stated particular general 
information grows orderly manner eventually order breaks system begins degrade usefulness 
reseeding necessary evolutionary growth stops proceeding smoothly 
reseeding system information restructured generalized formalized serve design tasks 
reseeding process creates forum discuss design information captured context specific design projects incorporated extended seed support cycle evolutionary growth reseeding 
tools contained design environments support reseeding making suggestions information formalized 

acknowledgments authors members human computer communication group university colorado contributed substantially conceptual framework systems discussed 
particular provided invaluable assistance 
research supported national science foundation 
iri mdr nynex science technology center white plains 

anderson anderson cognitive psychology implications nd edition freeman new york 
berlin berlin jeffries day paepcke wharton put 
issues design group memory human factors computing systems interchi conference pr acm pp 

buchanan shortliffe buchanan shortliffe rule expert systems mycin experiments stanford heuristic programming project addison wesley publishing reading ma 
mathematics streets schools british journal developmental psychology vol 
pp 

chen ullman computer design history tool proceedings nsf design systems conference sme society engineers austin texas january pp 

conklin conklin hypertext tool exploratory policy discussion transactions office information systems vol 
october pp 

computer science technology board scaling research agenda software engineering communications acm vol 
march pp 

productive projects teams new york 
ellis gibbs rein ellis gibbs rein groupware issues experiences communications acm vol 
pp 

fischer fischer domain oriented design environments proceedings th annual knowledge software engineering conference mclean va ieee computer society press los alamitos ca september pp 

fischer fischer lemke mccall making argumentation serve design human computer interaction vol 
pp 

fischer fischer grudin lemke mccall reeves shipman supporting indirect collaborative design integrated knowledge design environments human computer interaction special issue computer supported cooperative vol 
pp 

fischer fischer stahl sumner embedding computer critics contexts design human factors computing systems interchi conference proceedings acm pp 

fischer fischer user modifiability design environments human factors computing systems chi conference proceedings seattle wa acm new york april pp 

fischer lemke fischer lemke construction kits design environments steps human problem domain communication human computer interaction vol 
pp 

fischer mccall fischer mccall design environments constructive argumentative design human factors computing systems chi conference proceedings austin tx acm new york may pp 

fischer mccall fischer mccall janus integrating hypertext knowledge design environment proceedings hypertext pittsburgh pa acm new york november pp 

fischer fischer making design objects relevant task hand proceedings aaai ninth national conference artificial intelligence aaai press mit press cambridge ma pp 

user modifiability knowledge design environments ph dissertation department computer science university colorado boulder available techreport cucs 
grudin grudin evaluating opportunities design capture moran carroll eds design rationale concepts techniques lawrence erlbaum associates hillsdale nj press 
grudin grudin computer supported cooperative history focus ieee computer vol 
pp 

kaplan kaplan interventions group process approach improving effectiveness groups decision sciences vol 
pp 

hill hill mind ai carriage clock ai magazine vol 
summer pp 

hill hill hollan edit wear read wear human factors computing systems chi conference proceedings ca acm may pp 

hollan stornetta hollan stornetta proceedings acm chi conference human factors computing systems acm new york pp 

hutchins hutchins technology team navigation kraut ed intellectual teamwork lawrence erlbaum associates hillsdale nj ch 

johansen johansen groupware computer support business teams free press new york 
ullman ullman information requests mechanical design engineers design studies vol 
january pp 

kunz rittel kunz rittel issues elements information systems working center planning development research university california berkeley ca 
lave lave cognition practice cambridge university press cambridge uk 
lee lee investigations history tools user support unpublished ph dissertation university toronto 
lemke fischer lemke fischer cooperative problem solving system user interface design proceedings aaai eighth national conference artificial intelligence aaai press mit press cambridge ma august pp 

mccall mccall phi conceptual foundation design hypermedia design studies vol 
pp 

mccall mccall bennett shipman wallace integrating cad graphics dynamic hypertext european conference hypertext echt pp 

mccall shipman mccall shipman supporting designers access information virtually structured hypermedia proceedings conference intelligent computer aided design elsevier new york ny pp 

mccall schuler mccall schuler information station problem solver system concepts eds applications mini microcomputers information documentation libraries elsevier new york 
increasing shared understanding design task designers design environments role specification component unpublished ph dissertation department computer science university colorado available techreport cu cs 
nardi nardi small matter programming mit press cambridge ma 
polanyi polanyi tacit dimension doubleday garden city ny 
judgment versus fact retrieval alternative strategies sentence verification psychological review vol 
pp 

reeves reeves role embedded communication artifact history collaborative design ph dissertation cu cs department computer science university colorado boulder 
reeves shipman reeves shipman supporting communication designers artifact centered evolving information spaces proceedings conference computer supported cooperative cscw acm new york november pp 

reeves shipman reeves shipman making easy designers provide design rationale working notes aaai workshop design rationale capture aaai san jose ca july pp 

repenning sumner repenning sumner agentsheets create voice dialog design environment proceedings acm symposium applied computing acm press pp 

reflective practitioner professionals think action basic books new york 
shipman shipman supporting knowledge base evolution incremental formalization ph dissertation department computer science university colorado boulder available techreport cucs 
shipman mccall shipman mccall supporting knowledge base evolution incremental formalization human factors computing systems interchi conference proceedings acm pp 

stefik stefik foster bobrow kahn suchman computer support collaboration problem solving meetings communications acm vol 
january pp 

suchman suchman plans situated actions cambridge university press cambridge uk 
terveen selfridge long terveen selfridge long folklore living design memory human factors computing systems interchi conference proceedings acm april pp 

thimbleby anderson witten thimbleby anderson witten reflexive cscw supporting long term personal interacting computers vol 
pp 

walker walker david moon daniel weinreb mike mcmahon symbolics genera programming environment ieee software vol 
november pp 

conklin conklin report development project issue information system proceedings conference computer supported cooperative cscw pp 

table contents 

long term collaborative design 
asynchronous communication 
long term indirect communication 
evolution knowledge design 
seeding process 
evolutionary growth 
reseeding 
discussion 
embedded communication 
embedded history 
computer support formalization knowledge 
agents support communication 
relation 
summary 
acknowledgments 
ii list figures asynchronous communication classification different cscw perspectives seeding evolutionary growth reseeding process model domain oriented design environments environment supporting computer network design logical map embedded discussion property sheet suggested attributes agent editor showing current status agent 
