implicit context easing software evolution reuse robert walker department computer science university british columbia main mall vancouver bc canada walker cs ubc ca gail murphy department computer science university british columbia main mall vancouver bc canada murphy cs ubc ca software systems consist simple conceptually clean software components interacting narrow defined paths 
reality complex components interacting reasons unrelated functionality provide 
refer knowledge component conceptually required individual behaviour component extraneous embedded knowledge eek 
eek system forms including dependences particular names passing extraneous parameters 
proposes implicit context means reducing eek systems combining mechanism reflect happened system queries call history mechanism altering calls component 
demonstrate benefits implicit context describing reduce eek java tm swing library 
categories subject descriptors software programming techniques software engineering coding tools techniques software engineering distribution maintenance enhancement software engineering software architectures information hiding software engineering reusable software 
general terms algorithms languages 
keywords structure flexibility extraneous embedded knowledge eek implicit context call history contextual dispatch 

building software system typically strive design software components simple conceptually clean 
finish building version system different story typically unfolded 
original vision independent cohesive components interact narrow paths permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
appear sigsoft san diego california usa acm replaced reality exists larger desired set interactions components 
obviously components communicate provide system behaviour 
communication leads interaction components 
problem resides fact component ends interacting components reasons directly related providing behaviour 
example class participates factory design pattern client aware participation factory class explicitly named product classes managed factory interest client 
explicitly named interactions software brittle 
refer knowledge external world component conceptually required individual behaviour component extraneous embedded knowledge eek 
section expand description eek give simple examples 
remove eek components propose implicit context knowledge components exist system messages previously communicated interpret alter messages 
message passed received additional details parameters filled reflecting previously occurred system call history 
furthermore message altered depending sent received messages intercepted sent replaced messages depending context occur 
call contextual dispatch 
section expand description implicit context show may applied remove eek simple examples section 
describe section semi automated concept mechanism implicit context discuss issues arise providing fully automated support approach 
demonstrate approach application proof concept implementation implicit context part class java tm swing graphical user interface library section 
show implicit context helped components swing simpler brittle 
able apply implicit context incrementally evolving parts swing implicit context running side side unchanged components 
section discuss issues arise implicit context 
section compares implicit context related approaches 
summarize arguments findings section 
term component refer structural unit method class module care differentiate 
contributions illustrate problem extraneous embedded knowledge introduce implicit context concept reduce eek easing software evolution reuse 

extraneous embedded knowledge extraneous embedded knowledge component component elaborated implemented 
dependences build come back need change system reuse pieces 
focus common forms eek 
simplest form eek consists dependences client component forms particular names signatures external components 
external names signatures change client component break 
important client component providing desired external functionality functionality needed 
example say client referred vector class point vector renamed breaking client 
client cared vector functionality name specific name eek client 
complex eek arises example class participates factory design pattern client 
client explicitly name class alter way create instance class 
containing statements form java syntax product new client convoluted form product factory factory type contains instance subclass passed client point 
client contains explicit knowledge participation factory design pattern names class invokes factory method 
presence knowledge client forces factory design pattern client reused 
client just effective providing intended purpose possible form statement knowledge factory design pattern involved second form eek client 
subtle version eek arises components 
consider drawing toy robots represented robot class 
robot possesses draw method delegates series methods drawing different parts robot torso head left arm forth 
methods turn delegates methods drawing smaller bits robot primitive objects rectangles 
implementing methods realize need canvas draw primitives 
robot may need drawn different canvas object passed robot class parameter added draw method accept object 
eek generally applicable concept limit discussion object orientated software due need ground discussion due space limitations 
need canvas points required draw primitives parameter added methods draw parts robot method passes canvas 
methods draw primitives canvas simply pass methods delegates 
knowledge canvas seen eek perspective methods needed conceptual integrity methods canvas object needs explicitly draw primitives object travel clients robot hierarchy delegations primitive drawing calls 
categorization knowledge eek occur relative particular component 
example fact knowledge factory design pattern eek client imply eek larger parent component containing client 
parent may concerned fact factory design pattern favour means flexibility 
case sense talk reusing parent factory design pattern pattern integral part parent eek 
likewise primitive drawing methods need refer canvas operation meaningful 
canvas object eek primitive drawing method 

implicit context implicit context context provided execution system moment execution implicit context consists structure system history interactions system 
interpret messages differently depending implicit context communicated 
analogy consider human conversation spell concept wish communicate instant understanding concepts required 
expect information understood altered context 
context takes forms omission words details left filled earlier details conversation general knowledge alteration words spoken way interpreted depends individuals speaking 
wildly refer ride county fair impression room experiencing extreme details omitted understood previously discussed 
likewise response question politics quite different depending asking explanation young child significantly different adult 
meaningful context require participants conversation share common world view referencing knowledge outside confines conversation 
stating acted role meaningless listener knew de 
similarly history messages system viewed conversation components leverage concepts omission alteration world view 
forcing components repeatedly give details messages wish allow send messages omitted details meanings understood implicit context 
time want perform alteration messages analogy intended motivational 
human conversation perform operations checking understood discussed 
attempting provide operations implicit context 
depending received sent 
components need share common world view apparently share implicit context correctly 
concepts hand proceed discuss programmatic model implicit context demonstrate utility simple examples section 
postpone description approaches implementing mechanism implicit context section discussion existing approaches address eek section 
model order messages sent received modifiable implicit context need able intercept messages reflect implicit context alter messages accordingly 
model utilizing implicit context separates interception alteration messages called contextual dispatch reflection call history 
ideally contextual dispatch provides mechanism disparate world views components interpreting messages omitted details altering messages contextually 
call history structural information provide knowledge drive contextual dispatch 
model consider exist boundary component 
inside boundary world view component holds outside boundary true global picture world view larger nesting component 
translation external internal world views occurs boundary termed boundary maps 
kinds boundary maps maps maps 
maps translate internal world view external world view maps translate opposite direction 
boundary map responsible interception particular kind message side boundary contextual dispatch generally side boundary 
say attach apply boundary map boundary boundary map explicitly associated boundary 
see component boundary shown various method calls names external components world view 
external world view different contains components 
component matches world views 
world view represented components system originally implemented components system reused 
order operate correctly define maps shown grey circles intercept messages bound nonexistent 
messages bound rerouted 
messages bound rerouted basis call history depend initialization choice occurred previously 
maps behave analogously 
boundary maps maintain facade unchanging interface permitting simple means backwards compatibility 
maps help individual component possess unchanging view system runs maps help system possess unchanging view individual components replaced modified 
just discussion eek object oriented view discussion implicit context objectoriented view 
implicit context situation information flows recognizable boundary 
maps redirect calls removing eek simple examples dependences names external components trivial repair 
boundary maps capture messages bound purported components replace messages actual components 
example messages bound vector replaced messages bound 
eek imposed requiring client components know components exist real system removed clients 
recall factory design pattern example section 
permit client literally contain statement product new utilizing factory capture call map attached boundary client 
map query call history determine instance refer factory passed client 
message carrying factory ignored map attached boundary client 
reroute call go factory return resulting object client 
note result boundary maps client require actual constructor exist receive message message intercepted gets 
client boundary part parent component moving statements boundary remain part parent part client 
eek system reduced client longer knowledge factory design pattern parent knowledge eek described section 
robot example straightforward deal implicit context 
attach map boundary robot filters canvas object gets passed 
attach map boundary primitive drawing call looks previously passed canvas adds parameter drawing call drawing call canvas 
canvas removed robot canvas remain boundary maps robot described see section eek 
implementation described section code constructor replaced prior compilation call factory transformed client require constructor exist 

implementation implemented mechanism recording call history means performing contextual dispatch java 
proof implementation built purpose determining concepts envisaged implicit context worthy study result implementation attempts provide literal representation model section 
surprisingly mismatches exist general model possible java details perfectly realized noted tradeoffs 
description implemented means recording querying call history explain boundary maps defined applied brief discussion addressing automated tool support 
call history order reflect history calls system need means record calls system means access record 
kinds queries access call history largely determine form information recorded 
proof concept implementation call history java stores method calls method returns threaded tree structure 
node tree represents call method program including receiving object objects primitives passed parameters object representing class called object representing method called 
nodes object class call 
call node link associated object return value call stored 
thread tree records causal order method calls ignoring presence separate threads 
tree encapsulated class called context 
number methods implemented context performing queries call history contains list 
exhaustive list possible queries 
store calls call returns tree defined snippets code instrument methods system executed start method executed method 
source code classes instrumented automated tool support 
contextual dispatch boundary maps heart contextual dispatch require boundaries apply 
proof concept considered natural easily named boundaries provided java methods fields 
facets boundary maps specification messages intercept code executed corresponding messages intercepted 
model calls messages intercepted modified java means actual messages statically modify methods achieve effect method calls outgoing field accesses 
see facets examining boundary map applicable factory example section 
note context class treated specially invoking methods stores call history intended accessed boundary maps 
classes natural easily named java boundaries approximated applying boundary maps method field 
call precedes call call class method object class method class method object object call class method class method object class method class class class query methods defined context class 
map applied boundary client allow refer directly map factory context class client class return factory apply client example map intercepts messages constructor applied boundary client 
identifier example permits multiple maps single name making easier apply set maps component 
map replaces messages constructor indicated block code 
block call context locate whichever instance passed client 
factory method invoked located object 
apply boundary maps component boundaries manually added relevant code classes named apply statements 
attaching map method boundary simply required code block inserted cut pasted method prior statements original method including statements store call history 
method exist class involved adding method indicated name signature specified body class 
permit field accesses mapped means capturing accesses fields class java 
mapping call field access involved adding new method class boundary mapping applied new method contained code block 
call sites affected map modified call new map method 
doing manually required search client classes access field equivalent maps attached boundaries wanted maintain concept independent compilation classes 
ensure resulting match correct scope followed replacement name call map method 
additional parameter required map method hold object original message sent 
encounter need example study model accounts application multiple maps boundary 
applied sequentially order specified engineer added map modifies code added 
automated tool support date applied implicit context minimal automated support 
making concept implicit context workable obviously requires tool support contextual dispatch recording querying call history 
currently developing automated tool support utilizing implicit context java programs 
described earlier applying maps maps straightforward process involving addition new methods modification existing methods classes associated maps 
approach components classes processed individually 
building tool perform process requires support processing boundary map specifications manipulating java source code 
javacc parse java source boundary map code 
manipulating resulting tokens achieve effect identical manual insertion process described 

example java swing library example eek arises implicit context address eek describe part java swing library 
swing graphical user interface gui toolkit intended provide consistency gui appearance platforms easy build sophisticated widgets 
swing distributed part sun microsystems jdk 
major feature swing pluggable look feel plaf architecture 
architecture allows display interactive characteristics look feel gui altered dynamically example user interface motif look feel altered run time windows look feel back 
eek jbutton swing gui widget object contains separate object called ui delegate responsible look feel widget particular plaf 
example jbutton class implements button widget associated class provides look feel separate subclass different look feel 
jbutton receives message paint forwards message currently installed ui delegate say object draws button properly current state 
feel widget changed current ui delegate object widget new ui delegate class located instantiated new ui delegate object installed widget 
button conceptually simple thing jbutton class defines inherits total public methods swing package plus public methods manipulation performed class files 
www com javacc java awt package 
consider eek perspective jbutton class 
instance knowledge plaf architecture eek perspective jbutton possible reuse button widgets absence plaf architecture 
identify jbutton ultimately rest widget classes swing evolved remove details plaf architecture breaking swing need examine details operation plaf architecture 
plaf works shows simplified object interaction diagram process locating instantiating installing new ui delegate jbutton object 
classes involved process aside jbutton 
specialized button ui delegate 
class inherits provides generic base class button ui delegates 
event handler responds events button presses plaf specific manner 
explicitly installed button widget button ui delegate 
base class various 
subclass specifies set ui delegate classes appropriate look feel 
class associated string describes purpose 
example specifies corresponds purpose corresponds purpose 
subclasses store mappings plaf actual ui delegate classes 
class various static methods registering information current plaf 
interactions classes support changing look feel complex 
depicts messages involved 
interactions represented describe happens right look feel changed method call class 
point application explicitly call utility method run invoke widget method 
jbutton results request obtain ui delegate object appropriate new plaf 
locates current plaf passes widget asking updated 
asks passed widget purpose jbutton responds 
uses stored information find appropriate ui delegate class current plaf 
uses java reflection interface instantiate ui delegate returns delegate passes jbutton 
jbutton begins process installing button ui delegate object 
jbutton calls internal method current ui delegate object shown diagram calls button ui delegate object passing argument 
button ui delegate installs various default properties button determined determined jbutton listener ui object interaction graph process installing basic plaf ui delegate jbutton 

time button ui delegate object creates plaf specific button event handler installs button object 
applying implicit context jbutton part jbutton contains eek worry plaf architecture ui delegate installation process 
jbutton need ask appropriate ui delegate instance need know 
jbutton contains inherits methods sole purpose supporting process 
methods jbutton conceptually cleaner permitting modified risk breaking system permitting reused having reuse ability change look feels 
addition eek worry installing plaf specific event handler jbutton 
specific goals mind applying implicit context jbutton 
remove need explicitly install plaf specific ui delegates event handlers jbutton removing details installation process jbutton 
plaf jbutton remain dynamically changeable 
meet goals way rest swing continues operate original plaf architecture 
steps involved applying implicit context remove details plaf architecture jbutton determine boundary maps support goals apply boundary maps described section 
removing plaf architecture jbutton meet goal removing plaf installation protocol jbutton removed methods providing functionality class 
maintain externally visible interface jbutton maps applied boundary captured messages methods ignored 
jbutton free eek arising plaf installation process 
broke plaf architecture swing needed implicit context place eek 
determining appropriate boundary maps repair damage swing produced removing plaf architecture jbutton needed apply boundary maps class boundaries 
resulting architecture shown 
map attached jbutton method performs set call history queries 
determine ui delegate purpose activated time button painted indicating ui delegate jbutton needs changed 
pseudocode map appears 
replace need explicitly install plaf specific event handlers jbutton instances introduced generic event handler class 
class consisted empty methods handling events 
map attached boundary method determines current ui delegate appropriate plaf specific event handler class events rerouted instance class 
need explicitly install plaf specific event handlers jbutton eek introduced gone 
variety simple maps maps complete integration implicit context 
jbutton required maps maps required maps different event handler methods required required maps maps plaf specific ui delegate class required maps maps 
statements perform queries call history times jbutton map twice map times maps plaf specific button ui delegate class 
boundary maps maps short lines code 
maps lines code code resulted handling initialization case button painted 
results applying implicit context tested results changes building simple application plaf changed dynamically 
behaviour implicit context architecture plaf changed uses significant sure error occurs old architecture jbutton 
set call paint jbutton 
set call associate ui delegate class plaf 
set null 
null just return currently cached ui delegate object 
retrieve ui delegate class passed 
set ui delegate purpose 
set call associate ui delegate class plaf 
go 
instantiate ui delegate class cache object 
return cached object 
pseudocode map 
depicted 
arcs remain jbutton vice versa arcs remain jbutton vice versa indicates removal installation process jbutton removal installation jbutton 
applying implicit context swing effects swing library 
source code jbutton conceptually simpler contains eek code focuses implementing functionality button 
jbutton easier reuse needing reuse plaf architecture 
jbutton easier maintain evolve free concerns plaf architecture 

discussion despite advantages offered applying implicit context early stage open issues remain 
effect comprehensibility implicit context may difficult reason operation system 
discuss possible criticisms 
criticism comprehensibility decreased separation small pieces code maps affect component code 
criticism applies techniques support separation concerns :10.1.1.115.8660
experience gathered applying approaches assess impact 
initial assessment aspect oriented programming number file switches certain programming tasks aspect oriented programming comparable slightly conventional object oriented programming interpreted indicating confusion created division compensated greater clarity divided pieces 
wrong ascribe great confidence weak results date empirical evidence available 
criticism boundary maps complex difficult understand 
swing believe implicit context listener ui jbutton listener event precedes behaviour implicit context architecture plaf changed 
shaded circles represent maps attached boundaries jbutton 
context version easier reason separates simplifies particular complex feature regular operation jbutton 
boundary maps investigated understand feature map relatively small largest lines 
majority maps trivial pseudocode trivial 
complexity map due existing intricacies plaf architecture 
thoroughly apply implicit context example maps simpler 
advantages implicit context approach able apply new system incrementally existing system 
limited experience understanding gained feature system modified plaf architecture determining maps needed writing maps onerous task 
maps complex 
cases developer reason system determine access information interest past execution system 
difficulty task vary depending complexity system complexity eek removed 
experience needed develop better sense complexity simplicity brought implicit context 
effect development implicit context allows remove eek systems 
implicit context merely move eek system determination eek relative component 
described section eek moves component component boundary code placed boundary generally eek higher level nesting component 
example consider implicit context version swing example 
map jbutton interacts part installation plaf moving interaction boundary map separates plaf architecture code jbutton making possible reuse jbutton plaf architecture 
separation ideally easier understand modify jbutton plaf architecture isolation experience required assured 
boundary map uses call history determine appropriate dispatch eek obviously removed reducing dependences part system part 
modified version swing example jbutton longer requires knowledge look feel purpose string 
realizing systems flexibility mechanisms certain design patterns currently chosen point implementation perceived needs system 
claim flexibility mechanisms bad 
fact mechanisms tend components bad eek 
wrong kind flexibility chosen altering system meet new flexibility demands hard altering components hard flexibility mechanisms obscure core concerns components broken changing core concerns 
implicit context allows gain benefits flexibility mechanisms permanently tied need concerned developing evolving components 
concentrated implicit context changing existing system applicability initial development system 
prevent eek inception system hope system simpler create 
speculation thinking matter 
potential implementations current implementation mechanism implicit context simplistic intended means studying implicit context increase reusability flexibility components 
test application swing example experienced order magnitude slowdown proof concept implementation 
implicit context useful better implementations needed argue implementations possible 
obvious drawbacks proof concept implementation 
stores call history instrumenting method class invocation information related call recorded history 
experience instrumenting systems support object oriented visualization suggests approach significant negative impact performance require great deal storage long running programs 
second supports arbitrary set queries call history 
powerful query information collected support 
problems addressable 
information stored simple queries optimizable example information required answer precedes query stored single bit bit set called reset called 
optimizations necessary subset kinds queries 
furthermore record information needed answer queries system 
efficient querying remains problem reducing amount information collected intend build encoding techniques developed support tools analysis large object oriented systems 
perform optimizations map map specifications help 
specifications analyzed determine subset methods instrumented reducing amount call information needs recorded 
approach require global analysis components maps believe workable reasons 
analysis heavyweight requiring scan maps static inheritance structure system 
second instrumentation applied gather information requires simple transformation code done load time 
addressed concerns necessary understand form call history queries useful consider optimizations 

related software engineering programming languages oriented increasing independence reuse components 
separation concerns implicit context closely related approaches intended help explicitly separate concerns program text 
separation concerns soc approaches provide specific support particular kind separation 
provide general mechanism 
describe examples discuss implicit context compares 
relationship eek concerns unclear 
believe overlapping concepts believe overlap incomplete 
eek includes details minor considered full fledged concerns name dependences component possess non extraneous knowledge multiple concerns 
relationship requires investigation 
specific soc approaches deline flexible packaging focuses separating details component interaction component 
flexible packaging separates component functionality interactions called packaging distinct entities ware 
ware packaged different environments plug web browser command line filter 
implicit parameters allow explicitly designate set intervening methods sender receiver need aware set parameters parameters transferred sender receiver alteration source code intervening methods 
developer specifies source code sender receiver parameter communicate implicit mechanism 
comparison implicit context flexible packaging implicit parameters provide abstracted means dealing particular kinds eek 
flexible packaging provides means addressing question component interacts 
implicit parameters provide specific means expressing parameter extraneous describing transmit appropriate receiver 
case additional abstraction comes price source component written explicitly particular mechanism 
contrast implicit context achieve objectives having write component mechanism 
general soc approaches number general approaches separating concerns system appearing years 
programming means composing integrating disparate class hierarchies subjects represent different concerns subsequent hyperspaces considers separating concerns multiple dimensions 
aspect oriented programming provides support cross cutting concerns distribution look feel system 
modularized concerns combined system desired 
composition filters separate objects internal part possibly consisting multiple objects interface part defines input output filters manipulate possibly redirect messages 
filters separate concerns synchronization 
similar approaches implicit context intended help separate different parts system increasing independence parts 
similar implicit context approaches involves explicit separation parts program source 
implicit context differs approaches supporting contextual dispatch reflection call history system 
feature supports investigation binding components affect structuring systems 
approaches early stage development detailed analyses benefits costs form separation available 
explicit context increase flexibility system approaches focused explicit context 
traces allow interpretation messages altered limited form explicit context 
list ancestor classes independent class hierarchy may explicitly built attached object 
attached object set describing patterns ancestor classes 
message received object choice method invoke determined pattern ancestor list object matches 
context relations provide language mechanism support strategy pattern allowing context objects basically dispatch tables dynamically attached instances 
receipt message object method selection performed context object currently attached receiver object 
mechanisms help address specific kind eek 
ancestor lists traces thought particular paths call history tree permitting limited means reflecting system history 
context relations address need eliminating eek related early binding names 
explicitness mechanisms forces developer commit early stage development embedding source code implicit context 
implicit context permits removal forms eek 
instance implicit context approach possible access information call history parameters related call 
additional information possible separate swing plaf architecture jbutton described earlier 
kind separation possible explicit context approaches 
adaptors wrappers variety previous attempts decouple components alteration interfaces adding additional functionality apparently unchanged interface 
structural design patterns attempts 
example adapter design pattern alters interface class may clients expecting different decorator design pattern allows additional responsibilities attached object dynamically 
adapter design pattern disadvantage simplest form transparent clients adapted object longer conforms original interface 
course clients access object adapted interface problem 
multi way adaptation get problem introduces need clients instantiate different class source code clients altered 
decorator pattern works delegation ensues notorious problem ensuring object calls methods decorator object identity problem 
polylith provides software bus allows specifications application structure deployment nodes inter component communication separated 
simple communication statements components adapted conform needs actual deployment geometry communication protocol needs heterogeneous architectural 
polylith attempt making components flexible separating concerns distributed inter process communication remove degree eek permit indirect kind communication implicit context provides example parameters filled call history 
type adaptation provides mechanism contextual dispatch absence call history 
call history allows fill additional parameters way type adaptation 
goals implicit context similar adaptor wrapper predecessors allows component provide interface clients expect result components reusable invasive change needed 
implicit context mechanism allows greater dissimilarity expected provided interfaces 
implicit context constrained information directly passed directly accepted may add additional information garnered call history information stored 
similar mechanisms number existing approaches support similar mechanisms implicit context 
implicit invocation means separating control flow explicit knowledge names components 
implicit invocation remove eek arising knowledge names subscribing classes methods remains components involved implicit invocation protocol relationship aware particular mechanism place plus subscribers event publishers need recognize common interface passing events events 
languages perl tcl permit access current call stack 
implicit context provide access prior calls 
provide general means retrieval passed parameters 
dynamic scoping available languages lisp variants shares similarity mechanism implicit con text 
dynamic scoping allows variable names bound non lexical scope determined call stack run time 
contrast implicit context dynamic scoping permit description variable name bound name properties scope desired variable structure call history base search described 
time learn experiences gained dynamic scoping elaborate implicit context approach 

reusability evolvability components goals software engineering difficult achieve current technology 
current approaches components complex 
complexity component rarely stems cause 
component knowledge components conceptually required component provide behaviour difficult remove 
refer unnecessary information extraneous embedded knowledge eek 
eek occurs forms components including reliance particular names supporting non local structure extraneous parameters 
introduced concept implicit context way reducing eek components 
implicit context combines means rerouting messages system ability reflect history calls system 
date focused showing utility implicit context approach 
benefits achieved applying implicit context swing step automate support implicit context continue investigate impact program structure 
perfect world software evolved concerned cost reinventing wheel new system implicit context needed 
implicit context allows incrementally manipulate structuring systems address problems reusability evolvability encountered software engineering 

clarke martin providing insightful comments earlier draft brian de discussion flexibility design gregor kiczales version canvas passing example 
funded natural sciences engineering research council nserc canada 
java trademark sun microsystems 

aksit bergmans 
object oriented language database integration model approach 
european conference object oriented programming pp 

lncs 
deline 
avoiding packaging mismatch flexible packaging 
international conference software engineering pp 

fowler 
swing architecture overview inside story jfc component design 
java sun 
com products jfc tsc archive arch swing arch swing arch html 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
garlan notkin 
formalizing design spaces implicit invocation mechanisms 
international symposium vdm europe pp 

lncs 
harrison ossher 
subject oriented programming critique pure objects 
conference objectoriented programming systems languages applications pp 

acm sigplan 
kiczales 
traces cut isn generic problem international symposium object technologies advanced software pp 

lncs 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
european conference object oriented programming pp 

lncs 
lewis shields meijer launchbury 
implicit parameters dynamic scoping static types 
symposium principles programming languages pp 

ossher kaplan katz harrison kruskal 
specifying subject oriented composition 
theory practice object systems 
ousterhout 
tcl tk toolkit 
addison wesley 

polylith software bus 
acm transactions programming languages systems 
palsberg lieberherr 
evolution object behavior context relations 
ieee transactions software engineering 
tarr ossher harrison sutton 
degrees separation multi dimensional separation concerns 
international conference software engineering pp 

walker murphy 
initial assessment aspect oriented programming 
international conference software engineering pp 

walker murphy freeman benson wright swanson 
visualizing dynamic software system information high level models 
conference object oriented programming systems languages applications pp 

acm sigplan 
walker murphy 
efficient mapping software system traces architectural views 
technical report tr department computer science university british columbia 
wall christiansen schwartz 
programming perl 
reilly associates nd edition 
yellin strom 
interfaces protocols semiautomatic construction software adaptors 
conference object oriented programming systems languages applications pp 

acm sigplan 
