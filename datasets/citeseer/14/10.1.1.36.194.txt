proposal arpa ito baa framework interoperable representations reflective framework formal interoperability submitted sri computer systems laboratory ravenswood ave menlo park ca collaboration department computer science stanford university stanford california innovative claims practice find constant need moving back forth different formalizations capturing different aspects system 
example large software system typically different requirements functional correctness performance real time behavior concurrency security fault tolerance correspond different views system typically expressed different formal systems 
requirements affect extremely difficult reason mutual interaction tools exist support reasoning 
situation unsatisfactory presents biggest obstacles formal methods software engineering complexity large software systems fact life single perspective single formalization level abstraction suffices represent system reason behavior 
need meta formal methods tools achieve formal interoperability capacity move mathematically rigorous way different formalizations system rigorously integrated way different tools supporting formalizations 
develop new formal interoperability methodologies generic meta tools expected achieve dramatic advances software technology formal methods ffl general methodology defining inter language translations languages architectural description languages adls formal specification languages programming languages mappings may move different categories languages 
ffl formal language translation meta tool formal specifications languages mapping generate executable translator tool transforming statements modules language counterparts language 
ffl methodology generating semi automatically reasonably efficient theorem prover implementation meta logical specification theorem prover inference system easily combining different theorem provers defined method 
ffl general methodology creating checking heterogeneous proof objects certify correctness final result proof effort involving different theorem provers working distributed way 
ffl heterogeneous meta proof checker tool meta logical specifications formal systems inter translations generate proof checker heterogeneous proofs combined system 
ffl general methodology endowing formal specification languages declarative programming languages powerful extensible module composition mechanisms formalism independent way 
ffl module calculus meta tool logic specification programming language satisfying reasonable requirements generate executable language extension enjoying powerful extensible module composition operations 
ffl metaprogramming methodology modules reified data reflective adaptation software modules runtime may depend changes environment 
technical rationale practice find constant need moving back forth different formalizations capturing different aspects system 
example large software system typically different requirements functional correctness performance real time behavior concurrency security fault tolerance correspond different views system typically expressed different formal systems 
requirements affect extremely difficult reason mutual interaction tools exist support reasoning 
furthermore manage complexity evolution complex systems important formal representations different levels abstraction architectural descriptions formal specifications finite state models code structure 
important able move rigorously levels understand precisely constraints imposed descriptions different levels 
formal methods software specification verification monolithic sense approach formal system specification language formalize desired system properties 
reason formal approaches useful appropriate level abstraction formal systems tools autistic lack theoretical basis related formalisms supporting tools 
consequence extremely difficult integrate rigorous way different formal descriptions reason descriptions 
situation unsatisfactory presents biggest obstacles formal methods software engineering complexity large software systems fact life single perspective single formalization level abstraction suffices represent system reason behavior 
need meta formal methods tools achieve formal interoperability capacity move mathematically rigorous way different formalizations system rigorously integrated way different tools supporting formalizations 
meta tools kind may include ffl meta logical frameworks different logics specification languages defined executed 
ffl meta logical translators rigorous translations pair logical formalisms defined automated 
extremely useful vastly increase applicability tools example theorem prover logic prove theorems different logic 
ffl meta logical module calculus tools specifications arbitrary logic logics support powerful parameterization module composition operations combine specifications highly modular reusable way 
crucial attainment formal interoperability issue correctness 
understand correct formal interoperation means key meta level notions logical formalism mappings formalisms reflective logical frameworks heterogeneous composition mathematically precise 
proposed meta tools technology formal interoperation solid formal foundation methodology 
provide flexible extensible framework support building converting composing analyzing multiple models software systems operating different levels having different underlying formalisms 
core technologies briefly sketch meta logical foundations provide basis achieve goal formal interoperability 
briefly discuss ffl theory general logics associated notion mapping logics ffl notion meta logical framework rewriting logic purpose ffl maude implementation rewriting logic ffl notion reflection power reflective techniques ffl open mechanized reasoning systems framework formal interoperation reasoning tools 
general logics mappings single logical formalism specification language prototyping language best purposes 
exists space possibilities careful choice formalisms best suit purposes exercised 
theory general logics proposed aimed analyzing space logics providing basis general logic independent tools 
theory modular permits focusing different aspects logic provability relation models proofs combining aspects depending particular applications 
theory provides axiomatic characterizations different aspects logic combinations fuller notions logic 
different aspects axiomatized means basic concepts ffl entailment system consequence relation logic ffl institution notion due goguen burstall covers model theoretic aspects logic focusing notion validity ffl logic obtained combining entailment system institution ffl proof calculus enriches entailment system actual proof theory ffl logical system logic choice proof theory crucial practice correct flexible methods changing point view move model formalism 
maps logics possible 
mapping logics translates logic gamma 
preserving logical properties relevant provability formulas satisfaction formula model 
mappings allow relate different logics rigorous way combine different formalisms explore new logics computational purposes 
serve foundation methodology achieve formal interoperability capacity move mathematically rigorous way different formalizations system rigorously integrated way different tools supporting formalizations 
definition automation maps kind supported tools meta logical translator formal definition map logics implement map 
meta tool useful enabling formal interoperation tools different formal systems 
example automatically translate specifications logic corresponding specifications theorem prover exists 
map required properties conservative theorem prover mechanically prove theorems source specification 
meta logical frameworks rewriting logic meta logical framework universal logic wide variety logics faithfully represented means conservative maps logics gamma 
number logics proposed literature meta logical frameworks kind 
proposals offer variant higher order type theory framework logic see 
simpler alternative proposed mart oliet meseguer rewriting logic 
rewriting logic flexible simple logic naturally general logical semantic framework metalogic ffl logics defined ffl languages semantically defined prototyped ffl heterogeneous languages systems integrated ffl generic tools designed precise formal basis 
rewriting logic axioms rewrite rules form applied modulo structural axioms specified syntax 
rewrite rules logical computational reading 
logically rewriting step logical entailment formal system 
computationally rewriting step parallel local transition concurrent system 
rewriting logic meta logical framework represent logics semantic framework defining prototyping computational systems languages 
implementation rewriting logic maude system logics prototyped executed means corresponding rewriting logic representations 
logics example order logic intuitionistic logic linear logic equational logic horn logic equality sequent logics represented simple natural way rewriting logic 
conjecture effectively logic logic practical computational interest represented prototyped rewriting logic way 
furthermore reflective techniques possible define execute rewriting logic representations logic framework rewriting logic general mappings gamma 
logic 
great flexibility representing computational systems including concurrent ones rewriting logic flexible semantic framework formal models different languages systems 
example ccs petri nets actors unity language functional languages dataflow graph rewriting object oriented languages conventional languages defined prototyped executed rewriting logic 
rewriting logic maude language key advantage rewriting logic logical semantic framework rewriting logic specifications efficiently executed 
provides general way prototype execute different logics different models languages including architectural description languages programming language definitions 
cases just execute corresponding rewriting logic specifications furthermore easy interoperate different logics formal languages combining executable rewriting logic representations 
maude system efficient implementation rewriting logic combines flexibility traceability interpreter efficiency advanced techniques 
reach rewrites second relevant applications running pentium pc 
supports sophisticated rewriting modulo wide range combinations equational theories associativity commutativity identity idempotency expressive type structure membership equational logic supports types subtypes subtype polymorphisms partial operations 
maude modules import modules parameterized supporting algebraic style parametric polymorphism 
key additional feature crucial importance applications envisioned proposal maude reflective support arbitrary number levels reflection computations 
feature explained follows fact rewriting logic reflective 
furthermore rewriting logic intrinsically concurrent adequate subsets logic efficiently implemented concurrent mobile languages 
provides wide spectrum formal framework pass executable specifications correct efficient code 
reflection reflection system ability represent control metalevel 
way powerful techniques extend adapt modify system available 
researchers recognized great importance usefulness reflection programming languages theorem proving concurrent distributed computation areas compilation programming environments operating systems fault tolerance databases see snapshots research reflection 
particular reflective methods enormously useful achieving formal interoperability 
spite important topic semantic foundations reflection understood 
case reflection logical languages proposed general axiomatic notion reflective logic :10.1.1.22.3519
axioms theory general logics formulated logic independent way reflective logic explicit parameter depend particular details logic 
key concept axiomatization reflective logics notion universal theory theory simulate deductions theories class theories interest 
particular theories class simulate metalevel object level process iterated ad infinitum giving rise reflective tower 
examples reflective logics including lambda calculus turing machines discussed :10.1.1.22.3519
original motivation studying reflective logics come rewriting logic desire endowing maude language reflective features rigorous way 
fact proposed specific universal theory rewriting logic proved correct satisfies formal requirements stated reflective logic :10.1.1.22.3519
reflection enormously powerful useful property practice 
key aspect research development theoretical foundations exploiting reflection wide range applications maude language implements rewriting logic supports reflective capabilities tool developing applications 
number areas application reflection rewriting logic maude directly relevant formal interoperability ffl logical framework applications executable representations logics logical framework rewriting logic 
ffl modularity applications allowing semantic definition implementation open extensible module algebra combine program modules powerful ways 
ffl formal environments 
reflection easy specify build formal environments providing theorem proving formal analysis support logically specification programming language 
idea inference systems tools implement rewrite theories fact tools operate metalevel entities including object theories verify formally analyze naturally supported reflective features 
ffl adaptive software metaprogramming 
modules reified data possible easy write programs manipulate transform adapt programs including adaptation software modules runtime may depend changes environment 
open mechanized reasoning systems open mechanized reasoning systems general framework modular construction interoperation mechanized reasoning systems 
ultimate goal provide framework methodology users system developers construct complex reasoning systems composing existing modules add new modules existing systems plug play manner 
realize goal reasoning modules viewed providers logical services called 
key components specification reasoning theory component counterpart logical notion formal system control component consists set inference strategies interaction component provides capability interacting systems including human users 
reasoning theories deal structure assertions rules constructing reasoning structures objects representing proof fragments 
address problems scale locality information reasoning theories structured compositions fragments parameterized reasoning theories 
rules called bridge rules relate assertions different fragments establish nontrivial links interoperation multiple theories 
bridge rules serve formal basis interfaces specification services provided required reasoning modules 
demonstrate approach modular specification nqthm simplifier collection reasoning theories bridge rules connecting different reasoning experts 
specification decomposition reconstruction simplifier carried augment prover ability produce proofs reasoning structures 
strong connection framework rewriting logic 
finitely reasoning theories correspond special class rewrite theories reasoning structures generalize proof terms rewriting logic term graphs directly model sharing partially developed proofs 
control aspect naturally represented strategies rewriting logic 
framework naturally represented executed rewriting logic language maude 
focused interoperation integration mechanized reasoning systems problems addressed include general problems modularization composability interoperability specific domain mechanized reasoning 
ideas techniques developed applied formal interoperability formalisms 
technical approach section describes technical approach core facets proposed research 
technical approach additional options 
proposed research main interconnected facets ffl formal interoperability meta tools ffl formal interoperability case studies leading ffl formal methodology 
developed parallel gain benefit mutual feedback 
unifying idea reflection rewriting logic meta representation representations maude data types terms meta representing theories executed analyzed transformed simple user definable operations 
initially focus efforts tool categories ffl meta tool mappings formal languages languages architectural description languages formal specification languages programming languages mappings may move different categories languages 
ffl proof assistants methods defining reasoning tools maude interoperating maude external tools 
advantages approach include rapid prototyping ideas interoperation diverse tools formally tools easier verify safely modify 
ffl generic module calculus sophisticated operations terms represent software modules 
mappings explained rewriting logic logical framework different logics languages systems naturally represented 
useful executable specification rapid prototyping formal reasoning 
clavel meseguer shown rewriting logic reflective 
rewrite theory finite number operations rules simulate finitely presentable rewrite theory sense terms corresponding terms hr ti hr gamma 
hr ti gamma 
hr support efficient reflective computations maude builds key features universal theory form maude module called meta level 
particular meta level data type module terms meta representations maude modules theories rewriting logic 
general reflective method reifying representation map logic rewriting logic inside rewriting logic proposed 
reification takes form maude equationally defined function data types representing finitary theories data type module representing finitely presentable theories 
example powerful idea worked detail complete specification reified map full quantifier free order linear logic rewriting logic 
example linear theory defined finite set propositional constants finite set sequents form bm linear logic formula built constants note definition linear theories finitely presentable 
define data type ll adt represent linear theories 
linear theory represented term list propositional constants identifiers list sequents written usual way 
having defined data types represent linear rewrite theories define function phi ll adt gamma 
module mapping term ll adt representing linear theory term module representing corresponding rewrite theory phi represents summarize reification phi ll adt gamma 
module map logics phi gamma 
just defined means commutative diagram ll adt module phi phi term data type module compiled executed maude rewrite theory mapping automatically provides implementation linear logic theories maude executing linear theory corresponding rewrite theory phi term ll adt represents method implemented maude example completely general applied effectively map logics psi gamma 
maps finitely presentable theories finitely presentable theories rewriting logic 
effectiveness psi means exactly corresponding psi adt gamma 
adt computable function metatheorem bergstra tucker specifiable finite set church rosser terminating equations inside rewriting logic 
fact meta representation applied translate logics formal specifications formal languages architectural description languages programming languages 
general formal languages meta represent modules languages data types adt adt 
provides general method defining implementing effectively map phi gamma 
formal languages simply specify function phi adt gamma 
adt finite set church rosser terminating equations exists phi effective 
provides general method implementing maps formal languages technical core meta logical translation tool 
tool allow user specify syntax modules different formal languages define map phi gamma 
execute map translate modules modules case execute translated modules representing proof assistants reflection exploited development interoperation new formal tools logic interest easier 
idea help reflection tools easily specified implemented rewriting logic remarkable efficiency 
demonstrated advantages reflective method building proof assistants including ease programming understandability maintainability interoperability tools developed order magnitude gain software productivity compared tool building conventional language means tools freely available web part cafe project japan knuthbendix checker tool inductive theorem prover order sorted equational logic 
briefly explain reflective design tools 
goal knuth bendix checker ensure equational theory decidable equations rewrite rules terminate unique result canonical form 
checking termination uniqueness canonical form called convergence checked checking equational theory complete certain inferences expressed completion inference system theory want complete appears object level 
inference rules clearly metalevel rules defining theory level 
key point strategy controlling application inference rules yielding desired checking procedure appears term theory corresponding instantiating internal strategy language inference rules object theory 
transforms theory metalevel theory metalevel theory theory meta metalevel 
keeping levels reflection separate key maintaining modularity 
illustrated 
meta meta level meta level object level object theory completion inference rules checking strategy reflective design inductive theorem prover tool quite similar knuth bendix checker tool 
levels 
object level theory want prove theorems 
inductive inference rules data meta level 
theorem proving strategies may want apply inductive inference rules specific way prove theorem meta meta level 
part proposed research plan develop illustrate reflective methodology building proof assistants 
specifically develop new tools cluding knuth bendix completion tool coherence completion tool complete rules rewrite theory relative equations equational subtheory assuming equations membership equational logic 
extend generalize current inductive theorem prover tool support inductive proofs membership equational logic rewriting logic proofs sufficient completeness specifications 
furthermore specify temporal logic select model checker general proof system logic possibly murphi step respectively demonstrate combined power interoperation new tools conjunction existing model checking tool 
ease interoperation ease tool development key features demonstrated combination tools 
specification implementation proof tools general methodology semi automatically generating reasonably efficient implementation proof systems meta logical specification prover inference system easily combining different theorem provers defined method 
translations logics theories provide basis semantically meaningful combination proof systems 
experiments demonstrate methodology building efficient reasoning components ease combining components preexisting reasoners maude tool 
important advantage resulting having proofs objects proofs constructed passed subject proof code theorem example potential users 
user assured required property merely claim provider checking proof generally quite simple 
metalogical framework rewriting logic general methodology creating checking heterogeneous proof objects certify correctness final result proof effort involving different prover systems working distributed way 
methodology algebra proof terms derived rewrite rule specification proof system inference rules 
notion bridge rules combine reasoning theories reasoning structures specify relations assertions different proof systems form basis notion heterogeneous proof terms combines proofs different proof systems obtain proofs 
bridge rules turn translations underlying formal systems 
methodology produce high level proofs resulting combination existing provers 
prover considered simply black box implementing side condition rule corresponds prover 
deeper analysis provers inference engine provide ability enhance prover ability produce detailed justifications 
interoperation architecture description languages idea interoperating diverse logical formalisms tools combining executable representations rewriting logic applies classes languages 
shown tool developed cafe provides limited capability checking specification church rosser restricted case order sorted equational specifications 
new tool provide full knuth bendix completion capabilities general expressive case membership equational logic 
example components expressed different architectural styles combined executed maude 
just instance general approach adls represented data types mappings defined components described adl rewrite theories appropriate semantic model connectors mapped adaptor modules 
different adls may different formalisms specify component connector interfaces csp lotos automata formalisms temporal logics 
general mappings maude representations formalisms tools analyzing checking properties tools different formalisms applied heterogeneous architecture descriptions formal mappings formalisms results combined semantically meaningful ways 
meta logical module calculus important new contributions maude metaprogramming methodology supports simple powerful way 
methodology integrated language semantic foundations particularly logical foundations reflection 
metaprogramming course mean capacity defining programs operate programs data case equational rewrite theories operate theories data 
observing reify theories views includes traditional parameterized programming capabilities clear obj tradition particular instance 
difference traditionally theories metalevel entities accessible object level logic possible explicitly reflective logical context 
reflection accomplishes open user meta level language having fixed repertoire parameterized programming operations define wider range theory transforming theory combining operations defined traditional means 
summary important capability reflection possible maude definition open extensible user definable module algebra supporting new style metaprogramming promising advantages software methodology 
capability important large software systems constant need evolution 
need extended modified ways anticipated system originally built exist social context evolving needs generate new system requirements 
software technology provides quite limited support reusing adapting modifying large systems 
important progress area adls languages remain moment primarily syntactic nature 
mathematical semantics software composition important specifying conditions composition operations behave properly important formal framework different adls different module composition mechanisms defined related rigorous way 
develop new software technology capable drastic improvements area promising research direction developing module calculus composition compact formal description software systems software designs characteristics ffl wide spectrum 
module composition operations simultaneously transforming specifications prototypes code 
ffl semantics 
formally stating semantic requirements met order corresponding compositions correct 
ffl language independent 
calculus applied languages 
ffl formalism independent 
applied different specification formalisms 
ffl extensible 
new module composition operations easily added calculus support widest possible variety system adaptations reuses 
developing module calculus features challenging research problem requiring new foundations 
fortunately body existing basis 
level specifications formalism independent techniques going back institution ideas goguen burstall extended theory general logics discussed proposed encouraging experience exists regard specification languages clear obj act maude 
techniques influenced module mechanisms ml syntactic counterparts languages ada 
mentioned body sufficient module calculus truly extensible 
reflective formal framework rewriting logic essential purpose 
particularly important pragmatic aspect modular specification concerns stable evolution extension specified system changed extended changes extensions specification preferably commensurate 
feature concerned contents modules interfaces module algebra compose 
presence ensures specification scales smoothly size specified system increases 
pragmatics achieved semantic specification programming languages action semantics approach developed mosses watt 
example extending functional imperative programming language concurrency constructs specification original language remains stable merely extended specification new constructs 
marked contrast conventional denotational semantics extension require reformulation entire specification 
disciplined monads monad transformers proposed moggi provides systematic approach achieving pragmatics modularity denotational semantics interesting monads support reflection :10.1.1.26.2787
close relationship action semantics monadic style denotational semantics shown 
technical approach options option 
reasoning tool java formal interoperation tools manipulate analyze transform code important clear semantic basis 
modern programming languages scheme ml java provide imperative higher order functional programming facilities 
substantial developing foundation semantics manipulation languages 
uniform semantics unified framework reasoning program equivalence lambda languages higher order programs effects 
includes imperative functional languages scheme lisp ml object oriented languages java 
places methods developed semantics imperative functional programs general setting 
lambda language programming language obtained augmenting lambda calculus primitive operations 
primitive operations mind include basic constants branching algebraic operations arithmetic pairing operations manipulate computation state store continuation environment sending messages creating processes 
uniform semantics syntactic reduction system satisfying certain uniformity constraints 
general principles reasoning program equivalence sequential lambda language uniform semantics combining benefits reduction calculi modular axiomatization operational equivalence equations 
includes extension results concurrent languages generalizing theory program equivalence lambda languages primitives creation concurrent objects asynchronous message passing developed 
action semantics framework modular description programming languages proposed mosses collaboration watt years ago 
main advantage frameworks pragmatic action semantic descriptions inherently modularity scale smoothly smaller examples realistic programming languages 
action semantics uses semantic equations give inductive definitions compositional semantic functions map syntax semantic entities 
semantic entities primarily called actions higher order functions scott domains conventionally denotational semantics 
actions expressed standard action notation provides primitives combinators expressing flow information control 
action notation operational semantics app 
induces operational semantics language asd 
semantic entities involve data algebraically specified essentially parameter action notation 
action semantics shown closely related monad transformers 
action notation provides support reflection treatment reflection filinski may lead enhancement aspect 
frameworks action semantics uniform semantics rewriting logic considerable potential synergy 
adopting uniform semantics defining action notation theory equivalence developed uniform semantics applicable action notation 
specifying uniform semantics rewriting logic existing tools rewriting logic interpreting uniform semantics 
reduction programming languages action notation provided existing action semantic descriptions lift uniform semantics languages 
composing mappings action semantics uniform semantics uniform semantics rewriting logic provide basis useful prototyping system 
maude tool ideal medium activity 
advantages approach formal tools programming languages include ffl executable semantics ffl rapid prototyping testing ideas ffl extensibility move gracefully sequential concurrent reflective languages ffl formal support manipulating reasoning software interoperation tools 
demonstrate approach convincing way propose apply methodology java clean useful sequential fragment extending account concurrency mobility 
development java tool build defining semantics simple object oriented sublanguage java written watt 
existing prototyping tools action semantics support concurrency proposed tools maude needed validation proposed extension watt semantics 
project benefit substantially participation professor mosses visiting research group 
benefit ongoing collaboration professor ian mason 
proposal additional funding continue collaboration mason submitted australian research council 
option 
reflective model adaptive systems goal optional task develop core technology new formally approach runtime adaptive software reflective meta programming capabilities rewriting logic 
capabilities efficiently supported maude system provide experimental infrastructure research 
technical approach summarized follows 
think adaptive software component parameterized family components fc parameters fixed provide different adaptations component different situations general parameter space possibilities corresponding adaptive component formal model form parameterized family executable specifications fm rewriting logic explicit representation relationship adaptive component formal model captured mapping oe gamma 
parameter spaces model adaptive components model corresponds component oe 
complete formal foundation adaptive software need develop axiomatic characterization computational reflection relation logical reflection 
runtime behavior oe reflective capabilities rewriting logic adapt component new model new instantiation oe fly 
process runtime adaptation specified meta level meta programming rewrite theory maude 
natural step development core technology moving adaptation single component distributed adaptation collection interacting components 
anticipate support provided rewriting logic maude distributed object oriented reflection including important case actor reflection prove key regard 
important kinds distributed adaptation include adaptation security threats failures dealt modular flexible way runtime means object oriented reflective techniques plan develop 
maude develop examples case studies adaptation distributed adaptation 
ultimate fruit experimental formally methodology software adaptation general applicability wide range situations 
option 
interoperable formal tools ood diagrams aspects design computer systems 
typical examples include data flow diagrams flow charts structure charts entity relationship diagrams state diagrams petri nets 
popular object oriented methods different types diagram represent system multiple viewpoints 
methods particularly helpful early phases requirements analysis design providing notations suitable organizing large volume information system development 
modeling techniques greatly assist obtaining initial structuring design information 
detailed problem analysis design requires degree rigor typically available informal methods 
great potential benefit providing object oriented design notations formal semantics 
furthermore executable formal specifications systematically associated graphical object oriented descriptions possible formally analyze reason designs symbolically simulate behavior possible graphical descriptions 
omt comprises complementary models object dynamic functional models defined terms entity relation diagrams state diagrams data flow diagrams respectively 
diagrams respectively model architecture static behavior dynamic data flow services system 
cheng developed formalization rules omt models object model defined terms algebraic specifications dynamic model defined terms process algebras 
developed number graphical tools support specification construction manipulation 
wirsing extends jacobson object interaction diagrams formal annotations 
annotated diagrams formal specifications written maude automatically generated java code generated maude specification 
approach provide formal semantics object oriented analysis design notations omt object modeling technique jacobson notations rewriting logic semantic framework 
expected benefits include ffl semantic integration different viewpoints methodology methodologies captured terms single formal specification language ffl path graphical descriptions executable formal specifications maude tool rewriting logic enable rapid prototyping provide early feedback developer ffl semantics analyses consistency completeness ffl starting point application formal refinement code generation techniques 
option 
designs logic mappings goal task demonstrate usefulness formal interoperability methodology tools showing enhance theorem proving systems 
specifically providing interoperability enabling mappings systems new applications capabilities possible 
focus design mapping pvs mapping nuprl useful important case studies 
research focused design mappings proposed methodology serve basis full implementations 
specifically focus ffl preliminary design translation subset pvs language maude 
expected benefit implementation translation dramatic speeding simplification rewriting capabilities pvs 
useful application areas hardware verification current key limitations computation time required large applications 
high performance maude rewrite engine rewrites second pentium pc combined traceability rewrites proof objects extracted desired offer excellent opportunity exploiting formal interoperability concrete situation 
ffl preliminary design general methodology translation hol nuprl 
benefit making available nuprl large library hol theories specifications 
translation hol nuprl proposed howe stresses advantages making way nuprl large body hol specifications clear translation seen particular instance proposed general methodology translations formal systems 
interesting test case methodology 
option 
optimizing adaptive reflective systems general reflective model adaptive software corresponding methodology developed years natural step investigate year software optimization techniques making possible highly efficient powerful adaptive computation practice 
point reflection general adaptation particular powerful capabilities come cost including cost execution performed runtime 
cost drastically reduced making techniques practice means number optimization techniques including ffl compiling away levels reflection techniques supercompilation partial evaluation ffl compiling away execution strategies scheduling runtime policies ffl compilation evaluation module expressions corresponding complex instantiations different combinations adaptive components ffl extension techniques distributed object oriented setting 
study optimization techniques application improving efficiency adaptive components experimental evaluation efficiency gained case studies emergence new optimization techniques methods adaptive software results expected year task 
comparison ongoing research core technology general logics extends theory institutions related institution notions proposed literature including see discussion quite active field 
generally flexible alternative notions representing integrating different model theoretic proof theoretic components logic main advantage approaches conjunction reflective logical framework rewriting logic 
essential difference reflection metalevel notions mappings logics theoretically defined approaches defined executable way rewriting logic 
proposal rewriting logic logical framework related logical framework proposals edinburgh logical framework lf meta theorem provers isabelle prolog elf metalogical framework proposal basin constable advocate constructive type theory framework logic matthews smaill basin feferman fs logic designed explicit purpose metalogical framework 
key advantage constructive type theory proposals greater simplicity representational flexibility rewriting logic framework logic 
practice translates logic representations virtually isomorphic original logics represent easier understand complex encodings 
contrast logical frameworks mentioned higher order type theories having strong proof theoretic power disadvantage requiring complex translations lacking adequate representations certain logics 
technical approach module calculus related module composition ideas goguen burstall institutions developed encouraging experience exists regard specification languages clear obj act maude 
generally speaking related formalism language dependent approaches 
approach bracha lindstrom context object oriented languages lambda calculus underlying formalism metaobject protocol approach examples variety proposals object oriented programming area ml language fine example field functional programming 
extensive body applying higher order lambda calculi dependent polymorphic types design highly modular functional languages semantics inheritance object oriented languages 
approach modules shares institution approaches advantage formalism independent 
main difference openness extensibility reflection provides 
alternative approaches offer fixed repertoire module building operations essentially remain inaccessible object level 
contrast propose extensible module algebra powerful potentially unlimited possibilities extension new user defined module operations 
proposed approach reflection related vast literature reflection programming languages theorem proving concurrent distributed computation areas compilation programming environments operating systems fault tolerance databases see snapshots research reflection 
semantic foundations reflection understood distinctive advantage approach previous approaches general axiomatic notion reflective logic part theory general logics logic independent 
advantage combined efficient implementation reflection maude system supports high level declarative style reflective programming 
proposed approach constructing interoperating reasoning tools related existing proof systems fact composition multiple reasoning modules numerous experiments augmenting combining existing proof systems 
detailed survey discussion 
give brief summary 
boyer moore prover nqthm acl combines techniques propositional reasoning equality reasoning typeset inference term rewriting linear arithmetic 
rrl includes completion procedure rewriting associative commutative theories linear arithmetic basis boolean ring 
kads system uses resolution augmented special purpose 
pvs variety ground decision procedures combined rules interactive proving 
stanford temporal prover step combines model checking deductive methods including contextual rewriting generation invariants verification conditions decision procedures presburger arithmetic propositional propositional temporal formulas semi decision procedure order logic 
experience integrating linear arithmetic module nqthm described detail 
rajan shankar srivas describe integration model checker pvs 
harrison th ery report experiments integration computer algebra system maple hol isabelle respectively 
experiments clearly demonstrate need composite heterogeneous systems ability tightly integrate loosely interoperate reasoning tools 
carried case case basis 
approach provides infrastructure methodology integrating interoperating reasoning tools reasoning tools tools sorts symbolic evaluators analysis tools computer algebra tools principled sound manner 
key personnel key senior personnel dr jos meseguer dr carolyn talcott 
professor peter mosses aarhus university participate year project 
drs 
meseguer talcott dedicate time research effort 
meseguer talcott funded darpa onr nsf 
dr meseguer principal scientist computer science lab sri leads declarative languages architecture group 
dr meseguer designer maude language designer obj foops languages rewrite rule machine 
especially known contributions computer security models concurrent computation design semantics functional logic object oriented programming languages software specification formal methods software engineering theories order sorted algebra order sorted unification data types general logics higher order type theory 
latest research interests include design parallel implementation declarative multi paradigm programming languages models concurrent computation software modularity reusability formal methods logical frameworks massively concurrent architectures 
joining sri held academic position spain research positions ucla uc berkeley 
associate editor journal theory practice object systems program committee member wide variety technical conferences 
dr meseguer invited lectures international conferences published technical papers 
dr talcott senior research associate formal reasoning group stanford university computer science department 
editor chief journal lisp symbolic computation 
methods developed reasoning imperative functional concurrent programs research groups europe australia 
invited lectures universities research laboratories workshops 
research students universities frequently visit group periods ranging month year part phd research served external examiner number phd students 
published papers related areas including formalization mechanized reasoning composable semantic models computation logics reasoning programs verification distributed garbage collection algorithm reasoning dynamically adaptable runtime environments 
professor mosses associate professor department computer science university aarhus denmark senior researcher brics centre basic research computer science universities aarhus aalborg 
student strachey junior research fellow oxford involved development denotational semantics pioneered partial evaluation semantics prototyping system sis 
dissatisfaction modularity denotational semantics led development action semantics combining ideas denotational operational algebraic semantics single framework enabling rigorous application formal semantics large scale practical programming languages 
published definitive book action semantics tutorials international conferences 
developed original framework unified algebras specification data types involving type constructors type inclusions 
coordinator cofi common framework initiative algebraic specification development major contributor design common algebraic specification language casl 
appointed chairman ifip wg foundations system specification member ifip wg formal description programming concepts 
senior visiting research fellow edinburgh head department aarhus 
organizer tapsoft served pc member international conferences 
invited lectures action semantics algebraic specifications international conferences 
research interests include concurrency 
previous accomplishments drs 
meseguer talcott bring broad range accomplishments expertise project 
currently collaborating projects related formal interoperability semantic foundations composition open systems 
project combine general logics mappings rewriting logic open mechanized reasoning systems actor semantics 
rewriting logic provides formal semantic framework describing diverse aspects system contexts exists 
rewriting logic actors establishes formal framework specifying composing components open systems provides challenges development maude support open object distributed computation computational reflection 
jos meseguer dr meseguer relevant accomplishments span areas 
logic formal methods including formal models security type theory linear rewriting equational logics logics models concurrency logical frameworks general logics formal methods specification verification parameterized programming methodology 
declarative specification programming languages including equational languages obj relational equational languages multiparadigm concurrent object oriented languages foops maude reflective languages 
dr meseguer proposed rewriting logic new specification programming formalism concurrent distributed systems 
time papers developing rewriting logic ideas published active research community europe japan rewriting logic languages implemented international meeting rewriting logic held 
original designer maude language led current prototype implementation 
researched depth applications rewriting logic maude object oriented specification programming real time systems 
members sri declarative languages architecture group designed prototyped evaluated new rewriting logic massively parallel architecture called rewrite rule machine compilation tools techniques 
obj maude dr meseguer worked joseph goguen coworkers design formal semantics implementation new powerful versions equational language obj 
growing international community obj users including universities research laboratories distributed obj system 
maude wide spectrum language rewriting logic contains obj functional sublanguage supports executable specification programming concurrent object oriented systems general concurrent systems 
maude logical framework different logics languages specified prototyped 
manuel clavel drs 
steven eker patrick lincoln developed prototype sequential maude implementation written combines flexibility interpreter competitive speed derived advanced techniques rewrites second pentium pc 
studies parallel compilation techniques indicate subset maude called simple maude machineindependent parallel programming language implemented reasonable efficiency mimd simd mimd simd machines 
carolyn talcott dr talcott substantial expertise formal reasoning developing semantics methods reasoning higher order programs effects sequential concurrent 
language mk call value lambda calculus extended primitives la ml studied methods defining operational semantics proving program equivalence developed complete axiomatization equivalence zero order fragment mk 
variable typed logic effects specification reasoning mk programs introduced 
reasoning object programs order fragment implemented isabelle 
dr talcott proposed general framework defining imperative functional languages associated methods establishing program equivalence 
generalizes results mk wide class higher order languages effects 
ideas methods developed prove correctness number nontrivial program transformations compiler optimizations imperative functional languages 
dr talcott collaboration professors agha mason smith developed formal theory components open distributed systems actor model computation 
formal semantics higher order actor language rich equational theory actor programs developed 
provides basis establishing correctness compiler optimizations operations actor programs 
important notions introduced actor theories called actor structures early papers interaction semantics 
actor theories provide framework high level programming language independent specification individual actor behaviors 
interaction semantics abstracts away details internal computation provides means reasoning actor system components considered black boxes 
actor theories formalized rewriting logic starting point specification formalism 
semantics preserving translation actor languages 
proof correctness interest demonstrates methodology actor theories proving correctness transformations translations actor languages generally reasoning components open distributed systems 
interaction semantics endowed algebra structure provides basis modular reasoning construction transformation components specified actor systems 
project joint project mechanized reasoning group irst trento italy 
ultimate goal provide framework methodology constructing modifying complex reasoning systems composing integrating simpler modules 
framework give specification parts prover nqthm focusing integration linear arithmetic module described 
peter mosses professor mosses associate professor department computer science university aarhus denmark senior researcher brics centre basic research computer science universities aarhus aalborg 
relevant accomplishments areas programming language semantics algebraic specification development prototyping tools 
prof mosses involved development denotational semantics pioneered partial evaluation semantics prototyping system sis 
author handbook chapter denotational semantics systematic domain constructors inspired moggi propose monads 
directly adopting ideas algebraic specification prof mosses developed framework semantic algebras 
collaboration dr watt established framework action semantics algebraic operational foundations introduces novel style formal notation 
action semantics concurrency constructs developed 
dr van deursen created translation checking tools action semantics 
action semantics give formal semantics practical programming languages pascal standard ml 
industrial context formal semantics architecture neutral distribution format developed open software foundation 

action semantics concurrency constructs developed 
dr van deursen created translation checking tools action semantics 
mosses developed novel specification framework unified algebras specifically facilitate datatype specification action semantics desirable able type union type constructors algebraic setting 
mosses coordinator cofi common framework initiative algebraic specification development major contributor design common algebraic specification language casl 
section iii 
additional information agha 
actors model concurrent computation distributed systems 
mit press cambridge mass 
agha 
concurrent object oriented programming 
communications acm september 
agha mason smith talcott 
theory actor computation 
third international conference concurrency theory concur volume lecture notes computer science pages 
springer verlag august 
agha mason smith talcott 
foundation actor computation 
journal functional programming 
astesiano cerioli 
relationships logical frameworks 
bidoit choppy editors trends data type specification volume lncs pages 
springer verlag 
avron honsell mason pollack 
typed lambda calculus implement formal systems machine 
journal automated reasoning december 

theorems algorithms interface isabelle maple 
proceedings international symposium symbolic algebraic computation issac pages 
acm press 
basin constable 
metalogical frameworks 
huet plotkin editors logical environments pages 
cambridge university press 
bergstra heering klint 
module algebra 
journal association computing machinery 
jan bergstra john tucker 
characterization computable data types means finite equational specification method 
de bakker van leeuwen editors automata languages programming seventh colloquium pages 
springer verlag 
lncs volume 
adel jean pierre jouannaud jos meseguer 
specification proof membership equational logic 
bidoit dauchet editors proceedings tapsoft volume lecture notes computer science 
springer verlag 
robert betty cheng 
object oriented toolkit constructing specification editors 
proceedings compsac computer software applications conference pages 
robert betty cheng 
formal semantics object models 
ieee trans 
software engineering october 
boyer moore 
computational logic 
academic press 
boyer moore 
integrating decision procedures heuristic theorem provers case study linear arithmetic 
technical report cmp institute computing science university texas austin 
boyer moore 
computational logic handbook 
academic press 
boyer moore 
integrating decision procedures heuristic theorem provers case study linear arithmetic 
machine intelligence 
oxford university press 
boyer strother moore 
proving correct efficiently new proof procedures 
robert boyer moore editors correctness problem computer science pages 
academic press 
bracha lindstrom 
modularity meets inheritance 
proceedings international conference computer languages pages 
ieee 
rod burstall joseph goguen 
semantics clear specification language 
bjorner editor proceedings copenhagen winter school software specification pages 
springer lncs 
char gonnet leong watt maple language manual 
springer verlag 
manuel francisco dur steven eker jos meseguer 
design implementation cafe prover church rosser checker tools 
technical report sri international december 
ross roger crew jos meseguer vaughan pratt 
temporal structures 
mathematical structures computer science 
cerioli jos meseguer 
may borrow logic 
proceedings mfcs th international symposium mathematical foundations computer science pages 
springer lncs 
betty cheng wang robert 
graphical environment formally developing object oriented software 
proc 
ieee th international conference tools artificial intelligence 
betty cheng wang robert heather richter 
bridging gap informal formal approaches software development 
proc 
software engineering research forum november 
gordon editors 
higher order logic theorem proving applications 
elsevier science publishers 
north holland 
clavel eker lincoln meseguer 
principles maude 
rewriting logic workshop 
clavel meseguer :10.1.1.22.3519
axiomatizing reflective logics languages 
kiczales editor reflection pages 
xerox parc 
clavel meseguer 
reflection rewriting logic 
rewriting logic workshop 
manuel clavel 
reflection general logics rewriting logic maude 
ph thesis submitted university 
manuel clavel jos meseguer 
axiomatizing reflective logics languages 
gregor kiczales editor proceedings reflection san francisco california april pages 
xerox parc 
coglio giunchiglia talcott 
logic level specification nqthm simplification process 
technical report irst university genova stanford university 
constable 
metalogical frameworks ii reflected decision procedures 
lecture max planck institut fur informatik saarbrucken germany july 
degano meseguer montanari 
axiomatizing algebra net computations processes 
technical report sri csl sri international computer science laboratory november 
appear acta informatica 
diaconescu joseph goguen petros 
logical support modularisation 
appear proceedings workshop logical frameworks edinburgh scotland may 

proof theoretic foundation actor specification verification 
submitted 
ehrig orejas 
new concepts amalgamation extension general theory specifications 
bidoit choppy editors trends data type specification volume lncs pages 
springer verlag 
hartmut ehrig bernd mahr 
fundamentals algebraic specification 
springerverlag 
david espinosa 
semantic lego 
phd thesis columbia university 
www zohar manna step stanford temporal prover 
technical report stan cstr stanford computer science department june 
feferman 
finitary inductively logics 
ferro editors logic colloquium pages 
north holland 
felty miller 
encoding dependent type calculus logic programming language 
stickel editor proc 
th 
int 
conf 
automated deduction kaiserslautern germany july volume lncs pages 
springer verlag 
fiadeiro maibaum 
generalising interpretations theories context institutions 
burn gay ryan editors theory formal methods pages 
springer verlag 
www swiss ai mit edu users dae home html fiadeiro sernadas 
structuring theories consequence 
sannella tarlecki editors trends data type specification pages 
springer lncs 
fiadeiro maibaum 
interconnecting formalisms supporting modularity reuse incrementality 
proceedings sigsoft conference washington dc usa pages 
acm 
andrzej filinski 
controlling effects 
phd thesis school computer science carnegie mellon university 
frost 
effective programming 
phd thesis technical university denmark 
available tr 
futatsugi joseph goguen jean pierre jouannaud jos meseguer 
principles obj 
brian reid editor proceedings th acm symposium principles programming languages pages 
acm 
futatsugi joseph goguen jos meseguer okada 
parameterized programming application rapid prototyping obj 
matsumoto ohno editors japanese perspectives software engineering pages 
addisonwesley 
gardner 
representing logics type theory 
phd thesis technical report cst department computer science university edinburgh 
jean yves girard 
interpr etation fonctionelle elimination des coupures dans arithm etique ordre sup erieure 
phd thesis univ paris vii 
giunchiglia talcott 
reasoning theories architecture open mechanized reasoning systems 
workshop frontiers combining systems 
giunchiglia talcott 
reasoning theories architecture open mechanized reasoning systems 
submitted publication 
giunchiglia talcott 
reasoning theories architecture open mechanized reasoning systems 
technical report irst november 
appears stanford university computer science department technical note stan cs tn 
fausto giunchiglia paolo traverso alessandro cimatti paolo 
system multi level reasoning 
imsa pages 
information technology promotion agency japan 
joseph goguen rod burstall 
institutions model theory specification programming 
journal acm 
joseph goguen claude kirchner el ene kirchner jos meseguer timothy winkler 
obj 
jean pierre jouannaud stephane kaplan editors proceedings conference conditional term rewriting orsay france july pages 
springer lncs 
joseph goguen jos meseguer 
security policies security models 
proceedings symposium security privacy pages 
ieee 
joseph goguen jos meseguer 
unwinding inference control 
proceedings symposium security privacy pages 
ieee 
joseph goguen jos meseguer 
equality types generic modules logic programming 
douglas degroot gary lindstrom editors logic programming functions relations equations pages 
prentice hall 
joseph goguen jos meseguer 
models equality logical programming 
hartmut ehrig giorgio levi robert kowalski ugo montanari editors proceedings tapsoft pages 
springer verlag 
lncs volume extended version appear logic programming 
joseph goguen jos meseguer 
unifying functional object oriented relational programming logical semantics 
bruce shriver peter wegner editors research directions object oriented programming pages 
mit press 
joseph goguen jos meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
theoretical computer science 
originally lecture seminar types university june draft technical report versions circulated 
joseph goguen jos meseguer david plaisted 
programming parameterized objects obj 
domenico ferrari mario joseph goguen editors theory practice software technology pages 
north holland 
joseph goguen timothy winkler jos meseguer futatsugi jean pierre jouannaud 
introducing obj 
technical report sri csl sri international computer science laboratory 
appear goguen editor applications algebraic specification obj cambridge university press 
bo hansen 
role andf formal specification 
technical report rpt issue ddc international dk lyngby denmark 
bo hansen jens ulrik 
formal specification andf application action semantics 
pages 
harper honsell plotkin 
framework defining logics 
journal association computing machinery 
harper sannella tarlecki 
structure theory presentations logic representations 
annals pure applied logic 
robert harper david macqueen robin milner 
standard ml 
technical report ecs lfcs dept computer science university edinburgh 
harrison th ery 
extending hol theorem prover computer algebra system reason reals 
gordon pages 
john harrison 
metatheory reflection theorem proving survey critique 
university cambridge computer laboratory 
hewitt 
viewing control structures patterns passing messages 
journal artificial intelligence 
patricia hill john lloyd 
godel programming language 
mit press 
honsell mason smith talcott 
theory classes functional language effects 
proceedings csl volume lecture notes computer science pages 
springer berlin 
honsell mason smith talcott 
variable typed logic effects 
information computation 
howe 
semantic foundations embedding hol nuprl 
manuscript bell labs 
douglas howe 
reflecting semantics reflected proof 
peter aczel harold simmons stanley wainer editors proof theory pages 
cambridge university press 
kapur zhang 
order theorem proving conditional rewrite rules 
th international conference automated deduction number lecture notes computer science pages 
kapur zhang 
overview rrl rewrite rule laboratory 
third international conf 
rewriting techniques applications 
kaufmann moore 
design goals acl 
technical report computational logic austin texas 
kiczales editor 
reflection 
gregor kiczales jim des rivieres daniel bobrow 
art metaobject protocol 
mit press 
claude kirchner el ene kirchner jos meseguer 
operational semantics obj 
salomaa editors proceedings th intl 
coll 
automata languages programming tampere finland july pages 
springer lncs 
michael robert betty cheng 
integrated development environment formal specifications 
proc 
international conference software engineering knowledge engineering pages 
sheng liang paul hudak 
modular denotational semantics compiler construction 
programming languages systems esop proc 
th european symposium programming linkoping volume lecture notes computer science pages 
springer verlag 
www www swiss ai mit edu users dae home html sheng liang paul hudak mark jones 
monad transformers modular interpreters 
popl nd acm symposium principles programming languages pages 
acm 
www patrick lincoln narciso mart oliet jos meseguer 
specification transformation programming concurrent systems rewriting logic 
blelloch chandy jagannathan editors specification parallel algorithms pages 
dimacs series vol 
american mathematical society 
patrick lincoln narciso mart oliet jos meseguer 
compiling rewriting simd mimd simd machines 
proceedings parle th international conference parallel architectures languages europe pages 
springer lncs 
narciso mart oliet jos meseguer 
inclusions subtypes order case 
appear logic computation appeared sri report sri csl 
narciso mart oliet jos meseguer 
inclusions subtypes ii higher order case 
appear logic computation appeared sri report sri csl 
narciso mart oliet jos meseguer 
algebraic axiomatization linear logic models 
reed roscoe wachter editors topology category theory computer science pages 
oxford university press 
narciso mart oliet jos meseguer 
petri nets linear logic 
math 
struct 
comp 
sci 
narciso mart oliet jos meseguer 
petri nets linear logic categories survey 
intl 
foundations comp 
sci 
narciso mart oliet jos meseguer 
rewriting logic logical semantic framework 
technical report sri csl sri international computer science laboratory august 
narciso mart oliet jos meseguer 
general logics logical frameworks 
gabbay editor logical system pages 
oxford university press 
narciso mart oliet jos meseguer 
action change rewriting logic 
pareschi editors theoretical approaches dynamic worlds artificial intelligence computer science 

published kluwer academic publisher 
narciso mart oliet jos meseguer 
rewriting logic logical semantic framework 
meseguer editor proc 
intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl mcs tcs pc volume htm 
martin lof 
intuitionistic type theory 
bibliopolis 
www swiss ai mit edu users dae home html mason 
semantics destructive lisp 
phd thesis stanford university 
available csli lecture notes center study language information stanford university 
mason 
verification programs destructively manipulate data 
science computer programming 
mason talcott 
programming transforming proving function abstractions memories 
proceedings th eatcs colloquium automata languages programming volume lecture notes computer science pages 
springer verlag 
mason talcott 
equivalence functional languages effects 
journal functional programming 
mason talcott 
inferring equivalence functional programs mutate data 
theoretical computer science 
mason talcott 
reasoning object systems 
international journal foundations computer science september 
mason talcott 
semantically sound actor translation 
icalp number lecture notes computer science pages 
matsuoka asai yonezawa 
compiling away meta level object oriented concurrent reflective languages 
proceedings oopsla pages 
sigplan notices vol 
yonezawa 
reasoning conscious meta object design reflective concurrent language 
manuscript sept 
satoshi matsuoka watanabe akinori yonezawa 
objectoriented concurrent reflective architectures 
tokoro nierstrasz wegner editors object concurrent computing pages 
springer lncs 
matthews smaill basin 
experience fs framework theory 
huet plotkin editors logical environments pages 
cambridge university press 
se matthews 
reflection logical systems 
imsa pages 
promotion agency japan 
brian 
galleries institutions 
technical report daimi pb computer science dept aarhus university 
francois nicola demers jacques malenfant 
reflection logic functional objectoriented programming short comparative study 
ijcai workshop reflection metalevel architectures applications ai pages august 
meseguer talcott 
reasoning theories rewriting logic 
preparation 
meseguer talcott 
semantic interoperation dynamic heterogeneous architectures 
technical presentations architecture cluster meeting april july 
jos meseguer 
general logics 

ebbinghaus editor logic colloquium pages 
north holland 
jos meseguer 
relating models polymorphism 
proc 
popl pages 
acm 
jos meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science 
jos meseguer 
multiparadigm logic programming 
kirchner levi editors proc 
rd intl 
conf 
algebraic logic programming pages 
springer lncs 
jos meseguer 
logical theory concurrent objects realization maude language 
gul agha peter wegner akinori yonezawa editors research directions concurrent object oriented programming pages 
mit press 
jos meseguer 
solving inheritance anomaly concurrent object oriented programming 
oscar nierstrasz editor proc 
ecoop pages 
springer lncs 
jos meseguer 
membership algebra semantic framework equational specification 
appear parisi presicce ed proc 
wadt springer lncs 
jos meseguer joseph goguen 
order sorted algebra solves constructor selector multiple representation coercion problems 
information computation 
jos meseguer joseph goguen gert smolka 
order sorted unification 
symbolic computation 
jos meseguer narciso mart oliet 
data types logical frameworks 
astesiano reggio tarlecki editors trends data type specification santa margherita italy may june pages 
springer lncs 
jos meseguer ugo montanari 
petri nets monoids 
information computation 
jos meseguer ugo montanari sassone 
semantics petri nets 
cleaveland editor proceedings concur conference stony brook new york august pages 
springer lncs 
jos meseguer ugo montanari sassone 
model computation place transition petri nets 
proceedings th international conference application theory petri nets pages 
springer lncs 
jos meseguer ugo montanari sassone 
process versus unfolding semantics place transition petri nets 
theoretical computer science 
jos meseguer qian 
logical semantics object oriented databases 
proc 
international sigmod conference management data pages 
acm 
jos meseguer timothy winkler 
parallel programming maude 

banatre le editors research directions high level parallel programming languages pages 
springer lncs 
technical report sri csl sri international computer science laboratory november 
moggi 
computational lambda calculus monads 
fourth annual symposium logic computer science 
ieee 
eugenio moggi 
modular approach denotational semantics 
category theory computer science volume lecture notes computer science pages 
springer verlag 
invited talk 
peter mosses 
mathematical semantics algol 
tech 
mono 
prg programming research group univ oxford 
peter mosses 
compiler generation denotational semantics 
mfcs proc 
symp 
math 
foundations computer science gda volume lecture notes computer science 
springer verlag 
peter mosses 
sis semantics implementation system manual user guide 
tech 
mono 
md dept computer science univ aarhus 
print 
peter mosses 
constructive approach compiler correctness 
icalp proc 
int 
coll 
automata languages programming noordwijkerhout volume lecture notes computer science pages 
springer verlag 
peter mosses 
semantic algebra binding constructs 
proc 
int 
coll 
formalization programming concepts pe volume lecture notes computer science pages 
springer verlag 
peter mosses 
semantic algebras 
formal description programming concepts ii proc 
ifip tc working conference pages 
north holland 
peter mosses 
basic semantic algebra 
proc 
int 
symp 
semantics data types sophia antipolis volume lecture notes computer science pages 
springer verlag 
peter mosses 
unified algebras action semantics 
stacs proc 
symp 
theoretical aspects computer science paderborn volume lecture notes computer science 
springer verlag 
peter mosses 
unified algebras institutions 
lics proc 
th ann 
symp 
logic computer science pages 
ieee 
peter mosses 
unified algebras modules 
popl proc 
th ann 
acm symp 
principles programming languages pages 
acm 
peter mosses 
denotational semantics 
handbook theoretical computer science volume chapter 
elsevier science publishers amsterdam mit press 
peter mosses 
practical denotational semantics 
formal description programming concepts ifip state art report pages 
springer verlag 
peter mosses 
action semantics 
number cambridge tracts theoretical computer science 
cambridge university press 
peter mosses 
action semantics 
logic algebra specification proc 
marktoberdorf summer school volume nato asi series pages 
springer verlag 
peter mosses 
action semantics concurrent programming languages 
semantics foundations applications proc 
rex workshop volume lecture notes computer science pages 
springer verlag 
peter mosses 
sorts algebraic specifications 
michel bidoit christine choppy editors trends data type specification proc 
th workshop specification data types france selected papers volume lecture notes computer science pages 
springer verlag 
peter mosses editor 
proc 
st intl 
workshop action semantics edinburgh number ns brics notes series 
brics dept computer science univ aarhus 
www peter mosses 
unified algebras syntax 
trends data type specification proc 
th workshop specification data types de selected papers volume lecture notes computer science pages 
springer verlag 
peter mosses editor 
cofi initiative common framework algebraic specification url www brics dk projects cofi 
peter mosses 
theory practice action semantics 
mfcs proc 
st int 
symp 
mathematical foundations computer science poland sept volume lecture notes computer science pages 
springer verlag 
www ftp peter mosses 
tutorial action semantics 
pp 
tutorial notes fme formal methods europe barcelona fme formal methods europe oxford 
www ftp march 
www brics dk ns brics ns brics ns html www brics dk rs brics rs brics rs html ftp brics dk projects papers mosses mfcs www brics dk ns brics ns brics ns html ftp brics dk projects papers mosses draft peter mosses 
cofi common framework initiative algebraic specification development 
tapsoft theory practice software development volume lecture notes computer science pages 
springer verlag 
invited lecture 
peter mosses mart 
action semantics ml concurrency primitives 
fme proc 
formal methods europe symposium industrial benefit formal methods barcelona volume lecture notes computer science pages 
springer verlag 
www peter mosses david watt 
action semantics 
formal description programming concepts iii proc 
ifip tc working conference gl 
pages 
north holland 
peter mosses david watt 
pascal action semantics version 
ftp march 
nadathur miller 
overview prolog 
bowen kowalski editors fifth int 
joint conf 
symp 
logic programming pages 
mit press 
jens nielsen jens ulrik 
formal specification andf existing subset 
technical report rpt issue ddc international dk lyngby denmark 
okamura ishikawa mario tokoro 
distributed programming system multi model reflection framework 
imsa pages 
information technology promotion agency japan 
owre rushby shankar 
pvs prototype verification system 
automated deduction cade volume lecture notes artificial intelligence pages 
yonezawa 
efficient compilation framework languages concurrent process calculi 
proceedings euro par object oriented programming 
springer 
paulson 
foundation generic theorem prover 
journal automated reasoning 
paulson 
isabelle theorem provers 
odifreddi editor logic computer science pages 
academic press 
pfenning 
elf language logic definition verified metaprogramming 
proc 
fourth annual ieee symp 
logic computer science pages asilomar california june 
www brics dk rs brics rs brics rs html ftp brics dk projects papers draft poign 
foundations rich institutions institutions poor foundations 
ehrig editors categorical methods computer science aspects topology volume lncs pages 
springer verlag 
rajan shankar srivas 
integration model checking automated proof checking 
pierre wolper editor computer aided verification cav volume lecture notes computer science pages 
springer verlag june 
reynolds 
theory type structure 
robinet editor programming symposium pages 
springer lncs 
luis rodriguez jr study viability production quality metaobject protocol statically parallelizing compiler 
imsa pages 
promotion agency japan 
scollo 
compactness lowenheim skolem properties categories 
technical report liens laboratoire informatique de ecole normale sup erieure paris march 
sannella tarlecki 
formal development programs algebraic specifications implementations revisited 
acta informatica 
donald sannella andrzej tarlecki 
specifications arbitrary institution 
information computation 
sassone jos meseguer ugo montanari 
inductive completion monoidal categories infinite net computations 
submitted publication 
shankar 
metamathematics machines godel proof 
cambridge university press 
brian smith akinori yonezawa editors 
proc 
imsa international workshop reflection meta level architecture tokyo november 
research institute software engineering 
brian smith 
reflection semantics lisp 
proc 
popl pages 
acm 
gert smolka werner nutt joseph goguen jos meseguer 
order sorted equational computation 
maurice nivat hassan ait kaci editors resolution equations algebraic structures volume pages 
academic press 
steele jr sussman 
art interpreter modularity complex technical memorandum aim 
technical report mit ai lab may 
stickel 
klaus automated deduction system 
proceedings ninth conference automated deduction number lecture notes computer science pages 
springer verlag 
sutherland platek 
logical infrastructure 
ttcp xtp workshop effective automated reasoning technology system development pages 
talcott 
reasoning functions effects 
higher order operational techniques semantics 
cambridge university press 
talcott 
essence rum theory intensional extensional aspects lisp type computation 
phd thesis stanford university 
talcott 
programming proving function control abstractions 
technical report stan cs stanford university computer science department 
talcott 
actor rewriting theory 
meseguer editor proc 
st intl 
workshop rewriting logic applications number electronic notes theoretical computer science pages 
north holland 
talcott 
interaction semantics components distributed systems 

stefani editors st ifip workshop formal methods open object distributed systems 
proceedings published chapman hall 
talcott 
composable semantic models actor theories 
abadi ito editors theoretical aspects computer science number lecture notes computer science pages 
springer verlag 
sri staff 
sri specification verification system users guide 
technical report sri international 
valentin turchin 
concept supercompiler 
acm transactions programming languages systems 
arie van deursen peter mosses 
asd action semantic description tools 
amast proc 
th intl 
conf 
algebraic methodology software technology munich volume lecture notes computer science pages 
springerverlag 

rewriting effective model concurrency 
editors parle proc 
sixth int 
conf 
parallel architectures languages europe athens greece july volume lncs pages 
springer verlag 
wand friedman 
mystery tower revealed 
lisp symbolic computation 
wang heather richter betty cheng 
formalizing integrating dynamic model omt 
proc 
ieee international conference software engineering icse 
keith wansbrough 
modular monadic action semantics 
master thesis dept computer science univ auckland february 
www keith wansbrough john 
modular monadic action semantics 
conference domain specific languages pages 
usenix association 
www www dcs gla ac uk thesis www dcs gla ac uk thesis david watt 
action semantics standard ml 
proc 
third workshop math 
foundations programming language semantics new orleans volume lecture notes computer science pages 
springer verlag 
david watt 
programming language syntax semantics 
prentice hall 
david watt 
action semantics 
ftp october 
david watt 
standard ml action semantics 
ftp may 
richard weyhrauch 
prolegomena theory mechanized formal reasoning 
artificial intelligence 
martin wirsing alexander knapp 
formal approach object oriented software engineering 
meseguer editor proc 
st intl 
workshop rewriting logic applications number electronic notes theoretical computer science 
north holland 
www dcs gla ac uk daw research projects jas html www dcs gla ac uk daw research projects aas html 
