fielding page working group fielding uc irvine internet draft gettys compaq mogul compaq frystyk mit masinter xerox leach microsoft berners lee mit expires may november hypertext transfer protocol status memo document internet draft 
internet drafts working documents internet engineering task force ietf areas working groups 
note groups may distribute working documents 
internet drafts draft documents valid maximum months may updated replaced obsolete documents time 
inappropriate internet drafts material cite progress 
learn current status internet draft please check id abstracts txt listing contained internet drafts shadow directories ftp za africa nic net europe oz au pacific rim ftp ietf org east coast ftp isi edu west coast 
distribution document unlimited 
please send comments working group wg hpl hp com 
discussions working group archived www ics uci edu pub ietf 
general discussions applications take place mailing list 
ietf takes position regarding validity scope intellectual property rights claimed pertain implementation technology described document extent license rights available represent effort identify rights 
information ietf procedures respect rights standards track standards related documentation bcp 
copies claims rights available publication assurances licenses available result attempt obtain general license permission proprietary rights implementors users specification obtained ietf secretariat 
hypertext transfer protocol application level protocol distributed collaborative hypermedia information systems 
generic stateless protocol tasks hypertext name servers distributed object management systems extension request methods error codes headers 
feature typing negotiation data representation allowing systems built independently data transferred 
world wide web global information initiative 
specification defines protocol referred update rfc 
copyright notice copyright internet society 
rights reserved 
see section full copyright notice 
fielding page table contents hypertext transfer protocol status memo copyright notice table contents purpose requirements terminology operation notational conventions generic grammar augmented bnf basic rules protocol parameters version uniform resource identifiers general syntax url uri comparison date time formats full date delta seconds character sets missing charset content codings transfer codings chunked transfer coding media types canonicalization text defaults multipart types product tokens quality values language tags entity tags range units message message types message headers message body message length general header fields internet draft november fielding page request request line method request uri resource identified request request header fields response status line status code reason phrase response header fields entity entity header fields entity body type entity length connections persistent connections purpose operation proxy servers practical considerations message transmission requirements persistent connections flow control monitoring connections error status messages continue status client behavior server prematurely closes connection method definitions safe idempotent methods safe methods idempotent methods options get head post put delete trace connect status code definitions informational xx continue switching protocols successful xx ok created accepted non authoritative information content reset content partial content internet draft november fielding page redirection xx multiple choices moved permanently see modified proxy unused temporary redirect client error xx bad request unauthorized payment required forbidden method allowed acceptable proxy authentication required request timeout conflict gone length required precondition failed request entity large request uri long unsupported media type requested range satisfiable expectation failed server error xx internal server error implemented bad gateway service unavailable gateway timeout version supported access authentication content negotiation server driven negotiation agent driven negotiation transparent negotiation caching cache correctness warnings cache control mechanisms explicit user agent warnings exceptions rules warnings client controlled behavior expiration model server specified expiration heuristic expiration age calculations expiration calculations internet draft november fielding page disambiguating expiration values disambiguating multiple responses validation model modified dates entity tag cache validators weak strong validators rules entity tags modified dates non validating conditionals response constructing responses caches hop hop headers non modifiable headers combining headers combining byte ranges caching negotiated responses shared non shared caches errors incomplete response cache behavior side effects get head invalidation updates deletions write mandatory cache replacement history lists header field definitions accept accept charset accept encoding accept language accept ranges age allow authorization cache control cacheable may stored caches modifications basic expiration mechanism cache revalidation reload controls transform directive cache control extensions connection content encoding content language content length content location content md content range content type date origin server operation etag expect expires host match internet draft november fielding page modified match range unmodified modified location max forwards pragma proxy authenticate proxy authorization range byte ranges range retrieval requests referer retry server te trailer transfer encoding upgrade user agent vary warning www authenticate security considerations personal information abuse server log information transfer sensitive information encoding sensitive information uri privacy issues connected accept headers attacks file path names dns spoofing location headers spoofing content disposition issues authentication credentials idle clients proxies caching denial service attacks proxies acknowledgments authors addresses appendices internet media type message application internet media type multipart tolerant applications differences entities rfc entities mime version conversion canonical form conversion date formats content encoding internet draft november fielding page content transfer encoding transfer encoding line length limitations additional features content disposition compatibility previous versions changes compatibility persistent connections changes rfc notes rfc editor iana transfer coding values definition application addition identity content coding content coding registry full copyright statement index purpose hypertext transfer protocol application level protocol distributed collaborative hypermedia information systems 
world wide web global information initiative 
version referred simple protocol raw data transfer internet 
defined rfc improved protocol allowing messages format messages containing metainformation data transferred modifiers request response semantics 
sufficiently take consideration effects hierarchical proxies caching need persistent connections virtual hosts 
addition proliferation applications calling necessitated protocol version change order communicating applications determine true capabilities 
specification defines protocol referred 
protocol includes stringent requirements order ensure reliable implementation features 
practical information systems require functionality simple retrieval including search front update annotation 
allows open ended set methods headers indicate purpose request 
builds discipline provided uniform resource identifier uri location url name urn indicating resource method applied 
messages passed format similar internet mail defined multipurpose internet mail extensions mime 
generic protocol communication user agents proxies gateways internet systems including supported smtp nntp ftp gopher wais protocols 
way allows basic hypermedia access resources available diverse applications 
requirements key words required shall shall recommended may optional document interpreted described rfc 
implementation compliant fails satisfy required level requirements protocols implements 
implementation satisfies required level level requirements protocols said unconditionally compliant satisfies internet draft november fielding page level requirements level requirements protocols said conditionally compliant 
terminology specification uses number terms refer roles played participants objects communication 
connection transport layer virtual circuit established programs purpose communication 
message basic unit communication consisting structured sequence octets matching syntax defined section transmitted connection 
request request message defined section 
response response message defined section 
resource network data object service identified uri defined section 
resources may available multiple representations multiple languages data formats size resolutions vary ways 
entity information transferred payload request response 
entity consists metainformation form entity header fields content form entity body described section 
representation entity included response subject content negotiation described section 
may exist multiple representations associated particular response status 
content negotiation mechanism selecting appropriate representation servicing request described section 
representation entities response negotiated including error responses 
variant resource may representation associated instant 
representations termed variant 
term variant necessarily imply resource subject content negotiation 
client program establishes connections purpose sending requests 
user agent client initiates request 
browsers editors spiders web traversing robots user tools 
server application program accepts connections order service requests sending back responses 
program may capable client server terms refers role performed program particular connection program capabilities general 
likewise server may act origin server proxy gateway tunnel switching behavior nature request 
internet draft november fielding page origin server server resource resides created 
proxy intermediary program acts server client purpose making requests behalf clients 
requests serviced internally passing possible translation servers 
proxy implement client server requirements specification 
transparent proxy proxy modify request response required proxy authentication identification 
non transparent proxy proxy modifies request response order provide added service user agent group annotation services media type transformation protocol reduction anonymity filtering 
transparent non transparent behavior explicitly stated proxy requirements apply types proxies 
gateway server acts intermediary server 
proxy gateway receives requests origin server requested resource requesting client may aware communicating gateway 
tunnel intermediary program acting blind relay connections 
active tunnel considered party communication tunnel may initiated request 
tunnel ceases exist ends relayed connections closed 
cache program local store response messages subsystem controls message storage retrieval deletion 
cache stores cacheable responses order reduce response time network bandwidth consumption equivalent requests 
client server may include cache cache server acting tunnel 
cacheable response cacheable cache allowed store copy response message answering subsequent requests 
rules determining responses defined section 
resource cacheable may additional constraints cache cached copy particular request 
hand response hand comes directly unnecessary delay origin server proxies 
response hand validity just checked directly origin server 
explicit expiration time time origin server intends entity longer returned cache validation 
heuristic expiration time expiration time assigned cache explicit expiration time available 
age age response time sent successfully validated origin server 
freshness lifetime length time generation response expiration time 
fresh response fresh age exceeded freshness lifetime 
internet draft november fielding page stale response stale age passed freshness lifetime 
semantically transparent cache behaves semantically transparent manner respect particular response affects requesting client origin server improve performance 
cache semantically transparent client receives exactly response hop hop headers received request handled directly origin server 
validator protocol element entity tag modified time find cache entry equivalent copy entity 
upstream downstream upstream downstream describe flow message messages flow upstream downstream 
inbound outbound inbound outbound refer request response paths messages inbound means traveling origin server outbound means traveling user agent operation protocol request response protocol 
client sends request server form request method uri protocol version followed mime message containing request modifiers client information possible body content connection server 
server responds status line including message protocol version success error code followed mime message containing server information entity metainformation possible entity body content 
relationship mime described appendix 
communication initiated user agent consists request applied resource origin server 
simplest case may accomplished single connection user agent ua origin server 
request chain ua complicated situation occurs intermediaries request response chain 
common forms intermediary proxy gateway tunnel 
proxy forwarding agent receiving requests uri absolute form rewriting part message forwarding reformatted request server identified uri 
gateway receiving agent acting layer server necessary translating requests underlying server protocol 
tunnel acts relay point connections changing messages tunnels communication needs pass intermediary firewall intermediary understand contents messages 
request chain ua shows intermediaries user agent origin server 
request response message travels chain pass separate connections 
distinction important communication options may apply connection nearest neighbor points chain connections chain 
diagram linear participant may engaged multiple simultaneous communications 
example may receiving requests clients forwarding requests servers time handling request 
party communication acting tunnel may employ internal cache handling requests 
effect cache request response chain shortened participants chain internet draft november fielding page cached response applicable request 
illustrates resulting chain cached copy earlier response request cached ua request chain ua responses usefully cacheable requests may contain modifiers place special requirements cache behavior 
requirements cache behavior cacheable responses defined section 
fact wide variety architectures configurations caches proxies currently experimented deployed world wide web 
systems include national hierarchies proxy caches save bandwidth systems broadcast multicast cache entries organizations distribute subsets cached data cd rom 
systems corporate intranets highbandwidth links access pdas low power radio links intermittent connectivity 
goal support wide diversity configurations deployed introducing protocol constructs meet needs build web applications require high reliability failing reliable indications failure 
communication usually takes place tcp ip connections 
default port tcp ports 
preclude implemented top protocol internet networks 
presumes reliable transport protocol provides guarantees mapping request response structures transport data units protocol question outside scope specification 
implementations new connection request response exchange 
connection may request response exchanges connections may closed variety reasons see section 
notational conventions generic grammar augmented bnf mechanisms specified document described prose augmented backus naur form bnf similar rfc 
implementors need familiar notation order understand specification 
augmented bnf includes constructs name definition name rule simply name enclosing separated definition equal character 
white space significant indentation continuation lines indicate rule definition spans line 
certain basic rules uppercase sp lws ht crlf digit alpha angle brackets definitions presence facilitate discerning rule names 
literal quotation marks surround literal text 
stated text case insensitive 
rule rule elements separated bar alternatives accept 
rule rule elements enclosed parentheses treated single element 
elem foo bar elem allows token sequences elem foo elem elem bar elem 
rule character preceding element indicates repetition 
full form element indicating occurrences element 
default values infinity element internet draft november fielding page allows number including zero element requires element allows 
rule square brackets enclose optional elements foo bar equivalent foo bar 
rule specific repetition element equivalent element exactly occurrences element 
digit digit number alpha string alphabetic characters 
rule construct defined similar defining lists elements 
full form element indicating elements separated commas optional linear white space lws 
usual form lists easy rule lws element lws lws element shown element construct null elements allowed contribute count elements 
element element permitted counts elements 
element required non null element 
default values infinity element allows number including zero element requires element allows 
comment semi colon set distance right rule text starts comment continues line 
simple way including useful notes parallel specifications 
implied lws grammar described specification word 
noted linear white space lws included adjacent words token quoted string adjacent tokens words separators changing interpretation field 
delimiter lws separators jg exist tokens definition token interpreted single token 
basic rules rules specification describe basic parsing constructs 
ascii coded character set defined ansi 
octet char alpha digit ctl octets del cr lf sp ht defines sequence cr lf line marker protocol elements entity body see appendix tolerant applications 
line marker entity body defined associated media type described section 
crlf cr lf internet draft november fielding page headers field values folded multiple lines continuation line begins space horizontal tab 
linear white space including folding semantics sp 
recipient may replace linear white space single sp interpreting field value forwarding message downstream 
lws crlf sp ht text rule descriptive field contents values intended interpreted message parser 
words text may contain characters character sets iso encoded rules rfc 
text including lws crlf allowed definition text part header field continuation 
expected folding lws replaced single sp interpretation text value 
hexadecimal numeric characters protocol elements 
hex digit header field values consist words separated lws special characters 
special characters quoted string parameter value defined section 
token separators sp ht comments included header fields surrounding comment text parentheses 
comments allowed fields containing comment part field value definition 
fields parentheses considered part field value 
comment quoted pair comment string text parsed single word quoted double quote marks 
quoted string quoted pair backslash character may single character quoting mechanism quoted string comment constructs 
quoted pair char protocol parameters version uses numbering scheme indicate versions protocol 
protocol versioning policy intended allow sender indicate format message capacity understanding communication features obtained communication 
change version number addition message components affect communication behavior add extensible field values 
number incremented changes protocol add features change general message parsing algorithm may add message semantics imply additional capabilities sender 
number incremented format message protocol changed 
see rfc fuller explanation 
version message indicated version field line message 
version digit digit internet draft november fielding page note major minor numbers treated separate integers may incremented higher single digit 
lower version turn lower 
leading zeros ignored recipients sent 
application sends request response message includes version conditionally compliant specification 
applications conditionally compliant specification version messages message compatible 
details send specific version values see rfc 
version application highest version application conditionally compliant 
proxy gateway applications need careful forwarding messages protocol versions different application 
protocol version indicates protocol capability sender proxy gateway send message version indicator greater actual version 
higher version request received proxy gateway downgrade request version respond error switch tunnel behavior 
due interoperability problems proxies discovered publication rfc caching proxies gateways may tunnels upgrade request highest version support 
proxy gateway response request major version request 
note converting versions may involve modification header fields required forbidden versions involved 
uniform resource identifiers uris known names www addresses universal document identifiers universal resource identifiers combination uniform resource locators url names urn 
far concerned uniform resource identifiers simply formatted strings identify name location characteristic resource 
general syntax uris represented absolute form relative known base uri depending context 
forms differentiated fact absolute uris scheme name followed colon 
definitive information url syntax semantics see uniform resource identifiers uri generic syntax semantics rfc replaces rfcs rfc 
specification adopts definitions uri port host abs path rel path authority specification 
protocol place priori limit length uri 
servers able handle uri resource serve able handle uris unbounded length provide forms generate uris 
server return request uri long status uri longer server handle see section 
note servers ought cautious depending uri lengths bytes older client proxy implementations properly support lengths 
url scheme locate network resources protocol 
section defines syntax semantics urls 
url host port abs path port empty port assumed 
semantics identified resource located server listening tcp connections port host request uri resource abs path section 
ip addresses urls avoided possible see rfc internet draft november fielding page 
abs path url request uri resource section 
proxy receives host name fully qualified domain name may add domain host name received 
proxy receives fully qualified domain name proxy change host name 
uri comparison comparing uris decide match client case sensitive octet octet comparison entire uris exceptions port empty equivalent default port uri comparisons host names case insensitive comparisons scheme names case insensitive empty abs path equivalent abs path 
characters reserved unsafe sets see section equivalent hex hex encoding 
example uris equivalent abc com smith home html abc com home html abc com home html date time formats full date applications historically allowed different formats representation date time stamps sun nov gmt rfc updated rfc sunday nov gmt rfc rfc sun nov ansi format format preferred internet standard represents fixed length subset defined rfc update rfc 
second format common obsolete rfc date format lacks digit year 
clients servers parse date value accept formats compatibility generate rfc format representing date values header fields 
see section information 
note recipients date values encouraged robust accepting date values may sent non applications case retrieving posting messages proxies gateways smtp nntp 
date time stamps represented greenwich mean time gmt exception 
purposes gmt exactly equal utc coordinated universal time 
indicated formats inclusion gmt letter abbreviation time zone assumed reading format 
date case sensitive include additional lws specifically included sp grammar 
date rfc date rfc date date rfc date sp date sp time sp gmt rfc date weekday sp date sp time sp gmt date sp date sp time sp digit date digit sp month sp digit day month year jun date digit month digit day month year jun date month sp digit sp digit month day jun time digit digit digit internet draft november fielding page mon tue wed thu fri sat sun weekday monday tuesday wednesday thursday friday saturday sunday month jan feb mar apr may jun jul aug sep oct nov dec note requirements date time stamp format apply usage protocol stream 
clients servers required formats user presentation request logging delta seconds header fields allow time value specified integer number seconds represented decimal time message received 
delta seconds digit character sets uses definition term character set described mime term character set document refer method tables convert sequence octets sequence characters 
note unconditional conversion direction required characters may available character set character set may provide sequence octets represent particular character 
definition intended allow various kinds character encoding simple single table mappings complex table switching methods iso techniques 
definition associated mime character set name fully specify mapping performed octets characters 
particular external profiling information determine exact mapping permitted 
note term character set commonly referred character encoding 
mime share registry important terminology shared 
character sets identified case insensitive tokens 
complete set tokens defined iana character set registry 
charset token allows arbitrary token charset value token predefined value iana character set registry represent character set defined registry 
applications limit character sets defined iana registry 
implementors aware ietf character set requirements 
missing charset software interpreted content type header charset parameter incorrectly mean recipient guess 
senders wishing defeat behavior may include charset parameter charset iso known confuse recipient 
unfortunately older clients deal properly explicit charset parameter 
recipients respect charset label provided sender user agents provision guess charset charset content type field support charset recipient preference initially displaying document 
see section 
internet draft november fielding page content codings content coding values indicate encoding transformation applied entity 
content codings primarily allow document compressed usefully transformed losing identity underlying media type loss information 
frequently entity stored coded form transmitted directly decoded recipient 
content coding token content coding values case insensitive 
uses content coding values accept encoding section content encoding section header fields 
value describes important indicates decoding mechanism required remove encoding 
internet assigned numbers authority iana acts registry content coding value tokens 
initially registry contains tokens gzip encoding format produced file compression program gzip gnu zip described rfc 
format lempel ziv coding lz bit crc 
compress encoding format produced common unix file compression program compress 
format adaptive lempel ziv welch coding lzw 
note program names identification encoding formats desirable discouraged encodings 
representative historical practice design 
compatibility previous implementations applications consider gzip equivalent gzip compress respectively 
deflate zlib format defined rfc combination deflate compression mechanism described rfc 
identity default identity encoding transformation whatsoever 
content coding accept encoding header content encoding header 
new content coding value tokens registered allow interoperability clients servers specifications content coding algorithms needed implement new value publicly available adequate independent implementation conform purpose content coding defined section 
transfer codings transfer coding values indicate encoding transformation may need applied entity body order ensure safe transport network 
differs content coding transfer coding property message original entity 
transfer coding chunked transfer extension transfer extension token parameter parameters form attribute value pairs 
parameter attribute value attribute token value token quoted string transfer coding values case insensitive 
uses transfer coding values te header field section transfer encoding header field section 
transfer coding identity applied message body set transfer codings include chunked message terminated closing connection 
chunked transfer coding transfer coding applied message body 
chunked transfer internet draft november fielding page coding applied message body 
rules allow recipient determine transfer length message section 
transfer codings analogous content transfer encoding values mime designed enable safe transport binary data bit transport service 
safe transport different focus bit clean transfer protocol 
unsafe characteristic message bodies difficulty determining exact body length section desire encrypt data shared transport 
internet assigned numbers authority iana acts registry transfer coding value tokens 
initially registry contains tokens chunked section identity section gzip section compress section deflate section 
new transfer coding value tokens registered way new content coding value tokens section 
server receives entity body transfer coding understand return unimplemented close connection 
server send transfer codings client 
chunked transfer coding chunked encoding modifies body message order transfer series chunks size indicator followed optional trailer containing entity header fields 
allows dynamically produced content transferred information necessary recipient verify received full message 
chunked body chunk chunk trailer crlf chunk chunk size chunk extension crlf chunk data crlf chunk size hex chunk chunk extension crlf chunk extension chunk ext name chunk ext val chunk ext name token chunk ext val token quoted string chunk data chunk size octet trailer entity header chunk size field string hex digits indicating size chunk 
chunked encoding ended chunk size zero followed trailer terminated empty line 
trailer allows sender include additional header fields message 
trailer header field indicate header fields included trailer see section 
server chunked transfer coding response trailer header fields true request included te header field indicates trailers acceptable transfer coding response described section server origin server response trailer fields consist entirely optional metadata recipient message manner acceptable origin server receiving metadata 
words origin server willing accept possibility trailer fields silently discarded path client 
requirement prevents interoperability failure message received proxy forwarded recipient 
avoids situation compliance protocol necessitated possibly infinite buffer proxy content md authentication info internet draft november fielding page chunked transfer coding request accepted transfer coding te field section 
authentication info header defined rfc successor 
example process decoding chunked body appendix 
applications able receive decode chunked transfer coding ignore chunk extension extensions understand 
identity transfer coding identity transfer encoding default identity encoding transformation whatsoever 
identity transfer coding te header field header field 
media types uses internet media types content type section accept section header fields order provide open extensible data typing type negotiation 
media type type subtype parameter type token subtype token parameters may follow type subtype form attribute value pairs defined section 
type subtype parameter attribute names case insensitive 
parameter values depending semantics parameter name 
linear white space lws type subtype attribute value 
presence absence parameter significant processing media type depending definition media type registry 
note older applications recognize media type parameters 
sending data older applications implementations media type parameters required type subtype definition 
media type values registered internet assigned number authority iana 
media type registration process outlined rfc 
non registered media types discouraged 
canonicalization text defaults internet media types registered canonical form 
entity body transferred messages represented appropriate canonical form prior transmission text types defined paragraph 
canonical form media subtypes text type crlf text line break 
relaxes requirement allows transport text media plain cr lf representing line break done consistently entire entity body 
applications accept crlf bare cr bare lf representative line break text media received 
addition text represented character set octets cr lf respectively case multi byte character sets allows octet sequences defined character set represent equivalent cr lf line breaks 
flexibility regarding line breaks applies text media entity body bare cr lf substituted crlf control structures header fields multipart boundaries 
entity body encoded content coding underlying data form defined prior encoded 
charset parameter media types define character set section data 
explicit charset parameter provided sender media subtypes text type defined default charset value iso received 
data character sets iso subsets labeled appropriate charset value 
see section compatibility problems 
internet draft november fielding page multipart types mime provides number multipart types encapsulations entities single 
multipart types share common syntax defined section rfc include boundary parameter part media type value 
message body protocol element crlf represent line breaks body parts 
rfc epilogue multipart message empty applications transmit epilogue original multipart contains epilogue 
restrictions exist order preserve self delimiting nature multipart message body message body indicated multipart boundary 
general treats multipart message body differently media type strictly payload 
exception multipart type appendix appears partial content response interpreted caching mechanisms described sections 
cases user agent follow similar behavior mime user agent receipt multipart type 
application receives unrecognized multipart subtype application treat equivalent multipart mixed 
mime header fields body part multipart message body significance defined mime semantics 
general user agent follow similar behavior mime user agent receipt multipart type 
application receives unrecognized multipart subtype application treat equivalent multipart mixed 
note multipart form data type specifically defined carrying form data suitable processing post request method described rfc 
product tokens product tokens allow communicating applications identify software name version 
fields product tokens allow sub products form significant part application listed separated white space 
convention products listed order significance identifying application 
product token product version product version token examples user agent cern server apache product tokens short point 
advertising non essential information 
token character may appear product version token version identifier successive versions product differ portion product value 
quality values content negotiation section uses short floating point numbers indicate relative importance weight various negotiable parameters 
weight normalized real number range minimum maximum value 
parameter quality value content parameter acceptable client 
applications generate digits decimal point 
user configuration values limited fashion 
qvalue digit quality values misnomer values merely represent relative degradation desired quality 
internet draft november fielding page language tags language tag identifies natural language spoken written conveyed human beings communication information human beings 
computer languages explicitly excluded 
uses language tags accept language content language fields 
syntax registry language tags defined rfc 
summary language tag composed parts primary language tag possibly empty series language tag primary tag subtag primary tag alpha subtag alpha white space allowed tag tags case insensitive 
name space language tags administered iana 
example tags include en en en pig latin letter primary tag iso language abbreviation letter initial subtag iso country code 
tags registered tags examples tags registered 
entity tags entity tags comparing entities requested resource 
uses entity tags etag section match section match section range section header fields 
definition compared cache validators section 
entity tag consists opaque quoted string possibly prefixed weakness indicator 
entity tag weak opaque tag weak opaque tag quoted string strong entity tag may shared entities resource equivalent octet equality 
weak entity tag indicated prefix may shared entities resource entities equivalent substituted significant change semantics 
weak entity tag weak comparison 
entity tag unique versions entities associated particular resource 
entity tag value may entities obtained requests different uris 
entity tag value conjunction entities obtained requests different uris imply equivalence entities implying equivalence entities 
range units allows client request part range response entity included response 
uses range units range section content range section header fields 
entity broken subranges various structural units 
range unit bytes unit range unit bytes unit bytes range unit token range unit defined bytes 
implementations may ignore ranges specified units 
designed allow implementations applications depend knowledge ranges 
internet draft november fielding page message message types messages consist requests client server responses server client 
message request response messages request section response section messages generic message format rfc transferring entities payload message 
types message consist start line zero header fields known headers empty line line preceding crlf indicating header fields possibly message body 
generic message start line message header crlf message body start line request line status line interest robustness servers ignore empty line received request line expected 
words server reading protocol stream message receives crlf ignore crlf 
note buggy client implementations generate extra crlf post request 
restate explicitly forbidden bnf client preface follow request extra crlf 
message headers header fields include general header section request header section response header section entity header section fields follow generic format section rfc 
header field consists name followed colon field value 
field names case insensitive 
field value may preceded amount lws single sp preferred 
header fields extended multiple lines preceding extra line sp ht 
applications ought follow common form known indicated generating constructs exist implementations fail accept common forms 
message header field name field value crlf field name token field value field content lws field content consisting text combinations token separators quoted string field content include leading trailing lws linear white space occurring non whitespace character field value non whitespace character field value 
leading trailing lws may removed changing semantics field value 
lws occurs field content may replaced single sp interpreting field value forwarding message downstream 
order header fields differing field names received significant 
practice send general header fields followed request header response header fields entity header fields 
multiple message header fields field name may message entire field value header field defined comma separated list values 
possible combine multiple header fields field name field value pair changing semantics message appending subsequent field value separated comma 
order header fields field name received significant interpretation combined field value proxy change order field values message forwarded 
internet draft november fielding page message body message body message carry entity body associated request response 
message body differs entity body transfer coding applied indicated transfer encoding header field section 
message body entity body transfer encoding indicate transfer codings applied application ensure safe proper transfer message 
transfer encoding property message entity may added removed application request response chain 
section places restrictions certain transfer codings may 
rules message body allowed message differ requests responses 
presence message body request signaled inclusion content length header field request message headers 
message body included request specification request method section allow sending entity body requests 
server read forward message body request request method include defined semantics entity body message body ignored handling request 
response messages message body included message dependent request method response status code section 
responses head request method include message body presence entity header fields lead believe 
xx informational content modified responses include message body 
responses include message body may zero length 
message length transfer length message length message body appears message transfer codings applied 
message body included message transfer length body determined order precedence 
response message include message body xx responses response head request terminated empty line header fields regardless entity header fields message 

transfer encoding header field section value identity transfer length defined chunked transfer coding section message terminated closing connection 

content length header field section decimal value octets represents entity length transfer length 
content length header field sent lengths different transfer encoding header field 
message received transfer encoding header field content length header field ignored lengths different transfer encoding header field 

message uses media type multipart transfer length specified self delimiting media type defines transfer length 
media type sender knows recipient parse presence request range header multiple byte range specifiers client implies client parse multipart responses 
note range header may forwarded proxy understand multipart case server delimit message methods defined items section 
internet draft november fielding page 
server closing connection 
closing connection indicate request body leave possibility server send back response 
compatibility applications requests containing message body include valid content length header field server known compliant 
request contains message body content length server respond bad request determine length message length required wishes insist receiving valid content length 
applications receive entities accept chunked transfer coding section allowing mechanism messages message length determined advance 
messages include content length header field non identity transfer coding 
message include non identity transfer coding content length ignored 
content length message message body allowed field value exactly match number octets message body 
user agents notify user invalid length received detected 
general header fields header fields general applicability request response messages apply entity transferred 
header fields apply message transmitted 
general header cache control section connection section date section pragma section trailer section transfer encoding section upgrade section section warning section general header field names extended reliably combination change protocol version 
new experimental header fields may semantics general header fields parties communication recognize general header fields 
unrecognized header fields treated entity header fields 
request request message client server includes line message method applied resource identifier resource protocol version 
request request line section general header section request header section entity header section crlf message body section request line request line begins method token followed request uri protocol version crlf 
elements separated sp characters 
cr lf allowed final crlf sequence 
request line method sp request uri sp version crlf internet draft november fielding page method method token indicates method performed resource identified request uri 
method case sensitive 
method options section get section head section post section put section delete section trace section connect section extension method extension method token list methods allowed resource specified allow header field section 
return code response notifies client method currently allowed resource set allowed methods change dynamically 
servers origin server return status code method allowed method known origin server allowed requested resource implemented method unrecognized implemented origin server 
methods get head supported general purpose servers 
methods optional methods implemented implemented semantics specified section 
request uri request uri uniform resource identifier section identifies resource apply request 
request uri abs path authority options request uri dependent nature request 
asterisk means request apply particular resource server allowed method necessarily apply resource 
example options form required request proxy 
proxy requested forward request service valid cache return response 
note proxy may forward request proxy directly server specified 
order avoid request loops proxy able recognize server names including aliases local variations numeric ip address 
example request line get www org pub www html allow transition requests versions servers accept form requests clients generate requests proxies 
authority form connect method section 
common form request uri identify resource origin server gateway 
case absolute path uri transmitted see section abs path request uri network location uri authority transmitted host header field 
example client wishing retrieve resource directly origin server create tcp connection port host www org send lines get pub www html host www org followed remainder request 
note absolute path empty original uri server root 
request uri transmitted format specified section 
request uri encoded hex hex encoding origin server decode request uri order properly interpret request 
servers respond invalid request uris appropriate status code 
internet draft november fielding page transparent proxy rewrite abs path part received request uri forwarding inbound server noted replace null abs path requests forward transparent proxies rewrite abs path part request uri way noted replace null abs path matter proxy internal implementation 
note rewrite rule prevents proxy changing meaning request origin server improperly non reserved uri character reserved purpose 
implementors aware pre proxies known rewrite request uri 
resource identified request exact resource identified internet request determined examining request uri host header field 
origin server allow resources differ requested host may ignore host header field value determining resource identified request 
see section requirements host support origin server differentiate resources host requested referred virtual hosts host names rules determining requested resource request 
request uri host part request uri 
host header field value request ignored 

request uri request includes host header field host determined host header field value 

host determined rule valid host server response bad request error message 
recipients request lacks host header field may attempt heuristics examination uri path unique particular host order determine exact resource requested 
request header fields request header fields allow client pass additional information request client server 
fields act request modifiers semantics equivalent parameters programming language method invocation 
request header accept section accept charset section accept encoding section accept language section authorization section expect section section host section match section modified section match section range section unmodified section max forwards section proxy authorization section range section referer section te section user agent section internet draft november fielding page request header field names extended reliably combination change protocol version 
new experimental header fields may semantics request header fields parties communication recognize request header fields 
unrecognized header fields treated entity header fields 
response receiving interpreting request message server responds response message 
response status line section general header section response header section entity header section crlf message body section status line line response message status line consisting protocol version followed numeric status code associated textual phrase element separated sp characters 
cr lf allowed final crlf sequence 
status line version sp status code sp reason phrase crlf status code reason phrase status code element digit integer result code attempt understand satisfy request 
codes fully defined section 
reason phrase intended give short textual description status code 
status code intended automata reason phrase intended human user 
client required examine display reason phrase 
digit status code defines class response 
digits categorization role 
values digit xx informational request received continuing process xx success action successfully received understood accepted xx redirection action taken order complete request xx client error request contains bad syntax fulfilled xx server error server failed fulfill apparently valid request individual values numeric status codes defined example set corresponding reason phrase 
reason phrases listed recommendations may replaced local equivalents affecting protocol 
status code section continue section switching protocols section ok section created section accepted section non authoritative information section content section reset content section partial content section multiple choices section moved permanently internet draft november fielding page section section see section modified section proxy section temporary redirect section bad request section unauthorized section payment required section forbidden section section method allowed section acceptable section proxy authentication required section request time section conflict section gone section length required section precondition failed section request entity large section request uri large section unsupported media type section requested range satisfiable section expectation failed section internal server error section implemented section bad gateway section service unavailable section gateway time section version supported extension code extension code digit reason phrase status codes extensible 
applications required understand meaning registered status codes understanding obviously desirable 
applications understand class status code indicated digit treat unrecognized response equivalent status code class exception unrecognized response cached 
example unrecognized status code received client safely assume wrong request treat response received status code 
cases user agents user entity returned response entity include human readable information explain unusual status 
response header fields response header fields allow server pass additional information response placed status line 
header fields give information server access resource identified request uri 
response header accept ranges section age section etag section location section proxy authenticate section retry section server section vary section www authenticate section response header field names extended reliably combination change protocol version 
new experimental header fields may semantics response header fields parties internet draft november fielding page communication recognize response header fields 
unrecognized header fields treated fields 
entity request response messages may transfer entity restricted request method response status code 
entity consists entity header fields entity body responses include entity headers 
section sender recipient refer client server depending sends receives entity 
entity header fields entity header fields define metainformation entity body body resource identified request 
metainformation optional required portions specification 
entity header allow section content encoding section content language section content length section content location section content md section content range section content type section expires section modified section extension header extension header message header extension header mechanism allows additional entity header fields defined changing protocol fields assumed recognizable recipient 
unrecognized header fields ignored recipient forwarded transparent proxies 
entity body entity body sent request response format encoding defined fields 
entity body octet entity body message message body described section 
obtained message body decoding transfer encoding applied ensure safe proper transfer message 
type entity body included message data type body determined header fields content type content encoding 
define layer ordered encoding model entity body content encoding content type data content type specifies media type underlying data 
content encoding may indicate additional content codings applied data usually purpose data compression property requested resource 
default encoding 
message containing entity body include content type header field defining media type body 
media type content type field recipient may attempt guess media type inspection content name extension uri identify resource 
media type remains unknown recipient treat type application octet stream 
internet draft november fielding page entity length entity length message length message body transfer codings applied 
section defines transfer length message body determined 
connections persistent connections purpose prior persistent connections separate tcp connection established fetch url increasing load servers causing congestion internet 
inline images associated data requires client multiple requests server short amount time 
analysis performance problems results prototype implementation available 
implementation experience measurements actual rfc implementations show results 
alternatives explored example tcp 
persistent connections number advantages opening closing fewer tcp connections cpu time saved routers hosts clients servers proxies gateways tunnels caches memory tcp protocol control blocks saved hosts 
requests responses pipelined connection 
pipelining allows client multiple requests waiting response allowing single tcp connection efficiently lower elapsed time 
network congestion reduced reducing number packets caused tcp opens allowing tcp sufficient time determine congestion state network 
latency subsequent requests reduced time spent tcp connection opening handshake 
evolve gracefully errors reported penalty closing tcp connection 
clients versions optimistically try new feature communicating older server retry old semantics error reported 
implementations implement persistent connections 
operation significant difference earlier versions persistent connections default behavior connection 
indicated client assume server maintain persistent connection error responses server 
persistent connections provide mechanism client server signal close tcp connection 
signaling takes place connection header field section 
close signaled client send requests connection 
negotiation server may assume client intends maintain persistent connection connection header including connection token close sent request 
server chooses close connection immediately sending response send connection header including connection token close 
internet draft november fielding page client may expect connection remain open decide keep open response server contains connection header connection token close 
case client want maintain connection request send connection header including connection token close 
client server sends close token connection header request connection 
clients servers assume persistent connection maintained versions explicitly signaled 
see section information backward compatibility clients 
order remain persistent messages connection self defined message length defined closure connection described section 
pipelining client supports persistent connections may pipeline requests send multiple requests waiting response 
server send responses requests order requests received 
clients assume persistent connections pipeline immediately connection establishment prepared retry connection pipelined attempt fails 
client retry pipeline knows connection persistent 
clients prepared resend requests server closes connection sending corresponding responses 
clients pipeline requests non idempotent methods non idempotent sequences methods see section 
premature termination transport connection lead indeterminate results 
client wishing send non idempotent request wait send request received response status previous request 
proxy servers especially important proxies correctly implement properties connection header field specified section 
proxy server signal persistent connections separately clients origin servers proxy servers connects 
persistent connection applies transport link 
proxy server establish persistent connection client see rfc information problems keep alive header implemented clients 
practical considerations servers usually time value longer maintain inactive connection 
proxy servers higher value client making connections server 
persistent connections places requirements length time client server 
client server wishes time issue graceful close transport connection 
clients servers constantly watch side transport close respond appropriate 
client server detect side close promptly cause unnecessary resource drain network 
client server proxy may close transport connection time 
example client started send new request time server decided close idle connection 
server point view connection closed idle client point view request progress 
internet draft november fielding page means clients servers proxies able recover asynchronous close events 
client software reopen transport connection retransmit aborted sequence requests user interaction long request sequence idempotent see section 
non idempotent methods sequences automatically retried user agents may offer human operator choice retrying request 
confirmation user agent software semantic understanding application may substitute user confirmation 
automatic retry repeated second sequence requests fails 
servers respond request connection possible 
servers close connection middle transmitting response network client failure suspected 
clients persistent connections limit number simultaneous connections maintain server 
single user client maintain connections server proxy 
proxy connections server proxy number simultaneously active users 
guidelines intended improve response times avoid congestion 
message transmission requirements persistent connections flow control servers maintain persistent connections tcp flow control mechanisms resolve temporary overloads terminating connections expectation clients retry 
technique exacerbate network congestion 
monitoring connections error status messages client sending message body monitor network connection error status transmitting request 
client sees error status immediately cease transmitting body 
body sent chunked encoding section zero length chunk empty trailer may prematurely mark message 
body preceded content length header client close connection 
automatic retrying requests user agent sees transport connection close receives final response request sequence requests requests sequence idempotent see section user agent may retry request sequence user interaction 
request method sequence idempotent user agent retry request user confirmation 
confirmation user agent software semantic understanding application may substitute user confirmation 
continue status purpose continue status see section allow client sending request message request body determine origin server willing accept request request headers client sends request body 
cases inappropriate highly inefficient client send body server reject message looking body 
requirements clients client wait continue response sending request body send expect request header field section continue expectation 
client send expect request header field section continue expectation intend send request body 
note presence older implementations protocol allows ambiguous situations client may send expect continue receiving expectation failed status continue status 
client sends header field origin server possibly proxy internet draft november fielding page seen continue status client wait indefinite period sending request body 
requirements origin servers receiving request includes expect request header field continue expectation origin server respond continue status continue read input stream respond error final status code 
origin server wait request body sending continue response 
responds error final status code may close transport connection may continue read discard rest request 
perform requested method returns error final status code 
origin server send continue response request message include expect request header field continue expectation send continue response request comes earlier client 
exception rule compatibility rfc server may send continue status response put post request include expect request header field continue expectation 
exception purpose minimize client processing delays associated undeclared wait continue status applies requests requests version value 
origin server may omit continue response received request body corresponding request 
origin server sends continue response ultimately send final status code request body received processed terminates transport connection prematurely 
origin server receives request include expect request header field continue expectation request includes request body server responds error final status code reading entire request body transport connection server close transport connection read entire request client closes connection 
client reliably receive response message 
requirement construed preventing server defending denial service attacks badly broken client implementations 
requirements proxies proxy receives request includes expect request header field continue expectation proxy knows hop server complies higher know version hop server forward request including expect header field 
proxy knows version hop server lower forward request respond expectation failed status 
proxies maintain cache recording version numbers received referenced hop servers 
proxy forward continue response request message received earlier client include expect request header field continue expectation 
requirement overrides general rule forwarding xx responses see section 
client behavior server prematurely closes connection client sends request includes request body include expect request header field continue expectation client directly connected origin server client sees connection close receiving status server client retry request subject restrictions section 
client retry request may binary exponential backoff algorithm assured obtaining reliable response internet draft november fielding page 
initiate new connection server 
transmit request headers 
initialize variable estimated round trip time server time took establish connection constant value seconds round trip time available 

compute number previous retries request 

wait error response server seconds whichever comes 
error response received seconds transmit body request 

client sees connection closed prematurely repeat step request accepted error response received user impatient terminates retry process 
point error status received client continue close connection completed sending request message 
method definitions set common methods defined 
set expanded additional methods assumed share semantics separately extended clients servers 
host request header field section accompany requests 
safe idempotent methods safe methods implementors aware software represents user interactions internet careful allow user aware actions take may unexpected significance 
particular convention established get head methods significance action retrieval 
methods ought considered safe 
allows user agents represent methods post put delete special way user aware fact possibly unsafe action requested 
naturally possible ensure server generate side effects result performing get request fact dynamic resources consider feature 
important distinction user request side effects held accountable 
idempotent methods methods property idempotence aside error expiration issues side effects identical requests single request 
methods get head put delete share property 
methods options trace side effects inherently idempotent 
possible sequence requests non idempotent methods executed sequence idempotent 
sequence idempotent single execution entire sequence yields result changed part sequence 
example sequence result depends value modified sequence 
internet draft november fielding page sequence side effects idempotent definition provided concurrent operations executed set resources 
options options method represents request information communication options available request response chain identified request uri 
method allows client determine options requirements associated resource capabilities server implying resource action initiating resource retrieval 
responses method cacheable 
options request includes entity body indicated presence content length transfer encoding media type indicated content type field 
specification define body extensions options body detailed queries server 
server support extension may discard request body 
request uri asterisk options request intended apply server general specific resource 
server communication options typically depend resource request useful ping op type method allowing client test capabilities server 
example test proxy compliance lack thereof 
request uri asterisk options request applies options available communicating resource 
response include header fields indicate optional features implemented server applicable resource allow possibly including extensions defined specification 
response body include information communication options 
format body defined specification defined extensions 
content negotiation may select appropriate response format 
response body included response include content length field field value 
max forwards request header field may target specific proxy request chain 
proxy receives options request request forwarding permitted proxy check max forwards field 
max forwards field value zero proxy forward message proxy respond communication options 
field value integer greater zero proxy decrement field value forwards request 
max forwards field request forwarded request include max forwards field 
get get method means retrieve information form entity identified request uri 
request uri refers data producing process produced data shall returned entity response source text process text happens output process 
semantics get method change conditional get request message includes unmodified match match range header field 
conditional get method requests entity transferred circumstances described conditional header field 
conditional get method intended reduce unnecessary network usage allowing cached entities refreshed requiring multiple requests transferring data held client 
semantics get method change partial get request message includes range header field 
partial get requests part entity transferred described section 
partial get method intended reduce unnecessary network usage allowing partially retrieved entities completed transferring data held client 
internet draft november fielding page response get request cacheable meets requirements caching described section 
see section security considerations forms 
head head method identical get server return message body response 
metainformation contained headers response head request identical information sent response get request 
method obtaining metainformation entity implied request transferring entity body 
method testing hypertext links validity accessibility modification 
response head request may cacheable sense information contained response may update previously cached entity resource 
new field values indicate cached entity differs current entity indicated change content length content md etag modified cache treat cache entry stale 
post post method request origin server accept entity enclosed request new subordinate resource identified request uri request line 
post designed allow uniform method cover functions annotation existing resources posting message bulletin board newsgroup mailing list similar group articles providing block data result submitting form data handling process extending database append operation 
actual function performed post method determined server usually dependent request uri 
posted entity subordinate uri way file subordinate directory containing news article subordinate newsgroup posted record subordinate database 
action performed post method result resource identified uri 
case ok content appropriate response status depending response includes entity describes result 
resource created origin server response created contain entity describes status request refers new resource location header see section 
responses method cacheable response includes appropriate cache control expires header fields 
see response direct user agent retrieve cacheable resource 
post requests obey message transmission requirements set section 
see section security considerations 
put put method requests enclosed entity stored supplied request uri 
refers existing resource enclosed entity considered modified version residing origin server 
request uri point existing resource uri capable defined new resource requesting user agent origin server create resource internet draft november fielding page uri 
new resource created origin server inform user agent created response 
existing resource modified ok content response codes sent indicate successful completion request 
resource created modified request uri appropriate error response reflects nature problem 
recipient entity ignore content content range headers understand implement return implemented response cases 
request passes cache request uri identifies currently cached entities entries treated stale 
responses method cacheable 
fundamental difference post put requests reflected different meaning request uri 
uri post request identifies resource handle enclosed entity 
resource data accepting process gateway protocol separate entity accepts annotations 
contrast uri put request identifies entity enclosed request user agent knows uri intended server attempt apply request resource 
server desires request applied different uri send moved permanently response user agent may decision regarding redirect request 
single resource may identified different uris 
example article uri identifying current version separate uri identifying particular version 
case put request general uri result uris defined origin server 
define put method affects state origin server 
put requests obey message transmission requirements set section 
specified particular entity header entity headers put request applied resource created modified put 
delete delete method requests origin server delete resource identified request uri 
method may overridden human intervention means origin server 
client guaranteed operation carried status code returned origin server indicates action completed successfully 
server indicate success time response intends delete resource move inaccessible location 
successful response ok response includes entity describing status accepted action enacted content action enacted response include entity 
request passes cache request uri identifies currently cached entities entries treated stale 
responses method cacheable 
trace trace method invoke remote application layer loop back request message 
final recipient request reflect message received back client entity body ok response 
final recipient origin server proxy gateway receive max forwards value zero request see section 
trace request include entity 
trace allows client see received request chain data testing diagnostic information 
value header field section particular interest acts trace request chain 
max forwards header field allows client limit length request chain useful testing chain proxies forwarding messages infinite loop 
request valid response contain entire request message entity body content type message 
responses method cached 
internet draft november fielding page connect specification reserves method name connect proxy dynamically switch tunnel ssl tunneling 

status code definitions status code described including description method follow metainformation required response 
informational xx class status code indicates provisional response consisting status line optional headers terminated empty line 
required headers class status codes 
define xx status codes servers send xx response client experimental conditions 
client prepared accept xx status responses prior regular response client expect continue status message 
unexpected xx status responses may ignored user agent 
proxies forward xx responses connection proxy client closed proxy requested generation xx response 
example proxy adds expect continue field forwards request need forward corresponding continue response 
continue client continue request 
interim response inform client initial part request received rejected server 
client continue sending remainder request request completed ignore response 
server send final response request completed 
see section detailed discussion handling status code 
switching protocols server understands willing comply client request upgrade message header field section change application protocol connection 
server switch protocols defined response upgrade header field immediately empty line terminates response 
protocol switched advantageous 
example switching newer version advantageous older versions switching real time synchronous protocol advantageous delivering resources features 
successful xx class status code indicates client request successfully received understood accepted 
ok request succeeded 
information returned response dependent method request example get entity corresponding requested resource sent response head entity header fields corresponding requested resource sent response message body internet draft november fielding page post entity describing containing result action trace entity containing request message received server 
created request fulfilled resulted new resource created 
newly created resource referenced uri returned entity response specific uri resource location header field 
response include entity containing list resource characteristics location user user agent choose appropriate 
entity format specified media type content type header field 
origin server create resource returning status code 
action carried immediately server respond accepted response 
response may contain etag response header field indicating current value entity tag requested variant just created see section 
accepted request accepted processing processing completed 
request eventually acted disallowed processing takes place 
facility re sending status code asynchronous operation 
response intentionally non committal 
purpose allow server accept request process batch oriented process run day requiring user agent connection server persist process completed 
entity returned response include indication request current status pointer status monitor estimate user expect request fulfilled 
non authoritative information returned metainformation entity header definitive set available origin server gathered local third party copy 
set may subset superset original version 
example including local annotation information resource result superset metainformation known origin server 
response code required appropriate response ok 
content server fulfilled request need return entity body want return updated metainformation 
response may include new updated metainformation form entity headers associated requested variant 
client user agent change document view caused request sent 
response primarily intended allow input actions take place causing change user agent active document view new updated metainformation applied document currently user agent active view 
response include message body terminated empty line header fields 
reset content server fulfilled request user agent reset document view caused request sent 
response primarily intended allow input actions take place user input followed internet draft november fielding page clearing form input user easily initiate input action 
response include entity 
partial content server fulfilled partial get request resource 
request included range header field section indicating desired range may included range header field section request conditional 
response include header fields content range header field section indicating range included response multipart content type including content range fields part 
header field response value match actual number octets transmitted message body 
date etag content location header sent response request expires cache control vary field value differ sent previous response variant response result range request strong cache validator see section response include entity headers 
response result range request weak validator response include entity headers prevents inconsistencies cached entity bodies updated headers 
response include entity headers returned ok response request 
cache combine response previously cached content etag headers match exactly see 
cache support range content range headers cache partial responses 
redirection xx class status code indicates action needs taken user agent order fulfill request 
action required may carried user agent interaction user method second request get head 
client detect infinite redirection loops loops generate network traffic redirection 
note previous versions specification recommended maximum redirections 
content developers aware clients implement fixed limitation 
multiple choices requested resource corresponds set representations specific location agent driven negotiation information section provided user user agent select preferred representation redirect request location 
head request response include entity containing list resource characteristics location user user agent choose appropriate 
entity format specified media type content type header field 
depending format capabilities user agent selection appropriate choice may performed automatically 
specification define standard automatic selection 
internet draft november fielding page server preferred choice representation include specific uri representation location field user agents may location field value automatic redirection 
response cacheable indicated 
moved permanently requested resource assigned new permanent uri resource done returned uris 
clients link editing capabilities ought automatically re link request uri new returned server possible 
response cacheable indicated 
new permanent uri location field response 
request method head entity response contain short hypertext note hyperlink new uri 
status code received response request get head user agent automatically redirect request confirmed user change conditions request issued 
note automatically redirecting post request receiving status code existing user agents erroneously change get request 
requested resource resides temporarily different uri 
redirection altered occasion client continue request uri requests 
response cacheable indicated cache control expires header field 
uri location field response 
request method head entity response contain short hypertext note hyperlink new uri 
status code received response request get head user agent automatically redirect request confirmed user change conditions request issued 
note rfc rfc specify client allowed change method redirected request 
existing user agent implementations treat response performing get location field value regardless original request method 
status codes added servers wish unambiguously clear kind reaction expected client 
see response request different uri retrieved get method resource 
method exists primarily allow output post activated script redirect user agent selected resource 
new uri substitute originally requested resource 
response cached response second redirected request cacheable 
different uri location field response 
request method head entity response contain short hypertext note hyperlink new uri 
note pre user agents understand status 
interoperability clients concern status code may user agents react response described 
internet draft november fielding page modified client performed conditional get request access allowed document modified server respond status code 
response contain terminated empty line header fields 
response include header fields date omission required section origin server obeys rules proxies clients add date response received specified rfc section caches operate correctly 
etag content location header sent response request expires cache control vary field value differ sent previous response variant conditional get strong cache validator see section response include entity headers 
conditional get weak validator response include entity headers prevents inconsistencies cached entity bodies updated headers 
response indicates entity currently cached cache disregard response repeat request conditional 
cache uses received response update cache entry cache update entry reflect new field values response 
response include message body terminated empty line header fields 
proxy requested resource accessed proxy location field 
location field gives uri proxy 
recipient expected repeat single request proxy 
responses generated origin servers 
note rfc clear intended redirect single request generated origin servers 
observing limitations significant security consequences 
unused status code previous version specification longer code reserved 
temporary redirect requested resource resides temporarily different uri 
redirection may altered occasion client continue request uri requests 
response cacheable indicated cache control expires header field 
temporary uri location field response 
request method head entity response contain short hypertext note hyperlink new uri pre user agents understand status 
note contain information necessary user repeat original request new uri 
status code received response request get head user agent automatically redirect request confirmed user change conditions request issued 
internet draft november fielding page note pre user agents understand status 
appropriate response entity contain information necessary user repeat original request new uri 
client error xx xx class status code intended cases client 
responding head request server include entity containing explanation error situation temporary permanent condition 
status codes applicable request method 
user agents display included entity user 
note client sending data server implementation tcp careful ensure client acknowledges receipt packet containing response server closes input connection 
client continues sending data server close server tcp stack send reset packet client may erase client unacknowledged input buffers read interpreted application 
bad request request understood server due malformed syntax 
client repeat request modifications 
unauthorized request requires user authentication 
response include www authenticate header field section containing challenge applicable requested resource 
client may repeat request suitable authorization header field section 
request included authorization credentials response indicates authorization refused credentials 
response contains challenge prior response user agent attempted authentication user entity response entity include relevant diagnostic information 
access authentication explained authentication basic digest access authentication payment required code reserved 
forbidden server understood request refusing fulfill 
authorization help request repeated 
request method head server wishes public request fulfilled describe reason refusal entity 
server wish information available client status code 
server matching request uri 
indication condition temporary permanent 
gone status code server knows internally configurable mechanism old resource permanently unavailable forwarding address 
status code commonly server wish reveal exactly request refused response applicable 
method allowed method specified request line allowed resource identified request uri 
response include allow header containing list valid methods requested resource 
internet draft november fielding page acceptable resource identified request capable generating response entities content characteristics acceptable accept headers sent request 
head request response include entity containing list available entity characteristics location user user agent choose appropriate 
entity format specified media type content type header field 
depending format capabilities user agent selection appropriate choice may performed automatically 
specification define standard automatic selection 
note servers allowed return responses acceptable accept headers sent request 
cases may preferable sending response 
user agents encouraged inspect headers incoming response determine acceptable 
response unacceptable user agent temporarily receipt data query user decision actions 
proxy authentication required code similar unauthorized indicates client authenticate proxy 
proxy return proxy authenticate header field section containing challenge applicable proxy requested resource 
client may repeat request suitable header field section 
access authentication explained authentication basic digest access authentication 
request timeout client produce request time server prepared wait 
client may repeat request modifications time 
conflict request completed due conflict current state resource 
code allowed situations expected user able resolve conflict resubmit request 
response body include information user recognize source conflict 
ideally response entity include information user user agent fix problem possible required 
conflicts occur response put request 
example versioning entity put included changes resource conflict earlier third party request server response indicate complete request 
case response entity contain list differences versions format defined response content type 
gone requested resource longer available server forwarding address known 
condition expected considered permanent 
clients link editing capabilities delete request uri user approval 
server know facility determine condition permanent status code 
response cacheable indicated 
response primarily intended assist task web maintenance notifying recipient resource intentionally unavailable server owners desire remote links resource removed 
event common limited time promotional services resources belonging individuals longer internet draft november fielding page working server site 
necessary mark permanently unavailable resources gone keep mark length time left discretion server owner 
length required server refuses accept request defined content length 
client may repeat request adds valid content length header field containing length message body request message 
precondition failed precondition request header fields evaluated false tested server 
response code allows client place preconditions current resource metainformation header field data prevent requested method applied resource intended 
request entity large server refusing process request request entity larger server willing able process 
server may close connection prevent client continuing request 
condition temporary server include retry header field indicate temporary time client may try 
request uri long server refusing service request request uri longer server willing interpret 
rare condition occur client improperly converted post request get request long query information client descended uri black hole redirection redirected uri prefix points suffix server attack client attempting exploit security holes servers fixed length buffers reading manipulating 
unsupported media type server refusing service request entity request format supported requested resource requested method 
requested range satisfiable server return response status code request included range request header field section range specifier values field overlap current extent selected resource request include range request header field 
byte ranges means byte pos byte range spec values greater current length selected resource 
status code returned byte range request response include content range entity header field specifying current length selected resource see section 
response multipart content type 
expectation failed expectation expect request header field see section met server server proxy server unambiguous evidence request met hop server 
internet draft november fielding page server error xx response status codes digit indicate cases server aware incapable performing request 
responding head request server include entity containing explanation error situation temporary permanent condition 
user agents display included entity user 
response codes applicable request method 
internal server error server encountered unexpected condition prevented fulfilling request 
implemented server support functionality required fulfill request 
appropriate response server recognize request method capable supporting resource 
bad gateway server acting gateway proxy received invalid response upstream server accessed attempting fulfill request 
service unavailable server currently unable handle request due temporary overloading maintenance server 
implication temporary condition alleviated delay 
known length delay may indicated retry header 
retry client handle response response 
note existence status code imply server overloaded 
servers may wish simply refuse connection 
gateway timeout server acting gateway proxy receive timely response upstream server specified uri ftp ldap auxiliary server dns needed access attempting complete request 
note note implementors deployed proxies known return dns lookups time 
version supported server support refuses support protocol version request message 
server indicating unable unwilling complete request major version client described section error message 
response contain entity describing version supported protocols supported server 
access authentication provides optional challenge response authentication mechanisms may server challenge client request client provide authentication information 
general framework access authentication specification basic digest authentication specified authentication basic digest access authentication 
specification adopts definitions challenge credentials specification 
internet draft november fielding page content negotiation responses include entity contains information interpretation human user 
naturally desirable supply user best available entity corresponding request 
unfortunately servers caches users preferences best user agents equally capable rendering entity types 
reason provisions mechanisms content negotiation process selecting best representation response multiple representations available 
note called format negotiation alternate representations may media type different capabilities type different languages response containing entity body may subject negotiation including error responses 
kinds content negotiation possible server driven agent driven negotiation 
kinds negotiation orthogonal may separately combination 
method combination referred transparent negotiation occurs cache uses agent driven negotiation information provided origin server order provide server driven negotiation subsequent requests 
server driven negotiation selection best representation response algorithm located server called server driven negotiation 
selection available representations response dimensions vary language content coding contents particular header fields request message information pertaining request network address client 
server driven negotiation advantageous algorithm selecting available representations difficult describe user agent server desires send best guess client response hoping avoid round trip delay subsequent request best guess user 
order improve server guess user agent may include request header fields accept accept encoding describe preferences response 
server driven negotiation disadvantages 
impossible server accurately determine best user require complete knowledge capabilities user agent intended response user want view screen print 

having user agent describe capabilities request inefficient small percentage responses multiple representations potential violation user privacy 

complicates implementation origin server algorithms generating responses request 

may limit public cache ability response multiple user requests 
includes request header fields enabling server driven negotiation description user agent capabilities user preferences accept section accept charset section section accept language section user agent section 
origin server limited dimensions may vary response aspect request including information outside request header fields extension header fields defined specification 
vary header field express parameters server uses select representation subject server driven negotiation 
see section vary header field caches section vary header field servers 
internet draft november fielding page agent driven negotiation agent driven negotiation selection best representation response performed user agent receiving initial response origin server 
selection list available representations response included header fields specification reserves name alternates entity body initial response representation identified uri 
selection representations may performed automatically user agent capable doing manually user selecting generated possibly hypertext menu 
agent driven negotiation advantageous response vary commonly dimensions type language encoding origin server unable determine user agent capabilities examining request generally public caches distribute server load reduce network usage 
agent driven negotiation suffers disadvantage needing second request obtain best alternate representation 
second request efficient caching 
addition specification define mechanism supporting automatic selection prevent mechanism developed extension 
defines multiple choices acceptable status codes enabling agent driven negotiation server unwilling unable provide varying response server driven negotiation 
transparent negotiation transparent negotiation combination server driven agent driven negotiation 
cache supplied form list available representations response agent driven negotiation dimensions variance completely understood cache cache capable performing server driven negotiation behalf origin server subsequent requests resource 
transparent negotiation advantage distributing negotiation required origin server removing second request delay agent driven negotiation cache able correctly guess right response 
specification define mechanism transparent negotiation prevent mechanism developed extension 
caching typically distributed information systems performance improved response caches 
protocol includes number elements intended caching possible 
elements aspects protocol interact useful describe basic caching design separately detailed descriptions methods headers response codes caching useless significantly improve performance 
goal caching eliminate need send requests cases eliminate need send full responses cases 
reduces number network round trips required operations expiration mechanism purpose see section 
reduces network bandwidth requirements validation mechanism purpose see section 
requirements performance availability disconnected operation require able relax goal semantic transparency 
protocol allows origin servers caches clients explicitly reduce transparency necessary 
non transparent operation may confuse non expert users incompatible certain server applications ordering merchandise protocol requires transparency relaxed explicit protocol level request relaxed client origin server explicit warning user relaxed cache client internet draft november fielding page protocol provides important elements 
protocol features provide full semantic transparency required parties 

protocol features allow origin server user agent explicitly request control non transparent operation 

protocol features allow cache attach warnings responses preserve requested approximation semantic transparency 
basic principle possible clients detect potential relaxation semantic transparency 
note server cache client implementor faced design decisions explicitly discussed specification 
decision affect semantic transparency implementor ought err side maintaining transparency careful complete analysis shows significant benefits breaking transparency 
cache correctness correct cache respond request date response held cache appropriate request see sections meets conditions 
checked equivalence origin server returned response origin server section 
fresh see section 
default case means meets restrictive freshness requirement client origin server cache see section origin server specifies freshness requirement origin server 
stored response fresh restrictive freshness requirement client origin server carefully considered circumstances cache may return response appropriate warning header see section response prohibited store cache directive cache cache request directive see section 

appropriate modified proxy redirect error xx xx response message 
cache communicate origin server correct cache respond response correctly served cache return error warning indicating communication failure 
cache receives response entire response modified response normally forward requesting client received response longer fresh cache forward requesting client adding new warning removing existing warning headers 
cache attempt revalidate response simply response stale transit lead infinite loop 
user agent receives stale response warning may display warning indication user 
warnings cache returns response hand fresh sense condition section attach warning effect warning general header 
warning header currently defined warnings described section 
warning allows clients take appropriate action 
warnings may purposes cache related 
warning error status code distinguish responses true failures 
warnings assigned digit warn codes 
digit indicates warning deleted stored cache entry successful revalidation internet draft november fielding page xx warnings describe freshness revalidation status response deleted successful revalidation 
xx warn codes may generated cache validating cached entry 
generated clients 
xx warnings describe aspect entity body entity headers rectified revalidation example lossy compression entity bodies deleted successful revalidation 
see section definitions codes 
warnings come categories 
describe freshness revalidation status response deleted successful revalidation see section definition revalidation 

describe aspect entity body entity headers rectified revalidation example lossy compression entity bodies 
warnings deleted successful revalidation 
warnings assigned digit code numbers 
digit indicates warning deleted cached response successfully 
specification defines code numbers meanings currently assigned warning allowing client cache take automated action cases 
caches cache warnings responses deleting ones category 
warnings responses passed caches carry extra warning date field prevents recipient believing erroneously cached warning 
warnings carry warning text 
text may appropriate natural language client accept headers include optional indication character set 
multiple warnings may attached response origin server cache including multiple warnings code number 
example server provide warning texts english basque 
multiple warnings attached response practical reasonable display user 
version specify strict priority rules deciding warnings display order suggest heuristics 
cache control mechanisms basic cache mechanisms server specified expiration times validators implicit directives caches 
cases server client need provide explicit directives caches 
cache control header purpose 
cache control header allows client server transmit variety directives requests responses 
directives typically override default caching algorithms 
general rule apparent conflict header values restrictive interpretation applied preserve semantic transparency 
cases cache control directives explicitly specified weakening approximation semantic transparency example max stale public 
cache control directives described detail section 
explicit user agent warnings user agents possible users override basic caching mechanisms 
example user agent allow user specify cached entities explicitly stale ones validated 
user agent add cache control max stale request 
user agent internet draft november fielding page default non transparent behavior behavior results abnormally ineffective caching may explicitly configured explicit action user 
user overridden basic caching mechanisms user agent explicitly indicate user results display information meet server transparency requirements particular displayed entity known stale 
protocol normally allows user agent determine responses stale indication need displayed happens 
indication need dialog box icon example picture fish indicator 
user overridden caching mechanisms way abnormally reduce effectiveness caches user agent continually indicate state user example display picture currency flames user inadvertently consume excess resources suffer excessive latency 
exceptions rules warnings cases operator cache may choose configure return stale responses requested clients 
decision ought lightly may necessary reasons availability performance especially cache poorly connected origin server 
cache returns stale response mark warning header 
allows enabling client software alert user potential problem 
allows user agent take steps obtain hand fresh response 
reason cache return stale response client explicitly requests hand fresh impossible comply technical policy reasons 
client controlled behavior origin server lesser extent intermediate caches contribution age response primary source expiration information cases client need control cache decision return cached response validating 
clients directives header 
client request may specify maximum age willing accept response specifying value zero forces cache revalidate responses 
client may specify minimum time remaining response expires 
options increase constraints behavior caches relax cache approximation semantic transparency 
client may specify accept stale responses maximum amount staleness 
constraints caches violate origin server specified constraints semantic transparency necessary support disconnected operation high availability face poor connectivity 
expiration model server specified expiration caching works best caches entirely avoid making requests origin server 
primary mechanism avoiding requests origin server provide explicit expiration time indicating response may satisfy subsequent requests 
words cache return fresh response contacting server 
expectation servers assign explicit expiration times responses belief entity change semantically significant way expiration time reached 
normally preserves semantic transparency long server expiration times carefully chosen 
internet draft november fielding page expiration mechanism applies responses taken cache hand responses forwarded immediately requesting client 
origin server wishes force semantically transparent cache validate request may assign explicit expiration time past 
means response stale cache validate subsequent requests 
see section restrictive way force revalidation 
origin server wishes force cache matter configured validate request revalidate cache control directive see section 
servers specify explicit expiration times expires header max age directive cache control header 
expiration time force user agent refresh display reload resource semantics apply caching mechanisms mechanisms need check resource expiration status new request resource initiated 
see section explanation difference caches history mechanisms 
heuristic expiration origin servers provide explicit expiration times caches typically assign heuristic expiration times employing algorithms header values modified time estimate plausible expiration time 
specification provide specific algorithms impose worst case constraints results 
heuristic expiration times compromise semantic transparency ought cautiously encourage origin servers provide explicit expiration times possible 
age calculations order know cached entry fresh cache needs know age exceeds freshness lifetime 
discuss calculate section section describes calculate age response cache entry 
discussion term mean current value clock host performing calculation 
hosts especially hosts running origin servers caches ntp similar protocol synchronize clocks globally accurate time standard 
requires origin servers send date header possible response giving time response generated see section 
term date value denote value date header form appropriate arithmetic operations 
uses age response header convey estimated age response message obtained cache 
age field value cache estimate amount time response generated origin server 
essence age value sum time response resident caches path origin server plus amount time transit network paths 
term age value denote value age header form appropriate arithmetic operations 
response age calculated entirely independent ways 
minus date value local clock reasonably synchronized origin server clock 
result negative result replaced zero 

age value caches response path implement 
independent ways compute age response received combine corrected received age max date value age value internet draft november fielding page long nearly synchronized clocks paths gets reliable conservative result 
network imposed delays significant interval pass time server generates response time received outbound cache client 
uncorrected delay result improperly low ages 
request resulted returned age value initiated prior age value generation correct delays imposed network recording time request initiated 
age value received interpreted relative time request initiated time response received 
algorithm results conservative behavior matter delay experienced 
compute corrected initial age corrected received age request time request time time local clock request elicited response sent 
summary age calculation algorithm cache receives response age value value age header received cache response 
date value value origin server date header request time local time cache request resulted cached response response time local time cache received response current local time apparent age max response time date value corrected received age max apparent age age value response delay response time request time corrected initial age corrected received age response delay resident time response time current age corrected initial age resident time current age cache entry calculated adding amount time seconds cache entry validated origin server corrected initial age 
response generated cache entry server cache include single age header field response value equal cache entry current age 
presence age header field response implies response hand 
converse true lack age header field response imply response hand caches request path compliant older caches implement age header field 
expiration calculations order decide response fresh stale need compare freshness lifetime age 
age calculated described section section describes calculate freshness lifetime determine response expired 
discussion values represented form appropriate arithmetic operations 
term expires value denote value expires header 
term max age value denote appropriate value number seconds carried max age directive cache control header response see section 
internet draft november fielding page max age directive takes priority expires max age response calculation simply freshness lifetime max age value expires response calculation freshness lifetime expires value date value note calculations vulnerable clock skew information comes origin server 
expires cache control max age cache control see section appears response response include restrictions caching cache may compute freshness lifetime heuristic 
value greater hours cache attach warning response age hours warning added 
response modified time heuristic expiration value fraction interval time 
typical setting fraction 
calculation determine response expired quite simple response fresh freshness lifetime current age disambiguating expiration values expiration values assigned optimistically possible caches contain fresh values resource different 
client performing retrieval receives non hand response request fresh cache date header existing cache entry newer date new response client may ignore response 
may retry request cache control max age directive see section force check origin server 
cache fresh responses representation different validators date header 
situation arise cache pooling responses caches client asked reload revalidation apparently fresh cache entry 
disambiguating multiple responses client receiving responses multiple paths responses flow set caches responses flow different set caches client receive responses order different origin server sent 
client generated response older responses apparently fresh 
entity tag expiration value impose ordering responses possible response intentionally carries earlier expiration time 
date values ordered granularity second 
client tries revalidate cache entry response receives contains date header appears older existing entry client repeat request unconditionally include cache control max age force intermediate caches validate copies directly origin server cache control cache force intermediate caches obtain new copy origin server 
date values equal client may response may extremely prudent request new response 
servers depend clients able choose deterministically responses generated second expiration times overlap 
internet draft november fielding page validation model cache stale entry response client request check origin server possibly intermediate cache fresh response see cached entry usable 
call validating cache entry 
want pay overhead retransmitting full response cached entry want pay overhead extra round trip cached entry invalid protocol supports conditional methods 
key protocol features supporting conditional methods concerned cache validators 
origin server generates full response attaches sort validator kept cache entry 
client user agent proxy cache conditional request resource cache entry includes associated validator request 
server checks validator current validator entity match see section responds special status code usually modified entity body 
returns full response including entity body 
avoid transmitting full response validator matches avoid extra round trip match 
note comparison functions decide validators match defined section 
conditional request looks exactly normal request resource carries special header includes validator implicitly turns method usually get conditional 
protocol includes positive negative senses cache validating conditions 
possible request method performed validator matches validators match 
note response lacks validator may cached served cache expires explicitly prohibited cache control directive 
cache conditional retrieval validator entity means expires 
dates modified entity header field value cache validator 
simple terms cache entry considered valid entity modified modified value 
entity tag cache validators etag response header field value entity tag provides opaque cache validator 
allow reliable validation situations inconvenient store modification dates second resolution date values sufficient origin server wishes avoid certain paradoxes arise modification dates 
entity tags described section 
headers entity tags described sections 
weak strong validators origin servers caches compare validators decide represent different entities 
normally expect entity entity body entity headers changes way associated validator change 
true call validator strong validator 
cases server prefers change validator semantically significant changes insignificant aspects entity change 
validator change resource changes weak validator 
entity tags normally strong validators protocol provides mechanism tag entity tag weak 
think strong validator changes bits entity changes weak value changes meaning entity changes 
alternatively think strong validator part internet draft november fielding page identifier specific entity weak validator part identifier set semantically equivalent entities 
note example strong validator integer incremented stable storage time entity changed 
entity modification time represented second resolution weak validator possible resource modified twice single second 
support weak validators optional 
weak validators allow efficient caching equivalent objects example hit counter site probably updated days weeks value period equivalent 
validator client generates request includes validator validating header field server compares validators 
strong validators usable context 
weak validators usable contexts depend exact equality entity 
example kind usable conditional get full entity 
strong validator usable sub range retrieval client internally inconsistent entity 
clients may issue simple non subrange get requests weak validators strong validators 
clients weak validators forms request 
function protocol defines validators comparison 
validator comparison functions depending comparison context allows weak validators strong comparison function order considered equal validators identical way weak 
weak comparison function order considered equal validators identical way may tagged weak affecting result 
weak comparison function may simple non subrange get requests 
strong comparison function cases 
entity tag strong explicitly tagged weak 
section gives syntax entity tags 
modified time validator request implicitly weak possible deduce strong rules validator compared origin server actual current validator entity origin server reliably knows associated entity change twice second covered validator 
validator client modified unmodified header client cache entry associated entity cache entry includes date value gives time origin server sent original response modified time seconds date value 
validator compared intermediate cache validator stored cache entry entity cache entry includes date value gives time origin server sent original response modified time seconds date value 
internet draft november fielding page method relies fact different responses sent origin server second modified time responses date value equal modified time 
arbitrary second limit guards possibility date modified values generated different clocks somewhat different times preparation response 
implementation may value larger seconds believed seconds short 
client wishes perform sub range retrieval value modified time opaque validator may modified time strong sense described 
cache origin server receiving conditional request full body get request strong comparison function evaluate condition 
rules allow caches clients safely perform sub range retrievals values obtained servers 
rules entity tags dates adopt set rules recommendations origin servers clients caches regarding various validator types ought purposes 
origin servers send entity tag validator feasible generate 
may send weak entity tag strong entity tag performance considerations support weak entity tags unfeasible send strong entity tag 
send modified value feasible send risk breakdown semantic transparency result date modified header lead serious problems 
words preferred behavior origin server send strong entity tag value 
order legal strong entity tag change associated entity value changes way 
weak entity tag change associated entity changes semantically significant way 
note order provide semantically transparent caching origin server avoid reusing specific strong entity tag value different entities reusing specific weak entity tag value semantically different entities 
cache entries persist arbitrarily long periods regardless expiration times inappropriate expect cache attempt validate entry validator obtained point past 
clients entity tag provided origin server entity tag cache conditional request match match 
modified value provided origin server value cache conditional requests modified 
modified value provided origin server may value subrange cache conditional requests unmodified 
user agent provide way disable case difficulty 
entity tag modified value provided origin server validators cache conditional requests 
allows caches respond appropriately 
origin server receiving conditional request includes date modified unmodified header field entity tags internet draft november fielding page match match range header field cache validators return response status modified doing consistent conditional header fields request 
caching proxy receiving conditional request includes date entity tags cache validators return locally cached response client cached response consistent conditional header fields request 
rationale general principle rules servers clients transmit non redundant information available responses requests 
systems receiving information conservative assumptions validators receive 
clients caches ignore entity tags 
generally modified values received systems support transparent efficient caching origin servers provide modified values 
rare cases modified value validator system result serious problem origin servers provide 
non validating conditionals principle entity tags service author knows semantics resource select appropriate cache validation mechanism specification validator comparison function complex byte equality open worms 
comparisons headers compatibility purposes validating cache entry 
response specifically constrained cache control section directive caching system may store successful response see section cache entry may return validation fresh may return successful validation 
cache validator explicit expiration time associated response expect cached certain caches may violate expectation example little network connectivity available 
client usually detect response taken cache comparing date header current time 
note caches known violate expectation providing warning 
cases inappropriate cache retain entity return response subsequent request 
absolute semantic transparency deemed necessary service author security privacy considerations 
certain cache control directives provided server indicate certain resource entities portions thereof cached regardless considerations 
note section normally prevents shared cache saving returning response previous request request included authorization header 
response received status code may stored cache reply subsequent request subject expiration mechanism cache control directive prohibits caching 
cache support range content range headers cache partial content responses 
response received status code status codes returned reply subsequent request cache control directives header explicitly allow 
example include expires header section max age revalidate proxy revalidate public private cache control directive section 
internet draft november fielding page constructing responses caches purpose cache store information received response requests responding requests 
cases cache simply returns appropriate parts response requester 
cache holds cache entry previous response combine parts new response held cache entry 
hop hop headers purpose defining behavior caches non caching proxies divide headers categories headers transmitted ultimate recipient request response 
headers responses stored part cache entry transmitted response formed cache entry 
hop hop headers meaningful single transport level connection stored caches forwarded proxies 
headers hop hop headers connection keep alive proxy authenticate proxy authorization transfer encoding upgrade headers defined headers 
hop headers introduced versions listed connection header described section introduced 
non modifiable headers features protocol digest authentication depend value certain headers 
transparent proxy modify header definition header requires specifically allows 
transparent proxy modify fields request response add fields content location content md etag modified transparent proxy modify fields response expires may add fields 
expires header added identical date header response 
proxy modify add fields message contains transform cache control directive request content encoding internet draft november fielding page content range content type non transparent proxy may modify add fields message include transform add warning transformation applied appear message see section 
warning unnecessary modification headers cause authentication failures stronger authentication mechanisms introduced versions 
authentication mechanisms may rely values header fields listed 
content length field request response added deleted rules section 
transparent proxy preserve entity length section entity body may change transfer length section 
combining headers cache validating request server server provides modified response partial content response cache constructs response send requesting client 
ifn status code modified cache uses entity body stored cache entry entity body outgoing response 
status code partial content etag modified headers match exactly see cache may combine contents stored cache entry new contents received response result entity body outgoing response see 
headers stored cache entry constructed response stored warning headers warn code xx see section deleted cache entry forwarded response 
stored warning headers warn code xx retained cache entry forwarded response 
headers provided response replace corresponding headers cache entry 
cache decides remove cache entry replace headers stored cache entry corresponding headers received incoming response warning headers described immediately 
header field name incoming response matches header cache entry old headers replaced 
words set headers received incoming response overrides corresponding toend headers stored cache entry stored warning headers warn code xx deleted overridden 
note rule allows origin server modified partial content response update header associated previous response entity sub ranges thereof meaningful correct 
rule allow origin server modified partial content response entirely delete header provided previous response 
combining byte ranges response transfer subrange bytes entity body request included range specifications connection broken prematurely 
transfers cache received ranges entity body 
cache stored non empty set subranges entity incoming response transfers subrange cache may combine new subrange existing set conditions met incoming response cache entry cache validator 
internet draft november fielding page cache validators match strong comparison function see section 
requirement meant cache partial response date values transmitted response incoming response values equal missing discard partial information 
caching negotiated responses server driven content negotiation section indicated presence vary header field response alters conditions procedure cache response subsequent requests 
see section vary header field servers 
server vary header field inform cache request header fields select multiple representations cacheable response subject server driven negotiation 
set header fields named vary field value known selecting request headers 
cache receives subsequent request request uri specifies cache entries including vary header field cache cache entry construct response new request selecting request headers new request match corresponding stored request headers original request 
selecting request headers requests defined match selecting request headers request transformed selecting request headers second request adding removing linear white space lws places allowed corresponding bnf combining multiple message header fields field name rules message headers section 
vary header field value fails match subsequent requests resource properly interpreted origin server 
selecting request header fields cached entry match selecting request header fields new request cache cached entry satisfy request relays new request origin server conditional request server responds modified including entity tag content location indicates entity 
entity tag assigned cached representation forwarded request conditional include entity tags match header field cache entries resource 
conveys server set entities currently held cache entities matches requested entity server etag header field modified response tell cache entry appropriate 
entity tag new response matches existing entry new response update header fields existing entry result returned client 
existing cache entries contains partial content associated entity entity tag included match header field request range fully satisfied entry 
cache receives successful response content location field matches existing cache entry request uri entity tag differs existing entry date existing entry existing entry returned response requests deleted cache 
shared non shared caches reasons security privacy necessary distinction shared non shared caches 
non shared cache accessible single user 
accessibility case enforced appropriate security mechanisms 
caches considered shared 
sections specification place certain constraints operation shared caches order prevent loss privacy failure access controls 
internet draft november fielding page errors incomplete response cache behavior cache receives incomplete response example fewer bytes data specified header may store response 
cache treat partial response 
partial responses may combined described section result full response partial 
cache return partial response client explicitly marking partial content status code 
cache return partial response status code ok 
cache receives xx response attempting revalidate entry may forward response requesting client act server failed respond 
case may return previously received response cached entry includes revalidate cache control directive see section 
side effects get head origin server explicitly prohibits caching responses application get head methods resources side effects lead erroneous behavior responses taken cache 
may side effects cache required consider side effects caching decisions 
caches expected observe origin server explicit restrictions caching 
note exception rule applications traditionally gets heads query urls containing rel path part perform operations significant side effects caches treat responses uris fresh server provides explicit expiration time 
specifically means responses servers uris taken cache 
see section related information 
invalidation updates deletions effect certain methods performed resource origin server cause existing cache entries non transparently invalid 
continue fresh accurately reflect origin server return new request resource 
way protocol guarantee cache entries marked invalid 
example request caused change origin server gone proxy cache entry stored 
rules help reduce likelihood erroneous behavior 
section phrase invalidate entity means cache remove instances entity storage mark invalid need mandatory revalidation returned response subsequent request 
methods cause cache invalidate entity 
entity referred request uri location content location headers 
methods put delete post order prevent denial service attacks invalidation uri location header performed host part request uri 
cache passes requests methods understand invalidate entities referred request uri 
write mandatory methods expected cause modifications origin server resources written origin server 
currently includes methods get head 
cache reply request client having transmitted request inbound server having received internet draft november fielding page corresponding response inbound server 
prevent proxy cache sending continue response inbound server sent final reply 
alternative known write back copy back caching allowed due difficulty providing consistent updates problems arising server cache network failure prior write back 
cache replacement new cacheable see sections response received resource existing responses resource cached cache new response reply current request 
may insert cache storage may meets requirements respond requests previously caused old response returned 
inserts new response cache storage follow rules section apply 
note new response older date header value existing cached responses cacheable 
history lists user agents history mechanisms back buttons history lists redisplay entity retrieved earlier session 
history mechanisms caches different 
particular history mechanisms try show semantically transparent view current state resource 
history mechanism meant show exactly user saw time resource retrieved 
default expiration time apply history mechanisms 
entity storage history mechanism display entity expired user specifically configured agent refresh expired history documents 
construed prohibit history mechanism telling user view stale 
note history list mechanisms unnecessarily prevent users viewing stale resources tend force service authors avoid expiration controls cache controls 
service authors may consider important users error messages warning messages navigation controls back view previously fetched resources 
resources ought cached ought expire quickly user interface considerations may force service authors resort means preventing caching urls order suffer effects improperly functioning history mechanisms 
header field definitions section defines syntax semantics standard header fields 
entity header fields sender recipient refer client server depending sends receives entity 
accept accept request header field specify certain media types acceptable response 
accept headers indicate request specifically limited small set desired types case request line image 
accept accept media range accept params media range type type subtype parameter accept params qvalue accept extension accept extension token token quoted string internet draft november fielding page asterisk character group media types ranges indicating media types type indicating subtypes type 
media range may include media type parameters applicable range 
media range may followed accept params parameter indicating relative quality factor 
parameter separates media range parameter accept params 
quality factors allow user user agent indicate relative degree preference media range qvalue scale section 
default value 
note parameter name separate media type parameters accept extension parameters due historical practice 
prevents media type parameter named media range event believed lack parameters iana media type registry rare usage media type parameters accept 
media types discouraged registering parameter named 
example accept audio audio basic interpreted prefer audio basic send audio type best available mark quality 
accept header field assumed client accepts media types 
accept header field server send response acceptable combined accept field value server send acceptable response 
elaborate example accept text plain text html text dvi text verbally interpreted text html text preferred media types exist send text dvi entity exist send text plain entity 
media ranges overridden specific media ranges specific media types 
media range applies type specific precedence 
example accept text text html text html level precedence text html level text html text media type quality factor associated type determined finding media range highest precedence matches type 
example accept text text html text html level text html level cause values associated text html level text html text plain image jpeg text html level text html level note user agent provided default set quality values certain media ranges 
user agent closed system interact rendering agents default set ought configurable user 
internet draft november fielding page accept charset accept charset request header field indicate character sets acceptable response 
field allows clients capable understanding comprehensive special purpose character sets signal capability server capable representing documents character sets 
accept charset accept charset charset qvalue character set values described section 
charset may associated quality value represents user preference charset 
default value 
example accept charset iso unicode special value accept charset field matches character set including iso mentioned accept charset field 
accept charset field character sets explicitly mentioned get quality value iso gets quality value explicitly mentioned 
accept charset header default character set acceptable 
header server send response acceptable header server send error response acceptable status code sending unacceptable response allowed 
accept encoding accept encoding request header field similar accept restricts content codings section acceptable response 
accept encoding accept encoding codings qvalue codings content coding examples accept encoding compress gzip accept encoding accept encoding accept encoding compress gzip accept encoding gzip identity server tests content coding acceptable accept encoding field rules 
content coding content codings listed accept encoding field acceptable accompanied qvalue 
defined section qvalue means acceptable 
special symbol accept encoding field matches available content coding explicitly listed header field 

multiple content codings acceptable acceptable content coding highest non zero qvalue preferred 

identity content coding acceptable specifically refused accept encoding field includes identity field includes explicitly include identity content coding 
accept encoding field value empty identity encoding acceptable 
accept encoding field request server send response acceptable accept encoding header server send error response acceptable status code 
internet draft november fielding page accept encoding field request server may assume client accept content coding 
case identity available content codings server identity content coding additional information different content coding meaningful client 
note request include accept encoding field identity unavailable content codings commonly understood clients gzip compress preferred older clients improperly display messages sent 
server decision information particular user agent client 
note applications recognize obey associated content codings 
means permitted gzip compress 
accept language accept language request header field similar accept restricts set natural languages preferred response request 
language tags defined section 
accept language accept language language range qvalue language range alpha alpha language range may associated quality value represents estimate user preference languages specified range 
quality value defaults 
example accept language da en gb en mean prefer danish accept british english types english 
language range matches language tag exactly equals tag exactly equals prefix tag tag character prefix 
special range accept language field matches tag matched range accept language field 
note prefix matching rule imply language tags assigned languages way true user understands language certain tag user understand languages tags tag prefix 
prefix rule simply allows prefix tags case 
language quality factor assigned language tag accept language field quality value longest language range field matches language tag 
language range field matches tag language quality factor assigned 
accept language header request server assume languages equally acceptable 
accept language header languages assigned quality factor greater acceptable 
contrary privacy expectations user send accept language header complete linguistic preferences user request 
discussion issue see section 
note intelligibility highly dependent individual user recommended client applications choice linguistic preference available user 
choice available header field request 
note making choice linguistic preference available user remind implementors fact users familiar details language matching described provide appropriate guidance 
example users assume selecting en gb served kind english document british english available 
user agent suggest case add en get best matching behavior 
internet draft november fielding page accept ranges accept ranges response header field allows server indicate acceptance range requests resource accept ranges accept ranges acceptable ranges acceptable ranges range unit origin servers accept byte range requests may send accept ranges bytes required 
clients may generate byte range requests having received header resource involved 
range units defined section 
servers accept kind range request resource may send accept ranges advise client attempt range request 
age age response header field conveys sender estimate amount time response revalidation generated origin server 
cached response fresh age exceed freshness lifetime 
age values calculated specified section 
age age age value age value delta seconds age values non negative decimal integers representing time seconds 
cache receives value larger largest positive integer represent age calculations overflows transmit age header value 
server includes cache include age header field response generated cache 
caches arithmetic type bits range 
allow allow entity header field lists set methods supported resource identified request uri 
purpose field strictly inform recipient valid methods associated resource 
allow header field method allowed response 
allow allow method example allow get head put field prevent client trying methods 
indications allow header field value followed 
actual set allowed methods defined origin server time request 
allow header field may provided put request recommend methods supported new modified resource 
server required support methods include allow header response giving actual supported methods 
proxy modify allow header field understand methods specified user agent means communicating origin server 
authorization user agent wishes authenticate server usually necessarily receiving response including authorization request header field request 
authorization field value consists credentials containing authentication information user agent realm resource requested 
internet draft november fielding page authorization authorization credentials access authentication described authentication basic digest access authentication 
request authenticated realm specified credentials valid requests realm assuming authentication require credentials vary challenge value synchronized clocks 
shared cache see section receives request containing authorization field return corresponding response reply request specific exceptions holds 
response includes cache control directive cache may response replying subsequent request 
specified maximum age passed proxy cache revalidate origin server request headers new request allow origin server authenticate new request 
defined behavior 
response includes proxy revalidate re 

response includes revalidate cache control directive cache may response replying subsequent request 
response stale caches revalidate origin server request headers new request allow origin server authenticate new request 

response includes public cache control directive may returned reply subsequent request 
cache control cache control general header field specify directives obeyed caching mechanisms request response chain 
directives specify behavior intended prevent caches adversely interfering request response 
directives typically override default caching algorithms 
cache directives unidirectional presence directive request imply directive response 
note caches implement cache control implement pragma cache see section 
cache directives passed proxy gateway application regardless significance application directives applicable recipients request response chain 
possible specify cache directive specific cache 
cache control cache control cache directive cache directive cache request directive cache response directive cache request directive cache section store section max age delta seconds section max stale delta seconds section min fresh delta seconds section transform section cached section cache extension section cache response directive public section private field name section cache field name section store section transform section revalidate section proxy revalidate section internet draft november fielding page max age delta seconds section delta seconds section cache extension section cache extension token token quoted string directive appears field name parameter directive applies entire request response 
directive appears field name parameter applies named field fields rest request response 
mechanism supports extensibility implementations versions protocol apply directives header fields defined 
cache control directives broken general categories restrictions cacheable may imposed origin server 
restrictions may stored cache may imposed origin server user agent 
modifications basic expiration mechanism may imposed origin server user agent 
controls cache revalidation reload may imposed user agent 
control transformation entities 
extensions caching system 
cacheable default response cacheable requirements request method request header fields response status indicate cacheable 
section summarizes defaults 
response directives allow origin server override default response public indicates response may cache normally cacheable non shared cache 
see authorization section additional details 
private indicates part response message intended single user cached shared cache 
allows origin server state specified parts response intended user valid response requests users 
private non shared cache may cache response 
note usage word private controls response may cached ensure privacy message content 
cache cache directive specify field name cache response satisfy subsequent request successful revalidation origin server 
allows origin server prevent caching caches configured return stale responses client requests 
cache directive specify field names cache may response satisfy subsequent request subject restrictions caching 
specified field name sent response subsequent request successful revalidation origin server 
allows origin server prevent re certain header fields response allowing caching rest response 
note caches recognize obey directive 
internet draft november fielding page may stored caches store purpose store directive prevent inadvertent release retention sensitive information example backup tapes 
store directive applies entire message may sent response request 
sent request cache store part request response 
sent response cache store part response request elicited 
directive applies non shared shared caches 
store context means cache intentionally store information non volatile storage best effort attempt remove information volatile storage promptly possible forwarding 
directive associated response users explicitly store response outside caching system save dialog 
history buffers may store responses part normal operation 
purpose directive meet stated requirements certain users service authors concerned accidental releases information unanticipated accesses cache data structures 
directive improve privacy cases caution way reliable sufficient mechanism ensuring privacy 
particular malicious compromised caches recognize obey directive communications networks vulnerable eavesdropping 
modifications basic expiration mechanism expiration time entity may specified origin server expires header see section 
alternatively may specified max age directive response 
max age directive cached response response stale current age greater age value seconds time new request resource 
max age directive response implies response cacheable public restrictive cache directive 
response includes expires header max age directive max age directive overrides expires header expires header restrictive 
rule allows origin server provide response longer expiration time cache cache 
useful certain caches improperly calculate ages expiration times due desynchronized clocks 
cache implementations treat expires value equal response date value equivalent cache control response directive cache 
cache receives response response include cache control header field consider response non cacheable order retain compatibility servers 
note origin server wish relatively new cache control feature private directive network including older caches understand feature 
origin server need combine new feature expires field value equal date value 
prevent older caches improperly caching response 
response includes directive shared cache private cache maximum age specified directive overrides maximum age specified max age directive expires header 
directive implies semantics proxy revalidate directive see section shared cache entry stale respond subsequent request origin server 
directive ignored private cache 
note older caches compliant specification implement cache control directives 
origin server wishing cache control directive restricts prevent caching internet draft november fielding page compliant cache may exploit requirement max age directive overrides expires header fact pre compliant caches observe max age directive 
directives allow user agent modify basic expiration mechanism 
directives may specified request max age indicates client willing accept response age greater specified time seconds 
max stale directive included client willing accept stale response 
min fresh indicates client willing accept response freshness lifetime current age plus specified time seconds 
client wants response fresh specified number seconds 
max stale indicates client willing accept response exceeded expiration time 
max stale assigned value client willing accept response exceeded expiration time specified number seconds 
value assigned max stale client willing accept stale response age 
cache returns stale response max stale directive request cache configured override expiration time response cache attach warning header stale response warning response stale 
note cache may configured return stale responses validation conflict level requirements concerning cache validation revalidate cache control directive 
new request cached entry include max age directives lesser values determining freshness cached entry request 
cache revalidation reload controls user agent want need insist cache revalidate cache entry origin server just cache path origin server reload cache entry origin server 
revalidation necessary cache origin server overestimated expiration time cached response 
reload may necessary cache entry corrupted reason 
revalidation may requested client local cached copy case call unspecified revalidation client local cached copy case call specific revalidation 
client specify kinds action cache control request directives reload request includes cache cache control directive compatibility clients pragma cache 
field names included cache directive request 
server cached copy responding request 
specific revalidation request includes max age cache control directive forces cache path origin server revalidate entry cache server 
initial request includes cache validating conditional client current validator 
unspecified revalidation request includes max age cache control directive forces cache path origin server revalidate entry cache server 
initial request include internet draft november fielding page cache validating conditional cache path holds cache entry resource includes cache validating conditional current validator 
max age intermediate cache forced means max age directive revalidate cache entry client supplied validator request supplied validator differ validator currently stored cache entry 
case cache may validator making request affecting semantic transparency 
choice validator affect performance 
best approach intermediate cache validator making request 
server replies modified cache return validated copy client ok response 
server replies new entity cache validator intermediate cache compare returned validator provided client request strong comparison function 
client validator equal origin server intermediate cache simply returns modified 
returns new entity ok response 
request includes cache directive include min fresh max stale 
cached cases times extremely poor network connectivity client may want cache return responses currently stored reload revalidate origin server 
client may include cached directive request 
receives directive cache respond cached entry consistent constraints request respond gateway timeout status 
group caches operated unified system internal connectivity request may forwarded group caches 
revalidate cache may configured ignore server specified expiration time client request may include max stale directive similar effect protocol includes mechanism origin server require revalidation cache entry subsequent 
revalidate directive response received cache cache entry stale respond subsequent request origin server 
cache revalidation time solely origin server expires max age value cached response stale 
revalidate directive necessary support reliable operation certain protocol features 
circumstances cache obey revalidate directive particular cache reach origin server reason generate gateway timeout response 
servers send revalidate directive failure revalidate request entity result incorrect operation silently financial transaction 
recipients take automated action violates directive automatically provide copy entity revalidation fails 
recommended user agents operating severe connectivity constraints may violate directive explicitly warn user response provided 
warning provided access require explicit user confirmation 
proxy revalidate proxy revalidate directive meaning revalidate directive apply non shared user agent caches 
response authenticated request permit user cache store return response needing revalidate authenticated user requiring proxies service users revalidate time order sure user authenticated 
note authenticated responses need public cache control directive order allow cached 
internet draft november fielding page transform directive transform implementors intermediate caches proxies useful convert media type certain entity bodies 
non transparent proxy example convert image formats order save cache space reduce amount traffic slow link 
serious operational problems occur transformations applied entity bodies intended certain kinds applications 
example applications medical imaging scientific data analysis authentication depend receiving entity body bit bit identical original entity body 
message includes transform directive intermediate cache proxy change headers listed section subject transform directive 
implies cache proxy change aspect entity body specified headers including value entity body 
cache control extensions cache control header field extended cache extension tokens optional assigned value 
informational extensions require change cache behavior may added changing semantics directives 
behavioral extensions designed acting modifiers existing base cache directives 
new directive standard directive supplied applications understand new directive default behavior specified standard directive understand new directive recognize modifying requirements associated standard directive 
way extensions cache control directives requiring changes base protocol 
extension mechanism depends cache obeying cache control directives defined native version obeying certain extensions ignoring directives understand 
example consider hypothetical new response directive called community acts modifier private directive 
define new directive mean addition non shared cache cache shared members community named value may cache response 
origin server wishing allow uci community private response shared cache including cache control private community uci cache seeing header field act correctly cache understand community see understand private directive default safe behavior 
unrecognized cache directives ignored assumed cache directive unrecognized cache combined standard directives response default cache behavior remain minimally correct cache understand extension 
connection connection general header field allows sender specify options desired particular connection communicated proxies connections 
connection header grammar connection connection connection token connection token token proxies parse connection header field message forwarded connection token field remove header field message name 
connection options signaled presence connection token connection header field internet draft november fielding page corresponding additional header field additional header field may sent parameters associated connection option 
message headers listed connection header include headers 
defines close connection option sender signal connection closed completion response 
example connection close request response header fields indicates connection considered persistent section current request response complete 
applications support persistent connections include close connection option message 
system receiving lower version message includes connection header connection token field remove ignore header field message name connection token 
protects mistaken forwarding header fields pre proxies 
see section 
content encoding content encoding entity header field modifier media type 
value indicates additional content codings applied entity body decoding mechanisms applied order obtain media type referenced content type header field 
content encoding primarily allow document compressed losing identity underlying media type 
content encoding content encoding content coding content codings defined section 
example content encoding gzip content coding characteristic entity identified request uri 
typically entity body stored encoding decoded rendering analogous usage 
non transparent proxy may modify content coding new coding known acceptable recipient transform cache control directive message 
content coding entity identity response including content encoding entity header section lists non identity content coding 
content coding entity request message acceptable origin server server respond status code unsupported media type 
multiple encodings applied entity content codings listed order applied 
additional information encoding parameters may provided entity header fields defined specification 
content language content language entity header field describes natural language intended audience enclosed entity 
note equivalent languages entity body 
content language content language language tag language tags defined section 
primary purpose content language allow user identify differentiate entities user preferred language 
body content intended danish literate audience appropriate field content language da internet draft november fielding page content language specified default content intended language audiences 
mean sender consider specific natural language sender know language intended 
multiple languages may listed content intended multiple audiences 
example rendition treaty simultaneously original english versions call content language mi en just multiple languages entity mean intended multiple linguistic audiences 
example beginner language primer lesson latin clearly intended english literate audience 
case content language properly include en 
content language may applied media type limited textual documents 
content length content length entity header field indicates size entity body decimal number octets sent recipient case head method size entity body sent request get 
content length content length digit example content length applications field indicate transfer length message body prohibited rules section 
content length greater equal zero valid value 
section describes determine length message body content length 
note meaning field significantly different corresponding definition mime optional field message external body content type 
sent message length determined prior transferred prohibited rules section 
content location content location entity header field may supply resource location entity enclosed message entity accessible location separate requested resource uri 
server provide content location variant corresponding response entity especially case resource multiple entities associated entities separate locations individually accessed server provide content location particular variant returned 
content location content location value content location defines base uri entity 
content location value replacement original requested uri statement location resource corresponding particular entity time request 
requests may specify content location uri request uri desire identify source particular entity 
cache assume entity content location different uri retrieve respond requests content location uri 
content location differentiate multiple entities retrieved single requested resource described section 
content location relative uri relative uri interpreted relative request uri 
internet draft november fielding page meaning content location header put post requests undefined servers free ignore cases 
content md content md entity header field defined rfc md digest entity body purpose providing message integrity check mic entity body 
note mic detecting accidental modification entity body transit proof malicious attacks 
content md content md md digest md digest content md header field may generated origin server client function integrity check entity body 
origin servers clients may may generate content md header field proxies gateways generate defeat value integrity check 
recipient entity body including gateways proxies may check digest value header field matches entity body received 
md digest computed content entity body including content coding applied including transfer encoding applied message body 
message received transfer encoding encoding removed prior checking content md value received entity 
result digest computed octets entity body exactly order sent transfer encoding applied 
extends rfc permit digest computed mime composite media types multipart message rfc change digest computed defined preceding paragraph 
note consequences 
entity body composite types may contain body parts mime headers including content md content transfer encoding content encoding headers 
body part content transfer encoding header assumed content body part encoding applied body part included content md digest application 
transfer encoding header field allowed body parts 
conversion line breaks crlf done computing checking digest line break convention text transmitted left unaltered computing digest 
note definition content md exactly rfc mime entity bodies ways application content md entity bodies differs application mime entity bodies 
mime content transfer encoding transfer encoding content encoding 
frequently uses binary content types mime worth noting cases byte order compute digest transmission byte order defined type 
lastly allows transmission text types line break conventions just canonical form crlf 
content range content range entity header sent partial entity body specify full entity body partial body applied 
range units defined section 
content range content range content range spec content range spec byte content range spec byte content range spec bytes unit sp byte range resp spec instance length byte range resp spec byte pos byte pos internet draft november fielding page instance length digit indicate total length full entity body length unknown difficult determine 
asterisk character means instance length unknown time response generated 
byte ranges specifier values see section byte range resp spec specify range contain absolute byte positions byte range 
byte content range spec byte range resp spec byte pos value byte pos value instance length value equal pos value invalid 
recipient invalid byte content range spec ignore content transferred 
server sending response status code requested range satisfiable include field byte range resp spec 
instance length specifies current length selected resource 
response status code partial content include content range field range resp spec 
examples byte content range spec values assuming entity contains total bytes bytes bytes second bytes bytes bytes bytes bytes bytes message includes content single range example response request single range request set ranges overlap holes content transmitted content range header content length header showing number bytes transferred 
example partial content date wed nov gmt wed nov gmt content range bytes content length content type image gif message includes content multiple ranges example response request multiple non overlapping ranges transmitted multipart message 
multipart media type purpose multipart defined appendix 
see appendix error 
source 
compatibility issue 
response request single range sent multipart media type 
response request multiple ranges result single range may sent multipart media type part 
client decode multipart message ask multiple byte ranges single request 
client requests multiple byte ranges request server return order appeared request 
server ignores byte range spec syntactically invalid server treat request invalid range header field exist 
normally means return response containing full entity 
server receives request including range request header field unsatisfiable range request header field byte range spec values byte pos value internet draft november fielding page greater current length selected resource return response code requested range satisfiable section 
note clients depend servers send requested range satisfiable response ok response unsatisfiable range request header servers implement 
content type content type entity header field indicates media type entity body sent recipient case head method media type sent request get 
content type content type media type media types defined section 
example field content type text html charset iso discussion methods identifying media type entity provided section 
date date general header field represents date time message originated having semantics orig date rfc 
field value date described section sent rfc date format 
date date date example date tue nov gmt origin servers include date header field responses cases 
response status code continue switching protocols response may include date header field server option 

response status code conveys server error internal server error service unavailable inconvenient impossible generate valid date 

server clock provide reasonable approximation current time responses include date header field 
case rules section followed 
received message date header field assigned recipient message cached recipient protocol requires date 
implementation clock cache responses 
cache especially shared cache mechanism ntp synchronize clock reliable external standard 
clients send date header field messages include entity body case put post requests optional 
client clock send date header field request 
date sent date header represent date time subsequent generation message 
represent best available approximation date time message generation implementation means generating reasonably accurate date time 
theory date ought represent moment just entity generated 
practice date generated time message origination affecting semantic value 
internet draft november fielding page origin server operation origin server implementations clock available 
origin server clock assign expires modified values response values associated resource system user reliable clock 
may assign expires value known server configuration time past allows pre expiration responses storing separate expires values resource 
etag etag response header field provides current value entity tag requested variant 
headers entity tags described sections 
entity tag may comparison entities resource see section 
etag etag entity tag examples etag etag etag expect expect request header field indicate particular server behaviors required client 
expect expect expectation expectation continue expectation extension expectation extension token token quoted string expect params expect params token token quoted string server understand unable comply expectation values expect field request respond appropriate error status 
server respond expectation failed status expectations met problems request xx status 
header field defined extensible syntax allow extensions 
server receives request containing expect field includes expectation extension support respond expectation failed status 
comparison expectation values case insensitive tokens including continue token case sensitive quoted string expectation extensions 
expect mechanism hop hop proxy return expectation failed status receives request expectation meet 
expect request header toend forwarded request forwarded 
older applications understand expect header 
see section continue status 
expect continue continue expectation request includes body requesting client wait sending request headers sending content body 
case server conform requirements section send continue status error status receiving expect continue request header 
proxy receives request continue expectation proxy knows hop server complies higher know version hop server forward request including expect header field 
proxy knows version hop server internet draft november fielding page lower forward request respond expectation failed status 
proxies maintain cache recording version numbers received referenced hop servers 
note presence older implementations implement expect protocol allows ambiguous situations client may send expect continue receiving expectation failed status continue status 
client sends header field origin server possibly proxy seen continue status client need wait indefinite lengthy period sending request body 
expires expires entity header field gives date time response considered stale 
stale cache entry may normally returned cache proxy cache user agent cache validated origin server intermediate cache fresh copy entity 
see section discussion expiration model 
presence expires field imply original resource change cease exist time 
format absolute date time defined date section rfc date format expires expires date example expires thu dec gmt note response includes cache control field max age directive see section directive overrides expires field 
clients caches treat invalid date formats especially including value past expired 
mark response expired origin server sends expires date equal date header value 
see rules expiration calculations section mark response expires origin server sends expires date approximately year time response sent 
servers send expires dates year 
presence expires header field date value time response default non cacheable indicates response cacheable indicated header field section 
request header field contain internet mail address human user controls requesting user agent 
address machine usable defined mailbox rfc updated rfc mailbox example webmaster org header field may logging purposes means identifying source invalid unwanted requests 
insecure form access protection 
interpretation field request performed behalf person accepts responsibility method performed 
particular robot agents include header person responsible running robot contacted problems occur receiving 
internet mail address field may separate internet host issued request 
example request passed proxy original issuer address 
internet draft november fielding page note client send header field user approval conflict user privacy interests site security policy 
strongly recommended user able disable enable modify value field time prior request 
host host request header field specifies internet host port number resource requested obtained original uri user referring resource generally url described section 
host field value represent naming authority origin server gateway original url 
allows origin server gateway differentiate internally ambiguous urls root url server multiple host names single ip address 
host host host port section host trailing port information implies default port service requested url 
example request origin server properly include get pub www host www org client include host header field request messages requested uri include internet host name service requested host header field empty value 
proxy ensure request message forwards contain appropriate host header field identifies service requested proxy 
internet message corresponding request url includes internet host address service requested 
host field proxy add host field request message prior forwarding internet 
internet servers respond bad request status code request message lacks host header field 
see sections requirements relating host 
match match request header field method conditional 
client entities previously obtained resource verify entities current including list associated entity tags match header field 
entity tags defined section 
purpose feature allow efficient updates cached information minimum amount transaction overhead 
updating requests prevent inadvertent modification wrong version resource 
special case value matches current entity resource 
match match entity tag entity tags match entity tag entity returned response similar get request match header resource current entity exists resource server may perform requested method match header field exist 
server strong comparison function see section compare entity tags match 
entity tags match current entity exists server perform requested method return precondition failed response 
behavior useful client wants prevent updating method put modifying resource changed client retrieved 
request match header field result xx status match header ignored 
meaning match method performed representation selected origin server cache possibly vary mechanism see section exists performed representation exist 
internet draft november fielding page request intended update resource put may include match header field signal request method applied entity corresponding match value single entity tag longer representation resource 
allows user indicate wish request successful resource changed knowledge 
examples match match xxxx match result request having match header field match header fields undefined specification 
modified modified request header field method conditional requested variant modified time specified field entity returned server modified response returned message body 
modified modified date example field modified sat oct gmt get method modified header range header requests identified entity transferred modified date modified header 
algorithm determining includes cases request normally result ok status passed date invalid response exactly normal get 
date server current time invalid 
variant modified modified date response exactly normal get 
variant modified valid modified date server return modified response 
purpose feature allow efficient updates cached information minimum amount transaction overhead 
note range request header field modifies meaning modified see section full details 
note modified times interpreted server clock synchronized client 
note handling modified header field servers exact date comparison function function deciding send modified response 
get best results sending modified header field cache validation clients advised exact date string received previous modified header field possible 
note client uses arbitrary date modified header date taken modified header request client aware fact date interpreted server understanding time 
client consider unsynchronized clocks rounding problems due different encodings time client server 
includes possibility race conditions document changed time requested modified date subsequent request possibility clock skew related problems modified date derived client clock correction server clock 
internet draft november fielding page corrections different time bases client server best approximate due network latency 
result request having modified header field match header fields undefined specification 
match match request header field method conditional 
client entities previously obtained resource verify entities current including list associated entity tags match header field 
purpose feature allow efficient updates cached information minimum amount transaction overhead 
prevent method put inadvertently modifying existing resource client believes resource exist 
special case value matches current entity resource 
match match entity tag entity tags match entity tag entity returned response similar get request match header resource current entity exists resource server perform requested method required resource modification date fails match supplied modified header field request 
request method get head server respond modified response including cache related header fields particularly etag entities matched 
request methods server respond status precondition failed 
see section rules determine tags match 
weak comparison function get head requests 
entity tags match server may perform requested method match header field exist ignore modified header field request 
entity tags match server return modified response 
current entity exists server may perform requested method header field exist 
request match header field result xx status match header ignored 
see section discussion server behavior modified match appear request 
meaning match method performed representation selected origin server cache possibly vary mechanism see section exists performed representation exist 
feature intended useful preventing races put operations 
examples match match match xxxx match xxxx match result request having match header field match header fields undefined specification 
range client partial copy entity cache wishes date copy entire entity cache range request header conditional get unmodified internet draft november fielding page match 
condition fails entity modified client second request obtain entire current entity body 
range header allows client short circuit second request 
informally meaning entity unchanged send part am missing send entire new entity 
range range entity tag date client entity tag entity modified date may date aan header 
server distinguish valid date form entity tag examining characters 
range header range header ignored request include range header server support sub range operation 
entity tag range header matches current entity tag entity server provide specified sub range entity partial content response 
entity tag match server return entire entity ok response 
unmodified unmodified request header field method conditional 
requested resource modified time specified field server perform requested operation unmodified header 
requested variant modified specified time server perform requested operation return precondition failed 
unmodified unmodified date example field unmodified sat oct gmt request normally unmodified header result xx status unmodified header ignored 
specified date invalid header ignored 
result request having unmodified header field match modified header fields undefined specification 
modified modified entity header field indicates date time origin server believes variant modified 
modified modified date example modified tue nov gmt exact meaning header field depends implementation origin server nature original resource 
files may just file system modified time 
entities dynamically included parts may set modify times component parts 
database gateways may update time stamp record 
virtual objects may time internal state changed 
origin server send modified date server time message origination 
cases resource modification indicate time server replace date message origination date 
origin server obtain modified value entity close possible time generates date value response 
allows recipient accurate assessment entity modification time especially entity changes near time response generated 
servers send modified feasible 
internet draft november fielding page location location response header field redirect recipient location request uri completion request identification new resource 
created responses location new resource created request 
xx responses location indicate server preferred uri automatic redirection resource 
field value consists single absolute uri 
location location example location www org pub www people html note content location header field section differs location content location identifies original location entity enclosed request 
possible response contain header fields location content location 
see section cache requirements methods 
max forwards max forwards request header field provides trace section options section methods limit number proxies gateways forward request inbound server 
useful client attempting trace request chain appears failing looping mid chain 
max forwards max forwards digit max forwards value decimal integer indicating remaining number times request message may forwarded 
proxy gateway recipient trace options request containing max forwards header field check update value prior forwarding request 
received value zero recipient forward request respond final recipient 
received max forwards value greater zero forwarded message contain updated max forwards field value decremented 
max forwards header field may ignored methods defined specification extension methods explicitly referred part method definition 
pragma pragma general header field include implementation specific directives apply recipient request response chain 
pragma directives specify optional behavior viewpoint protocol systems may require behavior consistent directives 
pragma pragma pragma directive pragma directive cache extension pragma extension pragma token token quoted string cache directive request message application forward request origin server cached copy requested 
pragma directive semantics cache cache directive see section defined compatibility 
clients include header fields cache request sent server known compliant 
pragma directives passed proxy gateway application regardless significance application directives applicable recipients request response chain 
possible specify pragma specific recipient pragma directive relevant recipient ignored recipient 
caches treat pragma cache client sent cache control 
new pragma directives defined 
internet draft november fielding page proxy authenticate proxy authenticate response header field included part proxy authentication required response 
field value consists challenge indicates authentication scheme parameters applicable proxy request uri 
proxy authenticate proxy authenticate challenge access authentication process described authentication basic digest access authentication 
www authenticate proxy authenticate header field applies current connection passed downstream clients 
intermediate proxy need obtain credentials requesting downstream client circumstances appear proxy forwarding proxy authenticate header field 
proxy authorization proxy authorization request header field allows client identify user proxy requires authentication 
proxy authorization field value consists credentials containing authentication information user agent proxy realm resource requested 
proxy authorization proxy authorization credentials access authentication process described authentication basic digest access authentication authorization proxy authorization header field applies outbound proxy demanded authentication proxy authenticate field 
multiple proxies chain proxy authorization header field consumed outbound proxy expecting receive credentials 
proxy may relay credentials client request proxy mechanism proxies cooperatively authenticate request 
range byte ranges entities represented messages sequences bytes concept byte range meaningful entity 
clients servers need support byte range operations 
byte range specifications apply sequence bytes entity body necessarily message body 
byte range operation may specify single range bytes set ranges single entity 
ranges specifier byte ranges specifier byte ranges specifier bytes unit byte range set byte range set byte range spec suffix byte range spec byte range spec byte pos byte pos byte pos digit byte pos digit byte pos value byte range spec gives byte offset byte range 
byte pos value gives byte offset byte range byte positions specified inclusive 
byte offsets start zero 
byte pos value greater equal byte pos byte range spec byte range spec syntactically invalid 
recipient byte range set includes syntactically invalid byte range spec values ignore header field includes byte range set 
byte pos value absent value greater equal current length entity body byte pos taken equal current length entity body bytes 
choice byte pos client limit number bytes retrieved knowing size entity 
suffix byte range spec suffix length internet draft november fielding page suffix length digit suffix byte range spec specify suffix entity body length suffix length value 
form specifies bytes entity body 
entity shorter specified suffix length entire entity body 
syntactically valid byte range set includes byte range spec byte pos current length entity body suffix byte range spec non zero suffix length set satisfiable 
byte range set unsatisfiable 
byte range set unsatisfiable server return response status requested range satisfiable 
server return response status partial content containing satisfiable ranges entity body 
examples byte ranges specifier values assuming entity body length bytes byte offsets inclusive bytes second bytes byte offsets inclusive bytes final bytes byte offsets inclusive bytes bytes bytes bytes bytes legal canonical specifications second bytes byte offsets inclusive bytes bytes range retrieval requests retrieval requests conditional unconditional get methods may request sub ranges entity entire entity range request header applies entity returned result request range range ranges specifier server may ignore range header 
origin servers intermediate caches ought support byte ranges possible range supports efficient recovery partially failed transfers supports efficient partial retrieval large entities 
server supports range header specified range ranges appropriate entity presence range header unconditional get modifies returned get successful 
words response carries status code partial content ok 
presence range header conditional get request match unmodified match modifies returned get successful condition true 
affect modified response returned conditional false 
cases appropriate range header see section addition range header 
proxy supports ranges receives range request forwards request inbound server receives entire entity reply return requested range client 
store entire received response cache consistent cache allocation policies 
internet draft november fielding page referer referer sic request header field allows client specify server benefit address uri resource request uri obtained referrer header field misspelled 
referer request header allows server generate lists back links resources interest logging optimized caching allows obsolete links traced maintenance 
referer field sent request uri obtained source uri input user keyboard 
referer referer example referer www org hypertext overview html field value partial relative uri interpreted relative request uri 
uri include fragment 
see section security considerations 
retry retry response header field service unavailable response indicate long service expected unavailable requesting client 
field may xx redirection response indicate minimum time user agent asked wait issuing redirected request 
value field date integer number seconds decimal time response 
retry retry date delta seconds examples retry fri dec gmt retry example delay minutes 
server server response header field contains information software origin server handle request 
field contain multiple product tokens section comments identifying server significant 
product tokens listed order significance identifying application 
server server product comment example server cern response forwarded proxy proxy application modify server response header 
include field described section 
note revealing specific software version server allow server machine vulnerable attacks software known contain security holes 
server implementors encouraged field configurable option 
te te request header field indicates extension transfer codings willing accept response willing accept trailer fields chunked transfer coding 
value may consist keyword trailers comma separated list extension transfer coding names optional accept parameters described section 
similar accept encoding indicates transfer codings section preferred response 
client guaranteed server recognises information te request header field 
te te codings internet draft november fielding page codings transfer extension accept params presence keyword trailers indicates client willing accept trailer fields chunked transfer coding defined section 
keyword reserved transfer coding values represent transfer coding 
examples te deflate te te deflate te header field applies immediate connection 
keyword supplied connection header field section te message 
server tests transfer coding acceptable te field rules 
chunked transfer coding acceptable 
keyword trailers listed client indicates willing accept trailer fields chunked response behalf downstream clients 
implication client stating downstream clients willing accept trailer fields forwarded response attempt buffer response behalf downstream recipients 
note define means limit size chunked response client assured buffering entire response 

transfer coding tested transfer codings listed te field acceptable accompanied qvalue 
defined section qvalue means acceptable 
transfer coding transfer codings listed te field acceptable accompanied qvalue 
defined section qvalue means acceptable 
multiple transfer codings acceptable acceptable transfer coding highest non zero qvalue preferred 
chunked transfer coding qvalue 
identity transfer coding acceptable specifically refused te field includes identity 
chunked transfer coding acceptable 
trailer header field section indicate set header fields included trailer 
te field value empty te field transfer coding chunked 
message transfer coding acceptable 
identity chunked transfer codings acceptable 
te field request server send response acceptable te header field server send error response acceptable status code 
te field sender may assume recipient accept identity chunked transfer codings 
server chunked transfer coding response trailer header fields content md authentication info chunked transfer coding request accepted transfer coding te field 
note backwards compatibility considerations rfc parameter accept params chunked transfer coding 
internet draft november fielding page trailer trailer general field value indicates set header fields trailer message encoded chunked transfer coding 
trailer trailer field name sender message include trailer header field message chunked non empty trailer 
doing allows recipient know header fields expect trailer 
trailer header field trailer include header fields 
authentication info 
see section restrictions trailer fields chunked transfer coding 
server include header fields chunked transfer coding request accepted transfer coding te field 
message header fields listed trailer header field include header fields transfer encoding content length trailer transfer encoding transfer encoding general header field indicates type transformation applied message body order safely transfer sender recipient 
differs transfer coding property message entity 
transfer encoding transfer encoding transfer coding transfer codings defined section 
example transfer encoding chunked multiple encodings applied entity transfer codings listed order applied 
additional information encoding parameters may provided entity header fields defined specification 
older applications understand transfer encoding header 
upgrade upgrade general header allows client specify additional communication protocols supports server finds appropriate switch protocols 
server upgrade header field switching protocols response indicate protocol switched 
upgrade upgrade product example upgrade irc rta upgrade header field intended provide simple mechanism transition incompatible protocol 
allowing client advertise desire protocol version higher major version number current request 
eases difficult transition incompatible protocols allowing client initiate request commonly supported protocol indicating server better protocol available better determined server possibly nature method resource requested 
upgrade header field applies switching application layer protocols existing transport layer connection 
upgrade insist protocol change acceptance server optional 
capabilities nature application layer communication protocol change entirely dependent internet draft november fielding page new protocol chosen action changing protocol response initial request containing upgrade header field 
upgrade header field applies immediate connection 
upgrade keyword supplied connection header field section upgrade message 
upgrade header field indicate switch protocol different connection 
purpose appropriate redirection response 
specification defines protocol name family hypertext transfer protocols defined version rules section updates specification 
token protocol name useful client server associate name protocol 
user agent user agent request header field contains information user agent originating request 
statistical purposes tracing protocol violations automated recognition user agents sake tailoring responses avoid particular user agent limitations 
user agents include field requests 
field contain multiple product tokens section comments identifying agent form significant part user agent 
convention product tokens listed order significance identifying application 
user agent user agent product comment example user agent cern vary vary field value indicates set request header fields fully determines response fresh cache permitted response reply subsequent request revalidation 
uncacheable stale responses vary field value advises user agent criteria select representation 
vary field value implies cache determine request headers subsequent request response appropriate representation 
see section vary header field caches 
vary vary field name server include vary header field cacheable response subject negotiation 
doing allows cache properly interpret requests resource informs user agent presence negotiation resource 
server may include vary header field non cacheable response subject server driven negotiation provide user agent useful information dimensions response varies time response 
vary field value consisting list field names signals representation selected response selection algorithm considers listed request header field values selecting appropriate representation 
cache may assume selection requests values listed field names duration time response fresh 
field names limited set standard request header fields defined specification 
field names case insensitive 
vary field value signals unspecified parameters limited request headers network address client play role selection response representation 
value generated proxy server may generated origin server 
internet draft november fielding page general header field gateways proxies indicate intermediate protocols recipients user agent server requests origin server client responses 
analogous received field rfc intended tracking message forwards avoiding request loops identifying protocol capabilities senders request response chain 
received protocol received comment received protocol protocol name protocol version protocol name token protocol version token received host port pseudonym pseudonym token received protocol indicates protocol version message received server client segment request response chain 
received protocol version appended field value message forwarded information protocol capabilities upstream applications remains visible recipients 
protocol name optional 
received field normally host optional port number recipient server client subsequently forwarded message 
real host considered sensitive information may replaced pseudonym 
port may assumed default port received protocol 
multiple field values represents proxy gateway forwarded message 
recipient append information result ordered sequence forwarding applications 
comments may header field identify software recipient proxy gateway analogous user agent server header fields 
comments field optional may removed recipient prior forwarding message 
example request message sent user agent internal proxy code named fred uses forward request public proxy com completes request forwarding origin server www ics uci edu 
request received www ics uci edu header field fred com apache proxies gateways portal network firewall default forward names ports hosts firewall region 
information propagated explicitly enabled 
enabled received host host firewall replaced appropriate pseudonym host 
organizations strong privacy requirements hiding internal structures proxy may combine ordered subsequence header field entries identical received protocol values single entry 
example fred lucy collapsed lucy applications combine multiple entries organizational control hosts replaced pseudonyms 
applications combine entries different received protocol values 
warning warning general header field carry additional information status transformation message reflected message 
information typically warn possible lack semantic transparency caching operations transformations applied entity body message 
internet draft november fielding page warning headers sent responses warning warning warning value warning value warn code sp warn agent sp warn text sp warn date warn code digit warn agent host port pseudonym name pseudonym server adding warning header debugging warn text quoted string warn date date response may carry warning header 
warn text natural language character set intelligible human user receiving response 
decision may available knowledge location cache user accept language field request content language field response default language english default character set iso 
character set iso encoded warn text method described rfc 
warning headers general applied message specific warn codes specific caches applied response messages 
new warning headers added existing warning headers 
cache delete warning header received message 
cache successfully validates cache entry remove warning headers previously attached entry specified specific warning codes 
add warning headers received validating response 
words warning headers attached relevant response 
multiple warning headers attached response user agent ought inform user possible order appear response 
possible inform user warnings user agent follow heuristics warnings appear early response take priority appearing response 
warnings user preferred character set take priority warnings character sets identical warn codes warn agents 
systems generate multiple warning headers order user agent behavior mind 
requirements behavior caches respect warnings stated section 
warn code consists digits 
digit indicates warning deleted stored cache entry successful revalidation xx warnings describe freshness revalidation status response deleted successful revalidation 
xx warn codes may generated cache validating cached entry 
generated clients 
xx warnings describe aspect entity body entity headers rectified revalidation deleted successful revalidation 
list currently defined warn codes recommended warn text english description meaning 
response stale included returned response stale 
revalidation failed included cache returns stale response attempt revalidate response failed due inability reach server 
internet draft november fielding page disconnected operation included cache intentionally disconnected rest network period time 
heuristic expiration included cache heuristically chose freshness lifetime greater hours response age greater hours 
miscellaneous warning warning text may include arbitrary information human user logged 
system receiving warning take automated action presenting warning user 
transformation applied added intermediate cache proxy applies transformation changing content coding specified content encoding header media type specified content type header response entity body response warning code appears response 
miscellaneous persistent warning warning text may include arbitrary information human user logged 
system receiving warning take automated action 
implementation sends message warning headers version lower sender include warning value warn date matches date response 
implementation receives message warning value includes warn date different date value response warning value deleted message storing forwarding 
prevents bad consequences naive caching warning header fields 
warning values deleted reason warning header deleted 
www authenticate www authenticate response header field included unauthorized response messages 
field value consists challenge indicates authentication scheme parameters applicable request uri 
www authenticate www authenticate challenge access authentication process described authentication basic digest access authentication 
user agents advised take special care parsing www authenticate field value contain challenge www authenticate header field provided contents challenge contain comma separated list authentication parameters 
security considerations section meant inform application developers information providers users security limitations described document 
discussion include definitive solutions problems revealed suggestions reducing security risks 
personal information clients large amounts personal information user name location mail address passwords encryption keys careful prevent unintentional leakage information protocol sources 
strongly recommend convenient interface provided user control dissemination information designers implementors particularly careful area 
history shows errors area create serious security privacy problems generate highly adverse publicity implementor 
internet draft november fielding page abuse server log information server position save personal data user requests identify reading patterns subjects interest 
information clearly confidential nature handling constrained law certain countries 
people protocol provide data responsible ensuring material distributed permission individuals identifiable published results 
transfer sensitive information generic data transfer protocol regulate content data transferred priori method determining sensitivity particular piece information context request 
applications supply control information possible provider information 
header fields worth special mention context server referer 
revealing specific software version server allow server machine vulnerable attacks software known contain security holes 
implementors server header field configurable option 
proxies serve portal network firewall take special precautions regarding transfer header information identifies hosts firewall 
particular remove replace sanitized versions fields generated firewall 
referer header allows reading patterns studied reverse links drawn 
useful power abused user details separated information contained referer 
personal information removed referer header indicate private document uri publication inappropriate 
information sent field conflict user privacy interests site security policy transmitted user able disable enable modify contents field 
user able set contents field user preference application defaults configuration 
suggest require convenient toggle interface provided user enable disable sending referer information 
user agent section server section header fields determine specific client server particular security hole exploited 
unfortunately information valuable purposes currently better mechanism 
encoding sensitive information uri source link private information reveal private information source strongly recommended user able select referer field sent 
example browser client toggle switch browsing openly anonymously respectively enable disable sending referer information 
clients include referer header field non secure request referring page transferred secure protocol 
authors services protocol get forms submission sensitive data cause data encoded request uri 
existing servers proxies user agents log request uri place visible third parties 
servers post form submission internet draft november fielding page privacy issues connected accept headers accept request headers reveal information user servers accessed 
header particular reveal information user consider private nature understanding particular languages strongly correlated membership particular ethnic group 
user agents offer option configure contents accept language header sent request strongly encouraged configuration process include message user aware loss privacy involved 
approach limits loss privacy user agent omit sending accept language headers default ask user start sending accept language headers server detects looking vary response header fields generated server sending improve quality service 
elaborate user customized accept header fields sent request particular include quality values servers relatively reliable long lived user identifiers 
user identifiers allow content providers click trail tracking allow collaborating content providers match cross server click trails form submissions individual users 
note users proxy network address host running user agent serve long lived user identifier 
environments proxies enhance privacy user agents ought conservative offering accept header configuration options users 
extreme privacy measure proxies filter accept headers relayed requests 
general purpose user agents provide high degree header configurability warn users loss privacy involved 
attacks file path names implementations origin servers careful restrict documents returned requests intended server administrators 
server translates uris directly file system calls server take special care serve files intended delivered clients 
example unix microsoft windows operating systems path component indicate directory level current 
system server disallow construct request uri allow access resource outside intended accessible server 
similarly files intended internally server access control files configuration files script code protected inappropriate retrieval contain sensitive information 
experience shown minor bugs server implementations turned security risks 
dns spoofing clients rely heavily domain name service generally prone security attacks deliberate mis association ip addresses dns names 
clients need cautious assuming continuing validity ip number dns name association 
particular clients rely name resolver confirmation ip number dns name association caching result previous host name lookups 
platforms cache host name lookups locally appropriate configured 
proper lookups cached ttl time live information reported name server cached information remain useful 
clients cache results host name lookups order achieve performance improvement observe ttl information reported dns 
clients observe rule spoofed previously accessed server ip address changes 
network renumbering expected increasingly common possibility form attack grow 
observing requirement reduces potential security vulnerability 
internet draft november fielding page requirement improves load balancing behavior clients replicated servers dns name reduces likelihood user experiencing failure accessing sites strategy 
location headers spoofing single server supports multiple organizations trust check values location content location headers responses generated control said organizations sure attempt invalidate resources authority 
content disposition issues rfc implemented content disposition see section header derived number serious security considerations 
content disposition part standard widely implemented documenting risks implementors 
see rfc updates rfc details 
authentication credentials idle clients existing clients user agents typically retain authentication information indefinitely 

provide method server direct clients discard cached credentials 
significant defect requires extensions 
circumstances credential caching interfere application security model include limited clients idle extended period server wish cause client user credentials 
applications include session termination indication logout commit button page server side application knows reason client retain credentials 
currently separate study 
number arounds parts problem encourage password protection screen savers idle time outs methods mitigate security problems inherent problem 
particular user agents cache credentials encouraged provide readily accessible mechanism discarding cached credentials user control 
proxies caching nature proxies men middle represent opportunity man middle attacks 
compromise systems proxies run result serious security privacy problems 
proxies access security related information personal information individual users organizations proprietary information belonging users content providers 
compromised proxy proxy implemented configured regard security privacy considerations commission wide range potential attacks 
proxy operators protect systems proxies run protect system contains transports sensitive information 
particular log information gathered proxies contains highly sensitive personal information information organizations 
log information carefully guarded appropriate guidelines developed followed 
section 
caching proxies provide additional potential vulnerabilities contents cache represent attractive target malicious exploitation 
cache contents persist request complete attack cache reveal information long user believes information removed network 
cache contents protected sensitive information 
proxy implementors consider privacy security implications design coding decisions configuration options provide proxy operators especially default configuration 
internet draft november fielding page users proxy need aware people run proxy solve problem 
judicious cryptography appropriate may suffice protect broad range security privacy attacks 
cryptography scope specification 
denial service attacks proxies exist 
hard defend 
research continues 
beware 
acknowledgments specification heavy augmented bnf generic constructs defined david crocker rfc 
similarly reuses definitions provided nathaniel borenstein ned freed mime 
hope inclusion specification help reduce past confusion relationship internet mail message formats 
protocol evolved considerably past years 
benefited large active developer community people participated www talk mailing list community responsible success world wide web general 
marc robert cailliau daniel connolly bob denny john franks jean francois groff phillip hallam baker lie ari luotonen rob mccool lou dave tony sanders marc deserve special recognition efforts defining early aspects protocol 
document benefited greatly comments participating wg 
addition mentioned individuals contributed specification gary adams albert harald john keith ball jean philippe martin brian larry masinter paul mitra maurizio david morris mike gavin nicol roman bill perry michael dolan jeffrey perry david scott powers alan freier owen rees marc luigi rizzo greg herlihy david robinson koen marc salomon alex rich bob jernigan allan schiffman jim rohit khare chuck john eric sink martijn koster simon alexei richard taylor david kristol robert daniel bill ben laurie francois paul leach mary ellen daniel dubois josh cohen ross patterson content presentation caching design due suggestions comments individuals including paul leach koen david morris larry masinter 
specification ranges originally done ari luotonen john franks additional input steve zilles 
internet draft november fielding page cave men palo alto 
know 
jim gettys current editor document wishes particularly roy fielding previous editor document john jeff mogul paul leach dave kristol koen john franks josh cohen alex scott lawrence larry masinter help 
go particularly jeff mogul scott lawrence performing may audit 
apache group baird smith author jigsaw henrik frystyk implemented rfc early wish discovery problems document attempts rectify 
tags identification languages rfc march 
lindner johnson 
internet gopher protocol distributed document search retrieval protocol rfc university minnesota march 
berners lee universal resource identifiers www rfc cern june 
berners lee masinter 
uniform resource locators url rfc cern xerox parc university minnesota december 
berners lee connolly 
hypertext markup language rfc mit lcs november 
berners lee fielding frystyk 
hypertext transfer protocol rfc mit lcs uc irvine may 
freed borenstein 
multipurpose internet mail extensions mime part format internet message bodies 
rfc virtual november 
braden requirements internet hosts communication layers std rfc ietf october 
crocker standard format arpa internet text messages std rfc udel august 
davis kahle morris salem shen wang sui wais interface protocol prototype functional specification 
thinking machines april 
fielding relative uniform resource locators rfc uc irvine june 
horton adams 
standard interchange usenet messages rfc rfc bell laboratories center seismic studies december 
kantor lapsley 
network news transfer protocol rfc uc san diego uc berkeley february 
moore mime multipurpose internet mail extensions part message header extensions text rfc university tennessee november 
nebel masinter 
form file upload html rfc xerox november 
postel simple mail transfer protocol std rfc usc isi august 
internet draft november fielding page postel media type registration procedure rfc usc isi november 
postel reynolds 
file transfer protocol std rfc usc isi october 
reynolds postel 
assigned numbers std rfc usc isi october 
sollins masinter 
functional requirements uniform resource names rfc mit lcs xerox december 
ascii 
coded character set bit american standard code information interchange 
standard ansi ansi 
iso 
international standard information processing bit single byte coded graphic character sets part latin alphabet iso 
part latin alphabet iso 
part latin alphabet iso 
part latin alphabet iso 
part latin alphabet iso 
part latin arabic alphabet iso 
part latin greek alphabet iso 
part latin hebrew alphabet iso 
part latin alphabet iso 
meyers rose 
content md header field rfc carnegie mellon dover beach consulting october 
carpenter rekhter 
renumbering needs rfc iab february 
deutsch gzip file format specification version 
rfc aladdin enterprises may 
venkata padmanabhan jeffrey mogul 
improving latency computer networks isdn systems pp 
dec 
slightly revised version proc 
nd international www conference mosaic web oct available www ncsa uiuc edu sdg proceedings mogul html 
joe touch john heidemann katia obraczka 
analysis performance www isi edu touch pubs perf www isi edu publications perf index html isi research report isi rr original report dated aug usc information sciences institute june august 
mills network time protocol version specification implementation analysis 
rfc university delaware march 
deutsch deflate compressed data format specification version rfc aladdin enterprises may 
analysis performance problems sunsite unc edu release prob html 
deutsch 

zlib compressed data format specification version rfc aladdin enterprises info zip may 
franks hallam baker leach luotonen sink stewart 
extension digest access authentication rfc january 
internet draft november fielding page fielding gettys mogul frystyk berners lee hypertext transfer protocol rfc uc irvine digital equipment january 
key words rfcs indicate requirement levels rfc harvard university march 
communicating presentation information internet messages header rfc new century systems qualcomm june 
mogul fielding gettys frystyk interpretation version numbers rfc digital equipment irvine may jg common internet message headers rfc stockholm university kth february jg 
utf transformation format unicode iso rfc rfc technologies january 
jg nielsen gettys baird smith prud hommeaux lie lilley 
network performance effects css png proceedings acm sigcomm cannes france september jg freed borenstein 
multipurpose internet mail extensions mime part media types 
rfc virtual november 
jg ietf policy character sets languages rfc bcp january 
jg berners lee fielding masinter uniform resource identifiers uri generic syntax semantics jg franks hallam baker lawrence leach luotonen sink stewart authentication basic digest access authentication progress september jg luotonen tunneling tcp protocols web proxy servers progress february jg mime mail encapsulation aggregate documents html rfc march internet standards process revision bcp rfc harvard university october 
masinter hyper text coffee pot control protocol rfc april 
freed borenstein multipurpose internet mail extensions mime part conformance criteria examples rfc november 
moore communicating presentation information internet messages content disposition header field rfc august 
authors addresses roy fielding department information computer science university california internet draft november fielding page irvine ca usa fax email fielding ics uci edu james gettys world wide web consortium mit laboratory computer science technology square cambridge ma usa fax email jg org jeffrey mogul western research laboratory compaq computer university avenue palo alto california usa email mogul wrl dec com henrik frystyk nielsen world wide web consortium mit laboratory computer science technology square cambridge ma usa fax email frystyk org larry masinter xerox parc coyote hill road palo alto ca usa fax email masinter parc xerox com paul leach microsoft microsoft way redmond wa usa email microsoft com tim berners lee director world wide web consortium mit laboratory computer science technology square cambridge ma usa fax email timbl org appendices internet media type message application addition defining protocol document serves specification internet media type message application 
message type enclose single request response message provided obeys mime restrictions message types regarding line length internet draft november fielding page encodings 
application type enclose pipeline request response messages intermixed 
registered iana 
media type name message media subtype name required parameters optional parameters version version version number enclosed message 
version determined line body 
message type request response 
type determined line body 
encoding considerations bit bit binary permitted security considerations media type name application media subtype name required parameters optional parameters version version version number enclosed messages 
version determined line body 
message type request response 
type determined line body 
encoding considerations messages enclosed type binary format appropriate content transfer encoding required transmitted mail 
security considerations internet media type multipart partial content response message includes content multiple ranges response request multiple non overlapping ranges transmitted multipart message body 
media type purpose called multipart 
multipart media type includes parts content type content range fields 
required boundary parameter specifies boundary string separate body part 
media type name multipart media subtype name required parameters boundary optional parameters encoding considerations bit bit binary permitted security considerations example partial content date wed nov gmt wed nov gmt content type multipart boundary string separates string separates content type application pdf content range bytes internet draft november fielding page range 
string separates content type application pdf content range bytes second range string separates notes additional may precede boundary string entity 
rfc permits boundary string quoted existing implementations handle quoted boundary string incorrectly 
number browsers servers coded early draft specification media type multipart quite compatible version documented 
tolerant applications document specifies requirements generation messages applications correct implementation 
recommend operational applications tolerant deviations deviations interpreted unambiguously 
clients tolerant parsing status line servers tolerant parsing 
particular accept amount sp ht characters fields single sp required 
line terminator message header fields sequence crlf 
recommend applications parsing headers recognize single lf line terminator ignore leading cr 
character set entity body labeled lowest common denominator character codes body exception labeling entity preferred labeling entity labels ascii iso 
see section 
additional rules requirements parsing encoding dates potential problems date encodings include clients caches assume rfc date appears years fact past helps solve year problem 
implementation may internally represent parsed expires date earlier proper value internally represent parsed expires date proper value 
expiration related calculations done gmt 
local time zone influence calculation comparison age expiration time 
header incorrectly carries date value time zone gmt converted gmt conservative possible conversion 
differences entities rfc entities uses constructs defined internet mail rfc multipurpose internet mail extensions mime allow entities transmitted open variety representations extensible mechanisms 
rfc discusses mail features different described rfc 
differences carefully chosen optimize performance binary connections allow greater freedom new media types date comparisons easier acknowledge practice early servers clients 
internet draft november fielding page appendix describes specific areas differs rfc 
proxies gateways strict mime environments aware differences provide appropriate conversions necessary 
proxies gateways mime environments need aware differences conversions required 
mime version mime compliant protocol see appendix 
messages may include single mime version general header field indicate version mime protocol construct message 
mime version header field indicates message full compliance mime protocol defined rfc 
proxies gateways responsible ensuring full compliance possible exporting messages strict mime environments 
mime version mime version digit digit mime version default 
message parsing semantics defined document mime specification 
conversion canonical form rfc requires internet mail entity converted canonical form prior transferred described appendix rfc 
section document describes forms allowed subtypes text media type transmitted 
rfc requires content type text represent line breaks crlf forbids cr lf outside line break sequences 
allows crlf bare cr bare lf indicate line break text content message transmitted 
possible proxy gateway strict rfc mime environment translate line breaks text media types described section document rfc canonical form crlf 
note complicated presence content encoding fact allows character sets octets represent cr lf case multi byte character sets 
implementors note conversion break cryptographic checksums applied original content original content canonical form 
canonical form recommended content uses checksums 
conversion date formats uses restricted set date formats section simplify process date comparison 
proxies gateways protocols ensure date header field message conforms formats rewrite date necessary 
content encoding rfc include concept equivalent content encoding header field 
acts modifier media type proxies gateways mime compliant protocols change value content type header field decode entity body forwarding message 
experimental applications content type internet mail media type parameter conversions perform function equivalent content encoding 
parameter part rfc 
content transfer encoding content transfer encoding cte field rfc 
proxies gateways protocols remove non identity cte quoted printable base encoding prior delivering response message client 
internet draft november fielding page proxies gateways mime compliant protocols responsible ensuring message correct format encoding safe transport protocol safe transport defined limitations protocol 
proxy gateway label data appropriate content transfer encoding doing improve likelihood safe transport destination protocol 
transfer encoding introduces transfer encoding header field section 
proxies gateways remove transfer coding prior forwarding message mime compliant protocol 
process decoding chunked transfer coding section represented pseudo code length read chunk size chunk extension crlf chunk size read chunk data crlf append chunk data entity body length length chunk size read chunk size crlf read entity header entity header empty append entity header existing header fields read entity header content length length remove chunked transfer encoding line length limitations implementations share code implementations need aware mime line length limitations 
limitation fold long lines 
messages transported follow conventions including line length limitations folding canonicalization transports message bodies payload see section interpret content mime header lines contained 
additional features rfc rfc document protocol elements existing implementations consistently correctly applications 
implementors advised aware features rely presence interoperability applications 
describe proposed experimental features describe features experimental deployment lacking addressed base specification 
number headers content disposition title smtp mime implemented see rfc 
content disposition content disposition response header field proposed means origin server suggest default filename user requests content saved file 
usage derived definition content disposition rfc 
content disposition content disposition disposition type disposition parm disposition type attachment disp extension token disposition parm filename parm disp extension parm filename parm filename quoted string disp extension token token internet draft november fielding page disp extension parm token token quoted string example content disposition attachment filename fname ext receiving user agent respect directory path information filename parm parameter parameter believed apply implementations time 
filename treated terminal component 
header response application octet stream content type implied suggestion user agent display response directly enter save response dialog 
see section content disposition security issues 
compatibility previous versions scope protocol specification mandate compliance previous versions 
deliberately designed supporting previous versions easy 
worth noting time composing specification expect commercial servers recognize format request line requests understand valid request format respond appropriately message major version client 
expect clients recognize format status line responses understand valid response format 
implementations connection established client prior request closed server sending response 
implementations implement keep alive version persistent connections described section rfc 
changes section summarizes major differences versions 
changes simplify multi homed web servers conserve ip addresses requirements clients servers support host request header report error host section missing request accept absolute uris section important changes defined specification 
older clients assumed relationship ip addresses servers established mechanism distinguishing intended server request ip address request directed 
changes outlined allow internet older clients longer common support multiple web sites single ip address greatly simplifying large operational web servers allocation ip addresses single host created serious problems 
internet able recover ip addresses allocated sole purpose allowing special purpose domain names root level urls 
rate growth web number servers deployed extremely important implementations including updates existing applications correctly implement requirements clients servers support host request header 
client sends request send host header 
internet draft november fielding page servers report bad request error request include host 
servers accept absolute uris 
compatibility persistent connections clients servers wish compatible previous implementations persistent connections clients servers 
persistent connections explicitly negotiated default behavior 
experimental implementations persistent connections faulty new facilities designed rectify problems 
problem existing clients may sending keep alive proxy server doesn understand connection erroneously forward inbound server establish keep alive connection result hung proxy waiting close response 
result clients prevented keepalive talking proxies 
talking proxies important persistent connections prohibition clearly unacceptable 
need mechanism indicating persistent connection desired safe talking old proxy ignores connection 
persistent connections default messages introduce new keyword connection close declaring non persistence 
see section 
original form persistent connections connection keep alive keep alive header documented rfc 
changes rfc specification carefully audited correct disambiguate key word usage rfc problems respect conventions laid rfc 
clarified error code upstream inbound server failures dns failures 
section create race required means etag sent resource created 
section 
content base deleted specification implemented widely simple safe way introduce robust extension mechanism 
addition similar identical fashion 
transfer coding message lengths interact ways required fixing exactly chunked encoding allow transfer encoding may self delimiting important straighten exactly message lengths computed 
sections content coding identity introduced solve problems discovered caching 
section quality values zero indicate don want allow clients refuse representation 
section interpretation version numbers clarified rfc 
require proxies upgrade requests highest protocol version support deal problems discovered implementations section charset introduced avoid explosion character set names accept headers 
section case missed cache control model introduced add missing case 
sections cache control max age directive properly defined responses 
section situations server especially proxy know full length response capable serving request 
need mechanism allow content range indicating full length message 
section internet draft november fielding page range request responses verbose meta data returned allowing server send needed headers response problem avoided 
section fix problem unsatisfiable range requests cases syntactic problems range doesn exist document 
status code needed resolve ambiguity needed indicate error byte range request falls outside actual contents document 
section rewrite message transmission requirements harder implementors get wrong consequences errors significant impact internet deal problems 
changing contexts incorrectly placing requirement behavior implementation version 
clear user agents retry requests clients general 

converted requirements clients ignore unexpected continue responses proxies forward responses general requirement xx responses 

modified tcp specific language clearer non tcp transports possible 

require origin server wait request body sends required continue response 

allow require server omit continue seen request body 

allow servers defend denial service attacks broken clients 
change adds expect header status code 
message transmission requirements fixes sections 
proxies able add content length appropriate 
section clean confusion responses 
section warnings cached incorrectly updated appropriately 
section warning needed general header put methods may need requests 
transfer coding significant problems particularly interactions chunked encoding 
solution transfer codings full fledged content codings 
involves adding iana registry separate content codings new header field te enabling trailer headers 
transfer encoding major performance benefit worth fixing 
te solves obscure downward interoperability problem occurred due interactions authentication trailers chunked encoding clients section patch link unlink methods defined commonly implemented previous versions specification 
see rfc 
alternates content version derived link uri public content base header fields defined previous versions specification commonly implemented 
see rfc 
notes rfc editor iana section document deleted 
calls rfc editor iana take actions draft draft standard 
actions taken please delete section specification 
transfer coding values document defines new class registry transfer coding values part solution solve problems discovered rfc caching transfer encoded documents 
initially registry contain tokens chunked section identity section gzip section compress internet draft november fielding page section deflate section special keyword trailers section 
registry note specifications transfer coding algorithms needed implement new value publicly available adequate independent implementation conform purpose content coding defined rfc xxxx rfc xxxx number assigned document 
definition application appendix defines internet media type application addition internet media type message defined rfc 
addition identity content coding content coding registry identity content coding added content coding registry document section solve problem discovered rfc 
full copyright statement copyright internet society 
rights reserved 
document translations may copied furnished derivative works comment explain assist implementation may prepared copied published distributed part restriction kind provided copyright notice paragraph included copies derivative works 
document may modified way removing copyright notice internet society internet organizations needed purpose developing internet standards case procedures copyrights defined internet standards process followed required translate languages english 
limited permissions granted perpetual revoked internet society successors assigns 
document information contained provided basis internet society internet engineering task force warranties express implied including limited warranty information rights implied warranties fitness particular purpose 
internet draft november fielding page index care taken producing index guarantee occurrences index term entered index 
bold face italic definition term 
literal rule rule rule rule comment rule xx informational status codes xx xx successful status codes xx redirection status codes xx client error status codes xx server error status codes abs path accept acceptable ranges accept charset accept encoding accept extension accept language accept params accept ranges access authentication basic digest 
see age age age value allow alpha alternates 
see rfc ansi date attribute authority authorization backus naur form basic authentication 
see bcp bcp byte content range spec byte range byte range resp spec byte range set byte range spec byte ranges specifier bytes bytes unit cache cache responses calculating age response internet draft november fielding page combining byte ranges combining headers combining negotiated responses constructing responses correctness disambiguating expiration values disambiguating multiple responses entity tags cache validators entry validation errors incomplete responses expiration calculation explicit expiration time get head affect caching heuristic expiration history list behavior invalidation complete modified values validators mechanisms replacement cached responses shared non shared warnings weak strong cache validators write mandatory cache control cache extension extensions max age max stale min fresh revalidate cache store transform cached private proxy revalidate public cache directive cache request directive changes 
see rfc rfc host requirement char charset chunk chunk data chunked chunked body chunk extension chunk ext name chunk ext val chunk size client codings comment compatibility missing charset multipart compatibility previous versions connect 
see 
connection connection close keep alive 
see rfc connection token content codings compress deflate gzip identity content negotiation content negotiation content base 
see rfc content content coding identity new tokens registered iana content disposition content disposition content encoding content language content length content location content md content range content range spec content transfer encoding content type content version 
see rfc cr crlf ctl date date date date delete delta seconds derived 
see rfc differences mime canonical form internet draft november fielding page content encoding content transfer encoding date formats mime version transfer encoding digest authentication 
see digit disp extension token disposition parm disposition type dns applications obey ttl information downstream headers entity entity entity body entity tags entity body entity header entity header fields entity length entity tag etag etag expect expectation expectation extension expect params expires explicit expiration time extension code extension header extension pragma field content field name field value filename parm byte pos hand fresh freshness lifetime freshness lifetime gateway general header fields general header generic message get head headers hop hop non modifiable headers henrik frystyk nielsen heuristic expiration time hex hop hop headers host host ht url date message version iana identity match modified match range unmodified unmodified implied lws inbound instance length iso iso iso iso iso iso james gettys jeffrey mogul keep alive 
see rfc language tags language range language tag larry masinter byte pos chunk modified lf lifetime link 
see rfc link 
see rfc location lws max forwards may media type internet draft november fielding page media types media range media type message message body message headers message length message transmission requirements message types message body message header method method definitions methods idempotent safe idempotent mime multipart mime version month multipart multipart rule name non shared cache non transparent proxy 
see proxy non transparent octet opaque tag optional options origin server range unit outbound parameter patch 
see rfc paul leach persistent connections operation purpose connection header pipelining port post pragma cache pragma directive primary tag product product tokens product version protocol name protocol version proxy non transparent transparent proxy authenticate proxy authorization pseudonym public 
see rfc public cache put quality values quoted pair quoted string qvalue range range units ranges specifier range unit reason phrase received received protocol recommended referer rel path representation request request request header fields request header request line request uri required requirements compliance key words resource response response response header fields response header retry revalidation reload specific revalidation unspecific revalidation internet draft november fielding page rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc changes rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc rfc date rfc rfc date roy fielding rule rule safe idempotent methods security considerations abuse server logs accept header accept headers reveal ethnic information attacks path names authentication credentials idle clients careful personal information content disposition header content location header encoding information uri header get method location header location headers spoofing proxies caching referer header sensitive headers server header transfer sensitive information header selecting request headers semantically transparent separators server server shall shall shared caches sp stale start line status code definitions status code status line strong entity tag strong validators subtag subtype suffix byte range spec suffix length tcp codings te text tim berners lee time token tolerant applications bad dates tolerate whitespace request status lines tolerate lf ignore cr line terminators lowest common denominator character set trace trailer internet draft november fielding page trailer trailers transfer encoding chunked transfer coding chunked deflate gzip identity transfer coding chunked chunked required compress identity trailers transfer encoding transfer extension transfer length transparent proxy transparent proxy 
see proxy transparent tunnel type unlink 
see rfc upgrade upstream uri 
see rfc uri ascii user agent user agent validators rules value variant vary warn agent warn code warn codes warn date warning warnings response stale revalidation failed disconnected operation heuristic expiration miscellaneous warning transformation applied miscellaneous persistent warning warning value warn text weak weak entity tag weak validators weekday www authenticate compress gzip 
