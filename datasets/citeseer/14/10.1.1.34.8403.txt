jml notation detailed design gary leavens albert baker clyde ruby adapted haim kilov bernhard rumpe william harvey editors behavioral specifications businesses systems chapter pages 
copyright fl kluwer academic publishers 
permission 
chapter behavioral interface specification behavioral interface specification jml behavioral interface specification language tailored java 
designed written read working software engineers require modest mathematical training 
uses eiffel style syntax combined model semantics vdm larch 
jml supports quantifiers specification variables enhancements expressive specification eiffel easier vdm larch 
jml leavens baker ruby stands java modeling language behavioral interface specification language wing designed specify java arnold gosling steele modules 
java modules classes interfaces 
behavioral interface specification describes details module interface clients behavior client point view 
specifications specification programs recording detailed design decisions documentation intended behavior software module 
goal chapter explain jml concepts approach specification 
jml detailed design java modules detailed design interface class priority queues example 
rest section explains interfaces behavioral interface specification 
section describe specify new types conceptual models detailed design 
finish example giving details class specification 
conclude mentioning features jml 
interfaces module interface consists name names types fields methods 
java interfaces declare interface information class declarations 
larch family guttag horning wing wing interface information jml declared declaration syntax programming language tailored jml uses java declaration syntax 
example file java refined shown 
example gives information java program needs object including package belongs accessibility methods public chapter behavioral interface specification names methods types arguments results exceptions throw 
package edu iastate cs jml docs kluwer public interface pure boolean contains object pure object throws void remove object included file annotations 
annotations enclosed annotation comments form write annotation comments form comments extend corresponding line 
java ignores kinds annotation comments significant jml 
annotations methods contains require methods pure meaning externally visible side effects 
example behavioral specification jml behavioral specification information form annotations 
larch approach specifications model 
stated terms mathematical model guttag horning hoare wing wing states values objects 
larch style specification languages jml models described declaring model fields purposes specification 
jml declaration include modifier model means declaration need appear correct implementation non model declarations appear correct implementation 
example file java refined specifies model priority queues 
specification refinement file shown java refined refine clause appears specification package declaration 
meaning refine clause specification adds file named imposing additional constraints specification 
refinement done example starting detailed design decisions starting specify behavior existing software modules 
refinement existing specification information inherited method declarations interface inherited repeated package edu iastate cs jml docs kluwer refine java refined chapter behavioral interface specification model import edu iastate cs jml models public interface public model instance entries initially entries null entries isempty public invariant entries null forall entries 
instanceof queueentry public invariant forall queueentry entries 
forall queueentry entries equals 
id id timestamp timestamp refine clause model import declaration 
effect java import declaration jml model means import appear implementation needed specification purposes 
package imported edu iastate cs jml models consists pure classes including sets sequences relations maps useful behavioral specification 
fill role built types specification vdm traits larch 
pure side effect free classes assertions affecting state computation allows assertions defined mathematical meaning eiffel assertions 
java classes methods invoked usual java syntax 
specification class type model field entries 
purposes specification imagine object implements interface public field entries type 
model field appears clients started initially empty stated initially clause attached declaration ogden etal morgan 
invariant clauses describe intended state entries 
states null elements type queueentry 
forall notation addition java syntax expressions gives universal quantification declared variables 

notation addition means logical implication 
second invariant states queueentry object unique id timestamp 
chapter behavioral interface specification file java refinement specify behavior methods 
specification refines specification java refined inherits model fields specified initially invariant clauses 
inheritance specifications explained 
package edu iastate cs jml docs kluwer refine java refined model import edu iastate cs jml models public interface ensures result 
null exists queueentry entries id pure boolean contains object requires entries isempty ensures exists queueentry entries result id forall queueentry entries equals 
timestamp timestamp requires entries isempty signals pure object throws requires null contains modifiable entries ensures exists queueentry old entries id entries equals old entries remove requires null contains ensures entries void remove object chapter behavioral interface specification specification contains shows simplest form behavioral specification method single clause followed method header 
specification says method returns true just argument non null object queue 
clause specification consists single ensures clause 
ensures clause gives method total correctness postcondition calls contains terminate opposed looping forever aborting state satisfies postcondition 
public says specification intended clients normal prohibits throwing exceptions 
meaning java short circuit logical conjunction id means id object 
keyword result denotes return value method case boolean 
operator 
means equivalent booleans lower precedence 
notation exists existential quantification 
specification method shows way specify methods exceptions jml 
uses clause case exceptions thrown clause exceptions thrown 
semantics correct implementation satisfy behaviors leavens baker wills wing 
specification states instance class shown thrown entries empty 
requires clause gives precondition case true method terminate case throwing exception case postcondition satisfied 
public normal behavior obeyed precondition true entries empty 
normal behavior postcondition says returns object lowest timestamp highest priority level 
course possible specify public normal behavior 
done implementations just assume precondition normal behavior entries empty 
appropriate design clients trusted permit efficient implementation 
specification appropriate untrusted clients meyer meyer 
specification remove uses case analysis leavens baker wills wing specification normal behavior 
cases separated keyword obeyed precondition true 
case contains modifiable clause 
frame condition borgida mylopoulos reiter states fields mentioned depend leino leino assigned fields including fields objects modified 
omitting modifiable clause means fields modified 
technically modifiable clause concerned array elements 
local variables including formal parameters method fields newly created objects may chapter behavioral interface specification freely assigned method leavens baker ruby 
note precondition remove uses method contains permitted pure 
interesting thing specification remove uses jml reserved word old 
eiffel meaning old evaluated pre state value place old assertion 
broken specification pieces done partly demonstrate refinement partly piece fit page 
common specification written file 
chapter specifying new pure model types specifying new pure model types jml comes suite pure types implemented java classes conceptual models detailed design 
mentioned package edu iastate cs jml models 
users create pure types giving class interface pure modifier 
types treated purely immutable values specifications pass certain conservative checks sure possibility observable side effects objects 
model classes pure jml non pure methods assertion type error 
modifiers model pure orthogonal list declaring pure model class 
example pure model class class queueentry specified file queueentry jml 
model class need implemented specification purposes 
pure methods permit side effects 
written jml file filename suffix tells jml consists solely annotations effect entire file ignored java significant jml 
class queueentry public fields id timestamp 
invariant clause states id field null client visible state 
package edu iastate cs jml docs kluwer model import edu iastate cs jml models public pure model class queueentry implements public object id public int public int timestamp public invariant id null timestamp requires null timestamp modifiable id timestamp ensures id timestamp public queueentry object int int chapter specifying new pure model types ensures result instanceof queueentry queueentry result equals public object clone requires instanceof queueentry ensures result 
queueentry id id queueentry queueentry timestamp timestamp requires instanceof queueentry ensures result false public boolean equals object specification constructor specification follows invariant 
constructor takes arguments initializes fields 
precondition constructor states called argument null true invariant violated 
clone equals methods queueentry related interface queueentry extends 
jml class implements interface inherits specifications interface 
interface specifies just methods 
specifications methods inherited queueentry specifications add specifications 
specification method clone quoted leavens follows 
ensures result instanceof result equals public pure object clone chapter specifying new pure model types specification says objects clone throw exceptions result object value 
java names receiver method call 
inheritance method specifications means implementation clone satisfy inherited specification specification queueentry 
meaning method inheritance example shown leavens 
modifier pure superclass added redundant method pure class 
ensures result instanceof result equals ensures result instanceof queueentry queueentry result equals public pure object clone satisfying cases possible queueentry subtype jml interprets meaning equals run time class 
clause allows specifier state consequences specification follow meaning leavens baker tan tan 
case predicate follows inherited specification 
example shows redundancy highlight important inherited properties reader original unexpanded specification 
case analysis specification queueentry equals method 
behavior satisfy case specification 
argument instance type queueentry case postcondition satisfied result false 
chapter class specifications class specifications file java refined shown specifies class implements interface 
class implements interface inherits specifications implementation obligations interface 
specification adds obligations previous specifications 
package edu iastate cs jml docs kluwer model import edu iastate cs jml models public class implements modifiable entries ensures entries null entries isempty entries equals new public requires entries isempty ensures result requires entries isempty ensures forall queueentry entries 
result timestamp public pure model int requires null contains modifiable entries ensures entries null entries equals old entries insert new queueentry requires null contains signals public void object int throws chapter class specifications public pure boolean contains object public pure object throws public void remove object pure model method specified purely help statement comprehensible 
model method need implemented 
specification need quantifier second case specification 
interesting method 
important issue timestamps handled hopefully clarified postcondition specification case 
subtle issue concerns finiteness 
precondition case limit number entries added specification imply implementation provide literally unbounded priority queue surely impossible 
avoid problem poetzsch heffter poetzsch heffter releasing implementations obligations fulfill postcondition java runs storage 
method implementation correctly implements specification case called state satisfies precondition ffl method terminates state satisfies postcondition having modified objects permitted modifiable clause ffl java signals error throwing exception inherits java lang error 
chapter features jml features jml leino leino leino jml uses depends represents clauses relate model fields concrete fields objects 
example depends size 
represents size 
size length depends clause says model field size may change value changes 
represents clause says related giving additional facts reasoning specification 
serves purpose abstraction function various proof methods data types hoare 
represents clause tells extract value size value 
jml history constraints liskov wing 
history constraint say values change earlier states method pre state post state 
prohibits subtypes making certain state changes implement methods specified class 
example history constraint constraint maxsize old maxsize says value maxsize change 
jml ability specify methods method may call callable clause 
allows know methods need looked overriding method apply ideas reuse contracts steyaert etal 
chapter related related general design strategy making jml practical effective blend eiffel meyer meyer meyer larch guttag horning wing wing approaches specification 
eiffel idea assertions written java expression syntax possible avoiding large amounts special purpose logical notations 
jml adapts old notation eiffel larch style annotation names state functions 
currently jml come tools execute preconditions help debug programs eiffel 
plan eventually extend jml tools support testing postconditions run time 
eiffel specifications written meyer typically complete modelbased specifications written example larch vdm jones 
example meyer partially specifies remove pop method stacks requiring stack empty ensuring stack value post state fewer items pre state see meyer 
characterization item removed informally comment 
said formally ensures elements stack unchanged 
allow complete specifications need ideas model specification languages 
jml semantic differences eiffel cousins sather sather allow easily write complete specifications ideas model specification languages 
important jml specification declarations 
model declarations allow exact specifications behavior typically done eiffel 
example model values stack objects precisely state element removed pop elements stack unchanged 
model fields jml allows write specifications similar spirit vdm larch 
minor difference eiffel jml specify frame conditions modifiable clause 
interpretation modifiable clause strict benevolent side effects disallowed modifiable clause omitted leino leino 
difference eiffel extended syntax java expressions quantifiers constructs needed logical expressiveness executable 
ban side effects problematic features code assertions 
hand experience larch leavens leavens taught adapt model approach ways aim making practical easy chapter related learn 
adaptation specification model ghost variables 
object general model fields purpose describing abstractly values objects 
simplifies jml compared larch specifiers readers hardly need know algebraic style specification 
designing model java class interface similar respects designing implementation data structure java 
hope similarity specification language easier understand 
second adaptation hiding details mathematical modeling facade java classes 
larch approach behavioral interface specification wing mathematical notation assertions directly specifier 
allows mathematical notation different specification languages 
means user specification language learn notation assertions different programming language notation expressions 
preliminary study finney finney indicates large number special purpose graphic mathematical notations hayes spivey may specifications hard read programmers trained notation 
jml compromise approach hiding details java classes 
classes pure sense reflect underlying mathematics side effects observable way 
insulating user jml details mathematical notation compromise approach insulates design jml details mathematical logic jml semantics theorem proving 
believe slightly extended java notation assertions appropriate jml detailed design read written persons familiar java 
chapter area jml concurrency 
current plan clauses say method may proceed execute called lerner 
permits specification caller delayed obtain lock example 
syntax exists jml parser exploration topic early stage 
may able expand history constraints temporal logic 
area jml synthesize previous leavens baker constraint logic programming directly execute significant practical subset jml assertions leavens baker 
prior supports construction post state values satisfy ensures clauses including clauses containing quantified assertions 
successful integration assertion execution techniques jml support automatic generation java class prototypes directly jml specifications 
jml combines best features eiffel larch approaches specification 
combination believe expressive eiffel practical larch style tool recording detailed designs 
information jml web url 
www cs iastate edu leavens jml html acknowledgments rustan leino peter muller discussions semantics specifications verification issues relating java 
comments jml peter chen anand gary karl jim potts 
anand type checker check specifications 
leavens ruby supported part rockwell international nsf ccr 
leavens baker ruby supported part nsf ccr 
adapted haim kilov bernhard rumpe william harvey editors behavioral specifications businesses systems chapter pages 
copyright fl kluwer academic publishers 
permission 
chapter authors authors department computer science iowa state university ames iowa usa 
gary leavens professor 
received ph computer science mit 
research focuses formal methods oo programming includes theory data types specification verification topics programming languages type theory semantics 
involved design specification language larch smalltalk principal designer larch jml 
author larch faq 
albert baker associate professor 
received ph computer science ohio state university 
research focuses specification languages software testing prototyping formal specifications case tools 
involved design specification language specs principal designer jml 
clyde ruby ph student 
years experience analyst designer implementer software systems 
current research focuses formal methods objectoriented programming specification verification 
working leavens larch jml 
bibliography bibliography arnold gosling arnold gosling java programming language 
java series 
addison wesley reading ma second edition 
borgida mylopoulos reiter borgida mylopoulos reiter frame problem procedure specifications 
ieee transactions software engineering october 
leavens leavens forcing behavioral subtyping specification inheritance 
proceedings th international conference software engineering berlin germany pages 
ieee computer society press march 
corrected version iowa state university dept computer science tr 
finney finney mathematical notation formal specification difficult masses 
ieee transactions software engineering february 
guttag horning guttag horning garland jones wing larch languages tools formal specification 
springer verlag new york ny 
gosling joy steele gosling joy steele java language specification 
java series 
addison wesley reading ma 
hoare hoare proof correctness data representations 
acta informatica 
hayes hayes editor 
specification case studies 
international series computer science 
prentice hall second edition 
jones jones systematic software development vdm 
international series computer science 
prentice hall englewood cliffs second edition 
kiczales lamping kiczales lamping issues design documentation class libraries 
acm sigplan notices october 
oopsla proceedings andreas paepcke editor 
lerner lerner specifying objects concurrent systems 
ph thesis cmu cs school computer science carnegie mellon university may 
leino leino myth modular specification programs 
technical report digital equipment systems research center lytton avenue palo alto ca november 
obtain author rustan pa dec com 
bibliography leino leino reliable modular programs 
phd thesis california institute technology 
available technical report caltech cs tr 
leavens leavens overview larch behavioral specifications modules 
kilov harvey editors specification behavioral semantics object oriented information modeling chapter pages 
kluwer academic publishers boston 
extended version tr department computer science iowa state university ames iowa 
leavens larch frequently asked questions 
version 
available www cs iastate edu leavens larch faq html may 
leavens leavens larch manual 
version 
available ftp ftp cs iastate edu pub ps gz world wide web url www cs iastate edu leavens html april 
leavens baker leavens baker enhancing pre postcondition technique expressive specifications 
wing woodcock davies editors fm formal methods world congress formal methods development computing systems toulouse france september proceedings volume lecture notes computer science pages 
springer verlag 
leavens baker ruby leavens baker ruby preliminary design jml behavioral interface specification language java 
technical report iowa state university department computer science july 
lano lano editors 
object oriented specification case studies 
object oriented series 
prentice hall new york ny 
liskov wing liskov wing behavioral notion subtyping 
acm transactions programming languages systems november 
meyer meyer applying design contract 
computer october 
meyer meyer eiffel language 
object oriented series 
prentice hall new york ny 
bibliography morgan morgan programming specifications second edition 
prentice hall international uk 
meyer meyer object oriented software construction 
prentice hall new york ny second edition 
ogden etal ogden sitaraman weide zweben part resolve framework discipline research synopsis 
acm sigsoft software engineering notes oct 
poetzsch heffter poetzsch heffter specification verification object oriented programs 
habilitation thesis technical university munich january 
spivey spivey notation manual 
international series computer science 
prentice hall new york ny second edition 
larch corba specifying behavior corba idl interfaces 
technical report department computer science iowa state university ames iowa december 
steyaert etal steyaert lucas mens hondt reuse contracts managing evolution reusable assets 
oopsla conference object oriented programming systems languages applications pages 
acm press october 
acm sigplan notices volume number 
tan tan interface language supporting programming styles 
acm sigplan notices august 
proceedings workshop interface definition languages 
tan tan formal specification techniques engineering modular programs volume kluwer international series software engineering 
kluwer academic publishers boston 
wing wing tiered approach specifying programs 
technical report tr massachusetts institute technology laboratory computer science 
wing wing writing larch interface language specifications 
acm transactions programming languages systems january 
wing wing specifier formal methods 
computer september 
wills wills refinement 
lano houghton lano chapter pages 
bibliography leavens baker leavens baker executing formal specifications constraint programming 
technical report department computer science iowa state university hall ames iowa august 
available anonymous ftp ftp cs iastate edu mail cs iastate edu 
