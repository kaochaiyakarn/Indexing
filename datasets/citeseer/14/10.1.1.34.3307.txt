harissa flexible efficient java environment mixing bytecode compiled code gilles muller moura fabrice charles consel irisa inria university rennes campus de beaulieu rennes cedex france fax harissa irisa fr www irisa fr compose harissa harissa html java language provides promising solution design safe programs application spectrum ranging web services operating system components 
known tradeoff java portability inefficiency basic execution model relies interpretation object virtual machine 
solutions proposed overcome problem just time jit offline bytecode compilers 
compilers trade efficiency portability ability dynamically load bytecode 
approach reconciles portability efficiency preserves ability dynamically load bytecode 
designed implemented efficient environment execution java programs named harissa 
harissa permits mixing compiled interpreted methods 
harissa compiler translates java bytecode incorporating aggressive optimizations call optimization class hierarchy analysis 
evaluate performance harissa conducted extensive experimental study aimed comparing various existing alternatives execute java programs 
code produced harissa compiler efficient alternative ways executing java programs available times faster jdk interpreter times faster guava jit faster toba bytecode compiler 
keywords java bytecode line compilers jit compilers java language provides promising solution design safe programs application spectrum ranging web services operating system components 
success java partly due fact basic execution model relies interpretation object virtual machine highly portable 
known tradeoff java portability research supported part council 
appear third conference object oriented technologies systems coots 
inefficiency interpretation 
solutions proposed overcome problem just time jit line bytecode compilers 
just time systems compile code native form runtime demand 
approach avoids overhead compiling unused code eliminates gap compile time execution time 
compiling program execution inhibits aggressive optimizations compilation incur small overhead 
particularly important case modern risc processors complex analyses required achieve best result 
quality generated code critically relies knowledge specific features target processor 
compilers platform independent requires large amount ported 
line compilers impose critical bounds compilation time optimizing analyses run needed 
platform independent generate output intermediate language 
context java applications dynamically load classes bytecode runtime limits applicability pure line compilers 
approach reconciles portability efficiency preserves ability dynamically load bytecode 
designed implemented efficient environment execution java programs named harissa harissa provides bytecode compiler interpreter integrated runtime library 
compiled program able dynamically load classes interpret 
harissa compiler translates java bytecode furthermore incorporates aggressive optimizations 
evaluate harissa conducted harissa previously named salsa 
extensive experimental study aimed comparing various existing alternatives execute java programs 
contributions follows 
ffl code produced harissa compiler efficient alternative ways executing java programs available caffeine micro benchmarks times faster jdk interpreter times faster guava jit average faster microsoft jit compiler 
real application benchmarks javac compiler times faster jdk interpreter faster toba bytecode compiler 
ffl compiler statically evaluates stack abstractly interpreting bytecode replaces stack management variables 
optimization suppresses main sources inefficiency java 
ffl compilation process call optimization class hierarchy analysis cha 
set programs benchmarks analysis permit replacement virtual methods calls simple procedure calls 
ffl contrast existing line compilers runtime system harissa includes interpreter preserves ability application dynamically load bytecode 
ffl discuss benefits limitations line compilation vs jit compilation 
experimental study show frequently programs advantageous line compilation jit compilation 
organized follows section describes existing approaches optimizing execution java programs 
section presents harissa 
section presents related class hierarchy analysis existing bytecode compilers 
section analyzes performance code generated harissa compiler micro benchmarks real benchmarks javac compiler javadoc documentation generator 
section concludes describing comparing jit line compilers 
improve java execution strategies optimize execution java programs 
range aggressive compilation schemes specific hardware processors 
advantages drawbacks schemes ffl native java compilers compiling source code native code common way compiling language 
approach contrary java philosophy advantages having platform independent language disappear 
instance source code java programs available 
strategy may useful obtain efficient target binaries specific environments 
approach implemented vortex project 
ffl bytecode compilers native compiler bytecode compilers take bytecode input 
interesting characteristics java bytecode contains nearly amount information source 
shown ford vliet possible decompile bytecode program produce java source program similar original 
due fact signature classes program kept bytecode allow classes dynamically loaded runtime 
significant loss information bytecode concerns structured loops transformed goto statements 
bytecode compiler easily efficient native compiler 
types bytecode compilers generate native code generate intermediate language advantages approaches discussed 
ffl just time compilers just intime compiler differs classical line compiler code compiled needed execution time 
difference performance approaches time spent execution perform optimizations 
vendors borland symantec released jit compilers 
basic scheme compile method called time pausing execution doing 
refinement approach described cytron 
mix interpretation jit compilation advantage multi threading multiprocessor ffl java processors java processor dedicated processor implements java virtual machine directly executes java bytecode 
processor main processor dedicated java machine workstations embedded systems coprocessor workstation 
sun manufacturers designing chips 
competitiveness proved 
processors currently available consider approaches require specific hardware 
line bytecode compiler right choice 
java originally designed programming embedded applications spread domains 
choose appropriate execution scheme factors frequency reuse code heterogeneity level set target machines considered 
frequent situations ffl small software components integrated web services components undergo frequent changes load client 
result context jit compiler appropriate solution 
ffl platform independent large software programs may may related web services 
java technology machine independence 
java tools examples programs compiler disassembler 
programs change infrequently users 
keeping local optimized version compiled code advantageous 
comparison jit get latest version software approaches requires management local optimized versions 
implemented revision control system compiles installs new software versions released automatic transparent way 
ffl platform dedicated software examples operating system components embedded applications 
applications java technology provides safety 
applications characterized infrequent changes 
advantageous optimize final code target system 
noticed statically configured tools javadoc dynamically choose load classes execution time 
applications worthwhile combine binary code interpreter jit compiler allow dynamic loading new features 
choosing target output stated types line bytecode compilers native nonnative 
native compilers produce code directly executable non native compilers produce code intermediate language 
designing native compiler advantages generated binary code may efficient resulting code written intermediate language ii compilation fast require successive tools 
choice drawbacks portable ii generation efficient code requires extensive knowledge features target processor 
non native compilers flexible achieve competitive performance 
particular choosing intermediate language permits reuse extensive compiler technology developed 
fact ffl compilers 
ffl compilers available machines 
developer address subtle differences exist processor successors 
ffl development process safer quicker ways simpler optimizations done generated code 
ffl possible reuse existing aggressive optimizers suif partial evaluators mix tempo :10.1.1.103.6838
reasons led develop non native line compiler java bytecode generates programs 
overview harissa harissa java environment includes compiler java bytecode java virtual machine integrated runtime library 
harissa aimed applications statically configured javac compiler designed allow code dynamically loaded compiled application 
novel feature introduced integrating bytecode interpreter runtime library 
data structures java compiled code interpreter compatible data allocated interpreter conflict data allocated compiled code 
harissa written designed primary goal providing efficient flexible execution java applications 
harissa written compiler generates code easily portable 
fact current ports include sunos solaris linux dec alpha 
allows compare effects optimizations different architectures 
harissa compiler produces programs various compilers optimizers 
result contrary jit compilers generated code heavily optimized final optimizations compiler 
harissa concentrates inefficiencies due architecture java virtual machine stack method calls 
transformations introduced 
stack statically evaluated away 
analysis described section 
second virtual method calls transformed possible static procedure calls 
virtual calls type checks eliminated 
described section 
harissa implements optimizations object oriented languages method inlining 
sections describe system detail 
compiling java program harissa compiler takes input class containing main method generates output makefile main file source file class program see 
determine set classes depend initial class analysis recursively performed bytecode search classes referenced main class 
simplicity phase omitted 
compilation method bytecode organized follows ffl step bytecode method transformed intermediate bytecode representation ibr 
purpose phase obtain simpler regular representation 
ibr system supports separate compilation reduce compilation time size generated code 
compiler checks target class exits library translating 
separate compilation conflicts class hierarchy analysis method call optimization benchmarks 
class name 
fflffl makefile main 

bytecode classes related gf ed bc class 
class 
set generated files initial class name simplifies implementation subsequent passes making explicit detailed information original java bytecode 
ffl step analysis determines value stack pointer instruction signature type instructions handle stack 
result analysis allow stack statically evaluated 
ffl step class hierarchy analysis performed described 
analysis permits implementation optimizations intermediate representation 
optimization include method inlining transformation virtual method calls static ones elimination type checking 
method inlining conversion virtual method calls ones iterated opportunities optimizations remain 
ffl step phase aims eliminating bound checking 
checks eliminated possible merge index array bound index statically determined 
ffl step final step generates code ibr 
phase divided phases generation goto labels exception handling ii declaration local variables method iii translation intermediate bytecode instruction sections intermediate bytecode representation main algorithms impact performance 
calculation stack pointer types stack instructions transformation virtual method calls static procedure calls 
intermediate bytecode representation intermediate bytecode representation simpler regular syntax contains detailed information original java bytecode 
main difference ibr types arguments instructions handle stack phase implemented current version harissa code conceived include optimization 
explicit 
information simplifies subsequent passes 
data structures defining ibr shown 
method contains information body exceptions raise 
associated exception program counter handler 
structure information instruction 
fields sig sig represent instruction input output signature respectively 
explicit representation signature types eases subsequent analyses 
analysis described section infers type instructions type explicit java bytecode 
calculation stack pointer instruction signature types analysis statically evaluates stack calculating value stack pointer types bytecode instructions 
java bytecode instructions type associated control stack 
constraints enforced java bytecode verifier program point stack instruction type signature 
example instruction dup duplicate integer program point duplicate double 
straightforwardly infer types stack operations 
analysis method abstractly interprets instruction respect stack structure see contains current stack pointer value type items 
interpret method body code fragments corresponding method exception handlers respectively 
stack initially empty 
interpretation instruction modify contents stack 
instruction branches program point branch interpreted respect stack resulting abstractly interpreting note specific case jump subroutine instruction jsr implement exceptions stack assumed empty execution instruction 
jsr ret instructions considered control flow test instruction return instruction respectively 
approximation correct terms control flow information gives correct results stack type information 
interpretation instruction follows type instruction explicit java bytecode analysis infer 
input signature inferred types stack function infer sig 
output signature inferred abstractly interpreting instruction respect input signature function infer sig 
signature known instruction abstractly interpreted respect stack signature functions pop sig push sig 
checks type consistency input signature type items pops stack pushes instruction output signature stack 
transforming virtual calls non virtual calls object oriented programming encourages code factoring differential programming 
results smaller procedures procedure calls 
procedure calls object oriented language dynamically dispatched 
analyses targeted optimizing dynamically dispatched message sends 
common intra procedural static class analysis struct code struct char char opcode list structure stack int sp char struct int code int pc stack stk instr instr code pc visited 
instr return stk instr stk stk stk instr opcode jsr stk code branch stk code code instr stack stk char instr instr 
instr stk stk stk stk stk return stk code stack stk null stk ref code stk inferring instruction type class hierarchy analysis cha profile guided class receiver prediction 
harissa opted integrate class hierarchy analysis address problem 
class hierarchy analysis static analysis determines program complete class inheritance graph cig set methods defined class 
cig specific set possible classes receiver subclass class statically inferred messages sent method receiver optimized 
overriding methods subclasses message sent method receiver replaced direct procedure call possibly inlined 
inlining method trigger opportunities converting dynamic method calls static ones 
transformations iterated 
generation code generation code method done phases 
goto labels exception handlers generated 
local variables method declared ibr instruction translated generation goto labels declaration local variables simple discussed 
treatment exceptions needs explanation 
ensure portability harissa handles exceptions manner 
java bytecode exception region associated 
described bytecode verifier documentation different exception regions disjoint nested overlap 
translating intermediate bytecode entering exception region pushes corresponding exception handler stack exit exception region pops exception handler stack 
jump goto instruction leaves exception region set nested exception regions corresponding exception handlers popped stack prior jump goto instruction 
actual generation code intermediate bytecode representation straightforward 
shows java source code method computing power function shows corresponding java bytecode 
shows translated code 
code stack statically evaluated variable names prefixed variables handle stack variable names prefixed user defined variables 
assignment variable corresponds pushing value stack 
variable corresponds popping value stack 
variables eliminated compiler optimizer suif :10.1.1.103.6838
shows optimized code generated suif 
method call implementations implementation class includes vector function pointers store addresses procedure implementing methods 
initialisation vector performed class compile time compiler run time dynamically loading byte code 
initialisation pointer may refer procedure method compiled class procedure inherited compiled class native function run time library procedure 
procedure interfaces compiled code interpreter allocates stack interpreter pushes arguments calls entry point pops result 
procedures generated compiler method dynamically overloaded 
interface calls implemented dimensional sparse vector function pointers class 
dimension static int int int int return java source code method int int int iconst istore iconst istore goto iload iload istore iload iload iload ireturn java bytecode tint tint vi tint vi tint si si tint vi vi si vi si si vi si goto si vi si vi si si vi si vi si vi si vi si si goto si vi return si generated code extern int int vi int vi int vi int vi vi vi goto vi vi vi vi vi vi vi goto return vi suif optimized code compilation power method equals total number interfaces referenced program interface assigned index compile time 
class instantiated class implements interface corresponding second dimension vector allocated initialized procedures 
current status limitations harissa harissa provided versions garbage collection gc 
allows estimate influence gc performance 
gc version boehm demers weiser conservative garbage collector 
non gc version relies malloc leads increase swapping objects deallocated 
current time threads implemented 
system conceived include generated code contains necessary calls synchronization functions 
implementation synchronization optimizes single thread case 
long additional threads created synchronization calls point null procedure 
additional threads creation detected guards plug multi thread synchronization function 
efficiency harissa produces target relies gcc extensions 
major limitation gcc available platforms 
plan eliminate dependency order able test vendor compilers 
native libraries graphic library supported 
related line compilers knowledge compilers bytecode toba harissa environment integrates interpreter 
performs optimizations generating code stack evaluation method call optimization 
immature fails applications 
toba stack analysis similar included harissa generates code transient variables eliminated 
toba method call optimizations 
currently toba slightly mature harissa supports threads 
previous cha compilers object oriented languages included cha optimize dynamically dispatched calls 
vortex optimizing compiler object oriented languages 
vortex differs harissa ways 
language independent compiler front ends java cecil modula 
vortex takes input source code 
approach limits domain case java source code available 
optimizations performs range standard ones constant propagation dead code elimination method inlining optimizations specific object oriented languages intraprocedural static class analysis class hierarchy analysis profile guided class receiver prediction 
vortex compiler study impact optimizations combination 
shown class hierarchy analysis profile guided class receiver prediction complementary transformations harissa toba developed independently time 
combination produces compounding effect 
fernandez presents optimizing linker class hierarchy analysis modula programs 
optimizations code generation done link time 
problem approach optimizations result transforming virtual calls static procedure calls done compiler 
optimizing source compiler 
number virtual method calls reduced performing type feedback class hierarchy analysis 
method inlining done 
optimized program compiled native host compiler 
benchmarks section analyzes performance gain expected aggressive bytecode compiler 
compare execution harissa compiled programs industrial jit compilers toba bytecode compilers jdk interpreter 
performance jit compilers nature sensitive target architecture compile native code 
get representative results run benchmarks different platforms dell mhz pentium pc sun mhz sparcstation ss 
pentium harissa compared jit compilers embedded netscape microsoft internet explorer 
sparc harissa compared guava jit compiler 
different kinds benchmarks micro benchmarks evaluate efficiency jit offline compilers pure computations large benchmarks compare jit line compilers real applications include benchmarks evaluate effectiveness cha java applications 
summary results summarizes results 
microbenchmark tests caffeine 
caffeine micro benchmark tests feature java machine 
tests harissa generated code average times faster jdk times faster guava jit faster microsoft jit 
real application benchmarks results depend mainly pure computation program 
applications dominated difference line jit compilers jdk slower harissa 
applications javac javadoc rely mixed set computation harissa times faster jdk times faster guava jit faster toba bytecode compiler 
pure computation programs othello game harissa times faster guava faster toba times faster jdk 
toba results missing possible run successfully reasons described 
methodology harissa configured compilation methods size smaller instructions inlined 
code generated harissa compiled gcc option 
gcc version sun pc linux 
toba generated code compiled sun commercial compiler xo option 
caffeine javac javadoc othello harissa alpha toba guava beta jdk microsoft jit execution time normalized harissa caffeine micro benchmarks caffeine micro benchmarks produce numbers higher faster allow compare heterogeneous architectures java implementations directly 
consider related compilation scheme rely graphic computations garbage collector ffl sieve calculates prime numbers ffl string tests string concatenation search ffl logic executes loops containing decision trees ffl loops runs types integer loops ffl floating point fp simulates calculations needed rotate dimensional points degrees degrees time ffl method tests fast vm performs method calls 
general comments results results evaluation table ss table pc 
rightmost columns harissa results optimizations described 
general pc faster sun 
ss jdk interpreter embedded netscape achieve similar results code generated harissa times faster jdk interpreter 
pc microsoft jit compiler slightly faster netscape tests string fp twice fast microsoft 
jit compilers vs harissa relevance micro benchmarks comparing jit compilers harissa jdk netscape guava harissa harissa suif harissa loop cm cm cm cm ratio cm ratio cm ratio interp 
interp 
jit guava guava guava loop logic string method sieve fp table comparison jit harissa mhz ss cm measure efficiency compilation scheme 
tests loop code jit compilers loose time execution waiting compilation method 
furthermore exception method test method calls 
harissa inter procedural optimizations cha method inlining little influence results 
tests permit evaluate precisely quality code produced jit compilers 
measurements show code generated harissa compiler basically faster jit compilers 
results architecture dependent 
ss harissa sieve logic times faster jit guava 
pc results balanced difference performance harissa microsoft smaller harissa guava maximum times faster 
tests sieve fp harissa twice slow 
improving performance code generated harissa understand reasons inefficiency code generated harissa tests sieve fp analyzed assembly code generated gcc 
sieve test appears critical loop instructions long 
leave room possible optimizations 
identified reasons inefficiency fact due limitations gcc optimizer 
expected transient stack variables eliminated gcc 
optimizations resulting variable constant propagation triggered 
instance sieve test stack variable elimination transforms divide divide efficiently transformed shift instruction 
evaluate impact problem suif optimizer systematically eliminate variables combination constant variable propagation dead code elimination passes :10.1.1.103.6838
effect pc dramatic fp sieve tests nearly doubling performance improvement 
tests little influence shows situation frequent 
sparc influence stack variable elimination lower pc 
relative cost processor instructions differs significantly sparc pentium 
second source inefficiency fact loops compiled bytecode goto instructions 
gcc necessary information best choice regarding caching temporary results registers 
determine consequences problem reconstructed loops hand sieve fp benchmarks 
microsoft netscape harissa harissa suif harissa loop win win linux linux linux cm cm ratio cm ratio cm ratio cm ratio loop logic string method sieve fp table comparison jit harissa mhz pc pentium cm sparc pc performance increase 
noted performing optimizations harissa compiled code faster microsoft jit 
real sized benchmarks benchmarks estimate efficiency harissa real environment 
evaluated execution time set programs pure computations substantial mixture 
pure computation programs represented othello game 
file handling applications represented insert extract file archive compression 
mixed computation programs represented sun jdk tools javac compiler javadoc documentation generator kawa scheme interpreter 
benchmarks single user environment avoid external interferences 
possible run benchmarks jit compilers embedded web browsers security protection reasons 
performance tools javac javadoc depends significantly input 
get representative results ran set large java programs available net ffl jas generates bytecode scheme scripting language 
ffl jax generates regular expressions 
ffl generates recursive descent parser ll grammar 
ffl kawa scheme interpreter 
comparisons performed real execution time includes waiting corresponds user observes 
completeness detailed user system cpu time spent execution measure efficiency pure computations 
detailed javac results detailed timing javac execution table 
comparison jdk harissa achieves highest speedup greater 
toba average times faster jdk times faster guava times faster 
results clearly show benefits various optimizations performed harissa 
compared harissa gc version non gc 
gc version version faster non gc 
due fact reclaiming objects leads increase swapping jdk guava beta real user sys real user sys ratio real user sys ratio cpu cpu cpu cpu cpu cpu mn sec 
sec 
mn sec 
sec 
jdk mn sec 
sec 
jdk jax jas kawa toba harissa gc harissa gc real user sys ratio real user sys ratio real user sys ratio cpu cpu cpu cpu cpu cpu mn sec 
sec 
jdk mn sec 
sec 
jdk mn sec 
sec 
jdk jax jas kawa table compilation time java programs amount address space allocated system process 
detailed javadoc results javadoc representative tools rely dynamic capabilities provided java load bytecode execution 
possible execute pure bytecode compiler toba 
dynamically loaded classes interpreted execution time spent compiled code 
harissa generated code average times faster jdk times faster guava 
benchmarks tools insert extract files archive 
tested version tools include compression execution dominated os 
tests done jdk classes zip file input 
expected compilers line jit achieve level performance 
jdk slower compilers 
tested implementation othello game allocates finite time computer player solve move 
depth search depends speed generated code 
give time spent solve depth move 
cha evaluation impact class hierarchy analysis studied object oriented languages including java 
shown analysis improve program performance 
table presents impact cha programs benchmarked 
shows cha implementation allows virtual call points transformed procedure calls 
contribution threefold designed hybrid environment java named harissa permit mixing jdk guava beta harissa real user sys real user sys ratio real user sys ratio cpu cpu cpu cpu cpu cpu mn sec 
sec 
mn sec 
sec 
jdk mn sec 
sec 
jdk jax jas kawa codegen table javadoc execution time jdk guava beta real user sys real user sys ratio cpu cpu cpu cpu mn sec 
sec 
mn sec 
sec 
jdk othello toba harissa real user sys ratio real user sys ratio cpu cpu cpu cpu mn sec 
sec 
jdk mn sec 
sec 
jdk othello table benchmarks javac javadoc othello kawa number classes interfaces arrays interfaces arrays methods containing bytecode native methods average size method bytes virtual call points number optimized calls due cha percentage virtual call points table detailed analysis method classes interpretation compiled bytecode ii designed aggressive bytecode compiler generated code efficient compilers iii measured relative efficiency code produced line jit compilers 
tradeoffs jit line compilers 
micro benchmarks section clearly show optimized offline compiler harissa faster jit compiler 
gap jit line compilers greater sparc pentium 
due fact binary code modern risc processors complex optimize requires analyses hard run short time allocated fly compilation 
jit line strategies complementary 
shown cytron compilation process consist running unoptimized code process aggressive compilation background 
optimized code available unoptimized code replaced optimized 
system mixes bytecode interpretation binary execution continuous compilation scheme incorporated easily harissa 
opportunities optimizations harissa generated code fast micro benchmarks show opportunities improvement 
near plan integrate analysis eliminating transient stack variables independent suif 
furthermore studying development transformation phase control flow information aimed rebuilding loop constructs 
shown earlier structured programs usually better compiled 
plan eliminate type bound checks close examination code generated demonstrated evaluated statically means simple intra procedural analysis 
acknowledgments compose group irisa particular julia lawall renaud marlet helpful suggestions 
availability binary version system freely available www loaded www irisa fr compose harissa harissa html lindholm yellin 
java virtual machine specification 
addisonwesley 
gosling joy steele 
java language specification 
addisonwesley 
osf 
lite project 
url www gr osf org java index htm 
david 
interview 
url www borland 
com internet java interviews regis html 
symantec 
just intime compiler windows nt 
url cae symantec com cafe fs jit html 

guava 
url guava com au html 
cytron 
just time better late 
proceedings popl pages paris france january 

java class translator 
url www jp info java html 
proebsting townsend bridges hartman 
toba java applications way ahead time wat compiler 
proceedings rd conference object oriented technologies systems 
software 

url www com cm index html 
dean grove chambers 
optimization object oriented programs static class hierarchy analysis 
proceedings ecoop aarhus denmark august 
springer verlag 
dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
oopsla conference pages san jose ca october 
ford 
jive java decompiler 
technical report rj ibm research center yorktown heights may 
van vliet 
mocha java decompiler 
url www inter nl net users van vliet mocha htm 
case 
java virtual machine stay virtual 
microprocessor report pages april 
wilson french wilson amarasinghe anderson tjiang :10.1.1.103.6838
liao 
tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
acm sigplan notices december 
andersen 
program analysis specialization programming language 
phd thesis computer science department university copenhagen may 
diku technical report 
consel hornof noel noy volanschi 
uniform approach compile time run time specialization 
danvy gluck thiemann editors partial evaluation international seminar dagstuhl castle number lecture notes computer science pages february 
hornof noy 
accurate binding time analysis imperative languages flow context return sensitivity 
acm sigplan symposium partial evaluation program manipulation amsterdam netherlands june 
acm press 
yellin 
low level security java 
url java sun com verifier html december 
grove dean garrett chambers 
profile guided receiver class prediction 
proceedings oopsla pages austin tx october 
boehm weiser 
garbage collection uncooperative environment 
software practice experience pages september 
pu black consel cowan inouye walpole zhang 
optimistic incremental specialization streamlining commercial operating system 
proceedings acm symposium operating systems principles pages copper mountain resort usa december 
acm operating systems reviews acm press 
chambers dean grove 
program optimization objectoriented languages 
technical report department computer science university washington june 
fernandez 
simple effective link time optimization modula programs 
proceedings acm sigplan conference programming language design implementation austin tx june 
aigner holzle 
eliminating virtual calls programs 
proceedings ecoop linz austria august 
springer verlag 
holzle ungar 
optimizing dispatched calls runtime type feedback 
proceedings acm sigplan conference programming language design implementation pages 
sigplan notices june 

othello game 
informatik uni muenchen de 

kawa scheme interpreter project 
url www com kawa index 
html 
kb sriram 
free tools java 
url www blackdown org kbs 

leach 
john java page 
url java html 
