proceedings international conference software maintenance washington november ieee copyright slicing objects system dependence graph liang mary jean harrold department computer information science ohio state university mail cis ohio state edu sdg object oriented software precise previous representations efficient construct previous approaches 
new sdg distinguishes data members different objects provides way represent object parameters represents effects polymorphism parameters parameter bindings represents incomplete classes efficiently provides way represent class libraries 
system dependence graph introduce concept object slicing algorithm implement concept 
object slicing enables user inspect statements slice object helpful debugging impact analysis 
keywords slicing system dependence graph program analysis object oriented 
program slicing applications software maintenance debugging regression testing program understanding reverse engineering 
program slice set program statements predicates affect value program variable defined program point known slicing criterion 
horwitz developed system dependence graph sdg phase graph reachability algorithm sdg compute interprocedural slices 
researchers extended sdg represent various language features proposed variations dependence graphs facilitate finer grained slices 
object oriented concepts classes objects inheritance polymorphism dynamic binding representation analysis techniques developed imperative language programs inadequate object oriented programs 
researchers extended existing techniques handle features 
larsen harrold extend sdg represent features object oriented programs 
introduce class dependence graph represent class hierarchy data members polymorphism 
sdg constructed class dependence graphs horwitz phase slicing algorithm minor modification computing slices object oriented programs 
limitation approach distinguish data members different objects instantiated class resulting slices may unnecessarily imprecise 
tonella approach similar larsen harrold passing data members object actual parameters object invokes method approach distinguish data members different objects instantiated class 
existing approaches provide techniques representing features object oriented programs areas improved 
facilitate computation precise slices representation precise 
example existing techniques representing objects parameters distinguish data members parameter object existing technique representing objects possible types may cause spurious dependences statements send messages objects 
second facilitate application slicing larger programs representation constructed efficiently 
example way data members represented existing approaches perform unnecessary data flow computation 
correctly represent inherited methods call virtual methods redefined derived class simple strategy reuse representations inherited methods extended 
presents sdg object oriented software extension existing representations 
sdg fully represents features objectoriented programs including objects languages java 
intro main int proc proc proc int int proc proc int int slice 
program system dependence graph 
duces concept object slicing identifies statements methods object affect slicing criterion object copy methods 
main benefits sdg distinguishes data members different objects represents objects parameters data members objects represents effects polymorphism parameters parameter binding 
benefit algorithm efficient previous approaches may enable efficient slicing larger programs 
final benefit technique object slicing lets user inspect statements slice object object 
slicing sdgs system dependence graph sdg contains procedure dependence graph procedure 
procedure dependence graph represents procedure graph vertices statements predicate expressions 
data dependence edges represent flow data statements expressions control dependence edges represent control conditions execution statement expression depends 
procedure dependence graph contains entry vertex represents entry procedure 
model parameter passing sdg associates procedure entry vertex formal parameter vertices formal vertex formal parameter procedure formal vertex formal parameter may modified procedure 
sdg associates callsite procedure call vertex set actual parameter vertices actual vertex actual parameter callsite actual vertex representation efficiently represents classes derived objects instantiated library defined classes space limitations discuss features 
actual parameter may modified called procedure 
procedure entries callsites global variables treated parameters 
parameter vertices represent assignments featuring copy copy parameter passing scheme vertices data flow analysis algorithm compute data dependences parameters statements procedures 
sdg connects procedure dependence graphs callsites 
call edge connects call vertex entry vertex called procedure dependence graph 
parameter edges represent parameter passing parameter parameter edges connect actual formal vertices formal actual vertices 
shows program sdg 
ellipses represent program statements parameter vertices 
refer particular parameter vertex prefixing parameter label call entry vertex control dependent 
example refers parameter vertex representing actual parameter call proc 
solid lines represent control dependences dashed lines represent data dependences dotted lines represent procedure calls parameter bindings 
example statement control dependent value predicate control dependence edge sdg 
value passed proc data dependence edge sdg 
parameter binding occurs main proc call proc binding results edge parameter edge 
horwitz compute interprocedural slices solving graph reachability problem sdg 
facilitate computation interprocedural slices paths corresponding legal call return sequences sdg uses summary edges explicitly represent transitive flow dependence call sites caused data dependences base base ba ba ba ba main base ba base ba vm int class base int virtual vm public base main base base ba ba base slice ba 
program left partial class dependence graph right 
control dependences 
summary edge connects actual vertex actual vertex value associated actual vertex may affect value associated actual vertex 
edge represents fact procedure proc value passed proc affects value returned proc 
slicing algorithm consists passes 
pass algorithm traverses backward edges parameter edges marks reached vertices 
second pass algorithm traverses backward vertices marked pass edges call parameter edges marks reached vertices 
slice union marked vertices 
illustrate consider computation slice parameter callsite 
pass algorithm marks vertices 
second pass traversal starts vertices marked pass algorithm marks vertices 
depicts resulting slice shaded vertices 
limitations existing techniques object contains set data members methods 
object receive messages invoke methods handle messages 
invoked method requires access data members object 
larsen harrold additional parameters represent data members referenced method method invoked handle message 
way data dependence consecutive method calls introduced data members represented data dependence actual parameters method callsites 
shows program portion sdg function main approach 
example data dependence edges actual parameter vertices representing data members ba base ba base method call ba base actual parameter representing ba ba method call ba 
representation lets slicer omit slice data members affect value variable sliced gaining precision 
example shaded vertices belong slice begins callsite data member indicated vertices define data member affect computation value slice 
limitation approach data dependences obtained approach creating individual procedure dependence graphs imprecise treating data members declared class global methods class approach fails consider fact different method invocations data members methods belong different objects 
example main representation edge base representing ba representing ba spurious data dependences 
second limitation approach handle cases object parameter data member object 
base ba program represented 
tonella address limitation extending method signature include data members class formal parameters object pass data members method actual parameters 
approach unnecessarily expensive method callsite actual parameter vertices data members object ref grove address problem call graph construction class contours 
approach construct precise representations sdgs 
method 
address second limitation representing object single vertex object parameter 
representation cause slicer produce imprecise slices 
example program slicing criterion included slice 
situation requires slice include ba function base ba turn requires slice include ba ba program see ba affect approaches perform unnecessary computation calculating data dependences 
class dependence graph construction algorithm uses data dependence graph construction algorithm construction traditional sdg statement method calls method modifies data member algorithm propagates definition introduced actual parameter representing callsite statement call statements methods similar problem exists tonella approach definitions data members objects propagated program 
polymorphism important object oriented concept lets type object decided runtime refer object polymorphic object 
feature difficult handle static analysis polymorphic object receives message selection method depends runtime type object 
existing techniques message sent polymorphic object represented set callsites candidate message handling method connected polymorphic choice vertex polymorphic choice edges 
approach may give incorrect results function main shown approach uses callsite represent statement declared base 
called objects class derived invokes derived vm modify called objects class base invokes base vm modify callsite precisely represent cases 
approach computes spurious data dependence approach equivalent objects belonging different type represent polymorphic object 
data dependence graph construction algorithm distinguish data members name different objects 
polymorphic object parameter data member object 
example class derived derived class base ba base ba polymorphic object 
previous addressed issue 
inheritance technique facilitate code reuse lets derived class inherit data members methods par long vm public derived base class public base class derived main int base cin new base new derived 
program 
ent classes define data members methods 
existing techniques reuse representation base classes construction representation derived class construct representation methods defined derived class 
simple reuse strategy presence virtual methods 
example directly reuse representation class base construct representation class derived class base callsite virtual method vm connected base vm uses base base modifies base class derived callsite virtual method vm connected derived vm uses derived base modifies derived data members versions vm differ different callsite representations required callsite vm representation class derived callsite vm representation base 
callsite vm derived causes header derived sdg differ header base sdg class base formal data member vertices base base formal data member vertex base class formal data member vertices derived base formal data member vertex derived system dependence graph extensions section presents extended sdg handles problems discussed previous section 
base discussion subset exceptions techniques applied programs object oriented languages java 
assume dereferences pointers program resolved alias analysis algorithm 
assume data members object accessed method replace direct data member object method call 
treat static data members global variables static methods global procedures particular runtime object 
objects created destroyed dynamically number runtime objects vary program execution 
chatterjee ryder group runtime objects finite number equivalence classes static analysis equivalence class represented object 
suggest possible way create equivalence classes group objects created program point equivalence class 
follow suggestion object represent set objects created program statement 
objects callsites 
represent receiver object message follow larsen harrold scheme 
representation callsite contains actual data member vertices represent data members referenced actual data member vertices represent data members modified called method 
support representation method entry vertex analogous entry vertex procedure contains formal data member vertices represent data members referenced method formal data member vertices represent data members modified method 
parameter vertices actual data member vertices control dependent method call vertex formal data member vertices control dependent method entry vertex 
formal data member vertices labeled assignments copy value data members object scope method method formal data member vertices labeled assignments copy value data members scope method object method 
approach data dependences related data members class method computed way data dependences procedure 
parameter objects 
obtain precision object parameter parameter object sdg explicitly represents data members object 
parameter object represented tree root tree represents object children root represent object data members edges tree represent data dependences object data members 
representation data member object object expand data member subtree 
existence recursive class definitions tree may able repeatedly expanded leaves basic data types 
solution limiting expand tree level 
limiting 
compute precise data dependences tree represent object uses definitions associated data member vertices 
object represented tree data member vertex tree associated data member object represented tree defined vertex tree associated definition data member 
algorithm section shows dependences related parameter object computed 
callsite function illustrates representation parameter objects callsite 
callsite actual parameter represented tree leaves tree represent data member data flow edges summary edges involving connected data member vertices 
representation helps slicer exclude data member vertex representing callsite base 
polymorphic objects 
program written object oriented language possible types polymorphic object determined statically usually consist small set types 
polymorphic object represented tree root tree represents polymorphic object children root represent objects possible types 
polymorphic object parameter children expanded trees polymorphic object receives message children expanded callsites 
note case technique differs choice scheme representation callsite possible object type choice scheme different callsites different implementations virtual method 
representation solve problems concerning polymorphic choice scheme described section 
shows representation function base ba introduce class derived function main 
main call base actual parameters different types base formal parameter ba base ba polymorphic parameter object trees represent difference ba 
data dependence associated data members occurs callsites object type 
example actual vertex labeled callsite ba derived connected actual vertex labeled callsite ba derived connected actual vertex labeled callsite ba base callsites represent statement 
classes hierarchy 
class hierarchy try maintain copy representation method representation shared different classes hierarchy 
class entry vertex groups methods belong base ba ba ba ba base slice base derived base derived base derived derived base 
representation base sdg 
ing class membership edges 
identify original class method declared prefix method name name original class 
discussed method need new representation construct program dependence graph new class hierarchy 
method needs new representation method declared new class method declared lower level class hierarchy calls newly redefined virtual method directly indirectly 
example methods declared derived need new representation methods satisfy 
base needs new representation satisfies base calls derived vm redefined class derived 
sdg construction algorithm inputs control flow graph procedure method program outputs sdg 
builds procedure dependence graphs methods class bottom fashion class hierarchy lines 
procedures belong class processed assuming belong dummy class 
compute procedure dependence graphs methods identifies methods require new procedure dependence graphs line 
method declared algorithm constructs procedure dependence graph lines 
method declared base class directly indirectly calls virtual method redefined algorithm constructs procedure dependence graph procedure dependence graph built base class lines directly indirectly call virtual method redefined algorithm reuses procedure dependence graph base class line 
algorithm input control flow graph cfg program output system dependence graph sdg declare 
foreach class 
identify methods need new representations 
foreach method declared 
compute control dependences 
preprocess usual data flow analysis 
expand objects 
compute data dependences objects 
endfor 
foreach method base classes 
marked 
copy old procedure dependence graph 
adjust callsites 

reuse old procedure dependence graph 
endif 
endfor 
endfor 
connect 

algorithm construct sdg constructing procedure dependence graph method calls connect line connect binding edges callsite procedure dependence graphs entry called method 
final step construction sdg computation summary edges callsites procedure implemented purpose existing technique 
identify methods requiring new procedure dependence graphs uses class call graphs identify methods need new procedure dependence graphs line 
class call graph differs previous definitions distinguishes types call statements object oriented program statement call statement execution causes program control transfer object procedure call statement call statement execution cause program control transfer object 
define class call graph consider procedure call statements relation induced ignore message sending statements cause control transfer object 
method procedure call relation method procedure call statement calls procedure call statement executed 
new class declared uses marking procedure class call graph identify methods need new procedure dependence graphs marks methods declared class class derived base classes marks methods base classes reach marked methods performing backward traversal class call graph marked methods 
marked methods need new procedure dependence graphs 
uses class call graph compute interfaces methods need new procedure dependence graphs 
interface method procedure defined set non local variables parameters global variables data members refers denoted set non local variables modify denoted gmod 
gmod computed existing side effect analysis algorithm 
construct procedure dependence graphs methods new class constructs procedure dependence graph method declared new class method control flow graph lines 
object oriented languages imperative languages share constructs 
builds control dependence graphs method existing algorithm line 
builds data dependence graph method steps lines 
step line algorithm treats object simple variable preprocesses method modified version usual data dependence graph construction algorithm 
second step line algorithm expands vertex object representations discussed section 
third step line algorithm computes data dependence data members objects 
steps handle objects callsites objects parameters polymorphic objects 
preprocess methods 
step uses modified data dependence graph construction algorithm preprocess method 
algorithm creates complete callsite procedure call statement gmod called method technique similar construction callsite procedure described section 
message sending statement algorithm creates actual parameter vertices parameters global variables callee gmod 
estimate data dependences introduced object data members algorithm associates object call vertex message sending statement construction similarly algorithm associates definition object call vertex message sending statement destruction 
message receiver multiple types algorithm creates callsite possible type group callsites polymorphic object vertex 
case definition object associated polymorphic object vertex call vertices 
object parameter treats object simple variable creates vertex 
inset graph shows result preprocessing procedure base 
algorithm create actual parameter vertices graph ba data members callsites representing message sending statement ba ba 
algorithm associates definition ba call vertices labeled ba ba 
data dependence edge vertices 
expand objects 
second step expands vertices object technique discussed section 
step uses object flow subgraph subgraph data dependence graph method procedure 
subgraph includes vertices method sending call vertices object parameter vertices data dependence edges built step vertices 
bold vertices edges inset graph shows object flow subgraph object ba procedure base 
considers vertex subgraph 
parameter vertex representing single typed object algorithm expands tree 
parameter vertex representing polymorphic object algorithm creates child vertex possible object type expands child vertex tree 
call vertex algorithm creates actual parameter vertices data members callee gmod 
vertex ba ba ba ba base ba ba ba base ba ba ba ba ba base 
construction pdg base representing call polymorphic object callsite connected algorithm creates actual parameter vertices data members callee gmod callsite 
left graph shows procedure dependence graph vertices ba object flow subgraph expanded 
build data dependences data members 
expanding vertices object flow subgraph propagates definitions data members object flow subgraph builds data dependence data members 
callsite object flow subgraph represent definition set data members set actual data member vertices associated similarly represent set set actual data member vertices 
object parameter vertex vertex defines object represent definition set data members set data member vertices vertex uses object represent set data members set data member vertices 
propagation definitions done usual way 
propagation vertex object flow subgraph data member reaching definition create data dependence edge 
construct procedure dependence graphs methods base class builds new procedure dependence graph method declared base class identified directly indirectly call virtual method redefined derived class 
reuses control dependence information data dependence information procedure dependence graph built base class 
modifications needed procedure callsites call methods gmod changed algorithm need add remove actual vertices actual vertices 
actual vertex representing associated 
similarly actual vertex representing associated definition adding removing actual actual vertex requires algorithm recompute data dependences related definition 
notice formal parameters callee gmod change modifications apply data members global variables 
slicing object object oriented program object instantiated class data members methods class instantiated object 
representation instances method set statements method identified slicing algorithm horwitz includes statements different instances method 
tasks debugging program understanding focus attention object time 
want identify statements methods particular object affect slicing criterion call object slicing 
slice object criterion obtain complete slice sdg 
identify message sending callsites marked slicing algorithm methods invoked callsites methods affect 
identify statements methods included slice invocations selected callsites call statements slice 
identify message sending callsites marked slicing algorithm examine vertices object flow subgraph method procedure constructed 
passed parameter method procedure traverse binding edge callsite continue examine object flow subgraph formal parameter object called method procedure 
traversal continues callsites object examined 
statement method affect ways 
affect actual parameter message sending callsite calls turn affect 
case occurs execution occur return callsite 
set set actual vertices marked phase slicing algorithm compute slice entire program 
statement reach formal vertex bound path consisting vertices identify type statement backward traversal second affect path consisting vertices identify type statement backward traversal third affect affecting actual parameter message sending callsite case reach path traverse parameter edge 
means executed return callsite identify type statement mark set 
marking done backward traversal traversing parameter edges 
marking accomplished adding mark actual parameter vertices perform phase slicing algorithm 
case set extra mark callsites mark set identify set backward traversal marked actual parameter vertices 
easy see statement object method affect marked cases 
process compute slice 
discussion assume method invoked handle message method call methods 
assumption hold search statement may require backward traversal methods 
handle situation identify message sending callsite mark methods involved handling message 
mark methods forward traversal called method class call graph 
marked methods methods affect 
way algorithm handles situation distinguish parameter binding edges associated procedure callsites parameter binding edges associated message sending callsites parameter binding edges associated procedure callsite called intra object binding edges parameter binding edges associated message sending callsite called inter object binding edges 
intra object edges intra object parameter edges inter object parameter edges inter object parameter edges 
inter object binding edges represent boundaries objects 
search affect slicing criterion phase algorithm 
discussed previous paragraphs backward traversal begins parameter vertex case slicing criterion case actual parameter vertex case 
phase algorithm traverses backwards data dependence edges control dependence edges summary edges intra object parameter edges caller callee marked class call graph 
second phase vertices marked phase algorithm traverses backwards edges inter object binding edges intra object parameter edges 
vertices reached traversal slice 
shows part sdg program 
obtain slice statement base algorithm computes complete slice shaded vertices sdg 
algorithm identifies callsites base marked slicer 
algorithm concludes statements base base base affect execution slicing criteria identify statements base base algorithm performs backward traversal formal parameter base marks base 
identify statements base algorithm performs backward traversal slicing criteria going inter object binding edge 
algorithm marks vertices 
shaded vertices dotted boundary depict vertices identified algorithm 
graph see slice obtained usual slicing algorithm includes statements method slice omits statements statements instance affect slicing criterion 
glance slicing object may expensive process obtain complete slice program 
object slicing browse slices object oriented program technique object slicing quite efficient need slice entire program slice object need traverse portion system dependence graph related object considered 
approach extend sdg represent object oriented programs 
compared existing approaches representation support precise slicing distinguishes data members belonging different objects represents data members objects parameters considers effect polymorphism callsites parameters 
ef ba base base ba ba vm vm base main slice 
system dependence graph program 
ficient algorithm construct sdg objectoriented program 
new concept object slicing enables user inspect effects particular object slicing criteria 
object slicing provides better support debugging program understanding large scale programs 
provide efficient mechanism represent classes class libraries represent incomplete program 
space limitations techniques 
includes implementing sdg construction algorithm assessing effectiveness efficiency sdg represent object oriented programs static slicing object oriented program phase slicing algorithm 
acknowledgments supported part microsoft nsf nyi award ccr ess award ccr ohio state university 
agrawal 
slicing programs jump statements 
proceedings sigplan conference programming language design implementation pages june 
aho sethi ullman 
compilers principles techniques tools 
addison wesley boston ma 
chatterjee ryder 
scalable flow type inference statically typed object oriented languages 
technical report dcs tr rutgers university august 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
gallagher lyle 
program slicing software maintenance 
ieee transactions software engineering august 
grove defouw dean chambers 
call graph construction object oriented languages 
proc 
object oriented prog 
sys lang appl pages oct 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
jackson rollins 
new model program dependence reverse engineering 
proceedings second acm sigsoft conference foundations software engineering pages december 
landi ryder zhang 
interprocedural modification side effect analysis pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
larsen harrold 
slicing object oriented software 
th international conference software engineering pages mar 
reps horwitz sagiv 
speeding slicing 
proc 
second acm conf 
foundations softw 
eng pages dec 
tip 
survey program slicing techniques 
journal programming languages sept 
tonella antoniol merlo 
flow insensitive pointers polymorphism analysis application slicing 
th international conference software engineering pages may 

