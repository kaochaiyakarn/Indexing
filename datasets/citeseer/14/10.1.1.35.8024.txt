wrl technical note tn systems late code modification david wall western research laboratory university avenue palo alto california usa western research laboratory wrl computer systems research group founded digital equipment 
focus computer science research relevant design application high performance scientific computers 
test ideas designing building real systems 
systems build research prototypes intended products 
second research laboratory located palo alto systems research center src 
digital research groups located paris prl cambridge massachusetts crl 
research directed mainstream high performance computer systems 
prototypes intended computing environments digital customers 
long term goal wrl aid accelerate development high performance uni multi processors 
research projects wrl address various aspects high performance computing 
believe significant advances computer systems come single technological advance 
technologies hardware software advance pace 
system design art composing systems level technology appropriate balance 
major advance system performance require reexamination aspects system 
design fabrication packaging hardware language processing scaling issues system software design exploration new applications areas opening advent higher performance systems 
researchers wrl cooperate closely move freely various levels system design 
allows explore wide range tradeoffs meet system goals 
publish results variety journals conferences research reports technical notes 
document technical note 
form rapid distribution technical material 
usually represents research progress 
research reports normally accounts completed research may include material earlier technical notes 
research reports technical notes may ordered 
may mail order technical report distribution dec western research laboratory uco hamilton avenue palo alto california usa reports notes may ordered electronic mail 
addresses digital net wrl techreports darpa internet wrl techreports dec com wrl techreports dec com uucp wrl techreports obtain details ordering electronic mail send message addresses word help subject line receive detailed instructions 
systems late code modification working david wall june western research laboratory university avenue palo alto california usa modifying code compiler generated useful optimization instrumentation 
compares code modification systems mahler pixie describes new systems built hybrids 
covers material code international workshop code generation schloss dagstuhl germany may 

late code modification process modifying output compiler compiler generated 
reasons want fall categories optimization instrumentation 
forms optimization performed assembly level code 
oldest peephole optimization acts tidy code compiler generated generalized include transformations machine independent code 
reordering code avoid pipeline stalls done code generated pipeline stalls easier see 
forms optimization depend having entire program hand 
environment separately compiled modules may mean apply optimization machine level code 
global reorganization code reduce instruction cache misses example 
intermodule allocation registers variables mahler system chose register variables linking modified object modules linked reflect choice 
register allocation fairly high level optimization approaches taken monolithic compilation source modules intermediate language modules compilation program summary databases 
optimization removes unnecessary operations instrumentation adds 
common form machine level instrumentation basic block counting 
transform program equivalent program counts basic block executed 
running instrumented program gives execution count basic block program 
combine counts static information uninstrumented program get profile information source level procedure invocation counts instruction level load store counts 
events want count require inter block state 
counting pipeline coprocessor stalls example done basic block counting stall guaranteed finish leave basic block 
counting branches taken fallen distribution destinations indirect jumps examples 
instrumentation count events harder counting basic blocks requires different instrumentation 
kinds instrumentation hard code modification 
address tracing purposes cache modeling done instrumenting places loads stores occur places basic blocks 
study compared software register allocation hardware register windows instrumenting code keep track procedure call depth counting example times machine register windows overflow buffer windows 
naturally certain kinds transformation best done reach code 
transformations macro expansion usually defined source transformations nearly implemented 
global movement systems late code modification operations loops principle done machine level sense earlier semantics program easily available 
inline procedure expansion useful followed normal global optimizations act specialize body expansion inline expansion done machine level 
clear wide variety transformations purposes optimization instrumentation done machine level code 
compares existing systems late code modification finds advantages disadvantages describes new systems built represent compromises combining advantages disadvantages 

overview late code modification 
different questions address 
decide modifications 
modifications get working program 
depends transformation 
basic block counting simply insert load add store block increment counter associated block 
register allocation decide variables keep registers hard part delete loads stores variables modify instructions values loaded stored 
case discuss decide changes passing 
main problems associated making modifications correctly 
adding deleting instructions causes addresses things change 
able correct changes addresses right 
second modifications may need resources acquired 
commonly resources registers example block counting need register increment hold address count vector 
code modification system knows program address problems introducing overhead transformed program 
system suitable medium optimization instrumentation 
forced introduce overhead deal problems dynamically statically optimization feasible large overhead reduce usefulness system instrumentation 
look systems late code modification compare approaches 

mahler mahler system back code generator linker titan experimental workstation built 
mahler system code modification linker 
wide variety transformations possible systems late code modification intermodule register allocation instruction pipeline scheduling source level instrumentation compatible gprof instruction level instrumentation basic block counting address tracing 
linker decides usual manner modules link including modules extracted libraries 
passed module rewriter modifies transformations requested 
transformed modules passed back linker proper links just originally come object files 
correcting changed addresses easy context 
object module contains loader symbol table relocation dictionary mark places unresolved addresses 
unresolved address may depends imported symbol value known may known relative current module change module linked modules 
case linker responsible resolving relocation dictionary tells linker kind address information lets correct value leaving relocation entry place linker correct 
addresses marked relocation position relative addresses change module linked 
manifest instruction format case pc relative branch instruction 
instructions inserted branch destination increase magnitude displacement instruction word 
module rewriter applying transformation requires new registers block counting easy obtain global register allocation done linker 
choose allocate fewer registers maximum reserving instrumentation code 
leads overhead variables registers live memory loaded stored needed 
titan registers losing difference performance 
mahler code modification easier combination circumstances 
presence loader symbol table means compiler pass hints 
second mahler compiler back high level language compilers assembler available titan means code module rewriter sees guaranteed produced mahler compiler 
example titan variable shift instruction operation implemented indexed jump series constant shift instructions 
code modifier careful damage idiom havoc example changed order shifts 
mahler compiler flags idiom symbol table entry tells module rewriter handle cases theory troublesome 
computation kind added result pc jumped address difficult correct address statically 
computation possible implementation case statement common computation select destination table complete addresses marked relocation 
systems late code modification mahler approach code modification linker arose desire intermodule register allocation giving separate compilation 
machinery place natural instrumentation 
unfortunately means request instrumentation user relink access object modules libraries program built 
hand approach means user need recompile means need maintain instrumented versions libraries usual practice example systems support gprof 
need relink inconvenient interesting approach possible 

pixie pixie developed earl killian mips block counting address tracing modifying fully linked executable 
executable file may symbol table removed block counts normally analyzed tools need see symbol table 
approach convenient user able rebuild executable 
convenient pixie harder preserve program correctness introduces run time overhead doing 
mahler address correction easy 
pc relative branches jumps easy recognize pixie change displacements just mahler 
indirect jumps pose problem destinations computed points program longer relocation dictionary recognize points 
pixie constructs big translation table maps code addresses original program code addresses modified program 
table built modified executable indirect jump preceded code translates run time lookup table 
pixie knows computing code address computes old version address runtime translation lookup correctly regardless address came 
leads odd expansion jump link instruction expands ordinary jump pair instructions load return address unmodified program 
fortunately pixie data addresses change code segment gets larger 
convention data segments mips systems occupy place address space far removed code segment ample room code segment grow affects data addresses 
convention data addresses change fact mahler titan pixie loads stores extra level indirection just indirect jumps 
instrumentation added pixie needs registers steal registers program 
pixie accomplishes maintaining memory locations user values registers replacing uses registers uses memory locations 
mips processor load store architecture adds overhead systems late code modification typically small compared overhead instrumentation 
registers pixie purposes temporaries expansions user instructions 
pick registers steal pixie looks registers fewest number static 
pixie uses hints compiler fact knowledge patterns code compiler generates 
means tolerate assembly code code foreign compilers sure adhere mips compiler conventions 

need 
pixie convenient incurs fair bit runtime overhead 
far majority indirect jumps subroutine returns ordinary direct calls 
cases overhead going address table logically unnecessary 
want instrumentation overhead probably acceptable certainly times want lightweight instrumentation 
case overhead unsuitable vehicle optimization 
mahler loader information lets transform program smaller runtime overhead 
built titan linker depends unknown extent integration back compiler linker 
currently targeted titan family retargeted mips 
compromise mahler pixie order 
pixie overhead logically necessary instance procedure certain called directly calls returns safely translated calls returns going address table 
mips compilers backend sure understanding coding conventions mahler titan 
variant pixie paid attention compiler conventions information able reduce overhead significantly optimization instrumentation 
rest describes prototypes compromises built 

nixie compromise built system called nixie 
nixie works pixie certain assumptions code modifies 
framework approach threefold 
mips architecture strong bias favor return address register 
second direct jump link jal jump register jr instructions normal procedure call return original code just fine modified code provided change literal destination field old address new 
third mips compilers back code generator coding conventions uniform compiled code 
systems late code modification nixie assumes jr fact return sensibly jal call leaves unchanged 
jump link register instruction assumed indirect call procedure address instruction operand register instruction preceded address translation code look procedure address convert old space new 
far wrong assumed jr indexed jump case statement 
handle noting mips code generator produces distinct code templates indexed jumps 
examining instructions jr confirm jr indexed jump case statement determine address size associated jump table read data segment 
allows translate entries table statically need insert translation code 
hole argument program contain code originally written assembly language 
code produced code generator follow conventions 
users tend write code uncommon standard libraries 
fortunately assembly routines libraries follow conventions purposes return seldom case statements 
standard libraries nixie knows dozen assembly routines unusual jumps 
finds executable looking file name loader symbol table pattern matching code address confirm routine really library 
symbol table absent nixie searches entire executable patterns 
nonstandard routines nixie marks violations know 
jump unable explain analysis triggers error message 
programs procedure variables normally able translate jumps cleanly runtime address table include address table transformed executable 
accomplishing conveniently assigned meaning jumps distinguishing procedure calls procedure returns case statement indexed jumps 
lets consider doing global analysis control structure program 
reduction zero runtime overhead doing program transformation ability global analysis means able technique low level optimization instrumentation 
hand certain assumptions necessary 
assumed jal procedure call false understanding global structure may suffer 
seriously assumed jr return false translate destination jump correctly transformed program won run correctly 
remove runtime address table 
mahler needed nice dispense general 
motivation second compromise system 
systems late code modification 
mahler address translation statically operates object files loader symbol tables relocation dictionaries 
wanted pixie tool way didn want change standard linker 
option tool transform individual object file apply object files turn inconvenient include library files 
solution assume completely linking program retaining loader information 
practice easy standard linkers option incremental linking lets link object files essentially big object file linked form complete executable 
case link pretend linker keep relocation information want 
done modify result manner mahler 
code data contains address marked relocation self evident pc relative branch 
mahler system translates code addresses appear code code addresses appear data relocation dictionaries symbol table 
mahler system need translate data addresses addresses data segments change 
resulting system nearly identical structure nixie called glue holding executable visible 
need runtime address translation 
applications need thorough analysis program jumps basic block counting example care jr case statement subroutine return need know safe translation 

pitfalls tricky bits worth explaining 
occasionally reason code data segment 
example instruction constructed fly emulation purposes 
code modification systems discussed understand possibility instrument code 
fortunately code arises seldom 
counting basic block probably skew results 
hand branching code data segment back code segment easily confuse doing transformation requires understanding control flow 
occasionally reason data code segment 
mips fortran compiler puts constant arguments subroutines text segment 
documentation pixie suggests early version mips fortran compiler presumably pass arguments secure knowledge protection violation occur subroutine tries modify 
don know doesn put read data segment 
systems late code modification code segment data part implementation format statements 
problems data code segment 
access data address code segment code modification probably change address 
second mistake data code may instrument modify causing computations depend get wrong values 
pixie nixie deal problems including copy original code modified code segment 
loads stores addresses translated jumps address lead old unmodified code 
means look right place get unaltered value 
corrects addresses statically relocation dictionary address lead right place modified code 
won help include copy original code 
distinguish instructions data code segment sure alter 
fortunately turns mips loader symbol table contains information possible 
information lets nixie determine symbol table including old code necessary 
nixie uses runtime address translation table indirect procedure calls program 
unfortunately standard library routine called takes procedure address argument indirect calls procedure 
called programs part normal exit sequence 
translation table time nixie recognizes routine recognizes direct calls 
inspects instructions calls find instructions compute procedure address passed 
instructions compute literal address usually case nixie simply modifies compute corrected address 
admittedly unsafe called indirectly case recognize call won translation argument 
pixie problem code addresses translated time run time pixie modification time 
mips titan architectures delayed branches branch jump taken instruction branch called branch slot executed control transferred 
code modification may replace branch slot instruction series instructions 
case just leave instructions place executed take branch 
fortunately branch slot filled instruction branch case expansion instruction safely moved back branch 
technical term 
systems late code modification may incorrect simply move slot back branch slot changes register branch uses 
case possible approaches 
duplicate expansion replace conditional branch slot instruction reverse conditional branch nop slot expansion unconditional branch nop slot expansion careful nops 
roughly pixie 
choice expand evaluate condition slot expansion branch nop nixie bad reason didn understand tricky property relocation dictionaries thought impossible correctly duplicate code marked particular kind relocation 
pixie approach longer simpler works better case branch branch slot 
pixie simply consider part expansion branch expansion slot 
contrast ugly thing changes happen example assembler filled branch slot moving instruction destination block fall block 
safe register changed instruction set alternative block 
specifically mips loader format pair related operations uses relocate pair instructions compute bit address combining bit parts 
relocation entries consecutive dictionary inspect instructions know relocate 
problem arises slot instruction relocated associated relocation appears branch 
duplicate expansion slot entries entry thought illegal 
practice followed number long assumptions 
happen explicitly assembly code course occurs result pipeline scheduling branch slot filled fall block fall block destination branch 
systems late code modification conditional branch ll slot instruction evaluate condition branch nop ll false slot expansion branch nop branches ll follow right path 
works distinctly inelegant 
system calls problems systems 
system calls allowed destroy registers unsuitable choices bookkeeping registers 
trap restores values data structure pixie nixie precede trap code copies saved values bookkeeping registers memory representation stores bookkeeping values registers data structure 
addition call involves text address eventually transferred operating system kernel 
code kernel modified tools pixie nixie precede traps code translate address 
need original address computation relocation entries cause translate 
want just termination write file basic block counts insert code exit system trap pixie nixie way 
probably biggest pitfall pattern matching recognize certain library routines 
relatively fail soft routine listed symbol table match pattern triggers warning jump classified triggers error 
patterns specific new version library routine probably fail match 
right solution raise level assembly language slightly assembly code adheres conventions compiled code 
simple way requiring assembly programmer explain violations conventions encoding explanations symbol table 
wish change assembler attractive solution develop tool looks violations libraries asks nixie maintainer categorize 
explanations turn generate patterns nixie 
systems late code modification mahler nixie pixie doduc eco egrep eqntott espresso fpppp gcc grr li linpack livermore matrix met nasa sed spice stanford tomcatv yacc means runtime address table required add means original code required add 
ratio code size original 

numbers prototype version nixie 
compare code modification mahler pixie implemented basic block counting 
shows expansion code size variety programs 
ratio code size reflects difference size executable instructions original instrumented versions 
addition pixie occasionally nixie need address translation table converts old addresses new long original code segment 
pixie nixie need original code included instrumented code data items exist code segment 
practice pixie nixie align pieces particular boundaries convenience resulting larger instrumented versions believe logically necessary empty space pieces counted 
systems late code modification mahler nixie pixie doduc eco egrep eqntott espresso fpppp gcc grr li linpack livermore matrix met nasa sed spice stanford tomcatv yacc means runtime error unmodified program means run short resolution system clock 
ratio runtime original 
shows ratio execution times 
interesting increase execution time typically increase executable code size 
versions slowed cache misses comparable versions 
long blocks expansion proportionately smaller executed frequently short ones 
tell mahler nixie perform transformations counting leave actual counting code 
tells expansion code space time overhead stealing bookkeeping registers possibly doing runtime address translation opposed instrumentation 
shows result 
see expense bookkeeping overhead small amusing adding overhead nixie grr faster 
see smaller time space expansion nixie comparison pixie come nixie ability address translation statically 
see nixie optimization quite feasible forced introduce little translation overhead 
mahler time space expansion due overhead nearly negligible largest systems late code modification code size run time mahler nixie mahler nixie doduc eco egrep eqntott espresso fpppp gcc grr li linpack livermore matrix met nasa sed spice stanford tomcatv yacc means runtime address table required add means original code required add means runtime error unmodified program means run short resolution system clock 
ratio time space overhead code instrumentation code increase runtime runtime decreased slightly cases 
overhead small partly register allocation integrated closely instrumenter titan registers away important register mips architecture 

late code modification system compromises integrated approach mahler conservative stand approach pixie possible 
prototypes systems nixie require different amounts compile time information preserved 
overhead systems usually quite small 
nixie correct symbol table information pixie resulting modified file run systems late code modification debugger extent original 
may matter instrumenting transformation easier debug instrumentation process important nixie optimizing transformations 
nixie understanding code program assign meanings jumps program allowing entire control structure determined 
mean global analysis structure 
understanding global control structure may look tools low level global optimizations register allocation pipeline scheduling 
case able instrumentation 
aaron goldberg experimented general form nixie approach part summer project am indebted stimulating discussions 
know pixie learned disassembling code produces way earl killian hint am grateful 
particular earl run time address translation far know entirely invention 
helpful criticisms anita borg bill scott mcfarling 
anita borg kessler georgia david wall 
long address traces risc machines generation analysis 
seventeenth annual international symposium computer architecture pp 
may 
detailed version available wrl research report september 
jack davidson christopher fraser 
code selection object code optimization 
transactions programming languages systems pp 
october 
jack davidson christopher fraser 
register allocation exhaustive peephole optimization 
software practice experience pp 
september 
phillip gibbons steven muchnick 
efficient instruction scheduling pipelined architecture 
proceedings sigplan symposium compiler construction pp 

published sigplan notices july 
aaron goldberg john hennessy 
method detecting memory bottlenecks 
wrl technical note tn december 
systems late code modification susan graham peter kessler marshall mckusick 
gprof call graph execution profiler 
proceedings sigplan symposium compiler construction pp 

published sigplan notices june 
john hennessy thomas gross 
postpass code optimization pipeline constraints 
acm transactions programming languages systems pp 
july 
norman jouppi jeremy dion david boggs michael nielsen 
architecture papers 
wrl research report april 
earl killian 
personal communication 
scott mcfarling 
program optimization instruction caches 
third international symposium architectural support programming languages operating systems pp 
april 
published computer architecture news operating systems review special issue sigplan notices special issue 

peephole optimization 
communications acm pp 
july 
mips computer systems 
programmer guide 
mips computer systems ave sunnyvale california 

michael nielsen 
titan system manual 
wrl research report september 

register allocation procedure module boundaries 
proceedings sigplan conference programming language design implementation pp 

published sigplan notices june 
peter steenkiste john hennessy 
simple interprocedural register allocation algorithm effectiveness lisp 
acm transactions programming languages systems pp 
january 
david wall 
global register allocation link time 
proceedings sigplan symposium compiler construction pp 

published sigplan notices july 
available wrl research report 
david wall 
link time code modification 
wrl research report september 
david wall michael powell 
mahler experience intermediate language machine description 
second international symposium architectural support programming languages operating systems pp 
october 
detailed version available wrl research report 
systems late code modification david wall 
register windows vs register allocation 
proceedings sigplan conference programming language design implementation pp 

published sigplan notices july 
available wrl research report 
wrl research reports titan system manual 
architecture papers 
michael nielsen 
norman jouppi jeremy dion david boggs research report september 
ael nielsen 
wrl research report april 
global register allocation link time 
david wall 
fast printed circuit board routing 
wrl research report october 
jeremy dion 
wrl research report march 
optimal heat sinks 
william 
compacting garbage collection ambiguous wrl research report october 
roots 
joel bartlett 
mahler experience intermediate wrl research report february 
language machine description 
david wall michael powell 
experimental literature internet wrl research report august 
annotated bibliography 
jeffrey mogul 
packet filter efficient mechanism wrl research report august 
user level network code 
jeffrey mogul richard rashid michael measured capacity ethernet myths accetta 
reality 
wrl research report november 
david boggs jeffrey mogul christopher kent 
fragmentation considered harmful 
wrl research report september 
christopher kent jeffrey mogul 
wrl research report december 
visa protocols controlling inter organizational datagram flow extended description 
cache coherence distributed systems 
deborah estrin jeffrey mogul gene tsudik christopher kent 
anand 
wrl research report december 
wrl research report december 
register windows vs register allocation 
scheme portable scheme compiler 
david wall 
joel bartlett 
wrl research report december 
wrl research report january 
editing graphical objects procedural optimal group distribution carry skip representations 
adders 
paul 
silvio 
wrl research report november 
wrl research report february 
usenet cookbook experiment precise robotic paste dot dispensing 
electronic publication 
william 
brian reid 
wrl research report february 
wrl research report december 
simple flexible datagram access controls long address traces risc machines unix gateways 
generation analysis 
jeffrey mogul 
anita borg kessler georgia david wrl research report march 
wall 
wrl research report september 
link time code modification 
nfs implementation performance david wall 
cache consistency protocols 
wrl research report september 
srinivasan jeffrey mogul 
wrl research report may 
noise issues ecl circuit family 
jeffrey tang leon yang 
available instruction level parallelism research report january 
scalar machines 
norman jouppi david wall 
efficient generation test patterns wrl research report july 
boolean 
tracy 
unified vector scalar floating point wrl research report february 
architecture 
norman jouppi jonathan david papers test pattern generation 
wall 
tracy 
wrl research report july 
wrl research report march 
architectural organizational tradeoffs virtual memory vs file system 
design cpu 
michael nelson 
norman jouppi 
wrl research report march 
wrl research report july 
efficient workstations passive monitor integration packaging plateaus processor ing local area networks 
performance 
jeffrey mogul 
norman jouppi 
wrl research report july 
wrl research report july 
dimensional thermal model vax mips sustained bit cmos multi chip units sor high ratio sustained peak john fitch 
performance 
wrl research report july 
norman jouppi jeffrey tang 
wrl research report july 
livermore magic release 
robert mayo michael arnold walter scott distribution instruction level machine don stark gordon 
parallelism effect performance 
wrl research report september 
norman jouppi 
wrl research report july 
pool boiling enhancement techniques water low pressure 
wade john fitch william van carey 
wrl research report december 
writing fast servers dumb color frame buffers 
joel 
wrl research report february 
analysis power supply networks vlsi circuits 
don stark 
wrl research report april 
procedure merging instruction caches 
scott mcfarling 
wrl research report march 
wrl technical notes tcp ip print server protocol 
effect context switches cache brian reid christopher kent 
performance 
wrl technical note tn september 
jeffrey mogul anita borg 
wrl technical note tn december 
tcp ip server architecture implementation 
method detecting memory christopher kent 
bottlenecks 
wrl technical note tn november 
aaron goldberg john hennessy 
wrl technical note tn december 
smart code stupid memory fast server dumb color frame buffer 
predicting program behavior real 
profiles 
wrl technical note tn september 
david wall 
wrl technical note tn december 
aren operating systems getting faster fast hardware 
systems late code modification 
john ousterhout 
david wall 
wrl technical note tn october 
wrl technical note tn june 
copying garbage collection picks generations 
joel bartlett 
wrl technical note tn october 
limits instruction level parallelism 
david wall 
wrl technical note tn december 

