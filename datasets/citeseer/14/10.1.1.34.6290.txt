model data integration re environmental decision support systems technical report idsia andrea idsia istituto molle di studi lugano switzerland richard davis csiro land water canberra australia david abel csiro mathematical information sciences canberra australia may presents software architecture management environmental models 
systems theory representation models embedded object oriented approach emphasises separation models data promoting model data integration re 
concepts correspond requirements model management system mms 
shown decision support system approach implement mms order facilitate problem definition domain base problem solution model base 
keywords model management model integration re environmental decision support systems 
summary large number water related models developed years covering topics rainfall stream water quality flood prediction ground water accession increasing demand managers models handle complex environmental problems 
difficult simply link existing models integrated models problems models originally designed standards allowed linking 
difficulties intertwining user interfaces models lack modular construction differing computer languages poor documentation conceptual limitations assumptions lack standardization input output structures 
advent object oriented approaches computer science systematic modular development new models feasible technology increasingly adopted modellers writing new models 
standards need set modelling community ensure maximum re usability component models 
sections provide basis object oriented approach concept encapsulation component models 
existing models pose problem 
investment legacy models impractical discard rewrite object oriented form 
various approaches legacy models efficient properly designed object oriented models 
hydra project decision support system explorations approach 
environmental problems lie cross roads multiple disciplines reason described set interacting models 
instance model lake model describe processes ecological processes 
decomposed sub models uptake food web processes 
integrated models need embedded decision support systems dss help managers assess environmental impacts various policies decisions 
standard dss composed modules data base management system dbms model base management system mms dialogue generation management software 
necessary characteristics mms module 
mms able create new models quickly easily 

model building blocks mms contain cognitively meaningful chunks knowledge user 

mms able inter relate models appropriate linkages providing functions model integration model decomposition sequential model processing concurrent model processing 

mms able manage model base functions analogous data base management 
mms able decompose query sequence data retrievals model invocations retrievals 

meta level encyclopedia analogous dbms data dictionary includes repository data heuristics tasks models users relationships 
characteristic added order include legacy models widespread 

mms able incorporate executable models written modellers connect models seamless way 
proposals develop arisen management science operation research artificial intelligence system theory 
authors particular dealt issues common ground ideas exposed 
example bhargava discuss embedded language technique 
model languages natural language mathematical formulae common tools modellers express ideas flexible contain information modelling domain information sources logical causal relationships model entities data descriptions propose embedding language incorporates extra information 
hong greenberg pursue approach measurement theory represent mapping domain world model base 
domain world composed individual level class level 
aim enhance model re usability integration general description model mechanism independent specific application 
notable example approach model management model management system implemented unix workstation 
uses model description language allows user define general type modules atomic version modules instances general type ones 
previously cited works experience originated mainly management sciences field focus solving integrating mathematical programming problems 
aimed presenting architecture mms suited solve environmental problems 
class problems characterised strong spatial temporal characteristics point mms design needs include features assist linking spatial temporal models 
environmental modellers interested comparing different model formulations solve problem uncertainty data parameters model structures reason mss design incorporates requirement 
authors agreed object technologies ot answer requirements 
object technologies include objectoriented analysis design programming paradigms tools develop software projects 
object orientation mainly concepts abstraction encapsulation hierarchy 
paraphrasing booch definitions abstraction purpose denoting essential characteristics object providing defined conceptual boundaries encapsulation separates puts compartments elements abstraction separates interface abstraction implementation hierarchy ranking ordering abstractions 
explain model representation technique promote model data re particular attention environmental models 
mms environmental models vast majority models describing environmental systems natural resources dynamic models modellers interested change systems time response external actions 
instance global warming models try infer relationship level emissions change temperature different parts globe period years 
traditional modelling relied assessed formalism proposed systems theory inputs states outputs parameters represent data 
state transition function output transformation operations performed data 
inputs outputs connected create complex models required environmental modelling 
design mss object technology proposed mathematical formalism systems theory theoretical foundations applied order enhance facilitate essential functions model prototyping data access model tion 
reason mms due increasing complexity environmental models multi disciplinary components involving fields hydrology ecology control engineering modeller faced difficult task integrating technologies integrate sub models build big picture 
body knowledge environmental sciences consequently number models constantly increasing 
model bases model directories created able tap knowledge software technologies resources available see instance 
issue building dss support solutions real world problems time cost assemble modelling systems data resources integrate information systems usable planners managers 
unusually means dsss completed problem effectively solved means 
remainder main entities introduced domain base model base 
entities introduced order separate description data items domain description data combined infer expected behaviours models 
domain base deductive modelling process typically stems deep study real world 
leads identification classes basic entities included model 
modeller starts hypothesise kind relations existing entities formalises relationships mathematical tools 
modeller arrives satisfactory description phenomenon lot exploration structure model 
tool allow user substitute model re model easily manage data links speed process 
modelling software environments separate models data focus models fed alternative data sets 
parameter calibration main problem 
approach mms reversed data sets transformed models applied 
approach allows modeller perform traditional parameter calibrations examine alternative model structures comparing different models behave data sets evaluating relative performance indicators 
required models written respect available data order able substitute model automating data formatting conversions enforcing consistency data usage models 
im plementation requirements leads possibility effective re models data 
practice wants substitute sub model complex inter connected model necessary re establish interface connections new sub model surrounding ones redefine data base access path parameter input state output variable 
approach various mms academic commercial 
re usable models define kind data produce format state explicit data base access paths 
mechanism implements different approach explained sections concepts domain classes domain objects models introduced 
domain classes objects domain objects instances general structured data types domain classes 
domain classes designed achieve generality re usability models written mapping data sets data attributes domain classes 
model applied instance problem uses domain class attribute names access corresponding attributes domain objects turn point data sources 
note different models refer domain class 
domain classes play role data types define generalisations modelled objects common features 
usually domain class provides general description entity class flat watersheds 
domain object instance particular case 
domain classes concept data types inspired mix concept object oriented classes frames database schemas prototype systems 
analogue data types classes database schemas provides generalisation similarities prototype systems maintain possibility expanding problem definition incrementally modifying existing domain class definitions 
union domain classes defines structure domain base 
domain classes decomposed sub classes 
sub classes organised hierarchy classification encapsulation principles 
classification relationship structure domain base concept inheritance 
domain classes classified nature relationships 
instance class steep watersheds class flat watersheds derive basic properties general watershed class flat watershed class characteristic data attributes flood plain attribute steep watersheds 
encapsulation allows different description levels provides ca describing big components sum smaller ones part relationships 
example watershed composed number sub watersheds 
leads object oriented implementation data structures analogous non normal form database table 
information kept self standing information pools 
domain base structure depends particular solution strategy modeller mind 
practice try general possible designing domain classes 
possible specialise descriptions modelling process 
structure domain classes domain class data type characterised set data attributes 
data attributes domain class provide description data filled actual data values instance domain object created 
data attributes classified role input output local 
domain objects may communicate exchange information 
flow information take place interface domain class defined input output data attributes 
local data attributes hidden external domain classes 
example domain class describes watershed input data attribute rainfall gauging stations output attribute measured watershed flow local data soil types watershed area 
purpose classification encapsulation basic compound domain classes defined 
compound domain class subparts basic elemental building block 
basic domain class defined data structure 

superclass set superclasses basic class basic class 
basic class inherits data attributes superclass 
sets input local output data attributes defined 





domain base data item data type catalog store data attributes 
fields find name unique identifier data res input output local basic domain class 
reservoir domain class defines data types describe reservoir 
description general textual documentation meaning data item dimension physical units measure data format data type matrix reals value function returning actual value data attribute data attribute domain object usage field explained dealing compound domain classes 
shows example basic domain class representing reservoir 
input data attribute set consists inflow water 
output set reservoir water release 
local data attribute set includes reservoir storage elevation function converts volume water elevation respect value minimum maximum storage discharge functions define shape reservoir discharge 
example order show mms applied case design dss water management data specification solution optimisation problem 
compound domain class defined tuple 
superclasses components 
superclasses 

components 
compo 
superclasses set defined set superclasses current domain class inherits 
composed basic compound domain classes 
basic domain class inherit basic superclasses compound domain class derived compound domain classes 
compound domain class composed set composing classes contained components set represents parts compound domain class 
classes basic compound defined eqns 

note name assigned identify composing class compo 
compo way data elements complex data type named programming language type complex record composed real part re type double imaginary part im type double 
compound domain class data attributes composing classes hidden nested encapsulated classes 
basic domain classes compound class linked mapping defined connects inputs compound class inputs basic classes output basic classes outputs compound class outputs basic classes inputs basic classes shows layout compound domain class describing simple water system includes number subclasses catchment reservoir water consumer 
composing classes interconnected mapping reservoir receives water inflow upstream catchment 
information needed build compound domain class 
basic compound domain objects domain object instance basic domain class 
reservoir class seen previous example generate reservoir domain object modeller defines shapes storage discharge functions water system compound domain class 
spatial organisation basic domain classes tries model spatial relationships observed real world data 
specifies load store time series data associated water inflow storage release 
basic domain object defined structure 

originating basic domain class set values assigned note subsets respectively input output variables read stored data base linked data attributes domain objects shown 
way compound domain object defined 

class generate instance compound domain object data needed create sub domain objects defined eq 
set values data attributes example compound domain class water system domain object created looking domain base basic domain objects associate basic model classes 
instance water system assign catchment domain object catchment domain class lake river agricultural users 
data mappings aggregations transformations choosing put data attributes basic domain class bottom level encapsulation compound top data visibility 
decision decision depends kind model data attributes different models may wish data set different representation levels 
instance modeller interested writing aggregate model large watershed groundwater permeability coefficients area stored matrix 
model data related subarea sub matrix extracted represent properties 
data mappings introduced overcome kind problems 
data mappings occur data attributes sub domain classes mapped data attributes compound domain class 
allows modeller operate set data single instances 
typical data mappers vectors matrices lists 
data mapping preserves dimension data organising structure greater cardinality single elements 
data mapping represented vector sub domain class data attributes vector local section super domain class structure 
instance domain classes layer layer represent layers stratified lake data attribute representing nutrient concentration domain class type lake defined vector containing concentrations elements lake layer layer data aggregation operation performed data attributes compound level intensive representations extensive data attributes contained sub classes 
instance area catchment sum area sub temperature stratified lake considered equal weighted averages temperatures single layers partitioned 
data aggregation transforms set data cardinality representation lower cardinality single data item 
data aggregation typically expressed function 
example st st 
st represents local data attribute compound domain class vector contains data attributes composing domain classes 
cardinality equal cardinalities single elements st instance suppose domain classes sc sc type data attribute area 
data aggregation area defined local attribute compound domain class type catchment composed sub aggregation function defined sc sc data transformations provide low level data modifications domain objects potentially communication problems 
problems may arise data attributes may different spatial temporal scales units measurement data transformation usually simple static function changing celsius degrees fahrenheit considered model 
models model base objectives mms proposal different models interoperate seamlessly model integration able test alternative models different working conditions model re 
started model integration reuse see techniques distributed computing tiered architectures client broker server developed 
early application design environmental problems hla high level architecture approach described special issue journal decision support systems summarized number approaches 
mentioned works pointed need model encapsulation order provide consistent interfaces model functionalities 
section describe approach encapsulation environmental models 
model class data structure encapsulate mathematical formulation process modelled 
kind model classes basic compound 
basic model class flat structure sense composed model compound model consists models 
instance reservoir considered compound model seen ecosystem composed fish zoo conversely describe simple storage water water management system ecological components neglected characterised basic model 
key concept system generality model formulations order improve model re usability model classes provide way write model formulae terms data attributes domain classes 
model assigned instance domain class domain object linked data 
contains instructions retrieve data 
means model classes associated domain class instances domain class created different domain objects possible number times different model instances assuming simplicity model instance model class generated 
potentially models refer single domain class 
structure retrieving storing models model base needed 
shown authors access operations model base analogous access operations allowed data base 
particular model management system allow user find model corresponding set selection criteria modify selected model compose new model possibly assembled existing ones 
aim discuss issue model selection see forbus describe approach integrated model solver selection tool solution natural management problems 
models re usable respect domain classes 
model inputs states outputs variables assume different values simulation run parameters quantities constant limited range variation 
inputs states outputs model parameters find correspondence data attributes domain class modelling domain 
model class priori linked particular domain object class objects 
new model class data attributes different domain classes new domain class created principles aggregation inheritance 
input variables mapped input data state variables parameters local data output variables export data domain class 
mapping model variable domain class data attribute means assign context variable 
models expressed general terms formulations applied different physical situations 
consider simple example model describing decay phenomenon 
dy dt gammac independent variable represents time head reservoir voltage meaning depends domain class model assigned context 
basic models basic model class defined data structure 
theta oe 
basic domain class compound domain class set model inputs set model states set model outputs theta set model parameters 
state transition equation output transformation describe model systems theory approach oe respectively 
input state output parameter sets defined 
um 




theta 

sets constitute model interface 
model variables parameters represented data type model data item fields name unique identifier symbol description textual description meaning variable parameter dimension unit measure format data type cardinality link data source 
field detailed paragraph 
link field great importance specifies models get inputs states parameters put outputs 
stated eq 
model classes associated domain classes order create model instances data stored related domain object 
example instance discrete time model reservoir created retrieving continuous functions reservoir domain object create release tables 
tables characteristic parameter reservoir model set storage discharge functions alternative models generated changing discretisation inflow storage control inputs reservoir 
case link field provide data attribute domain class data transform function function needed convert data format domain class model class 
example may provided inflow reservoir 
interested simulating different models reservoir input data set 
case link field data attribute reservoir model class 
optional data transform function convert data sampling time series stored reservoir domain object sampling needed run model 
user define links implement data transform functions operations valid model instances generated model class 
shows model data attributes linked ones domain class 
model input linked input data attribute reservoir domain class 
model input reservoir storage time related local data attribute model output storage time 
noteworthy model input output refer local data attribute common discrete time model describe behaviour continuous process water balance reservoir 
linked corresponding data attributes reservoir class 
links contain data transform functions map continuous functions reservoir class discrete representation needed model 
shown different model classes refer domain class 
example modeller created instance domain class catchment model instances derived differ kind model formulation employed arx model takes account exogenous inputs rainfall arma model 
figures model inputs outputs dangling basic model component compound model 
new situation link field refers elements input output state parameter sets compound model 
explanation usage section describing compound models 
basic model related compound domain class 
fact domain object described models different scales resolution 
modeller organise knowledge modelling domain structured way domain classes sub domain classes 
modelling domain accessed model written modeller shallow view domain 
convenient basic model operate domain class deep data structure composed sub classes 
basic model able access data data aggregations mappings 
example reported black box arx model describes compound domain object represents catchment 
representation compound domain object sub different rainfall measurements gauged 
measurements aggregated average 
situation common modeller wants integrate legacy model written independently description domain base framework 
reservoir basic model class linked reservoir class symbolic links drawn associate data source model variables ww ww arma model class model instance model class domain object catchment instance instance arx model class arma model arx model domain object generate multiple model instances catchment arx model catchment basic model associated compound domain object 
compound models basic models compound models built domain classes 
frequently happens set domain objects arranged particular structure satisfies particular compound model 
example provided compound model watershed 
real world watershed modelled structure complex set interconnected sub watersheds describes structure compound watershed 
hand compound model stratified lake composed set basic models layer applied wide variety cases particular lake 
compound model identified domain class non empty set sub parts unique model identifier set sub parts domain class put relation sub domain class model unique identifier influence links data data domain classes 
compound model defined 
components 
domain class components list model classes compose compound model defined follows components 
mclass model mclass 
mapping describing linkages model classes compose compound model 
mapping defined note composing models directly linked 
data exchange happens special local data attributes ensure re usability sub models explained section 
data attributes compound model classified input local output defined 
um 




data type local data differs data type lacks link field purpose data attributes provide intermediate storage connect outputs inputs composing sub models access data storages 
example compound model class reported 
input data attributes exogenous input input disturbance catchment state reservoir storage water release decision data attributes provide input interface model useful operating compound model shown section 
local data attributes catchment input reservoir model reservoir water release fed water consumer model 
output data attributes catchment reservoir states time step step cost time 
arrows directed sub models inputs compound model inputs signify data retrieved compound model fed sub models 
hand arrows directed sub models outputs compound model outputs 
means output values stored outputs compound model sub models outputs refer 
interchanging connecting models focal point mms architecture model interchangeability 
means model applied various objects object modelled different models different simulation runs 
new model applied object new data set may accessed 
shown lattice generic domain class describes catchment structure create different catchment instances alternative data sets represent physical catchment catchment 
example alternative model classes arx arma associated generic domain class 
allows modeller produce series model instances coupling domain objects model classes 
ww model water system model class model reservoir model catchment compound model class water system way instance generated instance arx instance arma applied case catchment 
advantage model data organisation evident assembling compound models 
compound models lake water system differ catchment model instances arx arma models 
case model substitution performed automatically mms new model instance knows gather input values store outputs user intervention required knowledge embedded model class 
model interchangeability straightforward process 
interchangeability independent interconnection 
model substitute comply interface requirements 
instance model require value rainfall required model 
case compound model overabundance model inputs happen situation substituting model endowed bigger input interface set render compound model unusable 
cases model substitution delegated system models arma arx instance models domain base model base domain base model base combined create new models 
user decide model domain model classes need re design phase 
putting mms section reports example proposed mms framework applied 
authors implementing decision support system operations multi purpose reservoirs 
system requires models optimisation generate reservoir management policy suggest operation decisions simulation assess policy performance impact 
reason models handled optimisation engines solvers simulation engines simulators 
optimisation engine implements bellman dynamic programming algorithm find optimal solution problem 
system analyst wants produce policy plug models devised purpose 
mms provides software architecture solver independent model formulation 
shows model water system linked solver input interface compound model fetches values solver dynamic programming search routine values model inputs tried cost system state couple fed back solver 
solver needs decision model defines performance indicator constraints 
solver solve model different input output interface 
solver fact reads characteristics model interface generate appropriate stimuli optimisation algorithm 
typically solver reads discretisation characteristics arma model water system model model substitution water system dp engine solver max mu sigma mu sigma model decision water system regulator water system produced solver simulator simulation horizon noise characteristics data regulator water system simulation lake water system input variables able appropriately span ranges input variables possible values discrete sets 
result optimisation regulating policy returns amount water released time state values 
catchment state observable reconstructed kalman filter 
policy state re constructor regulator model produce regulating decision 
shows regulator produce daily decisions water release 
time solver simulator feeds time series rainfall observed catchment 
measurements feed simulated model reconstruct non observable part systems state 
mms embedded dss explore impact alternative interventions management lake located border italy switzerland 
capability testing different models data sets asset evaluating management alternatives 
model management system shows modelling knowledge available data represented domain base organised order enhance model integration re 
models linked domain classes objects communicate interfaces 
models separated particular domain object re problems similar structure 
approach proposed fulfills requirements effective mms section 

proposed architecture helps modeller model data making easier re existing models create new ones 

models associated domain classes real world entities processes 
models related representations modelling domain meaning user 

mms deliberately designed allow models linked 
linkage achieved model interfaces 

mms capabilities dbms 
models stored retrieved deleted edited data items data base 
domain objects models persistent treated data items 

domain classes provide meta level data descriptions models access data types 

ability associate basic model compound domain class leads seamless integration legacy model mms 
particular relevant notice separation models data descriptions 
mms approach gives data standing models definition domain classes 
design solution allows re data models allowing user easily create modelling alternatives applied data sets 
mms design currently implemented open modelling software hydra project twolevel decision support system operations reservoir networks 
design covers requirements mms practical details settled implementation 
modelling software designs represent major step efficient modelling importance predictive models dsss efficient dss development 
bibliography abel taylor kuo integrating modelling systems environmental management information systems acm sigmod vol 

bertsekas dynamic programming optimal control athena scientific ma bhargava model management embedded languages approach decision support systems vol 

krishnan muller 
decision support demand emerging electronic markets decision technologies 
decision support systems vol 

booch object oriented analysis applications second edition benjamin cummings publishing redwood city 
corba object management group www omg org 
model integration modeling languages process perspective information systems research vol 

model integration theory models decision support systems vol 

del integrated modelling environment object oriented simulation ecological models proceedings th scs annual simulation symposium washington 
march april 
forbus compositional modelling finding right model job artificial intelligence vol 

fishwick qualitative methodology simulation model engineering simulation vol 

forrester industrial dynamics mit press cambridge ma 
davis abel zhou hydra generic design integrating catchment models american society civil engineers st annual conference water resources planning management division denver 
june 
high level architecture hla mil 
environmental decision support systems ellis horwood limited chichester 
web accessible environmental model base tool natural resources management 
proceedings 
hobart 

mcdonald eds december 
gaia available line www ess gaia 
henderson sellers davis webster edwards modern tools environmental management water quality beck eds modelling change environmental systems john wiley sons new york 
hong greenberg measurement theoretic representation large diverse model bases unified modeling language lu decision support systems vol 

lenz foster 
database ecological models 
ecological modelling vol 
pp 

available online www de html lieberman prototypical objects implement shared behavior object oriented systems proceedings oopsla portland 
minsky framework representing knowledge winston ed psychology computer vision mcgraw hill new york 
model management system supports model reuse sharing integration european journal operational research vol 

integration risk aversion average performance optimization reservoir control water 
res vol 

chignell khoshafian wong intelligent databases object oriented deductive hypermedia technologies john wiley sons new york 
pichler moreno diaz eds computer aided systems theory lecture notes computer science vol 
springer verlag berlin 
potter byrd miller kochut extending decision support systems integration data knowledge model management annals operations research vol 

davis reed farley dss catchment management ed environmental modelling vol computer methods software simulating environmental pollution adverse effects 
computational mechanics publications southampton 
integrating complementing human experience water management level dss burstein linger smith eds 
proceedings workshop intelligent decision support ids melbourne september 
robertson integrating legacy systems modern corporate applications communications acm vol 

integrated framework knowledge modeling simulation natural systems simulation vol 

colorni villa 
planning management water system case lake italy switzerland 
international workshop barriers sustainable management water quantity quality china may 
stefik bobrow object oriented programming themes variations ai magazine vol 

sprague jr carlson building effective decision support systems prentice hall englewood cliffs 
zeigler klir oren methodology systems modelling simulation north holland amsterdam 
zeigler object oriented simulation hierarchical modular models intelligent agents systems academic press new york 

