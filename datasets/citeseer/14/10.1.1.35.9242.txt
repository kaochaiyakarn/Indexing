software verification research centre school information technology university queensland queensland australia technical report proof representations theorem provers geoffrey norman watson september phone fax uq edu au fl copyright springer verlag 
note technical reports available anonymous ftp uq edu au directory pub techreports 
abstracts compressed postscript files available uq edu au proof representations theorem provers geoffrey norman watson survey proof representations current theorem provers 
aim survey ascertain range mechanisms represent proofs purposes representations put 
done simple framework 
examines internal external representations focus representations exported external proof checker 
number examples various provers series appendices 
contents aim survey construct proofs 
levels representation 
scope survey ergo 
hol 
isabelle 
nuprl 
pvs 
lp larch theorem prover 
otter 
ilf server 
imps 
mizar 
acl 
coq 
theo 
jape 
lego 
ipe 
discussion general framework 
representation user level 
representation application level representation computational level 
proofs class objects 
range representations 
primary representations 
appendices provers described mentioned survey provers described survey 
provers mentioned survey explicit definitions proof formats ergo 
nuprl 
theo 
examples formatted proofs ergo 
isabelle 
coq 
jape 
lego 
ipe 
example pvs session example ilf processing input 
output 
example hol proof file proofs take various forms 
centuries mathematicians written proofs informal semiformal style read checked mathematicians 
increasingly proofs constructed machines human assistance 
proofs checked machines 
typically machines construct formal proofs detailed sequences inferences developed strict application logical rules context theory relative proof constructed 
difference traditional mathematical proofs formal proofs just difference style foster understanding proof formal proofs tend focus validity proof relative context 
document examine ways formal proofs represented theorem provers 
term representation interpreted broad sense 
representations may range internal datastructure containing details sequence rules proof relationships steps proof simple ascii record commands user constructing proof 
obviously representation process proving considered representation proof 
aim survey survey part project develop generic representation suitable communicating proofs theorem prover external proof checker specifically context auditing proofs performed part program verification 
focus extent external representation export proofs 
order able export proof theorem prover internal representation proof 
important understand features proof representation general background developing representation specific purpose especially generic representation 
note primary function theorem provers prove theorems construct proofs case theorem provers fact construct proofs explicitly 
discussion point see 
common strategy theorem provers goal directed proof process proving theorem broken subsidiary proof tasks subgoals 
tackled decomposed smaller tasks 
paradigm proof subgoal may discarded completed complete proof theorem constructed 
features discussed profitably included survey wider scope include ffl proof annotations 
ffl relationship theory structure particularly interpretation theories proof representation 
ffl generic representations logics proofs 
construct proofs theorem provers construct complete proofs 
may suggest reasons theorem prover construct keep explicit proofs mutually exclusive ffl proofs may intrinsically interesting user prover example mathematicians 
ffl proofs kept provide guidance user 
example keeping explicit proof structure proof construction order display proof tree graphically extract natural language version finished proof user 
ffl proofs kept extract proof content 
example extraction tactics derived rules proof plans 
ffl proofs kept extract computational content programs algorithms 
ffl proofs model objects example proof theory programs may represent program refinement 
ffl proofs kept complete record activity prover auditing purposes 
ffl specifically prover may keep proofs facilitate checking results human computer program 
may distinguish representations may term idealised actual proof roughly corresponding completed proof process construct 
cases interested final polished proof idealised proof 
cases interested actual steps performed constructing proof 
instance case automatic theorem prover may wish compare efficiency different proof strategies 
case interactive theorem prover may wish audit productivity user tools may interested cognitive activity finding proof 
interactive provers automatic logging user commands script produce representation actual proof 
levels representation aim survey ascertain range mechanisms represent proofs purposes representations put 
order organise material investigation framework required 
needs general possible avoid preempting survey respect classification representations form function 
framework adopted levels representation defined structure theorem proving system 
initially elaborate structure mentioned briefly section proved ineffective replaced simple scheme described 
levels 
user level representations user user may interact 

application level representation level theorem proving process 

computational level lower level representation may instance efficient low level representation application level data structure 
framework proved fairly useful practice deficiencies 
main problem provers layers clearly separated features provers difficult assign particular layer crossed boundaries clear layers assigned different provers strictly comparable 
framework practical mechanism organising material survey 
purpose survey propose validate detailed classification proof representations 
scope survey theorem provers discussed report ergo hol isabelle nuprl pvs larch lp otter ilf server imps mizar acl coq theo jape lego ipe 
number criteria selection theorem provers 
scope survey limited time resources devoted attempt coverage broad possible 
focus provers field program verification provers mainly areas mathematics logic included 
information survey primarily taken published documentation research papers 
cases provers available supplement clarify documentation discussed 
cases source code publicly available survey concerned general characteristics different representations attempt examine implementation details level 
survey relies published documentation provers included research tools public domain programs 
particular commercial programs generally excluded details provers available research papers pvs 
selection provers somewhat arbitrary provers included literature consulted reasons instance imps interesting approach theory management authors lego pollack published interesting discussions general aspects proof checking 
omissions included time permitted mural tool prover 
rest section provers included survey discussed individually 
number actual examples proofs recorded selected provers appendices 
appendix contains small example proof records number provers 
appendices contain extensive examples pvs otter hol 
version otter proof processed ilf server 
pvs ilf otter examples included show different approaches literate presentations proofs 
otter hol examples illustrate proof records input external proof checker 
appendix lists theorem provers survey gives addresses information obtained web 
information provers mentioned text 
appendix appendix contains published definitions proof formats ergo nuprl theo 
ergo latest released version ergo theorem prover description user interface refers version 
currently core ergo re implemented ergo 
core implements proofs class objects description proof data structure computational level refer ergo 
ergo theorem prover designed backwards goal directed proof conceptually ergo proof tree theorem root 
inference rules designed backward application mind forward inference 
standard ergo user interface uses emacs presents number views proof structure user 
user interaction takes place window shows current subgoal node proof tree current focus attention user 
window shows sequent current node list hypotheses 
window current subgoal context proof displaying sequence nodes root current subgoal 
state proof tree displayed ways interface ergo layered design user interface implemented set tactics top core theorem prover 
core prover version different inappropriate describe core development version user interface released version 
graph tool displays tree graphically allows limited interaction navigation purposes proof viewer spawned displays node time supports navigation tree 
user interaction generates proof script emacs buffer 
contains commands parameters create proof 
commands typed directly buffer user parts generated ergo application instance navigation point click current subgoal window proof tree display adds tree navigation commands script commands tactics invoked ergo menus added script 
proof script may saved ascii file read directly ergo program re run emacs buffer 
application level ergo saves loads proofs binary format 
format equivalent annotated tactic proving theorem 
ergo automatically associates proof proof file ergo command re run proof executes tactic proof file 
annotations tactic record actual commands user proof theorem 
computational level ergo theorem prover builds proof data structure explicitly proof process 
data structure manipulated set ergo primitives interface directly prolog 
description ergo proof structure appendix 
data structure manipulated various ways application level 
instance proof tree display extracted traversing structure 
hol standard hol standard hol represent proofs explicitly 
lowest level hol uses forwards proof practice goal directed proof strategy commonly 
support strategy provided developed university bremen url www informatik uni bremen de subgoal package discussion assumes package 
goal directed hol proof proceeds application tactics perform proof steps 
tactic returns list subgoals need achieved complete proof step valuation function applied list proofs subgoals give required theorem 
intermediate valuation functions correspond partial proofs 
computational level proof represented implicitly valuation function structure available manipulation 
user level hol representation confined theorems subgoals 
subgoal package enables user display traverse subgoal tree mirrors proof structure valuation function 
standard hol undischarged subgoals represented user chooses attempts prove process continues list empty 
feature hol proofs fully expansive 
hol derived inference rules resolve sequence basic inference rules derived inference rule corresponding sequence basic rules applied 
application level hol proof sequence basic inference rules 
important implications hol proof checker validity proof dependent validity basic inference rules 
extensions hol standard hol represent proofs explicitly extensions hol 
ffl cohn describes method generating proof accounts hol proofs 
translations proofs literate format reading human beings 
cohn describes customised version hol data type valuation function extended record details proof steps 
recovery proof conceptually smaller set primitive hol inference rules efficiency extended small number derived rules form basic set implementation 
account recursive extraction extended valuation function 
ffl wong described method recording hol proofs facilitate external checking proofs 
wong method uses modified version hol 
case code low level proof steps extended write record internal data structure dumped file 
systems implemented modifications hol system cases intended mode record proof rerunning previously completed proof recording switched 
aims systems different reflected data structures 
cohn systems designed generation proof accounts read human beings 
major focus controlling reducing level detail presentation issues 
cohn implementation tactic level subgoal package system currently record details forwards proof 
stores proof details internal representation manipulated ml functions incorporated hol 
wong system designed generate external record proof ascii file processing proof checker separate program 
concerns details recorded 
facilitated fact hol fully expansive prover recording achieved modifications ml code basic inference steps 
proof records generated system large see example appendix 
note hol backwards proof subgoal package native proof method forwards proof proof record stored forwards hilbert style format 
improved subgoal package preceding discussion refers standard subgoal tactic package handling goal directed proof hol 
alternative package hol called developed sara 
widely subgoal package 
tactics package store proof tree 
enables ffl better navigation proof ffl ability display proof ffl ability utilise structure proof extracting optimised proof tactic search proof 
isabelle isabelle generic theorem prover allowing different logics defined user 
freely available version downloaded evaluation 
version isabelle supports construction export proofs trees relatively new feature isabelle 
isabelle number user interfaces including emacs interface gui interface 
available version support version isabelle discussion refers emacs interface 
user level frame proof script edited manipulated emacs 
contains commands construct proof 
isabelle formats proof scripts corresponds list interactive proof steps tactics called batch proof steps condensed single step applied single transformation proof state 
interface shows state current proof theorem prove current open goals show proof tree 
application level proof tree constructed certain switch set proof started default construct proof record high level tactics 
see page example isabelle proof 
proof constructed stored computational level ml object referenced fields internal representation theorem proves 
feature isabelle mechanisms viewing saving proof data structure primitive 
isabelle application level features handling proof states represent current state proof proof interfaces computational level representation stack states 
states pushed popped stack 
saved restored ml values program code 
proof states stored independently stored part ml database isabelle image saved restored 
nuprl nuprl interactive proof system constructive mathematics martin lof intuitionistic type theory 
type theory constructive theorem proved constructive witness truth extracted proof 
user level nuprl interface shows part proof current node tactic applied subgoals produced 
proof trees displayed full nuprl facilities printing user edit proof scripts 
nuprl stores lisp data structures converted script representation editing 
documentation refers scripts proofs way indicates maintained parallel 
application level proofs represented trees sequents may complete incomplete proofs see appendix 
proofs maintained components theory proven 
theories dumped file done proofs dumped compressed format 
format just main goal top level tactics perform proof effectively script nuprl script 
theory reloaded reloading associated proofs effectively rerunning proofs compressed formats 
nuprl type theory constructive application level extraction term generated proof 
nuprl evaluator evaluate terms execute computational component proof 
computational level nuprl proofs stored ml terms type proof 
pvs pvs proprietary system developing formal specifications pvs proof checker component 
pvs prover dual aims automating hiding tedious details proofs presenting interesting parts useful human readable form 
achieve powerful decision procedures invoked automatically represented detail proof record 
respect facilities showing completed proof sequent tree commentary rerunning reapplying editing proofs printing proofs customisable style attempts give useful feedback proof fails 
pvs proofs represented multiple sequents proof goal directed 
user level pvs emacs interface shows current state proof allows user cycle outstanding subgoals 
commands show sibling ancestor goals 
proofs done applying rules see appendix example typically high level rules 
user create rules called strategies similar tactics provers ergo 
line pvs philosophy feedback user prover fairly literate 
application level pvs stores proofs external files 
represented lisp expressions encoding commands construct proof equivalent scripts 
reloaded single stepped edited replayed 
theory specification associated ascii proof file stores proofs formulae proved part theory 
pvs logic classical higher order logic powerful subtyping 
important characteristic logic type system undecidable 
theorems type checked starting proof undecidability type system means process may generate side conditions need proved establish type correctness theorem 
means type checker theorem prover tightly coupled conceptually validity theorem may depend proofs typing obligations proof theorem 
lp larch theorem prover larch comprehensive formal software development system 
proof assistant lp just tool toolset specific larch system general purpose prover 
lp semi automatic tool described proof debugger 
designed perform routine steps automatically provide feedback proofs fail 
provides mechanisms forward backwards proof 
user lp supplies formal description theorem obligation generated tool system sketch proposed proof 
level detail required intended intermediate really detailed step step proof high level sketch 
tool attempts proof acts debugger help user fill details correct errors complete script valid proof produced 
feedback user lp outputs annotated version script adding example indications subgoals generated goals proved 
proof fails lp terminates immediately point failure informative message 
user option supply instructions prover resume interrupted proof 
main representation proof user level 
presumably prover holds internal representation proof state goals generated discharged documented 
proof style traditional mathematical style 
reliance proving lemmas front mixture goal directed forwards proofs 
user guide application automatic proof methods simple commands prove 
method 
constitute elementary tactic language 
otter otter semi automatic resolution theorem prover mathematics 
user supplies control script specifies proof indirectly 
script specifies theorem proved axioms proof 
defines proof method applied example providing weights variables selecting searching strategies inference rules 
otter fails prove theorem flags switches may adjusted improve proof strategy proof tried 
ways flagging otter proved partial results attempt proof 
proof fails achieved parts planned proof partial results extracted specified lemmas proved separately 
having proved lemmas fresh proof original theorem simplified lemmas succeed 
application level otter may print proof completion 
behaviour controlled flag 
printed proof lists inference rules proof 
flag causes lisp representation proof printed 
format designed submission external proof checker certification contains information proof explicitly 
checker parameters methods terms substitutions unifications 
checker otter proofs written nuprl mccune verifying solution robbins problem 
proof object format ilf server formatting otter proofs see section appendix 
proof proof object records printed completion proof constructed stored complete objects proof process 
documentation describe computational level details available otter source part distribution 
ilf server ilf theorem prover developed humboldt university berlin 
ilf system includes proof presentation tools available general mail server 
server accepts proofs number formats returns formatted version proof mathematical style 
formats accepted server ffl ilf proofs block structured proofs model elimination proofs ffl setheo proofs ffl komet proofs ffl discount proofs automated equational theorem prover ffl otter proofs 
ilf server converts proofs styles standard block structured style processing 
default output file suitable input ilf tree viewer requested 
facilities transform optimise proofs certain restricted ways instance convert indirect proofs direct ones extract embedded subproofs lemmas proved advance 
example otter proof ilf version appendices 
note otter input requires flag set see section 
imps imps interactive proof system mathematics 
main aim record proofs way shows true just true 
imps user interface emacs style proof goal directed 
user level graphical display current state proof tree 
user select open subgoal attempt alternative proof attempts recorded 
addition proof history viewed document 
application level proof represented proof script 
proof scripts created user directly interaction menus operations cut paste 
comment intimate knowledge syntax proof scripts unimportant types scripts 
italics interface allows user build script processed construct proof 
processing interaction level model low level steps rewriting substitution done automatically higher level steps involve user interaction 
proof structure reflects high level steps 
computational level imps system represents proof deduction graph 
nodes graph sequents inference steps comprise proof 
imps proof performed proof commands extend deduction graph 
commands built imps lisp procedures turn call patterns primitive inference steps may quite sophisticated 
stated deduction graph suitable analysis software presumably output form 
mizar mizar language developing recording formalised mathematics 
system designed computer manipulation software support including proof checking system 
current version mizar runs pcs 
mizar philosophy proof steps obvious checker intended accept obvious steps reject 
emphasis support software handling large libraries mizar results available proofs translation proofs natural language text high level sophistication 
mizar user writes detailed proof theorem formal mizar language 
submitted mizar checker 
fails user modify script correcting errors specifying proof detail decomposing proof proving preliminary lemmas 
representation proof user written script 
processed application level checks step step 
believe documentation current versions mizar checkers model checking basic method 
mizar proofs grouped articles 
article preamble states explicitly libraries proofs 
completed results stored libraries may referenced articles 
libraries maintained world wide current ones included mizar release 
mathematical theorem form implication proof may assume antecedent 
mizar proof checker maintains record assumptions current remains proved 
proof proceeds new assumptions added 
instance proof disjunction focus disjunct checker add negation disjunct assumptions 
stage unproven part original theorem referenced keyword thesis instance proof contradiction thesis may negation original theorem 
computational level checker mainly concerned bookkeeping tasks maintaining current set assumptions thesis left proven 
acl acl heavily automated order theorem prover specifically designed support specification development computing systems 
proofs secondary importance acl chief concern verification conditions generated specification valid 
acl described heavily automated performs proof tasks automatically interactive 
user level proof built incrementally goal directed manner acl provides user proof commentary english step performed 
displays current proof tree 
tree shows evolution proof subgoals achieved pruned tree display full proof 
application level conjecture equated pool undischarged subgoals reviewed selected processing time 
proof complete pool empty 
long term objectives acl written acl verify code 
intended construct formal proof objects independently checked facility part current version 
far unable extract information computational level acl proof representation documentation 
coq coq proof assistant calculus inductive constructions 
extension calculus constructions includes inductive definitions 
coq written variant ml called caml interaction coq specification language 
coq uses natural deduction proof style primitive inference rules combined tactics 
discussion refers basic interface coq gui interface 
user level coq displays current proof term step option display current subgoal 
proof displayed show command 
forms allow current proof displayed various formats instance tree format 
displays show low level inference rules user level tactics 
example see appendix proof completed saved 
done save command displays commands construct proof 
display captured provides proof script replayed application level load command 
scripts written directly user level emacs mode assist editing files 
proof saved displayed low level format command print 
represents term encoding basic inferences prove result 
coq utility display natural language representation proofs 
example see appendix command extract computational content theorem utility extract caml program computational content proof specification 
coq written caml little information documentation proofs handled computational level 
theo theo interactive tactic driven proof development system supports multiple logics 
meta object levels logics order language tactics tacticals written 
application level proofs defined recursively trees proven unproven sequents 
rules may applied unproven sequents establish sequent instance rule split sequent list proofs 
proofs developed backwards proof style proofs calculus combinators see appendix 
incomplete proofs represent schematic proofs derived rules generated compacting proofs 
theo proof theory sequents natural deduction style available seen just pretty printing option proofs interaction style right 
tactics viewed meta level inference rules functions relations form proof proof user level proof trees displayed pretty printed format session clear proof objects extracted externally saved sessions 
theo allows arbitrary prolog called quote interested body proof 
clear oracles supported invocations recorded proof 
jape jape interactive tool investigating formal systems 
generic new logics specified jape formula paragraph language 
language defining logics allows single multiple sequents specified 
simple tactics written language 
jape oriented proof process teaching learning proofs produced emphasis put user interface 
jape runs windows proofs styles gentzen trees fitch boxes 
displayed graphical fonts logical symbols 
gentzen trees display lot information trees rapidly unwieldy especially horizontal direction 
jape recommends fitch boxes normal 
displayed subproof nested box 
application level proofs stored gentzen trees fitch style display option 
similar system 
method proofs represented computational level discussed documentation 
jape facility storing proofs derived rules jape tactic language quite complex 
jape logics user definable built inference rules proofs refer entries definition file logic 
example jape proof represented derived rule conjectures seq hyp originally jape acronym just proof editor matured described framework building interactive proof editors 
hyp hyp hyp rules hyp 
names refer definitions logic definition file rule infer rule infer rule hyp infer saved proof reloaded 
basic facilities user level save proofs printable format postscript formats 
integrated system requiring processing shell scripts outside jape 
lego lego meta level theorem prover written ml 
typed system supporting calculus constructions similar logics including edinburgh lf 
lego uses goal directed proof method calls refinement proof 
lego proofs represented terms calculus constructions specifically types propositions types principle 
propositions types system verifying proof equivalent type checking type proof proposition claims prove 
robert pollack thesis subsequent deals verification type checking algorithm particular form lego type theory 
seen development particular instance verified proof checker 
user level lego presents basic interface 
run emacs allows action menu instance command display current state proof invoked menu 
ipe ipe interactive proof tool untyped order intuitionistic predicate calculus 
logic natural deduction system formalised single sequents 
proof style goal directed prover inference rules represented set basic goal directed tactics 
user level ipe graphical interface 
proofs tree structure displayed indented text 
cut paste graft re apply subtrees existing proofs example branches symmetric proof 
point click navigate proof select subgoals proof select terms 
application level proof structure saved simple text file see appendix 
representation theorem represented anonymous root node internal structure proof recreated applying structure original theorem 
representation similar ergo derived rule representation proof 
computational level ipe implementation attribute grammar system written ml 
grammar proofs represented productions form proof rule parameter proof 
attributes handling displaying proofs directly relevant representation complete proof 
attribute grammar enables construction proof separated issue validity 
defined global proven attribute calculated incrementally proof tree changes 
rules require parameter example forall requires variable specified 
discussion general framework framework layered user interface application level computational level 
proved fairly useful practice deficiencies 
problem provers layers clearly separated features crossing boundaries difficult assign particular layer 
clear layers assigned different provers really comparable 
stage detailed model considered alternative framework 
layered model idealised theorem prover possibility user interface tactics proof representation proof calculus logic symbolic engine intention provers lack components assigning components possess detailed model easier meaningful comparisons provers 
difficult determine appropriate model comparability remained problem 
felt current purpose simpler framework useful complex 
representation user level representation user level largely depends degree type user interaction supported prover 
degree interaction varies widely 
automatic provers user simply supplies theorem proved prover returns result 
systems may configurable example otter user configures prover search strategies running proof 
user guided proof checkers user contributes directly proof supplying theorem proved 
systems vary widely full proof script supplied start succeeds fails proof created incrementally user fully interactive mode 
classification derived imps interaction takes place ffl proof construction attempts case human helps machine ffl proof construction attempts case machine helps human 
type interaction user prover determines kind representation required 
instance user guides proof process interactively detailed representations partial proofs form graphical proof trees hypertext presentations may useful aids help user decide step proof 
user guided systems proof script important form user level representation nature script varies 
proof constructed fully interactively script simply record user choices 
hand user provides full proof script start script detailed prover generate full proof just information 
project suggests terminology case user supplies proof consisting lemmas logical connectives tool acts proof compiler generate concrete mathematical proof 
idea proof scripts taken proof plans 
high level structured proof scripts parameterised general way combined hierarchical fashion 
stored library methods available theorem prover generate proofs 
area inductive proofs 
motivation proof plans high level methods serve basis explanation understanding proofs 
concept may applied user level representations proof account 
refer translation formal proof literate format suitable reading human beings 
interface section calls textual explanations mizar project proof close ascii version proof account formatted pvs records progress proof similar literate form 
representation application level application level distinction provers store left done proof construct object representing complete proof far 
strategy need maintain pool undischarged subgoals example hol acl 
provers storing full proof optional example isabelle 
isabelle example indicates stored proofs large moderate sized proofs 
discussions point respect hol lego may 
main features application level representation participation transformation proof representations 
may done saving loading proofs usually efficiently done computational level 
proof scripts usually user level representations may processed application level rerunning proofs scripts may considered application level representations example imps scripts see quotation page 
hand representation display proofs user generated transformation application level proof usually encodes structure proof 
examples generation tree structure proof graphical display extraction computational content proof transformation different display representations jape gentzen fitch formats 
provers command line interface otter coq facility displaying proof different formats 
representation computational level difficult say representation computational level general terms documented diverse areas considered 
provers surveyed variety programming languages prolog ergo variants ml isabelle coq nuprl variants lisp otter imps acl 
ipe system different rest computational representation uses attribute grammar enables efficiently maintain proven unproven status proof constructed 
important distinction inference rules stored 
hol system fixed logic proofs fully expansive rules part program code 
generic provers isabelle jape ergo tend store inference rules data objects manipulated meta level 
acl fixed logic inference rules part program code set derived inference rules may added user means safe mechanism 
proofs class objects sense term proof representation somewhat loosely respect representations scripts provers content partial representations represent left prove having discarded parts proof completed 
corollary proof complete representation disappeared 
examination proof representations dependent classification provers treat proofs class objects store complete entities don 
listed reasons prover treat proofs class objects 
mathematical provers keep proofs primary object interest 
imps mizar jape concerned logic mathematics come category 
coq nuprl computational logics options extract computational content proofs calculus terms cases 
provers support export proofs external checking examples include otter hol proof recording extension isabelle 
feature generally added prover mature type representation designed ease parsing complete explicit representation information proof lisp syntax 
results large verbose representations 
storage complete proof useful providing feedback user variety ways graphical displays ergo jape natural language descriptions completed proofs hol coq 
variety uses full representations proofs prompted proofs important feature theorem prover design design ergo hol subgoal package 
ergo external representation proof effectively just script 
cases usefulness full representation proof extended facility attaching annotations proof tree 
range representations key feature ergo design explicit storage proof structure excellent example range proof representations 
user level partial representations current subgoal ergo presents number representations proof ffl proof script 
ffl graphical view complete proof tree 
ffl structured hyper textual view proof 
ffl representation proof derived rule 
computational level ergo stores full proof data structure essentially annotated tree 
allows application level derive representations ffl binary format saving loading ffl extracted tree structure passing graphical display tool ffl generating derived rule extraction low level inferences ffl extraction high level tactics proof annotations support automatic rerunning proof 
primary representations may distinguish broad classes theorem prover type representation judge primary proof representation 
provers primary representation proof script example mizar imps 
representation essentially user level cases emphasis human readable scripts 
secondly provers distinct proof representation application level 
adopt different formats proofs 
nuprl section theo section represent proofs calculus terms ipe jape represent proofs trees sequents 
thirdly provers proofs represented directly implementation language example pvs proofs lisp terms 
provers application level computational 
primary representation theorem provers represent proofs scripts form otter script distantly related detailed steps proof activity 
form representation determined proof method 
instance otter uses resolution different representation discussed 
provers natural deduction sequent calculus formulations logics 
interactive provers ergo hol subgoal package proof style commonly goal directed tends problem solving strategy preferred human users higher levels 
note representation user level may application level 
instance hol proofs hilbert style proofs fully expanded basic inferences proof constructed subgoal package derived rules conversely jape recommends fitch box style display conciseness proofs stored trees gentzen style 
acknowledge contributions document resulting stimulating discussions phd supervisor dr owen 
ilf server web page 
url 
mathematik hu berlin de ilf serv 
david aspinall 
contribution isabelle 
url ftp dcs ed ac uk pub da tar gz 
barras cornes courant gim enez herbelin huet mu murthy parent paulin werner 
coq proof assistant manual version 
technical report inst 
nat 
de recherche en inf 
autom august 
holger anthony ray mark 
ergo manual 
technical report software verification research centre university queensland brisbane 
australia november 
bertot bertot goguen 
user guide proof environment 
revision inst 
nat 
de recherche en inf 
autom sophia antipolis france february 
bibel 
komet 
bundy pages 
richard john boulton 
efficiency theorem prover 
technical report university cambridge computer laboratory 
boyer moore 
design goals acl 
technical report computational logic august 
boyer strother moore 
proving correct efficiently new proof procedures 
boyer strother moore editors correctness problem computer science 
academic press 
london 
bundy editor 
proceedings th international conference automated deduction volume lecture notes computer science 
springer verlag berlin 
alan bundy 
science reasoning 
technical report research dai university edinburgh scotland mar 
rod burstall 
computer assisted proof mathematics lego proof system 
technical report ecs lfcs lab 

computer science university edinburgh scotland jan 
andrzej trybulec 
pc mizar system 
url www cs ualberta ca piotr mizar mirror system 
cant 
graphical user interface isabelle theorem prover 
url ftp ftp cl cam ac uk ml ps gz 
cohn 
proof accounts hol 
url www cl cam ac uk users ps gz 
draft 
constable allen bromley cleaveland cremer harper howe knoblock mendler panangaden sasaki smith 
implementing mathematics nuprl proof development system 
prentice hall 
crow owre shankar rushby srivas 
tutorial pvs 
url www csl sri com sri 
html june 

bernd andreas wolf 
calculus supporting structured proofs 
journal information processing cybernetics eik 
despeyroux 
theo interactive proof development system 
technical report inst 
nat 
de recherche en inf 
autom le chesnay france 
farmer guttman thayer 
imps system description 
kapur pages 
farmer guttman thayer 
imps interactive mathematical proof system 
journal automated reasoning october 
william farmer joshua guttman mark nadel javier thayer 
proof script pragmatics imps 
bundy pages 
garland guttag 
guide lp larch prover 
technical report digital equipment 
gordon melham 
hol theorem proving environment higher order logic 
cambridge university press 
mike gordon 
notes pvs hol perspective 
url www cl cam ac uk users pvs html 
huet kahn ch 
paulin mohring 
coq proof assistant tutorial 
rapport technique inst 
nat 
de recherche en inf 
autom 
le chesnay france august 
paul jackson 
nuprl proof development system version manual user guide 
url www cs cornell edu info projects nuprl manual index html 
sara 
new subgoal package hol 
url www cl cam ac uk ftp hol contrib doc december 
kapur editor 
cade 
th international conference automated deduction volume lecture notes computer science 
springer verlag berlin 
kaufmann moore 
precise description acl logic 
url www cs utexas edu users moore acl reports km ps 
incomplete draft 
zhaohui luo randy pollack 
lego proof development system user manual 
technical report lfcs tr department computer science university edinburgh scotland 
mccune 
otter manual guide 
technical report anl argonne national laboratory 
william mccune 
solution robbins problem 
journal automated reasoning 
owre rushby shankar 
pvs prototype verification system 
kapur pages 
owre shankar rushby 
pvs proof checker manual beta release 
computer science laboratory sri international menlo park ca usa march 
owre shankar rushby 
user guide pvs specification verification system beta release 
computer science laboratory sri international menlo park ca usa march 
paulson nipkow 
isabelle generic theorem prover volume lecture notes computer science 
springer verlag berlin 
lawrence paulson 
isabelle 
technical report university cambridge computer laboratory 
lawrence paulson 
isabelle manual 
technical report university cambridge computer laboratory may 
pollack 
theory lego 
technical report lfcs tr department computer science university edinburgh scotland 
pollack 
extensibility proof checkers 
dybjer nordstrom smith editors types proofs programs 
international workshop types 
selected papers volume lecture notes computer science pages 
springer verlag berlin 
pollack 
verified type checker 
plotkin editors second international conference typed lambda calculi applications tlca volume lecture notes computer science pages 
springer verlag berlin 
brian ritchie 
design implementation interactive proof editor 
technical report cst department computer science university edinburgh scotland 
piotr rudnicki 
overview mizar project 
nordstrom petersson plotkin editors types proofs programs 
international workshop types 
selected papers pages 
chalmers university technology june 
slaney 

technical report tr arp automated reasoning project australian national university dec 

proof compiler order logic 
broy editors methods languages tools construction correct software volume lecture notes computer science pages 
springer verlag berlin 
bernard richard 
url www comlab ox ac uk users bernard jape html 
jape documentation web 
trybulec 
features mizar language 
url web cs ualberta ca piotr mizar 
mark 
architecture unified refinement proof tool 
fifth australasian refinement workshop university queensland brisbane australia 
april 
mark 
ergo generic proof engine 
technical report software verification research centre university queensland brisbane 
australia december 
wai wong 
recording hol proofs 
technical report university cambridge computer laboratory 
wai wong 
recording checking hol proofs 
schubert alves foss editors higher order logic theorem proving applications 
th international workshop volume lecture notes computer science pages 
springerverlag berlin 
provers described mentioned survey provers described survey provers included survey 
list gives page discussed report available url obtaining information web 
acl see page 
url www cs utexas edu users moore acl coq see page 
url pauillac inria fr coq eng html ergo see page 
url uq edu au pages ergo report html hol see page 
url www cl cam ac uk research hol index html ilf server see page 
url www irm mathematik hu berlin de ilf serv imps see page 
url file math harvard edu imps imps html imps html ipe see page 
brian ritchie phd thesis accessible web 
isabelle see page 
url www cl cam ac uk research isabelle jape see page 
url www comlab ox ac uk users bernard jape html larch lp see page 
url www cs hu prog lp overview html lego see page 
url www dcs ed ac uk home lego mizar see page 
url www cs ualberta ca piotr mizar mirror nuprl see page 
url www cs cornell edu info projects nuprl nuprl html otter see page 
url www mcs anl gov home mccune ar otter pvs see page 
url www csl sri com pvs html theo see page 
theo fairly old inria group 
url www inria fr readers versions coq hol jape isabelle lego otter available provers 
single user version mural past tool specific courses projects 
provers mentioned survey tool formal method development programs specifications developed jean raymond abrial 
programs specifications expressed machine notation 
software environment supporting development tool developed core uk url www scm ac uk docs html discount discount distributed completion teamwork system distributed theorem prover pure unit equality problems uses knuth bendix completion procedure 
developed university kaiserslautern implementation teamwork distributed environment 
url www uni kl de ag discount html formal methods tool developed ora canada 
formal language 
theorem prover component automated deduction system called 
url www ora ca html ilf prover mentioned section ilf page focuses ilf server 
details ilf theorem prover developed humboldt university berlin url www irm mathematik hu berlin de ilf komet komet described article bibel proceedings cade 
theorem prover propositional minimal logic developed john slaney automated reasoning project australian national university 
url arp anu edu au html mural mural system uk alvey research project undertaken 
major experiment construction user interfaces proof construction 
url www cis rl ac uk proj mural html described available electronically url www mathematik uni muenchen de logik dvi gz 
sorted order logic intended software verification 
formed part project 
setheo setheo high performance theorem prover order predicate logic calculus connection tableaux 
developed technische universitat munchen 
url informatik tu muenchen de setheo 
explicit definitions proof formats ergo ergo proofs represented tree form set named tuples form term thy rule children term ergo term associated node 
node proved items thy rule children instantiated 
thy rule identifies rule relative theory thy proof step children list child proof nodes 
node identity node identities list children define tree structure proof 
hypotheses annotations associated node stored parallel data structures accessed node identity 
nuprl nuprl represents proofs trees sequents 
nodes represented refined unrefined goal sequent proofs subgoals refinement rule 
rule primitive inference rule usually tactic 
theo gives definition proof theo definition proof uses combinators defines calculus related calculus automath descendants 
proof defined recursively sequent object logic form oe oe ranging formulae 
axiom theorem name object logic proved term 
sequent object logic 
term prove rp name inference rule object logic list list proofs 
application similar nuprl 
order language despeyroux describes nuprl proofs terms higher order calculus 
examples formatted proofs section gives examples representation proofs theorem provers mentioned survey 
case ipe proof propositional tautology 
referred example 
cases simple script cases representations 
prover theorem proved sequence basic rule applications order give small structured proof illustrative purposes 
course normal usage simple theorem part standard library propositional tautologies proved directly general purpose tactic 
example coq tactic mentioned subsection ergo script script example proved ergo theory 
theorem example 




example 




rule 
rule 
rule 
rule 

rule 

rule assump 

rule assump 

rule 

rule assump 

rule assump 

graphical view graphical representation proof generated interface ergo 
hyp hyp hyp derived rule expressed derived rule tactic proof exported ergo rule rule rule rule rule rule assump rule assump rule rule assump rule assump note internal names ergo variables 
isabelle script standard non batch isabelle script proof example goal thy 




impi impi impi impe impe impe qed ex proof dump formatted dump proof derivation data structure proof val join trivial 
join false false const op 
free const op 
free free const op 
const op 
free free const op 
free free join axiom pure impi join false false const op 
free free const op 
free free join axiom pure impi join false false free free join axiom pure impi join false false free join theorem impe join assumption free join false false const op 
var free join theorem impe join assumption const op 
var free join assumption free free join assumption join false false free join theorem impe join assumption free join assumption free join assumption deriv list coq script proof example coq variables prop 
lemma ex 
intros 
cut cut assumption 
assumption 
cut assumption 
levels representation second example coq trivial tautology logical commutative proved tactic proving propositional tautologies 
show tree command proof displays trivial tree effectively script command 
saving theorem comm save command print command gives lower level representation represents term encoding basic inferences prove result 
coq utility display basic natural language representation proofs 
format comm displayed theorem 
statement proof assume 
prove distinguish cases study hypothesis 
case 

hypothesis case 

hypothesis jape proof example jape conjectures seq hyp hyp hyp hyp lego proof example lego goal prop intros impi impi impi impe refine impe refine prf ipe example proof ipe taken 
theorem entails premise entails entails premise entails immediate entails immediate printed theorem assume qed stored example pvs session example taken pvs tutorial proof propositional logic theorem included illustrate literate style feedback provided pvs 
proof performed application rules flatten split split 
multi sequent calculus rules primitive pvs system 
result series trivial subgoals hypothesis matches discharged automatically 
prop implies implies implies implies rule 
flatten applying disjunctive simplification flatten sequent simplifies prop implies implies implies rule 
split splitting conjunctions yields subgoals prop implies trivially true completes proof prop 
prop implies rule 
split splitting conjunctions yields subgoals prop trivially true completes proof prop 
prop trivially true completes proof prop 
completes proof prop 
prop implies trivially true completes proof prop 
example ilf processing otter example taken ilf web page original otter output formats input ilf server response server represents proof literate mathematical style 
input otter proof ilf server version ilf serv signature proof ilf server struct fact sum evens struct fact sum odds struct parity axiom struct mbox struct struct odd mbox odd struct odd odd system otter file basic options op 
infix operators set 
set auto 
set 
clauses list usable 
name 
name odd odd 
name url www irm mathematik hu berlin de ilf serv otter ml html 
odd 
name goal 

file otter august job started mon jul command otter 
op 
set 
dependent set 
set auto 
dependent set 
dependent clear 
dependent clear 
dependent clear 
dependent clear 
dependent set 
dependent assign 
dependent assign 
dependent assign 
dependent assign 
set 
list usable 

odd odd 
odd 


scan input prop horn equality symmetry 
non horn set equality 
strategy ordered unit deletion factoring satellites sos nuclei usable 
dependent set 
dependent set factor 
dependent set 
process usable kept pick wt 
kept pick wt odd odd 
kept pick wt 
process sos kept pick wt odd 
input processing start search clause wt odd 
clause wt hyper 
unit conflict sec 
binary length proof 
level proof 
proof 
odd odd 

factor 
factor odd 
odd 
hyper 
hyper 
binary proof proof object input input odd odd input instantiate merge instantiate instantiate odd odd merge odd instantiate odd input odd instantiate odd instantiate odd resolve instantiate instantiate instantiate resolve instantiate merge instantiate 
resolve proof object 
search stopped option 
search job finished mon jul output proof ilf server december axiom fact sum evens 
axiom fact sum odds odd odd 
axiom parity axiom odd 
theorem 
proof show directly 
fact sum evens 
fact sum odds odd 
parity axiom 

completed proof 
manuscript generated ilf 
development ilf supported deutsche forschungsgemeinschaft 
information ilf contact mathematik hu berlin de 
otter ilf example hol proof file proof file simple forward proof suc suc 
verbose 
example hypothesis theorem arithmetic theory just occupies characters proof file format 
version prf format extended env hol proof proof line hypothesis thm fun num fun num bool fun num fun num num num num fun num fun num num num num line refl suc fun num num fun num fun num num num num thm fun num fun num bool suc fun num num fun num fun num num num num suc fun num num fun num fun num num num num line subst gen var num fun num fun num bool suc fun num num fun num fun num num num num suc fun num num gen var num thm fun num fun num bool suc fun num num fun num fun num num num num suc fun num num fun num fun num num num num 
