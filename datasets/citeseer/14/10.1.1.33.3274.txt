design api particle systems simulation dynamic particle systems computer animation years real time simulation video games 
research explored ways compute render particle systems relatively little research discussed suitable application programmer interfaces particle systems 
constructs abstractions useful specifying particle effects 
api general unforeseen effects created 
set functionality provided implemented application cpu specialized graphics hardware 
result research particle system application programmer interface api 
function library specification allows applications simulate dynamics particles 
api created easily adding variety particle effects interactive graphics applications games virtual environments 
api suited non interactive graphics systems modeling rendering packages computer animation 
intended scientific simulation principles newtonian physics implement particle dynamics applicable accuracy numeric integration scalable 
computer graphics field sophisticated demand realism quality interaction increases computer generated effects video games simulations necessary encapsulate functional components applications 
computer graphics hardware changing rapidly application programmer interfaces apis necessary provide consistent portable interface hardware implementations functionality 
examples opengl direct low level operations real time rendering 
opengl optimizer encapsulate scene graph functionality 
object physics collision detection libraries virtual physics engine research provide encapsulated object dynamics 
game engines id software quake engine numerical design important component encapsulating representation dynamics video game virtual world integrate functionality apis 
propose extend list researching api dynamic particle system simulation 
motivations particle system api research david mcallister department computer science university north carolina chapel hill unc ch tr mentioned apis 
desire encapsulate functionality developers need implement repeatedly application easily ported platform api 
second desire provide interface functionality may implemented specialized graphics hardware affecting application portability 
particle system api particle computed simple point space fixed set attributes position velocity color 
responsibility library compute values attributes particle time 
api includes helper functions rapidly rendering particles implementation dependent method functions usually ignored favor application dependent rendering methods 
api specification centered particle group set particles acted group forces 
particle groups may exist api functions apply current particle group 
particle groups acted action functions perform fairly lowlevel operations group particles simulating physical forces 
examples actions include gravity bouncing color fading complete effect created series actions 
actions may compiled action lists similar opengl display lists 
action lists encapsulate particle behavior higher order effects enable implementation specific optimizations 
source code unix windows implementations particle system api user manual publicly available mcallister programmers 
api key component number publicly available software packages ranging video games virtual environment animation authoring systems 
seek teach api focuses solutions problems encountered designing interface particle system functionality 
previous dynamic particle systems computer graphics conceived reeves 
specification attributes particle particle systems computed prevail subsequent research 
reeves particles generated spherical rectangular circular generation shape 
initial velocity tightly coupled initial position 
particle attributes color generated stochastically mean tolerance similar domain 
dynamics original particle systems quite simple 
force af particles creation gravity yielding parabolic paths particles 
great complexity achieved particle systems stemmed mainly complex stochastic initial values complex dynamics 
reeves follow reeves includes sophisticated particle motion grass introduces constrained particles modeling solid objects grass trees 
reynolds introduces boids represent individual birds animals flock school manner 
boids seen extending particle systems adding full coordinate frame particle modeling complex particle motion especially motion resulting interaction particles 
necessary model flocking behavior 
obstacle avoidance surveyed reynolds allows boids particles steer avoid obstacles 
selection methods implement obstacle avoidance 
connection machine sims render particle system animations data parallel system quite compelling results 
set forth suite simple operations performed particles combined create complete effect 
directly adopt operations 
interface operations discussed 
mentions re implementing particle animation code serial computer interesting done unique parallel nature implementation 
part fulfilling 
illustrates need particle system api animation rendering application portable 
leech describes interactive particle system virtual environment toolkit 
wearing head mounted display user access suite widgets represent particle system operation correspond directly operations defined sims 
widgets interactively adjusted placed environment see results particle system special effects 
main focus immersive graphical interaction system 
literature arbitrarily combinable operations sims serial computer 
video games started real time particle systems special effects 
quake iii arena id software particle sparks particle smoke trails 
particle systems contain particles rendered point primitives textured polygons 
behavior consists gravity color fade complex initial velocities spirals 
commercial animation packages maya studio max include particle system animation package 
usually rendered offline developers free include computationally intensive particle operations run real time 
major area innovation implementations method animator constrain script particle dynamics 
issue real time domain animator api tight control particle systems 
unc ch tr design goals particle system api designed specific goals constraints 
list roughly order importance design 
run time efficiency primary purpose api enable real time applications include dynamic particle systems 
requires particle dynamics computed efficiently cpu time frame perform rest application computation 
flexibility api specifically designed allow user create effects envisioned api designers 
reason api consists simple building blocks gravity bounce complete effects flock fountain 
independence parameters api consist simple building blocks design space implementing particular effect quite large 
clear parameter action particular effect modified particular visual result 
parameters action functions terms depend particular external measuring system units parameters transparent api 
scalable simulation quality numerical accuracy simulation scalable modifiable application 
desire api usable production quality offline animation real time special effects cpu intensive video games 
action functions orbiting gravity source numerically stable velocity damping 
application programmer able specify different accuracy needs different effects 
hardware abstraction api truly abstraction particle system functionality 
application identically api implemented entirely library linked application thin layer merely communicates particle dynamics instructions graphics hardware device 
scalability particle functions callable multiple threads multiple processors order increase total rate particle simulation 
applicable api calls reentrant 
easy learn opengl graphics api broadly considered elegant easy learn structure sep silicon graphics 
example opengl calls defining geometry take quadruple numbers specified data type user choose specify parameters consistent defaults chosen unspecified parameters 
self consistency allows users knowledge api call extend calls greatly reduces need refer documentation 
desire similar elegance particle system function calls 
want order function calls matter little possible avoid programming pitfalls 
api description particle particle system api object set attributes similar reeves original particle systems reeves position velocity color alpha size age secondary position secondary velocity 
attributes vectors alpha age scalars 
secondary position normally destination position rarely 
secondary velocity normally stores velocity previous time step computing particle orientations instantaneous curvature 
size rendering attribute color 
completely application dependent 
particle dynamics purposes particles unit point mass opengl api uses function calls members class 
sake elegance context handle passed functions 
section discusses implications passing context 
api function names take form 
calls defined default values lesser arguments simplify application developer coding common case 
trait api specific 
api includes kinds functions calls operate manage particle groups calls set current state library action calls act particle groups calls create operate action lists 
discuss turn 
refer appendix complete list api calls 
particle groups particles exist particle group set particles acted forces 
particle groups may exist api functions apply current particle group 
actions apply particle current particle group 
particle group created return identifying number generated particle group 
switches group current 
particle groups initially empty emits new particles group 
maximum number particles group specified 
particle group reaches maximum size attempts add particles ignored 
actions actions functions api modify attributes particles current particle group 
actions meant simulate physical forces 
physical counterpart computes parametric quadratic path particle specified position 
api currently action functions versions api easily add actions 
action functions meant building blocks special effects finished special effects 
particle effects consist actions 
action performs pass particles particle group 
may slightly slower single pass hard coded series actions separate passes allow action functions building blocks combined desired order 
multiple passes particles feasible particles fit current cache 
unc ch tr action functions normally called just application renders scene frame 
pseudocode outlines task 
particle group context group time step rendered frame emit new particles actions update positions draw particles drawing action adds fraction dt particle current velocity current position increments age dt completing time step particle 
section discusses mathematics process greater detail 
particles moved new location particles rendered 
render particle group particle primitive point application calls 
particle rendered model stored display list application calls 
alternatively calling return particle data application desired rendering processing 
example ability rapidly simply define interesting particle effects api give code creating simple water fountain 
image resulting running code shown 
principal goals api calls homogeneous 
sensible desire multiple action functions take parameters order default values 
example functions specify target value particle attribute asymptotically approach value time 
functions color steer avoid physical obstacle 
functions take blending parameter single float called scale 
allows users learn behavior scale apply knowledge similar functions 
action functions require falloff effect action particle distance influence 
describe method specifying falloff example api homogeneity 
functions falloff accelerate point gravity source match particle velocity neighbors 
force actions specified floats magnitude epsilon max radius 
modified inverse square falloff function range fm max max epsilon serves dampen inverse square approach infinity approaches zero 
epsilon near choose particle velocities ring nozzle 
particle colors light blue white 
generate particles small line nozzle 
accelerate particles downward 
bounce particles horizontal disc radius 
false kill particles horizontal plane 
step particles forward time 
particle system code simulate water fountain 
fountain created code 
size magnitude yield slower falloff gives action wider neighborhood 
shows example 
max radius influence zero range 
provide sharper possible just magnitude epsilon increase efficiency implementations 
action lists actions may compiled action lists encapsulate operations required produce particular effect 
action lists provide abstraction effects provide interface programmability graphics hardware particle system computations performed hardware 
akin problem defining api programmable shading graphics hardware simple solution may applicability problem 
action lists generated followed 
subsequent action state change calls stored action list executed im force unc ch tr 
finishes list returns api normal execute mode 
executes calls action list called explicitly point 
exception scope state changes action list ends list returns action lists executed different processors require synchronization state afterward 
action lists improve performance ways 
reduce communication application hardware computes particle dynamics 
second action lists allow certain combinations actions recognized replaced optimized hard coded routines 
example implementation api recognize sequence actions call optimized fountain function single pass particles 
attributes domains magnitude epsilon range graph damped inverse square falloff function 
api important actions creates new particles 
particles color velocity size initial age 
avoid placing values single call increase api flexibility store current color velocity size particles created api state 
similar calling creating vertex opengl 
functions perform similar functions particles created 
particle effects require particles initial attribute values vary state setting calls 
handle issues introduce concept domain 
domains provide uniform mechanism specifying region space api 
function takes domain specifies region color space stochastically choose color new particle 
likewise specifies region vector space choose velocity particle 
illustrates randomly chosen velocity vectors disc domain 
domains parameters actions state functions 
example creates particles positions randomly chosen domain kills particles enter leave domain specifies domain space particle steer away causes particles bounce surface domain 
domains come variety shapes 
domains define volume represents half particle centers space bounded plane 
domains lower dimension 
fewer floats specify domain 
example points axis vector point axis scalars length inner outer radius 
api calls domain take enumerated domain type having values listed followed floats default values simpler domains specified succinctly 
domain probabilistically defines fuzzy region space specifying center standard deviation gaussian probability density 
probability density choosing random point domain choosing point said domain 
domain important api simulation quality natural phenomena shown follow normal distribution ross 
specifying particles colors positions velocities taken normal distribution gives natural looking results free distracting discontinuities boundaries 
reason state call takes optional standard deviation argument initial particle ages taken normal distribution 
way particles created time die call normally distributed age range 
particle simulation disc velocities chosen domain 
action functions simulate physical forces acceleration particle computed newton law ma 
treat particles having unit mass implement actions directly accelerations think forces 
particle action functions specify second derivative particle attribute time 
method numeric integration function affects physical accuracy effects meant simulate physical world visual quality resulting simulation 
purpose particle system simulation compute particle attributes position size color vary time 
particle attribute function time albeit complicated function difficult impossible express closed form 
function expressed differential equation particle actions specify change particle attributes time specifying value 
example action specifies particle velocity vector undergo constant acceleration 
task computing particle posi unc ch tr tion differential equation numeric integration problem 
numeric integration methods exist suitable real time particle system simulation computer graphics 
methods adapt step size function path particle giving particle step size requires computation storage 
cause attribute particle require different conflicting step size 
action functions random yield discontinuous attribute values time causing adaptive predictive methods fail 
euler method numeric integration user specified step size dt adjust accuracy 
euler method simply steps attribute value derivative action function case evaluated interval dt 
smaller dt requires integration steps unit time increases accuracy treating attribute function piecewise linear shorter intervals 
api independent time unit physical constants hard coded api 
common time unit single frame time 
value dt number time steps unit time attribute values computed exactly frame time interpolated nearby integration step times rendered frame times 
parallelization api implemented parallel geometry processors gps unix win systems 
implementation api library thin layer passes calls gps 
core particle system implementation runs subset gps gp responsible subset particle groups subset particles particle group particles exist host gp rendered directly gp 
fast implementation free communication bottlenecks 
unix win implementation works uniprocessor multiprocessor shared memory systems 
simulation large particle systems easy parallelize systems multiple threads 
api program carefully written avoid race conditions 
thread execute actions particle group typically thread created particle group 
sgi origin systems ensures computation performed processor contains particle memory 
implementations opengl forbidden multiple threads executing opengl call concurrently 
fundamental reason opengl calls receive context parameter 
current context global variable library thread safe 
wish keep elegance passing context parameter particle system api thread safe run large smp machines 
solved problem having api call find calling thread current context hash table keyed thread identification number 
number prevents inter particle forces supported 
passed api determined implementation dependent call getpid 
results ease particle system api publicly available internet july downloaded people 
extent public impossible determine number different applications aware 
computer science department unc particle system api create immersive fountain construction system water flowing interact shape person moving hand 
flow allen publicly available animation scripting system linux irix uses particle system api implement particle dynamics 
flow similar commercial computer animation systems 
allows animations edited online opengl window particle system effects simulated real time 
flow synthesizes renderman rib files rendered blue moon rendering tools photorealistic renderman 
stage research group carnegie mellon university included particle system api alice virtual worlds authoring system conway 
alice allows users create virtual worlds loading models images standard formats python scripting language add behaviors integrate virtual world 
particle system api integrated alice api function python function alice 
alice building virtual worlds course cmu contained mix computer science art architecture drama undergraduates 
approximately fourth projects submitted students included particle system special effects usually rain snow explosions 
feel gives indication ease particle system api 
flexibility jason pratt integrated particle system api alice created virtual worlds include particle effect envision api capable 
effects ocean waves rubber sheet model simulated snow globe snow swirling response user motion 
fact api succeeded simulating effects far different imagined helps indicate achievement flexibility design goal 
performance see accompanying video illustration practical performance existing implementations api 
animation flow recorded real time 
measure numerical performance api simulated points orbiting gravity sources bounce plane velocity dampening particles emitted normal distribution 
particles rendered aliased gl points window 
mhz pentium iii processor nvidia geforce achieved fps 
mhz sgi reached fps 
unc ch tr particle systems come age interactive computer graphics world 
video games particle systems development 
developers approached ask question able get effect want 
occasionally api needs user definable particle attributes 
example asked separate diffuse specular colors 
creating special attributes desire api extensible regard conforming original design goals 
related particle attributes treated generically 
example having fading particle colors interpolating size generic attribute fade function 
actions currently affect particle position 
making computation orthogonal attribute performed increase api flexibility 
interesting area implement api graphics hardware additional systems 
implementation benefited greatly having particles computed processor rendered 
suspect true pc graphics cards geometry processor 
advantages agp bus bandwidth major bottleneck pc graphics greatly reduced particles exist graphics card cpu free computation 
wish jon leech silicon graphics example code domain concept 
appreciate loan graphics cards nvidia evans sutherland 
video courtesy hewlett packard supported fellowship integrated device technologies 
jason pratt cmu domain help alice demo video 
mark allen creator flow helpful discussion motivation really making particle systems look 
appendix list api functions particle group functions void int group num int index int copy count maxint copy particles specified group current group 
void int group num change group current 
void int group num int group count delete consecutive particle groups 
void int dlist bool const size false bool const color false bool const rotation false draw particle model opengl display lists 
void int primitive bool const size false bool const color false draw particle group opengl primitives 
int int group count int max particles create particle groups max particles allocated 
int returns number particles existing current group 
int int index int count float position null float color null float vel null float size null float age null copy particles current group application memory 
int int max count change maximum number particles current group 
attribute state functions void float red float green float blue float alpha specify color new particles 
void float alpha dtype float float float float float float float float float specify color domain new particles 
void float size float size float size specify size new particles 
void dtype float float float float float float float float float specify size domain new particles 
void float age float stdev specify initial age new particles 
void float new dt specify time step length 
void float float float specify initial velocity new particles 
void dtype float float float float float float float float float specify initial velocity domain new particles 
void float float float specify secondary position new particles 
void dtype float float float float float float float float float specify secondary position domain new particles 
void bool copy specify secondary position new particle chosen 
action functions void float magnitude float epsilon float look ahead dtype float float float unc ch tr void float friction float resilience float cutoff dtype float float float float float float float float float bounce particles domain space 
void bool copy pos true bool copy vel false set secondary position current position 
void float damping float damping float damping float vlow float vhigh dampen particle velocities threshold 
void float center float center float center float velocity float magnitude float stdev float epsilon eps float age explosion 
void float magnitude float epsilon eps float max radius accelerate particle group 
void float magnitude float epsilon eps float max radius accelerate particle particle 
void float dir float dir float dir accelerate particles direction 
void float center float center float center float magnitude float epsilon eps float max radius accelerate particles near center jet 
void float age limit bool kill false remove old particles 
void float magnitude float epsilon eps float max radius modify particle velocity similar neighbors 
void move particle positions velocities 
void float float float float axis float axis float axis float magnitude float epsilon eps float max radius accelerate closest point line 
void float center float center float center float magnitude float epsilon eps float max radius accelerate center point 
void dtype float float float float float float float float float accelerate particles random directions 
void dtype float float float float float float float float float immediately replace position position domain 
void dtype float float float float float float float float float immediately replace velocity velocity domain 
void float time left time restore particles secondary positions 
void bool kill inside dtype float float float float float float float float float kill particles positions wrong side specified domain 
void bool kill inside dtype float float float float float float float float float kill particles velocities wrong side specified domain 
void float particle rate dtype float float float float float float float float float add particles specified domain 
void float min speed float max speed clamp particle speed min max 
void float color float color float color float alpha float scale change color particles specified color 
void float size float size float size float scale float scale float scale change sizes particles specified size 
void float vel float vel float vel float scale change velocity particles specified velocity 
void float float float add single particle specified location 
void float center float center float center float axis float axis float axis float magnitude float eps float max radius particles vortex 
action list functions void int action list num apply specified action list current particle group 
void int action list num int action list count delete consecutive action lists 
unc ch tr void creation new action list 
int int action list count generate block empty action lists 
void int action list num creation specified action list 
bibliography allen flow particle animation application 
www com mba software flow 
python essential new riders publishing 
conway alice lessons learned building system novices 
proc 
chi hague netherlands april 
molnar realization 
siggraph eurographics workshop graphics hardware los angeles ca august 
leech taylor 
interactive modeling particle systems 
proc 
nd conference discrete element methods mit 
mcallister particle system api home page 
www cs unc edu particle 
davis opengl programming guide addison wesley 
reeves particle systems technique modeling class fuzzy objects 
proc 
siggraph detroit michigan july 
reeves blau 
approximate probabilistic algorithms shading rendering structured particle systems 
proc 
siggraph san francisco california july 
reynolds flocks herds schools distributed behavioral model 
proc 
siggraph anaheim california 
reynolds bumping things developments physically modeling course notes 
course notes siggraph atlanta georgia august 
ross course probability 
new york new york macmillan college publishing 
sep opengl 
mercury chem pitt edu english ry article html 
silicon graphics opengl industry foundation high graphics 
www opengl org downloads opengl datasheet pdf 
sims particle animation rendering data parallel computation 
proc 
siggraph dallas texas august 
