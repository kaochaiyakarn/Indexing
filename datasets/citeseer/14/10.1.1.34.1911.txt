applying model checking java verification appear proceedings th spin workshop toulouse sep klaus havelund jens ulrik nasa ames research center recom technologies moffett field ca usa havelund ptolemy arc nasa gov ase arc nasa gov havelund computer systems laboratory stanford university stanford ca usa jus cs stanford edu verify stanford edu jus 
presents experiences applying java pathfinder jpf developed java promela translator search synchronization bugs chinese chess game server application written java 
give overview jpf subset java supports describe initial effort analyze game server 
evaluate results effort 
model checking increasingly gained acceptance hardware protocol verification additional means discovering bugs 
verifying programs different verifying hardware protocols state space bigger relationships harder understand asynchronous behavior complicated underlying semantics 
size complexity software pushes current formal verification technology limits 
effective application model checking software verification debugging process smaller selected parts software model checked 
process draw multiple abstraction verification techniques user guidance currently understood 
order investigate challenges software poses model checking applied java pathfinder jpf developed java promela translator analysis game server application written java 
promela modeling language spin model checker 
performed abstractions hand translated simplified java program promela jpf 
example big classes loc non trivial written formal verification mind 
process developed suspicion deadlock bug software confirmed spin 
spin produced simpler error scenario 
attempts automatically model check programs written real programming languages 
attempt model check software aware reported tries model check java programs mapping promela 
handle exceptions polymorphism passing object subclass class method requiring object parameter 
defines translator concurrent extension limited subset promela 
drawback solution concurrency extensions broadly programmers 
corbett describes theory translating java transition model making static pointer analysis aid virtual coarsening reduces size model 
verisoft tool exhaustive state space exploration tool detecting synchronization errors processes 
major advantage verifies actual code 
visited states stored verification process time new branch possible execution verified rerun making efficient 
furthermore process treated black box properties specified process interfaces 
contrast model checking allows efficient verification states saved way specifying internal process properties requires abstraction 
unclear advantages 
data flow analysis applied verify limited properties concurrent programs including java 
methods useful ruling certain behaviors concurrent system precise model checking 
argue potentially useful identifying problem areas verification state space exploration methods 
jpf tool introduced section application game server described section 
evaluate results section conclude discussion section 
java pathfinder jpf translator automatically translates non trivial subset java promela modeling language spin verification system 
jpf allows programmer annotate java program assertions verify spin model checker 
addition deadlocks identified 
assertions specified calls methods defined special class verify class methods static 
significant subset java supported jpf dynamic creation objects data methods static variables static methods class inheritance threads synchronization primitives modeling monitors synchronized statements wait notify methods exceptions thread interrupts standard programming language constructs assignment statements conditional statements loops 
translator prototype misses features packages overloading method overriding recursion strings floating point numbers thread operations suspend resume control constructs continue statement 
addition arrays objects java modeled promela arrays obtain efficient verification 
libraries translated 
note features avoided small modifications input code expect current version jpf useful large class software 
game server application described section fits currently translated subset java modifications 
shall illustrate jpf small non trivial example 
example inspired concurrency bugs effort nasa ames verify spin operating system implemented multithreaded version common lisp deep space spacecraft 
operating system component nasa remote agent experimental artificial intelligence spacecraft control system architecture 
bug launch concerned lock releasing data structure shared threads 
lock releasing problem cast java main code operating system responsible executing tasks board space craft 
task may example run camera 
task may lock properties states maintained lock table executing releasing locks execution 
example property may keep thrusting low camera operation 
various reasons tasks may get interrupted execution particular focus locks get released case 
shows task class 
constructor method name class takes arguments lock table contains locks property just integer locked activity executed activity executed task 
activity object required provide activity method executed perform task 
note way java supports higher order methods methods arguments jpf handles 
run method task class specifies behavior task method part thread subclass 
behavior programmed java try catch exception construct executes locking activity exception thrown 
exception caught locally thrown 
case clause executed releasing lock 
furthermore shows java class models table locks 
provides array mapping property number task locks null 
method lock locks property particular task throwing exception property locked 
release method releases lock 
methods defined synchronized obtain mutual safe access table executed 
object monitor allowing thread operate call methods time 
test environment typically exception thrown explicitly thread throw statement exception object normal class task extends thread int activity public task int activity start public void run try lock activity catch release class task table new task public synchronized void lock int property task task throws table property null new throw table property task public synchronized void release int property table property null fig 

task execution lock table object exception class may include data methods 
alternatively thread may throw exception thread executing 
exactly daemon task shown 
daemon main class main method starts threads constitute environment set debug task releasing 
daemon started run parallel task eventually task unspecified point time 
task started property activity detailed 
assert statement executed termination task join method waits termination 
assertion states property longer locked 
assert statement expressed call static method assert verify class class verify public static void assert boolean method static called directly class making object instance 
takes boolean argument validity checked 
body method real importance verification call method translated corresponding promela assert statement 
meaningful body raising exception example useful normal testing translated promela 
consider kinds verify methods general methods corresponding operators ltl linear temporal logic spin 
methods called statements occur kind logic represents called embedded temporal logic 
example consider statements form verify eventually year occurring code 
major advantage approach need change java language need parse special comments 
java specification language 
note point assert method supported 
class daemon extends thread task task public daemon task task task task start public void run task class main public static void main string args table new activity activity new activity task task new task table activity daemon daemon new daemon task try task join catch verify assert table table null fig 

environment error trace running spin model checker generated promela program assertion violated error trace illustrates kind bug identified remote agent 
error highlighted 
main activity task protected try construct lock releasing occur case interrupt construct protected way 
task stopped construct just lock releasing releasing gets executed 
generated error trace exhibits exactly behavior 
called unwind protect problem lisp obviously java causing real bug illustrated 
translation promela section shortly describes translation java promela 
detailed description translation 
classes objects class definition java introduces data variables methods 
object class created new method java virtual machine lays new data area heap data variables 
promela dynamic heap different solution adopted 
class integer indexed array fixed static size declared entry record typedef promela containing variables class 
entry represents object class 
pointer points free object array 
object pair class index object corresponding array pair represented integer 
inheritance simply modeled text inclusion class extends inherits class entry array contain variables variables 
methods java method definitions simply translated macro definitions parameterized object object method called 
promela program allowed contain macro definitions expanded called 
example thread calls method object calls macro object identifier parameter 
drawback macros lack local variables 
java method local variables translated global variables calling thread prefixed origin class method 
promela extended inline procedures motivated difference principles 
threads threads java naturally translated promela processes 
class defined extending thread class task daemon example translated proctype 
body process translation body run method 
main program main method translated init clause promela special process 
object synchronization java supports mutually exclusive access objects synchronized methods 
thread calls synchronized method object thread call synchronized methods object long thread terminated call 
model introducing lock field data area object particular entry array representing objects 
field null thread locked object equal process identification thread promela process locks call synchronized method 
macros generated example modeling locking unlocking synchronization shown 
macro release translation release method class 
executes body method statement define obj property synchronized obj obj property null define synchronized obj stmt obj 
stmt 
lock obj try stmt unlock obj fi define lock obj define unlock obj atomic obj null obj null 
obj fig 

synchronization macros synchronized access object 
synchronized macro executes statement directly lock owned thread equal locks object executes statement releasing lock 
lock macro sets lock soon gets available equals null note expressions promela blocking long evaluate false 
exceptions major capabilities translator handles exceptions 
java exceptions complicated considering situations may arise method returns middle try constructs construct interrupts exceptions thrown thread threads called wait method fact objects unlocked exception thrown synchronized method 
promela construct related exception construct fact works outside inside case java try construct 
suppose java program contains nested try constructs indicated left part 
try try catch catch catch catch fig 

exceptions java left promela right throws exception object class exception caught inner catch statement executed 
right hand side simplified version model exceptions promela 
traditional promela semantics construct outermost catch matched executed 
gerard holzmann designer spin implemented java option giving needed inside semantics 
data area thread addition lock variable mentioned earlier exception variable exn 
throwing exception object modeled setting exn variable contain exception object trigger statements 
addition option spin translation quite elaborate 
game server application investigate practical usefulness jpf applied jpf partial verification game server chinese chess developed nguyen stanford university 
code older simpler version code currently running 
weeks written formal verification mind 
code rewritten unstable deadlocked frequently 
compared industrial applications server code fairly small consists java classes loc total 
client code classes loc 
code thread method game server complicated 
complexity stems communication interaction multiple types threads 
expected relatively small state size drastically exceeds limits model checker 
possible example manageable tools verisoft 
point application investigate limits trade offs model checking studying viable approaches abstraction 
overview code code divided server side code client side code 
client code consists java applets display game boards game pieces relay user commands game server 
direct communication players 
communication players done server 
multiple players game boards naturally handled multithreaded java architecture server code 
client side code effect multi threaded handle multiple requests user multi threading hidden browser application individual applet written sequential code 
focus server code leave verification multi threaded user interface code 
threads thread structure illustrated 
point time game boards active served thread 
participant game connection thread handle communication network connection associated player 
multiple connections associated players multiple observers 
inter board communication messages stored fifo queue handled thread 
threads producers messages consumer 
server main thread 
handles initialization contains main data structures server 
kinds threads cleaning global data structures obsolete players log server associated thread thread associated 
server handler connection connection connection connection sockets server socket fig 

simplified illustration system 
boxes rounded edges denote threads square boxes denote non thread objects 
simplicity shown threads 
example players associated 
arrows indicate communication patterns different threads 
commands player predefined set commands sent network server 
command arrives stored separate fifo queue associated 
thread processes commands time 
commands grouped classes game commands administration commands communication commands 
game commands move pieces board game 
administration commands create new boards move log 
communication commands communicate players larger crowd broadcast 
different commands 
time move players game notified broadcasting information connections 
player creates boards moves boards leaves game sends global broadcast command read stored processing processes commands time 
handles global broadcasts calling local broadcast commands threads 
abstraction focussed abstracting synchronization communication skeleton removed game code important detecting synchronization errors 
process formed idea potential deadlock code studying order threads obtained locks accessed shared data 
positive deadlock demonstrated model checker 
subsequently targeted abstractions demonstrating bug 
focused demonstrating potential deadlock manually cut away big chunks program interleaved application static slicing approximations known meat axe technique 
static slicing marking statement program static slicing techniques produce subset program corresponds cone influence 
forward slicing output part program potentially influenced marked statement 
backward slicing output part program potentially influence values variables statement interest 
forward slicing remove part code potentially irrelevant verification task 
relevant code code directly game related 
marked irrelevant variables methods classes guidance manually forward slice program unmarked variables 
example board class contains data structures related chinese chess board positions pieces removed methods related communication player process removed fields containing player role game likewise removed 
server code classes removed fully 
backward slicing abstraction 
deadlock scenario interested caused thread interaction 
marking particular statement involved deadlock scenario clearly slice large imprecise purpose 
approximations approximations obtained original program non determinism control flow abstracted model exhibit behaviors original program 
sound sense checking safety properties bugs abstracted model bugs exist original program 
counter examples hand necessarily true counter examples original model 
approximations times abstraction game server code 
illustrate examples 
useful control conditions marked slicing process 
instance game related 
server broadcast changed flag server broadcast flag flag new class non deterministically set reset model checker possible interleavings threads 
second abstracted types messages threads pass 
messages encoded strings characters string contains command broadcast open join 
determine type messages looking string prefix 
typically done nested structure line broadcast line talk board line board broadcast 
abstracted message strings record type value 
code inspection commands related concurrency behavior interested pursuing mapped message type equivalent enumerated type values broadcast open join 
introduced capture remaining types commands 
nested control structure modified line type broadcast line type flag board board broadcast non determinism introduced model possible behaviors external events associated commands mapping 
abstraction form interpretation user decides behavior keep collapsed code 
approximations approximations obtained removing code state depends program effect reducing possible behaviors original program 
approximations may sound safety properties code removed causing bugs original program bugs caught verifying model 
checking safety properties bug approximation original model 
useful technique narrowing search space particular part code 
approximations times game server verification 
ignored exceptions program including exception handling 
part server code interested exception handling little importance 
second initially limited number threads threads connection threads number messages players consider limited 
third inserted extra synchronization points thread behaviors 
limited number possible interleavings spin consider quickly guided deadlock scenario 
verification combined abstracted java classes file translated jpf tried run spin 
took cycles abstraction model sufficiently manageable spin find deadlock bug 
inserted jpf print statements appropriate places java code 
information easy interpret spin message sequence chart description counter example scenario 
bug confirmed deadlock caused cyclic waits number threads 
involved threads cause deadlock 
spin able find unknown significantly simpler deadlock scenario threads 
simpler example 
deadlock may occur full 
happens processes incoming messages connections wants broadcast message connections 
deadlock illustrated may arise follows thread obtained exclusive access connections locking connections vector stores connections 
goes loop processes incoming connection messages time 
messages processed thread want put messages 
queue runs full process busy wait queue holding lock connections 
simultaneously processing command causes broadcast message connections thread handler connections connection fig 

deadlock scenario waits free slot queue waits lock connections released 
dashed lines indicates wait solid line indicates lock obtained 
messages waiting processed 
try obtain lock connections synchronize 
lock released cyclic wait established 
note deadlock caused simultaneous wait java lock synchronized statement busy wait queue 
code written developer part java virtual machine jvm 
evaluation analysis took month till bug confirmed 
period time understanding code improving jpf translate subset java game server covers 
applications jpf reduced significantly 
completed verification parts code 
effort required fully verify code 
static slicing interpretation turned useful produce sufficiently small models 
approximations necessary narrow search space focus bugs interested finding 
confirms experiences remote agent analysis 
general user guidance crucial identifying parts code techniques applied 
concerning jpf technology current model checkers including spin constructed hardware protocols mind require static memory allocation 
support dynamic nature object oriented software specifically new 
construct generates object class jpf currently generates statically sized global promela arrays hold state objects causing wasted memory objects allocated arrays initialized hold larger number 
addition wasted memory second problem array solution intricate name resolution machinery required search right array looking variables 
caused class subtyping java class object statically decided 
consider example method object parameter 
applied object subclass consequence variable lookups consist conditional expressions searching subclasses 
early version jpf fact caused code blow compiler gcc fail code spin generates resulting promela program 
related issue lack variables local methods promela 
macros concept locality leading machinery translation variables local java methods 
jpf handle java major substantial omissions recursion strings floating point numbers importantly java libraries 
recursion requires elaborated modeling java virtual machine example terms call stack costly 
alternatively promela process concept model recursive methods solution appears time inefficient 
tried undocumented described 
translation java exceptions quite sophisticated handling special circumstances possible 
gerard holzmann helped providing new semantics promela construct case translation clever 
jpf currently improved translate bigger subset java handle extension verify class linear temporal logic operators 
translation cater garbage collection 
normally garbage collection lack thereof hidden programmer effect functionality program 
effectiveness verification may improved regarding states garbage equivalent states garbage 
garbage collection absolutely non trivial handle 
discussion successful application model checking program verification involve iterative process abstraction verification draw multiple techniques abstracting manageable models original program 
sheer size complexity software verification pushes current verification technology limits goal abstraction process fit parts verification problem boundaries feasible verification 
order model checking programs scalable program abstraction needs better understood supported automated tools 
briefly discuss issues relevant verification environment 
static analysis static analysis data flow analysis identify potential problem areas 
techniques able recognize complex dependencies deadlocks involving cyclic wait data locks example illustrated 
general automated guidance crucial guide effort certain parts software potentially buggy 
partial evaluation program specialization techniques remove behaviors original model 
verification engineer apply cautiously order remove behavior lead bug scenarios 
user guided abstractions code annotation user interaction potentially aided heuristics crucial effective application abstraction techniques 
code annotations potential means capturing higher level understanding programmer time development provide hints abstraction tool 
instance game server code contain information guide abstraction tool understand strings passed actual message types 
alternatively predefined coding styles form design patterns recognized abstraction tool 
possible automatic abstraction techniques suggested graf saidi extended string pattern matching applied determine enumeration type 
libraries decisions abstraction process deciding boundaries program verified model environment 
game server obvious boundaries network interface 
cases correctness properties may specified terms client applications 
case network needs modeled 
effective verification environment needs pre written environment models commonly libraries 
game server code instance uses java vector class 
studying jvm specification able write simple stubs modeled class sufficiently 
general environment modules predefined save verification engineer time effort 
compositional approaches alternative solution dealing scalability compositional model checking smaller portions code verified time assuming properties rest code results composed deduce correctness larger portions code 
approach problem free composing proofs nontrivial requires iteration induction proofs silver bullet 
practical solution called unit testing class small collection classes tested putting parallel aggressive environment 
remote agent analysis section example 
model checking play important role program verification level 
acknowledgments authors wish acknowledge persons nasa ames contributions terms ideas support tom mike lowry john penix willem visser 
stanford david dill discussions comments 
second author sponsored nasa contract number nag integrated environment efficient formal design verification 

burch clarke mcmillan dill 
sequential circuit verification symbolic model checking 
th acm ieee design automation conference 

iosif 
modeling validation java multithreading applications spin 
holzmann editors proceedings th spin workshop paris france november 


modeling verification sc applications 
proceedings tools algorithms construction analysis systems lisbon portugal lncs april 

corbett 
constructing compact models concurrent java programs 
proceedings acm sigsoft symposium software testing analysis clearwater beach florida march 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
acm symposium principles programming languages pages 

de roever langmaack pnueli eds 
compositionality significant difference international symposium compos bad germany 
lncs 
springer verlag september 

godefroid 
model checking programming languages verisoft 
acm symposium principles programming languages pages paris january 

gosling joy steele 
java language specification 
java series 


graf saidi 
construction state graphs pvs 
grumberg editor cav 
springer verlag june 

hatcliff dwyer laubach schmidt 
stating static analysis abstraction program specialization 

havelund lowry penix 
formal analysis space craft controller spin 
holzmann editors proceedings th spin workshop paris france november 

havelund 
model checking java programs java pathfinder 
nasa ames research center 
appear international journal software tools technology transfer 

gerard holzmann 
design validation computer protocols 
prentice hall 

jones editor 
special issue partial evaluation journal functional programming vol 

cambridge university press 

mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic publishers 

avrunin clarke 
data flow analysis checking properties concurrent java programs 
technical report computer science department university massachusetts amherst april 

pell gat muscettola smith 
plan execution autonomous 
proceedings international joint conference artificial intelligence 

tip 
survey program slicing techniques 
journal programming languages 
