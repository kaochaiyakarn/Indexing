modular lazy search constraint satisfaction problems thomas nordin andrew tolmach pacific software research center oregon graduate institute portland state university nordin cse ogi edu apt cs edu describe unified lazy declarative framework solving constraint satisfaction problems important subclass combinatorial search problems 
problems practically significant hard 
finding solutions involves combining general purpose search algorithms heuristics 
conventional imperative algorithms usually implemented hard understand reuse new algorithms combinations simpler ones 
lazy functional languages haskell encourage modular structuring search algorithms separating generation testing potential solutions distinct functions communicating explicit lazy intermediate data structure 
relatively simple search algorithms treated way past 
framework uses generic generation pruning algorithm parameterized labeling function annotates search trees conflict sets 
show advanced imperative search algorithms including backmarking conflict directed backjumping minimal forward checking obtained suitable instantiation labelling function 
importantly arbitrary combinations algorithms built simply composing labelling functions 
modular algorithms efficient monolithic imperative algorithms sense number consistency checks algorithms constant factor imperative counterparts runtime space usage 
believe framework especially suited experimenting find combinations algorithms specific problems 
combinatorial search problems offer great challenge academic researcher tremendous interest commercial users computationally intensive solve 
past decades ai community responded challenge producing steady stream improvements generic search algorithms 
numerous attempts organize various algorithms standardized frameworks comparison :10.1.1.27.4126
speed search algorithms improved new algorithms complicated harder understand combinations simpler standard algorithms 
problem exacerbated fact algorithms described large monolithic chunks pseudo code code 
recognized problems benefit tailor solution involving combination existing generic domain specific algorithms modularity strong point research 
difficult reuse code cut paste 
prove algorithms correct resort complex reasoning dynamic behavior 
supported part air force materiel command contract 
example search algorithms conceived varieties tree search actual tree data structures appear implementations virtual trees form recursive routine activation histories 
reason widely studied algorithms lack correctness proofs 
lazy functional programming world idea implementing search algorithm modular techniques commonplace 
classic hughes text bird wadler give examples search algorithms generation testing candidate solutions separated distinct phases glued explicit lazy intermediate data structure :10.1.1.100.8004
generate test paradigm essential laziness synchronize functions really coroutines way need store exponential sized intermediate data structure time 
general modular lazy approach lead algorithms simpler read write modify imperative counterparts 
algorithms described sources fairly elementary 
lazy declarative framework solving important class combinatorial search problems constraint satisfaction problems csps 
simplicity restrict attention binary constraint problems search algorithms fixed variable order restrictions fundamental 
framework explicit lazy tree structures tree node represents state search space subset tree leaf nodes corresponds problem solutions 
nodes labeled conflict sets record constraint violations corresponding states algorithms sets prune subtrees contribute solution 
framework written haskell 
provide small library separate functions generating labeling rearranging pruning collecting solutions trees 
particular describe generic search algorithm parameterized labeling function show variety standard imperative csp algorithms including simple backtracking backmarking conflict directed backtracking forward checking obtained making suitable choice pruning function 
explicit representation search tree allows think intermediate values gives new insights efficient algorithms 
functional data structures recasting imperative algorithms declarative lazy setting casts new light fundamental algorithmic ideas :10.1.1.54.6229
particular easy see combine algorithms simply composing labeling functions see result correct 
point improving search algorithms able solve larger problems faster obviously concerned performance lazy algorithms 
experiments show lazy modular haskell code times slower strict manually integrated haskell code order magnitude slower highly optimized code 
search times explode exponentially slowdowns orders magnitude little effect size problem solve fixed time bound 
algorithms combinations fast experiments interesting researchers past example able reproduce parts tables 
importantly implementations fast allow experimentation different combinations algorithms problems realistic size 
experiments cpu time ideal comparison metric difficult compare numbers obtained different implementations different systems 
widely alternative metric number consistency checks performed algorithm 
remainder organized follows 
section describes problem domain section gives haskell specification 
section describes simple tree backtracking search 
section introduces conflict sets generic search algorithm backtracking search framework 
section briefly discusses search heuristics 
sections describe sophisticated algorithms section discusses combination 
section summarizes performance results section describes related section concludes 
reader assumed working knowledge functional programming familiarity laziness 
peculiarities haskell syntax explained arise 
code examples available world wide web athttp www cs edu apt csp hs 
binary constraint satisfaction problems binary constraint satisfaction problem set variables fv ng variable finite set possible values domain set pairwise constraints variables restrict values take simultaneously 
constraint relation named variables triple di dj 
assignment vi xi associates variable vi value xi di collection assignments subset state vi xi vj xj constraint xi xj state consistent satisfies constraint variables pair assignments vj xj vk xk state matching constraint xj xk state complete assigns variables partial 
csp complete consistent state 
problems want calculate solutions wish find solution quickly possible 
fix variable order vn consider states vi state vj define level variable vi level state maximum variables levels 
simplify presentation assume domains size values represented integers set mg 
naive approach solving csp enumerate possible complete states check turn consistency 
binary csp consistency state determined performing consistency checks pair assignments state inconsistent pair variables detected pairs checked 
conventions search literature number consistency checks key measure execution code necessarily accurate measure check performed unit time case problems 
csps gives haskell framework describing csp problems implementation naive solver 
assignment constructed infix constructor 
csp modeled record containing number variables vars size domain vals constraint oracle rel 
represent oracle haskell function assignments iff assignments violate constraint 
function implemented dimensional array booleans mathematical formula 
solver standard lazy pipeline style separates generation candidate solutions set complete states consistency testing 
states represented lists assignments sorted decreasing order variable number 
code appears produce huge intermediate list data structure candidates lazy evaluation insures list elements generated demand elements fail filter test immediately garbage collected 
similarly inconsistencies appears build list inconsistent variable pairs state consistent function uses haskell list comprehension similar familiar set comprehension builds list pairs variable levels corresponding assignments drawn current state conflict 
type var int type value int data assign var value deriving eq ord show type relation assign assign bool data csp csp vars vals int rel relation type state assign level assign var level var val var value assign value value var val val maxlevel state var maxlevel maxlevel var val var complete csp state bool complete maxlevel vars generate csp state generate vars var var val st val vals st var inconsistencies csp state var var inconsistencies level level reverse rel consistent csp state bool consistent csp null 
inconsistencies csp test csp state state test csp filter consistent csp solver csp state solver csp test csp candidates candidates generate csp queens int csp queens csp fvars vals rel safe abs abs formulation csps haskell 
data tree node tree label tree label node lab lab type transform tree tree maptree transform maptree node cs node map maptree cs tree node cs map cs bool transform cs node filter label cs prune bool transform prune leaves tree leaves node leaf leaf leaves node cs concat map leaves cs tree node map trees haskell 
demands head list check list 
solver calculates earliest inconsistent pair variables state 
solver returns list solutions demanded obtain just solution computation asking just head result 
code uses space strict reading suggest solver extremely inefficient duplicates useful illustrate lazy coding style specification sophisticated solvers introduce 
simple problem useful illustrating different search strategies queens problem trying put queens chess board queen threatening 
standard optimization try place queen column 
definition apply general purpose csp machinery solve example queens generates list solutions queens problem 
backtracking tree search obvious defect naive solver duplicate tremendous amount repeatedly checking consistency assignments common complete states 
say state extends state contains assignments zero additional assignments 
fundamental fact csp extension inconsistent state consistent point searching extension solution 
observation immediately suggests better solver algorithm 
backtracking solver searches solutions constructing checking partial states empty state extending assignment time 
solver discovers inconsistent state immediately backtracks try different assignment avoiding fruitless exploration state extensions 
consistency new state tested just comparing mktree csp tree state mktree ss maxlevel ss ss maxlevel ss vars vals data just deriving eq csp state var var case filter rel reverse just level level csp transform state state var var csp maptree csp csp state csp filter complete csp leaves 
maptree fst prune snd 
csp mktree csp simple backtracking solver csps 
newly added assignment previous assignments state inconsistency involving previous assignments discovered earlier 
solver manages reach complete state encountering inconsistency records solution multiple solutions wanted backtracks find 
backtracking solvers viewed naturally searching tree node corresponds state descendents node correspond extensions state 
conventional imperative implementations backtracking tree explicit program recursive implementation tree isomorphic dynamic activation history tree program usually tree little metaphor helping programmer reason informally algorithm 
lazy functional paradigm natural treat search trees explicit data structures programs constructed pipelines operations build search label manipulate prune actual trees 
rely laziness avoid building entire tree 
gives haskell definitions tree datatype associated utility functions 
atree node containing label list children 
maptree analogues familiar functions lists 
leaves extracts labels leaves tree list left right order 
generates tree function computes children node :10.1.1.100.8004
code uses trees implement backtracking solver lazy pipeline 
algorithms discussed expect tree generated maintained fixed variable order nodes level tree counting root level extend parent assignment generator mktree works providing function generates extension possible value variable 
node describes entire partial state reasonable haskell implementation stores single assignment pointer remainder state embedded parent node 
application csp returns tree transformer adds annotation node recording earliest inconsistent pair returned 
standard tree removes nodes predicate true instance prunes inconsistent nodes 
annotations removed maptree fst 
nodes representing 

portion search tree 
nodes level annotated assigned value bold earliest inconsistent pair 
positions search tree 
left right diagrams correspond left right subtrees level respectively 
complete states left tree solutions remaining pipeline stages extract standard tree function leaves standard list function filter 
illustrates labels produced part tree corresponding board positions shown 
note children inconsistent nodes pruned 
essential note pipeline demand driven stage executes demanded stage 
particular inconsistency calculations performed nodes tree excised prune values nodes demanded 
get desired effect backtracking explicit manipulation control flow 
small part intermediate tree live non garbage data time spine tree root current node essentially stored activation records recursive imperative implementation 
lazy algorithms pay worst constant factor space imperative counterparts 
pay overhead building storing garbage collecting tree node haskell implementation performs effective deforestation cost repeated intermediate tree pipeline 
reasons lazy implementation backtracking times slower monolithic strict haskell implementation see section 
data known var unknown deriving eq bool known true false bool known true false csp state csp complete csp known unknown type labeler csp transform state state search labeler csp state search labeler csp map fst filter snd leaves prune snd labeler csp mktree csp bt labeler bt csp maptree case csp csp just known csp state search bt conflict directed solving csps 
conflict sets generic search utility backtracking solver ability prune subtrees rooted inconsistent nodes consistent nodes 
course just state consistent doesn mean extended solution assignments may inconsistent possible choices variables 
shows example queens assignment value level left hand tree consistent extended solution 
solver identify conflicted states prune subtrees 
precise exact conditions pruning possible definition 
conflict set state subset indices variables assigned state solution assign different value member subset 
formally state fv kg conflict set cs subset fv ng solution cs 
thinking imperatively say conflict set contains variables changed reach solution 
note conflict sets general uniquely defined 
particular state level non empty conflict set cs subset cs conflict set 
state non empty conflict set extension state solution conversely empty conflict set extension solution 
strong characterization states example compute conflict set root tree empty state test empty determine problem solution 
operate environment conflict sets unknown 
obviously possible identify conflicted consistent state exploring extensions int transform seed node cs node seed zipwith seed cs seed random seed btr int labeler btr seed csp bt csp seed randomization heuristic trick avoid exploring save effort pruning remainder 
address algorithms property section 
moment note inconsistent state non empty conflict set 
particular state earliest inconsistent pair fi jg conflict set call earliest conflict set 
subsume backtracking search general algorithm call conflict directed search shown 
define generic parameterized function annotates nodes conflict sets 
precisely labeler determine legal conflict set node annotates node annotates 
general permit labeler rearrange prune input tree long output tree properly labeled contains solution states 
output labeling stage fed removes subtrees rooted nodes labeled known non empty conflict sets 
demand driven execution guarantees excised subtrees need labeled 
arrangement labeler allowed assume labels node non empty conflict set called descendent node need annotate descendents properly allows simpler labeler code 
pruning solution nodes just leaves tree annotated known empty conflict sets remainder pipeline simply filters 
framework sufficiently general purpose accommodate search algorithms discussed remainder 
instantiating search labeler function bt obtain simple backtracking behaves just 
sophisticated algorithms discussed obtained labeler functions unchanged 
heuristics search order naive solver interested solution solutions search unchanged merely demand just head solution list 
solutions extracted left right order implies time required find solution sensitive order values tried variable 
value ordering heuristics established imperative search literature 
heuristics implemented specialized generator functions produce initial tree desired order 
modular approach view heuristics rearrangements canonically ordered initial tree keeps initial generator simple allows multiple heuristics readily composed 
rearrangement heuristics easily expressed framework incorporating labeler function 
example queens search speeded considering values random order 
transforms canonical tree randomizing children random number generator shown 
application btr seed returns labeler combines randomization standard backtracking search 
implemented number heuristics generic problem specific omit details lack space 
type table row indexed var type row indexed value bm labeler bm csp maptree fst csp csp csp csp table unknown vals vars csp table transform state state table csp tbl node cs node tbl map csp csp tail tbl cs state csp table table csp tbl tbl var val vals tbl zipwith zipwith tbl var val val vals var var vars cs var val cs unknown rel var val var val known var var cs csp transform state table state table csp maptree tbl unknown tbl tbl cs tbl cs unknown csp head tbl value backmarking backmarking formulation backtracking search pipelined algorithm separate labeling pruning phases tree annotated conflict sets intermediate data structure sense ask ways perform labeling phase 
bt works checking assignment previous assignments state 
approach checks consistency partial state perform duplicate pairwise consistency checks children node isomorphic 
consider node level consider descendent checking consistency descendent pairwise checks assignment assignments levels checks duplicated corresponding descendents sibling course inconsistent ancestor pruned away 
example compare leftmost nodes left right subtrees level generate conflict sets bt comparisons case 
alternative approach cache results consistency checks reused sibling reduce total number consistency checks cost space needed cache 
shows haskell algorithm incorporating idea 
annotate node cache store information inconsistencies node state assignments descendents 
cache organized table earliest conflict sets descendents indexed level greater equal node level value table represented list lists 
root table entry contains unknown 
computes table contents node node assignment node parent table considering possible assignment turn 
parent table records known conflict pair assignment conflict 

portion search tree annotated conflict sets computed 
pair copied current table conflict check performed result known conflict pair unknown recorded 
note node table contains refinement information parent table table level containing complete consistency information assignments level tree annotated cache tables mapped node extract conflict pair node assignment node table node recorded conflicts represents complete state solution empty conflict set 
ultimate annotated tree identical produced 
usual rely lazy evaluation avoid building tables contents needed 
tables remain actual order consistency checks performed similar 
important point node table entries inherited parent table duplicate consistency checks avoided 
obtain complete solver parameter 
somewhat surprisingly algorithm turns equivalent terms consistency checks standard imperative algorithm called backmarking 
conflict directed backjumping bt bm algorithms annotate inconsistent nodes known conflict sets internal nodes remain 
compute non empty conflict sets internal nodes closer root tree prune larger subtrees speed search 
fact nodes non empty conflict sets example see leftmost node level 
approach computing internal node conflict sets construct bottom conflict sets subset children 
key facts conflict sets node level child level known conflict set cs contain conflict set 
particular child empty conflict set empty conflict set 
ii children node level non empty conflict sets cs cs cs cs cs cs conflict set labeler csp bj csp bt csp bj csp transform state state bj csp known cs chs node known cs chs unknown chs node known cs chs cs combine map label chs combine state var var combine acc acc combine known cs css acc maxlevel cs cs combine css cs union acc bj csp transform state state bj csp known cs chs node known cs chs unknown chs cs node cs node cs chs cs known combine map label chs conflict directed backjumping 
facts easy prove definition conflict set 
intuitively fact says child conflicts don involve children conflicts 
special case just says child extended solution 
fact ii says child extended solution solution differ value offending variables children 
fact crucial optimizing search permits parent conflict set computed strict subset children conflict sets 
define lazy bottom algorithm computing internal node conflict sets tree lazily seeded conflict set path root leaf 
haskell version labeling algorithm 
parent node doesn conflict set bj build 
combine inspects conflict sets children turn 
finds child fact applied immediately returns conflict set parent child applies fact ii 
lazy evaluation subtrees corresponding remaining children explored 
algorithm works correctly initial seeding conflict sets effective conflict sets small contain low numbered variables increases number levels fact applied 
earliest inconsistent pairs represent consistency conflicts 
combination bj bt commonly referred conflict directed backjumping cbj just backjumping literature cornerstone newly developed algorithms 
usual imperative formulation algorithm notoriously difficult understand prove correct 
relied analysis caldwell understanding conflict sets unaware description algorithm form labeling 
behaves just imperative cbj sense performs number consistency checks unfortunate space leak 
problem pruning phase remove children node node conflict set computed computation may generate substantial part children subtrees memory 
plug space leak effectively simplify implementation don bother performing intersection step fact ii harmless node non empty conflict set include indices descendents 
fc labeler fc csp csp csp csp csp collect var collect collect known cs css cs union collect css csp transform state table state maptree cs tbl cs vs vs tbl vs cs null cs known collect head forward checking 
neatly adding additional pruning labeler illustrated 
forward checking way assigning conflict sets consistent internal nodes developed basis cache tables introduced backmarking section 
recall tables record node earliest conflict sets descendent nodes table entries consistent nodes remain 
suppose table node level contains row corresponding domain level entry contains non empty conflict set 
evident node extended solution assignments rules possible values variable 
example consider left diagram add queen position immediately see row placement column 
exist non empty conflict set labelling set avoid search subtree rooted technique called domain 
combination domain backmarking corresponds known imperative algorithm called forward checking 
cache table construction lazy rediscovered free minimal lazy forward checking discovery imperative literature 
shows code implementing domain 
gather list test non empty straightforward 
interesting question conflict set assign node domain occurred 
valid throw additional variables non empty conflict set just set ig 
better smallest available conflict sets available information increase utility algorithms cbj 
case cache table row wiped domain records existing assignment rules possible value domain 
union variables assignments restricted ig valid conflict set solution assign different value 
wiped domain compute conflict set simplicity limit computation just chooses 
mixing matching major advantage declarative approach trivially combine algorithms function composition long take consistent view conflict set annotations 
combination forward simplify implementation omitting restriction step harmless 
queens bt ghc monolithic bt table runtime seconds different versions simple backtracking search queens problem 
checking backjumping csp bj csp fc csp known knowledge previously achieved lazy forward checking 
imperative forward checking traditionally described filtering conflicting values domains variables hard explain profitably combined backjumping information base backjumping decisions 
viewpoint forward checking just time efficient way generating conflict sets combination perfectly reasonable 
similarly combination backmarking backjumping csp bj csp bm csp tricky implement correctly imperative setting simple turns fewer consistency checks algorithms 
problem specific value ordering heuristics introduced possibilities new algorithm design open 
best combination algorithm features tends depend particular problem hand important able experiment different combinations framework extremely easy 
experimental results estimate cost modularity laziness wrote integrated strict version simple backtracking search queens problem haskell compared runtime 
table reports results indicate overhead factor times 
measurements taken ghc glasgow haskell compiler version optimization turned running lightly loaded sun ultra solaris 
show runtime optimized library solving csps compiled version platform runs order magnitude faster partly performs consistency checks lookup precomputed table 
table gives number consistency checks different algorithms queens problem 
related hughes gives lazy development minimax tree search :10.1.1.100.8004
bird wadler treat queens problem generate test lazy lists 
laziness context lazy languages improving efficiency existing csp algorithms far know laziness previously modularize csp algorithms 
queens bm fc bt solutions table number consistency checks performed various algorithms queens problem 
algorithms identified labeler function name 
reformulations standard algorithms framework exist literature frameworks typically aren modular best case differences algorithms highlighted showing lines pseudo code changed :10.1.1.27.4126
algorithms classified amount arc consistency ac number nodes visited 
classifications shown backmarking forward checking algorithms previously thought fundamentally different share foundation independently rediscovered section 
remains confusion experts field algorithm description really implements 
considering long standard algorithms existed surprisingly proofs correctness 
correctness criterion search algorithms soundness completeness automatic theorem prover derive algorithms caldwell 
term conflict set common literature precise definition difficult achieve base caldwell 
expressing algorithms lazy functional language clarifies algorithm invariants depends 
little bit care modularize code traditionally expressed monolithic imperative form 
experimentation easy 
new combinations algorithms forward checking plus conflict directed backjumping expressed single line code equivalent algorithm imperative literature requires lines mysterious pseudocode 
despite overheads introduced laziness haskell large experiments conducted 
example combining allowed find solutions queens problem queens haskell interpreter hugs 
major problem working lazy code difficulty predicting runtime behavior particularly space 
minor code changes lead asymptotic differences space requirements available tools investigating problems haskell inadequate 
plan formal proofs algorithmic correctness relatively easy framework investigate variable reordering heuristics core current ai search literature 
bacchus grove 
forward checking algorithm 
principles practice constraint programming pages france september 
bacchus van run 
dynamic variable ordering csps 
montanari rossi editors principles practice constraint programming pages france september 
bird wadler 
functional programming 
prentice hall 
caldwell gent underwood 
search algorithms type theory 
submitted theoretical computer science special issue proof search type theoretic languages september 
dent mercer 
minimal forward checking 
prec 
int conference tools artificial intelligence pages new orleans louisiana 
ieee computer society 
frost algorithms heuristics constraint satisfaction problems 
phd thesis university california irvine 
gill launchbury peyton jones 
short cut deforestation 
proc 
acm fpca 
ginsberg 
dynamic backtracking 
journal artifical intelligence research 
hughes :10.1.1.100.8004
functional programming matters 
computer journal 
king launchbury 
structuring depth search algorithms haskell 
proc 
acm principles programming languages 

theoretical evaluation selected backtracking algorithms 
master thesis university alberta 
kumar 
algorithms constraint satisfaction problems survey 
ai magazine 
nadel 
representation selection constraint satisfaction case study queens 
ieee expert june 
okasaki 
purely functional data structures 
cambridge university press 
schiex verfaillie 
lazy arc consistency 
proc 
aaai pages portland oregon usa 
tsang 
foundations constraint satisfaction 
academic press limited 
van beek 
library constraint satisfaction techniques 
available ftp ftp cs ualberta ca pub software 

