universal resolving algorithm inverse computation functional language sergei abramov robert gluck program systems institute russian academy sciences ru russia ru department information computer science school science engineering waseda university ku tokyo japan acm org backhouse oliveira eds mathematics program construction 
proceedings 
lncs pp 

springer verlag berlin heidelberg 
algorithm inverse computation firstorder functional language notion perfect process tree 
universal resolving algorithm ura introduced sound complete computes solution exists finite time 
algorithm implemented tsg typed dialect graph shows remarkable results inverse computation functional programs pattern matching inverse interpretation programs 
standard computation calculation output program input forward execution inverse computation calculation possible input program output backward execution 
inverse computation important useful concept di erent areas 
advances direction achieved area logic programming solutions emerging logic proof theory 
inversion restricted context logic programming 
reversibility important concept programming language direction algorithm easier define directions needed cf 
encoding decoding 
interestingly inversion spanned relatively little interest area functional programming exceptions essential concept mathematics 
distinguish approaches solving inversion problems inverse interpreter performs inverse computation inverse compiler performs program inversion 
determining program output input inverse computation 
program produces inverse compiler called program inverter 
determine input leave diku department computer science university copenhagen 
sergei abramov robert gluck inverse interpreter inv int inverse compiler inv comp shown inverse computation program inversion related conveniently futamura projections known partial evaluation program inverter generating extension inverse interpreter :10.1.1.16.6901
remainder shall focus inverse computation 
example inverse computation consider pattern matcher takes strings input pat str returns success pat substring str failure 
instance computation pattern bc string abcd returns success string pattern cb returns failure 
match bc abcd success match cb abcd failure standard computation string str may want ask inverse questions patterns substrings str patterns substrings str 
compute answer implement new programs general time consuming error prone task inverse interpreter ura extract answer original program 
fixing output success failure string str leaving pattern unspecified placeholders 
ura match abcd success ans ura match abcd failure ans inverse computation answer tells values placeholders may take 
general computability answer guaranteed sophisticated inversion strategies 
inversions resource consuming undecidable 
program injective missing input answer universal possible inputs existential possible inputs 
consider universal solutions name algorithm 
earlier topic program transformation hand specify problem inverse easy computation derive cient algorithm manual application transformation rules 
contrast approach aims mechanical inversion 
observation su ces principle stage inverse interpreter futamura projections give inverse compiler 
convenient inverse computation simpler program inversion 
second key idea notion perfect process tree systematically trace universal resolving algorithm space possible execution paths standard computation order find inverse computation 
universal resolving algorithm ura introduced sound complete computes solution exists finite time 
algorithm designed order functional language expressions data structures 
principles methods developed limited language extended programming languages 
main contributions approach inverse computation organization structure formal specification universal resolving algorithm order functional language notion perfect process tree implementation algorithm experiments inverse computation programs pattern matchers interpreters constructive representation sets expressions allowing operations contractions perfect splits 
organized follows 
section formalize set representation expressions section define source language 
program related extension set representation introduced section 
sections steps inverse computation 
implementation experiments discussed section 
conclude discussion related section section 
set representation expressions section introduces basic notions needed inverse computation source language expressions 
particular define set representation expressions related operations substitution concretization contraction splitting 
simple elegant way represent subsets value domain variables expressions variables restrictions variables 
consider example mathematics 
definition set points expressed means variables typed variables fact assumed range set reals ii expression variables iii restrictions variables 
approach representing sets expressions introduce similar notions variables expressions restrictions 
expressions expressions known lisp value domain programs 
syntax expressions grammar fig 

values build recursively infinite set symbols atom cons constructors 
value dval ground 
shorthand atom 
sergei abramov robert gluck expressions expressions cons da da atom cons xe da da atom xa xe xa value domains dval da xe xa cexp da cvar symb fig 

expressions expressions representing sets expressions expressions variables called expressions fig 
represent sets expressions means types variables ca variables xa ce variables xe variables xa range variables xe range dval 
refine set representation introduce restrictions variables fig 

restriction set inequalities defining set values ca variable xa equal 
inequality expressed ca variables atoms 
form pairs expressions restrictions short cr pairs fig 

main method representing manipulating sets constructive way 
structures may contain variables notational convenience indicate notation definition expression 
expression expression cexp defined fig 

var denote set variables occurring definition construction 
expression construction cc 
define cexp 
definition inequality restriction 
inequality ineq ineq unordered pair da da da da symbol contra 
restriction br restr finite set inequalities 
var br denote set ca variables occurring br definition tautology contradiction 
tautology inequality form da da ineq da da ground da da contradiction inequality form da da ineq symbol contra 
contra denote set tautologies set contradictions respectively 
sect 
extend definition domain program related constructions state bs environment universal resolving algorithm cr pairs restrictions cr cc br br ineq cc see fig 
ineq da da contra value domains cr cc br restr ineq ineq fig 

cr pairs restrictions definition cr pair 
cr pair cr pair cc br cc construction br restr restriction 
var cr denote set variables occurring cr var cr var cc var br example 
expressions cr pairs cr cons xa cons xe cr cons xa cons xa cr cons xa cons xa xa cr cons xa cons xa xa xa substitution concretization define substitution concretization 
semantics applying substitution cr pair cr defined fig 

substitution define concretization cr set expressions represented cr definition substitution 
substitution 
sequence typed bindings variables pairwise distinct expressions implies 
substitution ground ground 
dom denote set 
definition substitution construction 
cc construction 
substitution result applying cc denoted cc construction obtained replacing occurrence cc 
definition full substitution 
cc construction restriction cr pair substitution 
full substitution cc ground var cc dom 
fs cc denote set full substitutions cc 
definition substitution restriction 
br restr result applying br denoted br defined br def contra br contra br br ineq ineq br sergei abramov robert gluck cr pair cc br cc br expression dom atom atom cons cons inequality contra contra da da da da restriction br contra br contra br br ineq ineq br fig 

definition substitutions cr ineq br definition says result applying substitution restriction br contradiction means impossible satisfy new restriction new set inequalities tautologies removed 
ineq inequality var ineq 
def 
ineq tautology contradiction 
fact allows prove proposition 
proposition 
br restr restriction fs br full substitution br br br contra definition substitution cr pair 
cr cc br cr pair substitution result applying cr denoted cr defined cr def cc definition cr concretization 
set data represented cr pair cc br denoted cc br defined cc br def cc fs cc br br example 
cr pairs example represent sets values cr cons da cons da dval cr cons da cons da da cr cons da cons da da da cr cons da cons da da da da da formal point view necessary remove tautologies convenient check empty set applying full substitution cf 
prop 

universal resolving algorithm contraction splitting narrow set values represented cr pair introduce contractions 
contraction substitution restriction br split pair contractions partitions set values disjoint sets 
perfect split guarantees elements lost elements added partitioning set 
definition contraction 
contraction contr substitution restriction br restr 
definition contracting 
result contracting cr pair bcc br contraction contr denoted cc br cr pair defined cc br def cc br cc br restr notational convenience define br def br br restr easy show cr cr cr contr 
contraction enlarge set represented cr pair 
definition 
define special contractions identity id def contradiction contra def contra restr 
easy show cr cr id cr cr contra definition split 
split sp split pair contr 
definition perfect splitting 
split split perfect cr divides cr disjoint sets cr cr cr cr cr cr cr theorem perfect splits 
cr pairs cc br splits perfect 
id contra 
xa da xa da 
xa xa xa xa 
xe xa xe cons xe xe xa xa xe var cc xa xe xe var cc var br da 
notation denote fresh variables cc br 
proof omitted 
sergei abramov robert gluck grammar program define definition call term eqa 
ea ea cons 
xe xe xa condition cons xe ea expression ea atom xa atomic expression xe xa typed variable syntax domains program definition term cond fname symb pexp ea pvar xe xa fig 

syntax typed graph tsg source language consider order functional language called tsg source language 
language typed dialect graph 
syntax tsg grammar fig 
operational semantics defined fig 

example program concrete syntax shown fig 

family languages earlier program transformation 
syntax 
tsg program sequence function definitions definition contains name parameters body function 
body function term function call call conditional expression values constructed atom cons tested decomposed eqa cons 
variables xa range atoms variables xe range arbitrary values 
language restricted tail recursion 
assume tsg program consider formed sense function name appears call defined types arguments parameters compatible variable body definition parameter defined enclosing conditional 
definition program called main function 
program represented program map maps function name corresponding definition semantics 
evaluation term updates program state consists term environment 
meaning term state transformation computing ect term state 
consider input program arguments call program main universal resolving algorithm condition eqa 
ea ea eqa 
ea ea ea ea eqa 
ea ea condition cons 
cons xe xe cons 
xe xe xa atom xa cons 
xe xe xa terms define 
xn 
xn en call 
en transition semantic values term pvar dval fname definition fig 

operational semantics tsg programs function output program exists value returned evaluating call 
semantics tsg relies definitions 
values variables 
values dval defined grammar fig 

addition tuples values ds 
input programs 
set value tuples denoted 
program contains types variables pvar 
variables xa range variables xe range dval 
recall dval 
environment 
environment 
sequence typed bindings variables pairwise distinct values implies 

environment holds values program variables 
write denote environment just variable bound value write denote value 
pexp denotes value defined sergei abramov robert gluck result replacing variable occurring value 
program formed rules fig 
defines value state 
state term environment pair represents current state computation 
state form pexp terminal state non terminal state 
evaluation 
defines transition relation states 
rules straightforward 
rule call states call function returns new state contains body definition new environment binds parameter value obtained 
rule states depending evaluation condition environment new state returned contains branches updated environment rules eqa 
state depending equality values ea ea new state formed containing term unchanged environment 
rules cons 
state depending value new state formed containing term updated environment value outermost constructor cons environment extended variables xe xe bound head tail component value respectively 
environment extended variable xa bound atom 
indexed transition relation defines transition state state program represented program map rule formulation fig 
trivial keep extension 
write infix notation drop index clear context 
example write definition program evaluation 
formed tsg program main function define 
ds 

define initial state ds def call 


define program evaluation follows ds def ds undefined program related extension set representation extend set representation introduced sect 
program related constructions needed inverse computation tsg programs state environment input 
notions language dependent relate operational semantics tsg 
extend definition construction cc include state bs binding environment input ds fig 

domain def 
extended include sets 
second extend application substitution program related constructions fig 

universal resolving algorithm extended constructions cc bs ds construction bs state xa da xe binding environment ds input defined fig 
expression value domains bs cc ds fig 

program related extension constructions state binding environment 
bn 
bn input 
dn 
dn fig 

substitution program related constructions extensions definitions results sect 
remain valid 
particular thm 
perfect splits holds extended set constructions 
extension domain leads new cr pairs 
cr pair containing state bs called configuration 
cr pair containing input ds called class 
represents set states set value tuples respectively 
definition class configuration 
cr pair ds br ds class 
cr pair bs br bs configuration 
class conf denote set classes set configurations respectively 
definition formed input class initial configuration 
formed tsg program main function define 
cls 
br class 
say cls formed input class cls variable implies 

define initial configuration cls def br cls formed input class call 

sergei abramov robert gluck tab tree ans cls inv tab ppt fig 

conceptual approach steps inverse computation steps inverse computation inverse computation organized steps walking perfect process tree input output pairs extracting answer inversion problem input output pairs 
key idea approach notion perfect process tree represents computation program missing input tree possible computation traces 
fork tree partitions input class disjoint classes 
algorithm constructs breadth lazily perfect process tree program input class cls shall concerned di erent implementation techniques rigorous development principles foundations inverse computation 
general inverse computation ura takes form ura cls ans program cls input class output 
say tuple cls request inverse computation class cls specifies set admissible input search space fixed output 
set ans solution inversion problem 
set substitution restriction pairs ans br 
represents largest subset cls ds elements br solution ds cls 
formally correct solution inversion problem specified cls br ds ds cls ds sections steps 
perfect process tree tracing program standard computation cls 
tabulation forming table input output pairs perfect process tree class cls 
inversion extracting answer output table input output pairs 
structure algorithm illustrated fig 

method sound complete tsg universal programming language universal resolving algorithm follows fact universal turing machine defined apply inverse computation principle computable function 
method inverse computation full generality 
organization inverse computation virtually programming language 
tsg means develop fully formalize algorithm inverse computation 
fact set representation introduced sect 
programming language expressions example subset lisp simple flowchart language expressions 
notions state configuration may change depending language 
changing source language ects construction perfect process tree tabulation inversion steps ected 
walking perfect process tree transition relation fig 
defines walks perfect process tree 
starting partially specified input goal follow possible walks standard evaluation may take generalized input 
basis inverse computation input program partially specified 
process tree 
computation process potentially infinite sequence states transitions 
state transition deterministic computation fully defined 
set computation processes captures semantics program 
process tree examine set computation processes computation deterministic input partly specified 
node process tree contains set states represented configuration 
configuration branches configurations process tree corresponds conditional transition set program states sets program states 
defined walk process tree feasible initial state exists selects node process tree feasible belongs feasible walk process tree perfect walks feasible 
role 
important operations developing process tree 
applying perfect splits branching configurations 
cutting infeasible branches tree 
cutting infeasible branches important infeasible branch non terminating terminating unreachable node 
risk entering non terminating branches inverse computation terminating completeness solution preserved 
terminating branch leads terminal state associated empty set input solution soundness solution preserved 
short correctness solution guaranteed algorithm inverse computation terminating cient 
correctness solution sergei abramov robert gluck condition eqt 
ea ea eqa 
ea ea id ea ea ea ea mkbind ea ea eqa 
ea ea ea ea ea ea eqa 
ea ea condition cons 
cons cons 
id da da cons 
id xe xe xe xe cons xe xe cons 
xe xa xe xa cons 
terms define 
xn 
xn en call 
en id transition bs bs br contra bs br bs br semantic values bs term pvar cexp fname definition fig 

trace semantics perfect process trees tsg programs guaranteed applying perfect splits case empty sets input detected development tree solution 
formulation transition relation includes operations 
walking process tree 
fig 
defines transition relation configurations 
transition relation construct tree allows perform walks perfect process tree 
transition relation non universal resolving algorithm deterministic condition eqa cons 
decided 
case rules permit follow possible branches 
transition rule states configuration bs br transformed new configuration obtained evaluating state bs new state bs applying contraction associated perfect split configuration bs br lead contradiction mean transition feasible 
rule ensures perfect splitting cutting infeasible branches 
rules call similar rules operational semantics fig 
take state new state associated contraction 
case call identity contraction id returned split case conditional contraction produced evaluating condition returned 
describe rules conditions detail 
rules eqa 
state depending equality ca expressions ea ea new state formed associated contraction 
equality rule applies ca expressions ea ea equal means represent set values 
second third rule may apply time 
case ea ea equal ca expressions variable inequality ea ea tautology 
states associated corresponding contraction perfect split thm 
split equipped substitution binding ca variable ca expression equipped inequality ea ea 
auxiliary function mkbind binding arguments ensuring ca variable appears left hand side binding 
rules cons 
associate new state contraction 
rule correspond cons rules fig 
expression 
outermost constructor cons true branch entered false branch entered 
case ce variable xe third fourth rule apply states equipped corresponding contraction perfect split thm 
split equipped substitution instantiating xe new cons expression xe xe fresh ce variables equipped substitution binding ce variable xe fresh ca variable xa correctness 
proving trace semantics perfect process trees fig 
correct wrt operational semantics tsg consist soundness completeness argument 
state correctness initial configuration transition step state main correctness result 
shall concerned technical details proofs fact trace semantics correct wrt operational semantics 
theorem correctness initial configuration 
formed tsg program cls formed input class completeness soundness cls ds ds cls sergei abramov robert gluck transition bs bs br contra cls bs br tab cls bs br semantic values tab tab class cexp fig 

tabulation tsg programs theorem correctness ppt transition 
formed tsg program formed configuration completeness 

soundness 
theorem correctness ppt 
formed tsg program cls formed input class completeness ds cls 
ds 
cls soundness 
cls ds cls 
ds proof omitted base case thm 
induction step thm 

tabulation inversion defining solution inverse computation define tabulation program input class cls tabulation divides input class cls disjoint input classes associated leave output process tree 
input output pairs collected set tab cls 
define transition relation tab fig 
carries input class applies contraction encountered path process tree 
define solution inverse computation set ans cls 
definition tabulation 
formed tsg program cls formed input class define tabulation cls follows tab cls def cls cls cls tab cls br definition inverse computation 
formed tsg program cls formed input class dval 
define inverse computation cls follows ans cls def br cls tab cls br restr cls br cls universal resolving algorithm correctness 
proving correctness tabulation tab cls consist soundness completeness argument 
completeness prove evaluation 
input output pair cls tab cls 
cls 
soundness prove cls tab cls 
cls implies 

corresponding argument set ans cls correctness tabulation 
shall concerned technical details proofs fact tabulation inversion correct wrt operational semantics 
theorem correctness tab 
formed tsg program cls formed input class tab cls completeness soundness ds ds cls ds ds ds br fs ds br br theorem correctness ans 
formed tsg program cls formed input class dval ans cls completeness soundness ds ds cls ds br cls br important property set tab cls property allows inverse input output pairs independently order 
theorem tab 
formed tsg program cls formed input class cls cls di erent input output pairs tab cls cls cls algorithmic aspects section discuss algorithmic aspects related universal resolving algorithm haskell implementation 
def 
specifies solution obtained tabulation perfect process tree algorithm inverse computation traverse process tree algorithmic strategy extract solution leaves 
algorithm fully implemented hugs dialect haskell lazy functional language lines pretty printed source text 
algorithm structured separate functions function ppt builds potentially infinite process tree function tab consumes tree perform tabulation function inv enumerates set ans cls 
main function ura performs inverse computation defined hugs script available www ru ura mpc sergei abramov robert gluck ppt class tree ppt cls ces define xs env xs ces call xs env cls conf tree call es env node kid define xs env xs es env env cond env node kt kf ccond cond env kt kf binds case contra env env binds env leaf ccond cond split ccond eqa 
ea ea env cea ea env cea ea env case cea cea kid atom atom kid xa cea cea cea cea xa cea cea ccond cons 
xh xt xa env ce env case ce cons cet kid xh xt cet atom kid xa ce xa kid xa ce xe split xh xt cxt xa split ce cons cxt split fig 

function ppt constructing perfect process trees written haskell ura class dval restr ura cls inv tab ppt cls cls cls source program class cls output function ura returns list substitution restriction pairs restr 
due lazy evaluation strategy haskell process tree tabulation developed demand universal resolving algorithm type tab class cexp tab tree class tab tab tree cls tab cls tree tab tab cls leaf env cts cls env tab cts tab cls node brs cts tab cts map tree cls tree brs inv tab class dval restr inv tab cls concat map ans tab ans cls ce case clash ce false true sub case cls contra sub cls cls sub sub cls cls fig 

functions tab inv tabulation inversion written haskell function ura 
type definitions class dval restr correspond domains class dval restr source program typed 
implementation functions ppt tab inv shown figs 

function ppt fig 
implements trace semantics fig 
applicable rules fired time 
function tree structure record walks data tree leaf conf type branch contr tree node conf branch rule applies branch added branch transition deterministic branches transition non deterministic 
node labeled current configuration branch contraction split contraction needed tabulation 
function ppt initial function function constructs tree function ccond evaluates condition 
reader may notice format returned function ccond tuple contains split performed current configuration possibly updated bindings true false branch free index generating fresh variables 
infix operator 
implements substitution infix operator 
implements update 
auxiliary functions return perfect splits ca ce variables respectively defined thm 
perfect splits split thm split cea cea cea sergei abramov robert gluck split thm split cons function tab fig 
consumes process tree produced ppt breadth strategy order ensure leaves finite branches eventually visited 
important depth strategy may fall infinite branch visiting branches 
function inv fig 
enumerates set ans cls def 

auxiliary functions clash 
ds ds auxiliary function clash returns true substitution exists ds ds dom var ds false 
requirement domain ensures redundant bindings added solution exists produce unique 
cls cls class cls obtained cls contractions auxiliary function returns br br restr cls cls br dom var cls termination 
course inverse computation undecidable algorithm sound complete terminating 
algorithm sound complete terminating 
solution exists computed finite time due breadth strategy 
algorithm terminate search solutions process tree may continue infinitely elements solution 
algorithm terminates branches process tree finite 
experiments results section illustrates universal resolving algorithm means examples 
example illustrates inverse computation pattern matcher second example demonstrates inverse interpretation programs 
pattern matching 
performed inversion tasks sect 
naive pattern matcher written tsg fig 

task find set strings pattern substrings abc 
perform task leave input pattern unknown xe set input string abc desired output success 
task find set strings pattern substrings aaa 
perform task setting similar task pattern xe string aaa desired output set failure 
breadth strategy implemented line function tab appending list level nodes produced map list cts 
run times hugs pc intel pentium mmx mhz ms windows 
universal resolving algorithm match define match define call cons 
sh st define pp ss call match st cons 
ph pt failure cons 
ph ph error atom expected cons 
sh st cons 
sh sh error atom expected eqa 
ph sh call pt st pp ss call pp ss failure success fig 

naive pattern matcher written concrete tsg syntax shows results applying ura matcher 
answer task finite representation possible substrings string abc fig 
answer task finite representation strings substrings aaa fig 
ii 
ura terminates seconds task task 
interpreter inversion 
proven inverse computation performed programming language standard interpreter intn written inverse interpreter result obtained inverse computation interpreter solution inverse computation theorem guarantees solution correct program regardless intn operational properties :10.1.1.16.6901
tsg universal programming language principle perform inverse computation programming language 
result able apply algorithm programs written languages tsg 
put theorem practical trial implemented interpreter imperative language called mp tsg 
mp small imperative language assignments loops 
mp program operates store consisting parameters local variables 
semantics conventional pascal style semantics 
mp interpreter lines pretty printed source text functions tsg largest tsg program implemented 
compare results inverse computation tsg rewrote naive pattern matcher mp 
shows results inversion mp matcher 
answer task finite representation possible substrings string abc fig 
iii 
answer task finite representation strings substrings aaa fig 
iv 
ura terminates sec task sec task 
sergei abramov robert gluck ura match xe str abc success xe xa str xe cons xa str xe cons cons xa str ab xe cons xa str xe cons cons cons xa str abc xe cons cons xa str bc xe cons xa str ii ura match xe str aaa failure xe cons cons cons cons xa xe xe cons xa xe xa xe cons cons cons xa xe xa xe cons cons xa xe xa iii ura xe str abc success xe xa str xe cons xa str xe cons cons xa str ab xe cons xa str xe cons cons cons xa str abc xe cons cons xa str bc xe cons xa str iv ura xe str aaa failure xe cons cons cons cons xe xe xe cons xa xe xa xe cons cons cons xa xe xa xe cons cons xa xe xa fig 

inverse computation pattern matcher ii interpreter iii iv inverse computation mp implemented ura produces results similar inverse computation tsg implemented directly ura 
noteworthy inverse computation mp done standard interpreter mp inverse interpreter mp 
demonstrates inverse computation ported successfully functional language imperative language 
inverse computation mp takes longer tsg due additional interpretive overhead times 
earlier inverse computation ported tsg small assembler programming language called norma 
experimental aware ported inverse computation inverses imperative programs treating relational semantics logic program :10.1.1.13.6108
results di er slightly fig 
compare ii line iv line due small di erences implementation source programs 
universal resolving algorithm experiment gives practical evidence idea porting inverse computation language 
related program inversion appears suggesting generate test approach turing machines correctly find inverse exists computationally infeasible 
orts gone imperative programs non automatic heuristic methods deriving inverse program 
example technique suggested provides inverting programs symbolically requires programmer provide inductive assertions conditionals loop statements 
papers devoted inversion functional programs similar manner automatically 
functional languages usually program inversion 
automatic system synthesizing recursive programs order functional programs 
inverse functions paid attention conceptually program analysis program verification 
early result inverse computation functional language obtained unification transformation technique called driving perform subtraction inverse computation binary addition 
universal resolving algorithms implemented methods supercompilation order functional programs combining mechanical extraction answers cf 

know techniques inverse computation functional languages universal resolving algorithm see walk grammars inverse interpretation 
universal resolving algorithm uses methods supercompilation particular driving perfect process trees 
connections inverse computation logic programming discussed partial deduction driving formally related 
framework describing partial evaluation supercompilation 
comprehensive bibliography supercompilation 
conclude exists small number papers addressing inverse computation context functional languages 
exception know addressing inverse computation imperative languages 
algorithm inverse computation order functional language notion perfect process tree discussed general organization structure inverse computation stated main correctness results illustrated haskell implementation examples 
motivation thesis program inversion fundamental operations programs program specialization program composition 
believe achieve full sergei abramov robert gluck generality program manipulation ultimately operations mastered 
far progress achieved program specialization 
desirable di cult extend algorithm user defined constructor domains 
requires extension set representation sect 
extension source language case expressions 
focused rigorous development principles foundations inverse computation expressions familiar lisp 
general cutting infeasible branches process tree guaranteed particular underlying logic set representation undecidable certain logic formulas time consuming prove 
example case tree developer generalized partial computation 
case solution inverse computation may contain elements represent empty sets input correctness solution preserved 
set representation expresses structural properties values resolved 
perfect splits essential guarantee correctness solution cutting infeasible branches improves termination ciency algorithm 
question cient implementation left 
algorithm fully implemented haskell serves experimental purposes quite 
particular haskell lazy evaluation strategy allowed modular approach close theoretical definition algorithm development perfect process trees inversion tabulation conveniently separated 
design cient algorithm require merge steps 
compilation techniques strategies developed logic programming may beneficial practical implementation 
relation narrowing logic functional programming term rewriting studied formally relates driving partial deduction 
acknowledgments authors colleagues group various discussions related 
special due jeremy gibbons suggesting submit material mpc anonymous referees valuable comments careful proofreading 
second author michael leuschel joint leading material section 
special due futamura generous support research 
authors supported japan society promotion science danish natural sciences research council 

abramov 
metacomputation logic programming 

russian 
universal resolving algorithm 
abramov 
metacomputation applications 
nauka moscow 
russian 

abramov gluck 
standard non standard semantics semantics modifiers 
international journal foundations computer science appear 

abramov gluck 
semantics modifiers approach non standard semantics programming languages 
sato toyama eds third intern 
symposium functional logic programming 
world scientific 

bird de moor 
algebra programming 
international series computer science 
prentice hall 

chen 
program inversion fun 
science computer programming 

dijkstra 
program inversion 
selected writings computing personal perspective 
springer verlag 

dybjer 
inverse image analysis generalises strictness analysis 
information computation 

eppstein 
heuristic approach program inversion 
intern 
joint conf 
artificial intelligence ijcai 
william kaufmann 

futamura takano 
essence generalized partial computation 
theoretical computer science 

gluck jrgensen 
generalization hierarchies online program specialization systems 
ed logic program synthesis transformation 
proceedings lncs 
springer verlag 

gluck 
occam razor metacomputation notion perfect process tree 
cousot 
eds static analysis 
proceedings lncs 
springer verlag 

gluck 
metacomputation tool formal linguistic modeling 
trappl ed cybernetics systems 
world scientific 

gluck 
partial deduction driving equivalent 
hermenegildo eds programming language implementation logic programming 
proceedings lncs 
springer verlag 

gluck 
roadmap metacomputation supercompilation 
danvy 
eds partial evaluation 
proceedings lncs 
springer verlag 

gries 
inverting programs chapter 
science programming 
springer verlag 

gries van de 
inorder traversal binary tree inversion 
dijkstra ed formal development programs proofs 
addison wesley 

harrison 
synthesis function inverses 
acta informatica 

jones 
essence program transformation partial evaluation driving 
jones 
eds logic language computation 
lncs 
springer verlag 


automatic function inverter 
dershowitz ed rewriting techniques applications rta lncs 
springer verlag 

korf 
inversion applicative programs 
proceedings seventh intern 
joint conference artificial intelligence ijcai 
william kaufmann 
sergei abramov robert gluck 
mccarthy 
inversion functions defined turing machines 
shannon mccarthy eds automata studies 
princeton university press 


program transformation transitions experiments supercompiler 
bjrner 
eds perspectives system informatics lncs 
springer verlag 

ogawa 
automatic verification interpretation 
middeldorp sato eds functional logic programming 
proceedings lncs 
springer verlag 


generation inverse functions 
bjrner 
eds partial evaluation mixed computation 
north holland 

ross 
running programs backwards logical inversion imperative computation 
formal aspects computing 

sestoft 
structure self applicable partial evaluator 
technical report diku university copenhagen denmark 

turchin 
na equivalent transformations recursive functions defined 
proceedings symp 
theory languages programming methods 
russian 

turchin 
concept supercompiler 
acm transactions programming languages systems 

turchin 
program transformation transitions 
journal functional programming 
