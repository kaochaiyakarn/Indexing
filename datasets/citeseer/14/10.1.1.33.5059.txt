swiftfile intelligent assistant organizing mail richard segal jeffrey kephart ibm thomas watson research center yorktown heights ny watson ibm com kephart watson ibm com mail clients allow users file messages folders process go file message tedious slow 
message user decide folder appropriate 
user inform mail reader choice selecting appropriate icon menu item typically set dozen choices 
combined effort choosing folder conveying choice application discourages users filing mail resulting unmanageable contain hundreds thousands messages 
swiftfile encourages users file mail simplifying task 
adaptive classifier predicts folders appropriate message provides shortcut buttons permit user effortlessly file predicted folder 
typical users swiftfile predictions accurate time resulting substantial reduction time cognitive burden required file messages 
active users electronic mail may receive dozens hundreds messages day 
facilitate retrieval messages weeks months years original receipt mail clients allow users organize messages user defined folders 
typically user may maintain separate folders possibly organized hierarchy 
users file mail immediately select correct folder attempting retrieve particular message greatly enhancing retrieval speed accuracy 
applications provide simple interface filing messages folders 
instance lotus notes provides button pops dialog box allows user select destination folder 
user scroll select desired folder tedious folders 
notes allows user move message folder drag drop 
applications copyright fl american association artificial intelligence www aaai org 
rights reserved 
similar methods facilitate message filing 
regardless detailed arrangement user interface cognitive effort required decide appropriate folder locate icon menu item representing substantial discourage users filing particularly faced prospect repeating exercise dozens times day 
swiftfile intelligent personal assistant reduces cognitive burden time required organizing electronic mail folders segal kephart 
text classifier adapts dynamically user observed mail filing habits predicts folders appropriate message provides shortcut buttons facilitate filing message 
folders predicted swiftfile correct user task greatly simplified 
having derive best choice large set folders user merely confirm swiftfile suggested choices just single mouse click 
amounts significant qualitative enhancement encourage users file mail 
swiftfile designed careful attention making system easy possible 
users notorious having short attention spans 
personal assistant steep learning curve takes extended period assistant learning algorithm develop sufficient model user useful users give provide benefits 
beauty swiftfile helps users file mail demanding return 
users new learn 
installed swiftfile analyzes user existing folders construct initial text classifier ensures predictions useful right start 
swiftfile continuously updates classifier user interacts system requiring explicit training user 
learning swiftfile easy user need press swiftfile self explanatory buttons quickly move message appropriate folder 
designed swiftfile risk free 
existing mail assistants perform automatic operations incoming mail automatically placing message folder automatically deleting junk mail maes spertus 
systems variety different learning algorithms decide actions needs performed messages 
learning algorithms accurate systems incorrectly handle mail 
mail inappropriately deleted assistant quickly nuisance help 
swiftfile avoids problem suggesting actions 
predictions incorrect adverse effect user revert filing messages standard interface 
organized follows 
section give overview swiftfile design philosophy structure 
section describe modified tf idf text classifier supports low cost incremental updates key swiftfile adaptivity 
section discuss implementation issues arise integrating swiftfile lotus notes extend mail applications 
evaluation study reported section establishes swiftfile performs practice 
conclude comparison related section final remarks section 
overview swiftfile swiftfile concept sufficiently simple general apply today major mail applications 
implemented swiftfile add lotus notes mail client 
shows swiftfile simplifies task organizing messages lotus notes 
swiftfile places shortcut buttons message 
shortcut buttons allow user quickly move message folders swiftfile predicts message destinations 
buttons ordered top bottom topmost representing swiftfile best guess file message bottommost representing third best guess 
buttons clicked message immediately moved indicated folder 
swiftfile predictions text classifier 
classifiers require large number training messages yield accurate predictions swiftfile circumvents potential problem 
installation treats previously filed messages corpus labeled documents uses standard tf idf techniques construct text classifier 
initial training complete swiftfile immediately ready accurate predictions 
training classifier pre existing data half battle 
users constantly creating deleting reorganizing folders 
folders remain nature messages may drift time 
instance nature swiftfile related messages placed authors folders changed noticeably course year 
early messages design implementation classifier 
messages discussed ongoing experiments 
text classifier learned model swiftfile folders started swiftfile model probably perform poorly today 
swiftfile adapts changing conditions classifier supports incremental learning 
classifier trained classifier model updated presenting classifier messages added deleted folder 
cost update linear length message 
updating classifier predictions identical obtained training classifier scratch entire mail database 
interestingly swiftfile buttons may trivial fact quite significant substantially improves swiftfile usefulness 
shown section experimental results buttons cuts swiftfile failure rate half introducing adverse side effects 
swiftfile buttons direct result decision provide assistant facilitates automates message filing 
message automatically filed folder automatic categorization systems rely solely accuracy prediction 
text classifier swiftfile text classifier modified version aim barrett selker tf idf style classifier salton mcgill developed ibm almaden research laboratory 
aim represents training test message word frequency vector component represents total number times word appears aim represents folder weighted word frequency vector 
steps involved computing 
folder centroid vector computed summing word frequency vectors message contained folder centroid vector converted weighted word frequency vector tf idf principle weight assigned word proportional frequency folder inversely proportional frequency folders 
define ff fractional frequency word messages contained folder number times word occurs folder divided total number words ff definition term frequency tf aim tf ff ff shortcut buttons provided swiftfile 
swiftfile creates shortcut buttons folders predicts destinations 
swiftfile predictions correct buttons enable user file messages indicated folder single button click 
represents set messages entire database organized mail 
define document frequency df fraction folders word appears 
definition inverse document frequency idf aim idf df aim combines formulas define weight word folder tf theta idf weight vectors folder classify new message 
message arrives classified converted word frequency vector 
aim computes similarity weighted word frequency vectors folder 
aim computes similarity message vector weighted folder vectors variation cosine distance called sim salton mcgill sim min sums taken words contained aim takes folders similarity greatest predictions 
aim implements classification algorithm way allows support full incrementality 
aim maintains database centroids folder new message added folder aim updates centroid adding word frequency vector message similarly message removed folder word frequency vector message subtracted folder centroid 
centroids folder stored inverted index fast access 
classify message aim computes sim similarity folder weight vector 
weight terms required compute sim metric computed fly folder centroids 
sim similarity score computed folder aim predicts message belonging folders highest score 
aim learning algorithm fully incremental sense time required add document index remove document index classify new document linear length document added removed classified 
pointed swiftfile depend essential way aim specifics 
require classifier tf idf 
order support swiftfile requirements classifier efficient time space reasonably accurate classification supportive incremental learning capable producing ranking possible categories just producing single answer 
lotus notes implementation swiftfile implemented extension lotus notes 
notes data including electronic mail stored databases 
database associated design template determines database user actions user perform 
design template easily modified add new features 
api directly accessing modifying notes databases 
swiftfile user interface written modifying standard notes design template include extra buttons moving messages files 
integration classifier required able call external procedures 
implemented swiftfile creating daemons api directly read write notes mail database 
daemon responsible classifying new messages 
ideally swiftfile classify messages just displayed user 
slight millisecond delay required classify message mhz pentium ii just long annoy users 
swiftfile uses daemon checks new mail seconds 
daemon finds new message daemon classifies swiftfile current knowledge adds appropriate shortcut buttons message 
shortcut buttons available user message opened 
daemon classify new messages reduce classifier accuracy 
daemon classifies messages arrive 
swiftfile updating classifier messages filed 
substantial delay message classified message filed shortcut buttons added message may differ classifier latest predictions may accurate 
partially alleviate problem added notes interface button re classify messages inbox 
enables user manually refresh computed shortcut buttons ensure remain accurate possible 
second daemon responsible updating classifier changes user mail database 
detects message added removed folder updates text classifier accordingly 
notes api expensive check changes folders check new messages daemon run frequently minute intervals 
delay minutes problem mail filing habits tend change quickly 
experiments performed sets experiments swiftfile 
assesses performance swiftfile classifier static mailboxes second analyzes swiftfile classifier performs time 
experiment applied swiftfile text classifier mailboxes employees ibm research 
table presents characteristics databases 
databases range size messages filed folders 
number folders important quantity increases difficulty classification problem 
experiment conducted user previously filed messages data experiment 
randomly sampled user previously filed messages training remaining messages testing 
repeated database folders messages segal kephart user user user user table characteristics mail databases test swiftfile 
generally classification task difficult number folders increases 
experiment times averaged results 
shows results experiment 
graph shows swiftfile accuracy user assumptions swiftfile provides shortcut buttons 
accuracy buttons defined frequency buttons represents correct folder 
swiftfile fairly accurate just button achieving accuracy 
swiftfile automatically filing messages error rate unacceptable 
swiftfile incorrect predictions easily overridden error rate minor annoyance compensated benefit receiving right suggestion time 
shortcut buttons message accuracy swiftfile suggestions improves 
buttons reduces error rate factor 
substantial improvement going button countered slightly need user consider choices 
optimal number shortcut buttons 
buttons cuts error rate half databases 
databases error rate cut 
substantial reduction dramatic gain achieved going button 
buttons adverse effects pronounced 
extra buttons threaten crowd screen require user select choices 
may noticeable cognitive burden 
reasons buttons right 
second experiment evaluated swiftfile incremental learning algorithm analyzing performs time 
mail databases experiment simulate dynamic environment new messages arrive continuous stream filed user order received 
simulator works sorting messages static mail database date presenting message swiftfile turn 
message arrives classified swiftfile latest classifier classification compared known correct classification 
message segal kephart user buttons user buttons user buttons user results simulating swiftfile mailboxes 
graph shows accuracy swiftfile buttons 
note swiftfile accuracy buttons 
filed destination folder classifier model updated accordingly 
simulator assumes folders simulation assumes new folder created simulator processes message folder 
shows results experiment applied database segal 
solid line represents moving average classifier button accuracy function number classified messages 
interestingly swiftfile accuracy starts slowly degrades respectable leveling 
swiftfile accuracy starts see data 
reason user starts mail folders swiftfile predictions guaranteed cover 
result swiftfile perfect user seen mail warrant folders 
trend continues user created folders classification problem challenging swiftfile seen examples learned classifier 
result user experiences poor performance 
shows swiftfile incremental learning algorithm maintains fairly high level accuracy experiment 
accuracy swiftfile stays experiment 
incremental learning ensures user experiences consistent level performance 
designers mail assistants assume incremental learning necessary batch learning performed overnight 
overnight learning adapt quickly instantaneous changes user files mail creation new folder reorganization old folder 
test empirically repeating experiment slight difference simulate batched learning classifier update frequency reduced message messages 
dotted line shows results experiment 
performance periodic learning comparable continuous learning extended episodes periodic learning substantially accurate 
furthermore performance overnight learning consistent accuracy rate dropping low point 
cumulative accuracy periodic learning measured continuous learning 
may possible implement overnight batch learning doing result large reduction classification performance 
related substantial body investigating text classification help users perform various tedious operations mail maes payne edwards cohen spertus 
focused accurately predicting actions performed mail ignoring equally important issues examples simulation swiftfile performance continuous stream messages 
solid line performance swiftfile classifier updated message filed 
dotted line performance swiftfile classifier updated messages approximate effects overnight learning 
regarding classifier fits system 
notable exceptions 
maes maes advocates collaborative filtering quickly bootstrap classifier new users 
method tasks filtering junk email doubtful mail filing mail filing schemes individual matter 
payne edwards payne edwards consider possibility incremental learning details provided 
swiftfile philosophical underpinnings probably related cap mitchell calendar scheduling application 
cap learns predict users respond various questions ask scheduling meeting offers best prediction default value 
cap predictions correct user simply hit return accept suggested value 
user may override default typing different response 
swiftfile cap unobtrusive assistants offer convenient shortcuts user possibly incorrect actions user behalf 
final remarks swiftfile easy personal assistant helps users file mail folders 
swiftfile demands users extra learn reap benefits swiftfile soon installed 
swiftfile virtually adverse sideeffects 
predictions wrong may bypassed easily 
swiftfile classification performance excellent real users databases thousands archived messages folders 
informal interviews users indicate swiftfile substantially lowers barriers prevented users filing mail encourages users diligent 
swiftfile developed electronic mail technique easily organize types electronic documents bookmarks audio recordings disk files text documents placed hierarchy folders 
robert barrett ted selker 
aim new approach meeting information needs 
technical report ibm research october 
gary 
concept features re agent intelligent email agent 
proceedings second international conference autonomous agents 
william cohen 
learning rules classify mail 
proceedings aaai spring symposium machine learning information access 
pattie maes 
agents reduce information overload 
communications acm july 
tom mitchell rich caruana dayne freitag john mcdermott david zabowski 
experience learning personal assistant 
communications acm july 
terry payne peter edwards 
interface agents learn investigation learning issues mail agent interface 
applied artificial intelligence 
gerard salton michael mcgill 
modern information retrieval 
mcgraw hill book 
richard segal jeffrey kephart 
intelligent assistant organizing mail 
proceedings third international conference autonomous agents may 
ellen spertus 
automatic recognition hostile messages 
proceedings innovative applications artificial intelligence conference july 
