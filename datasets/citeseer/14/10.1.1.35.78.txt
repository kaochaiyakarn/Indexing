wombat membership protocol bartels february cluster computing increasingly popular providing network services high availability incremental scalability high price performance ratios 
group membership services provide clusters needed information load balancing cache nity calculations service failover 
membership service lightweight scale hundreds nodes need provide strong guarantees totally ordered communication previous membership services done 
designed implemented group membership service wombat membership protocol fit specifications 
measured wombat performance scenarios outperformed existing solution case bandwidth consumption convergence time 
bandwidth consumption orders magnitude competition large clusters 
chapter cluster computing increasingly popular providing network services high availability incremental scalability high price performance ratios 
group membership services provide clusters needed information load balancing cache nity calculations service failover :10.1.1.20.5411
designed implemented group membership service wombat membership protocol fit specifications 
measured wombat performance common membership scenarios including failure addition node network failure divides cluster repair network failure 
wombat convergence times required orders magnitude bandwidth achieve results previous solution 
put wombat goals performance perspective briefly discuss history group membership protocols needs today cluster applications 
group membership decade large body group membership problem published 
papers discuss solutions group membership problem goals provide guarantees 
papers discuss range goals try categorize protocols 
discussion borrowed help place current perspective 
group membership algorithms provide information state nodes cluster applications running nodes 
process communicates neighbors share data services processes nodes 
cluster carried monolithic server server functional 
split machines node fails cluster state partial functionality impossible monolithic server system 
remaining nodes react timely controlled fashion failure dividing failed node 
remaining nodes react find failure 
group membership algorithm task distribute information failures recoveries live nodes process group 
basic definition degrees freedom group membership algorithms 
group membership protocol falls category axes accuracy vs liveness 
accurate protocol reports failure recovery fact occur 
live protocol guaranteed detect report failure recovery eventually 
protocol accurate live presence asynchrony real world 
local confidence levels failure detection 
times node try contact node concluding failed 
long timeout 
global confidence levels failure detection 
nodes individually verify failed 
just 
majority 

message ordering requirements 
protocols membership algorithm integrated message delivery cluster message assigned unique id number messages delivered order nodes 
called totally ordered communication 
clusters membership messages totally ordered communication routed membership service need arrive particular order 
clusters enforce message delivery ordering whatsoever 
total agreement vs eventual agreement 
degree agreement membership messages delivered membership algorithm application 
algorithm total agreement insists membership messages failure join notifications delivered order nodes 
algorithm eventual agreement strict membership messages require eventually nodes agree set nodes 
majority vs continued partition operation 
failed link separates nodes cluster sets node set communicate node set sets able continue operate 
cluster majority operation allows partitions half original population continue operating ensuring partition proceeds cluster continued operation limitations 
axes allow wide range design decisions devising new membership protocol 
viable combinations tried protocols cited focused heavily total message ordering cluster messages membership messages 
membership service configurable membership service allows user choose application basis type membership services required 
course combinations sense tuning decisions far reaching implications 
clear service variant implemented tuning decisions 
entirely di erent approach membership proposed 
congress moshe algorithms nodes keep local state membership 
nodes membership servers nodes system need membership information send request server 
protocols rely lower level failure detection service specified 
membership protocols today cluster applications possible features membership protocol totally ordered communication total agreement high levels global confidence failure detection appropriate today cluster applications 
class applications includes large scale mail services hotmail 
com web server farms highly parallel scientific computing number 
clusters need date membership information load balancing cache nity calculations fast data retrieval don need heavyweight feature rich membership protocols 
today clusters growing larger 
amount communication required maintain instance total message ordering membership messages prohibitively large cluster size increases 
membership protocol little bandwidth bandwidth usage scale size cluster :10.1.1.20.5411
needs mind ideal group membership protocol modern cluster applications occupy point design space outlined liveness 
protocol tolerate occasional error favor delivering timely information 
medium high local confidence levels failure detection 
parameter tunable individual node take reasonable steps detecting failure raises general alarm brings rest cluster state change 
low global confidence levels failure detection 
node detected failure need nodes independently verify 
message ordering requirements 
membership protocol delivery non membership messages membership messages need totally ordered 
eventual agreement 
total agreement overkill long live nodes converge common picture eventually need take path consensus 
majority continued partition operation 
parameter setting depends application needs varies today 
best knowledge protocol extant near point design space 
gossip protocol designed cornell fills approximately niche 
basic tenet gossip philosophy eliminate single points failure minimizing imposed structure cluster 
node selects random regular intervals sends view membership randomly selected node 
information spreads cluster slow non deterministic way single point failure 
wombat membership protocol protocol point design space gossip 
wombat membership protocol imposes structure nodes designating leader 
leader wide scale dissemination membership information 
nodes including leader arranged logical ring node watches neighbor failures 
wombat guard disaster leader fails requires code complexity 
wombat structure complexity buy speed 
network bandwidth consumed wombat ers accurate membership information quickly gossip common cluster scenarios particularly large cluster sizes 
wombat described detail chapter simulation results protocols chapter 
conclude chapter 
chapter wombat membership protocol specification high level description goal wombat membership protocol node process group date list members group 
call node list view node list may accurate 
membership list may change time nodes join leave group changes reflected local views group nodes 
wombat node responsible checking liveness node 
ensure node watched assign node unique id ip address arrange nodes logical ring ids 
node responsible checking liveness predecessor ring 
single node called leader charge periodically broadcasting view rest group multicast channel known address 
group leader node lowest id modifications detected ring reported leader turn multicasts new membership view back group 
non leader node called uses leader view determine id predecessor 
multicasts sent leader adaptive timer reflecting current level membership activity 
membership change timer interval set minimum value 
time multicast message sent timer interval increased reaches maximum value 
policy balances speed convergence periods change steady state load associated sending periodic updates times stability 
node operations wombat message tra divided classes ring view broadcasts 
discussion protocol variables shown fixed width font 
section briefly discuss suggested settings variables 
ring node maintains timer expires ring period 
timer expires node sends unicast ring message predecessor 
receiving message immediately responds ring ack message 
ring message met ring ack response ring message come expected source 
ring retries attempts attempts receives response ring timeout neighbor assumed 
node decides neighbor failed notifies leader 
failed neighbor leader updates view sets broadcast timer min broadcast timer 
leaves view intact 
continues check failed neighbor leader certainly heard failure 
view broadcasts node sends broadcast broadcast timer expires 
timer settings discussed section 
sending broadcast node delete better leader nodes view 
receiving broadcast node follows procedure shown described 
thing node check source broadcast 
source better leader node source lower id receiver 
expected case 
node check included broadcast 
expected case 
conditions true node resets broadcast timer large value adopts broadcast view 
broadcast source better leader view contain receiving node node things 
adopts broadcast view inserts 
small random time bounded add sleep max notifies broadcaster alive 
resets broadcast timer large value 
broadcast source better leader receiving node receiver detected error condition 
receiver decide deal problem receiver believe rightful leader 
receiver adopts union view false leader sets broadcast timer small broadcast soon set matters rights 
done receive broadcast broadcast source better leader 
broadcast timer reset leader 
better know adopt broadcast view union view timer small set broadcast am broadcast view 
broadcast view adopt notify leader view add self node responses receiving broadcast view 
receiver knows better leader waits better leader resolve problem 
turns better leader node broadcast timer go eventually problem remain unsolved indefinitely 
timer settings timers wombat node 
ring period timer deals ring settings static 
timer broadcast view timer presents challenge 
tension setting timer short intervals maximize information exchange speed convergence setting long intervals minimize bandwidth usage reduce likelihood broadcast 
membership changes cluster views broadcast frequently nodes quickly converge correct view membership 
membership long time views broadcast seldom limit bandwidth usage 
keeping ideas values low broadcast timer high broadcast timer bound typical values period leader timer 
leader fail bad nodes time simultaneously 
ideally node time new rightful leader 
achieve goal timer settings nodes cluster set high broadcast timer plus multiple rank cluster 
call multiplier rank rank factor broadcast period non leader nodes high broadcast timer rank rank factor 
common scenarios examine behavior cluster number common scenarios 
scenarios occur frequently listed 
failure fail successor ring notice stopped responding pings 
successor send message leader leader update view broadcast soon 
addition joins cluster goal leader discover new node disrupting views rest 
simply broadcasts nearly empty view adopt incorrect view short time leader correct 
alternative wait patiently view broadcast send message leader 
wait indefinitely takes leader 
protocol situation 
called known leader file 
regular operation node periodically writes small file containing id current leader 
node go come back contents leader file hint node currently leader 
waits small random time bounded lkl timer max sends message node 
node leader works exactly planned recipient message passes real leader 
known leader provisions just optimizations 
known leader file missing response leader new node waits init broadcast max broadcasts view 
avoid causing confusion uses special type view message called notion message 
notion message provokes responses regular view node hears adopts view 
notion message allows new node integrated cluster quickly causing nodes incorrect views short time 
leader failure leader node fails successor broadcast timer go transition seamless 
broadcast timer goes situation resolved described section 
leader addition leader addition case starts addition case 
new leader checks known leader file finds leader broadcasts immediately 
nodes send messages spaced small random timeouts minimize loss cluster converges 
known leader mechanism doesn new node waits init broadcast max 
hears broadcast old leader waits adopts view hears inserts begins broadcasting 
broadcasts handles messages known leader case 
partition network partition network link failure isolates part cluster rest 
partition subcluster containing old leader continue function normal albeit high number messages 
subcluster wait approximately high broadcast timer broadcast rank best leader remaining subcluster 
point subcluster sort members missing 
transition messages failures sent old leader lost 
run nodes neighboring id lost due partition convergence slow 
optimization leader uses notion message described cause cluster converge quickly partition 
failure short interval fail interval leader sends notion message suggesting leader alive 
causes nodes leader side partition respond message allowing quick convergence new population 
partition recovery partition recovery network healing occurs network failure described repaired 
subclusters side partition merge 
immediately partition recovery nodes believe leaders correct 
correct broadcasts transition seamless nodes subcluster alert correct leader returned 
incorrect broadcasts correct leader merge views broadcast right away messages sent 
cold boot cold boot scenario cluster switched simultaneously 
scenario probably rare production cluster handled poorly protocols discuss wombat behavior 
cluster operational known leader file mechanism boon cluster converges quickly notify leader presence shortly booting 
known leader mechanism falls short cluster run protocol known leader absent slow boot protocol falls back usual leader election strategy 
nodes wait short random time broadcasting 
suppose node rank broadcast 
nodes rank higher know leader nodes rank lower continue wait timers expire 
successive broadcast roughly half cluster quiescent rightful leader remains 
convergence quick large clusters broadcast storm occurs 
chapter performance results implemented wombat membership protocol gossip membership protocol java programming language 
access original gossip implementation cornell gossip performance results similar published 
simulator goal demonstrate protocol scalability large process groups comprising hundreds nodes 
size actual cluster testbed twelve fifteen nodes limits study 
obtain approximate large cluster performance results wrote implementation multiple instances membership protocol run independently physical cluster node 
addition removal particular instance protocol particular node signify status node live experiments signified status membership process node 
serious di erence experimental setup real large scale process group decreased latency message delivery membership instances hosted physical node 
physical nodes cluster large scale process group network connectivity real life simulated network latency appears di erence operation protocol 
experiments addition measuring steady state behavior membership protocols measured performance protocols membership change scenarios described previous chapter 
measured cluster convergence time case single node fails single node added nodes gossip steady wombat steady wombat wombat bandwidth usage membership 
experimented network partition simulating failure network link halves network 
measured long took half come local consensus partition observed long took subclusters merge 
measured cold start convergence time switching entire cluster approximately time observing long took cluster achieve steady state correct membership information propagated members 
measured convergence times scenarios shown discussed bandwidth usage results 
bandwidth usage convergence time important factor behavior membership algorithm 
algorithm converge quickly subject certain limits simply speeding rate membership messages failures detected propagated quickly 
price paid bandwidth usage 
mind set stage convergence time measurements showing gossip protocol uses far bandwidth wombat especially large cluster sizes 
means wombat fast convergence times merely due frequent message transmission 
experiment measured bandwidth consumption algo nodes gossip wombat wombat leader node failure time rithm scenario 
subset measurements shown 
measurements algorithm commensurate measurements shown 
particular gossip adapt behavior events place cluster bandwidth consumption steady state consumption 
gossip bandwidth usage scales square size cluster node gossips message proportional size cluster gossip interval 
wombat bandwidth usage linear size cluster leader sends large messages send ring messages 
single node failure convergence time experiment measure time cluster discover failure 
methodology start cluster wait converge membership achieve steady state cause members fail 
time node failure moment live nodes agree new membership failure detection time 
results experiment shown 
ran experiments wombat failed node leader 
gossip slow converge explicit failure detection mechanism 
node fails node decide independently nodes time detect addition seconds gossip wombat lkl wombat leader lkl wombat lkl wombat leader lkl node addition time failed new information arrived long time fail speed gossip failure detection improved reducing fail gossip rate increased false failure detections 
wombat failure detection rate depends primarily node sends ring message neighbor missed allowed failure assumed 
parameters tuned faster failure detection modest increase bandwidth consumption ring messages small 
node responsible watching leader node new leader event old leader failure wombat convergence just fast leader failure failure 
single node addition experiment measures time cluster converge new node joins cluster 
results experiment shown 
ran experiments wombat added node leader just 
gossip new node announces presence broadcast nodes gossip aware presence 
allows quick convergence new membership 
nodes gossip wombat low high wombat odd partition wombat behavior depends presence known leader file correct information 
presence file convergence essentially fast possible 
file convergence time roughly gossip node known leader file waits random time bounded init broadcast max sending notion message announcing presence 
performance wombat presence incorrect leader file shown worse performance file 
partition healing gossip partitions just collection single node failures partition healing sped protocol occasional broadcasts 
wombat speed convergence partition case depends nodes divided 
example nodes numbered nodes partition nodes convergence time di erent case numbered nodes fall partition odd numbered nodes fall 
low high case node detect apparent failure node moving node failures detected sequentially 
odd case node detects apparent failure odd node parallel 
di erence ameliorated somewhat notion message mechanism nodes time convergence healing seconds gossip wombat low high wombat odd healing allows node solicit information liveness cluster 
failures detected short span time leader broadcasts notion message suggesting leader alive 
nodes leader side partition respond convergence follows shortly 
optimization allows node take high numbered subcluster 
detects apparent failure reports 
heard new view message leader time ring check suspects broadcasts notion message 
convergence follows quickly 
wombat takes random amount time high converge healing 
convergence time dominated time takes subcluster leaders broadcast 
cluster performance healing argument favor keeping low high broadcast timer 
performance results partition healing shown figures 
experimental setup wombat demonstrate di erence low high partitioning odd partitioning considered extremes 
expected wombat performance odd partition superior performance low high partition better gossip performance 
protocols performance healing random dominated time node broadcasts partition 
nodes time convergence seconds gossip wombat cold start convergence time convergence cold start final experiment measure long takes cluster come consensus nodes switched simultaneously 
practice measurement probably important typical workstation boot times long 
show protocols convergence times cold start clusters varying sizes 
gossip convergence time high despite broadcast storm boot time 
nodes start little broadcasts missed information propagated slowly gossiping 
chapter new membership protocol clusters wombat membership protocol provides eventually consistent membership information nodes cluster timely manner bandwidth 
protocol requires little information long term storage virtually configuration system manager 
see number interesting avenues research 
hierarchical wombat protocol described intended cluster nodes communicating low latency uncongested local area network 
expand protocol capabilities handle clusters nodes allow multiple clusters communicating higher latency links protocol adapted hierarchical ring rings format 
hierarchical version wombat leaders local rings participate ring leaders 
point comparison gossip protocol adapted hierarchical format 
measurements compared non hierarchical gossip non hierarchical wombat believe clusters protocols low latency low loss rate environments described 
wanted investigate protocols inherent scalability non hierarchical case applying hierarchical techniques allow diverse networking environments 
piggybacking node status data may useful cluster applications include bit information node membership information 
example simply knowing node membership service indicate certain load average task queue length specify application services available adapting wombat piggyback information may new challenges 
reason wombat bandwidth usage low leader broadcasts seldom membership changed 
load averages change frequently membership cluster 
piggybacked information fresh useful leader may broadcast leader may state change messages 
hierarchical approach may cases described section 
realistic testing environment limitation study small size cluster testbed 
new large cluster testbed project university utah may soon provide opportunity test membership protocols realistic environment 
appendix wombat parameter settings parameter settings wombat experiments shown 
parameter settings worked experiments settings may appropriate situations 
suggests parameters altered combat number possible di culties protocol 
low broadcast timer sec shortest frequency leader view broadcasts 
high broadcast timer sec longest frequency leader view broadcasts 
init broadcast max sec limit time broadcasting notion message startup lkl timer max sec limit time contacting known leader startup leader fight max sec limit time broadcasting broadcast higher numbered node 
add sleep max sec limit time notifying leader broadcast excludes node 
ring period sec frequency ring messages 
ring timeout sec time wait sending ring message 
ring retries number missed failure assumed 
rank factor sec spacing broadcast timers 
fail interval sec nodes fail fail interval leader sends notion message 
wombat parameters problem solution cluster converges slowly decrease ring period node failure 
decrease ring retries 
cluster reports increase ring retries false failures 
increase ring timeout 
cluster converges slowly decrease high broadcast timer 
partition healing 
leader node performance increase init broadcast timer su ers membership lkl timer max change events 
add sleep max 
troubleshooting wombat bibliography abdelzaher shaikh jahanian kang shin 
lightweight multicast real time process groups 
proceedings ieee real time technology applications symposium pages june 
amir moser melliar smith agarwal 
totem single ring ordering membership protocol 
acm transactions computer systems november 
yair amir danny dolev shlomo kramer malki 
transis communication sub system high availability 
proceedings nd annual international symposium fault tolerant computing july 
tal gregory chockler danny dolev keidar 
scalable group membership services novel applications 
dimacs series discrete mathematics theoretical computer science volume 
babaoglu alberto montresor 
partitionable group membership specification algorithms 
technical report ublcs university bologna may 
kenneth birman andre schiper pat stephenson 
lightweight causal atomic group multicast 
acm transactions computer systems august 
tushar chandra hadzilacos sam toueg charron bost 
impossibility group membership 
technical report cornell university oct 
cristian frank schmuck 
agreeing processor group membership timed asynchronous distributed systems 
technical report cse ucsd 
paul macedo santosh shrivastava 
newtop fault tolerant group communication protocol 
proceedings th international conference distributed computing systems may 
armando fox steven gribble chawathe eric brewer paul gauthier 
cluster scalable network services 
proceedings th symposium operating system principles october 
alessandro david powell 
unified comparison synchronous asynchronous agreement protocols 
technical report laas cnrs toulouse france oct 
richard schlichting 
understanding membership 
technical report university arizona july 
richard schlichting 
configurable membership service 
ieee transactions computers may 
kaashoek tanenbaum 
group communication amoeba distributed operating system 
proceedings th international conference distributed computing systems icdcs pages washington dc 
ieee computer society 
vivek pai aron gaurav banga michael peter druschel willy zwaenepoel erich 
locality aware request distribution cluster network services 
proceedings asplos viii october 
robbert van renesse kenneth birman ma eis 
horus flexible group communication system 
communications acm volume april 
robbert van renesse yaron minsky mark hayden 
gossip style failure detection service 
proceedings middleware 
werner vogels dan agrawal chia katherine guo 
scalability microsoft cluster service 
proceedings nd usenix windows nt symposium august 

