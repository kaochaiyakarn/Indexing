websql sql query language world wide web george andrei mihaila thesis submitted conformity requirements degree master science graduate department computer science university toronto fl copyright george andrei mihaila parents world wide web www distributed global information resource containing large amount data relevant essentially domains human activity 
high rate growth volume data available www locating information interest setting difficult process day 
useful indexes yahoo lycos exist accessed thousands times day 
indexes set parameters initiate search different capabilities 
simple uniform way specify requirements class documents needed 
new web site discovered finding relevant information stored manual navigation slow tedious process 
automatic filtering information useful 
graphical map local hypertext structure reduce cognitive overhead involved exploration 
objective thesis define sql query language called websql enables users specify required documents standard declarative way 
java query compiler execution engine described 
query execution engine websql transparently accesses known indexes performs automatic navigation order build query results list returned user html document 
way automatically produce local map web websql search engine 
acknowledgment professor alberto mendelzon supervisor continuous support advise feedback 
guidance thesis finished 
professor mark chignell second reader valuable recommendations thesis 
express gratitude group members databases information system team 
particular criticism suggestions provided wong yang proved useful 
owe wife ioana mihaila continuous support study period 
department computer science university toronto generous financial support provided graduate studies 
contents objectives related thesis organization hypertext world wide web overview hypertext world wide web formal calculus data model calculus evaluation search algorithms structure specifying queries finite automata regular path evaluation algorithm content queries sql language virtual graph model www calculus websql language specification syntax semantics compiling issues virtual machine architecture query execution index servers experimental results user interface performance issues content queries web structure queries web visualization virtual machine specification list figures example hypertext structure example html file 
appearance html file web browser algorithm computing psi breaking dependency cycle transition graph dfa 
computing suffix containment relation dfa 
evaluation path regular expression query virtual graph 
search procedure path regular expression query evaluation 
syntax sql language nested loops generated compiler generated object code example index servers list document 
websql user interface websql query results map isg technologies web site map web site object language list tables classification document attributes chapter world wide web www distributed global information resource residing internet 
contains large amount data relevant essentially domains human activity art education travel science politics business data available www heterogeneous nature find files encoded variety data formats representing textual audio visual information 
gives web strength hypertext organization files 
hypertext mark language html de facto standard documents web 
syntax language allows definition hypertext links inside document 
hypertext link simply document specific position inside 
user reading document ability follow link automatically load referred file 
starting known document links user traverse web finds information interested 
central authority managing information organization information provider setting computers web server having register 
course aware new server efforts publish information useless usually creation advertised standard channels television newspapers internet newsgroups 
numerous books www published days contain list known web servers organized geographically 
high rate growth volume data available www locating information interest setting difficult process day 
useful indexes exist accessed thousands times day 
indexes built automatic agents known robots periodically traverse web search newly created documents 
best known world wide web worm wwww lycos aliweb yahoo mention just 
indexes set parameters initiate search different capabilities 
simple uniform way specify requirements class documents needed 
objectives objective thesis design expressive sql query language world wide web implement efficient query processing engine 
query language allow users specify documents interest terms content underlying hypertext structure 
example query refer documents robots documents reachable hypertext paths certain length 
results www query displayed list pointers matching documents graph document nodes links 
option allows presentation results html document viewed www client 
format provide information revealing topology part web relevant query visualized browser hy 
conceptually www query system components ffl query compiler translates query object language ffl virtual machine interprets object code ffl query engine invokes appropriate search processes synthesizes results ffl user interface accepts query presents results components discussed detail thesis 
related possibility defining queries views hypertext systems investigated 
approaches structure specifying queries exist 
consens mendelzon introduce graphic query language graphlog define graph patterns beeri 
define logic language state queries static hypertext structure 
attempts construct comprehensive keyword indexes world wide web currently progress 
indexes built automatic web traversal agents known robots 
date list known robots see example 
konopnicki shmueli define 
declarative query language web called ql 
order define structure specifying queries introduce language specifying restricted class graph patterns 
thesis introduce expressive graph pattern definition language regular expressions 
comparison language ql better suited exploring inner structure documents concentrate hypertext structure generated links documents 
answering content queries systems existing index servers respect equivalent 
thesis organization thesis organized follows ffl chapter hypertext world wide web gives overview hypertext briefly presents www organization general hypertext concepts materialized html documents 
ffl chapter formal calculus introduces query language mathematical framework ffl chapter evaluation search algorithms presents algorithms evaluation content structure specifying queries ffl chapter sql language gives relational model www defines actual query language describes compilation execution queries ffl chapter experimental results discusses results obtained different types queries ffl chapter draws suggests developments query processing system chapter hypertext world wide web chapter gives overview hypertext presents www concrete implementation hypertext describing general concepts materialized html documents 
overview hypertext hypertext invention theoretical description system describe hypertext early vannevar bush 
bush described system called memex sort mechanized private file library device individual stores books records communications mechanized may consulted exceeding speed flexibility 
term hypertext coined ted nelson author system called xanadu attempt store world literature 
goal reached parts xanadu system incorporated product xanadu operating 
details history hypertext see 
simplest way define hypertext comparison standard text 
order traditional text say book read sequential reads example hypertext structure chapter second third 
writing book author predefined logical sequence reader expected read 
contrast author hypertext document offers reader options reading material 
example consider small hypertext structure 

shows hypertext structure network nodes links 
reader traverse network order prefers 
links emphasized visualization document highlighted phrases usually convey contents destination node 
text called link label simply anchor depicted 
short thick segments 
user hypertext system determines node visited selecting anchors 
activity usually called browsing navigation emphasize active role reader 
example supposing node visits choose node 
selects read text node sequentially jump specific locations provided 
definition formalizes intuitive concepts introduced 
definition hypertext structure quintuple sigma finite set nodes finite set edges sigma finite alphabet sigma maps node associated text 
theta theta theta incidence function maps edge pair called anchor node called destination node substring anchor specifies position destination node 
world wide web world wide web largest hypertext system built implementation relatively easy understand 
fact simplicity major reasons exponential growth anybody set collection documents organized web hypertext structure part world wide web 
thing authors conform special purpose language called hypertext mark language html 
language allows author specify certain formatting styles bold italic centered text embed images sound importantly specify links documents 
hypertext nodes simply html text files residing filesystems certain internet hosts 
order implement distributed hypertext system able read files different hosts 
html files new protocol called hypertext transmission protocol designed 
order allow integration various pre www internet services ftp file transfer protocol gopher hierarchical distributed text information system usenet newsgroups new resource location description called universal resource locator url introduced 
notation extends familiar path name notation unix operating systems prefixing internet host name transmission protocol requesting file 
granularity increased specifying particular position inside file 
formal syntax url url 
host path 
location ftp gopher host internet name host path list directories separated slashes usual unix notation actual name file location textual label file 
complete www addressing conventions may 
example strings examples urls ffl www cdf toronto edu dcs grad grad intro html ffl ftp prep ai mit edu pub gnu distrib ffl gopher gopher toronto edu thesis concentrate html documents accessible 
take closer look structure html document 
example consider document 
viewed web browser document formatted 
complete html language see 
order analyze hypertext structure web need know way links documents specified 
html construct serving purpose anchor tag 

link document specified sequence form href ext url destination document ext text appear anchor document displayed web browser 
example sequence href www cdf toronto edu dcs csri csri overview html 
computer systems research institute example document 
specifies link document computer systems research institute home page 
note destination url completely specified absolute case 
destination document web server source document relative url may 
relative url omits protocol assumed server assumed server current document 
example document anchor relative url href websql html thesis project websql important thing note equivalent absolute url constructed relative url current document url 
analysis consider urls translated absolute form 
brief description web organization conclude web may viewed hypertext structure sense definition ffl set html documents web servers ffl set links defined documents ffl sigma usual ascii character set ffl sigma maps node text associated document obtained eliminating marking constructs html source ffl 
theta theta theta associates link pair node document contains link start position anchor destination node position destination node zero specified 
html 
head 
title 
george andrei mihaila home page title 
changed george andrei mihaila dec 
head 

george andrei mihaila home page 
hr 
body 
href db toronto edu people mendelzon database html 
databases information systems group part href www cdf toronto edu dcs csri csri overview html 
computer systems research institute br 
supervisor href www db toronto edu people mendelzon html 
prof alberto mendelzon 
br br 
href websql html thesis project websql sql query language www 
research interests 
ul 
li www resource discovery tools li 
li hypertext systems li 
li database query languages li 
li object oriented databases li 
li internet li 
ul 
body 
html 
example html file 
appearance html file web browser chapter formal calculus chapter introduce formal foundation websql language 
starting inherent graph structure www discussed previous chapter define notion virtual graph construct query language setting 
data model database applications involving various types networks highways public transportation power phone lines computer networks hypertext systems 
current spatial models represent geometry networks built methods exploring connectivity 
motivated approaches designing systems integrate graph specific algorithms databases 
propose simple model comprehensive capture aspects involved querying www 
simple types finite non empty set elements called simple types 
consider infinite set data values 
element associate infinite subset dom called domain object types distinguish type oid object identifiers 
consider finite set attribute names 
object type obj simply tuple obj referred fields object type obj simple types 
domain object type derived standard way types fields dom obj jv dom ng notation dom obj object field object type obj denote value associated attribute distinguished object types node link 
defined follows node id oid link oid oid id elements attribute names definitions distinct 
model world wide web documents mapped node objects hypertext links link objects 
context object identifiers oid urls 
calculus section define calculus data model inspired datalog traditional relational algebra 
predicates consider set fp binary predicates simple types 
element function dom theta dom bool simple types bool ftrue falseg 
examples predicates include equality type various inequalities numeric types substring containment alphanumeric types 
virtual graph examine computational characteristics system modeling 
set documents web finite undetermined produce complete list documents available certain moment 
url web browser fetch referred document give error message document doesn exist 
behavior modeled computable partial function mapping oid node objects 
partial function said computable exists turing machine halts input accepting state output tape rejecting state defined document fetched determine finite set outgoing hypertext links document 
modeled computable partial function mapping oid sets link objects 
essentially ways find documents web navigation starting known documents querying index servers 
practice navigation done certain links properties 
order capture introduce finite set unary link predicates link fff fi fl order model lists urls returned index servers introduce finite set unary node predicates pnode fp predicate interested set trueg 
consider arbitrary link dom link 
predicates link may characterize properties link ff link ff true say property ff 
define set properties link fff link jff trueg 
definition virtual graph tuple gamma ae node ae link pnode link ae node dom oid dom node ae link dom oid dom link computable partial functions ffl ae node dom oid finite ffl oid dom oid ae node oid defined ae link oid defined ffl ae node oid id oid ffl ae link oid finite oid ae defined say edge ae node ae node ffl predicates ff link computable ffl function val pnode defined val trueg computable note virtual graph gamma ae node ae link pnode link comprises underlying graph gamma ae node dom oid oid dom oid ae link oid 
calculus manipulate graph directly computability issues 
paths consider virtual graph gamma denote underlying graph gamma 
path gamma defined way directed graph call path index 
path called simple different edges starting points 
order full specific graph structure model need define way specify graph patterns allow express queries connectivity 
order study properties path extend definition set properties link paths follows path define ll jx concatenation languages example suppose want require property ff holds links path 
expressed easily terms requiring ff 
order specify constraints example introduce concept path pattern form path regular expressions 
definition regular expression alphabet sigma defined follows ffl ffl empty string regular expression ffl oe sigma oe regular expression ffl regular expressions ajb ab ffl regular expression ffl regular expression 
regular expression alphabet sigma associate language sigma usual way definition sigma finite alphabet 
regular expression sigma 
defined recursively ffl ffl ffflg ffl oe sigma oe foeg ffl ajb ffl ab ffl reflexive transitive closure language regular expression say word matches definition path regular expression regular expression alphabet link link unary predicates 
elements define path regular expression matching 
definition say path matches path regular expression words path matches path regular expression word set properties matches regular expression example suppose interested paths start link property ff continue number links property fi fl 
condition represented regular expression ff calculus algebra traditional relational database select oe project cartesian product theta operators 
contents database assumed available query engine operations executed 
example table oe predicate involving attributes result query oe oe ft joe computed inefficient enumerating tuples checking oe evaluates true 
case huge distributed database world wide web result select operation computed way simply enumerate documents 
navigation querying index servers 
consider set fx variable names 
want variables express queries virtual graph 
light considerations computability certain sets nodes links want allow queries involve computable parts virtual graph 
order introduce concept domain specifying conditions serve domain definitions variables 
definition gamma ae node ae link pnode link virtual graph 
gamma underlying graph 
domain specifying atom expression forms ffl path node constant variable path regular expression variable ffl pnode variable ffl rom node constant variable variable domain specifying expression expression form fx ja amg am domain specifying atoms variables occurring specifies type variable consider instantiation variables 
extend identity definition gamma ae node ae link pnode link virtual graph 
domain specifying atom 
say validated instantiation ffl path exists path matching path regular expression ffl true 
ffl rom id definition introduces semantics associated domain specifying expressions 
definition consider domain specifying expression fx ja amg 
set tuples psi instantiation am validated called domain specified example set nodes satisfying certain node predicate outgoing links may specified domain specifying expression fx node rom definition 
gives defined semantics domain specifying expressions problems may arise examining evaluation psi certain expressions example expressions fx node ff fx node rom algorithmically evaluated arbitrary virtual graph involve enumeration nodes 
additional restrictions imposed structure domain specifying expressions disallow expressions guaranteeing computability 
consider virtual graph gamma ae node ae link pnode link 
examine evaluation atoms cases definition ffl path determining pairs nodes separated simple paths matching path regular expression possible constant 
known graph traversal algorithm starting generate simple paths matching determining values fact traverse graph relies fact node set outgoing edges computable definition 
ffl atoms form pnode pose problem set fx jp trueg computable definition 
ffl rom determining pairs theta edge starts node possible constant 
known set outgoing edges computable definition 
considerations lead definition 
definition variable occurring domain specifying atom said independent variable atom 
variables appear atom order path rom say depends idea independent variables determined directly dependent variables determined variables depend assigned values 
definition gives syntactic restriction domain specifying expressions ensure computability 
definition fx ja amg domain specifying expression 
variable fx said ground conditions met ffl exists atom independent ffl exists atom depends ground variable expression said ground variables ground 
theorem consider virtual graph gamma ae node ae link pnode link domain specifying expression fx ja amg 
ground psi computable 
proof 
consider dependency graph gd vd ed vd fx ed dependency relation edge depends atom 
distinguish cases depending presence cycles gd consider acyclic case reduce cyclic case acyclic transforming expression equivalent 
case gd acyclic doing topological sort construct total order variables compatible dependency relation permutation oe 
oe oe implies simplify notation rename variables permutation oe variable depends variables preceding list variable define set mg set indices atoms occurs independent dependent variable 
variable ground sets non empty 
depend variable ground occurrences atoms independent occurrences 
means compute set values psi psi trueg furthermore consider element set set empty psi empty computation complete 
replace occurrences atoms constant denote transformed atoms 
occurrences atoms independent dependent substitution occurrences independent 
means compute set values tuples oe psi trueg consider arbitrary element set empty go back choose value 
replace occurrences atoms constant iterate process sequentially variables 
compute sets oe gamma gamma psi gamma gamma trueg sequentially computed set element set add tuple psi 
recursively take value gamma set recompute set compute tuples 
recursive procedure described 
case ii gd cyclic consider cycle gd definition atoms infer variables cycle type node link variable outdegree zero dependency graph 
fact variables ground infer vertices cycle incoming edge outside cycle independent occurrence atom 
loss generality consider property 
introduce new variable replace occurrences atoms depends way edge replaced edge breaking cycle see 
add new atom am path ffl please note variables ground modified expression 
denote new expression 
atom am ensures tuples psi different nodes separated empty path 
means psi psi 
new dependency graph cycle gd iterating procedure generate ix trueg generate psi psi generate main program input fx ja amg output psi method var array object psi generate algorithm computing psi procedure cycles left obtain expression evaluated method case step compute psi psi 
concludes theorem proof 
restricted domain large non computable set nodes links computable set may traditional relational selection projection impose conditions result set query 
result selection guaranteed computable course predicates involved computable 
allows introduce general format queries calculus 
definition virtual graph query expression form oe oe ffl fx ja amg domain specifying expression ffl comma separated list expressions form attribute type ffl oe boolean expression constructed binary predicates applied expressions constants standard operators semantics select project operators standard oe oe ft joe trueg tg dom theta dom theta theta dom 
example consider query id id oe fx node link path ff query retrieves nodes satisfying predicate node gets outgoing links finds nodes reachable simple paths containing ff compliant links 
resulting set triples selects greater constant equal constant constructs list triples id attribute attribute id attribute breaking dependency cycle chapter evaluation search algorithms previous chapter introduced formal query language virtual graphs 
key role language played concept path regular expressions allows queries graph structure 
chapter focus algorithms find simple paths virtual graph match path regular expression 
discuss specific query evaluation techniques particular case world wide web 
structure specifying queries consider virtual graph gamma ae node ae link pnode link 
order evaluate domain specifying atom type path need find simple paths gamma start node match certain path regular expression section algorithm proposed mendelzon wood solves problem 
finite automata convenient compact language representation regular expressions suited algorithmic purposes 
general problem regular expression matching solved better representation regular languages finite automata 
definition nondeterministic finite automaton tuple sigma ffi finite set states sigma input alphabet ffi state transition function maps theta sigma ffl set subsets sis initial state set final states 
extended transition function ffi defined follows 
sigma sigma ffi ffl fsg ffi wa ffi ffi accepts sigma ffi 
language accepted set strings accepted deterministic finite automaton dfa state transition function mapping theta sigma expressive power dfas proves equal 
class languages defined called class regular languages 
definition sigma ffi 
transition graph associated directed labeled graph em sigma 
ffi sigma edge em confusing representations say transition state state successor ffi path ffi sigma similar definitions apply dfa 
definition sigma ffi pair states define language denoted st set strings take state state state set states define language denoted st st particular state suffix language denoted sf short set strings take state final state 
clearly 
similar definitions apply dfa 
regular expression sigma ffl free sigma ffi accepts constructed polynomial time 
assume ffl free 
transition graph dfa 
example consider regular expression jc 
dfa accepts language fab ji fac jj fs fa bg ffi fs ffi ffi ffi ffi ffi ffi 
shows transition graph dfa state initial state final 
suffix language state subsequent query evaluation algorithms need compute suffix containment relation dfa 
definition dfa sigma ffi suffix containment relation defined follows theta sj algorithm mendelzon wood computes algorithm slightly modified version algorithm marks pairs inequivalent states hopcroft ullman 
algorithm compute suffix language containment relation dfa 
input dfa sigma ffi 
output relation theta method gamma mark ordered pair distinct states theta gamma gamma theta sigma ffi ffi marked mark recursively mark unmarked pairs list lists pairs marked step pair ffi ffi marked sigma put list ffi ffi ffi ffi computing suffix containment relation dfa 
algorithm marks ordered pairs states theta gamma states algorithm runs time assuming fixed alphabet 
lemma known result theory formal languages include mainly construction proof 
construction analysis path regular expression matching 
lemma regular languages 
regular 
proof 
regular languages exist sigma ffi sigma ffi construct follows theta sigma ffi theta sigma ffi ffi theta ffi 
call transition graph intersection graph clear ffi ffi theta ffi 
ffi theta ffi ffi proves statement 
regular path order evaluate query regular expression interested finding simple paths matching regular expression 
relax restriction simple paths consider decision problem 
regular path instance virtual graph gamma ae node ae link pnode link nodes ae node dom oid path regular expression link question gamma contain path matches 
solution regular path forms basis practical algorithm navigating virtual graph having enumerate reachable nodes algorithm 
observe strong similarity concept virtual graph transition graph apply methods specific automata study path regular expressions 
construction associates virtual graph distinguished nodes consistent way 
definition virtual graph gamma ae node ae link pnode link ae node dom oid construct associated sigma ffi follows sigma link ftg ffi ff fr ff trueg 
defined previous chapter language associated path virtual graph concatenation fff link jff trueg 
lemma connection paths virtual graphs language accepted 
lemma consider virtual graph gamma ae node ae link pnode link arbitrary nodes ae node dom oid 
associated 
path proof 
take 
definition means ffi ftg equivalently ffi 
definition ffi implies exists sequence states jwj ffi gamma terms underlying graph gamma translates sequence links gamma true 
path path 
take path 
certain path true 
denote extremities edge gamma infer ffi gamma means ffi 

prove theorem 
theorem regular path decidable 
proof 
definition path regular expression matching previous chapter need decide exist path 
decision problem reduces determining path 
construct link ffi gamma ftg associated virtual graph gamma nodes lemma 
path 
means need determine 
regular language exists sr sigma ffi fr accepts 
consider intersection automaton constructed proof lemma 
thetas link theta sigma ffi theta fr 
automaton accepts 
determine nonempty equivalent verifying exists state reachable order run graph traversal algorithm transition graph reach state fm accessible nodes visited 
note set outgoing edges computable node virtual graph gamma 
evaluation algorithm mendelzon wood give 
algorithm finding simple paths matching regular expression labeled graph 
algorithm traverses paths graph dfa accepting control search marking nodes visited 
adapt algorithm virtual graph 
algorithm uses dfa sigma ffi control depth search virtual graph gamma 
algorithm traverses transition graph virtual graph gamma simultaneously effect performing depth search intersection graph gamma nodes gamma marked states visited 
sets markings maintained node set current markings cm indicating states associated current path stack procedure search set previous markings pm representing earlier markings excluding current path 
function applied marking set cm returns state marking current path false marking 
complete description correctness proof algorithm see 
algorithm evaluation path regular expression query virtual graph 
input virtual graph gamma ae node ae link pnode link query fx 
output gamma value gamma 
method 
construct dfa sigma ffi accepting 

initialize gamma 

node set cm pm 

compute suffix language containment relation 
call search conf see 
evaluation path regular expression query virtual graph 
content queries section dedicated concept content query virtual graph computational point view 
consider virtual graph gamma ae node ae link pnode link 
previous section examined algorithmic aspects involved evaluation domain specifying atoms type path 
involved exploration graph structure starting known node path regular expression direct search 
type queries interested involve domain specifying atoms form predicate pnode differentiates type condition fact graph structure query involving properties intrinsic node objects 
respect type query different traditional selection relational database 
examine problems involved evaluation queries 
theoretical point view say imposed condition predicates pnode set fx jp computable 
level abstraction discuss actual evaluation type queries 
chapter explore ways evaluate queries concrete case world wide web 
procedure search var conf node virtual graph state dfa conf boolean flag conf false cm cm fsg gamma gamma fvg edge gamma true ffi cm pm cm conf true cm search new conf conf conf new conf cm cm gamma fsg conf pm pm fsg search search procedure path regular expression query evaluation 
chapter sql language chapter introduce sql language world wide web 
proposing relational model www give formal specification language describe approach take compiling 
remainder chapter describes processes involved execution queries 
virtual graph model www difficulties building sql query language web absence database schema huge heterogeneous repository information 
goal capture structure web instance virtual graph model introduced chapter 
order start identifying node link objects formal model html documents hypertext links respectively 
take advantage implicit structure html documents construct virtual object 
highest level abstraction document identified uniform resource locator url title text 
web servers provide additional information type length modification date document 
data mining purposes consider html document complex object document url title text type length modif attributes character strings 
course optional information missing html document associate fields considered null value uncommon database 
url identifies document url attribute play role id attribute node object formal model 
hypertext link commonly known anchor specified inside html document sequence form href href label href standing hypertext url referred document label textual description link 
capture information link object anchor base href label base url html document containing link href referred document label link description 
attributes character strings 
note attributes base href play role attributes link object formal model 
order able express queries need define sets predicates pnode link sigma set ascii characters 
consider set predicates nodes pnode jw sigma cw true document contains string order define set link need establish set link properties may interest 
examine attributes anchor objects 
notice attributes denote urls 
syntax urls allows distinguish components url structure protocol server ile leads definition complex object server ile fields strings 
notational convenience consider attributes document url anchor base anchor href character strings url objects 
order study topology web want distinction different kinds links 
definition taxonomy links web 
definition hypertext link html document said interior destination document coincides source document href server base server href ile base ile local destination source documents different located server href server base server href ile base ile global destination source documents located different servers href server base server assign arrow symbol link types write path regular expressions compact intuitive way 

denote interior link 
local link 
global link 
denote empty path 
allows introduce link predicates link 

easy see definition predicates computable 
definitions see web virtual graph ae node ae link pnode link defined chapter dom oid infinite set syntactically correct urls element url dom oid ae node url document referred url undefined url referring existing document 
note ae node url computable value computed sending request web server specified url 
ae link url set anchors document referred url undefined url referring existing document 
html document extract links documents scanning contents search tags 
means partial function ae link url computable 
calculus websql section propose sql notation query language defined chapter restricted virtual graph modeling web introduced previous section 
order simplify evaluation algorithm current implementation language impose restriction form domain specifying expressions restriction variable occurs exactly atom independent dependent variable may occur number atoms variable variable depends say unique atom defines variable observation domain specifying expression obeying restriction properties ffl dependency graph acyclic ffl exactly atoms variables proof 
claim variable may depend variable vertex dependency graph indegree zero 
suppose contradiction cycle 
variable cycle depends precedes depend variable outside cycle independent occurrence atom 
contradicts requirement variables grounded 
cycles dependency graph construct total order compatible dependency relation 
simplify compilation assume atoms order 
want express query oe oe fx ja domain specifying expression select oe list domain specifying conditions rewritten transformation rules ffl path document ffl cw document contains ffl rom anchor base url simple content query look example retrieve url title documents contain string robot contain string agent 
calculus query url title oe agent fx robot translates sql notation select url title document contains robot text contains agent please note occurrences contains keyword example different meanings clause part domain specifying condition involving index servers clause stands actual string containment 
idea evaluation websql queries start evaluating domains defined clause check tuple boolean condition clause 
elaborate content query regular expression example find documents contain expression object oriented phrase software reuse code reuse text 
select url title document contains object oriented title contains software code reuse interested contents individual documents hypertext structure generate 
example illustrates way examining documents directly referred known document 
example find documents directly referred department computer science home page 
select label href anchor base www cs toronto edu results content query investigate related documents 
example find documents contain term java title documents referred 
select url title label href document contains java anchor base previous examples embodied content queries incur web navigation 
navigation important way discovering information web html documents tend contain links related documents 
introduced formal calculus domain specifying conditions path regular expressions 
path regular expressions built symbols link concatenation alternation repetition 
example regular expression represents set containing zero length path paths start global link continue zero interior links 
express queries referring explicitly hypertext structure web 
example starting department computer science home page find documents linked paths length containing local links 
keep documents containing string database text 
select url title document www cs toronto edu 
text contains database course combine content structure specifications query 
example find documents containing computer science title documents linked paths length containing local links 
select url title url title document contains computer science document 
language specification syntax bnf specification language syntax 
syntax inspired syntax standard sql select statement 
language designed read queries create query select condition attribute attribute field field field id id table node contains attribute node node condition fand attribute attribute attribute attribute contains condition fj link link 


syntax sql language update insert statements 
queries implicitly refering www virtual database schema introduced section 
table document anchor field valid attribute table applies 
additions standard syntax contains predicate path regular expressions occur domain specifying conditions 
meaning discussed section 
semantics section defines semantics websql language terms formal calculus introduced chapter 
semantics websql query defined usual terms selections projections 
query form select oe translates calculus query oe oe obtained reversed versions transformation rules introduced section 
websql query clause interpreted query tautology boolean condition oe 
recall chapter definition result set query oe oe fx ja domain specifying atom defining variable expression evaluates subset cartesian product psi theta theta computed algorithm described 
furthermore oe oe ft joe trueg result set associated initial query 
compiling issues starting bnf specification built recursive descent compiler checking syntactic correctness recognizes constructs query stores relevant information internal structures 
parsing stage complete compiler generates set nested loops evaluate domain specifying atoms clause 
consider query template select obj obj 
obj condition websql compiler translates query machine code sequence implements pseudo code algorithm depicted 
note nested loops algorithm equivalent recursive algorithm chapter restricted form domain specifying expressions 
actual code generation choice object language query translated 
websql compiler decided design custom object language build virtual machine executes 
section describes object code operations virtual machine 
virtual machine architecture virtual machine implemented execute object code generated websql compiler stack machine 
stack heterogeneous able store type object integers strings vectors node link objects 
comprehensive pseudocode description semantics associated operation please see appendix 
compute fx ja trueg compute fx ja trueg 
compute fx ja trueg condition true write nested loops generated compiler proceed description object language primitives grouped semantic categories 
ffl storage manipulation load store push standard meanings ffl arithmetic increments value argument ffl output print print value variables ffl vector manipulation size retrieves number elements vector elem gets element index ffl web access computes vector document objects containing documents accessible known url paths matching path regular expression computes vector document objects querying index servers pattern computes vector anchor objects extracting anchors document url ffl object contents field retrieves value field document anchor object ffl string regular expression matching cont checks string contains substring matching string regular expression ffl logical operators standard meanings ffl relational operators eq tests equality lt tests relation ffl flow control jmp unconditional jump jf jump top stack contains false nop stands operation halt terminates execution query execution discussed section 
websql query parsed storing relevant information internal structures object program eventually generated 
section examine means example processes involved execution query 
consider websql query example select url title document www cs toronto edu 
text contains database object code program produced compiler depicted 
proceed description generated code execution 
statement simply pushes string stack 
statement line gets url top stack path regular expression argument arrows replaced letters local global interior empty path invokes virtual graph traversal algorithm section 
results graph traversal vector document objects push www cs toronto edu ll store push store load size lt jf elem field text push database cont jf elem field url print elem field title print load store jmp halt generated object code example pushed stack 
statement pops vector stack stores variable called note variable need defined ahead time gets allocated store statement uses 
lines initialize index variable called clear index vector 
line computes number elements vector pushes result stack 
lines lines implement flow control loop counter incremented size line retrieves current th element line extracts contents text field 
lines check text field contains matching pattern database performing jump loop non matching elements 
lines field extraction printing 
index servers section describe method execution engine evaluation content queries index server querying 
interested finding documents contain keyword 
calculus keyword define cw predicate pnode formulate query cw see section 
seen chapter general apply iterative methods relational databases evaluate query simply set nodes may enumerable 
efficient relational database engines naive iteration tuples 
create maintain auxiliary data structures called indices trees hash tables speed evaluation selections 
world wide web similar approach organizations developed indexing agents periodically traverse parts web maintain local databases document urls 
agents perform indexing retrieved documents textual content 
database useful wants find documents containing certain keyword interest 
databases queried line standardized protocol sending messages dedicated hosts internet result consisting list urls descriptive additional information sent back client 
dedicated hosts called index servers 
extremely dynamic nature web independence various indexing agents different index servers may return different result sets 
user usually poses query index servers order find relevant documents 
idea design query evaluation engine engine send query parallel set known index servers retrieve individual result sets construct final answer merging 
way index servers transparent person formulating query way traditional database indices 
list index servers stored html document format shown 
html 
ol 
li href search yahoo com action search yahoo com bin search key method get 
yahoo li href lycos cs cmu edu action query lycos cs cmu edu cgi bin pursuit key query method get 
lycos 
ol 
html 
index servers list document 
document information index server stored anchor additional attributes engine needs order assemble query action url cgi script processes query key name keyword input field method method pass query server get post see 
example send query keyword automobile yahoo engine generates url search yahoo com bin search automobile uses method get retrieve answer server 
experimented various lists index servers yahoo lycos wwww aliweb webcrawler nikos 
index servers return answer query html documents 
engine extracts anchors documents builds sorted list urls 
chapter experimental results chapter starts describing user interface built websql compiler query executor format results user 
results obtained running various types queries examined compared 
remainder chapter presents way building visualizing local map web appropriate websql query graph editor 
user interface websql compiler query executor implemented entirely java language introduced sun microsystems specific purpose adding executable content web documents 
java applications suitable incorporated html documents called applets reside web server transferred demand client site executed web browser need compiled installed 
course web browser java aware able recognize applet html tag load requested java classes compiled form execute 
currently java compatible web browsers sun hotjava netscape major software companies ibm microsoft licensed java planning incorporate products 
order websql available www users designed interfaces compiler query executor java applet java compatible browsers cgi program invoked html form browsers 
appearance java applet shown screen shot hotjava browser 
input form template common websql queries making easier user submit query 
query complicated typed alternative text field 
query entered may submitted pressing appropriate button 
point java applet collects data input fields assembles websql query 
query sent parser checks syntax produces object code 
object code executed interpreter query result set computed 
set formatted html document displayed browser 
url fields appear result formatted anchors user may jump easily associated documents 

contains screen shot typical result document 
performance issues execution time websql query influenced various factors related network accesses performed process building result set 
factors mention number size transferred documents available network bandwidth performance load accessed web servers 
query processing system maintain persistent local information queries access web new query 
care taken formulating queries estimating number documents retrieved 
ran types queries analyze examples 
queries executed running java applet described previous section instance hotjava browser running solaris sun cpus mbytes ram 
content queries evaluation content queries involves index servers described section 
list urls documents result set built sending queries fixed number index servers 
examples index servers yahoo lycos 
example retrieve urls documents java 
select url document contains java query took seconds execute produced result set containing tuples 
information requested matching documents execution time significantly increased 
example retrieve urls sizes modification date documents java 
select url length modif document contains java query executed minute 
cause delay resides way query executed 
list urls computed previous example 
urls length modif attributes obtained sending head request web server document resides 
head request retrieves type length modif attributes document transferring actual document content 
preferred way retrieving information documents text attribute 
example illustrates performance degradation text attribute 
example retrieve urls sizes modification date documents java contain string programming text 
select url length modif document contains java text contains programming query executed minutes result set reduced tuples compared previous query 
examples examined analysis information retrieval methods involved execution allow synthesize attribute classification table 
attribute execution speed url fast type length modif medium title text slow table classification document attributes web structure queries queries referring graph structure web expressed means path regular expressions 
evaluation queries involves graph traversal certain neighborhood node algorithm section 
execution bottleneck network access order determine successors node entire html document transferred 
execution time increases size traversed subgraph 
examples demonstrate dependence 
example retrieve documents accessible home page local links 
select url document www cs toronto edu 
query executed minutes seconds returned urls 
query explores bigger subgraph 
example retrieve documents accessible home page exactly local links 
select url document www cs toronto edu 
query took minutes execute returned urls 
general explore longer paths size traversed subgraph increases exponentially 
exist clusters web completely explored reasonable amount time especially interested local links links connecting documents server 
example retrieve documents accessible open text home page 
select url document www com query contains starred regular expression means arbitrary length paths executed minutes seconds retrieved documents 
see additional filtering conditions affect performance 
example retrieve documents accessible open text home page containing string retrieval 
select url document www com text contains retrieval modified query took seconds original 
demonstrates execution time spent transferring files opposed performing local computation 
result set reduced documents 
web visualization classical problems associated large hypertext systems called lost hyperspace syndrome certain number links user may lose sense direction 
happens user sees current document notion structure 
overcome approaches build maps web 
example hasan vista mendelzon 
integrated modified version mosaic browser hy editor builds displays date map web portion traversed current session 
hasan 
built software system called features display graphical representation traversed sub graph statistics 
systems require manual navigation order collect data generate maps 
generate maps human intervention running low priority overnight processes 
seen automatically explore parts web specifying starting url path regular expression websql query 
natural idea graph structure information generated process answering query raw data local map web 
added dump traversed graph facility query processing engine just exports traversed sub graph text file format understood graph editor 
maps built way 
example build map isg technologies web site 
order generate map submitted websql query side effect described export graph data 
select url document www com resulting map depicted 
ran similar query bigger web site obtained map 
imported graph editor web local map displayed various graph layout algorithms 
furthermore numeric attributes html documents 
length age mapped features nodes 
size color certain nodes prominent characteristics 
selected parts graph hidden reduce clutter 
details interactive features graph editor refer 
websql user interface websql query results map isg technologies web site map web site chapter thesis defined formal concept virtual graph capturing hypertext graph structure world wide web introduced algebra allows formulation content structure queries setting 
central role definition structure queries played notion path regular expressions means specifying graph patterns 
analyzed computational aspects involved answering query assuming primitive constructs computable 
furthermore considered problem determining existence path matching path regular expression virtual graph proved decidability 
described algorithm finding simple paths matching path regular expression virtual graph gamma 
algorithm proposed mendelzon wood traverses paths gamma deterministic finite automaton accepting control search marking nodes visited 
starting algebra introduced sql notation define websql specialized query language world wide web 
language introduced means comprehensive set query examples syntax semantics formally described 
furthermore websql compiler virtual machine implemented 
functionality virtual machine illustrated describing execution machine code program produced compiler 
remainder thesis dedicated presenting forms user interface compiler query executor discussing system perceived performance various types queries describing system automatically generate local maps web 
currently path regular expressions websql queries constructed built alphabet link predicates 
version language allow arbitrary extensions alphabet user defined predicates 
user defined predicate defined terms combinations primitive predicates auxiliary queries 
model query optimization having goal minimization network transfer time useful 
clear optimizer operate level websql language rewriting original query compiling level machine code form intermediate algebra oriented representation query 
direction parallelization query execution 
graph traversal algorithm parallelized distributing workload web servers encountered traversal server processes local documents eliminating document transfers 
appendix virtual machine specification operation arguments semantics load varname push varname store varname varname pop push object push object print object print object print newline size push size elem vector pop push vector pop push traverse pattern push pattern url pop push url field field object pop push object field cont pop string pop push contains string pop pop push pop pop push value pop push value eq pop pop push lt pop pop push jmp addr goto addr jf addr pop false goto addr nop halt exit object language bibliography beeri logical query language hypertext systems 
proceeding european conference hypertext cambridge university press pp 

christophides abiteboul cluet scholl structured documents novel query facilities proc 
sigmod 
acm pp 

charles fischer richard leblanc jr crafting compiler cummings publishing 
consens mendelzon expressing structural hypertext queries graphlog 
hypertext pp 

extensible relational database system geometric applications 
proc 
th intl 
conf 
large data bases pp 

modeling querying graphs databases 
proc 
th intl 
conf 
large data bases pp 

halasz reflections notecards issues generation hypermedia systems 
communication acm pp 

hasan vista mendelzon visual web surfing hy proc 
cascon toronto canada pp 
hasan golovchinsky chignell mendelzon browsing local global information proc 
cascon toronto canada pp 

hopcroft ullman automata theory languages computation addison wesley reading ma 
konopnicki shmueli qs query system world wide web proc 
vldb 
mendelzon wood finding regular simple paths graph databases siam comp 

nielsen hypertext hypermedia academic press 
orenstein manola probe spatial data modeling query processing image database application 
ieee trans 
software engineering pp 

roussopoulos faloutsos sellis efficient pictorial database system psql ieee trans 
software engineering may pp 

huang geo sal query language spatial data analysis 
proc 
ssd zurich switzerland pp 

ur names addresses www objects 
www org hypertext www addressing addressing html 
hypertext markup language html working background materials 
www org pub www markup 
java tm programming internet 
java sun com 
mosaic version fill form support 
www ncsa uiuc edu sdg software mosaic docs fill overview html internet tools summary 
www rpi edu internet guides internet tools html list robots 
info webcrawler com mak projects robots active html 
