functional implementations continuous modeled animation expanded version conal elliott www research microsoft com conal july technical report msr tr microsoft research microsoft microsoft way redmond wa shorter version report appears proceedings plilp alp fl springer verlag 
functional implementations continuous modeled animation expanded version conal elliott www research microsoft com conal july animation temporally continuous phenomenon typically programmed terms discrete sequence changes 
discreteness serves accommodate machine presenting animation person modeling animation help computer 
continuous model time animation allows natural specification avoiding artificial details difficult implement generality robustness efficiency 
presents motivates continuous modeled animation sketches naive functional implementation 
examination practical problems implementation leads alternate representations difficulties quite subtle 
hope insights techniques discussed lead better representations animation may specified natural terms significant loss performance 
functional approach animation offers possibility animations easier natural express removing need direct details presentation allowing programmer say animation 
evolution graphics termed approach modeling opposed presentation 
want model animations notion time adopt 
fundamental choice discrete vs continuous shorter version report appears proceedings plilp alp fl springer verlag 
functional implementations continuous modeled animation think time moving forward discrete sequence clock ticks continuous flow 
discrete model time fits easily popular computational concepts modern computers operate temporally discrete steps 
specifically animations sequence frames delivered user finite rate 
hand continuous model time natural fit human perception time 
rich heritage mathematical scientific engineering tools understanding describing basic animation concepts motion growth tools continuous notion time 
tools include polynomials calculus applications physical motion governed newton law motion applications gravitational attraction springs clarify benefits continuous animation note analogous discrete vs continuous choice applies concept image 
may view image discretely finite array colors continuously assignment colors continuous space 
discrete model accommodates computers continuous model fits better human perception intuitions 
concrete benefit continuous images infinitely words resolution independent 
flexibility reasons popularity vector graphics image representations software graphic design 
reason representations compact discrete counterparts 
advantages stem fact vector graphics representations store concise declarative specifications piecewise cubic curves serve outline parts image 
descriptions rendered real time produce discrete bitmaps display printing 
text particular idea called scalable fonts popularized postscript 
just continuous image models naturally give rise spatial scalability continuous time model animation yields temporal resolution independence scalability 
instance stretch squeeze animation fit desired duration 
fran functional reactive animation theory animation implementation haskell library continuous time model 
offers possibility allowing people express animations ways match intuitive understandings leverage wealth mathematical tools disposal 
cost offering continuous time model challenging implementation problem continuous animation descriptions translated discrete lower level software hardware structures 
fact translation continuous discrete inevitably introduces error 
usually errors negligible systems differential equations condition conal elliott implemented fran times achieved satisfactory combination generality robustness efficiency 
subtle difficulties apparent implementation experimentation 
purpose implementation techniques explored insight practical difficulties ideas possible techniques hope facilitating leading better representations 
section presents implementation alternatives investigated implemented partially 
previous papers fran vocabulary semantics role embedded language examples 
gives minimal treatment issues 
user perspective fran fran declarative animation library embedded language embodies continuous time model animation implemented haskell 
behaviors type ty fran type behavior ty represents ty valued animations functions continuous time ty 
example consider definition real valued animation value time grows quadratically type behavior double helpful synonym time notational magic going 
behavior specific familiar numerical operators addition exponentiation numeric literals haskell type class mechanism 
types example follows 

time literals implicitly converted behaviors application polymorphic function 
behavior events errors significant 
problems inherent applying computers simulate continuous phenomena regardless programming paradigm 
functional implementations continuous modeled animation value behavior value time 
behavior versions functions sin log defined terms non behavior versions lifting operations 
lift 

behavior 
behavior lift 


behavior 
behavior 
behavior lift 



behavior 
behavior 
behavior 
behavior lifting hidden inside type class instances declarations instance num 
num behavior lift lift negate lift negate abs lift abs fromint fromint line says number type type valued behaviors number type 
second line says behavior version binary lifted version operation 
definitions appear self referential 
overload resolution distinguishes different versions 
function fromint resolve literal integer overloading 
reason definition obvious involving lift fromint numbers number valued behaviors 
requirement partly desirable partly due restricted type fromint 
cases fran provides additional definitions names formed adding version 
num 
behavior int 
behavior lift fromint eq 
behavior 
behavior 
behavior bool lift behavior type constructor apply type 
instance applied type point static points result type space 
quite natural express behaviors terms time varying velocities 
reason fran supports integration variety types long implement vector space operations 
conal elliott integral vectorspace 
behavior 
user 
behavior examples vector space types reals vectors vectors 
user argument integral roles 
choose integral start time assist choice step size numerical solution 
user start time integral behavior time approximately value dt modularity useful construct behavior separately transform time 
fran time transformation operation 
time transform time specified time valued behavior semantically function time time 
behavior 
behavior time 
behavior lifting operators expressed terms single operator behavior 

behavior 
behavior name comes fact lifted version function application haskell infix operator 
lifting operators defined simply terms follows 
lift lift lift lift lift lift lift note basic combinators time correspond semantically type specialized versions classic combinators 
events behaviors principle notion fran event 
type ty fran type event ty type ty valued events semantically time sorted sequence time ty pairs refered occurrences event 
chiefly concerned implementation continuous behaviors events intrinsically discrete 
informally describe event operators arise 
reactive behaviors define infinite set behaviors just behavior combinators behaviors dynamic 
fran greatly enriches functional implementations continuous modeled animation behaviors supporting reactivity primitive uses behavior valued events 
untilb behavior 
event behavior 
behavior behavior event behavior untilb acts occurs switches acting behavior accompanies event occurrence 
untilb needs occurrence event occurrences event combinators 
meaning events turned convenient enables higher level combinators constructing reactive behaviors illustrated :10.1.1.17.7696
implementing continuous behaviors turn main thrust exploration implement continuous behaviors 
representation time value functions 
semantics behaviors suggest simple representation newtype behavior behavior time 
sample behavior time behavior 
time 
behavior definition introduces new type constructor value constructor called behavior 
simple type definition haskell allowed overloading 
representation easy define simple behavior combinators behavior const fb xb behavior 
fb xb time behavior 
tt behavior tt sample behavior constructed untilb time check event occurs sample new behavior part event occurrence sample choosing sampling time animations may mutually reactive 
conal elliott untilb behavior sample sample case occ 
just 
presume function occ signature checking event occurrence time 
occ event 
time 
reason represent events directly semantics list occurrences time value pairs untilb need event occurrence time possible know time occurrence 
event represented time sorted list possible occurrences consists time value 
newtype event event time occ function simply searches possible occurrence list looking genuine occurrence time 
thorough description fran implementation events outside scope case event 
corresponds union occurrences listing occurrences occurrences simultaneous 
event 
event 
event event 
event event merge merge os te mb os te mb te te merge os merge os merge os os merge os os problem non incremental sampling representation appealing terms simplicity serious performance problem 
allows remembered sampling 
animation behaviors typically sampled sequence display times separated small differences 
instance integral behavior vital efficiency intermediate results carried sampling small amount extra functional implementations continuous modeled animation required 
similarly reactive behavior constructed untilb important incremental progress event detection 
consider implementation untilb suppose want sample reactive behavior times 
sampling consider event occurred choose sample old behavior new 
frequently case new behavior reactive infinite chain 
case time takes compute sample increase bound clearly unacceptable 
consider involved computing occ untilb 
possibilities event occurrences rediscovered cached 
rediscovered cost sampling increases sampling 
cached cache large space leak 
problems cause call space time leak 
representation residual behaviors 
crucial observation typically sampling times 
monotonically increasing 
assume typical case holds remove space time leak 
idea sampling yield value residual behavior 
newtype behavior behavior time 
behavior behavior 
time 
behavior behavior combinator implementations quite simple reasonable 
constant behaviors return pair behavior const time behavior simple 
time behavior 
time combinator samples argument behaviors applies resulting value applies residual behaviors 
fb xb behavior sample sample fb xb fb fb xb xb time transformation implemented 
unfortunately cost assumption significant restriction time transforms may applied reactive behaviors 
conal elliott tt behavior sample sample tt tt tt time transformation violate monotonicity assumption time streams time transform tt monotonic 
possible check monotonic sampling dynamically reactive behaviors fran 
checking monotonicity statically untilb behavior constructed feasible 
occ function checking event occurrences changed way behaviors yields residual event possible occurrence 
occ event 
time 
event consider reactivity 
sampling reactive behavior time event occurrence newly constructed behavior longer checks event occurrence eliminating time leak longer holds old behavior eliminating space leak 
untilb behavior sample sample case occ occurrence keep looking 
untilb sample new behavior just bnew 
bnew representation stream functions 
alternative solution problem non incremental sampling map time streams value streams 
see section representation advantages representation newtype behavior behavior time 
behavior 
time 
behavior ts ts constant behaviors return list containing infinite repetition value functional implementations continuous modeled animation behavior const repeat combinator samples function argument behaviors applies resulting functions corresponding arguments binary mapping functions zipwith 
fb xb behavior ts 
zipwith fb ts xb ts time identity representation different type time behavior ts 
ts reactivity implemented scanning list possible event occurrences enumerating behavior samples 
convenience assume stream sampler function events event 
time 
implementation untilb untilb behavior ts 
loop ts ts ts non occurrence 
emit sample continue looking loop ts xs loop ts xs event occurrence 
discard rest values possible event occurrences continue new behavior loop ts just bnew bnew ts weakness representations cause great deal construction sampling 
reason important garbage collector deals efficiently rapid production structures generational garbage collection 
instance glasgow haskell compiler collector :10.1.1.47.6555
problem redundant sampling serious problem representations preceding lead redundant sampling 
simple example consider behavior linearly interpolates numerical behaviors interpolation parameter resulting behavior equal zero 
interp 


interp conal elliott problem sampling behavior generated interp time ends sampling twice due repeated body interp 
complex behavior redundant sampling costly 
worse composition functions interp multiplies redundancy example 





interp interp result sampled time behavior sampled twice means sampled times interpolation done twice 
cube result definition cube num 

cube sampling multiplied causing evaluated twelve times sample time approach solving problem redundant sampling applying lazy memoization may supported function form type 
memo eq 



semantically memo identity 
operationally closure returned contains mutable memo table 
representations discussed far may memoized 
instance representation simply constructed sampling functions 
way example appropriately modified 
change created sample function memoized 
fb xb behavior memo sample sample fb xb fb fb xb xb drawback implementation memoization overhead paid sample time component behavior slows sampling speeding circumstances extreme redundant sampling 
efficient alternative start representation memoization works level lists times individual times 
base memoization usual elementwise notion list equality particularly problematic time lists infinite suffices pointer equality list representations recommended 
functional implementations continuous modeled animation representation current version fran memo tables managed explicitly higher order memo function 
reason exception memo tables need aged explained 
algebra behaviors related ways inspired backus language fp 
fp programs expressed function level application object level values kept implicit 
property leads redundant applications function argument similar problem discussed section 
illinois functional programming interpreter addressed problem expression cache 
recursive algorithms expression caching reduced asymptotic running time 
normally caching modest effect speeding computations slowing 
problem space leaking memo tables subtle important consideration memoization garbage collection 
memoized functions contain tables domain range values tables typically grow bound 
memoized function lost contents memo table reclaimed described 
example consider behavior uses cube interp functions defined stretch picture 
fran type represents image valued behaviors dimensional animations 
anim anim stretch pic cube interp cube time anim displayed sampled time list depends speed machine time varying load processes 
long anim display function representations anim including memo tables reclaimed 
list cells time value lists eligible reclamation efficient manner animation display progresses 
unfortunately memory behaved 
problematic case definition anim top level definition known caf constant applicative form 
case current haskell implementations know behaviors reclaimed 
problematic situation reclamation memo tables arises behavior retained order restarted example upcoming release glasgow haskell compiler fixes problem 
conal elliott looping behavior restarting seconds 
anim anim stretch pic cube interp cube time untilb 
operator shift seconds 
alternatively semantics untilb kind shifting automatically 
technical difficulties intend alter fran way 
implementation issue discussed remains 
case released seconds generate new list scale values 
memo table entry added seconds evaluated size entry grows lazy evaluation time scale cons cells sample second 
sufficient cleverness may possible reuse cache entry time restarts 
reuse correct suffix sample time list event occurrence shifted back amount equal event time equal original sample time list 
condition hold example original time list started zero contained second event occurred exactly multiple second 
sampling time sequence contains irregularity time event pi reuse 
problematic situations common practice 
reasons necessary memo tables special support garbage collector live pointers object memo table keys object gets reclaimed memo table entries get deleted 
idea described smalltalk lisp scheme implementations quite far know implemented haskell run time system 
fran programs leak space exactly reason 
serious subtle problem memoization comes fran combinator 
combinator essentially dual snapshot 
signatures follows snapshot event 
behavior 
event bv 
event 
bv 
event bv idea snapshot pair event data occurrence snapshots values corresponding occurrence time 
dually gives access residual occurrence purpose able coordinate concurrently running behavior event event 
occurs occurs value occurrence 
syntactically binds tightly untilb 
functional implementations continuous modeled animation occurrence fortunately hidden inside event behavior combinators 
need sample generalized behaviors notions subsumes actual behavior types 
fran implements terms primitive aging function bv 
bv 
time 
bv idea create list times corresponding occurrences event closely spaced non occurrences 
list fed produces stream updated versions generalized behavior argument 
note may possible desirable hide beneath set combinators implementation issues remain 
consider interaction memoization 
suppose behavior bv memo entry time stream corresponding value stream time stream argument 
initialize aged behaviors memo tables 
bv memo table space leak entries get cache hits 
hand start empty memo tables repeating lot 
crucial observation aged behaviors sampled aged sample time streams suffixes time streams sample bv 
reusing discarding memo tables entirety current fran implementation ages tables replacing time value stream pair corresponding stream suffixes 
instance aged memo pair 
note representation trickier garbage collector trim memo tables 
time type float double fran implementation easily keep time sample pair alive memo table accident 
accidental happen solution introduce data type wrap time values 
problem synchrony memoization solves problem redundant sampling different uses behavior sampled exactly time streams 
situations want behavior sampled different time streams 
situation application time transformation 
consider example 
conal elliott time pi cube interp cube time second situation sample behavior different rates different degrees precision needed 
example suppose image im moving complex motion path mot overlaid smaller copy im im stretch im im im move mot im sampling order stay error bound measured distance temporal rate im require accuracy mot im second spatial inaccuracies reduced factor 
third situation calling variable sampling rate detection events defined boolean behaviors 
discussed interval analysis ia robust nand efficient algorithm detect occurrences events :10.1.1.17.7696
sampling patterns adaptive nature condition constituent behaviors 
cases lack synchrony disallows sharing different sampling patterns 
solution problem 
note values display samplings necessarily approximate 
fran uses linearly interpolating engine 
explored section observation suggests sharing non synchronous sampling patterns 
structural optimizations fran algebra behaviors events satisfies algebraic properties exploited optimization 
roughly speaking identities fall categories static behavioral properties 
static property mean lifted level behaviors directly property static values 
examples include identity distributive properties images associative commutative image overlay operation applies transform image 
im im im im xf im im xf im xf im functional implementations continuous modeled animation useful property condb lifted form condb true condb false behavioral property mean applies behaviors types 
example applied constant behaviors result constant behavior consequence lifted ary function applied constant behaviors yields constant behavior 
useful property distributivity lifted functions reactivity 
consider simple case 
lift untilb lift untilb 
lift event 
occurs occurs occurrence values result applying function corresponding value syntactically binds tightly untilb 
obvious candidate general case fb xb untilb fb xb untilb 
xb 
fb xb similarly case fb reactive 
argument behaviors reactive rules may applied sequentially order 
similarly rule xb reactive applying rule give rise rule application 
operational problem rule holds behavior fb waiting event occur causing space leak 
occurs fb get sampled starting occurrence time 
fb undergone transitions may lot catching amounts time leak 
fix problems give quick access residual fb 
fb xb untilb fb xb untilb fb 
xb fb 
fb xb identities widely applicable improve performance 
merit enable optimizations 
instance consider animation conal elliott time untilb 
applying untilb identity yields time untilb 


transition occurs time new behavior simplified 
explored alternatives representing continuous animation worth trying 
preliminary thought implemented partially 
memo elimination consider examples section motivated memoization interp interp interp cube behavior represented function times time lists repeated occurrences interp cube cause redundant sampling kind run time memoization 
unfortunately memoization overhead turns helpful behavior 
example definition interp creates unshareable behaviors shareable behavior returned 
unshareable behaviors fact shareable indirectly containing shareable behavior 
containing behavior memoization ensures contained behaviors redundantly sampled 
simple situations interp lack apparent code 
fran nature haskell library embedded language see exploit non eliminate run time memoization overhead 
unfortunately problem especially messy memoization implemented pure haskell requires hidden mutable state showing imperative monad pointer equality preserve laziness 
functional implementations continuous modeled animation compile time memoization just non tends apparent behavior source code sharing 
considering definition interp easy guess sampled redundantly 
haskell compiler hardwired domain knowledge eliminate redundant sampling eliminating run time overhead 
possible domain independent haskell compiler perform optimization applying simple generally useful transformations 
step compile time elimination overloading specializing definition interp case behavior arguments techniques 
interp num 
behavior 
behavior 
behavior 
behavior interp lift lift lift lift transformation unfold definition lift details depend exact representation behaviors 
sake exposition take representation section stream functions 
unfolding pattern match eliminations result roughly interp behavior ts 
zipwith zipwith zipwith repeat ts ts zipwith ts ts crucial aspect transformation revealed redundant sampling time stream ts 
transformation elimination somewhat tricky lazy languages 
interp behavior ts 
ts zipwith zipwith zipwith repeat ts zipwith ts simplicity derivation assumes somewhat different definition lift lift directly terms zipwith zipwith respectively 
conal elliott redundant sampling gone inefficiency shown temporary creation consumption non shareable intermediate lists 
point perform deforestation get 
interp behavior ts 
ts ts ts zipwith general deforestation difficult optimization compilers 
glasgow haskell compiler performs simpler version works cases functions zipwith consume lists synchronously :10.1.1.47.6555
list functions map zipwith zipwith commonplace lazy functional programming reasonable embed sufficient expertise compiler 
note final form interp resembles original form 
just little interp behavior ts 
zipwith ts ts ts equivalent lift version static version interp interp lift form arrived direct means domainindependent compiler extended domain specific optimizations 
case optimizations involve various compositions lifting functionals 
technique compile time memoization just outlined eliminate redundant sampling 
appears depends inlining definitions see repeated behavior 
moderately complex animation programs repeated behaviors hidden inside layers definition 
inlining definitions exhaustively cause functional implementations continuous modeled animation unacceptable code bloat 
missing piece puzzle way compiler factor definition composition outer part inlined inner part remain opaque 
ideally outer part small contain crucial aspect sampling 
example interp outer part inner definition 
question remains domain independent compiler choose right factoring 
interp example fairly easy involves behaviors constructed solely lifting including zero ary lifting 
reactivity time transformation raise issues 
functions vs data structures arya early temporally discrete modeled animation representing animations simply lists 
incremental value construction may done representation list representation problem redundant sampling computation goes construction animation representation sampling 
simplify comparison arya discrete model continuous define behavior constructors 
type behavior possibly infinite lists repeat repeat 
lift map lift zipwith map binary function lists lift zipwith map ternary function lists time transformation problematic 
estimate values samples pre time transformed value list 
applicable types try form interpolation doing pure invention 
list representation logical sample trivial just extract head continue tail 
contrast operational sample cheap expensive laziness delays actual computation list elements consumption consumptions virtually cost 
contrast list representation continuous behavior implementations described value computations logically belong sampling making sampling expensive operation 
behavior construction hand logically cheap just wrapping behavior simon peyton jones pointing problem 
conal elliott sampling functions new closure 
unfortunately caching done lazy language implementation benefits cheap construction operation expensive sampling operation 
observations operational differences list representation discrete behaviors function representations continuous behaviors suggest looking data structure behaviors sampling operation cost small fixed amount independent complexity behavior construction 
relative continuous behavior representations shift sampling construction 
laziness consumer behavior drive actual computation reap benefits 
important point sampling cost really small including small constant factor 
interpolation restricted sample time streams function representations explored section try support generation sample values arbitrary sample times 
course general behaviors constant sample times 
early implementations fran implementations animation behavior values shown constant new values computed 
current implementation behaviors sampled roughly times second interpolated fast specialized engine running thread 
sprite engine performs image motion stretching compositing overlaying roughly video refresh rate indistinguishable varying continuously 
ideally rate exactly equal video refresh rate 
sprite engine easily achieve rate visually simple animations desired regularity due operating system scheduling locking issues 
rely interpolation fill gaps computed behavior samples may relax demands behavior sampling 
supporting arbitrary time streams allow special class 
particular allow streams containing integer multiples integer fn 
benefit restriction allows represent behavior function data structure contains pointed section mechanics lazy evaluation advantage 
computation streams portions streams clients occur sharing various clients stream portion happens automatically 
consider question efficient representation set value streams 
order choose representation know operations current implementation fran behavior large discontinuity interpolation visually disturbing 
reason discontinuities communicated sprite engine explicitly faithfully 
functional implementations continuous modeled animation performed frequency 
operations order decreasing frequency ffl interpolation members single stream ffl extraction successive members single stream ffl construction lifted functions time transformation untilb ffl shifting midway enumeration 
operation frame rate animation may adapt changes animation complexity changes load computer due processes 
comes time transformation 
example animation transformed slow slow gets stretched near middle need sampled higher rate near 
obvious representation set sample streams bidirectionally doubly infinite list bidirectionally infinite lists 
doubly infinite lists need integers positive negative positive negative multiples type bidirectionally infinite list type behavior contains positive multiplies inner may simplified 
problem representation awkward shift mid stream 
hold value lists necessary shift may large amount catching resulting space time leak 
alternatively advance value streams simultaneously 
lazy evaluation necessary infinitely value streams postpone advancement making leak worse better 
streams retained cascading advancement computations 
interval trees representation multi resolution behaviors introduced infinite binary tree 
node represents single interval single value contains subtrees refined approximations 
data time dtime start time duration value start interval refinement left half refinement right half conal elliott lot redundancy representation start times durations subtrees easily computed parent left subtree start value parent 
remove redundancy moving start time duration start value non recursive data type augmenting recursive value interval midpoint data time dtime data refinement left half value midpoint refinement right half note type represents behavior doubly open interval tell behavior value start interval limit approaching midpoint values 
type adds start value represents behavior left closed right open interval 
entire behavior covers left closed right infinite interval 
fortunately interval constructed concatenating infinite sequence left closed right open intervals long start time member sequence equals time previous member endpoint sequence goes infinity limit series durations 
observation suggests representation behaviors behavior list trees covering contiguous intervals 
newtype behavior behavior remains criterion dividing original semi infinite interval 
possibility sequence doubling durations 
benefit doubling approach leads kind logarithmic search outwards just approach halving finite intervals leads logarithmic search inwards 
redundancy valid behavior representations 
followed durations may computed subtraction may removed data time interval analysis ia choose examination depth required precision 
combining symbolic differentiation ia second derivative bounds determine error bounds linear interpolations borrowing results theory piecewise approximation curves 
idea multi resolution representations binary trees images computer graphics 
particular mip map sequence functional implementations continuous modeled animation copies discrete image half width height predecessor stored clever manner quick access 
order eliminate spatial aliasing masquerading high frequencies low ones copy time construction simple linear interpolation suffices high quality display 
aliasing problem time space sort filtering may worthwhile interval tree representations discussed 
far know recursive representations mip maps extended infinitely large synthetic images 
intend try representation fran images 
non reactive normal forms discussed section lifted functions distribute untilb 
repeatedly applying distributivity property normalizes reactive behavior head normal form untilb inserting non occuring event behavior non reactive 
event occurs producing new behavior get new non reactive behavior event 
kind normalization may helpful brings larger compositions non reactive behaviors easier analyze 
particular described compose interval versions lifted functions making non reactive head order perform efficient robust detection predicate events :10.1.1.17.7696
pointed section order get sampling incrementality need deal behavior list construction done sampling 
head normalized behavior sampling construction unnecessary non reactive behaviors sampled efficiently incrementality 
take idea non reactive normal form 
note reactive behavior untilb occurrence event relevant behavior meaning 
occurrence time value normal form untilb 
relevant aspect occurrence 
semantically list event occurrences constitutes event 
observation suggests normal form switcher non reactive event non reactive behaviors 
fran switcher function currently implemented recursively terms untilb follows 
assemble behavior piecewise initial event switcher bv 
bv 
event bv 
bv switcher untilb 
uncurry switcher event occurs value value paired residual implementation switcher new behavior residual event passed recursively switcher 
conal elliott constraint propagation non reactive head normal form think reactive behavior piece state constraint variable holding non reactive behaviors 
light repeated head normalization reminiscent propagation dependencies uni directional constraints 
scholz system works way 
system combined multi directional constraint propagation non reactive behaviors 
major difference approaches aside uni vs multi directionality inversion control 
constraint propagation changes pushed constraint variables depend transitively 
head normalization contrast pulls changes 
probably efficient push approach hybrid approaches implementation reactive behaviors 
general stateful representation reactive behaviors considerably efficient stateless representations implemented 
main obstacle pushing state behaviors means different uses behavior may require different states 
possible solution comes normalization 
time transformation distributes lifted functions reactivity 
integration complex 
distribution laws time transformation normalized away 
translation fran similarity esterel lustre consider translation 
fran languages synchronous deterministic model concurrency 
esterel imperative lustre functional 
discrete notions time possible translate specification concurrent behaviors parameterized specification result sampling behaviors arbitrary time stream arbitrary event 
modern software hardware technology temporally discrete nature encourage discrete software models 
context animation continuous approach natural closely reflects real world behaviors modeled 
explored functional implementations continuous animation problems arise 
problems subtle apparent costly trial error 
considered ideas may turn practical value 
hope discussion motivate pursuit goals efficiently executing naturally specified interactive animation 
functional implementations continuous modeled animation discussions finne simon peyton jones tony daniels helped clarify operational properties representations discussed 
extensive comments anonymous reviewers greatly improved presentation 
arya 
functional approach animation 
computer graphics forum december 
arya 
functional animation starter kit 
journal functional programming january 
john backus 
programming liberated von neumann style 
comm 
acm 
erard berry georges gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming november 
caspi pilaud halbwachs plaice 
lustre declarative language programming synchronous systems 
proceedings th acm symposium principles programming languages new york ny 
acm 
olaf 
common subexpression elimination lazy functional language 
chris clack tony davie kevin hammond editors proceedings th international workshop implementation functional languages st andrews scotland september 
byron cook john launchbury 
disposable memo functions extended 
proceedings acm sigplan international conference functional programming page amsterdam netherlands june 
conal elliott 
modeling interactive multimedia animation embedded language 
conference domain specific languages pages santa barbara california october 
usenix 
www version www research microsoft com conal papers dsl dsl html 
conal elliott 
composing reactive animations 
dr dobb journal pages july 
expanded version animated gifs www research microsoft com conal fran htm 
conal elliott conal elliott 
functional animation sprite display expanded version 
technical report msr tr microsoft research july 
www research microsoft com conal papers long ps 
conal elliott paul hudak :10.1.1.17.7696
functional reactive animation 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 
conal elliott greg schechter yeung salim abi 
high level framework interactive animated graphics applications 
andrew glassner editor proceedings siggraph orlando florida pages 
acm press july 
john peterson haskell non strict purely functional language 
technical report yaleu dcs rr department computer science yale university may 
current www version haskell org report index html 
filip 
surface algorithms bounds derivatives 
computer aided geometric design 
andrew gill john launchbury simon peyton jones 
short cut deforestation 
fpca conference functional programming languages computer architecture pages copenhagen denmark june 
acm press 
john hughes 
lazy memo functions 
jouannaud editor functional programming languages computer architecture volume lncs pages 
springer verlag september 
adobe systems incorporated 
postscript language tutorial cookbook 
addison wesley publishing 
mark jones 
dictionary free overloading partial evaluation 
acm sigplan workshop partial evaluation semantics program manipulation orlando florida june 
simon peyton jones cordelia hall kevin hammond partain philip wadler :10.1.1.47.6555
glasgow haskell compiler technical overview 
proc 
uk joint framework information technology technical conference july 
arch robinson 
illinois functional programming interpreter 
proceedings sigplan symposium interpreters interpretive techniques pages 
acm acm june 
functional implementations continuous modeled animation scholz boris 
framework unifying postscript pictures gui objects lazy way constraints 
conference technology object oriented languages systems tools usa santa barbara california 
prentice hall 
www inf fu berlin de scholz tools published ps gz 
john snyder 
interval analysis computer graphics 
edwin catmull editor computer graphics siggraph proceedings volume pages july 
simon thompson 
functional reactive animation lift fran 
technical report university kent computing laboratory may 
www cs ac uk pubs index html 
philip wadler 
deforestation transforming programs eliminate trees 
theoretical computer science june 
lance williams 
pyramidal 
proceedings siggraph pages july 
