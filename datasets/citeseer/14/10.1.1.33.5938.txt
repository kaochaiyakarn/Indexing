satin toolkit informal ink applications jason hong james landay group user interface research computer science division university california berkeley berkeley ca usa landay cs berkeley edu software support making effective pen applications currently rudimentary 
facilitate creation applications developed satin java toolkit designed support creation applications leverage informal nature pens 
support includes manipulating rendering objects support zooming rotating objects switching multiple views object integration pen input interpreters libraries manipulating ink strokes widgets optimized pens compatibility java swing toolkit 
satin includes generalized architecture handling pen input consisting recognizers interpreters multi interpreters 
describe functionality architecture satin applications built satin examples 
keywords toolkits pen ink informal sketching gesture recognition interpreter recognizer satin sketching writing natural activities settings 
pen person quickly write ideas draw rough pictures diagrams deferring details 
informal nature pens allows people focus task having worry precision 
computing devices coming equipped pens useful pen applications take advantage fact pens sketching applications pens selecting tapping dragging 
applications simply treat pen pointing device ignoring unique affordances 
furthermore compelling applications exist built scratch despite fact share kinds functionality 
rudimentary software support creating pen applications 
despite fact new useful pen leave blank cm left column page put copyright notice 
interaction techniques developed gesturing pie menus techniques widely adopted difficult timeconsuming implement 
respect input output pens stage similar windowing toolkits early 
example applications novel techniques exist cohesive frameworks support creation effective pen applications 
step framework developed satin toolkit supporting creation informal ink applications 
high level perspective research goals satin design generalized software architecture informal pen applications focusing handle sketching gesturing reusable manner develop extensible toolkit simplifies creation informal pen apps distribute toolkit general researchers step surveyed existing pen applications commercial research order determine shared functionality useful 
implemented iteration toolkit java built significant application denim see fig 

lessons learned developed second iteration satin built application 
outline functionality common existing pen applications take look current software support pen interfaces 
continue describing high level detailed design satin toolkit 
specifically focus generalized architecture handling pen input consisting components recognizers interpreters 
describe pen input handled terms applications denim 
conclude evaluation toolkit plans discussion lessons learned 
sketching mean process drawing roughly quickly 
term ink strokes appear 
gesturing mean pen drawn stroke issues command satin project page software download berkeley edu projects satin screenshot denim sketch web site design tool created top satin pen application space applications developed sketching gesturing 
performed survey applications looking specifically examples informal ink interaction ones step away rigid structure precise computation supporting ambiguity creativity communication 
research systems headed direction informal interfaces years processing ink processing ink internally displaying unprocessed ink 
applications examined include design tools whiteboard applications annotation tools note applications applications demonstrating new interaction techniques 
applications share functionality including pen input ink pen input gestures pen input selecting moving interpreters act ink input manipulation kinds objects ink grouping objects layering objects time indexing ink input transformation ink cleaned objects immediate deferred processing ink process developing denim application discovered needed techniques managing information turned zooming semantic zooming demonstrated pad jazz 
decided functionality useful developers included toolkit 
existing pen frameworks section outline existing frameworks developing pen applications describe satin builds ideas 
commercial software support pens palmos offers simple pen input processing 
default behavior process strokes taps silk screen area key events strokes passed application processing 
palmos provides apis getting individual stroke points enabling disabling graffiti shorthand recognizer getting known location pen 
microsoft windows pen computing provides minimal support pens 
text entry areas replaced handwriting edit controls boxed edit controls individual characters written 
simple gesture recognition supported 
extensions give developer little support building informal ink applications 
windows ce pen input treated subset mouse input 
applications receive messages pen moved goes comes double tapped 
windows ce provides simple handwriting recognition 
uses sheets input metaphor 
users write sheets having explicitly save 
furthermore users specify ink modes strokes processed text shapes left unprocessed raw ink 
recognition errors corrected choosing best list 
gestures integrated system 
drawing zig zag shape word shape known scrubbing deletes object 
holding pen second activates select mode 
select enabled user drag pen highlight circle objects select 
lastly provides extensive widget set pens designed minimize amount user writing necessary 
sophisticated commercial support pens go 
operating system built ground support pens 
providing services described gestures pen widgets features live embedding documents documents extensive integration gesture recognition handwriting recognition 
main differences satin systems described 
systems listed designed build formal user interfaces focused handwriting recognition form entry tasks 
contrast satin targeted development informal ink applications 
second difference extensibility 
aside handwriting recognition systems listed provide minimal support manipulating processing ink 
contrast primary goals satin give developers flexibility ink processed simple 
example new gestures added systems described 
research software support pens simple ink gesture support provided 
uses notion sensitive regions invisible rectangles placed top screen objects 
sensitive region intercepts stroke input processes input recognition object possibly forwards higher level event screen object underneath 
mankoff extended toolkit support gesturing recognition specifically exploring techniques resolving ambiguity 
garnet amulet support gestures 
gesture interactor added toolkits support recognizing pen gestures rubine algorithm 
recognizer simply calls registered callback procedure result parameter 
pen ink support provided 
lightweight electronic whiteboard system common satin 
uses notion segments divide screen space uses strokes input output 
furthermore behaviors dynamically plugged segments changing stroke input processed displayed 
architecture similar satin 
clear difference satin combines mechanism policy cases mixing done done 
example strokes belong segment new segments automatically created stroke drawn existing segment application designer wants new segment 
goal satin focus fine grained mechanisms range ink applications 
difference allows application behavior active segment time 
introduce notion manage multiple interpreters 
kramer translucent patches dynamic interpretations significantly influenced design implementation satin 
kramer notions patches dynamic interpretation focus toolkit level 
chief characteristics differentiate satin flexibility fine granularity 
focused developing extensible toolkit 
provide set mechanisms manipulating handling interpreting strokes library simple manipulations strokes developers build variety informal pen applications 
high level design satin satin intended support development applications 
chose support applications surveyed utilize dimensions 
current implementation satin support multiple users introduces level complexity scope project 
satin built java jdk satin uses java rendering extensive java core classes swing windowing toolkit 
fig 
shows pen application built satin swing java 
roughly speaking satin partitioned twelve interrelated concepts see table 
concepts briefly summarized section 
concepts loosely coupled independently rest toolkit 
words developer portions satin toolkit complete buy entire system 
diagram shows relationship java swing satin pen applications 
concept outside satin 
pens 
rendering views transitions strokes portions events recognizers portions interpreters clipboard notifications commands widgets table twelve major components satin 
portions satin designed independent rest system outside satin 
design overview call objects displayed manipulated graphical objects 
modeling systems java opengl notion tree data structure holds graphical objects groups graphical objects 
simplest graphical object user create stroke automatically created satin path drawn pen mouse 
primitive graphical object patch arbitrarily shaped region space contain graphical began satin jdk transitioned early access version jdk released 
objects 
patches interpret strokes gestures ink 
notion patches derived kramer 
satin provides sheet java swing component graphical object 
sheet serves root essentially drawing canvas contain satin objects 
graphical objects layer coordinates 
xaxis axis coordinates cartesian coordinates 
layer coordinate denote relative position graphical object axis 
satin simply keeps track objects top store exact axis coordinates 
graphical objects styles 
styles take graphics concepts java line style color font abstracting single object 
styles automatically applied rendering subsystem rendering 
rendering satin uses damage redraw cycle standard windowing systems 
system region marked damaged 
area damaged graphical objects damaged area traversed 
common operations translation rotation graphical objects automatically damage region 
application specific operations developer may need explicitly call damage method 
satin automatically changes rendering quality depending current context 
example user drawing strokes damaged areas rendered low quality order speed performance 
stroke completed satin reverts highest quality rendering level 
graphical objects view objects dictate graphical object drawn 
graphical object view multiview object specifies policy view objects rendered 
example multi view included semantic zoom multi view uses current zoom scale choose view displayed pad jazz 
satin provides support simple transitions graphical objects zooming rotation 
graphical object transform system automatically generate render intermediate steps providing smooth animation 
default transition type slow slow transition spends majority time animation 
classes manipulating strokes 
stroke assembler aggregates user input strokes dispatches events graphical objects 
graphical object knows handle stroke events choose stroke events handled 
process described detail detailed design section 
utility classes manipulating strokes splitting strokes merging strokes turning strokes straight lines simplifying strokes 
term recognizers mean subsystems classify ambiguous input ink strokes 
satin defined recognizers objects take kind ambiguous input return defined best list classifications probabilities ordered probability 
definition allows plug stroke recognizers system 
examples stroke recognizers include rubine recognizer neural net recognizers 
currently satin contains implementation rubine recognizer 
recognizers may may retain state classifications 
recognizers take kind action act classification 
left interpreters 
interpreters take action user generated strokes 
example interpreter take stroke transform straight line 
different interpreter issue command stroke resembled gesture system 
interpreters recognizers classify strokes required 
distinguish gesture interpreters ink interpreters 
gesture interpreter tries process stroke command cut ink interpreter processes stroke displays result ink 
distinction interpreters single stroke interpreters 
progressive stroke interpreter tries perform actions stroke drawn single stroke interpreter takes action stroke completed 
satin currently support multi stroke interpreters 
graphical object gesture interpreters ink interpreters 
views specifies policy interpreters 
new concept introduced satin discussed detailed design section 
clipboard acts modern guis supporting cut copy paste graphical objects 
notifications messages generated sent internally system order maintain consistency 
messages maintain constraints graphical objects notify objects graphical object deleted 
commands common design pattern supporting macros undo redo 
commands reify operations encapsulating transaction object knows undo redo 
satin command subsystem extends provided java swing swing undo adding notion executing command simply undoing operation 
command subsystem notion time tracking commands executed allowing classes commands enabled disabled 
application developers required command subsystem order satin 
command subsystem outside satin 
satin provides widgets optimized pens 
currently new widget provide pie menu normal java swing widget 
pie menu implements swing swing menu interface cases lieu normal pop menus changes code 
provide pen pluggable look feel 
uses java swing pluggable look feel modify standard file opener slider widgets easier pens 
file opener modified accept single mouse clicks open folders double clicks 
slider modified larger elevator ability slider value changed tapping slider 
pie menu tied satin java applications outside toolkit 
bridging gap java swing satin provide classes help bridge gap satin java swing see fig 

currently satin support swing consists classes 
wraps swing widgets satin graphical object 
swing widgets displayed satin full interaction keyboard input completed 
second allows java image objects displayed satin 
enables satin able display image file format java understands 
conversely satin swing applications 
stated sheet root satin fully compatible swing widget 
swing widget wraps satin graphical object letting satin graphical objects displayed swing applications 
lastly provides utilities turning satin graphical objects java image objects 
enables satin able write image file format java understands 
detailed design satin ink handling section describe strokes recognizers interpreters detail interact runtime 
strokes satin strokes simply list tuples coordinate coordinate time point generated unix epoch 
satin provides utilities interpreters manipulating strokes including splitting stroke parent class swing widgets 
classes bridging gap satin java swing 
swing widgets displayed satin satin graphical objects embedded swing applications 
example policies splitting strokes 
thicker line gesture created pressing right button 
top separate strokes near combined single stroke 
middle separate strokes intersect near endpoints merged single stroke 
bottom separate strokes intersect near endpoints merged closed shape 
examples straightening strokes 
smaller merging strokes straightening strokes straight lines simplifying strokes 
strokes split specifying rectangle removed 
fig 
shows sample interpreter removes lie bounding box gesture stroke 
fig 
shows examples merging strokes 
see strokes merged algorithm checks strokes near 
algorithm checks extremity stroke near extremity 
successful match extremities joined new stroke short trailing ends discarded 
satin strokes changing strokes lines go left right see fig 

straighten stroke examine pair adjacent points classify pair going left right 
subsequence points going direction create line goes average value subsequence 
done lines created joined returned new stroke 
examples stroke simplification 
algorithm generates stroke similar original stroke fewer points rendered faster 
satin provides utilities simplifying strokes see fig 

technique automatically help speed animated transitions 
approach simplify stroke point calculate absolute angle relative stroke top left corner atan calculate angle delta adjacent pair points add starting point original stroke simplified stroke go deltas add local minima simplified stroke stroke simplified cached system 
sample set strokes number points reduced ranged averaging reduction 
battery performance regression tests strokes performance speedup animating simplified strokes ranged average speedup 
speedup improves somewhat linearly number strokes increased expected 
speedup execution time old execution time new recognizers satin recognizer subsystem classifies ambiguous input case strokes 
satin defines standard interface types recognizers progressive stroke single stroke recognizers 
definitions mutually exclusive recognizer progressive single stroke recognizer 
satin defines classification object recognizers defined return passed stroke classify 
classification simply best list beliefs ordered probability 
definition recognizers means new recognizers plugged system simply implementing defined interface 
interpreters class diagram fig 
illustrates relationship classes interpretation shows interpreters built satin 
processing strokes interpreters stroke event filters meaning specify kinds strokes accept 
simplest filter accepts rejects strokes depending pen button held creating stroke 
kind filter rejects strokes long 
addition filtering individual interpreters disabled meaning process strokes 
interpreters right side fig 
discussed see discussed denim section 
interesting part left portion fig 
shows multi interpreters 
multi interpreters collections interpreters combined policy controls interpreters 
default multi interpreter default multi interpreter simply calls interpreters contains stopping interpreters says successfully handled stroke 
multiplexed multi interpreter lets developer specify interpreter active changed runtime 
semantic zoom multi interpreter enables disables interpreters depending current zoom level 
runtime handling strokes strokes dispatched graphical objects top manner strokes sent parent parent children 
stroke child child contains stroke entirely certain tolerance 
default graphical objects handle strokes step process follows process stroke gesture interpreters re dispatch stroke appropriate children process stroke ink interpreters handle stroke graphical object class diagram interpreters recognizers 
arrows point parent classes 
rounded rectangles interfaces dashed square rectangles classes solid square rectangles concrete classes 
point process interpreter graphical object mark stroke handled immediately stops dispatching process 
give examples strokes handled denim sections 
chose step approach default order separate handling gestures handling ink 
processing gestures lets gestures global sheet patch 
default approach overridden user code 
applications built satin section describe applications built satin toolkit high level architectures strokes processed interpreted 
application denim denim web site design tool aimed early stages information navigation interaction design see figs 

informal pen system allows designers quickly sketch web pages create links interact run mode 
zooming integrate different ways viewing web site site map storyboard individual page 
gesture ink interpreters denim user perspective denim minimal amount recognition 
gestures differentiated ink right pen button ink created left button 
behavior selected denim modified satin 
comprised objects sheet labels panels ink strokes phrases arrows 
sheet root 
labels titles web pages example lodging labels sticky meaning displayed size ensure read size created 
panels located beneath labels represent content web page 
ink strokes drawn panel 
phrases collections nearby strokes automatically aggregated 
arrows connect ink phrases page page 
currently denim uses single stroke interpreters 
strokes passed sheet gesture interpreters rejected gesture interpreters passed ink interpreters gesture interpreters denim provided satin include order called hold select processes tap hold select zoomed selects top level objects panels deeply zoomed deeper level objects individual ink phrases circle select processes circle gesture select contained gesture deeply depending zoom level move selected objects moved distance pen moved standard gesture uses rubine recognizer recognize simple gestures cut copy paste undo redo pan 
gestures zoomed deeply zoomed 
right left button distinction 
gesture interpreters denim accept right button ink interpreters accept left button 
screenshot denim application built top satin 
picture shows ink pie menu provided satin 
swing slider left zoom modified larger elevator ability value changed taps slider 
stroke gesture check stroke re dispatched sheet children case labels panels 
stroke label panel bounds contain stroke 
stroke re dispatched label added label 
stroke re dispatched panel processed phrase interpreter tries group nearby ink strokes single phrase object 
just added panel ink 
stroke re dispatched stroke processed sheet ink interpreters 
ink interpreters part denim code base include order called arrow processes lines drawn page replacing line arrow label processes ink handwritten text creating new label web page panel processes ink resembles large rectangles creating new label web page stroke handled sheet ink interpreters just added ink sheet 
pie menu attached sheet activated clicking right button moving far 
assigned behavior interfere gestures 
second application simple circuit cad tool intended demonstration features satin figs 

users sketch gates wires connecting gates 
proof concept gates drawn separate strokes just feature uses specific domain knowledge spice circuit cad tool developed uc berkeley 
screenshot 
gives feedback rendering formal representation object top 
object displayed original sketchy format cleaned format bottom 
part satin 
object recognized take actions depending current mode 
immediate mode recognized sketches replaced immediately cleaned version 
deferred mode recognized objects left sketchy feedback provided users know object recognized 
feedback consists drawing recognized object sketched object 
individual gates selected cleaned displayed formal looking gates returned roughly drawn origins 
addition entire diagram cleaned 
new interpreter gate interpreter 
new stroke added gate interpreter looks stroke stroke added 
strokes classified rubine recognizer 
separate classifications combined high probability gate gate gate object added 
evaluation satin satin development years currently second iteration 
source lines code comment lines code distributed methods source code files 
satin uses debugging collection string manipulation libraries developed research group consisting source lines code 
contrast denim fairly mature large app source lines code methods 
interpreters denim arrow label panel phrase lines code 
took people months implement denim described 
small proof concept application took days implement 
lines code methods 
half code devoted pie menu lines gate interpreter 
satin denim source files size source files kbytes methods comments lines code source lines code class files table code size satin applications performance performance regression tests development satin 
regression test suite repeated battery operations comprised adding randomly generated graphical objects seed value zooming rotating 
regression tests run computer pentium ii mhz running windows nt millennium ii agp video card 
performance speedup regression test run written 
approximately speedup due code optimizations satin rest due performance enhancements java virtual machine 
significant gains came polygon simplification reduction temporary objects generated 
currently implementing extensive existing java swing applications usable pens 
eliminating need making widgets larger looking integrating handwriting recognition interpreters existing swing widgets 
furthermore working making interpreters sophisticated 
example looking mechanisms adding notions time easy developers specify operations pen held period time 
examining techniques easier developers manage ambiguity 
ranges implementing reusable generic probabilistic data structures algorithms interaction techniques mediators suggested mankoff 
summary introduced satin java toolkit developing informal pen user interfaces 
informal interfaces mean user interfaces step away rigidity traditional user interfaces supporting flexibility ambiguity inherent natural modes communication 
reusable toolkit satin provides features common informal pen prototypes including support zooming multiple views stroke manipulation 
described generalized software architecture informal pen applications handle sketching gesturing extensible manner 
architecture consists separating recognizers components classify strokes interpreters components process manipulate strokes 
furthermore multi interpreters allow developers specify policies interpreters 
combined features satin toolkit simplify application implementation 
respect input output pens stage similar windowing toolkits early 
bits pieces cohesive frameworks support creation effective informal pen applications 
hope satin significant step creating framework 
satin publicly released berkeley edu projects satin ben mark newman james lin lee benson carol hu juan valencia feedback improving system 
lastly ben bederson giving ideas directions explore early development satin 

abowd investigating capture integration access problem ubiquitous computing educational setting 
proceedings chi 
los angeles ca 
pp 
april 

apple newton toolkit user guide 


bederson hollan 
pad zooming graphical interface exploring alternative interface physics 
proceedings acm symposium user interface software technology uist 
marina del rey ca 
pp 
november 

bederson jazz extensible zooming graphics toolkit java 
tech report hcil cs tr umiacs tr university maryland computer science dept college park md 

callahan empirical comparison pie vs linear menus 
proceedings human factors computing systems 
pp 


carr shafer power addison wesley 

chang ungar 
animation cartoons user interface 
proceedings uist 
atlanta ga acm press 
pp 


palm computing developing palm os applications 

damm hansen thomsen 
tool support cooperative object oriented design gesture modeling electronic whiteboard 
chi letters human factors computing systems chi 


davis landay making sharing pervasive ubiquitous computing shared note 
ibm systems journal 


davis lightweight note sharing group group 
proceedings chi 
pittsburgh pa pp 
may 

zeleznik 
music notepad 
proceedings uist 
san francisco acm press 

gamma design patterns elements reusable object oriented software 
reading ma addison wesley 

gross 
ambiguous intentions interface creative design 
proceedings acm symposium user interface software technology 
seattle wa 
pp 
november 

hearst gross landay 
sketching intelligent systems 
ieee intelligent systems 


henry hudson newell 
integrating gesture snapping user interface toolkit 
proceedings uist acm press 

hudson smith 
ultra lightweight constraints 
proceedings uist acm press 

igarashi architecture pen interaction electronic whiteboards 
appear proceedings advanced visual interfaces 
palermo italy may 

igarashi matsuoka tanaka 
pegasus drawing system rapid geometric design 
proceedings chi 
los angeles acm press 


igarashi matsuoka tanaka 
teddy sketching interface freeform design 
proceedings acm siggraph 
los angeles acm press 
pp 


kramer dynamic interpretations translucent patches 
proceedings advanced visual interfaces 
italy 

kramer translucent patches windows 
proceedings acm symposium user interface software technology 
marina del rey ca 
november 

landay myers 
extending existing user interface toolkit support gesture recognition 
proceedings interchi 
amsterdam netherlands 
pp 
april 

landay myers 
interactive sketching early stages user interface design 
proceedings chi 
denver pp 
may 

principles traditional animation applied computer animation 
proceedings acm siggraph acm press 
pp 


lin newman hong landay 
denim finding tighter fit tools practice web site design 
chi letters human factors computing systems chi 


long landay rowe 
implications gesture design tool 
proceedings chi 
pittsburgh pa pp 
may 

mankoff hudson abowd 
providing integrated toolkit level support ambiguity recognition interfaces 
chi letters human factors computing systems chi 


microsoft microsoft windows pen computing programmer version microsoft press 

microsoft msdn library windows ce documentation 
msdn microsoft com library default asp 
sun microsystems 
java foundation classes 
java sun com products jfc 
moran chiu van 
pen interaction techniques organizing material electronic whiteboard 
proceedings uist 
banff alberta canada 
pp 
october 

moran chiu van kurtenbach 
implicit structures pen systems freeform interaction paradigm 
proceedings chi 
denver may 

myers garnet comprehensive support graphical highly interactive user interfaces 
ieee computer 


myers 
reusable hierarchical command objects 
proceedings chi 
vancouver bc canada acm press 

myers amulet environment new models effective user interface software development 
ieee transactions software engineering 


mynatt igarashi edwards lamarca 
new dimensions office whiteboards 
proceedings chi 
pittsburgh pa acm press 

rubine automatic recognition gestures unpublished ph carnegie mellon pittsburgh pa 

rubine specifying gestures example 
computer graphics 


saund moran 
perceptually supported sketch editor 
proceedings acm symposium user interface software technology uist 
marina del rey ca 
pp 
november 

schilit price 
supporting active reading free form digital ink annotations 
proceedings chi 
los angeles ca 
april 

truong abowd brotherton 
personalizing capture public experiences 
proceedings uist 
asheville nc 

van de kant patchwork software tool early design 
extended abstracts chi 
los angeles ca 
pp 
april 

weber poon 
tool real time video logging 
proceedings chi 
boston ma 
pp 
april 

whittaker hyland wiley 
handwritten notes provide access recorded conversations 
proceedings chi 
boston ma 
april 

wilcox schilit sawhney 
dynamically organized ink audio notebook 
proceedings chi 
atlanta ga pp 
march 

zeleznik herndon hughes sketch interface sketching scenes 
computer graphics proceedings siggraph 
