cordic architectures parallel compensation scale factor zapata june technical report uma dac published ieee int conf 
application specific array processor asap strasbourg france july pp 
university malaga department computer architecture po box malaga spain cordic architectures parallel compensation scale factor zapata dept de university malaga spain dept 
facultad de univ santiago de spain compensation scale factor imposes significant computation overhead cordic algorithm 
propose algorithms architectures order perform compensation scale factor parallel computation cordic iterations 
way necessary carry final multiplication add scaling iterations order achieve compensation 
architectures propose dependence compensation scale factor disappears considerably reduces latency system 
architectures developed optimized solutions different operating modes cordic conventional redundant arithmetic 

cordic coordinate rotation digital computer algorithm introduced generalized walther 
iterative algorithm calculation rotation dimensional vector linear circular hyperbolic coordinate systems 
rotation carried means sequence iterations rotation prefixed elementary angle evaluated means addition shift operations 
rotated vector scaled constant factor compensated 
current applications fields computational algebra image processing 
architectures cordic proposed matrix inversion filtering eigenvalue calculations svd algorithms orthogonal transforms means cordic algorithm vector coordinates rotated angle rotation mode taken coordinate axis mode 
algorithm decomposition rotation angle known elementary angles 
basic iteration supported ministry education science cicyt spain project tic tg tg 
rotation mode coordinate initialized value rotation angle sign mode coordinate initialized sign 
introduces scaling coordinates value iterations final scale factor constant 
convergence precision cordic algorithm widely verified literature 
necessary compensate scale factor obtained 
order multiply times leading significant overhead minimization attempted different researchers 
consider repetition iterations compensation carried adding scaling iterations coordinate 
widely method 
section parallel compensation algorithm scale factor applied cordic systems rotation mode conventional redundant arithmetic 
section describe algorithm architecture valid conventional arithmetic operation modes 
section evaluate architectures section give summary algorithms architectures propose 

double rotation method 
scale factor compensation algorithm coordinates vector going apply rotation value coordinates obtained means equations microrotations cordic algorithm expressed follows define new angle cosq cosq call final coordinates obtained means equations cos apply rotation respectively initial vector perform semi sum obtain cos sin sin cos cos sin sin cos expressions expression account cosq observe second members equations represent values cosq compensated coordinates consequently hardware leads equations carries final semi sums performed complete rotation compensation scale factor 

architecture order carry equations just double hardware implements equations perform iterations parallel memory stores elementary rotation angles shared parallel architectures 
display resulting architecture 
registers associated hardware support microrotations corresponding rotation angle see equations registers associated hardware perform microrotations corresponding rotation angle 
constant cos stored position rom preliminary iteration register loaded register 
moment system operates normal cordic system coefficients depend sign respectively rotation mode control addition subtraction operations different data paths 
mux mux select left input microrotations equation carried 
necessary add iteration order carry expressions 
mux select right input 

bit analysis method algorithm shown previous section applicable rotation mode conventional redundant arithmetic 
objective section find algorithm architecture valid rotation modes lower hardware cost conventional arithmetic 

algorithm compensation scale factor assume bit precision initial values fractional 
account scaling introduced iteration find bounds values consequently representation necessary add bits integer part 
going call bits weight corresponding write similar way write 
shows format just described 
process compensating scale factor consists multiplication coordinates obtained iteration times inverse scale factor call compensated coordinates xcomp expression write complement representation negative numbers 
xcomp way obtain 
order obtain xcomp require addition shift operations see equation algorithm try perform operations parallel computation iterations cordic 
necessary know value 
follows going prove iteration possible obtain information bit analysis bits starting significant bit 
loss generality going consider equation identical process equation order facilitate proof going consider change variable way iteration expressed take expression account establish bound observe equation value bound conclude bits weight higher equal coincide identical weight carry propagation 
words similarly ji carry produced addition bits lower weights 
ji general expressions cordic equations carry study bits lead finding significant bits function significant bits 
introduce theorems base algorithm theorem sign sign 
ji theorem 
ji theorem 
ji theorem 
ji theorem 
ji theorem sign sign contribution significant bits weight null 
ji proof theorems expressions 
theorems conclude contribution significant bits weight function significant bits weight coordinate obtained previous iteration 
consequently recurrence obtaining significant bits cumulative sum previous iteration value bit weight current iteration 
bit analysis immediately higher weight bit carry addition shift algorithm order perform multiplication times return expressions write xcomp follows notice term equal sign obtained significant xcomp bits verifies conditions theorems 
example conditions theorem write expression observe current contribution depends previous accumulated sum bit weight current value 
general contribution iteration depends accumulated sum sign bits weight bit weight 
algorithm multiplication members theorems constant allows carry parallel compensation scale factor initialization xcomp rotation mode vectorization mode rotation mode sign mode sign tg sign sign sign sign xcomp xcomp xcomp xcomp sign xcomp xcomp xcomp xcomp sign sign sign symbols lines mean theorems lines 
negative add iteration order subtract amount complement total number iterations increase final values negative 
table show example application algorithm 
considered guard bits 
start initial values rd consequence iteration obtained values row table xcomp file table 
underlined bits table show respectively perform xcomp right hand bit iteration comparison bit 
notice iteration operate parallel order obtain compensation scale factor fact iterations necessary coordinates adding values smaller precision working 
really leave iteration necessary bit msb range 
introduce additional iterations reduce rounding error 
table rotation mode rad xcomp xcomp 
architecture 
architecture add architecture conventional cordic order carry compensation scale factor parallel microrotations cordic 
going describe hardware corresponding coordinate 
hardware corresponding coordinate analogous 
mux charge selecting bits sign bit loaded latch stores iteration 
values current previous sign bits introduced control logic charge controlling addition subtraction operation mux permits adding subtracting see algorithm previous section 
hand value initially loaded shift register carries division iteration iteration value evaluation algorithm architecture developed section applied rotation mode conventional arithmetic constant scale factor algorithm architecture section applied operation modes cordic rotation conventional arithmetic 
architecture section cordic iterations final sum carried redundant arithmetic stage conversion conventional arithmetic added 
architecture section implies doubling part hardware corresponding processing section conventional cordic sharing rom 
similar solution adopted order maintain constant scale factor cordic redundant arithmetic 
architecture section uses smaller amount hardware section basically coordinate hardware need doubling consequently better alternative working conventional arithmetic 
number cycles conventional cordic processor 
expressions due compensation scale factor implies overhead increases linearly number precision bits design overhead iterations section previous iteration order obtain performing final semi sums see equations iteration algorithm section case independent despain merge scale factor compensation iteration equations order reduce latency time 
ahmed mayer employ idea despain adders 
solutions complicate control coefficients iteration considerably increase execution time hardware requirements basic 
comparing solutions design number cycles cycle time case 
design section mixed radix architectures radix starting iteration 
adaptation mixed radix design section requires analysis iteration bits just extend method developed 
solution reduces number cycles performing rotation design double rotation technique mixed radix lead minimum latency solution 
word serial applications important reduction final computation time rotation order scale factor compensated 
pipelined architecture important reduction latency order magnitude 


parallel architectures compensation scale factor practically eliminate overhead produced compensation 
overhead increase number iterations 
architecture section added cordic solutions designed constant scale factor rotation mode redundant conventional arithmetic 
architecture section solution lower hardware cost added cordic architectures constant scale factor operation modes cordic algorithm rotation conventional arithmetic 
summarizing parallel architectures execution time cordic rotation mode applicable radix mixed radix architectures constant scale factor conventional redundant arithmetic 

cordic trigonometric computing technique 
ire transactions electronic computers vol 
ec pp 

walther 
unified algorithm elementary 
proc 
spring joint computers conference pp 

muller 
cordic algorithm new results fast vlsi implementation 
ieee trans 
compt 
vol 
pp 

february 
hu bass 
expanding range convergence cordic algorithm 
ieee trans 
computers vol 
pp 

hu 
quantization effects cordic algorithm 
ieee trans 
signal processing vol 
pp 

noll 
cordic processor carry save architecture 
th european solid state conference pp 

despain fourier transform computers cordic iterations 
ieee trans 
comput 
pp 
oct 
ahmed signal processing algorithms architectures ph dissertation stanford university june 
meyer architecture performance new arithmetic unit computation elementary proc 
icassp pp 

cordic arithmetic processor chip ieee trans 
comput 
feb 
hahn new addition scheme fast scaling factor compensation methods cordic algorithms vlsi journal integration 
udo pipelined cordic architectures fast vlsi filtering array processing proc 
icassp pp 

takagi asada redundant cordic methods constant scale factor sine cosine computation ieee trans 
compt vol 
pp 
sept 
yu hen hu cordic vlsi architectures digital signal processing ieee signal processing magazine pp 
july 
dawid meyr vlsi implementation cordic algorithm redundant arithmetic proc 
ieee iscas san diego lee lang constant factor redundant cordic angle calculation rotation ieee trans 
compt vol august 
zapata cordic architectures parallel compensation scale factor 

de malaga university report 
uma dac january 
architecture double rotation method architecture bit analysis method format 
