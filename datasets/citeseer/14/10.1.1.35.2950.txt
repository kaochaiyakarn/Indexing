unifying schema instance levels object oriented databases university ljubljana faculty computer information science slovenia tari royal melbourne institute technology department computer science australia april consequences unifying representation schema instance levels object oriented oo database formal representation oo database model 
uniform representation schema instance levels oo databases achieved frame knowledge representation languages representing uniform set modelling constructs 
show approach structural part oo database model described clear manner providing simple means description main constructs structural model relationships 
study consequences releasing boundary schema instance levels oo database allowing definition objects include data levels 
show changes needed order augment previously formal definition structural part oo database represent extended database model 
keywords database semantics object oriented databases database modelling 
spite considerable research effort directed problems formalisation object oriented oo database models decade lack strong theoretical background oo databases :10.1.1.48.7149:10.1.1.116.1298
main reason lies rich set sophisticated data modelling constructs provided oo database models 
focus aspect oo database models structural model 
consider main obstacle prevents clear formalisation structural part oo data model unnecessarily strict distinction schema instance levels database 
formalisation unifies treating classes objects similar way frames represent concepts 
show uniform treatment extensional intensional parts oo database allows clear simple definition formal representation oo database model 
part formalisation oo structural database model conforms main features oo database models suggested 
similar modelling constructs representation extensional intensional parts oo database 
retain strict separation conceptual schema instance parts database 
second part investigate consequences boundary parts database 
basically merging intensional extensional levels oo database achieved allowing objects include individual objects classes components 
features extended oo database model studied considering constructs needed extend previously defined formalisation ordinary oo data model able express aspects extended model 
apart serving guideline formal presentation oo database model uniform treatment extensional intensional parts database creates basis allows simple means manipulation intensional part database 
intensional database manipulated constructs manipulation extensional part database 
study algebraic operations provide means querying intensional extensional parts oo database 
uniform treatment oo database particular importance distributed database environments include rich conceptual schemata require expressive language representation meaning stored data form reflection 
initial studies constructs model proposed distributed environments 
rest organised follows 
start formal presentation describing identifiers structural properties section 
section define values relate previously identifiers describe properties 
section objects defined properties described 
cases properties objects derived properties values identifiers 
section remove distinction schema instance levels oo databases study consequences framework previously formalisation 
related section 
review formalisations description languages significant influence development proposed formalisation 
concluding remarks aspects implementation database model main directions section 
identifiers properties define basic terminology 
assume existence predefined infinite set identifiers identifier unique symbol represents concrete entity real world 
identifiers denoted terms written lower case letters 
example identifier tom serves unique identification person name tom identifier student stands unique identification representation student 
suggested examples set divided set individual identifiers od representing concrete entities persons set class identifiers oc representing concepts usually stand group individual entities 
cases refer individual class identifiers simply individuals classes 
interpretation significant difference class identifiers individual identifiers interpretations 
interpretation individual identifier individual interpretation class identifier set individuals 
interpretation class identifiers defined follows 
definition interpretation denoted properties 
ae od 
oc 
seen definition common engineering intuition stated treating individuals members interpretations single class identifiers 
design decision leads disjunctive sets individuals represent interpretations class identifiers 
individual identifier element interpretation exactly class identifier 
class interpretation specifies membership relationship individual class identifiers 
id od id identifier id member identifier id id id 
membership relationship exchanged instantiation relationship defined shortly 
partially ordered set identifiers binary relation class identifiers denoted id subclass id id id represent inheritance hierarchy classes 
assume relation definition conceptual schema objectoriented database 
subclass relationship define relationship definition id id id id holds ffl id id ffl id id id id id subclass id id id ffl id od id id id id id id id 
relationship called specific opposite general relationship 
example set identifiers ordered relationship defined terms student person employee person instructor person ta student ta instructor jim instructor jane student john ta 
easily seen relationship organises identifiers partially ordered set abbr 
poset 
reflective id id id antisymmetric id id oid id id id implies id id transitive id id id id implies id id id id id lemma set partially ordered relationship inherited interpretation ordinary class interpretation maps class identifier set individual identifiers called members class 
account previously defined partial ordering class individual identifiers interpretation introduced 
inherited interpretation class identifier includes members class members class subclasses 
definition inherited interpretation denoted defined ocp 
definition inherited interpretation define instantiation relationship commonly represent associations individual class concepts 
id od id oc identifier id instance id id id 
values properties far identifiers structural properties 
section extend concept identifier notion value 
distinguish basic types value identifiers structured values 
set tuple constructors build structured values 
basic terminology section 
assume existence infinite set values identifiers defined previous section elements set divided set individual identifiers od set class identifiers structured values divided set ground values vd set values represent types 
assume existence set attribute names values definition value ffl id ffl fo ffl example value age kids lives brisbane teacher representing properties person 
component set identifiers represent kids 
strings brisbane teacher role primitive identifiers denote address profession person 
types values include individual identifiers called ground values 
values composed solely class identifiers refer types analogously perception class identifiers types stand representation set values 
formally type defined follows 
definition value type holds usually term type represent static structure behaviour set values 
purpose presentation ignore object behaviour 
ffl oc ffl fsg ffl example type 
tuple name string age int works organisation lives address represent properties employee 
type attribute age primitive type int 
class identifier organisation role type 
interpretation close integration concepts class identifier type provides clear method definition type interpretation defined straightforward extension class interpretation 
type interpretation defined follows 
note definition denotes inherited interpretation class identifiers 
definition respect type structure interpretation denoted ffl ffl fsg fo ae ffl definition type interpretation specifies membership relationship values types 
vd value member 
members particular type elements type interpretation 
partially ordered set values relationship defined identifiers extended relate values 
denoted relationship call relationship specific relationship 
intuitively values specific ordering defined relationship refine general values higher set values regard relationship definition values 
value specific value denoted holds ffl ffl fsg ftg ffl ffl vd 
just relationship organises identifiers partially ordered set relationship forms partial ordering values 
easily seen reflective antisymmetric transitive 
lemma written 
lemma set partially ordered relationship previous definition value poset captures notion partial ordering types defined cardelli 
obtained restricting set values types similarly value poset includes membership relationship types ground values 
inherited type interpretation type interpretation defined previous sub section maps type set members structure strictly structure type 
remove constraint defining inherited interpretation type union interpretation type interpretations types specific type 
definition inherited interpretation denoted defined sv definition captures notion instantiation relationship ground values types 
formally instantiation relationship defined follows 
vd value instance type 
definition gives syntactical means checking relationship values 
theorem shows correspondence syntactical definition inherited interpretation function theorem relation relationship interpretation holds proof 
part proof show syntactical definition implies subsumption corresponding inherited interpretations 
definition presents inherited interpretation types uses relationship identify specific values 
specific definition set included set 
reverse direction proved similar manner 
suppose relationship holds 
definition states includes inherited interpretations specific types included set types specific 
objects properties proposed data model distinguishes aspects objects 
object identity called object identity oid realised identifier distinguishes objects database 
second object value describes state 
basic object aspects connected means value assignment function maps identifiers corresponding values 
object definition distinguish primitive defined objects 
identity primitive object value 
value defined object previously defined values 
definition object pair id id object forms ffl primitive object id id id od ffl defined object id id gamma od examples objects 
firstly example primitive object formal representation integer number 
identity value 
similarly object int int stands formal representation integer number 
section term int represents identifier 
examples defined objects 
example tuple structured object tom name om age courses history term tom identifier uniquely identifies object 
example presents individual object example give description entity represented class object 
object person name string age int lives address stands representation person 
examples distinction individual class objects 
distinction important presentation define types objects explicitly 
firstly individual object represents single concrete entity modelling environment 
value includes solely individual identifiers 
secondly class object represents entity stands representation concept point view representation set individual objects 
value class object includes solely class identifiers 
relations identifiers values objects sub section detail relationships basic elements formal presentation identifiers values objects 
value assignment function 
inheritance properties context formal view object oriented database discussed 
relations partially ordered sets defined previous sections partially ordered set objects 
value object object described set properties represented attributes 
assume attributes defined particular object time creation 
individual objects inherit attributes parent class objects 
attributes class objects defined conceptual schema database defined due partial ordering relationship object identifiers inheritance principle attributes correspond object consist attributes directly associated class inherited attributes 
purpose assignment functions defined 
object value assignment function returns properties object directly associated object second inherited value assignment function returns properties object example value assignment function applied class identifier student defined student degree int courses 
result application inherited value assignment function object identifier student name string age int degree int courses 
type includes properties pertain classes student person 
formally inherited value assignment function defined follows 
note function maps tuple set components 
definition id inherited value assignment defined id atr id consider schema modification facilities 
examples value assignment inherited value assignment function individual identifier 
value assignment function applied identifier peter element class identifier person returns instance tuple name eter age address ljubljana 
result application inherited assignment function identifier tuple name eter name string age age int address ljubljana address string 
tuple includes pairs components equal attribute names type attribute actual value attribute 
properties inheritance discussed sub section 
structural inheritance inherited value assignment function definition return type includes attributes name 
problem arises access value attribute 
types conflicts 
case inherited attributes name defined objects related relationship second case cause conflict multiple inheritance 
situation object inherits attributes name general objects related relationship type conflict resolved overriding principle attribute closest respect poset identifiers chosen 
definition attributes defined particular object 
value overridden attribute accessed explicitly stating object definition 
additional property overriding principle required proposed data model establish conditions partial ordering objects 
value attribute overrides attribute specific value attribute property specified definition 
definition id id id id 
implication hold id id id id note value assignment function obtain value identifier 
dot operator select value attribute property expressed definition necessary definition partial ordering relationship definition static type checking algorithm 
name conflict arises consequence multiple inheritance user state class attribute defined explicitly 
case conflict resolution left user 
structures objects partially ordered set values seen posets 
relationship organizes identifiers partially ordered set 
second values correspond identifiers partially ordered relationship words relationship holds identifiers relationship holds corresponding values 
expressed lemma 
note id id individual class identifiers 
lemma id id id id id id 
proof 
inherited value assignment applied identifier id returns union attributes pertain object referenced id general objects 
id id definition requires attribute overridden specific attribute conclude id id 
consequence lemma define relationship objects integrates relationships analogously relationships denote relationship call relationship specific defined objects 
definition id id objects 
object specific id id object identifiers uniquely identify objects lemma partial ordering relationship object values determined relationship object identifiers complete set objects partially ordered relationship lemma set objects id id id partially ordered relationship similar way definition relationship partial ordering objects ordinary interpretation inherited interpretation class identifiers extended class objects 
denoted respectively 
give definition ordinary class interpretation 
inherited interpretation class objects defined manner inherited interpretation class identifiers see definition 
definition id id class object 
interpretation denoted id id id id consequence unique identification objects means object identifiers membership instantiation relationships class objects individual objects defined manner membership instantiation relationships class individual identifiers 
releasing boundary schema instance levels previous sections retained strict boundary schema instance levels database achieved making strict distinction values represent types individual values 
components solely class individuals components solely individual identifiers 
section study consequences allowing values include individual class identifiers 
structure properties identifiers affected change definition values 
study consequences mixing schema instance levels database revising properties values properties objects 
values start definition values definition 
definition restrict structure contents values way 
set tuple structured values include individual class identifiers leaf components 
example value name string age int works csd type describing structure values representing employees computer systems department represented identifier csd 
note string int class identifiers csd individual identifier 
differentiate values include class individual identifiers values include individual identifiers refer types individual values respectively 
interpretation types defined similar way previous definition type interpretation definition 
definition augmented adding new item stating interpretation individual identifier identifier 
ffl od pi partially ordered set values partial ordering relationship defined section redefined relate values composed individual class identifiers 
intuitively values defined section structured value specific value component replaced specific equal component 
formally specific relationship values referred defined follows 
definition value specific value denoted holds ffl ffl fs ft jk ffl denotes set components tuple examples pairs values relationship holds 
suppose database includes set class identifiers student phd student set individual identifiers members class student set identifiers representing employees 
student 
fs 
student 
name string age int lives address name string age int similarly values section set values include individual class identifiers partially ordered 
lemma set values partially ordered relationship proof 
easily seen definition definition reflexivity antisymmetry transitivity properties hold relationship consider transitivity 
sets element exists set specific elements turn exists set elements true element exists set specific elements holds 
case tuples proved similar manner 
inherited interpretation values defined manner definition 
previously defined partial ordering relationship define type interpretation useful definition variables database programming language query algebra 
type interpretation referred natural interpretation allows variables range individual values types providing basis queries manipulate instance schema level database 
defined follows 
definition type 
natural interpretation pi pi fo tg objects structure relationships objects largely determined properties values 
sub section revise properties objects section point differences due differences definition properties values 
definition objects definition readily withstand change definition values 
reconcile object unique identifier value include individual class identifiers 
ordinary objects differentiate individual objects values composed solely individual identifiers class objects values include class identifier 
consider relationships newly defined objects detail 
firstly value include individual class identifiers structural inheritance properties revised 
secondly reasons procedure derivation value class identifier definition lemma presents relationships identifiers values objects require changes 
inheritance similarly logic types attribute describe state class need defined order able express properties owned exclusively particular classes inherited subclasses instances :10.1.1.48.7149
firstly ordinary attributes inherited specific objects called inheritable attributes 
secondly attributes class represent properties inherited subclasses instances non inheritable attributes useful description class properties represent general information concept described class 
instance number members class phd student average grade class student represented non inheritable attributes 
properties objects ordinary classes section value object obtained definition inherited value assignment function definition 
values inheritable attributes defined objects general object properties class include attribute describes class inherited subclasses partial ordering relationship relationship augmented accordingly 
achieved treating values non inheritable attributes fixed non evolving attributes need specialised context specific value 
tuple specific tuple includes attributes values specific values inheritable attributes definition specifies partial ordering relationship needs redefined replacing item 
ffl inh denotes set components tuple predicate inh returns true attribute inheritable 
similar holds partially ordering relationship non inheritable properties treated properties local class objects need specialised frame specific objects 
consequence redefinition relationship theorem saying id id id id implies id id holds extended definition values objects 
similarly ordinary inherited interpretations objects sub section need changed order possible interpretations objects defined section 
addition natural interpretation values definition easily extended objects 
definition id id object 
natural interpretation denoted pi pi id id id id vg related section overview existing formalisations database models representation languages related influenced design proposed formal treatment object oriented database model 
formal treatment objects bears close resemblance frame languages 
formal view oo database model ideas introduced frame logic abbr 
logic 
logic declarative language integrates predicate calculus features oo database model 
treats classes instances uniformly objects 
consequently distinction class individual objects level 
comparison logic formalisation proposes view oo database model closer implementations oo database management systems 
define semantics oo database model close model proposed show consequences treating classes manner individual objects framework formalisation release barrier schema individual objects allowing values include individual class identifiers 
proposed formalisation uses ideas existing formal representations oo database model 
formalisation closely related formalisation database model proposed formal presentation database model iql 
presents clearly main features oo database model including inheritance methods types denotational style standard notions interpretations models 
similar way abiteboul kanellakis define structural part database model logic declarative language iql 
important contributions formalisation significant influence formal distinction types classes definitions inherited interpretation types study relations structural inheritance interpretations framework interpretation 
second related formalisation database model extra 
important features formalisation extra interpretation similarly inherited interpretation types takes account type hierarchy interpretation called types correspond classes terminology iql 
formalisation define data model related family languages popularly called description logic abbr 
dl 
description logics evolved kl frame language uses concepts roles describing modelled domain 
concepts usually divided simple concepts defined concepts constructed composition intersection concepts providing kind inheritance relationship generalisation type constructor 
roles seen generalisation single valued multi valued attributes database terminology 
addition roles attributed value restrictions constraints equality roles cardinality constraints associated database constraints 
dl designed serve formalism providing reasoning facilities testing subsumption descriptions common properties dl proposed data model 
similarities structural properties dl concepts objects formalisation share common operations instance subsumption test related testing validity relationship values computing common subsumer corresponds model operations lub set glb set 
concluding remarks studied structural aspects object oriented database model formalisation unifies instance schema levels oo database 
shown structural part oo databases seen partially ordered sets partially ordered sets identifiers values objects 
relationships elements sets defining semantics basic constructs oo database model classes types inheritance instantiation 
formal view structural part oo database model formalisation defines classes similar manner frames classes objects represent concepts 
treat instance schema levels oo database separate entities part 
second part removed constraint allowing objects include individual class identifiers 
studied consequences augmenting basic definitions previously introduced formalisation showed changes additional constructs need introduced order represent formal view extended oo database model 
database model implemented framework query algebra qal 
brief qal object algebra includes addition facilities object algebras see operations allow querying conceptual schemata relationships schema instance levels object oriented databases efficient manipulation complex composite objects 
qal implemented query language interface extended relational database system postgres 
particular attention directed design set operations called model operations inquiring properties class objects relationships classes individual objects 
detailed description model operations study queries inquire conceptual schema relationships conceptual schema instances 
brief model operations provide means computing interpretations class objects relating individual objects parent class objects specific relationships queries computing general specific values set values expressing different types equalities objects 
related formalisation oo database model follows 
firstly formalisation implementation query algebra qal extension database programming language 
particular formalisation serve basis design extended type system dbpl 
main aims prototype study means manipulation schema framework dbpl 
secondly formalisation oo database model basis definition implementation type checking algorithm queries expressed query algebra qal 
initial results stated issues 
abiteboul beeri power languages manipulation complex objects verso report inria france dec abiteboul hull ifo formal semantic database model acm trans 
database systems vol abiteboul kanellakis object identity query language primitive acm sigmod atkinson object oriented database system manifesto proc 
int conf deductive object oriented databases elsevier science publisher amsterdam pp 

brachman schmolze overview kl knowledge representation system cognitive science vol beeri formal approach object oriented databases data knowledge engineering bertino object oriented query languages notion issues ieee tkde vol june borgida description logics data management ieee tkde vol october borgida computing common subsumers description logics proc 
aaai conference cardelli semantic multiple inheritance information computation gnu manual design programming language exodus project documents university wisconsin madison edmond papazoglou tari overview reflection cooperation int 
journal intelligent cooperative information systems vol fikes kehler role frame representation reasoning comm 
acm vol sept kifer lausen logic higher order language reasoning objects inheritance scheme acm sigmod kifer lausen wu logical foundations object oriented frame languages technical report dept computer science suny stony brook richard velez object oriented data model acm sigmod papazoglou unraveling semantics conceptual schemas comm 
acm sept tari query algebra objects technical report jozef stefan institute ijs dp february tari querying conceptual schemata object oriented databases proc 
dexa workshop ieee comp 
soc 
press zurich september query language complex database objects ph thesis university ljubljana csd technical report jozef stefan institute june shaw zdonik query algebra object oriented databases proc 
data eng ieee stonebraker rowe implementation postgres ieee transactions knowledge data engineering march vol algebras object oriented query languages ph thesis technical report university wisconsin madison july tari cheng cooperative databases distributed object kernel approach proc 
parallel distributed computing systems conf france 

