eelru simple effective adaptive page replacement yannis smaragdakis scott kaplan paul wilson computer sciences university texas austin cs utexas edu despite replacement algorithms proposed years approximations lru replacement predominant actual virtual memory management systems simplicity efficiency 
lru exhibits known performance problems regular access patterns size larger main memory 
early eviction lru eelru adaptive replacement algorithm principle detecting lru algorithm fetched memory pages ones evicted lately 
simulations eelru proves quite effective memory sizes applications decreasing paging programs large scale patterns programs small scale patterns 
additionally algorithm robust rarely lru 
experiments traces research literature allow easy comparison previous results 
overview despite lower prices higher capacities ram virtual memory replacement algorithms remain relevant 
thing performance gap memory disks increased secondary storage speed slowest growing parameters modern computer systems 
ubiquity virtual memory changed way programs written 
programs assume plentiful managed virtual memory 
representative workloads changed significantly old style programs tex explicitly stages computation produces intermediate results files common new style programs javac requires mbytes memory large inputs part everyday 
matters worse modern systems come larger variety configurations personal computer os practice main memories ranging mbytes gbyte 
challenge operating system designers improve virtual memory policies obtain best attainable performance regardless system configuration 
getting performance different applications configurations hard 
currently operating systems replacement algorithms approximations lru replacement segmented fifo implementations 
cases performance lru algorithms suffers regular access patterns larger size main memory 
patterns quite common programs 
instance linear loop touching memory pages memory capacity incurs faults page page touched touched ones evicted memory 
way look phenomenon lru keeps pages memory long keep long 
evicting pages early allows pages soon remain memory 
intuition early eviction lru eelru 
eelru performs lru replacement default diverges lru paging behavior indicates lru consistently 
eelru novel combination ideas 
replacement decisions extensive recency information information indicating pages touched page touched 
eelru uses recency information pages memory detect large memory patterns 
particular eelru detects lru fetched pages just evicted 
second idea adaptive algorithm update state information timescale relative way 
program behavior studied timescales instance real time number instructions executed number memory performed 
timescale relativity advocates timescale study express events matter studied quantity 
instance typical hardware cache examine different events replacement policy 
loop kb data important may completely ignored 
timescale relativity comes play real programs exhibit strong phase behavior 
eelru tries adapt phase changes assigning weight events 
recency time general defined eelru number relevant events occur 
relevant events pages touched 
intuitively eelru ignores high frequency affect replacement decisions 
argue ideas represent sound principles program locality studies 
includes analysis replacement algorithms evaluation program locality 
examine previous replacements algorithms light section 
propose special kind plots called recency graphs appropriate studying program locality behavior section 
study applied eelru fourteen program traces examined performance 
traces memory intensive applications come experiments glass cao glca 
glass cao traces evaluate seq adaptive replacement algorithm attempts detect linear recency address terms faulting patterns 
set traces contains representatives trace categories identified glca traces large memory requirements clear memory access patterns small access patterns large access patterns 
extra traces collected representatives applications memory intensive may small scale patterns 
results evaluation quite encouraging eelru performed lru situations significantly better 
results fewer faults compared lru common wide range memory sizes applications large scale patterns 
comparison seq algorithm glca instructive seq detecting patterns address space eelru detects patterns recency distribution 
simulation quite conservative see section eelru managed obtain significant benefit traces seq 
hand seq nature aggressive algorithm performed better programs clear linear address terms access patterns 
cases eelru captured large part available benefit 
eelru simple soundly motivated effective replacement algorithm 
representative approach studying program behavior recency timescale relativity proves quite promising 
motivation related main purpose section compare contrast approach taken eelru replacement policies 
management memory hierarchies topic study decades 
volume subject limit attention relevant 
principles eelru recency timescale relativity offer distinct benefits replacement studies 
instance recency standpoint see spi ensures looping patterns different kinds treated 
note access patterns cause lru page excessively necessarily correspond linear patterns memory address space 
instance loop may accessing records connected linked list binary tree 
case accesses regular repeated addresses pages touched may follow linear pattern 
interesting regularities necessarily appear memory arrangements pages touched past 
seq replacement algorithm glca bases decisions address information detecting sequential address patterns 
consequently lacking generality detect loops linked lists connecting interspersed pages 
section compares eelru seq extensively 
timescale relativity helps eelru detect adapt phase changes 
past replacement algorithms ideas yielded results affected events wrong timescale 
instance eelru uses recency information predict patterns 
similar approach taken pha inter gap irg model 
approach attempts predict soon pages referenced looking time successive past 
simpler version idea known atlas loop detector bfh examines successive 
loop detector fails time measured number memory performed 
timescale relative treatment instance define time terms number pages touched touched 
note importance difference time approaches irg loop detector filter high frequency information 
loop repeats significant variation iteration loops may perform different numbers operations step different iterations instance case nested loop patterns time successive vary lot 
atlas loop detector fail recognize regularity 
complex higher order irg models studied detect significantly regularities presence variation 
complexity prohibitive actual implementations 
time pattern timescale relative terms may extremely regular 
view recency timescale relativity applied literature 
replacement policies deals specific formal models program behavior 
eelru inspired lru stack model spi discuss section 
independent events model events pages identified recency number pages touched touch page 
optimal replacement algorithm wood fernandez lang 
unfortunately programs modeled accurately independent recency events 
hand short program phases modeled closely 
online recency algorithm needs adaptive detect phase changes 
timescale relativity eelru crucial providing adaptivity reliably 
known models class markov models 
straightforward case th order markov model corresponds known independent model irm adu 
optimal replacement algorithm markov models kpr 
believe replacement algorithms markov models fail practice try solve far harder problem hand 
replacement algorithm program past data answer simple question memory page referenced furthest 
markov models express probability occurence specific sequences 
pages referenced real programs re referenced soon 
number order re relevant replacement decisions 
words model tries predict program behavior wrong detailed timescale 
markov modelbased replacement brittle actual model offer accuracy large timescale memory replacement decisions 
early eviction point main memory size eviction points potential mru page late region early region region lru memory general eelru scheme lru axis correspondence memory locations 
eelru algorithm general idea structure early eviction lru eelru algorithm quite simple 
perform lru replacement pages fetched just evicted 

pages fetched just evicted apply fallback algorithm evict page evict th page pre determined recency position 
turn idea concrete algorithm need define notions highlighted exact fallback algorithm 
changing aspects obtain family eelru algorithms different characteristics 
discuss single fallback algorithm particularly simple sound theoretical motivation 
algorithm described section 
experimented deterministic probabilistic fallback algorithms 
section describe main flavor eelru approach remains regardless actual fallback algorithm 
presents main elements eelru schematically showing recency axis called lru axis potential eviction points 
recency axis discrete axis point represents th accessed page written 
seen eelru distinguishes regions recency axis 
lru memory region consists blocks main memory 
note name may slightly misleading lru region holds blocks 
name comes fact part buffer handled regular lru queue 
position lru axis called early eviction point 
region early eviction point memory size called early region 
late region begins point extent determined fallback algorithm see section 
recall page fault time eelru evict page page point recency axis th page 
called early eviction purpose keep touched pages memory little longer hope soon referenced 
challenge eelru adapt changes program behavior decide reliably approaches best occasion 
eelru maintains queue touched pages ordered recency way plain lru 
difference eelru queue contains records pages main memory evicted 
eelru keeps total number page recency region counters 
algorithm counts number early late regions see 
information enables cost benefit analysis expected number faults fallback algorithm incur avoid 
algorithm assumption program recency behavior remain near evictions pages memory pages memory example recency distribution evicting early yields benefits 
compares page faults incur performed lru replacement incur evicted pages early 
section demonstrates detail analysis performed sketch general idea means example 
consider shows recency distribution phase program behavior 
shows position recency axis hits pages position occured lately 
distribution changes time remains fairly constant separate phases program behavior 
eelru adaptivity mechanism meant detect exactly phase changes 
distribution monotonically decreasing lru best choice replacement 
large loops cause distribution hits late region early region 
encourages eelru sacrifice pages order allow stay memory longer 
eelru starts evicting pages early eventually hits late region pages stayed memory 
eelru algorithm attempt exploit recency information eviction decisions see 
key point adaptively succeeds detecting changes program phase behavior 
description general idea eelru word 
implication cost benefit analysis performed eelru assigns weight faulting information weight decreases gradually older statistics 
crucial element timescale relevant memory 
eelru notion refers real time virtual time memory performed 
time eelru defined number relevant events memory size 
events considered relevant ones affecting page faulting behavior application size 
events page hits misses early late region 
high frequency events hits referenced pages totally ignored eelru analysis 
reason allowing high frequency affect notion time information extent reliable analysis performed 
number memory may contain different numbers relevant events different phases program execution 
basic eelru idea straightforwardly generalized allowing instance scheme replacement policy 
viewed having eelru eviction policies online choosing best phase program behavior 
instance multiple early eviction points may exist events relevant point affect cost benefit analysis 
point yields highest expected benefit determine page replaced 
section discusses detail 
point simplicity general eelru scheme allows quite efficient implementations 
provided kernel version eelru potential eviction point potential eviction point early eviction point main memory size lru memory region late eviction point mru page eelru wfl fallback lru axis correspondence memory locations 
speculate quite feasible 
particular eelru approximated techniques identical standard kernel lru approximations segmented fifo 
pages matter eelru statistics incur overhead 
compared lru extra requirement eelru maintaining recency information pages evicted 
information changes page fault time cost updating negligible 
concrete algorithm step producing concrete instance eelru choosing reasonable fallback algorithm 
turn guide cost benefit analysis exact distribution information needs maintained 
obvious candidate algorithm evicts th page 
equivalent applying mru replacement early region clearly captures intention maintaining pages memory 
real programs exhibit strong phase behavior see findings den causes mru unstable pages may touched kept indefinitely 
algorithm wood fernandez lang henceforth called wfl simple modification mru eliminates problem 
wfl replacement algorithm specifies parameters representing early late eviction point lru axis 
evictions performed early point doing means page late eviction point memory 
algorithm written simply memory fault accessed page evict page evict page early late eviction point 
shows elements wfl algorithm schematically 
shown see exist values wfl algorithm optimal lru stack model program behavior spi independent events model events positions lru axis 
program phase behavior defined long lasting phases cause algorithm 
surprising wfl adaptive algorithm 
presumes optimal early late points chosen known advance recency distribution 
adaptivity provided eelru crucial way turn wfl online replacement algorithm 
particularly true multiple pairs early late eviction points exist eelru chooses yielding benefit see subsequent discussion 
wfl algorithm called generalized lru 
avoid confusion acronym subsequently overloaded mean global lru 
lru memory region mru page early eviction main memory size late eviction point point probability memory page recency 
entire programs modeled accurately lru stack model shorter phases program behavior closely approximated 
assumptions model wfl algorithm additional advantage simplifying cost benefit analysis significantly 
properties wfl algorithm reaches steady state probability th accessed page page memory gamma gamma probability distribution shown 
cost benefit analysis eelru wfl fallback greatly simplified estimate number faults wfl incur steady state compare number lru 
call total number hits pages recency order 
similarly call early number hits pages eviction algorithm total delta gamma gamma early memory fault accessed page evict accessed page evict page consider obvious generalization algorithm instances wfl different values active parallel 
total early denote total early values th instance algorithm 
instance wfl decide page evicted maximizes expected benefit value total delta gamma gamma gamma early values negative plain lru eviction performed 
note case multiple early late eviction points eelru adaptivity performs dual role 
hand produces online estimates values algorithm performs optimally plain lru case values 
hand adaptivity allows detecting phase transitions changing values accordingly 
case multiple early late eviction points modification basic wfl algorithm sense 
late eviction points equal possible th instance wfl called evict page page memory case algorithm evict pages guarantee steady state pages referenced memory 
note modification basic wfl algorithm affect steady state behavior consequently proof optimality lru stack model 
change account final eviction algorithm benefit maximum values total delta gamma gamma gamma early index value occurs benefit page memory memory fault accessed page evict accessed page evict page form eelru experiments described 
experimental assessment settings methodology assess performance eelru fourteen program traces covering wide range memory access characteristics 
traces memory intensive applications experiments glass cao glca 
traces collected individually programs exhibit large memory patterns 
traces glca half traces study 
rest experiments reproduced reduced trace format glass cao omitted information necessary accurate eelru simulation 
see happens consider behavior eelru point early evictions performed making algorithm replace page point lru axis 
trace information determine th accessed page 
equivalent saying trace sufficiently accurate lru simulation memory size reduced traces glass cao limitations memory sizes lru simulation performed 
minimum simulatable memory size eelru larger minimum simulatable size lru may large meaningful experiments 
instance consider eelru simulation earliest early eviction point early region memory memory managed strict lru 
minimum memory eelru simulated times size minimum simulatable lru memory 
traces difference minimum simulatable memory size eelru fall outside memory ranges tested glca 
example gcc trace form allowed accurate lru simulations memories larger pages see glca 
early eviction assumptions minimum eelru simulatable memory size pages outside memory range experiment trace causes faults memories pages 
reproduce experiments possible picked early eviction points memory managed strict lru 
simulations quite conservative means eelru perform early non lru evictions 
mentioned earlier simulations traces meaningful choice points simulated memory ranges overlap significantly experiments glass cao 
table contains information traces 
worth noting set traces contains representatives traces glca es satisfy restrictions outlined available 
program description min 
simulatable lru memory kb pages applu solve coupled parabolic elliptic pdes gnuplot postscript graph generation ijpeg image conversion jpeg format ksim microprocessor cycle level simulator murphi protocol verifier perl interpreted scripting language tridiagonal matrix calculation wave plasma simulation information traces glca program categories identified glass cao 
programs clear patterns murphi ksim programs small scale patterns perl programs large scale patterns rest 
extra traces supply data points 
traces executions consume memory 
memory patterns best small scale 
applications traced espresso circuit simulator gcc compiler ghostscript postscript engine grobner formula rewrite program lindsay communications simulator hypercube computer pascal translator 
simulations performed twelve combinations pairs early late eviction points 
early points memory size early region memory handled pure lru 
late points chosen probability took values 
parameter affects simulation results significantly 
recall replacement decisions guided program behavior 
achieve distribution values need decayed 
decay performed memory scale relative way values statistics multiplied weight factor progressively th memory size third weight 
locality analysis show memory characteristics traces plotted recency graphs 
graphs scatter plots map page page position recency axis 
highfrequency pages touched ignored resulting graphs maintain right amount information relevant timescale clear picture program locality 
instance consider recency graph wave trace plotted 
graph produced ignoring accessed pages 
taken account patterns shown graph squeezed just small part resulting plot interesting program behavior terms locality usually unevenly distributed time 
wave graph observations 
wave exhibits strong large scale looping behavior 
loops accessing pages 
horizontal lines represent regular loops pages accessed order access touching number pages 
note steep upwards diagonals represent pages re accessed opposite order access 
patterns recency graphs convey lot information kind offer advantages usual space time graphs see plots pha glca program locality analysis 
name ffl information relevant 
depicting page gets accessed recency graphs show page accessed touched 
ffl high frequency information hits accessed pages time space time graphs 
common interesting behavior respect faulting occurs small region space time graph 
information affect recency graphs 
ffl time information may dominate space time graph allocations large structures 
information irrelevant paging analysis appear graph 
due lack space recency graphs shown 
presents recency graphs representative traces 
observations ffl gnuplot graph exhibits strong large loops restricted narrow recency region 
gnuplot trace accessed pages filtered plot pages mark recency axis 
ffl ksim graph initially displays large loop followed smoke feature area distinctive patterns 
smoke pattern characteristic sets pages accessed random uniform order 
pages set get touched pages recency axis touched move upward 
gradually accesses concentrate higher higher points recency axis gnuplot ksim perl gcc recency graphs representative traces 
size set limit 
feature part ksim graph represents random accesses large structure 
nature application speculate heavily hash table 
ffl perl graph exhibits smoke features steep diagonals recall represent pages re accessed opposite order 
recency graphs similar ones shown 
small scale traces espresso gcc grobner ghostscript lindsay behave gcc having distinctive patterns 
murphi displays random ksim 
rest traces regular patterns 
case clear linear patterns gnuplot 
cases ijpeg applu patterns look perl wave 
recency graphs identify areas eelru exhibit clear benefit 
graph displays high intensity dark areas right low intensity light areas eelru able evict pages early keep memory needed soon 
comparing graphs results simulations sections shows case memory sizes eelru particularly successful near intensity boundaries 
memory size kb pages applu lru opt eelru seq memory size kb pages gnuplot lru opt eelru seq memory size kb pages ijpeg lru opt eelru seq memory size kb pages ksim lru opt eelru seq fault plots memory intensive applications 
gnuplot seq curve overlaps opt curve 
memory size kb pages murphi lru opt eelru seq memory size kb pages perl lru opt eelru seq memory size kb pages lru opt eelru seq memory size kb pages wave lru opt eelru seq fault plots memory intensive applications 
murphi eelru curve overlaps lru curve 
experiment memory intensive applications figures show page faults incurred eelru lru opt optimal replacement algorithm seq memory intensive traces 
seq algorithm glass cao glca traces originally tested 
detailed analysis behavior lru relative opt traces glca 
restrict attention eelru 
seen eelru consistently performs better lru traces murphi eelru essentially performs lru replacement 
large part available benefit shown opt curve captured applications exhibit clear patterns 
comparison seq algorithm quite instructive 
idea seq detect access patterns observing linear faulting sequences linearity refers address space 
seq detecting address space patterns eelru detecting coarse grained recency space patterns 
approach offer distinct benefits 
eelru capable detecting regularities seq capture 
instance linked list traversal may access pages address order clearly exhibit strong looping behavior 
traversals straightforwardly captured recency information maintained eelru 
hand seq detect linear patterns quickly eelru get possible benefit cases 
reason recency information available page re accessed second iteration loop address information available right away 
observation consequences robustness algorithms eelru fairly conservative diverges lru case persistent patterns 
seq hand risky guesses traversals encountered presumes sequential scans pages larger main memory 
expect eelru cause harm randomly selected programs large scale looping patterns 
results experiments agree analysis 
eelru outperformed seq traces applu ijpeg perl seq better gnuplot wave ksim murphi difference small eelru slightly better case slightly worse 
note seq performed better programs clear linear access patterns 
result early loop detection performed seq 
cases eelru captured available benefit 
traces recency patterns exploited eelru consistently yielded improvements lru seq results indicate opportunities exist ijpeg perl 
note mentioned section simulation eelru traces conservative memory buffer handled plain lru 
accounts loss effectiveness especially traces clear access patterns 
confirm gnuplot trace information see earlier table enable meaningful simulations early eviction points corresponding memory size buffer strictly lru 
added extra early eviction point result shown 
seen performance eelru case better approaching seq opt 
believe recency approach eelru simpler intuitively appealing general applicability address approaches seq 
generality conjecture course proven extensive experiments widely accepted representative workloads preliminary results experiments confirm 
results seq obtained running simulator glass cao traces 
testing seq traces require significant re engineering simulator replacement logic tied trace reduction format glca 
memory size kb pages gnuplot lru opt eelru seq fault plot gnuplot early eviction point memory size 
second experiment small scale patterns second experiment applied eelru traces extensive memory requirements 
traces interesting se paging study help demonstrate approach stable handles wide range available memories 
additionally traces confirm eelru perfectly applicable programs written paging mind 
able adapt large scale small scale patterns useful algorithm employed replacement algorithm multi process environment 
short discussion potential eelru replacement algorithm time sharing systems section 
traces small distinctive patterns see gcc recency plot expect eelru behave similarly lru 
confirm robustness algorithm eelru perform worse lru regular patterns exist 
seen fault plots case plots lindsay ghostscript shown eelru performs identically lru 
note case eelru manages get small benefit compared lru faulting average 
particular eelru capable detecting exploiting small scale patterns 
examination gcc recency plot quite interesting 
see small regions high intensity dark areas directly low intensity light areas 
eelru exploiting exactly small scale patterns exhibits benefit memory size boundary dark light areas plot 
memory size kb pages espresso lru opt eelru memory size kb pages gcc lru opt eelru memory size kb pages grobner lru opt eelru memory size kb pages lru opt eelru fault plots small scale applications 
replacement algorithms valuable components operating system design affect system performance significantly 
eelru adaptive variant lru uses recency information pages memory replacement decisions 
believe eelru valuable replacement algorithm 
simple soundly motivated intuitively appealing general 
simulation results confirm belief 
main axes experimentation examine eelru replacement algorithm time sharing systems cost performance approximation eelru 
interestingly possibilities eelru replacement algorithm multiprocessing systems 
thing useful global algorithm managing pages regardless process belong 
recency information kind maintained eelru help memory partitioning 
process incurs lot faults evicted pages eelru allocate memory process expense process smaller memory space cause faults 
note simulated simple approximation multi process system tested eelru global replacement algorithm 
caution methods may easily misleading 
experimenting replacement algorithms multi processing possible realistic detailed framework simplicity approximations may alter outcome experiments 
instance simulating simple round robin switching processes introduces repetition patterns due regular switching exist 
eelru interesting representative approach program locality study principles recency timescale relativity 
believe important step validating approach 
performed extensive set simulations confirm potential eelru encourage 
adu aho denning ullman principles optimal page replacement jacm pp 
babaoglu ferrari level replacement decisions paging stores ieee transactions computers 
bfh fletcher paging studies atlas computer information processing ifip congress booklet 
courtois decomposable model program paging behavior acta informatica pp den denning working sets past ieee transactions software engineering se pp 
fernandez lang wood effect replacement algorithms paged buffer database system ibm journal research development pp 
franklin gupta computation pf probabilities program transition diagrams cacm pp 
glca glass cao adaptive page replacement memory behavior proc 
sigmetrics 
kpr karlin phillips raghavan markov paging proc 
ieee symposium foundations computer science focs pp 
pha modeling managing program memory hierarchy ph dissertation rutgers university 
spi distance string models program behavior computer pp 
turner levy segmented fifo page replacement proc 
sigmetrics 
wood fernandez lang minimization demand paging lru stack model program behavior information processing letters pp 

