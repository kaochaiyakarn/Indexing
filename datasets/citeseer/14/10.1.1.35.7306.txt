technical report epidemic quorums managing replicated data robert agrawal amr el abbadi department computer science university california santa barbara october epidemic model update initiated single site propagated sites lazy manner 
combined version vectors event logs propagation mechanism delivers updates causal order despite communication failures 
integrate quorums epidemic model processes transactions replicated data 
causal order helps establish global serialization order transactions 
approach enforces serializability aborting transactions may cause inconsistency 
absence conflict transaction commit soon known quorum sites 
presence conflict sites vote transaction commit soon quorum sites vote 
detailed simulation study distributed replicated database demonstrate performance improvements 
asynchronous replication deployed successfully maintaining control information distributed systems computer networks 
example name servers yellow pages server directories maintained redundantly multiple sites updates incorporated lazy research partially supported lanl number number nsf numbers cda ccr 
manner gossip messages epidemic propagation anti entropy 
epidemic communication model basis fault tolerant algorithm supports transaction processing replicated databases 
epidemic system sites perform update operations communicate lazy manner propagate effects operations 
sites communicate way maintains causal order updates face lost messages 
furthermore learn particular update site receive message directly site performed update 
communication pass intermediate sites 
epidemic model provides environment tolerant communication failures require sites available time traditional eager replication techniques 
view epidemic system set computers normally disconnected short periods time computer connects send epidemic message 
viewed manner epidemic model natural paradigm support users disconnected mobile environments 
environments suffer constant re partitioning may partition contains quorum sites 
epidemic model updates performed single site eventually reach sites system 
earlier protocols epidemic communica tion considered single operation applications replicated dictionaries 
bayou example system supports weakly consistent replicated servers 
accommodates variety update policies operates variety network topologies 
ladin demonstrate usefulness lazy propagation protocols maintain highly available services distributed system 
adya liskov successfully employ notion lazy propagation optimistic execution transactions client caches 
systems coda ficus developed weakly consistent systems 
systems support transactional semantics epidemic propagation level single operation semantics 
database protocols employ epidemic propagation maintaining replicated databases 
systems epidemic model communicating updates synchronizing updates 
commercial database systems lazy propagation example oracle uses tier replication scheme inconsistencies may arise variety reconciliation rules provided merge conflicting updates 
gray argue synchronous approaches managing replicated data scale :10.1.1.116.1182
state lazy approaches explored managing replicated data propose primary secondary lazy replication scheme 
lazy propagation protocols introduced database replication 
protocols guarantee copy serializability impose structure sites restricting transactions perform updates 
adapted epidemic approach transaction systems developing family algorithms managing replicated databases epidemic model 
algorithms updates occur site restriction designated primary site imposing structure sites 
sites lazily exchange log records recording operations transaction apply transactions asynchronously 
comparing log records sites determine transactions create serializability conflicts aborted preserving copy serializability 
sites rely causal message delivery determine transactions involved conflict may commit 
approach combine quorum approach epidemic framework achieve balanced treatment queries updates maintaining global serializability :10.1.1.12.6256
quorum approach tolerant site communication failures 
organized follows 
section epidemic model replication 
section overview epidemic read write protocol develop epidemic quorum algorithm 
section results performance evaluation detailed simulation 
section concludes 
epidemic model replication consider distributed system consisting sites labeled assume fail model site failures unreliable communications medium 
messages arrive order take unbounded amount time arrive may lost entirely 
messages arrive corrupted 
event model describe system execution set operations happened relation partial order operations happened relation transitive closure conditions ffl local ordering condition events occurring site totally ordered 
ffl global ordering condition send event corresponding receive event lamport uses happened relation define clock property time time refer clock lamport clock 
application specific operations executed locally communicated sites epidemic model communication information spread site site sites communicate share information 
communication model preserves potential causality operations captured happened relation 
minimally operations causally ordered effects applied order sites 
epidemic algorithms generally implemented vector clocks ensure property :10.1.1.47.7435
vector clocks extension lamport clocks ensure property iff time time note time time incomparable denoted time 
time events concurrent 
log approach site maintains log application specific operations 
sites exchange respective logs keep informed operations occurred system 
information exchange ensures eventually sites incorporate operations occurred system 
due unreliable nature communication medium record included message sender knows recipient message received record 
wuu bernstein combine logs vector clocks solve distributed dictionary problem efficiently 
site keeps dimensional time table corresponds knowledge vector clocks sites 
time table ensures time table property knows received records events time value local clock 
reduce communication desirable site know sites received record particular event 
wuu bernstein define predicate site time event site site occurred time local time site occurred 
true knows received record event site performs update operation places event record log recording operation 
sends message includes records false includes time table receives message applies updates received log records updates time table atomic step reflect new information received site receives log record knows log records causally preceding events received previous messages included message 
referred log property stated follows respect local copy log site correctness algorithm established log time table properties 
vector timestamps time tables limit scalability 
issues addressed frequently distributed systems community 
rabinovich propose scalable vector timestamps 
variant log time table algorithm called twophase gossip protocol reduces size dimensional time table delta epidemic transactional replication epidemic extended epidemic model support execution transactions fully replicated database 
enforce atomicity algorithm treats transaction single event single log record having event read write operation 
transaction runs local concurrency control mechanism single site referred initiating site 
read transaction performed reads committed locally 
update transaction completes operations initiating site requests pre commit 
transaction initiating site local clock incremented pre commit record containing rs ws values written pre commit timestamp ts initiating site vector clock written local log read locks held transaction released 
sites communicate log records detect global conflicts propagate values written transactions 
site contacts site initiate epidemic transfer determines log records received transaction records false sent message time table site receives log record initiates transaction apply results original transaction site 
original instance transaction running initiating site referred local transaction 
transaction instances run sites propagate local transaction updates referred remote transactions 
enforce copy serializability algorithm aborts concurrent transactions conflicting operations called conflicting transactions 
site detect transactions conflicting log records contain read sets write sets version vectors 
condition conflict conf ts 
ts rs ws ws ws ws rs conflicting transactions attempt site second arrive find abort 
transaction commit knows conflicting transactions system cause abort 
receives message transaction record sent aborted due encountering conflicting transaction log executed obtaining write locks incorporating updates local copy database 
local transactions pre committed hold conflicting locks aborted granted locks 
transaction committed remainder locks released aborted known sites knowledge transaction 
site ts aborted epidemic quorums read write epidemic algorithm just described inefficient aborts conflicting transactions 
copy serializability requires set conflicting transactions commits 
increase system throughput desirable commit transaction set conflicting transactions 
take advantage optimization sites agree transaction commit 
agreement problem solved efficient way quorums :10.1.1.12.6256
quorums sets sites intersection quorums non empty 
example majority quorum set contains majority sites :10.1.1.12.6256
propose voting quorums resolve commit decisions 
proposed similar way keleher protocol ensures serializability multi operation transactions keleher treats single operation requests 
epidemic quorum algorithm sume complete replication 
transactions serialized causal order algorithm guarantees pair conflicting transactions commits 
accomplished having site vote transaction 
site votes conflicting transactions 
site votes places vote record log indicating transaction site voting vote 
vote records piggy backed usual epidemic messages sites eventually receive vote record sites transaction 
site receives quorum votes transaction commits transaction 
site knows transaction receive quorum votes aborts transaction 
site know transaction receive quorum votes 
obviously transaction commits conflicting transactions abort may situation multiple conflicting transactions hold votes commit 
example majority quorum system transactions hold third votes 
important situation lead indefinite blocking 
cope introduce idea anti quorum set sites transaction acquire quorum 
formally anti quorum set sites intersects quorums 
quorum anti quorum necessarily quorum require anti quorums intersect 
definition site abort transaction soon receives votes anti quorum sites 
point guaranteed site commit conditions commit quorum votes abort conflicting transaction commits abort anti quorum votes able commit abort time receives votes sites 
set votes constitutes quorum committed 
definition set votes constitutes anti quorum aborted 
received received information commit abort said uncertain poses problem uncertain conflicting transactions 
preserve causality arrives acquires write locks applies writes received transaction processed 
conflicting transaction may written common data item uncertain aborted 
hold write locks situation incorrect 
important point transactions initiate new operations transaction access value committed transactions commit 
commits conflicting transactions abort write correct value releasing lock 
lock requested lock held iw iw lock conflict table intention write locks 
solve problem adapt idea multi granularity locking called intention write locks 
conflict table intention write locks 
intention write locks conflict intention write locks conflict read write locks 
log record transaction arrives site initiates remote transaction 
remote transaction acquires intention write locks data items written original transaction 
local transaction pre commits longer needs access local data items involved kind conflict 
local transaction releases read locks converts write locks intention write locks behaves remote transac tion 
prevents local transactions pre committed accessing data item allows conflicting uncertain transactions pre commit simultaneously reserve access data item 
transactions hold intention write locks data item aborts data item inaccessible fate second transaction determined 
transaction commits converts intention write locks write locks applies updates data items releases locks 
commit situation algorithm intention write locks create special situations 
referred lock conflict table demonstrated 
transaction writes data item site pre commits 
log record transmitted site remote transaction representing acquires intention write lock pre commits 
known sites majority quorum converts intention write lock write lock writes commits 
writes site pre commits 
records transmitted site acquire intention write locks pre commit 
attempt commit convert intention write locks write locks write values prevented transaction intention write lock 
solution force transactions commit causal order received message 
requirement needs enforced anyway serialization order causal order enforced order transactions message preserves order transactions log 
trivial messages generated log 
case remote transaction tries convert intention write lock data item write lock remote transaction holds conflicting intention write lock uncertain remote transaction initiating site committed aborted local transaction acquired write lock remote transaction committed aborted site holding intention write lock 
concurrent conflicting wrote data item 
committing abort 
leaves case case want write allow acquire write lock commit regardless conflicting intention write locks 
pre commit situation second situation referred lock conflict table demonstrated 
transaction writes 
concurrently transaction writes message containing log record arrives pre commits 
needs acquire intention write lock holds conflicting write lock 
wait lock pre commit convert write lock intention write lock concurrent conflicting 
case sense abort right away give intention write lock transactions conflicting aborted anyway point invested far hasn transmitted site 
situation applies read locks held local transactions 
due rules remote transactions wait lock 
desirable effect eliminating distributed deadlocks 
local transactions wait locks held remote transactions remote transactions wait locks deadlock cycle involving remote transactions 
local remote transactions wait sites vote associated remote transactions time waiting transaction pre committed waiting locks 
deadlock cycles involve local transactions waiting locks local transactions site 
deadlocks detected communication 
implementing epidemic quorum algorithm illustrates data structure represent transaction records 
elements record transaction read set rs write set ws values written values transaction initiating site site version vector initiating site time local transaction pre commits time 
time vector timestamp distinguish concurrent transactions causally related ones scalar value initiating site clock uniquely identify transaction predicate vote records 
value stored transaction time transaction site 
type record rs setof ws setof values setof datatype site time array transaction record illustrates data structure represent vote records 
vote record uniquely identifies transaction voted initiating site site scalar timestamp 
contains voting site site voting site local time vote record created time indicates vote es 
es true vote vote 
false vote 
concurrency vote records unimportant time field vote record scalar value predicate log management determine site needs send vote record site 
vote records communicated epidemic messages transaction records sites single time table purpose preserving causality vote records necessary 
type ote record site site time es lag vote record algorithm processing transaction initiating site 
site keeps scalar local clock clock dimensional timetable log transaction records log vote records 
algorithm separate logs transaction vote records ease explanation necessarily need kept separate data structures 
transaction starts execution initiating site acquiring locks performing computation writing values database 
transaction pre commits puts record transaction log describing transaction record vote log indicating initiating site voted transaction 
site local time updated record transaction acquires mutex prevent con access clock time table logs 
transaction releases read locks converts write locks intention write locks 
point transaction processed identically sites remote transaction purpose detecting conflict committing transaction 
necessary case conflicting transaction arrives transactions required simultaneously hold intention write locks 
persistent data clock initially array initially setof initially setof ote initially transaction rs ws rs values read rs ws values mutex clock hrs values ftg clock fht site time site re commit mutex rs ws epidemic algorithm executing transactions algorithm sending log records processing received log records figures 
send procedure acquires mutex prevent local transaction accessing time table logs sends transaction vote records predicate false 
transactions local log placed causal order send procedure preserves order receiving site process message records order guaranteed processing transactions causal order 
vote records sent order 
vote records processed transactions epidemic message ordering vote records irrelevant 
send mutex sp send hsp mutex epidemic propagation transaction records receive procedure steps 
processes transaction records time processes vote records checks transaction commit abort 
receive procedure starts set transaction records looks record received 
finds record acquires mutex prevent interference local transactions 
reason complicated just preventing simultaneous access log time table 
consider situation receive procedure processing transaction checks log finds conflicting transactions decides vote conflicting local transaction acquires locks pre commits 
pre commits transactions log causally preceding conflicting transaction site votes log conflicting receive procedure check log vote prevent happening receive procedure prevents local transactions pre committing time checks log time inserts log record updates time table 
mutex checks log receive hsp foreach sp mutex conf true jv es true clock fht site time site clock fht site time site endif ws site time site ftg re commit mutex endfor mutex max foreach ws abort elseif ws values ws commit endif endfor jj jj mutex epidemic propagation transaction records nodes conflicting transactions 
site vote transaction recorded vote record site voted conflicting transaction site votes site votes site acquires intention write locks data items write set 
special cases intention write lock conflict table operation succeed waiting 
transaction updates timetable log pre commits 
receive procedure releases mutex handles transaction 
non conflicting local transactions waiting mutex pre commit 
terms causality means messages received 
messages received transaction time local transactions execute transactions message 
preserves correctness transactions message received causal order log time table updated incrementally transaction 
transactions incoming epidemic message processed receive procedure updates rows time table update knowledge sites version vectors 
updating information processing transactions correct merely lower bound sites version vectors 
true row create version vectors local transactions 
values updated incrementally transaction processed 
receive procedure adds vote records epidemic message vote log checks uncertain transaction see committed aborted 
testing commit abort transactions done causal order possible log preserves causal order transactions 
site deletes transaction vote records knows known sites 
allowed knows received transaction received vote knows sites received vote records committed aborted record needed locally 
likewise causally precedes votes knows sites received vote knows sites received committed aborted vote record longer needed locally 
knows record transaction vote known sites record included message needed purpose deleted 
read transactions lot increasing concurrency fault tolerance read transactions reducing number sites need access 
protocol read transactions executed locally need global synchronization 
see possible consider committed update transactions system single read transaction update transactions serializable serialized just transaction serialization order read 
transaction concurrent writing data item read serialized point 
read transaction transaction wrote concurrent happened happened concurrent conflicting aborted 
fourth transaction wrote data item read happened concurrent non conflicting 
accessed argument 
non conflicting serialization order reversed 
equivalent total order done transactions concurrent history equivalent serialized transactions causally precede transactions concurrent 
read transaction included appears problem 
consider database data item copies performs performs 
communicates quorum sites including communicates quorum including transactions conflicting receive quorum votes commit 
performs performs 
think reads reads causing serialization conflict case 
received quorum sites site received 
consider loss generality received second 
order commit release locks received vote vote causally succeeded receipt received commit receive procedure processes transactions message processing vote records message committed held read lock arrived aborted restarted acquired intention write lock 
requests read lock arrives wait intention write lock 
way wait read lock commits reads serialization order read rs rs values read rs rs commit return values epidemic algorithm executing read transactions protocol relies fact database fully replicated quorums transactions overlap transactions conflict 
concurrent non conflicting transactions serialized order 
transaction gets quorum votes transaction site received time commits read transaction read serialized 
algorithm processing read transactions 
read transaction acquires read locks reads values releases read locks 
transaction commit return values read 
conflicting transaction arrives read transaction waiting read locks read transaction aborted 
read transaction violate serializability explained previous section commit 
optimizations optimization avoids explicit votes 
quorum algorithm just creates vote record update transaction site 
possible reduce number vote records stored site transmitted sites 
transaction pre commits site encountering conflicting transactions obviously site votes site create vote records learns conflicting transaction sites need record send votes 
site send votes sites infer voted known time table received transaction send vote 
records vote updates time table indicating received sends time table knows received voted vote received explicit vote infer voted nog interested performance thought optimization scale better large number sites optimization performance evaluation 
second optimization forcing write locks aborting local un pre committed transactions 
quorum protocol pre commit transaction record received site conflicting local transactions aborted incoming remote transaction locks 
local transactions may needlessly aborted remote transaction fails get votes aborted 
mind quorum algorithm modified incoming remote transaction waits locks aborts local transactions receives sufficient votes commit 
modification preserves correctness delay decision abort conflicting transaction 
previously argued quorum protocol need global deadlock detection remote transactions involved deadlock wait lock 
new modification require distributed deadlock detection 
conflicting remote transactions request locks different sites different order conflict resolved aborted due voting 
allowed commit stopped holds lock aborted intention write lock 
deadlock detected locally include local non pre committed transaction aborted 
see deadlock consisting remote transactions recall remote transactions request locks 
similarly possible deadlock consisting remote transactions local transactions pre committed order transaction pre commit holding locks needs 
local committed transaction deadlock select victim abort 
preliminary performance measurements optimization discovered helpful maintaining throughput 
example example execution illustrated 
arrows indicate messages sent site boxes indicate contents messages 
example sites sites constitute majority quorum 
site performs transaction 
transaction reads writes transaction reads writes transaction reads writes transactions conflict transactions conflict 
commit just commit 
vote vote commit vote example history 
sends epidemic messages sends epidemic message sends epidemic message message contains transaction record time table sender shown 
shows read set write set initiating site version vector transaction records voting site vote value vote records 
example message site contains transaction record means transaction read wrote initiated site version vector 
explicit vote record receiver message know site voted absence vote record message 
messages received sites compare log records 
site votes implicitly voted knows transactions vote commit 
site votes voted knows transactions vote commit 
receives message sees conflict 
knows sites know vote votes 
constitutes quorum commits sends messages log contains transaction records vote records 
send record knows sends vote record sends transaction record sent previous message message lost transaction vote records likewise send record send vote sends transaction vote record transaction record describe happens points point received record ignores 
processes record votes voted non conflicting respect processes vote records 
vote added log commit abort adds vote record infer votes commits aborts conflicting point processes votes voted aborts committed received record ignored 
records voted committed aborted 
receives vote effect committed received votes 
point site seen transaction sites know votes 
eventually due epidemic communication vote records propagate network 
result site commit abort inaccessible site transactions uncertain 
new transaction wishing access wait corresponding lock released 
new transaction read correct committed value causally ordered interfere serialization order 
performance evaluation order evaluate performance epidemic algorithms quorums detailed simulation distributed replicated database 
simulation accepted database modeling techniques uses simulation package csim 
measurements experiments running simulation confidence interval achieved data point 
site source thread generates transactions 
transactions read write requests site dbms thread maintains database enforces phase locking maintains time table log initiates epidemic messages sites 
resources time transactions site dbms cpu database disk log disk network 
transactions modeled sequences read write operations 
reads done writes subset 
time successive operation requests transaction parameter set ms 
site copy page database 
making number data pages small study data contention issues easily 
pages represent hot spots larger database 
page assumed kbytes locking granularity data disk granularity 
dbms uses strict phase parameter meaning value thinktime transaction interarrival time varies number sites er epidemic rate ms number data disks site smallest data disk access time ms maximum data disk access time ms cpu time needed access disk ms time forced write log ms number log records page probability cache hit cpu time needed handle locks read write request ms table system parameters locking ensure local serializability 
wait handling local deadlocks maintained checked cycles time edge added 
epidemic protocols guarantee global deadlocks 
parameter meaning value smallest transaction read set size maximum read set size percentage read transactions smallest write set size update transactions maximum write set size cpu time spent data page ms time successive operation requests ms table transaction parameters system parameters model table values 
parameters governing generation behavior transactions table 
generation new transactions governed thinktime 
site transaction interarrival time arbitrarily long short 
multiprogramming level limit number active transactions resources data item locks 
approach corresponds open queuing model appropriate system accepting requests unbounded number users 
percentage read transactions 
reasonable assumption database applications transactions queries 
size read operations read transactions 
execution read transaction completely localized 
update transactions size read operations size write operations 
subset blind writes 
simulation model assumes network fully connected site exchange messages directly site 
assume network fast mbits sec 
bit sec network amount cpu time needed send receive message set ms 
site ready initiate epidemic session site chooses site random remaining sites 
epidemic rate milliseconds tells site allowed initiate epidemic communication 
experiments fixed epidemic rate ms 
site busy local processing actual time transmissions may stated value 
key measurements abbreviations analysis 
measurements time milliseconds stated 
pre commit time update transaction records elapsed simulation time milliseconds read request system 
mean value update transactions pre commit time 
commit update commit time transaction commits final commit records elapsed simulation time milliseconds read request system mean committing transactions commit time 
update transactions included measure 
read commit time read transactions pre commit sim sites erowa response time vs thinktime commit time pre commit time read commit time protocol erowa sites eqrm response time vs thinktime commit time pre commit time read commit time protocol eqrm response time sites ply commit 
commit time read transactions recorded separately update transactions 
thinktime tt mean exponential distribution transaction interarrival time site expressed milliseconds 
thinktime shorter load system increases 
start rate transaction start rate measured transactions second rate new transactions generated 
determines load system equal tt 
commit rate commit rate called throughput rate number transactions read update committed system second 
read commit rate read commit rate number read transactions committed system second 
update commit rate update commit rate number update transactions committed system second 
refer epidemic read write algorithm erowa provide baseline measure performance quorum algorithm eqrm includes optimizations described 
simple majority quorum 
transaction commit home site knows majority sites received vote 
transaction aborted home site knows majority sites voted case number sites transaction gets votes half sites aborted 
response time analysis response time graphs milliseconds 
system sites shown read commit time erowa eqrm heavy system loads indicated thinktime ms 
erowa pre commit time greater read commit time update transactions writes take slightly longer reads forced write log disk ms sites response time vs thinktime erowa update commit time eqrm update commit time erowa read commit time eqrm read commit time sites sites response time vs thinktime erowa update commit time eqrm update commit time erowa read commit time eqrm read commit time sites response times vs thinktime pre commit 
eqrm update transactions acquire needed locks data writes write log disk pre committing 
eqrm transaction votes commit data writes force write log disk 
pre commit time read commit time eqrm 
eqrm update transaction needs approved majority sites erowa enables transactions commit earlier expected smaller commit time eqrm reflects 
pre commit response time update transactions closely tracks read commit time drop graphs 
conducted experiments study performance epidemic transaction protocols number sites system increases 
show read update commit times site system erowa eqrm 
read commit times protocols similar update transactions eqrm substantially better 
commit time longer site system site system quorum protocol eqrm provides substantial benefit 
recall thinktime ms sites means transactions entering system second sites ms 
transaction generation rate represented thinktime ms site system 
report response time epidemic system sites 
important keep mind transaction generation rate transactions second represented thinktime ms site system thinktime site system 
larger system interesting trends start manifest 
erowa gives better response time read transactions system load increases especially thinktime ms 
range eqrm sustain reasonable response times read transactions 
second trend update transactions eqrm gives better response time system load 
example thinktime ms erowa average ms elapse time update transactions pre committed time committed 
time differential measure time needed propagate pre commit records system collect sites total commit rate vs start rate erowa eqrm total commit rate sites read update commit rate vs start rate erowa read commit rate eqrm read commit rate erowa update commit rate eqrm update commit rate read update commit rate commit rates sites information commit transaction ms eqrm 
eqrm provides improvement update commit time 
heavily loaded system thinktime ms response time committing update transactions erowa performs eqrm 
analyzing type transaction committing suspected erowa changing mix committed transactions favor read transactions 
discuss detail 
throughput analysis analyze transaction mix assess performance discuss detail throughput commit rate system varying loads 
axis transaction start rate number transactions generated submitted system second 
total commit rate erowa eqrm update read commit rates 
start rate small transactions committed 
start rate erowa eqrm commit close transactions second see 
particular start rate total commit rate transactions second erowa transactions second eqrm 
start rate total commit rate erowa 
total commit rate eqrm 
far eqrm clearly superior continues better start rate transactions second 
transactions started second total commit rate erowa eqrm 
transactions second total commit rate erowa eqrm 
heavy system loads erowa appears perform better shall see improvement total commit rate comes expense update transactions erowa changing transaction mix 
see read update commit rate protocols 
transaction start rate transactions second read commit erowa representing slightly committed transactions 
update commit rate transactions second slightly 
read commit rate eqrm representing committed transactions 
update commit rate transactions second 
protocols maintaining original transaction mix read update transactions start rate 
picture changes start rate increases 
start rate read commit erowa representing committed transactions 
update commit rate 
erowa begun favor read transactions 
erowa eqrm favor read transactions expense update transactions 
start rate read commit representing committed transactions 
update commit rate transactions second 
eqrm maintains original balance update read transactions erowa favor read transactions rate 
start rate increases transactions second difference protocols pronounced erowa bias favor read transactions quite obvious 
total commit rate erowa read transaction commits represent committed transactions update commits 
start rate read transaction commit rate eqrm representing committed transactions update commits 
start rate update commit rate erowa begins decrease update commit rate start rate update commit rate eqrm continuing increase 
eqrm favor type transaction 
fact start rate transactions second system reached thrashing point performance starting degrade due data contention 
point eqrm maintains percentage committed update transactions erowa simply aborts update transactions 
explains lower response time erowa observed heavily loaded system 
increasing proportion update transactions validate observation eqrm maintains percentage committed update transactions heavily loaded systems conducted experiment number update transactions increased transactions 
increasing proportion update transactions increase contention data resources transaction start rate 
give opportunity see eqrm protocol maintain transaction mix update 
total commit rate erowa eqrm read transactions update transactions 
total commit rate achieved eqrm superior erowa transaction start rates transactions second 
furthermore eqrm maintains mix committed transactions update read see 
rate eqrm begins thrashing total throughput decreases 
total commit rate erowa continues increase sacrificing update transactions seen 
read transactions easier commit share locks local disk cpu resources 
comparison traditional methods section explore advantages epidemic updates versus traditional synchronous approach 
simple traditional update protocol allows local execution read transactions just epidemic protocol 
update transaction write home site dbms acquire write locks data page replica site 
home site dbms sends message site requesting write lock 
remote site able lock responds acknowledgment 
home site receives acknowledgments sites total commit rate vs start rate erowa total commit rate eqrm total commit rate total commit rate sites read update commit rate vs start rate erowa read commit rate eqrm read commit rate erowa update commit rate eqrm update commit rate read update commit rate commit rates sites update sites lets transaction perform data write proceed operation 
transaction completed operations home site dbms starts atomic commit protocol phase commit 
order assess performance epidemic protocol modeled traditional update protocol simulator 
traditional protocol cause local global deadlocks timeout mechanism abort transactions waiting locks past timeout period 
optimal timeout period maximizing transaction throughput approximately response time update transaction 
accordingly adaptive timeout period estimated transaction response time thinktime transaction interarrival rate 
experiments performed traditional protocol system transaction parameters epidemic experiments 
response times epidemic traditional protocols contrasted sites 
response times traditional approach similar epidemic approach read transactions 
results update transactions interesting 
low system load effects data resource contention minimal expected efficiency phase commit advantage somewhat random epidemic commit process information propagation depends random communication patterns sites 
seen traditional protocol outperforms erowa update transactions site systems 
epidemic quorum protocol eqrm outperforms traditional protocol sites thinktime greater ms heavy load sites transactions started second sites thinktime ms commit time update transaction traditional protocol reflects forced writes recovery log disk home site force writes log disk initiating phase commit remote site force log responding affirmative 
commit time update transactions epidemic protocol reflects forced write recovery log home site remote sites respond write pre commit record enabling sites response time vs thinktime erowa update commit time eqrm update commit time traditional update commit time erowa read commit time eqrm read commit time traditional read commit time sites sites response time vs thinktime erowa update commit time eqrm update commit time traditional update commit time erowa read commit time eqrm read commit time traditional read commit time sites response time compared traditional protocol home site commit transaction 
remote site forces log commits transaction 
epidemic protocol advantages traditional approach maintaining desirable characteristics consistency serializability 
relieves limitations traditional approach eliminating global deadlocks reducing delays caused blocking 
addition epidemic communication technique flexible reliable synchronous communication required traditional approach 
order update transaction commit traditional protocol sites simultaneously available participating phase commit 
epidemic protocol sites eventually available participate epidemic commit asynchronous communication sites need available time 
great advantage widely distributed systems may experience transient failures network congestion 
efficient fault tolerant management replicated data difficult problem especially context disconnected mobile environments 
algorithm uses epidemic model quorums provide solution problem 
solution tolerant communication failures due epidemic model tolerant site failures due quorum commitment 
conducted detailed simulation study transactional epidemic protocols quorums 
experimental results quite positive demonstrate potential epidemic approach support replication transactional semantics multiple operations treated atomically designating sites primary secondary 
quorum epidemic protocol quorums synchronization allowing update transactions commit majority sites aware update 
updates propagated copies making local execution read transactions possible 
furthermore experiments show epidemic quorum approach advan ffl high system load mix submitted transactions matches mix committed transactions 
ffl overhead replication terms response time increase significantly number copies increases 
ffl system throughput especially committed update transactions maintained thrashing point better read write approach 
believe epidemic quorum approach holds promise efficiently supporting replicated databases preserve full serializability update environment 
inevitable popularity commerce reliability commerce servers important issue 
replication web servers commerce require multi operational transactions serializability transactions 
strongly believe asynchronous replication techniques described major impact area 
adya liskov 
lazy consistency loosely synchronized clocks 
proceedings acm symposium principles distributed computing august 
agrawal bernstein 
nonblocking quorum consensus protocol replicated data 
ieee transactions parallel distributed systems april 
agrawal el abbadi 
storage efficient replicated databases 
ieee transactions knowledge data engineering september 
agrawal el abbadi 
epidemic algorithms replicated databases 
proceedings acm symposium principles database systems pages may 
agrawal carey mcvoy 
performance alternative strategies dealing deadlocks database management systems 
ieee transactions software engineering december 
anderson breitbart korth wool 
replication consistency practicality mutually exclusive 
proceedings acm sigmod international conference management data pages june 
el abbadi 
fast readonly transactions replicated databases 
proceedings eighth international conference data engineering pages february 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley reading massachusetts 
breitbart rastogi seshadri 
update propagation protocols replicated databases 
proceedings acm sigmod international conference management data june 
chan gray 
implementing distributed read transactions 
ieee transactions software engineering february 
demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database maintenance 
proceedings sixth acm symposium principles distributed computing pages august 
fischer michael 
sacrificing serializability attain high availability data unreliable network 
proceedings acm symposium principles database systems pages may 
garcia molina 
readonly transactions distributed database 
acm transactions database systems june 
gifford :10.1.1.12.6256
weighted voting replicated data 
proceedings seventh acm symposium operating systems principles pages december 
gray neil shasha :10.1.1.116.1182
dangers replication solution 
proceedings acm sigmod international conference management data pages june 
guy heidemann mak jr page popek 
implementation ficus file system 
proceedings summer usenix conference pages june 
hsu weihl 
phase gossip managing distributed event histories 
information sciences international journal october november december 
special issue databases 
keleher 
decentralized replicated object protocols 
proceedings th acm symposium principles distributed computing april 
ladin liskov shrira ghemawat 
providing high availability lazy replication 
acm transactions computer systems november 
lamport 
time clocks ordering events distributed system 
communications acm july 
liskov ladin 
highly available services distributed systems 
proceedings fifth acm symposium principles distributed computing pages august 
livny carey 
conflict detection tradeoffs replicated data 
kumar editor performance concurrency control mechanisms centralized database systems 
prentice hall 
mattern :10.1.1.47.7435
virtual time global states distributed systems 
cosnard editor parallel distributed algorithms proceedings international workshop parallel distributed algorithms pages 
elsevier science publishers 
software north suite austin tx 
csim simulation engine 
oracle 
oracle server distributed systems replicated data 
www 
oracle 
com products oracle server whitepapers replication html index 
petersen spreitzer terry theimer demers 
flexible update propagation weakly consistent replication 
proceedings sixteenth acm symposium operating systems principles pages 
livny agrawal carey 
concurrency control performance modeling alternatives implications 
kumar editor performance concurrency control mechanisms centralized database systems 
prentice hall 
rabinovich gehani 
scalable update propagation epidemic replicated databases 
proceedings international conference extending data base technology pages 
satyanarayanan kistler kumar okasaki siegel steer 
coda highly available file system distributed workstation environment 
ieee transactions computers april 
satyanarayanan agrawal 
efficient execution read transactions replicated multiversion databases 
ieee transactions knowledge data engineering october 
robert 
epidemic transactions replicated databases 
master thesis university california santa barbara department computer science ucsb santa barbara ca 
weihl 
distributed version management read actions 
ieee transactions software engineering january 
wuu bernstein 
efficient solutions replicated log dictionary problems 
proceedings third acm symposium principles distributed computing pages august 

