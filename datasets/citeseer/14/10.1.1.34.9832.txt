faster maximum minimum mean cycle algorithms system performance analysis ali rajesh gupta technical report february department computer science university illinois urbana champaign urbana il mail cs uiuc edu department information computer science university california irvine ca mail ics uci edu faster maximum minimum mean cycle algorithms system performance analysis ali department computer science university illinois urbana champaign springfield ave urbana il mail cs uiuc edu rajesh gupta department information computer science university california irvine ca mail ics uci edu maximum minimum mean cycle problems important problems applications performance analysis synchronous asynchronous digital systems including rate analysis embedded systems discrete event systems graph theory 
karp algorithm fastest commonest algorithms problems 
mainly context maximum mean cycle problem 
show karp algorithm processes vertices arcs needed find maximum cycle mean digraph 
observation motivated propose new graph unfolding scheme remedies deficiency leads faster algorithms different characteristics 
asymptotic analysis tells algorithms run faster karp algorithm 
experiments benchmark graphs confirm fact graphs 
karp algorithm applicable maximum minimum mean cycle problems 
fastest date 
average weight directed cycle total weight arcs cycle divided total number arcs cycle called cycle mean 
maximum mean cycle problem directed graph digraph cycles find cycle having maximum average weight called maximum cycle mean directed cycles graph 
cycle called critical cycle 
minimum mean cycle problem minimum cycle mean defined analogously 
problems important applications performance analysis digital systems discrete event systems graph theory 
instance uses performance analysis relevant study follows 
minimum mean cycle problem applications finding cycle period asynchronous system data flow partitioning synchronous systems maximum mean cycle problem applications finding iteration bound data flow graph digital signal processing performance analysis synchronous asynchronous mixed systems rate analysis embedded systems 
application rate analysis embedded systems reason interested maximum mean cycle problem 
proposed framework interactive analysis rate constraints debugging violations embedded system 
rate constraints imposed designers execution rate process system order ensure correct timing behavior achieve performance goals 
constraints usually placed view system ad hoc manner 
design goes difficult system conform constraints 
due diverse interactions processes system system environment synthesizing process create constraint violations processes 
designers may need refinements violations occur 
spotting violations debugging tedious difficult tasks due complexity size current designs number refinements needed 
framework automates process 
framework includes modules check consistency imposed rate constraints compute execution rate process rate analysis compare imposed computed rates check satisfiability possible constraint violations output useful information help designer case violations 
useful information usually form critical cycles byproduct maximum mean cycle algorithm 
interactive nature framework requires fast 
time consuming part rate analysis part rate analysis part uses maximum mean cycle algorithm 
small improvement running time maximum mean cycle algorithm employed pay lot time saved accumulate big gains number refinements iterations carry constraint driven design embedded systems known advance potentially large 
algorithms proposed minimum mean cycle problem 
complete list 
focus karp algorithm reasons best asymptotic running times works maximum mean cycle problem proved usually algorithm choice 
originally karp gave theorem karp theorem characterize minimum cycle mean digraph algorithm compute efficiently 
running time karp algorithm nm strongly connected digraph nodes arcs actual running time theta nm best worst case running times observed 
karp theorem algorithm refer maximum mean cycle forms defined 
propose graph unfolding scheme maximum mean cycle problem 
scheme applicable minimum mean cycle problem 
proposed scheme leads new algorithms 
algorithms different characteristics terms actual running time asymptotic running time data structures implementation complexity 
evaluate algorithms asymptotic analysis running experiments benchmark graphs 
asymptotic analysis tells algorithms faster karp algorithm 
experimental results validates fact test cases practice 
main contribution application unfolding scheme maximum minimum mean cycle problems algorithms yields 
rest organized follows 
ii gives necessary definitions notation 
iii discusses karp theorem karp algorithm detail 
motivate approach example graph iv 
unfolding scheme discussed detail explain details algorithms vi 
unfolding generates graph called unfolded graph running time algorithms depends size graph 
vii develops bounds size unfolded graph 
bounds time space complexity analysis algorithm viii 
discuss experiments benchmark graphs results ix 
conclude ii 
definitions notation digraph vertex set vertices arc set arcs 
arc vertex vertex weight 
allow self loops arcs vertex equal adjacency list representation arrays array lists vertex list vertex contains predecessors vertices arc similarly list vertex contains successors vertices arc path length vertex vertex sequence vertices gamma weight path sum weights arcs path cycle mean weight cycle length defined mean weight cycle gives average weight arc cycle 
maximum cycle mean digraph equal maxc ranges directed cycles minimum cycle mean defined analogously 
cycle mean weight equals maximum cycle mean called critical cycle 
adopt conventions maximum empty set gamma gamma gamma gamma 
convention assume input graphs arc implementation large real number represent explains third convention holds 
iii 
karp theorem algorithm strongly connected digraph arbitrary vertex source 
nonnegative integer define maximum weight path length path exists gamma 
maximum cycle mean theorem 
proof 
theorem karp theorem maximum cycle mean max min kn gamma gamma gamma strongly connected find maximum cycle mean finding strongly connected components linear time determining maximum cycle mean component largest maximum cycle mean stated consider strongly connected graphs henceforth 
karp algorithm recurrence max gamma initial conditions gamma form works 
give algorithm fig 
called karp algorithm compute recurrence 
algorithm mainly fills entries array size theta called table labeled say row represents kth level level simplicity algorithm algorithms parts head body tail 
parts realize goals algorithms 
explain karp algorithm detail 
points apply algorithms 
head initializes table entry gamma determines source 
note gamma identity max operation flag indicate lack path 
case karp algorithm select vertex vertex list source denoted source arbitrary vertex guaranteed karp theorem 
karp algorithm takes time regardless identity source 
length path set predecessor list set nil 
array construct critical cycle 
body finds vertex constructs predecessor lists body basically uses recurrence eq 

vertex checks predecessor line computes gamma lines 
happens updated due predecessor designated predecessor predecessor lists line 
tail finishes computing eq 

vertex computes fraction eq 
gamma takes minimum fractions corresponding min operation eq 
stores result 
particular leads minimum recorded useful critical cycle construction 
max operation eq 
tail checks computed updates lines 
line maximum cycle mean vertex leads stored critical cycle construction 
iv 
motivation give example digraph fig 
illustrate karp algorithm base motivation 
digraph fig 
input graph vertices arcs 
diagram fig 
presents algorithm works starting source gives table entries 
row column circles corresponds row column table row identified integer column vertex 
symbol ffl represents gamma 
numbers just right circle represent values stored corresponding table input strongly connected digraph 
output head level vertex gamma nil vertex body level vertex predecessor vertex gamma gamma max tail gamma vertex identity min level gamma 
gamma gamma gamma gamma min max return fig 

karp maximum mean cycle algorithm 
entries gamma 
cycles graph 
cycles just definition maximum cycle mean eq 
find maximum cycle mean 
maximum cycle mean maxf critical cycle 
important point running times karp algorithm algorithms proportional number vertices arcs visited process 
result want reduce numbers 
karp algorithm visits arc solid dotted diagram fill entries table 
level karp algorithm check predecessor vertex level th level 
karp algorithm visits arcs example total number solid dotted arcs 
exclude dotted arcs corresponding diagram fig 
remaining solid arcs find maximum cycle mean 
visit arcs means 

consider recurrence eq 

gamma gamma predecessor contribute computation 
words path gamma arcs path arcs exists pass particular gamma gamma predecessor need touch predecessors gamma definition 
arguments prove necessary check predecessor vertex level 
ensure 
implement recurrence dependent predecessors scheme karp algorithm uses fig 

vertex digraph 
entries arcs visited 
solid arcs 
eliminate unnecessary 
propose unfolding scheme formally define section 
intuitively works follows starting source visit level successors vertices current level nth level reached 
case example visit successors st level visit successors nd level 
unfolding unfolding scheme propose reduce required find maximum cycle mean 
applicable minimum mean cycle problem 
scheme basis algorithms 
concept unfolding new see formulation unfolding knowledge maximum minimum mean cycle problems 
going kth level graph th level called th iteration iteration visits arcs originate kth level 
say th level corresponds th iteration 
graph unfolding generates iterations th nth creates new graph called unfolded graph denoted gu eu process 
unfolded graph weighted graph weighted vertices arcs 
arc weights directly come vertex weights computed unfolding 
vertices unfolded graph denoted corresponding vertex indicates inserted gu kth iteration 
note level weight vertex gu defined iii 
unfolding proceeds rules gamma 
vertex designated source 

initially vu 
vu eu vu vu vu vu rule initializes weight inserted vu time second rule updates weight necessary 
algorithms combine parts fig 

unfolding graph fig 

second rule appropriate initialization initializing vertex weights gamma processing 
fig 
illustrates rules example graph fig 

iterations correspond diagrams respectively 
table implement unfolding iterations unfolded graph table 
circle empty filled represents entry entry value shown right corresponding circle 
filled circles arcs vertices arcs unfolded graph 
show arc weights readily available fig 
vertex weights unfolded graph easily determined number right vertex weight 
fig 
shows unfolded graph vertices arcs filled circle kth row vth column corresponds vertex arc vertices arc unfolded graph vu fs eu note unfolded graph finite acyclic graph 
finite total number iterations required acyclic impossible create back edge higher level lower cycle construction 
property implies vertex weights computed polynomial time 
property argument iv induction prove correctness unfolding 
proof quite easy just mention lemma proof 
lemma unfolding correctly computes mention property unfolding implications memory space allocated algorithms constraining total number vertices iteration 
st iteration unfolding levels 
involves vertices levels arcs kth st 
karp algorithm similar property 
lemma unfolding works exactly levels iteration 
vi 
faster maximum mean cycle algorithms give algorithms named dg dg dg compute maximum cycle mean strongly connected digraph 
algorithms unfolding 
decreasing order terms asymptotic running times increasing order terms sophistication actual running times 
context maximum mean cycle problem 
apply algorithms minimum mean cycle problem exchange min operation max operation gamma vice versa 
karp algorithm algorithms time consuming part usually body 
case mainly body implements unfolding 
body karp algorithm tight loops innermost loop contains conditional assignments 
tried dg similar karp algorithm possible advantage karp algorithm 
dg sophisticated implementation unfolding obtain better asymptotic time complexity body dg improvement dg 
algorithms asymptotically faster karp algorithm 
advantage matter algorithms choose source vertex 
suitable source done algorithms reduced 
function find source 
function explained vi 
algorithm dg algorithm called dg fig 

dg structure karp algorithm 
tried innermost loop dg contain statements possible unfolding 
unfolding evident change gamma line successor lists line 
main differences karp algorithm call head determine suitable source isit turn elimination unnecessary tail 
explained detail 
need isit turn explained follows 
dg goes vertex level eliminates unnecessary arc visits isit turn 
initially isit set true indicate unfolding begins visiting source flag turn differentiate levels needed lemma value turn current level value level gamma turn 
suppose level turn set 
turn set important turn toggles levels turn 
visited level pass test line 
line shows visited level successors visited level level definition unfolding isit fields set true line 
tail karp algorithm line 
line guarantees processing vertex gamma path length proof correctness argument stated definition values karp theorem 
know path length vertex assume strongly connected arc implies array real value 
assume gamma vertex strongly connected real number column fraction karp theorem takes value gamma 
noting karp theorem involves minimization operation column third convention ii find gamma 
fact value identity max operation affect output max operation lines completes proof 
input strongly connected digraph 
output head level vertex gamma set isit isit false nil turn isit turn true body level gamma vertex isit turn true isit turn false successor vertex max isit gamma turn true turn gamma turn tail gamma vertex isit turn true identity min level gamma 
gamma gamma gamma gamma min max return fig 

maximum mean cycle algorithm dg 
second algorithm dg second algorithm called dg fig 

dg reveals flavor unfolding better touches vertices arcs required unfolding 
circular queue denoted process vertices unfolded graph 
lemma size elements elements successive levels 
renders unnecessary need check see full 
need check see empty arc assumption 
head dg tail exactly karp algorithm 
head body contain queue functions appropriate 
queue element contains vertex length path level number visited 
line eliminates duplicates queue 
array standard queue functions implement queue 
input strongly connected digraph 
output head level vertex gamma nil enqueue body dequeue successor vertex gamma enqueue max dequeue tail gamma vertex identity min level gamma 
gamma gamma gamma gamma min max return fig 

second maximum mean cycle algorithm dg 
third algorithm dg third algorithm called dg fig 

dg dg main difference dg eliminates initialization head 
noted vertex may included iteration unfolding entry stay gamma iteration 
tail know entries table contain valid entry entry gamma 
array points valid entries gives level obtained array gamma 
valid entries initialized line 
entries linked list list signified gamma 
tail altered accordingly 
rest self explanatory 
note linked lists table sparse graphs table entries probably needed 
implemented extension saw resulting algorithm slow lowest asymptotic space complexity 
finding suitable source source vertex mentioned karp theorem arbitrary 
different source may pay lot 
example consider example fig 

unfolded graph contains arcs unfolding starts suppose selected source 
unfolded graph contain arcs yielding improvement running time 
basically suitable source mean source vertex leads optimum unfolding mean smallest unfolded graph terms number arcs 
find optimum unfolding 
unfold graph starting vertex select source vertex leading arcs 
problem approach take time probably larger running time process finding maximum cycle mean 
resort fast heuristic 
function fig 
implements heuristic 
heuristic unfold graph limited number denoted iterations starting vertex returning source vertex leading number arcs iterations 
experiments test suite changing saw worked reasonably compromising running time solution quality 
note implementation assumes degree vertex available 
degrees arrays counts number arcs result unfolding graph times 
running time theta equal theta constant strongly connected 
finding critical cycle need find critical cycle mean case framework mentioned noted give information find critical cycle 
give algorithmic form 
due importance algorithm fig 
find 
recall tails algorithms save vertex leads maximum cycle mean 
algorithm fig 
constructs path length information stored array puts array finds weight prefix path facilitate finding weight subpath path array values recorded tails find length critical cycle gamma 
go subpath length check weight see critical cycle 
output cycle soon input strongly connected digraph 
output head vertex gamma nil gamma enqueue body dequeue successor vertex enqueue gamma max dequeue tail gamma vertex identity min gamma 
gamma gamma gamma gamma min max return fig 

third maximum mean cycle algorithm dg 
find 
running time algorithm theta dominated loops steps take constant time including line gamma gamma gamma gamma 
algorithm finds critical cycle modify find 
recall tails compute min columns array find max minimum values 
possible value minimum values equal maximum 
easily go array entries determine minimum values 
run algorithm vertex minimum values just path stored may contain critical cycle continue checking outputting critical cycle 
input strongly connected digraph 
output source vertex vertex iteration vertex successor vertex vertex find fl return fig 

algorithm find suitable source vertex 
input array output critical cycle gamma gamma path gamma gamma prefix path costs len gamma len len gamma return delta delta delta len fig 

algorithm find critical cycle 
vii 
bounding size unfolded graph section derive bounds size unfolded graph 
bounds instrumental understanding improvements obtained running time 
number times arc originates vertex th level number levels th level included degree respectively 
consider strongly connected graph vertices arcs may include self loops 
equations unfolded graph gu eu jv term equation source vertex th level 
note special relationship included nth level gamma 
allow self loops levels total exclude th level 
arc originate vertex included levels gamma gamma included levels inclusion successive levels probably stems self loops 
plugging values eq 
bound size unfolded graph terms parameters gamma jv gamma nm case strongly connected 
smallest unfolded graph occurs ring vertices arcs largest occurs complete graph self loops vertex 
viii 
complexity analyses space complexity analysis note arrays algorithms consume space 
algorithm uses array size theta arrays large say space usage dominated algorithms space complexity theta 
time complexity analysis examine algorithm separately 
karp algorithm analysis fairly straightforward proceeds follows 
running time dominated nested loops part head runs theta body goes predecessor vertex level runs theta nm tail visits table entry runs theta 
total running time comes theta nm theta nm assume input strongly connected graph 
dg 
head initializes table array isit take theta time theta time respectively 
runs theta head runs theta time total 
body checks vertex level visits arcs unfolded graph 
runs theta 
tail runs theta worst case run time due line graph ring tail takes linear time 
tail runs time total running time dg theta 
dg head tail running time karp algorithm 
run theta time 
body visits vertices arcs unfolded graph runs theta je 
total running time dg theta 
note queue functions run constant time 
dg head mainly loop initialize runs theta due 
body similar dg visits vertices arcs unfolded graph runs theta je 
tail interesting behavior 
due array tail checks vertices unfolded graph 
due line runs time 
total running time dg best get size unfolded graph 
summary running times tab 
theorem 
conclude analyses algorithms running time karp algorithm worst case common cases algorithms outperform karp algorithm asymptotically 
running time difference significant dg requires theta time ring graph karp algorithm requires theta 
table time complexity algorithm theta notation noted 
alg 
head body tail total karp nm nm dg je je dg je je dg je jv jv je theorem strongly connected graph vertices arcs karp algorithm runs theta nm time algorithms run nm time 
non strongly connected graph parameters algorithms run nm time 
ix 
experimental results discussion section report results experiments see performance algorithms practice 
coded algorithms experiments sun sparc mb real memory running sun os 
groups benchmark graphs test suite group graphs obtained high level synthesis benchmarks 
second group consists signal transition graphs 
tab 
ii presents size test case experimental results terms number vertices arcs visited running time 
table group consists graphs names capitalized second group consists rest graphs graphs names lower case 
included extra large ring graph row show performance best case algorithms 
rings graphs occur naturally mod counter second group 
numbers reported graphs strongly connected components 
running time sum user system cpu times seconds execution algorithm completion 
tab 
ii observe 
observation discussed 

dg karp algorithm column visit number vertices dg dg column visit lot 
improvement achieved ranges mc group 
improvement graphs table 

algorithms column visit lot arcs karp algorithm column 
improvement achieved ranges mc group 
improvement graphs table 

algorithms visit arcs visited get result 
example cycle ring graph maximum cycle mean computing mean weight cycle time linear size graph excluding complexity head tail 
karp algorithm takes time quadratic size graphs 
behaviors algorithms evident row tab 
ii 
dg fastest required 
dg dg visit arcs times spent head tail take running time 
note number vertices arcs karp algorithm visits slowest simple graph 
weakness karp algorithm usually expected seen sparse graphs 
program test suite available authors 

dg fastest algorithm columns 
graphs second group karp algorithm runs faster dg 
think resulted timer 

karp algorithm outperforms dg dg especially graphs group 
dg dg observation bit strange 
reason simple 
mentioned earlier body time consuming part algorithms karp algorithm body tight small loops 
biggest advantage karp algorithm 
innermost loop dg dg include statements realize unfolding 
possible cache misses due circular queue reason behavior 
mention number vertices arcs visited independent implementation better indicator improvements algorithms achieve 
fact observed especially benchmarks second group running time figures small 
summary dg asymptotically fastest algorithm extent fastest literature think dg best choice considering behavior practice 
implementation complexity dg worse karp algorithm 
discussed maximum mean cycle problem algorithm karp algorithm commonly solve 
showed shortcomings karp algorithm proposed graph unfolding scheme maximum mean cycle problem remedy 
proposed scheme leads faster maximum mean cycle algorithms different characteristics 
evaluated algorithms theory asymptotic analysis practice experiments benchmark graphs comparison karp algorithm 
asymptotic analysis shows algorithms faster karp algorithm 
experimental results give somewhat different picture 
algorithms faster karp algorithm slower 
concluded due tight loops karp algorithm probably constants asymptotic running time smaller 
experiments show algorithms process lot vertices arcs karp algorithm expected asymptotic analysis 
observation actual running times promising independent implementation algorithms 
mention improvements applicable minimum mean cycle problem algorithms fastest date 
acknowledgment 
lavagno sending signal transition graphs 
supported national science foundation nsf career award mip asc 
burns martin performance analysis optimization asynchronous circuits proc 
advanced research vlsi signal processing conf pp 

performance evaluation concurrent systems petri nets infor 
proc 
letters vol 
pp 


liu shih 
cheng data flow partitioning clock period latency minimization proc 
st design automation conf 
acm ieee pp 

times system call 
ito determining minimum iteration period algorithm vlsi signal processing vol 
pp 
dec 
teich sriram thiele martin analysis mixed asynchronous synchronous systems proc 
workshop vlsi signal processing 
ieee 
mathur gupta tool rate analysis rate constraint debugging embedded systems proc 
euro 
design test conf 
ieee 
hartmann orlin finding minimum cost time ratio cycles small integral transit times networks vol 
pp 

karp characterization minimum cycle mean digraph discrete mathematics vol 
pp 

lawler combinatorial optimization networks matroids holt reinhart winston new york ny usa 
orlin ahuja new scaling algorithms assignment minimum mean cycle problems mathematical programming vol 
pp 

young tarjan orlin faster parametric shortest path minimum balance algorithms networks vol 
pp 

cohen 
synchronization linearity john wiley sons new york ny usa 
brown unfolding retiming high level dsp synthesis proc 
int 
symp 
circuits syst 
ieee 
cohen dubois linear system theoretic view discrete event processes performance evaluation manufacturing ieee tran 
automatic control vol 
pp 
mar 
burns amon borriello algorithm exact bounds time events concurrent systems ieee trans 
comput vol 
pp 
nov 
lavagno methodology tools state encoding asynchronous circuit synthesis proc 
rd design automation conf 
acm ieee pp 

lavagno sangiovanni vincentelli synthesis hazard free asynchronous circuits bounded wire delays ieee trans 
computer aided design vol 
pp 
jan 
table ii benchmarks experimental results 
vertices arcs running visited visited times size karp dg name dg dg karp dg karp dg dg dg elliptic gcd mc group mc group mc group parker tseng alloc outbound chu chu chu full hazard bm master read mmu mmu mmu mod counter mp forward pkt mux nak pa par pe rcv ifc pe send ifc qr ram read rcv setup ram write read ctl send ctl send pkt done seq seq mix spec seq bm bm vme int 
