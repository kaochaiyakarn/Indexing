minimum time reachability timed automata peter stavros tripakis sergio yovine june problem minimum time reachability timed automata automaton initial state target state find run exists minimum time run 
show problem solved examining acyclic paths forward reachability graph generated thefly timed automaton 
result propose algorithms different complexities 
timed automaton initial state target state interested minimum time reachability problem run starting state state find run consumes minimum time 
problem useful number applications including computation optimal minimum time schedulers batch plants ny 
am solution problem general minimum time controller synthesis problem 
solution uses backward fixpoint computation unnecessarily explore unreachable states 
backward reachability undesirable case system pure timed automaton control states clocks contains discrete variables booleans bounded integers typical case 
motivates study algorithms forward reachability 
algorithms called simulation graph 
basic result cycles simulation graph need examined finding minimum time runs 
precisely theorem see section states run exists exists minimum time run verimag 
verimag uc berkeley 
example successor state setting discrete variable single state hand predecessors state respect domain traverse node simulation graph twice 
note property hold timed automata level 
example automaton run shorter run theorem propose algorithms solve minimum time reachability problem timed automata algorithm backward iteration simulation graph advantage fixpoint computation number iterations bounded maximal length path reaching target node simulation graph second reachable states considered algorithm uses additional clock keep track minimum time target updates time fly algorithm binary iteration upper bound target 
algorithms worst case complexity worse polynomial size simulation graph 
remains seen algorithms perform practice 
open question remains best interested complexity problem size simulation graph size automaton 
known reachability pspace complete acd minimum time reachability pspace hard 
practice simulation graph proven reasonable size structure 
reachability linear size simulation graph remains seen minimum time reachability solved polynomial time size simulation graph 
output algorithms path simulation graph 
path concrete run automaton obtained techniques described tri 
organized follows 
section gives background timed automata safely skipped 
section simulation graph prove main theorem 
section introduces important properties simulation graph terms relation sets states zones timing constraints may relevant proving statements general settings 
section give algorithms 
section concludes 
loops help gaining time 
background clocks polyhedra clocks valuations 
set nonnegative reals fx xng set variables called clocks 
valuation function 
write valuation assigns zero clocks 
valuation 
ffi ffi resp 
gammaffi valuation ffi ffi resp 
gamma ffi gamma ffi 
valuations called equivalent ffl clock ffl pair clocks gamma gamma jv gamma jv gamma polyhedra 
atomic constraint expression form gamma valuation satisfies constraint satisfies gamma gamma hyperplane set valuations satisfying atomic clock constraint 
class hx polyhedra defined smallest subset contains hyperplanes closed set union intersection complementation 
notation polyhedra write hyperplane defined constraint polyhedron defined intersection 
write true false zero 
polyhedron called convex ffi ffi gamma ffi polyhedron convex iff defined intersection finite number hyperplanes 
convex polyhedron box defined intersection hyperplanes form operations polyhedra 
definition intersection union complementation defined operations polyhedra 
polyhedra difference defined complementation test inclusion equivalent 
define operations sequel 
examples operations shown 
closure 
operation necessary guaranteeing termination reachability algorithms 
convex polyhedron natural constant closure denoted close greatest convex polyhedron exists equivalent 
intuitively obtained ignoring bounds involve constants greater said closed close lemma 
closed closed 
closed closed 

exists constant closed 
max denote smallest constant closed 
lemma constant finite number closed polyhedra 
clock resets 
define operations forward backward clock reset respectively follows def fv zg def fv zg intuitively contains valuations obtained valuation resetting clocks contains valuations resetting clocks yield valuation time elapse 
define operations backward forward time elapse polyhedron polyhedra respectively iff ffi ffi iff ffi gamma ffi projection 
polyhedron defined polyhedron fv preservation convexity 
result easy derive definitions 
lemma convex convex 
effective representation 
convex polyhedra effectively represented difference bound matrix dbm dil 
semantic operations polyhedra implemented syntactic dbm transformations 
cost operations number clocks 
nonconvex polyhedron union convex polyhedra delta delta delta represented non canonical way list dbms polyhedron timed automata timed automaton ta acd hnsy tuple ffl finite set clocks 
ffl finite set discrete states 
ffl finite set jumps form 
source target discrete states 
conjunction atomic constraints defining box called guard set clocks reset jump 
discrete state write resp 
set jumps form resp 

max defined maximum max guard state pair location valuation 
states equivalent equivalent 
consider state 
write ffi ffi 
timed transition form ffi ffi ffi ffi called ffi successor jump discrete transition respect form 
called successor write ffi ffi discrete transition ffi discrete transition ffi timed transition 
runs 
run starting discrete state reaching discrete state finite sequence ae ffi ffi ffi ffi delta delta delta ak ffi ffi successor successor ffi time spent ae denoted time ae defined sum ffi delta delta delta ffi minimum time reachability 
say reachable time run ae starting reaching time ae define mintime minimum time reachable simulation graph main theorem simulation graph 
consider ta discrete states clocks symbolic state set states zg polyhedron 
simplicity denote 
convex called zone 
zone edges natural constant max define successor predecessor operations post def close gamma delta pre def gamma delta intuitively post contains states equivalents reached state transition letting time pass pre contains states reach state transition letting time pass 
operations preserve convexity polyhedra result post pre zone 
initial discrete state generate simulation graph fly depth search starting zero generating node stack successors post 
exploring branch leading previously generated node add set nodes set edges simulation graph 
lemma simulation graph finite 
relation runs paths simulation graph 
shown tri run close fyg close fyg polyhedra fx yg operations 
exists iff simulation graph starting zero node 
path delta delta delta sn simulation graph run ae ffi delta delta delta dn vice versa 
say ae traverses nodes simulation graph passes delta delta delta say ae inscribed path simulation graph 
jump sequences graphs timing constraints 
need definitions lemmas 
jump sequence set jumps delta delta delta destination discrete state source discrete state example automaton jump sequence 
jump sequence define graph timing constraints delta delta delta graph ffl nodes named ffl edge ffl clock guard included ff reset edge ff ffl clock guard included fi reset edge gammafi intuitively captures set timing constraints occurrence events induced order sequence happen clock resets guards 
example automaton reset guard happen time units represented constraint gamma lemma relates existence runs time spent graphs timing constraints jump sequences 
lemma consider jump sequence delta delta delta graph timing constraints delta delta delta ff cost shortest path fi cost shortest path exists run ae passing delta delta delta time ae ffi iff gammaff ffi fi 
see duality runs paths graph timing constraints 
relation exists constraints polyhedra simulation graph timing constraints graphs 
lemma consider path simulation graph delta delta delta sn graph timing constraints delta delta delta exist indices clocks ffl reset reset time ffl gamma ff integer constant ff path total cost ff 
lemma assume real clocks fictitious clock value convention taken reset discrete transition 
example automaton path simulation graph polyhedron xy paths gamma total cost gamma corresponding constraint gamma gamma total cost corresponding constraint gamma 
proofs lemmas omitted 
main result 
ready state main theorem 
theorem run exists exists run oe oe traverse node simulation graph twice time oe mintime oe run 
proof ae ffi delta delta delta ffi ffl delta delta delta ffl ck delta delta delta im bm minimum time run ae inscribed path delta delta delta sn delta delta delta ck delta delta delta bm simulation graph 
assume sn ae traverses node twice 
show exists run oe traverse node twice time ae time oe oe minimum time run 
graph timing constraints delta delta delta delta delta delta delta delta delta ffi cost shortest path notice ffi edge lemma gammaffi time ae 
graph timing constraints delta delta delta delta delta delta ffi cost shortest path ffi 
prove ffi ffi lemma exists run oe passing delta delta delta delta delta delta time oe gammaffi gammaffi time ae 
notice oe passes delta delta delta delta delta delta eliminated loop delta delta delta oe traverses node twice means jump sequence delta delta delta delta delta delta contains loop 
technique eliminate loops 
get run traverse node twice 
remains show ffi ffi oe shortest path oe general form fl ff fl fi delta delta delta ff fl fl denotes sub path starts ends passes nodes total cost fl fl 
similarly notation fl notice safely assume oe acyclic 
negative cost cycle set constraints induced unsatisfiable imply lemma run passing delta delta delta delta delta delta negative cost cycle exists acyclic shortest path take shortest path remove cycles may exist cycles cost 
construct path oe cost oe ffi shortest path cost ffi ffi ffi oe shorter 
oe start part fl edges 
continue extending oe depending corresponding part oe 
edge ff exists add oe continue extending find replacement 
ff exist things hold ff edge certainly exists comes second clock reset tested gammaff resulted edge ff added third reset ff 
reset clearly edge ff comes edge combining edges extend oe fl ff notice cost oe cost oe continue extending oe adding part fl edges part edges edge fi exists add oe continue extending find replacement 
fi exist things hold fi fact comes set constraints inconsistent second clock reset tested fi generated edge third reset fi 
reset clearly edge fi edge help filling gap 
need 
consider part ff ff oe part certainly exists reach eventually course 
notice ff edge oe shortest path 
sub path ff induces constraint gamma ff distinguish cases ff implies ff shorter ff 
reset zone node sn included hyperplane gammaff gammaff recall zone node 
reset time loop delta delta delta fact gammaff lemma implies path fl fl ff extend oe adding sub path fi fl total cost fi fl equal cost sub path fi ff oe 
continue extending oe usual 
ff case clock reset tested gammaff generated edge ff 
reset reset implies zones latest clock difference gamma satisfies constraint gamma ff particular true gamma ff gamma ff point reset time sequence delta delta delta delta delta delta delta delta delta point 
recall reset gamma ff lemma path fl fl ff reset time edge ff 
extend oe adding fi fl ff continue extending oe usual 
construction oe continues similar manner possible cases arrive constructed path oe total cost equal cost oe construction 
algorithms section algorithms minimum time reachability 
input timed automaton initial discrete state target state start generating simulation graph fly say depth search dfs 
dfs stops exploring node exists visited node target state hit unreachable reachable upper bound time reach obtained 
details algorithms follow 
bellman ford algorithm entire simulation graph generated 
process length longest acyclic path initial node target node recorded 
node graph associate generally non convex polyhedron extended space clocks ftg 
initially target node 
backward iteration performed follows repeat times edge pre polyhedron updated 
pre operation extra clock counts backwards 
iterations algorithm stops point node contains set points ftg target reached steps 
particular initial node ftg interval target reached gammab gammaa 
mintime gammab 
fact suffices look paths steps comes theorem 
complexity 
algorithm performs iterations bounded number nodes simulation graph 
iteration updates number edges simulation graph 
update involves computation pre union operation 
case convex polyhedra pre computed time number clocks 
inclusion checked time 
general union result non convex polyhedra operations expensive 
compact methods representing unions polyhedra blp 
depth search extra clock previously algorithm starts generating simulation graph 
soon path reaching target dfs extra clock counting forward starts 
dfs starts initial node plus constraint path parts simulation graph explored previously need re explored lead target state 
recomputing extra clock upper bound reaching target obtained projecting polyhedron path ftg gives interval 
search goes modifications described 
extra clock added simulation graph greater original graph computed 
search terminate clock upper bounded close operation apply reset 
ensure termination time reduce size graph explored additional criteria exploring newly created node added 

exists node stack cycle original graph theorem needs explored 

upper bound time reach target known ftg needs explored 
second time new path reaching target updated updated minimum time reach target value guaranteed previous value second criterion 
value search minimum time reach target mintime 
complexity 
extra clock nodes fused original simulation graph distinguished extended search 
worst case algorithm explore paths original simulation graph leading target node case occurs times paths delta delta delta 
number paths exponential number nodes simulation graph 
binary search time horizon algorithm essentially modification previous 
having obtained path upper bound previously algorithm uses binary search algorithm follows set 
repeat min start extended dfs bound min target node hit path set set min 
extended dfs finishes target hit set min 
mintime complexity 
algorithm converge approximately log iterations 
iteration extended dfs performed 
advantage previous algorithm path quickly quickly decreasing case estimate large 
hand previous algorithm explore path algorithm explore path multiple times converges 
proposed algorithms computing minimal time path leading initial final state timed automaton 
basic result done checking acyclic paths simulation graph 
algorithms worst case complexity worse polynomial size simulation graph 
remains seen algorithms perform practice 
open question minimum time reachability solved polynomial time size simulation graph 
focused obtaining optimal solutions 
practice compromise heuristics guaranteed yield optimal solutions time 
proposal branch bound algorithm computing job shop schedules modeled timed automata 
acd alur courcoubetis dill 
model checking dense real time 
information computation 
am asarin maler 
soon possible time optimal control timed automata 
vaandrager van editors hybrid systems computation control volume lncs pages 
springer mars 
blp behrmann larsen pearson weise yi 
efficient timed reachability analysis clock difference diagrams 
cav 
dil dill 
timing assumptions verification finite state concurrent systems 
sifakis editor automatic verification methods finite state systems lecture notes computer science pages 
springer verlag 

bounding heuristics forward reachability algorithms 
technical report csi report csi 
hnsy henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
information computation 
ny yovine 
computing optimal operation schemes chemical plants multi batch mode 
proc 
hybrid systems computation control lncs pittsburgh pa usa march 
springer verlag 
tri tripakis 
formal analysis timed systems practice 
phd thesis universit joseph de grenoble 
tri tripakis 
timed diagnostics reachability properties 
tacas 

