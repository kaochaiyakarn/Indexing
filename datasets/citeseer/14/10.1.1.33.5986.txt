rc computer science ibm research report mockingbird flexible stub compilation pairs declarations joshua auerbach charles barton mark chu carroll mukund ibm research division watson research center yorktown heights new york limited distribution notice report submitted publication outside ibm probably copyrighted accepted publication 
issued research report early dissemination contents 
view transfer copyright outside publisher distribution outside ibm prior publication limited peer communications specific requests 
outside publication requests filled reprints legally obtained copies article payment 
ibm research division almaden delta watson delta tokyo delta zurich mockingbird prototype tool developing interlanguage distributed applications 
compiles stubs pairs interface declarations allowing existing data types reused sides interface 
multilanguage stub compilers impose data types application complicating development 
mockingbird supports java corba idl extended languages 
stubs convert types structural equivalence missed tools interacts programmer refine original declarations 
show kind tool improves programming productivity describe detail mockingbird design implementation 
necessary interconnect components residing different machines written different languages 
crossing machine boundary involves adjusting representation information program variables representation network messages 
crossing language boundary requires adjustment different parameter passing conventions conversion different type systems 
common goal isolate adjustments stub code generated automatically declarations 
mockingbird prototype tool compiles stub declarations 
pair declarations understood programmer express different forms single interface 
declaration may state interface different programming language java allowing full type system languages effectively 
approach permits existing application data types reused sides interface types computation communication 
alternatively declaration may interface definition language idl enabling interoperation remote idl non mockingbird components conferring benefits mockingbird locally 
tools leave programmers painful choice language coverage ease 
various distributed programming languages language extensions allow common data types project computation intercomponent communication expense limiting project single language :10.1.1.52.176
limitation unacceptable integrating information systems implemented multiple languages 
idl compilers support multiple languages generating stubs idl 
idl compilers generate programming language data declarations idl intercomponent communication 
imposed types rarely programmer chosen computational purposes 
programmer faced error prone chore writing program logic move information application computational data types parallel set imposed communication types 
final category tools called tools translate directly programming language generating stub new declaration 
flexible type system source language data types imposed target language attendant problems 
addition tools provide ad hoc pair wise coverage languages 
mockingbird avoids problems providing intuitive framework programmers generating bridges heterogeneous components equal idl compiler set languages supports 
mockingbird strength lies ability generate stubs declarations declaration imposed programmer tool 
mockingbird requires declarations isomorphic internal type model gives public class point public methods constructors private float private float public class line public methods constructors private point start private point public class extends java util vector contains point objects types sample java graphical application 
mapping 
isomorphic declarations programming languages mockingbird generates efficient local stub components reside process network enabled stub case components different processes 
declaration idl mockingbird generates network enabled stub obeying network architecture implied idl 
mockingbird supports java corba idl 
mockingbird supported programs run aix windows nt 
design mockingbird enables extensions additional languages platforms 
balance organized follows 
section show example generating stubs declarations convenient programmers 
describe mockingbird tool section 
section discuss key algorithms implementation decisions 
describe experiences mockingbird develop applications section 
section outline possible avenues 
discuss related section conclude section 
example contrast interlanguage interoperation problem solved idl compiler typical tool way problem solved tool generates adapters declarations 
consider graphical java application developed types wishes function declaration shown 
fitter function fits line set points 
array points passed parameter function array length second parameter 
single point represented array containing coordinates 
output parameters endpoints fitted line provided typical convention caller passes pointers points fitter deposit values 
application wish fill java point objects pass fitter function get back java line object 
idl compiler help describe desired interface idl 
omg corba idl example 
show possible ways writing interface 
interface match function 
interface suited typedef float point void fitter point pts int count point start point fitter function interface struct point float float struct line point start point typedef sequence point 
line fitter pts interface typedef float point typedef sequence point 
void fitter pts long count point start point java friendly idl interface friendly idl interface 
existing java types want 
translation interfaces java shown 
java programmer find suitable problems 
translation idl gives new point line classes methods needed application purposes 
fixed translation dictates array type point preferred container 
idls translated translation appropriate match original exactly requiring additional bridge code written 
typical tool translate fitter java interface similar java translation 
difficulty interfaces generated tools arises types chosen programmer derived types foreign language 
consider declarations tool mockingbird 
case programmer write java declaration precisely manner desired application purposes shown 
type chosen programmer imposed tool reuse applicationspecific types 
hints programmer declarations tool generate adapters fitter optimized local network 
tool adapt declarations appropriate corba idl declaration permitting interoperation corba implementations standard idl compiler approach 
single declaration tool may give adapters declarations 
runtime techniques previously studied concert choose public interface extends org omg corba object void fitter float pts int count start public final class point canned constructors methods public float public float public final class line canned constructors methods public point start public point public interface extends org omg corba object line fitter point pts translation idl java 
public interface line fitter pts ideal translation fitter java 
adapter actual type location object transparently invoker 
mockingbird tool mockingbird automate stub compilation previous example correspondence fitter essentially structural 
interfaces points lines floating point numbers interfaces accept points return lines 
differences details things grouped 
mockingbird discover details declarations recognize structural similarity additional assistance programmer 
section show programmer provide necessary information mockingbird enable discover structural correspondence programmer desires 
thesis underlying mockingbird type systems modern languages java corba idl similar 
mockingbird uses model called mtype system capture similarities 
reconcile type declarations different languages declarations translated mtypes 
areas mapping language declarations mtypes may ambiguous programmer may affect translation providing additional information 
algorithms foundation determine conversion may performed types 
mockingbird generate way converter types corresponding mtypes equivalent 
mtype type subtype second mockingbird generate way converter second 
process programmer generate converters types shown 
mockingbird parse declarations java class files corba idl project files representing previously saved session tool 
types read system programmer affect translation mtypes attaching annotations declarations interactive process 
example java line fields type point interpreted mockingbird refer zero point objects field may null 
annotations may state field null may introduce alias 
mockingbird conclude line contain different points 
point programmer save current state parsed annotated declarations project file 
order generate converters programmer presents types 
component converts types mtypes account annotations types compares mtypes determine equivalent subtype relation 
may various rules isomorphism associativity find equivalence 
example associativity implies line contains point objects point contains float values line match float values 
determines types match saves information structural correspondences mtypes stub generator 
mismatch programmer annotation comparison process iteratively match obtained 
asserts types match stub generator produces code may compiled linked applications runtime system provide bridge heterogeneous components 
shows screen shot sample mockingbird 
panel left lists set types currently loaded system type fitter currently selected 
type declaration appears upper right diagrammatic representation mtype appears course correspondence interfaces may semantic just structural 
discuss issue section 
java class files declarations corba idl annotate programmer selects types compare match generate stubs mismatch project files load save convert internal type convert internal type parser parser parser type type anatomy stub generation mockingbird 
mtype view type declaration annotation window list types generate stubs screen shot sample mockingbird session 
lower right 
selecting part declaration results appearance annotation window type discuss information programmers express annotation windows subsequent sections 
annotations applied programmers mtype display changes accordingly 
programmer invoke feels mtypes match 
asserts types interconvertible stub generator button emit stubs 
give overview mtypes summarized table focusing representative annotations affect translation declarations mtypes 
study process shown generate stubs example section 
primitive mtypes primitive mtypes integer character real unit mtypes 
discuss properties primitive types source languages modelled mtypes 
integer types short int distinguished range values support 
accordingly family integer mtypes parameterized range 
example java short translated integer mtype range gamma gamma 
convention booleans enumerations elements translated integer mtypes range gamma respectively 
integral types equivalent ranges equal 
types subtype relation range table mockingbird internal types mtypes 
mtype description character corresponds character types char 
integer corresponds integral types int 
real corresponds floating point types float 
unit corresponds void null types record corresponds aggregates struct 
choice corresponds disjoint unions variants union places alternatives arise 
recursive corresponds types defined terms 
port implement functions interfaces subset 
programmers annotate source language integer types specify explicit ranges overriding defaults language java corba idl implementation 
example java programmer annotate java int state contain unsigned values corresponding unsigned int state exceed gamma 
seen equivalent 
similarly family character mtypes parameterized glyph repertoires set glyphs considered representable type 
java char translated character mtypes default 
character mtypes equivalent repertoires subtype repertoire includes 
example character mtype repertoire iso latin subtype repertoire unicode 
integer types programmers specify repertoire annotation 
java permit integral types contain integers characters 
programming convention char contain characters int short contain integers 
annotations programmers state mtype families intended 
floating point types family real mtypes distinguished precision exponent 
translation real mtypes assumes certain defaults precision exponent overridden annotations 
unit mtype model void null types java 
compound mtypes languages constructs building ordered aggregates heterogeneous types 
include struct type corba idl class type class type java class types passed value 
constructs modelled record mtype list child mtypes 
point type intended passed value record real mtypes children line record children mtypes point fields 
section ll see input output parameters functions methods record mtypes 
arrays statically fixed size type converted record mtypes 
class list float val list recursive unit recursive java list corresponding mtype 
children identical mtype java class type point float fields mtype type point defined float 
languages constructs union types corba idl represent choice alternatives 
pointers may null choices may may point 
object represents sense choice methods invoke 
choice mtype captures common property choice appears languages 
list child mtypes choice mtype represents set alternatives 
pointers child representing null case unit mtype referred type 
programmer may state annotation pointer may null case pointer translated mtype referred type choice mtype 
recursive type declaration translated mtype graph containing cycle 
special recursive mtype node placed cycle back pointers node represent self 
example shows definition java linked list 
shows mtype corresponding java declaration 
array type indefinite size modelled record mtype fixed number elements arbitrary number arranged total order 
translate homogeneous ordered collections indefinite size recursive mtypes 
example array float size known runtime represented mtype java linked list represented 
implies mockingbird generate adapters types 
arrays implicit float float arrays 
regardless array implicit explicit annotations may provide static length resulting record mtype runtime length resulting recursive mtype 
ports functions methods mockingbird supports functions language process boundaries methods objects interfaces 
port mtype model constructs 
port mtype port represents addresses values mtype may sent 
single child port mtype node corresponds mtype value sent 
port mtype model simple message passing 
example port integer may mtype queues possibly remote send integers 
consider function takes int parameter returns float 
remote invocation consist integer address callee send floating point reply 
invocation mtype record integer port real 
represents address invocations sent mtype port record integer port real 
general mockingbird translates function port record port record mtype formed mtypes function input parameters record mtype formed mtypes function outputs 
default parameters inputs return value single output parameter may annotated 
mockingbird views object passed port accepts invocations methods 
mtype form port choice mtypes various method invocations 
noted earlier objects passed value case record mtypes 
example example programmer load fitter declarations supporting declarations 
programmer annotate start parameters fitter correspond line return value fitter parameters pts array length count 
mentioned programmer indicate point fields java line null aliased 
indicate contain non null point objects 
inherits standard class vector contain object type including null 
mockingbird certain annotations standard java classes 
example vector treated automatically ordered collection indefinite size 
eventually process terminates declarations translating similar mtypes 
ignoring detail mtypes port record port record record real real record real real recursive type representing list record real real 
general process need terminate identical mtypes subtype may differ rule isomorphism associative rule mentioned earlier 
confirms types interoperable stub generated 
implementation current implementation mockingbird written mainly java portions supporting runtime written parser modified version ibm compiler corba idl parser built available grammar java parser simple extractor type declarations java class files 
type declarations parsed internal data structure called stype syntax tree representation original declaration 
records relevant annotations defaults explicitly applied programmer 
mentioned order generate converters mockingbird determine selected types equivalent subtype 
computation nontrivial possible presence recursion definitions types 
various studies problem deciding equivalence subtyping recursive types particular amadio cardelli 
algorithm mockingbird 
extend amadio cardelli algorithm isomorphism rules allow flexible matching types 
example assume record choice mtypes associative commutative 
rules record integer record real character record character real integer equivalent 
set isomorphism rules mockingbird influenced previous bruce rules necessarily differ due differences type system 
issues discussed section 
determines types equivalent subtype generates coercion plan 
coercion plan internal data structure incorporates discovered structural correspondences mtypes information related concrete representation values memory 
coercion plan stub generator generate adapters types 
local java interactions handled generating jni code distributed interactions may iiop wire format 
currently stub compiler generates code directly stubs 
near hope design intermediate representation allow compiler optimizations increase efficiency code 
user experiences mockingbird prototype state evolution colleagues working internal projects 
near plan available research community part product 
substantial trial mockingbird involving research prototype new version ibm visual age compiler underway 
version parts development environment reimplemented java compilation engine 
interface parts consists highly inter related classes total methods 
mockingbird build miniature version system twelve carefully chosen classes representing issues expected arise full set 
developed scripting technique allows annotations worked detail representative classes applied batch mode larger set 
mockingbird deals efficiently miniature system semantic obstacles stand way dealing full system 
scalability mockingbird algorithms full system ongoing investigation 
mockingbird experiment develop java interface part programming api lotus notes 
full notes api consists methods limited prototype covered small representative set classes 
feasibility covering complete api mockingbird demonstrated 
mockingbird experiment support java programming framework synchronous collaboration electronic commerce applications 
colleagues developing collaborative java objects replicated java objects capable coordinated update multiple sites 
algorithms needed support objects tuned concurrency latency avoidance required message passing remote invocation model 
colleagues declared message types needed java classes indirectly incorporated application specific java classes 
mockingbird generated custom send receive stubs messages allowing colleagues implement collaborative objects completely java style algorithms suggested 
collaborative java objects develop application field trial customer site 
project illustrates mockingbird useful distributed programming single language supports messaging remote invocation gracefully 
engaged making mockingbird prototype robust complete finishing performance scaling studies pursuing challenging research questions motivated experience project 
respect prototype building support certain constructs exceptions unions corba type support dynamic type construct similar implementation currently incomplete 
exploit mockingbird subtyping support effectively java marshaling runtime handle case subclass substituted parent class 
detects substitution objects passed 
working developing general framework stub compilation handle full complexity coercion plans generated 
ad hoc techniques handle common situations easily modified extended 
deficiencies kept prototype useful initial users 
scaling mockingbird handle interfaces large number classes underway algorithms tuned accordingly 
engaged establishing realistic set runtime performance benchmarks determine declarations approach adds overhead compared competing technologies anticipate 
recognize mockingbird handles structural similarity 
certain cases programmer may wish provide semantic non structural information 
example line represented slope intercept pair line points programmer wishes convert representations 
dealing information requires programmer provide hand written conversions integrated automated structural ones 
currently designing mechanisms composing programmer supplied conversions mockingbird structural ones 
set annotation panels improved considering fundamentally new ways entering annotation level information example drawing rubber bands parts types 
investigating best interact programmer concerning mismatches signatures 
currently mtype diagram depict mockingbird view type current annotations 
approach works trained programmers mtypes resulting different types normalized look similar 
mockingbird types appear similar visually equivalent application powerful isomorphism rules 
mockingbird needs sophisticated diagnostics aid programmer isolating mismatches types 
certain cases desirable avoid mtype display entirely favor showing portions original declarations may annotated 
exploring variety solutions problem 
final area concerns theoretical underpinnings mockingbird 
algorithms translate annotated declarations mtypes algorithms compare mtypes raise questions completeness correctness decidability 
justify mockingbird users usefulness aim characterize supported set transformations formally 
developing semantic model mtype system current set transformations sound 
completeness decidability results exist literature subsets rules combine results remains open question 
posed decidability question mtype comparison intuitively reasonable sets isomorphisms slightly richer ones presently employ 
formulation decidability problem solved available 
related definition isomorphism multilanguage generalization type isomorphisms 
previous type signatures search keys find components libraries 
type isomorphism widen search ignoring inessential differences argument tuple order signatures curried uncurried form parameterized type place specific 
mockingbird extends results type system including choices recursive types 
mockingbird turns results different purpose generating adapter automatically 
enriching type system recursive types unable claim deeper completeness results 
prototype exploits type isomorphism multilanguage context generates adapters 
employs generalization relaxed matching wing 
mockingbird automates wider class isomorphisms particularly ones involving non constructed types unions arrays objects public instance variables 
addition mockingbird adapters network enabled require recompilation components 
idl compilers flick flexible 
flick relaxed strict mapping characterizes tools 
flexibility provided flick limited 
accepts idls inputs idl declaration declaration stub generation 
uses presentation styles motivated performance considerations select form output 
powerful declarations stub 
idea generating stubs programming language declarations idls influenced concert project 
reused concert runtime project mtype system loosely concert signature language 
concert mockingbird require programming language extensions modifications compilers 
furthermore type isomorphisms explored mockingbird deeper 
development applications heterogeneous components bridge existing software systems complex error prone task 
developed prototype tool mockingbird eases burden programmers allowing existing type declarations generating adapters interfaces 
contrast single declaration tools example idls impose types side interface forcing programmers integrate types existing application structure 
mockingbird maintains coverage languages idl compilers uses powerful isomorphism rules algorithms allow flexible matching types 
shown detailed description mockingbird prototype examples tool feasible useful 
initial experiences mockingbird projects confirmed belief compiling stubs pairs declarations natural programmers 
currently exploring strategies making mockingbird intuitive efficient 
cardelli 
subtyping recursive types 
acm transactions programming languages systems toplas 
gregory andrews 
synchronizing resources 
acm transactions programming languages systems october 
auerbach barton 
type isomorphisms recursive types 
technical report rc ibm watson research center 
joshua auerbach arthur goldberg germ goldszmidt gopal mark kennedy rao james russell 
concert language distributed programming 
winter usenix conference january 
joshua auerbach gopal mark kennedy james russell 
concert supporting distributed programming language extensions portable runtime 
th international conference distributed computing systems june 
joshua auerbach james russell 
concert signature representation idl intermediate language 
proceedings acm sigplan workshop interface definition languages january 
bal steiner tanenbaum 
programming languages distributed computing systems 
acm computing surveys september 
barrett kaplan wileden 
automated support seamless interoperability software systems 
fourth symposium foundations software engineering october 
black hutchinson jul levy carter 
distribution types emerald 
ieee transactions software engineering january 
bruce di cosmo longo 
provable isomorphisms types 
mathematical structures computer science 
chandy kesselman 
cc declarative concurrent object oriented programming language 
technical report cs tr california institute technology 
roberto di cosmo 
isomorphisms types calculus information retrieval language design 
birkhauser 
eide frei ford lepreau lindstrom 
flick flexible optimizing idl compiler 
sigplan conference programming language design implementation 
acm june 
hubbard 

www alphaworks ibm com 
michael jones richard rashid 
mach matchmaker kernel language support object oriented distributed systems 
technical report cmu cs cs department cmu september 
liskov 
distributed programming argus 
comm 
acm march 
microsoft digital equipment 
component object model specification 
microsoft 
object management group 
common object request broker architecture specification edition 
open software foundation cambridge mass osf dce release developer kit documentation set february 

types search keys function libraries 
journal functional programming 
robert strom david bacon arthur goldberg andy lowry daniel yellin alexander yemini 
hermes language distributed computing 
prentice hall january 
sun microsystems 
sun network programming 
sun microsystems 
java remote method invocation specification 
technical report sun microsystems 
xerox 
courier remote procedure call protocol december 
technical report 
wing 
signature matching tool software libraries 
acm transactions software engineering methodology april 

