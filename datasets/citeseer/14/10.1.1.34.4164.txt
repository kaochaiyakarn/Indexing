deriving backtracking monad transformers functional pearl ralf hinze institut ur informatik iii universit bonn bonn germany ralf informatik uni bonn de pretty printing hughes introduced fundamental techniques deriving programs speci cation speci cation consists signature properties operations signature required satisfy 
brie rst technique term implementation represents operations terms works de ning mapping operations observations mapping seen de ning simple interpreter 
second context passing implementation represents operations functions calling context observations 
apply techniques derive backtracking monad transformer adds backtracking arbitrary monad 
addition usual backtracking operations failure nondeterministic choice prolog cut operation delimiting ect cut supported 
categories subject descriptors programming techniques applicative functional programming programming languages language classi cations applicative functional languages programming languages language constructs features control structures polymorphism log ics meanings programs specifying verifying reasoning programs speci cation techniques logics meanings programs semantics programming languages algebraic approaches semantics logics meanings programs studies program constructs control primitives general terms design languages theory veri cation keywords program derivation monads monad transformers backtracking cut continuations haskell prolog permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp montreal canada 
copyright acm 
derive program speci cation 
ideally derivation explains motivates various design choices taken particular implementation 
best derivation eliminates need called eureka steps usually inevitable program explained say means example 
pretty printing hughes introduced fundamental techniques deriving programs speci cation :10.1.1.38.8777
techniques provide programmer considerable guidance process program derivation 
illustrate utility versatility apply framework derive monad transformers things add backtracking arbitrary monad 
brie monad transformer mapping monads augments monad certain computational feature state exceptions nondeterminism 
traditionally monad transformers introduced single big eureka step 
introductory textbook functional programming fails explain particular de nitions monad transformers 
de ning exception monad transformer bird remarks chosen write 
answer works 
building hughes techniques try provide satisfying answer 
reader prepared results somewhat di erent standard textbook examples 
organized follows 
sec 
reviews monads monad transformers 
sec 
introduces hughes techniques means simple example 
sec 
applies framework derive backtracking monad transformer adds backtracking arbitrary monad 
sec 
extends design sec 
include additional control constructs prolog cut operation delimiting ect cut 
sec 
concludes points directions 

preliminaries monads proposed moggi means structure denotational semantics 
wadler popularized moggi idea functional programming community monads structure functional programs 
haskell monads captured class de nition fig 

essential idea monads distinguish computations values 
distinction re ected type level element represents computation yields value type trivial computation class monad return 
fail string const fail error monad class 
immediately returns value denoted return operator commonly called bind combines computations applies result computation derived operation provides handy shortcut interested result rst computation 
operation fail useful signaling error conditions ect 
note fail stem mathematical concept monad added monad class pragmatic reasons see sec 

operations required satisfy socalled monad laws 
return return explanation laws refer reader sec 

note fail intentionally left unspeci ed 
di erent monads distinguished computational features support 
computational feature typically accessed number additional operations 
instance backtracking monad additionally supports operations false denoting failure nondeterministic choice 
relatively easy construct monad supports single computational feature 
unfortunately uniform way combining monads support di erent computational features 
reason simply features may interact di erent ways 
uniform method augmenting monad certain computational feature 
method captured class de nition introduces monad transformers 
class transformer promote monad observe monad monad transformer basically type constructor takes monad monad additionally provide operations operation embedding computations underlying monad transformed monad inverse operation allows observe augmented computations underlying monad 
observe forgets structure general partial function 
follows abbreviate observe promote 
turning laws require promotion respect monad operations 
return return 
laws determine monad morphism 
general respect operation underlying monad provides order guarantee program new features behaves underlying transformed monad 
counterpart quite monad morphism 
return return 

second law weaker corresponding law 
unreasonable expect computations general mimicked 
adding abnormal termination section reviews hughes technique means simple example 
show augment monad operation allows terminate computation abnormally 
monads additional features introduced subclasses monad type exception string class monad raise raise exception call raise terminates current computation 
property captured law raise raise formalizes raise left zero 
try derive monad transformer feature 
determine raise observed base monad 
specify 
raise fail appears reasonable choice know underlying monad 

consider operation trapping exceptions handle order keep introductory example short simple 
worth noting derivation fully edged exception monad transformer proceeds similar derivation sec 

term implementation term implementation represents operations simply terms algebra works de ning interpreter language 
operations return raise datatype implements term algebra consequently comprises constructors 
adopt convention monad transformers names upper case 
constructor names re names operations rst letter upper case operators pre xed colon 
data raise return raise raise raise exception promote note de nition involves existentially quanti ed type variable type 
ghc hugs syntax existential quanti cation existentially quanti ed variable bound explicit universal quanti er written constructor 
data raise return raise raise raise exception promote instance monad raise return return instance raise raise raise raise instance transformer raise promote promote observe return return observe return observe observe observe observe raise fail observe promote observe 
observe raise fail observe promote term implementation raise operations return raise implemented corresponding constructor 
words operations 
performed seen de ning tiny interpreter monadic language 
case de nition straightforward 
return return 

raise fail 
promote ll blank right hand side 
appears impossible de ne 
terms constituents 
way dilemma case distinction 
return 



raise fail 
promote 
equation simple consequence monad laws laws 
particular second equation employs associative law reduce size rst argument 
rewrite step analogous rotating binary tree right 
fig 
summarizes term implementation 
note sequel omit trivial instance declarations monad raise raise raise 
correctness 
de nition exhaustive 
furthermore terminating size left argument steadily decreasing 
establish termination called polynomial interpretation operations return raise promote multivariate polynomial op variables associated ary operation op 
equation show variables ranging positive integers op en op en 
note consider bind special case result rst argument ignored 
inclusion full generality feasible technically involving interpretation depends value computes 
implementation satisfy speci cation 
working free algebra laws hold expressions return return return example distinct unrelated terms 
laws speci cation hold observation 
monad laws 
return 

return 

rst third direct consequences de nition 
second shown induction fortunately live weakened laws way run computations type raise 
simplified term implementation better naive term implementation 
major criticism rst attempt operations exploit algebraic laws 
conceivable subset term algebra 
instance need represent raise raise return systematic way determine required subset terms program simpli er datatype raise exploits algebraic laws far possible 
turns need modify slightly 
raise raise return return return raise raise promote promote 
raise raise promote promote inspecting right hand sides see require conjunction promote furthermore equivalent return fact restrict subset term algebra 
data raise return raise raise exception hughes call elements new datatype simpli ed terms :10.1.1.38.8777
avoid term normal form canonical form distinct terms may necessarily semantically di erent 
instance return represented return return return representation de nition simpler 
fact directly laws 
complete implementation appears fig 

interested de ning monad monad transformer omit constructor resulting datatype corresponds exactly standard de nition exception monad 
eciency 
naive implementation rst de nition running time proportional size computation 
unfortunately improved term implementation quadratic worstcase behaviour 
consider expression 
return 
return 
amortized running time bind proportional size rst argument takes steps evaluate expression 
situation analogous attening binary tree 
bad luck 
context passing implementation improve implementation operations sacri cing runtime eciency try improve de nition 
rewriting speci cation nal context passing implementation 
start avoid pattern matching specialize op replace equations concerning single equation 
op op de ne return 
raise fail promote 
interestingly parameter twice conjunction 
attempt eliminate mutual recursive dependence try pass 
parameter variation call speci ed follows 
op 
op 
derive de nition op return assume precondition holds note equation number refers precondition reason 
return speci cation assumption 
return de nition 
assumption calculations promote raise similar 
remains infer de nition op 
speci cation assumption 
de nition 
speci cation 
speci cation assumption 
dependence vanished 
summarize 
return 



raise fail 
promote note constructors appear left hand sides 
means able remove interpretative layer return implemented directly return general consistently replace op op 
silently converted term implementation context passing implementation 
see term context passing appropriate consider nal speci cation context passing implementation 
op 
op 
parameter op seen representation op calling context 
represent context expression hole 
nub story operation knows context called furthermore able access rearrange context 
gives implementor greater freedom manoeuvre compared simpli ed term algebra 
instance associative law improve eciency 
contrast simpli ed term variety know outer binds consequently falls eciency trap 
quite instructive infer operations implementation scratch speci cation 
fig 
summarizes calculations 
interestingly monad law law raise law invoked exactly 
words laws speci cation necessary sucient deriving implementation 
remains determine type new monad transformer 
easily accomplished inspecting data raise return raise raise exception instance monad raise return return return raise raise instance raise raise raise raise instance transformer raise promote return observe return return observe observe 
observe raise fail simpli ed term implementation raise de nition 
note equals recall possesses type 
equivalent 

consequently new transformer type term implementation requires existential quanti cation context passing implementation universal quanti cation 
nal implementation appears fig 

certainly recognize implementation identical de nition continuation monad transformer 
types di erent raise involves rank types continuation monad transformer additionally parameterized answer type cont ans ans ans transformer raise constitutes smallest extension allows add raise 
note instance callcc de nable cont ans raise see sec 
rank types advantages parameterized types 

adding backtracking de nition backtracking monad monad additional operations constant false denotes failure binary operation denotes nondeterministic choice 
class de nition contains third operation termed cons provides handy shortcut return class monad backtr false cons cons return operations required satisfy laws 
false false note raise de ned newtype type 
introduces additional data constructor ects readability code 
employ type declarations worked newtype declarations 
false false false form monoid false left zero distributes leftward 
aim de ning backtracking monad transformer specify interaction promoted operations consider deterministic computation computation succeeds exactly 
formalizes intuition deterministic computation pushed disjunction left branch 
specify backtracking operations observed base monad 
false fail false 
return return observe rst answer nondeterministic computation 
term implementation free term algebra backtracking monad type de nition 
data backtr return backtr backtr false backtr backtr promote try derive interpreter language 
de nition base cases follows immediately speci cation 
obtain 
return 



false fail false 


promote 
return speci cation assumption observe return observe assumption speci cation assumption observe observe speci cation observe speci cation assumption raise speci cation assumption observe raise observe raise fail promote speci cation assumption observe promote observe assumption observe observe return speci cation observe return return deriving context passing implementation raise type raise instance monad monad raise return instance monad raise raise raise fail instance transformer raise promote observe return context passing implementation raise similarly case distinction 
return return 

false 


promote unfortunately case remains 
obvious way simplify 

usual help making case distinction 
return 



false 


promote 
succeeded building interpreter backtracking 
fig 
lists complete implementation 
correctness 
clearly case distinction exhaustive 
establish termination polynomial interpretation 
return false promote laws speci cation hold observation 
simplified term implementation take brief look simpli ed term implementation 
inspecting de nition recall simpli er case distinction see need terms false return return promote promote promote eliminate return cons false return cons explains de nition simpli ed terms 
data backtr false cons backtr backtr essence simpli ed term algebra extension datatype parametric lists false corresponding cons corresponding 
additional constructor di erence monad monad transformer 
note standard list monad transformer list applied called commutative monads 
contrast backtr works arbitrary monads 
context passing implementation sec 
seen context passing implementation essentially removes interpretative layer naive term implementation 
apply steps derive systematically context passing implementation backtracking 
leave details reader sketch main points 
case analysis performs may conclude complex context form 

contexts rewritten form 
second inspect data backtr return backtr backtr false backtr backtr promote instance transformer backtr promote promote observe return return observe return observe observe observe observe false fail false observe observe observe promote observe 
observe false fail false observe return return observe return observe observe observe observe false observe observe observe observe promote observe observe false observe observe observe observe promote observe promote term implementation backtr 
equations concerned 
see appears context 
likewise twice context 

observations motivate speci cation 
op 
op 
nice thing hughes technique mistakes point discovered operations derived 
instance may unnecessary parameterized simply postulate 
able derive de nition 
better develop speci cation making calculations 
derivation false instance motivates assumption derivation return suggests 
assumption derivation con rms right choice 
complete derivation appears fig 

interestingly equation speci cation invoked exactly 
remains determine type backtracking monad transformer 
assume second parameter called failure continuation type rst parameter called success continuation type follows type new transformer answer type universally quanti ed 
see shortly reasonable choice 
fig 
summarizes implementation 
reconsider fig 
note derivation return false completely independent speci cation 
laws required derivation 
relies appears sensible way observe promoted operations 
suggests de ne di erent observations changing de nitions operations 
words may generalize speci cation follows arbitrary observer function 
op op illustrate generalized speci cation assume want collect solutions nondeterministic computation 
specify observation solve type monad backtr solve false return solve return 
solve solve solve 


monad 
ms ms return implementation solve readily derived specialize return false 
obtain op op false return return speci cation assumptions observe return observe assumptions speci cation assumptions observe observe speci cation assumption observe speci cation assumption false speci cation assumptions observe false observe false observe assumption speci cation assumptions observe observe observe speci cation assumption observe speci cation assumptions promote speci cation assumptions observe promote observe promote observe assumptions observe observe return false speci cation observe return observe false observe return fail false return fail false deriving context passing implementation backtr 
type backtr instance monad monad backtr return instance monad backtr backtr false id 
instance transformer backtr promote observe return fail false context passing implementation backtr 
consequently solve op op 
return 
providing solve additional observer function promote backtracking monad 
sols monad backtr backtr sols 
return way solution collecting function new computational primitive 
monad morphism furthermore know sols satis es suitable variants 
note implementation sols non trivial rank types 
variant backtr parameterized answer type sols assigned type 
adding control extend language additional prolog control constructs 
rst called cut denoted allows reduce search space dynamically pruning unwanted computation paths 
second termed call provided controlling ect cut 
constructs introduced subclass backtr class backtr cut cutfalse call return cutfalse cutfalse false operational reading call follows 
cut succeeds exactly returns 
side ect discards previous alternatives 
operation call delimits ect cut call executes cut invoked discards choices called 
class de nition contains third operation called cutfalse captures common programming idiom prolog called cut fail combination 
note instances class cut de ne cutfalse 
default de nitions employ knowledge properties operations shall consider 
sketch axiomatization brie depth treatment interested reader referred 
cut characterized equations 
return 
rst equation formalizes intuition cut discards past choice points alternatives appear left 
hand cut ect choice points alternatives appear right 
fact captured 
axiom simply records cut returns 
immediate consequence axioms return false explains default de nition cut 
see relation holds replace return false 
operation cutfalse enjoys algebraic properties somewhat easier remember cutfalse left zero 
cutfalse cutfalse cf cutfalse cutfalse cf default de nitions fact cutfalse nable 
likewise sets axioms interchangeable 
may de ne cutfalse false take equations axioms laws cutfalse simple logical consequences vice versa 
call required satisfy call false false call return return call call call call cutfalse call call call 
call behaves essentially cut inside local ect 
remains lay new operations observed underlying monad 
call note need specify observation cutfalse imply 

cutfalse term implementation free term implementation faces problems technical fundamental 
consider technical problem rst 
inspecting type signature cut nd cut turned constructor right type 
de ne type say cut exactly type 
alas type signature allows substitution instance cut 
stumble general problem haskell data construct capable expressing arbitrary polymorphic term algebras 
fortunately axioms save day 
expressed terms cutfalse operation polymorphic type turn cutfalse constructor 
data cut return cut cut false cutfalse cut cut call cut promote turning de nition encounter problem fundamental nature 
start discover term 
call simpli ed 
case distinction 
call call reducible 
crux axiom speci es interaction call 
rightly 
call opens new scope cut 
reasonably expect nested calls collapsed 
suggests de ne interpreters call means course implementation longer free term algebra 
resulting code straightforward appears fig 

equations involving cutfalse fact cutfalse left zero call maps cutfalse false 
note falls back call avoid duplication code 
simplified term implementation sake completeness simpli ed term algebra augments type backtr sec 
additional constructor cutfalse data cut false cutfalse cons cut cut essence lists di erent terminators false cutfalse interestingly exactly structure give denotational semantics prolog cut cutfalse call termed esc unesc 
context passing implementation seen realization cut call demanding way simplify nested invocations call regard context passing implementation means consider nite number possible contexts 
grammar notation characterize set possible contexts follows 

call context simple form call enclosing context 
contexts organized list stack fashion 
usual represent operations functions contexts observations 
main di erence sec 
operation consider di erent contexts contexts recursively de ned 
note duality term context passing implementation sec 
interpreters call interpreter consider operation 
contexts operation consider context 
turning implementation details see greatest diculty get types right 
contexts represented recursive datatype constructors acronym observe bind choice context call bind choice context 
rst takes arguments success failure continuation second expects arguments continuations representation enclosing context 
order infer types useful consider data cut return cut cut false cutfalse cut cut promote instance cut cut cutfalse cutfalse call return return call return call call call call false false call cutfalse false call call call promote promote call 
call false false call cutfalse false call return return call call return call call call call false call call cutfalse false call call call promote promote call call false call call cutfalse false call call call promote promote call call promote promote instance transformer cut promote promote observe observe call observe monad cut observe return return observe promote observe 
observe false fail false observe return return observe promote observe promote term implementation cut speci cation context passing implementation 
speci cation similar sec 
clauses context 
op 
op 
op 
call op call call call rst clause closely corresponds speci cation sec 

reason may assign components types type type answer type 
implies type contexts parameterized data second clause speci cation essentially structure rst 
main di erence components dwell transformed monad underlying monad 
furthermore additionally contains enclosing context may di erent type 
illustrate consider context call type assume enclosing context type reason require argument type entire context answer type type cut type cut cut motivates de nition 
data cut cut cut type cut note intermediate type represented existentially quanti ed variable 
mutually recursive types cut somewhat mind involve universal existential quanti cation combination features author seen 
types right address derivation various operations 
calculations analogous sec 

conduct inductive proof show propagates stack contexts proof left exercise reader 
derive cut reason 
speci cation assumptions call call call false assumption call false false derivation context proceeds analogous fashion 
call obtain call call return false speci cation 
call return call false 
return call false call 
return false de nition cons 
cons false call installs new context cons fail initial failure continuations 
complete implementation appears fig 

note monad operations pattern match context 
fact sets implementation apart continuation passing style cps context anonymous function inspected 
contrast cps implementations continuations success failure cut continuation 

naturally credit goes hughes introducing wonderful techniques deriving programs speci cation 
calculations appear albeit specialized monads :10.1.1.38.8777
step monads monad transformers big pleasant ndings 
able derive implementation prolog control core axiomatization quite remarkable 
furthermore applied techniques derive state monad transformers state exception monad transformers exc cases techniques worked 
remains done 
address problem promotion general 
known di erent combinations transformers generally lead di erent semantics operations involved 
instance composing state backtr yields backtracking monad backtrackable state characterized follows 
store false false store store store reversing order transformers results global state enjoys di erent axiomatization 
store store variants straightforward derive implementation corresponding speci cation rst case promoted state second case store promoted backtr 
unfortunately harder cases remain author able derive promotion satisfying way 
problematic operations general interaction explicitly speci ed 
instance clear derive promotion call state monad transformer 
data ctx cut cut cut ctx type cut ctx instance monad monad cut return ctx case ctx ctx ctx ctx case ctx ctx 
ctx instance monad backtr cut false ctx case ctx ctx ctx ctx case ctx ctx 
ctx instance monad cut cut ctx case ctx fail false ctx false ctx call ctx cons false ctx instance transformer cut promote ctx case ctx ctx ctx observe return fail false context passing implementation cut 
acknowledgments anonymous referees valuable comments 


simple operational denotational semantics prolog cut 
theoretical computer science march 
bird 
functional programming haskell 
prentice hall europe london nd edition 
de bruin de 
continuation semantics prolog cut 
az orejas editors proceedings international joint conference theory practice software development vol 
lncs pages 
springer verlag 
dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science volume formal models semantics chapter pages 
elsevier science publishers 
north holland 
hinze 
prolog control constructs functional setting axioms implementation 
international journal foundations computer science 
appear 
hughes :10.1.1.38.8777
design pretty printing library 
jeuring meijer editors advanced functional programming lncs pages 
springer verlag 
jones duponcheel 
composing monads 
technical report yaleu dcs rr department computer science yale university december 
odersky 
extension ml rst class types 
proceedings acm workshop ml applications san francisco california pages 
acm press 
liang hudak jones 
monad transformers modular interpreters 
proceedings st acm symposium principles programming languages san francisco california pages 
acm press 
meijer 
calculating compilers 
phd thesis nijmegen university 
moggi 
view programming languages 
technical report ecs lfcs department computer science edinburgh university 
moggi 
notions computation monads 
information computation 
peyton jones hughes editors 
haskell non strict purely functional language february 
available www haskell org definition 
sterling shapiro 
art prolog advanced programming techniques 
mit press 
wadler 
comprehending monads 
proceedings acm conference lisp functional programming nice pages 
acm press 
wadler 
essence functional programming 
proceedings th acm symposium principles programming languages fe new mexico pages 
acm press 
wadler 
monads functional programming 
jeuring meijer editors advanced functional programming lncs pages 
springer verlag 
