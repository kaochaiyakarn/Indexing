analysis described automatically find models order formulas relational operators scalar quantifiers 
formula translated quantifier free boolean formula model exactly original formula model scope involving finite number atoms 
presents simple logic gives compositional translation scheme 
reports alcoa tool scheme analyze variety specifications expressed alloy object modelling notation logic 
relational logic uses sets relations place place predicate symbols 
predicate written written power relational logic comes ability combine sets relations variety operators 
formula example written operators written set difference 
relational operators eliminate quantifiers written written relational logic powerful technical sense formulas involving transitive closure operator desugared predicate logic 
fully automatic analysis logic 
formula bound number atoms universe analysis determines exists model formula assignment values sets relations formula true uses atoms bound permits returns 
order logic undecidable analysis decision procedure model formula may model larger bound 
analysis useful formulas models small ones 
theory construct formula smallest model requires atoms universe practice surprisingly atoms suffice 
analysis problem decidable restriction finite universe theoretically intractable 
atoms universe relation increases space potential models factor analysis handle enormous space section report case studies spaces configurations analyzed seconds 
model exists usually rapidly seconds analysis takes long time reasonably bet model 
automating order relational logic daniel jackson laboratory computer science massachusetts institute technology lcs mit edu analysis designed object models lie heart object oriented development methods support tools 
implemented alcoa tool publicly available september 
alcoa uses logic intermediate language alloy input language 
analysis ways check consistency formula finding model check validity theorem looking counterexample model theorem negation 
context object model consistency checking amounts simulation generating states executions 
validity checking variety forms checking constraint follows operation refines operation preserves invariant 
logic generality variety applications finding bugs code checking verification conditions specification tool establishing consistency requirements goals analyzing architectural style descriptions generating snapshots class diagrams 
knowledge presents practical algorithm analyzing automatically logic underlies ocl specification languages 
previous algorithm limited quantifier free relational calculus algorithm handles full logic quantifiers languages easily translated 
structured follows 
logic syntax type system formal semantics 
analysis explained 
report case study applications analysis give performance results 
closes comparison related brief discussion applications prospects 
logic logic defined syntax left type system middle semantics right 
features standard focus novelties treatment scalars singleton sets encoding sets degenerate relations dot operator form navigation expressions 
motivation design logic explained detail 
syntax syntax identical standard mathematical syntax chosen ascii typographic symbols operators 
stronger connection object modelling language alloy pure ascii ease helps distinguish operators syntax mathematical functions define 
problem decl formula decl var type type type type formula expr expr subset formula negation formula formula conjunction formula formula disjunction type formula universal type formula existential expr expr expr union expr expr intersection expr expr difference expr expr navigation expr transpose expr transitive closure formula comprehension var var var variable var var application logic strongly typed formula accompanied declarations set relation variables call combination formula declarations problem 
declaration associates type variable 
kinds type set type denoting sets atoms drawn relation type denoting relations function type denoting functions atoms values type types constructed basic types denote disjoint sets atoms 
upper case names basic types lower case names arbitrary types 
type index type basic type may set type relation type function type 
functions correspond predicates arity greater 
predicate rides holds rides horse race example declared function rides race horse unit unit unit unit syntax type rules semantics logic race expression rides denote relation mapping horses race 
functions retain binary flavour logic fit naturally diagrams lead simpler expression syntax accommodate multiplicity markings 
alloy question marks rides race 
horse 
indicate race rides horse vice versa 
alternative functions allow relations tuples race horse 
cally anyway encoded introducing basic type tuple introducing basic type elements relation tuple run projections race horse 
including functions logic able formulas section 
scalar types 
declare scalar variable declare set add constraint set singleton formula env boolean expr env value env var type value value atom atom atom value 
unit unit 
smallest unit allows navigation expressions written uniformly need convert back forth scalars sets partial function problem simplifies semantics implementation 
formulas conventional syntax 
elementary formula stating expression subset equality expressions written pair inequalities direction 
quantified formulas variable declared basic type interpreted bound singleton subsets type 
expressions formed standard set operators union intersection difference unary relational operators transpose transitive closure dot operator form navigation expressions 
unary operators prefixes parsing easy 
set comprehension standard form 
set relation variables expressions function variables functions general 
ensuring functions applied variables guarantees expression involving function defined function argument denote singleton set 
type system treat sets semantically degenerate relations viewing set relation unit unit unit special atom sole member special type unit 
treatment scalars singleton sets purely trick semantics uniform ignored user logic 
type variable declared represented unit typographic arrow remind reader types formed necessarily true relations 
typing rules determine problems formed 
judgment says type environment expression type judgment says environment formula typed 
omitted obvious rules conjunction identical rules intersection 
problem type checked initial environment binds variable type declared set types appropriately represented relations unit 
environment extended checking quantified formulas set comprehensions 
example rule universal quantification says quantified formula typed body welltyped environment extended binding bound variable declared type 
set operators applied sets relations applied set example type unit 
likewise dot operator applied sets relations combination typing allows 
note typing rules clear sets legal bound variables arguments function applications 
semantics meaning logic defined standard denotational semantics 
meaning functions interprets formula true false interprets expression value 
values binary relations atoms functions atoms values 
interpretation context environment binds variables basic types values meaning function takes syntactic object environment arguments 
definition defines meaning expression formula terms constituents 
example elementary formula true environment relation denoted subset relation denoted quantified formula true true environment obtained adding binding member set denoted type membership condition written unit set sets encoded relation 
assume bound variables systematically renamed necessary avoid shadowing 
operators standard interpretation dot operator double duty 
semantic definition relational composition argument transposed arguments reversed 
motivation defining dot way set relation denotes image combining treatment scalars singleton sets results uniform syntax navigation expressions 
example person mother denote mother parents denote set parents parents brother denote treating sets degenerate relations typing dot operator loosely get added bonus composition relations cross product sets alloy currently exploit uses dot operator relational image costs logic general 
retrieve simpler definition noting semantic equation variable unit set result set 
meaning problem collection formed environments formula evaluates true 
environment formed assigns values variables basic types appearing problem declarations typed assigns variable appropriate value variable type 
example variable type environment value assigned relation set denoted set denoted environments formula true models formula 
avoid term call instances solutions 
formula model said consistent formed environment model formula valid 
negation valid formula inconsistent check assertion look model negation counterexample 
logic undecidable impossible determine automatically formula valid consistent 
limit analysis finite scope bounds sizes carrier sets basic types 
say model scope assigns type set consisting elements 
clearly succeed finding model formula demonstrated consistent 
failure find model scope prove formula inconsistent practice large scope strongly suggests 
examples see analysis involves consider putative theorems 
says difference distributes image sets relations check equality separate inequalities 
negating obtain problem 
analysis produces model counterexample theorem 
case implementation produces minimal model analysis guarantee 
second theorem says relations holds injective relations arbitrary ones 
analysis problem yields model includes value quantified variable skolem constant acts witness existential formula 
third theorem says relations 
negated gives problem inconsistent theorem holds 
analysis analysis involves activities translation boolean formula tool performs solving boolean formula performed shelf sat solver 
steps analysis 
simple manipulations conversion negation normal form skolemization performed formula 
formula translated chosen scope boolean formula mapping relational variables boolean variables encode 
boolean formula constructed model exactly relational formula model scope 
boolean formula converted conjunctive normal form preferred input format sat solvers 
boolean formula sat solver 
solver finds model model relational formula reconstructed mapping produced step 
focus step 
steps involve known manipulations step trivial 
step delegated theshelf tool step generates completely standard boo lean formula exploit advances sat technology change tool 
step computationally intensive cost depends crucially earlier steps performed 
complexity analysis step arises elimination quantifiers 
translating qbf quantified boolean formulas simpler rule powerful highly tuned sat solvers currently available 
normalization relational formula translating relational formula convert negation normal form nnf 
nnf allows elementary formulas negated 
convert nnf simply push negations inwards de morgan laws 
example negated theorem skolemization eliminates existentially quantified variables 
variable existentially quantified formula enclosed universal quantifiers replaced scalar 
previous formula example transformed addition free variable constraint saying represents scalar 
odd replaced existential quantifier constraint simpler original formula translated tiny boolean formula 
variable existentially quantified formula enclosed universal quantifier replaced function 
example convert replacing function adding constraint singleton 
scheme generalizes arbitrary number universal quantifiers simply create function indexed types necessary 
existential quantifiers eliminated skolemization applied inside set comprehensions 
translation relational formula relational formula construct boolean formula model exactly original formula model scope 

fixed scope value relation represented bit matrix ith row jth column ith atom related jth atom 
collection possible values relation expressed matrix mt formula tree xt expr value tree tree var index tree value index value mt merge mt mt ij ij ij mt 
map mt mt merge mt mt mt merge mt mt mt fold mt mt fold mt xt merge xt xt ij ij ij xt merge xt xt ij ij ij xt merge xt xt ij ij ij xt merge xt xt ij ik kj xt map xt ij ji xt map xt closure xt fold mt 
xt merge xt xt ii xt quantified xt create boolean variables 
constraint relation expressed formula boolean variables relational formula similarly expressed introducing boolean variables relational variable 
consider example analyzing formula scope 
represent set vector relation matrix 
expressions translated matrices boolean formulas upper left element example says set includes element maps maps 
upper left element translate set membership assert element left right boolean terms form implication pair corresponding vector elements 
element formula translate negation get disjunction includes formula negation simplified subformula true maps element subformula says requires words non injective merge tree tree tree merge merge merge merge merge merge merge merge merge merge merge map tree tree map map map translation rules tree operations fold tree index tree fold elementary fold fold create var value create fresh boolean variable unit create ij fresh boolean variable create create ut non empty original formula true theorem false 
analysis previous 
extend scheme include quantifiers 
idea intuitively simple little intricate details 
consider universal quantifiers 
way translate universal formula expand body making copy possible value quantified variable conjoining copies 
bad reasons compositional generates unnecessary exploding size formula copies identical 
scheme compositional efficient relatively easy implement 
formula generate mapping environments boolean formulas expression generate mapping matrices boolean formulas 
mapping parameterizes formula matrix values variables subsequently bound 
suppose universal formula variable body mentions additionally quantified variables result translating body mapping environments bind boolean formulas 
translate universal formula form new mapping environments bind pair values yields conjunction formulas previous mapping yielded environments form values approach mirrors semantics logic closely 
syntactic object create function environments meanings 
crucial difference 
semantics environment binds quantified variables set relation variables 
translation values set relation variables encoded matrices boolean variables environment binds quantified variables 
defines scheme terms translation functions left utility functions right 
treating mappings abstractly show represented manipulated concretely 
kinds mapping parameterizing formulas parameterizing values represented indexed matrices boolean formulas 
mappings represented trees leaf nodes formulas values common polymorphic tree type instantiated way 
internal nodes labelled variable names outgoing edges labelled indices correspond values variables 
example scope relational formula free variables represented tree shown 
find formula case takes value second value example follow outgoing edge second outgoing edge reach leaf formula innermost formula third problem section 
exactly form playing role role translation rules involve applications various tree operations defined ml notation right 
merge merges trees combining leaves pairwise map applies operator leaves fold collapses lowest level tree applying function leaves smallest subtree 
translate compound formula translate constituent subformulas merge resulting trees combining formulas leaves 
trees tree operations top tree middle fold operation bottom merge variables appear root leaf order merging easy leaves aside trees isomorphic simply create new tree structure leaves pairwise combinations leaves original trees 
unfortunately trees need variables different subformulas general mention different variables 
merging tricky 
require variables appear order achieved numbering variables quantification depth numbering merging 
merge trees essentially interpose extra level tree omits variable appearing see 
algorithm right 
cases interpreted sequentially matches applied trees degenerate just leaves form new tree applying operator leaves trees share root variable create tree variable root ith subtree merge ith subtrees argument trees root variable tree precedes root variable second depth ordering create tree variable root ith subtree merge ith subtrees tree entire second tree root variable second precedes reverse previous rule tree variable second degenerate create tree variable root ith subtree merge ith subtrees entire second tree tree degenerate second reverse previous rule 
merge function takes different operator translating different kinds formula expression 
example translating elementary formula operator ij ij ij takes matrices boolean formulas returns formula says formula ith row jth column implies formula position embodies intuition values represented bit matrices relation represent superset relation 
quantifiers trees degenerate reduces direct application operator exactly previous scheme 
operator union expressions ij ij ij embodies similar intuition 
shorthand describe function takes returns related formula operator says union matrix formula ith row jth column result disjunction corresponding formulas matrices words pair belongs union relations belongs relation 
tree functions translation simpler merge 
unary operators translated map function creates new tree corresponding unary translation operator applied leaf 
negation formula example obtained negating boolean formula leaf 
transpose expression obtained mirror image matrix leaf 
transitive closure obtained applying operator computes closure iterative doubling explained 
quantified formulas translated fold function 
second argument operator takes tree depth 
example universal formulas distributed conjunction operator returns false empty tree conjunction formulas leaves 
variables tree ordered quantification depth translation body quantified formula sure tree quantified variable appears just leaves 
obtain meaning formula collapse subtrees leaves disjunction conjunction depending quantifier 
set comprehensions handled fold 
operator creates vector boolean formulas leaf order forming set ith element ith value quantified variable body formula true 
quantified variables translated trees unit depth ith subtree vector jth element true false 
declared variables translated values vectors matrices boolean variables sets relations respectively higher dimensional structures functions 
definition function create indices range obvious way scope 
conversion cnf solving mapping back result translation step single boolean formula formula propositional variables 
tree structure remain free variables relational formula declared sets relations explained translated boolean variables appear intermediate nodes tree 
formula converted conjunctive normal form cnf handed solver 
avoid exponential blowup due disjunctions introduce temporary boolean variable subformula 
solver finds solution returns model assigns true false boolean variable 
assignment reconstruct model relational formula follows 
scope create names atoms type relation look assignment value boolean variable ij encode relation insert pair si tj value true 
results analysis described implemented alcoa tool 
alcoa input language alloy attempt combine best features uml lightweight notation 
takes uml emphasis binary relations expression constraints sets objects formed navigations simpler semantics 
implementing analysis alcoa implements logic intermediate language alloy offer functions full generality 
current version alloy allows functions basic types relations call indexed relations outermost existentials skolemized 
respects alcoa implements analysis exactly described 
implementing analysis largely straightforward exception tree manipulation functions bit intricate 
alcoa roughly lines code implement front parsing type inference static semantic checks schema calculus translation intermediate language implement translation subject implement manipulations boolean formula conversion normal form simplifications conversion various solver formats implement user interface 
code written java boolean formula manipulations written choice sat solvers alcoa backend wraps collection shelf sat solvers 
user select solver adjust parameters alcoa user interface 
deterministic solvers sato relsat best :10.1.1.27.1489
early success walksat stochastic solver avoided introducing temporary variables converting cnf 
conversion step bottleneck eliminated aggressive variable 
unfortunately redundancy adds formula stochastic solvers alcoa walksat rarely works 
learnt interesting lesson experiments solvers 
eagerness platform independence planned initially implement solvers java 
prototype tool included trie implementation java davis putnam dp algorithm underlies deterministic solvers 
walksat outperformed dramatically java implementation walksat came factor performance implementation attributed failure dp implementation davis putnam method 
discovered highly tuned implementation davis putnam sato performed orders magnitude better 
appreciate importance flexible backend attach new solvers available 
new expressiveness important consequence ability add quantifiers language 
previous analysis limited pure relational formulas quantifiers 
principle order properties arise software specifications written quantifiers 
say everybody likes winner write winner un likes formula relational expression dot transpose complement likes relation maps persons persons don expression denotes persons don winner formula says set persons empty 
needless say style specification win despite 
experimented algorithm tarski performing elimination automatically generated huge relational expressions 
quantifiers write person winner likes experience far months language tool suggests quantifiers navigation expressions huge difference 
np language checker usable dedicated experts students modest background discrete mathematics pick alloy couple days 
gaining proficiency takes longer course learning construct focused models details language 
constructed analyzed variety models alloy difficult express np 
alcoa far powerful solver able construct larger models 
craft models carefully analyzable longer find necessary adjust models fix errors alcoa exposes 
scope usually catch errors limited state relations alcoa handle relations ease 
examples include com 
took specification sullivan translated alloy 
resulting model lines long relations indexed relation sets 
alcoa able generate automatically counterexamples sullivan colleagues hand analysis 
intentional naming 
khurshid constructed model design name server allows services looked properties 
model lines long relations indexed relation function basic type relation sets 
variety problems discovered design 
alcoa takes longer seconds find counterexamples 
uml metamodel 
translated entire core metamodel uml ocl constraint language uml alloy 
resulting model lines long half size ocl version 
relations sets 
alcoa show metamodel consistent generating sample uml model satisfies constraints additional constraints rule trivial empty model 
finding model takes seconds 
reader bear mind considering size models language alloy np tends succinct languages model checkers 
input model checker smv spin low level program :10.1.1.27.1489
model mobile ip built smv times longer np version 
performance experiment analyzed groups models 
group consists models mentioned demonstrate capability new language analysis 
second group consists models originally written np analyzed previous sat analysis finder toy model macintosh file system uses transitive closure handled tools restricted order predicate logic style model aspect paragraph style mechanism microsoft word developed class exercise mobile ip model exposed flaw internet protocol forwarding messages mobile hosts 
translated alloy quantifiers analyzed alcoa test quantifiers incur significant cost 
results shown tables 
example variety scopes show size space timings 
space number bits encode assignment values sets relations bits corresponds roughly configurations 
analyses table involve invariants number configurations number states analysis table involve executions configuration pair style triple states 
number boolean variables generated formula larger variable 
timings seconds measured pentium ii mhz processor mb memory 
performance significantly improved selecting different solver tweaking solver parameters 
measurements table taken relsat default settings 
translation include timings takes seconds case sat solver bottleneck 
group kinds analysis performed table 
column marked instance gives time taken find solution exists uml example instance demonstrates consistency constraint represents counterexample theorem intentional naming counterexamples theorems 
column marked exhaust gives time taken exhaust space solutions exist 
uml example includes constraints require model element rules solution scope 
cases analyses column involve checking variety valid theorems 
seen new method handle spaces bits configurations ease 
solver exhaust space timings variances increase dramatically scope 
fact problems instance exists instance small scope com intentional naming uml 
timings larger scopes bit suggest better start small scope increase gradually 
second group table considered cases solution previous analysis stochastic solver ran forever solution existed 
column old gives timings old 
run machine third slower machine new experiments performed timings reduced 
new method performs worse old method probably relational expressions give tighter encoding problem 
scales better translation bottleneck overcome standard methods previous method handle specs size table 
related previous analysis analysis described handle quantifiers 
analyses dramatically outperform previous method explicit enumeration set relation values 
just mentioned new analysis scales better previous 
far know analyses order logic handle quantifiers transitive closure 
variety model finders developed group theoretic investigations logic uninterpreted functions handle relations closure 
animators developed prolog underlying engine handle large spaces 
tools relational notations automatic 
theorem provers pvs alcoa prove theorems generate counterexamples need help lemmas proof strategy 
execution engines tool vdm limit notation executable subset user provide test cases 
model checkers designed handle complexity interleaving complexity state structure 
input languages offer relations types require relational operators specified algorithmically low level 
explicit model checkers spin permit declarative specification invariants operations conjunction constraints 
previous analysis described symbolic symbolic model checking explicit representation individual states :10.1.1.27.1489:10.1.1.27.1489
notion scope implicit applications model checking model usually assumes fixed number processors cache lines boolean satisfaction planning essentially reachability analysis linear temporal logic model checking encodings different described :10.1.1.38.4843:10.1.1.26.1309
example scope space instance exhaust com bits intentional naming uml metamodel 
table results new models example scope space old new finder bits style mobile ip table results old models prospects relational logic applications 
analysis useful variety tools alcoa case tool rose analysis generate object diagrams class diagrams architectural style tool analysis check consistency style constraints generate sample architectures alcoa suited aml 
tool developing requirements kaos analysis check consistency goals refinement tool tool analysis verification condition tester find counterexamples proof obligations attempting proof 
developed strategy translating code logic 
analysis able check variety code properties absence executions dereference null pointers create undesirable sharings conformance user defined specifications 
sten peter larsen 
vdm tools lightweight formal methods 
fm trends 
william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
proceedings th acm symposium operating systems principles sosp kiawah island south carolina december 
tool 
core uk england 
www core com html burch clarke mcmillan dill hwang :10.1.1.27.1489
symbolic model checking states 
information computation vol 
pp june 
biere cimatti clarke zhu 
symbolic model checking bdds 
tools algorithms analysis construction systems tacas lncs springer verlag 
bayardo jr schrag :10.1.1.27.1489
csp look back techniques solve real world sat instances 
proc 
th national conf 
artificial intelligence 
dan craigen irwin meisels mark 
analysing specifications 
industrial strength formal methods practice eds 
bowen hinchey september 
di david rosenblum 
exploiting adls specify architectural styles induced middleware infrastructures 
international conf software engineering icse los angeles ca may 
pp 

craig damon daniel jackson jha 
checking relational specifications binary decision diagrams 
proc 
th acm sigsoft conf 
foundations software engineering san francisco ca october pp 
martin davis hilary putnam 
computing procedure quantification theory 
journal acm vol 
pp 

michael ernst todd millstein daniel weld 
automatic sat compilation planning problems 
proc 
th international joint conference artificial intelligence ijcai nagoya japan august pp 

daniel paul owen 
animator sum specification language 
proceedings asia pacific software engineering conference international computer science conference pages ieee computer society december 
hewitt 
experiences animator th international conference users zum reading england april 
gerard holzmann 
model checker spin 
ieee transactions software engineering special issue formal methods software practice volume number may 
daniel jackson 
alloy lightweight object modelling notation 
technical report mit laboratory computer science cambridge ma february 
daniel jackson 
intermediate design language analysis 
proc 
acm conference foundations software engineering florida november 
daniel jackson craig damon 
elements style analyzing software design feature counterexample detector 
ieee transactions software engineering vol 
july pp 

daniel jackson craig damon 
manual 
cmu cs 
school computer science carnegie mellon university pittsburgh pa january 
daniel jackson ian schechter ilya 
alcoa alloy constraint analyzer 
proc 
international conference software engineering limerick ireland june 
daniel jackson jha craig damon 
isomorph free model enumeration new method checking relational specifications 
acm transactions programming languages systems vol 
march pp 

daniel jackson ng jeannette wing 
analysis ipv 
appear formal aspects computing 
daniel jackson 
bug detection constraint solving 
submitted publication march 
available sdg lcs mit edu publications 
knott krause 
implementation specifications program transformation systems project 
unified computation laboratory ima conference series editors rattray clark clarendon press oxford pgs 
henry kautz bart selman 
pushing envelope planning propositional logic stochastic search 
proc 
th national conference artificial intelligence pp 

robert monroe 
rapid development custom software architecture design environments 
phd thesis technical report cmu cs school computer science carnegie mellon university pittsburgh pa august 
sam owre john rushby natarajan shankar friedrich von henke 
formal verification fault tolerant architectures prolegomena design pvs 
ieee transactions software engineering february 
plaisted greenbaum 
structure preserving clause form translation 
journal symbolic computation 
rose visual modeling tool 
rational software cupertino california 
bart selman henry kautz cohen 
noise strategies improving local search 
proc 
aaai pp 

michael spivey 
notation manual 
second ed prentice hall 
silva sakallah 
grasp new search algorithm satisfiability 
ieee international conference computer aided design san jose ca november pp 

john slaney 
finder finite domain enumerator system description 
proc 
th international conference automated deduction 
lecture notes artifical intelligence 
springer verlag berlin 
sullivan socha 
formal methods reason architectural standards 
proceedings international conference software engineering icse boston massachusetts may 
alfred tarski steven 
formalization set theory variables 
american mathematical society colloquium publications volume 
axel van lamsweerde robert darimont emmanuel letier 
managing conflicts goal driven requirements engineering 
ieee transactions software engineering vol 
november 
daniel jackson 
shortcomings ocl object constraint language uml 
response object management group rfi uml 
december 
available sdg lcs mit edu publications 
david 
aml architecture meta language 
automated software engineering th ieee international conference cocoa beach florida usa october 
jos warmer kleppe 
object constraint language precise modeling uml 
addison wesley 
zhang 
sato efficient propositional prover 
proc 
international conference automated deduction cade 
zhang mark stickel 
implementing davis putnam algorithm tries 
technical report artificial intelligence center sri international menlo park ca 
december 
jia 
approach animating specifications 
proceedings th annual ieee international computer software application conference compsac 
august dallas tx 
pp 

