stretching storage manager weak pointers stable names haskell simon peyton jones simon marlow conal elliott microsoft research cambridge simonpj microsoft com microsoft research cambridge microsoft com microsoft research redmond conal microsoft com 
user glasgow haskell compiler asks feature requires specialised support storage manager 
memo functions pointer equality external pointers weak pointers examples 
take memo functions exemplar turn support 
fewer distinct mechanisms needed support memo tables various combinations satisfy variety needs 
resulting set primitives undoubtedly powerful useful 
powerful clear 
focus discussion haskell haskell speci primitives readily settings 
arbitrary function construct version construct new function property returns exactly results applied second time particular argument returns result computed rst time recomputing 
surely task simple functional language 
side ects muddy waters 
known simple problem raises tricky questions 
memo table inherently involves sort benign side ect memo table changed result application function accommodate side ect purely functional language 
mean argument previously encountered 
memo function strict 
ecient memo tables require ordering preferably hashing implemented arbitrary argument types 
memo function retain past argument result pairs purged 
entire memo table recovered garbage collector 

solution build memo functions primitive language implementation special magic garbage collector deal questions 
unsatisfactory size ts solution satisfy customers 
better provide simpler set primitives allowed programmer write variety memo table implementations 
purpose propose just set primitives 
design proposes related mechanisms 
unsafeperformio primitive allows programmer execute benign side ects section 

typed stable names allow stable invariant garbage collection key derived arbitrary value section 

typed weak pointers allow programmer avoid space leak section 

finalization allows programmer express variety policies purging memo table unused values section 
primitives independent uses 
common require integrated support garbage collector 
compared earlier new contributions er rst complete integrated design supports memo tables haskell non strict purely functional language 
far know stable name proposal new 
underlying run time system mechanism supports inter heap gph distributed implementation haskell haskell held external agents gui widgets com objects 
weak pointers contrast early 
design neat wrinkles solves little known key value problem 
developed independently solution close believe characterisation tricky semantics weak pointers easier programmer understand 
describe implemented glasgow haskell compiler ghc 
single aspect design startling taken surprisingly long time achieve due number interacting subtleties 
contribution summarise folklore tricky area believe developed signi cantly 
memo functions memo functions running example highlight awkward issues 
basic idea simple function applied second time argument return result computed rst time recomputing 
particularly attractive purely functional language guaranteed side ects change result argument 
hughes studied implications lazy language 
cook launchbury describe disposable memo functions variant hughes lazy memo functions give operational semantics clari es behaviour 
hash consing specialised kind memo table application remembers previously built heap objects case identical object required 
papers give applications explain usefulness memo functions 
design memo functions elegant way construct memo function providing higher order function memo memo memo takes function arbitrary range domain returns version function 
function new value contrast approaches achieved kind pragma side ect 
standard toy example fibonacci function complexity turns exponential linear function way fib int int int int fib memo fib fib notice recursive call fib version 
example de ned single function memo require 
may versions function time 
call memo creates memo table garbage collected function discarded 
example version map argument list expected occurrences value memo map xs map memo xs single version applied element list xs 
function arguments easily particular argument 
example argument function second argument memo memo mf mf memo similarly function easily arguments 
rst memo maps rst argument function memo memo memo memo haskell notation lambda variations theme rst question springs mind memo decide new argument seen 
imagine di erent variants memo perform evaluation argument simply pointer equality 
recall haskell lazy language prefer memo change strictness function pointer equality certainly property 
hand pointer equality detect arguments thunks held di erent addresses 
evaluate argument weak head normal form pointer equality 
approach produce hits thunks evaluate value match 
version function strict 
worry thunks evaluate say evaluate values held distinct addresses 
perform proper equality check argument 
case type memo change longer fully polymorphic eq main point possible semantics memo powerful argument allowing programmer de ne building 
benign side ects purely functional language visible side ects implementation overwrites heap objects time 
value thunk unevaluated function argument demanded thunk overwritten newly computed value subsequent demands need recompute 
memo functions require similar sort benign side ect program memo haskell expose ability programmer 
side ects expressed haskell io monad :10.1.1.100.9674
particular io monad provides mutable cells primitives io ioref ioref io ioref io value type ioref mutable cell holding value type primitives allocate read write cell io monad 
idea ioref hold memo table 
memo polymorphic says io 
need way express side ects claim ect pure 
provide new primitive notation eq means type member eq type class supports equality 
unsafeperformio io function takes performing computation delivers value type turns value type performed value demanded 
guarantee interleave computations function unsafe 
unsafe wrong 
simply means programmer compiler undertake proof obligation program semantics una ected moment side ects take place 
nally ready give possible implementation choose variant allows evade issues pointer equality 
eq unsafeperformio return eq ioref arg unsafeperformio tbl case tbl arg just result return result res arg tbl tbl arg res tbl return res type eq eq implementations omitted rst application unsafeperformio allocates mutable cell holds memo table type immediately returns function partial application 
argument uses unsafeperformio get hold memo table query write new value 
memo table represented simple association list contains argument value pairs 
context memo tables refer function argument key result value 
course association list hardly ecient structure memo table reason wanting memo tables programmable 
kind lookup tree ordering just equality argument 
turn require argument type ordered changing memo type ord implemented exactly lookup insert functions complicated 
hashing similar way 
notation apart exactly lisp programmer implement memo functions 
done explicit exactly programmer undertaking proof obligations modest important step 
stable names equality done works ok base types int float expensive function argument say list 
case certainly want pointer equality exchange fast test accept lists equal pointer equal 
having pointer equality force back association lists 
better need ordering hash function 
known di culty garbage collector moves objects excessively constraining choice object address may change poor hash key 
relative ordering objects may change 
need cheap address value name derived arbitrary value 
name stable sense change lifetime object names 
mind provide data type operations data io int instance eq instance ord function stable name value 
stable names support equality class eq ordering class ord 
addition function converts stable name hash key 
notice io monad 

stable names compare run program greater run 
putting io monad standard trick allows consult principle external oracle deciding stable name return 
practice wrap calls unsafeperformio undertaking proof obligation meaning data io io io io io fig 

stable name map library program depend particular stable name system chooses 
stable names property values stable name values equal property means stable names hash keys keys accidentally collide 
stable names equal test equality necessary 
immediate consequence values equal stable names di er 
strict evaluate argument 
means equal values stable name distinct unevaluated thunks 
example consider de nitions fst snd long remain unevaluated return different stable name easy strict haskell strict application function 
example 

return stable name 
strict application loses laziness increases sharing stable names choice programmer 
stable names memo tables rest stable name maps data type maps stable names values 
imple compiler optimisation evaluated compile time case calls return stable name example io monad 
mentation may kind mutable nite map real hash table 
stable names easy modify memo table implementation pointer equality strict lazy value equality 
give code apply part implementation tbl arg unsafeperformio sn case just result return result res arg tbl sn res return res implementing stable names implementation depicted 
maintain tables 
rst hash table maps address object set second table stable name table 
address target changes garbage collection hash table updated re ect new address 
possible approaches throw away old hash table rebuild new garbage collection 
slow garbage collection considerably large number stable names 
generational collector option partially updating hash table minor collection 
entries targets moved current gc need updated 
method implementation 
slot stable name table snt corresponds distinct stable name 
stable name described set snt set equality comparison stable names 
simply set value returned 

order maintain ensure re stable name program access object stable name derived long died 
accordingly represent value type stable name object heap allocated cell containing snt set 
object returned result 
entry snt points corresponding stable name object object stable name created target 
sn heap rts target hash stable name object table hash stable name table fig 

stable name implementation entries snt garbage collected follows 
snt treated part root set 
garbage collection complete scan entries snt currently 
entry stable name object dead reachable safe re stable name entry program possibly re invent 
stable name entry live need update pointers stable name object target copying collector moved 
available entries snt chained free list pointer eld 
function satis es property stable names converse true 

call implemented simply returning set stable name snt 
int value returned tracked garbage collector way stable name object possible calls di erent stable names return value 
example sn hash sn sn hash sn return hash hash assuming distinct objects piece code return true garbage collector runs just rst call slot snt allocated sn re sn sn garbage point 
applications advantage implementation described pair tables purposes 
calling external libraries written language necessary pass haskell object 
haskell objects move time time pass stable pointer object 
stable pointer variant stable name slightly di erent properties 
possible dereference stable pointer get target 
means existence stable pointer guarantee existence target 

stable pointers counted explicitly freed programmer 
stable pointer passed foreign function leaving way haskell garbage collector track 
implement stable pointers stable name technology 
stable name table contains pointer target stable name easy 
support add count snt entry operations increment decrement 
pointer target treated root garbage collector count greater zero 
exactly technology parallel implementation haskell glasgow parallel haskell gph 
gph distributes single logical haskell heap number disjoint address spaces 
pointers sub heaps go stable names allowing sub heap garbage collected independently 
weighted counting global garbage collection 
point simply single primitive mechanism supports facilities stable names passing pointers foreign libraries distributed heaps 
weak pointers function discarded memo table automatically garbage collected 
suppose function long lived applied arguments soon discarded 
situation gives rise known space leak memo table contains arguments function applied arguments reachable eyes garbage collector function applied argument 
result applying function arguments held memo table retained 
memo table clogged useless entries serve slow lookup operations 
rst problems go away stable names stable names retained memo table argument problems remain rst reappears inability recycle stable names 
weak pointers standard solution weak pointers 
garbage collector recovers heap objects reachable 
heap object reachable transitive closure points relation starting set root pointers 
weak pointer pointer treated pointer purposes computing reachability 
object reachable contains weak pointer object considered reachable object may reachable root set path course considered garbage 
case weak pointer object longer points valid object replaced 
act dereferencing weak pointer fail 
weak pointers help memo tables way 
ignoring stable names assume memo table refers keys values 
pointer key weak pointer memo table keep key alive solving rst problem 
periodically memo table purged searching keys deleting entry memo table releasing value 
problem weak pointers little recognised problem weak pointers memo tables value contains pointer key entry removed 
value refers key memo table keep value alive value keep key alive entry memo table purged defeats purpose weak pointer 
refer key value problem 
problem occurs practice causes potentially space leak easy identify cure 
unfortunately situation means unusual 
consider lookup table maps person name record describing person 
quite record include things person name 
alert reader may noticed entry stable name table section ectively contains weak pointer stable name object 
new design light issues developed new design weak pointers haskell called key value weak pointers 
part signature weak module data weak io weak weak io function takes key value type builds weak pointer object type weak weak pointers ect garbage collection value weak pointer object reachable key reachable speci cation says reachability weak pointer object weak pointer object reachable ect reachability key value 
simple crisp speci cation conceals quite subtle implementation section ers precisely support need memo tables 
matter value refers key value reachable key value reachable way case key certainly reachable value 
io monad important operational behaviour call key value reachable call reachability value dependent reachability key 
isn side ect wouldn change meaning program delayed operation obtain desired ect important force call performed certain time io monad sequencing 
function dereferences weak pointer returning value garbage collected just value originally 
operation io monad obvious reason return value depend time garbage collector runs 
developed design independently subsequently discovered hayes oopsla describes earlier implementation core idea dubbed originally due bosworth 
contrast designs section 
memo table key value weak pointers give code memo table uses weak pointers earlier stable name version 
recall garbage collector recovers memory reachable note statement says 
weak tbl arg unsafeperformio sn case tbl sn just weak val case val just result return result tbl sn tbl sn res arg weak tbl sn weak return res memo table maps stable name argument weak pointer value 
function applied arg call return auxiliary function called 
weak pointer result lifetime controlled arg inserts weak pointer memo table 
lookup successful nd actual value 
awkward race condition moment called conceivably arg 
garbage collection intervenes weak pointer gets 
unusual case simply call 
strangely doing arg reachable continuation ensures succeed 
sort typical world weak pointers 
implementing weak pointers de nition reachability simple takes little care implement correctly 
implementation works follows 
maintain list current weak pointer objects called weak pointer list 
new weak pointer object created immediately added list 
garbage collection proceeds follows 
mark heap reachable roots 
pretend mark sweep garbage collector works ne copying collectors 

examine weak pointer object weak pointer list reachable 
key marked reachable mark heap reachable value eld move weak pointer object new list 

repeat step complete scan weak pointer list nds weak pointer object marked key 

remaining object weak pointer list marked simply discard 

list accumulated step new weak pointer list 
mark unreachable weak pointer objects list reachable retained garbage collector 
subtleties implementation 
rst iteration necessary step 
required making value reachable may key weak pointer object reachable 
notice reachability value weak pointer object uenced reachability corresponding key reachability weak pointer object 
second subtlety relationship reachability 
reachability criterion determine weak pointers set objects retained garbage collector 
objects retained precisely reachable objects plus weak pointer objects reachable keys unreachable algorithm 
live weak pointer objects implicitly kept garbage collector regardless reachable wrong mark reachable rst step algorithm 
doing preclude having weak pointer object key weak pointer object key considered reachable 
weak pointers weak pointers useful concept shall see section 
implementation extended straightforwardly generational garbage collector 
guiding principle object resides generation collecting considered reachable purposes collection 
key weak pointer lives oldest generation able determine weak pointer dead perform major collection 
applications situation weak pointers just right thing referencing objects outside haskell heap proxy objects proxy object object local heap just contains pointer foreign object 
consider structured foreign object proxy object haskell heap 
garbage collector track proxy object order foreign object freed longer referenced haskell probably nalizer see section 
pointer subcomponent foreign object need suitable way keep proxy root foreign object alive drop subcomponent 
weak pointer solves problem nicely key points proxy subcomponent value points proxy root 
entire foreign object retained subcomponent dropped 
finalization code purging memo table useless key value pairs 
idea satisfactory amounts polling keys see died 
better receive sort noti cation key died 
quite common want perform sort clean action object dies actions commonly called nalization 
possible attach nalizer key key dies nalizer delete entry memo table 
particular key memo tables desirable able attach multiple particular object 
proxy objects encapsulate external resource le handle graphics context malloc block network connection 
object garbage nalizer runs close le release graphics context free malloc block sense proxy objects dual stable pointers section encapsulate pointer haskell external world stable pointer encapsulates pointer external world haskell 
raise numerous subtle issues 
example matter order run objects die simultaneously means 
nalizer may need refer object presumably means resurrecting dead 
nalizer refers object keep alive ect 
nalizer get access object 
promptly run 

gives useful overview issues survey implementations 
design experience applications weak pointers require sort nalization chosen couple 
add new functions io io weak finalize weak io takes extra argument optional nalization action 
call just semantics unreachable nalization action performed time 
guarantee soon order run 
finalization weak object may initiated time applying finalize 
weak pointer object immediately replaced nalizer run 
finalize operation returns completion nalizer 
nalization action guaranteed performed exactly run program programmer calls finalize time unreachable program run 
operation implemented terms passing nalizer 
nalization action simply action type io 
example arrange automatically close le longer required fopen string io handle fopen filename hdl hdl just close hdl return hdl open string io handle close handle io fopen uses open open le calls attach nalizer handle returned open 
case second parameter irrelevant 
nalizer close hdl type io hdl unreachable nalizer performed closes le 
points worth noticing fopen example nalizer refers hdl 
immediately faced variant key value problem memo tables section 
disaster nalizer kept key alive turn ensure nalizer ran 
solve simply modifying reachability rule weak pointers value nalizer weak pointer object reachable key reachable 
value whatsoever weak pointer object nalizer attached way called container nalization 
contrasts destructors implement object nalization nalizer part object de nition 
value number attached simply making calls 
essential say key entered memo tables 
run exactly guarantee relative order 
program may discard weak pointer object returned isn required example 
nalizer run key unreachable won able call finalize run nalizer early 
implementing nalization relatively easy implement 
weak pointer implementation section needs modi cation follows 
mark heap reachable roots 

scan weak pointer list 
weak pointer object key marked reachable mark heap reachable value nalizer move weak pointer object new list 

repeat step complete scan weak pointer list nds weak pointer object marked key 

scan weak pointer list 
weak pointer object reachable 
weak pointer object nalizer move finalization pending list mark heap reachable nalizer 
nalizer refers key value step 

list accumulated step new weak pointer list 
mark unreachable weak pointer objects list reachable 
subsequent garbage collection dedicated nalization thread successively removes item finalization pending list executes nalizer 
nalization thread runs pseudo concurrently program nalizer shares state main program suitable synchronisation 
primitives concurrent haskell purpose 
memo tables nalization section bring stable names weak pointers implementation memo table purge unneeded key value pairs release memoized function longer reachable 
implementation diagram depicting memo table structure 
memo table representation identical section add nalizer weak pointer table 
invoked nalizer remove entry memo table allowing value memoized result computation garbage collected 
inadvertently creates problem garbage collecting entire memo table nalizer needs refer memo table reachability rule gave weak pointers means memo table reachable key weak pointer table reachable 
type weak memo memo tbl weak unsafeperformio tbl weak return tbl weak memo tbl weak table weak io table tbl pairs memo weak memo tbl weak tbl arg unsafeperformio sn case just val case val just val return val val arg weak tbl sn val return val weak io sn weak tbl case return just mvar tbl sn fig 

full memo table implementation disaster 
memoized function dies memo table including cached values live keys unreachable 
memo table sn weak table weak value key fig 

full memo table implementation solution unsurprisingly weak pointer 
refer memo table weak pointer retain desired reachability behaviour memo table 
running nalizer nds memo table unreachable weak pointer table returns nalization 
add nalizer memo table table runs entries table calling finalize weak pointer 
important allows values garbage collected time table nalizer values live respective keys unreachable 
observations deliberately cast discussion general terms believe illuminates fundamental mis match traditional garbage collection push applications 
solving mis match require full generality key value weak pointers 
open question key value weak pointers complete means new application may require complicated 
related aware published stable names implemented similar mechanisms internally 
java global local part java native interface described similar stable pointers section primary function allow java objects passed foreign functions providing indirection table explicit freeing 
weak pointers hand known 
language implementations include simple weak pointers weak pointers express key value relationship su er problem described section 
include smalltalk caml moscow ml sml nj scheme implementations 
java kinds weak pointer soft allow objects reclaimed memory short weak simple weak pointers phantom weaker form weak 
described hayes similar weak pointers 
di er subtle important ways 
semantics described presenting tricky garbage collection algorithm similar section 
believe characterisation terms reachability useful programmers 
presentational di erence semantic di erence reachability rule value eld reachable weak pointer object reachable key reachable 
semantics little convenient application means need memo table section 
chose semantics delete clause reasons 
simpler 
second semantics clear nalizer run 
key unreachable 
key unreachable 
fact choice nalizer run reachable key 
reachable nalizer run 
contrasts guarantee nalizer run precisely 
third easily simulate reachability semantics reverse possible 
function simulates semantics io io weak just finalize return second call simply attaches nalizer unreachable breaking value link 
nalization semantics bug feature debatable 
subject heated debate mailing list 
debate hayes excellent survey programmer rely running promptly 
just hard guarantee 
required explicit nalization indicated 
guarantees order run 
dybvig proposed guardians scheme sort batched version 
weak pointer added guardian guardian queried nd objects maintains inaccessible 
dybvig describes implement hash tables guardians 
hash table describes capable purging old key value pairs activation lookup function asynchronously su ers key value problem 
described mechanisms unsafeperformio stable names weak pointers nalization collectively allow implement memo tables haskell 
sole application accused overkill 
mechanisms independent uses indicated 
surprising memo functions require elaborate 
readers included feeling stage 
left beauty functional programming time primitives added 
unspeci ed proof obligations unsafeperformio characterised proved 
baby thrown bath water 
justi able criticisms 
baby danger 
primary response simply provide completely encapsulated implementation memo implemented primitive say better 
far 
functionality implemented greater scope error 
furthermore take intervention language implementors modify extend implementation 
case memo applications primitives introduced 
regard primitives raw material experienced system programmers construct beautiful abstractions 
wish possible primitives beautiful abstractions aspiration reach 
proposals clear shortcomings 
alternatives worse 
eschew weak pointers exclude important useful class applications 
keep existence secret advertising acceptable face memo 
develop precise characterisation primitives 
hope provoke debate may ultimately lead new insights better design 
people helpful comments earlier versions kevin backhouse byron cook barry hayes fergus henderson richard jones andrew kennedy sven panne julian seward 

cook launchbury 
disposable memo functions 
proceedings haskell workshop 

dybvig bruggeman 
guardians generation garbage collector 
sigplan symposium programming language design implementation pldi albuquerque pages june 

hayes 
finalization collector interface 
cohen editors proceedings international workshop memory management st malo pages 
springer verlag lncs sept 

hayes 
new nalization mechanism 
proceedings acm conference object oriented programming systems languages applications oopsla pages 
acm oct 

hughes 
lazy memo functions 
proc workshop implementation functional languages feb 

java software sun microsystems java sun com docs 
java development kit documentation 

keller sleep 
applicative caching 
acm transactions programming languages systems jan 

lester 
ecient distributed garbage collection algorithm 
proc parallel architectures languages europe parle pages 
springer verlag lncs june 

sl peyton jones aj gordon finne 
concurrent haskell 
rd acm symposium principles programming languages st petersburg beach florida pages 
acm jan 

sl peyton jones pl wadler 
imperative functional programming 
th acm symposium principles programming languages popl charleston pages 
acm jan 

trinder hammond mattson partridge jones 
gum portable parallel implementation haskell 
sigplan symposium programming language design implementation pldi philadelphia 
may 
