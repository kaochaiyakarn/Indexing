higher order rewriting logic functional logic programming carlos gonz alez moreno teresa gonz alez mario rodr iguez artalejo dia universidad de madrid madrid spain dia ucm es known conception programs declarative programming language viewed theories suitable logic computations viewed deductions 
view successfully thoroughly developped declarative programming paradigms including equational logic horn logic equational horn logic 
opinion widely accepted agreement logic viewed foundation higher order lazy functional logic languages 
argue specific rewriting logic play role justify adequacy proposal proving proof theoretical model theoretical results 
show proposed rewriting logic useful tool designing sound complete lazy narrowing calculi 
approaches functional logic programming assume programs sets constructor conditional rewrite rules 
applicative rewrite rules obtain expressivity higher order functional programming avoiding abstractions higher order unification 
example program containing rewrite rules le zero true 
le zero suc false 
le suc suc le iterate iterate 
filter 
filter xs filter xs true 
filter xs filter xs false 
authors partially supported spanish cicyt project tic cpd 
expect goal filter iterate suc zero zero suc zero 
succeed le suc zero partial application defined function symbol le number arguments occurring left hand sides rewrite rules expected behave free construction 
general expect happen partial applications 
lazy functional logic languages assume strict equality goals conditions 
extend constructor conditional rewriting logic crwl order deal applicative rewrite rules 
impose non ambiguity conditions 
means non deterministic functions allowed 
instance non deterministic function intended merge possibly infinite lists arguments possible ways merge xs xs 
merge ys ys 
merge xs ys merge xs ys 
merge xs ys merge xs ys 
higher order extension crwl designed derive kinds statements ffl approximation statements intended meaning possibly partial pattern approximates denotation expression example expect approximation statement iterate suc zero zero suc zero derivable example program 
ffl joinability statements holds iff derived total pattern occurrences 
note statements natural generalization strict equations non deterministic setting 
derivability define denotation expression program set approximations ft tg 
fact characterize derivability means different rewriting calculi equivalence ensures rewrite proof transformed format 
addition proof calculi developped model theory 
models applicative algebras similar modified account non determinism lines 
particular program free model built partially ordered set partial patterns carrier interpreting defined function symbols derivability 
prove expected soundness completeness theorems program expression partial pattern term statements equivalent 
ii valid models 
iii valid view result free model regarded intended canonic model program prove horn clause logic program translated order program way semantics preserved 
semantics preserving translation functional logic programs sense programs defined 
render useful declarative programming language need goal solving mechanism 
initial goals form conditions rewrite rules multisets joinability statements variables understood existentially quantified 
extend constructor lazy narrowing calculus deal higher order applicative rewrite rules 
resulting calculus borrows ideas cope higher order logic variables resorting full higher order unification 
contrast narrowing calculus lazy calculus sense narrowing steps outermost evaluation function arguments delayed sharing achieved means delayed variable bindings 
prove soundness completeness means founded proof ordering defined proofs witness correctness answer substitutions 
due semantics joinability statements completeness proof needs termination confluence hypothesis 
comparison works higher order narrowing calculi approach offers complete logical framework including model theoretic semantics greater expressivity due non deterministic functions 
course approach powerful different direction supports abstractions higher order unification 
developped implementation translation technique compile programs prolog programs shows practical feasibility proposal 
gonz alez moreno gonz alez rodr 
denotational versus declarative semantics functional programming 
proc 
csl springer lncs vol 
pp 

gonz alez moreno gonz alez rodr 
completeness narrowing operational semantics functional logic programming 
proc 
csl springer lncs vol 
pp 

gonz alez moreno gonz alez opez rodr iguez artalejo 
rewriting logic declarative programming 
proc 
esop springer lncs vol 
pp 

extended version available tr dia 
prehofer 
call need strategy higher order functional logic programming 
proc 
ilps mit press pp 

middeldorp ida complete narrowing calculus higher order functional logic programming 
proc 
plilp springer lncs pp 

