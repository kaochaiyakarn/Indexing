international journal foundations computer science world scienti publishing rewriting strategies elan functional semantics peter borovansk university bratislava slovakia peter loria fr claude kirchner el ene kirchner christophe ringeissen claude kirchner kirchner christophe ringeissen loria fr loria cnrs inria rue du jardin es nancy france received january revised may communicated sato toyama consider term rewriting functional point view 
rewrite rule function applied term explicit application function 
starting point show build elaborated functions describing rst rewrite derivations sets derivations 
functions call strategies de ned rewrite rules construction iterated leading higher order strategies 
furthermore application function de ned rewriting spirit 
calculus study properties 
implementation elan language motivate exemplify approach 
expressiveness elan illustrated examples polymorphic functions strategies 
keywords rewriting calculus rewriting logic strategy rewrite language term rewriting strategy matching 

rule reasoning domains computer science 
algebraic speci cation methods rewriting prototyping speci cations computing speci ed functions theorem proving dealing equality simplifying formulas pruning search space programming languages rewriting concept explicit obj ml hidden operational semantics expert systems knowledge representation systems rewriting revised version 
describe actions perform constraint solving rewrite rules rst uni cation theory express transformation equational systems constraint systems available programming language level systems eclipse constraint handling rules claire oz 
general setting logical frameworks rules describing inference systems logic computations lcf isabelle hol 
cases rewrite rule applied term application object accessible user 
consequence term rewriting submitted hidden strategies straightforward standard question kind strategy system 
left inner 
outside 
needed 
random 
lazy 
importance strategies recognized long time 
example lcf discovery operators orelse repeat combining tactics breakthrough development edinburgh lcf 
context rewriting user de ned strategies rst introduced elan language 
consider rewrite rule function called primal strategy application rule explicit user accessible function 
give user possibility express rule applied 
course opens new possibilities raises problems addressed 
section main basic notations summarized give formal de nition strategies semantics strategy application term 
introduce strategies step step distinguishing primal strategies basically rewrite rules constants expressing identity failure composed concatenation congruence section elementary strategies choice operators deal sets possible results section nally de ned strategies user de ned operators rewrite rules section 
explain section iterated de ne functions higher level rewriting 
functions called strategies express possibly complex way basic rewrite rules applied term 
elan language concepts available rst class objects terms rewrite rules strategies 
give section section examples illustrate language strong emphasis functional features 
formalism developed gives basic constructions elan formal functional semantics primary goal 
opens new insights questions sketched 

notations rst restrict sections unsorted non conditional rules 
consider section sorted case 
order sorted conditional cases handled similar technical manner 
de nitions consistent reader referred detailed considerations universal algebra term rewriting systems 
consider set ranked function symbols set variables set rst order terms built set variables term denoted var 
set ground terms terms variables 
substitutions term endomorphisms written 
variable substituted term result applying term simplify notation denote sequence objects rewrite rule object terms respectively called left right hand side var var 
set rewrite rules called rewrite system rewrite program 
set variables var var 
sections de ne syntax semantics strategy language specify construction applied term 
amounts de ne strategy application operator place holder 
operator takes arguments strategy term produces term 
evaluation operator provides de nition interpreter strategy language described labeled rewrite rules form label 
distinguish rst step rewrite rules user 

primal strategies section build progressive way elementary notion strategy called primal strategy precise associated semantics 

applying rewrite rule rewrite rule consider rst untyped function applied term leading object 
function returns empty set match evaluates result standard rewriting operation top position consists replacing variables substituted corresponding instances coming matching function terms associated rewrite rule called primal strategy 
semantics application rewrite rule term de ned rules 
intuitive meaning search match done decomposing matching problem decompose rule instantiating variables associated subterm performed instantiate rule 
clash var clash rules detect matching failure success rule returns result match 
rules involve syntactic construction tuples terms separated commas denoted simply strategy application operator takes rst argument syntactic object form tuple terms term 
parentheses omitted write un un 
decompose wn 
wn clash wn 
instantiate vn wn 
vn wn wn 
var clash vn wn 
var wn success wn wn 
frg psa primal strategy application 
example shows psa calculus compute term obtained rewriting top rule formally prove term normal form psa 
psa calculus closely corresponds implementation rewriting step interpreter compiler substitution matching problem explicitly built variables progressively instantiated 
example 
decompose 
instantiate 
success fh rewrite rule simple case failure 
decompose 
instantiate 
decompose 
var clash case var clash forbids instantiations variables occurring 
variables considered skolemized 
previous example rewrite rule left linear 
case rewrite rules left linear instantiate rule specialized follows instantiate ll wn 
fy 
wn fully adapted left linearity hypothesis allows furthermore get intuition calculus easily 

properties psa calculus proposition psa calculus primal strategy application terminating 
proof 
complexity measure obtained lexicographic combination complexity measures de ned follows 
vn wn var vn wn var var frg 
vn wn jv jtj denotes size number function symbols occurring frg 
easy check decompose preserves strictly decreases instantiate strictly decreases clash var clash success strictly decrease proposition psa calculus primal strategy application locally con uent 
proof 
classical critical pair lemma just check critical pairs con uent 
form rules recursive strategy call check non con uent top critical pair 
decompose clash due conditional application rule decompose applies success applies 
notice instantiate var clash rules variable assumed sort variable object form 
consequently overlap decompose instantiate var clash 
argument allows state overlap clash instantiate var clash 
clash success overlap 
overlap instantiate var clash respective conditions mutually exclusive 
syntactic limitation put variable rules instantiate var clash overlap rules success 
shows overlap rules psa 
corollary psa calculus primal strategy application terminating church rosser 
proposition normal form term wn respect psa singleton empty set 
proof 
ad 
rule decompose clash instantiate var clash applies anymore vn wn vn wn success applies 
order formalize correctness result psa calculus need introduce notion invariant expressions reduced calculus 
de ne follows vn wn dom var wn frg frg lemma rule psa expressions 
proof 
check property rule psa decompose un implies un clash substitution var clash var wn substitution dom var wn provided identical instantiate var wn dom var wn implies image necessarily success wn wn implies identity substitution satisfying dom var wn dom 
corollary psa correctness rewrite rule term var var psa fsg rewritten top rewrite rule proof 
follows lemma standard de nition rewriting obtained rewriting top rule psa say rule apply rule application fails 
psa call result rule application said successful 
note currently normal form singleton empty set 

comments psa calculus contrast standard notion rewriting result rule application set terms 
useful purposes 
avoid partial functions 
convenient deal functions computing possibly empty set results 
rule application considered partial function 
extend rewriting modulo 
framework extends smoothly rewriting modulo equational theories case result application rule may unique 
example operator assumed commutative decompose success replaced rules 
wn 
frg vn wn denotes equality modulo commutativity union operator 
order take account union operator considered equational property rules added merge fr fr 
fr idr fr 
fr idl fr 
fr 
bottom application previous rules leads expression encodes set results necessarily reduced element 
example commutative operator constants 


instantiate 
success fag fbg 
merge fa bg 

clash 
instantiate 
fbg 
idl fbg sophisticated psa calculi designed implement rewriting modulo equational theories instance modulo axioms generally modulo syntactic equational theories decomposition rules simplify uni cation matching problems 
deal elaborated strategies 
rst step de nition strategies elaborate ones produce sets containing general single element 
syntax strategy application sets terms 
result application obtained union results 
choosing sets basic structure representing result strategies application possible choices lists multisets 
similar calculi developed cases sticking closely implementation considerations 
chosen set representation simplicity 

building primal strategies apply consecutively rules corresponding primal strategies composed concatenation operator applies follows compose 
generally strategies compose 
composition primal strategies called primal strategy 
note strategy corresponds tactical lcf 
natural add primal strategies identity associated rewrite rule failure function denoted respectively id fail 
apply terms expected way identity id 
ftg fail fail 
step consists applying rule deeper term 
purpose function operators elements take arguments primal strategies yield primal strategy applies terms follows congruence 
congruence fail 
de nition interpretation strongly overloaded left hand side congruence rule rst operates strategies second terms right hand side operates sets de ned usual ff ja nullary symbol de nitions simplify straightforward way 
summarize primal strategies built rewrite rules constants fail id concatenation congruence function operators 
application primal strategy term de ned rules psa set rules bp composed compose identity fail congruence congruence fail 
proposition rewrite system application primal strategy term psa bp results set terms rewriting modulo equational theory empty singleton 
belongs set results exists sequence rewriting steps conversely 
proof 
follows corollary de nition concatenation congruence identity failure strategies 
order simplify notations iterate construction functions name rewrite rules 
basic objects labeled rewrite rules label belongs set ranked label symbols left right hand sides terms 
rule distinct variables label assumed arity rule denoted 
variables irrelevant just omit notation 
example rewrite system ag strategy function applied term yields fag empty set applied term 
notice rewriting logic proofs rst order objects represented proof terms 
proof terms terms built elements combined function symbols label symbols concatenation operator 
proof term denotes primal strategy approach 

elementary strategies handle sets results encode search main questions facing 
example illustrates functions called primal strategies just application rules xed position 
need express search speci reductions 
instance express leftmost innermost rewriting strategy function term rewrite system term returns terminates set leftmost innermost normal forms 
purpose enrich strategy language operators allowing description computation space convenient way 
introduce selectors specifying way set results strategy may interested set just elements 
purpose introduce elementary unary operators strategies semantics de ned rules 
ft 
result selectors precise di erent representation results chosen 
example lists operator completed selectors nth result 
introduce selection operators select select rst select strategy tuples 
semantics de ned rules select rst select rst 
select select 
select select 
allows introduce operators dk dont know rst dc dont care 
rst operator orelse lcf 
semantics operators de ned previously introduced selectors rewriting strategy terms notice arrow change follows dk dk select strategies 
rule meaning term rule dk dk 
select example dk 
fb cg 
dual dk strategy dont care dc de ned dc dc select operator version simply returns rst non empty set results arguments called rst de ned rst select rst example rst 
fbg rst 
fcg rst 
de ne dc strategy returns singletons dc dc select course rst de ned way rst select rst elementary strategies particular operators dk rst conjunction primal strategies allow express convenient way search functions particularly useful mechanized theorem proving 
summarize elementary strategies built kinds selectors 
select elements set results strategy select select select rst select rst element sequence strategies 
table presents elementary strategies previously introduced 
addition elementary strategy dk chooses result set results provided sequence strategies de ned 
strategy may useful context concurrent rewriting strategies explored 
result selector strategy selector select dc dc select rst rst rst select dk dk conclude section elementary strategies mention constant strategies introduced 
terms constant strategies denoted de ned constant 
fsg denote es set rules performing elementary evaluation strategies rules select rst select select dk dc dc 

de ned strategies seen user de ne primal strategies specify search strategies elementary strategies 
goal give possibility de ne complex strategies elementary ones 
done previously de ning new strategy operators rewrite rules specify strategy semantics 
example function map de ned strategy rewrite rule way map rst nil cons map right hand side de nition means strategy map argument map applied list nil strategy applied head case non empty list map applied tail strategy de nition di ers traditional functional de nition map functor 
get standard de nition formulate de nition map strategy application symbol notation cons operator map nil 
nil map 
map di erence relies fact list functional map applied explicit argument second de nition rst implicit 
rule map strategy de ned recursively 
applied special control may lead nite computations 
course controlled concept meta strategies strategies controlling execution de ned strategies 
rules involving map written express particular equivalence de ned strategies instance distributivity map concatenation map map map map id id examples rules elementary strategies id id rst dk set strategy symbols fd called de ned strategy symbols rewrite rules de ned strategies form label strategy terms built previously introduced strategy symbols fd de ned strategy application expressed rules form 
labels control application de ned strategies 
example examples basic strategy de nitions ones iterate dk iterate id repeat rst repeat id map nil nil map map iterate strategy di ers repeat returning intermediate forms encountered evaluation term strategy repeat returns 
strategy map driven list strategies respectively applied elements list length 
rewrite rule strategies de ned get application examples iterate 
ag repeat 
fag map iterate repeat nil nil 
fa nil strategy rewrite rules form called implicit involve explicitly application operator 
illustrated map example useful express strategy rule depending argument applied 
rules allowed called explicit strategy rules 
form 
strategy term term build terms strategy symbols strategy application operator 
evaluation point view rules just added strategy interpreter 
example illustrate de nition explicit strategy rules consider instance strategy constructor 
applied term returns empty fail returns 
semantics de ned auxiliary symbol ite follows ite ite 
ite ite fsg 
fsg ite 
ite 
rewriting tower typing strategies show iterate ad construction primal elementary de ned strategies iteration related typed hierarchy strategies 
assume rst order terms classi ed set sorts elements denoted terms built set function symbols build set labeled rules tuple de nes initial user theory rt strategies representing functions terms belong theory 
build theory rt strategies imported rules equivalently labels strategy operators operators added id fail dc dk rst de ned functions map introduced 
rt natural understand type primal strategy hs 
pair sorts respectively reasonable assume user rewrite rules sort preserving 
strategies rt typed set sorts elements hs 
si rt rules involved de ne application strategies objects rt terms objects rt 
rules turn primal strategies upper level theory 
example example strategy constructor rank hs 
si hs 
si hs 
si hs 
si meaning rst second third arguments arity operator strategy sort hs 
si 
rst order strategies theory rt objects terms theory 
construct second order strategies representing functions objects rt deal new objects extend way theory rt rt clearly construction repeated needed 
detail construction theory rt rt particular case covers strategies 

theory rt contains sorts sorts rt fhs 
si hs 
si sort sort preserving strategy general case sort changing strategies hs 
bit technical developed 

theory rt contains symbol rank labeled rewrite rule variables symbols theory primal strategies inherited th level hs 
hs 
hs 
si hs 
hs 
hs 
si fx xn var var 
primal strategies strategy operators inherited previous step constant strategies id fail concatenation operator overloaded type declarations hs 
si hs 
si hs 
si id hs 
si fail hs 
si 
elementary strategies obtained adding strategy constructors handle sets results 
binary versions constructors overloaded type declarations hs 
si hs 
si select select rst select hs 

si hs 
si dk dc rst dc rst hs 

si hs 
si 
de ned strategies objects theory new strategy symbols theory map hs 
si 
list 
symbol strategy application hs 
si overloaded new type declaration 
point described syntax signature theory semantics strategies objects de ned set rewrite rules specifying default strategy interpreter 
rules described sections primal elementary strategies section de ned strategies 
proposition application rules bp es sort preserving level hierarchy 
proof 
sketch left right hand sides rules strategy interpreter typed terms theory sorts sides rule equal 
sketched construction strategy symbols interpretations theory programming environment user point view construction come general free 
needed user rede ne complete behavior strategy interpreter extend set de ned strategy constructors describe equalities objects theory rewrite rules theory 
example theory de ne labeled rewrite rules strategies dm map map map im map id id transforming strategies simpler ones 
symbols dm im represent labels rewrite rules theory primal strategies construction reduction meta strategy rst im dm 
strategies elan elan environment specifying prototyping deduction systems language computational systems sets rewrite rules strategies 
language developed rst order specify uniform framework eciently execute computational systems describing constraint solvers theorem provers kernels programming languages 
language semantics strategy notion brie describe strategy features ered system 

rewriting strategies elan provides kernel implements leftmost innermost standard rewriting strategy elementary strategies allows iterating construction de ned strategies 
elan program consists parts set rewrite rules set strategies describing rule application 
rewrite rule elan form label pn sn pn var var var 
var var var var 
var pn var var var 
var sn strategy terms built strategy constructors de ned user application operator denoted elan elementary strategies terms application operator denoted elan de ned strategies terms 
matching condition term matched successively result denotes strategy term 
matching process provides values variables rule may empty label matching condition may form matching condition true boolean term written boolean condition programming elan important realize di erence labeled rules evaluation fully controlled user strategies unlabeled rules intended perform deterministic computations applied built leftmost innermost strategy 
system easier basic evaluation mechanisms strategies available 

leftmost innermost strategy rst evaluation mechanism available elan leftmost innermost standard rewriting strategy 
applying set unlabelled rules 
called matching conditions form example typical example rule set elan syntax speci cation fibonacci function rules int int global fib fib fib fib fib program executed giving evaluator top level query fib means evaluates built leftmost innermost strategy fib 
set unlabeled rules assumed terminating church rosser 
instance implement psa calculus see set unlabeled rules 

built primal elementary strategies second kind built strategy provided system consists applying primal elementary strategies 
rules psa implemented built rewriting operation rules bp es implemented built ins 
example simple example involving associative commutative rewriting built strategies dk rst program extracts elements multiset 
assuming element automatically coerced singleton needed main rule form rules elem set elem global element operator union operation multisets assumed associative commutative 
element operator returns elements argument 
context user calls strategy dk term sort set gets elements multiset 
strategy contrary returns element multiset 
request dk evaluated system 

user de ned strategies explained previous sections application strategies terms de ned rewrite rules bp es set rules de ned strategies described clarity 
symbol 
rules de ned elan rules 
provides rewrite system describing strategies 
third evaluation mechanism meta interpreter built strategy eval applied strategy rules labels 
convention de ned strategy rewrite rules label single dot system automatically transforms rule 
meta interpreter rule variable right sort 
strategy eval implemented elan rules described built primal elementary strategies provided elan 

elan environment elan system provides library built ins standard modules interpreter compiler 
compiled mode elan apply millions unlabeled rewrite rules second alpha powered machines 
instance evaluate fib seconds 
theorem proving applications strategies labeled rules heavily rewrites average speed labeled rules second 
example completion non abelian groups performed second 
informations access system web demos available www loria fr elan 

examples complex strategies order illustrate previous concepts elan examples running introduce examples increasing diculty 
rst illustrates strategy language describing normalization terms leftmost innermost leftmost outermost strategies 
terms represented de bruijn notation primitive operations free meaning variable free term replace standing 

de nition terms beta eta evaluation rules straightforward elan import global int local bool sort operators global int la rules global beta la replace eta la free de nition innermost outermost normalization strategies lis los done natural way writing import global strat global lis los strategies implicit 
lis lis id id lis la lis 
los los id id los la los strategies lis los fail input term contain redex reducible instantiated rst beta eta 
strategy lis tries apply lis id succeeds input term form lis applicable contains redex 
continues right subterm application id lis 
input term form strategy lis propagated application la lis 
cases succeeds strategy applied top term 
fact applied order crucial di erence strategies lis los 
second example shows higher order strategies classical example church numbers de ned standard notations lambda calculus functions zero succ zero 
zero succ 


succ functions represented strategies ways absence currying de ned strategies 
function zero de ned binary function unary de ned strategy nullary de ned strategy denotes parameter sort zero zero zero semantics symbols easily de ned rules global zero strategies explicit 
zero strategies explicit 
zero id hx 
xi variables 
explicit de nition zero equivalent implicit strategies implicit 
zero id third 
similarly possibilities de ning succ succ succ succ succ de nition succ quite natural functional point view rules global succ hhx 
xi 
hx 
xii hx 
xi rule variables 
righthand side rule far original functional de nition 
term abbreviation term de ned sequence local 
better understanding rst application symbol expression type hhx 
xi 
hx 
xii hx 
xi hx 
xi expressions type hx 
xi de nition succ similar strategies explicit 
succ explicit de nition succ introduces primal strategies syntax strategies explicit 
succ stands primal strategy referencing rewrite rule 
complex example de nition succ strategies explicit 
succ 
dynamic types ad hoc polymorphism polymorphism important feature functional programming languages 
explain section dynamic types ad hoc polymorphism provided elan module available library 

dynamic types rst explore idea simple sort construction called dynamics dynamic typing allows de ne functions essentially require run time type checking statically typed language 
weakness static typing eliminated construction objects dynamic types dynamics short advanced polymorphic system 
methods combined concept dynamics generalized dependent data types 
approach combining dynamics parametric polymorphism studied point type inference 
de nition type type introduces sort called dyn simplest example dependent data type 
rst part pair indicates sort second part 
means type ranges domain types type depends value di erent approaches respect construction set types situation consider simpler restrict rst order rewrite rules nite sets sorts sort de ned parametric module module sort operators global argument module supposed name sort 
module de nes embedding coercion wrapping terms sort terms sort way 
projection sort de ned simple construction dynamics gives possibility de ne functions ad hoc polymorphic style introduce set general term constructors destructors write polymorphic strategies 

ad hoc polymorphic functions simple example ad hoc polymorphic function function export converting terms list 
ad hoc polymorphism export means works terms di erent types terms di erent type treated di erent ways 
integers strings represented terms terms sort int string int string 
function export list de ned elementary sorts export int int nil export string string nil sorts instance list export de ned follows export list nil string nil nil export list export string export list symbol stands append cons list 
terms arbitrary type rules constructor ti variables sort si export tn string export string 
export sn tn string nil sort allows de ning ad hoc polymorphic functions dealing terms arbitrary sort 
general function constructor rule de ning behavior function constructor provided 
rst possible solution generate rules pre processor automatically enriches programs 
explore solution conceptually simpler section 

term constructors destructors basic operations terms composition decomposition de ned function symbols explode 
symbol explode transforms term list subterms 
able construct back initial term introduce symbol takes list subterms ti function symbol constructs term tn 
top function symbol term explode holds 
situation consider function symbol constants 
introduce new sort functor collects function symbols sn signature constant introduced sort functor sn functor 
module introduces sort functor function functor extracts function symbol term functions explode module import global list sort functor operators global functor functor explode list functor list example illustrate functions small example 
module importing int tree int sort tree int de ned follows operators global empty tree int leaf int tree int node tree int int tree int tree int term tree int node leaf node leaf empty explode list terms explode tree int node leaf node leaf empty tree int leaf int tree int node leaf empty nil get back symbol applied list function symbol name node tree int int tree int functor obtain node tree int int tree int tree int leaf int tree int node leaf empty nil tree int node leaf node leaf empty functions explode functor de ned sets rewrite rules generated imported automatically user imports module 
instance symbol node rules automatically generated explode node tree int int tree int nil node tree int int tree int tree int int tree int nil node functor node node tree int int tree int tree int int variables 
rules correctly parsed function symbol name declared node tree int int tree int functor 
similar rewrite rules symbol de nitions automatically produced constructors sort tree int general function symbol sn signature provided user imported modules si feature allows include typed terms type ags called type decorations mono sorted terms 
projections terms particular sort run time test type ag fail 
de ne various symbols strategies sort viewed point view sorted systems polymorphic symbols strategies 
explored section 

polymorphic strategies concentrate de nition polymorphic strategies strategies working arbitrary user de ned sort 
goal get polymorphic version leftmost innermost strategy runs sort 
module de nes strategy lis abbreviation leftmost innermost 
de nition introduces auxiliary strategies map mis 
strategy mis assigns variable list subterms strategy map applied 
nal result constructed functor term 
mis fails strategy applied 
operational meaning strategy expression follows applied term term sort fact test type ag applies strategy obtained term 
constructs back result term result strategy application sort term 
second auxiliary strategy map tries apply strategy lis input list 
applies lis head fails map continues tail list 
input list contain element strategy lis applicable map fails 
swapping strategy expressions lis obtain left outermost polymorphic strategy 
module lis import global list strat strat strat list global lis local map list mis strategies list implicit 
lis mis explicit 
mis functor map explode strategies list implicit 
map cons lis id cons id map left inner strategy 
rewriting functional point view 
allows giving functional semantics rewrite environments elan maude claire strategies play crucial role 
applications languages range knowledge representation constraint solving theorem proving language executable descriptions 
non trivial examples run elan believe rewriting tower approach induced formalism developed extremely attractive terms expressiveness readability applications 
addition functional semantics developed languages logical semantics rewriting logic allows particular understand strategies sets proof terms speci rewrite theory introduced 
approach provides re ective view languages elan maude lineage scheme nuprl 
ideas developed working de nition rewriting calculus called calculus higher order calculus fully integrating notion strategies rule application object level 
pierre etienne moreau marian vittek interactions elan design implementation jos meseguer manuel clavel valuable discussions strategies christopher lynch comments earlier draft anonymous referees careful reading suggestions 
second author partially supported aid scienti research priority areas research principles constructing software evolutionary mechanisms ministry education science culture japan 
partially supported esprit basic research working group construction computational logics ii 

abadi luca benjamin gordon 
dynamic typing language 
popl pages israel 
hebrew university 

baader nipkow 
term rewriting cambridge university press 

borovansk le contr ole de la etude implantation un de strat 
th ese de doctorat universit universit henri poincar nancy france october 
tr loria 

borovansk castro 
cooperation constraint solvers new process control facilities elan 
kirchner kirchner editors proceedings second international workshop rewriting logic applications volume pages pont france september 
electronic notes theoretical computer science 

borovansk kirchner kirchner 
controlling rewriting rewriting 
meseguer editor proceedings rst international workshop rewriting logic volume electronic notes theoretical computer science asilomar california september 

borovansk kirchner kirchner 
functional view rewriting strategies semantics elan 
sato toyama editors third fuji international symposium functional logic programming pages kyoto april 
world scienti report loria 

borovansk kirchner kirchner 
moreau vittek 
elan logical framework computational systems 
meseguer editor proceedings rst international workshop rewriting logic volume electronic notes tcs asilomar california september 

borovansk 
implementation type value polymorphism 
proceeding software seminar part ii 

caseau laburthe 
combining objects rules problem solving 
jicslp workshop multi paradigm programming bonn germany 

castro 
building constraint satisfaction problem solvers rewrite rules strategies 
fundamenta informaticae september 

kirchner 
rewriting calculus semantics elan 
hsiang ohori editors th asian computing science conference volume lecture notes computer science pages december 
springer verlag 

kirchner 
combining higher order rst order computation calculus semantics elan 
gabbay de rijke editors frontiers combining systems research studies isbn pages 
wiley 

clavel eker lincoln meseguer 
principles maude 
meseguer editor proceedings rst international workshop rewriting logic volume asilomar california september 
electronic notes theoretical computer science 

clavel meseguer 
axiomatizing re ective logics languages 
kiczales editor proceedings re ection san francisco california april pages 
xerox parc 

constable implementing mathematics nuprl proof development system 
prentice hall englewood cli new jersey 

dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science chapter pages 
elsevier science publishers 
north holland 

fr hanschke 
terminological reasoning constraint handling rules 
hentenryck saraswat editors principles practice constraint programming 
mit press april 
revised version technical report ecrc 

gordon milner wadsworth 
edinburgh lcf mechanized logic computation volume lecture notes computer science 
springer verlag new york ny usa 


gordon 
melham 
hol theorem proving environment higher order logic 
cambridge university press 
isbn 

henglein 
dynamic typing 
krieg br editor proceedings esop volume lecture notes computer science pages 
springer verlag 


jouannaud 
syntactic theories 
proceedings mathematical foundations computer science volume lecture notes computer science pages czechoslovakia 
springer verlag 


jouannaud kirchner 
solving equations algebras rulebased survey uni cation 

lassez plotkin editors computational logic 
essays honor alan robinson chapter pages 
mit press cambridge ma usa 

kirchner kirchner vittek 
designing constraint logic programming languages computational systems 
van hentenryck saraswat editors principles practice constraint programming 
newport papers chapter pages 
mit press 

kirchner 
syntactic theories uni cation 
proceedings th ieee symposium logic computer science philadelphia pa usa pages june 

kirchner 
moreau 
re ective extension elan 
meseguer editor proceedings rst international workshop rewriting logic volume asilomar california september 
electronic notes theoretical computer science 


undecidable properties syntactic theories 
book editor proceedings th conference rewriting techniques applications como italy volume lecture notes computer science pages 
springer verlag april 

leroy mauny 
dynamics ml 
hughes editor functional programming languages computer architecture volume lecture notes computer science cambridge ma usa august 
springer verlag 

luca jim mick bill greg 
module type system 
popl pages israel 
hebrew university 

mart oliet meseguer 
rewriting logic logical semantic framework 
technical report sri csl sri international computer science laboratory august 
appear gabbay ed handbook philosophical logic oxford university press 

meseguer 
conditional rewriting logic uni ed model concurrency 
theoretical computer science 

milner tofte 
de nition standard ml 
mit press cambridge massachusetts london england 


moreau kirchner 
compiler rewrite programs theories 
principles declarative programming number lecture notes computer science pages 
springer verlag september 
report loria 

paulson 
higher order implementation rewriting 
science computer programming 

paulson 
foundation generic theorem prover 
journal automated reasoning 

paulson 
isabelle theorem provers 
odifreddi editor logic computer science 
academic press 

smith 
re ection semantics lisp 
proceedings th acm symposium principles programming languages salt lake city 
acm press 

smolka 
foundation higher order concurrent constraint programming 

jouannaud editor proceedings st international conference constraints computational logics munich germany volume lecture notes computer science pages 
springer verlag 

vittek 
elan un cadre logique pour le de langages de programmation avec contraintes 
th ese de doctorat universit universit henri poincar nancy october 

vittek 
compiler nondeterministic term rewriting systems 
ganzinger editor proceedings rta volume lecture notes computer science pages new brunswick new jersey july 
springerverlag 

