tractable constraints finite semilattices jakob rehof torben ae 
mogensen diku department computer science dk copenhagen denmark 
electronic mail diku dk fax 
introduce notion definite inequality constraints involving monotone functions finite meet semilattice generalizing logical notion horn clauses give linear time algorithm deciding satisfiability 
characterize expressiveness framework definite constraints show algorithm uniformly solves exactly set meet closed relational constraint problems running small linear time constant factors fixed problem 
give alternative technique reduces inequalities satisfiability horn clauses study efficiency 
show algorithm complete maximal class tractable constraints proving strict extension lead np hard problems meet semilattice 
keywords finite semilattices constraint satisfiability program analysis tractability algorithms 
program analysis problems solved generating set constraints domain solving 
examples include binding time analyses described usage count analysis region size analysis described :10.1.1.24.9456:10.1.1.24.9456
see section 
show solve certain classes constraints finite domains efficiently characterize classes tractable 
solution methods tool analysis designers characterization help designer recognize analysis may bad worst case behaviour 
due space limitations details proofs left 
full details 
monotone function problems poset finite set monotone functions af arity call pair phi monotone function problem mfp short 
phi phi denote set phi terms ranged oe ff 
af ranges constants ff fi fl range denumerably infinite set variables function symbol corresponding constants variables collectively referred atoms range atoms 
assume fixed enumeration 
vn 
number vm denote sequence variables enumeration ae set write ae th coordinate ae 
mg 
ae implicitly considered mapping ae vm defining ae ae 
mg 
ae ae ae 
ae constraint set phi finite set formal inequalities form phi set distinct variables occurring term denoted ar constraint set ar denotes set distinct variables occurring assume ar vm ae term ar vm ae ff ae ae ff ae 
ae ae 
ae 
function monotone term constraint set ar vm ae say ae valuation say ae satisfies written ae iff ae ae holds say satisfiable exists valuation ae ae set solutions denoted sol set fae ae ar vm phi mfp define decision problem phi sat constraint set phi determine satisfiable 
measure size term number occurrences symbols constants variables function symbols size constraint set jcj number occurrences symbols assume dimensional operation matrixes 
af 
af 
representation evaluating function arguments 
af constant time operation evaluating arbitrary functional term 
lattice component assumed set elements additional operation matrix mt defining upper bound mt recover order relation iff representation referred matrix representation 
shall see appropriate representation semilattice case reduced case lattice 
problems phi phi sat np hard problem phi sat obviously np guess verify solution non deterministically polynomial time 
instance non trivial finite lattice problem phi fu tg np complete reduction cnf sat propositional satisfiability 

qm logically satisfiable 

qm satisfiable point chain 
structure poset important complexity see 
need impose restrictions problems tractable 
development shall generally assume meet semilattice 
note development transfers join semilattices lattice theoretic dualization 
definite problems phi mfp 
constraint set phi inequality form atom right hand side called definite 
definite set written var var fi variable expressions having variable fi right hand side constant expressions having constant right hand side 
note satisfiability definite inequalities phi fug point boolean lattice exactly problem satisfiability propositional horn clauses horn clauses form 
pn term called simple constant variable form 
am nested function applications constraint set called simple terms simple 
normalization transforms definite set simple definite set definite ff 

ag ar vm tuple terms define ff 
vm 
vm lemma 
reduction strongly normalizing normal form definite set definite jc jcj 
monotonicity guarantees normalized set equivalent original set lemma 
sol fae ae sol ar vm appendix gives algorithm called solving definite constraints mfp phi finite lattice algorithm exploits normalization achieve linear time worst case complexity 
shall change slightly algorithm works meet semilattices 
correctness algorithm follows properties update current valuation ae fi ae fi increases strictly order particular termination follows finite height iteration step finds solution set variable expressions solution exists satisfy constant expressions monotonicity functions 
algorithm similar technique kildall fast fixed point computation data flow frameworks linear time algorithm dowling gallier solving problem 
fact iteration step easily seen equivalent search fixed point monotone operator lattice fixed point identical post fixed point observed section definite inequalities strictly subsume horn clauses 
see section section connection horn clauses 
theorem 
correctness solution phi minimal solution algorithm outputs ae minimal solution solution algorithm fails 
linear time complexity algorithm shown amortizing number times test conditional loop ae oe fl executed total input worst case 
assume lemma normal form modulo expansion factor 
denote height finite lattice maximal length chain theorem 
complexity fixed mfp phi algorithm runs time jcj performs delta jcj basic computations input algorithm operates uniformly phi considered decision procedure uniform problem phi constraint set phi satisfiable 
case jlj worst case jlj amax size function matrixes amax maximal arity functions phi input size jlj jlj amax jcj 
log cost matrix look get maximum cost amax delta log jlj basic computation resulting amax delta log jlj delta jlj delta worst case behaviour uniform problem 
algorithm generalizes cases poset finite meet semilattice follows 
denote lattice obtained adding top element change algorithm adding test ff ae ff fail output step 
extend functions phi 
af 
modification algorithm referred algorithm algorithm obviously sound soundness algorithm complete decision procedure semi lattices top element solution variable expressions maps variable top element clearly solutions relational problems inequality constraints special case general framework relational constraints 
relational constraint problem pair gamma finite poset finite set finite relations ar ar arity 
called relation relational constraint set gamma finite set gamma terms form 
ar ranges variables constants drawn size constraint term 
ar jtj ar size jcj constraint set sum sizes terms say constraint set satisfiable exists valuation ae ae 
ar ae term 
ar ar vm sol set valuations ae satisfying define decision problem gamma sat constraint set gamma satisfiable 
denotes th coordinate vector notation 
xm write abbreviation 
xm expression considered term 
representability interested question relational constraint problems efficiently solved algorithm 
translates question problems transformed definite inequality problems cost transformation 
relation called representable respect constraint problem gamma sol constraint set gamma say problem gamma problem inequality order relation representable respect gamma say problem gamma minimal solutions sol minimal element respect constraint set gamma sol 
gamma meet semilattice holds implies gamma said meet closed problem 
relational problem gamma representable definite form meet semilattice exists mfp phi constraint sets gamma exists definite set phi sol sol 
suppose meet closed relation meet semilattice 
define partial function hr hr fy hr undefined 
hr monotone defined xy dom hr hr hr dom hr 
dom hr hr satisfies lemma 
dom hr hr lemma characterize class relational problems solved algorithm problems expressed definite inequalities follows theorem 
representability 
gamma meet semilattice 
gamma representable definite form gamma meet closed 
particular gamma meet closed constraint set gamma represented definite simple constraint set jc delta jcj maximal arity relation 
gamma relational constraint problem inequality arbitrary poset 
conditions equivalent gamma minimal solutions 
ii gamma meet closed meet semilattice 
iii gamma representable definite form 
observe property theorem seen strict generalization known fact set boolean vectors definable set propositional horn clauses closed conjunction view notion definite inequalities generalizes notion horn propositions boolean case arbitrary meet semilattice 
seen meet closed problem represented definite functional constraints 
conversely consider distributive constraint sets mfp constraint sets right hand side built distributive functions distributive sets strictly include definite ones distributive set represented relational set problem functions regarded relations graphs theorem algorithm solve phi sat problem restricted distributive constraint sets 
practice may convenient translate distributive set directly definite auxiliary functions defined meet semilattice partial function fy undefined satisfies 
lattice total function monotone 
lemma 
distributive 
dom transformation fa 
fa 
vm vm analogous normalization satisfies properties corresponding lemma lemma 
mfp phi meet semilattice phi fd fh 
set distributive functions lemma proposition 
phi mfp meet semilattice 
distributive constraint set phi exists definite simple constraint set phi sol fae ae sol ar jc jcj number inequalities maximal arity function definability condition propositional horn clauses special case general model theoretic characterization horn definability order predicate logic arbitrary order sentence oe logically equivalent horn sentence oe preserves reduced products models see depth treatments result 
see note definite inequalities allowed monotone functions special case horn implications may function meet operation 
easy see general define arbitrary relation meet operation semi lattice instance set inequalities variable meet function convex sol imply sol 
instance element chain subset meet closed convex defined just meet operation 
function distributive 
boolean representation show sets definite inequalities finite lattices translated propositional formulae direct correspondence solutions propositional system solutions lattice inequalities 
lattice elements represent element element number elements fl 
ng 
represent element vector boolean values oe oe 
iff define mapping 
fl clear oe oe 
monotone 
oe form galois connection translate definite inequalities lattice terms sets definite inequalities assume transformed constraints form 
af translate constraints variables 
sets constraints boolean variables 


kn extend oe variables setting oe 
define oe th component oe 
don index representation convenience assign index define oe corresponds extending representation vector extra bit elements 
generate variable set constraints ik ij need set pairs transitive reflexive closure yields ordering 
constraints ensure solution constraint set image oe 
note works lattice solutions constraints variable meet join solutions 
general horn clauses model ordering relation meet closed best extend construction meet semi lattices 
th frontier smallest subset af oe 
af iff exist 
af 
af 
af 
defined set 
af oe 
af intersection sets 
worst case may size jl af smaller 
distributive jf 

af generate constraint 
af new constraint oe 
oe ja af oe index translation 
af set new constraints 
theorem 
constraint 
af satisfiable iff constraints translation ordering constraints components variables 
solution translation image oe maps solution 
af oe order preserving solutions map solutions 
complexity 
translated set constraints point lattice set constraints boolean point lattice 
size translated constraint set calculated follows variable introduce variables 
contains constraints ensure solution map 
image element constraint 
af introduce number constraints size 
number constraints theta af size constraint 
af size translation af times size original constraint 
bringing get jc amax theta jcj theta jv amax maximal arity function symbol jv number variables fixed lattice set function symbols linear expansion 
uniform problem input operation matrices function symbols plus constraints 
size operation matrix function arity size input greater amax jcj 
size output amax theta jcj theta jv size input sum values size output approximately product 
get quadratic worst case expansion uniform problem 
exponential dependence arity function symbols may bad argued see reasonable translation boolean constraints expand non polynomially arity function symbols 
comparing algorithm see theorem see runs time linearly dependent amax uniform case boolean representation general case arities known small 
satisfiability translation 
constraint translation form uam variables constants ranging lattice 
constraints horn clauses solved time linear size constraint set procedure 
intractability extensions seen algorithm efficiently decides uniform satisfiability problem uniform gamma instances gamma restricted meet closed 
relevant ask extended cover relations meet closed ones finding algorithm entirely different 
main purpose section demonstrate np extension possible meet semilattice shows algorithm complete maximal tractable class problems meet closed ones 
meet semilattice say problem gamma maximal meet closed problem gamma meet closed meet closed particular non uniform satisfiability problem frg sat np complete 
show distributive lattice maximal meet closed problem deal general case 
proof composing birkhoff representation theorem finite lattices schaefer dichotomy theorem complexity logical satisfiability problems 
lattice idl set order ideals irr set join irreducible elements finite distributive lattice irr 
fixed enumeration irr birkhoff representation theorem entails idl irr defined fy irr xg map order embedding setting 
refer canonical embedding fh 

rg 
gamma distributive define problem gamma sg 
denote relation symbol corresponding relation 
constraint set gamma kn relations arity interested problems gamma gamma sat polynomial time reducible gamma sat 
problem reduction possible general constraint language gamma expressive gamma instance unary relation symbol may get translated symbol arity write constraints patterns expressing exists reversal general expressed constraint language gamma gamma certain kind relations possible 
distributive lattice canonical embedding pi denote set projection relations ij 
ng defined follows ij see 
recall lattice order ideal closed subset join irreducible implies distributive order embedding lattices injective map preserving meet join 
notation hy 
yk denote flattened kn vector obtained concatenating tuples 
yk single tuple order detail 

zn 
gamma yk 
yk 
xk write 
xk easy check ij meet closed relations 
non trivial express ij ij respectively 
constraints form ij written 
course need explicit order define projection relations long talk join irreducible elements appropriate way example 
phi irr 
suppose function irr 
distributive functions condition equivalent condition mentioned condition expressed distributive inequalities phi equivalent distributive constraint 
gamma constraint set gamma describe translation called gamma constraint set gamma pi follows 

enumeration constraint terms written term form ha 
vector atomic terms arity 
term ff 
ff unique fresh variables translation term relational term ha 
gets translated constraint set fr ff 
ff ff gg phi ff ff fi fi variable psi 
define gamma constraints gamma ij simulate patterns show lemma 
gamma non trivial distributive lattice constraint set gamma 
satisfiable gamma gamma satisfiable gamma pi 
set gamma contributes jcj new constraints new constraint determined distinct pair occurrences variables straight forward show lemma 
constraint set gamma gamma jcj delta jcj 
recall contents schaefer dichotomy theorem 
yields powerful classification see theorem schaefer 
gamma boolean problem 
satisfiability problem gamma sat polynomial time decidable conditions satisfied relation closed disjunction relation closed conjunction relation satisfies closure condition xy yz zx relation affine satisfies closure condition phi phi phi exclusive disjunction 
conditions satisfied problem gamma sat np complete log space reductions 
meet semilattice lattice denote extension lattice addition top element earlier 
lattice definition 
say distributive meet semilattice meet semilattice distributive lattice 
distributive meet semilattice know previous remarks canonical embedding map referred canonical embedding 
meet semilattice ml yg meet relation results proved detail 
lemma 
non trivial distributive meet semilattice canonical embedding 
relation ml satisfies ml closed conjunction ml closed disjunction ml ml affine 
distributive pi problem gamma meet closed 
show relation problem gamma sat gamma frg np hard reduction gamma sat turn shown np hard lemma lemma lemma schaefer dichotomy theorem 
theorem 
intractability extensions distributive case non trivial distributive meet semilattice problem gamma pi fml maximal meet closed 
birkhoff theorem know embeds distributive method prove theorem arbitrary finite lattices 
arbitrary meet semilattice weaker result direct reduction cnf sat theorem 
intractability extensions general case nontrivial meet semilattice relation meet closed 
exists meet closed problem gamma problem gamma sat np complete gamma frg 
theorem entails uniform satisfiability problem restricted relations np hard matter extended theorem says particular non uniform problem extension np hard hard problem depends extension 
contrast theorem asserts existence particular non uniform problem hard matter extended 
results extend case finite domains results considers totally ordered domains 
see 
applications program analysis application constraint solving technology shown program analysis annotated type systems 
systems programs types annotated elements finite lattice 
type rules impose constraints annotations types term sub terms 
typing program generate set constraints solved 
constraints form suitable solution methods 
example usage count analysis annotations lattice 
constraints binary operators nk delta nk nk delta addition multiplication counts 
constraints forms delta delta noting equivalent kind solved methods shown direct method translation boolean constraints 
translation uses mapping shown lattice elements 
replace constraint variable variables binary domain constraint constraints translated translation shown section 
table shows result reduction constraints involve constants 
lation constraint translation delta delta section giving examples results reason problems interest program analysis 
example 
problem phi fg maximal meet closed 
see represent phi relational problem gamma fm 
follows theorem gamma maximal relations set pi defined terms horn definability cf 
comment theorem fact relations pi meet closed 
example 
denote point chain 
distributive lattice occurs practical contexts program analyses involving usage counting :10.1.1.24.9456
pred denote predecessor function pred pred pred 
pred distributive function 
consider problem phi fu clearly meet closed viewed relationally maximal 
see note join irreducible elements 
define function setting define function setting pred 

recalling example see functions sufficient represent projection relations pi express condition irr distributive constraint 
follows theorem phi maximal problem 
example 
consider uniform function problem restricted distributive inequalities 
theorem problem contains meet closed problems 
follows theorem uniform extension problem np hard 
words monotone function symbols occur left side inequalities single non distributive function symbol occur arbitrarily right side uniform problem np hard 
example 
applications program analysis semilattice thought domain program properties lower elements representing information higher elements analysis implemented constraint problem minimal solutions desirable property guaranteed yield uniquely determined piece information optimal relative abstraction analysis 
theorem says inequality constraint problems natural property represented definite inequalities solved linear time algorithm studied efficient solution methods classes constraint problems finite meet semilattices alternatively elements information may sit higher semilattice 
results apply development course lattice theoretic sense encompass join semilattices join closed problems 
definite inequalities involving monotone functions 
distributive inequalities 
boolean inequalities horn clauses 
meet closed relational constraints 
shown classes equivalent modulo linear time transformations fixed problem estimated constant factors involved 
fixed lattice fixed set function relation symbols methods linear time size constraint set case boolean representation time depends non linearly maximal arity relation symbols 
furthermore shown classes solved uniformly polynomial time maximal sense extension leads np hard uniform problems 
wish fritz henglein neil jones seidl mads tofte referees helpful discussions comments 
algorithm algorithm shown 
outline data structures operations assumed linear time implementation details 
list ilist records representing inequalities record holds boolean variable called inserted 
array clist fi indexed variables ar 
entry clist fi holds array pointers inequalities ilist entry inequality fi occurs 
item clist fi corresponds unique occurrence fi number distinct items clist fi bounded jcj 
structure ns doubly linked list pointers inequalities ilist var item ilist back pointer set representing item ns 
pointer head element ns 
idea ns holds holds pointers inequalities var satisfied current interpretation ae see 
finite map ae mapping distinct variable element map ae holds current guess satisfying valuation var map ar map sends variable bottom element map ae implemented array lattice elements indexed variables 
write ae fi ae fi 
evaluating ae fi constant time operation operation updating ae fi 
operation pop removes head element ns returns setting corresponding inserted field false 
insert inserts inequality pointer front ns updating inserted field 
inserted field true insert 
drop removes pointer element ns ns inserted filed analogy insert 
operations implemented constant time operations data structures 
operation normalize transforms definite set equivalent normal set runs time jcj lemma lemma 

input finite set definite inequalities phi ff lg monotone finite lattice ar vm 
initially normalize ae vm cvar initialize lists clist ff distinct variable ff initialize ilist hold inequalities ns fi cvar ae fig 
iteration ns fi pop ns ae fi ae ae fi oe fl clist fi ae oe fl insert oe fl drop oe fl 
output ae output ae fail 
algorithm satisfiability definite constraints phi algorithm followed convention writing pattern inequality pointed inequality pointer pointer 

birkedal tofte 
region inference von neumann machines region representation inference 
proc 
rd annual acm symposium principles programming languages popl pages 
acm press january 

birkedal 
binding time analysis standard ml 
lisp symbolic computation september 

bondorf jrgensen 
efficient analyses realistic line partial evaluation 
journal functional programming july 

chang keisler 
model theory 
studies logic foundation mathematics vol 
rd ed north holland 

davey priestley 
lattices order 
cambridge mathematical textbooks cambridge university press 

dechter pearl 
structure identification relational data 
artificial intelligence 

william dowling jean gallier 
linear time algorithms testing satisfiability propositional horn formulae 
journal logic programming 

dirk fritz henglein christian mossin 
polymorphic recursion subtype qualifications polymorphic binding time analysis polynomial time 
proc 
nd int static analysis symposium sas glasgow scotland lecture notes computer science 
springer verlag september 

garey johnson 
computers intractability guide theory np completeness 
freeman 

greenlaw hoover ruzzo 
limits parallel computation 
theory 
oxford university press 

henglein 
efficient type inference higher order binding time analysis 
hughes editor functional programming languages computer architecture cambridge massachusetts august lecture notes computer science vol 
pages 
acm berlin springer verlag 

hodges 
model theory 
encyclopedia mathematics applications vol 
cambridge university press 

jeavons cooper 
tractable constraints ordered domains 
artificial intelligence 

peter jeavons david cohen 
algebraic characterization tractable constraints 
annual conference computing combinatorics cocoon pages 
springer verlag lncs 

peter jeavons david cohen marc gyssens 
unifying framework tractable constraints 
international conference principles practice constraint programming pages 
springer verlag lncs 

kildall 
unified approach global program optimization 
proc 
acm symp 
principles programming languages popl 

ae 
mogensen 
types uses 
technical report preparation 

vaughan pratt jerzy tiuryn 
satisfiability inequalities poset 
studia logica memorial issue appear 

jakob rehof torben mogensen 
report tractable constraints finite semilattices 
technical report diku dept computer science university copenhagen denmark 
available www diku dk personal rehof publications html 

thomas schaefer 
complexity satisfiability problems 
tenth annual symposium theory computing stoc pages 
acm 

mads tofte jean pierre talpin 
implementation typed call value calculus stack regions 
proc 
st annual acm sigplan sigact symposium principles programming languages popl portland oregon 
acm acm press january 
