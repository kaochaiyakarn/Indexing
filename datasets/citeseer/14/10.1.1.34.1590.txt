research report series third homomorphism theorem jeremy gibbons department computer science university auckland july centre discrete mathematics theoretical computer science functional programming jeremy gibbons functional pearls third homomorphism theorem jeremy gibbons department computer science university auckland private bag auckland new zealand 
email jeremy cs auckland ac nz third homomorphism theorem folk theorem constructive algorithmics community 
states function lists computed left right right left necessarily list homomorphism computed list 
formalize prove theorem improve ano sorting algorithm log 
list homomorphisms functions nite lists promote list concatenation functions exists binary operator nite lists hx hy denotes list concatenation 
functions ubiquitous functional programming 
examples list homomorphisms identity function id map function map applies function element list function concat concatenates list lists single long list function head returns rst element list function length returns length list functions sum min return sum smallest boolean conjunction elements list respectively 
useful list functions list homomorphisms 
example function lsp returns longest sorted pre jeremy gibbons list 
knowing lsp lsp allow computation lsp 
function typical example leftwards function computed right left 
dually rightwards functions computed left right 
obvious relationship homomorphisms leftwards rightwards functions known specialization theorem bird homomorphisms leftwards rightwards functions 
constructive algorithmics community known second homomorphism theorem 
homomorphism theorem states homomorphism factored composition reduction homomorphism value singleton list sole element list map conversely composition homomorphism subject relationship homomorphisms leftwards rightwards functions 
relationship obvious equally useful 
converse specialization theorem states function leftwards rightwards homomorphism 
theorem fairly known constructive algorithmics community bearing name third homomorphism theorem 
somewhat status folk theorem harel 
conjectured richard bird proved lambert meertens train journey netherlands meertens theorem published non archival sources barnard gibbons feel deserves wider recognition 
formalize prove theorem derive mergesort 
remainder structured follows 
section introduce necessary notation 
section state second homomorphism theorems completeness sake 
section contains main result third homomorphism theorem 
section theorem derive mergesort 
earlier version appeared gibbons 
notation section introduce notation rest 
functions function application denoted juxtaposition tightest binding associates left 
function composition written 
lists purposes lists nite sequences elements type 
list empty singleton concatenation lists 
write empty list singleton list element function concatenation concatenation associative unit 
example term denotes list elements written abbreviated form 
write operator associates right 
functional pearls homomorphisms binary operator list function homomorphic lists hx hy example functions length sum homomorphic sum sum sum length length length note necessarily associative range associative 
necessarily unit range exists unit 
unit de ned 
example head homomorphic unit head unde ned 
associative operator unit write hom fe unique homomorphic function example sum hom id length length hom leftwards rightwards functions list function leftwards binary operator elements lists hy need associative 
unique leftwards function written foldr 
example function lsp referred earlier leftwards lsp foldr de nition 
expanding de nition leftwards function reveals signi cance name 
example foldr computation proceeds right left 
general foldr foldr foldr ey name foldr unfortunate right left computation established symmetrically list function rightwards binary operator lists elements hx operator need associative 
write foldl jeremy gibbons unique rightwards function expanding de nition reveals left right pattern computation 
example general foldl foldl foldl foldl ex second homomorphism theorems sake completeness state proof second homomorphism theorems 
de nition function form hom id called reduction 
de nition function hom written map called map 
theorem homomorphism theorem homomorphism written composition reduction map hom fe hom id map conversely composition homomorphism 
theorem second homomorphism theorem specialization theorem homomorphism leftwards rightwards function 
associative hom fe foldr fa foldl fa third homomorphism theorem section contains main result statement proof third homomorphism theorem 
theorem third homomorphism theorem leftwards rightwards homomorphism 
fact show homomorphic functional pearls gu lemma shows 
lemma computable total function enumerable domain computable possibly partial function proof suitable de nition compute simply enumerate domain return rst hx range process terminates 
proof third homomorphism theorem relies lemma lemma list function homomorphism implication holds lists hv hx hw hy note passing interesting corollary lemma injective function homomorphic proof obvious homomorphism hx lists consider part 
assume satis es 
choose de ne operator equation gu statement third homomorphism theorem 
show homomorphic 
way hx hx hy hy hx hy hx hy wenow prove third homomorphism theorem 
proof show leftwards rightwards satis es 
jeremy gibbons suppose foldr foldl hv hw hy 
treating leftwards function foldr foldr foldr ew hw foldr foldr ey foldr treating leftwards function symmetrically treating rightwards function lemma homomorphism 
application sorting third homomorphism theorem derive log sorting algorithm mergesort 
fact third homomorphism theorem yields ine cient homomorphic sorting algorithm little derive mergesort function sort sorts list leftwards written sort foldr ins ins ins just traditional takes time sort elements 
function rightwards written backwards sort foldl ins ins xa functional pearls third homomorphism theorem concludes sort homomorphic 
homomorphism constructed proof hom sort function sort sort sort permutes elements list 
pick id simplicity giving sort gives homomorphic method sorting clearly ine cient 
sort sort yielding concatenate presumably sorting method sort result improve algorithm capitalizing fact context evaluating hom arguments sorted 
improvement takes directly traditional mergesort algorithm log 
suppose rst sorted sort sort foldl ins foldl ins foldl ins foldl ins sort sorted foldl ins uv merge foldl ins merge picked suggestive name step justi ed observation merge foldl ins merge foldl ins foldl ins ins ub merge ins ub straightforward method merging lists rst sorted jeremy gibbons produce sorted list 
note takes quadratic time computing hom merge takes quadratic 
improvement assuming second argument sorted 
lemma easily proved induction 
write denote element list lemma suppose sorted 
foldl ins foldl ins xy merge de nition merge foldl ins sort sorted suppose sorted 
merge fde nition merge foldl ins fde ning property foldl ins ins consider cases separately 
case sorted ins 
log foldl ins ins ins foldl ins ins ub foldl ins ins ub fde ning property foldl ins de nition merge merge functional pearls case sorted foldl ins ins ins foldl ins lemma foldl ins de nition merge merge just derived characterization merge arguments sorted merge merge merge merge merge standard way merging sorted lists comparison usually 
version merge takes linear time yields known mergesort algorithm iso nlog list decomposed balanced fashion 
green describe similar derivation merge mergesort 
summarize proved bird meertens third homomorphism theorem stating function lists computed left right right left necessarily list homomorphism 
example deriving mergesort illustrating theorem usually give cient characterization homomorphism development done produce 
applications third homomorphism theorem barnard gibbons 
murray cole rod downey sergei lindsay groves lambert meertens participants computing australian theory seminar sydney december especially richard bird comments improve presentation content 
due sue gibbons energetic red pen 
research reported partially supported university auckland research committee number 
jeremy gibbons barnard schmeiser skillicorn 
deriving associative operators language recognition 
bulletin european association theoretical computer science pp 

bird 
theory lists 
broy editor logic programming calculi discrete design pp 

springer verlag 
available technical monograph prg programming research group oxford university 
gibbons 
computing downwards accumulations trees quickly 
gupta topor editors th australian computer science conference pp 
brisbane 
available anonymous ftp jeremy papers quickly ps ftp cs auckland ac nz 
gibbons 
third homomorphism theorem 
barry jay editor computing australian theory seminar 
university sydney 

constructing list homomorphisms 
technical report mip fakult ur mathematik und informatik universit passau 
green 
program synthesis knowledge 
arti cial intelligence pp 

harel 
folk theorems 
communications acm pp 

meertens 
personal communication 
