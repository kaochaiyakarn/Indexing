bitwidth analysis application silicon compilation mark stephenson jonathan babb saman amarasinghe massachusetts institute technology laboratory computer science cambridge ma lcs mit edu ee princeton edu introduces bitwise compiler minimizes bitwidth number bits represent operand integers pointers program 
propagating static information forward backward program dataflow graph bitwise frees programmer declaring bitwidth invariants cases compiler determine automatically 
find rich opportunity bitwidth reduction modern multimedia streaming application workloads 
new architectures support sub word quantities expect bitwidth reductions save power increase processor performance 
applies analysis silicon compilation translation programs custom hardware realize full benefits bitwidth reduction 
describe integration bitwise silicon compiler 
advantage bitwidth information architectural synthesis reduce silicon real estate improve clock speed reduce power 
era general purpose reconfigurable architectures strive capture portion gains 
pioneers computing revolution described steven levy book hackers competed best precious architectural resource 
hand tuned program statement operand 
contrast today programmers pay little attention small details bitwidth data types programs 
instance programming language common bit integer data type represent single boolean variable 
dismiss shift emphasis consequence abundant computing resources expensive programmer time 
historical reason processor architectures evolved smaller operands eventually provided performance gains 
datapaths wider processor entire data path exercised regardless operand size 
additional overhead packing unpacking words save space memory reduced performance 
new era software exposed bits new compilation targets high level languages re need conserve bits 
architectures exposes subword control 
renovation simd architectures multimedia workloads 
architecture include intel multimedia extension mmx motorola altivec 
example altivec data paths operate bit quantities 
second class compilation targets comprises finegrain substrates reconfigurable architectures including field programmable gate arrays fpgas custom hardware asic standard cell designs 
cases architectural synthesis required support high level languages 
surge industrial academic interest developing new reconfigurable architectures 
custom silicon emphasis high level compilation accelerated consortium companies formed open system initiative focus standardization high level compilation 
third class compilation targets consists embedded systems effectively turn bit slices 
static information determined compile time control portions datapath program execution 
alternatively traditional architectures information optimize power consumption running program predicting bits datapath change time 
available commercial compilers effectively target new architectures 
programmers forced revert back writing low level code 
mmx libraries written assembly order expose sub word parallelism 
verilog vhdl hardware description languages burden bitwidth specification programmer 
compete marketplace designers choose minimum operand bitwidth smaller faster energy efficient circuits 
unfortunately explicitly choosing smallest data size operand tedious error prone 
programs malleable simple change may require hand propagation bitwidth information large segment program 
bitwidth information may dependent particular architecture implementation technology making programs portable 
automating bitwidth specification automatic bitwidth analysis relieves programmer burden identifying specifying derivable bitwidth information 
programmer higher level abstraction 
programmer explicitly specifies operand sizes languages allow bitwidth analysis valuable 
example bitwidth analysis verify specified operand sizes violate program invariants array bounds 
bitwidth analysis change single variable bitwidth life variable 
bitwise compiler bitwise minimizes bitwidth required static operation static assignment program 
scope bitwise includes fixed point arithmetic bit manipulation boolean operations 
uses additional sources information type casts array bounds loop iteration counts refine bitwidth information gathered 
implemented bitwise suif compiler infrastructure :10.1.1.103.6838
cases bitwise able analyze bitwidth information accurately bitwidth information gathered run time profiles 
average reduce size program scalars program arrays 
application silicon compilation focus application bitwidth analysis silicon compilation 
integrated bitwise silicon compiler 
compiler produces hardware input programs written fortran 
report performance results system bitwise optimizations 
results show analysis works context real system 
experiments show bitwise favorably impacts area speed power resulting circuits 
contributions summarize contributions follows 
ffl formulate bitwidth analysis value range propagation problem 
ffl introduce suite bitwidth extraction techniques seamlessly perform bi directional propagation 
ffl formulate algorithm accurately find bitwidth information presence loops calculating closed form solutions 
ffl implement analysis demonstrate compile time analysis approach accuracy run time profiling 
ffl incorporate analysis silicon compiler demonstrate bitwidth analysis impacts area speed power consumption synthesized circuit 
organization rest organized follows 
section defines bitwidth analysis problem 
bitwise implementation algorithms described section 
section provides empirical evidence success bitwise 
section describes silicon compiler section discusses impact bitwidth analysis silicon compilation 
related section conclude section 
bitwidth analysis bitwidth analysis attempts discover smallest types static variable assignment program retaining program correctness 
static variable assignment defined assignment ssa form 
library calls routines loops static bitwidth analysis challenging 
presence constructs may conservative assumptions operand bitwidth 
careful static analysis possible infer bitwidth information 
structures arrays conditional statements provide valuable bitwidth information 
instance bounds array set index variable maximum bitwidth 
program constructs masks divides right shifts type promotions boolean operations invaluable reducing 
code fragment exhibits constructs 
code excerpt benchmarks adpcm typical tomorrow important multimedia applications 
line code annotated line number facilitate discussion follows 
assume don know precise value delta 
index variable line assume legal program know value confined base bounds 
don know delta precise value restricting range values assume effectively reduce number bits needed represent 
similar fashion code lines ensure index value restricted 
mask line ensures value greater xf 
propagate information infer assignment outp line greater xff xf 
know value true false assignment line result boolean 
operation 
bitwise implementation introduce bitwise compiler new set compiler passes perform bitwidth analysis 
describing compiler infrastructure 
description algorithms follows section 
infrastructure bitwise compiler uses ssa intermediate form 
compiler performs numerical data flow analysis 
fortunately need complex symbolic analysis solving absolute numerical 
int min int int max max int int min int min int int min 

int max int max int max int max int int max int int max int min int max int int max int min int max int int max dr dr bw 
bw bl bl bl bl 
bl bl alternatives data structures bitwidth analysis 
lattice represents number bits needed represent variable 
lattice represents vector bits assigned variable lattice represents range values assigned variable 
index delta index index index index step index delta 
xf outp delta sample code illustrate fundamentals analysis 
code fragment taken loop adpcm coder adpcm multimedia benchmark 
section describes choice data structures propagating numerical information analysis 
consider candidate data structures 
visually depicts lattice formal ordering internal structure 
propagating bitwidth variable straightforward implementation described scott 
representation permits easy implementation yield accurate results arithmetic operations 
applying lattice transfer function incrementing bit number produces bit resultant may need bits 
addition significant bits variable candidates bit elimination 
maintaining bit vector variable complex representation requiring composition smaller bit lattices 
lattice allows elimination arbitrary bits variable representation support precise arithmetic analysis 
example eliminating arbitrary bits consider particular variable assigned values set 
analysis variable bit vector indicating eliminate significant bit 
data structure arithmetic imprecise analysis conservative assume addition results carry 
propagating data ranges final lattice considered 
lattice implementation chosen compiler 
data range single connected subrange integers lower bound upper bound 
data range keeps track variable lower upper bounds 
single range represent possible values variable representation permit elimination low order bits 
allows operate arithmetic expressions precisely 
technically representation maps bitwidth analysis general value range propagation problem 
value range propagation known useful value prediction branch prediction constant propagation procedure cloning program verification 
bitwise compiler choose propagate generality important applications arithmetic benefit exact precision 
lattice lifted lattice includes bottom element 
value dr represents value initialized 
additionally note value dr part lattice represents values statically determined 
regular set union define data range union union single connected subrange integers ha ah hb bh hmin max bh define data range intersection set integers subranges ha ah hb bh hmax min ah bh data range propagation data ranges propagated forward backward control flow graph 
shows subset transfer functions propagation 
forward propagated values subscripted arrow backward propagated values arrow 
general transfer functions take input data ranges return single data range 
discussion forward propagation 
ssa graph control flow graph ssa form 
initially variables ssa graph initialized dr informally forward propagation traverses ssa graph breadth order applying transfer functions forward propagation 
forward propagation known details omitted 
forward propagation allows identify significant number unused bits achieving optimal result 
additional minimization achieved integrating backward propagation 
example find data range stepped outside known boundaries back propagate new reduced data range instructions deprecated value compute results 
node boundary violation propagate reduced reverse breadth order 
backward propagation halts graph entry node reached fixed point reached 
elaborate consider pedagogical ssa graph shown 
forward backward propagation steps annotated graph 
numbers right list step 
step numbers black represent backward propagation data ranges 
backward propagation arrive data ranges assume know length array array program declaration 
substantially reduce data ranges variables backward propagation 
array bound information clamp data range 
propagate value backward reverse breadth order transfer functions backward propagation 
example propagating new value backward yields new data ranges gamma gamma reverse propagation halt range determined step 
uses results variable changed traverse graph forward direction 
confine data range reached fixed point analysis complete 
example see data range propagation subsumes constant propagation replace occurrences constant value 
considering loops informally reason termination 
application transfer function variable data range shrink amount 
theory apply rules eventually reach fixed point 
height lattice may practical solution non termination problem benchmarks 
problem easy solution 
successive iterations reduce range numbers variable represent bitwidth variable iterating user defined number iterations 
point analyzer computed assume data ranges composed bit integers derive height data range lattice follows dr 
ji int jg gamma delta input array int int max int int max int max int max int int min int max int forward backward data range propagation 
application forward propagation rules shown right white backward propagation rules shown black 
array bounds information tighten bounds variables 
reduced potentially sub optimal bound variable bitwidth 
loops optimization loop instructions crucial usually comprise bulk dynamic instructions 
traditionally data flow analysis techniques iterate back edges graph fixed point reached 
presence simple loop carried expressions technique saturate 
method take account static knowledge loop bounds related variables bits typical bit integer declarations 
important applications loop carried arithmetic expressions 
new approach required case attempt find closed form solutions 
find closed form solution height lattice irrelevant 
loop extension ssa form order search closed form solutions identify loops 
ease loop identification ssa form converting oe functions occur loop headers functions 
extension assumed remainder 
loop analysis find closed form solution loop carried expressions techniques introduced 
techniques allow identify classify sequences loops 
sequence group instructions mutually dependent instructions group 
words sequence strongly connected component scc program dependence graph 
examine instructions sequence try find closed form solution sequence 
algorithm detecting classifying sequences shown 
define function sequence type classify sequence procedure 
create partial hb hc ch ha gamma ah gamma ha gamma ah gamma ha ah hb hb hc ha ah ha ah ha ah hb gamma ch gamma hb hc ch ha ah omega gamma gamma gamma gamma ff min bitwidth bitwidth hb hal ah hal ah bh ha ah bh ha ah hx xh fx hb hc ch oe ha ah ha ah hy yh hb hc ch ha yh gamma hy ah selected subset transfer functions bi directional data range propagation 
equations left inputs transfer functions right 
variables subscripted direction computed 
transfer function adds data ranges subtracts data ranges 
masking operation returns data range corresponding smallest inputs 
bitwidth function returns number bits needed represent data range 
type casting operation shown propagated data range maximum range represented input type 
function applied know value specified range 
instance rule applied limit data range variable indexing static array 
rules applied confluence points 
purpose procedure detects sequences graph ssa nodes passed 
commonly occuring sequence closed form solution computed 
graph nodes graph ssa nodes comprise loop 
procedure find closed form solutions graph nodes entry ssa node integer components listof instruction seq seq sequence listof instruction algorithm assumes head loop annotated loop 
loop type loop infinity 
entry entry node graph nodes entry foreach instr entry instr type instr tarjan algorithm find connected components components find sccs graph nodes foreach seq components foreach seq components seq dependent seq add vertex components seq seq foreach sequence components sequence outgoing vertices classify sequence sequence components components gamma graph sequence procedure purpose procedure classifies sequence passed composition instructions 
inputs list instructions 
procedure classify sequence sequence oneof linear polynomial geometric integer initial final value sizeof sequence instr instruction sequence instr destination evaluate instruction instr determine type sequence dealing 
sequence type sequence boolean foreach instr sequence instr destination elseif linear instr function sequence instr initial evaluate instruction instr foreach instr sequence final evaluate instruction instr instr final growth final gamma dr initial dr foreach instr sequence instr destination instr dr growth elseif 
elseif top sequence foreach instr sequence instr destination dr procedure pseudocode algorithms detect classify compute closed form solutions commonly occuring sequences 
function find closed form solutions detects sequences code calls classify sequence classify sequences compute closed form solutions 
der types expressions wish identify 
expression lattice orders various expressions set containment 
top lattice represents undetermined expression bottom lattice represents possible expressions 
linear sequences represent induction variables loop bodies 
polynomial induction sequences represent composition linear sequences 
likewise geometric sequences composed polynomial sequences linear sequences 
sequence geometric polynomial linear invariant boolean sequence lattice orders sequences set containment 
instruction type source language create transfer functions operate lattice 
transfer function implemented table indexed expression types source operands 
destination operand tagged expression type dictated transfer function 
see detailed explanation 
extend done identifying boolean sequences 
sequences easy find allow represent boolean static assignment bit 
determined type expression sequence classify types expressions composition oe 
instance boolean sequences contain number oe functions contain boolean sequences 
determined type sequence component represents solver compute sequence closed form solution 
type sequence solver takes input sequence initial values variables 
example consider simple code fragment analyzer converts code ssa form symbolic loop defined number times loop iterated 
case loop determined 
analyzer finds strongly connected components loop body components represent sequences 
example component shown 
sequence iteration iteration example shows detection computation linear sequence 
sequence shown left computation sequence shown right 
sequence contains single function linear type expression solver linear components 
solving process traced right sequence 
iteration compute growth factor sequence 
resulting data ranges shown column labeled iteration 
note solver evaluates function iteration uses operand defined outside loop body 
subsequent iterations operands 
multiply growth factor determine final result sequence 
second iteration loop simply adds final value sequence value computed iteration 
cases technique obviates need finding fixed point 
unable identify sequence set static assignments sequence maximum data range available dr 
alternatively iterate sequence fixed point reached reach user defined maximum number iterations 
maximum number iterations reached destination operands sequence set dr arrays traditional ssa form pointers arrays renamed 
special extensions ssa form proposed provide element level data flow information arrays :10.1.1.25.8502
extensions ssa form potentially provide accurate data range information bitwidth analysis convenient treat arrays scalars analysis inexpensive complexity standpoint compiling silicon analysis accurately determines data bus size embedded rams 
array modified insert new oe function merge array old data range new data range 
drawback method oe function required array assignment increasing size code 
def chains inherent intermediate representation simplifies analysis 
pointers pointer analysis radu span package determine sets variables commonly referred location sets pointer may 
analysis package tags memory location set information 
example discussion simplify discussion distinguish location sets modify location sets location set location set annotation occurs right hand side expression modify location set occurs left hand side expression 
benchmark type source lines description adpcm multimedia audio compress bubblesort scientific raw bubble sort convolve multimedia mit convolution histogram multimedia histogram multimedia integer fir scientific raw int 
matrix mult 
jacobi scientific raw jacobi relation life automata raw game life median multimedia median filter multimedia berkeley mpeg kernel automata mit new game life parity multimedia mit parity function pmatch multimedia mit pattern matching sor scientific mit point stencil sha encryption mit secure hash emulation berkeley floating point table benchmark characteristics example consider memory instruction assuming pointer point variable pointer point variable location set instruction may modify fa location set instruction fb 
variable instruction location set 
variables modify location set may modified 
keeping ssa guarantee unique assignment associated variable rename instruction modify location set 
furthermore certain variable modified oe function inserted variable modify location set merge previous version variable renamed version fa fb oe oe modify location set element element modified oe function need inserted 
extension ssa form allows treat de referenced pointers exactly manner scalars 
pointer pointer analysis package determine bitwidth pointer 
useful compiling non conventional device fpga memories segmented small chunks :10.1.1.161.1055
instance know pointer points array statically known size set bitwidth pointer accordingly 
bitwise results implemented compiler infrastructure forward propagation sequence detection algorithms described 
process implementing fortran program suif suif frontend pointer analysis alias analysis ssa conversion data range propagation annotated suif bitwidth reports traditional cad optimizations hardware netlist architectural partition place route architectural synthesis parallelization transformations rtl bitwidth analysis silicon compiler backend compiler flow includes general suif bitwise silicon cad processing steps 
back propagation algorithm 
section report general results standalone bitwise compiler composed suif passes shown 
results processing silicon compiler backend section section 
frontend compiler takes input program written fortran produces suif file 
parsing input program suif compiler performs traditional optimizations pointer analysis 
radu span 
come passes labeled bitwidth analysis 
passes realization algorithms discussed exception backward propagation 
total comprise roughly lines code 
discuss bitwidth reports generated passes backend processing 
continue pointer analysis information supplied alias information pass performs simple interprocedural analysis 
suif intermediate representation converted ssa form 
ssa conversion implements ssa extensions section section 
data range propagation pass invoked produce bitwidth annotated suif appropriate bitwidth reports 
experiments compiler new compile programs recursive procedure calls 
short term restriction limits complexity benchmarks set general purpose computing 
provides adequate support programs high level silicon synthesis 
table lists benchmarks section 
multimedia applications prevalent chose 
chose standard applications exhibit bit byte level granularity life 
register bit elimination shows percentage original register bits remaining program bitwise run 
register bits store static program variables 
lower bound obtained profiling code included 
particular data sets supplied benchmark lower bound represents fewest possible number bits needed retain program correctness best static analysis possibly achieve 
graph assumes variable assigned register 
case register allocator may lose gains analysis allocating register different sized operands 
useful metric register may affect functional unit size data path switching activity 
analysis dramatically reduces total number register bits needed 
cases analysis near optimal especially exciting applications perform abundant multi granular computations 
instance bitwise matches lower bound life bit byte level applications 
application substantially suboptimal performance median 
case analyzer unable determine bitwidth input data variables dependent input data assumed maximum possible bw 
adpcm life bubblesort jacobi median sha original bitwise dynam ic profile percentage total register bits remaining original versus post bitwidth analysis dynamic profile lower bound 
memory bit elimination shows percentage original memory bits remaining program 
memory bits defined data allocated static arrays dynamically allocated variables 
especially useful metric compiling non conventional devices fpga memories may segmented small chunks 
addition memory systems primary consumers power modern processors useful metric estimating power 
cases analyzer able determine near optimal memories 
couple contributing factors bitwise success reducing array 
multimedia applications initialize static constant tables represent large portion memory savings shown 
second bitwise capitalizes arrays boolean variables 
adpcm life bubblesort jacobi median sha original bitwise ic profile percentage total memory remaining original versus post bitwidth analysis dynamic profile lower bound 
bitwidth distribution interesting categorize variable grain size 
stacked bar chart shows distribution variable bitwidth analysis 
call distribution 
graph coherent rounded nearest typical machine data type size 
cases number bit variables substantially reduced bit values 
silicon compilation estimates register bits saved 
see sections reducing register bits results smaller datapaths subsequently smaller faster efficient circuits 
multimedia applications spectrum shows applications best prospect packing values sub word instructions 
adpcm bubblesort life jacobi median sha bits bits bits bit 
graph stacked bar chart shows distribution benchmark 
bitwidth analysis bits 
bitwise widths reduced bit machine types denoted narrower bit bars 
silicon compiler far shown bitwidth analysis generally effective optimization bitwise compiler capable performing task 
turn concrete application 
applied bitwidth analysis difficult problem silicon compilation 
lack space give problem silicon compilation brief treatment remainder section focus attention section impact bitwidth analysis context 
overview integrated bitwise silicon compiler research compiler development capable translating sequential applications written fortran directly hardware netlist :10.1.1.161.1055
compiler automatically generates specialized parallel architecture application 
translation feasible compilation system incorporates latest code optimization parallelization techniques modern hardware synthesis technology 
shows details integrating bitwise compiler flow 
detailed steps compiler unimportant discussion compressed black boxes 
reading program performing traditional compiler optimizations pointer analysis bitwidth analysis steps invoked 
steps described detail section 
silicon compiler backend follows steps 
additional parallelization transformations applied followed high level architectural partition place route forms parallel communication threads 
architectural synthesis step translates threads custom hardware 
transformation traditional computer aided design cad optimizations applied generate final hardware netlist 
flowchart raised steps new bitwise passes remaining steps re previous suif compiler passes 
implementation details compiler implemented set suif passes followed commercial rtl synthesis 
current implementation uses latest version synopsys design compiler fpga compiler synthesis 
large set suif passes taken directly mit raw compiler backend turn built harvard compiler 
backend verilog generator implemented top stanford data structures :10.1.1.116.7843
despite large number suif passes majority compiler run time consumed cad synthesis tools 
usage limited released compiler researchers mit princeton reconfigurable computing research university massachusetts system chip research 
reconfigurable computing compiler coupled silicon compilation tools emulation system software drivers annapolis system wildcard pcmcia card 
custom chip design downstream tools capable accepting logic netlist placing routing design specific silicon substrate 
adpcm bubblesort convolve histogram jacobi life median parity pmatch sor total bits bitwise bitwise register bits bitwise optimization 
case bitwise saves substantial register resources final silicon implementation 
impact silicon compilation section characterize impact bitwidth analysis silicon compilation 
described previous section silicon compiler opportunity specialize memory register datapath widths match application characteristics expect bitwidth analysis large impact domain 
backend cad tools implicitly perform bitwidth calculation optimizations dead logic elimination accurate measurements require compilation 
need compare final silicon bitwise 
introduce benchmarks section describe dramatic area latency power savings bitwidth analysis enables experiments experimental results initial set applications compiled hardware 
application compilation system produces architecture description rtl verilog 
synthesize architecture logic gates commercial cad tool synopsys report area speed results xilinx series fpgas power results ibm sa process micron layer copper standard cell process 
benchmarks silicon compilation included table 
applications short benchmarks include multimedia kernels 
important note relative small size benchmarks dictated current synthesis time compilation approach bitwise 
registers saved final silicon compiled benchmark netlist capable accepted xilinx ibm cad tools produce final silicon 
memory savings reported section translate directly silicon memory savings allow separate small memory program variable 
small memory partitioning process described earlier :10.1.1.161.1055
note considerable synthesis compile time savings reported 
adpcm life bubblesort jacobi median analysis final register bit reduction high level analysis versus final silicon 
fluctuations savings final silicon high level analysis factors variable renaming register allocation 
register savings hand vary additional compiler cad optimizations transform program variables 
variable renaming register allocation distort final result placing scalars register shared register 
shows total fpga bits saved bitwidth optimization 
xilinx fpga compilation fixed allocation registers combinational logic distort exact translation savings chip area registers may go unused 
findings positive earlier bitwidth savings translated dramatic savings final silicon despite possibilities loss information potential overlap optimizations 
mapping program scalars hardware registers exact savings match 
examining see percentage bits saved highlevel analysis greater bits saved final silicon 
explain differences follows 
compiler cad passes high level analysis final silicon generation 
passes bitwidth information lost example new variable cloned full complement saved bits realized 
hand backend passes especially cad tools attempting save bits logic optimizations 
passes may find saving current high level pass finding 
variable renaming register sharing change percentages 
area registers saved translate directly area saved 
area savings result reduction associated datapaths 
shows total area savings bitwise optimizations versus 
save silicon area nearly theta savings best case 
note compilation system pointers require full complement bits 
maps compiler developed raw arrays assigned set equivalence classes 
definition pointer point equivalence class needs wider log sa sa size memory array specified equivalence class 
technique described 
adpcm bubblesort convolve histogram jacobi life median parity pmatch sor clb count bitwise bitwise fpga area bitwise optimization 
register savings translate directly area savings fpgas 
clb count measures number internal combinational logic blocks required implement benchmark compiled fpgas 
combinational logic blocks clbs include input lookup tables flip flop registers 
number parenthesis benchmark resulting bitwidth main datapath 
clock speed expect bitwidth optimization reduce latency critical paths circuit increase maximum system clock speed 
circuit structures linear ripple carry adder expect linear increase 
common structures carry save adders multiplexors barrel typically implemented logarithmic latency bitwidth reduction translates linear significant speedup 
shows results benchmarks 
largest speedup convolve reduction constant multiplications increased clock speeds nearly theta 
hand mpeg correlation kernel speed original close optimal 
power expected area saved bitwidth reduction translated fairly directly power savings 
hypothesis saving lessened fact inactive registers datapaths consume power 
incorrect 
muxes control logic leading registers consume power 
shows reduction power achieved 
order power measurements ran verilog simulation design gather switching activity 
switching activity records register toggles design 
information logic synthesis internal zero delay simulation determine wire changes state 
synthesizer reports average dynamic power consumption report 
current implementation bitwidth analysis reduce total cycle count total energy reduced proportionately 
measured power bubblesort histogram jacobi pmatch 
largest power savings adpcm bubblesort convolve histogram jacobi life median parity pmatch sor xc clock speed mhz bitwise bitwise fpga bitwise optimization 
benchmarks universally faster bitwidth analysis compiled xilinx xc fpgas speed grade synopsys 
actual number clbs critical paths ranging bitwidth optimization key factor determining clock speed 
bubblesort histogram jacobi pmatch new lif total dynamic power mw bitwise bitwise asic power bitwise optimization 
assume mhz clock micron ibm sa process 
total cycle count number clocks ticks complete benchmark affected bitwidth total energy scale proportionally 
reduced mw mw benchmarks conservative high 
power savings 
expect portion savings translated processor regime power consumption typically hundreds times higher low power architectures successfully take advantage priori bitwidth information 
discussion reconfigurable computing applications savings easily break difference comparing performance area traditional processors 
fpgas provide additional layer abstraction emulated logic important compile higher levels abstraction possible 
statically advantage bitwidth optimization form partial evaluation help fpgas competitive traditional adaptive computing solutions 
bitwidth analysis key technology enabler fpga computing 
asic implementations bitwidth savings directly translate reduced silicon costs 
course cost savings captured manually specifying precise variable widths manual optimization comes cost manual labor 
additionally reducing probability errors invaluable asic environment companies silicon entire market windows 
approach transistor era raising level abstraction asic designers requirement luxury 
related brooks dynamically recognize operands narrow exploit sub word parallelism 
research confirms claim wide range applications particularly multimedia applications exhibit narrow bitwidth computations 
techniques able detect bitwidth information statically known 
detecting dynamically research applied applications require priori bitwidth information 
scott recognized importance static bitwidth information 
uses bitwidth analysis context java silicon compiler 
bitwidth analysis main thrust research uses simple data flow technique propagates bitwidth information 
method propagating data ranges precise method discovering 
data range propagation techniques jason patterson william harrison similar 
proved effective consider backward propagation offers abundant data range information 
furthermore techniques discovering loop carried sequences include general methods discussed 
formalized bitwidth analysis value range propagation problem 
new suite bitwidth extraction techniques demonstrate bidirectional bitwidth propagation closed form solution finding bitwidth information presence loops 
initial results promising compiletime analysis approaches accuracy run time analysis 
incorporated silicon compiler bitwidth analysis dramatically reduces logic area improves clock speed reduces power resulting circuits 
anticipate uses technique including compilation simd architectures compilation low power 

static single information form 
master thesis massachussets institute technology 
babb 
high level compilation reconfigurable architectures 
phd thesis eecs mit department electrical engineering computer science february 
babb rinard lee frank barua amarasinghe :10.1.1.161.1055
parallelizing applications silicon 
proceedings ieee workshop fpgas custom computing machines fccm napa valley ca april 
barua lee amarasinghe agarwal 
maps compiler managed memory system raw machines 
proceedings th international symposium computer architecture atlanta ga may 
brooks martonosi 
dynamically exploiting narrow width operands improve processor power 
january 
french lam levitt olukotun :10.1.1.116.7843
general method compiling event driven simulations 
nd acm ieee design automation conference june 
wolfe 
induction variables detecting classifying sequences demand driven ssa form 
technical report oregon graduate institute science technology 
harrison 
compiler analysis value ranges variables 
ieee transactions software engineering may 
systems emulation system documentation 
version 
kin gupta smith 
filter cache energy efficient memory structure 
knobe sarkar :10.1.1.25.8502
array ssa form parallelization 
technical report digital cambridge research laboratory 
lee barua frank babb sarkar amarasinghe 
space time scheduling instruction level parallelism raw machine 
proceedings eighth acm conference architectural support programming languages operating systems pages san jose ca oct 
open systemc initiative 
systemc org 
patterson 
accurate static branch prediction value range propagation 
proceedings sigplan conference programming language design implementation june 
rinard 
pointer analysis multithreaded programs 
proceedings sigplan conference program language design implementation pages atlanta ga may 
smith 
extending suif machine dependent optimizations 
proceedings suif compiler workshop pages stanford ca jan 
wilson french wilson amarasinghe anderson tjiang :10.1.1.103.6838
liao 
tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
acm sigplan notices dec 
