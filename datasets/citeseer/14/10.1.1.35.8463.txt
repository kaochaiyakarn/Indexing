adaptation automated user interface design design problems involve issues stylistic preference flexible standards success human designers proceed intuition unaware strict rule procedures 
features design tasks especially difficult automate 
adaptation proposed means overcome challenges 
describe system applies adaptive algorithm automated user interface design framework mobi model interface designer interface development environment 
preliminary experiments indicate adaptation improves performance automated user interface design system 
keywords model interface development machine learning decision trees theory refinement user interface development tools interface models theory refinement design human ability formalization 
human designers aware strict rule procedures design decisions 
design decisions evaluated kind objective scale utility 
qualified human experts may strikingly different decisions may way identify expert decision unambiguously correct 
clear case expert wrong clear just decision 
may right answer design problem wrong answers 
condition design creative task design proves challenging computer automation 
specifically interested automating particular features user interface design 
previous automation user interface design mixed success 
jacob eisenstein angel puerta software town country palo alto ca usa jacob puerta com researchers developed systems effective narrowly focused domains including example automatic generation forms automatic generation dialog boxes database access 
technique shown applicable general level 
claim adaptive automated systems solicit respond user feedback may able succeed previous efforts failed 
adaptive system automated user interface design benefit designers interface design researchers 
designers benefit ways 
user interface design software adapt accommodate stylistic preferences 
case individual idiosyncrasies designers trust software take preferences account 
schools thought design single software adapted versions interface design software distributed 

designers find easier explain stylistic preferences adaptive algorithm extract formal description style 

technological developments user interface design accommodated existing design software need updates patches 
example new user interface widget introduced automatic design algorithm learn handle observing designer behavior 
adaptation benefit researchers discover new information way designers decisions observing results adaptive algorithm 
errors automatic design formalism easily identified corrected 
differences schools design explicit 
researchers discover design knowledge consensus matter preference 
sum adaptation serve formal methodology help researchers develop refine general aspects theory user interface design 
surf guiding philosophy guided main principles distinguish automatic userinterface design 
principles represented acronym surf 

sensitivity 
important interface designer aware adaptive algorithm sensitive designer doing 
adaptive algorithm ought respond minimum feedback designer 
easier designer familiar adaptive algorithm designer trust interface design environment 
adaptive algorithm sufficiently sensitive user feedback designer difficult time predicting behavior adaptive algorithm may find cumbersome confusing useful 
terms learning algorithm employ consideration leads favor local learning methods large scale batch learning 

understandability 
automated system symbiotic cooperative relationship user desired important user system understands automatic decisions 
automation algorithm generates user interface comprehensible interface designer designer able alter explicitly directly desired 
symbolic methods favored user comprehensible strategies neural networks 

refinement 
developing adaptive algorithm favor theory refinement learning scratch 
need adaptive algorithm automatically build knowledge base automatic user interface design rules ground 
exists large body automation user interface design decisions 
designed adaptive algorithm take full advantage body 
principle supports principle sensitivity easier build adaptive system sensitive head start form existing base knowledge 

focus 
believe time reasonable expect move directly description user interface automatic creation complete user interface 
want apply automation features design process think automation offer 
focused selection interactors visual elements buttons sliders allow user view manipulate data 
automation algorithm returns ordered list interactors interface designer chooses list performing layout 
hoped number design decisions automated increase research 
way build system usable real world design projects focus areas design particularly amenable automation leave areas design human hands 
summary describe adaptive automated system user interface design adheres principles surf 
system part larger framework describe 
framework mobi adaptive algorithm described supplements mobi existing model interface development environment 
model systems user interface development require specification declarative interface model explicitly describes relevant aspects user interface formal language 
mobi provides comprehensive suite tools aid development refinement interface model 
range tools provided order handle stage interface development cycle 
knowledge elicitation system called tel helps user interface develop models interface data task structures 
interface designer uses model editors create relations elements data task structures concrete elements describe actual look feel interface 
final stage development provide mobile layout tool configured reflect decisions previous stages design process 
interface design viewed theoretically process creating mappings various formal elements different levels abstraction 
example task object may map domain object manipulated user executes task 
domain object may map concrete interactor checkbox user performs manipulation 
timm interface model mapper tool mobi assists designers generation mappings 
mappings principle focus forbids saying automatically 
describe timm automatically generates mappings domain objects concrete interactors automatic generation mappings benefits adaptation 
decision trees order perform automatic mappings decision tree 
decision tree defines procedure classifying cases groups discriminants 
discriminants features cases may relevant sorted 
decision tree specifies discriminants consider order 
gives simplified example decision tree interactor selection 
consider example 
suppose hi tech movie theater wanted develop system recommend current films prospective 
discriminant viewer age movies rated restricted adults recommended viewer 
likewise children movies generally recommended viewers age 
consider group falls boundaries viewers ages 
group discriminant applied determine viewer date boyfriend girlfriend 
selection narrowed films appropriate date third final discriminant applied determine viewer favorite actor actress 
method prospective classified viewer group similar interests short customized list recommendations generated 
decision tree offers significant advantages method automation 
decision trees extremely readable knowledge bases rules certainly methods neural bayesian networks 
rule systems difficult read sensitive order rules applied 
analyze series rules order able predict effect 
bayesian methods require user consider large number relevance values difficult predict effect changes large scale bayesian network 
neural networks offer little way comprehensible justification effects produce 
contrast structure decision tree easy predict effects 
second advantage offered decision trees body applying decision trees automatic selection interactors 
vanderdonckt created comprehensive decision tree interface design guidelines wide variety sources 
decision trees able take advantage 
decision tree movie example certain discriminants age favorite actor classify consumer groups 
application domain elements objects user interface modify view classified assigned set possible interactors classification 
essence mappings created domain objects simple decision tree interactor selection interactors 
discriminants user interface design 
type 
boolean integer float 
assigning edit field domain element type boolean little sense require user manually type true false 
boolean element best mapped check box radio button 

number allowed values 
allowed values interactor set radio buttons may suffice 
allowed values list box better 
allowed values list box fit dialog window drop list 

number sibling domain elements 
measure pieces domain model modified screen 
screen may issue space efficient interactors favored 

range 
information domain object range continuous data set discrete allowed values affects interactor selection 
example domain element consists deep range integers better handled edit field list box allowed values 

similarity near values 
near values range similar slider helpful 
near values bear similarity case strings example text box reasonable choice 
claim set discriminants clearly exhaustive broad support automation 
adaptation algorithm timm tool mobi suite assists interface designer selection interactors 
goal automation produce ordered list recommendations interface designer 
interface designer option correcting automatic interactor recommendations timm 
interface designer corrects suggestions timm interaction recorded error 
recommendation considered successful 
session finished timm applies adaptive algorithm correct decision tree entire history cases 
adaptive algorithm operators altering decision tree 
whichever operator reduce number errors greatest amount selected 
operators applied sequentially operator reduce total number errors history cases 
operators follows 
change recommended interactors leaf tree 

alter boundary conditions branch 

add branch set output new leaves 
changing recommendations leaf simplest operation 
suppose decision tree dictates boolean domain elements best treated checkbox designer selects radio buttons 
stylistic preference handled changing recommendation leaf boolean domain variables radio buttons 
alteration boundary conditions complex 
movie recommendation example age boundary condition draws line groups children teens 
imagine market research discovers young sophisticated age better cutoff 
alteration boundary conditions 
sort thing occur interactor selection 
suppose decision tree initially uses boundary interactors dialog order determine screen crowded 
interactors interactor recommendations reflect need conserve screen space screen space conservation considered 
interface designer favors unusually small dialog windows boundary appropriate 
necessary conserve space interactors single dialog 
initial recommendations record user selections loop recommendations count errors errors break find best operation error gain min threshold apply operation break adaptation algorithm kind situation necessitate shift boundary conditions 
addition branch decision tree necessary relevant piece information decision tree consider 
example suppose original decision tree recommends edit fields domain elements type string irrespective number allowed values 
user interface designer take number allowed values account favoring list boxes number allowed values finite 
way correct decision tree accommodate designer preference add branch take discriminant account 
adaptation action experiment adaptation algorithm applied small scale application interface hypothetical program multi user banking information console 
interface interactors 
designed allow variety users view control money bank 
users range clients tellers ceo 
experiment interface designer modified automatically generated suggestions 
designer constrained certain features specific application stylistic preferences different reflected decision tree 
designer reviewed automated suggestions modified listing reasons modification 
adaptation algorithm applied alter decision tree better conform designer preferences 
automation algorithm returns ordered list recommended interactors shown screen shot 
errors weighted failure recommend interactor designer felt necessary greatest error recommending interactor designer considered unnecessary secondary importance incorrect ordering recommendations important error 
weights error screenshot timm ordered list interactors metric developed took account number errors severity 
scale adaptation algorithm able correct errors originally indicated designer 
designer deliberately slightly inconsistent algorithm able correct error 
errors committed original decision tree represent differences opinion matters style 
stylistic questions came times yielding high count 
errors caused incompleteness decision tree 
expect error correction case applicable useful projects interface designer 
remaining error correction involved compensating certain specific features particular interface 
experiment deliberately designed include constraints accounted timm current set discriminants 
specified customer user type access interface atm able mouse 
interactors rely mouse manipulation chosen customer utilize 
timm way account information current set discriminants 
algorithm able exploit accidental regularities discriminants access order account feature 
overfitting probably table adaptation performance experiments experiment experiment number interactors total error correction transferable error correction percentage reduction initial number errors opposite example initial decision tree trained example error correction adjustment overfitting diminish algorithm performance design projects 
solutions problem overfitting discussed section 
experiment second experiment portion real world user interface designed medical application clients 
slightly larger interactors 
automatic suggestions timm modified modifications intended reflect interface designed 
concern determine adaptation took place banking example experiment 
fact problem overfitting refined decision tree performed better original hand crafted decision tree 
overfitting corrected described decision tree performs better original hand crafted decision tree 
regardless system primed refined decision tree adaptive algorithm able correct errors 
error due incomplete decision tree due designer preferences 
example shows refining decision tree yield benefits user interface designer 
banking application provided initial decision tree trained data medical application gains marked refined decision tree performed better hand crafted tree overfitting 
banking example deliberately designed way bring overfitting real world example overfitting problem 
algorithm issues complexity adaptive algorithm described searches entire space possible changes alteration decision tree advantageous 
question exhaustive search algorithm imposes high cost terms search time 
fact time complexity algorithm grows square total number cases 
rate growth available computing power foresee problems complexity algorithm 
local minima adaptive algorithm performs greedy hill climbing search immediately rewarding modification decision tree 
words algorithm look sequences operations beneficial looks ahead step applies single operation beneficial short term 
theory lead problems local minima 
case local minima mean adaptive algorithm arrived state single adaptive move permit improvement series adaptive moves find globally optimal solution 
adaptive algorithm fail correct modifications decision tree leaving imperfect state 
acknowledge possible danger 
practice local minima appeared tests 
algorithm able correct error example error second example 
overfitting serious problem danger overfitting training data 
mentioned occurred test cases resulting somewhat diminished generality adaptive changes 
propose possible solutions problem 

discriminants 
information take account overfitting 
testing point additional discriminants taken account 
noted adding discriminants lead overfitting chosen 
discriminant bears relation problem hand create kind accidental regularity responsible overfitting 
additional discriminants increase size tree making harder user browse increasing runtime adaptive algorithm 
new discriminants added discriminants useful time added 

sensitivity threshold 
prevent adaptive algorithm making changes benefit greater threshold achieved 
idea adaptations result overfitting responses idiosyncrasies adaptations correct errors indicate general features applicable 
mentioned attempts apply approach met success 
generality changes increased 
cost involved adaptive algorithm longer achieves near success training case 
performance training example declines 
sensitivity threshold causes algorithm pass useful adaptations dangerous ones threshold meant filter 
cases lead useful adaptations recur examples eventually threshold overcome necessary adaptations 

user advice 
approach simply ask interface designer input tree ought changed 
algorithm describe cases involved ask advice 
interface designer recommend paying attention particular discriminant designer simply advise ignoring cases altogether 
related systems attempted automatically generate user interfaces model environment 
uide model user interface design systems automatically selects interactors basis data type discriminants consider 
mecano generates form interfaces automatically performs interactor selection considering discriminants including type cardinality number allowed values 
trident introduces comprehensive decision tree takes account broad set discriminants 
systems represent progress automated user interface design incorporate adaptation 
quinlan developed id algorithm decision tree induction 
id information theory intended batch learning problems start scratch large number examples 
approach favors theory refinement sensitivity id acceptable choice induction algorithm 
maclin shavlik theory refinement algorithm utilizes user advice minimize amount training time necessary algorithm connectionist learning systems ruled poor human comprehensibility 
unable locate sensitive theory refinement algorithm decision tree induction literature may 
inference bear programming demonstration application infers design specifics user generated snapshots 
inference bear uses adaptation generate custom user interface observing behavior interface designer 
inference bear designed infer application specific design knowledge approach seeks induce refine general principles user interface design 
time designer begins design interface inference bear starts afresh 
contrast adaptive version mobi smarter time runs 
problem overfitting merits research 
particularly interest prospect incorporating user advice improve applicability adaptation algorithm 
human designers learn better taught ample reason believe machine learning benefit perspicuous advice 
envision situation interface designer set flag preferences indicating wish give advice 
hope apply methodology described aspects model user interface design dialog layout application structure example 
mobi provides formal language describe phases design believe adaptive automation successful domains 
believe methodology described applied variety design problems outside user interface design feel research lines productive 
believe adaptation necessary component system attempts solve real world design problems 
automated system incorporates adaptation perform interactor selection user interface design 
system distinguished features acronym surf sensitivity small number examples understandability interface designer refinement learning scratch focus aspects design particularly amenable automation 
preliminary experiments indicate adaptation algorithm provide significant gains performance 
believe methodology applied successfully areas user interface design 
reviewers careful reading helpful comments 
hung chen eric cheng james kim larsen david justin min dat ou david selinger chung man tam implementation mobi 

foley uide intelligent user interface design environment intelligent user interfaces sullivan tyler editors 
addison wesley 


frank sukaviriya foley inference bear designing interfaces snapshots proc acm symposium designing interactive systems pages ann arbor michigan august 

janssen ziegler generating user interfaces data models dialogue net application proc 
interchi 
acm press 

maclin shavlik creating advice reinforcement learners 
machine learning 

puerta mecano project comprehensive integrated support model interface development proc 
computer aided design user interfaces 

belgium 

puerta model interface development environment 
ieee software july august pp 


puerta cheng ou min mobile user centered interface building 
chi acm conference human factors computing systems 
pittsburgh may press 

puerta eisenstein general computational framework model interface development systems 
iui international conference intelligent user interfaces los angeles january press 

puerta eriksson gennari musen model automated generation user interfaces 
proc 
aaai seattle july august aaai press pp 


quinlan induction decision trees 
machine learning 

tam puerta tel tool eliciting user task models domain experts 
iui international conference intelligent user interfaces san francisco january pp 


vanderdonckt bodart encapsulating knowledge intelligent automatic interaction objects selection proc 
interchi 
acm press 

vanderdonckt bodart corpus comprehensive unique source human machine interface guidelines advances applied ergonomics proceedings st international conference applied ergonomics istanbul may salvendy eds usa publishing istanbul west lafayette pp 


vanderdonckt advice giving systems selecting interaction objects proc 
st int 
workshop user interfaces data intensive systems edinburgh september paton ed ieee computer society press los alamitos appear 
