compositional properties uml statechart diagrams anthony simons department computer science university sheffield sheffield south proposes revised semantic interpretation uml statechart diagrams ensures specified design rules statecharts may constructed true compositional properties 
particular hierarchical state machines may properly encapsulated allow independent verification compositional testing possible current uml semantics 
certain problems regarding formal tractability uml diagrams addressed confusion states connectors flattening effect boundary crossing transitions consequences inverting inter level priority rule handling concurrent events 
set theoretic formal treatment object states events guards run processing describing serial concurrent statecharts 
advantages state machine design models ability visualise control behaviour system graphically appealing dense mathematical specification 
reason statecharts kind acceptable means specifying formal designs software industry 
uml statechart diagram important omg standard documenting behaviour objects components systems 
evolution harel statechart statechart diagram traces history dynamic model omt version subsequently incorporated uml 
adoption omg statechart diagram subject scrutiny uml revisions 
current published omg june standard defines notation statecharts giving examples usage describes intended semantics statecharts part state machine behavioural elements package describes activity graphs 
sources provide precise descriptions available uml statecharts uml users guide 
semantics state machines classical finite state machines amenable formal reasoning terms equivalence orders grammar formal language chomsky hierarchy 
example recursive language defined context free grammar recognisable pushdown automaton variant finite state automaton global stack 
different statechart formalisms subject number different semantic interpretations 
result differences treatment events signals functions static quasi functional nature states existence global local memory discrete continuous interval nature time precise meaning connectors different levels hierarchical machines 
statecharts typically admit presence read writeable memory allow conditions guards test making equivalent augmented transition networks capable recognising arbitrary context dependent languages 
hierarchical modular testing property state machines ability validate correct operation formal model respect events handled ability generate test sets verify correct behaviour implementation respect formal design provided state machine 
basis state machine testing method due chow guarantees behaviour implementation respect minimal finite state automaton subject assumptions redundant states driving system transition cover comparing valid error states reached specification 
rigorous object oriented methods compositional properties uml statechart diagrams holcombe generalised approach stream machines generalisation finite state machines global memory input output streams 
machines formally equivalent restricted class augmented transition networks turing equivalent computing power 
holcombe reductionist method design decomposed hierarchy independent stream behaviour may validated independently 
system design tested variant chow method bottom fashion 
method provides ground breaking proof correct integration absolutely guarantees correct behaviour integrated system assumption component parts correct 
importance emphasised conventional path testing approaches exercise parts system economically feasible testing complete definite statements number location remaining faults serious 
holcombe method systems may tested divide conquer fashion lowest level smallest component behaviour prepared trust remaining faults necessarily 
compared object oriented testing methods flatten hierarchical state machines compute transition cover cartesian product states transitions holcombe method computes transition cover machine independently making complete functional black box testing tractable possibility 
divide conquer method depends crucially design test properties stream machine model include compositionality ability deal level abstraction independent machine ii output distinguishability ability associate firing distinct transition uniquely observed output iii test completeness ability drive machine transitions state 
design test properties obtain similar testing benefits uml statecharts necessary examine formal properties decomposition 
principal novelties harel original statechart formalism idea states decomposed hierarchically illustrated models behaviour automatic 
certain level abstraction drive state considered single state finer grained level revealed forward gear substates 
certain transitions apply drive state drive neutral certain transitions apply substate machine 
obtain design test property compositionality superstate machine ignorance mechanism substate machine substate machine verifiable independently operation superstate machine 
particular example illustrates encapsulation properties behaviour machine independently verifiable statecharts ways violate encapsulation substate machines 
example phenomenon boundary crossing style transitions lead directly substates composite state 
identifying styles usage preserve hierarchical encapsulation state machines important area concern 
park neutral reverse drive neutral drive neutral neutral reverse park halt harel statechart automatic assumption single input event machine model corresponds message request resulting single method invocation statechart output distinguishable property obtained distinct transition produces distinct output value 
achieved instrumenting methods test phase 
names methods describe unique transitions method may invoked reach destination states selected additional guard distinct output value chosen rigorous object oriented methods compositional properties uml statechart diagrams guarded version 
test completeness property obtained free object oriented model object methods may attempted state object may raise exceptions 
features uml statecharts uml statechart diagram rich hybrid model incorporating number influences cater different modelling preferences 
constructions included redundant convenient extensions basic state machine model constructions unwittingly undermine formal tractability state machines :10.1.1.33.1447
redundant syntactically sugared forms converted back canonical forms concerned violations semantics automata especially constructions prevent hierarchical encapsulation independent state machines 
redundant constructions examples redundancy include provision separate iconic notation encapsulated substate machines different ordinary sequential composite states recognised 
provision concurrent transitions petri style forks joins see technically redundant duplicates semantics concurrent composite states see 
originally petri style notation intended separate activity graphs revised omg notation document apparently allowed statechart diagrams activity graphs separately 
diagrams describe identical forking synchronisation behaviour concurrent substate machines 
forth back forth back equivalent uml models concurrent substate machines state may internal transition compartment listing distinguished entry exit atomic actions supplemented ongoing activity user defined internal transitions 
admission separate class internal transitions leave superstate trigger entry exit actions complicates model strictly unnecessary 
activity occurs state modelled substate machine 
activity internal transitions really part behaviour substate machine treated explicitly 
convenient extensions examples convenient extensions include provision connectors expressing shared transition paths may expanded full 
path leading forking connector simply expanded paths leave fork symmetrical expansion possible joining connectors 
extension admission conditional guards equivalent duplication number control states :10.1.1.33.1447
guards effect introducing certain arbitrariness chosen control logic 
illustrates temperature control system hysteresis temperature changes trigger events timing constraints expressed guards reversed show choice event guard essentially arbitrary careful making assertions real events driving system 
shows state machine guards technically equivalent state machine guards 
guards useful allow aspects control behaviour system elided pushing concrete memory variables 
better uml statecharts mechanism exposing extra states implicit guards relating behaviour explicit state machine see section 
rigorous object oriented methods compositional properties uml statechart diagrams heating standby time time heating standby timeout timeout temp temp heating standby timeout heating standby timeout standard standard extended extended guards conceal duplicated control states inconsistent intractable constructions examples inconsistent constructions include context dependent interpretation states arrows connectors see sections special treatment free transitions leaving composite states see section 
freedom indulge arbitrary boundary crossing includes notion transitions see violates clean compositional semantics hierarchical state machines see section 
admission history states regarded permanently intractable recorded history conceals product state machines possible provide alternative treatments free transitions notion accept state may cleanly defined see section :10.1.1.33.1447
allows eventually clear distinction forms composite state strictly hierarchical forms merely convenient abbreviations expanded machines 
basic properties state machine uml statechart harel statechart certain small changes express encapsulated object behaviour modified execution semantics queueing events 
harel statechart mix mealy moore classical state machines extensions characteristic flowchart 
tensions different models pose challenges consistent formal interpretation 
classical machines flowcharts classical finite state automaton states quiescent vertices graph computational activity happens transition arcs events processed 
mealy machines may transducers read input symbol arc traversed generate output symbol time 
initial medial final initial medial final done done comparison mealy moore machines flowchart contrast output moore machine contingent state reaches arc traversing 
possible necessary view output occurring machine destination state fostering idea computation happen state 
harel uml statecharts adopt notion states active processing stages quiescent vertices 
leads rigorous object oriented methods compositional properties uml statechart diagrams degenerate kind machine input output processed states transition state state automatic 
flowchart state machine 
illustrates important correspondences differences 
particular notice arcs mealy automaton correspond processing stages flowchart 
arcs flowchart correspond quiescent states mealy machine 
flowchart completely reverses senses state transition demonstrating difficult arrive consistent combined interpretation 
flowchart transition processing stage automatic dependent internal condition computed previous stage handled event behaviour machine current level abstraction determined processing events level 
important formal property restored 
notion state defined formally varying response system different occasions event view state maintained semantics state machines 
contextual interpretation admission non quiescent states corresponding processing stages pose major theoretical problem 
usage necessarily forces invention extra start finish points processing stages sense 
referred initial final uml role class states inter level connectors left deliberately vague 
classical state machine initial state class state indicated initial free transition arrow see 
uml statecharts initial state extra see substantive state 
likewise classical notion accept state see final state reached machine event sequence fully processed 
uml final state usually extra see reached substantive state machine 
comparisons reveal initial final correspond quiescent states classical machine equivalent arcs flowchart active processing states 
status mid points reached arcs connecting processing stages flowchart 
uml eventually highly context dependent interpretations states connectors arising ambiguous treatment states processing stages quiescent points 
outermost level initial final interpreted classical quiescent states machine enters active states 
nested levels icons indicate entry exit points substate machines initial interpretation mealy style initial arrow indicating substantive state nested machine see 
final intended genuine mealy accept state indicating termination substate machine 
depending context uml switches semantics classical arrows classical states modern states flowchart processes unhelpful way 
intent uml semantics document eventually disambiguate different contextdependent meanings uses icons surely wrong approach 
elements formal notation unambiguous context free interpretations invite chaos :10.1.1.33.1447
consider may consistent interpretation classical states states processes 
statechart contains genuine quiescent states consistent interpretation states meaning initial classical state treated indicator arrows connectors different levels state machine hierarchy 
required state machine semantics state machine flowchart 
order able apply state verification testing theorems model statechart conform state machine semantics 
proper reactive states transitions triggered response events 
number guiding principles introduced help ensure properties 
principle states defined differential responses event 
define state amount time system may dwell 
rules pseudo state machines merely sequences processes strung 
principle events messages signals conditions 
state decision function placed transitions hidden inside processing states 
rules simple conditional branching masquerading event handling 
rigorous object oriented methods compositional properties uml statechart diagrams principle state computable state event 
hidden implicit conditions 
state transitions fire response event machine non deterministic deterministic 
tractable formal analysis states genuine states response system event contingent state 
clarifies informal definitions states system conditions handle events may queried boolean valued function 
rule processing states long states handle events 
restriction genuine events severe forbids branching simple boolean valued conditions 
uniform semantics hides state decision function inside previous state 
restrictions eliminate crude flowcharts possible convert exit condition event 
case processing state generate internal event subsequently handled state decision function 
principle icons entry exit connectors states 
refer states pseudo 
visualise mid points transition arcs substantive state 
principle initial state receives single half transition entry connector 
initial state connector state subsequent state 
principle final state accept state single half transition exit connector 
final state connector state preceding state 
legal accept state exit branches 
creates semantics consistent quiescent active state interpretations consistent different levels hierarchical composition state machines 
entry connector sense half transition mealy arrow indicating real initial state sub system 
notion initial quiescent state relevant moore machine active processing states modelled explicitly real state 
exit connector inverse sense half transition handing back control higher level 
notion mealy accept state defined substantive state half transition exits 
moore machine state perform computation terminating 
accept state final state may exit transitions contradict semantics finality 
compositional properties state machines hierarchical state machine model exit transition leaving composite state boundary deemed exit immediately state substates 
neutral transition exits drive state understood abbreviate multiple neutral transitions leaving substate 
useful feature eventually contributes desired compositional property hierarchical state machines 
operationally means exit transitions leaving composite state boundaries interrupt ongoing activity substate machine 
semantics guarantees composite states reactive states locked processes 
inconsistent treatment free transitions inconsistency case exit transition leaving composite boundary happens unlabelled transition 
uml defines normal transitions arrows states labelled event process classical machine condition satisfy flowchart 
unlabelled transitions hand semantics free ride contingent event condition 
state representing processing stage may free exit transition meaning may quit automatically associated processing terminated 
state composite state substates immediate problem interpreting free exit transition consistently harel hierarchical semantics transition leaving composite state boundary equivalent exit transition substate :10.1.1.20.5519
literally mean substate free exit transition 
entered substate machine terminate immediately 
prevent uml defines free boundary exit transition specially completion transition taken substate machine terminates 
asked assume existence invisible label standing completion event raised substate machine terminates 
ensure substate machine executes completion uml suspends harel standard interpretation transition leaving composite rigorous object oriented methods compositional properties uml statechart diagrams state boundary :10.1.1.20.5519
uml free boundary exit transition interrupt activity substate machine waits termination 
quite significant reverses priority inter level event handling operational semantics means states reactive locked processes 
intent uml definition eventually clear gives rise machines behave strangely different circumstances example illustrates 
uml reverses priority concurrent event handling different levels state hierarchy respect harel 
events arrive concurrently cases arise multiple transitions fire machines different nested levels 
resolve conflicts harel selects transition outermost state machine uml selects transition innermost state machine 
harel semantics automatic state machine composite state drive substate receives events neutral simultaneously neutral transition fired outermost state machine priority vehicle reacts driver instructions 
uml transition preferred fires innermost state machine priority apparently ignoring driver instructions 
neutral event received inter level conflict uml interrupts ongoing activity substate machine exits neutral state 
curious consequence substate machine may interrupted depending presence absence conflicting concurrent event 
outer state machine formally analysed isolation 
example impossible tell neutral event handled discarded due presence internal event invisible level decomposition 
reason harel original priority rule essential part compositional statechart semantics 
boundary crossing violates encapsulation notational convenience allowed composite states designers may produce models appearance modular encapsulated hierarchical systems complicated fully expanded flat state machines 
practice immediately violates encapsulation hierarchical state machines boundary crossing 
illustrates example transitions enter leave substates directly crossing enclosing composite state boundary 
graphically substate machine may elided drawing arcs labelled direct skip transitions entering exiting superstate shown 
wrong equate encapsulation 
order reason formal properties system necessary expand flat machine shown superstate machine strongly completely coupled substate machine 
forth back forth idle skip direct forth back forth idle skip direct idle direct skip working working logical expansion boundary crossing boundary crossing clearly expected allowed uml authors 
notational feature disastrous impact encapsulation hierarchically composed states seek clean compositional model 
ability compose states serves mundane purpose abbreviation 
group states share common exit transition arc labelled rigorous object oriented methods compositional properties uml statechart diagrams notationally convenient group composite state simply order draw exit transition just 
composite construction understood hierarchical sense technically state may considered abbreviation set transitions 
ideally seek distinguish genuine hierarchical states mere abbreviations insist abbreviations expanded flat state machines formal analysis 
cost increasing sizes test sets product states transitions flattened machine compared sum states transitions hierarchical machine see section 
boundary crossing indicate acceptance interesting examine statecharts boundary crossing order attempt infer designer resorted strategy 
reason crossing boundaries appears result need indicate nested accept states free exit transitions crossing boundary :10.1.1.33.1447
uml notation guide semantics accept state drawn final icon 
examples exist accept states substate machine indicated boundary crossing free exit transitions 
seeking explanation eventually uml statecharts properly represent distinct accept state substate machine classical state machines multiple accept states indicating distinct outcomes 
uml exit paths multiple accept states subsequently merged single completion transition leaving composite state boundary 
illustrates example final representing logically distinct outcomes substate machine distinguished externally distinguishes outcomes boundary crossing showing designers forced strategy order express want say see example 
trying harder better worse win lose trying harder better worse win lose success success failure lost encoding multiple accept states usually indicates problem 
surely better uml appropriate way indicating distinct accept states nested machine 
note approved free exit transition notwithstanding objections raised section 
required state compositional semantics facilitate hierarchical composition independent state machines principles introduced 
address problem free transitions fact source states decomposed need distinguish abbreviations genuine composite states need distinguish multiple accept states 
principle hierarchical encapsulated state machines independently verifiable 
behaviour state transparent level peer states behaviour enclosed substate machine transparent level 
principle hierarchical composite state encapsulates substate machine 
may exhibit boundary crossing single entry connector possibly exit connectors communicate substate machine 
principle abbreviation composite state 
notational short hand describing set exit transitions shared states 
may hierarchical entry exit connectors boundary crossing 
criterion independent verification quite deliberate powerful giving intended meaning term encapsulation just refer visual packaging elements refer logical rigorous object oriented methods compositional properties uml statechart diagrams independence elements packaged 
reasons forbidding boundary crossing genuine composite states clear insistence abbreviations boundary crossing interesting corollary 
abbreviation notational device state part state hierarchy entry exit points 
communication parts abbreviation go directly internal states 
want insist abbreviations names states just enclosed regions 
state may lie intersection multiple regions indicating shares union transitions 
formally regions expanded flattened state machines 
principle substate machine generates termination events 
machine reaches accept states signal higher level generating event associated accept state 
distinct accept states generate distinct events 
principle events may simple compositional 
events messages encapsulate argument values unpacked substate machine 
accept states level may wrap values event signalled higher level 
principle free transitions may link connectors states 
free transition may link substantive states 
link entry connector initial state free transition likewise accept final state exit connector 
requirement accept states generate termination events solves number different problems 
firstly means transition leaving composite state boundary labelled transition label corresponds termination event composite state 
secondly composite state may termination event corresponding different accept states encapsulated substate machine 
strategy generalises properly concurrent substate machines 
exit transition leaving superstate boundary may labelled synchronous conjunction events generated concurrent substate machines 
irrespective substate machines multiple accept states indicating distinct outcomes conjoined desired fashion fixing boundary crossing problem example 
places free transitions may occur linking entry exit connectors respective initial final accept states 
arrows labelled events full state transitions merely connection points 
justify consider events handled machine reached accept state machine handle event initial state 
formalisation state machine object tuple 
object may exist number control states concrete memory states starts distinguished initial state object reacts events set message requests understood object 
set transitions describes reaction object event processing carried methods 
transition source state event target state response source target states event response event 
set responses isomorphic exists unique indicate transition fired 
simple guarded transitions behaviour state machine deterministic transition fired response event dom dom case possible machine deterministic extending domain transition guard concrete memory state maps extended domain 
case set transition functions considered replaced concrete states object memory dom dom precise relationship relates presence guards memory elided control states 
guard concrete memory state logical complement exists explicitly notated 
constant guarded transition fires guard true fails 
implicit complement may refined splitting control state new states encode guards guarded transition replaced rigorous object oriented methods compositional properties uml statechart diagrams unguarded 
general guarded transitions may exist event state 
distinct fired memory states distinguish implies guards mutually exclusive false 
guards cover concrete memory states object exhaustively implicit logical complement defined 

accordingly state guarded transitions triggered event may refined states empty complement states non empty complement simple unguarded transitions 
states object finest level detail object concrete memory states upper bound size may calculated card card 
card sets values object attributes drawn value combination may meaningful 
number control states far fewer determined differential response object events 
ways response may judged examining legal invoke methods considers certain methods disabled having legal null effect 
final approach considers state dependent output responses object 
approaches yield progressively finer grained models control state 
consider object methods typically semantics partial functions legally executable state 
exists distinct subset events object may legally react 
subset events legal object state defined error state undefined response 
number control states follows number distinct sets legal events si sj si sj states distinguished distinct set legal events exists state 
definition object responds legally event control state 
bounded stack legal states error state derived distinct sets legal events empty push loaded push pop full pop error 
corollary states corresponds distinct subsets events illegal state example push pop illegal state empty 
may easier construct control states object considering certain methods illegal 
object responds legally subset events card messages illegal state 
maximum possible control states may exist calculated cardinality powerset 
consider larger set control states may chosen corresponding distinct subsets valid events valid event object reacts way invalid event object ignores 
subset events valid object state indicates trivial response generated event ignored object leave state event may legal invalid card card holds distinct valid subsets may chosen legal subsets greater number control states follows 
may intuitive construct control states considering certain events invalid illegal subset events valid object card messages invalid illegal state 
maximum possible control states may exist equivalent cardinality powerset 
largest possible set control states may chosen distinct output responses object 
states distinguished immediately yield distinct responses event transition fires response event leads distinct states judged recursively rule 
rigorous object oriented methods compositional properties uml statechart diagrams event handling semantics event handling model harel asynchronous semantics run completion assumed :10.1.1.20.5519
difference harel semantics events broadcast hierarchically nested state machines semantics events produced consumed scope particular machines representing idea events targeted particular objects 
model object obj assumed event handler obj selects particular fire response event general dispatching function acts object conjunction events 
allow concurrent event signalling 
concurrent events may received obj encapsulates concurrent substate machines obj substate machine shared concurrently executing machines 
ensure determinism transition may enabled time obj 
achieved ensuring behaved combinations concurrent events obj expect handle 
allow event conjunctions class status events concurrent set events possible conjunctions excluding empty conjunction 
assert 
ensures obj distinct states ignores singleton event event conjunction 
possible synchronise concurrent streams labelling transition event conjunction 
hierarchical aspects model captured execution method may distribute events send messages object state machines 
sequentially ordered execution method described detail modelled separate state machine 
objects methods invokes turn available elements memory current object 
decomposing behaviour collaborator objects may modelled state machines 
similar spirit holcombe model transition refinement slightly different cook daniels model object state machine refinement 
special consideration semantics completion processing 
termination subroutine substate machine signal event caller superstate machine model looks identical event generated higher level 
ensures object state machine may analysed independently 
level abstraction machine receives external events corresponding message requests clients 
selecting particular executes single processing step may distribute events substate machines 
run completion return caller signalling completion events 
completion event may turn trigger step machine maximal progress corresponding super step harel asynchronous semantics :10.1.1.20.5519
alternative semantics uml statechart diagrams 
semantics designed twelve principles 
principles ensure consistent interpretation classical style elements notation 
second principles support intended compositional semantics 
particular notion abandoned favour clearer notion connectors states represented explicitly 
independence nested state machines examined goal identifying set design rules ensure statecharts tractable hierarchical modular approaches verification testing chow holcombe methods 
true composite states formally distinguished abbreviations regions enclosing states sharing set exit transitions 
boundary crossing transitions eliminated composite states 
uml reversed priority rule resolving inter level concurrency conflicts introduce nondeterminism outer state machine harel original inter level priority rule restored :10.1.1.20.5519
steps ensured state machines analysed independently 
problems interpretation free transitions eliminated ensuring substate machines generate real termination events 
solved problem indicating distinct outcomes substate machine previously indicated boundary crossing 
approach scaled concurrent event handling 
set theoretic semantics translation guards simple states specified number distinct control states object explored event handling model described showing deals concurrency 
model explored basis compositional design test approach promises reduce usual state explosion 
rigorous object oriented methods compositional properties uml statechart diagrams 
harel statecharts visual formalism complex systems 
sci comp prog 
rumbaugh blaha premerlani object oriented modeling design 
prentice hall 
rational software 
uml manual 
www rational com uml 
object management group 
section notation guide part statechart diagrams 
uml manual omg pp 
object management group 
section uml semantics state machines 
uml manual omg pp 
booch rumbaugh jacobson unified modeling language user guide 
addison wesley longman reading ma 
gazdar mellish natural language processing prolog 
addison wesley reading ma 
von der comparison statechart variants 
lect notes comp sci 
chow testing software design modeled finite state machines 
ieee trans soft eng se 
holcombe machines basis dynamic system specification 
software engineering march 
holcombe integrated methodology formal specification verification testing systems 
software testing verification reliability 
holcombe wm look computability 
informatica 
holcombe integration testing method proved find faults 
int comp math 
binder free approach object oriented testing overview synthesis articles 
www com pages free htm 
kim hong bae test cases generation uml state diagrams 
iee proc softw 
simons graham things go wrong object modelling uml 
chap 
kilov rumpe simmonds ed precise behavioral specification businesses systems 
kluwer academic publishers 
souza wills objects components frameworks uml catalysis approach 
addison wesley longman wokingham 
harel naamad statemate semantics statecharts 
acm trans soft eng method 
cook daniels designing object systems prentice hall london rigorous object oriented methods 
