groupware toolkits synchronous saul greenberg mark roseman department computer science university calgary groupware toolkits developers build applications synchronous distributed computer conferencing 
chapter describes components believe toolkits provide 
run time architecture automatically manages creation interconnection communications centralized distributed processes comprise conference sessions 
set groupware programming abstractions allows developers control behaviour distributed processes take action state changes share relevant data 
groupware widgets interface features value conference participants added easily groupware applications 
session managers people create manage meetings built developers accommodate group working style 
illustrate ways components designed drawing experiences groupkit reviewing approaches taken toolkit developers 
building groupware synchronous distributed conferencing frustrating experience 
conventional single user gui toolkits available implementing simplest systems lengthy error prone 
programmer spend time tedious highly technical house keeping tasks recreate interface components multi user setting 
aside normal load developing robust application programmer groupware attend setup management distributed processes inter process communication state management process synchronization design groupware widgets creation session managers concurrency control security 
consequently variety researchers exploring groupware toolkits 
purpose provide tools infrastructures powerful programmer develop version appear trends cscw edited michel beaudouin lafon john wiley sons saul greenberg mark roseman robust high quality groupware reasonable effort 
roads far complete solution 
realistically today groupware toolkits best seen breakthrough research systems explore particular architectural features groupware toolkits platforms build experimental groupware prototypes 
reached maturity single user gui toolkits pioneering efforts laid foundation generation toolkit design 
chapter examines technical foundations groupware toolkits 
toolkits consider construct real time distributed multi point groupware applications people different locations able visually share manipulate line 
typical applications produced systems electronic whiteboards games multi user text graphics editors distributed presentation software textual chat systems 
discussion heavily influenced experiences groupware toolkit called groupkit issues raised researchers doing similar 
chapter highlights critical features toolkits provide reduce implementation complexity run time architectures automatically manage processes interconnections communications 
groupware programming abstractions programmer synchronize interaction events data model processes views displays 
groupware widgets programmers add generic groupware constructs value conference participants 
session managers crafted programmers users create join leave manage meetings 
important omission list audio video links necessary interpersonal communication channel conference participants 
large area 
simplicity assume audio video handled band toolkits include hooks bring audio video systems 
point reader hiroshi ishii chapter book provides excellent example integrated audio video computational space 
go saying toolkits incorporated audio video class building blocks 
run time architectures real time distributed groupware systems composed multiple processes communicating network 
complex create feel strongly toolkits provide programming facilities creating groupware run time architecture managing run time system 
section concentrate tension centralized vs replicated architectures impact design toolkits 
chapter book dewan continue theme revisiting issues explaining architectural differences possible collaborative applications 
groupware toolkits synchronous centralized vs replicated architectures groupware researchers long argued merits centralized vs replicated architectures 
centralized architectures single application program residing central server machine control input output distributed participants 
client processes residing site responsible passing requests central program displaying output sent central program 
advantage centralized scheme synchronization easy state information consistent located place events handled client processes order serialized server 
replicated architectures hand execute copy program site 
replica coordinate explicitly local remote actions attend synchronizing copies get step 
simplicity handling concurrency maintaining single state model centralized architectures groupware advocates may wonder replicated approach considered 
main issues latency bottlenecks heterogeneous environments 
centralized scheme implies sequential processing user input transmitted remote machine central application handle update displays necessary input request dealt 
system latency low problem 
high entire system sluggish 
annoying actions delayed devastating system unresponsive person local actions especially highly interactive applications 
second central system performance bottleneck 
highly interactive graphical applications push fastest cpus limits screens updated 
similarly relaying activities single process create traffic jam environments 
third centralized architectures problems dealing heterogeneous environments single process update properly remote clients running say windows macintosh environment ll different look feel 
replicated scheme hand implies parallel processing handling interactions screen updates occur parallel replication 
done properly communication efficient replicas need exchange critical state information keep models date 
remote activities may delayed person local activities processed immediately 
process bottlenecks replica responsible drawing local view central model update graphics screens 
consequently heterogeneous environments easily handled communication protocol act device independent graphics layer views drawn native look feel 
cost replication increased complexity 
programming synchronizing distributed system handle issues concurrency control 
different replicated toolkits handle variety ways 
example share kit direct concurrency control programmed scratch programmer requires 
provide concurrency capabilities 
uses atomic broadcasts 
object world shareable objects ability detect messages arrived order allow programmers non optimistic locking 
groupkit force serialization actions selected activities replicated processes 
semi replicated hybrid architectures contain central saul greenberg mark roseman ized replicated components 
example patterson advocates centralized notification server sole job maintain shared state respond state change requests clients notify state changed 
replicas decide view look update display accordingly 
impact toolkit design system designers argue toolkit hide implementation architectural concerns leaving programmer concentrate semantics task 
architectures completely hidden groupware toolkits type architecture may profound impacts way programmers code systems system performance 
example centralized systems performance limitations understood mitigated application programmer 
similarly replicated architectures distributed systems programmers concerned issues concurrency control communications fault tolerance 
runtime architecture affects programming paradigm style 
example toolkits separate underlying data abstraction data model way graphical view data generated display discussed section 
illustrates 
data model array numbers view generated separately abstraction 
views model may differ 
case participants view data bar chart third participant sees pie chart 
value data model changed views regenerated keep consistent 
terms run time architecture way abstraction views dealt depend distributed system 
example data abstraction view generation done wholly central process 
alternatively abstraction may centralized mechanisms create views replicated 
components replicated 
whichever variation data model kept consistent entire groupware system synchronization maintained model individual views generated 
means infrastructure support separate abstraction view nature programming api provided toolkit highly dependent nuances runtime architecture 
toolkit provide programmers high level constructs deal issues mentioned mask 
illustrate point rest section show programmers need know concurrency control synchronization models views communications fault tolerance 
concurrency control greenberg argue generic concurrency control scheme handle groupware applications simply user active part process 
example conservative locking serialization schemes block processing concurrency guaranteed deleterious effects highly interactive user actions due processing delays latency optimistic schemes problems going events undone 
argue conflicting interactions best left users solve social means implying feedback conflicting actions shown interface 
groupware toolkits synchronous example data model views generated model 
toolkits provide variety concurrency control schemes feedback mechanisms programmers explicitly decide deploy designing application 
note argument moot latency perceivable users notice effects concurrency control 
case centralized approach implicit serialization events replicated approach hidden concurrency control 
groupware researchers investigated concurrency control 
scope chapter comprehensive survey readers referred surveys greenberg ellis gibbs 
discussions consistency concurrency control chapters book prakash dourish dewan 
synchronization mentioned earlier specific architectures usually lend particular ways separating underlying data model graphical views generated 
centralized system keeps model view place synchronization easy 
contrast replicated architectures maintain copies data state view sites 
patterson notification server keeps data model central server replicas deciding display view information state changes transmitted 
toolkit level division model view distribution processes usually visible programmer programming abstractions provided update model view synchronize replicas needed 
similarly way toolkit provides abstractions process user events synchronize models views depends way model views distributed architecture 
topic taken detail section programming abstractions 
saul greenberg mark roseman communication inter process communication complex task especially efficiency concern 
centralized models particularly vulnerable communications bottlenecks server handle input client update displays 
replicated architectures efficient events sent network short messages containing semantic changes state 
toolkit level programmer rarely want deal setting communications connections 
means decide communicate processes efficiency purposes means decide priorities 
example consider drawing application containing telepointers telepointers supplied widget 
terms communicate complete graphics need shipped 
message sent specifying pointer shape subsequent messages sending pointer id coordinates 
terms priority pointer moved programmer able specify pointer location need transmitted communications bottleneck lower priority say drawing message 
fault tolerance groupware systems distributed way fault tolerance concern 
toolkit level programmer able determine system response particular faults 
include degradation complete loss communications processes excessive delays 
implies toolkit notification mechanism indicates faults program 
implies programmer aware faults inherent particular architectural design 
examples centralized architecture leverages windows multi user sketchpad built window system 
toolkit author describes program leverages communications display windows client server architecture 
windows allows programmer open displays read input workstation write graphics screen 
groupware created tracking display input stream user single program 
stream monitored input events 
input event mouse move initiates draw line action event processed displays updated accordingly 
example pseudocode handles trivial conference users separate displays named display display conference just draws point display display display display display display display groupware toolkits synchronous rendezvous centralized architecture rendezvous groupware toolkit heavily modeled idea maintaining single data model shared 
mentioned earlier multiple views model drawn differently person display 
rendezvous places single abstraction view models single processor 
developers claim single abstraction contains correct state application 
consequently copies view updates derived abstraction correct 
problem rendezvous slow views run processor 
designers suggest implemented semi replicated approach keeps shared abstraction central site views replicated sites 
notification server centralized component hybrid architecture patterson authors rendezvous revisited idea semi replicated hybrid architecture 
constructing centralized notification server provided toolkit component replicated architecture 
job provide central service managing common state information akin shared abstraction seen rendezvous 
natural server centralize data model choice state information centralize ultimately designer 
notification server contains kinds objects places things 
places identify common states accessed applications 
clients enter particular place notified state changes place 
things actual objects maintain state essentially property value pairs extended contain attributes specify access control types notifications triggered creation change deletion 
important server understanding application semantics 
virtually state represented long described property value pair 
left replica deal state changes notification 
patterson argues centralized notification server simplifies concurrency control locking done place thing attributes serialization natural consequence centralization 
argues availability consistent centralized state easier update newcomers participants just entered conference progress 
dedicated server model implies attention devoted making efficient robust patterson words lean mean notification machine groupkit replicated architecture groupkit groupware toolkit includes replicated run time infrastructure 
actively manages creation location interconnection teardown distributed processes communications setup socket handling multicasting features providing infrastructure session management persistent conferences 
infrastructure consists variety distributed processes arranged number machines 
illustrates example processes running people communicating conferences 
large boxes represent different workstations ovals instances processes running machine directed lines joining indicate communication paths 
types saul greenberg mark roseman example groupkit run time architecture process model 
groupkit processes shown single registrar session managers conference applications 
registrar top box centralized process acts connection point community conference users 
address known processes know reach 
centralized process required groupkit run time infrastructure 
session manager replicated process participant side boxes 
provides user interface policy dictating conferences created deleted users enter leave conferences conference status see section session management 
session manager processes created connect registrar 
registrar maintains list conferences users conference 
serves initial contact point locate existing conference processes addresses 
conference application groupkit program shared editor game invoked user session manager 
conference applications typically replicated processes copy program runs participant workstation 
connected peer peer communication channels 
conferences distributed replicas shown 
groupkit programmers build session managers conference applications separate 
programmers aware building distributed applications attend issues concurrency control fault tolerance synchronization 
programming abstractions programmer choose mix styles coding view synchronization multicast rpcs state synchronization replicated data model see section programming abstractions 
toolkit provides simple concurrency control schemes programmer choose available shared data model 
communications hidden away possible massage communication events efficiency done working system 
fault tolerance done primitive events notify programmer participants left conference conference died 
notified easily handle performance degradation 
run time infrastructure maintained entirely groupkit 
conference applica groupware toolkits synchronous tion code need take explicit action process creation communication set 
application may just ask notified event particular session activities occur 
conference processes comprise conference session ordinate high level programming abstractions provided groupkit discussed section 
clock flexible architecture main goal clock language programming environment support development groupware applications high level hiding details underlying implementation architecture 
high level consequences 
programmers need concerned details distribution networking concurrency control 
second implementations clock free implementation architecture long semantics clock language preserved 
languages groupware development clock precisely defined semantics independent implementation 
architecture clock programs developed visual programming environment 
architecture captures structure clock programs specify program implemented distributed context 
architecture language separating model views similar rendezvous model view controller mvc paradigm smalltalk 
high level architecture language supports rapid development easy modification groupware programs 
architectures mapped variety implementation architectures 
locating complete architecture server machine window system post windows different client machines centralized architecture obtained 
locating shared components clock architecture server machine replicating private components client machines semi replicated hybrid architecture obtained 
replicating shared private components replicated architecture obtained 
currently clock programs implemented centralized semi replicated 
advantages clock approach flexible implementation architectures 
run time system completely responsible implementing network communication concurrency control complex optimizations may built system hard develop application basis 
programmers easily experiment kind architecture appropriate application having extensively modify program 
primary disadvantage clock approach programmers give control precisely different components going communicate 
example clock semantics demand concurrency control pessimistic practical networks bad latency 
discussion real answer centralized replicated scheme works best groupware 
set trade offs revolves way handle latency ease program startup connection programming complexity synchronization requirements processor speed number location participants expected communication capacity cost 
example centralized system just fine saul greenberg mark roseman small group users pairs high bandwidth low latency network application modest demands processor 
replicated systems probably better larger groups slower networks applications demand local responsiveness 
situations static universal single solution suffice 
required dynamic reactive groupware architecture decision parts architecture replicated centralized adjusted fit needs particular applications site configurations 
seen clock components configured run centralized semi replicated objects 
grady takes step design gen prototype groupware toolkit distributed objects allows high degree run time configuration 
gen allows application designers chose individual objects centralized replicated allows designers create strategies data distribution concurrency control 
example gen altered allow object migration centralized objects automatically moved site uses frequently 
parallel dourish chapter book presents design prospero groupware toolkit allows decisions data distribution aspects fly 
essentially toolkits gen designed highly flexible 
developers choose variety strategies extend toolkit cover situations envisaged original toolkit creators 
programming abstractions groupware toolkits provide programmers abstractions coordinating multiple threads distributed processes updating common data model controlling view derived model 
actual abstractions supplied usually depend run time architecture described section schemes share state information 
patterson argues degree data models separated views generated lead different shared state architectures consequences programming abstractions provided 

unshared system data view model shared 
programmer maintain underlying data models exists graphical views links views model 

shared model data model shared entire system 
programming abstractions allow access change shared model specify possibly different unshared views created shared model 

shared view views models shared 
programming abstractions available change view model changes automatically propagating 
section describes programming abstractions common multicast remote procedure calls events shared data shared data views 
lends architectures mentioned 
groupware toolkits synchronous multicast rpcs simple chat application 
multicast remote procedure calls replicated processes replicas communicate share information trigger common program execution multicast remote procedure calls rpcs 
conventional rpcs programmer specifies procedure arguments executed remote processes 
multicast processes designated single call 
simple powerful abstraction unshared system synchronized 
example traditional callbacks user input replaced multicast rpc causes resulting action performed processes 
pseudo code illustrates showing simple text chat system shown implemented 
main window contains dialog transcript common displays 
participant types text private text input field bottom 
person presses transmit button name text composed sent insertion transcript 
set user name local user transmit button pressed set message contents input field multicast insert chat box user message clear input field example data model 
view synchronized explicitly manipulating widgets view 
data synchronized multicast rpcs programmer responsibility house keeping generate view data model 
examples systems multicast rpcs sole programming abstraction 
share kit uses unix rpc mechanism build multicast layer programmers register procedure argument formats rpc special keywords invoke 
conference toolkit uses routing table developers specify routing data application instances commands replica directed replicas 
notification server provides back door allows programmers channel multicast messages clients messages constructed way simulates multicast rpcs 
groupkit simplifies multicast rpcs allowing rpcs arguments spec saul greenberg mark roseman ified way normal procedure calls hiding routing communications details 
groupkit run time system tracks addresses existence application processes decides multicast rpcs conference processes 
means programmer track details file descriptors socket management 
groupkit provides forms rpcs differs messages sent 
multicasts procedure conference processes session including local user 
results procedure executed 
second multicasts command execution remote conference processes session local process generated call useful local actions differ somewhat remote ones 
third form directs command particular conference process 
valuable handling special cases updating new arrival going conference current state application 
additionally groupkit rpcs non blocking 
request rpc invocation local program continues execution waiting reply remote processes 
ensures conference processes delayed blocked event network latency crashes remote machines 
example implemented simple text chat system shown groupkit extends tcl tk scripting language john gk rpc 
complete code shown excluding minor bits format widgets display 
important realize lines code required program group aware gk initialize runtime architecture conference gk includes groupkit menu widget users local username retrieves name local user multicasts rpc insert user name text chat box 
lines just standard tcl tk code necessary create interface 
gk argv initialize conference create widgets gk menubar add default groupkit menu bar listbox chat shared chat box listbox entry input user type text entry box button text transmit create button labelled transmit command attach callback shown code format widgets display callback multicasts rpc replicas gk user name text proc gk multicast rpc arguments users local username st argument user name input get nd argument text input delete clear input field executed rpc sites 
inserts name text chat box proc name text chat insert concat name text simple groupkit multicast rpc model provides powerful flexible approach distributed programming 
programmer know addresses groupware toolkits synchronous conference processes track process creation destruction people enter leave session 
calls way user users conference session 
events second programming abstraction allows programmer synchronize changes views models specifying interesting events notified events occur 
events tied serve unshared shared systems 
event provides way conference applications track various things happen 
events generated automatically run time architecture participants join leave conference session say communications failures 
generated directly programmer application specific circumstances 
way programmer take action specific event attaching typically executes callback event occurs known handlers systems 
examples patterson notification server described previously section illustrated architecture supports notification 
events simply changes state underlying data things 
notification controlled attribute field thing occurs automatically state changes 
groupkit contains event mechanism events automatically maintained generated run time infrastructure 
events typically handle arriving departing participants updating synchronizing distributed processes noticing changes shared data 
events consist event type set attribute value pairs provide information event 
ways similar patterson notification server state information replicated centralized 
programmers trap particular events attaching desired actions specified callbacks automatically executed event occurs 
groupkit run time infrastructure automatically sends different event types conference processes 
event types generated users join leave session conference process may want take special action happens 
example code fragment tells new participant arrived printing message screens 
line attaches event automatically generated groupkit new user joins conference 
trigger execution subsequent lines 
gk bind attach code event set new user name users remote username get new person name puts new user name just arrived print message screen third event automatically generated groupkit handle conferences progress 
arrives conference process brought date conference processes session usually sending existing state conference 
details update newcomer left programmer having create appropriate callback 
saul greenberg mark roseman application developers generate custom events 
useful complex applications change handled part program generate event notify parts program processes change 
example programmer create shared data model events generate views 
changes model state attached events created update view accordingly 
different views handled attaching different callbacks 
variety toolkits type event notification scheme rendezvous chiron 
typically tied directly linking shared views data model discussed 
shared models views multicast rpcs events ordinate conference replicas demand housekeeping application complex 
consequently groupware toolkits provide programming abstractions maintain update shared data model means attaching view model 
idea separating data model view originated smalltalk model extended groupware 
implementations system maintains consistent shared data model handling concurrency synchronization notifies processes changes data automatically updates views changes occur 
examples groupkit provides shared data model called environment dictionary style data structure containing keys associated values 
instances environments run different processes run time system sure changes instance propagated instances 
groupkit environments powerful changes environment state tracked events trigger discussed previously 
programmer bind callbacks environment receive notification new piece information added information changed information removed 
corresponding actions triggered sites 
scheme generate different views data abstraction 
events monitored interface code view adjusted reflect state data model contained environment 
example code fragment creates shared environment called data contains field called number 
groupware button displayed shows current value number incremented user presses button 
gk bind share data data shared environment button button command create button 
data number expr data number pressed increment number key data environment data bind update view number button configure text data number button value changes data number initialize number programmer uses groupkit environments implement synchronized views models 
contrast rendezvous toolkit treats views models links class citizens 
system encourages developers create groupware applications powerful abstraction link view alv model constructs groupware toolkits synchronous shared underlying data abstraction view abstracted entity may differ user constraint called link automatically adjusts view data abstraction changed 
rendezvous differs architecturally groupkit data model propagation constraints centralized 
constraints powerful event scheme complex relationships automatically maintained system way constraint solver 
clock system uses constraints link views underlying model 
variety systems strong notion maintaining relation model view 
chiron user interface system data types abstractions dispatchers links views simpler event architecture constraints propagate changes 
chiron explicitly designed groupware toolkit multi user tetris game developed show flexibility architecture 
programmers special declarative language called specify relations abstractions views views customized ordination required 
populated virtual environments model view paradigm 
model abstraction rendered views model perspectives generated particular viewpoint model 
model typically spatial 
people enter spatial environment represented avatars icons video images 
move space manipulate artifacts 
usually aware presence pseudo identity see attending text voice communications 
examples dive 
discussion programming abstractions ones described ease considerably programmer task building groupware 
example multicast rpcs natural extension way normal callbacks novice groupkit programmers able create simple groupware applications minimal training 
event shared data abstractions elegant demand programmer learn new coding style usually takes planning initial coding separate data model view 
groupware programming abstractions eliminate coding complexity 
programmer consider interaction processes coordinated multicast rpcs events shared data side effects cause unexpected happen 
craft programming constructs effectively 
example multicast rpcs usually demand programmer consider local actions taken variables set procedure arguments multicast 
shared data abstractions problems 
data model views separated programmer handle exceptions occur view identical 
views intentionally differ person sees array bar chart pie chart programmer difficult interface design decisions allow people interact disjoint views 
saul greenberg mark roseman cases debugging hard problems occur interaction conference processes non deterministic difficult envisage 
groupware widgets greatest benefit today graphical user interface toolkits provision tried tested interface widgets 
programmers typically configure position lines code help interface builder 
done properly pre packaged widget sets provide consistent look feel interface 
widgets designed interface experts everyday programmer insert application assurance usable 
groupware applications graphical groupware programmers need widgets 
toolkit easy programmers add groupware features applications conference participants find valuable 
groupware widgets differ normal widgets 
different semantics actions performed reflected displays novel widgets designed address needs specific groupware 
section consider classes groupware widgets groupware versions single user widgets group specific widgets support activities group 
groupware versions single user widgets researchers created multi user analogues conventional single user widgets buttons menus simple text editors investigated sharing widgets conference participants flexible fit different applications group situations 
highlight issues consider problems face redesigning button widget fit groupware 
buttons simple devices conventional interfaces 
user presses button look changes reflect selected 
release button shape returns normal action executed 
cursor moved button mouse press button reverts back original appearance release effect 
button redesigned groupware issues arise 

feedback user actions shown partners feedthrough 
feedthrough shown interface action highlighting matches button presses releases final action button press resulted action 
feedthrough appear graphically identical local user feedback stylized communicate essence actions 

button handle multiple simultaneous access 
contain idea ownership person allowed press 
access control handled 
button implement turn person press time show press button 
simultaneous access allowed semantics simultaneous presses feedthrough displayed 

resulting actions handled 
example attached callbacks automatically groupware toolkits synchronous replicas person button press programmer distribute effects explicitly 

happens people viewing different parts display 
person see button scrolled area feedthrough shown different manner 

different representations differing native look feels groupware running different platforms interface syntax button translated different syntax button 
issues problematic move multi user equivalents complex widgets high interaction component list boxes text entry fields graphical 
problems trivial solutions designers groupware toolkits hard decisions case 
part design space includes flexibility provide programmer allow application specific decisions 
researchers begun address issues creating generic programming attributes groupware widgets 
concentrated widget coupling level access control 
tried redesign conventional widgets appropriate groupware settings 
coupling dewan defines coupling means interface components share interaction state different users :10.1.1.53.9216
tight coupling state shared aspects interface component person actions display results immediate update display 
loose coupling person actions propagate display critical event performed final state intermediate states seen 
example tightly coupled button appear identical displays pressed moved released 
loosely coupled button show release action intermediate feedthrough eliminated 
dewan choudhary argue flexible coupling important variety reasons :10.1.1.53.9216
groupware programs range fully synchronous nearly synchronous asynchronous coupling just way setting synchronicity 
example argue difference real time text program shows characters typed text chat vs complete messages email coupling level 
second tightly coupled actions showing intermediary steps may annoying users situations pursuing individual 
alternatively tightly coupled systems critical highly interactive exchanges people 
third loosely coupled systems exchange state frequently means performance demands system 
coupling control degree people private spaces wish space public 
dewan choudhary implemented coupling suite groupware toolkit allowing programmers users set coupling attributes associated individual interaction entities arranged multiple inheritance structure :10.1.1.53.9216
attributes indicate level coupling applied selectively members group 
suite divides interaction entities disjoint coupling sets 
example data state view state format state coupled independently saul greenberg mark roseman allows view data formatted different ways displays 
furthermore action coupling set determine commands callbacks attached user actions executed sites 
reconsider button example 
coupling levels define way button presses tied underlying data models coupling data state level feedthrough desired view coupling views callbacks invoked coupling actions 
ideally groupware programmer consider coupling levels just set attributes configured creating button 
idea applied complex widgets suite examples coupling applied complex editing form filling systems 
coupling available toolkits 
rendezvous toolkit allows flexible coupling way views separated data 
links rendezvous alv model specify views models synchronized different levels coupling specified programmer 
difference programmer code way coupling achieved simply set attributes widget 
access control access control determines access widget 
access control may required reasons 
people may wish private widgets manipulate view 
example text field groupware outliner person editing field wishes maintain ownership just duration edit length session 
second may sense users simultaneously manipulate widgets 
person time able press button manipulate scroll bar prevent scroll wars insert text field 
coupling demands access control may highly dependent particular interface constructed groupware programmers need able control 
groupware toolkits programmers manipulate access control light weight finegrained fashion 
group concurrency control access mediated locks tedious mechanisms 
notable exception suite 
shen dewan associate fine grained data displayed groupware application set collaboration rights rights specified programmer user multi dimensional inheritance structure 
collaboration rights include read write privileges viewing privileges coupling 
inheritance structure access control specified group individual level 
sets objects clustered specific access definitions overriding general ones 
smith rodden shared interface object layer sol architectural layer toolkit considers shareable versions single user widgets buttons text entry fields created 
provide set generic access control mechanisms determine people shareable objects 
settable options include see widget move 
group created generalized shared object service called cola 
groupware toolkits synchronous multi user editor permission alex mitchell 
widget single user widgets completely redesigned fit groupware settings limiting 
recipe doing illustrate example groupware single user widgets 
example multi user scrollbar seen sasse text editor 
differed conventional scrollbars thumbs selectable box displayed 
participants allowed scroll independently thumbs positions reflect person relative position document 
sasse scrollbar hard wired editor groupkit developers turned real multi user widget attached scrollable object lines code 
shown right side right half scrollbar normal single user scrollbar allowing user move document 
left vertical bars showing relative location conference user identified unique colour 
bar position size continuously updated participants scroll document change window size 
additionally name bar owner displayed popup follow user option allows participants toggle coupling status independent scrolling linked scrolling 
second example multi user text widget 
single user text widgets simple text editors true multi user text editor features allow simultaneous editing 
mitchell groupkit create multi user text editor 
packaged widget indicate widget behave 
seen provides window displaying shared text editor people scroll independently text groupkit multi user scrollbars 
access control user selectable sharing menu option range selection word line paragraph document level 
region selected lock request automatically 
person attempts select locked region cursor changes show conflict lock icon 
extra tools ability attach external notes text commentary seen create private text added shared view desired access shared whiteboard brain saul greenberg mark roseman groupkit participants widget 
activities 
text queried find wrote written colour coded show authorship 
group specific widgets group aware versions single user widgets part groupware toolkit 
toolkits strive provide novel widgets support particular aspects group 
section show examples group specific widgets implemented prototyped groupkit 
include widgets participant status telepointers awareness 
participant status people enter leave conference participants able see way see people arrive room 
people may strangers useful find information 
groupkit provides rudimentary participants widget illustrated included application 
lists participants current conference session left side list automatically updated people enter leave 
participant selected business card containing information displayed 
include contact information shown picture person material person wished pass 
experimental variation widget displays participants ways dependent information available photos available video snapshots images updated seconds 
video snapshots implement version system 
widgets include ability monitor activity participants actively computer 
useful facilitating contact partners 
groupware toolkits synchronous telepointers studies small face face groups working shared surface reveal gesturing comprises group activities 
gestures rich communication mechanism 
participants indicate relations artifacts display draw attention particular artifacts show intentions suggest emotional reactions 
groupware systems telepointers known multiple cursors provide simple reasonably effective mechanism communicating gestures 
unfortunately modern window systems tied notion single cursor application developers go great lengths suffer performance penalties implement multiple cursors 
supplying telepointers widgets attached view lines code programmer burden decreased significantly include important feature application 
example groupkit programmers add telepointers application lines code gk gk canvas groupkit telepointers partially handle displays people may see exactly thing widgets laid different locations 
tying window programmer attach particular widgets children purpose line adds telepointers canvas widget 
drawn relative widget application window 
similarly applied telepointers groupware text widgets may format contents differently different displays 
case tied position underlying text cartesian coordinates window 
illustrate value approach applied techniques groupware web browser 
people different sized windows html text images laid quite differently participant displays 
telepointers top correct character image 
experimental version groupkit telepointers allows overloaded semantic information provide participants stronger sense awareness going little consumption screen real estate 
telepointers tend focus participants attention information attached probably noticed quickly 
example allow programmers overload telepointers indicate identity information people names state information mode participant action information action person 
illustrates example overloaded action identity information 
left window shows participant carl display navigating pop menu 
see second cursor bottom display identifies owner saul 
right window shows saul display 
showing complete menu carl popped saul display annoying especially saul working area immediately underneath 
carl image labels altered indicate menu selection mode item selected action 
case semantic information menu action shown displays concisely little loss meaning 
workspace awareness real life working situations kept aware doing speech seeing working peripheral vision saul greenberg mark roseman overloaded telepointers showing action identity information 
glances 
helps ordinate 
cues may available groupware channel especially people allowed different large workspace 
consequently workspace awareness widgets provided inform participant people working shared surface doing 
mention workspace awareness meaning collaboration awareness mentioned chapters dewan prakash workspace awareness concentrates person moment awareness doing supported representations extensions actual shared workspace restrictive definition 
example awareness widgets radar overviews 
displays miniature overview document overlaid coloured areas show actual viewport participant session 
groupkit contains widget prototypes idea 
radar overview shown example 
includes overview large shared workspace containing concept map graph ideas 
viewport outlines participant contain portraits identifying owners indicates see 
addition telepointers displayed 
overview tightly coupled main view document shown changes immediately reflected 
usability study shown radar overviews effective way people maintain awareness spatial layout task 
see changes occur know working telepointers overview deictic 
developed variety prototype widgets supporting workspace awareness 
detail views showing exactly see 
lens combines overview person main viewing area transparent layers top 
fisheye lens uses fisheye view multiple focal points show global context magnify area displays 
awareness widgets illustrated videos 
groupware toolkits synchronous miniature overview concept mapping system built groupkit showing portraits telepointers 
system created carl gutwin permission 
discussion design groupware widgets young area 
interface components exist groupware applications potential widgets remains done generalizing packaging self contained widgets easily added application 
need strong programming abstractions notions coupling access control provide programmer flexibility specify widget behaviour different groupware settings 
need redesign today single user widgets reasonable powerful groupware counterparts 
need create generation groupware widgets includes refining design testing worth usability testing 
technical side issue widgets created toolkit developers 
current tools poor non existent 
rendezvous clock creators example build widgets scratch graphical primitives 
groupkit creators constructed rudimentary class builder able extend existing gui widgets supplied tcl tk toolkit 
class builder awkward suffers run time efficiency problems affect performance highly interactive widgets 
programmers groupware benefit interface builders conventional gui toolkits greatly eases task widget placement attribute setting 
unfortunately groupware toolkits available provide interface builders exception visual obliq 
similar modern conventional toolkits groupware applications visual obliq created designing interface interface builder embedding callback code interpreted language 
resulting application run interface builder rapid turnaround time 
saul greenberg mark roseman session management groupware developers concentrate building applications multi user games text editors 
important developers provide groupware people connected working just important provide community session managers establishing groupware connections 
firmly believe toolkits allow developers construct select large library session management interfaces flexible fashion accommodate diverse requirements different communities 
unfortunately today toolkits force single rudimentary session management interface applications 
session manager typically controls presents interface tasks creating new conferences naming conferences deleting conferences locating existing conferences finding conference joining people conferences access control conferences allowing allowing people leave deciding conferences persist users exit 
example interface session manager explicit steps user takes maintain collaboration 
implicit actions say act jointly editing artifact automatically initiates collaboration 
able provide different interfaces session management important aspect supporting working patterns group 
believe obstacles groupware difficulty starting groupware session 
obstacle may terms usability system difficult initiate social policy system imposes acceptable group 
session management afterthought added applications tuned needs collaboration patterns target user group 
policies metaphors session management session managers implement provide broad variety policies users illustrated examples section 
rudimentary policy session managers attended users forced handle session manager aspects 
entirely user decide connect specifying low level addressing internet host names tcp ip port numbers 
example session manager early versions ncsa collage groupware system presents form asking user supply login name ip address collage server server port number 
groupware toolkits synchronous open door session manager 
conference sessions shown participants post conference 
open door basic session manager provided groupkit offers open door permissive policy creating joining conferences people think terms conferences participants ip addresses 
shows example 
conference contains single groupware application application windows shown 
conferences pane local person saul greenberg sees conferences progress design session 
selecting see particular conference list participants pane 
conferences entered ways joins invitations creation 
saul join conference double clicking conference name 
adds list participants causes particular application appear display 
second person conference invite saul session menu option dialog appear screen asking wishes join 
example shown 
third saul create new conference conference menu selects list applications window running application appears display informed availability conferences pane 
session manager handles departure exiting attendees disappear participants pane 
leaves person asked conference application persist state saved re entered contents intact 
rendezvous points quite different policy provides common rendezvous points 
people go place automatically connected place 
best known example popular multi user muds 
person connects mud saul greenberg mark roseman known internet address enter rooms engage chat dialog room 
carries ideas muds graphical groupware rooms metaphor 
users community create virtual meeting rooms stock groupware meeting tools 
create opportunities collaboration see rooms available rooms active 
people freely move rooms 
enter room joined conferencing tools located room leave room tools room left 
person room behaves single user system 
room tools groupware artifacts remain available treated persistent conference sessions 
system serve needs collaborators working tasks period time allowing easily move tasks 
serves meeting place people see room converse entering room 
expect place systems wide appeal researchers pursuing policy 
example lee prakash jaeger developing general software architecture 
policies session managers possible 
example facilitated meeting session manager implemented groupkit chairperson complete control applications part meeting participate 
policy examples follow model telephone calls way conference calls established central switching point 
session manager document centric 
example person opens file currently edited groupware connection automatically 
point developer requires tools modify packaged session managers create new ones fit community 
building blocks session managers toolkits provide rudimentary hard wired session management facilities 
share kit example provides basic connection facilities allow information participants session transmitted connection 
similarly rendezvous built session manager call startup architecture 
investigations architectures flexible session management intermezzo really toolkits 
excepting groupkit toolkits programmers build applications session managers separate concepts 
toolkits support session management class entity long way knowing exactly primitives api provided developer 
experiences groupkit developed flexible session management facilities idea open protocols 
briefly registrar central server provides replicated data structure tracks meetings attendees specifies policy data structure 
session managers clients registrar specify policy selection operations perform 
maximum flexibility achieved providing open access registrar data structure protocol interface small groupware toolkits synchronous powerful operations add delete conference 
clients may different long behaved respect policy 
terms programming session managers programmers trap session manager events take actions callbacks 
different session managers different ways create policy 
ease programmer chore groupkit provides default callbacks handle routine operations 
programmer ride necessary 
events programmer create different access control mechanisms start new applications existing ones build interface way shows user going 
examples events described 
user requested new conference created request new conference termination existing approved new conference created existing removed 
user entered left conference 
user admittance conference approved user conference left conference process created terminated discussion groupware applications session managers needed groupware succeed 
session managers hard electronic contact get groupware started opportunities collaboration fall 
believe generation toolkits groupkit include session management important building block 
toolkit provide reasonable set stock session managers implement broad range policies 
adequate primitives provided programmer able modify existing session managers create new ones fit particular needs community 
possible session management toolkits developed independent application component run time architecture 
evidence groupkit session manager stand toolkit 
adapted clock groupware development tool manage centralized semi replicated sessions 
minor code changes required works spite radical differences run time system underlying language clock groupkit 
chapter components believe toolkits provide groupware programmers 
run time infrastructure automatically manages creation interconnection communications distributed processes comprise conference sessions greatly simplifying programmer job managing distributed system 
groupware programming abstractions allow developers control behaviour distributed processes take action state changes share relevant data generate views 
groupware widgets programmer quickly add interface features value conference participants 
session saul greenberg mark roseman managers users create manage meetings built developers accommodate group working style 
examples taken variety different toolkits illustrate components provided practice 
class groupware toolkits considered chapter consider real time distributed applications 
just subset groupware groupware toolkits address disparate application domains 
example strudel constructing speech act protocols 
oval build semi structured messaging information management systems 
lotus notes programming toolkit lets people develop tailor wide variety asynchronous applications lotus 
toolkits domain real time interaction handle different niche problems 
dewan choudhary suite toolkit applies highly structured text objects investigates flexible access control mechanisms incorporated :10.1.1.53.9216
prakash provides groupware primitives added existing single user text editors group aware 
produced group oriented fairly strict view sharing approach sharing window components underlying data object replication scheme 
smith rodden sol considers design features making single user widgets shareable 
chapter limited discussion components 
believe fundamental building blocks certainly components included commercial robust groupware toolkit 
examples follow see list features 
security privacy 
groupware large security hole great care taken determining right people allowed meeting permissions execute actions sites compromise system 
similarly communication channels encrypted case conference deals sensitive information 
supplied part stock toolkit 
audio video support 
toolkits mentioned directly support audio video 
real time groupware requires audio 
provided band telephones video conferencing systems media spaces 
trend application design integrate audio video computational groupware 
clearboard system described ishii chapter example allows participants see computational space video image portrays correct eye gaze position hand gestures relative surface see 
problem synchronizing audio video actions computational space seconds delay disconcerting group members 
discussion multimedia groupware dourish chapter 
communication channel networks 
groupware systems depend communication channels 
ideally underlying network tuned support performance demands groupware api reflect programmer needs 
example extensions standard networks mbone internet multicast backbone lets send multimedia wide area networks internet isis guarantees correct serialization events network 
fault tolerance 
network loads increase connections reliable fault tolerance increasingly important 
groupware toolkits include facilities allow application degrade gracefully checkpoint failed conferences resumption groupware toolkits synchronous seek alternate communication paths channel fails 
dourish addresses issues chapter 
versioning downloading 
replicated architectures problems arise site missing software different version 
system able check versions download software necessary 
session capture replay 
records meetings crucial 
capturing video straightforward capturing computational actions difficult 
challenge remains capture automatically highlights lengthy meetings concise manner 
multi user undo 
single user systems contain undo facilities 
undo groupware hard problem 
researchers working area long way go package undo facilities groupware programmers include easily application 
chapter prakash contains detailed discussion role undo group editor 
concurrency control 
mentioned part run time architecture concurrency control groupware sub field right 
remains done crafting appropriate tools architectures abstractions concurrency control easy programmer minimizing impact user interface 
application domains 
probability groupware toolkits specialized handle nuances particular real time applications domains 
example concerns text editing 
deal structured meetings group support systems extending capabilities existing single user systems primitives emacs text editor group aware 
alternate models 
separation model view ways groupware configured 
example beaudouin lafon defined layer slice model 
layers document model document layer displayed view direct manipulation layer means interact view view representation layer control views displayed cursor layer tracks mouse shows telepointers 
dewan chapter book considers architectural models 
development environments 
toolkits mentioned inadequate development environments 
example debugging groupware hard distributed system need appropriate debuggers 
interface builders lacking 
appropriate tools testing non existent 
web 
popularity world wide web network properties java programming language implies web delivery vehicle real time groupware 
web java internet particular features lend groupware ubiquity client server model telecommunications constructs includes constraints may challenge design groupware toolkits security performance session management styles 
web provide incredible opportunities groupware surveyed chapter dourish may find compromised technical constraints way commonly 
generation toolkits built groupware systems long way go catch single user counterparts 
look forward day saul greenberg mark roseman toolkits incorporate multi user features 
day comes artificial distinction constructing single collaborative systems disappear 
acknowledgments 
carl gutwin ted grady participated discussions required groupware toolkits helped influence contents 
dewan nicholas graham john patterson reviewed versions manuscript 
contributed constructive comments system description 
comments anonymous referees helped improve document 
funding national science engineering research council canada intel gratefully appreciated 
ahuja lucco 
comparison applications sharing mechanisms real time desktop conferencing systems proceedings acm cois conference office information systems boston april 
baecker posner 
user centered iterative design collaborative writing software proceedings acm interchi conference human factors computing systems amsterdam netherlands april 

selective undo mechanism graphical user interfaces command objects acm transactions computer human interaction september 
bharat brown 
building distributed multi user applications direct manipulation proceedings acm uist symposium user interface software technology marina del rey california november 
birman 
process group approach reliable distributed computing communications acm december 

conference toolkit framework realtime conferencing proceedings ec cscw european conference computer supported cooperative london uk september 
carlsson 
dive platform multi user virtual environments computers graphics 
cockburn greenberg 
making contact getting group communicating groupware proceedings acm conference organizational computing systems milpitas california november 
dewan 
flexible user interface coupling collaborative systems proceedings acm chi conference human factors computing systems new orleans louisiana april may 
dewan choudhary :10.1.1.53.9216
high level flexible framework implementing multiuser user interfaces acm transaction information systems 

dourish 
developing reflective model collaborative systems acm transactions computer human interaction 
march 
dourish 
consistency guarantees exploiting application semantics consistency management collaboration toolkit proceedings acm cscw conference computer supported cooperative boston mass november press 
dourish bellotti 
awareness coordination shared workspaces proceedings acm cscw conference computer supported cooperative toronto canada october november 
dourish bly 

supporting awareness distributed group proceedings acm chi conference human factors computing systems monterey california may edwards 
session management collaborative applications proceedings acm cscw conference computer supported cooperative chapel hill groupware toolkits synchronous north carolina october 
ellis gibbs 
concurrency control groupware systems proceedings acm sigmod international conference management data seattle washington usa 
graham 
declarative development interactive systems 
volume berichte der gmd oldenbourg verlag munich july 
graham morton 

visual programming component software architectures journal visual languages computing july academic press 
graham 
relational views model automatic distributed implementation multi user applications proceedings acm cscw conference computer supported cooperative toronto canada october november 
graham 
efficient distributed implementation synchronous groupware proceedings acm uist user interface software technology seattle washington november press 
graham 

linguistic support evolutionary design software architectures proceedings icse eighteenth international conference software engineering march ieee press 
greenberg 
sharing views interactions single user applications proceedings acm cois conference office information systems boston mass april 
greenberg gutwin 
applying distortion oriented displays groupware video proceedings acm cscw conference computer supported cooperative boston mass november 
videotape available acm press 
greenberg gutwin cockburn 
awareness fisheye views relaxed groupware proceedings graphics interface toronto ontario may distributed morgan kaufmann 
greenberg gutwin cockburn 
distortion oriented displays support workspace awareness sasse cunningham winder editors people computers xi proceedings hci springer verlag 
conference held imperial college london august 
greenberg gutwin roseman 
semantic telepointers groupware proceedings sixth australian conference computer human interaction hamilton new zealand november 
press 
greenberg roseman 
www browser real time groupware 
acm sigchi conference human factors computing system companion proceedings vancouver canada april 
greenberg 
real time groupware distributed system concurrency control effect interface proceedings acm cscw conference computer supported cooperative chapel hill north carolina october 
greenberg roseman 
groupkit acm siggraph video review issue videotape available acm press 
gutwin greenberg roseman 

supporting awareness groupware acm sigchi conference human factors computing system companion proceedings vancouver canada april 
gutwin greenberg roseman 
workspace awareness real time distributed groupware framework widgets evaluation sasse cunningham winder editors people computers xi proceedings hci springer verlag 
conference held imperial college london august 
gutwin greenberg roseman 
staying aware groupware workspaces video proceedings acm cscw conference computer supported cooperative boston mass november videotape available acm press 
gutwin roseman greenberg 
usability study awareness widgets shared workspace groupware system proceedings acm cscw conference computer supported cooperative boston mass november press 
gutwin stark greenberg 
support workspace awareness educational saul greenberg mark roseman groupware proceedings cscl conference computer supported collaborative learning bloomington indiana october 
distributed lawrence erlbaum associates 
greenberg 
implementing gesturing cursors group support systems journal management information systems 
hill 
abstraction link view paradigm constraints connect user interfaces applications proceedings acm sigchi conference human factors computing systems california may 
hill patterson 
rendezvous architecture language constructing multi user applications acm transactions computer human interaction june 
intel 
software available world wide web www intel com index html 
ishii kobayashi 
clearboard seamless medium shared drawing conversation eye contact proceedings acm chi conference human factors computing systems monterey california may 

getting started share kit tutorial manual distributed share kit version 
communications operating systems research group department computer science technische universitat berlin germany 
available anonymous ftp ftp inf de pub misc share kit 
kaplan 
flexible active support collaborative conversation builder proceedings acm cscw conference computer supported cooperative toronto canada october november 
beaudouin lafon 
slice logical model shared editors groupware real time drawing designer guide edited greenberg rada mcgraw hill europe 
prakash 
distributed toolkit supporting multiple group editors proceedings acm cscw conference computer supported cooperative los angeles california october 
krasner pope 
cookbook model view controller user interface paradigm smalltalk journal object oriented programming august september 

collaboration awareness support collaboration transparency proceedings acm sigchi conference human factors computing systems seattle washington april 
joseph romanow 
replicated architectures shared window systems critique proceedings acm cois conference office information systems boston mass april 
lee prakash jaeger wu 
supporting multi user multi applet workspaces cbe proceedings acm cscw conference computer supported cooperative boston mass november press 

mbone provides audio video internet ieee computer ieee press 
malone lai fry 
experiments oval radically tailorable tool cooperative proceedings acm cscw conference computer supported cooperative toronto canada october november 
prakash 
session capture replay paradigm asynchronous collaboration proceedings ecscw fourth european conference computer supported cooperative september 
mitchell communications shared understanding collaborative writing sc 
thesis department computer science university toronto canada 
grady 
flexible data sharing groupware toolkit sc 
thesis department computer science university calgary calgary alberta canada 
november 
ousterhout 
tcl tk toolkit addison wesley 
patel 
real time collaborative toolkit greenberg rada editors groupware real time drawing designer guide groupware toolkits synchronous mcgraw hill europe 
patterson 
taxonomy architectures synchronous groupware applications workshop software architectures cooperative systems held part acm cscw conference computer supported cooperative 
patterson 
comparing programming demands single user multi user applications proceedings uist symposium user interface software technology hilton head south carolina november 
patterson hill 

rendezvous architecture synchronous multi user applications 
proceedings cscw conference computer supported cooperative los angeles california october 
patterson day 
notification servers synchronous groupware proceedings acm cscw conference computer supported cooperative boston mass november press 

prototype product greenberg rada editors groupware real time drawing designer guide mcgraw hill europe 
prakash 
undoing actions collaborative proceedings acm cscw conference computer supported cooperative toronto canada october november 
prakash shim 
support building efficient collaborative applications replicated objects proceedings acm cscw conference computer supported cooperative chapel hill north carolina october 
roseman greenberg 
building real time groupware groupkit groupware toolkit acm transactions computer human interaction march 
roseman greenberg 

network places collaboration proceedings acm cscw conference computer supported cooperative boston mass november press 
roseman greenberg 
registration real time groupware research report department computer science university calgary alberta canada 
roseman greenberg 
building flexible groupware open protocols proceedings acm conference organizational computing systems milpitas california november 
roseman greenberg 

groupkit groupware toolkit building real time conferencing applications proceedings acm cscw conference computer supported cooperative toronto canada october november 
gettys 
windows system acm transactions computer graphics 
shen dewan 
access control collaborative environments proceedings acm cscw conference computer supported cooperative toronto canada october november 
shepherd mayer strudel extensible electronic conversation toolkit inproceedings acm cscw conference computer supported cooperative los angeles california october 
smith rodden 
access model configure multi user interfaces proceedings acm conference organizational computing system milpitas california november 
smith shea malley taylor 

preliminary experiences distributed multi media problem environment proceedings ec cscw st european conference computer supported cooperative september 
tang 
findings observational studies collaborative international journal man machine studies 
republished title saul greenberg editor computer supported cooperative groupware academic press 
foster bobrow 

design conversation lessons international journal man machine studies february 
republished title saul greenberg editor computer supported cooperative saul greenberg mark roseman groupware academic press 
taylor anderson johnson 
chiron software architecture user interface development maintenance runtime support acm transactions computer human interaction june 
kaplan fitzpatrick 
specifying dynamic support collaborative worlds proceedings acm conference organizational computing system california august 
tou berson estrin wu 
prototyping synchronous group applications ieee computer may trevor rodden mariani 
adaptors support cooperative sharing proceedings acm cscw conference computer supported cooperative chapel hill north carolina october 

tools implementing groupware survey evaluation technical report cs department computer science york university toronto canada 
wilson 
shared whiteboard windows greenberg rada editors groupware real time drawing designer guide mcgraw hill europe 
