functional programming corecursion vene university estonia uustalu royal institute technology stockholm sweden mainstream categorical approach typed total functional programming functions inductive source types defined primitive recursion called paramorphisms utility primitive recursion scheme defining functions programming known 
draw attention dual notion functions coinductive target types defined primitive corecursion show examples primitive corecursion useful programming 
categorical approach typed total functional programming datatypes modelled initial algebras terminal coalgebras 
object study notion functions coinductive target types defined primitive corecursion 
dual paramorphisms functions inductive source types defined primitive corecursion 
widely term paramorphism due meertens greek preposition meaning near side term novel invention greek preposition meaning apart far away 
aim show convenient tool declaratively thinking programmer handy anamorphisms functions defined way paramorphisms frequently superior catamorphisms functions defined iteration 
tradition categorical functional programming follow started bird meertens formalism bir theory datatypes lists 
malcolm mal fokkinga fok generalized approach arbitrary datatypes inspired hagino hag 
geuvers contains thorough theoretical analysis primitive recursion versus iteration demonstration readily analysis primitive corecursion versus 
general appears primitive corecursion largely overlooked theoretical literature fokkinga fok ignores know papers containing interesting programming examples probable reason young age programming 
shall proceed follows 
section give short categorical approach datatypes iteration application program calculation 
ee estonia cs ut ee se kista sweden kth se section introduce scheme primitive recursion inductive types prove properties 
dualize results coinductive types case introducing primitive corecursion show usefulness scheme examples 
section show possible directions conclude 
proofs carried structured calculational proof style gru 
datatypes iteration preliminaries default category shall assume existence finite products theta products distributivity products coproducts distributive 
typical example distributive category sets category sets total functions 
quite standard notation 
objects write fst theta snd theta denote left right projections product theta pairing unique morphism theta fst ffi snd ffi left right injections coproduct inl inr case analysis unique morphism ffi inl ffi inr object unique morphism 
inverse canonical map inl theta idc inr theta idc theta theta 
theta denoted distr theta 
theta theta 
predicate guard 
defined snd snd ffi distr ffi ida identity functor denoted functor application morphism denoted ff fa fb 
dialgebras categorically datatypes natural numbers lists traditionally modelled initial algebras numbers streams terminal coalgebras 
hagino hag introduced notion dialgebras generalises concepts rich model sorted algebras fok 
definition endofunctors 
ffl dialgebra pair object ga morphism default category ffl dialgebras 
morphism homomorphism diagram commutes 
ga gb gf ffi ffi ff 
easy verify composition homomorphisms homomorphism 
identity morphism ida homomorphism left right unit respect composition 
follows dialgebras homomorphisms form category 
definition endofunctors 
ffl category dialgebras category objects dialgebras morphisms homomorphisms 
composition identities inherited categories algebras coalgebras defined alg coalg respectively 
ffl dialgebra initial resp 
terminal initial resp 
terminal object category dialgebras 
initial algebra denoted inf terminal coalgebra denoted outg 
note initial terminal dialgebras may may exist 
fact know simple criteria existence general dialgebras case 
case algebras initial algebra guaranteed exist functor dually functor continuous terminal coalgebra guaranteed exist 
polynomial functors functors built products sums identity constant functors continuous consequently corresponding initial algebras terminal coalgebras exist 
pursue question refer interested reader fok 
initial algebras catamorphisms existence initial algebra inf means algebra exists unique homomorphism inf 
fokkinga fok denote homomorphism characterized universal property ffi inf ffi cata charn type information summarized diagram inf morphisms form called catamorphisms derived greek preposition ff ff meaning downwards construction delta iterator 
example consider datatype nat natural numbers constructor functions zero nat succ nat nat represented initial algebra nat zero succ inn id algebra catamorphism iteration 
instance curried sum naturals defined add succ example datatype list finite lists set constructor functions nil list cons theta list list represented initial algebra list nil cons la inla la theta la id id theta 
la algebra catamorphism la application standard fold function lists 
function function map list list instance defined map nil cons ffi theta id list la catamorphisms obey nice laws cancellation law reflection law known identity law fusion promotion law especially important program functor continuous iff preserves limits chains 
calculation cancellation law describing certain program execution step ffi inf ffi cata cancel idf inf cata refl ffi ffi ffi cata fusion follow directly characterization cata charn 
laws originally special case lists form heart bird meertens formalism 
show usefulness mentioned laws prove lemma recorded lambek lam lemma morphism inf isomorphism inverse gamma inf proof inf ffi inf cata fusion inf cata refl idf inf ffi inf cata cancel inf ffi inf functor ffi inf idf functor idf terminal coalgebras anamorphisms existence terminal coalgebra outg means coalgebra exists unique homomorphism outg 
homomorphism usually denoted characterized universal property outg ffi ffi ana charn type information summarized diagram gc outg morphisms form called anamorphisms derived greek preposition ffff meaning upwards name due meijer construction delta 
catamorphisms anamorphisms enjoy various properties including cancellation reflection fusion laws outg ffi ffi ana cancel id outg ana refl ffi ffi ffi ana fusion outg isomorphism inverse gamma outg example consider stream streams infinite lists destructor functions head stream tail stream stream represented terminal coalgebra stream head tail sa sa theta sa ida theta anamorphisms construct concrete streams 
instance stream natural numbers nats stream nat zipping streams zip stream theta stream stream thetab defined follows nats id nat succ nat ffi zero zip fst theta fst snd theta snd ffi theta sa thetab example possibly infinite lists list represented terminal coalgebra la outla functor la thetax 
predicate empty list partial functions head list tail list list terminal coalgebra morphism outla defined outla 
head tail ffi empty 
anamorphisms list correspond applications unfold function functional programming 
primitive recursion clearly morphism catamorphism means results previous section applied stand 
instance factorial function specified equations fact fact fact catamorphism 
problem compute value factorial argument needs value previous argument previous argument 
meertens shown function characterized similarly factorial function definable composition left projection catamorphism 
relevant result lemma theta ffi inf ffi idf fst ffi inf ffi snd proof ffi inf ffi idf pairing fst ffi idf cata charn idf ffi inf pairing ffi inf inf functor ffi inf inf ffi idf pairing ffi inf inf ffi snd ffi idf delta functor ffi idf inf ffi snd ffi idf pairing inf ffi snd ffi idf fst ffi inf ffi snd fst ffi inf ffi snd ffi inf delta fst ffi inf ffi snd ffi cata cancel fst ffi inf ffi snd ffi inf ffi snd pairing ffi fst ffi inf ffi snd snd ffi inf ffi snd delta cata fusion snd ffi inf ffi snd pairing inf ffi snd ffi inf cata refl ffi idf left hand side equivalence corresponds exactly specification primitive recursion 
instance factorial function specification reads fact ffi inn succ ffi zero mult ffi id nat theta succ ffi fact idn succ ffi zero mult ffi fact theta succ consequently get definition factorial fact fst ffi succ ffi zero mult ffi id nat theta succ inn ffi snd lemma follows primitive recursive function represented catamorphism recursive construction 
presence exponentials define ackermann function higher order catamorphism expressive power language catamorphisms bigger class recursive functions 
fact howard shown functions expressible simply typed calculus extended inductive coinductive types precisely provably total logic id 
order arithmetic augmented finitely iterated inductive definitions 
paramorphisms programming program reasoning easier introduce new construction find properties 
morphism theta define morphism hj ji letting hj ji fst ffi inf ffi snd para def morphisms form hj ji called paramorphisms name due meertens 
construction hj delta ji primitive recursor 
lemma get characterization paramorphisms universal property ffi inf ffi idf hj ji para charn type information summarized diagram idf theta example factorial function defined paramorphism fact hj succ ffi zero mult ffi id nat theta succ ji calculational properties paramorphisms similar catamorphisms 
particular versions cancellation reflection fusion laws hj ji ffi inf ffi hj ji idf para cancel idf hj inf ffi fst ji para refl ffi ffi theta idf ffi hj ji hj ji para fusion reflection law proved calculation idf para charn inf functor inf ffi idf pairing inf ffi fst ffi idf idf functor inf ffi fst ffi idf idf hj inf ffi fst ji fusion law proved follows ffi ffi theta idf ffi hj ji para charn ffi hj ji ffi inf para cancel ffi ffi hj ji idf delta ffi theta idf ffi hj ji idf functor ffi theta idf ffi hj ji idf pairing ffi ffi hj ji idf hj ji definition paramorphism composition left projection catamorphism 
converse paramorphisms viewed generalization catamorphisms sense catamorphism definable certain paramorphism hj ffi fst ji para cata property verified calculation para charn ffi inf cata cancel ffi pairing ffi fst ffi idf functor ffi fst ffi idf hj ffi fst ji dualize know paramorphisms 
morphism define morphism composition certain anamorphism left injection inr ffi outg ffi inl apo def agree call morphisms form 
construction delta course primitive 
characterizing universal property outg ffi id ffi apo charn type information summarized diagram idg laws just duals paramorphisms outg ffi id ffi apo cancel id inl ffi outg apo refl ffi id ffi ffi apo fusion paramorphisms generalized catamorphisms generalization anamorphisms inl ffi apo ana example consider function stream stream maps function head stream leaves tail stream unchanged 
anamorphisms defined follows ffi head inr ffi tail head inr ffi tail sa ffi inl clearly definition convenient tail resulting stream unchanged constructed element element 
time definition looks follows theta inr ffi sa ffi head inr ffi tail sa tail stream returned directly inspection inside 
example assume set ordered linearly relation theta 
function insert theta stream stream inserts element sorted stream result sorted specified follows head tail ffi insert ffi ys ae ys head ffi ys head ffi ys insert ffi tail ffi ys specification input stream traversed copied output stream elementwise point input element inserted remainder input stream entered output stream 
formally idea captured categorical definition insert ffi ys ffi inr id theta inl ffi test sa ffi ys test stream stream sa stream test fst snd ffi ffi ffi fst ffi snd 
ffi id example consider function concat list theta list list concatenates 
naturally representable copies arriving returns second concat ffi ffi outla ffi inr ffi ffi outla la ffi order illustrate utility laws introduced show concatenation associative concat ffi concat ffi concat ffi concat ffi introduce short hand notation occuring definition function concat ffi outla ffi inr ffi ffi outla la definition concat equivalent concat ffi ffi equation want prove looks follows ffi ffi ffi ffi proof carried informal plan 
twice characterization open bodies left hand side equation 
push subexpressions far right possible simplify resulting expression 
pull simplified subexpressions back left characterization close bodies 
pushing subexpressions case operation shall repeatedly intermediate result functor la la id list ffi la inr ffi inr ffi la inl inr ffi la validity equation follows directly definition functor la properties coproduct la id list ffi la inr ffi inr ffi la inl case analysis la id list ffi ffi la id list ffi inr ffi la inl la functor case analysis la functor la id list ffi inr ffi la inl def 
la case analysis inr ffi ida theta id list ffi la inl case analysis inr ffi id id theta id list ffi la inl def 
la inr ffi la id list ffi la inl la functor case analysis inr ffi la proof associativity ffi ffi def 
apo charn outla ffi ffi def 
apo cancel la id list ffi la inr ffi outla ffi inr ffi la inl ffi outla ffi outla ffi inr ffi la ffi outla ffi def 
apo cancel outla ffi inr ffi la ffi la id list ffi ffi la inr ffi outla ffi inr ffi la inl ffi outla outla ffi inr ffi la ffi outla ffi inr ffi la ffi outla case analysis def 
la outla ffi inr ffi la ffi outla ffi inr ffi la ffi la ffi outla case analysis la functor outla ffi inr ffi la ffi outla ffi inr ffi la ffi ffi outla la id list ffi la inr ffi outla ffi inr ffi la inl ffi outla ffi inr ffi ffi la ffi ffi outla apo cancel def 
outla ffi ffi inr ffi la ffi ffi outla la ffi id list ffi la inr ffi outla ffi ffi inr ffi ffi outla ffi ffi described notion primitive corecursion coinductive types dual primitive recursion inductive types 
generalizations basic operations iteration respectively 
value iterative function argument depends solely values immediate subparts value primitive recursive function may additionally depend immediate subparts directly 
dually argument function value may determine arguments immediate subparts value argument primitive function may alternatively determine immediate subparts directly 
primitive corecursion permissive easier write programs prove properties programs 
related notions coinduction bisimulation widely analysis processes specifiable transition systems state machines jr 
processes understood functions states behaviors sequential composition processes natural example function elegantly definable 
leads believe may turn viable construction modelling processes 
check conjecture possible direction continuing reported 
uv studied programming inductive types setting intuitionistic natural deduction 
simple iteration primitive recursion considered course value iteration 
categorical treatment schemes subject 
authors grateful anonymous referee constructive helpful review 
reported partially supported estonian science foundation 
diagrams produced xy pic macro package rose 
bir richard bird 
theory lists 
broy editor logic programming calculi discrete design volume nato asi series pages 
springer verlag berlin 
fok maarten fokkinga 
law order algorithmics 
phd thesis dept informatics university twente 
herman geuvers 
inductive coinductive types iteration recursion 
nordstrom pettersson plotkin editors informal proceedings workshop types proofs programs sweden june pages 
dept computing science chalmers univ technology goteborg univ 
url ftp ftp cs chalmers se pub cs reports 
gru jim grundy 
browsable format proof presentation 
universalis 
url saxon pip com pl 
hag hagino 
categorical programming language 
phd thesis cst laboratory foundations computer science dept computer science univ edinburgh sept 
brian howard 
inductive coinductive pointed types 
proceedings st acm sigplan intl 
conf 
functional programming icfp philadelphia pa usa may pages 
acm press new york 
jr bart jacobs jan rutten 
tutorial algebras induction 
bulletin eatcs 
lam joachim lambek 
fixpoint theorem complete categories 
mathematische zeitschrift 
mal malcolm 
data structures program transformation 
science computer programming 
lambert meertens 
paramorphisms 
formal aspects computing 
uv uustalu vene 
cube proof systems intuitionistic predicate logic 
haveraaen owe editors selected papers th nordic workshop programming theory oslo norway dec research report dept informatics univ oslo pages may 

