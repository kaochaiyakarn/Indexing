topology iterates computational logic anthony karel seda pascal hitzler department mathematics university college cork ireland 
mail aks bureau ucc mathematische fakultat universitat tubingen germany 
mail pascal hitzler student uni tuebingen de consider problem finding models logic programs fixed points immediate consequence operators certain extensions syntax invalidate classical approach adopted case definite programs iterates knaster tarski theorem 
discuss alternatives theorem elementary notions topological dynamics 
leads consider simple syntactic conditions employing level mappings values countable ordinal fl ensure convergence models fixed points requisite sequences iterates 
obtain result constructive approach perfect model semantics przymusinski locally stratified programs somewhat lines approach adopted apt blair walker stratified programs 
particular certain inequalities sharp show existence unique supported models improves przymusinski results perfect models 
result obtained viewing scott domain generalized ultrametric space applying fixed point theorem due 
fl happens results extend fitting treatment metric methods certain non stratified programs discussed apt pedreschi termination problems 
subject classifications keywords logic programming semantics level mapping generalized ultrametric space domain topological dynamics 
computational logic concerned logic programming language broadly consists components 
syntax knowledge representation language theorem prover interpreter 
paradigm program statements viewed axioms computation viewed deduction axioms theorem prover 
distinguished minimal model semantics purpose provide program intended meaning 
topology proceedings vol 
proceedings th summer conference general topology applications special session topology computer science ontario august pp 
appear 
operator property fixed point fixed point minimal fixed point 
furthermore expects connected result expressing hand completeness soundness theorem prover hand expressing terms form tractability relation process determining classic example provided definite positive logic programs 
case syntax simply horn clause subset order predicate logic sld resolution theorem prover 
definite program consists finitely clauses form atoms case abuse notation indicating empty antecedent body unit clause fact 
herbrand model immediate consequence operator requisite connection components established known theorem apt kowalski van emden see lfp denotes fixed point theorem definite program lfp fa ag fa ag worth drawing attention fact proof theorem depends lattice continuity monotonicity application knaster tarski theorem fixed point theorem complete partial orders 
despite restricted syntax turns partial recursive computable function computed definite program class definite programs computationally adequate 
lot current interest question making definite programs expressive flexible programming purposes question modelling uncertain nonmonotonic reasoning questions involve technicalities essence categorized broad headings 
extension syntax definite programs 
ii enlargement set truth values uses include say infinitely truth values 
iii changing underlying logic permit non classical logics 
extension syntax undertake include negated atoms bodies clauses consider normal logic programs programs consist finitely clauses form clause symbols atoms commas stand conjunction denotes delta delta delta delta delta delta symbol denotes logical connective material implication 
worth noting change syntax give considerable gain expressiveness point discussed 
far issues ii iii concerned change confine just truth values true false deal classical order logic 
simple change just syntax leads problem 
problem operator longer monotonic theorem longer applicable remains central problem find pre fixed points fixed points 
form theorem apply new context 
way round problems define powers operator way recover monotonicity way adopted discussed 
alternative approach consider extent methods topology analysis substitute knaster tarski theorem 
undertaken direction includes lattice topologies metrics banach contraction mapping theorem see metrics multi valued mappings case disjunctive logic programs rutten smyth fixed point theorem non expansive operators quasi metric spaces 
concerned alternative approach main objective explore elementary ideas topological dynamics model theory logic programs concentrate issue raised problem reasons clear shortly address 
words investigate question existence interpreters completeness soundness relation model theory 
specific aim ideas connected convergence sequences iterates find models supported models fact correspond pre fixed points interpretations satisfying correspond fixed points supported satisfies see thinking simple observation 
observation suppose normal logic program interpretation sequence iterates converges cantor topology see need converge model necessarily supported model 
continuous cantor topology need supported model fixed point note similar fact holds definite logic programs relation scott topology suppose definite program interpretation greatest limit scott topology sequence iterates model sequence iterates monotone increasing need fixed point proof follows theorem lemma employs fact scott continuous definite permits recover classical fixed point theory definite programs discussed 
observation proved moment note raises question 
question provide conditions necessary sufficient necessary sufficient convergence sequences iterates cantor topology terms syntax particular 
general observation means finding pre fixed points fixed points propose consider question formulate answers terms level mappings inequalities values ground instance clause normal logic program takes values arbitrary countable ordinal fl 
establish preliminaries notation formulate main definition 
briefly called level decreasing respectively strictly level decreasing respectively semi strictly level decreasing respectively inequalities holding 
fact see class programs defined coincides exactly class locally stratified programs defined przymusinski papers see particular 
terminology adopt suited purposes intend distinguish conditions quite carefully term locally stratified 
matter fact class programs defined condition general considered detail reasons considered see 
przymusinski discussed existence suitable interpreters locally stratified programs related model theory 
reason mentioned consider procedural semantics 
results entirely model theoretic may summarized follows 
examine class defined condition 
turns case strictly contracting sense relative generalized ultrametric define terms necessitates thinking scott domain spherically complete generalized ultrametric space 
show fixed point theorem case unique supported model coincides perfect model 
improves results przymusinski extent showed uniqueness perfect models 
particular takes values contraction mapping relative ultrametric introduced fitting 
explore class briefly relating ideas current interest dynamical systems computing developed edalat detail 
interest case fl restrictive essential consider arbitrary countable ordinals fl reasons 
doing allows include arbitrary locally stratified programs framework 
second show class strictly level decreasing programs compute partial recursive functions see case confined valued level mappings examples programs strictly level decreasing respect level mappings values ordinals greater example 
examine semi strictly level decreasing programs depth 
analysis recover perfect model semantics 
new approach simple constructive see construction methods different employed 
establish recursion equations see corollary show precisely iterates involved construction evolve 
note simplification obtained approach ordinary iterates complicated concepts powers introduced defined convenience 
worth emphasizing fact class locally stratified programs forms considerably larger class programs stratified programs containing programs numbers program see example considered fitting stratified 
partial answer give question shows ideas embodies general means finding models supported models logic programs 

named author acknowledges substantial support pro vided office naval research presenting results second named author acknowledges hospitality university college cork final preparation 
grateful anonymous referee suggesting improvements style presentation drawing attention flaw version lemma 
preliminaries notation convenient establish preliminary concepts definitions 
notation standard follows 
undefined concepts relating logic programming 
denote arbitrary normal logic program defined underlying order language denoted denote herbrand base set ground variable free atoms fact shall usually suppose contains function symbol positive arity usually infinite set 
assumption necessary topological considerations trivial 
needless say results establish apply full generality contains function symbol 
denote set herbrand interpretations usual herbrand interpretation identified natural way subset power set notation ground denote set ground instances clauses set instances clause belong equivalently contain variable symbols see 
noted important concepts subject immediate consequence operator define fa clause ground delta delta delta delta delta delta notice classical valued logic statement delta delta delta delta delta delta equivalent statement 
denote level mapping simply mapping fl fl denotes arbitrary countable ordinal 
fact fl regarded set ordinals fl set ordinals fl 
usual successor write gamma predecessor call level mapping case fl notation set natural numbers including zero 
fa ng fl put 
say level call level mapping finite finite loss generality suppose smallest value taken zero 
note naturally identified denotes set 
endowed known important topologies 
endow scott topology 
known product topology coincides scott topology viewed complete lattice fact underpins observation note 
second endow discrete topology 
product topology case homeomorphic cantor set 
shall denote topology refer cantor topology details facts 
simple criterion convergence sequences include completeness slightly comprehensive form see proposition 
typically denote sequences 
proposition sequence convergent iff eventually belongs eventually belong meaning large respectively 
convergent limit set fa eventually belongs proposition prove observation 
proof observation 
denote suppose converges part show 
definition clause ground converges proposition applied times definition follows turn follows proposition continuous simple argument uniqueness limits hausdorff shows required 
program find converges fr fr supported 
course example just considered continuous necessary sufficient syntactic conditions continuity established 
continuity certain examples discuss note sufficient condition continuity contain local variables see corollary variable symbol local occurs body clause head 
example local variable clause 
level mappings defined number places literature logic programming usually taken values 
example appeared study termination problems see completeness problems define metrics 
position formulate main definition propose consider response question apparent proceed builds 
definition normal logic program fl level mapping denote typical clause ground 
call level decreasing respect inequalities hold clause ground 
strictly level decreasing respect inequalities hold clause ground 
semi strictly level decreasing respect inequalities hold clause ground 
noted earlier semi strictly level decreasing programs coincide exactly locally stratified programs defined 
fl level mapping set gamma ordinal fl way set correspondence level mappings local fh flg 
course class strict subclass class strict superclass locally stratified programs 
fact class programs class disposed immediately general considered 
example contains program case fixed points 
continuous follows observation sequence converge precisely order limit recursion negation stratified programs introduced apt blair walker see van gelder extended locally stratified programs przymusinski condition imposed definition 
strictly level decreasing logic programs topology course metrizable ultrametric generates choose finite level mapping 
see put put gamman differ agree atoms lower level 
metric introduced fitting problematic programs discussed numbers program game program transitive closures graphs program 
case shown contraction mapping applying banach contraction mapping theorem program unique supported model 
fitting discussed class programs called acceptable apt pedreschi encountered discussions termination problems logic programming see 
definition strictly level decreasing program relative level mapping implicit fitting discussion acceptable programs explicitly 
notice programs just mentioned stratified methods applicable 
precisely reason fitting introduced metric applied banach contraction mapping theorem discuss semantics 
turns see theorem strictly level decreasing respect level mapping contraction mapping relative metric determined banach contraction mapping theorem may applied obtain unique supported model fact main objective section establish completely general version theorem theorem 
result effectively class strictly level decreasing programs improves results noted show uniqueness supported models just perfect models emerges perfect models supported fact 
obtain results fixed point theorem place banach contraction mapping theorem directly applicable case 
necessitates showing domain turned generalized ultrametric space spherically complete sense results devoted establishing details facts 
definition see set gamma partially ordered set element 
call pair generalized ultrametric space theta gamma function satisfying conditions fl gamma 


fl fl fl 
fl gamma set fl fy flg called fl ball just ball generalized ultrametric space called spherically complete chain balls set balls totally ordered inclusion 
function called strictly contracting theorem general form 
theorem spherically complete generalized ultrametric space strictly contracting 
unique fixed point 
order apply theorem intend show scott domain spherically complete generalized ultrametric space 
denote scott domain set dc compact elements see terms notation 
countable ordinal fl gamma fl set gammaff ff flg symbols gammaff ordering gammaff gammafi fi ff 
definition dc fl function called rank function denote gammafl 
define theta gamma fl inff gammaff dc ffg called generalized ultrametric space induced notice definition just closely related example turn employed 
straightforward verify generalized ultrametric space proceed show spherically complete 
necessary impose standing condition rank function ordinal ff fl set fc approx ffg directed non empty 
follows simplify matters denote ball gammaff ff 
lemma ff fi 
statements hold 
fc approx fig fc approx fig 
ff approx ffg fi approx fig exist 
fi ff proof 
ff fi gammafi statement follows immediately definition set fc approx fig bounded fi second statement follows consistent completeness third statement suppose ff ae fi 
immediately fi ff gamma fl totally ordered 
fi approx fig approx fig approx ffg ff fi ff required 
suppose ff fi say 
ff fi immediate ff fi suppose ff fi suppose fact ff fi ff fi similar argument case fi ff 
intend show ff fi suffices obtain ff fi 
definition ff fi see ff fi elements ball question 
suppose ff fi 
compact element statement ff iff fi false 
ff fi case ff fi point ball centre take fi equation established part 
obtain fi approx fi fig 
fc approx fi fig empty ff fi equal bottom element done suppose fc approx fi fig 
fi condition imposed compact element fi fi ff ff leading contradiction ff compact element fi ff fi contradicts fact ff fi gammafi ff fi required 
theorem standing condition spherically complete 
proof 
previous lemma chain ff ff balls gives rise chain ff reverse order 
sup ff ff ff arbitrary ball chain 
suffices show ff ff 
ff ff ff ff ff gammaff generalized ultrametric suffices show ff gammaff compact element ff construction dc ff 
show ff compact exists fi chain fi ff ff fi fi fi ff lemma ff fi fi ae ff ff ff fi fi element set fc approx fi ffg fc approx ff ffg 
ff supremum set ff required 
apply results logic programming regard domain set inclusion set compact elements set finite subsets see related results 
note special case domain results similar theorem obtained 
definition normal logic program fl level mapping 
define rank function induced setting ig non empty 
generalized ultrametric obtained rank function way denoted notice condition imposed trivially satisfied proposition easier calculate distances depend proposition normal logic program fl level mapping inff gammaff ff ff proof 
immediate observation ig 
main result section theorem 
theorem normal logic program strictly level decreasing respect level mapping fl 
strictly contracting respect generalized ultrametric induced unique fixed point unique supported model 
proof 
suppose gammaff case 
ff 

strictly level decreasing head unit clause ground 
follows 
argument 
gamma gamma required 
case 
ff 
case differ element level ff agree ground atoms lower level 
ff 
clause ground strictly level decreasing ff ff follows 
argument ff 
ff ff follows gamma ff gammaff required 
strictly contracting 
theorem unique fixed point unique supported model claimed 
worth noting proof theorem constructive provide means finding fixed point 
contrast results corollary particular give constructions fixed point obtained theorem 
case level mapping argument proof theorem exactly form respect ultrametric introduced fitting defined earlier 
case banach contraction mapping theorem sufficient obtain fixed point results theorem 
theorem suppose strictly level decreasing respect level mapping contraction respect ultrametric contractivity factor unique fixed point unique supported model 
staying level mappings moment fitting noted banach contraction mapping theorem applies fixed point produces obtained considering iterates sequence iterates close infinite ordinal need enter transfinite case 
particular see limt supported model 
fitting noted standard semantics perfect model stable model coincide unique fixed point 
generally corollary theorem theorem 
corollary suppose strictly level decreasing respect arbitrary level mapping fl 
semantics coincide perfect model semantics unique minimal supported model example take program define 
strictly level decreasing unique supported model theorem set fp ng 
time take follows define 
denotes th limit ordinal 
strictly level decreasing unique supported model set fp ng fp ng 
example take numbers program level mapping defined theorem applies program contractivity factor produces set fp numbers unique fixed point terminology barnsley fractals 
academic press san diego 
example consider program set fq fixed point satisfy hypothesis theorem 
fact program semi strictly strictly level decreasing level mapping cycle created second third clauses 
cycle prohibited strictly level decreasing program example shows semi strictly program need contractive immediate consequence operator 
question extent converse theorem true 
answer question set limits applicability generalized determined level mappings 
fact strict converse theorem false shown example 
example take follows case contraction contractivity factor take level mapping second clause strictly level decreasing respect level mapping 
removing second clause obtain program changes subsumption equivalent defined michael maher 
previous question modulo equivalences sort 
results just discussed suggest connections computational logic dynamical systems propose briefly consider 
material included assumed follows necessarily strictly level decreasing respect level mapping 
fix listing fa determine level mapping setting allows identification corresponds sequence ff ff ff ff ff equals 
fitting metric coincides symbolic dynamics ff fi ff fi ff fi gamman smallest integer ff fi course ff ff ff ff fi fi fi fi elements furthermore identification conjugate sort shift operator example example foregoing comments program corresponds shift 
models chaotic behaviour extent shift notice equivalently periodic points period 
program corresponds shift 

program corresponds shift 

program example corresponds mapping 
gamma gamma gamma 
second observation impose mild condition contains unit clause 
follows choose listing mentioned previous paragraph satisfy additional condition note arbitrary particular impose condition continuous follows 
embed unit interval defining gamman 
compact metric space 
denote subspace consisting elements contain endow subspace topology virtue proposition closed compact element non empty closed subset fact topology subspace coincides induced hausdorff metric determined metric closed subspace vietoris space see 
see invariant set dynamical system sense need usually induced point map belongs iterates enter stay model fixed point means convergent sequences iterates example previous discussion raises question syntactic conditions contraction relative hausdorff metric 
example natural numbers program follows property contraction obvious listing hand numbers program example property 
third final observation suppose partition sub programs definition predicate symbol contained definition predicate symbol set clauses predicate symbol occurs head 
write union sense 
representation thought mapping mapping 
means proposition result 
proposition suppose partitioned 
statements hold 
continuous point iff continuous 
suppose representation contraction relative fitting metric contractivity factor gamman say 
contraction relative contractivity factor maxfc ng 
conversely contraction factor contractivity relative contraction relative contractivity factor continuous fi pn iterated function system fact hyperbolic conditions proposition 
example program example gives rise iterated function system hyperbolic choice level mapping program definition contractivity factor definition contractivity factor determines hyperbolic iterated function system contractivity factor supposing continuous denote set non empty compact subsets endowed hausdorff metric induced metric determined finite level mapping standard way induces map defined ft ag contraction contractivity factor space fractals induced iterated function system fi pn comments suggestive interesting connections computational logic hand dynamical systems 
fact ongoing authors investigate certain notions dynamical systems attractors point view computational logic vice versa 
particular ideas developed view relating edalat context uncertain probabilistic reasoning 
semi strictly level decreasing logic programs section take study class programs defined definition words class locally stratified programs study conducted course current point view attempting answer question main results mentioned concern constructive approach perfect model semantics 
details example showing condition definition necessary convergence sequences iterates 
example take program follows clear semi strictly level decreasing respect level mapping sequence iterates constant iterate value fp sequence trivially converges value fp fixed point note fact continuous case 
example shows course definition provide entirely general answer question continuous case 
matter fact example shows provide sufficient condition convergence sequences iterates stratified example stratified iterates case oscillate sets fq fq levels carefully controlled construction provide sufficient condition convergence fact important point proof lemma 
approach closer spirit 
fact comparisons occasions results 
convenient reader recall notion stratification defined record basic facts notation construction model discussed 
denote normal logic program 
said stratified partition pm conditions hold predicate symbol occurs positively clause definition contained ji 
predicate symbol occurs negatively clause definition contained adopt convention definition predicate symbol occurring contained definition empty 
predicate symbol occurring defined may empty definition particular may empty 
order treat non monotonic operators powers operator mapping complete lattice defined follows 
course equal monotonic 
sequence monotonic increasing 
concept construct minimal supported model stratified program follows put mm pm mm gamma 
mm case arbitrary level mappings commence simple proposition fact proposition 
include proof need certain details 
proposition stratified logic program semi strictly level decreasing 
proof 
pm stratification define level mapping ground atom predicate symbol say defined clear semi strictly level decreasing respect notice level mapping defined proof just general finite take issue 
definition denote normal logic program fl denote level mapping fl 
satisfying fl denote set clauses ground atoms occur 
define 
mapping called immediate consequence operator restricted level idea formalized definition cut level construction semi strictly level decreasing normal logic program fl denote level mapping fl 
construct transfinite sequence fl inductively follows 
put set fl successor ordinal put gamma set fl limit ordinal put put fl main technical lemma need follows 
proof transfinite induction convenient put limit ordinal statement lemma sense ordinals lemma normal logic program semi strictly level decreasing respect level mapping fl fl 
statements hold 
sequence fl monotonic increasing 
fl sequence monotonic increasing 
fl fixed point 
fl particular proof 
immediate construction sequence fl monotonic increasing establishes 
main establishing treat simultaneously 
need note technical fact fl partition denotes subset ground consisting clauses head level note proposition depending ordinal monotonic increasing fixed point suppose holds ff ff fl ordinal 
show ff holds 
holds definite program construction simply classical construction fixed point may assume ff 
convenient break details case ff successor ordinal sequence steps 
case 
ff successor ordinal 
holds 
step 
establish recursion equations immediate 
putting fact fixed point suppose second equations holds 
suffices show suppose 
clause form 
level considerations hypothesis concerning imply inclusion reverse inclusion demonstrated fashion showing second recursion equations holds replaced induction holds step 
inclusions 
inclusions established methods similar just employed omit details 
clear fact recursion equations step ff monotonic increasing monotonic increasing sequences converge union see proposition iterate follows observation model step 
iff clear recursion equations step hand equally clear recursion equations level considerations required 
step 
supported model see suppose 
clause level decreasing 
see recursion equations result step deduce obvious belongs obtain 
supported model fixed point required 
ff holds ff successor ordinal 
case 
ff limit ordinal 
case trivial ff monotonic increasing show ff fixed point ff supported model ff show ff model ff ff ff 
clause ff ff ff definition ff hypothesis concerning ff clause belongs sequence fl monotone increasing ff ff ff choosing induction hypothesis ff ff ff ff required 
see ff supported ff monotonicity fl identity ff ff successor ordinal ff 
particular gamma 
consequently clause gamma ff gamma belongs gamma step previous case 
step belongs iterating see belongs belongs ff ff ff ff words ff ff ff required 
follows holds ordinals completes proof 
particular see recursion equations obtained step hold ordinals record fact corollary 
needed establish equations fact fixed point note proof just shows fixed point turn lemma follows observation iterating step 
proof lemma complete 
seen seen importance control gives negation manner illustrated proof just supported model worth noting construction produces monotonic increasing sequence means non monotonic operator lemma plays role similar played lemma 
corollary suppose hypotheses lemma hold 
ordinals recursion equations fact strictly level decreasing ordinal iterates stabilize step 
proof 
holds noted proof lemma 
suffices prove 
suppose 
clause 
statements level considerations 
reverse inclusion established similarly complete proof 
statement corollary calculation iterates easy perform case strictly level decreasing programs illustration example 
theorem suppose normal logic program semi strictly respect level mapping fl 
minimal supported model proof 
supported model follows proof lemma remains show minimal 
establish transfinite induction proposition fl clearly suffices 
model noted proving lemma model construction definite 
proposition holds 
assume proposition holds ordinals ff ordinal ff fl ff show holds ff 
case 
ff successor ordinal 
show induction suppose 

clause applying lemma see belongs consequently belongs assumption obtain required complete proof case 
case 
ff limit ordinal 
case ff ff ff hypothesis 
ff required 
result follows transfinite induction 
definition due przymusinski 
definition suppose locally stratified normal logic program denote associated level mapping 
distinct models say preferable ground atom ground atom 
say model perfect models preferable notice requirement dual requirement relative priority relation defined 
theorem suppose normal logic program semi strictly respect level mapping fl fl countable ordinal 
perfect model perfect model proof 
suppose model preferable distinct derive contradiction 
note non empty inclusion forces equality minimal model distinct 
means ground atom chosen minimum value ground atom nn corresponding accordance definition satisfies 
note model model implies model definite program chosen minimal 
limit ordinal conclude nn contrary choice successor ordinal chosen 
consequently gamma showing clause property gamma gamma gamma see belong lemma 
belong choice numbers belonging pn fact model leads contrary satisfying 
chosen smallest level contradiction 
contradiction shows perfect model required 
statement theorem concerning uniqueness follows theorem proof complete 
shown perfect models independent local stratification result 
corollary normal logic program semi strictly level decreasing respect level mappings corresponding models equal 
follows theorem theorem coincides model stratified 
sake completeness proof fact methods established far 
convenient introduce concept mapping fact defined inductively follows 
theorem stratified normal logic program level mapping defined proof proposition 
proof 
usual take stratification pm show induction mm clearly mm required 
definition level mapping currently conventions regarding stratification note equalities ground gamma ground hold defined proof lemma 
ground definite empty immediate suppose 

suppose 
clear 
reverse inclusion note hypotheses suffices show words set equal recursion equations corollary inclusion want follows monotonicity sets relative conclude 
previous paragraph 

obtain induction equality equality required 
details induction proof just establish proposition 
proposition pm stratified normal logic program 
gamma 
example consider program example 
noted sequence iterates converge program stratified strata fq fp 
straightforward computation definitions earlier connection stratified programs shows fq fq hand level mapping proof proposition case defined ground terms turns fq fq straightforward computations show equals fq fq accordance theorem 
consider program program stratified semi strictly level decreasing respect level mapping fact set fq ng 
part corollary applies sub program consisting set definition remove clause 
observation simplifies computation fact set fp multiple 
note arbitrary normal logic program stratified denote defined earlier 
lemma model apply numbers program example stratified 
set model fixed point course set fp ng numbers clearly ae example stratified set fp ng 
fixed point minimal ae partition strata fq fp defined earlier 
set fp fixed point ae ae 
example removing clause obtain set fp ng set fp 
sets models fixed point minimal model 
fixed point set fp multiple 
course uniqueness fixed point just noted consequence fact fact strictly level decreasing respect obvious level mapping 
case finite level mappings seen example sets defined construction need finite true stratified 
question arises possible find sequence finite sets possibly iterates converges particular question prompted prolog program written hitzler order calculate iterates sequences approximations provided partial motivation study 
finish briefly record facts show answer questions affirmative semi strictly level decreasing respect finite level mapping stratified pm say 
construction order ease notation write place construction construct sequence follows definite finite sequence monotonic increasing eventually constant value say 
ii lemma see sequence monotonic increasing gamma 
eventually constant value say finiteness 
put proof theorem may 
theorem normal logic program stratified semi strictly level decreasing respect finite level mapping sequence defined construction converges close comparing complexities different approaches discussed level mappings 
strictly level decreasing programs suffices compute sequence obtain unique supported model program single limit involved 
ii construction programs stratified semi strictly level decreasing respect finite level mapping requires compute single sequence 
member sequence obtained finite computation 
single limit required case 
iii approach apt blair walker construction case stratified programs requires computation limits finitely sequences 
iv construction semi strictly level decreasing programs involves computation limit sequence obtained constructing sequence limit 
case countably limits computed 
program semi strictly level decreasing respect finite level mapping sequence stabilizes finitely steps single limit needs computed 
apt blair walker theory declarative knowledge 
jack minker ed foundations deductive databases logic programming 
morgan kaufmann publishers los altos pp 

apt pedreschi reasoning termination pure prolog programs information computation 
convergence issues fixed points non monotone maps 
lusk overbeek eds proceedings north american conference logic programming 
mit press pp 

fixpoint techniques non monotone maps 
kirchner eds proceedings second international conference algebraic logic programming nancy france 
lecture notes computer science vol 
springer verlag pp 

bezem characterizing termination logic programs level mappings 
lusk overbeek eds proceedings north american conference logic programming 
mit press pp 

edalat dynamical systems measures fractals domain theory information computation 
fitting logic programming semantics compact data structure 
ras eds proceedings acm sigart international symposium methodologies intelligent systems pp 

fitting metric methods examples theorem logic programming 
hitzler approximation von programme informatik universitat tubingen 
hitzler topology logic programming semantics diplomarbeit mathematik universitat tubingen 
new method proving existence answer sets disjunctive logic programs metric fixed point theorem multi valued mappings 
proceedings workshop logic programming incomplete information vancouver canada october pp 

obtainable technical report ftp department computer science university texas el paso 
lloyd foundations logic programming 
springer verlag nd edition berlin 
maher equivalences logic programs 
jack minker ed foundations deductive databases logic programming 
morgan kaufmann publishers los altos pp 

fixed points combs generalized power series abh 
math 
sem 
univ hamburg 
ultrametric spaces logic programming 
preprint october pp 

przymusinski declarative semantics deductive databases logic programs 
jack minker ed foundations deductive databases logic programming 
morgan kaufmann publishers los altos pp 

przymusinski founded stationary models logic programs annals mathematics artificial intelligence 
przymusinski semantics normal disjunctive logic programs unifying framework 
proceedings workshop non monotonic extensions logic programming th international logic programming conference iclp santa margherita ligure italy june 
springer verlag pp 

seda topology semantics logic programs fundamenta informaticae 
seda quasi metrics semantics logic programs fundamenta informaticae 
seda hitzler strictly level decreasing logic programs 
preprint february pp 

smyth totally bounded spaces compact ordered spaces domains computation 
reed roscoe wachter eds topology category theory computer science 
oxford university press pp 

hansen lindstrom mathematical theory domains 
cambridge tracts theoretical computer science cambridge university press cambridge 
van gelder negation failure tight derivations general logic programs 
jack minker ed foundations deductive databases logic programming 
morgan kaufmann publishers los altos pp 


