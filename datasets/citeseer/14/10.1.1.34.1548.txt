nas parallel benchmarks david bailey tim harris william rob van der alex woo maurice report nas december describe set implementations nas parallel benchmarks fortran mpi message passing standard 
implementations intended run little tuning approximate performance typical user expect portable parallel program distributed memory computer 
complement replace original nas parallel benchmarks 
additions original pencil specification 
define class sizes benchmarks better suit current generation supercomputers 
second introduce changes reporting requirements nas parallel benchmark results 
nasa ames research center moffett field ca 
supported nasa contract nas 
supported nasa contract nas 
sterling software palo alto california 
supported nasa contract nas 
contents nas parallel benchmarks source code implementations npb programming model architecture performance considerations benchmark descriptions kernel benchmark ft kernel benchmark mg application benchmark lu application benchmarks sp bt benchmark rules benchmarking technique source distribution class benchmarks new rules reporting npb results discussion explanation makefiles run procedures edit configuration file making executable making set executables mpi dummy library sample scripts results information numerical aerodynamic simulation nas program located research center pathfinder high performance computing nasa focusing computational fluid dynamics related disciplines 
key goal nas program demonstrate millennium operational computing system capable simulating hours entire aerospace vehicle system mission life cycle 
solve full multidisciplinary problem requires system perform scientific computations sustained rate orders magnitude faster current supercomputers 
expect computer system employ hundreds thousands powerful processors operating concurrently 
measure objectively performance highly parallel computers compare performance conventional supercomputers nas developed nas parallel benchmarks npb 
benchmarks derived computational fluid dynamics codes gained wide acceptance standard indicator supercomputer performance 
pencil design npb acknowledged fundamental barriers portability parallel computers 
nas parallel benchmarks continue provide important measure parallel performance number weaknesses evident release 
implementations nas benchmarks usually highly tuned computer vendors performance implementations difficult scientific programmers obtain 
tuned implementations generally proprietary publicly available techniques vendors obtain high performance remain hidden 
sign age npb largest problems class longer reflect largest problems done day supercomputers 
current introduce ffl source code versions benchmarks intended run little tuning 
supplement replace npb 
ffl class sizes benchmarks 
ffl new reporting requirements npb results 
bulk report concerns new source code implementations 
note npb effort distinct nas high speed processor hsp benchmarks 
hsp benchmarks evaluating production supercomputers nas organization npb study highly parallel processor systems general 
nas parallel benchmarks npb consists benchmark problems derived important classes applications 
problems consist kernels simulated computational fluid dynamics cfd applications 
kernels mimic computational core numerical methods cfd applications 
simulated cfd applications reproduce data movement computation full cfd codes require effort implement kernels 
detailed description specification npb see technical report 
benchmarks unique pencil specification vendors implement detailed specifications npb report algorithms programming models appropriate different machines 
framework fortran fortran hpf implementors free language constructs data structures data partitioning algorithmic details maximize performance particular system 
freedom performance npb vendors devoted extensive effort optimizing implementations 
source code implementations generally proprietary implementations documented publicly available reports 
results submitted vendors summarized periodically updated nas technical report 
nas provided implementations npb portable optimized 
implementations intended starting point optimized implementations 
source code implementations npb time npb developed wide diversity architectures programming models impossible write portable parallel benchmark implementations 
instance possible write single program give meaningful results cm simd computer programmed data parallel language ipsc mimd machine programmed message passing 
important barriers portability exist emerging standardization parallel computing feasible consider benchmarks specified source code 
software side industry standard message passing library mpi standard data parallel programming language hpf 
hardware side convergence parallel architectures mimd computers commodity processors cache memory systems composed single processor smp nodes 
motivations introducing source code versions nas parallel benchmarks 
npb gives reasonable measure rela tive performance playing field leveled uniformity pre sales marketing departments aggressively optimized hardware specific implementations 
npb poorer indication realworld performance 
codes run nas highly tuned specific architecture execute increasing number written portability mind especially environment rapid machine turnover 
written untuned benchmark codes may give better indication performance new portable codes 
comparison source code benchmarks npb results may indicate performance improved careful tuning 
npb primarily source code release subset original benchmarks 
interim release eventually npb contain new benchmarks 
npb benchmarks implemented fortran common extensions part fortran 
mpi communication run processor dummy mpi library performs negligible 
anumber npb produced research projects 
distinguishes npb publicly available source code implementations npb 
npb codes designed benchmarks byproduct related research project 
carefully coded modern algorithms avoid unnecessary computation generally represent real world codes 
perform reasonably platforms 
npb implementations including npb implementations nas perform poorly don predict performance written production applications meaningfully compared vendors optimized npb implementations 
second npb implementations utilize mpi believe essential component standard parallel benchmarks 
distinguishes npb non npb source code parallel benchmarks 
primary advantage npb suite known npb results readily compared vendor optimized npb results 
additionally npb codes relatively small quite portable 
npb includes original benchmark problems ft mg lu sp bt 
benchmarks implemented considered important manpower limitations 
ft contains computational kernel dimensional fft spectral method 
mg uses multigrid method compute solution dimensional scalar poisson equation 
lu simulated cfd application uses symmetric successive relaxation solve block lower triangular block upper triangular system equations resulting implicit finite difference discretization navier stokes equations dimensions 
sp bt simulated cfd applications solve systems equations resulting approximately factored implicit discretization navier stokes equations 
bt code solves block tridiagonal systems blocks sp code solves scalar systems resulting full diagonalization approximately factored scheme 
details implementations described section 
npb source code benchmarks intended run little tuning see appendix 
nas collect results see appendix report npb results 
programming model types programs portable wide range distributed memory machines message passing programs mpi message passing interface pvm parallel virtual machine data parallel programs hpf high performance fortran 
chose mpi available wide machines nas industry standard designed generally achieves high performance 
nas believes mpi de facto standard message passing library 
pvm popular appropriate npb 
undergoes major changes frequently vendors rarely optimized implementations latest version codes require revision conform 
pvm designed high performance appropriate loosely coupled dynamic fault tolerant applications represented npb 
hpf appropriate current hpf compilers maturing making development difficult performance analysis problematic 
hope release hpf implementations part npb 
common programming model consider automatic compiler parallelization fortran targeting shared memory architectures 
consider model appropriate non shared memory computers standard programming interface compiler directives 
benchmarks implemented mpi intended test mpi 
holistic benchmarks designed measure performance complex system mpi part 
gaining popularity scientific programming fortran overwhelming choice nas 
chose implement fortran common extensions 
include long variable names include statement enddo constructs similar extensions 
fortran forward looking choice performance issues current compilers full blown fortran implementation infeasible 
architecture performance considerations npb source code benchmarks run mimd parallel computer supporting fortran mpi 
complete portability combined maximum performance impossible goal 
discuss architectural considerations performance tradeoffs 
target distributed memory mimd computers primarily portability 
codes run efficiently distributed memory systems able run shared memory architecture 
converse necessarily true 
inherent scalability issues shared memory architectures high supercomputing address problems distributed memory foreseeable 
portability concern node level 
highly parallel supercomputers risc risc processors cache hierarchical memory systems utilize cache effectively benchmarks generally access data stride 
optimized long vector lengths interleaved memory systems 
benchmarks optimized 
loop unrolling careful ordering operations utilize efficiently specific instruction set 
benchmark descriptions npb implementations contain features 
self verification contained code determine run completed correct results 
timing performed npb specifications 
possible code run time step reinitialized timing begins 
purpose apparently gratuitous iteration eliminate startup costs associated demand paging cache loading making sure code data touched 
real application may run longer npb startup costs amortized long period time 
mflop rates estimated code 
estimates actual operation counts compiler optimizations pixie sgi challenge cray research 
operation counts apply npb implementations npb implementations different counts inferred original npb report 
original report contained mflop rates operation counts measured specific cri mp implementations 
original numbers derive mflop rates npb npb implementations 
see www netlib org benchmark top ps 
benchmarks compiled specific grid size number processors 
codes run successfully larger number processors smaller grid specified compile time memory access behavior may different code compiled explicitly size number processors 
reproducibility important goal benchmark npb results valid configurations identical specified compile time 
instance mg benchmark compiled class processors run successfully processors processor result included npb database 
kernel benchmark ft implementation fft pde benchmark follows fairly standard scheme 
array data distributed planes array planes stored processor 
forward fft performed multiple ffts dimension dimensions done entirely single processor interprocessor communication 
array transposition performed amounts exchange processor send parts data processor 
final set ffts performed 
conventional transpose scheme complex ffts 
procedure reversed inverse ffts 
ft runs power number processors 
kernel benchmark mg multigrid benchmark nx implementation 
critical subroutines smoother residual calculation resid residual projection trilinear interpolation correction interp optimized vector risc processors 
code requires power number processors 
partitioning grid processors occurs grid successively halved starting dimension dimension dimension repeating power processors assigned 
application benchmark lu lu benchmark nx implementation 
code requires power number processors 
partitioning grid processors occurs halving grid repeatedly dimensions alternately power processors assigned resulting vertical pencil grid partitions individual processors 
ordering point operations constituting procedure proceeds diagonals progressively sweep corner plane opposite corner plane proceeding plane 
communication partition boundary data occurs completion computation diagonals contact adjacent partition 
constitutes diagonal pipelining method called wavefront method authors 
results relatively large number small communications words 
described algorithm optimal application hand retained benchmark sensitive communication performance mpi implementation 
benchmark npb suite sends large numbers small byte messages 
application benchmarks sp bt sp bt algorithms similar structure solves sets uncoupled systems equations direction 
systems scalar sp code block tridiagonal blocks bt code 
npb implementations sp bt solve systems multi partition scheme 
chose multi partition approach provides load balance uses coarse grained communication 
common partitioning strategies considered uni partitioning combined pipelined gaussian elimination dynamic block cartesian decomposition 
pipelined gaussian elimination asymptotically better scaling properties large numbers processors forces tradeoff load balance communication granularity 
dynamic block cartesian decomposition requires transpose step making appropriate extremely high bandwidth networks 
strategies compared 
multi partition algorithm processor responsible disjoint sub blocks points cells grid 
cells arranged direction line solve phase cells belonging certain processor evenly distributed direction solution 
allows processor perform useful line solve forced wait partial solution line processor 
additionally information cell sent processor sections linear equation systems handled cell solved 
granularity communications kept large fewer messages sent 
sp bt codes require square number processors 
codes written parallel platform permits power number processors assigned job unneeded processors deemed inactive ignored computation counted determining mflop rates 
benchmark rules nas organization report original npb results npb results 
npb results reported forms deck source code changed required code run lines source code modified 
white space changes counted 
lines source code modified 
qualify modification submitter modify replace makefile build scripts provided nas distribution 
source compiled different compiler options different compilers 
fortran code modified 
automatic preprocessors convert output fortran allowed 
reporting result please report highest level optimization routines compiled level optimization 
nas accept submissions greater modifications 
submissions follow rules npb non vendor submissions reported npb results 
fraction modification number changed lines divided total number lines original source 
number changed lines defined file number lines produced comparing original new versions number lines file original version exist 
instance csh script print total number lines changed file foreach incl orig wc 
nas judgment determine modifications barely exceed intent minor modification criteria 
nas requests output files source code changed auxiliary files building changed 
publicly available 
necessary enable results reproduced 
nas organization reserves right verify npb results submitted 
may attempt run submitter code system configuration submitter 
instances unable reproduce vendor supplied results allowing tolerance policy alert submitter discrepancy allow submitter resolve discrepancy release information 
discrepancy resolved satisfaction observed results nas explicitly named submitter submitter results reported 
policy apply results nas receives publishes 
npb deck nas organization entertain numbers sources procedure similar linpack benchmark 
numbers submitter include hardware specification operating system compiler version numbers exact compiler flags produce 
addition vendor include cost dollars benchmarked computer system order nas compute sustained performance dollar 
costs include associated software costs operating systems compilers scientific libraries substantially hardware required benchmarks 
non vendors submissions required include cost 
nas organization verify 
modification nas requires addition output files modified source code makefiles run scripts 
nas maintain www page periodic series technical reports results benchmarks 
nas mpi implementation freely available encourages vendors allow nas distribute technical reports nas benchmark implementations source code 
addition effort incorporate numbers graphical www pages 
benchmarking technique benchmarks measure wall clock time statically load balanced tightly synchronized run completely dedicated systems system processes possible 
failure may cause timing results error 
source distribution nas received allows unlimited world wide distribution nas parallel benchmarks 
see www nas nasa gov nas npb 
class benchmarks specifications npb computer speed memory sizes grown correspondingly representative problem sizes 
computational applications routinely millions grid points 
npb specifies problem sizes benchmark class larger class 
class benchmarks run moderately powerful workstation class benchmarks high workstations small parallel systems 
retain focus high supercomputing add class nas benchmarks 
class problem sizes table 
iteration counts validation tolerances class mg class class smoothing operator 
validation numbers codes part npb included npb implementations 
complete explanation manner computed values calculated agreement tolerances classes see 
benchmark code class class class embarrassingly parallel ep multigrid mg conjugate gradient cg fft pde ft theta theta integer sort lu solver lu solver sp block tridiagonal solver bt table nas parallel benchmarks problem sizes new rules reporting npb results npb results exceptions proprietary implementations benchmarks 
nas reported performance results allowed release proprietary codes 
vendors reluctant release source code 
respect right vendors keep codes confidential longer believe serves interests high performance computing hpc community remain proprietary 
algorithms needed write efficient implementations nas parallel benchmarks known understood 
balance right confidentiality needs hpc community adopted policy npb results 
vendors encouraged source code publicly available 
nas place publicly available source code world wide web www 
vendor wish source code publicly available nas require technical report describing implementations publicly available 
nas report available www 
policy applies npb results submitted supercomputing prerequisite inclusion periodic nas report 
nas encourages vendors release source code soon possible 
discussion npb release source portable nas parallel benchmarks 
final benchmarks released time year 
track performance differences fortran popular languages notably hpf parallel nas results portable implementations nas parallel benchmarks languages 
nas parallel benchmarks designed reflect computational fluid dynamics applications run nas 
years additional algorithms classes applications run nas 
nas intends release additional benchmarks represent current trends computations nasa 
particular new benchmarks stress load balancing new systems 
acknowledgment authors acknowledge original group nas researchers designed wrote nx implementations benchmark codes current ones derived 
numerical aerodynamic simulation program plan 
nas systems division ames research center october 
message passing interface forum mpi message passing interface standard version july www mcs anl gov mpi mpi report 
mpi report html 
high performance fortran forum high performance fortran hpf language specification version 
center research parallel computing rice university houston tx january www erc edu home html 
geist beguelin dongarra jiang sunderam pvm parallel virtual machine users guide tutorial networked parallel computing mit press scientific engineering computation ed 

www ornl gov pvm pvm home html 
bailey barton browning carter dagum frederickson schreiber simon nas parallel benchmarks international journal supercomputer applications vol 
fall pp 

bailey barton simon eds nas parallel benchmarks nasa technical memorandum nasa ames research center moffett field ca july www nas nasa gov nas npb 
wang lung domain decomposition multigrid nas parallel benchmark fujitsu vpp proceedings seventh siam conference parallel processing scientific computing bailey editors 
agarwal alpern carter lawrence high performance parallel implementations nas kernel benchmarks ibm sp ibm systems journal vol 

scalable implementation nas parallel benchmark bt distributed memory systems ibm systems journal vol 

bailey dagum simon nas parallel benchmarks results technical report nas research center moffett field ca october 
bailey nas parallel benchmarks results technical report nas nasa ames research center moffett field ca april 
bailey nas parallel benchmarks results technical report nas nasa ames research center moffett field ca october 
lewis van de distributed memory matrix vector multiplication conjugate gradient algorithms supercomputing acm 
bader ja ja practical parallel algorithms dynamic data redistribution median finding selection institute advanced computer studies umiacs univ maryland cs tr july 
ftp ftp cs umd edu pub papers papers ps efficiency evaluation parallelization tools workstation cluster nas parallel benchmarks vienna univ technology 
white sunderam performance nas parallel benchmarks pvm networks nasa ames research center rnr may 
www nas nasa gov nas reports rnr rnr html 
performance evaluation distributed computing environments scientific applications supercomputing ieee 
ferrari martin viswanathan nas parallel benchmark kernels mpl dept computer science univ virginia cs sept 
dongarra top supercomputer sites rum nov 
bruno implementing beam warming method hypercube 
proceedings rd conference hypercube concurrent computers applications pasadena ca jan 
parallelization class implicit finite difference schemes computational fluid dynamics international journal high speed computing vol 
pp 
shah implementing nas parallel benchmarks ksr parallel cfd 
foster role computational balance implementation nas parallel benchmarks bbn tc computer submitted concurrency april 
sakai nas parallel benchmarks parallel computational fluid dynamics cfd kyoto may 
sur bohm sorting implicitly parallel programming environment nas benchmark monsoon high performance functional computing proceedings ed 
bohm feo april 
hayashi doi shimizu ap architectural support parallelizing compilers transactions information processing society japan vol 
july 
gibson nas parallel conjugate gradient benchmark cray src tr supercomputing research center md jan 
van der efficient implementation dimensional adi method ipsc 
supercomputing portland november ieee press 
hey graphical benchmark information service scientific programming vol 
hpcc soton ac uk new top html 
simon amdahl law statistical content nas parallel benchmarks supercomputing nov 
solution regular sparse triangular linear systems vector distributed memory multiprocessors technical report nas rnr nasa ames research center moffett field ca april 
explanation makefiles run procedures authors codes makefiles attempted create environment allows user generate executables obtain benchmark numbers little effort 
basic file structure environment unix npb config configurations files edited chosen npb sys utility programs environment npb bin location executables npb ft ft benchmark source npb mg mg source npb lu lu cfd source npb bt bt cfd source npb sp sp cfd source npb mpi dummy dummy mpi library smp single node runs npb samples sample pbs interactive scripts edit configuration file edit site machine specific data config def 
sample versions included directory may able copy 
clean version config def template 
sample def files config directory 
sample intel paragon running osf site specific definitions 
defined mpi lib arguments required linking mpi programs mpi arguments required compiling mpi programs fortran compiler load loader fflags compilation arguments loader arguments destination directory executables compilations done mpi fflags fflags linking done load mpi lib flags double precision data bits particular need dp cray mpi mpich lib paragon ch nx load mpi mpich lib paragon ch nx mpi lib app mpi mpich lib paragon ch nx mpi app mpi mpich include fflags nx cc cc bin variables set correctly architectures 
need set compiler flags change size fortran data types integer double precision double complex default sizes changed mpi send wrong amount data 
need tell mpi builtin data types send resized data 
instance dp cray demote double precision data bits dp type mpi real standard bit real type 
dp type correct mpi type send double precision data integer type correct mpi type send integer data dc type correct mpi type send double complex data dp type mpi double precision integer type mpi integer dc type mpi double complex compile load strings defined def included npb sys appear output benchmark runs 
making executable benchmark comes sizes classes ample 
fortran doesn dynamic memory allocation class number processes specified compile time 
benchmarks ft mg lu run power number processes 
sp bt run square number processes 
compile benchmark specific class number processes type benchmark name class instance create class version sp benchmark runs processes type sp class specify illegal number processes benchmark unknown class compilation aborts 
executable placed subdirectory bin distribution directory specified def defined 
name executable benchmark name class sp 
making set executables procedure item allows build benchmark time 
build suite type suite look file config suite def list executables build 
file contains line specification comments preceded 
line contains name benchmark class number processors separated spaces tabs 
instance file contain sample suite file build executables sp sp sp ft ft ft config directory contains sample suites 
mpi dummy library benchmarks designed run single processor mpi library desired 
dummy mpi routines required linking 
convenience library supplied mpi dummy subdirectory distribution 
contains include file 
typing mpi dummy directory build dummy library modify def dummy library include file 
far complete implementation mpi contains routines needed npb benchmarks 
copies reduce routines library exit communication attempted 
sample scripts sample scripts provided run executables interactively submit batch job pbs batch job 
instance simple script email user job run class ft benchmark nodes paragon 
mb cd home npb bin date ft plk sz ft date field type size key optional 
hardware key string primary key null manufacturer string null machine type string null model string cpu string cpu clock mhz int cache kb int cache kb int cache kb int min memory mb int disk string interconnect type string cost dollars real hardware string comments string table table name hardware results nas requests receive output files changed source makefiles scripts generate 
database created repository npb results 
format consists sql tables hardware software submitter result 
result table benchmark possibly software submitter entry hardware table 
unique keys provided result table link tables 
examples illustrated 
output files nas create sql input results table 
submitter include information tables 
entries marked null completed 
addition www server submit results accessible npb web page mentioned 
nas reserves right review submissions inclusion sql database 
field type size key optional 
software key string primary key null operating system string null os version string compiler name string compiler version string compiler switches string mpi name string mpi version string comment string table table name software field type size key optional 
submitter key string primary key null name string null organization string null email string null telephone string date sent string table table name submitter field type size key optional 
hardware key string software key string submitter key string benchmark string null version real null percent modified int patch level string problem size string null number nodes int null time secs real null mflop real null date benchmarked string null comments string table table name result information nas maintain mailing lists web page concerning benchmarks 
permission copy distribute modify software purpose fee granted 
request derived nas parallel benchmarks 
software provided express implied warranty 
information npb including technical report original specifications source code results information submit new results available www nas nasa gov nas npb send comments suggestions npb nas nasa gov send bug reports npb bugs nas nasa gov nas parallel benchmarks group nasa ames research center mail moffett field ca fax mail npb nas nasa gov 
