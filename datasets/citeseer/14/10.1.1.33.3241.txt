discovering active motifs sets related protein sequences classification jason wang thomas marr dennis shasha bruce shapiro gung wei chirn april describe method discovering active motifs set related protein sequences 
method automatic step process find candidate motifs small sample sequences test motifs approximately sequences 
reduce running time develop optimization heuristics statistical estimation pattern matching techniques 
experimental results obtained running algorithms generated data functionally related proteins demonstrate performance method compared visual method farrell leopold 
combining discovered motifs existing fingerprint technique develop protein classifier 
apply classifier groups related proteins prosite catalog gives information complementary blocks protein classifier henikoff henikoff 
classifier conjunction theirs obtain high confidence classifications blocks classifier agree suggest new hypothesis disagree 
department computer information science new jersey institute technology newark nj 
cold spring harbor laboratory road cold spring harbor ny 
courant institute mathematical sciences new york university mercer street new york ny 
image processing section laboratory mathematical biology division cancer biology diagnosis national cancer institute national institutes health frederick md 
department computer information science new jersey institute technology newark nj 
finding patterns conserved amino acid residues sets sequences important problem computational biology particularly study functionally related proteins 
approaches general problem finding sequence motifs range development special purpose programs local similarities search programs multiple sequence alignment programs 
presents new approach discovering commonly occurring active motifs set related protein sequences 
structures motifs wish discover regular expressions form 
segments sequence subsequences consecutive letters represents variable length don care vldc 
matching expression sequence may substitute zero letters example consider set sequences 

set sequences 
suppose exactly coinciding segments occurring sequences having lengths greater considered active 
contains active motif segment sequence xth letter 
motifs occurring sequences mutation considered active mismatch insertion deletion allowed matching motif sequence contains active motifs suppose motifs occurring sequences zero mutation having form total length greater considered active 
contains active motifs sed nrl sed nrl example discover active motifs set sequences strategy find candidate segments small sample sed example combine segments candidate motifs example check entire set 
number previous techniques may locate active motifs 
techniques approaches multiple alignment sequences ii search local similar segments similarities set 
approach useful entire sequences set similar 
sequences short regions local similarities approach inapplicable 
published algorithms second approach effectively similar segments meet constraints occur predetermined number sequences set differ mismatches insertions deletions situated distance start sequences 
contrast algorithms method find active motifs composed nonconsecutive segments separated variable length don cares prior knowledge structures positions occurrence frequency 
implemented proposed method system called discover 
combining method previously published fingerprint technique developed protein classifier called classify 
applied classify groups related proteins documented prosite catalog 
blocks database henikoff henikoff terms number correct classifications assuming classifications prosite correct misclassifies different sequences 
classify conjunction blocks database gives high confidence classification agree suggests new family examine disagree 
methods discover classify systems discover takes set related proteins produces collection active motifs set 
classify accepts query protein displays prosite group protein belong 
systems executed manually user specified parameters automatically parameters determined systems 
programs written programming language compiled ibm compatible personal computers dos version dec systems dec ultrix version sun sparc workstations sparc unix version 
dos dec ultrix versions available floppy disk request 
sparc unix version accessible electronic mail 
proper server send word help subject line discover classify cis njit edu 
receive satisfactory response please contact directly jason cis njit edu shasha cs nyu edu 
terminology set sequences 
occurrence number activity motif number sequences match motif allowed number mutations 
say occurrence number motif respect mutation set denoted occurrence matches sequences mutations sequences contain mutations 
example occurrence occurrence occurrence occurrence occurrence occurrence occurrence 
set discover find active motifs allowed mut mutations occur sequences jp length jp represents number non vldc letters motif 
mut occur length form user specified parameters 
basic subroutine discover match motif sequence optimal substitution motif 
example matching motif sequence asterisk substitute second asterisk substitute 
motif mutation sequence deleted 
length motif 
discovery algorithm algorithm consists phases find candidate segments small sample sequences combine segments form candidate motifs evaluate activity motifs determine motifs satisfy specified requirements 
phase consists 
subphase construct generalized suffix tree gst sample sequences 
suffix tree trie data structure compactly represents string collapsing series nodes having child single node parent edge associated string 
gst extension suffix tree designed representing set strings 
suffix string represented leaf gst 
leaf associated index subtree subtree rooted non leaf node count represent number different indexes associated leaves subtree 
edges labeled character strings concatenation edge labels path root leaf index suffix ith string set 
see example node labeled leaf regular expression motif sequence determine mut mutations mut theta jsj time jp log jsj 
example result collapsing 
gst constructed asymptotically time space total length sequences sample subphase traverse gst constructed subphase find segments prefixes strings labeled root leaf paths satisfy length minimum 
pattern specified user form length minimum simply specified minimum length pattern 
pattern specified user form find segments larger equal half specified length sum lengths satisfies length requirement 
user specified pattern form find segments larger equal kth specified length sum lengths segments satisfies length requirement 
rr rr frr rr rrm rm rm rr trm 
gst sample 
leaves represented rectangles labeled indexes 
non leaf nodes represented circles labeled count values 
suffix corresponding leaf shown leaf 
note suffixes rm appear strings appear twice leaves 
phase 
subphase evaluate activity candidate motifs rank highest lowest occurrence numbers sample respect mutation mut 
interesting motifs form consider possible combinations segments obtained phase meet length requirement match sequences sample 
subphase evaluates candidate motifs subphase respect entire set 
optimization heuristics phase discovery algorithm compare candidate motifs entire set 
main question optimization point view candidates compare 
strategy follows 
experimental results show screening candidate motifs subphase saves significant time computation 
simple random sampling replacement select sample sequences set 
consider candidate motif respectively denote number sequences entire set sample respectively contain allowed number mutations 
set size sample size probability interval fl fu fl gamma gamma gamma gamma fu gamma gamma gamma symbol value normal deviate corresponding desired confidence probability 
probability 
values obtained subphase phase 
estimator fu theta occur candidate motif probability won active motif satisfying specified requirements 
discard 
second optimization heuristic implemented eliminate redundant calculation occurrence numbers 
observe expensive operation discovery algorithm find occurrence number motif respect entire set entails matching motif sequences 
say um subpattern vm subsegment observe motif subpattern motif occurrence occurrence mutation parameter final output set need bother matching sequences 
final output set won occurrence number lower 
illustrate optimization heuristics incorporated discovery algorithm consider finding motifs form total length greater equal 
enumerating segments length generalized suffix tree gst 
string string edge labels root statistical estimator tells combination segment string length segment string yield active motif satisfying specified mut occur requirements eliminate pair string string consideration descendants respectively 
similar pruning operations applied enumerating longer segments gst 
classification algorithm applied discovery algorithm groups related proteins documented prosite catalog keyed swiss prot protein sequence version 
selected sequences group random serve training sample 
processed training sequences ways ffl find characteristic motifs training sample group 
motifs length segments having highest occurrence numbers zero mutations 
ties occurrence numbers respect zero mutations break ties considering occurrence numbers respect mutation 
reduce effect chance motifs associate characteristic motif weight zipf law 
motif occurs groups weight assigned log total number groups case 
ffl hash training sequences gapped fingerprint technique 
classifying query sequence compare characteristic motifs 
comparison group obtains raw score equals sum weights group characteristic motifs occurring raw score group normalized dividing total weight characteristic motifs group multiplying 
highest scoring group displayed result classification provided score greater experimentally determined threshold 
study threshold set 
proceed second phase 
second phase hash hash function training sequences 
group containing sequences highest vote displayed result classification 
sequences highest vote shorter favored 
results performance analysis discovery algorithm carried series experiments evaluate effectiveness measured accuracy respect exhaustive search speed proposed discovery algorithm 
programs written run sun sparc workstation sun operating system version 
data set kinase sequences lengths ranging residues residues 
active motifs interest form metric evaluate effectiveness algorithm hit ratio defined theta number active motifs discovered algorithm 
number active motifs obtained exhaustive search method 
exhaustive search mean selecting candidates combinations segment pairs appearing set satisfy length constraints 
experimental results indicated effectiveness discovery algorithm depends sample size number mutations allowed searching 
example mut discover nearly accurate exhaustive search provided 
represents ratio sample size set size 
mut hit ratio reaches provided 
chose length number motifs give results 
decisions changed easily compile time parameters system 
conceivably generated approximately occurring motifs appear set satisfy mut occur constraints considered super exhaustive approach time consuming dubious value 
compared running times algorithm mut case 
discover runs significantly faster exhaustive search method 
case discover achieves nearly hit ratio times faster exhaustive search 
observed optimization heuristics reduce running time substantially 
speed discovery algorithm factor nearly 
discovery active motifs protein families experiment examined protein families cyclin ras kinase see motifs obtained correspond shown previous studies methods 
cyclin family contained protein sequences lengths ranging residues residues 
ras family contained protein sequences lengths ranging residues residues 
kinase family contained protein sequences lengths ranging residues residues 
tables show motifs form discover occurrence numbers respect mutation protein families respectively 
tables show length motifs top active motifs discovered family 
activity motif family ranked terms occurrence number respect mutation 
occurrence number motifs discover mutation table 
motifs discovered cyclin family 
length motifs top active ones discovered shown table 
sample large segments nearly interesting motif appear sample 
algorithm works enumerating promising segment pairs sample find interesting motifs 
occurrence number motifs discover mutation tag table 
motifs discovered ras family 
length motifs top active ones discovered shown table 
occurrence number motifs discover mutation dfg ell table 
motifs discovered kinase family 
length motifs top active ones discovered shown table 
tables seen shorter motifs tend higher occurrence numbers 
occurrence frequency motifs family dependent 
ras family example active segment appears proteins family 
hand kinase family active segment length appears proteins family 
motifs composed segments appearing protein sequences 
table shows active motifs composed nonconsecutive segments ras family 
motifs composed nonconsecutive occurrence number segments discover mutation table 
occurrence numbers active motifs composed nonconsecutive segments ras family 
worth pointing motifs discovered cyclin ras sequences superset manually farrell leopold 
kinase sequence motifs able detect overlap sequence motifs described 
classification proteins prosite groups experiment examined effectiveness proposed classification algorithm applying groups prosite catalog 
groups comprise proteins 
currently best classifier proteins blocks database developed henikoff henikoff 
algorithm associates group set blocks block comprises ungapped aligned regions extracted sequences group 
classify query sequence blocks matches query blocks displays collection groups ranked relevance query 
contrast blocks selected sequences group random serve training sample processed training sequences finding characteristic motifs hashing described methods section 
checked remaining test sequences classified correctly classify algorithm blocks method 
note experiment favors blocks blocks database built sequences including method treats unknowns 
table summarizes classification results 
test sequence classified correctly blocks respectively classify group ranked highest blocks respectively classify 
table shows results methods agreed highest ranked group returned disagreed rankings 
separate finding experiment test sequences went second phase classification algorithm cf 
methods section 
percentage classification results test sequences blocks correct classify correct blocks classify agreed correct blocks classify agreed wrong blocks classify disagreed blocks correct blocks classify disagreed classify correct blocks classify disagreed wrong table 
comparison classify blocks classifying proteins prosite groups 
note percentages table add 
blocks classify agree classification high likelihood correct 
specifically correct agreed classifications divided total agreed classification 
hand blocks classify disagree likelihood right 
compared tools capability detect distantly related sequences 
specific example looked protein coupled receptor family ac ps swiss prot 
family chosen henikoff henikoff family evaluate effectiveness blocks database 
set sequences family test 
training set 
table shows search results returned classify blocks server displaying blocks getting highest score 
seen sequences classified family tool 
blocks server sequences classified correctly 
highest scoring group block human receptor ta human bl 
swiss prot id group hit classify group hit blocks ul ps bl human ps bl rat ps bl ps bl rat ps bl rat ps bl pig ps bl rat ps bl mouse ps bl ps bl ps bl rat ps bl human ps bl rat ps bl ps bl ta human ps bl table 
comparison classify blocks detecting distantly related sequences protein coupled receptor family ac ps swiss prot 
note blocks data indicate characteristic block protein hit rank 
discussion comparing discover previous algorithms multiple sequence alignment local similarities search principal advantage discover multiple alignment algorithms find short regions local similarities set sequences 
published motif program implemented multiple alignment techniques discover short regions cases amino acid separated fixed number distances fixed length don cares 
motif unable locate similar segments separated variable length don cares 
number published techniques finding local similarities multiple sequences 
queen example gave method searching exact matches sequences special tables 
sobel martinez techniques search exact matches link chains 
bacon anderson showed method able find segments allowing mismatches 
taylor compared sequences aid templates 
krishnan sought similar segments overlapped dot matrices 
methods find weak similarities similar segments contain regions exact match ii differ substitutions insertions deletions iii situated arbitrary positions sequences set 
method find weak similarities set sequences discover published 
considered segment sequence fundamental sequence contains segment similar 
method selects sequence basic searches fundamental segments 
segments common sequences reconstructed fundamental segments basic sequence 
find fundamental segments basic sequence compared successively sequences 
result comparison collection segments basic sequence similar segment sequence 
comparisons fundamental segments basic sequence constructed intersections segments revealed pairwise comparisons 
way find weak similarities set 
discover method locate weak similarities differ significant ways 
technique requires similar segments occur sequences set large portion set 
value parameter known advance 
contrast discover find similar segments prior knowledge occurrence frequency 
second employing algorithm approximate regular expression matching discover find active motifs composed nonconsecutive segments 
third discover uses optimizations suitable set large 
implemented method ran sets sequences similar segments sequences 
lengths sequences ranged letters letters 
data choosing protein sequences ras family random character reader may refer discuss extensions discovery algorithm deal large databases 
generator 
results obtained data consistent 
observed behavior method sensitive choice basic sequence algorithms employed doing pairwise comparison 
example exhaustive search algorithm find weak similarities sequences fixed number say mutations allowed trying sequence basic searching active segments occurring sequences method returned optimal solutions discover 
hand algorithms suggested algorithm score measures character match mismatch deletion sequence method returned fewer similar segments discover choosing sequences basic 
searching similar segments lengths letters mutations allowed method exhaustive search algorithm required minutes average 
hand discover required minutes sequences sample 
comparing classify previous algorithms classifying proteins detecting distant similarities number methods published classifying proteins detecting distant similarities 
common way profile analysis 
contrast method uses frequently occurring ungapped segments fingerprints profiles obtained global multiple alignments including gapped regions 
profile position specific scoring table created aligning group related sequences 
column alignment converted column matrix representing occurrence frequency amino acid 
determining relevance query sequence group compares sequence profiles database 
technique detecting distantly related sequences testing amino acid class covering patterns 
patterns generated clustering pairwise similarity scores set related sequences build binary tree 
tree reduced stepwise manner progressively replacing node connecting similar common pattern single common root pattern remains 
characteristic motifs patterns serve representations related sequences 
approach uses protein groups documented prosite catalog algorithm automates process making groups clustering entire database coverings 
clustering procedure tricky distantly related sequences group prosite catalog may correspond coverings generated method 
published blocks database compared method results section protein groups documented prosite catalog 
group corresponds set blocks obtained ungapped aligned regions discovered motif program 
best set blocks selected heuristic algorithm called 
selected blocks calibrated concatenated database 
blocks classify exploit group information documentation prosite differ fundamental methods 
important blocks built multiple local alignments classify generates characteristic motifs running approximate regular expression matching algorithms 
second group scored single unit system 
typically multiple blocks group scored independently 
third blocks displays list groups ranked relevance query sequence classify shows group sequence belong 
displaying output blocks shows alignment hit block query sequence classify shows characteristic motifs hitting query training sequence highest vote output shown 
displays useful different times 
indicated experimental results system complements standard search classification techniques 
expect systems applications 
example discover may help establish dna protein super families families may closely related active motifs common 
classify algorithm detect sequence member known dna family 
acknowledgments authors anonymous referees editor dr richard roberts encouragement thoughtful suggestions 
henikoff offering programs generate prosite groups amos bairoch providing software information available internet landau udi manber sun wu zhang hints regarding approximate string regular expression matching 
supported part national science foundation iri ccr iri iri office naval research new jersey institute technology foundation 
supported department energy de fg er national institutes health ro hg 
chothia lesk 
mol 
biol 
wilson wells 
biol 
chem 
hunter 
cell 
som bhagwat friedman 
nucleic acids research 
moran donnell brooks 
nucleic acids research 
feng johnson mcclure 
rev biol 
lipton marr welsh 
proceedings ieee 
roberts 
nucleic acids research 
webb herz frank 
nature london 
gribskov mclachlan eisenberg 
proc 
natl 
acad 
sci 
usa 
smith 
proc 
natl 
acad 
sci 
usa 
smith smith 
proc 
natl 
acad 
sci 
usa 
henikoff henikoff 
nucleic acids research 
queen wegman korn 
nucleic acids research 
bacon anderson 
journal molecular biology 
krishnan 
nucleic acids research 
sobel martinez 
nucleic acids research 
taylor 
journal molecular biology 

computer applications biosciences 
johnson 
mol 
evol 
waterman 
nucleic acids research 
lipman altschul kececioglu 
proc 
natl 
acad 
sci 
usa 
argos 
computer applications biosciences 

computer applications biosciences 
califano rigoutsos 
proceedings st international conference intelligent systems molecular biology bethesda md bairoch 
nucleic acids research 
wu manber 
communications acm 
hui 
apostolico crochemore galil manber 
ed combinatorial pattern matching lecture notes computer science springer verlag 
mccreight 
journal acm 
landau vishkin 
journal algorithms 
cochran 
sampling techniques wiley 
bairoch 
nucleic acids research 
zipf 
human behavior principle effort addison wesley reading 
farrell leopold 
cold spring harbor symposia quantitative biology vol 
chapter consensus cyclin sequences reveals homology ras cold spring harbor press cold spring harbor 
hanks quinn hunter 
science 
smith smith 

waterman 
bull 
math 
biol 

nucleic acids research 
wang chirn marr shapiro shasha zhang 
proceedings acm sigmod international conference management data minneapolis minnesota 

nucleic acids research 

meth 

wallace henikoff 
computer applications biosciences 

