constructed product result analysis haskell baker finch university canberra ise canberra edu au kevin glynn university melbourne cs mu oz au simon peyton jones microsoft research cambridge simonpj microsoft com th march compilers ml haskell typically go deal trouble arrange multiple arguments passed eciently procedure 
reason ort invested ensuring multiple results returned eciently 
context lazy functional language haskell describe analysis constructed product result cpr analysis determines function pro return multiple results registers 
analysis function de nition uses separate compilation easily supported results analysis expressed transformation function de nition 
discuss variety design issues addressed implementation give measurements ectiveness approach substantial benchmark set 
price performance ratio bene ts modest general occasionally dramatic costs complexity compile time low 
compiler ml haskell ensure multiple arguments passed function ecient calling convention 
example consider function type int int int function takes pair ints single argument 
programmer may apply existing pair common argument pair constructed call site call looks 
case compiler simply pass arguments registers boxing pair rst transformation called argument attening arity raising common functions return multiple results scheme problem making multi argument functions part language 
int int int reason principle returning multiple results ecient passing multiple arguments registers available practice optimised analysis accompanying program transformation haskell optimises functions return multiple results 
contributions follows show called worker wrapper transformation optimise calling convention function returns product section 
identify surprisingly large set issues arose tried scale original idea real implementation section 
analysis determine helpful function return result unboxed section 
analysis design type actual form function de nition 
give measurements show ectiveness transformation practice section 
main merit approach simplicity 
discuss related section :10.1.1.33.8720
setting lazy functional language haskell 
implemented analysis transformation glasgow haskell compiler ghc state art compiler haskell 
focus haskell analysis equally strict language 
generally surprising compilers go great deal ecient pass parameters procedure equally ecient return results 
show hard 
idea idea embarrassingly simple 
consider function dm int int int int dm div mod practical reason convenient abide architecture standard calling convention usually biased favour arguments 
express fact dm return result pair unboxed 
splitting dm wrapper worker dm int int int int dm case int int int int div mod worker returns unboxed pair write unboxed tuples parentheses types terms 
idea course calling convention function returns unboxed tuple arranges return components registers 
unboxed tuples built type compiler 
wrapper dm serves impedance matcher interface callers expecting call dm worker 
wrapper inlined call site 
call case dm inline dm obtain case case compiler automatically transforms case case result dm immediately case expression quite common 
lost 
simply call looking case 
happened code required allocate result pair moved body dm call site 
body function simple constructor obvious construct body worker 
transformation worker wrapper split regardless form original function 
suppose de nition int int int transformation valid int int int case fw fw int int int fw case general transformation applied function dm described earlier body quickly simpli es form 
worker wrapper bene cial 
worker wrapper transformation described correct necessarily bene cial 
particular worker fw takes apart discards pair returned wrapper reconstruct 
things worse case expression fw certain cancel construction pair certainly situation example dm 
reason 
consider function int int int int xs want return pair unboxed call site need pair boxed form 
unbox uniformly risk repeatedly re constructing pair exists member list 
furthermore unboxing gains pair exists allocation saved 
bottom line want perform worker wrapper transformation result function explicitly constructed product allocated function 
say functions cpr property cpr stands constructed product result 
contrasts called type analyses driven type function treat dm uniformly 
just apply worker wrapper transformation function returns product type 
simple syntactic inspection function body 
alas 
looks 
case clearly allocate return pair need look inside case expressions 
function tail calls function 
construct result explicitly 
worker wrapper split inline wrapper get case hw explicitly construct result 
cpr property 
anticipated done worker wrapper split short need perform little analysis identify functions worker wrapper split desirable 
simple interpretation job nicely describe section 
combining strictness analysis years sort worker wrapper transformation express unboxing function arguments strictness information 
example int int int strict split precisely mean driven existing program types 
interpretation describe course formulated type system 
case fw fw original right hand side discuss details simply note easy single worker wrapper transformation deals simultaneously unboxing arguments results advantage information strictness analysis cpr analysis 
gain making single wrapper pragmatic fundamental equally performed separate worker wrapper transformations simply lead wrappers 
summary unifying idea compiler compilation transformation program transformed succession preserving steps ecient form 
transformations depend ability expose intermediate language concrete aspects target implementation 
particular intermediate language includes unboxed types unboxed integers tuples 
transformational framework cpr analysis works follows perform large number generic transformations including inlining collectively implemented simpli er 
strictness analysis cpr analysis 
information analyses perform worker wrapper transformation 
re apply simpli er inline wrappers call site extra detail call site simplify calls desired form 
worker wrapper transformation entirely local 
non local ects reply fairly aggressive inliner ect propagates local ects worker wrapper transformation non local call sites 
transformations take ect new call sites may show wrapper may inlined long worker wrapper transformation performed 
idea worker wrapper transformation moves just little function computation function de nition call sites 
body original function small case dm probably better inline entire function 
compiler disable worker wrapper split functions small bodies examples small purposes presentation 
worker wrapper approach exposing function optimised calling protocol independently invented goubault called partial inlining 
working details basic idea analysis simple case exercise implementing production compiler showed number unforeseen details 
section describe interactions 
material core contribution bridges gap promising idea real implementation 
data types far focused functions return tuples 
functions return values types 
clear works nicely ned product types 
product type algebraic data type exactly constructor 
example data point mkp int int diag int point diag mkp need new type unboxed points wrapper return unboxed tuple suitable arity ne 
diag case mkp particularly important special case data type single constructor just argument regard unary products 
example ghc int data type de ned data int mkint int int type bit unboxed integers 
example function increments argument expressed int int mkint mkint function machine instruction adds unboxed integers 
function returns boxed int heap just dm returns boxed pair 
worker wrapper transformation gives int int mkint case mkint int int example wrapper unbox argument result section 
result need wrapped unboxed tuple value return int 
extremely common arithmetic functions cpr property performing worker wrapper transformation dramatically improve allocation behaviour numerically intensive programs show 
analogous way ghc uses ordinary algebraic data types albeit unboxed components represent characters oating point numbers single double precision data types usually built treated specially ghc 
rely cpr analysis generic transformations generate code operations basic data types 
recursive types sum types far spoken functions return value product type algebraic data type constructor 
recursive types sum types 
recursive type problem provided product cpr analysis simply top level result value 
type constructor obvious return unboxed 
principle imagine returning tag indicating constructor returned zero elds 
express idea source source transformation introduce unboxed sum types 
entirely possible payo smaller 
returning enumerated value bool require allocation returned value pointer pre existing constant heap 
saving allocation unboxing produce bene ts 
commonly case caller dispatches value returned call preferable return unboxed value dispatch code save memory fetch 
case restrict attention solely product types 
recursive functions consider function int int int function cpr property returns return constructed product 
interpretation calculates value standard way sequence approximations starting 
cpr property treat value having cpr property 
extreme function diverges cpr property vacuously returns 
similarly strictness analysis regards function diverges strict soundly call value diverges evaluating argument 
having decided cpr property worker wrapper transform gives int int int case fw fw int int int fw case de nition fw rapidly simpli es fw case recall wrapper inlined call sites including call sites worker 
inline inside fw simplify get outcome sought fw just result hoped worker simple tight loop wrapper serves external callers 
dealing exceptions consider function chr int char chr mkint error bad arg chr function error prints message brings execution halt semantically value just 
chr cpr property 
clearly 
returns certainly returns constructed product matters 
performing cpr analysis treat call error built function having cpr property 
entirely compatible treatment recursion previous section agreed value cpr property 
done dressed versions error automatically value cpr property 
example panic string panic msg error panic msg advantage error values way turns important practice 
signi cant minority functions error case expected occur error cases unnecessarily prevent cpr transformation happening 
interactions laziness worker wrapper transformation little careful preserve laziness 
consider int int int 
cpr property 
certainly evaluates function returns constructed product 
bad idea perform worker wrapper transform case fw fw new version gives result trouble call need expression evaluated afresh application original formulation shared calls follows analyse function cpr property lambdas manifest de nition form precisely insist lambdas satisfy arrows type 
similar reason insist lambda 
example consider looks cpr property wrong blindly apply worker wrapper transformation give int int case tw re ned semantics error raises exception say remains valid :10.1.1.33.8720
tw int int tw original de nition evaluated 
new program tw unboxed value evaluation delayed delaying implies boxing 
tw evaluated strictly change meaning program 
summarise perform cpr analysis de nitions functional type lambdas syntactically manifest 
syntactic conditions worker wrapper transformation unconditionally sound purpose analysis conservatively approximate transformation bene cial 
analyse body function ed conditions case contains local function de nitions cpr property 
conditionals constants happen arm conditional constructs product arm 
principle right thing depends relative frequency arms taken current strategy pessimistic arm fails return constructed product deem conditional 
important special case concerns constants 
consider factorial function mkint fact int int fact fact fact cpr property 
branch 
constant 
bound directly manifest constructor may imagine inlining usage site duplicating deem cpr property despite comments previous section 
recursive functions constant base cases pragmatic choice 
inlining happens automatically compiler 
choice usually works programs increases allocation 
consider signum int int signum zero minus zero minus de ned similarly 
signum returns constants caller happens want result boxed wrapper signum box result call sharing boxed values zero place helpful versions function returned results boxed returned unboxed 
support multiple versions 
accept cpr transformation occasionally increase allocation experiments con rm ect rare section 
join points performing called case case transformation ghc introduces called join points :10.1.1.33.8720
example haskell programmer writes ghc inlining doing transformations derive case false true case false true join point execution joins false 
suppose type int int return constructed pair cpr property 
expression cpr property 
appear thunk won cpr considerations preceding section 
join points special entered 
sharing lost making function case false void true case false void true function dummy argument type void function cpr analyser analyse nd cpr property turn cpr property 
example resulting code case fw fw jw case true jw void false case false jw void true ghc introduces join points single point optimisation passes easy introduce dummy argument necessary 
nested higher order functions functions de ned locally function de nition top level program may cpr property 
join points previous section example 
analysis diculty de nitions 
measurements de nitions occur practice ml programmer empty tuple haskell type members 
void built type ghc value written void 
having value generate code pass value type void 
cost dummy argument 
section 
system works context higher order language function passed argument standard boxed return convention 
higher order functions inlined opportunities nd returning unboxed results 
update place consider lazy de nition stands thunk allocated evaluated thunk entered turn call function compute int result including allocating heap return thunk thunk nally overwrite indirection newly allocated int 
de nition inlined get case mkint mkint thunk allocated evaluated allocation int result performed thunk code 
opportunity allocate int result thunk allocating separately thunk int perform update place thunk 
general body thunk concludes tail call function cpr property inlining wrapper function expose allocation function result performed place thunk 
merely need sure thunk big done case basis 
concludes discussion issues came scaling initial idea full blown compiler 
turn formal account analysis 
cpr analysis language describe analysis core intermediate language ghc 
core explicitly typed polymorphic lambda calculus closely system 
includes explicit type abstractions applications omit simplify presentation 
type information play part analysis 
particular need know constructor function belongs product type single constructor datatype 
types expressions de ned follows 
tn 
tn nx en case fc xm fx base types things unboxed integers int literal values types written nullary constructors constructors saturated applied arguments 
form case expression little unusual 
default alternatives nullary pseudo constructor default binding selector value available alternative 
example conventional case ed write case default ed binding covers alternatives default corresponds fact returns value available alternative 
domains interpretation maps expression type environment value drawn domain suppose type int int 
domain int int point lattice containing values 
certain return constructed pair 
hand may may return constructed pair 
order point domain notice uninformative value top domain bottom 
choice interpretation strictness analysis uses indicate de nite divergence indicate lack knowledge reason xed point recursive de nition want sections 
general domain type de ned inductively follows ab aa 
tn 
tn base type sum type values products possible value 
write shorthand tuple 
values type 
tn may may newly constructed products domain 
tn values reasons explained section analyse nested products 
note 
case arises unary products single eld int type section data int mkint int expression type int value construct mkint box 
novelty value function constant function ignores value argument said section 
observe domains functions consist points 
analysing nested products abstracting constant functions polymorphism recur sion fall 
interest top level type constructor product 
example domain simply similarly bound variable recursive types plays part 
example domain streams integers int recursive types usually sum top level constructor corresponding domain just seen simple domain points regardless denote elements point simply convenient generic symbol nd explicit denotations helpful understanding 
interpretation analysis standard straightforward interpretation 
assume existence environment built earlier compiler pass indicating constructors product type 
conveniently represented partial function mapping constructor function names boolean values bool product constructor true 
interpretation de ned usual way non standard semantics domains 
de ne environment type respecting partial function identi ers values env ide semantic function expr env de ned follows nx :10.1.1.33.8720
en fx :10.1.1.33.8720
case fc xm :10.1.1.33.8720
:10.1.1.33.8720
simple example mkint indicating newly constructed product 
hand true bool sum type 
simple pair note analyse components consequence value scrutinee case expression way appropriate value newly bound variables xm alternatives 
interpretation largely standard particular features worthy comment 
analysis look components products stopping top level constructor 
second functions abstracted constant functions 
sound justi cations choices go desire simple implementation 
discuss turn sections 
unboxing product components straightforward matter de ne interpretation analyses components products cpr property far clear nested information general way 
fact try take advantage knowledge component constructed product constructed product worker wrapper transformation longer semantically correct 
consider applying nested cpr analysis example functions bool int mkint mkint bool bool int returns newly constructed integer analysing nested products value result indicating second component result integer newly constructed obvious way nested information atten result worker function 
worker return unboxed tuple second component unboxed integer fw bool bool int fw case mkint unfortunately transformation invalid forces evaluation worker wrapper transformation general safe nested product information way risk losing laziness 
strict language problem technical diculty enriching domains appropriately partly chose notation simply 
suggested analyse nested products top level information direct transformation doing identify functions return newly constructed products 
case de ned function bool int case identi ed returning newly constructed int 
point worker wrapper split move result allocation code function body call site 
unfortunately happen allocation occur result component pair produced unbox product components 
constant functions interpretation ignores cpr property arguments functions yielding constant functions analysis 
dicult natural account arguments clear information gives advantage :10.1.1.33.8720
suppose analysis form 
function result certainly newly constructed pair argument 
unfortunately information versions expects boxed argument expects unboxed argument need inspect call sites decide version call 
far tried multi version approaches gut feel law diminishing returns apply approaches 
recursive de nitions serendipitous aspects abstracting constant functions calculation xed points expressions greatly simpli ed 
particular directly recursive function de nitions single iteration kleene process sucient 
calculation :10.1.1.33.8720
need de ne :10.1.1.33.8720
immediately xed point :10.1.1.33.8720

generally case mutually recursive de nitions number iterations bounded length cycle recursive calls 
expression fx :10.1.1.33.8720
xn :10.1.1.33.8720
clear xed points collection mutual recursive constant function de nitions iterations kleene limit construction 
fx observe longest possible static chain recursive calls simple cycle 
de nitions say xk ek escape recursive loop 
functions done 
domains points rst kleene iteration functions escape recursive cycle cpr property 
suppose xk ek case 
xed point calculation proceed :10.1.1.33.8720
xn :10.1.1.33.8720
:10.1.1.33.8720
xk :10.1.1.33.8720
xn :10.1.1.33.8720
ek value remain 
having broken cycle iterations required propagate value xk remaining recursive de nitions 
functions multiple arguments need versions 
cases fewer iterations may required complex test completion worthwhile 
furthermore assuming strongly connected components extracted earlier compiler phase expressions contain minimal collections mutually recursive de nitions 
collections usually small number iterations 
correctness conditions expect hold analysis considered correct 
obviously evaluates product arity discussion section need guarantee cpr information come nested products 
furthermore explained section wish guarantee analysis cpr information arguments functions 
recall purpose exercise deduce operational property function denotational property 
expect able prove analysis sound respect standard denotational semantics 
strictness analysis interesting standard denotational semantics deduce informally operational property function evaluate argument lucky 
extend standard denotational semantics language include tags indicate value product constructed current scope 
de ne 
tn 
bool idea represents product value constructed current scope indicates 
semantic domains de ned usual way 
note may tags components values constructed types 
lightweight notation write slightly ambiguously 
leave scope need delete tags operator bi 
tagged semantics easy de ne 
clauses constructors lambda abstractions quite standard 
ide typed nx :10.1.1.33.8720
hc ni hc ni tagging simple product constructor applied resulting value marked accordingly 
furthermore tags product components deleted 
re ects intention nested products considered 
clause nx deletes tags incoming values ensuring locally constructed product values tagged 
main result seek agreement value expression tagged semantics value cpr analysis 
inductively de ne type indexed set relations sat follows 
simplify notation leaving type constraints general understanding variables universally quanti ed de nitions respect types 
de nition sat hc ni sat sat sat relation naturally extended environments sat :10.1.1.33.8720
corresponding binding :10.1.1.33.8720
sat position demonstrate soundness cpr analysis respect tagged semantics proposition expressions environments environments sat sat 
proof straightforward structural induction strictness analysis remains informal connection extended denotational semantics actual operational ects seek nd denotational model quite convincing merit simplicity tractability 
implementation cpr analysis available ghc haskell compiler version released july 
analysis associated transformation pass performed programs compiled optimisation ag 
section brie describe implementation 
section describes experimental evaluations ectiveness 
ghc organised front parsing typechecking translates haskell program simple internal functional language called core details see 
number optimisation passes follow convert core program optimised core program 
ghc back generates code optimised core program 
optimisations performed ghc carried core core transformations 
framework readily extended cpr analysis simply adding cpr analysis pass strictness analysis worker wrapper transformation 
cpr analysis performed single pass code mutually recursive bindings iterate xed point see section 
core expressions carry type inferred type checking front trivial discover constructor application produces product type 
core expressions members domain data top tuple int fun bot top corresponds tuple corresponds fun corresponds bot element lattice 
having explicit bot element strictly necessary expressible terms elements lattice depending expression type convenient implementation 
important cpr information passed module boundaries 
compiles module ghc writes interface le hi contains information arity strictness specialisations possibly complete de nition exports 
compiling module imports ghc consults hi nd implementation 
framework need write cpr annotations exported bindings interface le 
cpr information available importing module just ghc speci information function 
results evaluate ectiveness cpr analysis core transformation performed number experiments describe 
compare execution programs compiled cpr transformation compiled respects compiler identical cases programs linked libraries compiled manner 
test programs selection nofib suite maintained ghc developers 
tests run lightly loaded mhz pentium ii computer running linux mb memory 
run time options kept nofib defaults 
static counts shows statistics gathered programs nofib suite 
letrec bindings top level function definitions return product type sucient lambdas head de nition :10.1.1.33.8720
functions eligible cpr transformation 
eligible functions cpr pass discovers constructed result property :10.1.1.33.8720
average number bindings mutually recursive group 
discussed section take advantage simplify detection xed points 
shows distribution sizes returned unboxed tuple functions cpr property 
expect small sizes dominate 
implementation function returns results registers extra results returned stack 
caller boxes result may result extra memory trac caller pushes results stack caller copies heap 
obvious thing experiment cut size functions cpr property 
done 
bindings top level non top level function manifest function product result cpr function non recursive recursive average bindings recursive group length cpr function result type nofib statistics dynamic counts compares run times heap allocations measured programs test suite :10.1.1.33.8720
run times compare best run time runs :10.1.1.33.8720
nofib suite currently consists programs run time small measure reliably :10.1.1.33.8720
test suite chose programs ran second compiled cpr optimisation 
gives test suite programs imaginary spectral real section suite 
table shows number lines haskell code test 
rst sight disappointing cpr analysis little di erence programs programs tested run time allocation changes 
programs integers cpr transformation applies functions return constructed int expect modest improvement 
closer inspection core programs produced show main reasons unboxed tuples primitive values supported ghc long time 
library functions hand tuned effectively doing cpr transformation manually 
haskell arbitrary precision integer type integer calculations nite precision int explicitly speci ed 
turns nofib benchmarks integer arithmetic integer product type cpr transformation apply 
general cpr transformation ects subset functions program 
noticeable ect program run time heap allocation cpr functions contributing signi cant component program execution 
best run time performance longer times program represent mainly system load :10.1.1.33.8720
extreme case famous fibonacci function include con rm combination strictness cpr analysis working expected double double cpr transformation result built heap immediately taken apart caller 
cpr transformation returns result register allocation required results 
cpr strictness transformations function operates entirely stack 
run time alloc program lines cpr cpr cpr anna cichelli comp lab compress event exp ida life mandel multiplier nucleic puzzle rsa simple solid sphere transform treejoin typecheck wave main ect cpr program integer oating point calculation inner loop reap similar bene ts inner loop :10.1.1.33.8720
nofib suite compress wave main turn property cpr analysis gives substantial speedup 
compress example inner loop consisting multiple calls code string character input 
test programs multiplier number heap allocations increases signi cantly reasons discussed section 
program hardware simulator computation consists applying hardware functions streams bits 
example function applies nand operation lists bits producing result list bits nand bit bit bit nand zipwith bit bit bit apply cpr transformation ghc spot returns constant constant return pointer boxed constant builds just 
caller simply place pointer result output list 
cpr property 
cpr transformation convert worker function returns unboxed register 
caller wants place result list list contents boxed 
caller box result 
call causes heap allocation exact opposite trying achieve 
practice ect programs 
experience cpr transformation usually bene advantage slight 
object sizes compilation times cpr transformation moves code function de nition call site may lead larger object les 
practice ensuing transformations ect hard determine 
tests compared object sizes produced cpr 
geometric mean size increases minimum value maximum value 
emphasised cpr analysis simple implemented eciently 
show adding cpr pass little ect ghc compilation times compare compilation times cpr pass 
note includes cost cpr transformation case cpr annotations cpr driven worker 
case compiled pretty lhs pretty printing library distributed part ghc compiler lines haskell code ignoring comments times report best compilation time 
ghc compiler program time gc time total cpr cpr cpr pass adds compilation times :10.1.1.33.8720
considering bene ts discussed worthwhile addition ghc 
related modern languages allow procedure return multiple values simply wrapping data structure support returning struct typical example :10.1.1.33.8720
underlying calling convention invariably takes form call struct allocated stack explicitly implicitly passed callee 
net ect ecient returning results registers way function parameters passed 
quite di erent approach starts 
suppose default product types represented unboxed 
call value language main problem raises pass unboxed value polymorphic function type analysis function deal di erent representations caller passed 
idea type driven translation scheme ensure arguments polymorphic functions suitably boxed uniform representation 
leroy beautiful describes approach shao elegantly re ned compiler exploit spectrum di erent representation choices 
advantage type approach ective higher order functions function passed argument higher order function arguments results unboxed representations 
ect achieved wrapping functional argument matching wrapper 
corresponding disadvantage possible construct programs dynamically composed matchers repeatedly wrap unwrap value nally 
leroy describes ects concluding simpler non type approaches may just ective slightly better unboxing 
fundamental problem applying leroy shao approach haskell basic assumption representing product types unboxed default fails lazy language 
adopting unboxed representation just representation matter ects semantics program unboxed values necessarily evaluated 
simply adopt unboxed representation default 
di erence leroy shao translation driven types take account form function de nition 
approach works uniformly function arguments results concerned function results 
focus function arguments results hannan hicks describe analysis expressed type system take account form function de nition 
distinguishing compile time types run time types corresponds roughly call constructed value 
program analysis needing support separate compilation 
scheme language takes di erent approach explicit way language level return multiple values 
scheme run time typing impossible get ecient return conventions explicit programmer support support multiple return values lead non trivial compilation issues 
expose unboxed types programmer prefer keep language simple haskell complicated 
fact compiler support switch give direct programmer access unboxed types facility writing internal library functions 
spineless tagless machine machine heart compiler originally returned data values unboxed including results recursive sum types :10.1.1.53.3729
return registers convention uniformly losing laziness functions return values unevaluated thunks 
noted section approach increase allocation case function returns existing value 
furthermore return registers convention turned greatly increase complexity updating thunks switching compiled interpreted code dealing stack ow 
moved default convention returning boxed value heap recovering advantages returning multiple values registers techniques described 
functional program functions return multiple results 
described simple analysis accompanying transformation optimises functions delivers useful performance improvements practice 
results 
performance programs hardly changes improve dramatically 
baseline compare soft 
pretty easy get results optimisation applied program 
harder improve programs worked optimisations case 
compiler optimisations bullets 
bullet ine ective programs gives big payo programs inner loop strikes 
compilers simply deploy hail bullets programs survive 
believe cpr analysis useful addition compiler magazine 
ways hope cpr analysis ective 
want investigate programs runtime increases allocation decreases 
plan experiment product size cut useful extension unboxed sums 
technique developed lazy languages prevents strict languages 
sophisticated approaches available call value languages complicated implement programs analysis give better results 
people helped commenting draft tony hoare andrew kennedy manuel serrano zhong shao harald 
aw appel 
compiling continuations 
cambridge university press cambridge 
jm ashley rk dybvig 
ecient implementation multiple return values scheme 
acm symposium lisp functional programming pages orlando florida june 
acm 
goubault 
generalized boxing congruences partial inlining 
st static analysis symposium sas number lecture notes computer science pages namur belgium september :10.1.1.33.8720
springer verlag 
hankin abramsky editors 
interpretation declarative languages 
ellis horwood chichester 
hannan hicks 
higher order arity raising 
acm sigplan international conference functional programming icfp pages baltimore september :10.1.1.33.8720
acm 
sl peyton jones marlow 
secrets glasgow haskell compiler inliner 
workshop implementing declarative languages paris france september 
sl peyton jones reid car hoare marlow henderson :10.1.1.33.8720
semantics imprecise exceptions 
acm conference programming languages design implementation pldi pages atlanta may 
acm 
kelsey clinger 
eds rees 
revised report algorithmic language scheme 
higherorder symbolic computation september 
leroy 
unboxed objects polymorphic typing 
th acm symposium principles programming languages popl pages :10.1.1.33.8720
acm albuquerque january 
leroy 
ectiveness type unboxing 
workshop types compilation :10.1.1.33.8720
technical report boston college computer science department june :10.1.1.33.8720
wd partain 
nofib benchmark suite haskell programs 
launchbury pm sansom editors functional programming glasgow workshops computing pages 
springer verlag 
sl peyton jones :10.1.1.53.3729
implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming april :10.1.1.33.8720
sl peyton jones launchbury 
unboxed values rst class citizens 
acm conference functional programming computer architecture fpca pages boston 
acm 
sl peyton jones santos 
transformation optimiser haskell 
science computer programming september :10.1.1.33.8720
da schmidt 
denotational semantics methodology language development 
allyn bacon 
shao 
flexible representation analysis 
acm sigplan international conference functional programming icfp pages :10.1.1.33.8720
acm amsterdam august :10.1.1.33.8720

