gecco proceedings genetic evolutionary computation conference july quadratic bloat genetic programming langdon centrum voor wiskunde en informatica kruislaan nl sj amsterdam langdon cwi nl www cwi nl bill tel fax earlier predicted program size grow limit quadratic rate generations measured bloat generations gamma 
simple benchmarks test prediction bloat generations generation 
continuous problems limit quadratic growth reached convergence discrete case limits growth size 
measurements indicate subtree crossover ceases disruptive large programs population effectively converges variety near unity 
depending implementation predict run time generations gamma memory generations gamma 
known time programs gp populations tend rapidly increase size population evolves koza altenberg tackett blickle thiele nordin banzhaf nordin mcphee miller langdon soule langdon unchecked consumes excessive machine resources usually addressed enforcing size depth limit programs explicit size component gp fitness koza iba zhang muhlenbein rosca rosca ballard techniques proposed ryan blickle nordin soule foster soule hooper angeline langdon interest exploring bloat happens speed limits bloat 
extend langdon langdon consider unbounded artificial evolution hundreds generations 
naturally bloat circumstances extremely resource intensive restricted considering simple benchmark problems discrete continuous 
binary tree version boolean multiplexor problem koza symbolic regression fourth order polynomial 
elements may largest programs deliberately evolved far 
section briefly restate argument bloat occurs average sub quadratic rate 
section describes experiments look proposed quadratic limit results section 
section shows measurements gp specific convergence explains case quadratic limit reached 
section gives results potentially beneficial impact commonly depth size limits 
section discusses theory results comparison theories bloat 
general gp drawn section 
theory distribution fitnesses provided programs bigger problem fitness level dependent threshold distribution fitness values gp search space change length langdon shows example distribution fitness size 
note size increases lines tend lie parallel axis indicating little dependence size 
number programs fitness distributed total number programs 
number programs rises approximately exponentially program length 
programs maximum depth near internal nodes ignoring terms flajolet see dashed parabola line 
hits parity problem size proportion proportion trees yield fitness level parity problem 
trees fitness levels rare 
note log scale 
period gp stochastic search technique find difficult improve best trial solution far trial solutions finds worse performance 
selection discard worse leaving active far 
absence bias plentiful programs current level performance langdon poli distribution similar distribution trees expect search evolve direction popular tree shape 
evolution depth variety problems earlier langdon program depth population runs standard crossover grew rapidly apparently linearly 
problem dependent average trees grew roughly level generation 
suggests shape initial trees important 
evolution shape absence size depth limits program shape evolves ridge distribution programs langdon sub quadratic bloat programs population remain close ridge number programs versus shape increase depth constant rate leads prediction sub quadratic growth number internal nodes terminals tree depth peak full minimal mean sd flajolet distribution binary trees size maximum depth 
solid line error bars indicate mean standard deviation depth trees give size 
dashed line large tree limit mean internal nodes 
full tree minimal tree limits shown dotted lines shape peak limits enclose programs size 
lengths 
modest size programs expect size rising limit quadratic growth ae cf 
flajolet table ii generation langdon table reports agreement average 
experiments intend run artificial evolution hundreds generations rapidly populations restrict problems boolean multiplexer koza page continuous symbolic regression quartic polynomial koza 
note speed quartic problem simplified uses test cases 
distribution number programs size shape known binary trees binary functions 
accordingly introduce new variation boolean multiplexer problem replacing koza function set usual binary boolean operators 
bit compiler evaluate multiplexer fitness cases parallel poli langdon apart binary function set quartic problem population size absence size depth restrictions tournament selection gp runs essentially koza parameters summarised tables 
table gp parameters quartic symbolic regression problem objective find program produces value quartic polynomial gamma gamma output value independent variable input terminal set floating point constants chosen random numbers functions set gamma theta protected division fitness cases random values range 
fitness mean fitness cases absolute value difference value returned program gamma hits number fitness cases error selection tournament group size generational wrapper pop size max program program nodes initial pop created ramped half depths uniqueness requirement parameters child crossover mutation 
crossover points selected functions remaining selected uniformly nodes 
termination maximum number generations maximum size limit exceeded results quartic symbolic regression independent runs population 
run generation gp finds high scoring program function terminals unable escape population converges 
generation approximately population copies local optima 
similar trapping reported langdon 
populations complete generations 
runs generations reach size limit 
expected runs new generations find programs better fitness 
changes size shape due bloat 
table gp parameters multiplexor problem table stated objective find boolean function output boolean multiplexor function terminal set functions set nand fitness cases combinations boolean arguments fitness number correct answers pop size max program program nodes initial pop ramped half half max depth mean program depth gen flajolet evolution tree shape runs quartic symbolic regression problem 
note log scales 
shows variation remaining runs average population evolves lie close ridge moves predicted 
shows average population depth varies widely runs runs mean depth increase monotonically constant rate 
mean runs better behaved increases levels generation 
shows coefficient obtained fitting power law evolution mean size programs generation generations 
wide variation runs average exponents start near generations steadily rises generations 
predicted quadratic limiting relationship size time 
number programs created mean evolution tree depth runs quartic symbolic regression problem 
number programs created mean quadratic evolution power law coefficient runs quartic symbolic regression problem excludes run 
error bars show standard error 
binary multiplexor runs new generations find better programs changes size shape due bloat 
shows variation runs average population evolves lie close ridge moves predicted 
shows average population depth varies widely runs continuous problem runs mean depth increase uniformly constant rate 
mean runs better behaved increases levels generation 
shows coefficient obtained fitting power law mean size programs 
wide variation runs average mean program depth gen flajolet evolution tree shape runs binary multiplexor problem 
note log scales 
number programs created mean evolution tree depth runs binary multiplexor problem 
exponents start generations rise 
generations reached 
runs generations reaches 
approximately multiplexor traditional multi arity function set langdon convergence consider reject possible explanations failure multiplexor runs reach quadratic exponent firstly power law coefficients problems statistically different 
difference due random variations 
secondly multiplexor programs shorter flajolet limit apply 
flajolet number programs created mean evolution power law coefficient runs binary multiplexor problem 
error bars indicate standard error 
table ii shows parabolic estimate actual mean programs nodes 
generation average bulk populations exceed 
generations bulk multiplexor populations reasonably close flajolet limit 
having rejected proposed explanation discrete problems crossover may cease disruptive programs large 
similar inability effect big trees reported langdon nordin section 
fact generations program population identical fitness 
selection pressure driving bloat falls populations grow length suggest quadratic limit reached 
tackett points importance selection pressure bloat 
shows fraction parent programs selected entirely random rises runs 
depth size limits experimental section experiment symbolic regression problem parameters langdon 
shows approximately predict depth size limits commonly gp impact evolving population 
early anticipate limits usually effect 
depth limits tend cause solutions produced 
trees solve problems parity problems random trees langdon depth limit unanticipated benefit 
conceivably problems bias number programs created fraction selection tournaments potential parents fitness 
clarity plot mean generations time 
runs binary multiplexor problem 
introduced size limit helpful 
langdon poli show population presses size depth limits constrain subtree crossover possibly resulting premature convergence 
average depth initial population rate increase depth langdon table estimate long take bloat take population average depth limit 
gamma 
plots mean sizes depths limits conventional depth limit size limit 
lie top fourth tick mark corresponding generation 
incidentally point size limited population diverges unlimited population 
variability runs agreement prediction measurements surprisingly 
discussion tackett altenberg suggest andy singleton proposed called intron explanation bloat 
programs longer longer programs better harbour ineffective code introns shorter ones 
crossover chooses point parent random having higher ratio ineffective effective code means chance crossover altering ineffective code 
case children behave exactly parents 
program depth peak full minimal limits pop means depth limit pop means size limit pop means evolution population size depth run regression problem 
standard deviations shown generations 
conventional gp means children longer parents higher chance having fitness parents children shorter programs 
bloat underway improvements fitness struggle survival goes children better parents parents 
children long programs chance selected parents children shorter programs 
implicitly assumes long programs tend produce long children 
preference children long programs occurs generation average program size increases time 
observed 
attractive soule points full story soule foster soule foster soule langdon suggests additional mechanism involved 
contrary speculation altenberg subtree crossover average introduces size change 
removal bias means average children smaller parents fit children bigger 
soule investigated evolution tree shape 
note mechanistic explanations don tell rate bloat predict ultimate shape 
iterative nature intron explanation lead false predictions exponential growth 
rosca suggests gp evolves programs root 
soule point side effect free programs introns exist edges trees 
code beneath intron ineffective 
stressing importance code near root gp process 
poli shows advantage high ineffective code ratio having multiple operations mutations 
constant mutation rate tree node chance altering effective code depends size independent amount ineffective code 
gp analysis assumes population full binary trees 
obviously wrong simple 
section points gp populations tend random trees 
apparently complex full binary trees random trees nice mathematical properties analysis evolution populations tractable 
gp function sets containing functions arity 
considerably complicates analysis 
fortunately appear dramatically change properties random trees gp may possible continue approximate behaviour real gp populations assuming binary functions 
apparently extreme position assuming totally random arities 
mathematics random trees analysed 
theory section deal particularly mechanisms simple 
applied non gp search techniques types search operator gives simple approximate prediction average evolution program shape 
making assumption linear increase depth section gives domain independent prediction sub quadratic bloat give quantitative predictions problem 
say wrong 
far 
measured growth introns 
section gives way thinking evolution trees 
average growth program depth standard subtree crossover standard random initial trees near linear 
rate level generation varies problems 
combined known distribution number programs yields prediction sub quadratic rising quadratic growth program size 
considerable variation runs average observe sub quadratic growth size 
continuous domain problem rises apparently quadratic power law limit 
discrete mean generations continuous lim mean length generations large discrete programs observe new type genetic programming gp specific convergence population fitness variety 
reduces selection pressure population suggest reason growth remains sub quadratic 
gp systems store program separately memory usage grows linearly program size 
generations gamma 
run time typically dominated program execution time proportional length langdon run time generations gamma 
systems population stored directed acyclic graph dag handley new links created constant rate 
memory usage may generations generation programs deleted 
absence side effects fixed fitness function may possible avoid re evaluating unchanged code caching intermediate values 
code crossover point root execute 
run time proportional average height trees 
run time generations 
note refer standard sub tree crossover genetic operators representations different bloat characteristics 
example nordin banzhaf suggests program size increases exponentially generations linear machine code representation crossover operator 
new mutation langdon crossover operators langdon reduce bloat trees 
gp populations standard sub tree crossover parsimony techniques quickly reach bounds size depth commonly 
happen readily estimated 
suggest bounds may unanticipated problem dependent benefits 
allow big programs nodes evolve restricted simple problems solved small trees 
results raise question effective subtree crossover complex discrete problems solutions big programs 
may case subtree crossover cease effective explorative disruptive program structured big trees 
gp may need limit tree size evolving programs compose smaller trees alternative genetic operators may required 
wolfgang banzhaf people chair systems analysis university dortmund acknowledge funding deutsche forschungsgemeinschaft project sfb 
altenberg lee altenberg 
emergent phenomena genetic programming 
fogel editors evolutionary programming proceedings third annual conference pp 
world scientific publishing 
angeline peter angeline 
subtree crossover causes bloat 
john koza editors genetic programming proceedings third annual conference pp wisconsin july 
morgan kaufmann 
blickle thiele tobias blickle lothar thiele 
genetic programming redundancy 
hopf editor genetic algorithms framework evolutionary computation workshop ki saarbrucken pp 
institut fur informatik mpi 
blickle tobias blickle 
evolving compact solutions genetic programming case study 
hans michael voigt editors parallel problem solving nature iv 
lncs pp berlin september 
springer 
flajolet philippe flajolet andrew 
average height binary trees simple trees 
journal computer system sciences 
chris 
investigation supervised learning genetic programming 
phd thesis university edinburgh 
handley handley 
directed acyclic graph represent population computer programs 
proceedings ieee world congress computational intelligence pp orlando june 
ieee press 
hooper dale hooper nicholas flann stephanie fuller 
hillclimbing stronger search method genetic programming 
john koza editors genetic programming proceedings second annual conference pp 
morgan kaufmann 
iba hitoshi iba hugo de garis sato 
genetic programming minimum description length principle 
kenneth kinnear jr editor advances genetic programming pp 
mit press 
koza john koza 
genetic programming programming computers means natural selection 
mit press 
langdon nordin langdon nordin 
seeding gp populations 
riccardo poli editors genetic programming proceedings lncs pp edinburgh april 
springer verlag 
langdon poli langdon poli 
analysis max problem genetic programming 
john koza editors genetic programming pp 
morgan kaufmann 
langdon poli langdon poli 
fitness causes bloat 
editors soft computing engineering design manufacturing pp 
springer london 
langdon langdon soule poli foster 
evolution size shape 
lee spector editors advances genetic programming pp 
mit press 
langdon langdon 
evolution size variable length representations 
ieee international conference evolutionary computation pp anchorage 
ieee press 
langdon langdon 
data structures genetic programming kluwer 
langdon langdon 
scaling program tree fitness spaces 
evolutionary computation winter 
langdon langdon 
size fair homologous tree genetic programming crossovers 
genetic programming evolvable machines april 
mcphee miller nicholas mcphee miller 
accurate replication genetic programming 
eshelman editor genetic algorithms proceedings sixth international conference icga pp 
morgan kaufmann 
nordin banzhaf peter nordin wolfgang banzhaf 
complexity compression evolution 
eshelman editor icga pp 
morgan kaufmann 
nordin peter nordin frank wolfgang banzhaf 
explicitly defined introns destructive crossover genetic programming 
peter angeline kinnear jr editors advances genetic programming pp 
mit press 
nordin peter nordin 
evolutionary program induction binary machine code applications 
phd thesis der universitat dortmund am informatik 
poli langdon riccardo poli langdon 
sub machine code genetic programming 
lee spector editors advances genetic programming pp 
mit press 
rosca ballard rosca dana ballard 
complexity drift evolutionary computation tree representations 
tech report nrl university rochester computer science 
rosca rosca 
analysis complexity drift genetic programming 
john koza editors genetic programming pp 
morgan kaufmann 
ryan conor ryan 
civil servants 
kenneth kinnear jr editor advances genetic programming pp 
mit press 
soule foster terence soule james foster 
code size depth flows genetic programming 
john koza editors genetic programming pp 
morgan kaufmann 
soule foster terence soule james foster 
removal bias new cause code growth tree evolutionary programming 
ieee international conference evolutionary computation pp 
ieee press 
soule soule foster dickinson 
code growth genetic programming 
john koza editors genetic programming proceedings annual conference pp stanford july 
mit press 
soule terence soule 
code growth genetic programming 
phd thesis university idaho 
tackett walter tackett 
recombination selection genetic construction computer programs 
phd thesis university southern california electrical engineering systems 
zhang muhlenbein tak zhang heinz muhlenbein 
balancing accuracy parsimony genetic programming 
evolutionary computation 

