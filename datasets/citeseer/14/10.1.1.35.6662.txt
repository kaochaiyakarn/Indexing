software verification research centre school information technology university queensland queensland australia phone fax uq edu au tr generic model fine grained configuration management including control traceability peter lindsay liu owen describes implementation prototype system supports fine grained configuration version management 
development undertaken context providing trusted support high integrity software development 
starting point formal specification consistency completeness criteria system meet 
main issues illustrated simple example system supports evolution requirements design documents maintains relationships artifacts 
prototype developed sophisticated object oriented database system 
draw integration fine grained configuration version management facilities single framework 


software configuration management scm managing controlling change critical part software engineering 
software components typically pass different versions initial development system ongoing maintenance system deployed 
software configuration management concerns control development artifacts system life cycle preserve definition versions components relationships 
scm provides context developers assess consistency developing released evolving system 
assuring consistency system configurations builds core quality integrity issue 
providing framework developers construct consistent system builds scm provides mechanisms needed demonstrate traceability built system design requirements documents tools artifacts development compilers test reports 
scm provides means recording controlling configuration versions documents associated software development including inter intra document dependencies called configuration management cm 
regulatory standards authorities long recognised importance reliable scm mechanisms especially development high integrity software systems 
version control vc important supporting technology scm 
vc concerns storage retrieval different versions development components 
vc systems attempt maintain record changes deltas different versions components 
provides basis tracing evolution system lifetime 
majority software development companies currently version control facilities rcs cvs sccs manage documents software facilities operate inadequately coarse level granularity typically documents modules fall far short users desires 
worthwhile noting point consider version management integral part configuration management activity 
common form configuration management version management system version management systems rely critically configuration management framework defining collections versions denote specific configuration 

scm high integrity software engineering software configuration version management traditional software engineering focus requirements associated management things source code generic model fine grained configuration management including version control traceability peter lindsay liu owen software verification research centre school information technology university queensland st lucia qld australia pal owen uq edu au object code context high integrity development artifacts complex numerous wider variety dependencies artifacts 
concept automated build management system traditional systems rely inappropriate activities bring configurations consistent states fully automated 
experiences past shown traditional approaches configuration version management relatively sophisticated inadequate high integrity setting 
able trace development systems able trace isolation far possible development history individual finegrained artifacts 
example critical system development important able trace evolution individual safety requirements right design final implementation 
example ability trace reconstruct artifacts reused different developments components standard libraries 
projects looking version management structured objects merlin uq proposed generic approaches deal success 
configuration consistency completeness conditions consider sophisticated meet demands high integrity development 
important component configuration version control systems support high integrity software development definition coherent precise framework carry critical activities 
framework formally defined 
provides starting point 
previous approach taken develop configuration consistency models configuration models short define key configuration items relationships consistency completeness conditions desired configuration 
approach configuration models form core development processes defined relative core models 
means consistency completeness development established largely independently development process applied giving flexibility trustworthiness framework 

reports carried offers implementation precisely defined configuration version management framework 
results context simple case study document conformance 
section outlines basic framework starting point 
section describes case study discussion develops working model 
section outlines properties base models presents implementation framework including underlying database technology database system implementation modelling core system objects way integration version configuration management achieved 
issues dependency management traceability configuration consistency discussed section 
section describes implementation detail outlining existing object oriented database technologies significant issues arose phase 
section 
nub approach observation management development process basic unit management specification module test suite limits level detail consistency criteria defined substantial overhead developer addressing issues related change management evolution maintenance 
fine grained configuration management offers developers significantly control flexibility developing software systems 
allowing configuration models defined fine levels granularity providing management framework development artifacts finer level granularity accrue number significant benefits 
primary advantages follows availability detailed account relationships different documents different parts document coherent account outstanding consistency constraints met ability provide feedback terms finegrained components developer effects change configuration consistency ability define versioning policies specifically tailored development models improved traceability individual parts documents specific requirement provided relative versioning policies impact analysis carried significant levels detail giving clear feedback developer potential impact proposed change clear distinctions consistency relationships established automatically compilation establishing consistency source module generated object code may require user input review design document software requirements specification 
clearly overheads approach system development 
primarily relate requirement define sub structures main document types system subject fine grained configuration management 
richer set dependencies defined models 
example traditional dependent relation longer sufficiently expressive reflect rich set interdependencies wish maintain 
versioning policies basis cm traceability defined relative substructures 

simple generic model section presents brief overview model rest illustrate core concepts approach fine grained configuration management 
start trees better see forest 
model consists just documents 
documents single level internal structure 
cm vm operations defined finer level granularity 
internal components documents identity configuration 

generic document model system configuration referred consisting documents document document layer internal structure sequences paragraphs 
example document design specification document corresponding language module 
paragraphs case detailed design specifications declarations respectively 
alternatively document software requirements specification srs document design specification ds 
ds may describe modular structure solution define requirements srs allocated implementation modules 
case paragraphs document denote individual requirements paragraphs document denote individual design statements 
define managed object object sets features cm features related configuration management object change recording vm features related version management object freezing deriving new versions 
finegrained scm system document managed object turn configuration managed objects 
model extended scm systems multiple documents document may multiple levels structuring 
limit level granularity chosen particular system 
constraint degree granularity finer level structuring documents cm vm 
purpose traceability additional information maintained associated relevant document structures 
simplicity assume dependency relation documents say conforms relation concretely represented conformance relation paragraphs paragraphs 
general relation may single paragraph may address different paragraphs single paragraph addressed paragraphs fig 
shown conformance matrix suitable means recording conformance relation document document provides useful basis fine grained traceability relationships 
conformance matrix records addresses relation document paragraphs document paragraphs 
conformance matrices mandated security standards higher levels assurance 
summary consists documents conformance matrix recording relationships documents 
manage system configuration manage fly wire system srs version date status frozen reviewer jaw 
aileron settings shall determined position joystick 
aileron settings shall cause aircraft stall 
architecture version date status development aileron settings shall calculated module aileron inputs module joystick 
output values aileron compared safe limits calculated module 
values outside safe limit replaced safe default values warning sent pilot 
addresses key document document conformance example documents internal configurations versions conformance matrix 

basic classes introduce basic object oriented classes form basis model fine grained configuration management notation 
advanced properties model covered section 
document consists sequence paragraph objects 
scm system represented class object consists set document objects 
paragraph object identifier unique corresponding document object see 
document class includes conformance matrix object see 
document objects defined 
document objects null 
conformance matrix consists sequence pairs 
pair turn consists identifier corresponding paragraph sequence identifiers paragraphs address paragraph 

notion versions version class defines version control operations 
allows managed objects perform required versioning operations model 
generic version class defined tree structure 
node tree labelled unique version label set 
node version tree defined current version anytime 
mapping deref dereferencing labels contents 
parent mapping child mapping returns parent version child version node 
classes version tree node version defined 
node version records relational information associated node version tree provides global information version tree assuming nodes version tree type content 
version classes inherited different classes manage document paragraph classes 
paragraph class inherits node version record relations version paragraph versions 
version tree class data attached paragraph pointer document object pointer judge paragraph version belongs document version 
see figures illustrations structure 

properties base model section discuss properties base model including methods management set document paragraph name string identifier paragraph id contents text document name string identifier document id paras seq paragraph class document paragraph document ref seq paragraph id seq paragraph id class node version content content label parent child sibling class node version version tree version tree content root current nodes set label frozen set deref document version tree frozen version current version version document version tree configuration document configuration conformance traceability achieved 

dependency management say conformance matrix complete requirement defined document addressed corresponding document 
correct recorded addresses relation relationship reviewed deemed correct user validity relation compromised interim changes document document model assume time conformance matrix may incomplete correct entries conformance matrix reviewed unaffected subsequent change 
correctness property maintained changes document structure content ensuring correctness preserving criteria met changing part 
check list operation maintenance changes paragraph level document majority existing address relations inherited resulting paragraphs originals 
inheriting relations may cause violate correctness criteria defined earlier 
consider examples 
example splitting paragraph document paragraph suppose addressed document paragraphs 
split new paragraphs created 
contains part original 
see 
note positional order document paragraphs may need adjusted side effect split operation adjustment automatically carried difficulty 
theoretically new document paragraph inherit address relations conformance matrix records correct relations entries recorded revised matrix may incorrect 
note original relations hint potential inheritance 
row corresponding deleted matrix longer current 
example combine paragraphs document single paragraph 
paragraphs addressed document paragraph addressed document paragraphs 
combination new paragraph created contains contents 
see 
case new paragraph inherit addresses relations relations recorded conformance matrix 
time original addresses relations deleted 
operation may requirement positional ordering document paragraphs need adjusted 
check list context conservative approach inheritance addresses relations useful associate document check list 
check list records addresses relations deleted may appropriate context modified documents paragraph level changes 
list displayed user updates serves prompt list addresses relations may need re established context changes documents 
para document version tree paragraph version trees conforms doc para para conformance matrix particular document version split split document paragraph combine combine document paragraphs versioning enforce requirement frozen version conformance matrix document system complete correct context corresponding frozen versions document document 
freeze version operation applied conformance matrix system check outstanding check list fully checked user conformance matrix complete 
check list fully checked check list remind user possible outstanding addresses relations 
user explicitly accept reject outstanding item check list 
accepting item results relation added conformance matrix 
checking may carried time freeze version operation 
completeness checked ensuring requirements addressed paragraph document correctness maintained checked 
successful check completeness triggers freezing current version conformance matrix implication corresponding versions documents configuration 
configuration conformance matrix incomplete paragraphs document addressed reported user freeze operation aborted 

version management model version management available managed object document class paragraph class 
say paragraph individually versioned individual documents 
users able navigate version trees documents browse contents 
document versions frozen freeze request issued user freeze request managed object system requires documents frozen order preserve consistency criteria 
paragraph versions frozen corresponding paragraph undergoes content change changes individual paragraphs recorded document containing paragraph frozen 
paragraph creation initiates versioning paragraph 
creation occur side effect paragraph level operations documents merge split directly operations insert create 
paragraph created exist system archive forever 
versioning system automatically assigns version labels paragraph versions 
users may traverse version tree paragraph indirectly entry document version 
document version labels user designated 
version control policy adopted model follows frozen versions documents stored project archive document frozen time document frozen review confirms appropriate version frozen conformance matrix complete 
vc operations available user document level appear document class methods 
discuss briefly 
freeze freeze document current version 
document cause completeness check ensure version control policy enforced 
users access frozen version derive new versions frozen versions 
derive create new copy version provided version frozen 
new version child version current version 
methods available navigation version trees display history information available discussed section 

configuration management consistency purposes version control model attaches conformance matrix conforming document document primarily implementation decision provides straight forward means representing dependencies documents explicit manner 
seen operations configuration management perspective may applied document level 
brief description operations ci paragraph identifier vi document version document paragraph versions add paragraph creates paragraph contents document 
insert paragraph creates paragraph contents designated paragraph 
delete paragraph delete paragraph 
split paragraph split existing paragraph new paragraphs start contents original paragraph 
combine paragraph combine existing paragraphs 
restrictions position paragraphs result paragraph take paragraph position 
derive paragraph create new paragraph designated paragraph contents original paragraph initial contents derived paragraph 
replace paragraph delete existing paragraph replace new paragraph designated position 
discussed section operations cause corresponding adjustment conformance matrix creation new paragraphs deletion existing paragraphs 
paragraph level significant operation configuration management perspective change contents 
operation causes current version paragraph frozen 
new version created changes applied new version 
new contents semantically equivalent old contents replace paragraph operation 

traceability traceability main goals model 
traceability mean ability describe follow life paragraph forward backward direction 
number systems attempt address traceability evolving requirements see account 
systems operate coarse levels granularity achieve finer level granularity incorporating facilities directly applications 
integrated notion configuration management version control levels granularity proposed 
supplement version control mechanisms keep snapshot change history document class main attribute 
delta list provides additional traceability information 
contains change history records evolution paragraphs 
comparison detailed changes managed version control system delta list maintains conceptual information concerning operations paragraphs associated change 
delta sequence changes delta seq change structure changes closely follows operations described earlier change add paragraph insert paragraph delete paragraph split paragraph id combine paragraph id id derive paragraph id replace paragraph id version document object delta list records change history creation version document 
delta list frozen document version 
new document version starts empty delta list 
delta list records changes document frozen 
conformance matrix allows model answer questions paragraph level cross referencing 
addition combination version management delta list information allows model handle detailed enquiries regarding contents particular paragraph changed high level enquiries particular paragraph evolved state terms cm significant operations level 
briefly discuss queries model supports 

relation type ordinary change relation directly recorded relation delete replace 

transitive relation relation type relation type created edited inter document information recorded conformance matrix 

intra inter document change history particular paragraph dependency relation respect document paragraphs 

object domain granularity document document document paragraph paragraph document paragraph document 

direction forward history backward history 

constraints set paragraphs documents query additional constraints limit results returned 
may filter relations limit level processing transitive relations model description consistency completeness properties required hold times version conformance matrix unresolved requirements version delta list applied set requirements parent version yields precisely recorded set requirements 
checks consistency requirements set delta list archived parent version 
similarly frozen version referenced version frozen conformance matrix complete 

supporting model oo database system model prototyped unix object oriented database system 

description chosen database system provides advanced facilities directly support key features model 
supports object oriented data model 
schema definition allows encapsulation data definition associated run time attributes 
model discussed oo model relatively straight forward implement 
storage documents paragraphs takes direct advantage database storage mechanisms 
built version class version 
supports versions arbitrary collections objects basis version management model 
provides language interfaces graphical display facility greatly reduced overheads user interface design implementation 
appendix gives overview core classes model 

version management version management sufficiently sophisticated directly support model 
supports versions arbitrary collections objects 
words set objects grouped version unit 
version operations may applied units 
predefined versioning operation class version satisfy requirements 
important restrictions 
time version version tree designated current version 
practice common multiple versions versioned unit need available usually point development 
case example displaying traceability information 

context traceability navigation histories provided parent children operations 
augmentation provided delta lists difficult provided facilities ordered traversal version graph 
current implementation support multiple users problem currently major issue significant near 
provision check facilities corresponding checkin merge operations provide solution problem 
features currently offered difficult provide efficient support operations 
model core versioned objects trees graphs 
restriction imposed versioning system 
order provide sophisticated version navigation facilities augmented existing model incorporating versioning information directly version objects 
example document paragraph objects added related versions objects 
allowed provide graph navigation facilities top basic tree facilities offered 
detailed account traceability features system currently preparation 


summary described implementation prototype system supports fine grained configuration management including version control traceability 
case study simple feel results tools easily generalise systems multiple document types multiple kinds dependency 
particular types artifacts described example quite generic collections paragraphs 
dependency considered addresses relation generic nature 
extension framework require specialisation paragraph document classes dependency classes 
existing notions configuration traceability consistency directly reusable systems sophisticated structure example supporting developments include proof code executables test cases 
see technology context 
starting point formal specification configuration management system provided excellent framework assess characteristics proposed model 
resulted able develop implementation confident preserved key consistency properties configurations 
attempt apply formal techniques construction implementation benefits starting formal specification clear 
important benefit approach ability offer sophisticated facilities traceability customised suit specific application domains development processes 
interesting observation integration version management configuration control involved activity particular traceability important issues 
predefined versioning mechanisms offered insufficient basis supporting specific traceability requirements application 
hard see specialised traceability facilities provided specific tailoring aspects development framework 
framework defined provides starting point serves basis defining traceability requirements context development artifacts maintained managed fine levels granularity 
additionally representation objects managed system significant impact kind control flexibility offer 
ability manage independently subparts documents system critical 
level control traceability criteria difficult address terms development system evolution individual components system requirements key issue arising case study concerned requirements associated definition versioning policy 
generic versioning class basis versioning objects configurations 
shown definition basic versioning framework insufficient guarantee consistency configurations 
versioning policy constructed care ensure consistency criteria system met 
versioning way proposed offers developers opportunity decisions react change control immediate extent change new version impact rest system 
versioning options extremely difficult impossible provide 

number issues arose particularly respect possible extensions framework allow developers reduce impact change opposed accurately assessing actual required react change 
case study considers systems consisting just documents 
extending framework address development processes large numbers documents address issues integration automated consistency checking build management 
flexible framework allows definition process level versioning policies single policy may appropriate phases particular development methodology 
impact analysis change management takes advantage additional flexibility offered fine grained management control framework 
facilities complementary traceability issues offer opportunities advantage traceability framework new interesting ways 
combining traceability impact analysis offer developer framework implications proposed change assessed terms amount effort needed traceability framework guide detailed change process 
essentially allows developer navigate incomplete development structures assessment projected needs done bring system consistent state 

ieee 
ieee std ieee guide software configuration management 
ministry defence 
configuration management 
defence standard issue july 
iec 
international electrotechnical commission 
functional safety safety related systems 
draft international standard iec june 
ministry defence 
procurement safety critical software defence equipment 
defence standard august 
ministry defence 
safety management requirements defence systems containing programmable electronics 
second draft defence standard august 
tichy 
rcs system version control 
software practice experience 

cvs concurrent versions system 
uther phy ornl gov offline manual cvs cvs html 

source code control system 
ieee transactions software engineering 
kearney 
methodology system formal software development 
international journal software engineering knowledge engineering december 
hart formal methods pilot project 
proc 
asia pacific software engineering conference seoul december 
ross lindsay 
maintaining consistency changes formal specifications 
fme industrial strength formal methods 
springer verlag 
proc 
internat 
symp 
formal methods europe denmark april 

merlin user guide 
technical report esprit project fb informatik university dortmund 

version management tightly integrated software engineering environments 
proc 
th int 
conf 
software eng environments pages netherlands 
ieee computer society press 
jones welsh 
requirements generic diagram editor 
patel editor proceedings twentieth australian computer science conference pages sydney australia 
australian computer science communications 
tr 
welsh broom 
design rationale language editor 
software practice experience 
lindsay liu 
managing document conformance case study fine grained configuration management 
aust comp sci communications 
appears tr 
information technology security evaluation criteria commission european communities provisional criteria june 
goguen object oriented tool tracing requirements ieee software march 
bancilhon delobel building object oriented database system story morgan kaufman 
lindsay version configuration management formal theories proc 
formal methods pacific springer verlag 

appendix definition core classes classes model directly defined 
system class inherit object public type tuple docs list document docs list version method public init create document name string boolean public define document string document string document class class document inherit object read type tuple name string paras list paragraph paras list version current version version pointers list method public init name string public add paragraph title string public insert paragraph integer title string public split para num integer public combine integer integer public delete paragraph delete integer public derive para num integer title derived string public replace para num integer title derived string read move integer integer paragraph class class paragraph inherit component read type tuple contents text name string method private init document name string public edit contents conformance matrix class class inherit object public type tuple matrix list tuple id integer ids list integer doc document method public init document doc document public add para num integer para num integer boolean public delete para num integer para num integer boolean public edit current para num integer current para num integer new para num integer new para num integer boolean 
