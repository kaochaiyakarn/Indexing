sound reduction semantics untyped cbn multi stage computation 
theory metaml non trivial extended walid taha department computing science chalmers university technology university teborg teborg sweden 
tel taha cs chalmers se stage computation involving stage execution 
metaml language programming multi stage computations 
previous studies big step semantics categorical semantics sound type systems metaml 
report sound reduction semantics untyped call name cbn metaml 
reduction semantics formally justify optimization performed cbn metaml implementation 
reduction semantics demonstrates non trivial equalities hold object code untyped setting 
emphasizes adding intensional analysis apart object programs metaml remains interesting open problem 

signi cant interest multi stage programming languages :10.1.1.16.4975:10.1.1.28.4059
multi stage programming language provides high level constructs construction combination execution code fragments 
metaml sml multistage programming language provides staging constructs called escape run run intuitively constructs analogous lisp research reported carried paci software research center department computer science engineering oregon graduate institute science technology portland usa supported usaf air materiel command contract nsf iri 
results author phd dissertation 
author currently post doctoral fellow supported swedish research council engineering sciences tfr number 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pepm boston ma usa copyright acm back quote comma eval 
notable di erences lisp metaml constructs lists equivalence classes representations programs containing binding constructs 
second metaml avoids need newname gensym constructs provide fresh names bound variables 
di erences simplify formal semantics metaml substantially 
previous studies formal semantics metaml focused feasibility static dynamic type systems typically big step semantics characterising correctness categorical denotational semantics achieving better understanding notions type 
types prerequisite metaml useful 
particular show code objects untyped metaml enjoy strong equational properties interest right 
intensional analysis metaml part strength equational properties metaml comes absence explicit mechanism intensional analysis apart code 
words metaml express staged computation practically useful way provide programmer arbitrary access representation object code 
intensional analysis needed describing kind program analysis type checking source source transformation binding time analysis bta natural question metaml intensional analysis 
answering question important note transformations de ned outside metaml introduced constant 
su cient users applications certainly construct representation program metaml example typing hfn fn yi metaml implementation prints val hfn fn yi hint int 
inti 
simplicity assume interested programs take curried arguments rst static second dynamic 
principle add primitive constant bta metaml type bta val bta fn 

ci 
cii 
perform bta apply constant source program val ap bta val ap hfn hfn lift hint hint yielding annotated program specialization achieved running level program input term val run ap val hfn yi hint inti yielding turn specialized program 
certainly applications support intensional analysis highly desirable 
multi stage programming need concern code represented metaml developed meta programming language long term goals metaml project times included support intensional analysis 
answer question raise number fundamental reasons introducing intensional analysis require care 
know oftwo hard nd reasonable type systems presence intensional analysis 
problem scope reader referred 
second illustrate adding intensional analysis metaml weakens notion equivalence extent interesting program optimizations unsound 
organization contributions section reviews previously proposed big step semantics metaml explains directly basis establishing soundness reduction semantics 
notion expression family de ne ne big step semantics crucial formal development untyped language 
section analyses basic problems associated nding appropriate reduction semantics metaml 
particular show raw metaml terms problematic level annotated terms lead complications 
section presents simple reduction semantics subset metaml call proposed reduction semantics works terms explicit level annotations uses standard notion substitution 
lift function secondary annotation takes ground value returns code fragment containing value 
study consider lift secondary high level behaviour modelled constructs 
letter simply sequence section summarizes main results 
rst result con uence proposed reduction semantics 
con uence states result sequences reduction reduced common term 
point view language design con uence indicator behavedness proposed notions reduction 
second main result soundness proposed reduction semantics respect proposed ne big step semantics 
result parts 
achieved big step semantics achieved reductions 
second applying reductions sub term program change termination behavior big step semantics 
result establishes reduction semantics big step semantics essentially equivalent formulations language 
proof details appear technical report 

big step semantics cbn big step semantics partial function expressions values answers 
number reasons big step semantics metaml instructive model formal study multi stage computation 
making evaluation lambda explicit semantics easy illustrates multistage computation violates basic assumptions works programming language semantics dealing closed terms 

just standard notion substitution see example barendregt semantics captures essence static scoping need additional machinery performing renaming run time 
section review big step semantics proposed metaml previous discuss directly justify reduction semantics untyped setting problematic 
re ned notion called ne big step semantics formal development 
coarse big step semantics previous big step semantics core subset untyped metaml called 
raw terms language xj big step semantics speci ed partial func tion 

summarizes coarse cbn big step semantics 
see rst rules correspond rules cbn lambda calculus 
rule run level says expression run rst evaluating get bracketed expression evaluating bracketed expression 
rule brackets level says evaluated rebuilding expression surround level rebuilding rst attempt calculus called stands run 
call reduction semantics avoid asserting priori equivalent big step semantics 
letter stands metaml 
syntax big step rules 





lam app esc 




app lam esc evaluating levels higher intended eliminate level escapes 
rebuilding performed traversing expression correctly keeping track level 
rebuilding simply traverses term level escape encountered point normal level evaluation function invoked esc rule 
escaped expression yield bracketed expression expression returned 
closedness assumption violated semantics standard structure note unusual feature manipulates open terms 
particular rebuilding goes lambda rule lam escape level re invokes evaluation rebuilding 
closed term ash evaluates toh xi ish xi derivation evaluation involves sub hxi evaluation open 
common semantics restricted aposteriori closed terms example plotkin development necessitates restriction 
problem coarse function notions reduction wish propose sound coarse big step semantics function described 
particular explicitly forbid application coarse big step semantic function terms manifestly right level nding suitable notions reduction hard 
example consider term xi 
term subjected coarse big step semantic function level result unde ned 
time pragmatically optimize term big step semantics de ned 
applying reduction sub term program change termination behavior 
particular optimization takes unde ned term de ned sound 
section introduce ner notion big step semantics avoid kind problem 
fine big step semantics de ne ne big step semantics employ ner run 

brk coarse cbn big step semantics run run 


run var run classi cation expressions 
example evaluation term interest escapes occur top level occur level 
introduce expression families 
expression family collection sets indexed natural numbers 
expression family terms de ned follows xj xj ij notation 
presentation expression families essentially bnf de nes set terms simple induction 
standard notation set de ned induction height set membership judgment de ned induction hei run bnf notation especially convenient de ning sets workable stuck terms introduced technical report 
strati cation expression crucial correctness reduction semantics propose 
note changed syntax imposed ner classi cation terms 
example results states element expression family subset set terms lemma basic properties expression families 


note annotate terms explicitly additional information terms language exactly simply building ner classi cation terms 
depend property formal development instructive note easily proved help previous lemma lemma classification 
values values subset terms 
de ning characteristic subset value element subset represents result computation see lemma 
inductively de ne values expression families just set hv ij run intuitively level values get result evaluating term level level values get rebuilding term level 
set values important properties value level lambda abstraction bracketed value re ecting fact lambda abstractions terms representing code considered acceptable results computation 
second values level contain applications ash re ecting fact computations levels deferred level escapes level values re ecting fact having escape term mean evaluating term completed 
evaluation complete example terms note level escape level value 
lemma establishes simple important property lemma untyped strong value reflection 
lemma parts saying element set code values element previous reviewer asked 
big step semantic says 
proposed reduction semantics brings interesting news says 
reduction semantics mechanism enforcing term reduced evaluated 
main di erence application level application higher levels reduced need reduced 
observation comes directly de nition values 
fact proposed reductions allow interpret higher level applications deferred opposed deferred part power semantics 
particular higher level applications need tobe deferred ect performing observed outside world 
useful example allowing implementation metaml optimize object code improve quality code generated stage system 
set expressions saying converse 
properties interpreted positive qualities level language 
rst part tells object program value viewed meta program second part tells meta program viewed object program value 
having established strong value re ection easy verify semantics level 
returns expression expression value level lemma basic properties big step semantics 

noting previous lemma implies level preservation sense 
fine big step function 
previous works semantics metaml term big step semantics referred coarse function 
purposes concerned ne big step semantic function 
related reduction semantics proposing 
term big step semantics refer ne big step semantic function 

metaml reduction reduction semantics viewed set directed rewrite rules 
semantics de ne notion equality terms terms equal reduced common term 
experience case studying semantics helped developing rst type system metaml 
reasonable expect having simple reduction semantics language helpful developing new type systems metaml 
example important property system typability remain invariant reductions subject reduction 
simple reduction semantics helps language designers quickly eliminate inappropriate type systems hopefully leading better understanding design space type systems 
section analyse problem de ning suitable reduction semantics metaml 
reviewing basic notions coherence con uence study de ning reduction semantics raw metaml terms suitable 
analyse notion level annotated terms introduces additional complications 
coherence confluence important concepts central section coherence con uence con uence see barendregt 
reduction semantics non deterministic 
depending order apply rules get di erent results 
case semantics reduce program 
say reduction semantics coherent path leads ground value leads ground value 
conversely say semantics incoherent expression reduce di erent ground values 
clearly semantics lacks coherence satisfactory deterministic programming language 
intuitively knowing rewriting system con uent tells reductions applied order ecting set results reach applying reductions 
con uence reduction semantics way ensuring coherence 
conversely ifwe lose coherence lose con uence 
attempt direct attempt extending set expressions values basic cbn lambda calculus incorporate staging constructs metaml yields rules addition rule 
hei reasons naive approach unsatisfactory 
rest section explain problems approach explore space possible improvements semantics 
intensional analysis conflicts directed deterministic support intensional analysis means adding constructs metaml allow program inspect piece code possibly change execution structure content piece code 
unfortunately con ict supporting intensional analysis allowing rule object code 
illustrate undesirable interaction assume minimal extension hypothetical construct tests piece code see application 
big step evaluation justify implementation behaving follows fn fn val true bool 
allowing reduction object code means fn fn replaced yi 
reduction performed optimizing compiler desirable eliminates function call reduces size half 
optimization devastating ect semantics hypothetical extension metaml 
particular reduction followed big step evaluation justify implementation behaving follows fn fn val false bool 
reduction performed argument longer application simply lambda yi 
words allowing intensional analysis object program optimization implies get result false just get result true 
example illustrates problem coherence metaml reduction semantics presence reduction higher levels deterministic intensional analysis 
level annotated terms di culty adding intensional analysis suggests distinguishing level meta terms higher level object terms useful 
idea previous attempt reduction semantics metaml 
order control applicability rule various levels developed notion level annotated terms 
level annotated terms carry natural number leaves re ect level term 
terms keep track meta level information level sub term terms give ner control di erent reductions applicable 
unfortunately reductions semantics contains subtle aw su ers main shortcomings working level annotations requires introducing auxiliary notions promotion demotion non standard notion substitution order correctly maintain level annotations execution program 
certain instances left hand side reduction de ned right hand side 
subtle aw partly result fact non standard notion substitution needed maintain correct level annotations total function 
level annotated terms induce expression family annotated term lives ij hv ij run note go inside bracket escape index expression set changed accordance way level changes go inside bracket escape 
key di erence level annotated terms raw terms leaves variables level annotated terms variables explicitly carry term representing natural number corresponding level 
words name particular subset universal set term pair consisting name variable representation natural number 
note surprisingly type system sound 
see soundness result 
original de nition level annotated terms construct carrying level annotations 
oneto corresponds de nition simpler de nition 
mean name drawn set var dedicated names variables level formal development exactly set variable names set variables 
constructs simply infer unique level term looking sub term 
brackets escapes obvious correction levels performed 
escapes conflict problematic interaction rule higher levels escape 
particular preserve syntactic categories level annotated terms 
consider term fn ii 
level term 
allow rule higher levels term reduced ii 
result contains nested escapes 
level term longer 
outer escape corresponds outer bracket inner escape 
originally corresponded bracket reduction get expression read manner original term 
substitution conflicts possibility avoiding problem limit level terms 

rst approach appealing extension metaml code inspection operations problematic 
note non standard notion substitution 

illustrate consider term fn hx fn fn 
possible reductions level term 
rst outermost application second application inside argument 
rst application get result hfn fn level annotations need adjusted substitution see 
rst note reductions level left term 
second application rst get fn hx fn 
go back perform outermost application get hfn presence code inspection example illustrates incoherence problem 
absence code inspection lose con uence proposed notions reduction despite fact sacri ced reductions higher levels 
intuitively example illustrates cross stage persistence possibility binding variable level higher level arises naturally untyped metaml terms cross stage persistence hard limit level consistent con uent way 
example applying lift term fn function causes redices body function frozen 
summary problems level annotations conclude section emphasize seemingly minor di erence level annotated terms expression families level annotations carried leafs terms profound ect formal development 
particular substitution operation complicated need change level annotations inside term depending substitution operation ects level 
lose simpler re ection property means new partial function called demotion order correct level sub term run reduction performed 

reduction semantics cbn ready proposed reduction semantics metaml called 
syntax consists exactly expression family introduce 
advantage strong re ection simplify de nition values equivalent compact de nition xje xje ij de nition values explicates essential subtleties value level carries expression level 
second higher level values simply expressions previous level 
definition cbn reductions 
cbn notions reduction simply 
just rules cbn cbv lambda calculus rules intended applied context independently context level imposed context 
reduction relation de ned follows definition reduction relation 
cbn reduction relation 
compatible extension rewriting term notions reduction 
write 
re exive transitive closure 
note particular reduction relation allows apply rule expression looks level application 
contrast big step semantics reductions independent level term 
simply restricting body lambda term argument reductions avoid problems level annotated term approach nonstandard notion substitution con ict escapes essential idea de ning reductions expressions free top level escapes note restricting body lambda term rule member evaluation lambda explicit 
restriction di erent value restriction argument application plotkin forces evaluation argument passed substituted body function 
read expression restrictions body function argument rule explicitly forcing body argument proper expressions reduced application 

summary technical results section gives overview main technical results cbn con uence soundness respect ne big step semantics cbn 
details results technical report 
confluence establishing con uence reduction semantics presence rule involved largely substitution duplicate redices establishing redices ected substitution non trivial 
barendregt presents number di erent ways proving con uence discusses relative merits 
takahashi promotes concise highly rigorous technique proving con uence demonstrated application variety settings including proving subtle properties reduction systems standardization 
takahashi promotes explicit notion parallel reduction notion star reduction avoids need residuals 
idea parallel reduction goes back original classic unpublished works tait martin lof introduced early barendregt book section 
parallel reduction relation terms allows multiple reductions performed time 
essential feature notion indi erent number times occurs term 
star reduction function de ned directly induction structure terms greatly simpli es establishing con uence parallel reduction 
corresponding notion star reduction barendregt complete development section 
notion explicitly rst probably simplest con uence proof postponed section de ned involved notion residuals 
proof con uence follows closely development reviewer suggested free variable analogy 
top level escapes viewed free unbound escapes 
key viewed simply exclusion expressions free escapes 
takahashi cbn reductions introduce notable complications proof con uence 
proof simple concise rigorous takahashi 
theorem cbn confluent 

soundness establishing soundness reduction semantics respect big step semantics involves parts show achieved big step evaluation achieved reduction 
part typically easy prove proceeds induction height big step evaluation derivation 
second show achieved reduction sense achieved big step evaluation 
basic problem reductions applied term non deterministically big step evaluation performs certain reductions deterministically 
words reduction relation typically reduces redices big step evaluation 
example reduction semantics lambda calculus reductions lambda big step semantics generally 
time typically formal sense called observational equivalence extra reductions irrelevant 
state matters generally establishing second half soundness involved 
proofs followed closely plotkin proofs soundness cbv cbn lambda calculi 
carrying proofs largely accumulated number hints may bene interested pursuing similar formal development 
technical report 
follows de nition observational equivalence termination behavior level evaluation state soundness result cbn reductions preserve observational equivalence 
definition level termination de ne notion observational equivalence need introduce notion formal notion context definition context 
context expression exactly hole 
cj write expression resulting replacing lling hole context expression 
filling hole context involve variable capture sense binding occurrence renamed 
definition observational equivalence 
dene follows 
de nition says terms observationally equivalent exactly interchanged level term ecting level termination behavior term 
theorem cbn sound 

related works author dissertation promotes formal study multi stage programming reports results design implementation multi stage programming language metaml 
focus metaml operational semantics type systems formalizing properties expect enjoy 
doing identi ed variety subtleties related multi stage programming provided solutions number 
results directly chapters 
davies pfenning propose typed frameworks staged computation 
directly related metaml allows evaluation lambda computation open code 
davies uses notion expression family typed development classify values impose restrictions notions reduction 
reductions suggested sound untyped big step semantics xed points rule restricted terms typed 
observation con ict formal claims results davies reports 
typed setting reductions sound ects introduced moggi notion computational monad see example danvy lawall thiemann studies direction 
clear categorical analysis multi stage computation staging monads coexist fruitfully question remains open interesting 
number related studies contexts lisp untyped lambda calculus 
muller studies reduction semantics lisp quote eval 
muller observes formulation constructs breaks con uence 
reason calculus distinguishes expressions representations expressions 
muller proposes closedness restriction notion reduction eval shows restores con uence 
muller studies reduction semantics lambda calculus extended representations lambda terms notion reduction representations 
muller observes calculus lacks con uence uses type system restore con uence 
muller studies language express intensional analysis 
wand studies equational theory lisp meta programming construct nds theory trivial meaning preserving equality conversion 
context study expressive power programming languages notion abstraction contexts mitchell remarks lisp syntactically different lisp expressions observationally equivalent 
observations imply valid language 
wand predicts meta programming languages interesting nontrivial equational theory 
demonstrates metaml language 
moggi points level languages generally equational calculus 
lawall thiemann give presentation context study sound specialization presence ects 
proposed reduction semantics eliminated problem cbn metaml knowledge rst correct presentation typed untyped multi stage programming language reduction semantics 

corresponding results con uence soundness cbv established 
reasons pursuing results rst cbn setting 
avoid developing accidental dependency particular strategy cbv 
avoid technical inconvenience relating mismatch notion value reduction semantics big step semantics cbv language 
di erence cbv cbn big step semantics metaml evaluation rule application level 
di erence cbv cbn reduction semantics metaml rule application argument restricted cbv value forcing evaluated passed function 
additional degree care needed treatment 
particular notion value induced big step semantics call value lambda language usually notion value reduction semantics callby value languages 
typically contains variables 
subtle di erence require distinguishing notions development 
furthermore necessary add special reduction rule reducing application argument order strictly speaking conservative extension cbv lambda calculus 
expect results hold naturals added 

ne big step semantics subset cbn metaml explained naive approach reduction semantics metaml 
reduction semantics shown con uent sound respect notion observational equivalence level termination behavior big step semantics open terms 
reviewing failure naive approach reduction semantics saw hard limit reduction level metaml hard semantic equality meta level leaking object level 
alternative interpretation concrete observations metaml natural allow semantic equality levels 
particular level raw metaml terms local information determined just looking term 
level term determined context 
substitution general cross stage persistence particular forced allow leak higher levels 
see leakage desirable allows implementations metaml perform wider range semantics preserving optimizations programs 
accept interpretation accept allowing levels need careful introducing intensional analysis 
particular direct deterministic way introducing intensional analysis code lead incoherent reduction semantics unsound equational theory 
finding better way introducing intensional analysis metaml important open problem 
important research direction formal study notion observational equivalence see example 
understanding notion pave way investigation formal improvement theories lines developed sands 
see example 
development especially appropriate metaml intended framework staging form cost improvement 
conclude view untyped development proposed capturing simplest notion formedness needed having behaved syntax 
behaved syntax necessary clean useful separation untyped typed language 
initial interest fact study expressive type systems metaml 
di culty de ning semantics type independent way hindered program substantially 
hope useful study richer type systems multi stage programming languages 

guidance support enthusiasm advisor prof tim sheard happened 
james hook neil jones john launchbury david maier eugenio moggi active helpful thesis committee 
am especially grateful eugenio moggi careful reading early version results critical doubtful possibility relating reduction big step semantics 
enjoyed discussions received helpful comments benaissa rowan davies jurgen gustavsson amr sabry turbak hongwei xi 
anonymous reviewers excellent feedback 

barendregt lambda calculus syntax semantics revised ed vol 
studies logic foundations mathematics 
north holland amsterdam 
bawden quasiquotation lisp 
acm sig plan workshop partial evaluation semantics manipulation san antonio jan danvy ed university aarhus dept computer science pp 

invited talk 
benaissa moggi taha sheard categorical analysis multi level languages extended 
tech 
rep cse department computer science oregon graduate institute dec 
available 
benaissa moggi taha sheard logical modalities multi stage programming 
federated logic conference floc satellite workshop intuitionistic modal logics applications july 
appear 
davies temporal logic approach binding time analysis 
proceedings th annual ieee symposium logic computer science new brunswick july ieee computer society press pp 

davies pfenning modal analysis staged computation 
rd annual acm symposium principles programming languages popl st petersburg beach jan pp 

gluck hatcliff rgensen generalization hierarchies online program specialization systems 
logic program synthesis transformation ed vol 
lecture notes computer science springer verlag pp 

gluck rgensen cient multi level generating extensions program specialization 
programming languages implementations logics programs plilp swierstra hermenegildo eds vol 
lecture notes computer science springer verlag pp 

gluck rgensen fast binding time analysis multi level specialization 
perspectives system informatics bj rner broy eds vol 
lecture notes computer science springer verlag pp 

gluck rgensen automatic program generator multi level specialization 
lisp symbolic computation 
gomard jones partial evaluator untyped lambda calculus 
journal functional programming jan 
gordon pitts higher order operational techniques semantics 
cambridge univeristy press 
hatcliff danvy computational formalization partial evaluation 
mathematical structures computer science oct 
hatcliff gluck reasoning hierarchies online specialization systems 
partial evaluation danvy gluck thiemann eds vol 
lecture notes computer science springer verlag pp 

jones gomard sestoft partial evaluation automatic program generation 
prentice hall 
jones sestoft experiment partial evaluation generation compiler generator 
rewriting techniques applications 
jouannaud ed vol 
lecture notes computer science 
springer verlag pp 

lawall thiemann sound specialization presence computational ects 
theoretical aspects computer software sendai japan vol 
lecture notes computer science 
berlin springer verlag pp 

mitchell abstraction expressive power programming languages 
theoretical aspects computer software sept ito meyer eds vol 
lecture notes computer science springer verlag pp 

mitchell foundations programming languages 
mit press cambridge 
moggi notions computation monads 
information computation 
moggi categorical account level languages 
mathematics foundations program semantics elsevier science 
moggi taha benaissa sheard idealized metaml simpler expressive includes proofs 
tech 
rep cse ogi oct 
available 
moggi taha benaissa sheard idealized metaml simpler expressive 
european symposium programming esop vol 
lecture notes computer science springer verlag pp 

extended version appears 
muller lisp representation independent dialect lisp reduction semantics 
acm transactions programming languages systems oct 
muller staging calculus application veri cation translators 
conference record popl st acm sigplan sigact symposium principles programming languages portland jan pp 

nielson nielson level functional languages 
cambridge tracts theoretical computer science 
cambridge university press cambridge 
oregon graduate institute technical reports 
box portland usa 
available online ftp cse ogi edu pub tech reports readme html 
viewed august 
plotkin call name call value lambda calculus 
theoretical computer science 
sands time analysis theory cost equivalence 
journal logic computation 
shields sheard jones dynamic typing staged type inference 
proceedings th acm sigplan sigact symposium principles programming languages jan pp 

taha multi stage programming theory applications 
phd thesis oregon graduate institute science technology july 
revised october 
available author taha cs chalmers se 
taha sound reduction semantics untyped cbn multi stage computation 
theory metaml non trivial preliminary report 
tech 
rep cse ogi oct 
available 
taha benaissa sheard multi stage programming axiomatization 
th international colloquium automata languages programming aalborg july vol 
lecture notes computer science pp 

taha sheard multi stage programming explicit annotations 
proceedings acm sigplan symposium partial evaluation semantic program manipulations pepm amsterdam acm pp 

extended revised version appears 
taha sheard metaml multi stage programming explicit annotations 
theoretical computer science press 
takahashi parallel reductions calculus 
information computation apr 
wand theory trivial 
lisp symbolic computation 
winskel formal semantics programming languages 
foundations computing series 
mit press feb 
