logical modalities multi stage programming el benaissa eugenio moggi walid taha tim sheard oregon graduate inst portland usa disi univ di genova genova italy 
multi stage programming method improving performance programs controlled program specialization 
case multi stage programming open code closed values 
argue simple language exploiting interactions logical modalities suited multi stage programming report results study categorical models multi stage languages 
keywords multi stage programming categorical models semantics type systems multi level typed calculi combination logics modal temporal 
multi stage programming method improving performance programs controlled program specialization 
metaml language designed specifically support method 
provides type constructor code staging annotations building combining executing code allowing programmer finer control evaluation order 
unfortunately single type constructor metaml provides code allow natural way executing code 
means generated code easily integrated rest run time system 
previously published attempts provide consistent type system metaml code executed limited expressivity 
propose refined method study research supported nsf iri department defense usaf air materiel command contract nsf cda 
research partially supported murst progetto la specifica la la la di sistemi software esprit wg 

operational semantics pragmatics staged computation 
previous applications logical modalities staged computation :10.1.1.16.4975:10.1.1.28.4059
categorical models multi stage languages :10.1.1.39.7201
study consolidated new language multi stage programming called bn multi stage programming main steps multi stage programming 
write conventional program program type static known parameters type dynamic unknown parameters type result program 

add staging annotations program derive annotated program ht hti partial evaluation step performed automatically known binding time analysis 
reasons carrying interactively see 

compose annotated program unfolding combinator back hai hbi ha bi code generator ht ti 
construct read static inputs 
apply code generator static inputs get specialized code ht ti 
run specialized code re introduce generated function class value current environment specialized program problem solution metaml step generally carried ad hoc ways :10.1.1.17.4285
problem general way going metaml code type hai metaml value type able find reasonable models function unsafe run hai exists 
operationally code fragment type hai contain free dynamic variables 
code type metaml provide information free dynamic variables fragment way ensuring code fragment safely executed 
level language constructs metaml provides construct run 
run allows execution code fragment 
example run typed evaluates construct limited expressivity lambda abstraction run typable 
function code fragments declared top level executed welltyped terms 
time don want function unsafe run hai break type safety metaml 
crucial advance useful models function safe run hai exists 
safe run operational behavior unsafe run intended achieve running code 
difference typing function 
nutshell safe run allows programmer exploit fact closed code safely executed 
refined method propose refinement multi stage programming explicit assertions closedness assertions checked type system 
write conventional program program exactly 

add staging annotations program achieve closed annotated program ht hti 
difference programmer closed type constructor demonstrate type system annotated program introduce free dynamic variables 
means constructing annotated program programmer allowed closed values 

compose annotated program unfolding combinator get closed code generator ht ti back closed inside closed value slightly different combinator closed back hai hbi ha bi 
turn closed code generator generator closed code ht ti done applying combinator closed apply 

construct read static inputs closed values cs similar multi stage programming explicit annotations 
requiring value closed specific original method 
means sure combinators constructing value closed 

apply code generator static inputs get closed specialized code ht ti 
run result get closed specialized program step exploits interaction closed code types performed applying function safe run hai 

forget specialized program closed specialized program step performed applying function open various examples fully developed bn language proposed core type system metaml 
overview organized follows introduce multi stage languages review connections established code types logical modalities 
analyze categorical point view logical modalities interact 
borrowing ideas benton categorical models linear logic specifically adjoint calculus give definition constitutes categorical model simply typed multi stage languages fl bn consider examples 
investigate interaction modalities computational monads computational effects pervasive feature programming languages 
particular refine interpretation bn presence computational effects 
notation introduce notation terminology 
categories jcj objects category objects category set maps functors categories gf ffi gfa fa times composition functor ae full faithful functor adjunction 
left right adjoints jn infinite sequence ji finite sequence length short ji clear context sequence obtained adding front ret op ma mb op delta op monadic extension op mb multi stage languages multi stage languages provide generic constructs building combining executing code fragments :10.1.1.41.840
languages studied main features ffl provides constructs building executing closed code :10.1.1.28.4059
language useful machine code generation 
ffl fl provides constructs building combining open code fragments :10.1.1.16.4975
language useful high level program generation lining 
ffl metaml extends fl providing additional construct execution code fragments cross stage persistence 
cross stage persistence ability bind variable stage stage 
features important pragmatic reasons 
fl clean logical foundations curry howard isomorphism fl linear time temporal logic modal logic :10.1.1.57.1556:10.1.1.16.4975:10.1.1.28.4059
metaml emphasizes pragmatic importance able combine cross stage persistence evaluation lambda symbolic computation able execute code 
combination goals achieved fl separately see 
time metaml logical foundations formal hygiene foundations promote 
example metaml avoid expressivity problem run ad hoc extensions see demanded deeper investigation possibly simplification :10.1.1.17.4285
bn types syntax semantics bn types hti base types functions open code fragments closed values 
syntax bn follows hei close fx ji mg open safe run constructs standard ones calculus constants 
bracket escape allow building combining open code 
brackets construct code escape splices code fragment context bigger code fragment 
term fn 


yields 
evaluated 
allows boxed expression higher level providing cross stage persistence boxed values 
close construct asserts closed set variables bound closed term open forgets closedness assertion safe run executes closed code fragment returns closed value 
type system bn 
typing judgments form gamma gamma fx ji mg natural called level gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma hei hti gamma hti gamma gamma gamma gamma fx ji mg gamma close gamma gamma open gamma hti gamma safe run bn type system term 
level program fragment subterm closed term determined context number surrounding brackets number surrounding escapes ups 
operational semantics bn 
set values bn defined follows hv close hv close open safe run hv close open safe run categorical models section define model bn see definition 
ignore computational effects focus logical modalities underpinning multi stage language 
notation fp prefix indicate categorical notion category functor monad adjunction specialized category categories finite products functors preserving 
similarly ccc prefix indicate categorical notion specialized category cartesian closed categories functors preserving ccc structure 
fp adjunction simply adjunction left adjoint 
definitions recast categorical terms correspondence established davies pfenning fl linear time temporal logic modal logic 
definition fl model ccc full faithful ccc functor ae pattern interpreting fl interpret type object hti term fx ji mg fl map 
properties ensure may safely confuse iso formalizes property fl linear time temporal logic observed 
definition model ccc fp adjunction oe definition model consistent topos theoretic approach modalities 
fp adjunction induces fp comonad fg needed interpreting fact type interpreted object term fx ji mg fx jj ng interpreted map theta 
separation typing contexts parts essential 
fact bijection modulo semantic equality terms form delta gamma form delta gamma 
box 
box analogy adjoint calculus may consider variant category context separation prominent role 






hvi 

close 
close 

close 
close 
close open 

close hv 
safe run 
close 
hei 
hvi 











close 
close 
open 
open 
safe run 
safe run big step operational semantics bn bn closed types open code types coexist key point clarify modalities fl interact 
basic idea bn model model category structure fl model parameterized formalize notion parameterization introduce auxiliary definition definition fp functor simple indexed fp category op cat defined follows ffl jd delta jdj delta fx theta 
ffl composition fx theta gi fx theta identity second projection fx theta ffl substitution functor delta delta ffi ff theta id 
called simple action objects substitution functor identity 
proposition simple indexed category definition ffl finite products ffl exponentials theta provided ccc ffl simple comprehension ga provided fp adjunction 
definition bn model ccc fp adjunction oe indexed full faithful ccc functor ae intuitively category closed universe actual evaluation takes place open universe define symbolic evaluation 
functor says closed universe embeds open key data defining parameterization mainly write functor corresponding isomorphism categories furthermore write na jd jdj action objects maps functors nx independent pattern interpreting bn fl bn splitting contexts type interpreted object hti fp comonad induced term fx ji mg interpreted map 
bn model supports cross stage persistence restricted class types including closed types possibility executing closed code 
proposition cross stage persistence bn model canonical map fx proof natural isomorphisms note adjunction fx fy definition fy nx full faithful nx ccc functor definition fx define fx map corresponding identity fx general iso 
proposition compile bn model canonical iso compile gna ga proof natural isomorphisms ga fx definition nx full faithful na nx ccc functor na definition fx na gna define compile gna ga map corresponding identity gna gna inverse compile map corresponding identity ga ga examples give examples bn models parameterized category making explicit additional structure properties needed instance 
example define categories action objects functors example set naturals 
ccc indexed products take ffl delta delta object jdj sequence map sequence bn jn 
ffl na delta terminal object ffl fx delta jn sequence constantly ga delta exponentials defined pointwise terms exponentials 
example op category natural numbers reverse order oe oe ccc finite op limits take ffl delta delta op map amounts commuting diagram oe oe oe bn fn oe bn fn object sequence maps ffl na delta map ffl fx delta id jn sequence constantly id ga delta lim 
op exponentials defined pointwise existence exponentials finite limits ensures exponentials finite limits 
model natural transformation na delta delta provides cross stage persistence arbitrary types 
give example fl model fails bn model 
precisely structure bn model indexed functor fails full faithful iso compile gna ga proposition 
example ccc finite limits take ffl delta op delta ffl na delta terminal object ffl fx delta xn forget maps xn xn xn ga delta obvious projection ga 
ga gamma delta ffi gamma delta gamma gamma ba gamma delta ffi nba gamma hti bna gamma safe run delta ffi ba gamma theta gamma delta ffi gamma ba gamma open delta ffi gamma gamma hei hti delta na gamma hti na gamma delta gamma gamma gamma delta ffi hf gamma ba fx jig ba gamma close delta close ffi hf jii ba delta gamma delta delta delta 
pure interpretation bn models action nx maps sends na nb theta gn xn theta xn theta id xn theta fn bn easy see nx ccc functor fails full faithful xn isos equivalently epis split monos 
fact xn epi exist jaj xn ffi xn ffi xn show nx faithful nx nx fm xm theta fn xm theta hand xn split mono show nx full gm xm theta gn xn theta xn interpretation terms interpretation types bn model computational effects hti section gives corresponding interpretation terms 
doing introduce auxiliary maps simplify definition interpretation clarify similarities interpretation simply typed calculus ccc 
op define delta op exploit preserves finite products 
ffl preserves ccc structure iso ffl delta eval theta preserves ccc structure iso instance evaluation eval theta ffl delta ffl ba ffl ba unit monad ffl close delta bf ffi ffi ba bc ba ffi ba comultiplication exploit preserve finite products 
ffl ba ba ba nba map proposition 
ffl delta compile bna ba compile gna ga iso proposition 
defines interpretation formed term gamma induction typing derivation type system 
modalities monads simplified interpretation bn multi stage sub languages absence computational effects 
interpretation analog interpretation simply typed calculus ccc 
interested multi stage programming languages mini ml mini ml fl metaml logical modalities coexist computational effects :10.1.1.16.4975:10.1.1.28.4059
section define monadic bn models give monadic cbv interpretation bn models extending interpretation sketched :10.1.1.41.840
definition monadic bn model consists bn model equipped ffl strong monad canonical map mnb 
mnb na iso call mnb na mnb inverse ffl strong natural transformation oe bma mba respecting structure strong monad fp comonad ma bm oe oe ba ffl bma ffl oe mba bma oe mba ffi bj ma ffi boe oe mb ba intuition strong monad models conventional computations level 
staged computations achieved alternation define type mna staged computations type mn ma 
general mn monad natural transformations induce natural transformations jn mna mna 
iso mnb na mnb refines iso nb na nb corresponding preservation exponentials essential define interpretation abstraction level define analog mb theta ma mb mn mnb theta mna mnb 
natural transformation oe bma mba properties intuitively justified follows 
think ba subset values type free dynamic variables oe saying computation free dynamic variables guaranteed return value free dynamic variables 
oe essential interpreting safe run close 
example fails extend monadic bn model monads simple lifting oe exists 
extend bn model example example strong monad ffl preserves pullbacks commuting square mb pullback delta delta ret fx ffl preserves op limits induced strong monad op ma delta ma oe ma ma man oe man man satisfies additional requirements having monadic bn model ffl property ensures existence iso mnb na mnb exponentials op computed exponentials pullbacks ffl second property allows define natural transformation oe bma mba iso corresponding preservation op limits monads category cpos lifting satisfy additional properties required example monad transformers adding global state exceptions preserve properties 
monads fail satisfy additional properties notably powerdomains continuations 
interpretation types 
type interpreted usual object hti nm monadic bn model term fx ji mg interpreted map mn 
interpretation refinement interpretation section recovered replacing identity monad extends monadic cbv interpretation simply typed calculus ccc strong monad 
auxiliary maps 
introduce auxiliary maps see notation similar section 
op mb define op mna mnb induction ma op mb mn mn mna mn ma ji delta ret ji exploit preserves finite products 
ffl jn mna induction ma mn mn ma unit monad ffl mnb mn mb induction mb mb mn mn mnb mnn mn mb ffl delta eval mn mb theta mna mnb eval mb theta mb evaluation 
ffl delta mn ffl mna ffl ba unit ffl close delta oe ffi bf ffi ffi ba mc ffi ba comultiplication exploit preserves finite products 
ffl delta ffi mn ba ba nba map proposition 
ffl delta oe ffi compile compile gna ga iso proposition 
interpretation terms 
defines interpretation formed term gamma induction typing derivation type system 
discussion searching categorical semantics metaml benefited number ways ffl suggested simplifications extensions 
simplified type system metaml proposed extension closed code types called aim see 
bn result simplification aim associated model 
ffl explaining multi stage languages terms primitive concepts logical modalities sense modalities characterized universal properties computational monads 
shown simple interaction modalities models accounts execution closed code 
pointed kinds computational effects expected integrate easily multi stage languages 
bn compared aim aim idealized metaml extends metaml analog box type yielding expressive language simpler typing judgment metaml 
shown embed languages aim 
bn viewed cut version aim believe sufficiently expressive purposes multi stage programming 
closed type constructor bn essentially strict version box type constructor aim 
aim box construct delayed argument 
programmer meant code gamma delta ffi mn gamma delta jn ffi mna gamma gamma mn ba gamma delta ffi mn ba gamma hti mn gamma safe run delta ffi mn ba gamma theta mnb gamma delta ffi mn mb gamma mn ba gamma open delta ffi mna gamma mn gamma hei hti delta mn nma gamma hti mn nma gamma delta mn gamma mn mb gamma mna gamma delta ffi hf mnb gamma mn ba fx jig ba ma gamma close delta close ffi hf jii mn ba delta gamma delta delta delta 
monadic interpretation bn models types 
causes confusion point view multi stage programming manipulating values type hai read closed code open code 
cumbersome reading harder programmer reason computations performed 
bn pragmatic decision closed delay argument types hai read simply closed code 
words propose necessity modality asserting closedness delaying evaluation 
difference aim superset languages studied fl metaml bn 
shown fl embedded open fragment aim closed fragment 
establishes strong relation closed code open code types aim necessity modalities modal temporal logic 
embedding fl aim turned embedding bn embedding needs modified take account fact closed bn strict delay evaluation argument 
hand embedding metaml aim adapted reasons 
bn full cross stage persistence 
having cross stage persistence simplifies model 
time pragmatic point view cross stage persistence closed types sufficient 
bn run 
able find general categorical interpretation construct shows interpret run op time pragmatic need run disappears presence safe run 
acknowledgment 
members comments different drafts 
referees suggestions corrections 
benaissa moggi taha sheard 
categorical analysis multi level languages extended 
technical report cse oregon graduate institute december 
ftp cse ogi edu pub tech reports 
benton 
mixed linear non linear logic proofs terms models 
lncs 
benton wadler 
linear logic monads lambda calculus 
th lics new brunswick new jersey july 
ieee computer society press 
davies :10.1.1.16.4975
temporal logic approach bindingtime analysis 
th lics new brunswick new jersey july 
ieee computer society press 
davies pfenning :10.1.1.28.4059
modal analysis staged computation 
rd popl st petersburg beach florida january 
martini masini 
computational interpretation modal proofs 
wansing editor proof theory modal logic 
kluwer 
masini 
sequent calculus intuitionism natural deduction 
journal logic computation 
moggi :10.1.1.41.840
notions computation monads 
information computation 
moggi 
categorical account level languages 
mfps 
moggi taha benaissa sheard 
idealized metaml simpler expressive includes proofs 
technical report cse oregon graduate institute october 
ftp cse ogi edu pub tech reports 
moggi taha benaissa sheard 
idealized metaml simpler expressive includes proofs 
european symposium programming esop volume lncs 
springer verlag 
reyes 
topos theoretic approaches modalities 
carboni rosolini editors conference category theory volume lnm 
springerverlag 
taha 
multi stage programming theory applications 
phd thesis oregon graduate institute science technology june 
appear 
taha benaissa sheard 
multi stage programming axiomatization type safety 
th icalp aalborg denmark 
taha sheard 
multi stage programming explicit annotations 
pepm 
acm 
taha sheard :10.1.1.17.4285
metaml multi stage programming explicit annotations 
technical report cse oregon graduate institute january 
ftp cse ogi edu pub tech reports 
delta gamma delta gamma delta gamma delta gamma delta gamma delta delta gamma box delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma box type system gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma hei hti gamma hti gamma fl type system gamma gamma gamma hti gamma run metaml type system gamma gamma gamma gamma fx ji mg hti gamma run gamma fx ji mg gamma box gamma gamma unbox aim type system 





hvi 

box 
box 
box 
unbox 


hv 
run 

hei 
hvi 





box 
box 




unbox 
unbox 

run 
run big step operational semantics aim including fl metaml multi stage languages completeness appendix reproduces syntax type system multi stage languages fl metaml aim see details 
adopt unified notation types hti base types functions open code fragments closed code fragments 
features function closed code types :10.1.1.28.4059
typing judgments form delta gamma delta gamma fx ji mg 
syntax follows box box type system 
fl metaml aim feature function open code types 
typing judgments form gamma gamma fx ji mg natural called level term 
syntax fl follows hei metaml uses relaxed type rule variables fl variables bound level lower level 
called cross stage persistence 
furthermore metaml extends syntax fl hei run aim extends metaml analog box type yielding expressive language simpler typing judgment metaml 
syntax aim extends metaml follows hei run fx ji mg box fx ji mg unbox run generalizes run metaml allows additional variables body satisfy certain typing requirements 
type systems fl metaml aim big step operational semantics aim sub languages 
technical lemmas state technical lemmas bn adaptations established aim 
needed establish subject reduction 
properties type system lemma weakening gamma gamma fresh gamma gamma proposition substitution gamma gamma gamma gamma gamma proof induction derivation judgment gamma gamma second properties operational semantics lemma values 



proof induction derivation second induction derivation 
bn define demotion aim 
problem demotion lemma case run subject reduction aim 
proposition reflection 
gamma gamma 
gamma gamma proof induction derivation gamma case analysis second induction derivation gamma lemma orthogonality gamma proof trivial definition values 
theorem type preservation gamma 
gamma proof induction derivation 
case application uses substitution 
case involves orthogonality reflection weakening addition applying induction hypothesis 
case safe run involves reflection 
example section illustrate multi stage programming approach subsection 
apply approach power function defined recursively follows int 
real 
real fun exp sqr exp div exp real 
real fun sqr develop example metaml show limitations type system building executing code combined function 
develop example bn showing problems overcome 
examples written sml syntax extended multi stage annotations 
metaml 
annotating function exp staging annotations requires analysis program respect static dynamic computations 
annotations distinguish computations performed static argument static computations computations need delayed stage dynamic computations 
program reformulated improve quality generated program 
instance function sqr rewritten order avoid code duplication 
int 
real 
real 
fun exp 
sqr exp div exp 
real 
real 
fun sqr val 

third step consists composition functions back sqr 
function back polymorphic metaml system extended support hindley milner polymorphism 
extension scope 




fun back fn 

int 
real 
real 
fun exp back exp 
specialize function exp specific exponent case 
generated code pretty printed metaml system 
real 
real 
val exp val fn 
val val 

unfortunately power defined typed core metaml type system run construct disallows free variables exp 
metaml system type power ad hoc extension type system specially designed top level real 
real val power run exp cut paste generated code allows run 
obtain function power type real 
real 
real 
real val power run fn 
val val 
int 
real 
real fun power run exp function power expressed metaml system free variable exp 
power composes specialization program argument execution specialized code second argument 
metaml fails provide desirable functions multi stage programming language 
bn 
annotating function exp bn similar metaml bit tedious metaml 
need tell type system functions sqr exp closed 
note exp uses function needs closed type order closed expression 
int 
real 
real 
val exp close val open fun sqr val 
fun exp 
sqr exp div exp 
exp 
step similar metaml 
bn need compose closed functions 
combinators closed compose type 




composition 
int 
real 
real 
val exp exp fun close val open val open fn 

step consists distribution close type order extract static argument 
int 
real 
real 
val exp exp 


fun fn 
close val open val open 
apply static argument :10.1.1.28.4059
specialized code result application 
real 
real 
val exp val fn :10.1.1.28.4059
val val 

execute code safe run construct 
result execution function type real 
real 
real 
real val exp :10.1.1.28.4059
forget closed power closed open construct 
real 
real val power open int 
real 
real val power open exp contrast metaml power expressed bn specializes program exponent executes specialized program second argument 
conclude combination construction execution code function major contribution bn metaml 
price achieving combination bit cumbersome syntactic sugar 
contents multi stage programming 
refined method 
overview 
multi stage languages bn types syntax semantics 
categorical models examples 
interpretation terms 
modalities monads discussion bn compared aim 
multi stage languages technical lemmas example metaml 
bn 

