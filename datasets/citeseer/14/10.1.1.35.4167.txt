saltzer arguments system design arguments system design saltzer reed clark laboratory computer science presents design principle helps guide placement functions modules distributed computer system 
principle called argument suggests functions placed low levels system may redundant little value compared cost providing low level 
examples discussed include bit error recovery security encryption duplicate message suppression recovery system crashes delivery 
low level mechanisms support functions justified performance enhancements 
choosing proper boundaries functions primary activity computer system designer 
design principles provide guidance choice function placement important tools system designer 
discusses class function placement argument years explicit recognition conviction 
emergence data communication network computer system component sharpened line function placement argument making apparent situations reasons applies 
articulates argument explicitly examine nature see general really argument appeals application requirements provides rationale moving function upward layered system closer application uses function 
considering communication network version argument 
system includes communications usually draws modular boundary communication subsystem defines firm interface rest system 
doing apparent list functions implemented ways communication subsystem client joint authors addresses saltzer clark laboratory computer science technology square cambridge massachusetts reed software arts mica lane wellesley massachusetts 
research supported part advanced research projects agency department defense monitored office naval research contract number 
revised version second international conference distributed computing systems paris france april pp 
copyright institute electrical electronics engineers reprinted permission 
published acm transactions computer systems november pages 
reprinted craig partridge editor innovations internetworking 
artech house norwood ma pages 
isbn 
scheduled reprinted amit bhargava editor 
integrated broadband networks 
artech house boston 
isbn 
scribe source web mit edu saltzer www publications saltzer arguments system design venture redundantly doing version 
reasoning choice requirements application provide basis class arguments go follows function question completely correctly implemented knowledge help application standing points communication system 
providing questioned function feature communication system possible 
incomplete version function provided communication system may useful performance enhancement 
call line reasoning low level function implementation argument 
sections examine argument detail case study typical example function question reliable data transmission exhibiting range functions argument applied 
case data communication system range includes encryption duplicate message detection message sequencing guaranteed message delivery detecting host crashes delivery receipts 
broader context argument apply functions computer operating system including file system 
examination broader context easier consider specific data communication context 
consider problem careful file transfer 
file stored file system disk storage computer computer linked data communication network computer file system disk store 
object move file computer storage computer storage damage face knowledge failures occur various points way 
application program case file transfer program part runs host part host order discuss possible threats file integrity transaction assume specific steps involved 
host file transfer program calls file system read file disk resides tracks file system passes file transfer program fixed size blocks chosen disk format independent 

host file transfer program asks data communication system transmit file communication protocol involves splitting data packets 
packet size typically different file block size disk track size 

data communication network moves packets computer computer 
host data communication program removes packets data communication protocol hands contained data second part file transfer application part operates host 
host file transfer program asks file system write received data disk host model steps involved threats transaction careful designer concerned 
file originally written correctly disk host read may contain incorrect data hardware faults disk storage system 

software file system file transfer program data communication system mistake buffering copying data file host host 
hardware processor local memory transient error doing buffering copying host host 
communication system drop change bits packet lose packet deliver packet 
saltzer arguments system design 
hosts may crash part way transaction performing unknown amount transaction 
careful file transfer application cope list threats 
approach reinforce steps way duplicate copies timeout retry carefully located redundancy error detection crash recovery goal reduce probability individual threats acceptably small value 
unfortunately systematic countering threat requires writing correct programs task quite difficult programs correct written file transfer application programmer 
assume threats relatively low probability low system allows useful accomplished brute force countermeasures doing times appear 
alternate approach called check retry 
suppose aid coping threat number stored file checksum sufficient redundancy reduce chance undetected error file acceptably negligible value 
application program follows simple steps transferring file final additional step part file transfer application residing host reads transferred file copy back disk storage system memory recalculates checksum sends value back host compared checksum original 
checksums agree file transfer application declare transaction committed 
comparison fails went wrong retry attempted 
failures really fairly rare technique normally try occasionally second third try required probably consider failures file transfer attempt indicating part system need repair 
consider usefulness common proposal communication system provide internally guarantee reliable data transmission 
accomplish guarantee providing selective redundancy form packet checksums sequence number checking internal retry mechanisms example 
sufficient care probability undetected bit errors reduced desirable level 
question attempt helpful part communication system useful careful file transfer application 
answer threat number may eliminated careful file transfer application counter remaining threats provide retries checksum file 
extra effort expended communication system provide guarantee reliable data transmission reducing frequency retries file transfer application effect inevitability correctness outcome correct file transmission assured checksum retry data transmission system especially reliable 
argument order achieve careful file transfer application program performs transfer supply file transfer specific reliability guarantee case checksum detect failures retry commit plan 
data communication system go way extraordinarily reliable reduce burden application program ensure reliability 
real example interesting example pitfalls encounter turned network system involving local networks connected gateways packet checksum hop gateway assumption primary threat correct communication corruption bits transmission 
application programmers aware saltzer arguments system design checksum assumed network providing reliable transmission realizing transmitted data unprotected stored gateway 
gateway computer developed transient error copying data input output buffer byte pair interchanged frequency interchange bytes passed 
period time source files operating system repeatedly transferred defective gateway 
source files corrupted byte exchanges owners forced ultimate error check manual comparison correction old listings 
performance aspects simplistic conclude lower levels play part obtaining reliability 
consider network somewhat unreliable dropping message messages sent 
simple strategy outlined transmitting file checking see file arrived correctly perform poorly length file increases 
probability packets file arrive correctly decreases exponentially file length expected time transmit file grows exponentially file length 
clearly effort lower levels improve network reliability significant effect application performance 
key idea lower levels need provide perfect reliability 
amount effort put reliability measures data communication system seen engineering tradeoff performance requirement correctness 
note performance aspects 
communication system unreliable file transfer application performance suffer frequent retries failures checksum 
communication system internal reliability measures measures performance cost form bandwidth lost redundant data delay added waiting internal consistency checks complete delivering data 
little reason push direction far considered check file transfer application implemented matter reliable communication system 
proper tradeoff requires careful thought example start designing communication system provide just reliability comes little cost engineering effort evaluate residual error level insure consistent acceptable retry frequency file transfer level 
probably important strive negligible error rate point application level 
performance justify placing functions low level subsystem done carefully 
examining problem thoroughly better performance enhancement achieved high level 
performing function low level may efficient function performed minimum perturbation machinery included low level subsystem just opposite situation occur performing function lower level may cost reasons 
lower level subsystem common applications applications need function pay anyway 
second low level subsystem may information higher levels job efficiently 
frequently performance tradeoff quite complex 
consider careful file transfer unreliable network 
usual technique increasing packet reliability sort error check retry protocol 
mechanism implemented communication subsystem careful file transfer application 
example receiver careful file transfer periodically compute checksum portion file far received transmit back sender 
sender restart retransmitting portion arrived error 
saltzer arguments system design argument tell put early checks layer performance enhancement job 
placing early retry protocol file transfer application simplifies communication system may increase cost communication system shared applications application provide reliability enhancement 
placing early retry protocol communication system may efficient may performed inside network hop hop basis reducing delay involved correcting failure 
time may application finds cost enhancement worth result choice matter great deal information system implementation needed choice intelligently 
examples argument delivery guarantees basic argument lower level subsystem supports distributed application may wasting effort providing function nature implemented application level anyway applied variety functions addition reliable data transmission 
oldest widely known form argument concerns delivery 
data communication network easily return sender message delivered recipient 
arpanet example returns packet known request message delivers message 
may useful network form congestion control originally arpanet refused accept message target previous returned helpful applications arpanet 
reason knowing sure message delivered target host important 
application wants know target host acted message manner disaster struck message delivery completion action requested message 
really desired toend originated target application didn strategy obtaining immediate target host sophisticated accepts delivery message accepts responsibility guaranteeing message acted target application 
approach eliminate need applications 
endto required applications action requested target host done similar actions requested hosts successful 
kind application requires phase commit protocol sophisticated endto :10.1.1.161.1376
target application may fail refuse requested action negative possible outcome may requirement 
secure transmission data area argument applied data encryption 
argument threefold 
data transmission system performs encryption decryption trusted manage securely required encryption keys 
second data clear vulnerable passes target node target application 
third authenticity message checked application 
application performs encryption obtains required authentication check example real time transmission speech tighter constraints message delay bit error rate 
retry schemes significantly increase variability delay 
saltzer arguments system design handle key management satisfaction data exposed outside application 
satisfy requirements application need communication subsystem provide automatic encryption traffic 
automatic encryption traffic communication subsystem may called ensure misbehaving user application program deliberately transmit information exposed 
automatic encryption data put network firewall system designer ensure information escape outside system 
note different requirement authenticating access rights system user specific parts data 
network level encryption quite unsophisticated key hosts frequent changes key 
user keys complicate key management problem 
encryption applicationlevel authentication protection complementary 
mechanism satisfy requirements completely 
duplicate message suppression sophisticated argument applied duplicate message suppression 
property communication network designs message part message may delivered twice typically result time triggered failure detection retry mechanisms operating network 
network provide function watching suppressing duplicate messages simply deliver 
expect application find troublesome cope network may deliver message twice troublesome 
unfortunately network suppresses duplicates application may accidentally originate duplicate requests failure retry procedures 
application level duplications look different messages communication system suppress suppression accomplished application knowledge detect duplicates 
common example duplicate suppression handled high level remote system user puzzled lack response initiates new login time sharing system 
example communication applications involve provision coping system crash multi site transaction reestablish transaction crashed system comes 
unfortunately reliable detection system crash problematical problem may just lost long delayed 
retried request duplicate application discover 
argument application level duplicate suppressing mechanism anyway mechanism suppress duplicates generated inside communication network function omitted lower level 
basic reasoning applies completely omitted messages duplicated ones 
guaranteeing fifo message delivery ensuring messages arrive receiver order sent function usually assigned communication subsystem 
mechanism usually achieve fifo behavior guarantees fifo ordering messages sent virtual circuit 
messages sent independent virtual circuits intermediate processes outside communication subsystem may arrive order different order sent 
distributed application node originate requests initiate actions sites take advantage fifo ordering property guarantee actions requested occur correct order 
independent mechanism higher level communication subsystem control ordering actions 
saltzer arguments system design transaction management applied argument construction swallow distributed data storage system leads significant reduction overhead 
swallow provides data storage servers called repositories remotely store retrieve data 
accessing data repository done sending message specifying object accessed version type access read write plus value written access write 
underlying message communication system suppress duplicate messages object identifier plus version information suffices detect duplicate writes effect duplicate read request message generate duplicate response easily discarded originator 
consequently low level message communication protocol significantly simplified 
underlying message communication system provide delivery 
originator write request needs data stored safely 
provided high levels swallow system 
read requests delivery redundant response containing value read sufficient 
eliminating delivery number messages transmitted halved 
message reduction significant effect host load network load improving performance 
line reasoning development experimental protocol remote access disk records 
resulting reduction path length lower level protocols important maintaining performance remote disk access 
identifying ends argument requires subtlety application requirements 
example consider computer communication network carries packet voice connections conversations digital telephone instruments 
connections carry voice packets unusually strong version argument applies low levels communication system try accomplish bit perfect communication probably introduce uncontrolled delays packet delivery example requesting retransmission damaged packets holding delivery packets earlier ones correctly retransmitted 
delays disruptive voice application needs feed data constant rate listener 
better accept slightly damaged packets replace silence duplicate previous packet noise burst 
natural redundancy voice high level error correction procedure participant says excuse dropped glass 
please say handle relatively infrequent 
strong version argument property specific application people real time conversation property say speech general 
considers speech message system voice packets stored file listening recipient arguments suddenly change nature 
short delays delivery packets storage medium particularly disruptive longer objection low level reliability measures introduce delay order achieve reliability 
important helpful application get accuracy possible recorded message recipient time listening recording going able ask sender repeat sentence 
hand storage system acting receiving voice communication argument apply packet ordering duplicate suppression 
argument absolute rule guideline helps application protocol design analysis care identify points argument applied 
saltzer arguments system design history application system areas individual examples arguments cited original accumulated years 
example questionable intermediate delivery noticed authors wait message compatible time sharing system system printed user terminal user entered command 
message value early days system crashes communication failures frequent intermediate provided needed 
argument relating encryption publicly discussed presumably military security community held classified discussions time 
diffie hellman kent develop arguments depth needham schroeder devised improved protocols purpose 
phase commit data update protocols gray lampson sturgis reed form argument justify existence protocols depend correctness reliability fifo sequencing duplicate suppression communication system problems may introduced system component failures :10.1.1.161.1376
reed argument explicitly second chapter ph thesis decentralized atomic actions 
arguments applied error control correctness application systems 
example banking system usually provides high level auditing procedures matter policy legal requirement 
high level auditing procedures uncover highlevel mistakes performing withdrawal wrong account detect low level mistakes coordination errors underlying data management system 
costly algorithm absolutely eliminates coordination errors may arguably appropriate costly algorithm just errors rare 
airline reservation systems agent relied keep trying system crashes delays reservation confirmed refused 
lower level recovery procedures guarantee unconfirmed request reservation survive system crash vital 
telephone exchanges failure cause single call lost considered worth providing explicit recovery caller probably replace call matters design approaches examples argument applied automatic recovery 
debate network protocol community datagrams virtual circuits connectionless protocols debate arguments 
modularity argument prizes reliable fifo sequenced duplicate suppressed stream data system component easy build argument favors virtual circuits 
argument claims centrally provided versions functions incomplete applications applications find easier build version functions starting datagrams 
version argument non communication application developed system analysts responsibility included reading writing files large numbers magnetic tape 
repeated attempts define implement reliable tape subsystem repeatedly tape drives system operators system crashes narrowly focused reliability measures 
eventually standard practice application provide application dependent checks recovery strategy assume lower level error detection mechanisms best reduced frequency higher level checks failed 
example multics file backup system built foundation magnetic tape subsystem format saltzer arguments system design provides powerful error detection correction features provides error control form record labels multiple copies file 
arguments support reduced instruction set computer risc architecture similar arguments 
risc argument client architecture get better performance implementing exactly instructions needed primitive tools attempt computer designer anticipate client requirements esoteric feature probably target slightly client reimplementing feature anyway 
indebted satyanarayanan pointing example 
lampson arguments supporting open operating system uses argument similar argument justification 
lampson argues making function permanent lower level modules function may provided lower level module replaceable application special version function 
reasoning function think applications find necessity implement function order meet correctly requirements 
line reasoning leads lampson propose open system entire operating system consists replaceable routines library 
approach feasible context computers dedicated single application 
may case large quantity fixed supervisor function typical large scale operating systems artifact economic pressures demanded multiplexing expensive hardware protected supervisor 
system projects fact focused part getting function low system levels 
function movement inspired different kind correctness argument side effect producing operating system flexible applications exactly main thrust argument 
arguments kind occam razor comes choosing functions provided communication subsystem 
communication subsystem frequently specified applications subsystem known designer may tempted help users function necessary 
awareness arguments help reduce 
fashionable days talk layered communication protocols clearly defined criteria assigning functions layers 
desirable enhance modularity 
arguments may viewed part set rational principles organizing layered systems 
hope discussion help add substance arguments proper layering 
people read commented earlier draft including david cheriton schneider 
subject discussed acm workshop fundamentals distributed computing california december 
comments discussions quite helpful clarifying arguments 
saltzer arguments system design 
bolt beranek newman specifications interconnection host imp 
technical report cambridge mass december 

security aspects computer networks 
aiaa aiaa computer network systems conference huntsville alabama april 

compatible time sharing system programmer guide 
press cambridge massachusetts 

diffie hellman new directions cryptography 
ieee trans 
info 
theory november pp 

gray notes database operating systems 
operating system advanced course 
volume lecture notes computer science springer verlag pp 

greenwald remote virtual disk protocol specifications 
laboratory computer science technical memorandum preparation 
expected publication 

vaughan ess system organization objectives 
bell system technical journal part september 

kent encryption protection protocols interactive user computer communication thesis massachusetts institute technology department electrical engineering computer science may 
available laboratory computer science technical report tr may 

lampson sproull open operating system single user machine 
proc 
seventh symposium operating systems principles operating systems review special issue december pp 

lampson sturgis crash recovery distributed data storage system 
working xerox parc november april 
submitted cacm 

needham schroeder encryption authentication large networks computers 
cacm december pp 

popek ucla data secure unix 
proc 
ncc afips press pp 

reed implementing atomic actions decentralized data 
acm transactions computer systems february pp 

reed naming synchronization decentralized computer system 
ph thesis massachusetts institute technology department electrical engineering computer science september 
available laboratory computer science technical report tr september 

reed swallow distributed data storage system local network 
west janson ed 
local networks computer communications proc 
ifip working group international workshop local networks 
north holland amsterdam pp 

schroeder clark saltzer multics kernel design project 
proc 
sixth symposium operating systems principles operating systems review november pp 

stern backup recovery line information computer utility 
thesis department electrical engineering computer science august 
available project mac technical report tr january 
