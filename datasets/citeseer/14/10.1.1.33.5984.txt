issues java operating system rui li shi department computer science university british columbia safe language technology protection single address space new idea operating system area 
java popular researches type safety feature java alternative hardware protection systems 
safe language sufficient provide similar protection traditional operating systems 
related research compare different approaches extending java protection mechanism try analyze tradeoffs 

safe language technology utilized operating system years 
alternative hardware protection software protection flexible efficient 
protection enforced language type checking mechanism executed dynamically statically 
operating systems implemented safe languages pilot spin software protection advantages comparing hardware protection 
portability 
protection language platform independent long language supported hardware hardware protection coupled tightly hardware lower level 
secondly software protection offer cheaper cross domain calls overhead crossing boundary checked hardware 
cross domain call user space system space great influence system performance 
researches focused minimizing overhead caused 
java safe languages achieved great success years 
success java stimulates researches utilizing java language 
write run feature java portable languages 
result protection important issue java 
security system jvm isolate applications 
protection issue java lacks essential features traditional operating systems resource management support domain termination issue enhancing protection greatly undermine performance inter process communication 
rest survey organized section discusses issues safe language operating systems 
section compares different implementations java operating systems 
section lists different approaches extending security architecture java 
section gives simple summary 

issues safe language operating system claimed back protection software issue software issue 
support hardware operating system solely relying safe language useful robust traditional operating systems lack important issues took granted traditional systems 
advises explicitly red line user mode kernel mode 
papers discuss related issues protection resource management communication clearly concept red line 
protection type safe language java provides protection directly processes write arbitrary locations memory object unforgeable 
process abstraction java 
result standard java systems readily support multiprogramming 
hand java support abstraction name space 
name space provides protection domain software components 
construct protection domain similar process traditional systems 
process denote protection domain safe language operating systems 
section discuss security issue java detail 
resource management back divide problems resource management related subproblems resource accounting ability track resource usage 
resource reclamation ability reclaim process resources terminates 
resource allocation ability allocate resources processes way allow processes violate imposed resource limits 
main issues resource management memory cpu network 
memory sharing models processes share data copying 
feasible way communication address spaces shared process copy data needed process 
memory accounting process termination straightforward way efficient especially shared object objects 
direct sharing 
supported java processes directly supported processes 
approach efficient copying process termination resource reclamation greatly complicated system support direct sharing 
process reclaim shared object processes 
java supports ways provide protection shared objects selective sharing object 
java process share objects wants share processes 
static access control 
object private protected public indicate fields wants share objects 
selective class sharing 
processes want share object share view class object instantiates 
class loaders process classes visible processes hiding 
indirect sharing 
alternative object shared proxy object contains pointer 
system ensures client way extract direct object pointer proxy 
indirect sharing efficient direct sharing efficient copying cases 
advantage resource reclamation easy 
system allows sharing direct indirect resource accounting complex difficult judge charge process exports object processes import 
cpu system able account accurately cpu time consumed thread prevent threads exceeding assigned cpu limits preempting 
issue easy garbage collection mechanism java things complicated standard java global garbage collector considered part kernel garbage collections charge users 
malicious process trigger garbage collections frequently slow processes 
solution charge processes garbage collection 
preempting terminating thread holds system lock lead priority inversion consistency deadlock problems 
system able protect critical sections operations 
network bandwidth bandwidth resource traditional operating systems control explicitly 
network centric nature java network bandwidth desirable resource control 
active network causes research bandwidth management java 
communication see tradeoff protection resource management communication 
problem provide efficient ways communication processes harm security system 
discussed related issues section 
termination integrity system harmed process terminated 
system guarantee process terminated critical sections 
systems provide mechanism defer termination requests 
system able reclaim resources process terminates 
red line argues user kernel boundary issues solved thoroughly 
example boundary kernel access physical resources machine enforces resource limits user processes 
way resource control easier 
kernel responsible ensure communication mechanisms subject constraints imposed protection resource control termination 

case study compare different java operating systems kernel gvm alta 
operating system developed cornell university written entirely java 
gvm alta come university utah 
provide powerful protection tradeoff protection resource management communication resource management gvm modifies part jvm 
alta extended jvm provide interfaces defined jvm specification 
kernel gvm alta user level library jvm implementation level systems kernel java micro kernel supports multiple protection domains 
gvm traditional monolithic kernel oriented complete resource isolation processes 
alta provides hierarchical process model system api model provided fluke micro kernel 
protection kernel protection domain task implemented class loaders class resolvers invoked 
tasks run separate name spaces share objects directly 
similar process traditional systems point 
task specify classes subtask allowed access task control subtasks 
similar kernel gvm relies class loaders provide different processes separate name spaces 
gvm partitions java heap process associated heap 
alta process manage resources child processes 
user level process alta similar dedicated virtual machine 
alta permits sibling processes share objects directly 
cross domain communication shared classes basis cross domain communication kernel 
standard java security architectures allow system classes shared different name space 
kernel task explicitly class sharable tasks view class 
parameters return value cross domain call object shared class passed deep copy capability implements shared remote interface passed 
implementation capabilities kernel borrows ideas sun rmi 
capability local rmi stub implements interface shared object 
capability contains pointer shared object marshals parameters calls shared object ways parameter capability passes passes deep copy 
deep copy standard serialization method java default fast copy method special classes 
gvm aims complete resource isolation processes way communication system heap 
kernel objects shared classes shared data reside system heap 
task wants share object tasks needs allocate object system heap 
write barrier prevent passing illegal cross heap 
cross domain communication alta done ipc system half duplex reversible client server connection threads 
sharing permitted final classes 
restrictive considering alta lower layer core alta classes meet requirement 
resource management written entirely java kernel lacks support resource management lower layer jvm 
result resource management mechanism kernel limited 
kernel rewrites bytecode constructors charge credit memory usage 
nt version kernel kind control cpu network usage kernel device driver custom dll 
process heap memory management gvm easier comparatively 
gvm uses technology distributed garbage collector separate garbage collection individual heaps 
combining thread group hierarchy cpu inheritance scheduling gvm allows process scheduler may implement policy schedule threads process thread groups processes may hierarchically schedule threads belonging 
way gvm easily handle cpu accounting 
intended testbed active networks gvm incorporates hierarchical scheduling framework 
alta supports memory management explicitly simple allocator pays scheme 
garbage collector credits owning process object eventually reclaimed 
similar gvm cpu time controlled cpu inheritance scheduling model 
alta provide access control network kernel external server process 

termination capability kernel capabilities exported task explicitly revoked task terminates 
attempt access capabilities throw capability shared class gvm kernel alta system heap process finalized class cross domain communication exception 
kernel substitutes thread java caller suspend thread call callee maliciously 
process gvm associated heap share resources processes system heap task termination influence processes 
alta supports clean thread process termination preventing threads terminated executing critical system code 

extensible security architecture java worth studying java oss aspect methodology 
implementation strategies introduced adapted capabilities java extensions java stack introspection name space management 
adopting capability model java quite natural 
fundamentally capability unforgeable pointer controlled system resource 
java capability simply object 
java safety prevents object forged 
capability just java object object implement security policy checking arguments passing private internal methods 
idea stack introspection simple privilege record attached stack frame procedure calls 
access restricted resource happens privilege check stack frames sure accessing procedure adequate right 
problems solutions approach discussed 
approach name space management security policy enforced controlling names program resolved runtime classes 
java implemented class loader 
approaches pros cons 
table summarizes main points 
table comparison approaches 
capability stack introspect naming space comment economy mechanism simple 
complexity incurred modified control propagation capabilities 
complex changes virtual machine 
simple requires redesigning class loader 
weak point affect critical part jvm bug code open system attack 
stack naming space require complete set classes 
fail safe defaults appropriate capability incomplete modification classes may lead loophole complete mediation unmodified capability system provide confinement privileges 
programs share object system mediation 
extension needed sure sharing trusted program 
extending approach restrict capabilities capabilities shared excellent confinement 
stack annotations directly accessible program 
potentially confinement 
need redesign class library java 
java hide inputstream forbid access file system 
forbid inputstream block networking 
solution modify java class libraries 
accountability need modification capability record principal granted 
call enable privilege logged administrator learn principal enabled privileges damage system 
available 
performance compromise highest run time cost 
quite clear kernel follows adapted capability model 
alta re implemented jvm fall context extensible security architecture discussed 
gvm sharing go system heap shared objects acts kind capability fully relies type safety feature java 
safe language kernel capability system safe language technology 
capability enhanced ways combining type check access right check dynamic protection mechanism 
type capability model augments object access rights derived type object 
combination object access rights forms capability access rights checks generally performed link time 
combining object type capability type capability model limitations unforgeable object powerful traditional capabilities access rights associated object share objects type fixed module basis link time 
overcome limitations provides toolbox dynamic protection mechanisms 
dynamic mechanisms emulate traditional capabilities provide forms authentication 
basic mechanism wrapper 
wrapper object controlling access individual object method basis 
essence wrapper object contains private pointer real object provides public methods invoked real object 
basic wrapper extended check rights dynamically access 
capabilities introducing forms authentication keys capabilities turn 
abstraction protected object placed user appropriate key open protected object 
provide mechanism authentication callee knows identity caller reveal private key 

summary type safe language java provides alternative hardware protection great part check done run time done compiling linking stage 
software protection portable 
security mechanism java powerful traditional operating systems 
features took granted traditional operating systems directly supported java 
provide similar functionality traditional systems java operating system solve problems protection resource management communication papers surveyed java believe applicable safe languages 
alistair veitch norman 
kea system reconciling micro monolithic kernel design 
ford hibler lepreau back 
microkernels meet virtual machines 
processing second osdi pp 
seattle wa oct 
ford 
cpu inheritance scheduling 
processing second osdi pp 
seattle wa oct 
brian bershad stefan savage pardyak gun sirer mark fiuczynski david becker craig chambers eggers 
extensibility safety performance spin operating system 
chris hawblitzel chi chao chang grzegorz czajkowski hu thorsten von eicken 
implementing multiple protection domains java 
proceedings usenix annual technical conference new orleans la june 
chris hawblitzel chi chao chang grzegorz czajkowski hu thorsten von eicken 
capability system safe language technology 
internal memo cornell university 
march 
shapiro 
survey distributed garbage collection techniques 
processing scotland sept 
tennenhouse smith wetherall 
survey active network research 
ieee communications magazine jan 
dan wallach dirk balfanz drew dean edward felten extensible security architectures java proceedings sixteenth acm symposium operating systems principles pages 
david redell pilot operating system personal computer 
th acm symposium operating systems principles 
pacific grove ca 
dec 
dawson engler frans kaashoek toole jr exokernel operating system architecture application level resource management 
back wilson hsieh 
drawing red line java 
processing seventh ieee workshop hot topics operating systems rio rico az march 
back patrick leigh stoller wilson hsieh jay lepreau 
java operating systems design implementation 
technical report uucs university utah august 
javasoft 
remote method invocation specification 
java sun com 
wilson 
uniprocessor garbage collection techniques 
processing st malo france sept 
lepreau 
nested java processes os structure mobile code 
processing eighth acm sigops european workshop sintra portugal sept 
