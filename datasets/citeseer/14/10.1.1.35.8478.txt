approaches pay software construction lucas ferreira ricardo instituto de unicamp postal campinas sp brazil dcc unicamp br marcus poggi dep 
puc rio rua de vicente rio de janeiro rj brazil poggi inf puc rio br ecp inf puc rio br describes architectures building pay run software systems 
systems allow user pay execution application buying expensive user license 
new model software distribution developers charge small fees execution order increase user market 
detail component architectures compare approaches 

internet convenient software distribution media software execution environment 
context free distribution software important issue especially freeware distribution models 
model user authorized distribute software time having buy license 
freeware model allows distribution software systems cost 
novel distribution model gaining momentum user buys license online allowed download system binary code 
current commercial software distribution models internet user licenses buyers pay lifetime license software system penalizing occasional user pay exactly amount heavy users system 
motivates concept pay run pay software allowing occasional users avoid full cost ownership software 
pay run system user pays small license fees time uses software 
consequence cost reduction increase market niche system 
presents different approaches building pay run systems download dynamic download 
approach lets application code permanently stored user computer second tries minimize amount time application code available user computer 
download approach section dynamic download approach section 
section compare solutions conclude 

related literature pay restricted 
java system similarities dynamic download approach 
gives system description software engineering perspective lacks deeper security analysis 
delegates security aspects underlying remote method invocation framework 
give security primary role basis architectures 

download approach section describe pay run system named 
allows developer build application charges tokens features 
users buy tokens start system 
user starts application feature token sent billing server validated execution continues token valid 
process transparent user 
system generates tokens stores database 
user buys uses token server stores user information token database 
token database allows system auditing usage metering 
software developer may implement billing number ways 
flexible way tokens behave cash allowing user run features specific application 
way may require tokens specific ip address allowing stronger control users 
flexibility appears billing strategy charge duration sessions execution features 
architecture system architecture shown 
explain components detail 

token manager sub system supports token related tasks buying token revocation 
responsible managing token database 
single token contain token identifier ip address date bought date token id application token assigned status bought revoked 
token id random number unique token 
users receive id buying token 
system may manage applications concurrently server record application token bought special field prevent usage application allowing vendors set different prices different applications server 

application manager sub system responsible managing application registration system 
mentioned pay run system may provide access applications 
applications registered server maintains lists valid revoked applications 
applications id name registration date status 
status application may registered revoked 

encryption engine messages current system encrypted asymmetric cipher rsa 
encryption engine sub system handles encryption decryption 

system manager sub system responsible receiving user input redirecting user commands subsystems 
server central controller acting sub systems order provide server functionality 

service sub systems download architecture subsystems 
configuration manager responsible managing system configuration 

log manager supports logging important system activities 

user interface provides windows graphical user interface 

message protocol download approach uses simple communication protocol handle user requests server responses 
messages encrypted message exchange consists steps 
user application sends server request packet may purchase request usage request 

server analyzes request sends response packet 
protocol includes step server sends public key 

message packets service request packet user sends server request packet containing timestamp application id request type purchase tokens execution application token id request execution number tokens case purchase user public key 
packet encrypted server public key 
answer packets response sent server contain timestamp request type request result application id number tokens response fig download architecture purchase request token id sent remote application case execution request token ids case response purchase request 
packet encrypted public key sent request packet 

download application download application user acquire binary code download way 
user install application purchase tokens application executed 
process purchasing tokens may handled directly application code auxiliary program provided application developer 
purchasing tokens user ready execute application steps 
start application 

depending application point token requested 
required depends billing strategy 

tokens available application forwards token pay run server 

server validates token sends back response packet application authorizing execution 

authorized server application starts resumes execution 
pay run server mark token prevent reusing 
recall possible usage metering scheme build applications different billing strategies time function usage 

implementation issues working prototype system built tested restricted laboratory environment 
prototype rsa cipher chosen messages exchanged encrypted rsa keys parties involved 
prototype built windows system sub systems described implemented separate class 
prototype server possible implement experimental pay run applications 

dynamic download approach section describe dynamic download architecture show details components 
architecture java programming environment 
attempts reduce time main application components remain client machine execution 
application dynamically downloaded needed deleted execution 
reduces time frame malicious client copy application 
pay run approach classes system reside class server connected internet user system download class needed 
user environment consist java virtual machine jvm small program application loader 
loader java program able perform user authentication handle payments load application classes 

class server class server developer class repository class database maintained 
needed server finds right class prepares downloaded users 
class server see subsystems class database keeps byte code classes needed applications class server responsible 
user requests class class server fetched class database sent back user 
authentication engine pay run architecture may require user server authentication 
sub system provide authentication methods needed 
payment handling architecture may require online payment software usage fees 
sub system implement common interface electronic payment systems 
see small number widely electronic payment systems better fig dynamic download architecture interface implementing number different payment systems directly class server 
cipher engine sending class code internet may allow eavesdropper build database run original application fee 
possibility attacker include disrupting code classes downloaded 
encrypting classes sent network prevents attacks 
sub system responsible providing cryptographic algorithms needed class server 
network engine sub system responsible establishing receiving network connections user environment 
implement network communication methods pay run system tcp connections unix sockets 

user environment user dynamic download application provided environment allows execution java code connection class server 
user environment shown composed parts java virtual machine integral part java environment java virtual machine program simulates computer java byte code machine language 
needed execute java compiled code byte code available number computing environments 
application loader application loader java class distributed dynamic download application developer 
contains code load ppr class loader having handled user authentication fee payment 
may come bundled authentication payment systems download network 
application loader may freely distributed systems downloaded user registration 
ppr class loader pay run ppr class loader java class may java class loader java virtual machine 
class loader piece software responsible dynamically loading classes needed execute java program 
ppr class loader class loader implementation able contact pay run class server select download classes pay run application 
ppr class loader able initiate secure connection class server connection download encrypted java class 
decrypts class loads jvm namespace 
electronic wallet order electronically pay usage pay run applications users access payment system implementation called electronic wallet 
electronic wallet depicted separate component payment system implementation 
suitable electronic payment systems section 

protocols execution pay run system cryptographic protocols needed variety tasks 
section main classes cryptographic protocols needs specific techniques 
noted developers free choose protocols wish 
protocols needed authentication secure connection establishment secure communications payment 
details cryptographic techniques see books menezes 

authentication protocol application loader starts loading ppr class loader perform user authentication 
pre authentication phase verifies user pieces needed authentication protocol class server 
means application loader tailored individual user system 
pre authentication application loader starts main authentication protocol contacting class server authentication engine 
authentication engine authenticate user identity information provided application loader start secure connection back user machine 
protocols may authentication exchange 
possible scheme kerberos system secret passwords 
involves implementing separate authentication server provide services users class servers 
way perform authentication rely public key infrastructure pki certified public keys challenge response authentication 
pki available developer may certify public keys users receive application loader 

secure connection establishment order user securely download application classes class server secure connection established 
steps building secure connection 
authentication described 
key setup implies choosing secret key transmitting securely parties 
secret key may secure authenticated communications 
known protocols may establishing secure connection party chosen key parties connection allowed chose key usually server 
key sent secure way party 
public keys server encrypts secret key public key party sends network 
kerberos systems authentication method kerberos kerberos server may provide session key secure communications parties 
diffie hellman key agreement protocol allow parties share common secret key diffie hellman protocol 
protocol party independently generates part secret key protocol specifies method may combined produce key known parties involved 
exchange may defeated man middle attack prevented authentication section 
details protocol reader referred books schneier menezes 

secure communications having established secure connection user class server may channel communicate avoid eavesdropping data modification 
secure connection usually common network connection data sent encrypted 
due performance restrictions secure network communications usually rely symmetric ciphers faster public key systems 
context secure connection common tcp connection shared secret key 
protocols proposed allow parties establish secure connection kerberos kerberos system allows mutual authentication secure connection establishment sending party copy secret key 
ssl secure sockets layer protocol designed implement new secure layer tcp stack 
applications wish communicate securely request secure connection ssl layer 
ssl layer services offered tcp layer establishes tcp network connections 
packets going tcp connection encrypted 
java cryptographic extensions consists java library provides set cryptographic primitives ciphers digital signatures cryptographic hash functions java program may benefit primitives declaring calling suitable classes 
secure communications provides encrypted socket implementations 
methods exist provide secure communications parties network may 

dynamic download software executing dynamic download system fairly simple user needs run application loader provide authentication payment information 
systems automatically download needed classes execute system 
order provide easy execution model user application perform tasks 
user machine authentication execution application loader start authentication process may user machine 

payment having authenticated user machine requesting software application loader negotiate payment method class server start appropriate wallet 
application loader waits wallet conclude task indicate transaction successful 

load ppr class loader successful completion task application loader starts ppr class loader 

establishment secure connection server ppr class loader establishes secure connection class server 
task ppr class loader received indication preferred connection method possibly secret key shared class server 

download application classes ppr class loader able establish secure connection class server may requests class database return classes requested class loader 

downloaded class decryption classes sent class server encrypted decrypted arrival user machine 
decryption done shared secret key 

load downloaded classes decrypted text classes ppr class loader load needed classes jvm memory space 

execute downloaded classes classes loaded jvm system ready executed 
java provides dynamic loading classes may necessary download new classes execution application 
new downloads done process class download 

clean classes jvm memory execution dynamic download application classes cleaned jvm memory avoid reuse unauthorized copying code 
jvm provides features help cleanup lacks secure method contents class memory writing memory cells class garbage 
jvm garbage collector may called explicitly clean unused classes memory 

payment implied name pay run system provide users way pay applications provide developers way receiving payments 
may achieved electronic payment system system provide ways transfer monetary value computer networks allow users payments computer 
important requisite payment systems dynamic download applications robustness particular atomicity 
payment system enforce certified delivery level atomicity guarantee payment transaction completes payer receives goods information paid 
clear requisite may relaxed execution fee piece software considered scheme 
electronic payment systems proposed useful pay run environment systems designed deal small payment values somewhat relaxed security requirements 
systems execution fee small 
specific implementations dec compaq ibm ibm proposed rivest shamir 
payment system designed payment atomicity mind achieve high levels atomicity certified delivery 
designed selling information internet works software distribution 
security features reliable values greater 
set systems best known credit card systems internet 
designed provide secure mechanisms transmitting credit card data insecure medium 
simpler form set similar optional messages features complex payment systems know 
pay run implementation allow credit card payment provide systems 
systems larger transaction costs execution fees larger dollars 
cash best known electronic payment systems cash payment system offers anonymity guarantees payer 
may applications users highly concerned anonymity games gambling 
cash allows implementation pre paid dynamic download applications 
cash tokens may place download tokens 
cash systems execution fees larger dollars 

security considerations users pay run system may concerned security provided architecture 
list main concerns users may show architectures handle user information theft users developers may concerned theft private information 
particular users may concerned developer pay system may include application code searching private information user computer sending network 
real problem today networked environment problem non downloaded software 
wellknown commercial software developers included privacy invasive code applications operating systems 
pay run architectures problem worse solve 
solution software trusted sources 
theft application code user concerned software developer may access personal information developer concerned user may try unauthorized copies software 
download approach problem exist application executes tokens available 
fact distribution stimulated users purchase tokens 
risk lies disassembling changing machine code easy task 
protection efficient necessary order provide effective protection application lifecycle 
dynamic download solve kind piracy difficult ways 
requests user authorization sending application classes 
second sends information encrypted shared key prevents unauthorized copying classes sent network 
third classes loaded directly jvm namespace written user computer disk prevent user copying classes temporary directory 
noted application classes encrypted execution copied jvm memory space time 
impossible protect portion user computer memory copied developer cope risk having classes copied way 
anyway difficult task computer scientists try copy class jvm memory space 
implementations jvm access code located memory space harder 
class misbehavior private information theft class misbehavior may user concern 
misbehaving programs may damage user system corrupting erasing important data 
dynamic download system uses secure connection download classes class server impossible external attacker alter classes include misbehaving code 
download approach download code system installed user computer 
software registered server order benefit ppr architecture 
system administrator evaluate applications registering order guarantee high quality final user 
download wrong system system user may protected developer sending wrong system network underlying payment system provides kind atomicity 
true user may abort payment transaction software downloaded correspond specified advertised 
download implementation user soon notice wrong system take action point 
may case price single execution low user test downloaded system 
interrupted downloads dynamic download system class download interrupted user may pay classes got 
main mechanism prevent atomicity 
payment system download method may provide atomicity 
case user assured payment execution fee guarantees download execution corresponding application 
issue download systems important happen payment transaction 
case occurs transaction recovery procedures overcome problem 
viruses dynamic download system viruses concern final user 
server administrator keep applications server free viruses 
download system final user needs precautions freeware systems choosing reliable sources 

performance considerations dynamic download architecture presents performance bottleneck requires download application time software executed 
user developer slow network connection download complex application may take hours 
download network requirements smaller application code needs sent network happen system execution 
requires network connection time application run get authorization executing application 
may problem deployment architectures believe cases download time major concern 
network connections increasing speed day infrastructure builders targeting video ondemand applications require bandwidth requirements pay run systems easily met 
case limitation exists considered deployment pay run system 

concluding remarks presents architectures deployment pay run software systems 
systems allow user pay small fee time wants execute program buying lifetime user license 
allow user pay system developer expand potential user market 
architectures composed parts server maintained application developer executable code downloaded user 
approach user downloads application code asks execution authorization wants run application part 
dynamic download systems automatically download executable code execution required user pays execution 
users developers pay run systems may concerned security kind software distribution believe secure common ways distributing software 
different approaches allow users developers choose application architecture better fits needs 
download architecture fits cases application big downloaded time needs executed smaller cost needs protection unauthorized copying 
stressed architecture gives time need subvert software protections 
disassembling changing machine code easy task due new versions useless shortly 
architecture adequate smaller size high cost applications 
minimizes time executable code available user machine allows better user authentication 
main drawbacks amount code downloaded execution software robustness java virtual machine 
main advantages pay run software distribution model reduced cost user increased market share developers change security level developers users 

download architecture may extended provide options users developers 
extensions include integration electronic payment systems offline verification payment avoid need network connection time user executes application 
involve offline payment methods better user authentication encryption choices involves secure channel protocols approaches may build application download modules need basis 
give dynamic download billing strategy flexibility download approach 
stronger security acquired stronger aspects conflicting joined straightforward way 

ferreira lucas de carvalho 
sistemas de 
campinas ic unicamp 
master thesis 
ferreira lucas ricardo scheme analyzing electronic payment systems 
proceedings fourteenth annual computer security applications conference 
dec scottsdale az usa 
menezes van oorschot vanstone handbook applied cryptography 
new york crc press 
javasoft 
java web site 

url www javasoft com 
schneier bruce applied cryptography protocols algorithms source code new york john wiley 
stein neuman kerberos authentication service open network systems 
usenix winter 
usenix conference proceedings 

wong liu architecture supporting pay downloadable systems java javaspaces 
icse workshop 
