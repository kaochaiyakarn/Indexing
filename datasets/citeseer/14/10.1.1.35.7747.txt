effective erasure codes reliable computer communication protocols luigi rizzo dip 
di ingegneria dell informazione universit di pisa pisa italy email rizzo iet unipi reliable communication protocols require intended recipients message receive message intact 
automatic repeat request arq techniques unicast protocols scale multicast protocols large groups receivers segment losses tend uncorrelated greatly reducing effectiveness retransmissions 
cases forward error correction fec techniques consisting transmission redundant packets error correcting codes allow receivers recover independent packet losses 
despite widespread error correcting codes fields information processing general consensus usefulness fec techniques internet protocols actual implementations exist 
probably derives different types applications concerns related complexity implementing codes software 
fill gap provide basic description erasure codes describe implementation simple flexible erasure code network protocols discuss performance possible applications 
code vandermonde matrices computed gf implemented efficiently common microprocessors suited number different applications briefly discussed 
implementation erasure code shown available author able encode decode data speeds mb running pentium 
keywords reliable multicast fec erasure codes 
computer communications generally require reliable data transfers communicating parties 
usually achieved implementing reliability different levels protocol appears acm computer communication review vol apr pp 
described supported part commission european communities esprit project ltr moby dick mobile digital companion part dell universit della ricerca scientifica tecnologica italy 
reliable mean data transferred errors losses 
stack link link basis link layer protocols transport layer tcp directly application 
arq automatic repeat request techniques generally unicast protocols missing packets retransmitted timeouts explicit requests receiver 
bandwidth delay product approaches sender window arq result reduced throughput 
multicast communication protocols arq highly inefficient uncorrelated losses different groups receivers 
cases forward error correction fec techniques possibly combined arq useful sender prevents losses transmitting amount redundant information allow reconstruction missing data receiver interactions 
reducing time needed recover missing packets approach generally simplifies sender receiver render feedback channel unnecessary technique attractive multicast applications different loss patterns recovered set transmitted data 
fec techniques generally error detection correction codes 
codes studied long time widely fields information processing particularly telecommunications systems 
context computer communications error detection generally provided lower protocol layers checksums cyclic redundancy checksums discard corrupted packets 
error correcting codes special cases modems wireless noisy links order residual error rate comparable dedicated wired connections 
link layer processing upper protocol layers mainly deal erasures missing packets stream 
erasures originate errors link layer frequent properly designed working hardware frequently congestion network causes valid packets dropped due lack buffers 
erasures easier deal errors exact position missing data known 
applications developed multicast communication 
applications audio videoconferencing tools tolerate segment losses relatively graceful degradation performance data blocks independent limited lifetime 
electronic whiteboards diffusion circular information network electronic newspapers distribution software strict requirements require reliable delivery data 
greatly benefit increased reliability communication 
despite increased need general consensus usefulness internet protocols fec techniques 
possibly due existence gap telecommunications world fec techniques studied developed computer communications world 
interest focused error correcting codes operating relatively short strings bits implemented dedicated hardware erasure codes needed able operate packet sized data objects need implemented efficiently software generalpurpose processors 
try fill gap providing basic description principles operation erasure codes presenting erasure code easy understand flexible efficient implement inexpensive architectures discussing various issues related performance possible applications 
structured follows section gives brief principles operation erasure codes 
section describes code discusses issues related implementation general purpose processors 
section briefly shows number possible applications computer communication protocols unicast multicast protocols 
portable implementation erasure code described available author 
erasure codes section give brief principle operation erasure codes 
depth discussion problem interested reader referred literature subject 
deal called linear block codes simple appropriate applications interest 
key idea erasure codes blocks source data encoded sender produce blocks encoded data way subset encoded blocks suffices reconstruct source data 
code called code allows receiver recover gamma losses group encoded blocks 
gives graphical representation encoding decoding process 
encoder source data decoder reconstructed data encoded data received data graphical representation encoding decoding process 
telecommunications world block usually small number bits 
computer communications quantum information generally larger packet data amounting hundreds thousands bits 
changes somewhat way erasure code implemented 
discussion assume block single data item operated simple arithmetic operations 
large packets split multiple data items encoding decoding process applied data item packet 
interesting class erasure codes linear codes called analyzed properties linear algebra 
gamma source data theta matrix linear code represented gx proper definition matrix assuming components available receiver source data reconstructed equations corresponding known components call theta matrix representing equations 
course possible equations linearly independent general case holds theta matrix extracted invertible 
encoded blocks include verbatim copy source blocks code called systematic code 
corresponds including identity matrix advantage systematic code simplifies reconstruction source data case expects losses 
decoder 
encoder encoding decoding process matrix form systematic code top rows constitute identity matrix 
correspond grey areas vector matrix right 
generator matrix called generator matrix code valid linear combination columns theta matrix rank subset encoded blocks convey information source blocks 
consequence column gamma zero elements 
case systematic code contains identity matrix consumes zero elements 
remaining rows matrix contain non zero elements 
strictly speaking reconstruction process needs additional information identity various blocks reconstruct source data 
information generally derived means need transmitted explicitly 
case computer communications additional information negligible size compared size packet 
source overhead neglected precision computations 
represented bits representing requires bits ordinary arithmetic 
fact coefficient ij represented bits need dlog ke bits represented loss precision 
significant overhead excess bits transmitted reconstruct source data 
rounding truncating representation prevent correct reconstruction source data 
avoiding computations finite fields luckily expansion data overcome working finite field 
roughly speaking field set add subtract multiply divide way integers interested reader referred textbook algebra coding theory ch ch formal presentation finite fields provided relatively simple follow presentation chap 
field closed addition multiplication means result sums products field elements field elements 
finite field characterized having finite number elements 
properties linear algebra apply finite fields 
main advantage finite field purposes lies closure property allows exact computations field elements requiring bits represent results 
order finite field need map data elements field elements operate rules field apply inverse mapping reconstruct desired results 
prime fields finite fields shown exist elements prime number 
fields elements prime called prime fields gf gf stands galois field 
operating prime field relatively simple gf set integers gamma operations addition multiplication modulo point view software implementation minor difficulties prime field exception field elements require dlog pe log bits represented 
causes slight inefficiency encoding data possibly larger inefficiency operating numbers operand sizes match word size processor 
second problem lies need modulo operation sums especially multiplications 
modulo expensive operation requires division 
problems minimized 
extension fields fields elements prime called extension fields gf 
sum product extension fields done results modulo field elements considered polynomials degree gamma coefficients gf 
sum operation just sum coefficients modulo product product polynomials computed modulo irreducible polynomial divisors gf degree coefficients reduced modulo despite apparent complexity operations extension fields extremely simple case 
case elements gf require exactly bits represented property simplifies handling data 
sum subtraction operation bit bit sum modulo simply implemented exclusive 
multiplications divisions interesting property prime extension fields exist special element usually denoted ff powers generate non zero elements field 
example generator gf powers starting 
powers ff repeat period length gamma ff gamma ff 
property direct consequence implementation multiplication division 
fact express non zero field element ff kx considered logarithm multiplication division computed logarithms follows xy ff ky gamma ff gamma gammak jaj stands modulo 
number field elements large tables built line provide logarithm exponential multiplicative inverse non zero field element 
cases convenient provide table multiplications 
techniques operations extension fields extremely fast simple implement 
data recovery recovery original data possible solving linear system gamma source data subset components available receiver 
matrix subset rows corresponding components useful solve problem steps inverted gamma computed 
cost matrix inversion amortized elements contained packet negligible cases 
inversion done usual techniques replacing division multiplication inverse field element 
cost inversion kl min gamma number data blocks recovered small constants involved notation 
reconstructing missing data blocks total cost lk operations 
provided sufficient resources impossible reconstruct missing data constant time pointless just receiving data requires time 
implementations error correcting codes dedicated hardware hardwired form dedicated processor perform data reconstruction required speed 
erasure code vandermonde matrices simple effective way build generator matrix consists coefficients form ij gamma elements gf 
matrices commonly known vandermonde matrices determinant gamma different matrix non null determinant invertible 
provided gamma rows constructed satisfy properties required matrices extended identity matrix obtain suitable generator systematic code 
note special cases code trivial implementation 
example code simply requires data retransmitted multiple times overhead involved encoding 
simple case systematic code redundant block simply sum defined gf source data blocks simple xor case 
unfortunately code low rate relatively inefficient compared codes higher values conversely code useful small amount losses 
cases real need codes gamma 
written portable implementation code determine performance network protocols 
code supports range arbitrary packet sizes 
maximum efficiency achieved allows operations executed table lookups 
generator matrix form indicated ff gamma build gamma rows way possible construct codes gamma gamma 
experiments packet size bytes 
performance systematic code encoder takes groups source data blocks produce gamma redundant blocks 
means source data block gamma times expect encoding time linear function gamma probably practical measure time produce single data block depends single parameter easy derive time sufficiently large packets linearly dependent approximate encoding time constant depends speed system 
relation tells fast build redundant packets 
systematic code sending blocks source data requires actual computation gamma redundant blocks 
actual encoding speed encoding speed gamma note maximum loss rate sustain gammak means maximum loss rate encoding speed decreases decoding costs depend min gamma actual number missing source blocks 
matrix inversion cost kl cost amortized size packet reasonably sized packets say bytes cost matrix inversion negligible compared cost packet reconstruction lk 
reconstruction process practical measure cost reconstructed block similar encoding cost 
decoding speed written decoding speed constant slightly smaller additional overheads including mentioned matrix inversion 
accuracy approximations tested implementation packet size bytes different values gamma shown table detailed performance data 
running times determined pentium running freebsd code compiled gcc special optimizations 
experimental results show approximation sufficiently accurate 
values sufficiently high allow codes wide range applications depending actual values gamma reader notice larger values set equal gamma yield slightly better performance encoding decoding 
encoder side exclusively due effect caching source data times compute multiple redundant blocks successive computations find operands cache running slightly faster 
decoder derives amortization matrix inversion costs larger number encoding decoding time pkt time pkt mb mb table encoding decoding times different values gamma pentium running freebsd reconstructed blocks note cases data exchanged network connection subject small number copies kernel user space accesses compute checksums 
part overhead reconstructing missing data amortized integrated layer processing techniques 
discussion results show software implementation erasure codes computationally expensive today machines safely afforded little overhead low speed applications kb range 
covers wide range real time applications including network whiteboards audio video conferencing tools support browsing type applications 
bandwidth intensive applications software fec techniques careful tuning operating parameters specifically gamma discussion provided sufficient processing power available 
current trend increasing processing speeds availability symmetric multiprocessor smp desktop computers suggest time goes plenty processing power support computations measured values mb range faster machines ultrasparc processors 
note cases encoding decoding done offline non real time application feature apply fec techniques communicating higher speeds encoding decoding ability 
small overhead existing implementation non reconstructed blocks copied reconstruction process applications depending application arq fec separately case different layers combined fashion 
general tradeoff improved reliability fec protocols higher computational costs tradeoff dictates choice 
scope depth analysis relative advantages fec arq combinations thereof 
studies papers literature see example 
section limit interest computer networks partial list applications benefit encoding technique described 
bandwidth reliability congestion control requirements applications vary widely 
losses computer networks mainly depend congestion congestion network analogue noise interference telecommunications systems 
fec techniques redundant encoding give similar types advantages increased resilience noise interference 
depending amount redundancy residual packet loss rate arbitrarily small point reliable transfers achieved need feedback channel 
just interested reduction residual loss rate performance generally improved feedback receiver needed 
unicast applications unicast applications reducing amount feedback necessary reliable delivery generally useful overcome high delays incurred arq techniques presence long delay paths 
techniques presence asymmetrical communication links 
examples ffl forward error recovery long delay paths 
tcp communications long fat pipes suffer badly random packet losses time needed get feedback receiver 
selective help improve situation transmit window opened wide generally true connection startup short sequence lost packets 
overcome problem useful allocate possibly adaptively depending actual loss rate small fraction bandwidth send redundant packets 
sender compute small number redundant packets group packets send packets group 
case single double packet loss receiver defer transmission dup ack expiration possibly fast timeout time group complete redundant packets available missing recovered need explicit retransmission equivalent fast retransmit 
usual congestion avoidance techniques adopted 
variant rfc timestamps alternatively sender delay retransmissions hope lost packet recovered redundant packets 
assign sequence numbers packets allowing receiver determine identity received packets perform reconstruction process tcp sequence numbers adequate purpose 
ffl power saving communication mobile equipment mobile devices usually adopt wireless communication limited power budget 
results need reduce number transmissions 
redundant encoding data practically remove need allowing reliable communications 
example mobile browser limit transmissions requests incoming responses need explicitly acked done currently tcp severe losses occur 
multicast applications main field application redundant encoding probably multicast applications 
multiple receivers experience losses different packets insuring reliability individual repairs extremely expensive 
second advantage derives aforementioned reduced need handling feedback channel receivers 
reducing amount feedback extremely useful feature allows protocols scale large numbers receivers 
applications depending reliable delivery benefit redundant encoding improved reliability transmission allows aggressive coding techniques compression turn result effective usage available bandwidth 
list multicast applications benefit redundant encoding follows 
ffl videoconferencing tools 
redundant encoding small values gamma provide effective protection losses videoconferencing applications 
reducing effective loss rate efficient encoding technique fewer frames mpeg video provide reduction bandwidth 
pet group berkeley done similar mpeg video 
ffl reliable multicast groupware 
redundant encoding greatly reduce need retransmissions repairs applications needing reliable multicast 
example network whiteboard type applications reliable transfer needed objects postscript files compound drawings 
ffl file transfer lans 
classrooms workstations pattern access files booting process nodes download kernel startup files server classes students download simultaneously documents applications centralized server 
problems partly overcome preloading software centralized management convenient multicast ftp type application system scalable 
ffl file transfer wide area networks 
examples application 
popular web servers simultaneous transfers large piece information popular software packages 
applies say newspaper distributed electronically network video demand type applications 
local area multicast ftp receivers connect server different times different bandwidths loss rates significant congestion control issues exist 
encoding source data encoded transmitted large redundancy 

technique receiver basically needs collect sufficient number packets block reconstruct original file 
rmdp protocol designed implemented author technique 
author wishes phil karn discussions led development code described anonymous referee comments early version 
blahut theory practice error control codes addison wesley ma blahut fast algorithms digital signal processing addison wesley clark tennenhouse architectural considerations new generation protocols acm sigcomm sept philadelphia pp 
huitema case packet level fec proc 
th workshop protocols high speed networks pp sophia antipolis france oct 
jacobson braden borman rfc tcp extensions high performance may lang algebra addison wesley liu el delay bounded type ii hybrid arq video transmission wireless networks proc 
conference information sciences systems princeton nj march mccanne jacobson vetterli receiver driven layered multicast acm sigcomm august stanford ca pp 
available ftp ftp ee lbl gov papers mccanne sigcomm ps gz edmonds luby sudan priority encoding transmission th annual symposium foundations computer science ieee computer science press 
mcauley reliable broadband communication burst erasure correcting code proc 
sigcomm 
lin costello error control coding fundamentals applications prentice hall 
lin costello miller automatic repeat request error control schemes ieee comm 
magazine pp dec mathis mahdavi floyd romanow rfc tcp selective option oct 
jorg biersack reliable multicast forward error correction proc 
th workshop protocols high speed networks pp sophia antipolis france oct 
available www eurecom fr ps gz error correcting codes nd ed wiley 
rizzo sources erasure code vandermonde matrices 
available www iet unipi luigi vdm rizzo feasibility software fec technical report lr 
available www iet unipi luigi ps rizzo vicisano reliable multicast data distribution protocol software fec techniques technical report lr 
available www iet unipi luigi rmdp ps shacham mckenney packet recovery high speed networks coding buffer management proc 
ieee infocom san francisco ca pp may 
van lint coding theory nd ed springer verlag 
wang lin modified selective repeat type ii hybrid arq system performance analysis ieee trans 
comm 
com pp may 
