non strictness lenient programs require 
klaus schauser department computer science university california santa barbara santa barbara ca schauser cs ucsb edu seth goldstein computer science division university california berkeley berkeley ca cs berkeley edu lenient languages id touted best functional languages massively parallel machines ahn 
lenient evaluation combines non strict semantics eager evaluation tra 
non strictness gives languages expressive power strict semantics eager evaluation ensures highest degree parallelism 
unfortunately non strictness incurs large overhead requires dynamic scheduling synchronization 
result powerful program analysis techniques developed statically determine non strictness required tra sch 
studies large set lenient programs quantifies degree non strictness require 
identify forms non strictness including functional conditional data structure non strictness 
surprisingly id programs require functional conditional non strictness 
benchmark programs limited form data structure non strictness 
refutes myth lenient programs require extensive non strictness 
non strict functional languages widely regarded attractive basis parallel computing 
sequential languages expose parallelism program 
side effect free functional languages arguments function call evaluated parallel 
non strict execution substantially enhance parallelism functions start executing arguments provided 
language non strict semantics possible define functions return result arguments diverges 
things possible create recursively defined cyclic data structures portions result function call arguments call 
non strictness increases expressiveness language requires flexible strategy strict evaluation evaluates arguments calling function 
non strictness usually combined lazy evaluation delays evaluation expression known appear th annual acm sigplan sigarch conference functional programming languages computer architecture fpca 
contribute result decreasing parallelism 
non strictness combined eager evaluation 
combination called lenient evaluation tra exhibits parallelism lazy evaluation retaining expressive power 
unfortunately non strictness comes high implementation cost requires fine grained dynamic scheduling synchronization 
non strict semantics impossible statically determine order arguments evaluated operations execute 
expressions evaluated arguments depend available 
dynamic scheduling expensive commodity microprocessors efficiently support single thread control incur high cost context switching 
research devoted analysis techniques determine full generality non strictness required 
techniques include strictness analysis pey backwards analysis hug path analysis bh partitioning tra 
lenient languages compilation approach schedule instructions statically sequential threads dynamic scheduling threads 
task identifying portions program scheduled statically ordered threads called partitioning tra 
operations placed thread compiler statically determine order execute 
sch new thread partitioning algorithm separation constraint partitioning improves substantially previous tra 
evaluate partitioning algorithm compared benchmark programs compiled algorithm strict partitioning 
strict partitioning ignores possible non strictness compiles functions conditionals strictly representing best possible partitioning 
obviously strict partitioning produces incorrect partitioning leading deadlock programs require non strictness 
surprisingly benchmark programs ran correctly indication non strictness rarely lenient programs 
observation led pursue detailed study non strictness lenient programs focus larger set programs 
evaluate strictness properties large collection programs written id non strict functional language uses lenient evaluation 
define functional conditional data structure 
find functional conditional rarely lenient programs 
hand data structure non strictness extensively 
data structure non strictness circular recursive dynamically scheduled non strictness see expensive dynamically scheduled non strictness seldom required 
study focus non strictness required kind required executing lenient programs correctly 
study affected programs executed parallel sequentially 
chose study sequential execution behavior 
evaluating functions strict functions non strictly increase parallelism 
find non strictness rarely suggesting lenient languages focus techniques determining non strictness strict functions conditionals evaluated 
remainder structured follows 
section summarizes different evaluation strategies functional languages strict lenient lazy previous arguments lenient evaluation suitable way write programs massively parallel machines 
section identifies illustrates kinds non strictness conditional functional data structure non strictness 
section describes methodology benchmark programs study presents results show type non strictness program requires 
section discusses related section suggests directions 
lenient evaluation section summarizes different evaluation strategies functional languages strict lenient lazy 
evaluation strategies differ expressiveness parallelism efficiency 
arguments favor lenient evaluation embodied language id best choice massively parallel machines ahn nik 
non strict lenient evaluation retains expressive power lazy evaluation lower overhead exhibiting parallelism strict lazy evaluation tra 
lenient language id id functional language augmented synchronizing data structures 
consists layers shown 
functional core properties purely functional languages including referential transparency determinacy 
id provides array comprehensions efficiently expressing scientific computation requiring arrays large data structures 
purely functional constructs define array defining element 
array comprehensions elements array defined terms elements 
limitation order purely functional elements array defined completely array comprehension 
ensures referential transparency preserved 
sufficient certain problems anp id provides non functional data structures anp structures bna 
structures write data structures separate creation structure definition parallel haskell ph ongoing development integrates concepts id haskell may lenient evaluation 
referentially transparent functional core determinate structures structures determinate expressive power simpler semantics layers id nik 
elements 
functional arrays structures provide efficient indexed access individual elements 
addition structures provide element element synchronization producer consumer 
structures purely functional lose referential transparency 
function obtaining pointer structure may store 
hand determinacy preserved location stored 
non deterministic computation expressed mutable data structures provide support atomic updates 
evaluation strategies widely evaluation strategies functional languages strict lazy evaluation 
compare lenient evaluation strategy id 
strategies differ handle evaluation type constructors function calls 
tra evaluate function call en strict evaluation evaluates argument expressions en evaluates function body passing evaluated arguments lenient evaluation starts evaluation function body parallel evaluation argument expressions en evaluating far data dependencies permit lazy evaluation starts evaluation function body passing arguments unevaluated form 
evaluation rules constants arithmetic primitives conditionals strategies 
evaluation constant yields constant 
arithmetic operators strict arguments evaluate arguments performing operation 
evaluation conditional evaluates predicate depending result evaluated 
evaluation strategies treat conditional conservatively start evaluating speculatively knowing value predicate 
see strict evaluation impossible call function arguments 
pass result part back function 
hand possible lenient lazy evaluation implement non strict semantics 
lazy evaluation ensures expressions contribute final answer evaluated evaluation demand driven 
contrast strict lenient evaluation evaluate expressions exception inside arms conditionals eager evaluation data driven sense expression evaluated soon data inputs available 
table shows evaluation strategies differ substantially expressiveness amount parallelism expose implementation overhead amount speculative computation 
differences discussed subsections 
expressiveness strict lenient lazy parallelism lazy strict lenient overhead strict lenient lazy speculative comp 
lazy lenient strict table comparison evaluation strategies 
expressiveness shown expressiveness evaluation strategies forms level hierarchy 
lazy evaluation results expressiveness lenient evaluation turn expressiveness strict evaluation 
expressiveness informally mean translation program uses non strictness strict equivalent may require global reorganization entire program formal definition expressiveness fel 
non strictness lenient lazy evaluation significantly increases expressiveness programmer create circular data structures define data structures recursively terms elements 
section examples 
purely functional setting non strictness results efficient programs space time requirements hug bir joh 
addition lazy evaluation provides control structure handle infinite data structures long finite part accessed 
explicit delays programmers obtain benefit lenient evaluation hel 
infinite structures strict evaluation circular structures lazy evaluation lenient evaluation non strictness expressiveness non strictness expressiveness evaluation strategies 
parallelism evaluation strategy strong impact amount parallelism ha 
lenient evaluation results largest amount parallelism lazy evaluation shows amount parallelism tre 
lazy evaluation needs show argument required final answer starting evaluation strict lenient evaluation evaluate independent arguments parallel 
addition lenient evaluation exploit producer consumer parallelism 
consider function flat produces list leaves binary tree accumulation lists nik 
def flat tree acc leaf tree cons tree acc flat left tree flat right tree acc example require non strictness executed evaluation strategies 
strict evaluation code exhibits little parallelism 
right subtree completely flattened starting left subtree 
holds level tree flattened sequentially 
lenient execution flattening subtrees pipelined 
flattening right subtree started simultaneously flattening left subtree 
resulting list right subtree fed function working left subtree 
effect entire list constructed parallel 
example shows overlapping consumer producer yield just constant factor increase parallelism nik 
lazy evaluation flattens subtrees opposite order strict evaluation 
lazy evaluation flattens left subtree starts working right subtree 
lazy evaluation exhibit parallelism 
evaluation overhead clear evaluation strategies differ substantially overhead 
biggest differences costs argument passing dynamic scheduling 
strict evaluation lowest overhead 
arguments evaluated calling function passed value 
furthermore possible statically schedule computation inside function produce efficient sequential code 
compilation strict functional languages similar understood implementations sequential languages 
lazy evaluation high overhead requires arguments passed unevaluated form shown contribute final result 
overhead lenient evaluation falls lazy strict evaluation tra 
speculative computation lazy evaluation strategy completely avoids speculative computation evaluates expressions contribute final result 
schemes computation eagerly putting burden programmer avoid infinite speculative computation 
summary seen lenient lazy evaluation realize non strictness may start evaluation function body evaluating arguments 
combined eager evaluation lenient evaluation parallelism increased substantially arguments evaluated parallel function body 
researchers claimed lenient evaluation best parallel implementation functional languages 
simulations dataflow architecture show lenient evaluation critical path full binary tree depth consists time steps maximum parallelism average parallelism instructions assuming resources available 
executed strictly critical path grow time steps maximum parallelism instructions 
course lazy evaluation produce flattened list required 
additional issues arise due higher order functions partial applications parallelism single assignment limitations 
forms non strictness section identify different forms non strictness examples illustrate 
focuses programs execute lenient evaluation consider programs requiring lazy evaluation manipulate potentially infinite data structures 
limit discussion various forms non strictness lenient evaluation 
functional non strictness functional non strictness arises feedback dependencies results function invocation arguments 
illustrate form non strictness need dynamic scheduling simple somewhat contrived computation scg 
def def def example function takes arguments returns results inside function dependence multiplication addition code evaluate halves pair put order compiling function traditional strict evaluation 
true non strict evaluation 
example function different contexts require non strictness 
function argument argument function second argument taken result 
requires compute return result compute see case multiplication executed addition 
function just opposite occurs second result function fed back argument 
computed addition executed multiplication 
multiplication addition scheduled independently 
notice scheduling independent data values arguments depends context function results fed back arguments 
conditional non strictness non strictness requirement dynamic scheduling occur function calls appear conditionals 
example taken tra illustrates 
def kt def kt true def kt false example single conditional steers evaluation variables predicate true examples different definitions function perform computation similarly different definitions function compute cases single addition single multiplication executed functions multiplication occurs addition functions execute reverse order 
gets value value value result case multiplication executed addition 
predicate false variables evaluated different order 
variable bound argument evaluate result evaluate addition performed multiplication 
see addition multiplication scheduled dynamically 
operations appear outside scope conditional conditional affects order values available 
may example previous scheduling data dependent influenced conditional depends value predicate 
observation correct obtain precisely behavior conditionals shown example 
def def def kt func func def kt def kt conditional replaced call function arguments returning results 
argument func determines function called case case functions perform computation just shuffle results affect order addition multiplication caller get executed 
example illustrates addition caller affecting order operations get executed callee callee affect order caller 
general context call tree function appears determines order 
example shows duality conditionals function calls function variables 
conditional viewed call site functions called depending predicate aa 
functions contain code side side conditional respectively 
data structure non strictness non strict languages data structure constructors exhibit form non strictness function calls result may required elements defined 
gives programmer ability define circular data structures recursively define elements terms elements 
example recursive binding cons denotes simple cyclic list cons hd denotes tuple containing element 
power non strictness extends list comprehensions array comprehensions structures ahn anp bna 
define hierarchy non strictness data structures 
functionally strict elements evaluated data structure created 
circular pointer data structure may stored elements 
recursive element data structure may defined terms elements 
case distinguish subcases describe schedule fill elements 
static static schedule program fills elements right order 
dynamic dynamic schedule required 
implies presence bits needed fetches elements may defer 
small examples cons classified circular recursive respectively 
frequently cited examples recursively defined data structures wavefront anp function computing array fibonacci numbers 
def array examples scheduled statically static scheduling program obeys data dependencies array elements left right case fib array left right top bottom case wavefront 
schedule possible implement arrays presence bits just plain arrays standard imperative languages 
may case example illustrates 
def dyn def dyn def dyn example shows dynamic scheduling may required non strict structures 
function dyn takes arguments structure indices fetches element multiplies stores result location 
function fetches location adds element stores location 
shows dependencies body function dyn happens cases dependencies function dyn possible scenarios case dyn called function store location defines value fetched 
dependence store fetch indicated dashed line multiplication executed addition 
note dependence directly function established synchronizing structure 
fetch occur store get deferred store happens 
case operations execute reverse order 
obviously conditions hold deadlock result 
general known function fills consumer structure element name producer 
fetch defers necessary continue evaluation expression depend fetch computation different function activation 
example illustrates dependencies unravel run time may travel arguments results internal call sites structure accesses 
experimental results section assess degree non strictness required large set id programs 
programs implemented researchers 
methodology determine functional conditional non strictness programs require extend compiler options treat function calls conditionals strict fashion 
mode function invoked arguments evaluated results returned completely computed 
similarly compile conditionals evaluated predicate inputs available return results produced 
case program requires functional conditional non strictness compilation scheme leads static dependence cycle compiler detects deadlock run time 
case know program requires non strictness 
check data structure non strictness extend run time system handle synchronizing data structures differently 
variations run time system emulate different degrees data structure non strictness 
example check elements recursively defined structures fully strict elements 
fetch structure deferred structure elements filled 
run time system reports program deadlocks indication recursive dependencies elements structure 
similarly check program execute static schedule test deferred fetches occur 
fetches defer indication current schedule fills data elements right order 
obviously approach determine static schedule exists current input program current partitioning execution order 
determine case input study program detail ensure data dependencies related problem size input parameters example wavefront sure possible data dependencies generated example dyn 
turns original programs execute defers inherently parallel compiler run time system just happen schedule producer consumer wrong order 
solved adding explicit sequentialization statements barriers program ensure correct order execution 
compilation framework programs compiled id compiler berkeley tam back 
compiler uses front developed mit tra produces dataflow graphs 
back partitions dataflow graphs threads generates code tam threaded machine 
tam code translated target machine 
translation path uses portable intermediate form produces code cm various standard sequential machines gol 
experiments performed limit sequential execution sparcstation 
explained compiler extended options treat function calls conditionals strictly run time system test different degrees non strictness data structures 
programs benchmark programs shown table 
programs vary substantially size application area behavior 
range size lines source code 
small examples discussed far included point 
application areas represented programs include scientific computing sorting search problems symbolic computing nas parallel benchmarks small kernels 
programs fall scientific computing area specifically targeted implicitly parallel language id ae 
programs contain conditionals function calls exhibit fine grained behavior quicksort programs blocked matrix multiply medium grained sgs 
non strictness requirements methodology described determined degree non strictness programs requires 
results measurements summarized table 
columns indicate program contains functional conditional non strictness 
third column shows program circular data structure definitions 
fourth column shows data element defined recursively terms elements data structure 
column indicates program requires dynamic scheduling 
able find static scheduling program possibly inserting barriers allow execute deferred fetches 
id programs run correctly compiled strict functions strict conditionals 
indicates programmers rarely additional expressiveness provided non strictness functional conditional level 
hand benchmark programs limited form data structure non strictness 
ability define circular data structures array elements terms elements certainly important 
programs able find schedule results fetches deferring run time 
result contrary current thought lenient programs inherently require dynamic scheduling 
program lines short description symbolic computation enumerate ahn primes filter generate primes filtering hel primes sieve primes sieve eratosthenes tre recursive doubling algorithm spr queens queens problem circular lists nq solutions number queens solutions permutations generate permutations sets elements circular structure id compiler id id compiler id interpreter top level id interpreter quicksort quick sort lists css selection sort arrays css bitonic sort structures sb bubblesort bubble sort structures sb heapsort heap sort structures sb heapsort ms heap sort structures sb quicksort quick sort structures sb quicksort ms quick sort structures sb mergesort merge sort structures sb shellsort shell sort structures sb scientific computation wavefront simple wavefront sor anp molecular biology hfa monte carlo neutron transport bcs mcnp monte carlo photon transport hl simple hydrodynamics heat conduction ae speech speech processing sah dtw dynamic time warp sah mm matrix multiply blocked matrix multiply test eigen eigen problem householder householder eigen solver sb jacobi jacobi eigen solver bh jacobi group jacobi eigen solver group rotations bh ft fu nas benchmark ft functional sb ft nas benchmark ft structures sb ft ms nas benchmark ft structures sb small examples kt cond traub non strict conditional tra non strict function results scg cube non strict cube function flat flatten leaves tree nik fib doubly recursive fibonacci fib lazy infinite list fibonacci numbers fib lenient finite list fibonacci numbers fib strict fibonacci linear recurrence fib array fibonacci functional arrays table benchmark programs 
programs available www cs ucsb edu schauser id 
form non strictness program func 
cond 
circ 

dyn 
symbolic computation primes filter primes sieve queens nq solutions permutations id compiler id interpreter quicksort bubblesort heapsort heapsort ms quicksort quicksort ms mergesort shellsort scientific computation wavefront mcnp simple speech dtw mm eigen householder jacobi jacobi group ft fu ft ft ms small examples kt cond cube flat fib fib lazy lazy fib lenient fib strict fib array table non strictness requirements 
entries indicate program requires functional conditional data structure non strictness 
data structure non strictness divided circular recursive dynamic 
discussion results detail focusing individual programs different forms non strictness 
functional non strictness programs require functional non strictness written precisely exhibit behavior 
exceptions id compiler discuss detail 
small examples non strict functions section non strict cube lenient version fibonacci functional non strictness 
included lazy version fibonacci generates infinite list fibonacci numbers returns nth number 
lenient evaluation program fails return answer runs heap space generating infinite list 
programs primes filter queens nq solutions permutations functional non strictness 
similar way easily illustrated lenient fibonacci function 
list fibonacci numbers def nil nth nth def fib li li nth li function creates list fibonacci numbers returns nth number 
function creates list fibonacci numbers requires fibonacci numbers compute subsequent numbers 
achieved providing base list numbers feeding result list li back argument fib list 
programs primes filter queens nq solutions permutations principle 
largest program requiring functional non strictness id compiler 
non strictness create circular data structures element data structure contains data structure 
pattern occurs frequently code creating variable structures contain information pertinent id identifiers 
done record contains fields identifier 
record fields defined functional properties defined creation time modified structure properties creation time filled structure properties capable repeated modification 
shown example code functional fields vr node includes record introducing non strictness 
def place arity opcode vs record 
entries func vs nil vs way avoiding mutual recursion change functional field vr node structure field 
creating variable structure record field initially left empty 
record created func invoked result fill field vr node 
course solution goes purely functional programming style non functional aspect visible outside function 
interesting program category requires functional non strictness uses library defined accumulators tally statistics 
allocates accumulators function accumulator 
result accum done library function takes arguments bounds accumulator operation accumulation trigger indicate accumulation finished 
function returns results accumulator structure perform accumulations accum array contains final result result 
accumulation done structures perform updates place 
important final result returned accumulations done 
consumer result may read incorrect values accumulation going 
function accumulator exhibits classical form non strictness 
return accumulation structure receiving bounds operation return final result receiving done accumulations completed 
trying pass arguments result deadlock 
possible modify program functional non strictness 
required separate creation accumulator closing 
call separate functions programmer ensure execute correct order explicit barriers 
conditional non strictness programs require conditional non strictness 
small function section specifically developed traub illustrate concept going conditionals 
second id compiler uses conditional non strictness conditionally create circular data structures 
shown example similar code previous subsection 
time depending arity argument records created 
def place arity opcode vs eq arity record 
entries arity equal func vs nil record 
entries arity func vs nil vs straightforward change code avoid conditional non strictness 
need fully define record arm conditional 
example changed 
def place arity opcode vs eq arity record 
entries arity equal func nil vse record 
entries arity func vse nil fact version tested exhibit functional non strictness calls allocate accumulators inlined caller id mechanism 
inlining disabled encounter functional non strictness 
vse vs results strong indication simplest cases conditional non strictness complicated programmers 
just tracing dependencies small example section requires substantial effort 
unfortunately conditional non strictness serious impact code generation 
compiler generates independent switch input conditional independent merge output 
results large run time overhead 
avoided compiler appropriate analysis conditional non strictness occur 
data structure non strictness data structure non strictness important form non strictness 
programs 
create circular data structures define array elements recursively terms elements 
prototypical example wavefront fib array section 
ability define data structures recursively essential efficiency 
feature defining new element require subsequent allocation new copies arrays 
obviously imperative languages provided power non strict data structures 
imperative languages programmer allocate data structure fill order values updated place 
feature imperative data structures presence bits provide synchronization element basis 
programmer explicitly ensure dependencies satisfied structure filled right order 
id presence bits automatically ensure right order 
programs able find static schedule fetches data elements defer 
required enhance benchmark programs explicit sequentialization statements barriers ensure right execution order 
non strict data structures critical required efficient execution 
lenient fibonacci example section fibonacci array section illustrate 
construct data structure fibonacci numbers list array return nth number 
idea underlying dynamic programming problems tra 
reasons don see functional non strictness may data structure non strictness gives similar expressive power express complicated dependencies elegantly efficiently 
related far know study focus non strictness lenient programs require 
tremblay similar study lazy evaluation tre 
collected large set benchmark programs determined require lazy evaluation lenient evaluation suffices 
lazy evaluation required program manipulates infinite lists 
observation programs lenient evaluation sufficient 
contrary authors claimed programs bir require laziness 
tremblay studied lazy evaluation impacts parallelism execution model 
research devoted analysis techniques determine full generality non strictness required 
techniques include strictness analysis pey backwards analysis hug path analysis bh 
lenient languages approached partitioning program sequential threads tra 
partitioning algorithms developed tra scg 
researchers studied parallel execution variety lenient programs ahn hel css sb anp ae sah sb bh sb scg nik sgs 
studies performed various hardware simulation platforms including dataflow machines monsoon architecture mint simulator tam implementations cm sequent machine 
programs studies included 
studies large set id benchmark programs determines degree non strictness require 
contrary current thought programs require functional conditional non strictness 
large program requires forms non strictness id compiler uses define circular data structures 
believe functional conditional non strictness seldom difficult grapple mentally seemingly cyclic dependencies results back arguments automatically unravel run time difficult trace 
reason lack functional non strictness may programmers tend follow imperative programming style 
example larger programs studied fall area scientific computation may fortran equivalents simple 
think main reason lack functional non strictness lies 
limited non strict data structures viz 
ability define data structure elements recursively provides essentially expressiveness encode recursive dependencies efficiently purely functional non strictness lists 
programs data structure non strictness 
unexpected result programs able determine schedule fetches data structures deferred 
indicate sequential implementation lenient languages able eliminate overhead managing presence bits synchronizing data structures 
form non strictness lenient evaluation provide support streams infinite data structures 
think may useful caution making language lazy just reason 
explicit delays control constructs programmers obtain benefit lazy evaluation hel 
second tremblay observed supposedly lazy programs require lenient evaluation tre 
conditional non strictness rarely unnecessary suggest eliminating language 
believe data structure sufficient 
researchers devote effort developing techniques determine strict functions conditionals evaluated non strict fashion beneficially increase parallelism 
example flat section clearly shows lenient evaluation expose large amounts consumer producer parallelism may completely lost strict evaluation 
idealized parallelism profiles derived dataflow simulations capable exposing inherent parallelism program lenient evaluation realistic methods gain information parallelism reflects accurately execution real parallel machines 
conclude desirable exploit increased parallelism lenient evaluation necessary language non strict 
acknowledgments grateful martin rinard guy tremblay nathan pedro anonymous referees valuable comments 
want guy tremblay wim bohm olaf jeff christina flood paul johnson id id compiler group mit providing large collection id programs 
computational support berkeley provided nsf infrastructure number cda 
klaus erik schauser received research support department computer science ucsb 
seth copen goldstein supported graduate fellowship 
aa ariola arvind 
tac parallel intermediate language 
proceedings conference functional programming languages computer architecture pages september 
ae arvind 
scientific programming parallel machines 
journal parallel distributed computing october 
ahn arvind heller nikhil 
programming generality parallel computers 
proc 
fourth int 
symp 
biological artificial intelligence systems pages 
trento italy september 
allison 
lazy dynamic programming eager 
info 
proc 
letters 
allison 
application recursively defined data structures 
australian comp 
journal 
anp arvind nikhil pingali 
structures data structures parallel computing 
technical report csg memo mit lab comp 
sci february 
proc 
graph reduction workshop santa fe nm 
october 
anp arvind nikhil pingali 
structures data structures parallel computing 
acm transactions programming languages systems october 
bcs burns schweitzer wasserman simmons pryor 
vectorization monte carlo particle transport architectural study lanl benchmark 
proc 
supercomputing 
ieee computer society acm sigarch new york ny november 
bh bloss hudak 
path semantics 
mathematical foundations programming language semantics lncs 
springer verlag april 
bh bohm 
functional implementation jacobi eigen solver 
tech 
report cs colorado state university may 
bir bird 
circular programs eliminate multiple traversals data 
acta informatica 
bna barth nikhil arvind 
structures extending parallel non strict functional language state 
proceedings conference functional programming languages computer architecture cambridge ma august 
culler goldstein schauser von eicken 
tam compiler controlled threaded machine 
journal parallel distributed computing july 
clack peyton jones 
strictness analysis practical approach 
proc 
functional programming languages computer architecture sept 
springer verlag lncs 
css culler sah schauser von eicken wawrzynek 
fine grain parallelism minimal hardware support compiler controlled threaded machine 
proc 
th int 
conf 
architectural support programming languages operating systems santa clara ca april 
fel felleisen 
expressive power programming languages 
science computer programming december 
gol goldstein 
implementation threaded machine sequential multiprocessors 
master thesis computer science division eecs berkeley 
ucb csd 
ha hudak anderson 
pomset interpretations parallel functional programs 
proc 
functional programming languages comp 
arch september 
hicks ang arvind 
performance studies id monsoon dataflow system 
journal parallel distributed computing july 
hoch davenport steele 
compile time partitioning non strict language sequential threads 
proc 
symp 
parallel distributed processing dec 
hel heller 
efficient lazy data structures dataflow machine 
phd thesis dept eecs mit february 
hfa hartel feeley alt augustsson baumann flood van groningen hammond hausman ivory lee leroy serrano talpin weis 
float intensive benchmark functional compilers draft 
editor implementation functional languages pages 
school information systems univ east nr tj uk sep 
hl 
mcnp id dataflow photon transport code 
lanl june 
hug hughes 
functional programming matters 
computer journal 
hug hughes 
backwards analysis functional programs pages 
elsevier science publishers 
north holland 
joh johnsson 
attribute grammars functional programming paradigm 
proceedings conference functional programming languages computer architecture february 
springerverlag lncs 
nik nikhil 
id version manual 
technical report csg memo mit lab comp 
sci 
nik nikhil 
parallel programming language id compilation parallel machines 
proc 
workshop massive parallelism italy october 
academic press 
nik nikhil 
overview parallel language id foundation ph parallel dialect haskell 
technical report digital equipment cambridge research laboratory september 
pey peyton jones 
implementation functional programming languages 
prentice hall 
sah sah 
parallel language support shared memory multiprocessors 
master thesis computer science div university california berkeley may 
sb sur bohm 
analysis non strict functional implementations dongarra sorensen 
tech 
report cs colorado state university december 
sb sur bohm 
efficient declarative programs experience implementing nas benchmark ft tech 
report cs colorado state university october 
sb sur bohm 
nas parallel benchmark integer sort performance mint 
tech 
report cs colorado state university may 
scg schauser culler goldstein 
separation constraint partitioning new algorithm partitioning non strict programs sequential threads 
proc 
principles programming languages january 
sch schauser 
compiling lenient languages parallel asynchronous execution 
phd thesis computer science div university california berkeley may 
schauser culler von eicken 
compiler controlled multithreading lenient parallel languages 
proc 
conf 
functional programming languages comp 
arch aug 
sgs spertus goldstein schauser von eicken culler dally 
evaluation mechanisms fine grained parallel programs machine cm 
proc 
th int symposium computer architecture san diego ca may 
spr sekar ramakrishnan 
small domains spell fast strictness analysis 
proc 
acm symp 
principles programming languages pages 
tra traub 
compiler mit tagged token dataflow architecture 
technical report tr mit lab comp 
sci august 
ms thesis dept eecs mit 
tra traub 
implementation non strict functional programming languages 
mit press 
tre tremblay 
parallel implementation lazy functional languages demand propagation 
phd thesis mcgill university school computer science november 

