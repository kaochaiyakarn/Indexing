warshall algorithm dickson lemma examples realistic program extraction ulrich berger helmut schwichtenberg monika institut der ludwig maximilians universitat munchen munchen germany 
means known examples demonstrated method extracting programs proofs manageable practice may yield efficient programs 
warshall algorithm computing transitive closure relation extracted constructive proof repetitions path avoided 
secondly extract program classical non constructive proof special case dickson lemma transforming classical proof constructive 
techniques examples implemented interactive theorem prover developed university munich 

objective show method extracting programs proofs powerful metamathematical tool considerable practical interest refined way applicable involved proofs yields concise efficient programs provably correct 
examples highlighting different aspects method 
constructive proof dominated equational reasoning 
drastically simplified extensive term rewriting techniques 
second short elegant non constructive proof 
translate constructive proof extract efficient higher type program 
discuss examples detail 
starts constructive proof proposition warshall 
points finite field relation find repetition free path leading find path 
proof extract short readable program corresponds warshall algorithm 
remarkable naive test reachability relation set elements complexity warshall algorithm complexity 
reason fact proof yields better algorithm course word repetition free statement 
mathematical level obvious requirement ulrich berger program obtained automatically formal proof known instance bates constable goal high level programming 
second example special case dickson lemma dickson proposed bezem 
proposition dickson 
infinite sequences natural numbers 
indices 
proof minf inductively minf clearly 
sequence decrease strictly 

numbers required 
proof viewed simplification nash williams minimal bad sequence argument higman lemma nash williams 
clearly constructive requires determining minimum infinite set 
applying refined version translation get constructive proof contains higher type primitive recursive program computing arbitrary sequences indices 
organized follows 
section contains brief description formal system working 
section sketch program extraction kreisel modified realizability apply section warshall example 
section develop refined version translation enable section transform classical proof dickson proposition constructive proof obtain program translated proof 
examples implemented interactive theorem prover developed university munich 
brief system see 
system examples manual available www mathematik uni muenchen de logik 
intuitionistic arithmetic functionals finite type system consider essentially heyting intuitionistic arithmetic finite types ha described troelstra 
classical jar tex warshall dickson arithmetic obtained restriction formulas constructive existential quantifier classical definition 
equations treated meta level identifying terms normal form 

odel system godel system primitive recursive functionals finite type formulated simply typed lambda calculus higher type arithmetic constants 
types 
boole nat ae theta oe ae oe 
constants 
true boole false boole nat nat nat boole ae nat ae nat ae recursor type ae 
nat ae ae nat ae associates right 
boole ae type ae ae boole ae represents boolean induction definition cases 
boole ae rs write depending applications may add ground types constants 
terms 
ae ae ae constant hr si ae rs usual typing rules 
convention application associates left rs means rs dot notation scope binder large possible rs means rs 
conversions 
writing st hr si 
hr si 

boole ae rs true 
boole ae rs false 
nat ae rs 
nat ae rs 
st nat ae rst fir denote congruence generated conversions identify terms fir normalization theorem due tait troelstra term godel unique normal form rewrite relation generated 
decide fir holds normalizing treating calculus modulo fir proofs shorter perspicuous don handle equations logical level 
jar tex ulrich berger 
arithmetic predicate symbols atomic formulas 
predicate symbol fixed arity tuple types ae ae 
atomic formulas form ae ae 
arity atomic formula written simply choice predicate symbols depends particular problem consideration 
cases predicate symbols 
falsity arity atom arity boole 
intended interpretation atom set ftrueg 
atom means true 
confusion write atom 
formulas 
ae ae ae ae formula containing called negative classical 
negation classical existential quantifier defined 
axioms boolean natural induction 
ind pa true false pa ind na axioms constructive gamma ae ae usual proviso fv 
predicate axioms 
usually postulate axioms describing intended interpretation predicate symbols 
example ax 
atom true truth axiom ax 
atom false falsity axiom cases intended interpretation predicate symbol decidable relation decision procedure represented closed term ae ae boole ae ae arity case include axiom ax atom characteristic axiom jar tex warshall dickson call decidable 
reasons explained require predicate axioms negative formulas contain restriction course true intended model 
derivations formulated natural deduction calculus written curry howard typed lambda terms 
assumptions axioms hd ab ae ae ae ae ae ae xd free fa 
derivation free assumptions called proof 
generally derivation formula assumptions set formulas gamma called proof gamma written gamma easy see stability provable negative formulas boolean induction axioms ax 
ax 
restricting negative formulas restriction classical point view full classical logic 

intuitionistic proofs programs describe proof constructive statement negative program extracted tx provable 
kreisel modified realizability interpretation kreisel treated extensively literature troelstra troelstra van dalen see berger berger schwichtenberg 

program extraction extraction operation maps derivation formula term realizing 
term program extracted jar tex ulrich berger derivation particular formula negative realizes mean correctly meets specification assign formula object type symbol 
ae ae ae ae theta 
ae ae ae 

ae gammai theta 


formula called computationally meaningful called harrop formula 
note negative formulas 
derivation computationally meaningful formula define extracted program 
assumption variables set object variable associated assumption variable way inductively 
ae 
hd ae gammai 
ae gammai 
ae ae dt axioms realized suitable closed terms 
induction axioms ind na 
jar tex warshall dickson realizing program ind na recursor nat ae ae 
nat ae ae nat ae ae 
similarly boolean induction realized boole ae axioms set ae ae ae hx yi 
gamma ae ae ae fx ae theta ae 
convenient extend definition derivations harrop formula setting case ffl ffl new symbol 
applies particular negative 
extracted program predicate axiom ffl 
example 
easy see quantifier free formula containing decidable predicate symbols term provable 
easily derive scheme proof cases cases 
proof term ind true true ax 
false false ax 
tc extracted program ae ae boole ae fi type ae ae ae ae 

modified realizability correctness extracted programs guaranteed known soundness theorem see stating extracted program modified realizes formula derived 
jar tex ulrich berger define formulas mra formula term type type symbol ffl ffl mrp ae ffl mra mra 
xa ae ffl mra rx mra 
ae mra gammai ffl mra mra mra 
ffl mra mrb mra ffl mrb mra rx mrb 
soundness theorem 
derivation formula derive mrb assumptions mrc fa ffl assumption variable harrop formula proof induction structure proof cited literature realizability see instance troelstra van dalen 
clearly negative ffl mrb 
note need case arbitrary formulas form ae oe negative ae oe ya xa tx obtain corollary soundness theorem extraction theorem 
proof ae oe negative negative assumptions gamma extract closed term ae oe formula xb provable gamma 
usually gamma consists lemmas true formulas prove order keep derivation short 
theorem says abbreviation affect program extraction 
jar tex warshall dickson 
warshall algorithm warshall algorithm computes transitive closure relation complexity naive algorithm needs steps 
extraction method described previous section obtain clever algorithm proof uses basic idea warshall algorithm avoid repetitions paths 
nat additional ground type nats lists natural numbers representing paths natural numbers elements 
useful error object nats natural function concatenation paths partially defined 
lists generated empty list error object nats means constructs list number list hat denote lists nats natural numbers 
language consists relation function symbols intended meaning 
deal binary relation gamma transitive closure determined 
occurs path rf repetition free path path inner elements delta concatenation concatenation function delta defined follows 
lists initial point respectively delta list obtained concatenating initial point 
initial points different result error object nats formulate goal relation notationally suppressed exists path empty path inner elements connects inner nodes repetition free 
note cases path total 
proposition 
xf rf assumptions jar tex ulrich berger delta rf rf rf delta yp zp assumption classical contains main idea proof path inner elements smaller smaller exist paths inner elements smaller assumption seen follows delta contain repetition common inner element 
contradict 
proof induction basis case 
rf definition 
case subcase 

rf subcase 

obtain 
step 
ih find case 

ih applied respectively paths form respectively inner elements smaller subcase 


assumption 
yp contradiction 
subcase 



assumption 
zp contradiction 

delta rf follows 
case 
rf 
concludes proof 
formal proof proposition extracted program original output names variables adjusted indentation added 
nat rec con eps con con eps eps eps eps jar tex warshall dickson eps eps eps dot program readable give primitive recursion equations function defined returning path inner elements smaller empty path 
suppress parameter relation delta remarks 
order get truly algorithm understood function computing theta matrix paths function arguments 

warshall algorithm considered broy pepper pfenning context program optimization 
pfenning informally reads algorithm similar proof claims done automatically 

dijkstra algorithm treated similarly schwichtenberg 
proof somewhat complex particular careful select right language 
program extracted proof readable longer 
jar tex ulrich berger 
classical intuitionistic proofs second example study non constructive proof special case dickson lemma 
order extract program need transform proof constructive 
describe general conditions classical existence proof proof yb transformed intuitionistic existence proof proof method referred friedman translation friedman 
independently investigated variants considered leivant troelstra van dalen 
murthy translation applied classical proof higman lemma 
results showed literal application leads explosion size translated proof turn extracted program 
reason refinement translation developed berger schwichtenberg 
firstly allow assumptions computational content secondly apply translation necessary atomic formulas called critical relation symbols see 
refinement extracted programs general simpler control structure efficient readable 
basic idea translation follows means godel known negative translation classical proof say atomic simplicity transformed proof minimal logic formula recall 
minimal logic propositional constant play special role may replaced arbitrary proposition example applying minimal proof yields proof minimal logic premise theorem intuitionistic logic obtain intuitionistic proof describe refinement set vv 
briefly vv 
suppose proof vv quantifier free set pi assumptions gamma quantifier free 
may assume purely implicational formulas logical equivalences jar tex warshall dickson push outside 
order specify atomic formulas affected translation set 
define set critical relation symbols smallest set satisfying conditions critical 
ii 
cm pm positive subformula formula critical critical 
vv define translation relative ae critical constructive proof vv generated help lemmas 
lemma 
derivable lemma 
derivation ideas sketched raw translation translation transforms proof vv derivation assumptions lemma assumptions provable pi assumptions come lemma premise provable 
obtain proof vv 
computational content dickson lemma section study non constructive proof special case dickson lemma 
proof informally detail immediately clear formalize 
sketch proof transformed constructive applying method discuss extracted program 
jar tex ulrich berger 
classical proof translation recall dickson lemma pairs sequences proposition 


analogously informal proof classical minimum principle saying property exists minimal measure function proof proposition 

consider set fx 

empty global minimum minimum principle 

minimal apply minimum principle 

third application minimum principle obtain element 
desired 
minimality proving 
suffices show 
holds minimality order transform proof constructive look set formulas steering translation 
consists kernel wrong assumption 

kernels pi assumptions tacitly proof furthermore proof minimum principle omitted assumptions jar tex warshall dickson taken account 
clearly critical relation symbol 
wrong assumption assumptions affected translation 
show constructive proof despite computational content interest 

extracted program program extracted constructive proof depends proof minimum principle turn proved induction 
minimum principle times obtain program containing nested subroutines called phi psi xi 
better readability informally communicate recursion equations 
program takes functions inputs notationally suppressed returns pair 
extracted solution phi phi nat 
nat nat theta nat phi dummy phi psi phi dummy nat theta nat arbitrary term extracted 
psi nat nat 
nat nat theta nat nat theta nat psi dummy psi xi xi nat nat 
nat nat theta nat nat nat nat theta nat xi dummy xi psi xi remarks 
program optimized suppressing recursion parameters serve counters 
furthermore argue zero cases may omitted 
get jar tex ulrich berger optimized solution oe oe oe optimized solution extracted directly proof follows observe minimum principle immediately follows principle wellfounded induction measure xp proof principle reduced ordinary zero successor induction realized primitive recursive functional 
possible realize wellfounded induction directly recursive functional nat nat nat hx rh formally primitive recursive total 
easily seen realize wellfounded induction 
shown extracted program realizer may substituted primitive recursive realizer wellfounded induction changing input output behavior program possibly making efficient 
example replacement results precisely optimized solution shown 

second order sub program extracted program oe probably easy understand 
transform transparent order iterative program 
modified solution mod mod mod mod mod lead jar tex warshall dickson runs finite sequences natural numbers denotes attached lead denote element element respectively 
emphasize correctness proof efficiency reason transformation necessary 

note course classical proof tells systematic search pair 

successful 
brute force search program doesn information proof extracted program chance efficient 
experiments random sequences confirmed precise analysis efficiency extracted program remains done 
clear notion efficiency programs infinite sequences inputs 

order obtain program proof dickson lemma careful formulating assertion example 
hope improve extraction procedure robust changes allows user formulate problem natural way 

years quite number formal systems extracting programs constructive non constructive proofs studied implemented 
interesting examples show method practical interest 
tried step direction showing fairly complicated proofs treated problems yield results 
involved example done system extraction normalization evaluation algorithm tait style normalization proof berger 
interesting examples program extraction studied group coquand see coquand persson type theoretic context kohlenbach kohlenbach dialectica interpretation 
contributions reported 
jar tex ulrich berger bates constable proofs programs 
acm transactions programming languages systems berger schwichtenberg proof theory program development system 
automated deduction basis applications volume ii systems implementation techniques bibel schmitt editors applied logic series kluwer academic publishers dordrecht schwichtenberg formal correctness proofs functional programs dijkstra algorithm case study 
proceedings nato advanced study institute computational logic held marktoberdorf germany july august berger program extraction normalization proofs 
typed lambda calculi applications tlca lncs berger schwichtenberg program extraction classical proofs 
leivant editor lncs bezem ramsey theorem pigeonhole principle intuitionistic mathematics 
university utrecht dept philosophy logic group preprint series broy pepper programming formal activity 
ieee transactions software engineering se coquand persson grobner bases type theory 
selected papers types lncs dickson finiteness odd perfect primitive abundant numbers distinct prime factors 
am 
math new kinds realizability 
abstracts th international congress logic methodology philosophy sciences friedman classically intuitionistically provably recursive functions 
higher set theory kohlenbach analysing proofs analysis 
logic foundations applications hodges hyland truss editors european logic colloquium keele oxford university press kreisel interpretation analysis means constructive functionals finite types 
constructivity mathematics north holland leivant syntactic translations provably recursive functions 
journal symbolic logic murthy extracting constructive content classical proofs 
phd thesis 
dep 
comp 
science cornell univ ithaca new york nash williams quasi ordering finite trees 
proc 
cambridge phil 
soc 
pfenning program development proof transformation 
logic computability editor contemporary mathematics schwichtenberg proofs programs 
proof theory aczel simmons wainer editors cambridge university press schwichtenberg wainer ordinal bounds programs 
feasible mathematics ii remmel editors birkhauser boston tait intensional interpretation functionals finite type journal symbolic logic troelstra van dalen constructivism mathematics vol 


north holland troelstra metamathematical investigations intuitionistic arithmetic analysis 
jar tex 
